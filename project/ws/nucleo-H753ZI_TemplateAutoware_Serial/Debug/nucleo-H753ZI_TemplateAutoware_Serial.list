
nucleo-H753ZI_TemplateAutoware_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022e04  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b64  080230a8  080230a8  000240a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08025c0c  08025c0c  00026c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000044  08025c14  08025c14  00026c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08025c58  08025c58  00026c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000130c  24000000  08025c5c  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000683e0  24001310  08026f68  00028310  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240696f0  08026f68  000286f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002830c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002fa0e  00000000  00000000  0002833a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005d7c  00000000  00000000  00057d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001fe0  00000000  00000000  0005dac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001883  00000000  00000000  0005faa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000445d2  00000000  00000000  0006132b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00037663  00000000  00000000  000a58fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019286b  00000000  00000000  000dcf60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000076  00000000  00000000  0026f7cb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009354  00000000  00000000  0026f844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007f  00000000  00000000  00278b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24001310 	.word	0x24001310
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802308c 	.word	0x0802308c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24001314 	.word	0x24001314
 80002dc:	0802308c 	.word	0x0802308c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003ce:	f000 b9b5 	b.w	800073c <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000464:	f000 b96a 	b.w	800073c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	460c      	mov	r4, r1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d14e      	bne.n	800052a <__udivmoddi4+0xaa>
 800048c:	4694      	mov	ip, r2
 800048e:	458c      	cmp	ip, r1
 8000490:	4686      	mov	lr, r0
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	d962      	bls.n	800055e <__udivmoddi4+0xde>
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	4091      	lsls	r1, r2
 80004a0:	fa20 f303 	lsr.w	r3, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	4319      	orrs	r1, r3
 80004aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f f68c 	uxth.w	r6, ip
 80004b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004be:	fb07 1114 	mls	r1, r7, r4, r1
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb04 f106 	mul.w	r1, r4, r6
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004d6:	f080 8112 	bcs.w	80006fe <__udivmoddi4+0x27e>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 810f 	bls.w	80006fe <__udivmoddi4+0x27e>
 80004e0:	3c02      	subs	r4, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	fa1f f38e 	uxth.w	r3, lr
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1110 	mls	r1, r7, r0, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb00 f606 	mul.w	r6, r0, r6
 80004fa:	429e      	cmp	r6, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x94>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000506:	f080 80fc 	bcs.w	8000702 <__udivmoddi4+0x282>
 800050a:	429e      	cmp	r6, r3
 800050c:	f240 80f9 	bls.w	8000702 <__udivmoddi4+0x282>
 8000510:	4463      	add	r3, ip
 8000512:	3802      	subs	r0, #2
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800051a:	2100      	movs	r1, #0
 800051c:	b11d      	cbz	r5, 8000526 <__udivmoddi4+0xa6>
 800051e:	40d3      	lsrs	r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	e9c5 3200 	strd	r3, r2, [r5]
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d905      	bls.n	800053a <__udivmoddi4+0xba>
 800052e:	b10d      	cbz	r5, 8000534 <__udivmoddi4+0xb4>
 8000530:	e9c5 0100 	strd	r0, r1, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	4608      	mov	r0, r1
 8000538:	e7f5      	b.n	8000526 <__udivmoddi4+0xa6>
 800053a:	fab3 f183 	clz	r1, r3
 800053e:	2900      	cmp	r1, #0
 8000540:	d146      	bne.n	80005d0 <__udivmoddi4+0x150>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d302      	bcc.n	800054c <__udivmoddi4+0xcc>
 8000546:	4290      	cmp	r0, r2
 8000548:	f0c0 80f0 	bcc.w	800072c <__udivmoddi4+0x2ac>
 800054c:	1a86      	subs	r6, r0, r2
 800054e:	eb64 0303 	sbc.w	r3, r4, r3
 8000552:	2001      	movs	r0, #1
 8000554:	2d00      	cmp	r5, #0
 8000556:	d0e6      	beq.n	8000526 <__udivmoddi4+0xa6>
 8000558:	e9c5 6300 	strd	r6, r3, [r5]
 800055c:	e7e3      	b.n	8000526 <__udivmoddi4+0xa6>
 800055e:	2a00      	cmp	r2, #0
 8000560:	f040 8090 	bne.w	8000684 <__udivmoddi4+0x204>
 8000564:	eba1 040c 	sub.w	r4, r1, ip
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	2101      	movs	r1, #1
 8000572:	fbb4 f6f8 	udiv	r6, r4, r8
 8000576:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057a:	fb08 4416 	mls	r4, r8, r6, r4
 800057e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000582:	fb07 f006 	mul.w	r0, r7, r6
 8000586:	4298      	cmp	r0, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x11c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000592:	d202      	bcs.n	800059a <__udivmoddi4+0x11a>
 8000594:	4298      	cmp	r0, r3
 8000596:	f200 80cd 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 800059a:	4626      	mov	r6, r4
 800059c:	1a1c      	subs	r4, r3, r0
 800059e:	fa1f f38e 	uxth.w	r3, lr
 80005a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005a6:	fb08 4410 	mls	r4, r8, r0, r4
 80005aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005ae:	fb00 f707 	mul.w	r7, r0, r7
 80005b2:	429f      	cmp	r7, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x148>
 80005b6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005be:	d202      	bcs.n	80005c6 <__udivmoddi4+0x146>
 80005c0:	429f      	cmp	r7, r3
 80005c2:	f200 80b0 	bhi.w	8000726 <__udivmoddi4+0x2a6>
 80005c6:	4620      	mov	r0, r4
 80005c8:	1bdb      	subs	r3, r3, r7
 80005ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005ce:	e7a5      	b.n	800051c <__udivmoddi4+0x9c>
 80005d0:	f1c1 0620 	rsb	r6, r1, #32
 80005d4:	408b      	lsls	r3, r1
 80005d6:	fa22 f706 	lsr.w	r7, r2, r6
 80005da:	431f      	orrs	r7, r3
 80005dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e0:	fa04 f301 	lsl.w	r3, r4, r1
 80005e4:	ea43 030c 	orr.w	r3, r3, ip
 80005e8:	40f4      	lsrs	r4, r6
 80005ea:	fa00 f801 	lsl.w	r8, r0, r1
 80005ee:	0c38      	lsrs	r0, r7, #16
 80005f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005f4:	fbb4 fef0 	udiv	lr, r4, r0
 80005f8:	fa1f fc87 	uxth.w	ip, r7
 80005fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000600:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000604:	fb0e f90c 	mul.w	r9, lr, ip
 8000608:	45a1      	cmp	r9, r4
 800060a:	fa02 f201 	lsl.w	r2, r2, r1
 800060e:	d90a      	bls.n	8000626 <__udivmoddi4+0x1a6>
 8000610:	193c      	adds	r4, r7, r4
 8000612:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000616:	f080 8084 	bcs.w	8000722 <__udivmoddi4+0x2a2>
 800061a:	45a1      	cmp	r9, r4
 800061c:	f240 8081 	bls.w	8000722 <__udivmoddi4+0x2a2>
 8000620:	f1ae 0e02 	sub.w	lr, lr, #2
 8000624:	443c      	add	r4, r7
 8000626:	eba4 0409 	sub.w	r4, r4, r9
 800062a:	fa1f f983 	uxth.w	r9, r3
 800062e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000632:	fb00 4413 	mls	r4, r0, r3, r4
 8000636:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800063a:	fb03 fc0c 	mul.w	ip, r3, ip
 800063e:	45a4      	cmp	ip, r4
 8000640:	d907      	bls.n	8000652 <__udivmoddi4+0x1d2>
 8000642:	193c      	adds	r4, r7, r4
 8000644:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000648:	d267      	bcs.n	800071a <__udivmoddi4+0x29a>
 800064a:	45a4      	cmp	ip, r4
 800064c:	d965      	bls.n	800071a <__udivmoddi4+0x29a>
 800064e:	3b02      	subs	r3, #2
 8000650:	443c      	add	r4, r7
 8000652:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000656:	fba0 9302 	umull	r9, r3, r0, r2
 800065a:	eba4 040c 	sub.w	r4, r4, ip
 800065e:	429c      	cmp	r4, r3
 8000660:	46ce      	mov	lr, r9
 8000662:	469c      	mov	ip, r3
 8000664:	d351      	bcc.n	800070a <__udivmoddi4+0x28a>
 8000666:	d04e      	beq.n	8000706 <__udivmoddi4+0x286>
 8000668:	b155      	cbz	r5, 8000680 <__udivmoddi4+0x200>
 800066a:	ebb8 030e 	subs.w	r3, r8, lr
 800066e:	eb64 040c 	sbc.w	r4, r4, ip
 8000672:	fa04 f606 	lsl.w	r6, r4, r6
 8000676:	40cb      	lsrs	r3, r1
 8000678:	431e      	orrs	r6, r3
 800067a:	40cc      	lsrs	r4, r1
 800067c:	e9c5 6400 	strd	r6, r4, [r5]
 8000680:	2100      	movs	r1, #0
 8000682:	e750      	b.n	8000526 <__udivmoddi4+0xa6>
 8000684:	f1c2 0320 	rsb	r3, r2, #32
 8000688:	fa20 f103 	lsr.w	r1, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	fa24 f303 	lsr.w	r3, r4, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	430c      	orrs	r4, r1
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a0:	fa1f f78c 	uxth.w	r7, ip
 80006a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a8:	fb08 3110 	mls	r1, r8, r0, r3
 80006ac:	0c23      	lsrs	r3, r4, #16
 80006ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b2:	fb00 f107 	mul.w	r1, r0, r7
 80006b6:	4299      	cmp	r1, r3
 80006b8:	d908      	bls.n	80006cc <__udivmoddi4+0x24c>
 80006ba:	eb1c 0303 	adds.w	r3, ip, r3
 80006be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006c2:	d22c      	bcs.n	800071e <__udivmoddi4+0x29e>
 80006c4:	4299      	cmp	r1, r3
 80006c6:	d92a      	bls.n	800071e <__udivmoddi4+0x29e>
 80006c8:	3802      	subs	r0, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006d4:	fb08 3311 	mls	r3, r8, r1, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb01 f307 	mul.w	r3, r1, r7
 80006e0:	42a3      	cmp	r3, r4
 80006e2:	d908      	bls.n	80006f6 <__udivmoddi4+0x276>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006ec:	d213      	bcs.n	8000716 <__udivmoddi4+0x296>
 80006ee:	42a3      	cmp	r3, r4
 80006f0:	d911      	bls.n	8000716 <__udivmoddi4+0x296>
 80006f2:	3902      	subs	r1, #2
 80006f4:	4464      	add	r4, ip
 80006f6:	1ae4      	subs	r4, r4, r3
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e739      	b.n	8000572 <__udivmoddi4+0xf2>
 80006fe:	4604      	mov	r4, r0
 8000700:	e6f0      	b.n	80004e4 <__udivmoddi4+0x64>
 8000702:	4608      	mov	r0, r1
 8000704:	e706      	b.n	8000514 <__udivmoddi4+0x94>
 8000706:	45c8      	cmp	r8, r9
 8000708:	d2ae      	bcs.n	8000668 <__udivmoddi4+0x1e8>
 800070a:	ebb9 0e02 	subs.w	lr, r9, r2
 800070e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000712:	3801      	subs	r0, #1
 8000714:	e7a8      	b.n	8000668 <__udivmoddi4+0x1e8>
 8000716:	4631      	mov	r1, r6
 8000718:	e7ed      	b.n	80006f6 <__udivmoddi4+0x276>
 800071a:	4603      	mov	r3, r0
 800071c:	e799      	b.n	8000652 <__udivmoddi4+0x1d2>
 800071e:	4630      	mov	r0, r6
 8000720:	e7d4      	b.n	80006cc <__udivmoddi4+0x24c>
 8000722:	46d6      	mov	lr, sl
 8000724:	e77f      	b.n	8000626 <__udivmoddi4+0x1a6>
 8000726:	4463      	add	r3, ip
 8000728:	3802      	subs	r0, #2
 800072a:	e74d      	b.n	80005c8 <__udivmoddi4+0x148>
 800072c:	4606      	mov	r6, r0
 800072e:	4623      	mov	r3, r4
 8000730:	4608      	mov	r0, r1
 8000732:	e70f      	b.n	8000554 <__udivmoddi4+0xd4>
 8000734:	3e02      	subs	r6, #2
 8000736:	4463      	add	r3, ip
 8000738:	e730      	b.n	800059c <__udivmoddi4+0x11c>
 800073a:	bf00      	nop

0800073c <__aeabi_idiv0>:
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	@ 0x28
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
 8000760:	615a      	str	r2, [r3, #20]
 8000762:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000764:	4b37      	ldr	r3, [pc, #220]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000766:	4a38      	ldr	r2, [pc, #224]	@ (8000848 <MX_ADC1_Init+0x108>)
 8000768:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800076a:	4b36      	ldr	r3, [pc, #216]	@ (8000844 <MX_ADC1_Init+0x104>)
 800076c:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000770:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000772:	4b34      	ldr	r3, [pc, #208]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000778:	4b32      	ldr	r3, [pc, #200]	@ (8000844 <MX_ADC1_Init+0x104>)
 800077a:	2201      	movs	r2, #1
 800077c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077e:	4b31      	ldr	r3, [pc, #196]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000780:	2204      	movs	r2, #4
 8000782:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000784:	4b2f      	ldr	r3, [pc, #188]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000786:	2200      	movs	r2, #0
 8000788:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800078a:	4b2e      	ldr	r3, [pc, #184]	@ (8000844 <MX_ADC1_Init+0x104>)
 800078c:	2201      	movs	r2, #1
 800078e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000790:	4b2c      	ldr	r3, [pc, #176]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000792:	2202      	movs	r2, #2
 8000794:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000796:	4b2b      	ldr	r3, [pc, #172]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000798:	2200      	movs	r2, #0
 800079a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079c:	4b29      	ldr	r3, [pc, #164]	@ (8000844 <MX_ADC1_Init+0x104>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a2:	4b28      	ldr	r3, [pc, #160]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80007a8:	4b26      	ldr	r3, [pc, #152]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007aa:	2203      	movs	r2, #3
 80007ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ae:	4b25      	ldr	r3, [pc, #148]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007b4:	4b23      	ldr	r3, [pc, #140]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007ba:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007bc:	2200      	movs	r2, #0
 80007be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c2:	4820      	ldr	r0, [pc, #128]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007c4:	f003 f832 	bl	800382c <HAL_ADC_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007ce:	f001 f963 	bl	8001a98 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	4819      	ldr	r0, [pc, #100]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007de:	f004 f855 	bl	800488c <HAL_ADCEx_MultiModeConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007e8:	f001 f956 	bl	8001a98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007ec:	4b17      	ldr	r3, [pc, #92]	@ (800084c <MX_ADC1_Init+0x10c>)
 80007ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f0:	2306      	movs	r3, #6
 80007f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80007f4:	2306      	movs	r3, #6
 80007f6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80007fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007fe:	2304      	movs	r3, #4
 8000800:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080a:	463b      	mov	r3, r7
 800080c:	4619      	mov	r1, r3
 800080e:	480d      	ldr	r0, [pc, #52]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000810:	f003 fa90 	bl	8003d34 <HAL_ADC_ConfigChannel>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800081a:	f001 f93d 	bl	8001a98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800081e:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <MX_ADC1_Init+0x110>)
 8000820:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000822:	230c      	movs	r3, #12
 8000824:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000826:	463b      	mov	r3, r7
 8000828:	4619      	mov	r1, r3
 800082a:	4806      	ldr	r0, [pc, #24]	@ (8000844 <MX_ADC1_Init+0x104>)
 800082c:	f003 fa82 	bl	8003d34 <HAL_ADC_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000836:	f001 f92f 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	@ 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2400132c 	.word	0x2400132c
 8000848:	40022000 	.word	0x40022000
 800084c:	19200040 	.word	0x19200040
 8000850:	08600004 	.word	0x08600004

08000854 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b0ba      	sub	sp, #232	@ 0xe8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	22c0      	movs	r2, #192	@ 0xc0
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f021 fcab 	bl	80221d0 <memset>
  if(adcHandle->Instance==ADC1)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a45      	ldr	r2, [pc, #276]	@ (8000994 <HAL_ADC_MspInit+0x140>)
 8000880:	4293      	cmp	r3, r2
 8000882:	f040 8083 	bne.w	800098c <HAL_ADC_MspInit+0x138>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000886:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800088a:	f04f 0300 	mov.w	r3, #0
 800088e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 37;
 8000896:	2325      	movs	r3, #37	@ 0x25
 8000898:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800089a:	2302      	movs	r3, #2
 800089c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800089e:	2302      	movs	r3, #2
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80008a6:	2380      	movs	r3, #128	@ 0x80
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80008aa:	2320      	movs	r3, #32
 80008ac:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 80008ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	4618      	mov	r0, r3
 80008c0:	f008 fa30 	bl	8008d24 <HAL_RCCEx_PeriphCLKConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 80008ca:	f001 f8e5 	bl	8001a98 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008ce:	4b32      	ldr	r3, [pc, #200]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008d4:	4a30      	ldr	r2, [pc, #192]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008d6:	f043 0320 	orr.w	r3, r3, #32
 80008da:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80008de:	4b2e      	ldr	r3, [pc, #184]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008e4:	f003 0320 	and.w	r3, r3, #32
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f2:	4a29      	ldr	r2, [pc, #164]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008f4:	f043 0320 	orr.w	r3, r3, #32
 80008f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008fc:	4b26      	ldr	r3, [pc, #152]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000902:	f003 0320 	and.w	r3, r3, #32
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800090a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800090e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000912:	2303      	movs	r3, #3
 8000914:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800091e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000922:	4619      	mov	r1, r3
 8000924:	481d      	ldr	r0, [pc, #116]	@ (800099c <HAL_ADC_MspInit+0x148>)
 8000926:	f006 ffb7 	bl	8007898 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800092a:	4b1d      	ldr	r3, [pc, #116]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800092c:	4a1d      	ldr	r2, [pc, #116]	@ (80009a4 <HAL_ADC_MspInit+0x150>)
 800092e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000930:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000932:	2209      	movs	r2, #9
 8000934:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800093c:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000944:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000948:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800094c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000950:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000952:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000954:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000958:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800095c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000960:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000962:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000964:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000968:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000970:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000972:	f004 f949 	bl	8004c08 <HAL_DMA_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 800097c:	f001 f88c 	bl	8001a98 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a07      	ldr	r2, [pc, #28]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000984:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000986:	4a06      	ldr	r2, [pc, #24]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800098c:	bf00      	nop
 800098e:	37e8      	adds	r7, #232	@ 0xe8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40022000 	.word	0x40022000
 8000998:	58024400 	.word	0x58024400
 800099c:	58021400 	.word	0x58021400
 80009a0:	24001390 	.word	0x24001390
 80009a4:	40020410 	.word	0x40020410

080009a8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	@ 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80009b4:	f00e fff2 	bl	800f99c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80009b8:	4b5a      	ldr	r3, [pc, #360]	@ (8000b24 <pvPortMallocMicroROS+0x17c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d101      	bne.n	80009c4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80009c0:	f000 f986 	bl	8000cd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80009c4:	4b58      	ldr	r3, [pc, #352]	@ (8000b28 <pvPortMallocMicroROS+0x180>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4013      	ands	r3, r2
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	f040 8090 	bne.w	8000af2 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d01e      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80009d8:	2208      	movs	r2, #8
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d015      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f023 0307 	bic.w	r3, r3, #7
 80009f0:	3308      	adds	r3, #8
 80009f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d00b      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80009fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a02:	f383 8811 	msr	BASEPRI, r3
 8000a06:	f3bf 8f6f 	isb	sy
 8000a0a:	f3bf 8f4f 	dsb	sy
 8000a0e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000a10:	bf00      	nop
 8000a12:	bf00      	nop
 8000a14:	e7fd      	b.n	8000a12 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d06a      	beq.n	8000af2 <pvPortMallocMicroROS+0x14a>
 8000a1c:	4b43      	ldr	r3, [pc, #268]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d865      	bhi.n	8000af2 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000a26:	4b42      	ldr	r3, [pc, #264]	@ (8000b30 <pvPortMallocMicroROS+0x188>)
 8000a28:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000a2a:	4b41      	ldr	r3, [pc, #260]	@ (8000b30 <pvPortMallocMicroROS+0x188>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a30:	e004      	b.n	8000a3c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a34:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d903      	bls.n	8000a4e <pvPortMallocMicroROS+0xa6>
 8000a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d1f1      	bne.n	8000a32 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000a4e:	4b35      	ldr	r3, [pc, #212]	@ (8000b24 <pvPortMallocMicroROS+0x17c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d04c      	beq.n	8000af2 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2208      	movs	r2, #8
 8000a5e:	4413      	add	r3, r2
 8000a60:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	6a3b      	ldr	r3, [r7, #32]
 8000a68:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	1ad2      	subs	r2, r2, r3
 8000a72:	2308      	movs	r3, #8
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d920      	bls.n	8000abc <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	f003 0307 	and.w	r3, r3, #7
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d00b      	beq.n	8000aa4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a90:	f383 8811 	msr	BASEPRI, r3
 8000a94:	f3bf 8f6f 	isb	sy
 8000a98:	f3bf 8f4f 	dsb	sy
 8000a9c:	613b      	str	r3, [r7, #16]
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa6:	685a      	ldr	r2, [r3, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	1ad2      	subs	r2, r2, r3
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000ab6:	69b8      	ldr	r0, [r7, #24]
 8000ab8:	f000 f96e 	bl	8000d98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	4a19      	ldr	r2, [pc, #100]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000ac8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000aca:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <pvPortMallocMicroROS+0x18c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d203      	bcs.n	8000ade <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a16      	ldr	r2, [pc, #88]	@ (8000b34 <pvPortMallocMicroROS+0x18c>)
 8000adc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <pvPortMallocMicroROS+0x180>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000af2:	f00e ff61 	bl	800f9b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	f003 0307 	and.w	r3, r3, #7
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d00b      	beq.n	8000b18 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b04:	f383 8811 	msr	BASEPRI, r3
 8000b08:	f3bf 8f6f 	isb	sy
 8000b0c:	f3bf 8f4f 	dsb	sy
 8000b10:	60fb      	str	r3, [r7, #12]
}
 8000b12:	bf00      	nop
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000b18:	69fb      	ldr	r3, [r7, #28]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3728      	adds	r7, #40	@ 0x28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	24032150 	.word	0x24032150
 8000b28:	2403215c 	.word	0x2403215c
 8000b2c:	24032154 	.word	0x24032154
 8000b30:	24032148 	.word	0x24032148
 8000b34:	24032158 	.word	0x24032158

08000b38 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d04a      	beq.n	8000be0 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	425b      	negs	r3, r3
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	4413      	add	r3, r2
 8000b52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	685a      	ldr	r2, [r3, #4]
 8000b5c:	4b22      	ldr	r3, [pc, #136]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4013      	ands	r3, r2
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d10b      	bne.n	8000b7e <vPortFreeMicroROS+0x46>
	__asm volatile
 8000b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b6a:	f383 8811 	msr	BASEPRI, r3
 8000b6e:	f3bf 8f6f 	isb	sy
 8000b72:	f3bf 8f4f 	dsb	sy
 8000b76:	60fb      	str	r3, [r7, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	e7fd      	b.n	8000b7a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d00b      	beq.n	8000b9e <vPortFreeMicroROS+0x66>
	__asm volatile
 8000b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b8a:	f383 8811 	msr	BASEPRI, r3
 8000b8e:	f3bf 8f6f 	isb	sy
 8000b92:	f3bf 8f4f 	dsb	sy
 8000b96:	60bb      	str	r3, [r7, #8]
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	e7fd      	b.n	8000b9a <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d019      	beq.n	8000be0 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d115      	bne.n	8000be0 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000bc4:	f00e feea 	bl	800f99c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	685a      	ldr	r2, [r3, #4]
 8000bcc:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <vPortFreeMicroROS+0xb4>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a06      	ldr	r2, [pc, #24]	@ (8000bec <vPortFreeMicroROS+0xb4>)
 8000bd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000bd6:	6938      	ldr	r0, [r7, #16]
 8000bd8:	f000 f8de 	bl	8000d98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000bdc:	f00e feec 	bl	800f9b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000be0:	bf00      	nop
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	2403215c 	.word	0x2403215c
 8000bec:	24032154 	.word	0x24032154

08000bf0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b087      	sub	sp, #28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	425b      	negs	r3, r3
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	4413      	add	r3, r2
 8000c04:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <getBlockSize+0x38>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	4013      	ands	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]

	return count;
 8000c18:	68fb      	ldr	r3, [r7, #12]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	371c      	adds	r7, #28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	2403215c 	.word	0x2403215c

08000c2c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c36:	f00e feb1 	bl	800f99c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000c3a:	6838      	ldr	r0, [r7, #0]
 8000c3c:	f7ff feb4 	bl	80009a8 <pvPortMallocMicroROS>
 8000c40:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d017      	beq.n	8000c78 <pvPortReallocMicroROS+0x4c>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d014      	beq.n	8000c78 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ffce 	bl	8000bf0 <getBlockSize>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2208      	movs	r2, #8
 8000c58:	1a9b      	subs	r3, r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d201      	bcs.n	8000c68 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	68b8      	ldr	r0, [r7, #8]
 8000c6e:	f021 fbce 	bl	802240e <memcpy>

		vPortFreeMicroROS(pv);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff ff60 	bl	8000b38 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000c78:	f00e fe9e 	bl	800f9b8 <xTaskResumeAll>

	return newmem;
 8000c7c:	68bb      	ldr	r3, [r7, #8]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c90:	f00e fe84 	bl	800f99c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	fb02 f303 	mul.w	r3, r2, r3
 8000c9c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff fe82 	bl	80009a8 <pvPortMallocMicroROS>
 8000ca4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000caa:	e004      	b.n	8000cb6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	613a      	str	r2, [r7, #16]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	1e5a      	subs	r2, r3, #1
 8000cba:	617a      	str	r2, [r7, #20]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d1f5      	bne.n	8000cac <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000cc0:	f00e fe7a 	bl	800f9b8 <xTaskResumeAll>
  	return mem;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000cd6:	4b29      	ldr	r3, [pc, #164]	@ (8000d7c <prvHeapInit+0xac>)
 8000cd8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000cda:	4b29      	ldr	r3, [pc, #164]	@ (8000d80 <prvHeapInit+0xb0>)
 8000cdc:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f003 0307 	and.w	r3, r3, #7
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00c      	beq.n	8000d02 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	3307      	adds	r3, #7
 8000cec:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f023 0307 	bic.w	r3, r3, #7
 8000cf4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	4a20      	ldr	r2, [pc, #128]	@ (8000d80 <prvHeapInit+0xb0>)
 8000cfe:	4413      	add	r3, r2
 8000d00:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000d06:	4a1f      	ldr	r2, [pc, #124]	@ (8000d84 <prvHeapInit+0xb4>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <prvHeapInit+0xb4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68ba      	ldr	r2, [r7, #8]
 8000d16:	4413      	add	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000d1a:	2208      	movs	r2, #8
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	1a9b      	subs	r3, r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f023 0307 	bic.w	r3, r3, #7
 8000d28:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	4a16      	ldr	r2, [pc, #88]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d2e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000d30:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2200      	movs	r2, #0
 8000d36:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000d38:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	1ad2      	subs	r2, r2, r3
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8000d8c <prvHeapInit+0xbc>)
 8000d5c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	4a0b      	ldr	r2, [pc, #44]	@ (8000d90 <prvHeapInit+0xc0>)
 8000d64:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000d66:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <prvHeapInit+0xc4>)
 8000d68:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000d6c:	601a      	str	r2, [r3, #0]
}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	00030d40 	.word	0x00030d40
 8000d80:	24001408 	.word	0x24001408
 8000d84:	24032148 	.word	0x24032148
 8000d88:	24032150 	.word	0x24032150
 8000d8c:	24032158 	.word	0x24032158
 8000d90:	24032154 	.word	0x24032154
 8000d94:	2403215c 	.word	0x2403215c

08000d98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000da0:	4b28      	ldr	r3, [pc, #160]	@ (8000e44 <prvInsertBlockIntoFreeList+0xac>)
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	e002      	b.n	8000dac <prvInsertBlockIntoFreeList+0x14>
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d8f7      	bhi.n	8000da6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d108      	bne.n	8000dda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	441a      	add	r2, r3
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	441a      	add	r2, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d118      	bne.n	8000e20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <prvInsertBlockIntoFreeList+0xb0>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d00d      	beq.n	8000e16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	441a      	add	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	e008      	b.n	8000e28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000e16:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <prvInsertBlockIntoFreeList+0xb0>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	e003      	b.n	8000e28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d002      	beq.n	8000e36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	24032148 	.word	0x24032148
 8000e48:	24032150 	.word	0x24032150

08000e4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e52:	4b21      	ldr	r3, [pc, #132]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e58:	4a1f      	ldr	r2, [pc, #124]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e62:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e70:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e76:	4a18      	ldr	r2, [pc, #96]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e80:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2105      	movs	r1, #5
 8000e92:	200b      	movs	r0, #11
 8000e94:	f003 fe90 	bl	8004bb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e98:	200b      	movs	r0, #11
 8000e9a:	f003 fea7 	bl	8004bec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2105      	movs	r1, #5
 8000ea2:	200c      	movs	r0, #12
 8000ea4:	f003 fe88 	bl	8004bb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ea8:	200c      	movs	r0, #12
 8000eaa:	f003 fe9f 	bl	8004bec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2105      	movs	r1, #5
 8000eb2:	2039      	movs	r0, #57	@ 0x39
 8000eb4:	f003 fe80 	bl	8004bb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000eb8:	2039      	movs	r0, #57	@ 0x39
 8000eba:	f003 fe97 	bl	8004bec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2105      	movs	r1, #5
 8000ec2:	203a      	movs	r0, #58	@ 0x3a
 8000ec4:	f003 fe78 	bl	8004bb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000ec8:	203a      	movs	r0, #58	@ 0x3a
 8000eca:	f003 fe8f 	bl	8004bec <HAL_NVIC_EnableIRQ>

}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	58024400 	.word	0x58024400

08000edc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000eea:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000eec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ef0:	4904      	ldr	r1, [pc, #16]	@ (8000f04 <cubemx_transport_open+0x28>)
 8000ef2:	68f8      	ldr	r0, [r7, #12]
 8000ef4:	f00a ffb2 	bl	800be5c <HAL_UART_Receive_DMA>
    return true;
 8000ef8:	2301      	movs	r3, #1
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	24032160 	.word	0x24032160

08000f08 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f16:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f00a ffeb 	bl	800bef4 <HAL_UART_DMAStop>
    return true;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f3c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f44:	2b20      	cmp	r3, #32
 8000f46:	d11b      	bne.n	8000f80 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	68b9      	ldr	r1, [r7, #8]
 8000f50:	6978      	ldr	r0, [r7, #20]
 8000f52:	f00a ff03 	bl	800bd5c <HAL_UART_Transmit_DMA>
 8000f56:	4603      	mov	r3, r0
 8000f58:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000f5a:	e002      	b.n	8000f62 <cubemx_transport_write+0x3a>
            osDelay(1);
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f00d f991 	bl	800e284 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000f62:	7cfb      	ldrb	r3, [r7, #19]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d104      	bne.n	8000f72 <cubemx_transport_write+0x4a>
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f6e:	2b20      	cmp	r3, #32
 8000f70:	d1f4      	bne.n	8000f5c <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000f72:	7cfb      	ldrb	r3, [r7, #19]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <cubemx_transport_write+0x54>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	e002      	b.n	8000f82 <cubemx_transport_write+0x5a>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	e000      	b.n	8000f82 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000f80:	2300      	movs	r3, #0
    }
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000fa0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa6:	b672      	cpsid	i
}
 8000fa8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a5a      	ldr	r2, [pc, #360]	@ (800111c <cubemx_transport_read+0x190>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d068      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a57      	ldr	r2, [pc, #348]	@ (8001120 <cubemx_transport_read+0x194>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d061      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a55      	ldr	r2, [pc, #340]	@ (8001124 <cubemx_transport_read+0x198>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d05a      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a52      	ldr	r2, [pc, #328]	@ (8001128 <cubemx_transport_read+0x19c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d053      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a50      	ldr	r2, [pc, #320]	@ (800112c <cubemx_transport_read+0x1a0>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d04c      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a4d      	ldr	r2, [pc, #308]	@ (8001130 <cubemx_transport_read+0x1a4>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d045      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a4b      	ldr	r2, [pc, #300]	@ (8001134 <cubemx_transport_read+0x1a8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d03e      	beq.n	800108a <cubemx_transport_read+0xfe>
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a48      	ldr	r2, [pc, #288]	@ (8001138 <cubemx_transport_read+0x1ac>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d037      	beq.n	800108a <cubemx_transport_read+0xfe>
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a46      	ldr	r2, [pc, #280]	@ (800113c <cubemx_transport_read+0x1b0>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d030      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a43      	ldr	r2, [pc, #268]	@ (8001140 <cubemx_transport_read+0x1b4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d029      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a41      	ldr	r2, [pc, #260]	@ (8001144 <cubemx_transport_read+0x1b8>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d022      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a3e      	ldr	r2, [pc, #248]	@ (8001148 <cubemx_transport_read+0x1bc>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d01b      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a3c      	ldr	r2, [pc, #240]	@ (800114c <cubemx_transport_read+0x1c0>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d014      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a39      	ldr	r2, [pc, #228]	@ (8001150 <cubemx_transport_read+0x1c4>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d00d      	beq.n	800108a <cubemx_transport_read+0xfe>
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a37      	ldr	r2, [pc, #220]	@ (8001154 <cubemx_transport_read+0x1c8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d006      	beq.n	800108a <cubemx_transport_read+0xfe>
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a34      	ldr	r2, [pc, #208]	@ (8001158 <cubemx_transport_read+0x1cc>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d107      	bne.n	800109a <cubemx_transport_read+0x10e>
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001098:	e006      	b.n	80010a8 <cubemx_transport_read+0x11c>
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80010a8:	4a2c      	ldr	r2, [pc, #176]	@ (800115c <cubemx_transport_read+0x1d0>)
 80010aa:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80010ac:	b662      	cpsie	i
}
 80010ae:	bf00      	nop
        __enable_irq();
        ms_used++;
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	3301      	adds	r3, #1
 80010b4:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f00d f8e4 	bl	800e284 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80010bc:	4b28      	ldr	r3, [pc, #160]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b26      	ldr	r3, [pc, #152]	@ (800115c <cubemx_transport_read+0x1d0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d104      	bne.n	80010d2 <cubemx_transport_read+0x146>
 80010c8:	69fa      	ldr	r2, [r7, #28]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	f6ff af6a 	blt.w	8000fa6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80010d6:	e011      	b.n	80010fc <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 80010d8:	4b21      	ldr	r3, [pc, #132]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	440b      	add	r3, r1
 80010e2:	4920      	ldr	r1, [pc, #128]	@ (8001164 <cubemx_transport_read+0x1d8>)
 80010e4:	5c8a      	ldrb	r2, [r1, r2]
 80010e6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80010e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010f4:	6013      	str	r3, [r2, #0]
        wrote++;
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	3301      	adds	r3, #1
 80010fa:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80010fc:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b16      	ldr	r3, [pc, #88]	@ (800115c <cubemx_transport_read+0x1d0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	d003      	beq.n	8001110 <cubemx_transport_read+0x184>
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	429a      	cmp	r2, r3
 800110e:	d3e3      	bcc.n	80010d8 <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 8001110:	69bb      	ldr	r3, [r7, #24]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40020010 	.word	0x40020010
 8001120:	40020028 	.word	0x40020028
 8001124:	40020040 	.word	0x40020040
 8001128:	40020058 	.word	0x40020058
 800112c:	40020070 	.word	0x40020070
 8001130:	40020088 	.word	0x40020088
 8001134:	400200a0 	.word	0x400200a0
 8001138:	400200b8 	.word	0x400200b8
 800113c:	40020410 	.word	0x40020410
 8001140:	40020428 	.word	0x40020428
 8001144:	40020440 	.word	0x40020440
 8001148:	40020458 	.word	0x40020458
 800114c:	40020470 	.word	0x40020470
 8001150:	40020488 	.word	0x40020488
 8001154:	400204a0 	.word	0x400204a0
 8001158:	400204b8 	.word	0x400204b8
 800115c:	24032964 	.word	0x24032964
 8001160:	24032960 	.word	0x24032960
 8001164:	24032160 	.word	0x24032160

08001168 <timer_watchdog_agent_callback>:
extern osThreadId_t TaskMicroAutowaHandle;

// Timer callbacks

void timer_watchdog_agent_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	e9c7 2300 	strd	r2, r3, [r7]
	
  if(RMW_RET_OK != rmw_uros_ping_agent(20, 1)) 
 8001174:	2101      	movs	r1, #1
 8001176:	2014      	movs	r0, #20
 8001178:	f014 f9cc 	bl	8015514 <rmw_uros_ping_agent>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00b      	beq.n	800119a <timer_watchdog_agent_callback+0x32>
  {
    osThreadFlagsSet(TaskControleHandle, TO_MANUAL_MODE_FLAG);
 8001182:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <timer_watchdog_agent_callback+0x3c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2110      	movs	r1, #16
 8001188:	4618      	mov	r0, r3
 800118a:	f00c ff8b 	bl	800e0a4 <osThreadFlagsSet>
    osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <timer_watchdog_agent_callback+0x40>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2110      	movs	r1, #16
 8001194:	4618      	mov	r0, r3
 8001196:	f00c ff85 	bl	800e0a4 <osThreadFlagsSet>
  } 

}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	24032968 	.word	0x24032968
 80011a8:	2403296c 	.word	0x2403296c

080011ac <clock_callback>:
  * @brief  ROS topic subscriber callback to recieve current timestamp
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void clock_callback(const void * xMsgIn)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  const rosgraph_msgs__msg__Clock * clock_msg_ = (const rosgraph_msgs__msg__Clock * )xMsgIn;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0b1 << 0);
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <clock_callback+0x28>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4b04      	ldr	r3, [pc, #16]	@ (80011d4 <clock_callback+0x28>)
 80011c4:	701a      	strb	r2, [r3, #0]
}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	240329ea 	.word	0x240329ea

080011d8 <control_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the control commands and save in control_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void control_cmd_callback(const void * xMsgIn)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  const autoware_auto_control_msgs__msg__AckermannControlCommand * control_cmd_msg_ = (const autoware_auto_control_msgs__msg__AckermannControlCommand * )xMsgIn;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0b1 << 1);
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <control_cmd_callback+0x28>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <control_cmd_callback+0x28>)
 80011f0:	701a      	strb	r2, [r3, #0]
}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	240329ea 	.word	0x240329ea

08001204 <control_mode_cmd_callback>:
  * @param  xRequestMsg: pointer to the request made for the server.
  * @param  xResponseMsg: pointer to the response gave by the server.
  * @retval None
  */
void control_mode_cmd_callback(const void * xRequestMsg, autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response * xResponseMsg)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  const autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request * control_mode_request_msg_ = (const autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request * )xRequestMsg;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	60fb      	str	r3, [r7, #12]

  if(AUTOWARE == control_mode_request_msg_->mode)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	7a1b      	ldrb	r3, [r3, #8]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d10c      	bne.n	8001234 <control_mode_cmd_callback+0x30>
  {
    osThreadFlagsSet(TaskControleHandle, TO_AUTOWARE_MODE_FLAG);
 800121a:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <control_mode_cmd_callback+0x60>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2101      	movs	r1, #1
 8001220:	4618      	mov	r0, r3
 8001222:	f00c ff3f 	bl	800e0a4 <osThreadFlagsSet>
    osThreadFlagsSet(TaskMicroAutowaHandle, TO_AUTOWARE_MODE_FLAG);
 8001226:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <control_mode_cmd_callback+0x64>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2101      	movs	r1, #1
 800122c:	4618      	mov	r0, r3
 800122e:	f00c ff39 	bl	800e0a4 <osThreadFlagsSet>
 8001232:	e00f      	b.n	8001254 <control_mode_cmd_callback+0x50>
  }
  else if(MANUAL == control_mode_request_msg_->mode)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	7a1b      	ldrb	r3, [r3, #8]
 8001238:	2b04      	cmp	r3, #4
 800123a:	d10b      	bne.n	8001254 <control_mode_cmd_callback+0x50>
  {
    osThreadFlagsSet(TaskControleHandle, TO_MANUAL_MODE_FLAG);
 800123c:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <control_mode_cmd_callback+0x60>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2110      	movs	r1, #16
 8001242:	4618      	mov	r0, r3
 8001244:	f00c ff2e 	bl	800e0a4 <osThreadFlagsSet>
    osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 8001248:	4b07      	ldr	r3, [pc, #28]	@ (8001268 <control_mode_cmd_callback+0x64>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2110      	movs	r1, #16
 800124e:	4618      	mov	r0, r3
 8001250:	f00c ff28 	bl	800e0a4 <osThreadFlagsSet>
  }

  xResponseMsg->success = true;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	2201      	movs	r2, #1
 8001258:	701a      	strb	r2, [r3, #0]
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	24032968 	.word	0x24032968
 8001268:	2403296c 	.word	0x2403296c

0800126c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexControlSignal */
  MutexControlSignalHandle = osMutexNew(&MutexControlSignal_attributes);
 8001270:	480e      	ldr	r0, [pc, #56]	@ (80012ac <MX_FREERTOS_Init+0x40>)
 8001272:	f00d f822 	bl	800e2ba <osMutexNew>
 8001276:	4603      	mov	r3, r0
 8001278:	4a0d      	ldr	r2, [pc, #52]	@ (80012b0 <MX_FREERTOS_Init+0x44>)
 800127a:	6013      	str	r3, [r2, #0]

  /* creation of MutexControlAction */
  MutexControlActionHandle = osMutexNew(&MutexControlAction_attributes);
 800127c:	480d      	ldr	r0, [pc, #52]	@ (80012b4 <MX_FREERTOS_Init+0x48>)
 800127e:	f00d f81c 	bl	800e2ba <osMutexNew>
 8001282:	4603      	mov	r3, r0
 8001284:	4a0c      	ldr	r2, [pc, #48]	@ (80012b8 <MX_FREERTOS_Init+0x4c>)
 8001286:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskControle */
  TaskControleHandle = osThreadNew(StartTaskControle, NULL, &TaskControle_attributes);
 8001288:	4a0c      	ldr	r2, [pc, #48]	@ (80012bc <MX_FREERTOS_Init+0x50>)
 800128a:	2100      	movs	r1, #0
 800128c:	480c      	ldr	r0, [pc, #48]	@ (80012c0 <MX_FREERTOS_Init+0x54>)
 800128e:	f00c fe76 	bl	800df7e <osThreadNew>
 8001292:	4603      	mov	r3, r0
 8001294:	4a0b      	ldr	r2, [pc, #44]	@ (80012c4 <MX_FREERTOS_Init+0x58>)
 8001296:	6013      	str	r3, [r2, #0]

  /* creation of TaskMicroAutowa */
  TaskMicroAutowaHandle = osThreadNew(StartMicroAutoware, NULL, &TaskMicroAutowa_attributes);
 8001298:	4a0b      	ldr	r2, [pc, #44]	@ (80012c8 <MX_FREERTOS_Init+0x5c>)
 800129a:	2100      	movs	r1, #0
 800129c:	480b      	ldr	r0, [pc, #44]	@ (80012cc <MX_FREERTOS_Init+0x60>)
 800129e:	f00c fe6e 	bl	800df7e <osThreadNew>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4a0a      	ldr	r2, [pc, #40]	@ (80012d0 <MX_FREERTOS_Init+0x64>)
 80012a6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	080233a8 	.word	0x080233a8
 80012b0:	24032970 	.word	0x24032970
 80012b4:	080233b8 	.word	0x080233b8
 80012b8:	24032974 	.word	0x24032974
 80012bc:	08023360 	.word	0x08023360
 80012c0:	08002815 	.word	0x08002815
 80012c4:	24032968 	.word	0x24032968
 80012c8:	08023384 	.word	0x08023384
 80012cc:	08001aa9 	.word	0x08001aa9
 80012d0:	2403296c 	.word	0x2403296c

080012d4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08e      	sub	sp, #56	@ 0x38
 80012d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ea:	4b9e      	ldr	r3, [pc, #632]	@ (8001564 <MX_GPIO_Init+0x290>)
 80012ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f0:	4a9c      	ldr	r2, [pc, #624]	@ (8001564 <MX_GPIO_Init+0x290>)
 80012f2:	f043 0304 	orr.w	r3, r3, #4
 80012f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012fa:	4b9a      	ldr	r3, [pc, #616]	@ (8001564 <MX_GPIO_Init+0x290>)
 80012fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	623b      	str	r3, [r7, #32]
 8001306:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001308:	4b96      	ldr	r3, [pc, #600]	@ (8001564 <MX_GPIO_Init+0x290>)
 800130a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130e:	4a95      	ldr	r2, [pc, #596]	@ (8001564 <MX_GPIO_Init+0x290>)
 8001310:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001314:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001318:	4b92      	ldr	r3, [pc, #584]	@ (8001564 <MX_GPIO_Init+0x290>)
 800131a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001322:	61fb      	str	r3, [r7, #28]
 8001324:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	4b8f      	ldr	r3, [pc, #572]	@ (8001564 <MX_GPIO_Init+0x290>)
 8001328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132c:	4a8d      	ldr	r2, [pc, #564]	@ (8001564 <MX_GPIO_Init+0x290>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001336:	4b8b      	ldr	r3, [pc, #556]	@ (8001564 <MX_GPIO_Init+0x290>)
 8001338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	61bb      	str	r3, [r7, #24]
 8001342:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001344:	4b87      	ldr	r3, [pc, #540]	@ (8001564 <MX_GPIO_Init+0x290>)
 8001346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800134a:	4a86      	ldr	r2, [pc, #536]	@ (8001564 <MX_GPIO_Init+0x290>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001354:	4b83      	ldr	r3, [pc, #524]	@ (8001564 <MX_GPIO_Init+0x290>)
 8001356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001362:	4b80      	ldr	r3, [pc, #512]	@ (8001564 <MX_GPIO_Init+0x290>)
 8001364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001368:	4a7e      	ldr	r2, [pc, #504]	@ (8001564 <MX_GPIO_Init+0x290>)
 800136a:	f043 0320 	orr.w	r3, r3, #32
 800136e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001372:	4b7c      	ldr	r3, [pc, #496]	@ (8001564 <MX_GPIO_Init+0x290>)
 8001374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001378:	f003 0320 	and.w	r3, r3, #32
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001380:	4b78      	ldr	r3, [pc, #480]	@ (8001564 <MX_GPIO_Init+0x290>)
 8001382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001386:	4a77      	ldr	r2, [pc, #476]	@ (8001564 <MX_GPIO_Init+0x290>)
 8001388:	f043 0308 	orr.w	r3, r3, #8
 800138c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001390:	4b74      	ldr	r3, [pc, #464]	@ (8001564 <MX_GPIO_Init+0x290>)
 8001392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001396:	f003 0308 	and.w	r3, r3, #8
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800139e:	4b71      	ldr	r3, [pc, #452]	@ (8001564 <MX_GPIO_Init+0x290>)
 80013a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a4:	4a6f      	ldr	r2, [pc, #444]	@ (8001564 <MX_GPIO_Init+0x290>)
 80013a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ae:	4b6d      	ldr	r3, [pc, #436]	@ (8001564 <MX_GPIO_Init+0x290>)
 80013b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013bc:	4b69      	ldr	r3, [pc, #420]	@ (8001564 <MX_GPIO_Init+0x290>)
 80013be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c2:	4a68      	ldr	r2, [pc, #416]	@ (8001564 <MX_GPIO_Init+0x290>)
 80013c4:	f043 0310 	orr.w	r3, r3, #16
 80013c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013cc:	4b65      	ldr	r3, [pc, #404]	@ (8001564 <MX_GPIO_Init+0x290>)
 80013ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d2:	f003 0310 	and.w	r3, r3, #16
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	f244 0101 	movw	r1, #16385	@ 0x4001
 80013e0:	4861      	ldr	r0, [pc, #388]	@ (8001568 <MX_GPIO_Init+0x294>)
 80013e2:	f006 fc09 	bl	8007bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013ec:	485f      	ldr	r0, [pc, #380]	@ (800156c <MX_GPIO_Init+0x298>)
 80013ee:	f006 fc03 	bl	8007bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2102      	movs	r1, #2
 80013f6:	485e      	ldr	r0, [pc, #376]	@ (8001570 <MX_GPIO_Init+0x29c>)
 80013f8:	f006 fbfe 	bl	8007bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001400:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001402:	2300      	movs	r3, #0
 8001404:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800140a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800140e:	4619      	mov	r1, r3
 8001410:	4858      	ldr	r0, [pc, #352]	@ (8001574 <MX_GPIO_Init+0x2a0>)
 8001412:	f006 fa41 	bl	8007898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001416:	2332      	movs	r3, #50	@ 0x32
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001426:	230b      	movs	r3, #11
 8001428:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800142e:	4619      	mov	r1, r3
 8001430:	4850      	ldr	r0, [pc, #320]	@ (8001574 <MX_GPIO_Init+0x2a0>)
 8001432:	f006 fa31 	bl	8007898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001436:	2386      	movs	r3, #134	@ 0x86
 8001438:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001446:	230b      	movs	r3, #11
 8001448:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800144e:	4619      	mov	r1, r3
 8001450:	4849      	ldr	r0, [pc, #292]	@ (8001578 <MX_GPIO_Init+0x2a4>)
 8001452:	f006 fa21 	bl	8007898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001456:	f244 0301 	movw	r3, #16385	@ 0x4001
 800145a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145c:	2301      	movs	r3, #1
 800145e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001468:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800146c:	4619      	mov	r1, r3
 800146e:	483e      	ldr	r0, [pc, #248]	@ (8001568 <MX_GPIO_Init+0x294>)
 8001470:	f006 fa12 	bl	8007898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JoySW_Pin;
 8001474:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800147a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800147e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001480:	2301      	movs	r3, #1
 8001482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(JoySW_GPIO_Port, &GPIO_InitStruct);
 8001484:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001488:	4619      	mov	r1, r3
 800148a:	483c      	ldr	r0, [pc, #240]	@ (800157c <MX_GPIO_Init+0x2a8>)
 800148c:	f006 fa04 	bl	8007898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001490:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001494:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014a2:	230b      	movs	r3, #11
 80014a4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014aa:	4619      	mov	r1, r3
 80014ac:	482e      	ldr	r0, [pc, #184]	@ (8001568 <MX_GPIO_Init+0x294>)
 80014ae:	f006 f9f3 	bl	8007898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80014b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80014c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c8:	4619      	mov	r1, r3
 80014ca:	4828      	ldr	r0, [pc, #160]	@ (800156c <MX_GPIO_Init+0x298>)
 80014cc:	f006 f9e4 	bl	8007898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80014d0:	2380      	movs	r3, #128	@ 0x80
 80014d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014d4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014e2:	4619      	mov	r1, r3
 80014e4:	4826      	ldr	r0, [pc, #152]	@ (8001580 <MX_GPIO_Init+0x2ac>)
 80014e6:	f006 f9d7 	bl	8007898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80014ea:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80014ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80014fc:	230a      	movs	r3, #10
 80014fe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001500:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001504:	4619      	mov	r1, r3
 8001506:	481c      	ldr	r0, [pc, #112]	@ (8001578 <MX_GPIO_Init+0x2a4>)
 8001508:	f006 f9c6 	bl	8007898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800150c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001510:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800151e:	230b      	movs	r3, #11
 8001520:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001522:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001526:	4619      	mov	r1, r3
 8001528:	4815      	ldr	r0, [pc, #84]	@ (8001580 <MX_GPIO_Init+0x2ac>)
 800152a:	f006 f9b5 	bl	8007898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800152e:	2302      	movs	r3, #2
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800153e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001542:	4619      	mov	r1, r3
 8001544:	480a      	ldr	r0, [pc, #40]	@ (8001570 <MX_GPIO_Init+0x29c>)
 8001546:	f006 f9a7 	bl	8007898 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2107      	movs	r1, #7
 800154e:	2028      	movs	r0, #40	@ 0x28
 8001550:	f003 fb32 	bl	8004bb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001554:	2028      	movs	r0, #40	@ 0x28
 8001556:	f003 fb49 	bl	8004bec <HAL_NVIC_EnableIRQ>

}
 800155a:	bf00      	nop
 800155c:	3738      	adds	r7, #56	@ 0x38
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	58024400 	.word	0x58024400
 8001568:	58020400 	.word	0x58020400
 800156c:	58020c00 	.word	0x58020c00
 8001570:	58021000 	.word	0x58021000
 8001574:	58020800 	.word	0x58020800
 8001578:	58020000 	.word	0x58020000
 800157c:	58021400 	.word	0x58021400
 8001580:	58021800 	.word	0x58021800

08001584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001588:	f001 fedc 	bl	8003344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800158c:	f000 f81c 	bl	80015c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001590:	f7ff fea0 	bl	80012d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001594:	f7ff fc5a 	bl	8000e4c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001598:	f001 fb9c 	bl	8002cd4 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800159c:	f7ff f8d0 	bl	8000740 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80015a0:	f001 fb4c 	bl	8002c3c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Starting ADC1 reading by DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t * ) uiADC1Buffer, 2);
 80015a4:	2202      	movs	r2, #2
 80015a6:	4906      	ldr	r1, [pc, #24]	@ (80015c0 <main+0x3c>)
 80015a8:	4806      	ldr	r0, [pc, #24]	@ (80015c4 <main+0x40>)
 80015aa:	f002 fae1 	bl	8003b70 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015ae:	f00c fc87 	bl	800dec0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80015b2:	f7ff fe5b 	bl	800126c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80015b6:	f00c fca7 	bl	800df08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015ba:	bf00      	nop
 80015bc:	e7fd      	b.n	80015ba <main+0x36>
 80015be:	bf00      	nop
 80015c0:	2403297c 	.word	0x2403297c
 80015c4:	2400132c 	.word	0x2400132c

080015c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b09e      	sub	sp, #120	@ 0x78
 80015cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015d2:	224c      	movs	r2, #76	@ 0x4c
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f020 fdfa 	bl	80221d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	2220      	movs	r2, #32
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f020 fdf3 	bl	80221d0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80015ea:	2002      	movs	r0, #2
 80015ec:	f006 fb38 	bl	8007c60 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f0:	2300      	movs	r3, #0
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	4b49      	ldr	r3, [pc, #292]	@ (800171c <SystemClock_Config+0x154>)
 80015f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015f8:	4a48      	ldr	r2, [pc, #288]	@ (800171c <SystemClock_Config+0x154>)
 80015fa:	f023 0301 	bic.w	r3, r3, #1
 80015fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001600:	4b46      	ldr	r3, [pc, #280]	@ (800171c <SystemClock_Config+0x154>)
 8001602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	4b45      	ldr	r3, [pc, #276]	@ (8001720 <SystemClock_Config+0x158>)
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	4a44      	ldr	r2, [pc, #272]	@ (8001720 <SystemClock_Config+0x158>)
 8001610:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001614:	6193      	str	r3, [r2, #24]
 8001616:	4b42      	ldr	r3, [pc, #264]	@ (8001720 <SystemClock_Config+0x158>)
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001622:	bf00      	nop
 8001624:	4b3e      	ldr	r3, [pc, #248]	@ (8001720 <SystemClock_Config+0x158>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800162c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001630:	d1f8      	bne.n	8001624 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001632:	4b3c      	ldr	r3, [pc, #240]	@ (8001724 <SystemClock_Config+0x15c>)
 8001634:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001638:	4a3a      	ldr	r2, [pc, #232]	@ (8001724 <SystemClock_Config+0x15c>)
 800163a:	f043 0302 	orr.w	r3, r3, #2
 800163e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001642:	4b38      	ldr	r3, [pc, #224]	@ (8001724 <SystemClock_Config+0x15c>)
 8001644:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001650:	2300      	movs	r3, #0
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	4b32      	ldr	r3, [pc, #200]	@ (8001720 <SystemClock_Config+0x158>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4a31      	ldr	r2, [pc, #196]	@ (8001720 <SystemClock_Config+0x158>)
 800165a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800165e:	6193      	str	r3, [r2, #24]
 8001660:	4b2f      	ldr	r3, [pc, #188]	@ (8001720 <SystemClock_Config+0x158>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001668:	603b      	str	r3, [r7, #0]
 800166a:	4b2c      	ldr	r3, [pc, #176]	@ (800171c <SystemClock_Config+0x154>)
 800166c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800166e:	4a2b      	ldr	r2, [pc, #172]	@ (800171c <SystemClock_Config+0x154>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001676:	4b29      	ldr	r3, [pc, #164]	@ (800171c <SystemClock_Config+0x154>)
 8001678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001682:	bf00      	nop
 8001684:	4b26      	ldr	r3, [pc, #152]	@ (8001720 <SystemClock_Config+0x158>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800168c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001690:	d1f8      	bne.n	8001684 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8001692:	2310      	movs	r3, #16
 8001694:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8001696:	2380      	movs	r3, #128	@ 0x80
 8001698:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 800169a:	2320      	movs	r3, #32
 800169c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800169e:	2302      	movs	r3, #2
 80016a0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 80016a2:	2301      	movs	r3, #1
 80016a4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016a6:	2301      	movs	r3, #1
 80016a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 80016aa:	23f0      	movs	r3, #240	@ 0xf0
 80016ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80016ae:	2302      	movs	r3, #2
 80016b0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016b2:	2304      	movs	r3, #4
 80016b4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016b6:	2302      	movs	r3, #2
 80016b8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80016ba:	2308      	movs	r3, #8
 80016bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80016be:	2300      	movs	r3, #0
 80016c0:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016ca:	4618      	mov	r0, r3
 80016cc:	f006 fb02 	bl	8007cd4 <HAL_RCC_OscConfig>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <SystemClock_Config+0x112>
  {
    Error_Handler();
 80016d6:	f000 f9df 	bl	8001a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016da:	233f      	movs	r3, #63	@ 0x3f
 80016dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016de:	2303      	movs	r3, #3
 80016e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80016e6:	2308      	movs	r3, #8
 80016e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80016ea:	2340      	movs	r3, #64	@ 0x40
 80016ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80016ee:	2340      	movs	r3, #64	@ 0x40
 80016f0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80016f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016f6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80016f8:	2340      	movs	r3, #64	@ 0x40
 80016fa:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	2104      	movs	r1, #4
 8001702:	4618      	mov	r0, r3
 8001704:	f006 ff40 	bl	8008588 <HAL_RCC_ClockConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 800170e:	f000 f9c3 	bl	8001a98 <Error_Handler>
  }
}
 8001712:	bf00      	nop
 8001714:	3778      	adds	r7, #120	@ 0x78
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	58000400 	.word	0x58000400
 8001720:	58024800 	.word	0x58024800
 8001724:	58024400 	.word	0x58024400

08001728 <HAL_GPIO_EXTI_Callback>:
  * @brief  ISR callback for the JoySW, switching the control mode.
  * @param  GPIO_Pin: EXTI pin.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) 
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	80fb      	strh	r3, [r7, #6]
  if(JoySW_Pin == GPIO_Pin){
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001738:	d11a      	bne.n	8001770 <HAL_GPIO_EXTI_Callback+0x48>

    unsigned int uiTick = osKernelGetTickCount();
 800173a:	f00c fc0b 	bl	800df54 <osKernelGetTickCount>
 800173e:	60f8      	str	r0, [r7, #12]

    if(uiTick > (uiJoySWTickOnPress + DEBOUNCE_TICKS)) // DEBOUNCE_TICKS debounce
 8001740:	4b0d      	ldr	r3, [pc, #52]	@ (8001778 <HAL_GPIO_EXTI_Callback+0x50>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	429a      	cmp	r2, r3
 800174c:	d910      	bls.n	8001770 <HAL_GPIO_EXTI_Callback+0x48>
    {
      ucButtonState ^= 1;
 800174e:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <HAL_GPIO_EXTI_Callback+0x54>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	f083 0301 	eor.w	r3, r3, #1
 8001756:	b2da      	uxtb	r2, r3
 8001758:	4b08      	ldr	r3, [pc, #32]	@ (800177c <HAL_GPIO_EXTI_Callback+0x54>)
 800175a:	701a      	strb	r2, [r3, #0]
      uiJoySWTickOnPress = uiTick;
 800175c:	4a06      	ldr	r2, [pc, #24]	@ (8001778 <HAL_GPIO_EXTI_Callback+0x50>)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6013      	str	r3, [r2, #0]
      osThreadFlagsSet(TaskControleHandle, JOYSW_FLAG);
 8001762:	4b07      	ldr	r3, [pc, #28]	@ (8001780 <HAL_GPIO_EXTI_Callback+0x58>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800176a:	4618      	mov	r0, r3
 800176c:	f00c fc9a 	bl	800e0a4 <osThreadFlagsSet>
    }
  }
}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	24032984 	.word	0x24032984
 800177c:	24032978 	.word	0x24032978
 8001780:	24032968 	.word	0x24032968

08001784 <HAL_UART_RxCpltCallback>:
  * @brief  ISR callback for reading msg from UART with UART2_DMA_BUFFER_SIZE bytes.
  * @param  huart: Handle for serial UART
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  if(&huart2 == huart)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4ab5      	ldr	r2, [pc, #724]	@ (8001a64 <HAL_UART_RxCpltCallback+0x2e0>)
 8001790:	4293      	cmp	r3, r2
 8001792:	f040 8163 	bne.w	8001a5c <HAL_UART_RxCpltCallback+0x2d8>
  {

    // State machine state
    unsigned int ucSmState = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]

    for(unsigned char i = 0; i<UART2_DMA_BUFFER_SIZE; i++)
 800179a:	2300      	movs	r3, #0
 800179c:	72fb      	strb	r3, [r7, #11]
 800179e:	e154      	b.n	8001a4a <HAL_UART_RxCpltCallback+0x2c6>
    {
      switch (ucSmState)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b2b      	cmp	r3, #43	@ 0x2b
 80017a4:	f200 814a 	bhi.w	8001a3c <HAL_UART_RxCpltCallback+0x2b8>
 80017a8:	a201      	add	r2, pc, #4	@ (adr r2, 80017b0 <HAL_UART_RxCpltCallback+0x2c>)
 80017aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ae:	bf00      	nop
 80017b0:	08001861 	.word	0x08001861
 80017b4:	08001873 	.word	0x08001873
 80017b8:	08001a3d 	.word	0x08001a3d
 80017bc:	08001a3d 	.word	0x08001a3d
 80017c0:	08001a3d 	.word	0x08001a3d
 80017c4:	08001a3d 	.word	0x08001a3d
 80017c8:	08001a3d 	.word	0x08001a3d
 80017cc:	08001a3d 	.word	0x08001a3d
 80017d0:	08001a3d 	.word	0x08001a3d
 80017d4:	08001a3d 	.word	0x08001a3d
 80017d8:	0800193d 	.word	0x0800193d
 80017dc:	0800194d 	.word	0x0800194d
 80017e0:	0800195d 	.word	0x0800195d
 80017e4:	0800196d 	.word	0x0800196d
 80017e8:	08001a3d 	.word	0x08001a3d
 80017ec:	08001a3d 	.word	0x08001a3d
 80017f0:	08001a3d 	.word	0x08001a3d
 80017f4:	08001a3d 	.word	0x08001a3d
 80017f8:	08001a3d 	.word	0x08001a3d
 80017fc:	08001a3d 	.word	0x08001a3d
 8001800:	0800197d 	.word	0x0800197d
 8001804:	0800198d 	.word	0x0800198d
 8001808:	0800199d 	.word	0x0800199d
 800180c:	080019ad 	.word	0x080019ad
 8001810:	08001a3d 	.word	0x08001a3d
 8001814:	08001a3d 	.word	0x08001a3d
 8001818:	08001a3d 	.word	0x08001a3d
 800181c:	08001a3d 	.word	0x08001a3d
 8001820:	08001a3d 	.word	0x08001a3d
 8001824:	08001a3d 	.word	0x08001a3d
 8001828:	080019bd 	.word	0x080019bd
 800182c:	080019cd 	.word	0x080019cd
 8001830:	080019dd 	.word	0x080019dd
 8001834:	080019ed 	.word	0x080019ed
 8001838:	08001a3d 	.word	0x08001a3d
 800183c:	08001a3d 	.word	0x08001a3d
 8001840:	08001a3d 	.word	0x08001a3d
 8001844:	08001a3d 	.word	0x08001a3d
 8001848:	08001a3d 	.word	0x08001a3d
 800184c:	08001a3d 	.word	0x08001a3d
 8001850:	080019fd 	.word	0x080019fd
 8001854:	08001a0d 	.word	0x08001a0d
 8001858:	08001a1d 	.word	0x08001a1d
 800185c:	08001a2d 	.word	0x08001a2d
      {
        case 0:
          if('#' == ucDmaBuffer[i])
 8001860:	7afb      	ldrb	r3, [r7, #11]
 8001862:	4a81      	ldr	r2, [pc, #516]	@ (8001a68 <HAL_UART_RxCpltCallback+0x2e4>)
 8001864:	5cd3      	ldrb	r3, [r2, r3]
 8001866:	2b23      	cmp	r3, #35	@ 0x23
 8001868:	f040 80eb 	bne.w	8001a42 <HAL_UART_RxCpltCallback+0x2be>
          {
            ucSmState = 1;
 800186c:	2301      	movs	r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
          }
          break;
 8001870:	e0e7      	b.n	8001a42 <HAL_UART_RxCpltCallback+0x2be>

        case 1:
          switch (ucDmaBuffer[i])
 8001872:	7afb      	ldrb	r3, [r7, #11]
 8001874:	4a7c      	ldr	r2, [pc, #496]	@ (8001a68 <HAL_UART_RxCpltCallback+0x2e4>)
 8001876:	5cd3      	ldrb	r3, [r2, r3]
 8001878:	3b24      	subs	r3, #36	@ 0x24
 800187a:	2b20      	cmp	r3, #32
 800187c:	d85a      	bhi.n	8001934 <HAL_UART_RxCpltCallback+0x1b0>
 800187e:	a201      	add	r2, pc, #4	@ (adr r2, 8001884 <HAL_UART_RxCpltCallback+0x100>)
 8001880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001884:	08001921 	.word	0x08001921
 8001888:	08001935 	.word	0x08001935
 800188c:	08001935 	.word	0x08001935
 8001890:	08001935 	.word	0x08001935
 8001894:	08001935 	.word	0x08001935
 8001898:	08001935 	.word	0x08001935
 800189c:	08001935 	.word	0x08001935
 80018a0:	08001935 	.word	0x08001935
 80018a4:	08001935 	.word	0x08001935
 80018a8:	08001935 	.word	0x08001935
 80018ac:	08001935 	.word	0x08001935
 80018b0:	08001935 	.word	0x08001935
 80018b4:	08001935 	.word	0x08001935
 80018b8:	08001935 	.word	0x08001935
 80018bc:	08001935 	.word	0x08001935
 80018c0:	08001935 	.word	0x08001935
 80018c4:	08001935 	.word	0x08001935
 80018c8:	08001935 	.word	0x08001935
 80018cc:	08001935 	.word	0x08001935
 80018d0:	08001935 	.word	0x08001935
 80018d4:	08001935 	.word	0x08001935
 80018d8:	08001935 	.word	0x08001935
 80018dc:	08001935 	.word	0x08001935
 80018e0:	08001935 	.word	0x08001935
 80018e4:	08001935 	.word	0x08001935
 80018e8:	08001935 	.word	0x08001935
 80018ec:	08001935 	.word	0x08001935
 80018f0:	08001935 	.word	0x08001935
 80018f4:	08001935 	.word	0x08001935
 80018f8:	08001909 	.word	0x08001909
 80018fc:	0800190f 	.word	0x0800190f
 8001900:	08001915 	.word	0x08001915
 8001904:	0800191b 	.word	0x0800191b
          {
            case 'A':
              ucSmState = 10;
 8001908:	230a      	movs	r3, #10
 800190a:	60fb      	str	r3, [r7, #12]
              break;
 800190c:	e015      	b.n	800193a <HAL_UART_RxCpltCallback+0x1b6>

            case 'B':
              ucSmState = 20;
 800190e:	2314      	movs	r3, #20
 8001910:	60fb      	str	r3, [r7, #12]
              break;
 8001912:	e012      	b.n	800193a <HAL_UART_RxCpltCallback+0x1b6>

            case 'C':
              ucSmState = 30;
 8001914:	231e      	movs	r3, #30
 8001916:	60fb      	str	r3, [r7, #12]
              break;
 8001918:	e00f      	b.n	800193a <HAL_UART_RxCpltCallback+0x1b6>

            case 'D':
              ucSmState = 40;
 800191a:	2328      	movs	r3, #40	@ 0x28
 800191c:	60fb      	str	r3, [r7, #12]
              break;
 800191e:	e00c      	b.n	800193a <HAL_UART_RxCpltCallback+0x1b6>

            case '$':
              ucSmState = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]

              // Message fully received, setting TaskControle ThreadFlag for sync.
              osThreadFlagsSet(TaskControleHandle, UART_NEW_DATA_FLAG);
 8001924:	4b51      	ldr	r3, [pc, #324]	@ (8001a6c <HAL_UART_RxCpltCallback+0x2e8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 800192c:	4618      	mov	r0, r3
 800192e:	f00c fbb9 	bl	800e0a4 <osThreadFlagsSet>
              //HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
              break;
 8001932:	e002      	b.n	800193a <HAL_UART_RxCpltCallback+0x1b6>

            default:
              ucSmState = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
              break;
 8001938:	bf00      	nop
          }
          break;
 800193a:	e083      	b.n	8001a44 <HAL_UART_RxCpltCallback+0x2c0>

        case 10:
          xVehicleStatus.xLongSpeed.ucBytes[0] = ucDmaBuffer[i];
 800193c:	7afb      	ldrb	r3, [r7, #11]
 800193e:	4a4a      	ldr	r2, [pc, #296]	@ (8001a68 <HAL_UART_RxCpltCallback+0x2e4>)
 8001940:	5cd2      	ldrb	r2, [r2, r3]
 8001942:	4b4b      	ldr	r3, [pc, #300]	@ (8001a70 <HAL_UART_RxCpltCallback+0x2ec>)
 8001944:	701a      	strb	r2, [r3, #0]
          ucSmState = 11;
 8001946:	230b      	movs	r3, #11
 8001948:	60fb      	str	r3, [r7, #12]
          break;
 800194a:	e07b      	b.n	8001a44 <HAL_UART_RxCpltCallback+0x2c0>

        case 11:
          xVehicleStatus.xLongSpeed.ucBytes[1] = ucDmaBuffer[i];
 800194c:	7afb      	ldrb	r3, [r7, #11]
 800194e:	4a46      	ldr	r2, [pc, #280]	@ (8001a68 <HAL_UART_RxCpltCallback+0x2e4>)
 8001950:	5cd2      	ldrb	r2, [r2, r3]
 8001952:	4b47      	ldr	r3, [pc, #284]	@ (8001a70 <HAL_UART_RxCpltCallback+0x2ec>)
 8001954:	705a      	strb	r2, [r3, #1]
          ucSmState = 12;
 8001956:	230c      	movs	r3, #12
 8001958:	60fb      	str	r3, [r7, #12]
          break;
 800195a:	e073      	b.n	8001a44 <HAL_UART_RxCpltCallback+0x2c0>

        case 12:
          xVehicleStatus.xLongSpeed.ucBytes[2] = ucDmaBuffer[i];
 800195c:	7afb      	ldrb	r3, [r7, #11]
 800195e:	4a42      	ldr	r2, [pc, #264]	@ (8001a68 <HAL_UART_RxCpltCallback+0x2e4>)
 8001960:	5cd2      	ldrb	r2, [r2, r3]
 8001962:	4b43      	ldr	r3, [pc, #268]	@ (8001a70 <HAL_UART_RxCpltCallback+0x2ec>)
 8001964:	709a      	strb	r2, [r3, #2]
          ucSmState = 13;
 8001966:	230d      	movs	r3, #13
 8001968:	60fb      	str	r3, [r7, #12]
          break;
 800196a:	e06b      	b.n	8001a44 <HAL_UART_RxCpltCallback+0x2c0>

        case 13:
          xVehicleStatus.xLongSpeed.ucBytes[3] = ucDmaBuffer[i];
 800196c:	7afb      	ldrb	r3, [r7, #11]
 800196e:	4a3e      	ldr	r2, [pc, #248]	@ (8001a68 <HAL_UART_RxCpltCallback+0x2e4>)
 8001970:	5cd2      	ldrb	r2, [r2, r3]
 8001972:	4b3f      	ldr	r3, [pc, #252]	@ (8001a70 <HAL_UART_RxCpltCallback+0x2ec>)
 8001974:	70da      	strb	r2, [r3, #3]
          ucSmState = 1;
 8001976:	2301      	movs	r3, #1
 8001978:	60fb      	str	r3, [r7, #12]
          break;
 800197a:	e063      	b.n	8001a44 <HAL_UART_RxCpltCallback+0x2c0>

        case 20:
          xVehicleStatus.xLatSpeed.ucBytes[0] = ucDmaBuffer[i];
 800197c:	7afb      	ldrb	r3, [r7, #11]
 800197e:	4a3a      	ldr	r2, [pc, #232]	@ (8001a68 <HAL_UART_RxCpltCallback+0x2e4>)
 8001980:	5cd2      	ldrb	r2, [r2, r3]
 8001982:	4b3b      	ldr	r3, [pc, #236]	@ (8001a70 <HAL_UART_RxCpltCallback+0x2ec>)
 8001984:	711a      	strb	r2, [r3, #4]
          ucSmState = 21;
 8001986:	2315      	movs	r3, #21
 8001988:	60fb      	str	r3, [r7, #12]
          break;
 800198a:	e05b      	b.n	8001a44 <HAL_UART_RxCpltCallback+0x2c0>

        case 21:
          xVehicleStatus.xLatSpeed.ucBytes[1] = ucDmaBuffer[i];
 800198c:	7afb      	ldrb	r3, [r7, #11]
 800198e:	4a36      	ldr	r2, [pc, #216]	@ (8001a68 <HAL_UART_RxCpltCallback+0x2e4>)
 8001990:	5cd2      	ldrb	r2, [r2, r3]
 8001992:	4b37      	ldr	r3, [pc, #220]	@ (8001a70 <HAL_UART_RxCpltCallback+0x2ec>)
 8001994:	715a      	strb	r2, [r3, #5]
          ucSmState = 22;
 8001996:	2316      	movs	r3, #22
 8001998:	60fb      	str	r3, [r7, #12]
          break;
 800199a:	e053      	b.n	8001a44 <HAL_UART_RxCpltCallback+0x2c0>

        case 22:
          xVehicleStatus.xLatSpeed.ucBytes[2] = ucDmaBuffer[i];
 800199c:	7afb      	ldrb	r3, [r7, #11]
 800199e:	4a32      	ldr	r2, [pc, #200]	@ (8001a68 <HAL_UART_RxCpltCallback+0x2e4>)
 80019a0:	5cd2      	ldrb	r2, [r2, r3]
 80019a2:	4b33      	ldr	r3, [pc, #204]	@ (8001a70 <HAL_UART_RxCpltCallback+0x2ec>)
 80019a4:	719a      	strb	r2, [r3, #6]
          ucSmState = 23;
 80019a6:	2317      	movs	r3, #23
 80019a8:	60fb      	str	r3, [r7, #12]
          break;
 80019aa:	e04b      	b.n	8001a44 <HAL_UART_RxCpltCallback+0x2c0>

        case 23:
          xVehicleStatus.xLatSpeed.ucBytes[3] = ucDmaBuffer[i];
 80019ac:	7afb      	ldrb	r3, [r7, #11]
 80019ae:	4a2e      	ldr	r2, [pc, #184]	@ (8001a68 <HAL_UART_RxCpltCallback+0x2e4>)
 80019b0:	5cd2      	ldrb	r2, [r2, r3]
 80019b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001a70 <HAL_UART_RxCpltCallback+0x2ec>)
 80019b4:	71da      	strb	r2, [r3, #7]
          ucSmState = 1;
 80019b6:	2301      	movs	r3, #1
 80019b8:	60fb      	str	r3, [r7, #12]
          break;
 80019ba:	e043      	b.n	8001a44 <HAL_UART_RxCpltCallback+0x2c0>

        case 30:
          xVehicleStatus.xHeadingRate.ucBytes[0] = ucDmaBuffer[i];
 80019bc:	7afb      	ldrb	r3, [r7, #11]
 80019be:	4a2a      	ldr	r2, [pc, #168]	@ (8001a68 <HAL_UART_RxCpltCallback+0x2e4>)
 80019c0:	5cd2      	ldrb	r2, [r2, r3]
 80019c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a70 <HAL_UART_RxCpltCallback+0x2ec>)
 80019c4:	721a      	strb	r2, [r3, #8]
          ucSmState = 31;
 80019c6:	231f      	movs	r3, #31
 80019c8:	60fb      	str	r3, [r7, #12]
          break;
 80019ca:	e03b      	b.n	8001a44 <HAL_UART_RxCpltCallback+0x2c0>

        case 31:
          xVehicleStatus.xHeadingRate.ucBytes[1] = ucDmaBuffer[i];
 80019cc:	7afb      	ldrb	r3, [r7, #11]
 80019ce:	4a26      	ldr	r2, [pc, #152]	@ (8001a68 <HAL_UART_RxCpltCallback+0x2e4>)
 80019d0:	5cd2      	ldrb	r2, [r2, r3]
 80019d2:	4b27      	ldr	r3, [pc, #156]	@ (8001a70 <HAL_UART_RxCpltCallback+0x2ec>)
 80019d4:	725a      	strb	r2, [r3, #9]
          ucSmState = 32;
 80019d6:	2320      	movs	r3, #32
 80019d8:	60fb      	str	r3, [r7, #12]
          break;
 80019da:	e033      	b.n	8001a44 <HAL_UART_RxCpltCallback+0x2c0>

        case 32:
          xVehicleStatus.xHeadingRate.ucBytes[2] = ucDmaBuffer[i];
 80019dc:	7afb      	ldrb	r3, [r7, #11]
 80019de:	4a22      	ldr	r2, [pc, #136]	@ (8001a68 <HAL_UART_RxCpltCallback+0x2e4>)
 80019e0:	5cd2      	ldrb	r2, [r2, r3]
 80019e2:	4b23      	ldr	r3, [pc, #140]	@ (8001a70 <HAL_UART_RxCpltCallback+0x2ec>)
 80019e4:	729a      	strb	r2, [r3, #10]
          ucSmState = 33;
 80019e6:	2321      	movs	r3, #33	@ 0x21
 80019e8:	60fb      	str	r3, [r7, #12]
          break;
 80019ea:	e02b      	b.n	8001a44 <HAL_UART_RxCpltCallback+0x2c0>

        case 33:
          xVehicleStatus.xHeadingRate.ucBytes[3] = ucDmaBuffer[i];
 80019ec:	7afb      	ldrb	r3, [r7, #11]
 80019ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001a68 <HAL_UART_RxCpltCallback+0x2e4>)
 80019f0:	5cd2      	ldrb	r2, [r2, r3]
 80019f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a70 <HAL_UART_RxCpltCallback+0x2ec>)
 80019f4:	72da      	strb	r2, [r3, #11]
          ucSmState = 1;
 80019f6:	2301      	movs	r3, #1
 80019f8:	60fb      	str	r3, [r7, #12]
          break;
 80019fa:	e023      	b.n	8001a44 <HAL_UART_RxCpltCallback+0x2c0>

        case 40:
          xVehicleStatus.xSteeringStatus.ucBytes[0] = ucDmaBuffer[i];
 80019fc:	7afb      	ldrb	r3, [r7, #11]
 80019fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001a68 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a00:	5cd2      	ldrb	r2, [r2, r3]
 8001a02:	4b1b      	ldr	r3, [pc, #108]	@ (8001a70 <HAL_UART_RxCpltCallback+0x2ec>)
 8001a04:	731a      	strb	r2, [r3, #12]
          ucSmState = 41;
 8001a06:	2329      	movs	r3, #41	@ 0x29
 8001a08:	60fb      	str	r3, [r7, #12]
          break;
 8001a0a:	e01b      	b.n	8001a44 <HAL_UART_RxCpltCallback+0x2c0>

        case 41:
          xVehicleStatus.xSteeringStatus.ucBytes[1] = ucDmaBuffer[i];
 8001a0c:	7afb      	ldrb	r3, [r7, #11]
 8001a0e:	4a16      	ldr	r2, [pc, #88]	@ (8001a68 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a10:	5cd2      	ldrb	r2, [r2, r3]
 8001a12:	4b17      	ldr	r3, [pc, #92]	@ (8001a70 <HAL_UART_RxCpltCallback+0x2ec>)
 8001a14:	735a      	strb	r2, [r3, #13]
          ucSmState = 42;
 8001a16:	232a      	movs	r3, #42	@ 0x2a
 8001a18:	60fb      	str	r3, [r7, #12]
          break;
 8001a1a:	e013      	b.n	8001a44 <HAL_UART_RxCpltCallback+0x2c0>

        case 42:
          xVehicleStatus.xSteeringStatus.ucBytes[2] = ucDmaBuffer[i];
 8001a1c:	7afb      	ldrb	r3, [r7, #11]
 8001a1e:	4a12      	ldr	r2, [pc, #72]	@ (8001a68 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a20:	5cd2      	ldrb	r2, [r2, r3]
 8001a22:	4b13      	ldr	r3, [pc, #76]	@ (8001a70 <HAL_UART_RxCpltCallback+0x2ec>)
 8001a24:	739a      	strb	r2, [r3, #14]
          ucSmState = 43;
 8001a26:	232b      	movs	r3, #43	@ 0x2b
 8001a28:	60fb      	str	r3, [r7, #12]
          break;
 8001a2a:	e00b      	b.n	8001a44 <HAL_UART_RxCpltCallback+0x2c0>

        case 43:
          xVehicleStatus.xSteeringStatus.ucBytes[3] = ucDmaBuffer[i];
 8001a2c:	7afb      	ldrb	r3, [r7, #11]
 8001a2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001a68 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a30:	5cd2      	ldrb	r2, [r2, r3]
 8001a32:	4b0f      	ldr	r3, [pc, #60]	@ (8001a70 <HAL_UART_RxCpltCallback+0x2ec>)
 8001a34:	73da      	strb	r2, [r3, #15]
          ucSmState = 1;
 8001a36:	2301      	movs	r3, #1
 8001a38:	60fb      	str	r3, [r7, #12]
          break;
 8001a3a:	e003      	b.n	8001a44 <HAL_UART_RxCpltCallback+0x2c0>

        default:
		      ucSmState = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
          break;
 8001a40:	e000      	b.n	8001a44 <HAL_UART_RxCpltCallback+0x2c0>
          break;
 8001a42:	bf00      	nop
    for(unsigned char i = 0; i<UART2_DMA_BUFFER_SIZE; i++)
 8001a44:	7afb      	ldrb	r3, [r7, #11]
 8001a46:	3301      	adds	r3, #1
 8001a48:	72fb      	strb	r3, [r7, #11]
 8001a4a:	7afb      	ldrb	r3, [r7, #11]
 8001a4c:	2b15      	cmp	r3, #21
 8001a4e:	f67f aea7 	bls.w	80017a0 <HAL_UART_RxCpltCallback+0x1c>
      }
    }
    // Starting other UART reading
    HAL_UART_Receive_DMA(&huart2, ucDmaBuffer, UART2_DMA_BUFFER_SIZE);
 8001a52:	2216      	movs	r2, #22
 8001a54:	4904      	ldr	r1, [pc, #16]	@ (8001a68 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a56:	4803      	ldr	r0, [pc, #12]	@ (8001a64 <HAL_UART_RxCpltCallback+0x2e0>)
 8001a58:	f00a fa00 	bl	800be5c <HAL_UART_Receive_DMA>
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	24032a48 	.word	0x24032a48
 8001a68:	240329d4 	.word	0x240329d4
 8001a6c:	24032968 	.word	0x24032968
 8001a70:	240329c4 	.word	0x240329c4

08001a74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a04      	ldr	r2, [pc, #16]	@ (8001a94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d101      	bne.n	8001a8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a86:	f001 fc99 	bl	80033bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40001000 	.word	0x40001000

08001a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a9c:	b672      	cpsid	i
}
 8001a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa0:	bf00      	nop
 8001aa2:	e7fd      	b.n	8001aa0 <Error_Handler+0x8>
 8001aa4:	0000      	movs	r0, r0
	...

08001aa8 <StartMicroAutoware>:
  * @brief  MicroAutoware task function.
  * @param  argument : not used.
  * @retval None
  */
void StartMicroAutoware(void * argument)
{
 8001aa8:	b5b0      	push	{r4, r5, r7, lr}
 8001aaa:	f5ad 7d4e 	sub.w	sp, sp, #824	@ 0x338
 8001aae:	af02      	add	r7, sp, #8
 8001ab0:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001ab4:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001ab8:	6018      	str	r0, [r3, #0]

  // Variables -- START

  unsigned int uiFlags;
  unsigned char ucControlMode = MANUAL;
 8001aba:	2304      	movs	r3, #4
 8001abc:	f887 332f 	strb.w	r3, [r7, #815]	@ 0x32f

  // micro-ros QoS
  const rmw_qos_profile_t * qos_autoware = &rmw_qos_profile_autoware;
 8001ac0:	4bd4      	ldr	r3, [pc, #848]	@ (8001e14 <StartMicroAutoware+0x36c>)
 8001ac2:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
  rcl_allocator_t allocator;

  rclc_executor_t executor;

  // Number of subscribers + number of timers + number of services OR Number total of callbacks
  unsigned char ucNumberOfHandles = 3;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	f887 3327 	strb.w	r3, [r7, #807]	@ 0x327
  // Variables -- END

  // micro-ROS configuration

  // Setting transport layer
  rmw_uros_set_custom_transport(
 8001acc:	4bd2      	ldr	r3, [pc, #840]	@ (8001e18 <StartMicroAutoware+0x370>)
 8001ace:	9301      	str	r3, [sp, #4]
 8001ad0:	4bd2      	ldr	r3, [pc, #840]	@ (8001e1c <StartMicroAutoware+0x374>)
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	4bd2      	ldr	r3, [pc, #840]	@ (8001e20 <StartMicroAutoware+0x378>)
 8001ad6:	4ad3      	ldr	r2, [pc, #844]	@ (8001e24 <StartMicroAutoware+0x37c>)
 8001ad8:	49d3      	ldr	r1, [pc, #844]	@ (8001e28 <StartMicroAutoware+0x380>)
 8001ada:	2001      	movs	r0, #1
 8001adc:	f013 fd04 	bl	80154e8 <rmw_uros_set_custom_transport>
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  // Setting memory allocation methods
  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001ae0:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001ae4:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f013 fc51 	bl	8015390 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8001aee:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001af2:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001af6:	4acd      	ldr	r2, [pc, #820]	@ (8001e2c <StartMicroAutoware+0x384>)
 8001af8:	601a      	str	r2, [r3, #0]
  freeRTOS_allocator.deallocate = microros_deallocate;
 8001afa:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001afe:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001b02:	4acb      	ldr	r2, [pc, #812]	@ (8001e30 <StartMicroAutoware+0x388>)
 8001b04:	605a      	str	r2, [r3, #4]
  freeRTOS_allocator.reallocate = microros_reallocate;
 8001b06:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001b0a:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001b0e:	4ac9      	ldr	r2, [pc, #804]	@ (8001e34 <StartMicroAutoware+0x38c>)
 8001b10:	609a      	str	r2, [r3, #8]
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001b12:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001b16:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001b1a:	4ac7      	ldr	r2, [pc, #796]	@ (8001e38 <StartMicroAutoware+0x390>)
 8001b1c:	60da      	str	r2, [r3, #12]

  // micro-ROS app

  executor = rclc_executor_get_zero_initialized_executor();
 8001b1e:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001b22:	f5a3 741c 	sub.w	r4, r3, #624	@ 0x270
 8001b26:	463b      	mov	r3, r7
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f012 ff7d 	bl	8014a28 <rclc_executor_get_zero_initialized_executor>
 8001b2e:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001b32:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8001b36:	4620      	mov	r0, r4
 8001b38:	4619      	mov	r1, r3
 8001b3a:	2388      	movs	r3, #136	@ 0x88
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	f020 fc66 	bl	802240e <memcpy>

  allocator = rcl_get_default_allocator();
 8001b42:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001b46:	f5a3 74f2 	sub.w	r4, r3, #484	@ 0x1e4
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f013 fc2d 	bl	80153ac <rcutils_get_default_allocator>
 8001b52:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001b56:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8001b5a:	461d      	mov	r5, r3
 8001b5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b60:	682b      	ldr	r3, [r5, #0]
 8001b62:	6023      	str	r3, [r4, #0]

  //create init_options
  rclc_support_init(&support, 0, NULL, &allocator);
 8001b64:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8001b68:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2100      	movs	r1, #0
 8001b70:	f013 fa8a 	bl	8015088 <rclc_support_init>

  // create node
  rclc_node_init_default(&VehicleInterfaceNode, NODE_NAME, "microautoware", &support);
 8001b74:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001b78:	f507 70ca 	add.w	r0, r7, #404	@ 0x194
 8001b7c:	4aaf      	ldr	r2, [pc, #700]	@ (8001e3c <StartMicroAutoware+0x394>)
 8001b7e:	49b0      	ldr	r1, [pc, #704]	@ (8001e40 <StartMicroAutoware+0x398>)
 8001b80:	f013 facc 	bl	801511c <rclc_node_init_default>

  // create executor
  rclc_executor_init(&executor, &support.context, ucNumberOfHandles, &allocator);
 8001b84:	f897 2327 	ldrb.w	r2, [r7, #807]	@ 0x327
 8001b88:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8001b8c:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8001b90:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001b94:	f012 ff54 	bl	8014a40 <rclc_executor_init>

  // create timers
  rclc_timer_init_default(&timer_watchdog_agent, &support, WATCHDOG_AGENT_TIMEOUT, timer_watchdog_agent_callback);
 8001b98:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8001b9c:	f507 7036 	add.w	r0, r7, #728	@ 0x2d8
 8001ba0:	4ba8      	ldr	r3, [pc, #672]	@ (8001e44 <StartMicroAutoware+0x39c>)
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ba8:	f04f 0300 	mov.w	r3, #0
 8001bac:	f013 fbb8 	bl	8015320 <rclc_timer_init_default>

  // create subscribers
  rclc_subscription_init(
 8001bb0:	f014 fae0 	bl	8016174 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001bba:	f507 7046 	add.w	r0, r7, #792	@ 0x318
 8001bbe:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	4ba0      	ldr	r3, [pc, #640]	@ (8001e48 <StartMicroAutoware+0x3a0>)
 8001bc6:	f013 fb6b 	bl	80152a0 <rclc_subscription_init>
    		&clock_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(rosgraph_msgs, msg, Clock),
    		"/clock", qos_autoware);
        
  rclc_subscription_init(
 8001bca:	f00f feaf 	bl	801192c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001bd4:	f507 7045 	add.w	r0, r7, #788	@ 0x314
 8001bd8:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	4b9b      	ldr	r3, [pc, #620]	@ (8001e4c <StartMicroAutoware+0x3a4>)
 8001be0:	f013 fb5e 	bl	80152a0 <rclc_subscription_init>
    		&control_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_control_msgs, msg, AckermannControlCommand),
    		"/control/command/control_cmd", qos_autoware);

  rclc_subscription_init(
 8001be4:	f010 f91a 	bl	8011e1c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand>
 8001be8:	4602      	mov	r2, r0
 8001bea:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001bee:	f507 7044 	add.w	r0, r7, #784	@ 0x310
 8001bf2:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	4b95      	ldr	r3, [pc, #596]	@ (8001e50 <StartMicroAutoware+0x3a8>)
 8001bfa:	f013 fb51 	bl	80152a0 <rclc_subscription_init>
    		&gear_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, GearCommand),
    		"/control/command/gear_cmd", qos_autoware);

  rclc_subscription_init(
 8001bfe:	f010 f985 	bl	8011f0c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>
 8001c02:	4602      	mov	r2, r0
 8001c04:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001c08:	f507 7043 	add.w	r0, r7, #780	@ 0x30c
 8001c0c:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	4b90      	ldr	r3, [pc, #576]	@ (8001e54 <StartMicroAutoware+0x3ac>)
 8001c14:	f013 fb44 	bl	80152a0 <rclc_subscription_init>
    		&turn_indicators_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, TurnIndicatorsCommand),
    		"/control/command/turn_indicators_cmd", qos_autoware);

  rclc_subscription_init(
 8001c18:	f010 f930 	bl	8011e7c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001c22:	f507 7042 	add.w	r0, r7, #776	@ 0x308
 8001c26:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	4b8a      	ldr	r3, [pc, #552]	@ (8001e58 <StartMicroAutoware+0x3b0>)
 8001c2e:	f013 fb37 	bl	80152a0 <rclc_subscription_init>
    		&hazard_lights_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, HazardLightsCommand ),
    		"/control/command/hazard_lights_cmd", qos_autoware);

  rclc_subscription_init(
 8001c32:	f014 fc31 	bl	8016498 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>
 8001c36:	4602      	mov	r2, r0
 8001c38:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001c3c:	f507 7041 	add.w	r0, r7, #772	@ 0x304
 8001c40:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	4b85      	ldr	r3, [pc, #532]	@ (8001e5c <StartMicroAutoware+0x3b4>)
 8001c48:	f013 fb2a 	bl	80152a0 <rclc_subscription_init>
    		&actuation_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, ActuationCommandStamped),
    		"/control/command/actuation_cmd", qos_autoware);

  rclc_subscription_init(
 8001c4c:	f014 fc6c 	bl	8016528 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>
 8001c50:	4602      	mov	r2, r0
 8001c52:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001c56:	f507 7040 	add.w	r0, r7, #768	@ 0x300
 8001c5a:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	4b7f      	ldr	r3, [pc, #508]	@ (8001e60 <StartMicroAutoware+0x3b8>)
 8001c62:	f013 fb1d 	bl	80152a0 <rclc_subscription_init>
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, VehicleEmergencyStamped),
    		"/control/command/emergency_cmd", qos_autoware);

  // create publishers
  rclc_publisher_init(
 8001c66:	f010 f8c1 	bl	8011dec <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001c70:	f507 703f 	add.w	r0, r7, #764	@ 0x2fc
 8001c74:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	4b7a      	ldr	r3, [pc, #488]	@ (8001e64 <StartMicroAutoware+0x3bc>)
 8001c7c:	f013 fa90 	bl	80151a0 <rclc_publisher_init>
        &control_mode_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, ControlModeReport),
        "/vehicle/status/control_mode", qos_autoware);

  rclc_publisher_init(
 8001c80:	f010 f974 	bl	8011f6c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport>
 8001c84:	4602      	mov	r2, r0
 8001c86:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001c8a:	f507 703e 	add.w	r0, r7, #760	@ 0x2f8
 8001c8e:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	4b74      	ldr	r3, [pc, #464]	@ (8001e68 <StartMicroAutoware+0x3c0>)
 8001c96:	f013 fa83 	bl	80151a0 <rclc_publisher_init>
		    &vehicle_twist_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, VelocityReport),
        "/vehicle/status/velocity_status", qos_autoware);

  rclc_publisher_init(
 8001c9a:	f010 f91f 	bl	8011edc <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001ca4:	f507 703d 	add.w	r0, r7, #756	@ 0x2f4
 8001ca8:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	4b6f      	ldr	r3, [pc, #444]	@ (8001e6c <StartMicroAutoware+0x3c4>)
 8001cb0:	f013 fa76 	bl	80151a0 <rclc_publisher_init>
        &steering_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, SteeringReport),
        "/vehicle/status/steering_status", qos_autoware);

  rclc_publisher_init(
 8001cb4:	f010 f8ca 	bl	8011e4c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001cbe:	f507 703c 	add.w	r0, r7, #752	@ 0x2f0
 8001cc2:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	4b69      	ldr	r3, [pc, #420]	@ (8001e70 <StartMicroAutoware+0x3c8>)
 8001cca:	f013 fa69 	bl	80151a0 <rclc_publisher_init>
        &gear_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, GearReport),
        "/vehicle/status/gear_status", qos_autoware);

  rclc_publisher_init(
 8001cce:	f010 f935 	bl	8011f3c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001cd8:	f507 703b 	add.w	r0, r7, #748	@ 0x2ec
 8001cdc:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	4b64      	ldr	r3, [pc, #400]	@ (8001e74 <StartMicroAutoware+0x3cc>)
 8001ce4:	f013 fa5c 	bl	80151a0 <rclc_publisher_init>
        &turn_indicators_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, TurnIndicatorsReport),
        "/vehicle/status/turn_indicators_status", qos_autoware);

  rclc_publisher_init(
 8001ce8:	f010 f8e0 	bl	8011eac <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport>
 8001cec:	4602      	mov	r2, r0
 8001cee:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001cf2:	f507 703a 	add.w	r0, r7, #744	@ 0x2e8
 8001cf6:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	4b5e      	ldr	r3, [pc, #376]	@ (8001e78 <StartMicroAutoware+0x3d0>)
 8001cfe:	f013 fa4f 	bl	80151a0 <rclc_publisher_init>
        &hazard_lights_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, HazardLightsReport),
        "/vehicle/status/hazard_lights_status", qos_autoware);

  rclc_publisher_init(
 8001d02:	f014 fbe1 	bl	80164c8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>
 8001d06:	4602      	mov	r2, r0
 8001d08:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001d0c:	f507 7039 	add.w	r0, r7, #740	@ 0x2e4
 8001d10:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	4b59      	ldr	r3, [pc, #356]	@ (8001e7c <StartMicroAutoware+0x3d4>)
 8001d18:	f013 fa42 	bl	80151a0 <rclc_publisher_init>
        &actuation_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, ActuationStatusStamped),
        "/vehicle/status/actuation_status", qos_autoware);

  rclc_publisher_init(
 8001d1c:	f014 fbec 	bl	80164f8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>
 8001d20:	4602      	mov	r2, r0
 8001d22:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001d26:	f507 7038 	add.w	r0, r7, #736	@ 0x2e0
 8001d2a:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	4b53      	ldr	r3, [pc, #332]	@ (8001e80 <StartMicroAutoware+0x3d8>)
 8001d32:	f013 fa35 	bl	80151a0 <rclc_publisher_init>
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, SteeringWheelStatusStamped),
        "/vehicle/status/steering_wheel_status", qos_autoware);

  // creating servers
  rclc_service_init(
 8001d36:	f010 f839 	bl	8011dac <rosidl_typesupport_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001d40:	f507 7037 	add.w	r0, r7, #732	@ 0x2dc
 8001d44:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	4b4e      	ldr	r3, [pc, #312]	@ (8001e84 <StartMicroAutoware+0x3dc>)
 8001d4c:	f013 fa68 	bl	8015220 <rclc_service_init>
        ROSIDL_GET_SRV_TYPE_SUPPORT(autoware_auto_vehicle_msgs, srv, ControlModeCommand),
        "/control/control_mode_request", qos_autoware);


  // adding callbacks to executor
  rclc_executor_add_subscription(&executor, &clock_sub_, &clock_msg_, &clock_callback, ON_NEW_DATA);
 8001d50:	f507 7234 	add.w	r2, r7, #720	@ 0x2d0
 8001d54:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 8001d58:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	4b49      	ldr	r3, [pc, #292]	@ (8001e88 <StartMicroAutoware+0x3e0>)
 8001d62:	f012 fee9 	bl	8014b38 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &control_cmd_sub_, &control_cmd_msg_, &control_cmd_callback, ON_NEW_DATA);
 8001d66:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 8001d6a:	f507 7145 	add.w	r1, r7, #788	@ 0x314
 8001d6e:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001d72:	2300      	movs	r3, #0
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	4b45      	ldr	r3, [pc, #276]	@ (8001e8c <StartMicroAutoware+0x3e4>)
 8001d78:	f012 fede 	bl	8014b38 <rclc_executor_add_subscription>

  rclc_executor_add_service(&executor, &control_mode_server_, &control_mode_request_msg_, &control_mode_response_msg_, control_mode_cmd_callback);
 8001d7c:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8001d80:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 8001d84:	f507 7137 	add.w	r1, r7, #732	@ 0x2dc
 8001d88:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001d8c:	4c40      	ldr	r4, [pc, #256]	@ (8001e90 <StartMicroAutoware+0x3e8>)
 8001d8e:	9400      	str	r4, [sp, #0]
 8001d90:	f012 ff10 	bl	8014bb4 <rclc_executor_add_service>
//  rclc_executor_add_subscription(&executor, &actuation_cmd_sub_, &actuation_cmd_msg_, &actuation_cmd_callback, ON_NEW_DATA);
//  rclc_executor_add_subscription(&executor, &emergency_sub_, &emergency_msg_, &emergency_callback, ON_NEW_DATA);


  // pinging micro-ros agent
  rmw_ret_t xPingResult = rmw_uros_ping_agent(1000, 20);
 8001d94:	2114      	movs	r1, #20
 8001d96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d9a:	f013 fbbb 	bl	8015514 <rmw_uros_ping_agent>
 8001d9e:	f8c7 0320 	str.w	r0, [r7, #800]	@ 0x320

  // Setting flag on TaskControle to enable autonomus mode
  osThreadFlagsSet(TaskControleHandle, MICRO_ROS_AGENT_ONLINE_FLAG);
 8001da2:	4b3c      	ldr	r3, [pc, #240]	@ (8001e94 <StartMicroAutoware+0x3ec>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001daa:	4618      	mov	r0, r3
 8001dac:	f00c f97a 	bl	800e0a4 <osThreadFlagsSet>
  // Task loop
  for (;;)
  {

    // Sync time with ROS
    rmw_uros_sync_session(TIMEOUT_TS_SYNC);
 8001db0:	2064      	movs	r0, #100	@ 0x64
 8001db2:	f013 fdc9 	bl	8015948 <rmw_uros_sync_session>

    rclc_executor_spin_some(&executor, EXECUTOR_SPIN_TIME * (1000 * 1000)); // Spinning executor for EXECUTOR_SPIN_PERIOD * (1000 * 1000) ns.
 8001db6:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8001dba:	4a37      	ldr	r2, [pc, #220]	@ (8001e98 <StartMicroAutoware+0x3f0>)
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	4608      	mov	r0, r1
 8001dc2:	f013 f927 	bl	8015014 <rclc_executor_spin_some>

    // Checking if control mode has changed by vehicle or Autoware.
    uiFlags = osThreadFlagsGet();
 8001dc6:	f00c f9bb 	bl	800e140 <osThreadFlagsGet>
 8001dca:	f8c7 031c 	str.w	r0, [r7, #796]	@ 0x31c
    uiFlags = osThreadFlagsWait(TO_AUTOWARE_MODE_FLAG | TO_MANUAL_MODE_FLAG, osFlagsWaitAny, 0);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	2011      	movs	r0, #17
 8001dd4:	f00c f9d5 	bl	800e182 <osThreadFlagsWait>
 8001dd8:	f8c7 031c 	str.w	r0, [r7, #796]	@ 0x31c

    if(CHECK_FLAG(TO_AUTOWARE_MODE_FLAG, uiFlags))
 8001ddc:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d007      	beq.n	8001df8 <StartMicroAutoware+0x350>
 8001de8:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	db03      	blt.n	8001df8 <StartMicroAutoware+0x350>
    {
      ucControlMode = AUTOWARE;
 8001df0:	2301      	movs	r3, #1
 8001df2:	f887 332f 	strb.w	r3, [r7, #815]	@ 0x32f
 8001df6:	e05e      	b.n	8001eb6 <StartMicroAutoware+0x40e>
    }
    else if(CHECK_FLAG(TO_MANUAL_MODE_FLAG, uiFlags))
 8001df8:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d04b      	beq.n	8001e9c <StartMicroAutoware+0x3f4>
 8001e04:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	db47      	blt.n	8001e9c <StartMicroAutoware+0x3f4>
    {
      ucControlMode = MANUAL;
 8001e0c:	2304      	movs	r3, #4
 8001e0e:	f887 332f 	strb.w	r3, [r7, #815]	@ 0x32f
 8001e12:	e050      	b.n	8001eb6 <StartMicroAutoware+0x40e>
 8001e14:	080233c8 	.word	0x080233c8
 8001e18:	08000f8d 	.word	0x08000f8d
 8001e1c:	08000f29 	.word	0x08000f29
 8001e20:	08000f09 	.word	0x08000f09
 8001e24:	08000edd 	.word	0x08000edd
 8001e28:	24032adc 	.word	0x24032adc
 8001e2c:	080020c5 	.word	0x080020c5
 8001e30:	08002109 	.word	0x08002109
 8001e34:	08002141 	.word	0x08002141
 8001e38:	080021ad 	.word	0x080021ad
 8001e3c:	080230f0 	.word	0x080230f0
 8001e40:	08023100 	.word	0x08023100
 8001e44:	08001169 	.word	0x08001169
 8001e48:	08023114 	.word	0x08023114
 8001e4c:	0802311c 	.word	0x0802311c
 8001e50:	0802313c 	.word	0x0802313c
 8001e54:	08023158 	.word	0x08023158
 8001e58:	08023180 	.word	0x08023180
 8001e5c:	080231a4 	.word	0x080231a4
 8001e60:	080231c4 	.word	0x080231c4
 8001e64:	080231e4 	.word	0x080231e4
 8001e68:	08023204 	.word	0x08023204
 8001e6c:	08023224 	.word	0x08023224
 8001e70:	08023244 	.word	0x08023244
 8001e74:	08023260 	.word	0x08023260
 8001e78:	08023288 	.word	0x08023288
 8001e7c:	080232b0 	.word	0x080232b0
 8001e80:	080232d4 	.word	0x080232d4
 8001e84:	080232fc 	.word	0x080232fc
 8001e88:	080011ad 	.word	0x080011ad
 8001e8c:	080011d9 	.word	0x080011d9
 8001e90:	08001205 	.word	0x08001205
 8001e94:	24032968 	.word	0x24032968
 8001e98:	03938700 	.word	0x03938700
    }
    else if(CHECK_FLAG((TO_AUTOWARE_MODE_FLAG | TO_MANUAL_MODE_FLAG), uiFlags))
 8001e9c:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001ea0:	f003 0311 	and.w	r3, r3, #17
 8001ea4:	2b11      	cmp	r3, #17
 8001ea6:	d106      	bne.n	8001eb6 <StartMicroAutoware+0x40e>
 8001ea8:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	db02      	blt.n	8001eb6 <StartMicroAutoware+0x40e>
    {
      ucControlMode = MANUAL;
 8001eb0:	2304      	movs	r3, #4
 8001eb2:	f887 332f 	strb.w	r3, [r7, #815]	@ 0x32f
    }

    control_mode_msg_.stamp = clock_msg_.clock;
 8001eb6:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001eba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001ec4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ec8:	e882 0003 	stmia.w	r2, {r0, r1}
    control_mode_msg_.mode = ucControlMode;
 8001ecc:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001ed0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ed4:	f897 232f 	ldrb.w	r2, [r7, #815]	@ 0x32f
 8001ed8:	721a      	strb	r2, [r3, #8]
    rcl_publish(&control_mode_pub_, &control_mode_msg_, NULL);
 8001eda:	f507 710a 	add.w	r1, r7, #552	@ 0x228
 8001ede:	f507 733f 	add.w	r3, r7, #764	@ 0x2fc
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f012 fa11 	bl	801430c <rcl_publish>

    // All topics are recieved (maybe not all...)
    if(0b1 & (ucSubscribersRecieved >> 1)) // Checking if control_cmd_sub_ data arrives (second bit of ucSubscribersRecieved)
 8001eea:	4b6f      	ldr	r3, [pc, #444]	@ (80020a8 <StartMicroAutoware+0x600>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d03f      	beq.n	8001f78 <StartMicroAutoware+0x4d0>
    {
      // Autonomous mode: Gather all subs data, then compact and send to TaskControle.
      if(AUTOWARE == ucControlMode)
 8001ef8:	f897 332f 	ldrb.w	r3, [r7, #815]	@ 0x32f
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d13b      	bne.n	8001f78 <StartMicroAutoware+0x4d0>
      {
        osMutexAcquire(MutexControlActionHandle, osWaitForever);
 8001f00:	4b6a      	ldr	r3, [pc, #424]	@ (80020ac <StartMicroAutoware+0x604>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f00c fa5c 	bl	800e3c6 <osMutexAcquire>
        xControlAction.xSteeringAngle.fFloat = control_cmd_msg_.lateral.steering_tire_angle * 1.2;
 8001f0e:	edd7 7aad 	vldr	s15, [r7, #692]	@ 0x2b4
 8001f12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f16:	ed9f 6b62 	vldr	d6, [pc, #392]	@ 80020a0 <StartMicroAutoware+0x5f8>
 8001f1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f1e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f22:	4b63      	ldr	r3, [pc, #396]	@ (80020b0 <StartMicroAutoware+0x608>)
 8001f24:	edc3 7a00 	vstr	s15, [r3]
        xControlAction.xSteeringVelocity.fFloat = control_cmd_msg_.lateral.steering_tire_rotation_rate * 1.2;
 8001f28:	edd7 7aae 	vldr	s15, [r7, #696]	@ 0x2b8
 8001f2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f30:	ed9f 6b5b 	vldr	d6, [pc, #364]	@ 80020a0 <StartMicroAutoware+0x5f8>
 8001f34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f3c:	4b5c      	ldr	r3, [pc, #368]	@ (80020b0 <StartMicroAutoware+0x608>)
 8001f3e:	edc3 7a01 	vstr	s15, [r3, #4]
        xControlAction.xSpeed.fFloat = control_cmd_msg_.longitudinal.speed;
 8001f42:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 8001f46:	4a5a      	ldr	r2, [pc, #360]	@ (80020b0 <StartMicroAutoware+0x608>)
 8001f48:	6093      	str	r3, [r2, #8]
        xControlAction.xAcceleration.fFloat = control_cmd_msg_.longitudinal.acceleration;
 8001f4a:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 8001f4e:	4a58      	ldr	r2, [pc, #352]	@ (80020b0 <StartMicroAutoware+0x608>)
 8001f50:	60d3      	str	r3, [r2, #12]
        xControlAction.xJerk.fFloat = control_cmd_msg_.longitudinal.jerk;
 8001f52:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8001f56:	4a56      	ldr	r2, [pc, #344]	@ (80020b0 <StartMicroAutoware+0x608>)
 8001f58:	6113      	str	r3, [r2, #16]
        xControlAction.ucControlMode = AUTOWARE;
 8001f5a:	4b55      	ldr	r3, [pc, #340]	@ (80020b0 <StartMicroAutoware+0x608>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	751a      	strb	r2, [r3, #20]
        osMutexRelease(MutexControlActionHandle);
 8001f60:	4b52      	ldr	r3, [pc, #328]	@ (80020ac <StartMicroAutoware+0x604>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f00c fa79 	bl	800e45c <osMutexRelease>

        osThreadFlagsSet(TaskControleHandle, DATA_UPDATED_FLAG);
 8001f6a:	4b52      	ldr	r3, [pc, #328]	@ (80020b4 <StartMicroAutoware+0x60c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f72:	4618      	mov	r0, r3
 8001f74:	f00c f896 	bl	800e0a4 <osThreadFlagsSet>
      }

    }

    // WAIT for flag to sync xControlSignal update
    uiFlags = osThreadFlagsGet();
 8001f78:	f00c f8e2 	bl	800e140 <osThreadFlagsGet>
 8001f7c:	f8c7 031c 	str.w	r0, [r7, #796]	@ 0x31c
    uiFlags = osThreadFlagsWait(DATA_UPDATED_FLAG, osFlagsWaitAll, TIMEOUT_GET_CONTROL_SIGNAL);
 8001f80:	2264      	movs	r2, #100	@ 0x64
 8001f82:	2101      	movs	r1, #1
 8001f84:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001f88:	f00c f8fb 	bl	800e182 <osThreadFlagsWait>
 8001f8c:	f8c7 031c 	str.w	r0, [r7, #796]	@ 0x31c

    // Timeout Error
    if(osFlagsErrorTimeout == uiFlags)
 8001f90:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001f94:	f113 0f02 	cmn.w	r3, #2
 8001f98:	d07e      	beq.n	8002098 <StartMicroAutoware+0x5f0>
    {

    }

    // xControlSignal updated
    else if(CHECK_FLAG(DATA_UPDATED_FLAG, uiFlags))
 8001f9a:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d078      	beq.n	8002098 <StartMicroAutoware+0x5f0>
 8001fa6:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	db74      	blt.n	8002098 <StartMicroAutoware+0x5f0>
    {
      // Assembling microAutoware msgs
      osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 8001fae:	4b42      	ldr	r3, [pc, #264]	@ (80020b8 <StartMicroAutoware+0x610>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f00c fa05 	bl	800e3c6 <osMutexAcquire>

      // vehicle_twist_msg_ data

      rosidl_runtime_c__String xFrameId;
      char cFrame[10] = "base_link";
 8001fbc:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001fc0:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8001fc4:	4a3d      	ldr	r2, [pc, #244]	@ (80020bc <StartMicroAutoware+0x614>)
 8001fc6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fc8:	c303      	stmia	r3!, {r0, r1}
 8001fca:	801a      	strh	r2, [r3, #0]
      xFrameId.data = cFrame;
 8001fcc:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001fd0:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001fd4:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8001fd8:	601a      	str	r2, [r3, #0]
      xFrameId.size = 9;
 8001fda:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001fde:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001fe2:	2209      	movs	r2, #9
 8001fe4:	605a      	str	r2, [r3, #4]
      xFrameId.capacity = 9;
 8001fe6:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001fea:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001fee:	2209      	movs	r2, #9
 8001ff0:	609a      	str	r2, [r3, #8]

      vehicle_twist_msg_.header.stamp = clock_msg_.clock;
 8001ff2:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001ff6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8002000:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002004:	e882 0003 	stmia.w	r2, {r0, r1}
      vehicle_twist_msg_.header.frame_id = xFrameId;
 8002008:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800200c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002010:	f507 724c 	add.w	r2, r7, #816	@ 0x330
 8002014:	f5a2 7224 	sub.w	r2, r2, #656	@ 0x290
 8002018:	3308      	adds	r3, #8
 800201a:	ca07      	ldmia	r2, {r0, r1, r2}
 800201c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      vehicle_twist_msg_.heading_rate = xControlSignal.fHeadingRate;
 8002020:	4b27      	ldr	r3, [pc, #156]	@ (80020c0 <StartMicroAutoware+0x618>)
 8002022:	69da      	ldr	r2, [r3, #28]
 8002024:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8002028:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800202c:	61da      	str	r2, [r3, #28]
      vehicle_twist_msg_.lateral_velocity = xControlSignal.fLatSpeed;
 800202e:	4b24      	ldr	r3, [pc, #144]	@ (80020c0 <StartMicroAutoware+0x618>)
 8002030:	699a      	ldr	r2, [r3, #24]
 8002032:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8002036:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800203a:	619a      	str	r2, [r3, #24]
      vehicle_twist_msg_.longitudinal_velocity = xControlSignal.fLongSpeed;
 800203c:	4b20      	ldr	r3, [pc, #128]	@ (80020c0 <StartMicroAutoware+0x618>)
 800203e:	695a      	ldr	r2, [r3, #20]
 8002040:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8002044:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002048:	615a      	str	r2, [r3, #20]

      // steering_status_msg_ data
      steering_status_msg_.stamp = clock_msg_.clock;
 800204a:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800204e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002052:	461a      	mov	r2, r3
 8002054:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8002058:	e893 0003 	ldmia.w	r3, {r0, r1}
 800205c:	e882 0003 	stmia.w	r2, {r0, r1}
      steering_status_msg_.steering_tire_angle = xControlSignal.fSteeringStatus;
 8002060:	4b17      	ldr	r3, [pc, #92]	@ (80020c0 <StartMicroAutoware+0x618>)
 8002062:	6a1a      	ldr	r2, [r3, #32]
 8002064:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8002068:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800206c:	609a      	str	r2, [r3, #8]

      osMutexRelease(MutexControlSignalHandle);
 800206e:	4b12      	ldr	r3, [pc, #72]	@ (80020b8 <StartMicroAutoware+0x610>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f00c f9f2 	bl	800e45c <osMutexRelease>

      // Publishing in Autoware topics
      rcl_publish(&vehicle_twist_pub_, &vehicle_twist_msg_, NULL);
 8002078:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 800207c:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8002080:	2200      	movs	r2, #0
 8002082:	4618      	mov	r0, r3
 8002084:	f012 f942 	bl	801430c <rcl_publish>
      rcl_publish(&steering_status_pub_, &steering_status_msg_, NULL);
 8002088:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 800208c:	f507 733d 	add.w	r3, r7, #756	@ 0x2f4
 8002090:	2200      	movs	r2, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f012 f93a 	bl	801430c <rcl_publish>
      // Reseting subscribers flags
    }
    
    ucSubscribersRecieved = 0;
 8002098:	4b03      	ldr	r3, [pc, #12]	@ (80020a8 <StartMicroAutoware+0x600>)
 800209a:	2200      	movs	r2, #0
 800209c:	701a      	strb	r2, [r3, #0]
    rmw_uros_sync_session(TIMEOUT_TS_SYNC);
 800209e:	e687      	b.n	8001db0 <StartMicroAutoware+0x308>
 80020a0:	33333333 	.word	0x33333333
 80020a4:	3ff33333 	.word	0x3ff33333
 80020a8:	240329ea 	.word	0x240329ea
 80020ac:	24032974 	.word	0x24032974
 80020b0:	24032988 	.word	0x24032988
 80020b4:	24032968 	.word	0x24032968
 80020b8:	24032970 	.word	0x24032970
 80020bc:	0802331c 	.word	0x0802331c
 80020c0:	240329a0 	.word	0x240329a0

080020c4 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80020ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002100 <microros_allocate+0x3c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4413      	add	r3, r2
 80020d8:	461a      	mov	r2, r3
 80020da:	4b09      	ldr	r3, [pc, #36]	@ (8002100 <microros_allocate+0x3c>)
 80020dc:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80020de:	4b09      	ldr	r3, [pc, #36]	@ (8002104 <microros_allocate+0x40>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	461a      	mov	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4413      	add	r3, r2
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b06      	ldr	r3, [pc, #24]	@ (8002104 <microros_allocate+0x40>)
 80020ec:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7fe fc5a 	bl	80009a8 <pvPortMallocMicroROS>
 80020f4:	4603      	mov	r3, r0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	240329ec 	.word	0x240329ec
 8002104:	240329f0 	.word	0x240329f0

08002108 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00c      	beq.n	8002132 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7fe fd69 	bl	8000bf0 <getBlockSize>
 800211e:	4603      	mov	r3, r0
 8002120:	4a06      	ldr	r2, [pc, #24]	@ (800213c <microros_deallocate+0x34>)
 8002122:	6812      	ldr	r2, [r2, #0]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	461a      	mov	r2, r3
 8002128:	4b04      	ldr	r3, [pc, #16]	@ (800213c <microros_deallocate+0x34>)
 800212a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7fe fd03 	bl	8000b38 <vPortFreeMicroROS>
  }
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	240329f0 	.word	0x240329f0

08002140 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800214c:	4b15      	ldr	r3, [pc, #84]	@ (80021a4 <microros_reallocate+0x64>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	4413      	add	r3, r2
 8002156:	461a      	mov	r2, r3
 8002158:	4b12      	ldr	r3, [pc, #72]	@ (80021a4 <microros_reallocate+0x64>)
 800215a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800215c:	4b12      	ldr	r3, [pc, #72]	@ (80021a8 <microros_reallocate+0x68>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	4413      	add	r3, r2
 8002166:	461a      	mov	r2, r3
 8002168:	4b0f      	ldr	r3, [pc, #60]	@ (80021a8 <microros_reallocate+0x68>)
 800216a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d104      	bne.n	800217c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002172:	68b8      	ldr	r0, [r7, #8]
 8002174:	f7fe fc18 	bl	80009a8 <pvPortMallocMicroROS>
 8002178:	4603      	mov	r3, r0
 800217a:	e00e      	b.n	800219a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f7fe fd37 	bl	8000bf0 <getBlockSize>
 8002182:	4603      	mov	r3, r0
 8002184:	4a08      	ldr	r2, [pc, #32]	@ (80021a8 <microros_reallocate+0x68>)
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	461a      	mov	r2, r3
 800218c:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <microros_reallocate+0x68>)
 800218e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002190:	68b9      	ldr	r1, [r7, #8]
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f7fe fd4a 	bl	8000c2c <pvPortReallocMicroROS>
 8002198:	4603      	mov	r3, r0
  }
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	240329ec 	.word	0x240329ec
 80021a8:	240329f0 	.word	0x240329f0

080021ac <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	fb02 f303 	mul.w	r3, r2, r3
 80021c0:	4a0c      	ldr	r2, [pc, #48]	@ (80021f4 <microros_zero_allocate+0x48>)
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	4413      	add	r3, r2
 80021c6:	461a      	mov	r2, r3
 80021c8:	4b0a      	ldr	r3, [pc, #40]	@ (80021f4 <microros_zero_allocate+0x48>)
 80021ca:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	fb02 f303 	mul.w	r3, r2, r3
 80021d4:	4a08      	ldr	r2, [pc, #32]	@ (80021f8 <microros_zero_allocate+0x4c>)
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	4413      	add	r3, r2
 80021da:	461a      	mov	r2, r3
 80021dc:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <microros_zero_allocate+0x4c>)
 80021de:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80021e0:	68b9      	ldr	r1, [r7, #8]
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f7fe fd4f 	bl	8000c86 <pvPortCallocMicroROS>
 80021e8:	4603      	mov	r3, r0
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	240329ec 	.word	0x240329ec
 80021f8:	240329f0 	.word	0x240329f0
 80021fc:	00000000 	.word	0x00000000

08002200 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002200:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002204:	b086      	sub	sp, #24
 8002206:	af00      	add	r7, sp, #0
 8002208:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800220c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002212:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002216:	a320      	add	r3, pc, #128	@ (adr r3, 8002298 <UTILS_NanosecondsToTimespec+0x98>)
 8002218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221c:	f7fe f8c8 	bl	80003b0 <__aeabi_ldivmod>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800222a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800222e:	a31a      	add	r3, pc, #104	@ (adr r3, 8002298 <UTILS_NanosecondsToTimespec+0x98>)
 8002230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002234:	f7fe f8bc 	bl	80003b0 <__aeabi_ldivmod>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	da20      	bge.n	8002286 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	4a11      	ldr	r2, [pc, #68]	@ (8002290 <UTILS_NanosecondsToTimespec+0x90>)
 800224a:	fb82 1203 	smull	r1, r2, r2, r3
 800224e:	1712      	asrs	r2, r2, #28
 8002250:	17db      	asrs	r3, r3, #31
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	3301      	adds	r3, #1
 8002256:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225e:	6979      	ldr	r1, [r7, #20]
 8002260:	17c8      	asrs	r0, r1, #31
 8002262:	460c      	mov	r4, r1
 8002264:	4605      	mov	r5, r0
 8002266:	ebb2 0804 	subs.w	r8, r2, r4
 800226a:	eb63 0905 	sbc.w	r9, r3, r5
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	4906      	ldr	r1, [pc, #24]	@ (8002294 <UTILS_NanosecondsToTimespec+0x94>)
 800227c:	fb01 f303 	mul.w	r3, r1, r3
 8002280:	441a      	add	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	609a      	str	r2, [r3, #8]
    }
}
 8002286:	bf00      	nop
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002290:	44b82fa1 	.word	0x44b82fa1
 8002294:	3b9aca00 	.word	0x3b9aca00
 8002298:	3b9aca00 	.word	0x3b9aca00
 800229c:	00000000 	.word	0x00000000

080022a0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80022a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022a4:	b08e      	sub	sp, #56	@ 0x38
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80022aa:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80022ac:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80022b0:	2300      	movs	r3, #0
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	f04f 0300 	mov.w	r3, #0
 80022be:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80022c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022c6:	4618      	mov	r0, r3
 80022c8:	f00d fe0c 	bl	800fee4 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80022cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ce:	17da      	asrs	r2, r3, #31
 80022d0:	61bb      	str	r3, [r7, #24]
 80022d2:	61fa      	str	r2, [r7, #28]
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	69b9      	ldr	r1, [r7, #24]
 80022de:	000b      	movs	r3, r1
 80022e0:	2200      	movs	r2, #0
 80022e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80022e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022e8:	2200      	movs	r2, #0
 80022ea:	461c      	mov	r4, r3
 80022ec:	4615      	mov	r5, r2
 80022ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80022f2:	1911      	adds	r1, r2, r4
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	416b      	adcs	r3, r5
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80022fe:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002302:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	f04f 0400 	mov.w	r4, #0
 800230e:	f04f 0500 	mov.w	r5, #0
 8002312:	015d      	lsls	r5, r3, #5
 8002314:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002318:	0154      	lsls	r4, r2, #5
 800231a:	4622      	mov	r2, r4
 800231c:	462b      	mov	r3, r5
 800231e:	ebb2 0800 	subs.w	r8, r2, r0
 8002322:	eb63 0901 	sbc.w	r9, r3, r1
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002332:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002336:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800233a:	4690      	mov	r8, r2
 800233c:	4699      	mov	r9, r3
 800233e:	eb18 0a00 	adds.w	sl, r8, r0
 8002342:	eb49 0b01 	adc.w	fp, r9, r1
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002352:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002356:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800235a:	ebb2 040a 	subs.w	r4, r2, sl
 800235e:	603c      	str	r4, [r7, #0]
 8002360:	eb63 030b 	sbc.w	r3, r3, fp
 8002364:	607b      	str	r3, [r7, #4]
 8002366:	e9d7 4500 	ldrd	r4, r5, [r7]
 800236a:	4623      	mov	r3, r4
 800236c:	181b      	adds	r3, r3, r0
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	462b      	mov	r3, r5
 8002372:	eb41 0303 	adc.w	r3, r1, r3
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	6a3a      	ldr	r2, [r7, #32]
 800237a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800237e:	f7ff ff3f 	bl	8002200 <UTILS_NanosecondsToTimespec>

    return 0;
 8002382:	2300      	movs	r3, #0
 8002384:	4618      	mov	r0, r3
 8002386:	3738      	adds	r7, #56	@ 0x38
 8002388:	46bd      	mov	sp, r7
 800238a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002396:	4b0c      	ldr	r3, [pc, #48]	@ (80023c8 <HAL_MspInit+0x38>)
 8002398:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800239c:	4a0a      	ldr	r2, [pc, #40]	@ (80023c8 <HAL_MspInit+0x38>)
 800239e:	f043 0302 	orr.w	r3, r3, #2
 80023a2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80023a6:	4b08      	ldr	r3, [pc, #32]	@ (80023c8 <HAL_MspInit+0x38>)
 80023a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	607b      	str	r3, [r7, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023b4:	2200      	movs	r2, #0
 80023b6:	210f      	movs	r1, #15
 80023b8:	f06f 0001 	mvn.w	r0, #1
 80023bc:	f002 fbfc 	bl	8004bb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	58024400 	.word	0x58024400

080023cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b090      	sub	sp, #64	@ 0x40
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b0f      	cmp	r3, #15
 80023d8:	d827      	bhi.n	800242a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80023da:	2200      	movs	r2, #0
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	2036      	movs	r0, #54	@ 0x36
 80023e0:	f002 fbea 	bl	8004bb8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023e4:	2036      	movs	r0, #54	@ 0x36
 80023e6:	f002 fc01 	bl	8004bec <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80023ea:	4a29      	ldr	r2, [pc, #164]	@ (8002490 <HAL_InitTick+0xc4>)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80023f0:	4b28      	ldr	r3, [pc, #160]	@ (8002494 <HAL_InitTick+0xc8>)
 80023f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023f6:	4a27      	ldr	r2, [pc, #156]	@ (8002494 <HAL_InitTick+0xc8>)
 80023f8:	f043 0310 	orr.w	r3, r3, #16
 80023fc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002400:	4b24      	ldr	r3, [pc, #144]	@ (8002494 <HAL_InitTick+0xc8>)
 8002402:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800240e:	f107 0210 	add.w	r2, r7, #16
 8002412:	f107 0314 	add.w	r3, r7, #20
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f006 fc41 	bl	8008ca0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800241e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002420:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002424:	2b00      	cmp	r3, #0
 8002426:	d106      	bne.n	8002436 <HAL_InitTick+0x6a>
 8002428:	e001      	b.n	800242e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e02b      	b.n	8002486 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800242e:	f006 fc0b 	bl	8008c48 <HAL_RCC_GetPCLK1Freq>
 8002432:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002434:	e004      	b.n	8002440 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002436:	f006 fc07 	bl	8008c48 <HAL_RCC_GetPCLK1Freq>
 800243a:	4603      	mov	r3, r0
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002442:	4a15      	ldr	r2, [pc, #84]	@ (8002498 <HAL_InitTick+0xcc>)
 8002444:	fba2 2303 	umull	r2, r3, r2, r3
 8002448:	0c9b      	lsrs	r3, r3, #18
 800244a:	3b01      	subs	r3, #1
 800244c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800244e:	4b13      	ldr	r3, [pc, #76]	@ (800249c <HAL_InitTick+0xd0>)
 8002450:	4a13      	ldr	r2, [pc, #76]	@ (80024a0 <HAL_InitTick+0xd4>)
 8002452:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002454:	4b11      	ldr	r3, [pc, #68]	@ (800249c <HAL_InitTick+0xd0>)
 8002456:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800245a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800245c:	4a0f      	ldr	r2, [pc, #60]	@ (800249c <HAL_InitTick+0xd0>)
 800245e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002460:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002462:	4b0e      	ldr	r3, [pc, #56]	@ (800249c <HAL_InitTick+0xd0>)
 8002464:	2200      	movs	r2, #0
 8002466:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002468:	4b0c      	ldr	r3, [pc, #48]	@ (800249c <HAL_InitTick+0xd0>)
 800246a:	2200      	movs	r2, #0
 800246c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800246e:	480b      	ldr	r0, [pc, #44]	@ (800249c <HAL_InitTick+0xd0>)
 8002470:	f009 f956 	bl	800b720 <HAL_TIM_Base_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d104      	bne.n	8002484 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800247a:	4808      	ldr	r0, [pc, #32]	@ (800249c <HAL_InitTick+0xd0>)
 800247c:	f009 f9b2 	bl	800b7e4 <HAL_TIM_Base_Start_IT>
 8002480:	4603      	mov	r3, r0
 8002482:	e000      	b.n	8002486 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
}
 8002486:	4618      	mov	r0, r3
 8002488:	3740      	adds	r7, #64	@ 0x40
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	2400000c 	.word	0x2400000c
 8002494:	58024400 	.word	0x58024400
 8002498:	431bde83 	.word	0x431bde83
 800249c:	240329f4 	.word	0x240329f4
 80024a0:	40001000 	.word	0x40001000

080024a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024a8:	bf00      	nop
 80024aa:	e7fd      	b.n	80024a8 <NMI_Handler+0x4>

080024ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024b0:	bf00      	nop
 80024b2:	e7fd      	b.n	80024b0 <HardFault_Handler+0x4>

080024b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024b8:	bf00      	nop
 80024ba:	e7fd      	b.n	80024b8 <MemManage_Handler+0x4>

080024bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024c0:	bf00      	nop
 80024c2:	e7fd      	b.n	80024c0 <BusFault_Handler+0x4>

080024c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024c8:	bf00      	nop
 80024ca:	e7fd      	b.n	80024c8 <UsageFault_Handler+0x4>

080024cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80024e0:	4802      	ldr	r0, [pc, #8]	@ (80024ec <DMA1_Stream0_IRQHandler+0x10>)
 80024e2:	f003 febb 	bl	800625c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	24032c60 	.word	0x24032c60

080024f0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80024f4:	4802      	ldr	r0, [pc, #8]	@ (8002500 <DMA1_Stream1_IRQHandler+0x10>)
 80024f6:	f003 feb1 	bl	800625c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	24032cd8 	.word	0x24032cd8

08002504 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002508:	4802      	ldr	r0, [pc, #8]	@ (8002514 <USART2_IRQHandler+0x10>)
 800250a:	f009 fd89 	bl	800c020 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	24032a48 	.word	0x24032a48

08002518 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800251c:	4802      	ldr	r0, [pc, #8]	@ (8002528 <USART3_IRQHandler+0x10>)
 800251e:	f009 fd7f 	bl	800c020 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	24032adc 	.word	0x24032adc

0800252c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JoySW_Pin);
 8002530:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002534:	f005 fb79 	bl	8007c2a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}

0800253c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002540:	4802      	ldr	r0, [pc, #8]	@ (800254c <TIM6_DAC_IRQHandler+0x10>)
 8002542:	f009 f9c7 	bl	800b8d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	240329f4 	.word	0x240329f4

08002550 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002554:	4802      	ldr	r0, [pc, #8]	@ (8002560 <DMA2_Stream1_IRQHandler+0x10>)
 8002556:	f003 fe81 	bl	800625c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	24032b70 	.word	0x24032b70

08002564 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002568:	4802      	ldr	r0, [pc, #8]	@ (8002574 <DMA2_Stream2_IRQHandler+0x10>)
 800256a:	f003 fe77 	bl	800625c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	24032be8 	.word	0x24032be8

08002578 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return 1;
 800257c:	2301      	movs	r3, #1
}
 800257e:	4618      	mov	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <_kill>:

int _kill(int pid, int sig)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002592:	f01f ff07 	bl	80223a4 <__errno>
 8002596:	4603      	mov	r3, r0
 8002598:	2216      	movs	r2, #22
 800259a:	601a      	str	r2, [r3, #0]
  return -1;
 800259c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <_exit>:

void _exit (int status)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff ffe7 	bl	8002588 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025ba:	bf00      	nop
 80025bc:	e7fd      	b.n	80025ba <_exit+0x12>

080025be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b086      	sub	sp, #24
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
 80025ce:	e00a      	b.n	80025e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025d0:	f3af 8000 	nop.w
 80025d4:	4601      	mov	r1, r0
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	60ba      	str	r2, [r7, #8]
 80025dc:	b2ca      	uxtb	r2, r1
 80025de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	3301      	adds	r3, #1
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	dbf0      	blt.n	80025d0 <_read+0x12>
  }

  return len;
 80025ee:	687b      	ldr	r3, [r7, #4]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	e009      	b.n	800261e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	60ba      	str	r2, [r7, #8]
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	3301      	adds	r3, #1
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	429a      	cmp	r2, r3
 8002624:	dbf1      	blt.n	800260a <_write+0x12>
  }
  return len;
 8002626:	687b      	ldr	r3, [r7, #4]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <_close>:

int _close(int file)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002638:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800263c:	4618      	mov	r0, r3
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002658:	605a      	str	r2, [r3, #4]
  return 0;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <_isatty>:

int _isatty(int file)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002670:	2301      	movs	r3, #1
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800267e:	b480      	push	{r7}
 8002680:	b085      	sub	sp, #20
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026a0:	4a14      	ldr	r2, [pc, #80]	@ (80026f4 <_sbrk+0x5c>)
 80026a2:	4b15      	ldr	r3, [pc, #84]	@ (80026f8 <_sbrk+0x60>)
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026ac:	4b13      	ldr	r3, [pc, #76]	@ (80026fc <_sbrk+0x64>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d102      	bne.n	80026ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026b4:	4b11      	ldr	r3, [pc, #68]	@ (80026fc <_sbrk+0x64>)
 80026b6:	4a12      	ldr	r2, [pc, #72]	@ (8002700 <_sbrk+0x68>)
 80026b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ba:	4b10      	ldr	r3, [pc, #64]	@ (80026fc <_sbrk+0x64>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4413      	add	r3, r2
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d207      	bcs.n	80026d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026c8:	f01f fe6c 	bl	80223a4 <__errno>
 80026cc:	4603      	mov	r3, r0
 80026ce:	220c      	movs	r2, #12
 80026d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80026d6:	e009      	b.n	80026ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026d8:	4b08      	ldr	r3, [pc, #32]	@ (80026fc <_sbrk+0x64>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026de:	4b07      	ldr	r3, [pc, #28]	@ (80026fc <_sbrk+0x64>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4413      	add	r3, r2
 80026e6:	4a05      	ldr	r2, [pc, #20]	@ (80026fc <_sbrk+0x64>)
 80026e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ea:	68fb      	ldr	r3, [r7, #12]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	24080000 	.word	0x24080000
 80026f8:	00000400 	.word	0x00000400
 80026fc:	24032a44 	.word	0x24032a44
 8002700:	240696f0 	.word	0x240696f0

08002704 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002708:	4b37      	ldr	r3, [pc, #220]	@ (80027e8 <SystemInit+0xe4>)
 800270a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800270e:	4a36      	ldr	r2, [pc, #216]	@ (80027e8 <SystemInit+0xe4>)
 8002710:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002714:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002718:	4b34      	ldr	r3, [pc, #208]	@ (80027ec <SystemInit+0xe8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 030f 	and.w	r3, r3, #15
 8002720:	2b06      	cmp	r3, #6
 8002722:	d807      	bhi.n	8002734 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002724:	4b31      	ldr	r3, [pc, #196]	@ (80027ec <SystemInit+0xe8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f023 030f 	bic.w	r3, r3, #15
 800272c:	4a2f      	ldr	r2, [pc, #188]	@ (80027ec <SystemInit+0xe8>)
 800272e:	f043 0307 	orr.w	r3, r3, #7
 8002732:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002734:	4b2e      	ldr	r3, [pc, #184]	@ (80027f0 <SystemInit+0xec>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a2d      	ldr	r2, [pc, #180]	@ (80027f0 <SystemInit+0xec>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002740:	4b2b      	ldr	r3, [pc, #172]	@ (80027f0 <SystemInit+0xec>)
 8002742:	2200      	movs	r2, #0
 8002744:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002746:	4b2a      	ldr	r3, [pc, #168]	@ (80027f0 <SystemInit+0xec>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	4929      	ldr	r1, [pc, #164]	@ (80027f0 <SystemInit+0xec>)
 800274c:	4b29      	ldr	r3, [pc, #164]	@ (80027f4 <SystemInit+0xf0>)
 800274e:	4013      	ands	r3, r2
 8002750:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002752:	4b26      	ldr	r3, [pc, #152]	@ (80027ec <SystemInit+0xe8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d007      	beq.n	800276e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800275e:	4b23      	ldr	r3, [pc, #140]	@ (80027ec <SystemInit+0xe8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 030f 	bic.w	r3, r3, #15
 8002766:	4a21      	ldr	r2, [pc, #132]	@ (80027ec <SystemInit+0xe8>)
 8002768:	f043 0307 	orr.w	r3, r3, #7
 800276c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800276e:	4b20      	ldr	r3, [pc, #128]	@ (80027f0 <SystemInit+0xec>)
 8002770:	2200      	movs	r2, #0
 8002772:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002774:	4b1e      	ldr	r3, [pc, #120]	@ (80027f0 <SystemInit+0xec>)
 8002776:	2200      	movs	r2, #0
 8002778:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800277a:	4b1d      	ldr	r3, [pc, #116]	@ (80027f0 <SystemInit+0xec>)
 800277c:	2200      	movs	r2, #0
 800277e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002780:	4b1b      	ldr	r3, [pc, #108]	@ (80027f0 <SystemInit+0xec>)
 8002782:	4a1d      	ldr	r2, [pc, #116]	@ (80027f8 <SystemInit+0xf4>)
 8002784:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002786:	4b1a      	ldr	r3, [pc, #104]	@ (80027f0 <SystemInit+0xec>)
 8002788:	4a1c      	ldr	r2, [pc, #112]	@ (80027fc <SystemInit+0xf8>)
 800278a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800278c:	4b18      	ldr	r3, [pc, #96]	@ (80027f0 <SystemInit+0xec>)
 800278e:	4a1c      	ldr	r2, [pc, #112]	@ (8002800 <SystemInit+0xfc>)
 8002790:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002792:	4b17      	ldr	r3, [pc, #92]	@ (80027f0 <SystemInit+0xec>)
 8002794:	2200      	movs	r2, #0
 8002796:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002798:	4b15      	ldr	r3, [pc, #84]	@ (80027f0 <SystemInit+0xec>)
 800279a:	4a19      	ldr	r2, [pc, #100]	@ (8002800 <SystemInit+0xfc>)
 800279c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800279e:	4b14      	ldr	r3, [pc, #80]	@ (80027f0 <SystemInit+0xec>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80027a4:	4b12      	ldr	r3, [pc, #72]	@ (80027f0 <SystemInit+0xec>)
 80027a6:	4a16      	ldr	r2, [pc, #88]	@ (8002800 <SystemInit+0xfc>)
 80027a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80027aa:	4b11      	ldr	r3, [pc, #68]	@ (80027f0 <SystemInit+0xec>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027b0:	4b0f      	ldr	r3, [pc, #60]	@ (80027f0 <SystemInit+0xec>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a0e      	ldr	r2, [pc, #56]	@ (80027f0 <SystemInit+0xec>)
 80027b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80027bc:	4b0c      	ldr	r3, [pc, #48]	@ (80027f0 <SystemInit+0xec>)
 80027be:	2200      	movs	r2, #0
 80027c0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80027c2:	4b10      	ldr	r3, [pc, #64]	@ (8002804 <SystemInit+0x100>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	4b10      	ldr	r3, [pc, #64]	@ (8002808 <SystemInit+0x104>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027ce:	d202      	bcs.n	80027d6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80027d0:	4b0e      	ldr	r3, [pc, #56]	@ (800280c <SystemInit+0x108>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80027d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002810 <SystemInit+0x10c>)
 80027d8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80027dc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80027de:	bf00      	nop
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000ed00 	.word	0xe000ed00
 80027ec:	52002000 	.word	0x52002000
 80027f0:	58024400 	.word	0x58024400
 80027f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80027f8:	02020200 	.word	0x02020200
 80027fc:	01ff0000 	.word	0x01ff0000
 8002800:	01010280 	.word	0x01010280
 8002804:	5c001000 	.word	0x5c001000
 8002808:	ffff0000 	.word	0xffff0000
 800280c:	51008108 	.word	0x51008108
 8002810:	52004000 	.word	0x52004000

08002814 <StartTaskControle>:
  * @brief  TaskControle task function.
  * @param  argument: not used.
  * @retval None
  */
void StartTaskControle(void * argument)
{
 8002814:	b590      	push	{r4, r7, lr}
 8002816:	b099      	sub	sp, #100	@ 0x64
 8002818:	af04      	add	r7, sp, #16
 800281a:	6078      	str	r0, [r7, #4]
  // Local variables -- START
  unsigned char ucControlMode;
  unsigned char ucFlagFullMsg;

  // Joystick calibration
  unsigned int uiX0   = 33970;
 800281c:	f248 43b2 	movw	r3, #33970	@ 0x84b2
 8002820:	64bb      	str	r3, [r7, #72]	@ 0x48
  unsigned int uiXMin = 1057;
 8002822:	f240 4321 	movw	r3, #1057	@ 0x421
 8002826:	647b      	str	r3, [r7, #68]	@ 0x44
  unsigned int uiXMax = 65535;
 8002828:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800282c:	643b      	str	r3, [r7, #64]	@ 0x40
  unsigned int uiY0   = 33580;
 800282e:	f248 332c 	movw	r3, #33580	@ 0x832c
 8002832:	63fb      	str	r3, [r7, #60]	@ 0x3c
  unsigned int uiYMin = 1062;
 8002834:	f240 4326 	movw	r3, #1062	@ 0x426
 8002838:	63bb      	str	r3, [r7, #56]	@ 0x38
  unsigned int uiYMax = 65535;
 800283a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800283e:	637b      	str	r3, [r7, #52]	@ 0x34

  // Return flags
  unsigned int uiFlags = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	633b      	str	r3, [r7, #48]	@ 0x30
  unsigned char ucTxMsgToCarla[MSG_TO_CARLA_SIZE];

  // Local variables -- END

  // Initialization of DMA RX in circular mode
  HAL_UART_Receive_DMA(&huart2, ucDmaBuffer, UART2_DMA_BUFFER_SIZE);
 8002844:	2216      	movs	r2, #22
 8002846:	499c      	ldr	r1, [pc, #624]	@ (8002ab8 <StartTaskControle+0x2a4>)
 8002848:	489c      	ldr	r0, [pc, #624]	@ (8002abc <StartTaskControle+0x2a8>)
 800284a:	f009 fb07 	bl	800be5c <HAL_UART_Receive_DMA>

  // Initialization of operation mode
  ucControlMode = MANUAL;
 800284e:	2304      	movs	r3, #4
 8002850:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  
  uiFlags = osThreadFlagsGet();
 8002854:	f00b fc74 	bl	800e140 <osThreadFlagsGet>
 8002858:	6338      	str	r0, [r7, #48]	@ 0x30
  uiFlags = osThreadFlagsWait(MICRO_ROS_AGENT_ONLINE_FLAG, osFlagsWaitAny, 1000 * 20); // Wait 20 seconds for uROS init
 800285a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800285e:	2100      	movs	r1, #0
 8002860:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002864:	f00b fc8d 	bl	800e182 <osThreadFlagsWait>
 8002868:	6338      	str	r0, [r7, #48]	@ 0x30

  if(osFlagsErrorTimeout == uiFlags)
 800286a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800286c:	f113 0f02 	cmn.w	r3, #2
 8002870:	d102      	bne.n	8002878 <StartTaskControle+0x64>
  {
    ucControlMode = MANUAL;
 8002872:	2304      	movs	r3, #4
 8002874:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  // Task loop
  for(;;)
  {

    // Looking fot operation mode change by Autoware -- START
	  uiFlags = osThreadFlagsGet();
 8002878:	f00b fc62 	bl	800e140 <osThreadFlagsGet>
 800287c:	6338      	str	r0, [r7, #48]	@ 0x30
    uiFlags = osThreadFlagsWait(TO_AUTOWARE_MODE_FLAG | TO_MANUAL_MODE_FLAG, osFlagsWaitAny, 0);
 800287e:	2200      	movs	r2, #0
 8002880:	2100      	movs	r1, #0
 8002882:	2011      	movs	r0, #17
 8002884:	f00b fc7d 	bl	800e182 <osThreadFlagsWait>
 8002888:	6338      	str	r0, [r7, #48]	@ 0x30

    if(CHECK_FLAG(TO_AUTOWARE_MODE_FLAG, uiFlags))
 800288a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d006      	beq.n	80028a2 <StartTaskControle+0x8e>
 8002894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002896:	2b00      	cmp	r3, #0
 8002898:	db03      	blt.n	80028a2 <StartTaskControle+0x8e>
    {
      ucControlMode = AUTOWARE;
 800289a:	2301      	movs	r3, #1
 800289c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80028a0:	e016      	b.n	80028d0 <StartTaskControle+0xbc>
    }
    else if(CHECK_FLAG(TO_MANUAL_MODE_FLAG, uiFlags))
 80028a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d006      	beq.n	80028ba <StartTaskControle+0xa6>
 80028ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	db03      	blt.n	80028ba <StartTaskControle+0xa6>
    {
      ucControlMode = MANUAL;
 80028b2:	2304      	movs	r3, #4
 80028b4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80028b8:	e00a      	b.n	80028d0 <StartTaskControle+0xbc>
    }
    else if(CHECK_FLAG((TO_AUTOWARE_MODE_FLAG | TO_MANUAL_MODE_FLAG), uiFlags))
 80028ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028bc:	f003 0311 	and.w	r3, r3, #17
 80028c0:	2b11      	cmp	r3, #17
 80028c2:	d105      	bne.n	80028d0 <StartTaskControle+0xbc>
 80028c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	db02      	blt.n	80028d0 <StartTaskControle+0xbc>
    {
      ucControlMode = MANUAL;
 80028ca:	2304      	movs	r3, #4
 80028cc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }
    // Looking for operation mode change by Autoware -- END

    // Looking for operation mode change by JoySW -- START
    uiFlags = osThreadFlagsGet();
 80028d0:	f00b fc36 	bl	800e140 <osThreadFlagsGet>
 80028d4:	6338      	str	r0, [r7, #48]	@ 0x30
    uiFlags = osThreadFlagsWait(JOYSW_FLAG, osFlagsWaitAll, 0);
 80028d6:	2200      	movs	r2, #0
 80028d8:	2101      	movs	r1, #1
 80028da:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80028de:	f00b fc50 	bl	800e182 <osThreadFlagsWait>
 80028e2:	6338      	str	r0, [r7, #48]	@ 0x30

    if(CHECK_FLAG(JOYSW_FLAG, uiFlags))
 80028e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d01d      	beq.n	800292a <StartTaskControle+0x116>
 80028ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	db1a      	blt.n	800292a <StartTaskControle+0x116>
    {
      if(AUTOWARE == ucControlMode)
 80028f4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d109      	bne.n	8002910 <StartTaskControle+0xfc>
      {
        ucControlMode = MANUAL;
 80028fc:	2304      	movs	r3, #4
 80028fe:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 8002902:	4b6f      	ldr	r3, [pc, #444]	@ (8002ac0 <StartTaskControle+0x2ac>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2110      	movs	r1, #16
 8002908:	4618      	mov	r0, r3
 800290a:	f00b fbcb 	bl	800e0a4 <osThreadFlagsSet>
 800290e:	e00c      	b.n	800292a <StartTaskControle+0x116>
      }
      else if(MANUAL == ucControlMode)
 8002910:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002914:	2b04      	cmp	r3, #4
 8002916:	d108      	bne.n	800292a <StartTaskControle+0x116>
      {
        ucControlMode = AUTOWARE;
 8002918:	2301      	movs	r3, #1
 800291a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        osThreadFlagsSet(TaskMicroAutowaHandle, TO_AUTOWARE_MODE_FLAG);
 800291e:	4b68      	ldr	r3, [pc, #416]	@ (8002ac0 <StartTaskControle+0x2ac>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2101      	movs	r1, #1
 8002924:	4618      	mov	r0, r3
 8002926:	f00b fbbd 	bl	800e0a4 <osThreadFlagsSet>
      }
    }
    // Looking for operation mode change by JoySW -- END

    // Autonomous mode (AUTOWARE) routine -- START
    if(AUTOWARE == ucControlMode)
 800292a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800292e:	2b01      	cmp	r3, #1
 8002930:	d17b      	bne.n	8002a2a <StartTaskControle+0x216>
    {
      // Setting driving mode lights
	  vDrivingModeLights(ucControlMode);
 8002932:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002936:	4618      	mov	r0, r3
 8002938:	f000 fc90 	bl	800325c <vDrivingModeLights>

      // WAIT for flag to sync xControlAction update
  	  uiFlags = osThreadFlagsGet();
 800293c:	f00b fc00 	bl	800e140 <osThreadFlagsGet>
 8002940:	6338      	str	r0, [r7, #48]	@ 0x30
      uiFlags = osThreadFlagsWait(DATA_UPDATED_FLAG, osFlagsWaitAll, TIMEOUT_GET_CONTROL_ACTION);
 8002942:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002946:	2101      	movs	r1, #1
 8002948:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800294c:	f00b fc19 	bl	800e182 <osThreadFlagsWait>
 8002950:	6338      	str	r0, [r7, #48]	@ 0x30

      // Timeout error
      if(osFlagsErrorTimeout == uiFlags)
 8002952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002954:	f113 0f02 	cmn.w	r3, #2
 8002958:	d109      	bne.n	800296e <StartTaskControle+0x15a>
      {
        ucControlMode = MANUAL;
 800295a:	2304      	movs	r3, #4
 800295c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 8002960:	4b57      	ldr	r3, [pc, #348]	@ (8002ac0 <StartTaskControle+0x2ac>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2110      	movs	r1, #16
 8002966:	4618      	mov	r0, r3
 8002968:	f00b fb9c 	bl	800e0a4 <osThreadFlagsSet>
 800296c:	e05d      	b.n	8002a2a <StartTaskControle+0x216>
      }
      else if(CHECK_FLAG(DATA_UPDATED_FLAG, uiFlags))
 800296e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002974:	2b00      	cmp	r3, #0
 8002976:	d058      	beq.n	8002a2a <StartTaskControle+0x216>
 8002978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800297a:	2b00      	cmp	r3, #0
 800297c:	db55      	blt.n	8002a2a <StartTaskControle+0x216>
      {
        osMutexAcquire(MutexControlActionHandle, osWaitForever);
 800297e:	4b51      	ldr	r3, [pc, #324]	@ (8002ac4 <StartTaskControle+0x2b0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002986:	4618      	mov	r0, r3
 8002988:	f00b fd1d 	bl	800e3c6 <osMutexAcquire>
        vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 800298c:	4b4e      	ldr	r3, [pc, #312]	@ (8002ac8 <StartTaskControle+0x2b4>)
 800298e:	f107 0208 	add.w	r2, r7, #8
 8002992:	9202      	str	r2, [sp, #8]
 8002994:	466c      	mov	r4, sp
 8002996:	f103 0210 	add.w	r2, r3, #16
 800299a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800299e:	e884 0003 	stmia.w	r4, {r0, r1}
 80029a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029a4:	f000 fbd6 	bl	8003154 <vGetStringFromControlAction>
        osMutexRelease(MutexControlActionHandle);
 80029a8:	4b46      	ldr	r3, [pc, #280]	@ (8002ac4 <StartTaskControle+0x2b0>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f00b fd55 	bl	800e45c <osMutexRelease>

        // Send cTxMsgToCarla to CARLA
        HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 80029b2:	f107 0308 	add.w	r3, r7, #8
 80029b6:	221e      	movs	r2, #30
 80029b8:	4619      	mov	r1, r3
 80029ba:	4840      	ldr	r0, [pc, #256]	@ (8002abc <StartTaskControle+0x2a8>)
 80029bc:	f009 f9ce 	bl	800bd5c <HAL_UART_Transmit_DMA>

        // Wait CARLA full msg xVehicleStatusRx
        uiFlags = osThreadFlagsGet();
 80029c0:	f00b fbbe 	bl	800e140 <osThreadFlagsGet>
 80029c4:	6338      	str	r0, [r7, #48]	@ 0x30
        uiFlags = osThreadFlagsWait(UART_NEW_DATA_FLAG, osFlagsWaitAll, TIMEOUT_GET_CARLA_RX);
 80029c6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80029ca:	2101      	movs	r1, #1
 80029cc:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80029d0:	f00b fbd7 	bl	800e182 <osThreadFlagsWait>
 80029d4:	6338      	str	r0, [r7, #48]	@ 0x30

        // Timeout error
        if(osFlagsErrorTimeout == uiFlags)
 80029d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d8:	f113 0f02 	cmn.w	r3, #2
 80029dc:	d102      	bne.n	80029e4 <StartTaskControle+0x1d0>
        {
          ucControlMode = EMERGENCY;
 80029de:	2300      	movs	r3, #0
 80029e0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        }

        osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 80029e4:	4b39      	ldr	r3, [pc, #228]	@ (8002acc <StartTaskControle+0x2b8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80029ec:	4618      	mov	r0, r3
 80029ee:	f00b fcea 	bl	800e3c6 <osMutexAcquire>

        xControlSignal.fLongSpeed = xVehicleStatus.xLongSpeed.fFloat;
 80029f2:	4b37      	ldr	r3, [pc, #220]	@ (8002ad0 <StartTaskControle+0x2bc>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a37      	ldr	r2, [pc, #220]	@ (8002ad4 <StartTaskControle+0x2c0>)
 80029f8:	6153      	str	r3, [r2, #20]
        xControlSignal.fLatSpeed = xVehicleStatus.xLatSpeed.fFloat;
 80029fa:	4b35      	ldr	r3, [pc, #212]	@ (8002ad0 <StartTaskControle+0x2bc>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4a35      	ldr	r2, [pc, #212]	@ (8002ad4 <StartTaskControle+0x2c0>)
 8002a00:	6193      	str	r3, [r2, #24]
        xControlSignal.fHeadingRate = xVehicleStatus.xHeadingRate.fFloat;
 8002a02:	4b33      	ldr	r3, [pc, #204]	@ (8002ad0 <StartTaskControle+0x2bc>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	4a33      	ldr	r2, [pc, #204]	@ (8002ad4 <StartTaskControle+0x2c0>)
 8002a08:	61d3      	str	r3, [r2, #28]
        xControlSignal.fSteeringStatus = xVehicleStatus.xSteeringStatus.fFloat;
 8002a0a:	4b31      	ldr	r3, [pc, #196]	@ (8002ad0 <StartTaskControle+0x2bc>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	4a31      	ldr	r2, [pc, #196]	@ (8002ad4 <StartTaskControle+0x2c0>)
 8002a10:	6213      	str	r3, [r2, #32]

        osMutexRelease(MutexControlSignalHandle);
 8002a12:	4b2e      	ldr	r3, [pc, #184]	@ (8002acc <StartTaskControle+0x2b8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f00b fd20 	bl	800e45c <osMutexRelease>

        osThreadFlagsSet(TaskMicroAutowaHandle, DATA_UPDATED_FLAG);
 8002a1c:	4b28      	ldr	r3, [pc, #160]	@ (8002ac0 <StartTaskControle+0x2ac>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a24:	4618      	mov	r0, r3
 8002a26:	f00b fb3d 	bl	800e0a4 <osThreadFlagsSet>
    }
    // Autonomous mode (AUTOWARE) routine -- END


    // Manual mode (MANUAL) routine -- START
    if(MANUAL == ucControlMode)
 8002a2a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	f040 80b4 	bne.w	8002b9c <StartTaskControle+0x388>
    {
      // Setting driving mode lights
  	  vDrivingModeLights(ucControlMode);
 8002a34:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 fc0f 	bl	800325c <vDrivingModeLights>

      // Joystick read block -- START
      fJoyXAxis = fGetJoyPostition((unsigned int) uiADC1Buffer[0], uiX0, uiXMax, uiXMin);
 8002a3e:	4b26      	ldr	r3, [pc, #152]	@ (8002ad8 <StartTaskControle+0x2c4>)
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a46:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002a48:	f000 fb50 	bl	80030ec <fGetJoyPostition>
 8002a4c:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
      fJoyYAxis = fGetJoyPostition((unsigned int) uiADC1Buffer[1], uiY0, uiYMax, uiYMin);
 8002a50:	4b21      	ldr	r3, [pc, #132]	@ (8002ad8 <StartTaskControle+0x2c4>)
 8002a52:	6858      	ldr	r0, [r3, #4]
 8002a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a5a:	f000 fb47 	bl	80030ec <fGetJoyPostition>
 8002a5e:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28

      // Assembling xControlAction
      osMutexAcquire(MutexControlActionHandle, osWaitForever);
 8002a62:	4b18      	ldr	r3, [pc, #96]	@ (8002ac4 <StartTaskControle+0x2b0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f00b fcab 	bl	800e3c6 <osMutexAcquire>
      xControlAction.xSteeringAngle.fFloat = -fJoyXAxis*MAX_STEERING_ANGLE;
 8002a70:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002a74:	eef1 7a67 	vneg.f32	s15, s15
 8002a78:	4b13      	ldr	r3, [pc, #76]	@ (8002ac8 <StartTaskControle+0x2b4>)
 8002a7a:	edc3 7a00 	vstr	s15, [r3]
      xControlAction.xSteeringVelocity.fFloat = 0;
 8002a7e:	4b12      	ldr	r3, [pc, #72]	@ (8002ac8 <StartTaskControle+0x2b4>)
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	605a      	str	r2, [r3, #4]
      xControlAction.xSpeed.fFloat = (fJoyYAxis > 0) ? fJoyYAxis*MAX_TROTTLE : 0.0;
 8002a86:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002a8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a92:	dd01      	ble.n	8002a98 <StartTaskControle+0x284>
 8002a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a96:	e001      	b.n	8002a9c <StartTaskControle+0x288>
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002ac8 <StartTaskControle+0x2b4>)
 8002a9e:	6093      	str	r3, [r2, #8]
      xControlAction.xAcceleration.fFloat = (fJoyYAxis < 0) ? -fJoyYAxis*MAX_BRAKE : 0.0;
 8002aa0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002aa4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aac:	d518      	bpl.n	8002ae0 <StartTaskControle+0x2cc>
 8002aae:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002ab2:	eef1 7a67 	vneg.f32	s15, s15
 8002ab6:	e015      	b.n	8002ae4 <StartTaskControle+0x2d0>
 8002ab8:	240329d4 	.word	0x240329d4
 8002abc:	24032a48 	.word	0x24032a48
 8002ac0:	2403296c 	.word	0x2403296c
 8002ac4:	24032974 	.word	0x24032974
 8002ac8:	24032988 	.word	0x24032988
 8002acc:	24032970 	.word	0x24032970
 8002ad0:	240329c4 	.word	0x240329c4
 8002ad4:	240329a0 	.word	0x240329a0
 8002ad8:	2403297c 	.word	0x2403297c
 8002adc:	00000000 	.word	0x00000000
 8002ae0:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 8002adc <StartTaskControle+0x2c8>
 8002ae4:	4b4e      	ldr	r3, [pc, #312]	@ (8002c20 <StartTaskControle+0x40c>)
 8002ae6:	edc3 7a03 	vstr	s15, [r3, #12]
      xControlAction.xJerk.fFloat = 0;
 8002aea:	4b4d      	ldr	r3, [pc, #308]	@ (8002c20 <StartTaskControle+0x40c>)
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	611a      	str	r2, [r3, #16]
      xControlAction.ucControlMode = MANUAL;
 8002af2:	4b4b      	ldr	r3, [pc, #300]	@ (8002c20 <StartTaskControle+0x40c>)
 8002af4:	2204      	movs	r2, #4
 8002af6:	751a      	strb	r2, [r3, #20]
      vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 8002af8:	4b49      	ldr	r3, [pc, #292]	@ (8002c20 <StartTaskControle+0x40c>)
 8002afa:	f107 0208 	add.w	r2, r7, #8
 8002afe:	9202      	str	r2, [sp, #8]
 8002b00:	466c      	mov	r4, sp
 8002b02:	f103 0210 	add.w	r2, r3, #16
 8002b06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b0a:	e884 0003 	stmia.w	r4, {r0, r1}
 8002b0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b10:	f000 fb20 	bl	8003154 <vGetStringFromControlAction>

      osMutexRelease(MutexControlActionHandle);
 8002b14:	4b43      	ldr	r3, [pc, #268]	@ (8002c24 <StartTaskControle+0x410>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f00b fc9f 	bl	800e45c <osMutexRelease>

      // Send cTxMsgToCarla to CARLA
      HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 8002b1e:	f107 0308 	add.w	r3, r7, #8
 8002b22:	221e      	movs	r2, #30
 8002b24:	4619      	mov	r1, r3
 8002b26:	4840      	ldr	r0, [pc, #256]	@ (8002c28 <StartTaskControle+0x414>)
 8002b28:	f009 f918 	bl	800bd5c <HAL_UART_Transmit_DMA>

      // Wait CARLA full msg xVehicleStatusRx
  	  uiFlags = osThreadFlagsGet();
 8002b2c:	f00b fb08 	bl	800e140 <osThreadFlagsGet>
 8002b30:	6338      	str	r0, [r7, #48]	@ 0x30
      uiFlags = osThreadFlagsWait(UART_NEW_DATA_FLAG, osFlagsWaitAll, TIMEOUT_GET_CARLA_RX);
 8002b32:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002b36:	2101      	movs	r1, #1
 8002b38:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8002b3c:	f00b fb21 	bl	800e182 <osThreadFlagsWait>
 8002b40:	6338      	str	r0, [r7, #48]	@ 0x30

      // Timeout error
      if(osFlagsErrorTimeout == uiFlags)
 8002b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b44:	f113 0f02 	cmn.w	r3, #2
 8002b48:	d102      	bne.n	8002b50 <StartTaskControle+0x33c>
      {
        ucControlMode = EMERGENCY;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      }

      // Assembling xControlSignal
      osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 8002b50:	4b36      	ldr	r3, [pc, #216]	@ (8002c2c <StartTaskControle+0x418>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f00b fc34 	bl	800e3c6 <osMutexAcquire>

      xControlSignal.fLongSpeed = xVehicleStatus.xLongSpeed.fFloat;
 8002b5e:	4b34      	ldr	r3, [pc, #208]	@ (8002c30 <StartTaskControle+0x41c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a34      	ldr	r2, [pc, #208]	@ (8002c34 <StartTaskControle+0x420>)
 8002b64:	6153      	str	r3, [r2, #20]
      xControlSignal.fLatSpeed = xVehicleStatus.xLatSpeed.fFloat;
 8002b66:	4b32      	ldr	r3, [pc, #200]	@ (8002c30 <StartTaskControle+0x41c>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	4a32      	ldr	r2, [pc, #200]	@ (8002c34 <StartTaskControle+0x420>)
 8002b6c:	6193      	str	r3, [r2, #24]
      xControlSignal.fHeadingRate = xVehicleStatus.xHeadingRate.fFloat;
 8002b6e:	4b30      	ldr	r3, [pc, #192]	@ (8002c30 <StartTaskControle+0x41c>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	4a30      	ldr	r2, [pc, #192]	@ (8002c34 <StartTaskControle+0x420>)
 8002b74:	61d3      	str	r3, [r2, #28]
      xControlSignal.fSteeringStatus = xVehicleStatus.xSteeringStatus.fFloat;
 8002b76:	4b2e      	ldr	r3, [pc, #184]	@ (8002c30 <StartTaskControle+0x41c>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	4a2e      	ldr	r2, [pc, #184]	@ (8002c34 <StartTaskControle+0x420>)
 8002b7c:	6213      	str	r3, [r2, #32]

      osMutexRelease(MutexControlSignalHandle);
 8002b7e:	4b2b      	ldr	r3, [pc, #172]	@ (8002c2c <StartTaskControle+0x418>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f00b fc6a 	bl	800e45c <osMutexRelease>

      osThreadFlagsSet(TaskMicroAutowaHandle, DATA_UPDATED_FLAG);
 8002b88:	4b2b      	ldr	r3, [pc, #172]	@ (8002c38 <StartTaskControle+0x424>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b90:	4618      	mov	r0, r3
 8002b92:	f00b fa87 	bl	800e0a4 <osThreadFlagsSet>

      // WAIT
      osDelay(MANUAL_CONTROL_TIME_COMMAND);
 8002b96:	2014      	movs	r0, #20
 8002b98:	f00b fb74 	bl	800e284 <osDelay>
    }
    // Manual mode (MANUAL) routine -- END

    // Emergency mode (EMERGENCY) routine -- START
    if(EMERGENCY == ucControlMode)
 8002b9c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f47f ae69 	bne.w	8002878 <StartTaskControle+0x64>
    {
      // Setting driving mode lights
  	  vDrivingModeLights(ucControlMode);
 8002ba6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 fb56 	bl	800325c <vDrivingModeLights>
    
      osMutexAcquire(MutexControlActionHandle, osWaitForever);
 8002bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c24 <StartTaskControle+0x410>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f00b fc04 	bl	800e3c6 <osMutexAcquire>

      xControlAction.xSteeringAngle.fFloat = 0;
 8002bbe:	4b18      	ldr	r3, [pc, #96]	@ (8002c20 <StartTaskControle+0x40c>)
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
      xControlAction.xSteeringVelocity.fFloat = 0;
 8002bc6:	4b16      	ldr	r3, [pc, #88]	@ (8002c20 <StartTaskControle+0x40c>)
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	605a      	str	r2, [r3, #4]
      xControlAction.xSpeed.fFloat = 0;
 8002bce:	4b14      	ldr	r3, [pc, #80]	@ (8002c20 <StartTaskControle+0x40c>)
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	609a      	str	r2, [r3, #8]
      xControlAction.xAcceleration.fFloat = 0;
 8002bd6:	4b12      	ldr	r3, [pc, #72]	@ (8002c20 <StartTaskControle+0x40c>)
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	60da      	str	r2, [r3, #12]
      xControlAction.xJerk.fFloat = 0;
 8002bde:	4b10      	ldr	r3, [pc, #64]	@ (8002c20 <StartTaskControle+0x40c>)
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	611a      	str	r2, [r3, #16]
      xControlAction.ucControlMode = EMERGENCY;
 8002be6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c20 <StartTaskControle+0x40c>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	751a      	strb	r2, [r3, #20]
      vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 8002bec:	4b0c      	ldr	r3, [pc, #48]	@ (8002c20 <StartTaskControle+0x40c>)
 8002bee:	f107 0208 	add.w	r2, r7, #8
 8002bf2:	9202      	str	r2, [sp, #8]
 8002bf4:	466c      	mov	r4, sp
 8002bf6:	f103 0210 	add.w	r2, r3, #16
 8002bfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bfe:	e884 0003 	stmia.w	r4, {r0, r1}
 8002c02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c04:	f000 faa6 	bl	8003154 <vGetStringFromControlAction>

      // Try to stop the car whatever it takes
      while(1)
      {

        HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 8002c08:	f107 0308 	add.w	r3, r7, #8
 8002c0c:	221e      	movs	r2, #30
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4805      	ldr	r0, [pc, #20]	@ (8002c28 <StartTaskControle+0x414>)
 8002c12:	f009 f8a3 	bl	800bd5c <HAL_UART_Transmit_DMA>

        HAL_Delay(MANUAL_CONTROL_TIME_COMMAND);
 8002c16:	2014      	movs	r0, #20
 8002c18:	f000 fbf0 	bl	80033fc <HAL_Delay>
        HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 8002c1c:	bf00      	nop
 8002c1e:	e7f3      	b.n	8002c08 <StartTaskControle+0x3f4>
 8002c20:	24032988 	.word	0x24032988
 8002c24:	24032974 	.word	0x24032974
 8002c28:	24032a48 	.word	0x24032a48
 8002c2c:	24032970 	.word	0x24032970
 8002c30:	240329c4 	.word	0x240329c4
 8002c34:	240329a0 	.word	0x240329a0
 8002c38:	2403296c 	.word	0x2403296c

08002c3c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c40:	4b22      	ldr	r3, [pc, #136]	@ (8002ccc <MX_USART2_UART_Init+0x90>)
 8002c42:	4a23      	ldr	r2, [pc, #140]	@ (8002cd0 <MX_USART2_UART_Init+0x94>)
 8002c44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8002c46:	4b21      	ldr	r3, [pc, #132]	@ (8002ccc <MX_USART2_UART_Init+0x90>)
 8002c48:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002c4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8002ccc <MX_USART2_UART_Init+0x90>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c54:	4b1d      	ldr	r3, [pc, #116]	@ (8002ccc <MX_USART2_UART_Init+0x90>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8002ccc <MX_USART2_UART_Init+0x90>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c60:	4b1a      	ldr	r3, [pc, #104]	@ (8002ccc <MX_USART2_UART_Init+0x90>)
 8002c62:	220c      	movs	r2, #12
 8002c64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c66:	4b19      	ldr	r3, [pc, #100]	@ (8002ccc <MX_USART2_UART_Init+0x90>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c6c:	4b17      	ldr	r3, [pc, #92]	@ (8002ccc <MX_USART2_UART_Init+0x90>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c72:	4b16      	ldr	r3, [pc, #88]	@ (8002ccc <MX_USART2_UART_Init+0x90>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c78:	4b14      	ldr	r3, [pc, #80]	@ (8002ccc <MX_USART2_UART_Init+0x90>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c7e:	4b13      	ldr	r3, [pc, #76]	@ (8002ccc <MX_USART2_UART_Init+0x90>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c84:	4811      	ldr	r0, [pc, #68]	@ (8002ccc <MX_USART2_UART_Init+0x90>)
 8002c86:	f009 f819 	bl	800bcbc <HAL_UART_Init>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002c90:	f7fe ff02 	bl	8001a98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c94:	2100      	movs	r1, #0
 8002c96:	480d      	ldr	r0, [pc, #52]	@ (8002ccc <MX_USART2_UART_Init+0x90>)
 8002c98:	f00b f804 	bl	800dca4 <HAL_UARTEx_SetTxFifoThreshold>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002ca2:	f7fe fef9 	bl	8001a98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	4808      	ldr	r0, [pc, #32]	@ (8002ccc <MX_USART2_UART_Init+0x90>)
 8002caa:	f00b f839 	bl	800dd20 <HAL_UARTEx_SetRxFifoThreshold>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002cb4:	f7fe fef0 	bl	8001a98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002cb8:	4804      	ldr	r0, [pc, #16]	@ (8002ccc <MX_USART2_UART_Init+0x90>)
 8002cba:	f00a ffba 	bl	800dc32 <HAL_UARTEx_DisableFifoMode>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002cc4:	f7fe fee8 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cc8:	bf00      	nop
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	24032a48 	.word	0x24032a48
 8002cd0:	40004400 	.word	0x40004400

08002cd4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002cd8:	4b22      	ldr	r3, [pc, #136]	@ (8002d64 <MX_USART3_UART_Init+0x90>)
 8002cda:	4a23      	ldr	r2, [pc, #140]	@ (8002d68 <MX_USART3_UART_Init+0x94>)
 8002cdc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8002cde:	4b21      	ldr	r3, [pc, #132]	@ (8002d64 <MX_USART3_UART_Init+0x90>)
 8002ce0:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002ce4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8002d64 <MX_USART3_UART_Init+0x90>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002cec:	4b1d      	ldr	r3, [pc, #116]	@ (8002d64 <MX_USART3_UART_Init+0x90>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8002d64 <MX_USART3_UART_Init+0x90>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d64 <MX_USART3_UART_Init+0x90>)
 8002cfa:	220c      	movs	r2, #12
 8002cfc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cfe:	4b19      	ldr	r3, [pc, #100]	@ (8002d64 <MX_USART3_UART_Init+0x90>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d04:	4b17      	ldr	r3, [pc, #92]	@ (8002d64 <MX_USART3_UART_Init+0x90>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d0a:	4b16      	ldr	r3, [pc, #88]	@ (8002d64 <MX_USART3_UART_Init+0x90>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d10:	4b14      	ldr	r3, [pc, #80]	@ (8002d64 <MX_USART3_UART_Init+0x90>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d16:	4b13      	ldr	r3, [pc, #76]	@ (8002d64 <MX_USART3_UART_Init+0x90>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002d1c:	4811      	ldr	r0, [pc, #68]	@ (8002d64 <MX_USART3_UART_Init+0x90>)
 8002d1e:	f008 ffcd 	bl	800bcbc <HAL_UART_Init>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002d28:	f7fe feb6 	bl	8001a98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	480d      	ldr	r0, [pc, #52]	@ (8002d64 <MX_USART3_UART_Init+0x90>)
 8002d30:	f00a ffb8 	bl	800dca4 <HAL_UARTEx_SetTxFifoThreshold>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002d3a:	f7fe fead 	bl	8001a98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d3e:	2100      	movs	r1, #0
 8002d40:	4808      	ldr	r0, [pc, #32]	@ (8002d64 <MX_USART3_UART_Init+0x90>)
 8002d42:	f00a ffed 	bl	800dd20 <HAL_UARTEx_SetRxFifoThreshold>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002d4c:	f7fe fea4 	bl	8001a98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002d50:	4804      	ldr	r0, [pc, #16]	@ (8002d64 <MX_USART3_UART_Init+0x90>)
 8002d52:	f00a ff6e 	bl	800dc32 <HAL_UARTEx_DisableFifoMode>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002d5c:	f7fe fe9c 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002d60:	bf00      	nop
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	24032adc 	.word	0x24032adc
 8002d68:	40004800 	.word	0x40004800

08002d6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b0be      	sub	sp, #248	@ 0xf8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d74:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d84:	f107 0320 	add.w	r3, r7, #32
 8002d88:	22c0      	movs	r2, #192	@ 0xc0
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f01f fa1f 	bl	80221d0 <memset>
  if(uartHandle->Instance==USART2)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a6a      	ldr	r2, [pc, #424]	@ (8002f40 <HAL_UART_MspInit+0x1d4>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	f040 80e1 	bne.w	8002f60 <HAL_UART_MspInit+0x1f4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d9e:	f04f 0202 	mov.w	r2, #2
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002daa:	2300      	movs	r3, #0
 8002dac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002db0:	f107 0320 	add.w	r3, r7, #32
 8002db4:	4618      	mov	r0, r3
 8002db6:	f005 ffb5 	bl	8008d24 <HAL_RCCEx_PeriphCLKConfig>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8002dc0:	f7fe fe6a 	bl	8001a98 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dc4:	4b5f      	ldr	r3, [pc, #380]	@ (8002f44 <HAL_UART_MspInit+0x1d8>)
 8002dc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002dca:	4a5e      	ldr	r2, [pc, #376]	@ (8002f44 <HAL_UART_MspInit+0x1d8>)
 8002dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dd0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002dd4:	4b5b      	ldr	r3, [pc, #364]	@ (8002f44 <HAL_UART_MspInit+0x1d8>)
 8002dd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dde:	61fb      	str	r3, [r7, #28]
 8002de0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de2:	4b58      	ldr	r3, [pc, #352]	@ (8002f44 <HAL_UART_MspInit+0x1d8>)
 8002de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002de8:	4a56      	ldr	r2, [pc, #344]	@ (8002f44 <HAL_UART_MspInit+0x1d8>)
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002df2:	4b54      	ldr	r3, [pc, #336]	@ (8002f44 <HAL_UART_MspInit+0x1d8>)
 8002df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e00:	4b50      	ldr	r3, [pc, #320]	@ (8002f44 <HAL_UART_MspInit+0x1d8>)
 8002e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e06:	4a4f      	ldr	r2, [pc, #316]	@ (8002f44 <HAL_UART_MspInit+0x1d8>)
 8002e08:	f043 0308 	orr.w	r3, r3, #8
 8002e0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e10:	4b4c      	ldr	r3, [pc, #304]	@ (8002f44 <HAL_UART_MspInit+0x1d8>)
 8002e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e1e:	2308      	movs	r3, #8
 8002e20:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e24:	2302      	movs	r3, #2
 8002e26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e30:	2300      	movs	r3, #0
 8002e32:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e36:	2307      	movs	r3, #7
 8002e38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e3c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002e40:	4619      	mov	r1, r3
 8002e42:	4841      	ldr	r0, [pc, #260]	@ (8002f48 <HAL_UART_MspInit+0x1dc>)
 8002e44:	f004 fd28 	bl	8007898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002e48:	2320      	movs	r3, #32
 8002e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e60:	2307      	movs	r3, #7
 8002e62:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e66:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4837      	ldr	r0, [pc, #220]	@ (8002f4c <HAL_UART_MspInit+0x1e0>)
 8002e6e:	f004 fd13 	bl	8007898 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Stream1;
 8002e72:	4b37      	ldr	r3, [pc, #220]	@ (8002f50 <HAL_UART_MspInit+0x1e4>)
 8002e74:	4a37      	ldr	r2, [pc, #220]	@ (8002f54 <HAL_UART_MspInit+0x1e8>)
 8002e76:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002e78:	4b35      	ldr	r3, [pc, #212]	@ (8002f50 <HAL_UART_MspInit+0x1e4>)
 8002e7a:	222b      	movs	r2, #43	@ 0x2b
 8002e7c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e7e:	4b34      	ldr	r3, [pc, #208]	@ (8002f50 <HAL_UART_MspInit+0x1e4>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e84:	4b32      	ldr	r3, [pc, #200]	@ (8002f50 <HAL_UART_MspInit+0x1e4>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e8a:	4b31      	ldr	r3, [pc, #196]	@ (8002f50 <HAL_UART_MspInit+0x1e4>)
 8002e8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e90:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e92:	4b2f      	ldr	r3, [pc, #188]	@ (8002f50 <HAL_UART_MspInit+0x1e4>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e98:	4b2d      	ldr	r3, [pc, #180]	@ (8002f50 <HAL_UART_MspInit+0x1e4>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002e9e:	4b2c      	ldr	r3, [pc, #176]	@ (8002f50 <HAL_UART_MspInit+0x1e4>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002ea4:	4b2a      	ldr	r3, [pc, #168]	@ (8002f50 <HAL_UART_MspInit+0x1e4>)
 8002ea6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002eaa:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002eac:	4b28      	ldr	r3, [pc, #160]	@ (8002f50 <HAL_UART_MspInit+0x1e4>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002eb2:	4827      	ldr	r0, [pc, #156]	@ (8002f50 <HAL_UART_MspInit+0x1e4>)
 8002eb4:	f001 fea8 	bl	8004c08 <HAL_DMA_Init>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 8002ebe:	f7fe fdeb 	bl	8001a98 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a22      	ldr	r2, [pc, #136]	@ (8002f50 <HAL_UART_MspInit+0x1e4>)
 8002ec6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002eca:	4a21      	ldr	r2, [pc, #132]	@ (8002f50 <HAL_UART_MspInit+0x1e4>)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA2_Stream2;
 8002ed0:	4b21      	ldr	r3, [pc, #132]	@ (8002f58 <HAL_UART_MspInit+0x1ec>)
 8002ed2:	4a22      	ldr	r2, [pc, #136]	@ (8002f5c <HAL_UART_MspInit+0x1f0>)
 8002ed4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002ed6:	4b20      	ldr	r3, [pc, #128]	@ (8002f58 <HAL_UART_MspInit+0x1ec>)
 8002ed8:	222c      	movs	r2, #44	@ 0x2c
 8002eda:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002edc:	4b1e      	ldr	r3, [pc, #120]	@ (8002f58 <HAL_UART_MspInit+0x1ec>)
 8002ede:	2240      	movs	r2, #64	@ 0x40
 8002ee0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f58 <HAL_UART_MspInit+0x1ec>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f58 <HAL_UART_MspInit+0x1ec>)
 8002eea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002eee:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ef0:	4b19      	ldr	r3, [pc, #100]	@ (8002f58 <HAL_UART_MspInit+0x1ec>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ef6:	4b18      	ldr	r3, [pc, #96]	@ (8002f58 <HAL_UART_MspInit+0x1ec>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002efc:	4b16      	ldr	r3, [pc, #88]	@ (8002f58 <HAL_UART_MspInit+0x1ec>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002f02:	4b15      	ldr	r3, [pc, #84]	@ (8002f58 <HAL_UART_MspInit+0x1ec>)
 8002f04:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002f08:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f0a:	4b13      	ldr	r3, [pc, #76]	@ (8002f58 <HAL_UART_MspInit+0x1ec>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002f10:	4811      	ldr	r0, [pc, #68]	@ (8002f58 <HAL_UART_MspInit+0x1ec>)
 8002f12:	f001 fe79 	bl	8004c08 <HAL_DMA_Init>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_UART_MspInit+0x1b4>
    {
      Error_Handler();
 8002f1c:	f7fe fdbc 	bl	8001a98 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a0d      	ldr	r2, [pc, #52]	@ (8002f58 <HAL_UART_MspInit+0x1ec>)
 8002f24:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002f26:	4a0c      	ldr	r2, [pc, #48]	@ (8002f58 <HAL_UART_MspInit+0x1ec>)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	2105      	movs	r1, #5
 8002f30:	2026      	movs	r0, #38	@ 0x26
 8002f32:	f001 fe41 	bl	8004bb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f36:	2026      	movs	r0, #38	@ 0x26
 8002f38:	f001 fe58 	bl	8004bec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002f3c:	e0c3      	b.n	80030c6 <HAL_UART_MspInit+0x35a>
 8002f3e:	bf00      	nop
 8002f40:	40004400 	.word	0x40004400
 8002f44:	58024400 	.word	0x58024400
 8002f48:	58020000 	.word	0x58020000
 8002f4c:	58020c00 	.word	0x58020c00
 8002f50:	24032b70 	.word	0x24032b70
 8002f54:	40020428 	.word	0x40020428
 8002f58:	24032be8 	.word	0x24032be8
 8002f5c:	40020440 	.word	0x40020440
  else if(uartHandle->Instance==USART3)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a5a      	ldr	r2, [pc, #360]	@ (80030d0 <HAL_UART_MspInit+0x364>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	f040 80ad 	bne.w	80030c6 <HAL_UART_MspInit+0x35a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002f6c:	f04f 0202 	mov.w	r2, #2
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f7e:	f107 0320 	add.w	r3, r7, #32
 8002f82:	4618      	mov	r0, r3
 8002f84:	f005 fece 	bl	8008d24 <HAL_RCCEx_PeriphCLKConfig>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_UART_MspInit+0x226>
      Error_Handler();
 8002f8e:	f7fe fd83 	bl	8001a98 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f92:	4b50      	ldr	r3, [pc, #320]	@ (80030d4 <HAL_UART_MspInit+0x368>)
 8002f94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f98:	4a4e      	ldr	r2, [pc, #312]	@ (80030d4 <HAL_UART_MspInit+0x368>)
 8002f9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f9e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002fa2:	4b4c      	ldr	r3, [pc, #304]	@ (80030d4 <HAL_UART_MspInit+0x368>)
 8002fa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fa8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fb0:	4b48      	ldr	r3, [pc, #288]	@ (80030d4 <HAL_UART_MspInit+0x368>)
 8002fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fb6:	4a47      	ldr	r2, [pc, #284]	@ (80030d4 <HAL_UART_MspInit+0x368>)
 8002fb8:	f043 0308 	orr.w	r3, r3, #8
 8002fbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002fc0:	4b44      	ldr	r3, [pc, #272]	@ (80030d4 <HAL_UART_MspInit+0x368>)
 8002fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002fce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fe8:	2307      	movs	r3, #7
 8002fea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fee:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4838      	ldr	r0, [pc, #224]	@ (80030d8 <HAL_UART_MspInit+0x36c>)
 8002ff6:	f004 fc4f 	bl	8007898 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8002ffa:	4b38      	ldr	r3, [pc, #224]	@ (80030dc <HAL_UART_MspInit+0x370>)
 8002ffc:	4a38      	ldr	r2, [pc, #224]	@ (80030e0 <HAL_UART_MspInit+0x374>)
 8002ffe:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003000:	4b36      	ldr	r3, [pc, #216]	@ (80030dc <HAL_UART_MspInit+0x370>)
 8003002:	222d      	movs	r2, #45	@ 0x2d
 8003004:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003006:	4b35      	ldr	r3, [pc, #212]	@ (80030dc <HAL_UART_MspInit+0x370>)
 8003008:	2200      	movs	r2, #0
 800300a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800300c:	4b33      	ldr	r3, [pc, #204]	@ (80030dc <HAL_UART_MspInit+0x370>)
 800300e:	2200      	movs	r2, #0
 8003010:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003012:	4b32      	ldr	r3, [pc, #200]	@ (80030dc <HAL_UART_MspInit+0x370>)
 8003014:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003018:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800301a:	4b30      	ldr	r3, [pc, #192]	@ (80030dc <HAL_UART_MspInit+0x370>)
 800301c:	2200      	movs	r2, #0
 800301e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003020:	4b2e      	ldr	r3, [pc, #184]	@ (80030dc <HAL_UART_MspInit+0x370>)
 8003022:	2200      	movs	r2, #0
 8003024:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003026:	4b2d      	ldr	r3, [pc, #180]	@ (80030dc <HAL_UART_MspInit+0x370>)
 8003028:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800302c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800302e:	4b2b      	ldr	r3, [pc, #172]	@ (80030dc <HAL_UART_MspInit+0x370>)
 8003030:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003034:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003036:	4b29      	ldr	r3, [pc, #164]	@ (80030dc <HAL_UART_MspInit+0x370>)
 8003038:	2200      	movs	r2, #0
 800303a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800303c:	4827      	ldr	r0, [pc, #156]	@ (80030dc <HAL_UART_MspInit+0x370>)
 800303e:	f001 fde3 	bl	8004c08 <HAL_DMA_Init>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <HAL_UART_MspInit+0x2e0>
      Error_Handler();
 8003048:	f7fe fd26 	bl	8001a98 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a23      	ldr	r2, [pc, #140]	@ (80030dc <HAL_UART_MspInit+0x370>)
 8003050:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003054:	4a21      	ldr	r2, [pc, #132]	@ (80030dc <HAL_UART_MspInit+0x370>)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream1;
 800305a:	4b22      	ldr	r3, [pc, #136]	@ (80030e4 <HAL_UART_MspInit+0x378>)
 800305c:	4a22      	ldr	r2, [pc, #136]	@ (80030e8 <HAL_UART_MspInit+0x37c>)
 800305e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8003060:	4b20      	ldr	r3, [pc, #128]	@ (80030e4 <HAL_UART_MspInit+0x378>)
 8003062:	222e      	movs	r2, #46	@ 0x2e
 8003064:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003066:	4b1f      	ldr	r3, [pc, #124]	@ (80030e4 <HAL_UART_MspInit+0x378>)
 8003068:	2240      	movs	r2, #64	@ 0x40
 800306a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800306c:	4b1d      	ldr	r3, [pc, #116]	@ (80030e4 <HAL_UART_MspInit+0x378>)
 800306e:	2200      	movs	r2, #0
 8003070:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003072:	4b1c      	ldr	r3, [pc, #112]	@ (80030e4 <HAL_UART_MspInit+0x378>)
 8003074:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003078:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800307a:	4b1a      	ldr	r3, [pc, #104]	@ (80030e4 <HAL_UART_MspInit+0x378>)
 800307c:	2200      	movs	r2, #0
 800307e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003080:	4b18      	ldr	r3, [pc, #96]	@ (80030e4 <HAL_UART_MspInit+0x378>)
 8003082:	2200      	movs	r2, #0
 8003084:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003086:	4b17      	ldr	r3, [pc, #92]	@ (80030e4 <HAL_UART_MspInit+0x378>)
 8003088:	2200      	movs	r2, #0
 800308a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800308c:	4b15      	ldr	r3, [pc, #84]	@ (80030e4 <HAL_UART_MspInit+0x378>)
 800308e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003092:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003094:	4b13      	ldr	r3, [pc, #76]	@ (80030e4 <HAL_UART_MspInit+0x378>)
 8003096:	2200      	movs	r2, #0
 8003098:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800309a:	4812      	ldr	r0, [pc, #72]	@ (80030e4 <HAL_UART_MspInit+0x378>)
 800309c:	f001 fdb4 	bl	8004c08 <HAL_DMA_Init>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_UART_MspInit+0x33e>
      Error_Handler();
 80030a6:	f7fe fcf7 	bl	8001a98 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a0d      	ldr	r2, [pc, #52]	@ (80030e4 <HAL_UART_MspInit+0x378>)
 80030ae:	67da      	str	r2, [r3, #124]	@ 0x7c
 80030b0:	4a0c      	ldr	r2, [pc, #48]	@ (80030e4 <HAL_UART_MspInit+0x378>)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 80030b6:	2200      	movs	r2, #0
 80030b8:	2108      	movs	r1, #8
 80030ba:	2027      	movs	r0, #39	@ 0x27
 80030bc:	f001 fd7c 	bl	8004bb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80030c0:	2027      	movs	r0, #39	@ 0x27
 80030c2:	f001 fd93 	bl	8004bec <HAL_NVIC_EnableIRQ>
}
 80030c6:	bf00      	nop
 80030c8:	37f8      	adds	r7, #248	@ 0xf8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40004800 	.word	0x40004800
 80030d4:	58024400 	.word	0x58024400
 80030d8:	58020c00 	.word	0x58020c00
 80030dc:	24032c60 	.word	0x24032c60
 80030e0:	40020010 	.word	0x40020010
 80030e4:	24032cd8 	.word	0x24032cd8
 80030e8:	40020028 	.word	0x40020028

080030ec <fGetJoyPostition>:
  * @param  uiRefMax: Analog value for axis maximum limit.
  * @param  uiRefMin: Analog value for axis minimum limit.
  * @retval Float value with joystick position between -1 and 1.
  */
float fGetJoyPostition(unsigned int uiValue, unsigned int uiRef0, unsigned int uiRefMax, unsigned int uiRefMin)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	603b      	str	r3, [r7, #0]
  return ((int)(uiValue - uiRef0) > 0) ? ((int)(uiValue - uiRef0))/((float)(uiRefMax - uiRef0)) : ((int)(uiValue - uiRef0))/((float)(uiRef0 - uiRefMin));
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	dd10      	ble.n	8003126 <fGetJoyPostition+0x3a>
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	ee07 3a90 	vmov	s15, r3
 800310e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	ee07 3a90 	vmov	s15, r3
 800311c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003124:	e00f      	b.n	8003146 <fGetJoyPostition+0x5a>
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	ee07 3a90 	vmov	s15, r3
 8003130:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	ee07 3a90 	vmov	s15, r3
 800313e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003142:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 8003146:	eeb0 0a67 	vmov.f32	s0, s15
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <vGetStringFromControlAction>:
  * @param  xControlActionTx: Compressed data with information to CARLA.
  * @param  ucTxMsg: Formated msg to be transmitted.
  * @retval None.
  */
void vGetStringFromControlAction(control_action xControlActionTx, unsigned char * ucTxMsg)
{
 8003154:	b084      	sub	sp, #16
 8003156:	b490      	push	{r4, r7}
 8003158:	af00      	add	r7, sp, #0
 800315a:	f107 0408 	add.w	r4, r7, #8
 800315e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ucTxMsg[0]  = (unsigned char)'#';
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	2223      	movs	r2, #35	@ 0x23
 8003166:	701a      	strb	r2, [r3, #0]
  ucTxMsg[1]  = (unsigned char)'S';
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	3301      	adds	r3, #1
 800316c:	2253      	movs	r2, #83	@ 0x53
 800316e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[2]  = xControlActionTx.xSteeringAngle.ucBytes[0];
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	3302      	adds	r3, #2
 8003174:	7a3a      	ldrb	r2, [r7, #8]
 8003176:	701a      	strb	r2, [r3, #0]
  ucTxMsg[3]  = xControlActionTx.xSteeringAngle.ucBytes[1];
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	3303      	adds	r3, #3
 800317c:	7a7a      	ldrb	r2, [r7, #9]
 800317e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[4]  = xControlActionTx.xSteeringAngle.ucBytes[2];
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	3304      	adds	r3, #4
 8003184:	7aba      	ldrb	r2, [r7, #10]
 8003186:	701a      	strb	r2, [r3, #0]
  ucTxMsg[5]  = xControlActionTx.xSteeringAngle.ucBytes[3];
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	3305      	adds	r3, #5
 800318c:	7afa      	ldrb	r2, [r7, #11]
 800318e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[6]  = (unsigned char)'W';
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	3306      	adds	r3, #6
 8003194:	2257      	movs	r2, #87	@ 0x57
 8003196:	701a      	strb	r2, [r3, #0]
  ucTxMsg[7]  = xControlActionTx.xSteeringVelocity.ucBytes[0];
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	3307      	adds	r3, #7
 800319c:	7b3a      	ldrb	r2, [r7, #12]
 800319e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[8]  = xControlActionTx.xSteeringVelocity.ucBytes[1];
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	3308      	adds	r3, #8
 80031a4:	7b7a      	ldrb	r2, [r7, #13]
 80031a6:	701a      	strb	r2, [r3, #0]
  ucTxMsg[9]  = xControlActionTx.xSteeringVelocity.ucBytes[2];
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	3309      	adds	r3, #9
 80031ac:	7bba      	ldrb	r2, [r7, #14]
 80031ae:	701a      	strb	r2, [r3, #0]
  ucTxMsg[10] = xControlActionTx.xSteeringVelocity.ucBytes[3];
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	330a      	adds	r3, #10
 80031b4:	7bfa      	ldrb	r2, [r7, #15]
 80031b6:	701a      	strb	r2, [r3, #0]
  ucTxMsg[11] = (unsigned char)'V';
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	330b      	adds	r3, #11
 80031bc:	2256      	movs	r2, #86	@ 0x56
 80031be:	701a      	strb	r2, [r3, #0]
  ucTxMsg[12] = xControlActionTx.xSpeed.ucBytes[0];
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	330c      	adds	r3, #12
 80031c4:	7c3a      	ldrb	r2, [r7, #16]
 80031c6:	701a      	strb	r2, [r3, #0]
  ucTxMsg[13] = xControlActionTx.xSpeed.ucBytes[1];
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	330d      	adds	r3, #13
 80031cc:	7c7a      	ldrb	r2, [r7, #17]
 80031ce:	701a      	strb	r2, [r3, #0]
  ucTxMsg[14] = xControlActionTx.xSpeed.ucBytes[2];
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	330e      	adds	r3, #14
 80031d4:	7cba      	ldrb	r2, [r7, #18]
 80031d6:	701a      	strb	r2, [r3, #0]
  ucTxMsg[15] = xControlActionTx.xSpeed.ucBytes[3];
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	330f      	adds	r3, #15
 80031dc:	7cfa      	ldrb	r2, [r7, #19]
 80031de:	701a      	strb	r2, [r3, #0]
  ucTxMsg[16] = (unsigned char)'A';
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	3310      	adds	r3, #16
 80031e4:	2241      	movs	r2, #65	@ 0x41
 80031e6:	701a      	strb	r2, [r3, #0]
  ucTxMsg[17] = xControlActionTx.xAcceleration.ucBytes[0];
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	3311      	adds	r3, #17
 80031ec:	7d3a      	ldrb	r2, [r7, #20]
 80031ee:	701a      	strb	r2, [r3, #0]
  ucTxMsg[18] = xControlActionTx.xAcceleration.ucBytes[1];
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	3312      	adds	r3, #18
 80031f4:	7d7a      	ldrb	r2, [r7, #21]
 80031f6:	701a      	strb	r2, [r3, #0]
  ucTxMsg[19] = xControlActionTx.xAcceleration.ucBytes[2];
 80031f8:	6a3b      	ldr	r3, [r7, #32]
 80031fa:	3313      	adds	r3, #19
 80031fc:	7dba      	ldrb	r2, [r7, #22]
 80031fe:	701a      	strb	r2, [r3, #0]
  ucTxMsg[20] = xControlActionTx.xAcceleration.ucBytes[3];
 8003200:	6a3b      	ldr	r3, [r7, #32]
 8003202:	3314      	adds	r3, #20
 8003204:	7dfa      	ldrb	r2, [r7, #23]
 8003206:	701a      	strb	r2, [r3, #0]
  ucTxMsg[21] = (unsigned char)'J';
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	3315      	adds	r3, #21
 800320c:	224a      	movs	r2, #74	@ 0x4a
 800320e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[22] = xControlActionTx.xJerk.ucBytes[0];
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	3316      	adds	r3, #22
 8003214:	7e3a      	ldrb	r2, [r7, #24]
 8003216:	701a      	strb	r2, [r3, #0]
  ucTxMsg[23] = xControlActionTx.xJerk.ucBytes[1];
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	3317      	adds	r3, #23
 800321c:	7e7a      	ldrb	r2, [r7, #25]
 800321e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[24] = xControlActionTx.xJerk.ucBytes[2];
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	3318      	adds	r3, #24
 8003224:	7eba      	ldrb	r2, [r7, #26]
 8003226:	701a      	strb	r2, [r3, #0]
  ucTxMsg[25] = xControlActionTx.xJerk.ucBytes[3];
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	3319      	adds	r3, #25
 800322c:	7efa      	ldrb	r2, [r7, #27]
 800322e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[26] = (unsigned char)'M';
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	331a      	adds	r3, #26
 8003234:	224d      	movs	r2, #77	@ 0x4d
 8003236:	701a      	strb	r2, [r3, #0]
  ucTxMsg[27] = xControlActionTx.ucControlMode;
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	331b      	adds	r3, #27
 800323c:	7f3a      	ldrb	r2, [r7, #28]
 800323e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[28] = (unsigned char)'$';
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	331c      	adds	r3, #28
 8003244:	2224      	movs	r2, #36	@ 0x24
 8003246:	701a      	strb	r2, [r3, #0]
  ucTxMsg[29] = (unsigned char)'\0';
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	331d      	adds	r3, #29
 800324c:	2200      	movs	r2, #0
 800324e:	701a      	strb	r2, [r3, #0]
  
}
 8003250:	bf00      	nop
 8003252:	46bd      	mov	sp, r7
 8003254:	bc90      	pop	{r4, r7}
 8003256:	b004      	add	sp, #16
 8003258:	4770      	bx	lr
	...

0800325c <vDrivingModeLights>:
  * @brief  Update driving mode signaling lights
  * @param  ucDrivingMode:  Driving mode
  * @retval None
  */
void vDrivingModeLights(unsigned char ucDrivingMode)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	71fb      	strb	r3, [r7, #7]
  switch (ucDrivingMode)
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	2b04      	cmp	r3, #4
 800326a:	d016      	beq.n	800329a <vDrivingModeLights+0x3e>
 800326c:	2b04      	cmp	r3, #4
 800326e:	dc36      	bgt.n	80032de <vDrivingModeLights+0x82>
 8003270:	2b00      	cmp	r3, #0
 8003272:	d023      	beq.n	80032bc <vDrivingModeLights+0x60>
 8003274:	2b01      	cmp	r3, #1
 8003276:	d132      	bne.n	80032de <vDrivingModeLights+0x82>
  {
    case AUTOWARE:
      HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, 0); // Green LED
 8003278:	2200      	movs	r2, #0
 800327a:	2101      	movs	r1, #1
 800327c:	481a      	ldr	r0, [pc, #104]	@ (80032e8 <vDrivingModeLights+0x8c>)
 800327e:	f004 fcbb 	bl	8007bf8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 1); // Ambar LED
 8003282:	2201      	movs	r2, #1
 8003284:	2102      	movs	r1, #2
 8003286:	4819      	ldr	r0, [pc, #100]	@ (80032ec <vDrivingModeLights+0x90>)
 8003288:	f004 fcb6 	bl	8007bf8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 0); // Red LED
 800328c:	2200      	movs	r2, #0
 800328e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003292:	4815      	ldr	r0, [pc, #84]	@ (80032e8 <vDrivingModeLights+0x8c>)
 8003294:	f004 fcb0 	bl	8007bf8 <HAL_GPIO_WritePin>
      break;
 8003298:	e022      	b.n	80032e0 <vDrivingModeLights+0x84>

    case MANUAL:
      HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, 1); // Green LED
 800329a:	2201      	movs	r2, #1
 800329c:	2101      	movs	r1, #1
 800329e:	4812      	ldr	r0, [pc, #72]	@ (80032e8 <vDrivingModeLights+0x8c>)
 80032a0:	f004 fcaa 	bl	8007bf8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0); // Ambar LED
 80032a4:	2200      	movs	r2, #0
 80032a6:	2102      	movs	r1, #2
 80032a8:	4810      	ldr	r0, [pc, #64]	@ (80032ec <vDrivingModeLights+0x90>)
 80032aa:	f004 fca5 	bl	8007bf8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 0); // Red LED
 80032ae:	2200      	movs	r2, #0
 80032b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80032b4:	480c      	ldr	r0, [pc, #48]	@ (80032e8 <vDrivingModeLights+0x8c>)
 80032b6:	f004 fc9f 	bl	8007bf8 <HAL_GPIO_WritePin>
      break;
 80032ba:	e011      	b.n	80032e0 <vDrivingModeLights+0x84>

    case EMERGENCY:
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0); // Green LED
 80032bc:	2200      	movs	r2, #0
 80032be:	2102      	movs	r1, #2
 80032c0:	480a      	ldr	r0, [pc, #40]	@ (80032ec <vDrivingModeLights+0x90>)
 80032c2:	f004 fc99 	bl	8007bf8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, 0); // Ambar LED
 80032c6:	2200      	movs	r2, #0
 80032c8:	2101      	movs	r1, #1
 80032ca:	4807      	ldr	r0, [pc, #28]	@ (80032e8 <vDrivingModeLights+0x8c>)
 80032cc:	f004 fc94 	bl	8007bf8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 1); // Red LED
 80032d0:	2201      	movs	r2, #1
 80032d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80032d6:	4804      	ldr	r0, [pc, #16]	@ (80032e8 <vDrivingModeLights+0x8c>)
 80032d8:	f004 fc8e 	bl	8007bf8 <HAL_GPIO_WritePin>
      break;
 80032dc:	e000      	b.n	80032e0 <vDrivingModeLights+0x84>

    default:
      break;
 80032de:	bf00      	nop
  }

}
 80032e0:	bf00      	nop
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	58020400 	.word	0x58020400
 80032ec:	58021000 	.word	0x58021000

080032f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80032f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003328 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80032f4:	f7ff fa06 	bl	8002704 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032f8:	480c      	ldr	r0, [pc, #48]	@ (800332c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032fa:	490d      	ldr	r1, [pc, #52]	@ (8003330 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003334 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003300:	e002      	b.n	8003308 <LoopCopyDataInit>

08003302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003306:	3304      	adds	r3, #4

08003308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800330a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800330c:	d3f9      	bcc.n	8003302 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800330e:	4a0a      	ldr	r2, [pc, #40]	@ (8003338 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003310:	4c0a      	ldr	r4, [pc, #40]	@ (800333c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003314:	e001      	b.n	800331a <LoopFillZerobss>

08003316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003318:	3204      	adds	r2, #4

0800331a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800331a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800331c:	d3fb      	bcc.n	8003316 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800331e:	f01f f847 	bl	80223b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003322:	f7fe f92f 	bl	8001584 <main>
  bx  lr
 8003326:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003328:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800332c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003330:	2400130c 	.word	0x2400130c
  ldr r2, =_sidata
 8003334:	08025c5c 	.word	0x08025c5c
  ldr r2, =_sbss
 8003338:	24001310 	.word	0x24001310
  ldr r4, =_ebss
 800333c:	240696f0 	.word	0x240696f0

08003340 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003340:	e7fe      	b.n	8003340 <ADC3_IRQHandler>
	...

08003344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800334a:	2003      	movs	r0, #3
 800334c:	f001 fc29 	bl	8004ba2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003350:	f005 fad0 	bl	80088f4 <HAL_RCC_GetSysClockFreq>
 8003354:	4602      	mov	r2, r0
 8003356:	4b15      	ldr	r3, [pc, #84]	@ (80033ac <HAL_Init+0x68>)
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	0a1b      	lsrs	r3, r3, #8
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	4913      	ldr	r1, [pc, #76]	@ (80033b0 <HAL_Init+0x6c>)
 8003362:	5ccb      	ldrb	r3, [r1, r3]
 8003364:	f003 031f 	and.w	r3, r3, #31
 8003368:	fa22 f303 	lsr.w	r3, r2, r3
 800336c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800336e:	4b0f      	ldr	r3, [pc, #60]	@ (80033ac <HAL_Init+0x68>)
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	4a0e      	ldr	r2, [pc, #56]	@ (80033b0 <HAL_Init+0x6c>)
 8003378:	5cd3      	ldrb	r3, [r2, r3]
 800337a:	f003 031f 	and.w	r3, r3, #31
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	fa22 f303 	lsr.w	r3, r2, r3
 8003384:	4a0b      	ldr	r2, [pc, #44]	@ (80033b4 <HAL_Init+0x70>)
 8003386:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003388:	4a0b      	ldr	r2, [pc, #44]	@ (80033b8 <HAL_Init+0x74>)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800338e:	200f      	movs	r0, #15
 8003390:	f7ff f81c 	bl	80023cc <HAL_InitTick>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e002      	b.n	80033a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800339e:	f7fe fff7 	bl	8002390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	58024400 	.word	0x58024400
 80033b0:	08023418 	.word	0x08023418
 80033b4:	24000008 	.word	0x24000008
 80033b8:	24000004 	.word	0x24000004

080033bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033c0:	4b06      	ldr	r3, [pc, #24]	@ (80033dc <HAL_IncTick+0x20>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	461a      	mov	r2, r3
 80033c6:	4b06      	ldr	r3, [pc, #24]	@ (80033e0 <HAL_IncTick+0x24>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4413      	add	r3, r2
 80033cc:	4a04      	ldr	r2, [pc, #16]	@ (80033e0 <HAL_IncTick+0x24>)
 80033ce:	6013      	str	r3, [r2, #0]
}
 80033d0:	bf00      	nop
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	24000010 	.word	0x24000010
 80033e0:	24032d50 	.word	0x24032d50

080033e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  return uwTick;
 80033e8:	4b03      	ldr	r3, [pc, #12]	@ (80033f8 <HAL_GetTick+0x14>)
 80033ea:	681b      	ldr	r3, [r3, #0]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	24032d50 	.word	0x24032d50

080033fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003404:	f7ff ffee 	bl	80033e4 <HAL_GetTick>
 8003408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003414:	d005      	beq.n	8003422 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003416:	4b0a      	ldr	r3, [pc, #40]	@ (8003440 <HAL_Delay+0x44>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	461a      	mov	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4413      	add	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003422:	bf00      	nop
 8003424:	f7ff ffde 	bl	80033e4 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	429a      	cmp	r2, r3
 8003432:	d8f7      	bhi.n	8003424 <HAL_Delay+0x28>
  {
  }
}
 8003434:	bf00      	nop
 8003436:	bf00      	nop
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	24000010 	.word	0x24000010

08003444 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003448:	4b03      	ldr	r3, [pc, #12]	@ (8003458 <HAL_GetREVID+0x14>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	0c1b      	lsrs	r3, r3, #16
}
 800344e:	4618      	mov	r0, r3
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	5c001000 	.word	0x5c001000

0800345c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	431a      	orrs	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	609a      	str	r2, [r3, #8]
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	609a      	str	r2, [r3, #8]
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
 80034d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	3360      	adds	r3, #96	@ 0x60
 80034d6:	461a      	mov	r2, r3
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	430b      	orrs	r3, r1
 80034f2:	431a      	orrs	r2, r3
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80034f8:	bf00      	nop
 80034fa:	371c      	adds	r7, #28
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f003 031f 	and.w	r3, r3, #31
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	fa01 f303 	lsl.w	r3, r1, r3
 8003524:	431a      	orrs	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	611a      	str	r2, [r3, #16]
}
 800352a:	bf00      	nop
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003536:	b480      	push	{r7}
 8003538:	b087      	sub	sp, #28
 800353a:	af00      	add	r7, sp, #0
 800353c:	60f8      	str	r0, [r7, #12]
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	3360      	adds	r3, #96	@ 0x60
 8003546:	461a      	mov	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	431a      	orrs	r2, r3
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	601a      	str	r2, [r3, #0]
  }
}
 8003560:	bf00      	nop
 8003562:	371c      	adds	r7, #28
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003592:	b480      	push	{r7}
 8003594:	b087      	sub	sp, #28
 8003596:	af00      	add	r7, sp, #0
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	3330      	adds	r3, #48	@ 0x30
 80035a2:	461a      	mov	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	0a1b      	lsrs	r3, r3, #8
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	4413      	add	r3, r2
 80035b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f003 031f 	and.w	r3, r3, #31
 80035bc:	211f      	movs	r1, #31
 80035be:	fa01 f303 	lsl.w	r3, r1, r3
 80035c2:	43db      	mvns	r3, r3
 80035c4:	401a      	ands	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	0e9b      	lsrs	r3, r3, #26
 80035ca:	f003 011f 	and.w	r1, r3, #31
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	f003 031f 	and.w	r3, r3, #31
 80035d4:	fa01 f303 	lsl.w	r3, r1, r3
 80035d8:	431a      	orrs	r2, r3
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80035de:	bf00      	nop
 80035e0:	371c      	adds	r7, #28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f023 0203 	bic.w	r2, r3, #3
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	60da      	str	r2, [r3, #12]
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	3314      	adds	r3, #20
 8003620:	461a      	mov	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	0e5b      	lsrs	r3, r3, #25
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	4413      	add	r3, r2
 800362e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	0d1b      	lsrs	r3, r3, #20
 8003638:	f003 031f 	and.w	r3, r3, #31
 800363c:	2107      	movs	r1, #7
 800363e:	fa01 f303 	lsl.w	r3, r1, r3
 8003642:	43db      	mvns	r3, r3
 8003644:	401a      	ands	r2, r3
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	0d1b      	lsrs	r3, r3, #20
 800364a:	f003 031f 	and.w	r3, r3, #31
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	fa01 f303 	lsl.w	r3, r1, r3
 8003654:	431a      	orrs	r2, r3
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800365a:	bf00      	nop
 800365c:	371c      	adds	r7, #28
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
	...

08003668 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003680:	43db      	mvns	r3, r3
 8003682:	401a      	ands	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f003 0318 	and.w	r3, r3, #24
 800368a:	4908      	ldr	r1, [pc, #32]	@ (80036ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800368c:	40d9      	lsrs	r1, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	400b      	ands	r3, r1
 8003692:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003696:	431a      	orrs	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800369e:	bf00      	nop
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	000fffff 	.word	0x000fffff

080036b0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 031f 	and.w	r3, r3, #31
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	4b04      	ldr	r3, [pc, #16]	@ (80036ec <LL_ADC_DisableDeepPowerDown+0x20>)
 80036da:	4013      	ands	r3, r2
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6093      	str	r3, [r2, #8]
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	5fffffc0 	.word	0x5fffffc0

080036f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003700:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003704:	d101      	bne.n	800370a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	4b05      	ldr	r3, [pc, #20]	@ (800373c <LL_ADC_EnableInternalRegulator+0x24>)
 8003726:	4013      	ands	r3, r2
 8003728:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	6fffffc0 	.word	0x6fffffc0

08003740 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003750:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003754:	d101      	bne.n	800375a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	4b05      	ldr	r3, [pc, #20]	@ (800378c <LL_ADC_Enable+0x24>)
 8003776:	4013      	ands	r3, r2
 8003778:	f043 0201 	orr.w	r2, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	7fffffc0 	.word	0x7fffffc0

08003790 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <LL_ADC_IsEnabled+0x18>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <LL_ADC_IsEnabled+0x1a>
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
	...

080037b8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	4b05      	ldr	r3, [pc, #20]	@ (80037dc <LL_ADC_REG_StartConversion+0x24>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	f043 0204 	orr.w	r2, r3, #4
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	7fffffc0 	.word	0x7fffffc0

080037e0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d101      	bne.n	80037f8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80037f4:	2301      	movs	r3, #1
 80037f6:	e000      	b.n	80037fa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	2b08      	cmp	r3, #8
 8003818:	d101      	bne.n	800381e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800382c:	b590      	push	{r4, r7, lr}
 800382e:	b089      	sub	sp, #36	@ 0x24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003834:	2300      	movs	r3, #0
 8003836:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003838:	2300      	movs	r3, #0
 800383a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e18f      	b.n	8003b66 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003850:	2b00      	cmp	r3, #0
 8003852:	d109      	bne.n	8003868 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7fc fffd 	bl	8000854 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff ff3f 	bl	80036f0 <LL_ADC_IsDeepPowerDownEnabled>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d004      	beq.n	8003882 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff ff25 	bl	80036cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff ff5a 	bl	8003740 <LL_ADC_IsInternalRegulatorEnabled>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d114      	bne.n	80038bc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff ff3e 	bl	8003718 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800389c:	4b87      	ldr	r3, [pc, #540]	@ (8003abc <HAL_ADC_Init+0x290>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	099b      	lsrs	r3, r3, #6
 80038a2:	4a87      	ldr	r2, [pc, #540]	@ (8003ac0 <HAL_ADC_Init+0x294>)
 80038a4:	fba2 2303 	umull	r2, r3, r2, r3
 80038a8:	099b      	lsrs	r3, r3, #6
 80038aa:	3301      	adds	r3, #1
 80038ac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80038ae:	e002      	b.n	80038b6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1f9      	bne.n	80038b0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff ff3d 	bl	8003740 <LL_ADC_IsInternalRegulatorEnabled>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10d      	bne.n	80038e8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d0:	f043 0210 	orr.w	r2, r3, #16
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038dc:	f043 0201 	orr.w	r2, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff ff77 	bl	80037e0 <LL_ADC_REG_IsConversionOngoing>
 80038f2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f8:	f003 0310 	and.w	r3, r3, #16
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f040 8129 	bne.w	8003b54 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b00      	cmp	r3, #0
 8003906:	f040 8125 	bne.w	8003b54 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800390e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003912:	f043 0202 	orr.w	r2, r3, #2
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff ff36 	bl	8003790 <LL_ADC_IsEnabled>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d136      	bne.n	8003998 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a65      	ldr	r2, [pc, #404]	@ (8003ac4 <HAL_ADC_Init+0x298>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d004      	beq.n	800393e <HAL_ADC_Init+0x112>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a63      	ldr	r2, [pc, #396]	@ (8003ac8 <HAL_ADC_Init+0x29c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d10e      	bne.n	800395c <HAL_ADC_Init+0x130>
 800393e:	4861      	ldr	r0, [pc, #388]	@ (8003ac4 <HAL_ADC_Init+0x298>)
 8003940:	f7ff ff26 	bl	8003790 <LL_ADC_IsEnabled>
 8003944:	4604      	mov	r4, r0
 8003946:	4860      	ldr	r0, [pc, #384]	@ (8003ac8 <HAL_ADC_Init+0x29c>)
 8003948:	f7ff ff22 	bl	8003790 <LL_ADC_IsEnabled>
 800394c:	4603      	mov	r3, r0
 800394e:	4323      	orrs	r3, r4
 8003950:	2b00      	cmp	r3, #0
 8003952:	bf0c      	ite	eq
 8003954:	2301      	moveq	r3, #1
 8003956:	2300      	movne	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	e008      	b.n	800396e <HAL_ADC_Init+0x142>
 800395c:	485b      	ldr	r0, [pc, #364]	@ (8003acc <HAL_ADC_Init+0x2a0>)
 800395e:	f7ff ff17 	bl	8003790 <LL_ADC_IsEnabled>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	bf0c      	ite	eq
 8003968:	2301      	moveq	r3, #1
 800396a:	2300      	movne	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d012      	beq.n	8003998 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a53      	ldr	r2, [pc, #332]	@ (8003ac4 <HAL_ADC_Init+0x298>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d004      	beq.n	8003986 <HAL_ADC_Init+0x15a>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a51      	ldr	r2, [pc, #324]	@ (8003ac8 <HAL_ADC_Init+0x29c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d101      	bne.n	800398a <HAL_ADC_Init+0x15e>
 8003986:	4a52      	ldr	r2, [pc, #328]	@ (8003ad0 <HAL_ADC_Init+0x2a4>)
 8003988:	e000      	b.n	800398c <HAL_ADC_Init+0x160>
 800398a:	4a52      	ldr	r2, [pc, #328]	@ (8003ad4 <HAL_ADC_Init+0x2a8>)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	4619      	mov	r1, r3
 8003992:	4610      	mov	r0, r2
 8003994:	f7ff fd62 	bl	800345c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003998:	f7ff fd54 	bl	8003444 <HAL_GetREVID>
 800399c:	4603      	mov	r3, r0
 800399e:	f241 0203 	movw	r2, #4099	@ 0x1003
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d914      	bls.n	80039d0 <HAL_ADC_Init+0x1a4>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	2b10      	cmp	r3, #16
 80039ac:	d110      	bne.n	80039d0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	7d5b      	ldrb	r3, [r3, #21]
 80039b2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039b8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80039be:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	7f1b      	ldrb	r3, [r3, #28]
 80039c4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80039c6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039c8:	f043 030c 	orr.w	r3, r3, #12
 80039cc:	61bb      	str	r3, [r7, #24]
 80039ce:	e00d      	b.n	80039ec <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	7d5b      	ldrb	r3, [r3, #21]
 80039d4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039da:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80039e0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	7f1b      	ldrb	r3, [r3, #28]
 80039e6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039e8:	4313      	orrs	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	7f1b      	ldrb	r3, [r3, #28]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d106      	bne.n	8003a02 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	3b01      	subs	r3, #1
 80039fa:	045b      	lsls	r3, r3, #17
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d009      	beq.n	8003a1e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a16:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	4b2c      	ldr	r3, [pc, #176]	@ (8003ad8 <HAL_ADC_Init+0x2ac>)
 8003a26:	4013      	ands	r3, r2
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6812      	ldr	r2, [r2, #0]
 8003a2c:	69b9      	ldr	r1, [r7, #24]
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff fed2 	bl	80037e0 <LL_ADC_REG_IsConversionOngoing>
 8003a3c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff fedf 	bl	8003806 <LL_ADC_INJ_IsConversionOngoing>
 8003a48:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d15f      	bne.n	8003b10 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d15c      	bne.n	8003b10 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	7d1b      	ldrb	r3, [r3, #20]
 8003a5a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8003adc <HAL_ADC_Init+0x2b0>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6812      	ldr	r2, [r2, #0]
 8003a72:	69b9      	ldr	r1, [r7, #24]
 8003a74:	430b      	orrs	r3, r1
 8003a76:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d130      	bne.n	8003ae4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a86:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691a      	ldr	r2, [r3, #16]
 8003a8e:	4b14      	ldr	r3, [pc, #80]	@ (8003ae0 <HAL_ADC_Init+0x2b4>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a96:	3a01      	subs	r2, #1
 8003a98:	0411      	lsls	r1, r2, #16
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003a9e:	4311      	orrs	r1, r2
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003aa4:	4311      	orrs	r1, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	611a      	str	r2, [r3, #16]
 8003ab8:	e01c      	b.n	8003af4 <HAL_ADC_Init+0x2c8>
 8003aba:	bf00      	nop
 8003abc:	24000004 	.word	0x24000004
 8003ac0:	053e2d63 	.word	0x053e2d63
 8003ac4:	40022000 	.word	0x40022000
 8003ac8:	40022100 	.word	0x40022100
 8003acc:	58026000 	.word	0x58026000
 8003ad0:	40022300 	.word	0x40022300
 8003ad4:	58026300 	.word	0x58026300
 8003ad8:	fff0c003 	.word	0xfff0c003
 8003adc:	ffffbffc 	.word	0xffffbffc
 8003ae0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691a      	ldr	r2, [r3, #16]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0201 	bic.w	r2, r2, #1
 8003af2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fd8c 	bl	8004628 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d10c      	bne.n	8003b32 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1e:	f023 010f 	bic.w	r1, r3, #15
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	1e5a      	subs	r2, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b30:	e007      	b.n	8003b42 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 020f 	bic.w	r2, r2, #15
 8003b40:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b46:	f023 0303 	bic.w	r3, r3, #3
 8003b4a:	f043 0201 	orr.w	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	655a      	str	r2, [r3, #84]	@ 0x54
 8003b52:	e007      	b.n	8003b64 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b58:	f043 0210 	orr.w	r2, r3, #16
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b64:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3724      	adds	r7, #36	@ 0x24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd90      	pop	{r4, r7, pc}
 8003b6e:	bf00      	nop

08003b70 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a55      	ldr	r2, [pc, #340]	@ (8003cd8 <HAL_ADC_Start_DMA+0x168>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d004      	beq.n	8003b90 <HAL_ADC_Start_DMA+0x20>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a54      	ldr	r2, [pc, #336]	@ (8003cdc <HAL_ADC_Start_DMA+0x16c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d101      	bne.n	8003b94 <HAL_ADC_Start_DMA+0x24>
 8003b90:	4b53      	ldr	r3, [pc, #332]	@ (8003ce0 <HAL_ADC_Start_DMA+0x170>)
 8003b92:	e000      	b.n	8003b96 <HAL_ADC_Start_DMA+0x26>
 8003b94:	4b53      	ldr	r3, [pc, #332]	@ (8003ce4 <HAL_ADC_Start_DMA+0x174>)
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff fd8a 	bl	80036b0 <LL_ADC_GetMultimode>
 8003b9c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff fe1c 	bl	80037e0 <LL_ADC_REG_IsConversionOngoing>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f040 808c 	bne.w	8003cc8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <HAL_ADC_Start_DMA+0x4e>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e087      	b.n	8003cce <HAL_ADC_Start_DMA+0x15e>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d005      	beq.n	8003bd8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	2b05      	cmp	r3, #5
 8003bd0:	d002      	beq.n	8003bd8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2b09      	cmp	r3, #9
 8003bd6:	d170      	bne.n	8003cba <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 fc07 	bl	80043ec <ADC_Enable>
 8003bde:	4603      	mov	r3, r0
 8003be0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003be2:	7dfb      	ldrb	r3, [r7, #23]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d163      	bne.n	8003cb0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bec:	4b3e      	ldr	r3, [pc, #248]	@ (8003ce8 <HAL_ADC_Start_DMA+0x178>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a37      	ldr	r2, [pc, #220]	@ (8003cdc <HAL_ADC_Start_DMA+0x16c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d002      	beq.n	8003c08 <HAL_ADC_Start_DMA+0x98>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	e000      	b.n	8003c0a <HAL_ADC_Start_DMA+0x9a>
 8003c08:	4b33      	ldr	r3, [pc, #204]	@ (8003cd8 <HAL_ADC_Start_DMA+0x168>)
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	6812      	ldr	r2, [r2, #0]
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d002      	beq.n	8003c18 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d105      	bne.n	8003c24 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c1c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d006      	beq.n	8003c3e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c34:	f023 0206 	bic.w	r2, r3, #6
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c3c:	e002      	b.n	8003c44 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c48:	4a28      	ldr	r2, [pc, #160]	@ (8003cec <HAL_ADC_Start_DMA+0x17c>)
 8003c4a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c50:	4a27      	ldr	r2, [pc, #156]	@ (8003cf0 <HAL_ADC_Start_DMA+0x180>)
 8003c52:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c58:	4a26      	ldr	r2, [pc, #152]	@ (8003cf4 <HAL_ADC_Start_DMA+0x184>)
 8003c5a:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	221c      	movs	r2, #28
 8003c62:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0210 	orr.w	r2, r2, #16
 8003c7a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c84:	4619      	mov	r1, r3
 8003c86:	4610      	mov	r0, r2
 8003c88:	f7ff fcaf 	bl	80035ea <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3340      	adds	r3, #64	@ 0x40
 8003c96:	4619      	mov	r1, r3
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f001 fb10 	bl	80052c0 <HAL_DMA_Start_IT>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff fd85 	bl	80037b8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003cae:	e00d      	b.n	8003ccc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8003cb8:	e008      	b.n	8003ccc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003cc6:	e001      	b.n	8003ccc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003cc8:	2302      	movs	r3, #2
 8003cca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3718      	adds	r7, #24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40022000 	.word	0x40022000
 8003cdc:	40022100 	.word	0x40022100
 8003ce0:	40022300 	.word	0x40022300
 8003ce4:	58026300 	.word	0x58026300
 8003ce8:	fffff0fe 	.word	0xfffff0fe
 8003cec:	08004501 	.word	0x08004501
 8003cf0:	080045d9 	.word	0x080045d9
 8003cf4:	080045f5 	.word	0x080045f5

08003cf8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d34:	b590      	push	{r4, r7, lr}
 8003d36:	b0a1      	sub	sp, #132	@ 0x84
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4a65      	ldr	r2, [pc, #404]	@ (8003ee4 <HAL_ADC_ConfigChannel+0x1b0>)
 8003d4e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d101      	bne.n	8003d5e <HAL_ADC_ConfigChannel+0x2a>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e32e      	b.n	80043bc <HAL_ADC_ConfigChannel+0x688>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff fd38 	bl	80037e0 <LL_ADC_REG_IsConversionOngoing>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f040 8313 	bne.w	800439e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	db2c      	blt.n	8003dda <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d108      	bne.n	8003d9e <HAL_ADC_ConfigChannel+0x6a>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	0e9b      	lsrs	r3, r3, #26
 8003d92:	f003 031f 	and.w	r3, r3, #31
 8003d96:	2201      	movs	r2, #1
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	e016      	b.n	8003dcc <HAL_ADC_ConfigChannel+0x98>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003da6:	fa93 f3a3 	rbit	r3, r3
 8003daa:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003dac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003dae:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003db0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003db6:	2320      	movs	r3, #32
 8003db8:	e003      	b.n	8003dc2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003dba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003dbc:	fab3 f383 	clz	r3, r3
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	f003 031f 	and.w	r3, r3, #31
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6812      	ldr	r2, [r2, #0]
 8003dd0:	69d1      	ldr	r1, [r2, #28]
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6812      	ldr	r2, [r2, #0]
 8003dd6:	430b      	orrs	r3, r1
 8003dd8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	6859      	ldr	r1, [r3, #4]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	461a      	mov	r2, r3
 8003de8:	f7ff fbd3 	bl	8003592 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff fcf5 	bl	80037e0 <LL_ADC_REG_IsConversionOngoing>
 8003df6:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff fd02 	bl	8003806 <LL_ADC_INJ_IsConversionOngoing>
 8003e02:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f040 80b8 	bne.w	8003f7c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f040 80b4 	bne.w	8003f7c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6818      	ldr	r0, [r3, #0]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	6819      	ldr	r1, [r3, #0]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	461a      	mov	r2, r3
 8003e22:	f7ff fbf5 	bl	8003610 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003e26:	4b30      	ldr	r3, [pc, #192]	@ (8003ee8 <HAL_ADC_ConfigChannel+0x1b4>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003e2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e32:	d10b      	bne.n	8003e4c <HAL_ADC_ConfigChannel+0x118>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	695a      	ldr	r2, [r3, #20]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	089b      	lsrs	r3, r3, #2
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	e01d      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x154>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10b      	bne.n	8003e72 <HAL_ADC_ConfigChannel+0x13e>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	695a      	ldr	r2, [r3, #20]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	089b      	lsrs	r3, r3, #2
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	e00a      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x154>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	695a      	ldr	r2, [r3, #20]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	089b      	lsrs	r3, r3, #2
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d02c      	beq.n	8003eec <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	6919      	ldr	r1, [r3, #16]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ea0:	f7ff fb10 	bl	80034c4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	6919      	ldr	r1, [r3, #16]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	7e5b      	ldrb	r3, [r3, #25]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d102      	bne.n	8003eba <HAL_ADC_ConfigChannel+0x186>
 8003eb4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003eb8:	e000      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x188>
 8003eba:	2300      	movs	r3, #0
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	f7ff fb3a 	bl	8003536 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6818      	ldr	r0, [r3, #0]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	6919      	ldr	r1, [r3, #16]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	7e1b      	ldrb	r3, [r3, #24]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d102      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x1a4>
 8003ed2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003ed6:	e000      	b.n	8003eda <HAL_ADC_ConfigChannel+0x1a6>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	461a      	mov	r2, r3
 8003edc:	f7ff fb12 	bl	8003504 <LL_ADC_SetDataRightShift>
 8003ee0:	e04c      	b.n	8003f7c <HAL_ADC_ConfigChannel+0x248>
 8003ee2:	bf00      	nop
 8003ee4:	47ff0000 	.word	0x47ff0000
 8003ee8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ef2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	069b      	lsls	r3, r3, #26
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d107      	bne.n	8003f10 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f0e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	069b      	lsls	r3, r3, #26
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d107      	bne.n	8003f34 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f32:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	069b      	lsls	r3, r3, #26
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d107      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f56:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	069b      	lsls	r3, r3, #26
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d107      	bne.n	8003f7c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f7a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff fc05 	bl	8003790 <LL_ADC_IsEnabled>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f040 8211 	bne.w	80043b0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	6819      	ldr	r1, [r3, #0]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f7ff fb64 	bl	8003668 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	4aa1      	ldr	r2, [pc, #644]	@ (800422c <HAL_ADC_ConfigChannel+0x4f8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	f040 812e 	bne.w	8004208 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10b      	bne.n	8003fd4 <HAL_ADC_ConfigChannel+0x2a0>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	0e9b      	lsrs	r3, r3, #26
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	2b09      	cmp	r3, #9
 8003fca:	bf94      	ite	ls
 8003fcc:	2301      	movls	r3, #1
 8003fce:	2300      	movhi	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	e019      	b.n	8004008 <HAL_ADC_ConfigChannel+0x2d4>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fdc:	fa93 f3a3 	rbit	r3, r3
 8003fe0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fe4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003fe6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003fec:	2320      	movs	r3, #32
 8003fee:	e003      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003ff0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ff2:	fab3 f383 	clz	r3, r3
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	2b09      	cmp	r3, #9
 8004000:	bf94      	ite	ls
 8004002:	2301      	movls	r3, #1
 8004004:	2300      	movhi	r3, #0
 8004006:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004008:	2b00      	cmp	r3, #0
 800400a:	d079      	beq.n	8004100 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004014:	2b00      	cmp	r3, #0
 8004016:	d107      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x2f4>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	0e9b      	lsrs	r3, r3, #26
 800401e:	3301      	adds	r3, #1
 8004020:	069b      	lsls	r3, r3, #26
 8004022:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004026:	e015      	b.n	8004054 <HAL_ADC_ConfigChannel+0x320>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004030:	fa93 f3a3 	rbit	r3, r3
 8004034:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004036:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004038:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800403a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004040:	2320      	movs	r3, #32
 8004042:	e003      	b.n	800404c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004044:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004046:	fab3 f383 	clz	r3, r3
 800404a:	b2db      	uxtb	r3, r3
 800404c:	3301      	adds	r3, #1
 800404e:	069b      	lsls	r3, r3, #26
 8004050:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800405c:	2b00      	cmp	r3, #0
 800405e:	d109      	bne.n	8004074 <HAL_ADC_ConfigChannel+0x340>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	0e9b      	lsrs	r3, r3, #26
 8004066:	3301      	adds	r3, #1
 8004068:	f003 031f 	and.w	r3, r3, #31
 800406c:	2101      	movs	r1, #1
 800406e:	fa01 f303 	lsl.w	r3, r1, r3
 8004072:	e017      	b.n	80040a4 <HAL_ADC_ConfigChannel+0x370>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800407c:	fa93 f3a3 	rbit	r3, r3
 8004080:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004084:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004086:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 800408c:	2320      	movs	r3, #32
 800408e:	e003      	b.n	8004098 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004090:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004092:	fab3 f383 	clz	r3, r3
 8004096:	b2db      	uxtb	r3, r3
 8004098:	3301      	adds	r3, #1
 800409a:	f003 031f 	and.w	r3, r3, #31
 800409e:	2101      	movs	r1, #1
 80040a0:	fa01 f303 	lsl.w	r3, r1, r3
 80040a4:	ea42 0103 	orr.w	r1, r2, r3
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10a      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x396>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	0e9b      	lsrs	r3, r3, #26
 80040ba:	3301      	adds	r3, #1
 80040bc:	f003 021f 	and.w	r2, r3, #31
 80040c0:	4613      	mov	r3, r2
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	4413      	add	r3, r2
 80040c6:	051b      	lsls	r3, r3, #20
 80040c8:	e018      	b.n	80040fc <HAL_ADC_ConfigChannel+0x3c8>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d2:	fa93 f3a3 	rbit	r3, r3
 80040d6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80040d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040da:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80040dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80040e2:	2320      	movs	r3, #32
 80040e4:	e003      	b.n	80040ee <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80040e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e8:	fab3 f383 	clz	r3, r3
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	3301      	adds	r3, #1
 80040f0:	f003 021f 	and.w	r2, r3, #31
 80040f4:	4613      	mov	r3, r2
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	4413      	add	r3, r2
 80040fa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040fc:	430b      	orrs	r3, r1
 80040fe:	e07e      	b.n	80041fe <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004108:	2b00      	cmp	r3, #0
 800410a:	d107      	bne.n	800411c <HAL_ADC_ConfigChannel+0x3e8>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	0e9b      	lsrs	r3, r3, #26
 8004112:	3301      	adds	r3, #1
 8004114:	069b      	lsls	r3, r3, #26
 8004116:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800411a:	e015      	b.n	8004148 <HAL_ADC_ConfigChannel+0x414>
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004124:	fa93 f3a3 	rbit	r3, r3
 8004128:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800412a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800412e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004134:	2320      	movs	r3, #32
 8004136:	e003      	b.n	8004140 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800413a:	fab3 f383 	clz	r3, r3
 800413e:	b2db      	uxtb	r3, r3
 8004140:	3301      	adds	r3, #1
 8004142:	069b      	lsls	r3, r3, #26
 8004144:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004150:	2b00      	cmp	r3, #0
 8004152:	d109      	bne.n	8004168 <HAL_ADC_ConfigChannel+0x434>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	0e9b      	lsrs	r3, r3, #26
 800415a:	3301      	adds	r3, #1
 800415c:	f003 031f 	and.w	r3, r3, #31
 8004160:	2101      	movs	r1, #1
 8004162:	fa01 f303 	lsl.w	r3, r1, r3
 8004166:	e017      	b.n	8004198 <HAL_ADC_ConfigChannel+0x464>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	fa93 f3a3 	rbit	r3, r3
 8004174:	61bb      	str	r3, [r7, #24]
  return result;
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004180:	2320      	movs	r3, #32
 8004182:	e003      	b.n	800418c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	fab3 f383 	clz	r3, r3
 800418a:	b2db      	uxtb	r3, r3
 800418c:	3301      	adds	r3, #1
 800418e:	f003 031f 	and.w	r3, r3, #31
 8004192:	2101      	movs	r1, #1
 8004194:	fa01 f303 	lsl.w	r3, r1, r3
 8004198:	ea42 0103 	orr.w	r1, r2, r3
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10d      	bne.n	80041c4 <HAL_ADC_ConfigChannel+0x490>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	0e9b      	lsrs	r3, r3, #26
 80041ae:	3301      	adds	r3, #1
 80041b0:	f003 021f 	and.w	r2, r3, #31
 80041b4:	4613      	mov	r3, r2
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	4413      	add	r3, r2
 80041ba:	3b1e      	subs	r3, #30
 80041bc:	051b      	lsls	r3, r3, #20
 80041be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041c2:	e01b      	b.n	80041fc <HAL_ADC_ConfigChannel+0x4c8>
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	fa93 f3a3 	rbit	r3, r3
 80041d0:	60fb      	str	r3, [r7, #12]
  return result;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80041dc:	2320      	movs	r3, #32
 80041de:	e003      	b.n	80041e8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	fab3 f383 	clz	r3, r3
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	3301      	adds	r3, #1
 80041ea:	f003 021f 	and.w	r2, r3, #31
 80041ee:	4613      	mov	r3, r2
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	4413      	add	r3, r2
 80041f4:	3b1e      	subs	r3, #30
 80041f6:	051b      	lsls	r3, r3, #20
 80041f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041fc:	430b      	orrs	r3, r1
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	6892      	ldr	r2, [r2, #8]
 8004202:	4619      	mov	r1, r3
 8004204:	f7ff fa04 	bl	8003610 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	f280 80cf 	bge.w	80043b0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a06      	ldr	r2, [pc, #24]	@ (8004230 <HAL_ADC_ConfigChannel+0x4fc>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d004      	beq.n	8004226 <HAL_ADC_ConfigChannel+0x4f2>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a04      	ldr	r2, [pc, #16]	@ (8004234 <HAL_ADC_ConfigChannel+0x500>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d10a      	bne.n	800423c <HAL_ADC_ConfigChannel+0x508>
 8004226:	4b04      	ldr	r3, [pc, #16]	@ (8004238 <HAL_ADC_ConfigChannel+0x504>)
 8004228:	e009      	b.n	800423e <HAL_ADC_ConfigChannel+0x50a>
 800422a:	bf00      	nop
 800422c:	47ff0000 	.word	0x47ff0000
 8004230:	40022000 	.word	0x40022000
 8004234:	40022100 	.word	0x40022100
 8004238:	40022300 	.word	0x40022300
 800423c:	4b61      	ldr	r3, [pc, #388]	@ (80043c4 <HAL_ADC_ConfigChannel+0x690>)
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff f932 	bl	80034a8 <LL_ADC_GetCommonPathInternalCh>
 8004244:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a5f      	ldr	r2, [pc, #380]	@ (80043c8 <HAL_ADC_ConfigChannel+0x694>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d004      	beq.n	800425a <HAL_ADC_ConfigChannel+0x526>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a5d      	ldr	r2, [pc, #372]	@ (80043cc <HAL_ADC_ConfigChannel+0x698>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d10e      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x544>
 800425a:	485b      	ldr	r0, [pc, #364]	@ (80043c8 <HAL_ADC_ConfigChannel+0x694>)
 800425c:	f7ff fa98 	bl	8003790 <LL_ADC_IsEnabled>
 8004260:	4604      	mov	r4, r0
 8004262:	485a      	ldr	r0, [pc, #360]	@ (80043cc <HAL_ADC_ConfigChannel+0x698>)
 8004264:	f7ff fa94 	bl	8003790 <LL_ADC_IsEnabled>
 8004268:	4603      	mov	r3, r0
 800426a:	4323      	orrs	r3, r4
 800426c:	2b00      	cmp	r3, #0
 800426e:	bf0c      	ite	eq
 8004270:	2301      	moveq	r3, #1
 8004272:	2300      	movne	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	e008      	b.n	800428a <HAL_ADC_ConfigChannel+0x556>
 8004278:	4855      	ldr	r0, [pc, #340]	@ (80043d0 <HAL_ADC_ConfigChannel+0x69c>)
 800427a:	f7ff fa89 	bl	8003790 <LL_ADC_IsEnabled>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	bf0c      	ite	eq
 8004284:	2301      	moveq	r3, #1
 8004286:	2300      	movne	r3, #0
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d07d      	beq.n	800438a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a50      	ldr	r2, [pc, #320]	@ (80043d4 <HAL_ADC_ConfigChannel+0x6a0>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d130      	bne.n	80042fa <HAL_ADC_ConfigChannel+0x5c6>
 8004298:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800429a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d12b      	bne.n	80042fa <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a4a      	ldr	r2, [pc, #296]	@ (80043d0 <HAL_ADC_ConfigChannel+0x69c>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	f040 8081 	bne.w	80043b0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a45      	ldr	r2, [pc, #276]	@ (80043c8 <HAL_ADC_ConfigChannel+0x694>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d004      	beq.n	80042c2 <HAL_ADC_ConfigChannel+0x58e>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a43      	ldr	r2, [pc, #268]	@ (80043cc <HAL_ADC_ConfigChannel+0x698>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d101      	bne.n	80042c6 <HAL_ADC_ConfigChannel+0x592>
 80042c2:	4a45      	ldr	r2, [pc, #276]	@ (80043d8 <HAL_ADC_ConfigChannel+0x6a4>)
 80042c4:	e000      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x594>
 80042c6:	4a3f      	ldr	r2, [pc, #252]	@ (80043c4 <HAL_ADC_ConfigChannel+0x690>)
 80042c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042ce:	4619      	mov	r1, r3
 80042d0:	4610      	mov	r0, r2
 80042d2:	f7ff f8d6 	bl	8003482 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042d6:	4b41      	ldr	r3, [pc, #260]	@ (80043dc <HAL_ADC_ConfigChannel+0x6a8>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	099b      	lsrs	r3, r3, #6
 80042dc:	4a40      	ldr	r2, [pc, #256]	@ (80043e0 <HAL_ADC_ConfigChannel+0x6ac>)
 80042de:	fba2 2303 	umull	r2, r3, r2, r3
 80042e2:	099b      	lsrs	r3, r3, #6
 80042e4:	3301      	adds	r3, #1
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80042ea:	e002      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1f9      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042f8:	e05a      	b.n	80043b0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a39      	ldr	r2, [pc, #228]	@ (80043e4 <HAL_ADC_ConfigChannel+0x6b0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d11e      	bne.n	8004342 <HAL_ADC_ConfigChannel+0x60e>
 8004304:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004306:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d119      	bne.n	8004342 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a2f      	ldr	r2, [pc, #188]	@ (80043d0 <HAL_ADC_ConfigChannel+0x69c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d14b      	bne.n	80043b0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a2a      	ldr	r2, [pc, #168]	@ (80043c8 <HAL_ADC_ConfigChannel+0x694>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d004      	beq.n	800432c <HAL_ADC_ConfigChannel+0x5f8>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a29      	ldr	r2, [pc, #164]	@ (80043cc <HAL_ADC_ConfigChannel+0x698>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d101      	bne.n	8004330 <HAL_ADC_ConfigChannel+0x5fc>
 800432c:	4a2a      	ldr	r2, [pc, #168]	@ (80043d8 <HAL_ADC_ConfigChannel+0x6a4>)
 800432e:	e000      	b.n	8004332 <HAL_ADC_ConfigChannel+0x5fe>
 8004330:	4a24      	ldr	r2, [pc, #144]	@ (80043c4 <HAL_ADC_ConfigChannel+0x690>)
 8004332:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004334:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004338:	4619      	mov	r1, r3
 800433a:	4610      	mov	r0, r2
 800433c:	f7ff f8a1 	bl	8003482 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004340:	e036      	b.n	80043b0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a28      	ldr	r2, [pc, #160]	@ (80043e8 <HAL_ADC_ConfigChannel+0x6b4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d131      	bne.n	80043b0 <HAL_ADC_ConfigChannel+0x67c>
 800434c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800434e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d12c      	bne.n	80043b0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a1d      	ldr	r2, [pc, #116]	@ (80043d0 <HAL_ADC_ConfigChannel+0x69c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d127      	bne.n	80043b0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a18      	ldr	r2, [pc, #96]	@ (80043c8 <HAL_ADC_ConfigChannel+0x694>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d004      	beq.n	8004374 <HAL_ADC_ConfigChannel+0x640>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a17      	ldr	r2, [pc, #92]	@ (80043cc <HAL_ADC_ConfigChannel+0x698>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d101      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x644>
 8004374:	4a18      	ldr	r2, [pc, #96]	@ (80043d8 <HAL_ADC_ConfigChannel+0x6a4>)
 8004376:	e000      	b.n	800437a <HAL_ADC_ConfigChannel+0x646>
 8004378:	4a12      	ldr	r2, [pc, #72]	@ (80043c4 <HAL_ADC_ConfigChannel+0x690>)
 800437a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800437c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004380:	4619      	mov	r1, r3
 8004382:	4610      	mov	r0, r2
 8004384:	f7ff f87d 	bl	8003482 <LL_ADC_SetCommonPathInternalCh>
 8004388:	e012      	b.n	80043b0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438e:	f043 0220 	orr.w	r2, r3, #32
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800439c:	e008      	b.n	80043b0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a2:	f043 0220 	orr.w	r2, r3, #32
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80043b8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3784      	adds	r7, #132	@ 0x84
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd90      	pop	{r4, r7, pc}
 80043c4:	58026300 	.word	0x58026300
 80043c8:	40022000 	.word	0x40022000
 80043cc:	40022100 	.word	0x40022100
 80043d0:	58026000 	.word	0x58026000
 80043d4:	cb840000 	.word	0xcb840000
 80043d8:	40022300 	.word	0x40022300
 80043dc:	24000004 	.word	0x24000004
 80043e0:	053e2d63 	.word	0x053e2d63
 80043e4:	c7520000 	.word	0xc7520000
 80043e8:	cfb80000 	.word	0xcfb80000

080043ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff f9c9 	bl	8003790 <LL_ADC_IsEnabled>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d16e      	bne.n	80044e2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689a      	ldr	r2, [r3, #8]
 800440a:	4b38      	ldr	r3, [pc, #224]	@ (80044ec <ADC_Enable+0x100>)
 800440c:	4013      	ands	r3, r2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00d      	beq.n	800442e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004416:	f043 0210 	orr.w	r2, r3, #16
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004422:	f043 0201 	orr.w	r2, r3, #1
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e05a      	b.n	80044e4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff f998 	bl	8003768 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004438:	f7fe ffd4 	bl	80033e4 <HAL_GetTick>
 800443c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a2b      	ldr	r2, [pc, #172]	@ (80044f0 <ADC_Enable+0x104>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d004      	beq.n	8004452 <ADC_Enable+0x66>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a29      	ldr	r2, [pc, #164]	@ (80044f4 <ADC_Enable+0x108>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d101      	bne.n	8004456 <ADC_Enable+0x6a>
 8004452:	4b29      	ldr	r3, [pc, #164]	@ (80044f8 <ADC_Enable+0x10c>)
 8004454:	e000      	b.n	8004458 <ADC_Enable+0x6c>
 8004456:	4b29      	ldr	r3, [pc, #164]	@ (80044fc <ADC_Enable+0x110>)
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff f929 	bl	80036b0 <LL_ADC_GetMultimode>
 800445e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a23      	ldr	r2, [pc, #140]	@ (80044f4 <ADC_Enable+0x108>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d002      	beq.n	8004470 <ADC_Enable+0x84>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	e000      	b.n	8004472 <ADC_Enable+0x86>
 8004470:	4b1f      	ldr	r3, [pc, #124]	@ (80044f0 <ADC_Enable+0x104>)
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6812      	ldr	r2, [r2, #0]
 8004476:	4293      	cmp	r3, r2
 8004478:	d02c      	beq.n	80044d4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d130      	bne.n	80044e2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004480:	e028      	b.n	80044d4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff f982 	bl	8003790 <LL_ADC_IsEnabled>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d104      	bne.n	800449c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff f966 	bl	8003768 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800449c:	f7fe ffa2 	bl	80033e4 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d914      	bls.n	80044d4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d00d      	beq.n	80044d4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044bc:	f043 0210 	orr.w	r2, r3, #16
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c8:	f043 0201 	orr.w	r2, r3, #1
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e007      	b.n	80044e4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d1cf      	bne.n	8004482 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	8000003f 	.word	0x8000003f
 80044f0:	40022000 	.word	0x40022000
 80044f4:	40022100 	.word	0x40022100
 80044f8:	40022300 	.word	0x40022300
 80044fc:	58026300 	.word	0x58026300

08004500 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800450c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004512:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004516:	2b00      	cmp	r3, #0
 8004518:	d14b      	bne.n	80045b2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800451e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0308 	and.w	r3, r3, #8
 8004530:	2b00      	cmp	r3, #0
 8004532:	d021      	beq.n	8004578 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4618      	mov	r0, r3
 800453a:	f7ff f817 	bl	800356c <LL_ADC_REG_IsTriggerSourceSWStart>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d032      	beq.n	80045aa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d12b      	bne.n	80045aa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004556:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004562:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d11f      	bne.n	80045aa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800456e:	f043 0201 	orr.w	r2, r3, #1
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	655a      	str	r2, [r3, #84]	@ 0x54
 8004576:	e018      	b.n	80045aa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d111      	bne.n	80045aa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004596:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d105      	bne.n	80045aa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a2:	f043 0201 	orr.w	r2, r3, #1
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f7ff fba4 	bl	8003cf8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80045b0:	e00e      	b.n	80045d0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b6:	f003 0310 	and.w	r3, r3, #16
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f7ff fbae 	bl	8003d20 <HAL_ADC_ErrorCallback>
}
 80045c4:	e004      	b.n	80045d0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	4798      	blx	r3
}
 80045d0:	bf00      	nop
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f7ff fb90 	bl	8003d0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045ec:	bf00      	nop
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004600:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004606:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004612:	f043 0204 	orr.w	r2, r3, #4
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f7ff fb80 	bl	8003d20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004620:	bf00      	nop
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a7a      	ldr	r2, [pc, #488]	@ (8004820 <ADC_ConfigureBoostMode+0x1f8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d004      	beq.n	8004644 <ADC_ConfigureBoostMode+0x1c>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a79      	ldr	r2, [pc, #484]	@ (8004824 <ADC_ConfigureBoostMode+0x1fc>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d109      	bne.n	8004658 <ADC_ConfigureBoostMode+0x30>
 8004644:	4b78      	ldr	r3, [pc, #480]	@ (8004828 <ADC_ConfigureBoostMode+0x200>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800464c:	2b00      	cmp	r3, #0
 800464e:	bf14      	ite	ne
 8004650:	2301      	movne	r3, #1
 8004652:	2300      	moveq	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	e008      	b.n	800466a <ADC_ConfigureBoostMode+0x42>
 8004658:	4b74      	ldr	r3, [pc, #464]	@ (800482c <ADC_ConfigureBoostMode+0x204>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004660:	2b00      	cmp	r3, #0
 8004662:	bf14      	ite	ne
 8004664:	2301      	movne	r3, #1
 8004666:	2300      	moveq	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d01c      	beq.n	80046a8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800466e:	f004 fabb 	bl	8008be8 <HAL_RCC_GetHCLKFreq>
 8004672:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800467c:	d010      	beq.n	80046a0 <ADC_ConfigureBoostMode+0x78>
 800467e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004682:	d873      	bhi.n	800476c <ADC_ConfigureBoostMode+0x144>
 8004684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004688:	d002      	beq.n	8004690 <ADC_ConfigureBoostMode+0x68>
 800468a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800468e:	d16d      	bne.n	800476c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	0c1b      	lsrs	r3, r3, #16
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	fbb2 f3f3 	udiv	r3, r2, r3
 800469c:	60fb      	str	r3, [r7, #12]
        break;
 800469e:	e068      	b.n	8004772 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	089b      	lsrs	r3, r3, #2
 80046a4:	60fb      	str	r3, [r7, #12]
        break;
 80046a6:	e064      	b.n	8004772 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80046a8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80046ac:	f04f 0100 	mov.w	r1, #0
 80046b0:	f005 fd42 	bl	800a138 <HAL_RCCEx_GetPeriphCLKFreq>
 80046b4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80046be:	d051      	beq.n	8004764 <ADC_ConfigureBoostMode+0x13c>
 80046c0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80046c4:	d854      	bhi.n	8004770 <ADC_ConfigureBoostMode+0x148>
 80046c6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80046ca:	d047      	beq.n	800475c <ADC_ConfigureBoostMode+0x134>
 80046cc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80046d0:	d84e      	bhi.n	8004770 <ADC_ConfigureBoostMode+0x148>
 80046d2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80046d6:	d03d      	beq.n	8004754 <ADC_ConfigureBoostMode+0x12c>
 80046d8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80046dc:	d848      	bhi.n	8004770 <ADC_ConfigureBoostMode+0x148>
 80046de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046e2:	d033      	beq.n	800474c <ADC_ConfigureBoostMode+0x124>
 80046e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046e8:	d842      	bhi.n	8004770 <ADC_ConfigureBoostMode+0x148>
 80046ea:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80046ee:	d029      	beq.n	8004744 <ADC_ConfigureBoostMode+0x11c>
 80046f0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80046f4:	d83c      	bhi.n	8004770 <ADC_ConfigureBoostMode+0x148>
 80046f6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80046fa:	d01a      	beq.n	8004732 <ADC_ConfigureBoostMode+0x10a>
 80046fc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004700:	d836      	bhi.n	8004770 <ADC_ConfigureBoostMode+0x148>
 8004702:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004706:	d014      	beq.n	8004732 <ADC_ConfigureBoostMode+0x10a>
 8004708:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800470c:	d830      	bhi.n	8004770 <ADC_ConfigureBoostMode+0x148>
 800470e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004712:	d00e      	beq.n	8004732 <ADC_ConfigureBoostMode+0x10a>
 8004714:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004718:	d82a      	bhi.n	8004770 <ADC_ConfigureBoostMode+0x148>
 800471a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800471e:	d008      	beq.n	8004732 <ADC_ConfigureBoostMode+0x10a>
 8004720:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004724:	d824      	bhi.n	8004770 <ADC_ConfigureBoostMode+0x148>
 8004726:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800472a:	d002      	beq.n	8004732 <ADC_ConfigureBoostMode+0x10a>
 800472c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004730:	d11e      	bne.n	8004770 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	0c9b      	lsrs	r3, r3, #18
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004740:	60fb      	str	r3, [r7, #12]
        break;
 8004742:	e016      	b.n	8004772 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	091b      	lsrs	r3, r3, #4
 8004748:	60fb      	str	r3, [r7, #12]
        break;
 800474a:	e012      	b.n	8004772 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	095b      	lsrs	r3, r3, #5
 8004750:	60fb      	str	r3, [r7, #12]
        break;
 8004752:	e00e      	b.n	8004772 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	099b      	lsrs	r3, r3, #6
 8004758:	60fb      	str	r3, [r7, #12]
        break;
 800475a:	e00a      	b.n	8004772 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	09db      	lsrs	r3, r3, #7
 8004760:	60fb      	str	r3, [r7, #12]
        break;
 8004762:	e006      	b.n	8004772 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	0a1b      	lsrs	r3, r3, #8
 8004768:	60fb      	str	r3, [r7, #12]
        break;
 800476a:	e002      	b.n	8004772 <ADC_ConfigureBoostMode+0x14a>
        break;
 800476c:	bf00      	nop
 800476e:	e000      	b.n	8004772 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004770:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004772:	f7fe fe67 	bl	8003444 <HAL_GetREVID>
 8004776:	4603      	mov	r3, r0
 8004778:	f241 0203 	movw	r2, #4099	@ 0x1003
 800477c:	4293      	cmp	r3, r2
 800477e:	d815      	bhi.n	80047ac <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4a2b      	ldr	r2, [pc, #172]	@ (8004830 <ADC_ConfigureBoostMode+0x208>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d908      	bls.n	800479a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004796:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004798:	e03e      	b.n	8004818 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047a8:	609a      	str	r2, [r3, #8]
}
 80047aa:	e035      	b.n	8004818 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	085b      	lsrs	r3, r3, #1
 80047b0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4a1f      	ldr	r2, [pc, #124]	@ (8004834 <ADC_ConfigureBoostMode+0x20c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d808      	bhi.n	80047cc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80047c8:	609a      	str	r2, [r3, #8]
}
 80047ca:	e025      	b.n	8004818 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4a1a      	ldr	r2, [pc, #104]	@ (8004838 <ADC_ConfigureBoostMode+0x210>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d80a      	bhi.n	80047ea <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047e6:	609a      	str	r2, [r3, #8]
}
 80047e8:	e016      	b.n	8004818 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4a13      	ldr	r2, [pc, #76]	@ (800483c <ADC_ConfigureBoostMode+0x214>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d80a      	bhi.n	8004808 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004804:	609a      	str	r2, [r3, #8]
}
 8004806:	e007      	b.n	8004818 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004816:	609a      	str	r2, [r3, #8]
}
 8004818:	bf00      	nop
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40022000 	.word	0x40022000
 8004824:	40022100 	.word	0x40022100
 8004828:	40022300 	.word	0x40022300
 800482c:	58026300 	.word	0x58026300
 8004830:	01312d00 	.word	0x01312d00
 8004834:	005f5e10 	.word	0x005f5e10
 8004838:	00bebc20 	.word	0x00bebc20
 800483c:	017d7840 	.word	0x017d7840

08004840 <LL_ADC_IsEnabled>:
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <LL_ADC_IsEnabled+0x18>
 8004854:	2301      	movs	r3, #1
 8004856:	e000      	b.n	800485a <LL_ADC_IsEnabled+0x1a>
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <LL_ADC_REG_IsConversionOngoing>:
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	2b04      	cmp	r3, #4
 8004878:	d101      	bne.n	800487e <LL_ADC_REG_IsConversionOngoing+0x18>
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800488c:	b590      	push	{r4, r7, lr}
 800488e:	b09f      	sub	sp, #124	@ 0x7c
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d101      	bne.n	80048aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80048a6:	2302      	movs	r3, #2
 80048a8:	e0be      	b.n	8004a28 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80048b2:	2300      	movs	r3, #0
 80048b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80048b6:	2300      	movs	r3, #0
 80048b8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a5c      	ldr	r2, [pc, #368]	@ (8004a30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d102      	bne.n	80048ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80048c4:	4b5b      	ldr	r3, [pc, #364]	@ (8004a34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80048c6:	60bb      	str	r3, [r7, #8]
 80048c8:	e001      	b.n	80048ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80048ca:	2300      	movs	r3, #0
 80048cc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10b      	bne.n	80048ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d8:	f043 0220 	orr.w	r2, r3, #32
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e09d      	b.n	8004a28 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7ff ffb9 	bl	8004866 <LL_ADC_REG_IsConversionOngoing>
 80048f4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff ffb3 	bl	8004866 <LL_ADC_REG_IsConversionOngoing>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d17f      	bne.n	8004a06 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004906:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004908:	2b00      	cmp	r3, #0
 800490a:	d17c      	bne.n	8004a06 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a47      	ldr	r2, [pc, #284]	@ (8004a30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d004      	beq.n	8004920 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a46      	ldr	r2, [pc, #280]	@ (8004a34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d101      	bne.n	8004924 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004920:	4b45      	ldr	r3, [pc, #276]	@ (8004a38 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004922:	e000      	b.n	8004926 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004924:	4b45      	ldr	r3, [pc, #276]	@ (8004a3c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004926:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d039      	beq.n	80049a4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004930:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	431a      	orrs	r2, r3
 800493e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004940:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a3a      	ldr	r2, [pc, #232]	@ (8004a30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d004      	beq.n	8004956 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a38      	ldr	r2, [pc, #224]	@ (8004a34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d10e      	bne.n	8004974 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004956:	4836      	ldr	r0, [pc, #216]	@ (8004a30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004958:	f7ff ff72 	bl	8004840 <LL_ADC_IsEnabled>
 800495c:	4604      	mov	r4, r0
 800495e:	4835      	ldr	r0, [pc, #212]	@ (8004a34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004960:	f7ff ff6e 	bl	8004840 <LL_ADC_IsEnabled>
 8004964:	4603      	mov	r3, r0
 8004966:	4323      	orrs	r3, r4
 8004968:	2b00      	cmp	r3, #0
 800496a:	bf0c      	ite	eq
 800496c:	2301      	moveq	r3, #1
 800496e:	2300      	movne	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	e008      	b.n	8004986 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004974:	4832      	ldr	r0, [pc, #200]	@ (8004a40 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004976:	f7ff ff63 	bl	8004840 <LL_ADC_IsEnabled>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	bf0c      	ite	eq
 8004980:	2301      	moveq	r3, #1
 8004982:	2300      	movne	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d047      	beq.n	8004a1a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800498a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	4b2d      	ldr	r3, [pc, #180]	@ (8004a44 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004990:	4013      	ands	r3, r2
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	6811      	ldr	r1, [r2, #0]
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	6892      	ldr	r2, [r2, #8]
 800499a:	430a      	orrs	r2, r1
 800499c:	431a      	orrs	r2, r3
 800499e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049a0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049a2:	e03a      	b.n	8004a1a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80049a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049ae:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004a30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d004      	beq.n	80049c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a1d      	ldr	r2, [pc, #116]	@ (8004a34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d10e      	bne.n	80049e2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80049c4:	481a      	ldr	r0, [pc, #104]	@ (8004a30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80049c6:	f7ff ff3b 	bl	8004840 <LL_ADC_IsEnabled>
 80049ca:	4604      	mov	r4, r0
 80049cc:	4819      	ldr	r0, [pc, #100]	@ (8004a34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80049ce:	f7ff ff37 	bl	8004840 <LL_ADC_IsEnabled>
 80049d2:	4603      	mov	r3, r0
 80049d4:	4323      	orrs	r3, r4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	bf0c      	ite	eq
 80049da:	2301      	moveq	r3, #1
 80049dc:	2300      	movne	r3, #0
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	e008      	b.n	80049f4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80049e2:	4817      	ldr	r0, [pc, #92]	@ (8004a40 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80049e4:	f7ff ff2c 	bl	8004840 <LL_ADC_IsEnabled>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	bf0c      	ite	eq
 80049ee:	2301      	moveq	r3, #1
 80049f0:	2300      	movne	r3, #0
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d010      	beq.n	8004a1a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80049f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	4b11      	ldr	r3, [pc, #68]	@ (8004a44 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80049fe:	4013      	ands	r3, r2
 8004a00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a02:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a04:	e009      	b.n	8004a1a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a0a:	f043 0220 	orr.w	r2, r3, #32
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004a18:	e000      	b.n	8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a1a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004a24:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	377c      	adds	r7, #124	@ 0x7c
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd90      	pop	{r4, r7, pc}
 8004a30:	40022000 	.word	0x40022000
 8004a34:	40022100 	.word	0x40022100
 8004a38:	40022300 	.word	0x40022300
 8004a3c:	58026300 	.word	0x58026300
 8004a40:	58026000 	.word	0x58026000
 8004a44:	fffff0e0 	.word	0xfffff0e0

08004a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f003 0307 	and.w	r3, r3, #7
 8004a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a58:	4b0b      	ldr	r3, [pc, #44]	@ (8004a88 <__NVIC_SetPriorityGrouping+0x40>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a64:	4013      	ands	r3, r2
 8004a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004a70:	4b06      	ldr	r3, [pc, #24]	@ (8004a8c <__NVIC_SetPriorityGrouping+0x44>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a76:	4a04      	ldr	r2, [pc, #16]	@ (8004a88 <__NVIC_SetPriorityGrouping+0x40>)
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	60d3      	str	r3, [r2, #12]
}
 8004a7c:	bf00      	nop
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	e000ed00 	.word	0xe000ed00
 8004a8c:	05fa0000 	.word	0x05fa0000

08004a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a94:	4b04      	ldr	r3, [pc, #16]	@ (8004aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	0a1b      	lsrs	r3, r3, #8
 8004a9a:	f003 0307 	and.w	r3, r3, #7
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	e000ed00 	.word	0xe000ed00

08004aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ab6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	db0b      	blt.n	8004ad6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004abe:	88fb      	ldrh	r3, [r7, #6]
 8004ac0:	f003 021f 	and.w	r2, r3, #31
 8004ac4:	4907      	ldr	r1, [pc, #28]	@ (8004ae4 <__NVIC_EnableIRQ+0x38>)
 8004ac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004aca:	095b      	lsrs	r3, r3, #5
 8004acc:	2001      	movs	r0, #1
 8004ace:	fa00 f202 	lsl.w	r2, r0, r2
 8004ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ad6:	bf00      	nop
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	e000e100 	.word	0xe000e100

08004ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	4603      	mov	r3, r0
 8004af0:	6039      	str	r1, [r7, #0]
 8004af2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004af4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	db0a      	blt.n	8004b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	490c      	ldr	r1, [pc, #48]	@ (8004b34 <__NVIC_SetPriority+0x4c>)
 8004b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b06:	0112      	lsls	r2, r2, #4
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	440b      	add	r3, r1
 8004b0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b10:	e00a      	b.n	8004b28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	4908      	ldr	r1, [pc, #32]	@ (8004b38 <__NVIC_SetPriority+0x50>)
 8004b18:	88fb      	ldrh	r3, [r7, #6]
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	3b04      	subs	r3, #4
 8004b20:	0112      	lsls	r2, r2, #4
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	440b      	add	r3, r1
 8004b26:	761a      	strb	r2, [r3, #24]
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	e000e100 	.word	0xe000e100
 8004b38:	e000ed00 	.word	0xe000ed00

08004b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b089      	sub	sp, #36	@ 0x24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	f1c3 0307 	rsb	r3, r3, #7
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	bf28      	it	cs
 8004b5a:	2304      	movcs	r3, #4
 8004b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	3304      	adds	r3, #4
 8004b62:	2b06      	cmp	r3, #6
 8004b64:	d902      	bls.n	8004b6c <NVIC_EncodePriority+0x30>
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	3b03      	subs	r3, #3
 8004b6a:	e000      	b.n	8004b6e <NVIC_EncodePriority+0x32>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7a:	43da      	mvns	r2, r3
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	401a      	ands	r2, r3
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b8e:	43d9      	mvns	r1, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b94:	4313      	orrs	r3, r2
         );
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3724      	adds	r7, #36	@ 0x24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b082      	sub	sp, #8
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7ff ff4c 	bl	8004a48 <__NVIC_SetPriorityGrouping>
}
 8004bb0:	bf00      	nop
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
 8004bc4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004bc6:	f7ff ff63 	bl	8004a90 <__NVIC_GetPriorityGrouping>
 8004bca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	68b9      	ldr	r1, [r7, #8]
 8004bd0:	6978      	ldr	r0, [r7, #20]
 8004bd2:	f7ff ffb3 	bl	8004b3c <NVIC_EncodePriority>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004bdc:	4611      	mov	r1, r2
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff ff82 	bl	8004ae8 <__NVIC_SetPriority>
}
 8004be4:	bf00      	nop
 8004be6:	3718      	adds	r7, #24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7ff ff56 	bl	8004aac <__NVIC_EnableIRQ>
}
 8004c00:	bf00      	nop
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004c10:	f7fe fbe8 	bl	80033e4 <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e316      	b.n	800524e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a66      	ldr	r2, [pc, #408]	@ (8004dc0 <HAL_DMA_Init+0x1b8>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d04a      	beq.n	8004cc0 <HAL_DMA_Init+0xb8>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a65      	ldr	r2, [pc, #404]	@ (8004dc4 <HAL_DMA_Init+0x1bc>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d045      	beq.n	8004cc0 <HAL_DMA_Init+0xb8>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a63      	ldr	r2, [pc, #396]	@ (8004dc8 <HAL_DMA_Init+0x1c0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d040      	beq.n	8004cc0 <HAL_DMA_Init+0xb8>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a62      	ldr	r2, [pc, #392]	@ (8004dcc <HAL_DMA_Init+0x1c4>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d03b      	beq.n	8004cc0 <HAL_DMA_Init+0xb8>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a60      	ldr	r2, [pc, #384]	@ (8004dd0 <HAL_DMA_Init+0x1c8>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d036      	beq.n	8004cc0 <HAL_DMA_Init+0xb8>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a5f      	ldr	r2, [pc, #380]	@ (8004dd4 <HAL_DMA_Init+0x1cc>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d031      	beq.n	8004cc0 <HAL_DMA_Init+0xb8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a5d      	ldr	r2, [pc, #372]	@ (8004dd8 <HAL_DMA_Init+0x1d0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d02c      	beq.n	8004cc0 <HAL_DMA_Init+0xb8>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a5c      	ldr	r2, [pc, #368]	@ (8004ddc <HAL_DMA_Init+0x1d4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d027      	beq.n	8004cc0 <HAL_DMA_Init+0xb8>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a5a      	ldr	r2, [pc, #360]	@ (8004de0 <HAL_DMA_Init+0x1d8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d022      	beq.n	8004cc0 <HAL_DMA_Init+0xb8>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a59      	ldr	r2, [pc, #356]	@ (8004de4 <HAL_DMA_Init+0x1dc>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d01d      	beq.n	8004cc0 <HAL_DMA_Init+0xb8>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a57      	ldr	r2, [pc, #348]	@ (8004de8 <HAL_DMA_Init+0x1e0>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d018      	beq.n	8004cc0 <HAL_DMA_Init+0xb8>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a56      	ldr	r2, [pc, #344]	@ (8004dec <HAL_DMA_Init+0x1e4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d013      	beq.n	8004cc0 <HAL_DMA_Init+0xb8>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a54      	ldr	r2, [pc, #336]	@ (8004df0 <HAL_DMA_Init+0x1e8>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d00e      	beq.n	8004cc0 <HAL_DMA_Init+0xb8>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a53      	ldr	r2, [pc, #332]	@ (8004df4 <HAL_DMA_Init+0x1ec>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d009      	beq.n	8004cc0 <HAL_DMA_Init+0xb8>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a51      	ldr	r2, [pc, #324]	@ (8004df8 <HAL_DMA_Init+0x1f0>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d004      	beq.n	8004cc0 <HAL_DMA_Init+0xb8>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a50      	ldr	r2, [pc, #320]	@ (8004dfc <HAL_DMA_Init+0x1f4>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d101      	bne.n	8004cc4 <HAL_DMA_Init+0xbc>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e000      	b.n	8004cc6 <HAL_DMA_Init+0xbe>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 813b 	beq.w	8004f42 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a37      	ldr	r2, [pc, #220]	@ (8004dc0 <HAL_DMA_Init+0x1b8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d04a      	beq.n	8004d7c <HAL_DMA_Init+0x174>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a36      	ldr	r2, [pc, #216]	@ (8004dc4 <HAL_DMA_Init+0x1bc>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d045      	beq.n	8004d7c <HAL_DMA_Init+0x174>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a34      	ldr	r2, [pc, #208]	@ (8004dc8 <HAL_DMA_Init+0x1c0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d040      	beq.n	8004d7c <HAL_DMA_Init+0x174>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a33      	ldr	r2, [pc, #204]	@ (8004dcc <HAL_DMA_Init+0x1c4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d03b      	beq.n	8004d7c <HAL_DMA_Init+0x174>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a31      	ldr	r2, [pc, #196]	@ (8004dd0 <HAL_DMA_Init+0x1c8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d036      	beq.n	8004d7c <HAL_DMA_Init+0x174>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a30      	ldr	r2, [pc, #192]	@ (8004dd4 <HAL_DMA_Init+0x1cc>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d031      	beq.n	8004d7c <HAL_DMA_Init+0x174>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a2e      	ldr	r2, [pc, #184]	@ (8004dd8 <HAL_DMA_Init+0x1d0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d02c      	beq.n	8004d7c <HAL_DMA_Init+0x174>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a2d      	ldr	r2, [pc, #180]	@ (8004ddc <HAL_DMA_Init+0x1d4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d027      	beq.n	8004d7c <HAL_DMA_Init+0x174>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a2b      	ldr	r2, [pc, #172]	@ (8004de0 <HAL_DMA_Init+0x1d8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d022      	beq.n	8004d7c <HAL_DMA_Init+0x174>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a2a      	ldr	r2, [pc, #168]	@ (8004de4 <HAL_DMA_Init+0x1dc>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d01d      	beq.n	8004d7c <HAL_DMA_Init+0x174>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a28      	ldr	r2, [pc, #160]	@ (8004de8 <HAL_DMA_Init+0x1e0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d018      	beq.n	8004d7c <HAL_DMA_Init+0x174>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a27      	ldr	r2, [pc, #156]	@ (8004dec <HAL_DMA_Init+0x1e4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d013      	beq.n	8004d7c <HAL_DMA_Init+0x174>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a25      	ldr	r2, [pc, #148]	@ (8004df0 <HAL_DMA_Init+0x1e8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d00e      	beq.n	8004d7c <HAL_DMA_Init+0x174>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a24      	ldr	r2, [pc, #144]	@ (8004df4 <HAL_DMA_Init+0x1ec>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d009      	beq.n	8004d7c <HAL_DMA_Init+0x174>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a22      	ldr	r2, [pc, #136]	@ (8004df8 <HAL_DMA_Init+0x1f0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d004      	beq.n	8004d7c <HAL_DMA_Init+0x174>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a21      	ldr	r2, [pc, #132]	@ (8004dfc <HAL_DMA_Init+0x1f4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d108      	bne.n	8004d8e <HAL_DMA_Init+0x186>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0201 	bic.w	r2, r2, #1
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	e007      	b.n	8004d9e <HAL_DMA_Init+0x196>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0201 	bic.w	r2, r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d9e:	e02f      	b.n	8004e00 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004da0:	f7fe fb20 	bl	80033e4 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b05      	cmp	r3, #5
 8004dac:	d928      	bls.n	8004e00 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2220      	movs	r2, #32
 8004db2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2203      	movs	r2, #3
 8004db8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e246      	b.n	800524e <HAL_DMA_Init+0x646>
 8004dc0:	40020010 	.word	0x40020010
 8004dc4:	40020028 	.word	0x40020028
 8004dc8:	40020040 	.word	0x40020040
 8004dcc:	40020058 	.word	0x40020058
 8004dd0:	40020070 	.word	0x40020070
 8004dd4:	40020088 	.word	0x40020088
 8004dd8:	400200a0 	.word	0x400200a0
 8004ddc:	400200b8 	.word	0x400200b8
 8004de0:	40020410 	.word	0x40020410
 8004de4:	40020428 	.word	0x40020428
 8004de8:	40020440 	.word	0x40020440
 8004dec:	40020458 	.word	0x40020458
 8004df0:	40020470 	.word	0x40020470
 8004df4:	40020488 	.word	0x40020488
 8004df8:	400204a0 	.word	0x400204a0
 8004dfc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1c8      	bne.n	8004da0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	4b83      	ldr	r3, [pc, #524]	@ (8005028 <HAL_DMA_Init+0x420>)
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004e26:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e32:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e3e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d107      	bne.n	8004e64 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004e64:	4b71      	ldr	r3, [pc, #452]	@ (800502c <HAL_DMA_Init+0x424>)
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	4b71      	ldr	r3, [pc, #452]	@ (8005030 <HAL_DMA_Init+0x428>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e70:	d328      	bcc.n	8004ec4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b28      	cmp	r3, #40	@ 0x28
 8004e78:	d903      	bls.n	8004e82 <HAL_DMA_Init+0x27a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e80:	d917      	bls.n	8004eb2 <HAL_DMA_Init+0x2aa>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e88:	d903      	bls.n	8004e92 <HAL_DMA_Init+0x28a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b42      	cmp	r3, #66	@ 0x42
 8004e90:	d90f      	bls.n	8004eb2 <HAL_DMA_Init+0x2aa>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	2b46      	cmp	r3, #70	@ 0x46
 8004e98:	d903      	bls.n	8004ea2 <HAL_DMA_Init+0x29a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2b48      	cmp	r3, #72	@ 0x48
 8004ea0:	d907      	bls.n	8004eb2 <HAL_DMA_Init+0x2aa>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	2b4e      	cmp	r3, #78	@ 0x4e
 8004ea8:	d905      	bls.n	8004eb6 <HAL_DMA_Init+0x2ae>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b52      	cmp	r3, #82	@ 0x52
 8004eb0:	d801      	bhi.n	8004eb6 <HAL_DMA_Init+0x2ae>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e000      	b.n	8004eb8 <HAL_DMA_Init+0x2b0>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ec2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f023 0307 	bic.w	r3, r3, #7
 8004eda:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d117      	bne.n	8004f1e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00e      	beq.n	8004f1e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f002 fb3f 	bl	8007584 <DMA_CheckFifoParam>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d008      	beq.n	8004f1e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2240      	movs	r2, #64	@ 0x40
 8004f10:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e197      	b.n	800524e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f002 fa7a 	bl	8007420 <DMA_CalcBaseAndBitshift>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f34:	f003 031f 	and.w	r3, r3, #31
 8004f38:	223f      	movs	r2, #63	@ 0x3f
 8004f3a:	409a      	lsls	r2, r3
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	609a      	str	r2, [r3, #8]
 8004f40:	e0cd      	b.n	80050de <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a3b      	ldr	r2, [pc, #236]	@ (8005034 <HAL_DMA_Init+0x42c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d022      	beq.n	8004f92 <HAL_DMA_Init+0x38a>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a39      	ldr	r2, [pc, #228]	@ (8005038 <HAL_DMA_Init+0x430>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d01d      	beq.n	8004f92 <HAL_DMA_Init+0x38a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a38      	ldr	r2, [pc, #224]	@ (800503c <HAL_DMA_Init+0x434>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d018      	beq.n	8004f92 <HAL_DMA_Init+0x38a>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a36      	ldr	r2, [pc, #216]	@ (8005040 <HAL_DMA_Init+0x438>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d013      	beq.n	8004f92 <HAL_DMA_Init+0x38a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a35      	ldr	r2, [pc, #212]	@ (8005044 <HAL_DMA_Init+0x43c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00e      	beq.n	8004f92 <HAL_DMA_Init+0x38a>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a33      	ldr	r2, [pc, #204]	@ (8005048 <HAL_DMA_Init+0x440>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d009      	beq.n	8004f92 <HAL_DMA_Init+0x38a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a32      	ldr	r2, [pc, #200]	@ (800504c <HAL_DMA_Init+0x444>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d004      	beq.n	8004f92 <HAL_DMA_Init+0x38a>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a30      	ldr	r2, [pc, #192]	@ (8005050 <HAL_DMA_Init+0x448>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d101      	bne.n	8004f96 <HAL_DMA_Init+0x38e>
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <HAL_DMA_Init+0x390>
 8004f96:	2300      	movs	r3, #0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 8097 	beq.w	80050cc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a24      	ldr	r2, [pc, #144]	@ (8005034 <HAL_DMA_Init+0x42c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d021      	beq.n	8004fec <HAL_DMA_Init+0x3e4>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a22      	ldr	r2, [pc, #136]	@ (8005038 <HAL_DMA_Init+0x430>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d01c      	beq.n	8004fec <HAL_DMA_Init+0x3e4>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a21      	ldr	r2, [pc, #132]	@ (800503c <HAL_DMA_Init+0x434>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d017      	beq.n	8004fec <HAL_DMA_Init+0x3e4>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a1f      	ldr	r2, [pc, #124]	@ (8005040 <HAL_DMA_Init+0x438>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d012      	beq.n	8004fec <HAL_DMA_Init+0x3e4>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a1e      	ldr	r2, [pc, #120]	@ (8005044 <HAL_DMA_Init+0x43c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d00d      	beq.n	8004fec <HAL_DMA_Init+0x3e4>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a1c      	ldr	r2, [pc, #112]	@ (8005048 <HAL_DMA_Init+0x440>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d008      	beq.n	8004fec <HAL_DMA_Init+0x3e4>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a1b      	ldr	r2, [pc, #108]	@ (800504c <HAL_DMA_Init+0x444>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d003      	beq.n	8004fec <HAL_DMA_Init+0x3e4>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a19      	ldr	r2, [pc, #100]	@ (8005050 <HAL_DMA_Init+0x448>)
 8004fea:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	4b13      	ldr	r3, [pc, #76]	@ (8005054 <HAL_DMA_Init+0x44c>)
 8005008:	4013      	ands	r3, r2
 800500a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	2b40      	cmp	r3, #64	@ 0x40
 8005012:	d021      	beq.n	8005058 <HAL_DMA_Init+0x450>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	2b80      	cmp	r3, #128	@ 0x80
 800501a:	d102      	bne.n	8005022 <HAL_DMA_Init+0x41a>
 800501c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005020:	e01b      	b.n	800505a <HAL_DMA_Init+0x452>
 8005022:	2300      	movs	r3, #0
 8005024:	e019      	b.n	800505a <HAL_DMA_Init+0x452>
 8005026:	bf00      	nop
 8005028:	fe10803f 	.word	0xfe10803f
 800502c:	5c001000 	.word	0x5c001000
 8005030:	ffff0000 	.word	0xffff0000
 8005034:	58025408 	.word	0x58025408
 8005038:	5802541c 	.word	0x5802541c
 800503c:	58025430 	.word	0x58025430
 8005040:	58025444 	.word	0x58025444
 8005044:	58025458 	.word	0x58025458
 8005048:	5802546c 	.word	0x5802546c
 800504c:	58025480 	.word	0x58025480
 8005050:	58025494 	.word	0x58025494
 8005054:	fffe000f 	.word	0xfffe000f
 8005058:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	68d2      	ldr	r2, [r2, #12]
 800505e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005060:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005068:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005070:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005078:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005080:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005088:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	4313      	orrs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	4b6e      	ldr	r3, [pc, #440]	@ (8005258 <HAL_DMA_Init+0x650>)
 80050a0:	4413      	add	r3, r2
 80050a2:	4a6e      	ldr	r2, [pc, #440]	@ (800525c <HAL_DMA_Init+0x654>)
 80050a4:	fba2 2303 	umull	r2, r3, r2, r3
 80050a8:	091b      	lsrs	r3, r3, #4
 80050aa:	009a      	lsls	r2, r3, #2
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f002 f9b5 	bl	8007420 <DMA_CalcBaseAndBitshift>
 80050b6:	4603      	mov	r3, r0
 80050b8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050be:	f003 031f 	and.w	r3, r3, #31
 80050c2:	2201      	movs	r2, #1
 80050c4:	409a      	lsls	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	605a      	str	r2, [r3, #4]
 80050ca:	e008      	b.n	80050de <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2240      	movs	r2, #64	@ 0x40
 80050d0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2203      	movs	r2, #3
 80050d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e0b7      	b.n	800524e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a5f      	ldr	r2, [pc, #380]	@ (8005260 <HAL_DMA_Init+0x658>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d072      	beq.n	80051ce <HAL_DMA_Init+0x5c6>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a5d      	ldr	r2, [pc, #372]	@ (8005264 <HAL_DMA_Init+0x65c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d06d      	beq.n	80051ce <HAL_DMA_Init+0x5c6>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a5c      	ldr	r2, [pc, #368]	@ (8005268 <HAL_DMA_Init+0x660>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d068      	beq.n	80051ce <HAL_DMA_Init+0x5c6>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a5a      	ldr	r2, [pc, #360]	@ (800526c <HAL_DMA_Init+0x664>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d063      	beq.n	80051ce <HAL_DMA_Init+0x5c6>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a59      	ldr	r2, [pc, #356]	@ (8005270 <HAL_DMA_Init+0x668>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d05e      	beq.n	80051ce <HAL_DMA_Init+0x5c6>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a57      	ldr	r2, [pc, #348]	@ (8005274 <HAL_DMA_Init+0x66c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d059      	beq.n	80051ce <HAL_DMA_Init+0x5c6>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a56      	ldr	r2, [pc, #344]	@ (8005278 <HAL_DMA_Init+0x670>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d054      	beq.n	80051ce <HAL_DMA_Init+0x5c6>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a54      	ldr	r2, [pc, #336]	@ (800527c <HAL_DMA_Init+0x674>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d04f      	beq.n	80051ce <HAL_DMA_Init+0x5c6>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a53      	ldr	r2, [pc, #332]	@ (8005280 <HAL_DMA_Init+0x678>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d04a      	beq.n	80051ce <HAL_DMA_Init+0x5c6>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a51      	ldr	r2, [pc, #324]	@ (8005284 <HAL_DMA_Init+0x67c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d045      	beq.n	80051ce <HAL_DMA_Init+0x5c6>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a50      	ldr	r2, [pc, #320]	@ (8005288 <HAL_DMA_Init+0x680>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d040      	beq.n	80051ce <HAL_DMA_Init+0x5c6>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a4e      	ldr	r2, [pc, #312]	@ (800528c <HAL_DMA_Init+0x684>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d03b      	beq.n	80051ce <HAL_DMA_Init+0x5c6>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a4d      	ldr	r2, [pc, #308]	@ (8005290 <HAL_DMA_Init+0x688>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d036      	beq.n	80051ce <HAL_DMA_Init+0x5c6>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a4b      	ldr	r2, [pc, #300]	@ (8005294 <HAL_DMA_Init+0x68c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d031      	beq.n	80051ce <HAL_DMA_Init+0x5c6>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a4a      	ldr	r2, [pc, #296]	@ (8005298 <HAL_DMA_Init+0x690>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d02c      	beq.n	80051ce <HAL_DMA_Init+0x5c6>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a48      	ldr	r2, [pc, #288]	@ (800529c <HAL_DMA_Init+0x694>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d027      	beq.n	80051ce <HAL_DMA_Init+0x5c6>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a47      	ldr	r2, [pc, #284]	@ (80052a0 <HAL_DMA_Init+0x698>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d022      	beq.n	80051ce <HAL_DMA_Init+0x5c6>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a45      	ldr	r2, [pc, #276]	@ (80052a4 <HAL_DMA_Init+0x69c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d01d      	beq.n	80051ce <HAL_DMA_Init+0x5c6>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a44      	ldr	r2, [pc, #272]	@ (80052a8 <HAL_DMA_Init+0x6a0>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d018      	beq.n	80051ce <HAL_DMA_Init+0x5c6>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a42      	ldr	r2, [pc, #264]	@ (80052ac <HAL_DMA_Init+0x6a4>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d013      	beq.n	80051ce <HAL_DMA_Init+0x5c6>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a41      	ldr	r2, [pc, #260]	@ (80052b0 <HAL_DMA_Init+0x6a8>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d00e      	beq.n	80051ce <HAL_DMA_Init+0x5c6>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a3f      	ldr	r2, [pc, #252]	@ (80052b4 <HAL_DMA_Init+0x6ac>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d009      	beq.n	80051ce <HAL_DMA_Init+0x5c6>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a3e      	ldr	r2, [pc, #248]	@ (80052b8 <HAL_DMA_Init+0x6b0>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d004      	beq.n	80051ce <HAL_DMA_Init+0x5c6>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a3c      	ldr	r2, [pc, #240]	@ (80052bc <HAL_DMA_Init+0x6b4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d101      	bne.n	80051d2 <HAL_DMA_Init+0x5ca>
 80051ce:	2301      	movs	r3, #1
 80051d0:	e000      	b.n	80051d4 <HAL_DMA_Init+0x5cc>
 80051d2:	2300      	movs	r3, #0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d032      	beq.n	800523e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f002 fa4f 	bl	800767c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	2b80      	cmp	r3, #128	@ 0x80
 80051e4:	d102      	bne.n	80051ec <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005200:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d010      	beq.n	800522c <HAL_DMA_Init+0x624>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2b08      	cmp	r3, #8
 8005210:	d80c      	bhi.n	800522c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f002 facc 	bl	80077b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800521c:	2200      	movs	r2, #0
 800521e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005228:	605a      	str	r2, [r3, #4]
 800522a:	e008      	b.n	800523e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	a7fdabf8 	.word	0xa7fdabf8
 800525c:	cccccccd 	.word	0xcccccccd
 8005260:	40020010 	.word	0x40020010
 8005264:	40020028 	.word	0x40020028
 8005268:	40020040 	.word	0x40020040
 800526c:	40020058 	.word	0x40020058
 8005270:	40020070 	.word	0x40020070
 8005274:	40020088 	.word	0x40020088
 8005278:	400200a0 	.word	0x400200a0
 800527c:	400200b8 	.word	0x400200b8
 8005280:	40020410 	.word	0x40020410
 8005284:	40020428 	.word	0x40020428
 8005288:	40020440 	.word	0x40020440
 800528c:	40020458 	.word	0x40020458
 8005290:	40020470 	.word	0x40020470
 8005294:	40020488 	.word	0x40020488
 8005298:	400204a0 	.word	0x400204a0
 800529c:	400204b8 	.word	0x400204b8
 80052a0:	58025408 	.word	0x58025408
 80052a4:	5802541c 	.word	0x5802541c
 80052a8:	58025430 	.word	0x58025430
 80052ac:	58025444 	.word	0x58025444
 80052b0:	58025458 	.word	0x58025458
 80052b4:	5802546c 	.word	0x5802546c
 80052b8:	58025480 	.word	0x58025480
 80052bc:	58025494 	.word	0x58025494

080052c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
 80052cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052ce:	2300      	movs	r3, #0
 80052d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e226      	b.n	800572a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d101      	bne.n	80052ea <HAL_DMA_Start_IT+0x2a>
 80052e6:	2302      	movs	r3, #2
 80052e8:	e21f      	b.n	800572a <HAL_DMA_Start_IT+0x46a>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	f040 820a 	bne.w	8005714 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a68      	ldr	r2, [pc, #416]	@ (80054b4 <HAL_DMA_Start_IT+0x1f4>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d04a      	beq.n	80053ae <HAL_DMA_Start_IT+0xee>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a66      	ldr	r2, [pc, #408]	@ (80054b8 <HAL_DMA_Start_IT+0x1f8>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d045      	beq.n	80053ae <HAL_DMA_Start_IT+0xee>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a65      	ldr	r2, [pc, #404]	@ (80054bc <HAL_DMA_Start_IT+0x1fc>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d040      	beq.n	80053ae <HAL_DMA_Start_IT+0xee>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a63      	ldr	r2, [pc, #396]	@ (80054c0 <HAL_DMA_Start_IT+0x200>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d03b      	beq.n	80053ae <HAL_DMA_Start_IT+0xee>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a62      	ldr	r2, [pc, #392]	@ (80054c4 <HAL_DMA_Start_IT+0x204>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d036      	beq.n	80053ae <HAL_DMA_Start_IT+0xee>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a60      	ldr	r2, [pc, #384]	@ (80054c8 <HAL_DMA_Start_IT+0x208>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d031      	beq.n	80053ae <HAL_DMA_Start_IT+0xee>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a5f      	ldr	r2, [pc, #380]	@ (80054cc <HAL_DMA_Start_IT+0x20c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d02c      	beq.n	80053ae <HAL_DMA_Start_IT+0xee>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a5d      	ldr	r2, [pc, #372]	@ (80054d0 <HAL_DMA_Start_IT+0x210>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d027      	beq.n	80053ae <HAL_DMA_Start_IT+0xee>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a5c      	ldr	r2, [pc, #368]	@ (80054d4 <HAL_DMA_Start_IT+0x214>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d022      	beq.n	80053ae <HAL_DMA_Start_IT+0xee>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a5a      	ldr	r2, [pc, #360]	@ (80054d8 <HAL_DMA_Start_IT+0x218>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d01d      	beq.n	80053ae <HAL_DMA_Start_IT+0xee>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a59      	ldr	r2, [pc, #356]	@ (80054dc <HAL_DMA_Start_IT+0x21c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d018      	beq.n	80053ae <HAL_DMA_Start_IT+0xee>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a57      	ldr	r2, [pc, #348]	@ (80054e0 <HAL_DMA_Start_IT+0x220>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d013      	beq.n	80053ae <HAL_DMA_Start_IT+0xee>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a56      	ldr	r2, [pc, #344]	@ (80054e4 <HAL_DMA_Start_IT+0x224>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d00e      	beq.n	80053ae <HAL_DMA_Start_IT+0xee>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a54      	ldr	r2, [pc, #336]	@ (80054e8 <HAL_DMA_Start_IT+0x228>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d009      	beq.n	80053ae <HAL_DMA_Start_IT+0xee>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a53      	ldr	r2, [pc, #332]	@ (80054ec <HAL_DMA_Start_IT+0x22c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d004      	beq.n	80053ae <HAL_DMA_Start_IT+0xee>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a51      	ldr	r2, [pc, #324]	@ (80054f0 <HAL_DMA_Start_IT+0x230>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d108      	bne.n	80053c0 <HAL_DMA_Start_IT+0x100>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0201 	bic.w	r2, r2, #1
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	e007      	b.n	80053d0 <HAL_DMA_Start_IT+0x110>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0201 	bic.w	r2, r2, #1
 80053ce:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	68b9      	ldr	r1, [r7, #8]
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f001 fe76 	bl	80070c8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a34      	ldr	r2, [pc, #208]	@ (80054b4 <HAL_DMA_Start_IT+0x1f4>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d04a      	beq.n	800547c <HAL_DMA_Start_IT+0x1bc>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a33      	ldr	r2, [pc, #204]	@ (80054b8 <HAL_DMA_Start_IT+0x1f8>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d045      	beq.n	800547c <HAL_DMA_Start_IT+0x1bc>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a31      	ldr	r2, [pc, #196]	@ (80054bc <HAL_DMA_Start_IT+0x1fc>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d040      	beq.n	800547c <HAL_DMA_Start_IT+0x1bc>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a30      	ldr	r2, [pc, #192]	@ (80054c0 <HAL_DMA_Start_IT+0x200>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d03b      	beq.n	800547c <HAL_DMA_Start_IT+0x1bc>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a2e      	ldr	r2, [pc, #184]	@ (80054c4 <HAL_DMA_Start_IT+0x204>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d036      	beq.n	800547c <HAL_DMA_Start_IT+0x1bc>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a2d      	ldr	r2, [pc, #180]	@ (80054c8 <HAL_DMA_Start_IT+0x208>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d031      	beq.n	800547c <HAL_DMA_Start_IT+0x1bc>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a2b      	ldr	r2, [pc, #172]	@ (80054cc <HAL_DMA_Start_IT+0x20c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d02c      	beq.n	800547c <HAL_DMA_Start_IT+0x1bc>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a2a      	ldr	r2, [pc, #168]	@ (80054d0 <HAL_DMA_Start_IT+0x210>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d027      	beq.n	800547c <HAL_DMA_Start_IT+0x1bc>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a28      	ldr	r2, [pc, #160]	@ (80054d4 <HAL_DMA_Start_IT+0x214>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d022      	beq.n	800547c <HAL_DMA_Start_IT+0x1bc>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a27      	ldr	r2, [pc, #156]	@ (80054d8 <HAL_DMA_Start_IT+0x218>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d01d      	beq.n	800547c <HAL_DMA_Start_IT+0x1bc>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a25      	ldr	r2, [pc, #148]	@ (80054dc <HAL_DMA_Start_IT+0x21c>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d018      	beq.n	800547c <HAL_DMA_Start_IT+0x1bc>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a24      	ldr	r2, [pc, #144]	@ (80054e0 <HAL_DMA_Start_IT+0x220>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d013      	beq.n	800547c <HAL_DMA_Start_IT+0x1bc>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a22      	ldr	r2, [pc, #136]	@ (80054e4 <HAL_DMA_Start_IT+0x224>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d00e      	beq.n	800547c <HAL_DMA_Start_IT+0x1bc>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a21      	ldr	r2, [pc, #132]	@ (80054e8 <HAL_DMA_Start_IT+0x228>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d009      	beq.n	800547c <HAL_DMA_Start_IT+0x1bc>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a1f      	ldr	r2, [pc, #124]	@ (80054ec <HAL_DMA_Start_IT+0x22c>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d004      	beq.n	800547c <HAL_DMA_Start_IT+0x1bc>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a1e      	ldr	r2, [pc, #120]	@ (80054f0 <HAL_DMA_Start_IT+0x230>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d101      	bne.n	8005480 <HAL_DMA_Start_IT+0x1c0>
 800547c:	2301      	movs	r3, #1
 800547e:	e000      	b.n	8005482 <HAL_DMA_Start_IT+0x1c2>
 8005480:	2300      	movs	r3, #0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d036      	beq.n	80054f4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f023 021e 	bic.w	r2, r3, #30
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f042 0216 	orr.w	r2, r2, #22
 8005498:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d03e      	beq.n	8005520 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f042 0208 	orr.w	r2, r2, #8
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	e035      	b.n	8005520 <HAL_DMA_Start_IT+0x260>
 80054b4:	40020010 	.word	0x40020010
 80054b8:	40020028 	.word	0x40020028
 80054bc:	40020040 	.word	0x40020040
 80054c0:	40020058 	.word	0x40020058
 80054c4:	40020070 	.word	0x40020070
 80054c8:	40020088 	.word	0x40020088
 80054cc:	400200a0 	.word	0x400200a0
 80054d0:	400200b8 	.word	0x400200b8
 80054d4:	40020410 	.word	0x40020410
 80054d8:	40020428 	.word	0x40020428
 80054dc:	40020440 	.word	0x40020440
 80054e0:	40020458 	.word	0x40020458
 80054e4:	40020470 	.word	0x40020470
 80054e8:	40020488 	.word	0x40020488
 80054ec:	400204a0 	.word	0x400204a0
 80054f0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f023 020e 	bic.w	r2, r3, #14
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f042 020a 	orr.w	r2, r2, #10
 8005506:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550c:	2b00      	cmp	r3, #0
 800550e:	d007      	beq.n	8005520 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0204 	orr.w	r2, r2, #4
 800551e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a83      	ldr	r2, [pc, #524]	@ (8005734 <HAL_DMA_Start_IT+0x474>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d072      	beq.n	8005610 <HAL_DMA_Start_IT+0x350>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a82      	ldr	r2, [pc, #520]	@ (8005738 <HAL_DMA_Start_IT+0x478>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d06d      	beq.n	8005610 <HAL_DMA_Start_IT+0x350>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a80      	ldr	r2, [pc, #512]	@ (800573c <HAL_DMA_Start_IT+0x47c>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d068      	beq.n	8005610 <HAL_DMA_Start_IT+0x350>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a7f      	ldr	r2, [pc, #508]	@ (8005740 <HAL_DMA_Start_IT+0x480>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d063      	beq.n	8005610 <HAL_DMA_Start_IT+0x350>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a7d      	ldr	r2, [pc, #500]	@ (8005744 <HAL_DMA_Start_IT+0x484>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d05e      	beq.n	8005610 <HAL_DMA_Start_IT+0x350>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a7c      	ldr	r2, [pc, #496]	@ (8005748 <HAL_DMA_Start_IT+0x488>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d059      	beq.n	8005610 <HAL_DMA_Start_IT+0x350>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a7a      	ldr	r2, [pc, #488]	@ (800574c <HAL_DMA_Start_IT+0x48c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d054      	beq.n	8005610 <HAL_DMA_Start_IT+0x350>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a79      	ldr	r2, [pc, #484]	@ (8005750 <HAL_DMA_Start_IT+0x490>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d04f      	beq.n	8005610 <HAL_DMA_Start_IT+0x350>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a77      	ldr	r2, [pc, #476]	@ (8005754 <HAL_DMA_Start_IT+0x494>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d04a      	beq.n	8005610 <HAL_DMA_Start_IT+0x350>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a76      	ldr	r2, [pc, #472]	@ (8005758 <HAL_DMA_Start_IT+0x498>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d045      	beq.n	8005610 <HAL_DMA_Start_IT+0x350>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a74      	ldr	r2, [pc, #464]	@ (800575c <HAL_DMA_Start_IT+0x49c>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d040      	beq.n	8005610 <HAL_DMA_Start_IT+0x350>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a73      	ldr	r2, [pc, #460]	@ (8005760 <HAL_DMA_Start_IT+0x4a0>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d03b      	beq.n	8005610 <HAL_DMA_Start_IT+0x350>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a71      	ldr	r2, [pc, #452]	@ (8005764 <HAL_DMA_Start_IT+0x4a4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d036      	beq.n	8005610 <HAL_DMA_Start_IT+0x350>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a70      	ldr	r2, [pc, #448]	@ (8005768 <HAL_DMA_Start_IT+0x4a8>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d031      	beq.n	8005610 <HAL_DMA_Start_IT+0x350>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a6e      	ldr	r2, [pc, #440]	@ (800576c <HAL_DMA_Start_IT+0x4ac>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d02c      	beq.n	8005610 <HAL_DMA_Start_IT+0x350>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a6d      	ldr	r2, [pc, #436]	@ (8005770 <HAL_DMA_Start_IT+0x4b0>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d027      	beq.n	8005610 <HAL_DMA_Start_IT+0x350>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a6b      	ldr	r2, [pc, #428]	@ (8005774 <HAL_DMA_Start_IT+0x4b4>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d022      	beq.n	8005610 <HAL_DMA_Start_IT+0x350>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a6a      	ldr	r2, [pc, #424]	@ (8005778 <HAL_DMA_Start_IT+0x4b8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d01d      	beq.n	8005610 <HAL_DMA_Start_IT+0x350>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a68      	ldr	r2, [pc, #416]	@ (800577c <HAL_DMA_Start_IT+0x4bc>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d018      	beq.n	8005610 <HAL_DMA_Start_IT+0x350>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a67      	ldr	r2, [pc, #412]	@ (8005780 <HAL_DMA_Start_IT+0x4c0>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d013      	beq.n	8005610 <HAL_DMA_Start_IT+0x350>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a65      	ldr	r2, [pc, #404]	@ (8005784 <HAL_DMA_Start_IT+0x4c4>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d00e      	beq.n	8005610 <HAL_DMA_Start_IT+0x350>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a64      	ldr	r2, [pc, #400]	@ (8005788 <HAL_DMA_Start_IT+0x4c8>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d009      	beq.n	8005610 <HAL_DMA_Start_IT+0x350>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a62      	ldr	r2, [pc, #392]	@ (800578c <HAL_DMA_Start_IT+0x4cc>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d004      	beq.n	8005610 <HAL_DMA_Start_IT+0x350>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a61      	ldr	r2, [pc, #388]	@ (8005790 <HAL_DMA_Start_IT+0x4d0>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d101      	bne.n	8005614 <HAL_DMA_Start_IT+0x354>
 8005610:	2301      	movs	r3, #1
 8005612:	e000      	b.n	8005616 <HAL_DMA_Start_IT+0x356>
 8005614:	2300      	movs	r3, #0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d01a      	beq.n	8005650 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d007      	beq.n	8005638 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005632:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005636:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800563c:	2b00      	cmp	r3, #0
 800563e:	d007      	beq.n	8005650 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800564a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800564e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a37      	ldr	r2, [pc, #220]	@ (8005734 <HAL_DMA_Start_IT+0x474>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d04a      	beq.n	80056f0 <HAL_DMA_Start_IT+0x430>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a36      	ldr	r2, [pc, #216]	@ (8005738 <HAL_DMA_Start_IT+0x478>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d045      	beq.n	80056f0 <HAL_DMA_Start_IT+0x430>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a34      	ldr	r2, [pc, #208]	@ (800573c <HAL_DMA_Start_IT+0x47c>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d040      	beq.n	80056f0 <HAL_DMA_Start_IT+0x430>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a33      	ldr	r2, [pc, #204]	@ (8005740 <HAL_DMA_Start_IT+0x480>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d03b      	beq.n	80056f0 <HAL_DMA_Start_IT+0x430>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a31      	ldr	r2, [pc, #196]	@ (8005744 <HAL_DMA_Start_IT+0x484>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d036      	beq.n	80056f0 <HAL_DMA_Start_IT+0x430>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a30      	ldr	r2, [pc, #192]	@ (8005748 <HAL_DMA_Start_IT+0x488>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d031      	beq.n	80056f0 <HAL_DMA_Start_IT+0x430>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a2e      	ldr	r2, [pc, #184]	@ (800574c <HAL_DMA_Start_IT+0x48c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d02c      	beq.n	80056f0 <HAL_DMA_Start_IT+0x430>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a2d      	ldr	r2, [pc, #180]	@ (8005750 <HAL_DMA_Start_IT+0x490>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d027      	beq.n	80056f0 <HAL_DMA_Start_IT+0x430>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a2b      	ldr	r2, [pc, #172]	@ (8005754 <HAL_DMA_Start_IT+0x494>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d022      	beq.n	80056f0 <HAL_DMA_Start_IT+0x430>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a2a      	ldr	r2, [pc, #168]	@ (8005758 <HAL_DMA_Start_IT+0x498>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d01d      	beq.n	80056f0 <HAL_DMA_Start_IT+0x430>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a28      	ldr	r2, [pc, #160]	@ (800575c <HAL_DMA_Start_IT+0x49c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d018      	beq.n	80056f0 <HAL_DMA_Start_IT+0x430>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a27      	ldr	r2, [pc, #156]	@ (8005760 <HAL_DMA_Start_IT+0x4a0>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d013      	beq.n	80056f0 <HAL_DMA_Start_IT+0x430>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a25      	ldr	r2, [pc, #148]	@ (8005764 <HAL_DMA_Start_IT+0x4a4>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d00e      	beq.n	80056f0 <HAL_DMA_Start_IT+0x430>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a24      	ldr	r2, [pc, #144]	@ (8005768 <HAL_DMA_Start_IT+0x4a8>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d009      	beq.n	80056f0 <HAL_DMA_Start_IT+0x430>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a22      	ldr	r2, [pc, #136]	@ (800576c <HAL_DMA_Start_IT+0x4ac>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d004      	beq.n	80056f0 <HAL_DMA_Start_IT+0x430>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a21      	ldr	r2, [pc, #132]	@ (8005770 <HAL_DMA_Start_IT+0x4b0>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d108      	bne.n	8005702 <HAL_DMA_Start_IT+0x442>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f042 0201 	orr.w	r2, r2, #1
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	e012      	b.n	8005728 <HAL_DMA_Start_IT+0x468>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f042 0201 	orr.w	r2, r2, #1
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	e009      	b.n	8005728 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800571a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005728:	7dfb      	ldrb	r3, [r7, #23]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3718      	adds	r7, #24
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	40020010 	.word	0x40020010
 8005738:	40020028 	.word	0x40020028
 800573c:	40020040 	.word	0x40020040
 8005740:	40020058 	.word	0x40020058
 8005744:	40020070 	.word	0x40020070
 8005748:	40020088 	.word	0x40020088
 800574c:	400200a0 	.word	0x400200a0
 8005750:	400200b8 	.word	0x400200b8
 8005754:	40020410 	.word	0x40020410
 8005758:	40020428 	.word	0x40020428
 800575c:	40020440 	.word	0x40020440
 8005760:	40020458 	.word	0x40020458
 8005764:	40020470 	.word	0x40020470
 8005768:	40020488 	.word	0x40020488
 800576c:	400204a0 	.word	0x400204a0
 8005770:	400204b8 	.word	0x400204b8
 8005774:	58025408 	.word	0x58025408
 8005778:	5802541c 	.word	0x5802541c
 800577c:	58025430 	.word	0x58025430
 8005780:	58025444 	.word	0x58025444
 8005784:	58025458 	.word	0x58025458
 8005788:	5802546c 	.word	0x5802546c
 800578c:	58025480 	.word	0x58025480
 8005790:	58025494 	.word	0x58025494

08005794 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800579c:	f7fd fe22 	bl	80033e4 <HAL_GetTick>
 80057a0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e2dc      	b.n	8005d66 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d008      	beq.n	80057ca <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2280      	movs	r2, #128	@ 0x80
 80057bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e2cd      	b.n	8005d66 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a76      	ldr	r2, [pc, #472]	@ (80059a8 <HAL_DMA_Abort+0x214>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d04a      	beq.n	800586a <HAL_DMA_Abort+0xd6>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a74      	ldr	r2, [pc, #464]	@ (80059ac <HAL_DMA_Abort+0x218>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d045      	beq.n	800586a <HAL_DMA_Abort+0xd6>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a73      	ldr	r2, [pc, #460]	@ (80059b0 <HAL_DMA_Abort+0x21c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d040      	beq.n	800586a <HAL_DMA_Abort+0xd6>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a71      	ldr	r2, [pc, #452]	@ (80059b4 <HAL_DMA_Abort+0x220>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d03b      	beq.n	800586a <HAL_DMA_Abort+0xd6>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a70      	ldr	r2, [pc, #448]	@ (80059b8 <HAL_DMA_Abort+0x224>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d036      	beq.n	800586a <HAL_DMA_Abort+0xd6>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a6e      	ldr	r2, [pc, #440]	@ (80059bc <HAL_DMA_Abort+0x228>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d031      	beq.n	800586a <HAL_DMA_Abort+0xd6>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a6d      	ldr	r2, [pc, #436]	@ (80059c0 <HAL_DMA_Abort+0x22c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d02c      	beq.n	800586a <HAL_DMA_Abort+0xd6>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a6b      	ldr	r2, [pc, #428]	@ (80059c4 <HAL_DMA_Abort+0x230>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d027      	beq.n	800586a <HAL_DMA_Abort+0xd6>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a6a      	ldr	r2, [pc, #424]	@ (80059c8 <HAL_DMA_Abort+0x234>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d022      	beq.n	800586a <HAL_DMA_Abort+0xd6>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a68      	ldr	r2, [pc, #416]	@ (80059cc <HAL_DMA_Abort+0x238>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d01d      	beq.n	800586a <HAL_DMA_Abort+0xd6>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a67      	ldr	r2, [pc, #412]	@ (80059d0 <HAL_DMA_Abort+0x23c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d018      	beq.n	800586a <HAL_DMA_Abort+0xd6>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a65      	ldr	r2, [pc, #404]	@ (80059d4 <HAL_DMA_Abort+0x240>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d013      	beq.n	800586a <HAL_DMA_Abort+0xd6>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a64      	ldr	r2, [pc, #400]	@ (80059d8 <HAL_DMA_Abort+0x244>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d00e      	beq.n	800586a <HAL_DMA_Abort+0xd6>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a62      	ldr	r2, [pc, #392]	@ (80059dc <HAL_DMA_Abort+0x248>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d009      	beq.n	800586a <HAL_DMA_Abort+0xd6>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a61      	ldr	r2, [pc, #388]	@ (80059e0 <HAL_DMA_Abort+0x24c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d004      	beq.n	800586a <HAL_DMA_Abort+0xd6>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a5f      	ldr	r2, [pc, #380]	@ (80059e4 <HAL_DMA_Abort+0x250>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d101      	bne.n	800586e <HAL_DMA_Abort+0xda>
 800586a:	2301      	movs	r3, #1
 800586c:	e000      	b.n	8005870 <HAL_DMA_Abort+0xdc>
 800586e:	2300      	movs	r3, #0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d013      	beq.n	800589c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 021e 	bic.w	r2, r2, #30
 8005882:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695a      	ldr	r2, [r3, #20]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005892:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	617b      	str	r3, [r7, #20]
 800589a:	e00a      	b.n	80058b2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 020e 	bic.w	r2, r2, #14
 80058aa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a3c      	ldr	r2, [pc, #240]	@ (80059a8 <HAL_DMA_Abort+0x214>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d072      	beq.n	80059a2 <HAL_DMA_Abort+0x20e>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a3a      	ldr	r2, [pc, #232]	@ (80059ac <HAL_DMA_Abort+0x218>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d06d      	beq.n	80059a2 <HAL_DMA_Abort+0x20e>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a39      	ldr	r2, [pc, #228]	@ (80059b0 <HAL_DMA_Abort+0x21c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d068      	beq.n	80059a2 <HAL_DMA_Abort+0x20e>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a37      	ldr	r2, [pc, #220]	@ (80059b4 <HAL_DMA_Abort+0x220>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d063      	beq.n	80059a2 <HAL_DMA_Abort+0x20e>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a36      	ldr	r2, [pc, #216]	@ (80059b8 <HAL_DMA_Abort+0x224>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d05e      	beq.n	80059a2 <HAL_DMA_Abort+0x20e>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a34      	ldr	r2, [pc, #208]	@ (80059bc <HAL_DMA_Abort+0x228>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d059      	beq.n	80059a2 <HAL_DMA_Abort+0x20e>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a33      	ldr	r2, [pc, #204]	@ (80059c0 <HAL_DMA_Abort+0x22c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d054      	beq.n	80059a2 <HAL_DMA_Abort+0x20e>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a31      	ldr	r2, [pc, #196]	@ (80059c4 <HAL_DMA_Abort+0x230>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d04f      	beq.n	80059a2 <HAL_DMA_Abort+0x20e>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a30      	ldr	r2, [pc, #192]	@ (80059c8 <HAL_DMA_Abort+0x234>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d04a      	beq.n	80059a2 <HAL_DMA_Abort+0x20e>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a2e      	ldr	r2, [pc, #184]	@ (80059cc <HAL_DMA_Abort+0x238>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d045      	beq.n	80059a2 <HAL_DMA_Abort+0x20e>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a2d      	ldr	r2, [pc, #180]	@ (80059d0 <HAL_DMA_Abort+0x23c>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d040      	beq.n	80059a2 <HAL_DMA_Abort+0x20e>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a2b      	ldr	r2, [pc, #172]	@ (80059d4 <HAL_DMA_Abort+0x240>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d03b      	beq.n	80059a2 <HAL_DMA_Abort+0x20e>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a2a      	ldr	r2, [pc, #168]	@ (80059d8 <HAL_DMA_Abort+0x244>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d036      	beq.n	80059a2 <HAL_DMA_Abort+0x20e>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a28      	ldr	r2, [pc, #160]	@ (80059dc <HAL_DMA_Abort+0x248>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d031      	beq.n	80059a2 <HAL_DMA_Abort+0x20e>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a27      	ldr	r2, [pc, #156]	@ (80059e0 <HAL_DMA_Abort+0x24c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d02c      	beq.n	80059a2 <HAL_DMA_Abort+0x20e>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a25      	ldr	r2, [pc, #148]	@ (80059e4 <HAL_DMA_Abort+0x250>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d027      	beq.n	80059a2 <HAL_DMA_Abort+0x20e>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a24      	ldr	r2, [pc, #144]	@ (80059e8 <HAL_DMA_Abort+0x254>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d022      	beq.n	80059a2 <HAL_DMA_Abort+0x20e>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a22      	ldr	r2, [pc, #136]	@ (80059ec <HAL_DMA_Abort+0x258>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d01d      	beq.n	80059a2 <HAL_DMA_Abort+0x20e>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a21      	ldr	r2, [pc, #132]	@ (80059f0 <HAL_DMA_Abort+0x25c>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d018      	beq.n	80059a2 <HAL_DMA_Abort+0x20e>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a1f      	ldr	r2, [pc, #124]	@ (80059f4 <HAL_DMA_Abort+0x260>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d013      	beq.n	80059a2 <HAL_DMA_Abort+0x20e>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a1e      	ldr	r2, [pc, #120]	@ (80059f8 <HAL_DMA_Abort+0x264>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d00e      	beq.n	80059a2 <HAL_DMA_Abort+0x20e>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a1c      	ldr	r2, [pc, #112]	@ (80059fc <HAL_DMA_Abort+0x268>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d009      	beq.n	80059a2 <HAL_DMA_Abort+0x20e>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a1b      	ldr	r2, [pc, #108]	@ (8005a00 <HAL_DMA_Abort+0x26c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d004      	beq.n	80059a2 <HAL_DMA_Abort+0x20e>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a19      	ldr	r2, [pc, #100]	@ (8005a04 <HAL_DMA_Abort+0x270>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d132      	bne.n	8005a08 <HAL_DMA_Abort+0x274>
 80059a2:	2301      	movs	r3, #1
 80059a4:	e031      	b.n	8005a0a <HAL_DMA_Abort+0x276>
 80059a6:	bf00      	nop
 80059a8:	40020010 	.word	0x40020010
 80059ac:	40020028 	.word	0x40020028
 80059b0:	40020040 	.word	0x40020040
 80059b4:	40020058 	.word	0x40020058
 80059b8:	40020070 	.word	0x40020070
 80059bc:	40020088 	.word	0x40020088
 80059c0:	400200a0 	.word	0x400200a0
 80059c4:	400200b8 	.word	0x400200b8
 80059c8:	40020410 	.word	0x40020410
 80059cc:	40020428 	.word	0x40020428
 80059d0:	40020440 	.word	0x40020440
 80059d4:	40020458 	.word	0x40020458
 80059d8:	40020470 	.word	0x40020470
 80059dc:	40020488 	.word	0x40020488
 80059e0:	400204a0 	.word	0x400204a0
 80059e4:	400204b8 	.word	0x400204b8
 80059e8:	58025408 	.word	0x58025408
 80059ec:	5802541c 	.word	0x5802541c
 80059f0:	58025430 	.word	0x58025430
 80059f4:	58025444 	.word	0x58025444
 80059f8:	58025458 	.word	0x58025458
 80059fc:	5802546c 	.word	0x5802546c
 8005a00:	58025480 	.word	0x58025480
 8005a04:	58025494 	.word	0x58025494
 8005a08:	2300      	movs	r3, #0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d007      	beq.n	8005a1e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a6d      	ldr	r2, [pc, #436]	@ (8005bd8 <HAL_DMA_Abort+0x444>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d04a      	beq.n	8005abe <HAL_DMA_Abort+0x32a>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a6b      	ldr	r2, [pc, #428]	@ (8005bdc <HAL_DMA_Abort+0x448>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d045      	beq.n	8005abe <HAL_DMA_Abort+0x32a>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a6a      	ldr	r2, [pc, #424]	@ (8005be0 <HAL_DMA_Abort+0x44c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d040      	beq.n	8005abe <HAL_DMA_Abort+0x32a>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a68      	ldr	r2, [pc, #416]	@ (8005be4 <HAL_DMA_Abort+0x450>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d03b      	beq.n	8005abe <HAL_DMA_Abort+0x32a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a67      	ldr	r2, [pc, #412]	@ (8005be8 <HAL_DMA_Abort+0x454>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d036      	beq.n	8005abe <HAL_DMA_Abort+0x32a>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a65      	ldr	r2, [pc, #404]	@ (8005bec <HAL_DMA_Abort+0x458>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d031      	beq.n	8005abe <HAL_DMA_Abort+0x32a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a64      	ldr	r2, [pc, #400]	@ (8005bf0 <HAL_DMA_Abort+0x45c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d02c      	beq.n	8005abe <HAL_DMA_Abort+0x32a>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a62      	ldr	r2, [pc, #392]	@ (8005bf4 <HAL_DMA_Abort+0x460>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d027      	beq.n	8005abe <HAL_DMA_Abort+0x32a>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a61      	ldr	r2, [pc, #388]	@ (8005bf8 <HAL_DMA_Abort+0x464>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d022      	beq.n	8005abe <HAL_DMA_Abort+0x32a>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a5f      	ldr	r2, [pc, #380]	@ (8005bfc <HAL_DMA_Abort+0x468>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d01d      	beq.n	8005abe <HAL_DMA_Abort+0x32a>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a5e      	ldr	r2, [pc, #376]	@ (8005c00 <HAL_DMA_Abort+0x46c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d018      	beq.n	8005abe <HAL_DMA_Abort+0x32a>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a5c      	ldr	r2, [pc, #368]	@ (8005c04 <HAL_DMA_Abort+0x470>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d013      	beq.n	8005abe <HAL_DMA_Abort+0x32a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a5b      	ldr	r2, [pc, #364]	@ (8005c08 <HAL_DMA_Abort+0x474>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d00e      	beq.n	8005abe <HAL_DMA_Abort+0x32a>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a59      	ldr	r2, [pc, #356]	@ (8005c0c <HAL_DMA_Abort+0x478>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d009      	beq.n	8005abe <HAL_DMA_Abort+0x32a>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a58      	ldr	r2, [pc, #352]	@ (8005c10 <HAL_DMA_Abort+0x47c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d004      	beq.n	8005abe <HAL_DMA_Abort+0x32a>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a56      	ldr	r2, [pc, #344]	@ (8005c14 <HAL_DMA_Abort+0x480>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d108      	bne.n	8005ad0 <HAL_DMA_Abort+0x33c>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 0201 	bic.w	r2, r2, #1
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	e007      	b.n	8005ae0 <HAL_DMA_Abort+0x34c>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 0201 	bic.w	r2, r2, #1
 8005ade:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005ae0:	e013      	b.n	8005b0a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ae2:	f7fd fc7f 	bl	80033e4 <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	2b05      	cmp	r3, #5
 8005aee:	d90c      	bls.n	8005b0a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2220      	movs	r2, #32
 8005af4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2203      	movs	r2, #3
 8005afa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e12d      	b.n	8005d66 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1e5      	bne.n	8005ae2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a2f      	ldr	r2, [pc, #188]	@ (8005bd8 <HAL_DMA_Abort+0x444>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d04a      	beq.n	8005bb6 <HAL_DMA_Abort+0x422>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a2d      	ldr	r2, [pc, #180]	@ (8005bdc <HAL_DMA_Abort+0x448>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d045      	beq.n	8005bb6 <HAL_DMA_Abort+0x422>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a2c      	ldr	r2, [pc, #176]	@ (8005be0 <HAL_DMA_Abort+0x44c>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d040      	beq.n	8005bb6 <HAL_DMA_Abort+0x422>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a2a      	ldr	r2, [pc, #168]	@ (8005be4 <HAL_DMA_Abort+0x450>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d03b      	beq.n	8005bb6 <HAL_DMA_Abort+0x422>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a29      	ldr	r2, [pc, #164]	@ (8005be8 <HAL_DMA_Abort+0x454>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d036      	beq.n	8005bb6 <HAL_DMA_Abort+0x422>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a27      	ldr	r2, [pc, #156]	@ (8005bec <HAL_DMA_Abort+0x458>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d031      	beq.n	8005bb6 <HAL_DMA_Abort+0x422>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a26      	ldr	r2, [pc, #152]	@ (8005bf0 <HAL_DMA_Abort+0x45c>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d02c      	beq.n	8005bb6 <HAL_DMA_Abort+0x422>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a24      	ldr	r2, [pc, #144]	@ (8005bf4 <HAL_DMA_Abort+0x460>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d027      	beq.n	8005bb6 <HAL_DMA_Abort+0x422>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a23      	ldr	r2, [pc, #140]	@ (8005bf8 <HAL_DMA_Abort+0x464>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d022      	beq.n	8005bb6 <HAL_DMA_Abort+0x422>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a21      	ldr	r2, [pc, #132]	@ (8005bfc <HAL_DMA_Abort+0x468>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d01d      	beq.n	8005bb6 <HAL_DMA_Abort+0x422>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a20      	ldr	r2, [pc, #128]	@ (8005c00 <HAL_DMA_Abort+0x46c>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d018      	beq.n	8005bb6 <HAL_DMA_Abort+0x422>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a1e      	ldr	r2, [pc, #120]	@ (8005c04 <HAL_DMA_Abort+0x470>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d013      	beq.n	8005bb6 <HAL_DMA_Abort+0x422>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a1d      	ldr	r2, [pc, #116]	@ (8005c08 <HAL_DMA_Abort+0x474>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d00e      	beq.n	8005bb6 <HAL_DMA_Abort+0x422>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8005c0c <HAL_DMA_Abort+0x478>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d009      	beq.n	8005bb6 <HAL_DMA_Abort+0x422>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a1a      	ldr	r2, [pc, #104]	@ (8005c10 <HAL_DMA_Abort+0x47c>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d004      	beq.n	8005bb6 <HAL_DMA_Abort+0x422>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a18      	ldr	r2, [pc, #96]	@ (8005c14 <HAL_DMA_Abort+0x480>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d101      	bne.n	8005bba <HAL_DMA_Abort+0x426>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e000      	b.n	8005bbc <HAL_DMA_Abort+0x428>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d02b      	beq.n	8005c18 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bc4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bca:	f003 031f 	and.w	r3, r3, #31
 8005bce:	223f      	movs	r2, #63	@ 0x3f
 8005bd0:	409a      	lsls	r2, r3
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	609a      	str	r2, [r3, #8]
 8005bd6:	e02a      	b.n	8005c2e <HAL_DMA_Abort+0x49a>
 8005bd8:	40020010 	.word	0x40020010
 8005bdc:	40020028 	.word	0x40020028
 8005be0:	40020040 	.word	0x40020040
 8005be4:	40020058 	.word	0x40020058
 8005be8:	40020070 	.word	0x40020070
 8005bec:	40020088 	.word	0x40020088
 8005bf0:	400200a0 	.word	0x400200a0
 8005bf4:	400200b8 	.word	0x400200b8
 8005bf8:	40020410 	.word	0x40020410
 8005bfc:	40020428 	.word	0x40020428
 8005c00:	40020440 	.word	0x40020440
 8005c04:	40020458 	.word	0x40020458
 8005c08:	40020470 	.word	0x40020470
 8005c0c:	40020488 	.word	0x40020488
 8005c10:	400204a0 	.word	0x400204a0
 8005c14:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c1c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c22:	f003 031f 	and.w	r3, r3, #31
 8005c26:	2201      	movs	r2, #1
 8005c28:	409a      	lsls	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a4f      	ldr	r2, [pc, #316]	@ (8005d70 <HAL_DMA_Abort+0x5dc>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d072      	beq.n	8005d1e <HAL_DMA_Abort+0x58a>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a4d      	ldr	r2, [pc, #308]	@ (8005d74 <HAL_DMA_Abort+0x5e0>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d06d      	beq.n	8005d1e <HAL_DMA_Abort+0x58a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a4c      	ldr	r2, [pc, #304]	@ (8005d78 <HAL_DMA_Abort+0x5e4>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d068      	beq.n	8005d1e <HAL_DMA_Abort+0x58a>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a4a      	ldr	r2, [pc, #296]	@ (8005d7c <HAL_DMA_Abort+0x5e8>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d063      	beq.n	8005d1e <HAL_DMA_Abort+0x58a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a49      	ldr	r2, [pc, #292]	@ (8005d80 <HAL_DMA_Abort+0x5ec>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d05e      	beq.n	8005d1e <HAL_DMA_Abort+0x58a>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a47      	ldr	r2, [pc, #284]	@ (8005d84 <HAL_DMA_Abort+0x5f0>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d059      	beq.n	8005d1e <HAL_DMA_Abort+0x58a>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a46      	ldr	r2, [pc, #280]	@ (8005d88 <HAL_DMA_Abort+0x5f4>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d054      	beq.n	8005d1e <HAL_DMA_Abort+0x58a>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a44      	ldr	r2, [pc, #272]	@ (8005d8c <HAL_DMA_Abort+0x5f8>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d04f      	beq.n	8005d1e <HAL_DMA_Abort+0x58a>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a43      	ldr	r2, [pc, #268]	@ (8005d90 <HAL_DMA_Abort+0x5fc>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d04a      	beq.n	8005d1e <HAL_DMA_Abort+0x58a>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a41      	ldr	r2, [pc, #260]	@ (8005d94 <HAL_DMA_Abort+0x600>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d045      	beq.n	8005d1e <HAL_DMA_Abort+0x58a>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a40      	ldr	r2, [pc, #256]	@ (8005d98 <HAL_DMA_Abort+0x604>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d040      	beq.n	8005d1e <HAL_DMA_Abort+0x58a>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a3e      	ldr	r2, [pc, #248]	@ (8005d9c <HAL_DMA_Abort+0x608>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d03b      	beq.n	8005d1e <HAL_DMA_Abort+0x58a>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a3d      	ldr	r2, [pc, #244]	@ (8005da0 <HAL_DMA_Abort+0x60c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d036      	beq.n	8005d1e <HAL_DMA_Abort+0x58a>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a3b      	ldr	r2, [pc, #236]	@ (8005da4 <HAL_DMA_Abort+0x610>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d031      	beq.n	8005d1e <HAL_DMA_Abort+0x58a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a3a      	ldr	r2, [pc, #232]	@ (8005da8 <HAL_DMA_Abort+0x614>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d02c      	beq.n	8005d1e <HAL_DMA_Abort+0x58a>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a38      	ldr	r2, [pc, #224]	@ (8005dac <HAL_DMA_Abort+0x618>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d027      	beq.n	8005d1e <HAL_DMA_Abort+0x58a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a37      	ldr	r2, [pc, #220]	@ (8005db0 <HAL_DMA_Abort+0x61c>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d022      	beq.n	8005d1e <HAL_DMA_Abort+0x58a>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a35      	ldr	r2, [pc, #212]	@ (8005db4 <HAL_DMA_Abort+0x620>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d01d      	beq.n	8005d1e <HAL_DMA_Abort+0x58a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a34      	ldr	r2, [pc, #208]	@ (8005db8 <HAL_DMA_Abort+0x624>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d018      	beq.n	8005d1e <HAL_DMA_Abort+0x58a>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a32      	ldr	r2, [pc, #200]	@ (8005dbc <HAL_DMA_Abort+0x628>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d013      	beq.n	8005d1e <HAL_DMA_Abort+0x58a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a31      	ldr	r2, [pc, #196]	@ (8005dc0 <HAL_DMA_Abort+0x62c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d00e      	beq.n	8005d1e <HAL_DMA_Abort+0x58a>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a2f      	ldr	r2, [pc, #188]	@ (8005dc4 <HAL_DMA_Abort+0x630>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d009      	beq.n	8005d1e <HAL_DMA_Abort+0x58a>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a2e      	ldr	r2, [pc, #184]	@ (8005dc8 <HAL_DMA_Abort+0x634>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d004      	beq.n	8005d1e <HAL_DMA_Abort+0x58a>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a2c      	ldr	r2, [pc, #176]	@ (8005dcc <HAL_DMA_Abort+0x638>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d101      	bne.n	8005d22 <HAL_DMA_Abort+0x58e>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e000      	b.n	8005d24 <HAL_DMA_Abort+0x590>
 8005d22:	2300      	movs	r3, #0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d015      	beq.n	8005d54 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005d30:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00c      	beq.n	8005d54 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d48:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005d52:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	40020010 	.word	0x40020010
 8005d74:	40020028 	.word	0x40020028
 8005d78:	40020040 	.word	0x40020040
 8005d7c:	40020058 	.word	0x40020058
 8005d80:	40020070 	.word	0x40020070
 8005d84:	40020088 	.word	0x40020088
 8005d88:	400200a0 	.word	0x400200a0
 8005d8c:	400200b8 	.word	0x400200b8
 8005d90:	40020410 	.word	0x40020410
 8005d94:	40020428 	.word	0x40020428
 8005d98:	40020440 	.word	0x40020440
 8005d9c:	40020458 	.word	0x40020458
 8005da0:	40020470 	.word	0x40020470
 8005da4:	40020488 	.word	0x40020488
 8005da8:	400204a0 	.word	0x400204a0
 8005dac:	400204b8 	.word	0x400204b8
 8005db0:	58025408 	.word	0x58025408
 8005db4:	5802541c 	.word	0x5802541c
 8005db8:	58025430 	.word	0x58025430
 8005dbc:	58025444 	.word	0x58025444
 8005dc0:	58025458 	.word	0x58025458
 8005dc4:	5802546c 	.word	0x5802546c
 8005dc8:	58025480 	.word	0x58025480
 8005dcc:	58025494 	.word	0x58025494

08005dd0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e237      	b.n	8006252 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d004      	beq.n	8005df8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2280      	movs	r2, #128	@ 0x80
 8005df2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e22c      	b.n	8006252 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a5c      	ldr	r2, [pc, #368]	@ (8005f70 <HAL_DMA_Abort_IT+0x1a0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d04a      	beq.n	8005e98 <HAL_DMA_Abort_IT+0xc8>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a5b      	ldr	r2, [pc, #364]	@ (8005f74 <HAL_DMA_Abort_IT+0x1a4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d045      	beq.n	8005e98 <HAL_DMA_Abort_IT+0xc8>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a59      	ldr	r2, [pc, #356]	@ (8005f78 <HAL_DMA_Abort_IT+0x1a8>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d040      	beq.n	8005e98 <HAL_DMA_Abort_IT+0xc8>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a58      	ldr	r2, [pc, #352]	@ (8005f7c <HAL_DMA_Abort_IT+0x1ac>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d03b      	beq.n	8005e98 <HAL_DMA_Abort_IT+0xc8>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a56      	ldr	r2, [pc, #344]	@ (8005f80 <HAL_DMA_Abort_IT+0x1b0>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d036      	beq.n	8005e98 <HAL_DMA_Abort_IT+0xc8>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a55      	ldr	r2, [pc, #340]	@ (8005f84 <HAL_DMA_Abort_IT+0x1b4>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d031      	beq.n	8005e98 <HAL_DMA_Abort_IT+0xc8>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a53      	ldr	r2, [pc, #332]	@ (8005f88 <HAL_DMA_Abort_IT+0x1b8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d02c      	beq.n	8005e98 <HAL_DMA_Abort_IT+0xc8>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a52      	ldr	r2, [pc, #328]	@ (8005f8c <HAL_DMA_Abort_IT+0x1bc>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d027      	beq.n	8005e98 <HAL_DMA_Abort_IT+0xc8>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a50      	ldr	r2, [pc, #320]	@ (8005f90 <HAL_DMA_Abort_IT+0x1c0>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d022      	beq.n	8005e98 <HAL_DMA_Abort_IT+0xc8>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a4f      	ldr	r2, [pc, #316]	@ (8005f94 <HAL_DMA_Abort_IT+0x1c4>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d01d      	beq.n	8005e98 <HAL_DMA_Abort_IT+0xc8>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a4d      	ldr	r2, [pc, #308]	@ (8005f98 <HAL_DMA_Abort_IT+0x1c8>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d018      	beq.n	8005e98 <HAL_DMA_Abort_IT+0xc8>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a4c      	ldr	r2, [pc, #304]	@ (8005f9c <HAL_DMA_Abort_IT+0x1cc>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d013      	beq.n	8005e98 <HAL_DMA_Abort_IT+0xc8>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a4a      	ldr	r2, [pc, #296]	@ (8005fa0 <HAL_DMA_Abort_IT+0x1d0>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00e      	beq.n	8005e98 <HAL_DMA_Abort_IT+0xc8>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a49      	ldr	r2, [pc, #292]	@ (8005fa4 <HAL_DMA_Abort_IT+0x1d4>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d009      	beq.n	8005e98 <HAL_DMA_Abort_IT+0xc8>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a47      	ldr	r2, [pc, #284]	@ (8005fa8 <HAL_DMA_Abort_IT+0x1d8>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d004      	beq.n	8005e98 <HAL_DMA_Abort_IT+0xc8>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a46      	ldr	r2, [pc, #280]	@ (8005fac <HAL_DMA_Abort_IT+0x1dc>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d101      	bne.n	8005e9c <HAL_DMA_Abort_IT+0xcc>
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e000      	b.n	8005e9e <HAL_DMA_Abort_IT+0xce>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f000 8086 	beq.w	8005fb0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2204      	movs	r2, #4
 8005ea8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a2f      	ldr	r2, [pc, #188]	@ (8005f70 <HAL_DMA_Abort_IT+0x1a0>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d04a      	beq.n	8005f4c <HAL_DMA_Abort_IT+0x17c>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a2e      	ldr	r2, [pc, #184]	@ (8005f74 <HAL_DMA_Abort_IT+0x1a4>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d045      	beq.n	8005f4c <HAL_DMA_Abort_IT+0x17c>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a2c      	ldr	r2, [pc, #176]	@ (8005f78 <HAL_DMA_Abort_IT+0x1a8>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d040      	beq.n	8005f4c <HAL_DMA_Abort_IT+0x17c>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a2b      	ldr	r2, [pc, #172]	@ (8005f7c <HAL_DMA_Abort_IT+0x1ac>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d03b      	beq.n	8005f4c <HAL_DMA_Abort_IT+0x17c>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a29      	ldr	r2, [pc, #164]	@ (8005f80 <HAL_DMA_Abort_IT+0x1b0>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d036      	beq.n	8005f4c <HAL_DMA_Abort_IT+0x17c>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a28      	ldr	r2, [pc, #160]	@ (8005f84 <HAL_DMA_Abort_IT+0x1b4>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d031      	beq.n	8005f4c <HAL_DMA_Abort_IT+0x17c>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a26      	ldr	r2, [pc, #152]	@ (8005f88 <HAL_DMA_Abort_IT+0x1b8>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d02c      	beq.n	8005f4c <HAL_DMA_Abort_IT+0x17c>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a25      	ldr	r2, [pc, #148]	@ (8005f8c <HAL_DMA_Abort_IT+0x1bc>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d027      	beq.n	8005f4c <HAL_DMA_Abort_IT+0x17c>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a23      	ldr	r2, [pc, #140]	@ (8005f90 <HAL_DMA_Abort_IT+0x1c0>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d022      	beq.n	8005f4c <HAL_DMA_Abort_IT+0x17c>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a22      	ldr	r2, [pc, #136]	@ (8005f94 <HAL_DMA_Abort_IT+0x1c4>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d01d      	beq.n	8005f4c <HAL_DMA_Abort_IT+0x17c>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a20      	ldr	r2, [pc, #128]	@ (8005f98 <HAL_DMA_Abort_IT+0x1c8>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d018      	beq.n	8005f4c <HAL_DMA_Abort_IT+0x17c>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a1f      	ldr	r2, [pc, #124]	@ (8005f9c <HAL_DMA_Abort_IT+0x1cc>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d013      	beq.n	8005f4c <HAL_DMA_Abort_IT+0x17c>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a1d      	ldr	r2, [pc, #116]	@ (8005fa0 <HAL_DMA_Abort_IT+0x1d0>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d00e      	beq.n	8005f4c <HAL_DMA_Abort_IT+0x17c>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a1c      	ldr	r2, [pc, #112]	@ (8005fa4 <HAL_DMA_Abort_IT+0x1d4>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d009      	beq.n	8005f4c <HAL_DMA_Abort_IT+0x17c>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a1a      	ldr	r2, [pc, #104]	@ (8005fa8 <HAL_DMA_Abort_IT+0x1d8>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d004      	beq.n	8005f4c <HAL_DMA_Abort_IT+0x17c>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a19      	ldr	r2, [pc, #100]	@ (8005fac <HAL_DMA_Abort_IT+0x1dc>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d108      	bne.n	8005f5e <HAL_DMA_Abort_IT+0x18e>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 0201 	bic.w	r2, r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	e178      	b.n	8006250 <HAL_DMA_Abort_IT+0x480>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0201 	bic.w	r2, r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]
 8005f6e:	e16f      	b.n	8006250 <HAL_DMA_Abort_IT+0x480>
 8005f70:	40020010 	.word	0x40020010
 8005f74:	40020028 	.word	0x40020028
 8005f78:	40020040 	.word	0x40020040
 8005f7c:	40020058 	.word	0x40020058
 8005f80:	40020070 	.word	0x40020070
 8005f84:	40020088 	.word	0x40020088
 8005f88:	400200a0 	.word	0x400200a0
 8005f8c:	400200b8 	.word	0x400200b8
 8005f90:	40020410 	.word	0x40020410
 8005f94:	40020428 	.word	0x40020428
 8005f98:	40020440 	.word	0x40020440
 8005f9c:	40020458 	.word	0x40020458
 8005fa0:	40020470 	.word	0x40020470
 8005fa4:	40020488 	.word	0x40020488
 8005fa8:	400204a0 	.word	0x400204a0
 8005fac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 020e 	bic.w	r2, r2, #14
 8005fbe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a6c      	ldr	r2, [pc, #432]	@ (8006178 <HAL_DMA_Abort_IT+0x3a8>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d04a      	beq.n	8006060 <HAL_DMA_Abort_IT+0x290>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a6b      	ldr	r2, [pc, #428]	@ (800617c <HAL_DMA_Abort_IT+0x3ac>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d045      	beq.n	8006060 <HAL_DMA_Abort_IT+0x290>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a69      	ldr	r2, [pc, #420]	@ (8006180 <HAL_DMA_Abort_IT+0x3b0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d040      	beq.n	8006060 <HAL_DMA_Abort_IT+0x290>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a68      	ldr	r2, [pc, #416]	@ (8006184 <HAL_DMA_Abort_IT+0x3b4>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d03b      	beq.n	8006060 <HAL_DMA_Abort_IT+0x290>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a66      	ldr	r2, [pc, #408]	@ (8006188 <HAL_DMA_Abort_IT+0x3b8>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d036      	beq.n	8006060 <HAL_DMA_Abort_IT+0x290>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a65      	ldr	r2, [pc, #404]	@ (800618c <HAL_DMA_Abort_IT+0x3bc>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d031      	beq.n	8006060 <HAL_DMA_Abort_IT+0x290>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a63      	ldr	r2, [pc, #396]	@ (8006190 <HAL_DMA_Abort_IT+0x3c0>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d02c      	beq.n	8006060 <HAL_DMA_Abort_IT+0x290>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a62      	ldr	r2, [pc, #392]	@ (8006194 <HAL_DMA_Abort_IT+0x3c4>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d027      	beq.n	8006060 <HAL_DMA_Abort_IT+0x290>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a60      	ldr	r2, [pc, #384]	@ (8006198 <HAL_DMA_Abort_IT+0x3c8>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d022      	beq.n	8006060 <HAL_DMA_Abort_IT+0x290>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a5f      	ldr	r2, [pc, #380]	@ (800619c <HAL_DMA_Abort_IT+0x3cc>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d01d      	beq.n	8006060 <HAL_DMA_Abort_IT+0x290>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a5d      	ldr	r2, [pc, #372]	@ (80061a0 <HAL_DMA_Abort_IT+0x3d0>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d018      	beq.n	8006060 <HAL_DMA_Abort_IT+0x290>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a5c      	ldr	r2, [pc, #368]	@ (80061a4 <HAL_DMA_Abort_IT+0x3d4>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d013      	beq.n	8006060 <HAL_DMA_Abort_IT+0x290>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a5a      	ldr	r2, [pc, #360]	@ (80061a8 <HAL_DMA_Abort_IT+0x3d8>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d00e      	beq.n	8006060 <HAL_DMA_Abort_IT+0x290>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a59      	ldr	r2, [pc, #356]	@ (80061ac <HAL_DMA_Abort_IT+0x3dc>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d009      	beq.n	8006060 <HAL_DMA_Abort_IT+0x290>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a57      	ldr	r2, [pc, #348]	@ (80061b0 <HAL_DMA_Abort_IT+0x3e0>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d004      	beq.n	8006060 <HAL_DMA_Abort_IT+0x290>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a56      	ldr	r2, [pc, #344]	@ (80061b4 <HAL_DMA_Abort_IT+0x3e4>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d108      	bne.n	8006072 <HAL_DMA_Abort_IT+0x2a2>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 0201 	bic.w	r2, r2, #1
 800606e:	601a      	str	r2, [r3, #0]
 8006070:	e007      	b.n	8006082 <HAL_DMA_Abort_IT+0x2b2>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f022 0201 	bic.w	r2, r2, #1
 8006080:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a3c      	ldr	r2, [pc, #240]	@ (8006178 <HAL_DMA_Abort_IT+0x3a8>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d072      	beq.n	8006172 <HAL_DMA_Abort_IT+0x3a2>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a3a      	ldr	r2, [pc, #232]	@ (800617c <HAL_DMA_Abort_IT+0x3ac>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d06d      	beq.n	8006172 <HAL_DMA_Abort_IT+0x3a2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a39      	ldr	r2, [pc, #228]	@ (8006180 <HAL_DMA_Abort_IT+0x3b0>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d068      	beq.n	8006172 <HAL_DMA_Abort_IT+0x3a2>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a37      	ldr	r2, [pc, #220]	@ (8006184 <HAL_DMA_Abort_IT+0x3b4>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d063      	beq.n	8006172 <HAL_DMA_Abort_IT+0x3a2>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a36      	ldr	r2, [pc, #216]	@ (8006188 <HAL_DMA_Abort_IT+0x3b8>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d05e      	beq.n	8006172 <HAL_DMA_Abort_IT+0x3a2>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a34      	ldr	r2, [pc, #208]	@ (800618c <HAL_DMA_Abort_IT+0x3bc>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d059      	beq.n	8006172 <HAL_DMA_Abort_IT+0x3a2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a33      	ldr	r2, [pc, #204]	@ (8006190 <HAL_DMA_Abort_IT+0x3c0>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d054      	beq.n	8006172 <HAL_DMA_Abort_IT+0x3a2>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a31      	ldr	r2, [pc, #196]	@ (8006194 <HAL_DMA_Abort_IT+0x3c4>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d04f      	beq.n	8006172 <HAL_DMA_Abort_IT+0x3a2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a30      	ldr	r2, [pc, #192]	@ (8006198 <HAL_DMA_Abort_IT+0x3c8>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d04a      	beq.n	8006172 <HAL_DMA_Abort_IT+0x3a2>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a2e      	ldr	r2, [pc, #184]	@ (800619c <HAL_DMA_Abort_IT+0x3cc>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d045      	beq.n	8006172 <HAL_DMA_Abort_IT+0x3a2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a2d      	ldr	r2, [pc, #180]	@ (80061a0 <HAL_DMA_Abort_IT+0x3d0>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d040      	beq.n	8006172 <HAL_DMA_Abort_IT+0x3a2>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a2b      	ldr	r2, [pc, #172]	@ (80061a4 <HAL_DMA_Abort_IT+0x3d4>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d03b      	beq.n	8006172 <HAL_DMA_Abort_IT+0x3a2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a2a      	ldr	r2, [pc, #168]	@ (80061a8 <HAL_DMA_Abort_IT+0x3d8>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d036      	beq.n	8006172 <HAL_DMA_Abort_IT+0x3a2>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a28      	ldr	r2, [pc, #160]	@ (80061ac <HAL_DMA_Abort_IT+0x3dc>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d031      	beq.n	8006172 <HAL_DMA_Abort_IT+0x3a2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a27      	ldr	r2, [pc, #156]	@ (80061b0 <HAL_DMA_Abort_IT+0x3e0>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d02c      	beq.n	8006172 <HAL_DMA_Abort_IT+0x3a2>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a25      	ldr	r2, [pc, #148]	@ (80061b4 <HAL_DMA_Abort_IT+0x3e4>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d027      	beq.n	8006172 <HAL_DMA_Abort_IT+0x3a2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a24      	ldr	r2, [pc, #144]	@ (80061b8 <HAL_DMA_Abort_IT+0x3e8>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d022      	beq.n	8006172 <HAL_DMA_Abort_IT+0x3a2>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a22      	ldr	r2, [pc, #136]	@ (80061bc <HAL_DMA_Abort_IT+0x3ec>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d01d      	beq.n	8006172 <HAL_DMA_Abort_IT+0x3a2>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a21      	ldr	r2, [pc, #132]	@ (80061c0 <HAL_DMA_Abort_IT+0x3f0>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d018      	beq.n	8006172 <HAL_DMA_Abort_IT+0x3a2>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a1f      	ldr	r2, [pc, #124]	@ (80061c4 <HAL_DMA_Abort_IT+0x3f4>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d013      	beq.n	8006172 <HAL_DMA_Abort_IT+0x3a2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a1e      	ldr	r2, [pc, #120]	@ (80061c8 <HAL_DMA_Abort_IT+0x3f8>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d00e      	beq.n	8006172 <HAL_DMA_Abort_IT+0x3a2>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a1c      	ldr	r2, [pc, #112]	@ (80061cc <HAL_DMA_Abort_IT+0x3fc>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d009      	beq.n	8006172 <HAL_DMA_Abort_IT+0x3a2>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a1b      	ldr	r2, [pc, #108]	@ (80061d0 <HAL_DMA_Abort_IT+0x400>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d004      	beq.n	8006172 <HAL_DMA_Abort_IT+0x3a2>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a19      	ldr	r2, [pc, #100]	@ (80061d4 <HAL_DMA_Abort_IT+0x404>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d132      	bne.n	80061d8 <HAL_DMA_Abort_IT+0x408>
 8006172:	2301      	movs	r3, #1
 8006174:	e031      	b.n	80061da <HAL_DMA_Abort_IT+0x40a>
 8006176:	bf00      	nop
 8006178:	40020010 	.word	0x40020010
 800617c:	40020028 	.word	0x40020028
 8006180:	40020040 	.word	0x40020040
 8006184:	40020058 	.word	0x40020058
 8006188:	40020070 	.word	0x40020070
 800618c:	40020088 	.word	0x40020088
 8006190:	400200a0 	.word	0x400200a0
 8006194:	400200b8 	.word	0x400200b8
 8006198:	40020410 	.word	0x40020410
 800619c:	40020428 	.word	0x40020428
 80061a0:	40020440 	.word	0x40020440
 80061a4:	40020458 	.word	0x40020458
 80061a8:	40020470 	.word	0x40020470
 80061ac:	40020488 	.word	0x40020488
 80061b0:	400204a0 	.word	0x400204a0
 80061b4:	400204b8 	.word	0x400204b8
 80061b8:	58025408 	.word	0x58025408
 80061bc:	5802541c 	.word	0x5802541c
 80061c0:	58025430 	.word	0x58025430
 80061c4:	58025444 	.word	0x58025444
 80061c8:	58025458 	.word	0x58025458
 80061cc:	5802546c 	.word	0x5802546c
 80061d0:	58025480 	.word	0x58025480
 80061d4:	58025494 	.word	0x58025494
 80061d8:	2300      	movs	r3, #0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d028      	beq.n	8006230 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80061ec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061f2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061f8:	f003 031f 	and.w	r3, r3, #31
 80061fc:	2201      	movs	r2, #1
 80061fe:	409a      	lsls	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800620c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00c      	beq.n	8006230 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006220:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006224:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800622e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006244:	2b00      	cmp	r3, #0
 8006246:	d003      	beq.n	8006250 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop

0800625c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b08a      	sub	sp, #40	@ 0x28
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006268:	4b67      	ldr	r3, [pc, #412]	@ (8006408 <HAL_DMA_IRQHandler+0x1ac>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a67      	ldr	r2, [pc, #412]	@ (800640c <HAL_DMA_IRQHandler+0x1b0>)
 800626e:	fba2 2303 	umull	r2, r3, r2, r3
 8006272:	0a9b      	lsrs	r3, r3, #10
 8006274:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800627a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006280:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006282:	6a3b      	ldr	r3, [r7, #32]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a5f      	ldr	r2, [pc, #380]	@ (8006410 <HAL_DMA_IRQHandler+0x1b4>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d04a      	beq.n	800632e <HAL_DMA_IRQHandler+0xd2>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a5d      	ldr	r2, [pc, #372]	@ (8006414 <HAL_DMA_IRQHandler+0x1b8>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d045      	beq.n	800632e <HAL_DMA_IRQHandler+0xd2>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a5c      	ldr	r2, [pc, #368]	@ (8006418 <HAL_DMA_IRQHandler+0x1bc>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d040      	beq.n	800632e <HAL_DMA_IRQHandler+0xd2>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a5a      	ldr	r2, [pc, #360]	@ (800641c <HAL_DMA_IRQHandler+0x1c0>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d03b      	beq.n	800632e <HAL_DMA_IRQHandler+0xd2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a59      	ldr	r2, [pc, #356]	@ (8006420 <HAL_DMA_IRQHandler+0x1c4>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d036      	beq.n	800632e <HAL_DMA_IRQHandler+0xd2>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a57      	ldr	r2, [pc, #348]	@ (8006424 <HAL_DMA_IRQHandler+0x1c8>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d031      	beq.n	800632e <HAL_DMA_IRQHandler+0xd2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a56      	ldr	r2, [pc, #344]	@ (8006428 <HAL_DMA_IRQHandler+0x1cc>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d02c      	beq.n	800632e <HAL_DMA_IRQHandler+0xd2>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a54      	ldr	r2, [pc, #336]	@ (800642c <HAL_DMA_IRQHandler+0x1d0>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d027      	beq.n	800632e <HAL_DMA_IRQHandler+0xd2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a53      	ldr	r2, [pc, #332]	@ (8006430 <HAL_DMA_IRQHandler+0x1d4>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d022      	beq.n	800632e <HAL_DMA_IRQHandler+0xd2>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a51      	ldr	r2, [pc, #324]	@ (8006434 <HAL_DMA_IRQHandler+0x1d8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d01d      	beq.n	800632e <HAL_DMA_IRQHandler+0xd2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a50      	ldr	r2, [pc, #320]	@ (8006438 <HAL_DMA_IRQHandler+0x1dc>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d018      	beq.n	800632e <HAL_DMA_IRQHandler+0xd2>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a4e      	ldr	r2, [pc, #312]	@ (800643c <HAL_DMA_IRQHandler+0x1e0>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d013      	beq.n	800632e <HAL_DMA_IRQHandler+0xd2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a4d      	ldr	r2, [pc, #308]	@ (8006440 <HAL_DMA_IRQHandler+0x1e4>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d00e      	beq.n	800632e <HAL_DMA_IRQHandler+0xd2>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a4b      	ldr	r2, [pc, #300]	@ (8006444 <HAL_DMA_IRQHandler+0x1e8>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d009      	beq.n	800632e <HAL_DMA_IRQHandler+0xd2>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a4a      	ldr	r2, [pc, #296]	@ (8006448 <HAL_DMA_IRQHandler+0x1ec>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d004      	beq.n	800632e <HAL_DMA_IRQHandler+0xd2>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a48      	ldr	r2, [pc, #288]	@ (800644c <HAL_DMA_IRQHandler+0x1f0>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d101      	bne.n	8006332 <HAL_DMA_IRQHandler+0xd6>
 800632e:	2301      	movs	r3, #1
 8006330:	e000      	b.n	8006334 <HAL_DMA_IRQHandler+0xd8>
 8006332:	2300      	movs	r3, #0
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 842b 	beq.w	8006b90 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800633e:	f003 031f 	and.w	r3, r3, #31
 8006342:	2208      	movs	r2, #8
 8006344:	409a      	lsls	r2, r3
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	4013      	ands	r3, r2
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 80a2 	beq.w	8006494 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a2e      	ldr	r2, [pc, #184]	@ (8006410 <HAL_DMA_IRQHandler+0x1b4>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d04a      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x194>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a2d      	ldr	r2, [pc, #180]	@ (8006414 <HAL_DMA_IRQHandler+0x1b8>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d045      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x194>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a2b      	ldr	r2, [pc, #172]	@ (8006418 <HAL_DMA_IRQHandler+0x1bc>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d040      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x194>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a2a      	ldr	r2, [pc, #168]	@ (800641c <HAL_DMA_IRQHandler+0x1c0>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d03b      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x194>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a28      	ldr	r2, [pc, #160]	@ (8006420 <HAL_DMA_IRQHandler+0x1c4>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d036      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x194>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a27      	ldr	r2, [pc, #156]	@ (8006424 <HAL_DMA_IRQHandler+0x1c8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d031      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x194>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a25      	ldr	r2, [pc, #148]	@ (8006428 <HAL_DMA_IRQHandler+0x1cc>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d02c      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x194>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a24      	ldr	r2, [pc, #144]	@ (800642c <HAL_DMA_IRQHandler+0x1d0>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d027      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x194>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a22      	ldr	r2, [pc, #136]	@ (8006430 <HAL_DMA_IRQHandler+0x1d4>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d022      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x194>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a21      	ldr	r2, [pc, #132]	@ (8006434 <HAL_DMA_IRQHandler+0x1d8>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d01d      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x194>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a1f      	ldr	r2, [pc, #124]	@ (8006438 <HAL_DMA_IRQHandler+0x1dc>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d018      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x194>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a1e      	ldr	r2, [pc, #120]	@ (800643c <HAL_DMA_IRQHandler+0x1e0>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d013      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x194>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a1c      	ldr	r2, [pc, #112]	@ (8006440 <HAL_DMA_IRQHandler+0x1e4>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d00e      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x194>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a1b      	ldr	r2, [pc, #108]	@ (8006444 <HAL_DMA_IRQHandler+0x1e8>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d009      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x194>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a19      	ldr	r2, [pc, #100]	@ (8006448 <HAL_DMA_IRQHandler+0x1ec>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d004      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x194>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a18      	ldr	r2, [pc, #96]	@ (800644c <HAL_DMA_IRQHandler+0x1f0>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d12f      	bne.n	8006450 <HAL_DMA_IRQHandler+0x1f4>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0304 	and.w	r3, r3, #4
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	bf14      	ite	ne
 80063fe:	2301      	movne	r3, #1
 8006400:	2300      	moveq	r3, #0
 8006402:	b2db      	uxtb	r3, r3
 8006404:	e02e      	b.n	8006464 <HAL_DMA_IRQHandler+0x208>
 8006406:	bf00      	nop
 8006408:	24000004 	.word	0x24000004
 800640c:	1b4e81b5 	.word	0x1b4e81b5
 8006410:	40020010 	.word	0x40020010
 8006414:	40020028 	.word	0x40020028
 8006418:	40020040 	.word	0x40020040
 800641c:	40020058 	.word	0x40020058
 8006420:	40020070 	.word	0x40020070
 8006424:	40020088 	.word	0x40020088
 8006428:	400200a0 	.word	0x400200a0
 800642c:	400200b8 	.word	0x400200b8
 8006430:	40020410 	.word	0x40020410
 8006434:	40020428 	.word	0x40020428
 8006438:	40020440 	.word	0x40020440
 800643c:	40020458 	.word	0x40020458
 8006440:	40020470 	.word	0x40020470
 8006444:	40020488 	.word	0x40020488
 8006448:	400204a0 	.word	0x400204a0
 800644c:	400204b8 	.word	0x400204b8
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0308 	and.w	r3, r3, #8
 800645a:	2b00      	cmp	r3, #0
 800645c:	bf14      	ite	ne
 800645e:	2301      	movne	r3, #1
 8006460:	2300      	moveq	r3, #0
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b00      	cmp	r3, #0
 8006466:	d015      	beq.n	8006494 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 0204 	bic.w	r2, r2, #4
 8006476:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800647c:	f003 031f 	and.w	r3, r3, #31
 8006480:	2208      	movs	r2, #8
 8006482:	409a      	lsls	r2, r3
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800648c:	f043 0201 	orr.w	r2, r3, #1
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006498:	f003 031f 	and.w	r3, r3, #31
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	fa22 f303 	lsr.w	r3, r2, r3
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d06e      	beq.n	8006588 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a69      	ldr	r2, [pc, #420]	@ (8006654 <HAL_DMA_IRQHandler+0x3f8>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d04a      	beq.n	800654a <HAL_DMA_IRQHandler+0x2ee>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a67      	ldr	r2, [pc, #412]	@ (8006658 <HAL_DMA_IRQHandler+0x3fc>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d045      	beq.n	800654a <HAL_DMA_IRQHandler+0x2ee>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a66      	ldr	r2, [pc, #408]	@ (800665c <HAL_DMA_IRQHandler+0x400>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d040      	beq.n	800654a <HAL_DMA_IRQHandler+0x2ee>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a64      	ldr	r2, [pc, #400]	@ (8006660 <HAL_DMA_IRQHandler+0x404>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d03b      	beq.n	800654a <HAL_DMA_IRQHandler+0x2ee>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a63      	ldr	r2, [pc, #396]	@ (8006664 <HAL_DMA_IRQHandler+0x408>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d036      	beq.n	800654a <HAL_DMA_IRQHandler+0x2ee>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a61      	ldr	r2, [pc, #388]	@ (8006668 <HAL_DMA_IRQHandler+0x40c>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d031      	beq.n	800654a <HAL_DMA_IRQHandler+0x2ee>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a60      	ldr	r2, [pc, #384]	@ (800666c <HAL_DMA_IRQHandler+0x410>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d02c      	beq.n	800654a <HAL_DMA_IRQHandler+0x2ee>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a5e      	ldr	r2, [pc, #376]	@ (8006670 <HAL_DMA_IRQHandler+0x414>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d027      	beq.n	800654a <HAL_DMA_IRQHandler+0x2ee>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a5d      	ldr	r2, [pc, #372]	@ (8006674 <HAL_DMA_IRQHandler+0x418>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d022      	beq.n	800654a <HAL_DMA_IRQHandler+0x2ee>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a5b      	ldr	r2, [pc, #364]	@ (8006678 <HAL_DMA_IRQHandler+0x41c>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d01d      	beq.n	800654a <HAL_DMA_IRQHandler+0x2ee>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a5a      	ldr	r2, [pc, #360]	@ (800667c <HAL_DMA_IRQHandler+0x420>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d018      	beq.n	800654a <HAL_DMA_IRQHandler+0x2ee>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a58      	ldr	r2, [pc, #352]	@ (8006680 <HAL_DMA_IRQHandler+0x424>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d013      	beq.n	800654a <HAL_DMA_IRQHandler+0x2ee>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a57      	ldr	r2, [pc, #348]	@ (8006684 <HAL_DMA_IRQHandler+0x428>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d00e      	beq.n	800654a <HAL_DMA_IRQHandler+0x2ee>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a55      	ldr	r2, [pc, #340]	@ (8006688 <HAL_DMA_IRQHandler+0x42c>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d009      	beq.n	800654a <HAL_DMA_IRQHandler+0x2ee>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a54      	ldr	r2, [pc, #336]	@ (800668c <HAL_DMA_IRQHandler+0x430>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d004      	beq.n	800654a <HAL_DMA_IRQHandler+0x2ee>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a52      	ldr	r2, [pc, #328]	@ (8006690 <HAL_DMA_IRQHandler+0x434>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d10a      	bne.n	8006560 <HAL_DMA_IRQHandler+0x304>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	695b      	ldr	r3, [r3, #20]
 8006550:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006554:	2b00      	cmp	r3, #0
 8006556:	bf14      	ite	ne
 8006558:	2301      	movne	r3, #1
 800655a:	2300      	moveq	r3, #0
 800655c:	b2db      	uxtb	r3, r3
 800655e:	e003      	b.n	8006568 <HAL_DMA_IRQHandler+0x30c>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2300      	movs	r3, #0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00d      	beq.n	8006588 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006570:	f003 031f 	and.w	r3, r3, #31
 8006574:	2201      	movs	r2, #1
 8006576:	409a      	lsls	r2, r3
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006580:	f043 0202 	orr.w	r2, r3, #2
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800658c:	f003 031f 	and.w	r3, r3, #31
 8006590:	2204      	movs	r2, #4
 8006592:	409a      	lsls	r2, r3
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	4013      	ands	r3, r2
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 808f 	beq.w	80066bc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a2c      	ldr	r2, [pc, #176]	@ (8006654 <HAL_DMA_IRQHandler+0x3f8>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d04a      	beq.n	800663e <HAL_DMA_IRQHandler+0x3e2>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a2a      	ldr	r2, [pc, #168]	@ (8006658 <HAL_DMA_IRQHandler+0x3fc>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d045      	beq.n	800663e <HAL_DMA_IRQHandler+0x3e2>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a29      	ldr	r2, [pc, #164]	@ (800665c <HAL_DMA_IRQHandler+0x400>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d040      	beq.n	800663e <HAL_DMA_IRQHandler+0x3e2>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a27      	ldr	r2, [pc, #156]	@ (8006660 <HAL_DMA_IRQHandler+0x404>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d03b      	beq.n	800663e <HAL_DMA_IRQHandler+0x3e2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a26      	ldr	r2, [pc, #152]	@ (8006664 <HAL_DMA_IRQHandler+0x408>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d036      	beq.n	800663e <HAL_DMA_IRQHandler+0x3e2>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a24      	ldr	r2, [pc, #144]	@ (8006668 <HAL_DMA_IRQHandler+0x40c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d031      	beq.n	800663e <HAL_DMA_IRQHandler+0x3e2>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a23      	ldr	r2, [pc, #140]	@ (800666c <HAL_DMA_IRQHandler+0x410>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d02c      	beq.n	800663e <HAL_DMA_IRQHandler+0x3e2>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a21      	ldr	r2, [pc, #132]	@ (8006670 <HAL_DMA_IRQHandler+0x414>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d027      	beq.n	800663e <HAL_DMA_IRQHandler+0x3e2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a20      	ldr	r2, [pc, #128]	@ (8006674 <HAL_DMA_IRQHandler+0x418>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d022      	beq.n	800663e <HAL_DMA_IRQHandler+0x3e2>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a1e      	ldr	r2, [pc, #120]	@ (8006678 <HAL_DMA_IRQHandler+0x41c>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d01d      	beq.n	800663e <HAL_DMA_IRQHandler+0x3e2>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a1d      	ldr	r2, [pc, #116]	@ (800667c <HAL_DMA_IRQHandler+0x420>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d018      	beq.n	800663e <HAL_DMA_IRQHandler+0x3e2>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a1b      	ldr	r2, [pc, #108]	@ (8006680 <HAL_DMA_IRQHandler+0x424>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d013      	beq.n	800663e <HAL_DMA_IRQHandler+0x3e2>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a1a      	ldr	r2, [pc, #104]	@ (8006684 <HAL_DMA_IRQHandler+0x428>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d00e      	beq.n	800663e <HAL_DMA_IRQHandler+0x3e2>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a18      	ldr	r2, [pc, #96]	@ (8006688 <HAL_DMA_IRQHandler+0x42c>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d009      	beq.n	800663e <HAL_DMA_IRQHandler+0x3e2>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a17      	ldr	r2, [pc, #92]	@ (800668c <HAL_DMA_IRQHandler+0x430>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d004      	beq.n	800663e <HAL_DMA_IRQHandler+0x3e2>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a15      	ldr	r2, [pc, #84]	@ (8006690 <HAL_DMA_IRQHandler+0x434>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d12a      	bne.n	8006694 <HAL_DMA_IRQHandler+0x438>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b00      	cmp	r3, #0
 800664a:	bf14      	ite	ne
 800664c:	2301      	movne	r3, #1
 800664e:	2300      	moveq	r3, #0
 8006650:	b2db      	uxtb	r3, r3
 8006652:	e023      	b.n	800669c <HAL_DMA_IRQHandler+0x440>
 8006654:	40020010 	.word	0x40020010
 8006658:	40020028 	.word	0x40020028
 800665c:	40020040 	.word	0x40020040
 8006660:	40020058 	.word	0x40020058
 8006664:	40020070 	.word	0x40020070
 8006668:	40020088 	.word	0x40020088
 800666c:	400200a0 	.word	0x400200a0
 8006670:	400200b8 	.word	0x400200b8
 8006674:	40020410 	.word	0x40020410
 8006678:	40020428 	.word	0x40020428
 800667c:	40020440 	.word	0x40020440
 8006680:	40020458 	.word	0x40020458
 8006684:	40020470 	.word	0x40020470
 8006688:	40020488 	.word	0x40020488
 800668c:	400204a0 	.word	0x400204a0
 8006690:	400204b8 	.word	0x400204b8
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2300      	movs	r3, #0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00d      	beq.n	80066bc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066a4:	f003 031f 	and.w	r3, r3, #31
 80066a8:	2204      	movs	r2, #4
 80066aa:	409a      	lsls	r2, r3
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b4:	f043 0204 	orr.w	r2, r3, #4
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066c0:	f003 031f 	and.w	r3, r3, #31
 80066c4:	2210      	movs	r2, #16
 80066c6:	409a      	lsls	r2, r3
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	4013      	ands	r3, r2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 80a6 	beq.w	800681e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a85      	ldr	r2, [pc, #532]	@ (80068ec <HAL_DMA_IRQHandler+0x690>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d04a      	beq.n	8006772 <HAL_DMA_IRQHandler+0x516>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a83      	ldr	r2, [pc, #524]	@ (80068f0 <HAL_DMA_IRQHandler+0x694>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d045      	beq.n	8006772 <HAL_DMA_IRQHandler+0x516>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a82      	ldr	r2, [pc, #520]	@ (80068f4 <HAL_DMA_IRQHandler+0x698>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d040      	beq.n	8006772 <HAL_DMA_IRQHandler+0x516>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a80      	ldr	r2, [pc, #512]	@ (80068f8 <HAL_DMA_IRQHandler+0x69c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d03b      	beq.n	8006772 <HAL_DMA_IRQHandler+0x516>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a7f      	ldr	r2, [pc, #508]	@ (80068fc <HAL_DMA_IRQHandler+0x6a0>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d036      	beq.n	8006772 <HAL_DMA_IRQHandler+0x516>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a7d      	ldr	r2, [pc, #500]	@ (8006900 <HAL_DMA_IRQHandler+0x6a4>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d031      	beq.n	8006772 <HAL_DMA_IRQHandler+0x516>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a7c      	ldr	r2, [pc, #496]	@ (8006904 <HAL_DMA_IRQHandler+0x6a8>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d02c      	beq.n	8006772 <HAL_DMA_IRQHandler+0x516>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a7a      	ldr	r2, [pc, #488]	@ (8006908 <HAL_DMA_IRQHandler+0x6ac>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d027      	beq.n	8006772 <HAL_DMA_IRQHandler+0x516>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a79      	ldr	r2, [pc, #484]	@ (800690c <HAL_DMA_IRQHandler+0x6b0>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d022      	beq.n	8006772 <HAL_DMA_IRQHandler+0x516>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a77      	ldr	r2, [pc, #476]	@ (8006910 <HAL_DMA_IRQHandler+0x6b4>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d01d      	beq.n	8006772 <HAL_DMA_IRQHandler+0x516>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a76      	ldr	r2, [pc, #472]	@ (8006914 <HAL_DMA_IRQHandler+0x6b8>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d018      	beq.n	8006772 <HAL_DMA_IRQHandler+0x516>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a74      	ldr	r2, [pc, #464]	@ (8006918 <HAL_DMA_IRQHandler+0x6bc>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d013      	beq.n	8006772 <HAL_DMA_IRQHandler+0x516>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a73      	ldr	r2, [pc, #460]	@ (800691c <HAL_DMA_IRQHandler+0x6c0>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d00e      	beq.n	8006772 <HAL_DMA_IRQHandler+0x516>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a71      	ldr	r2, [pc, #452]	@ (8006920 <HAL_DMA_IRQHandler+0x6c4>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d009      	beq.n	8006772 <HAL_DMA_IRQHandler+0x516>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a70      	ldr	r2, [pc, #448]	@ (8006924 <HAL_DMA_IRQHandler+0x6c8>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d004      	beq.n	8006772 <HAL_DMA_IRQHandler+0x516>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a6e      	ldr	r2, [pc, #440]	@ (8006928 <HAL_DMA_IRQHandler+0x6cc>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d10a      	bne.n	8006788 <HAL_DMA_IRQHandler+0x52c>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0308 	and.w	r3, r3, #8
 800677c:	2b00      	cmp	r3, #0
 800677e:	bf14      	ite	ne
 8006780:	2301      	movne	r3, #1
 8006782:	2300      	moveq	r3, #0
 8006784:	b2db      	uxtb	r3, r3
 8006786:	e009      	b.n	800679c <HAL_DMA_IRQHandler+0x540>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0304 	and.w	r3, r3, #4
 8006792:	2b00      	cmp	r3, #0
 8006794:	bf14      	ite	ne
 8006796:	2301      	movne	r3, #1
 8006798:	2300      	moveq	r3, #0
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	d03e      	beq.n	800681e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067a4:	f003 031f 	and.w	r3, r3, #31
 80067a8:	2210      	movs	r2, #16
 80067aa:	409a      	lsls	r2, r3
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d018      	beq.n	80067f0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d108      	bne.n	80067de <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d024      	beq.n	800681e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	4798      	blx	r3
 80067dc:	e01f      	b.n	800681e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d01b      	beq.n	800681e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	4798      	blx	r3
 80067ee:	e016      	b.n	800681e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d107      	bne.n	800680e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f022 0208 	bic.w	r2, r2, #8
 800680c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006822:	f003 031f 	and.w	r3, r3, #31
 8006826:	2220      	movs	r2, #32
 8006828:	409a      	lsls	r2, r3
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	4013      	ands	r3, r2
 800682e:	2b00      	cmp	r3, #0
 8006830:	f000 8110 	beq.w	8006a54 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a2c      	ldr	r2, [pc, #176]	@ (80068ec <HAL_DMA_IRQHandler+0x690>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d04a      	beq.n	80068d4 <HAL_DMA_IRQHandler+0x678>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a2b      	ldr	r2, [pc, #172]	@ (80068f0 <HAL_DMA_IRQHandler+0x694>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d045      	beq.n	80068d4 <HAL_DMA_IRQHandler+0x678>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a29      	ldr	r2, [pc, #164]	@ (80068f4 <HAL_DMA_IRQHandler+0x698>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d040      	beq.n	80068d4 <HAL_DMA_IRQHandler+0x678>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a28      	ldr	r2, [pc, #160]	@ (80068f8 <HAL_DMA_IRQHandler+0x69c>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d03b      	beq.n	80068d4 <HAL_DMA_IRQHandler+0x678>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a26      	ldr	r2, [pc, #152]	@ (80068fc <HAL_DMA_IRQHandler+0x6a0>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d036      	beq.n	80068d4 <HAL_DMA_IRQHandler+0x678>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a25      	ldr	r2, [pc, #148]	@ (8006900 <HAL_DMA_IRQHandler+0x6a4>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d031      	beq.n	80068d4 <HAL_DMA_IRQHandler+0x678>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a23      	ldr	r2, [pc, #140]	@ (8006904 <HAL_DMA_IRQHandler+0x6a8>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d02c      	beq.n	80068d4 <HAL_DMA_IRQHandler+0x678>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a22      	ldr	r2, [pc, #136]	@ (8006908 <HAL_DMA_IRQHandler+0x6ac>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d027      	beq.n	80068d4 <HAL_DMA_IRQHandler+0x678>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a20      	ldr	r2, [pc, #128]	@ (800690c <HAL_DMA_IRQHandler+0x6b0>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d022      	beq.n	80068d4 <HAL_DMA_IRQHandler+0x678>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a1f      	ldr	r2, [pc, #124]	@ (8006910 <HAL_DMA_IRQHandler+0x6b4>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d01d      	beq.n	80068d4 <HAL_DMA_IRQHandler+0x678>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a1d      	ldr	r2, [pc, #116]	@ (8006914 <HAL_DMA_IRQHandler+0x6b8>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d018      	beq.n	80068d4 <HAL_DMA_IRQHandler+0x678>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a1c      	ldr	r2, [pc, #112]	@ (8006918 <HAL_DMA_IRQHandler+0x6bc>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d013      	beq.n	80068d4 <HAL_DMA_IRQHandler+0x678>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a1a      	ldr	r2, [pc, #104]	@ (800691c <HAL_DMA_IRQHandler+0x6c0>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d00e      	beq.n	80068d4 <HAL_DMA_IRQHandler+0x678>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a19      	ldr	r2, [pc, #100]	@ (8006920 <HAL_DMA_IRQHandler+0x6c4>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d009      	beq.n	80068d4 <HAL_DMA_IRQHandler+0x678>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a17      	ldr	r2, [pc, #92]	@ (8006924 <HAL_DMA_IRQHandler+0x6c8>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d004      	beq.n	80068d4 <HAL_DMA_IRQHandler+0x678>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a16      	ldr	r2, [pc, #88]	@ (8006928 <HAL_DMA_IRQHandler+0x6cc>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d12b      	bne.n	800692c <HAL_DMA_IRQHandler+0x6d0>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0310 	and.w	r3, r3, #16
 80068de:	2b00      	cmp	r3, #0
 80068e0:	bf14      	ite	ne
 80068e2:	2301      	movne	r3, #1
 80068e4:	2300      	moveq	r3, #0
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	e02a      	b.n	8006940 <HAL_DMA_IRQHandler+0x6e4>
 80068ea:	bf00      	nop
 80068ec:	40020010 	.word	0x40020010
 80068f0:	40020028 	.word	0x40020028
 80068f4:	40020040 	.word	0x40020040
 80068f8:	40020058 	.word	0x40020058
 80068fc:	40020070 	.word	0x40020070
 8006900:	40020088 	.word	0x40020088
 8006904:	400200a0 	.word	0x400200a0
 8006908:	400200b8 	.word	0x400200b8
 800690c:	40020410 	.word	0x40020410
 8006910:	40020428 	.word	0x40020428
 8006914:	40020440 	.word	0x40020440
 8006918:	40020458 	.word	0x40020458
 800691c:	40020470 	.word	0x40020470
 8006920:	40020488 	.word	0x40020488
 8006924:	400204a0 	.word	0x400204a0
 8006928:	400204b8 	.word	0x400204b8
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0302 	and.w	r3, r3, #2
 8006936:	2b00      	cmp	r3, #0
 8006938:	bf14      	ite	ne
 800693a:	2301      	movne	r3, #1
 800693c:	2300      	moveq	r3, #0
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	f000 8087 	beq.w	8006a54 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800694a:	f003 031f 	and.w	r3, r3, #31
 800694e:	2220      	movs	r2, #32
 8006950:	409a      	lsls	r2, r3
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b04      	cmp	r3, #4
 8006960:	d139      	bne.n	80069d6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 0216 	bic.w	r2, r2, #22
 8006970:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	695a      	ldr	r2, [r3, #20]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006980:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006986:	2b00      	cmp	r3, #0
 8006988:	d103      	bne.n	8006992 <HAL_DMA_IRQHandler+0x736>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800698e:	2b00      	cmp	r3, #0
 8006990:	d007      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f022 0208 	bic.w	r2, r2, #8
 80069a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069a6:	f003 031f 	and.w	r3, r3, #31
 80069aa:	223f      	movs	r2, #63	@ 0x3f
 80069ac:	409a      	lsls	r2, r3
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 834a 	beq.w	8007060 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	4798      	blx	r3
          }
          return;
 80069d4:	e344      	b.n	8007060 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d018      	beq.n	8006a16 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d108      	bne.n	8006a04 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d02c      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	4798      	blx	r3
 8006a02:	e027      	b.n	8006a54 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d023      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	4798      	blx	r3
 8006a14:	e01e      	b.n	8006a54 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10f      	bne.n	8006a44 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f022 0210 	bic.w	r2, r2, #16
 8006a32:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 8306 	beq.w	800706a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 8088 	beq.w	8006b7c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2204      	movs	r2, #4
 8006a70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a7a      	ldr	r2, [pc, #488]	@ (8006c64 <HAL_DMA_IRQHandler+0xa08>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d04a      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x8b8>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a79      	ldr	r2, [pc, #484]	@ (8006c68 <HAL_DMA_IRQHandler+0xa0c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d045      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x8b8>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a77      	ldr	r2, [pc, #476]	@ (8006c6c <HAL_DMA_IRQHandler+0xa10>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d040      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x8b8>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a76      	ldr	r2, [pc, #472]	@ (8006c70 <HAL_DMA_IRQHandler+0xa14>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d03b      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x8b8>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a74      	ldr	r2, [pc, #464]	@ (8006c74 <HAL_DMA_IRQHandler+0xa18>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d036      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x8b8>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a73      	ldr	r2, [pc, #460]	@ (8006c78 <HAL_DMA_IRQHandler+0xa1c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d031      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x8b8>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a71      	ldr	r2, [pc, #452]	@ (8006c7c <HAL_DMA_IRQHandler+0xa20>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d02c      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x8b8>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a70      	ldr	r2, [pc, #448]	@ (8006c80 <HAL_DMA_IRQHandler+0xa24>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d027      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x8b8>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a6e      	ldr	r2, [pc, #440]	@ (8006c84 <HAL_DMA_IRQHandler+0xa28>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d022      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x8b8>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a6d      	ldr	r2, [pc, #436]	@ (8006c88 <HAL_DMA_IRQHandler+0xa2c>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d01d      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x8b8>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a6b      	ldr	r2, [pc, #428]	@ (8006c8c <HAL_DMA_IRQHandler+0xa30>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d018      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x8b8>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a6a      	ldr	r2, [pc, #424]	@ (8006c90 <HAL_DMA_IRQHandler+0xa34>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d013      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x8b8>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a68      	ldr	r2, [pc, #416]	@ (8006c94 <HAL_DMA_IRQHandler+0xa38>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d00e      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x8b8>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a67      	ldr	r2, [pc, #412]	@ (8006c98 <HAL_DMA_IRQHandler+0xa3c>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d009      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x8b8>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a65      	ldr	r2, [pc, #404]	@ (8006c9c <HAL_DMA_IRQHandler+0xa40>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d004      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x8b8>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a64      	ldr	r2, [pc, #400]	@ (8006ca0 <HAL_DMA_IRQHandler+0xa44>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d108      	bne.n	8006b26 <HAL_DMA_IRQHandler+0x8ca>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f022 0201 	bic.w	r2, r2, #1
 8006b22:	601a      	str	r2, [r3, #0]
 8006b24:	e007      	b.n	8006b36 <HAL_DMA_IRQHandler+0x8da>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f022 0201 	bic.w	r2, r2, #1
 8006b34:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	60fb      	str	r3, [r7, #12]
 8006b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d307      	bcc.n	8006b52 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1f2      	bne.n	8006b36 <HAL_DMA_IRQHandler+0x8da>
 8006b50:	e000      	b.n	8006b54 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006b52:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d004      	beq.n	8006b6c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2203      	movs	r2, #3
 8006b66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006b6a:	e003      	b.n	8006b74 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f000 8272 	beq.w	800706a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	4798      	blx	r3
 8006b8e:	e26c      	b.n	800706a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a43      	ldr	r2, [pc, #268]	@ (8006ca4 <HAL_DMA_IRQHandler+0xa48>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d022      	beq.n	8006be0 <HAL_DMA_IRQHandler+0x984>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a42      	ldr	r2, [pc, #264]	@ (8006ca8 <HAL_DMA_IRQHandler+0xa4c>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d01d      	beq.n	8006be0 <HAL_DMA_IRQHandler+0x984>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a40      	ldr	r2, [pc, #256]	@ (8006cac <HAL_DMA_IRQHandler+0xa50>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d018      	beq.n	8006be0 <HAL_DMA_IRQHandler+0x984>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a3f      	ldr	r2, [pc, #252]	@ (8006cb0 <HAL_DMA_IRQHandler+0xa54>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d013      	beq.n	8006be0 <HAL_DMA_IRQHandler+0x984>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a3d      	ldr	r2, [pc, #244]	@ (8006cb4 <HAL_DMA_IRQHandler+0xa58>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d00e      	beq.n	8006be0 <HAL_DMA_IRQHandler+0x984>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a3c      	ldr	r2, [pc, #240]	@ (8006cb8 <HAL_DMA_IRQHandler+0xa5c>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d009      	beq.n	8006be0 <HAL_DMA_IRQHandler+0x984>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a3a      	ldr	r2, [pc, #232]	@ (8006cbc <HAL_DMA_IRQHandler+0xa60>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d004      	beq.n	8006be0 <HAL_DMA_IRQHandler+0x984>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a39      	ldr	r2, [pc, #228]	@ (8006cc0 <HAL_DMA_IRQHandler+0xa64>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d101      	bne.n	8006be4 <HAL_DMA_IRQHandler+0x988>
 8006be0:	2301      	movs	r3, #1
 8006be2:	e000      	b.n	8006be6 <HAL_DMA_IRQHandler+0x98a>
 8006be4:	2300      	movs	r3, #0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 823f 	beq.w	800706a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bf8:	f003 031f 	and.w	r3, r3, #31
 8006bfc:	2204      	movs	r2, #4
 8006bfe:	409a      	lsls	r2, r3
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	4013      	ands	r3, r2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f000 80cd 	beq.w	8006da4 <HAL_DMA_IRQHandler+0xb48>
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	f003 0304 	and.w	r3, r3, #4
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 80c7 	beq.w	8006da4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c1a:	f003 031f 	and.w	r3, r3, #31
 8006c1e:	2204      	movs	r2, #4
 8006c20:	409a      	lsls	r2, r3
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d049      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d109      	bne.n	8006c4e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f000 8210 	beq.w	8007064 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c4c:	e20a      	b.n	8007064 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f000 8206 	beq.w	8007064 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c60:	e200      	b.n	8007064 <HAL_DMA_IRQHandler+0xe08>
 8006c62:	bf00      	nop
 8006c64:	40020010 	.word	0x40020010
 8006c68:	40020028 	.word	0x40020028
 8006c6c:	40020040 	.word	0x40020040
 8006c70:	40020058 	.word	0x40020058
 8006c74:	40020070 	.word	0x40020070
 8006c78:	40020088 	.word	0x40020088
 8006c7c:	400200a0 	.word	0x400200a0
 8006c80:	400200b8 	.word	0x400200b8
 8006c84:	40020410 	.word	0x40020410
 8006c88:	40020428 	.word	0x40020428
 8006c8c:	40020440 	.word	0x40020440
 8006c90:	40020458 	.word	0x40020458
 8006c94:	40020470 	.word	0x40020470
 8006c98:	40020488 	.word	0x40020488
 8006c9c:	400204a0 	.word	0x400204a0
 8006ca0:	400204b8 	.word	0x400204b8
 8006ca4:	58025408 	.word	0x58025408
 8006ca8:	5802541c 	.word	0x5802541c
 8006cac:	58025430 	.word	0x58025430
 8006cb0:	58025444 	.word	0x58025444
 8006cb4:	58025458 	.word	0x58025458
 8006cb8:	5802546c 	.word	0x5802546c
 8006cbc:	58025480 	.word	0x58025480
 8006cc0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	f003 0320 	and.w	r3, r3, #32
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d160      	bne.n	8006d90 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a7f      	ldr	r2, [pc, #508]	@ (8006ed0 <HAL_DMA_IRQHandler+0xc74>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d04a      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xb12>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a7d      	ldr	r2, [pc, #500]	@ (8006ed4 <HAL_DMA_IRQHandler+0xc78>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d045      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xb12>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a7c      	ldr	r2, [pc, #496]	@ (8006ed8 <HAL_DMA_IRQHandler+0xc7c>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d040      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xb12>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a7a      	ldr	r2, [pc, #488]	@ (8006edc <HAL_DMA_IRQHandler+0xc80>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d03b      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xb12>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a79      	ldr	r2, [pc, #484]	@ (8006ee0 <HAL_DMA_IRQHandler+0xc84>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d036      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xb12>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a77      	ldr	r2, [pc, #476]	@ (8006ee4 <HAL_DMA_IRQHandler+0xc88>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d031      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xb12>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a76      	ldr	r2, [pc, #472]	@ (8006ee8 <HAL_DMA_IRQHandler+0xc8c>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d02c      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xb12>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a74      	ldr	r2, [pc, #464]	@ (8006eec <HAL_DMA_IRQHandler+0xc90>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d027      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xb12>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a73      	ldr	r2, [pc, #460]	@ (8006ef0 <HAL_DMA_IRQHandler+0xc94>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d022      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xb12>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a71      	ldr	r2, [pc, #452]	@ (8006ef4 <HAL_DMA_IRQHandler+0xc98>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d01d      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xb12>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a70      	ldr	r2, [pc, #448]	@ (8006ef8 <HAL_DMA_IRQHandler+0xc9c>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d018      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xb12>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a6e      	ldr	r2, [pc, #440]	@ (8006efc <HAL_DMA_IRQHandler+0xca0>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d013      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xb12>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a6d      	ldr	r2, [pc, #436]	@ (8006f00 <HAL_DMA_IRQHandler+0xca4>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d00e      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xb12>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a6b      	ldr	r2, [pc, #428]	@ (8006f04 <HAL_DMA_IRQHandler+0xca8>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d009      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xb12>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a6a      	ldr	r2, [pc, #424]	@ (8006f08 <HAL_DMA_IRQHandler+0xcac>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d004      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xb12>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a68      	ldr	r2, [pc, #416]	@ (8006f0c <HAL_DMA_IRQHandler+0xcb0>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d108      	bne.n	8006d80 <HAL_DMA_IRQHandler+0xb24>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f022 0208 	bic.w	r2, r2, #8
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	e007      	b.n	8006d90 <HAL_DMA_IRQHandler+0xb34>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f022 0204 	bic.w	r2, r2, #4
 8006d8e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f000 8165 	beq.w	8007064 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006da2:	e15f      	b.n	8007064 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006da8:	f003 031f 	and.w	r3, r3, #31
 8006dac:	2202      	movs	r2, #2
 8006dae:	409a      	lsls	r2, r3
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	4013      	ands	r3, r2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f000 80c5 	beq.w	8006f44 <HAL_DMA_IRQHandler+0xce8>
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	f003 0302 	and.w	r3, r3, #2
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f000 80bf 	beq.w	8006f44 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dca:	f003 031f 	and.w	r3, r3, #31
 8006dce:	2202      	movs	r2, #2
 8006dd0:	409a      	lsls	r2, r3
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d018      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d109      	bne.n	8006dfe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f000 813a 	beq.w	8007068 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dfc:	e134      	b.n	8007068 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f000 8130 	beq.w	8007068 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e10:	e12a      	b.n	8007068 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	f003 0320 	and.w	r3, r3, #32
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f040 8089 	bne.w	8006f30 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a2b      	ldr	r2, [pc, #172]	@ (8006ed0 <HAL_DMA_IRQHandler+0xc74>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d04a      	beq.n	8006ebe <HAL_DMA_IRQHandler+0xc62>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a29      	ldr	r2, [pc, #164]	@ (8006ed4 <HAL_DMA_IRQHandler+0xc78>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d045      	beq.n	8006ebe <HAL_DMA_IRQHandler+0xc62>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a28      	ldr	r2, [pc, #160]	@ (8006ed8 <HAL_DMA_IRQHandler+0xc7c>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d040      	beq.n	8006ebe <HAL_DMA_IRQHandler+0xc62>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a26      	ldr	r2, [pc, #152]	@ (8006edc <HAL_DMA_IRQHandler+0xc80>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d03b      	beq.n	8006ebe <HAL_DMA_IRQHandler+0xc62>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a25      	ldr	r2, [pc, #148]	@ (8006ee0 <HAL_DMA_IRQHandler+0xc84>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d036      	beq.n	8006ebe <HAL_DMA_IRQHandler+0xc62>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a23      	ldr	r2, [pc, #140]	@ (8006ee4 <HAL_DMA_IRQHandler+0xc88>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d031      	beq.n	8006ebe <HAL_DMA_IRQHandler+0xc62>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a22      	ldr	r2, [pc, #136]	@ (8006ee8 <HAL_DMA_IRQHandler+0xc8c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d02c      	beq.n	8006ebe <HAL_DMA_IRQHandler+0xc62>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a20      	ldr	r2, [pc, #128]	@ (8006eec <HAL_DMA_IRQHandler+0xc90>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d027      	beq.n	8006ebe <HAL_DMA_IRQHandler+0xc62>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a1f      	ldr	r2, [pc, #124]	@ (8006ef0 <HAL_DMA_IRQHandler+0xc94>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d022      	beq.n	8006ebe <HAL_DMA_IRQHandler+0xc62>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ef4 <HAL_DMA_IRQHandler+0xc98>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d01d      	beq.n	8006ebe <HAL_DMA_IRQHandler+0xc62>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a1c      	ldr	r2, [pc, #112]	@ (8006ef8 <HAL_DMA_IRQHandler+0xc9c>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d018      	beq.n	8006ebe <HAL_DMA_IRQHandler+0xc62>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a1a      	ldr	r2, [pc, #104]	@ (8006efc <HAL_DMA_IRQHandler+0xca0>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d013      	beq.n	8006ebe <HAL_DMA_IRQHandler+0xc62>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a19      	ldr	r2, [pc, #100]	@ (8006f00 <HAL_DMA_IRQHandler+0xca4>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d00e      	beq.n	8006ebe <HAL_DMA_IRQHandler+0xc62>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a17      	ldr	r2, [pc, #92]	@ (8006f04 <HAL_DMA_IRQHandler+0xca8>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d009      	beq.n	8006ebe <HAL_DMA_IRQHandler+0xc62>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a16      	ldr	r2, [pc, #88]	@ (8006f08 <HAL_DMA_IRQHandler+0xcac>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d004      	beq.n	8006ebe <HAL_DMA_IRQHandler+0xc62>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a14      	ldr	r2, [pc, #80]	@ (8006f0c <HAL_DMA_IRQHandler+0xcb0>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d128      	bne.n	8006f10 <HAL_DMA_IRQHandler+0xcb4>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f022 0214 	bic.w	r2, r2, #20
 8006ecc:	601a      	str	r2, [r3, #0]
 8006ece:	e027      	b.n	8006f20 <HAL_DMA_IRQHandler+0xcc4>
 8006ed0:	40020010 	.word	0x40020010
 8006ed4:	40020028 	.word	0x40020028
 8006ed8:	40020040 	.word	0x40020040
 8006edc:	40020058 	.word	0x40020058
 8006ee0:	40020070 	.word	0x40020070
 8006ee4:	40020088 	.word	0x40020088
 8006ee8:	400200a0 	.word	0x400200a0
 8006eec:	400200b8 	.word	0x400200b8
 8006ef0:	40020410 	.word	0x40020410
 8006ef4:	40020428 	.word	0x40020428
 8006ef8:	40020440 	.word	0x40020440
 8006efc:	40020458 	.word	0x40020458
 8006f00:	40020470 	.word	0x40020470
 8006f04:	40020488 	.word	0x40020488
 8006f08:	400204a0 	.word	0x400204a0
 8006f0c:	400204b8 	.word	0x400204b8
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f022 020a 	bic.w	r2, r2, #10
 8006f1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 8097 	beq.w	8007068 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f42:	e091      	b.n	8007068 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f48:	f003 031f 	and.w	r3, r3, #31
 8006f4c:	2208      	movs	r2, #8
 8006f4e:	409a      	lsls	r2, r3
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	4013      	ands	r3, r2
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 8088 	beq.w	800706a <HAL_DMA_IRQHandler+0xe0e>
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	f003 0308 	and.w	r3, r3, #8
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 8082 	beq.w	800706a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a41      	ldr	r2, [pc, #260]	@ (8007070 <HAL_DMA_IRQHandler+0xe14>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d04a      	beq.n	8007006 <HAL_DMA_IRQHandler+0xdaa>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a3f      	ldr	r2, [pc, #252]	@ (8007074 <HAL_DMA_IRQHandler+0xe18>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d045      	beq.n	8007006 <HAL_DMA_IRQHandler+0xdaa>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a3e      	ldr	r2, [pc, #248]	@ (8007078 <HAL_DMA_IRQHandler+0xe1c>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d040      	beq.n	8007006 <HAL_DMA_IRQHandler+0xdaa>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a3c      	ldr	r2, [pc, #240]	@ (800707c <HAL_DMA_IRQHandler+0xe20>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d03b      	beq.n	8007006 <HAL_DMA_IRQHandler+0xdaa>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a3b      	ldr	r2, [pc, #236]	@ (8007080 <HAL_DMA_IRQHandler+0xe24>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d036      	beq.n	8007006 <HAL_DMA_IRQHandler+0xdaa>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a39      	ldr	r2, [pc, #228]	@ (8007084 <HAL_DMA_IRQHandler+0xe28>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d031      	beq.n	8007006 <HAL_DMA_IRQHandler+0xdaa>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a38      	ldr	r2, [pc, #224]	@ (8007088 <HAL_DMA_IRQHandler+0xe2c>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d02c      	beq.n	8007006 <HAL_DMA_IRQHandler+0xdaa>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a36      	ldr	r2, [pc, #216]	@ (800708c <HAL_DMA_IRQHandler+0xe30>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d027      	beq.n	8007006 <HAL_DMA_IRQHandler+0xdaa>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a35      	ldr	r2, [pc, #212]	@ (8007090 <HAL_DMA_IRQHandler+0xe34>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d022      	beq.n	8007006 <HAL_DMA_IRQHandler+0xdaa>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a33      	ldr	r2, [pc, #204]	@ (8007094 <HAL_DMA_IRQHandler+0xe38>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d01d      	beq.n	8007006 <HAL_DMA_IRQHandler+0xdaa>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a32      	ldr	r2, [pc, #200]	@ (8007098 <HAL_DMA_IRQHandler+0xe3c>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d018      	beq.n	8007006 <HAL_DMA_IRQHandler+0xdaa>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a30      	ldr	r2, [pc, #192]	@ (800709c <HAL_DMA_IRQHandler+0xe40>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d013      	beq.n	8007006 <HAL_DMA_IRQHandler+0xdaa>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a2f      	ldr	r2, [pc, #188]	@ (80070a0 <HAL_DMA_IRQHandler+0xe44>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d00e      	beq.n	8007006 <HAL_DMA_IRQHandler+0xdaa>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a2d      	ldr	r2, [pc, #180]	@ (80070a4 <HAL_DMA_IRQHandler+0xe48>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d009      	beq.n	8007006 <HAL_DMA_IRQHandler+0xdaa>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a2c      	ldr	r2, [pc, #176]	@ (80070a8 <HAL_DMA_IRQHandler+0xe4c>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d004      	beq.n	8007006 <HAL_DMA_IRQHandler+0xdaa>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a2a      	ldr	r2, [pc, #168]	@ (80070ac <HAL_DMA_IRQHandler+0xe50>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d108      	bne.n	8007018 <HAL_DMA_IRQHandler+0xdbc>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f022 021c 	bic.w	r2, r2, #28
 8007014:	601a      	str	r2, [r3, #0]
 8007016:	e007      	b.n	8007028 <HAL_DMA_IRQHandler+0xdcc>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 020e 	bic.w	r2, r2, #14
 8007026:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800702c:	f003 031f 	and.w	r3, r3, #31
 8007030:	2201      	movs	r2, #1
 8007032:	409a      	lsls	r2, r3
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007052:	2b00      	cmp	r3, #0
 8007054:	d009      	beq.n	800706a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	4798      	blx	r3
 800705e:	e004      	b.n	800706a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007060:	bf00      	nop
 8007062:	e002      	b.n	800706a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007064:	bf00      	nop
 8007066:	e000      	b.n	800706a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007068:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800706a:	3728      	adds	r7, #40	@ 0x28
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	40020010 	.word	0x40020010
 8007074:	40020028 	.word	0x40020028
 8007078:	40020040 	.word	0x40020040
 800707c:	40020058 	.word	0x40020058
 8007080:	40020070 	.word	0x40020070
 8007084:	40020088 	.word	0x40020088
 8007088:	400200a0 	.word	0x400200a0
 800708c:	400200b8 	.word	0x400200b8
 8007090:	40020410 	.word	0x40020410
 8007094:	40020428 	.word	0x40020428
 8007098:	40020440 	.word	0x40020440
 800709c:	40020458 	.word	0x40020458
 80070a0:	40020470 	.word	0x40020470
 80070a4:	40020488 	.word	0x40020488
 80070a8:	400204a0 	.word	0x400204a0
 80070ac:	400204b8 	.word	0x400204b8

080070b0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80070bc:	4618      	mov	r0, r3
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b087      	sub	sp, #28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
 80070d4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070da:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070e0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a7f      	ldr	r2, [pc, #508]	@ (80072e4 <DMA_SetConfig+0x21c>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d072      	beq.n	80071d2 <DMA_SetConfig+0x10a>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a7d      	ldr	r2, [pc, #500]	@ (80072e8 <DMA_SetConfig+0x220>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d06d      	beq.n	80071d2 <DMA_SetConfig+0x10a>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a7c      	ldr	r2, [pc, #496]	@ (80072ec <DMA_SetConfig+0x224>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d068      	beq.n	80071d2 <DMA_SetConfig+0x10a>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a7a      	ldr	r2, [pc, #488]	@ (80072f0 <DMA_SetConfig+0x228>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d063      	beq.n	80071d2 <DMA_SetConfig+0x10a>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a79      	ldr	r2, [pc, #484]	@ (80072f4 <DMA_SetConfig+0x22c>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d05e      	beq.n	80071d2 <DMA_SetConfig+0x10a>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a77      	ldr	r2, [pc, #476]	@ (80072f8 <DMA_SetConfig+0x230>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d059      	beq.n	80071d2 <DMA_SetConfig+0x10a>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a76      	ldr	r2, [pc, #472]	@ (80072fc <DMA_SetConfig+0x234>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d054      	beq.n	80071d2 <DMA_SetConfig+0x10a>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a74      	ldr	r2, [pc, #464]	@ (8007300 <DMA_SetConfig+0x238>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d04f      	beq.n	80071d2 <DMA_SetConfig+0x10a>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a73      	ldr	r2, [pc, #460]	@ (8007304 <DMA_SetConfig+0x23c>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d04a      	beq.n	80071d2 <DMA_SetConfig+0x10a>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a71      	ldr	r2, [pc, #452]	@ (8007308 <DMA_SetConfig+0x240>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d045      	beq.n	80071d2 <DMA_SetConfig+0x10a>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a70      	ldr	r2, [pc, #448]	@ (800730c <DMA_SetConfig+0x244>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d040      	beq.n	80071d2 <DMA_SetConfig+0x10a>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a6e      	ldr	r2, [pc, #440]	@ (8007310 <DMA_SetConfig+0x248>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d03b      	beq.n	80071d2 <DMA_SetConfig+0x10a>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a6d      	ldr	r2, [pc, #436]	@ (8007314 <DMA_SetConfig+0x24c>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d036      	beq.n	80071d2 <DMA_SetConfig+0x10a>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a6b      	ldr	r2, [pc, #428]	@ (8007318 <DMA_SetConfig+0x250>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d031      	beq.n	80071d2 <DMA_SetConfig+0x10a>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a6a      	ldr	r2, [pc, #424]	@ (800731c <DMA_SetConfig+0x254>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d02c      	beq.n	80071d2 <DMA_SetConfig+0x10a>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a68      	ldr	r2, [pc, #416]	@ (8007320 <DMA_SetConfig+0x258>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d027      	beq.n	80071d2 <DMA_SetConfig+0x10a>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a67      	ldr	r2, [pc, #412]	@ (8007324 <DMA_SetConfig+0x25c>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d022      	beq.n	80071d2 <DMA_SetConfig+0x10a>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a65      	ldr	r2, [pc, #404]	@ (8007328 <DMA_SetConfig+0x260>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d01d      	beq.n	80071d2 <DMA_SetConfig+0x10a>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a64      	ldr	r2, [pc, #400]	@ (800732c <DMA_SetConfig+0x264>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d018      	beq.n	80071d2 <DMA_SetConfig+0x10a>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a62      	ldr	r2, [pc, #392]	@ (8007330 <DMA_SetConfig+0x268>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d013      	beq.n	80071d2 <DMA_SetConfig+0x10a>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a61      	ldr	r2, [pc, #388]	@ (8007334 <DMA_SetConfig+0x26c>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d00e      	beq.n	80071d2 <DMA_SetConfig+0x10a>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a5f      	ldr	r2, [pc, #380]	@ (8007338 <DMA_SetConfig+0x270>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d009      	beq.n	80071d2 <DMA_SetConfig+0x10a>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a5e      	ldr	r2, [pc, #376]	@ (800733c <DMA_SetConfig+0x274>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d004      	beq.n	80071d2 <DMA_SetConfig+0x10a>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a5c      	ldr	r2, [pc, #368]	@ (8007340 <DMA_SetConfig+0x278>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d101      	bne.n	80071d6 <DMA_SetConfig+0x10e>
 80071d2:	2301      	movs	r3, #1
 80071d4:	e000      	b.n	80071d8 <DMA_SetConfig+0x110>
 80071d6:	2300      	movs	r3, #0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00d      	beq.n	80071f8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80071e4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d004      	beq.n	80071f8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80071f6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a39      	ldr	r2, [pc, #228]	@ (80072e4 <DMA_SetConfig+0x21c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d04a      	beq.n	8007298 <DMA_SetConfig+0x1d0>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a38      	ldr	r2, [pc, #224]	@ (80072e8 <DMA_SetConfig+0x220>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d045      	beq.n	8007298 <DMA_SetConfig+0x1d0>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a36      	ldr	r2, [pc, #216]	@ (80072ec <DMA_SetConfig+0x224>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d040      	beq.n	8007298 <DMA_SetConfig+0x1d0>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a35      	ldr	r2, [pc, #212]	@ (80072f0 <DMA_SetConfig+0x228>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d03b      	beq.n	8007298 <DMA_SetConfig+0x1d0>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a33      	ldr	r2, [pc, #204]	@ (80072f4 <DMA_SetConfig+0x22c>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d036      	beq.n	8007298 <DMA_SetConfig+0x1d0>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a32      	ldr	r2, [pc, #200]	@ (80072f8 <DMA_SetConfig+0x230>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d031      	beq.n	8007298 <DMA_SetConfig+0x1d0>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a30      	ldr	r2, [pc, #192]	@ (80072fc <DMA_SetConfig+0x234>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d02c      	beq.n	8007298 <DMA_SetConfig+0x1d0>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a2f      	ldr	r2, [pc, #188]	@ (8007300 <DMA_SetConfig+0x238>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d027      	beq.n	8007298 <DMA_SetConfig+0x1d0>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a2d      	ldr	r2, [pc, #180]	@ (8007304 <DMA_SetConfig+0x23c>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d022      	beq.n	8007298 <DMA_SetConfig+0x1d0>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a2c      	ldr	r2, [pc, #176]	@ (8007308 <DMA_SetConfig+0x240>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d01d      	beq.n	8007298 <DMA_SetConfig+0x1d0>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a2a      	ldr	r2, [pc, #168]	@ (800730c <DMA_SetConfig+0x244>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d018      	beq.n	8007298 <DMA_SetConfig+0x1d0>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a29      	ldr	r2, [pc, #164]	@ (8007310 <DMA_SetConfig+0x248>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d013      	beq.n	8007298 <DMA_SetConfig+0x1d0>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a27      	ldr	r2, [pc, #156]	@ (8007314 <DMA_SetConfig+0x24c>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d00e      	beq.n	8007298 <DMA_SetConfig+0x1d0>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a26      	ldr	r2, [pc, #152]	@ (8007318 <DMA_SetConfig+0x250>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d009      	beq.n	8007298 <DMA_SetConfig+0x1d0>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a24      	ldr	r2, [pc, #144]	@ (800731c <DMA_SetConfig+0x254>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d004      	beq.n	8007298 <DMA_SetConfig+0x1d0>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a23      	ldr	r2, [pc, #140]	@ (8007320 <DMA_SetConfig+0x258>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d101      	bne.n	800729c <DMA_SetConfig+0x1d4>
 8007298:	2301      	movs	r3, #1
 800729a:	e000      	b.n	800729e <DMA_SetConfig+0x1d6>
 800729c:	2300      	movs	r3, #0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d059      	beq.n	8007356 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072a6:	f003 031f 	and.w	r3, r3, #31
 80072aa:	223f      	movs	r2, #63	@ 0x3f
 80072ac:	409a      	lsls	r2, r3
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80072c0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	683a      	ldr	r2, [r7, #0]
 80072c8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	2b40      	cmp	r3, #64	@ 0x40
 80072d0:	d138      	bne.n	8007344 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68ba      	ldr	r2, [r7, #8]
 80072e0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80072e2:	e086      	b.n	80073f2 <DMA_SetConfig+0x32a>
 80072e4:	40020010 	.word	0x40020010
 80072e8:	40020028 	.word	0x40020028
 80072ec:	40020040 	.word	0x40020040
 80072f0:	40020058 	.word	0x40020058
 80072f4:	40020070 	.word	0x40020070
 80072f8:	40020088 	.word	0x40020088
 80072fc:	400200a0 	.word	0x400200a0
 8007300:	400200b8 	.word	0x400200b8
 8007304:	40020410 	.word	0x40020410
 8007308:	40020428 	.word	0x40020428
 800730c:	40020440 	.word	0x40020440
 8007310:	40020458 	.word	0x40020458
 8007314:	40020470 	.word	0x40020470
 8007318:	40020488 	.word	0x40020488
 800731c:	400204a0 	.word	0x400204a0
 8007320:	400204b8 	.word	0x400204b8
 8007324:	58025408 	.word	0x58025408
 8007328:	5802541c 	.word	0x5802541c
 800732c:	58025430 	.word	0x58025430
 8007330:	58025444 	.word	0x58025444
 8007334:	58025458 	.word	0x58025458
 8007338:	5802546c 	.word	0x5802546c
 800733c:	58025480 	.word	0x58025480
 8007340:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	60da      	str	r2, [r3, #12]
}
 8007354:	e04d      	b.n	80073f2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a29      	ldr	r2, [pc, #164]	@ (8007400 <DMA_SetConfig+0x338>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d022      	beq.n	80073a6 <DMA_SetConfig+0x2de>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a27      	ldr	r2, [pc, #156]	@ (8007404 <DMA_SetConfig+0x33c>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d01d      	beq.n	80073a6 <DMA_SetConfig+0x2de>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a26      	ldr	r2, [pc, #152]	@ (8007408 <DMA_SetConfig+0x340>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d018      	beq.n	80073a6 <DMA_SetConfig+0x2de>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a24      	ldr	r2, [pc, #144]	@ (800740c <DMA_SetConfig+0x344>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d013      	beq.n	80073a6 <DMA_SetConfig+0x2de>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a23      	ldr	r2, [pc, #140]	@ (8007410 <DMA_SetConfig+0x348>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d00e      	beq.n	80073a6 <DMA_SetConfig+0x2de>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a21      	ldr	r2, [pc, #132]	@ (8007414 <DMA_SetConfig+0x34c>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d009      	beq.n	80073a6 <DMA_SetConfig+0x2de>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a20      	ldr	r2, [pc, #128]	@ (8007418 <DMA_SetConfig+0x350>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d004      	beq.n	80073a6 <DMA_SetConfig+0x2de>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a1e      	ldr	r2, [pc, #120]	@ (800741c <DMA_SetConfig+0x354>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d101      	bne.n	80073aa <DMA_SetConfig+0x2e2>
 80073a6:	2301      	movs	r3, #1
 80073a8:	e000      	b.n	80073ac <DMA_SetConfig+0x2e4>
 80073aa:	2300      	movs	r3, #0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d020      	beq.n	80073f2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073b4:	f003 031f 	and.w	r3, r3, #31
 80073b8:	2201      	movs	r2, #1
 80073ba:	409a      	lsls	r2, r3
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	683a      	ldr	r2, [r7, #0]
 80073c6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	2b40      	cmp	r3, #64	@ 0x40
 80073ce:	d108      	bne.n	80073e2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	60da      	str	r2, [r3, #12]
}
 80073e0:	e007      	b.n	80073f2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	60da      	str	r2, [r3, #12]
}
 80073f2:	bf00      	nop
 80073f4:	371c      	adds	r7, #28
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	58025408 	.word	0x58025408
 8007404:	5802541c 	.word	0x5802541c
 8007408:	58025430 	.word	0x58025430
 800740c:	58025444 	.word	0x58025444
 8007410:	58025458 	.word	0x58025458
 8007414:	5802546c 	.word	0x5802546c
 8007418:	58025480 	.word	0x58025480
 800741c:	58025494 	.word	0x58025494

08007420 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a42      	ldr	r2, [pc, #264]	@ (8007538 <DMA_CalcBaseAndBitshift+0x118>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d04a      	beq.n	80074c8 <DMA_CalcBaseAndBitshift+0xa8>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a41      	ldr	r2, [pc, #260]	@ (800753c <DMA_CalcBaseAndBitshift+0x11c>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d045      	beq.n	80074c8 <DMA_CalcBaseAndBitshift+0xa8>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a3f      	ldr	r2, [pc, #252]	@ (8007540 <DMA_CalcBaseAndBitshift+0x120>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d040      	beq.n	80074c8 <DMA_CalcBaseAndBitshift+0xa8>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a3e      	ldr	r2, [pc, #248]	@ (8007544 <DMA_CalcBaseAndBitshift+0x124>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d03b      	beq.n	80074c8 <DMA_CalcBaseAndBitshift+0xa8>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a3c      	ldr	r2, [pc, #240]	@ (8007548 <DMA_CalcBaseAndBitshift+0x128>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d036      	beq.n	80074c8 <DMA_CalcBaseAndBitshift+0xa8>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a3b      	ldr	r2, [pc, #236]	@ (800754c <DMA_CalcBaseAndBitshift+0x12c>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d031      	beq.n	80074c8 <DMA_CalcBaseAndBitshift+0xa8>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a39      	ldr	r2, [pc, #228]	@ (8007550 <DMA_CalcBaseAndBitshift+0x130>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d02c      	beq.n	80074c8 <DMA_CalcBaseAndBitshift+0xa8>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a38      	ldr	r2, [pc, #224]	@ (8007554 <DMA_CalcBaseAndBitshift+0x134>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d027      	beq.n	80074c8 <DMA_CalcBaseAndBitshift+0xa8>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a36      	ldr	r2, [pc, #216]	@ (8007558 <DMA_CalcBaseAndBitshift+0x138>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d022      	beq.n	80074c8 <DMA_CalcBaseAndBitshift+0xa8>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a35      	ldr	r2, [pc, #212]	@ (800755c <DMA_CalcBaseAndBitshift+0x13c>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d01d      	beq.n	80074c8 <DMA_CalcBaseAndBitshift+0xa8>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a33      	ldr	r2, [pc, #204]	@ (8007560 <DMA_CalcBaseAndBitshift+0x140>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d018      	beq.n	80074c8 <DMA_CalcBaseAndBitshift+0xa8>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a32      	ldr	r2, [pc, #200]	@ (8007564 <DMA_CalcBaseAndBitshift+0x144>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d013      	beq.n	80074c8 <DMA_CalcBaseAndBitshift+0xa8>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a30      	ldr	r2, [pc, #192]	@ (8007568 <DMA_CalcBaseAndBitshift+0x148>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d00e      	beq.n	80074c8 <DMA_CalcBaseAndBitshift+0xa8>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a2f      	ldr	r2, [pc, #188]	@ (800756c <DMA_CalcBaseAndBitshift+0x14c>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d009      	beq.n	80074c8 <DMA_CalcBaseAndBitshift+0xa8>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a2d      	ldr	r2, [pc, #180]	@ (8007570 <DMA_CalcBaseAndBitshift+0x150>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d004      	beq.n	80074c8 <DMA_CalcBaseAndBitshift+0xa8>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a2c      	ldr	r2, [pc, #176]	@ (8007574 <DMA_CalcBaseAndBitshift+0x154>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d101      	bne.n	80074cc <DMA_CalcBaseAndBitshift+0xac>
 80074c8:	2301      	movs	r3, #1
 80074ca:	e000      	b.n	80074ce <DMA_CalcBaseAndBitshift+0xae>
 80074cc:	2300      	movs	r3, #0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d024      	beq.n	800751c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	3b10      	subs	r3, #16
 80074da:	4a27      	ldr	r2, [pc, #156]	@ (8007578 <DMA_CalcBaseAndBitshift+0x158>)
 80074dc:	fba2 2303 	umull	r2, r3, r2, r3
 80074e0:	091b      	lsrs	r3, r3, #4
 80074e2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f003 0307 	and.w	r3, r3, #7
 80074ea:	4a24      	ldr	r2, [pc, #144]	@ (800757c <DMA_CalcBaseAndBitshift+0x15c>)
 80074ec:	5cd3      	ldrb	r3, [r2, r3]
 80074ee:	461a      	mov	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d908      	bls.n	800750c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	461a      	mov	r2, r3
 8007500:	4b1f      	ldr	r3, [pc, #124]	@ (8007580 <DMA_CalcBaseAndBitshift+0x160>)
 8007502:	4013      	ands	r3, r2
 8007504:	1d1a      	adds	r2, r3, #4
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	659a      	str	r2, [r3, #88]	@ 0x58
 800750a:	e00d      	b.n	8007528 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	461a      	mov	r2, r3
 8007512:	4b1b      	ldr	r3, [pc, #108]	@ (8007580 <DMA_CalcBaseAndBitshift+0x160>)
 8007514:	4013      	ands	r3, r2
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	6593      	str	r3, [r2, #88]	@ 0x58
 800751a:	e005      	b.n	8007528 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800752c:	4618      	mov	r0, r3
 800752e:	3714      	adds	r7, #20
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr
 8007538:	40020010 	.word	0x40020010
 800753c:	40020028 	.word	0x40020028
 8007540:	40020040 	.word	0x40020040
 8007544:	40020058 	.word	0x40020058
 8007548:	40020070 	.word	0x40020070
 800754c:	40020088 	.word	0x40020088
 8007550:	400200a0 	.word	0x400200a0
 8007554:	400200b8 	.word	0x400200b8
 8007558:	40020410 	.word	0x40020410
 800755c:	40020428 	.word	0x40020428
 8007560:	40020440 	.word	0x40020440
 8007564:	40020458 	.word	0x40020458
 8007568:	40020470 	.word	0x40020470
 800756c:	40020488 	.word	0x40020488
 8007570:	400204a0 	.word	0x400204a0
 8007574:	400204b8 	.word	0x400204b8
 8007578:	aaaaaaab 	.word	0xaaaaaaab
 800757c:	08023428 	.word	0x08023428
 8007580:	fffffc00 	.word	0xfffffc00

08007584 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800758c:	2300      	movs	r3, #0
 800758e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	699b      	ldr	r3, [r3, #24]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d120      	bne.n	80075da <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800759c:	2b03      	cmp	r3, #3
 800759e:	d858      	bhi.n	8007652 <DMA_CheckFifoParam+0xce>
 80075a0:	a201      	add	r2, pc, #4	@ (adr r2, 80075a8 <DMA_CheckFifoParam+0x24>)
 80075a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a6:	bf00      	nop
 80075a8:	080075b9 	.word	0x080075b9
 80075ac:	080075cb 	.word	0x080075cb
 80075b0:	080075b9 	.word	0x080075b9
 80075b4:	08007653 	.word	0x08007653
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d048      	beq.n	8007656 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075c8:	e045      	b.n	8007656 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80075d2:	d142      	bne.n	800765a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075d8:	e03f      	b.n	800765a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075e2:	d123      	bne.n	800762c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e8:	2b03      	cmp	r3, #3
 80075ea:	d838      	bhi.n	800765e <DMA_CheckFifoParam+0xda>
 80075ec:	a201      	add	r2, pc, #4	@ (adr r2, 80075f4 <DMA_CheckFifoParam+0x70>)
 80075ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f2:	bf00      	nop
 80075f4:	08007605 	.word	0x08007605
 80075f8:	0800760b 	.word	0x0800760b
 80075fc:	08007605 	.word	0x08007605
 8007600:	0800761d 	.word	0x0800761d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	73fb      	strb	r3, [r7, #15]
        break;
 8007608:	e030      	b.n	800766c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d025      	beq.n	8007662 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800761a:	e022      	b.n	8007662 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007620:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007624:	d11f      	bne.n	8007666 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800762a:	e01c      	b.n	8007666 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007630:	2b02      	cmp	r3, #2
 8007632:	d902      	bls.n	800763a <DMA_CheckFifoParam+0xb6>
 8007634:	2b03      	cmp	r3, #3
 8007636:	d003      	beq.n	8007640 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007638:	e018      	b.n	800766c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	73fb      	strb	r3, [r7, #15]
        break;
 800763e:	e015      	b.n	800766c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007644:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00e      	beq.n	800766a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	73fb      	strb	r3, [r7, #15]
    break;
 8007650:	e00b      	b.n	800766a <DMA_CheckFifoParam+0xe6>
        break;
 8007652:	bf00      	nop
 8007654:	e00a      	b.n	800766c <DMA_CheckFifoParam+0xe8>
        break;
 8007656:	bf00      	nop
 8007658:	e008      	b.n	800766c <DMA_CheckFifoParam+0xe8>
        break;
 800765a:	bf00      	nop
 800765c:	e006      	b.n	800766c <DMA_CheckFifoParam+0xe8>
        break;
 800765e:	bf00      	nop
 8007660:	e004      	b.n	800766c <DMA_CheckFifoParam+0xe8>
        break;
 8007662:	bf00      	nop
 8007664:	e002      	b.n	800766c <DMA_CheckFifoParam+0xe8>
        break;
 8007666:	bf00      	nop
 8007668:	e000      	b.n	800766c <DMA_CheckFifoParam+0xe8>
    break;
 800766a:	bf00      	nop
    }
  }

  return status;
 800766c:	7bfb      	ldrb	r3, [r7, #15]
}
 800766e:	4618      	mov	r0, r3
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop

0800767c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a38      	ldr	r2, [pc, #224]	@ (8007770 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d022      	beq.n	80076da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a36      	ldr	r2, [pc, #216]	@ (8007774 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d01d      	beq.n	80076da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a35      	ldr	r2, [pc, #212]	@ (8007778 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d018      	beq.n	80076da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a33      	ldr	r2, [pc, #204]	@ (800777c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d013      	beq.n	80076da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a32      	ldr	r2, [pc, #200]	@ (8007780 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d00e      	beq.n	80076da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a30      	ldr	r2, [pc, #192]	@ (8007784 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d009      	beq.n	80076da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a2f      	ldr	r2, [pc, #188]	@ (8007788 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d004      	beq.n	80076da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a2d      	ldr	r2, [pc, #180]	@ (800778c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d101      	bne.n	80076de <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80076da:	2301      	movs	r3, #1
 80076dc:	e000      	b.n	80076e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80076de:	2300      	movs	r3, #0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d01a      	beq.n	800771a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	3b08      	subs	r3, #8
 80076ec:	4a28      	ldr	r2, [pc, #160]	@ (8007790 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80076ee:	fba2 2303 	umull	r2, r3, r2, r3
 80076f2:	091b      	lsrs	r3, r3, #4
 80076f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	4b26      	ldr	r3, [pc, #152]	@ (8007794 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80076fa:	4413      	add	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	461a      	mov	r2, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a24      	ldr	r2, [pc, #144]	@ (8007798 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007708:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f003 031f 	and.w	r3, r3, #31
 8007710:	2201      	movs	r2, #1
 8007712:	409a      	lsls	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007718:	e024      	b.n	8007764 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	b2db      	uxtb	r3, r3
 8007720:	3b10      	subs	r3, #16
 8007722:	4a1e      	ldr	r2, [pc, #120]	@ (800779c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007724:	fba2 2303 	umull	r2, r3, r2, r3
 8007728:	091b      	lsrs	r3, r3, #4
 800772a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	4a1c      	ldr	r2, [pc, #112]	@ (80077a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d806      	bhi.n	8007742 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	4a1b      	ldr	r2, [pc, #108]	@ (80077a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d902      	bls.n	8007742 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	3308      	adds	r3, #8
 8007740:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	4b18      	ldr	r3, [pc, #96]	@ (80077a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007746:	4413      	add	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	461a      	mov	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a16      	ldr	r2, [pc, #88]	@ (80077ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007754:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f003 031f 	and.w	r3, r3, #31
 800775c:	2201      	movs	r2, #1
 800775e:	409a      	lsls	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007764:	bf00      	nop
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	58025408 	.word	0x58025408
 8007774:	5802541c 	.word	0x5802541c
 8007778:	58025430 	.word	0x58025430
 800777c:	58025444 	.word	0x58025444
 8007780:	58025458 	.word	0x58025458
 8007784:	5802546c 	.word	0x5802546c
 8007788:	58025480 	.word	0x58025480
 800778c:	58025494 	.word	0x58025494
 8007790:	cccccccd 	.word	0xcccccccd
 8007794:	16009600 	.word	0x16009600
 8007798:	58025880 	.word	0x58025880
 800779c:	aaaaaaab 	.word	0xaaaaaaab
 80077a0:	400204b8 	.word	0x400204b8
 80077a4:	4002040f 	.word	0x4002040f
 80077a8:	10008200 	.word	0x10008200
 80077ac:	40020880 	.word	0x40020880

080077b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d04a      	beq.n	800785c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2b08      	cmp	r3, #8
 80077ca:	d847      	bhi.n	800785c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a25      	ldr	r2, [pc, #148]	@ (8007868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d022      	beq.n	800781c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a24      	ldr	r2, [pc, #144]	@ (800786c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d01d      	beq.n	800781c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a22      	ldr	r2, [pc, #136]	@ (8007870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d018      	beq.n	800781c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a21      	ldr	r2, [pc, #132]	@ (8007874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d013      	beq.n	800781c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a1f      	ldr	r2, [pc, #124]	@ (8007878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d00e      	beq.n	800781c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a1e      	ldr	r2, [pc, #120]	@ (800787c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d009      	beq.n	800781c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a1c      	ldr	r2, [pc, #112]	@ (8007880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d004      	beq.n	800781c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a1b      	ldr	r2, [pc, #108]	@ (8007884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d101      	bne.n	8007820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800781c:	2301      	movs	r3, #1
 800781e:	e000      	b.n	8007822 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007820:	2300      	movs	r3, #0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00a      	beq.n	800783c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	4b17      	ldr	r3, [pc, #92]	@ (8007888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800782a:	4413      	add	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	461a      	mov	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a15      	ldr	r2, [pc, #84]	@ (800788c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007838:	671a      	str	r2, [r3, #112]	@ 0x70
 800783a:	e009      	b.n	8007850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	4b14      	ldr	r3, [pc, #80]	@ (8007890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007840:	4413      	add	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	461a      	mov	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a11      	ldr	r2, [pc, #68]	@ (8007894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800784e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	3b01      	subs	r3, #1
 8007854:	2201      	movs	r2, #1
 8007856:	409a      	lsls	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800785c:	bf00      	nop
 800785e:	3714      	adds	r7, #20
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr
 8007868:	58025408 	.word	0x58025408
 800786c:	5802541c 	.word	0x5802541c
 8007870:	58025430 	.word	0x58025430
 8007874:	58025444 	.word	0x58025444
 8007878:	58025458 	.word	0x58025458
 800787c:	5802546c 	.word	0x5802546c
 8007880:	58025480 	.word	0x58025480
 8007884:	58025494 	.word	0x58025494
 8007888:	1600963f 	.word	0x1600963f
 800788c:	58025940 	.word	0x58025940
 8007890:	1000823f 	.word	0x1000823f
 8007894:	40020940 	.word	0x40020940

08007898 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007898:	b480      	push	{r7}
 800789a:	b089      	sub	sp, #36	@ 0x24
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80078a2:	2300      	movs	r3, #0
 80078a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80078a6:	4b89      	ldr	r3, [pc, #548]	@ (8007acc <HAL_GPIO_Init+0x234>)
 80078a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80078aa:	e194      	b.n	8007bd6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	2101      	movs	r1, #1
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	fa01 f303 	lsl.w	r3, r1, r3
 80078b8:	4013      	ands	r3, r2
 80078ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f000 8186 	beq.w	8007bd0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f003 0303 	and.w	r3, r3, #3
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d005      	beq.n	80078dc <HAL_GPIO_Init+0x44>
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	f003 0303 	and.w	r3, r3, #3
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d130      	bne.n	800793e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	005b      	lsls	r3, r3, #1
 80078e6:	2203      	movs	r2, #3
 80078e8:	fa02 f303 	lsl.w	r3, r2, r3
 80078ec:	43db      	mvns	r3, r3
 80078ee:	69ba      	ldr	r2, [r7, #24]
 80078f0:	4013      	ands	r3, r2
 80078f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	68da      	ldr	r2, [r3, #12]
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	005b      	lsls	r3, r3, #1
 80078fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	4313      	orrs	r3, r2
 8007904:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	69ba      	ldr	r2, [r7, #24]
 800790a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007912:	2201      	movs	r2, #1
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	fa02 f303 	lsl.w	r3, r2, r3
 800791a:	43db      	mvns	r3, r3
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	4013      	ands	r3, r2
 8007920:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	091b      	lsrs	r3, r3, #4
 8007928:	f003 0201 	and.w	r2, r3, #1
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	fa02 f303 	lsl.w	r3, r2, r3
 8007932:	69ba      	ldr	r2, [r7, #24]
 8007934:	4313      	orrs	r3, r2
 8007936:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	69ba      	ldr	r2, [r7, #24]
 800793c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	f003 0303 	and.w	r3, r3, #3
 8007946:	2b03      	cmp	r3, #3
 8007948:	d017      	beq.n	800797a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	005b      	lsls	r3, r3, #1
 8007954:	2203      	movs	r2, #3
 8007956:	fa02 f303 	lsl.w	r3, r2, r3
 800795a:	43db      	mvns	r3, r3
 800795c:	69ba      	ldr	r2, [r7, #24]
 800795e:	4013      	ands	r3, r2
 8007960:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	689a      	ldr	r2, [r3, #8]
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	005b      	lsls	r3, r3, #1
 800796a:	fa02 f303 	lsl.w	r3, r2, r3
 800796e:	69ba      	ldr	r2, [r7, #24]
 8007970:	4313      	orrs	r3, r2
 8007972:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	69ba      	ldr	r2, [r7, #24]
 8007978:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	f003 0303 	and.w	r3, r3, #3
 8007982:	2b02      	cmp	r3, #2
 8007984:	d123      	bne.n	80079ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	08da      	lsrs	r2, r3, #3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	3208      	adds	r2, #8
 800798e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007992:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	f003 0307 	and.w	r3, r3, #7
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	220f      	movs	r2, #15
 800799e:	fa02 f303 	lsl.w	r3, r2, r3
 80079a2:	43db      	mvns	r3, r3
 80079a4:	69ba      	ldr	r2, [r7, #24]
 80079a6:	4013      	ands	r3, r2
 80079a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	691a      	ldr	r2, [r3, #16]
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	f003 0307 	and.w	r3, r3, #7
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ba:	69ba      	ldr	r2, [r7, #24]
 80079bc:	4313      	orrs	r3, r2
 80079be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	08da      	lsrs	r2, r3, #3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	3208      	adds	r2, #8
 80079c8:	69b9      	ldr	r1, [r7, #24]
 80079ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	005b      	lsls	r3, r3, #1
 80079d8:	2203      	movs	r2, #3
 80079da:	fa02 f303 	lsl.w	r3, r2, r3
 80079de:	43db      	mvns	r3, r3
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	4013      	ands	r3, r2
 80079e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f003 0203 	and.w	r2, r3, #3
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	005b      	lsls	r3, r3, #1
 80079f2:	fa02 f303 	lsl.w	r3, r2, r3
 80079f6:	69ba      	ldr	r2, [r7, #24]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	69ba      	ldr	r2, [r7, #24]
 8007a00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f000 80e0 	beq.w	8007bd0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a10:	4b2f      	ldr	r3, [pc, #188]	@ (8007ad0 <HAL_GPIO_Init+0x238>)
 8007a12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a16:	4a2e      	ldr	r2, [pc, #184]	@ (8007ad0 <HAL_GPIO_Init+0x238>)
 8007a18:	f043 0302 	orr.w	r3, r3, #2
 8007a1c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007a20:	4b2b      	ldr	r3, [pc, #172]	@ (8007ad0 <HAL_GPIO_Init+0x238>)
 8007a22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a26:	f003 0302 	and.w	r3, r3, #2
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007a2e:	4a29      	ldr	r2, [pc, #164]	@ (8007ad4 <HAL_GPIO_Init+0x23c>)
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	089b      	lsrs	r3, r3, #2
 8007a34:	3302      	adds	r3, #2
 8007a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	f003 0303 	and.w	r3, r3, #3
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	220f      	movs	r2, #15
 8007a46:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4a:	43db      	mvns	r3, r3
 8007a4c:	69ba      	ldr	r2, [r7, #24]
 8007a4e:	4013      	ands	r3, r2
 8007a50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a20      	ldr	r2, [pc, #128]	@ (8007ad8 <HAL_GPIO_Init+0x240>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d052      	beq.n	8007b00 <HAL_GPIO_Init+0x268>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a1f      	ldr	r2, [pc, #124]	@ (8007adc <HAL_GPIO_Init+0x244>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d031      	beq.n	8007ac6 <HAL_GPIO_Init+0x22e>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a1e      	ldr	r2, [pc, #120]	@ (8007ae0 <HAL_GPIO_Init+0x248>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d02b      	beq.n	8007ac2 <HAL_GPIO_Init+0x22a>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ae4 <HAL_GPIO_Init+0x24c>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d025      	beq.n	8007abe <HAL_GPIO_Init+0x226>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a1c      	ldr	r2, [pc, #112]	@ (8007ae8 <HAL_GPIO_Init+0x250>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d01f      	beq.n	8007aba <HAL_GPIO_Init+0x222>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8007aec <HAL_GPIO_Init+0x254>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d019      	beq.n	8007ab6 <HAL_GPIO_Init+0x21e>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a1a      	ldr	r2, [pc, #104]	@ (8007af0 <HAL_GPIO_Init+0x258>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d013      	beq.n	8007ab2 <HAL_GPIO_Init+0x21a>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a19      	ldr	r2, [pc, #100]	@ (8007af4 <HAL_GPIO_Init+0x25c>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d00d      	beq.n	8007aae <HAL_GPIO_Init+0x216>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a18      	ldr	r2, [pc, #96]	@ (8007af8 <HAL_GPIO_Init+0x260>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d007      	beq.n	8007aaa <HAL_GPIO_Init+0x212>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a17      	ldr	r2, [pc, #92]	@ (8007afc <HAL_GPIO_Init+0x264>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d101      	bne.n	8007aa6 <HAL_GPIO_Init+0x20e>
 8007aa2:	2309      	movs	r3, #9
 8007aa4:	e02d      	b.n	8007b02 <HAL_GPIO_Init+0x26a>
 8007aa6:	230a      	movs	r3, #10
 8007aa8:	e02b      	b.n	8007b02 <HAL_GPIO_Init+0x26a>
 8007aaa:	2308      	movs	r3, #8
 8007aac:	e029      	b.n	8007b02 <HAL_GPIO_Init+0x26a>
 8007aae:	2307      	movs	r3, #7
 8007ab0:	e027      	b.n	8007b02 <HAL_GPIO_Init+0x26a>
 8007ab2:	2306      	movs	r3, #6
 8007ab4:	e025      	b.n	8007b02 <HAL_GPIO_Init+0x26a>
 8007ab6:	2305      	movs	r3, #5
 8007ab8:	e023      	b.n	8007b02 <HAL_GPIO_Init+0x26a>
 8007aba:	2304      	movs	r3, #4
 8007abc:	e021      	b.n	8007b02 <HAL_GPIO_Init+0x26a>
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e01f      	b.n	8007b02 <HAL_GPIO_Init+0x26a>
 8007ac2:	2302      	movs	r3, #2
 8007ac4:	e01d      	b.n	8007b02 <HAL_GPIO_Init+0x26a>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e01b      	b.n	8007b02 <HAL_GPIO_Init+0x26a>
 8007aca:	bf00      	nop
 8007acc:	58000080 	.word	0x58000080
 8007ad0:	58024400 	.word	0x58024400
 8007ad4:	58000400 	.word	0x58000400
 8007ad8:	58020000 	.word	0x58020000
 8007adc:	58020400 	.word	0x58020400
 8007ae0:	58020800 	.word	0x58020800
 8007ae4:	58020c00 	.word	0x58020c00
 8007ae8:	58021000 	.word	0x58021000
 8007aec:	58021400 	.word	0x58021400
 8007af0:	58021800 	.word	0x58021800
 8007af4:	58021c00 	.word	0x58021c00
 8007af8:	58022000 	.word	0x58022000
 8007afc:	58022400 	.word	0x58022400
 8007b00:	2300      	movs	r3, #0
 8007b02:	69fa      	ldr	r2, [r7, #28]
 8007b04:	f002 0203 	and.w	r2, r2, #3
 8007b08:	0092      	lsls	r2, r2, #2
 8007b0a:	4093      	lsls	r3, r2
 8007b0c:	69ba      	ldr	r2, [r7, #24]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b12:	4938      	ldr	r1, [pc, #224]	@ (8007bf4 <HAL_GPIO_Init+0x35c>)
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	089b      	lsrs	r3, r3, #2
 8007b18:	3302      	adds	r3, #2
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007b20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	43db      	mvns	r3, r3
 8007b2c:	69ba      	ldr	r2, [r7, #24]
 8007b2e:	4013      	ands	r3, r2
 8007b30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007b3e:	69ba      	ldr	r2, [r7, #24]
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007b46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007b4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	43db      	mvns	r3, r3
 8007b5a:	69ba      	ldr	r2, [r7, #24]
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d003      	beq.n	8007b74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007b6c:	69ba      	ldr	r2, [r7, #24]
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007b74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	43db      	mvns	r3, r3
 8007b86:	69ba      	ldr	r2, [r7, #24]
 8007b88:	4013      	ands	r3, r2
 8007b8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d003      	beq.n	8007ba0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007b98:	69ba      	ldr	r2, [r7, #24]
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	69ba      	ldr	r2, [r7, #24]
 8007ba4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	43db      	mvns	r3, r3
 8007bb0:	69ba      	ldr	r2, [r7, #24]
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007bc2:	69ba      	ldr	r2, [r7, #24]
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	69ba      	ldr	r2, [r7, #24]
 8007bce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f47f ae63 	bne.w	80078ac <HAL_GPIO_Init+0x14>
  }
}
 8007be6:	bf00      	nop
 8007be8:	bf00      	nop
 8007bea:	3724      	adds	r7, #36	@ 0x24
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr
 8007bf4:	58000400 	.word	0x58000400

08007bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	460b      	mov	r3, r1
 8007c02:	807b      	strh	r3, [r7, #2]
 8007c04:	4613      	mov	r3, r2
 8007c06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c08:	787b      	ldrb	r3, [r7, #1]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d003      	beq.n	8007c16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c0e:	887a      	ldrh	r2, [r7, #2]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007c14:	e003      	b.n	8007c1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007c16:	887b      	ldrh	r3, [r7, #2]
 8007c18:	041a      	lsls	r2, r3, #16
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	619a      	str	r2, [r3, #24]
}
 8007c1e:	bf00      	nop
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b082      	sub	sp, #8
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	4603      	mov	r3, r0
 8007c32:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007c34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c38:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007c3c:	88fb      	ldrh	r3, [r7, #6]
 8007c3e:	4013      	ands	r3, r2
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d008      	beq.n	8007c56 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007c44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c48:	88fb      	ldrh	r3, [r7, #6]
 8007c4a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007c4e:	88fb      	ldrh	r3, [r7, #6]
 8007c50:	4618      	mov	r0, r3
 8007c52:	f7f9 fd69 	bl	8001728 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007c56:	bf00      	nop
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
	...

08007c60 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007c68:	4b19      	ldr	r3, [pc, #100]	@ (8007cd0 <HAL_PWREx_ConfigSupply+0x70>)
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	f003 0304 	and.w	r3, r3, #4
 8007c70:	2b04      	cmp	r3, #4
 8007c72:	d00a      	beq.n	8007c8a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007c74:	4b16      	ldr	r3, [pc, #88]	@ (8007cd0 <HAL_PWREx_ConfigSupply+0x70>)
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	f003 0307 	and.w	r3, r3, #7
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d001      	beq.n	8007c86 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e01f      	b.n	8007cc6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007c86:	2300      	movs	r3, #0
 8007c88:	e01d      	b.n	8007cc6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007c8a:	4b11      	ldr	r3, [pc, #68]	@ (8007cd0 <HAL_PWREx_ConfigSupply+0x70>)
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	f023 0207 	bic.w	r2, r3, #7
 8007c92:	490f      	ldr	r1, [pc, #60]	@ (8007cd0 <HAL_PWREx_ConfigSupply+0x70>)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007c9a:	f7fb fba3 	bl	80033e4 <HAL_GetTick>
 8007c9e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007ca0:	e009      	b.n	8007cb6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007ca2:	f7fb fb9f 	bl	80033e4 <HAL_GetTick>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007cb0:	d901      	bls.n	8007cb6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e007      	b.n	8007cc6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007cb6:	4b06      	ldr	r3, [pc, #24]	@ (8007cd0 <HAL_PWREx_ConfigSupply+0x70>)
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007cbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cc2:	d1ee      	bne.n	8007ca2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	58024800 	.word	0x58024800

08007cd4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b08c      	sub	sp, #48	@ 0x30
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d102      	bne.n	8007ce8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	f000 bc48 	b.w	8008578 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 0301 	and.w	r3, r3, #1
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f000 8088 	beq.w	8007e06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cf6:	4b99      	ldr	r3, [pc, #612]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d00:	4b96      	ldr	r3, [pc, #600]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d04:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d08:	2b10      	cmp	r3, #16
 8007d0a:	d007      	beq.n	8007d1c <HAL_RCC_OscConfig+0x48>
 8007d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d0e:	2b18      	cmp	r3, #24
 8007d10:	d111      	bne.n	8007d36 <HAL_RCC_OscConfig+0x62>
 8007d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d14:	f003 0303 	and.w	r3, r3, #3
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d10c      	bne.n	8007d36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d1c:	4b8f      	ldr	r3, [pc, #572]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d06d      	beq.n	8007e04 <HAL_RCC_OscConfig+0x130>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d169      	bne.n	8007e04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	f000 bc21 	b.w	8008578 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d3e:	d106      	bne.n	8007d4e <HAL_RCC_OscConfig+0x7a>
 8007d40:	4b86      	ldr	r3, [pc, #536]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a85      	ldr	r2, [pc, #532]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007d46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d4a:	6013      	str	r3, [r2, #0]
 8007d4c:	e02e      	b.n	8007dac <HAL_RCC_OscConfig+0xd8>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d10c      	bne.n	8007d70 <HAL_RCC_OscConfig+0x9c>
 8007d56:	4b81      	ldr	r3, [pc, #516]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a80      	ldr	r2, [pc, #512]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007d5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d60:	6013      	str	r3, [r2, #0]
 8007d62:	4b7e      	ldr	r3, [pc, #504]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a7d      	ldr	r2, [pc, #500]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007d68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d6c:	6013      	str	r3, [r2, #0]
 8007d6e:	e01d      	b.n	8007dac <HAL_RCC_OscConfig+0xd8>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d78:	d10c      	bne.n	8007d94 <HAL_RCC_OscConfig+0xc0>
 8007d7a:	4b78      	ldr	r3, [pc, #480]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a77      	ldr	r2, [pc, #476]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007d80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d84:	6013      	str	r3, [r2, #0]
 8007d86:	4b75      	ldr	r3, [pc, #468]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a74      	ldr	r2, [pc, #464]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d90:	6013      	str	r3, [r2, #0]
 8007d92:	e00b      	b.n	8007dac <HAL_RCC_OscConfig+0xd8>
 8007d94:	4b71      	ldr	r3, [pc, #452]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a70      	ldr	r2, [pc, #448]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007d9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d9e:	6013      	str	r3, [r2, #0]
 8007da0:	4b6e      	ldr	r3, [pc, #440]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a6d      	ldr	r2, [pc, #436]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007da6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d013      	beq.n	8007ddc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007db4:	f7fb fb16 	bl	80033e4 <HAL_GetTick>
 8007db8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007dba:	e008      	b.n	8007dce <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007dbc:	f7fb fb12 	bl	80033e4 <HAL_GetTick>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	2b64      	cmp	r3, #100	@ 0x64
 8007dc8:	d901      	bls.n	8007dce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e3d4      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007dce:	4b63      	ldr	r3, [pc, #396]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d0f0      	beq.n	8007dbc <HAL_RCC_OscConfig+0xe8>
 8007dda:	e014      	b.n	8007e06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ddc:	f7fb fb02 	bl	80033e4 <HAL_GetTick>
 8007de0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007de2:	e008      	b.n	8007df6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007de4:	f7fb fafe 	bl	80033e4 <HAL_GetTick>
 8007de8:	4602      	mov	r2, r0
 8007dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	2b64      	cmp	r3, #100	@ 0x64
 8007df0:	d901      	bls.n	8007df6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e3c0      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007df6:	4b59      	ldr	r3, [pc, #356]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1f0      	bne.n	8007de4 <HAL_RCC_OscConfig+0x110>
 8007e02:	e000      	b.n	8007e06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0302 	and.w	r3, r3, #2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 80ca 	beq.w	8007fa8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e14:	4b51      	ldr	r3, [pc, #324]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e1c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e1e:	4b4f      	ldr	r3, [pc, #316]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e22:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007e24:	6a3b      	ldr	r3, [r7, #32]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d007      	beq.n	8007e3a <HAL_RCC_OscConfig+0x166>
 8007e2a:	6a3b      	ldr	r3, [r7, #32]
 8007e2c:	2b18      	cmp	r3, #24
 8007e2e:	d156      	bne.n	8007ede <HAL_RCC_OscConfig+0x20a>
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	f003 0303 	and.w	r3, r3, #3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d151      	bne.n	8007ede <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e3a:	4b48      	ldr	r3, [pc, #288]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 0304 	and.w	r3, r3, #4
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d005      	beq.n	8007e52 <HAL_RCC_OscConfig+0x17e>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d101      	bne.n	8007e52 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e392      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e52:	4b42      	ldr	r3, [pc, #264]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f023 0219 	bic.w	r2, r3, #25
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	493f      	ldr	r1, [pc, #252]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007e60:	4313      	orrs	r3, r2
 8007e62:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e64:	f7fb fabe 	bl	80033e4 <HAL_GetTick>
 8007e68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e6a:	e008      	b.n	8007e7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e6c:	f7fb faba 	bl	80033e4 <HAL_GetTick>
 8007e70:	4602      	mov	r2, r0
 8007e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d901      	bls.n	8007e7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e37c      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e7e:	4b37      	ldr	r3, [pc, #220]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0304 	and.w	r3, r3, #4
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d0f0      	beq.n	8007e6c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e8a:	f7fb fadb 	bl	8003444 <HAL_GetREVID>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d817      	bhi.n	8007ec8 <HAL_RCC_OscConfig+0x1f4>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	2b40      	cmp	r3, #64	@ 0x40
 8007e9e:	d108      	bne.n	8007eb2 <HAL_RCC_OscConfig+0x1de>
 8007ea0:	4b2e      	ldr	r3, [pc, #184]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007ea8:	4a2c      	ldr	r2, [pc, #176]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007eae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007eb0:	e07a      	b.n	8007fa8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	031b      	lsls	r3, r3, #12
 8007ec0:	4926      	ldr	r1, [pc, #152]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ec6:	e06f      	b.n	8007fa8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ec8:	4b24      	ldr	r3, [pc, #144]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	061b      	lsls	r3, r3, #24
 8007ed6:	4921      	ldr	r1, [pc, #132]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007edc:	e064      	b.n	8007fa8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d047      	beq.n	8007f76 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f023 0219 	bic.w	r2, r3, #25
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	491a      	ldr	r1, [pc, #104]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ef8:	f7fb fa74 	bl	80033e4 <HAL_GetTick>
 8007efc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007efe:	e008      	b.n	8007f12 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f00:	f7fb fa70 	bl	80033e4 <HAL_GetTick>
 8007f04:	4602      	mov	r2, r0
 8007f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d901      	bls.n	8007f12 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e332      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f12:	4b12      	ldr	r3, [pc, #72]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 0304 	and.w	r3, r3, #4
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d0f0      	beq.n	8007f00 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f1e:	f7fb fa91 	bl	8003444 <HAL_GetREVID>
 8007f22:	4603      	mov	r3, r0
 8007f24:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d819      	bhi.n	8007f60 <HAL_RCC_OscConfig+0x28c>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	2b40      	cmp	r3, #64	@ 0x40
 8007f32:	d108      	bne.n	8007f46 <HAL_RCC_OscConfig+0x272>
 8007f34:	4b09      	ldr	r3, [pc, #36]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007f3c:	4a07      	ldr	r2, [pc, #28]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007f3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f42:	6053      	str	r3, [r2, #4]
 8007f44:	e030      	b.n	8007fa8 <HAL_RCC_OscConfig+0x2d4>
 8007f46:	4b05      	ldr	r3, [pc, #20]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	031b      	lsls	r3, r3, #12
 8007f54:	4901      	ldr	r1, [pc, #4]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	604b      	str	r3, [r1, #4]
 8007f5a:	e025      	b.n	8007fa8 <HAL_RCC_OscConfig+0x2d4>
 8007f5c:	58024400 	.word	0x58024400
 8007f60:	4b9a      	ldr	r3, [pc, #616]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	061b      	lsls	r3, r3, #24
 8007f6e:	4997      	ldr	r1, [pc, #604]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	604b      	str	r3, [r1, #4]
 8007f74:	e018      	b.n	8007fa8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f76:	4b95      	ldr	r3, [pc, #596]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a94      	ldr	r2, [pc, #592]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8007f7c:	f023 0301 	bic.w	r3, r3, #1
 8007f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f82:	f7fb fa2f 	bl	80033e4 <HAL_GetTick>
 8007f86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f88:	e008      	b.n	8007f9c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f8a:	f7fb fa2b 	bl	80033e4 <HAL_GetTick>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d901      	bls.n	8007f9c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e2ed      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f9c:	4b8b      	ldr	r3, [pc, #556]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 0304 	and.w	r3, r3, #4
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1f0      	bne.n	8007f8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0310 	and.w	r3, r3, #16
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f000 80a9 	beq.w	8008108 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fb6:	4b85      	ldr	r3, [pc, #532]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007fbe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007fc0:	4b82      	ldr	r3, [pc, #520]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8007fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	2b08      	cmp	r3, #8
 8007fca:	d007      	beq.n	8007fdc <HAL_RCC_OscConfig+0x308>
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	2b18      	cmp	r3, #24
 8007fd0:	d13a      	bne.n	8008048 <HAL_RCC_OscConfig+0x374>
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	f003 0303 	and.w	r3, r3, #3
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d135      	bne.n	8008048 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fdc:	4b7b      	ldr	r3, [pc, #492]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d005      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x320>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	69db      	ldr	r3, [r3, #28]
 8007fec:	2b80      	cmp	r3, #128	@ 0x80
 8007fee:	d001      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e2c1      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ff4:	f7fb fa26 	bl	8003444 <HAL_GetREVID>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d817      	bhi.n	8008032 <HAL_RCC_OscConfig+0x35e>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a1b      	ldr	r3, [r3, #32]
 8008006:	2b20      	cmp	r3, #32
 8008008:	d108      	bne.n	800801c <HAL_RCC_OscConfig+0x348>
 800800a:	4b70      	ldr	r3, [pc, #448]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008012:	4a6e      	ldr	r2, [pc, #440]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8008014:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008018:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800801a:	e075      	b.n	8008108 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800801c:	4b6b      	ldr	r3, [pc, #428]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a1b      	ldr	r3, [r3, #32]
 8008028:	069b      	lsls	r3, r3, #26
 800802a:	4968      	ldr	r1, [pc, #416]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 800802c:	4313      	orrs	r3, r2
 800802e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008030:	e06a      	b.n	8008108 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008032:	4b66      	ldr	r3, [pc, #408]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a1b      	ldr	r3, [r3, #32]
 800803e:	061b      	lsls	r3, r3, #24
 8008040:	4962      	ldr	r1, [pc, #392]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8008042:	4313      	orrs	r3, r2
 8008044:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008046:	e05f      	b.n	8008108 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	69db      	ldr	r3, [r3, #28]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d042      	beq.n	80080d6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008050:	4b5e      	ldr	r3, [pc, #376]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a5d      	ldr	r2, [pc, #372]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8008056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800805a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800805c:	f7fb f9c2 	bl	80033e4 <HAL_GetTick>
 8008060:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008062:	e008      	b.n	8008076 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008064:	f7fb f9be 	bl	80033e4 <HAL_GetTick>
 8008068:	4602      	mov	r2, r0
 800806a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	2b02      	cmp	r3, #2
 8008070:	d901      	bls.n	8008076 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e280      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008076:	4b55      	ldr	r3, [pc, #340]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800807e:	2b00      	cmp	r3, #0
 8008080:	d0f0      	beq.n	8008064 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008082:	f7fb f9df 	bl	8003444 <HAL_GetREVID>
 8008086:	4603      	mov	r3, r0
 8008088:	f241 0203 	movw	r2, #4099	@ 0x1003
 800808c:	4293      	cmp	r3, r2
 800808e:	d817      	bhi.n	80080c0 <HAL_RCC_OscConfig+0x3ec>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a1b      	ldr	r3, [r3, #32]
 8008094:	2b20      	cmp	r3, #32
 8008096:	d108      	bne.n	80080aa <HAL_RCC_OscConfig+0x3d6>
 8008098:	4b4c      	ldr	r3, [pc, #304]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80080a0:	4a4a      	ldr	r2, [pc, #296]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 80080a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80080a6:	6053      	str	r3, [r2, #4]
 80080a8:	e02e      	b.n	8008108 <HAL_RCC_OscConfig+0x434>
 80080aa:	4b48      	ldr	r3, [pc, #288]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	069b      	lsls	r3, r3, #26
 80080b8:	4944      	ldr	r1, [pc, #272]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 80080ba:	4313      	orrs	r3, r2
 80080bc:	604b      	str	r3, [r1, #4]
 80080be:	e023      	b.n	8008108 <HAL_RCC_OscConfig+0x434>
 80080c0:	4b42      	ldr	r3, [pc, #264]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a1b      	ldr	r3, [r3, #32]
 80080cc:	061b      	lsls	r3, r3, #24
 80080ce:	493f      	ldr	r1, [pc, #252]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 80080d0:	4313      	orrs	r3, r2
 80080d2:	60cb      	str	r3, [r1, #12]
 80080d4:	e018      	b.n	8008108 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80080d6:	4b3d      	ldr	r3, [pc, #244]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a3c      	ldr	r2, [pc, #240]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 80080dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080e2:	f7fb f97f 	bl	80033e4 <HAL_GetTick>
 80080e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080e8:	e008      	b.n	80080fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80080ea:	f7fb f97b 	bl	80033e4 <HAL_GetTick>
 80080ee:	4602      	mov	r2, r0
 80080f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f2:	1ad3      	subs	r3, r2, r3
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d901      	bls.n	80080fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e23d      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080fc:	4b33      	ldr	r3, [pc, #204]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1f0      	bne.n	80080ea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 0308 	and.w	r3, r3, #8
 8008110:	2b00      	cmp	r3, #0
 8008112:	d036      	beq.n	8008182 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	695b      	ldr	r3, [r3, #20]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d019      	beq.n	8008150 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800811c:	4b2b      	ldr	r3, [pc, #172]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 800811e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008120:	4a2a      	ldr	r2, [pc, #168]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8008122:	f043 0301 	orr.w	r3, r3, #1
 8008126:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008128:	f7fb f95c 	bl	80033e4 <HAL_GetTick>
 800812c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800812e:	e008      	b.n	8008142 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008130:	f7fb f958 	bl	80033e4 <HAL_GetTick>
 8008134:	4602      	mov	r2, r0
 8008136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	2b02      	cmp	r3, #2
 800813c:	d901      	bls.n	8008142 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e21a      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008142:	4b22      	ldr	r3, [pc, #136]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8008144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008146:	f003 0302 	and.w	r3, r3, #2
 800814a:	2b00      	cmp	r3, #0
 800814c:	d0f0      	beq.n	8008130 <HAL_RCC_OscConfig+0x45c>
 800814e:	e018      	b.n	8008182 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008150:	4b1e      	ldr	r3, [pc, #120]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8008152:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008154:	4a1d      	ldr	r2, [pc, #116]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8008156:	f023 0301 	bic.w	r3, r3, #1
 800815a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800815c:	f7fb f942 	bl	80033e4 <HAL_GetTick>
 8008160:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008162:	e008      	b.n	8008176 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008164:	f7fb f93e 	bl	80033e4 <HAL_GetTick>
 8008168:	4602      	mov	r2, r0
 800816a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	2b02      	cmp	r3, #2
 8008170:	d901      	bls.n	8008176 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e200      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008176:	4b15      	ldr	r3, [pc, #84]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8008178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800817a:	f003 0302 	and.w	r3, r3, #2
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1f0      	bne.n	8008164 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 0320 	and.w	r3, r3, #32
 800818a:	2b00      	cmp	r3, #0
 800818c:	d039      	beq.n	8008202 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d01c      	beq.n	80081d0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008196:	4b0d      	ldr	r3, [pc, #52]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a0c      	ldr	r2, [pc, #48]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 800819c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80081a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80081a2:	f7fb f91f 	bl	80033e4 <HAL_GetTick>
 80081a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80081a8:	e008      	b.n	80081bc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80081aa:	f7fb f91b 	bl	80033e4 <HAL_GetTick>
 80081ae:	4602      	mov	r2, r0
 80081b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d901      	bls.n	80081bc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e1dd      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80081bc:	4b03      	ldr	r3, [pc, #12]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d0f0      	beq.n	80081aa <HAL_RCC_OscConfig+0x4d6>
 80081c8:	e01b      	b.n	8008202 <HAL_RCC_OscConfig+0x52e>
 80081ca:	bf00      	nop
 80081cc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80081d0:	4b9b      	ldr	r3, [pc, #620]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a9a      	ldr	r2, [pc, #616]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80081d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80081dc:	f7fb f902 	bl	80033e4 <HAL_GetTick>
 80081e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80081e2:	e008      	b.n	80081f6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80081e4:	f7fb f8fe 	bl	80033e4 <HAL_GetTick>
 80081e8:	4602      	mov	r2, r0
 80081ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d901      	bls.n	80081f6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e1c0      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80081f6:	4b92      	ldr	r3, [pc, #584]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1f0      	bne.n	80081e4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0304 	and.w	r3, r3, #4
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 8081 	beq.w	8008312 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008210:	4b8c      	ldr	r3, [pc, #560]	@ (8008444 <HAL_RCC_OscConfig+0x770>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a8b      	ldr	r2, [pc, #556]	@ (8008444 <HAL_RCC_OscConfig+0x770>)
 8008216:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800821a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800821c:	f7fb f8e2 	bl	80033e4 <HAL_GetTick>
 8008220:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008222:	e008      	b.n	8008236 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008224:	f7fb f8de 	bl	80033e4 <HAL_GetTick>
 8008228:	4602      	mov	r2, r0
 800822a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	2b64      	cmp	r3, #100	@ 0x64
 8008230:	d901      	bls.n	8008236 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e1a0      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008236:	4b83      	ldr	r3, [pc, #524]	@ (8008444 <HAL_RCC_OscConfig+0x770>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800823e:	2b00      	cmp	r3, #0
 8008240:	d0f0      	beq.n	8008224 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	2b01      	cmp	r3, #1
 8008248:	d106      	bne.n	8008258 <HAL_RCC_OscConfig+0x584>
 800824a:	4b7d      	ldr	r3, [pc, #500]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 800824c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800824e:	4a7c      	ldr	r2, [pc, #496]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008250:	f043 0301 	orr.w	r3, r3, #1
 8008254:	6713      	str	r3, [r2, #112]	@ 0x70
 8008256:	e02d      	b.n	80082b4 <HAL_RCC_OscConfig+0x5e0>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10c      	bne.n	800827a <HAL_RCC_OscConfig+0x5a6>
 8008260:	4b77      	ldr	r3, [pc, #476]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008264:	4a76      	ldr	r2, [pc, #472]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008266:	f023 0301 	bic.w	r3, r3, #1
 800826a:	6713      	str	r3, [r2, #112]	@ 0x70
 800826c:	4b74      	ldr	r3, [pc, #464]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 800826e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008270:	4a73      	ldr	r2, [pc, #460]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008272:	f023 0304 	bic.w	r3, r3, #4
 8008276:	6713      	str	r3, [r2, #112]	@ 0x70
 8008278:	e01c      	b.n	80082b4 <HAL_RCC_OscConfig+0x5e0>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	2b05      	cmp	r3, #5
 8008280:	d10c      	bne.n	800829c <HAL_RCC_OscConfig+0x5c8>
 8008282:	4b6f      	ldr	r3, [pc, #444]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008286:	4a6e      	ldr	r2, [pc, #440]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008288:	f043 0304 	orr.w	r3, r3, #4
 800828c:	6713      	str	r3, [r2, #112]	@ 0x70
 800828e:	4b6c      	ldr	r3, [pc, #432]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008292:	4a6b      	ldr	r2, [pc, #428]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008294:	f043 0301 	orr.w	r3, r3, #1
 8008298:	6713      	str	r3, [r2, #112]	@ 0x70
 800829a:	e00b      	b.n	80082b4 <HAL_RCC_OscConfig+0x5e0>
 800829c:	4b68      	ldr	r3, [pc, #416]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 800829e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082a0:	4a67      	ldr	r2, [pc, #412]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80082a2:	f023 0301 	bic.w	r3, r3, #1
 80082a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80082a8:	4b65      	ldr	r3, [pc, #404]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80082aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082ac:	4a64      	ldr	r2, [pc, #400]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80082ae:	f023 0304 	bic.w	r3, r3, #4
 80082b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d015      	beq.n	80082e8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082bc:	f7fb f892 	bl	80033e4 <HAL_GetTick>
 80082c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082c2:	e00a      	b.n	80082da <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082c4:	f7fb f88e 	bl	80033e4 <HAL_GetTick>
 80082c8:	4602      	mov	r2, r0
 80082ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d901      	bls.n	80082da <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e14e      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082da:	4b59      	ldr	r3, [pc, #356]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80082dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082de:	f003 0302 	and.w	r3, r3, #2
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d0ee      	beq.n	80082c4 <HAL_RCC_OscConfig+0x5f0>
 80082e6:	e014      	b.n	8008312 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082e8:	f7fb f87c 	bl	80033e4 <HAL_GetTick>
 80082ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80082ee:	e00a      	b.n	8008306 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082f0:	f7fb f878 	bl	80033e4 <HAL_GetTick>
 80082f4:	4602      	mov	r2, r0
 80082f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082fe:	4293      	cmp	r3, r2
 8008300:	d901      	bls.n	8008306 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e138      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008306:	4b4e      	ldr	r3, [pc, #312]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800830a:	f003 0302 	and.w	r3, r3, #2
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1ee      	bne.n	80082f0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008316:	2b00      	cmp	r3, #0
 8008318:	f000 812d 	beq.w	8008576 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800831c:	4b48      	ldr	r3, [pc, #288]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008324:	2b18      	cmp	r3, #24
 8008326:	f000 80bd 	beq.w	80084a4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800832e:	2b02      	cmp	r3, #2
 8008330:	f040 809e 	bne.w	8008470 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008334:	4b42      	ldr	r3, [pc, #264]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a41      	ldr	r2, [pc, #260]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 800833a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800833e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008340:	f7fb f850 	bl	80033e4 <HAL_GetTick>
 8008344:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008346:	e008      	b.n	800835a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008348:	f7fb f84c 	bl	80033e4 <HAL_GetTick>
 800834c:	4602      	mov	r2, r0
 800834e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	2b02      	cmp	r3, #2
 8008354:	d901      	bls.n	800835a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008356:	2303      	movs	r3, #3
 8008358:	e10e      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800835a:	4b39      	ldr	r3, [pc, #228]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1f0      	bne.n	8008348 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008366:	4b36      	ldr	r3, [pc, #216]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008368:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800836a:	4b37      	ldr	r3, [pc, #220]	@ (8008448 <HAL_RCC_OscConfig+0x774>)
 800836c:	4013      	ands	r3, r2
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008376:	0112      	lsls	r2, r2, #4
 8008378:	430a      	orrs	r2, r1
 800837a:	4931      	ldr	r1, [pc, #196]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 800837c:	4313      	orrs	r3, r2
 800837e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008384:	3b01      	subs	r3, #1
 8008386:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800838e:	3b01      	subs	r3, #1
 8008390:	025b      	lsls	r3, r3, #9
 8008392:	b29b      	uxth	r3, r3
 8008394:	431a      	orrs	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800839a:	3b01      	subs	r3, #1
 800839c:	041b      	lsls	r3, r3, #16
 800839e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80083a2:	431a      	orrs	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083a8:	3b01      	subs	r3, #1
 80083aa:	061b      	lsls	r3, r3, #24
 80083ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80083b0:	4923      	ldr	r1, [pc, #140]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80083b2:	4313      	orrs	r3, r2
 80083b4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80083b6:	4b22      	ldr	r3, [pc, #136]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80083b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ba:	4a21      	ldr	r2, [pc, #132]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80083bc:	f023 0301 	bic.w	r3, r3, #1
 80083c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80083c2:	4b1f      	ldr	r3, [pc, #124]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80083c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083c6:	4b21      	ldr	r3, [pc, #132]	@ (800844c <HAL_RCC_OscConfig+0x778>)
 80083c8:	4013      	ands	r3, r2
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80083ce:	00d2      	lsls	r2, r2, #3
 80083d0:	491b      	ldr	r1, [pc, #108]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80083d2:	4313      	orrs	r3, r2
 80083d4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80083d6:	4b1a      	ldr	r3, [pc, #104]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80083d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083da:	f023 020c 	bic.w	r2, r3, #12
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e2:	4917      	ldr	r1, [pc, #92]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80083e4:	4313      	orrs	r3, r2
 80083e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80083e8:	4b15      	ldr	r3, [pc, #84]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80083ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ec:	f023 0202 	bic.w	r2, r3, #2
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083f4:	4912      	ldr	r1, [pc, #72]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80083fa:	4b11      	ldr	r3, [pc, #68]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80083fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083fe:	4a10      	ldr	r2, [pc, #64]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008404:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008406:	4b0e      	ldr	r3, [pc, #56]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800840a:	4a0d      	ldr	r2, [pc, #52]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 800840c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008410:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008412:	4b0b      	ldr	r3, [pc, #44]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008416:	4a0a      	ldr	r2, [pc, #40]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008418:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800841c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800841e:	4b08      	ldr	r3, [pc, #32]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008422:	4a07      	ldr	r2, [pc, #28]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008424:	f043 0301 	orr.w	r3, r3, #1
 8008428:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800842a:	4b05      	ldr	r3, [pc, #20]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a04      	ldr	r2, [pc, #16]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008430:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008436:	f7fa ffd5 	bl	80033e4 <HAL_GetTick>
 800843a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800843c:	e011      	b.n	8008462 <HAL_RCC_OscConfig+0x78e>
 800843e:	bf00      	nop
 8008440:	58024400 	.word	0x58024400
 8008444:	58024800 	.word	0x58024800
 8008448:	fffffc0c 	.word	0xfffffc0c
 800844c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008450:	f7fa ffc8 	bl	80033e4 <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	2b02      	cmp	r3, #2
 800845c:	d901      	bls.n	8008462 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e08a      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008462:	4b47      	ldr	r3, [pc, #284]	@ (8008580 <HAL_RCC_OscConfig+0x8ac>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d0f0      	beq.n	8008450 <HAL_RCC_OscConfig+0x77c>
 800846e:	e082      	b.n	8008576 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008470:	4b43      	ldr	r3, [pc, #268]	@ (8008580 <HAL_RCC_OscConfig+0x8ac>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a42      	ldr	r2, [pc, #264]	@ (8008580 <HAL_RCC_OscConfig+0x8ac>)
 8008476:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800847a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800847c:	f7fa ffb2 	bl	80033e4 <HAL_GetTick>
 8008480:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008482:	e008      	b.n	8008496 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008484:	f7fa ffae 	bl	80033e4 <HAL_GetTick>
 8008488:	4602      	mov	r2, r0
 800848a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	2b02      	cmp	r3, #2
 8008490:	d901      	bls.n	8008496 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008492:	2303      	movs	r3, #3
 8008494:	e070      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008496:	4b3a      	ldr	r3, [pc, #232]	@ (8008580 <HAL_RCC_OscConfig+0x8ac>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1f0      	bne.n	8008484 <HAL_RCC_OscConfig+0x7b0>
 80084a2:	e068      	b.n	8008576 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80084a4:	4b36      	ldr	r3, [pc, #216]	@ (8008580 <HAL_RCC_OscConfig+0x8ac>)
 80084a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80084aa:	4b35      	ldr	r3, [pc, #212]	@ (8008580 <HAL_RCC_OscConfig+0x8ac>)
 80084ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084ae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d031      	beq.n	800851c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	f003 0203 	and.w	r2, r3, #3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d12a      	bne.n	800851c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	091b      	lsrs	r3, r3, #4
 80084ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d122      	bne.n	800851c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d11a      	bne.n	800851c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	0a5b      	lsrs	r3, r3, #9
 80084ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084f2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d111      	bne.n	800851c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	0c1b      	lsrs	r3, r3, #16
 80084fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008504:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008506:	429a      	cmp	r2, r3
 8008508:	d108      	bne.n	800851c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	0e1b      	lsrs	r3, r3, #24
 800850e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008516:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008518:	429a      	cmp	r2, r3
 800851a:	d001      	beq.n	8008520 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	e02b      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008520:	4b17      	ldr	r3, [pc, #92]	@ (8008580 <HAL_RCC_OscConfig+0x8ac>)
 8008522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008524:	08db      	lsrs	r3, r3, #3
 8008526:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800852a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	429a      	cmp	r2, r3
 8008534:	d01f      	beq.n	8008576 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008536:	4b12      	ldr	r3, [pc, #72]	@ (8008580 <HAL_RCC_OscConfig+0x8ac>)
 8008538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800853a:	4a11      	ldr	r2, [pc, #68]	@ (8008580 <HAL_RCC_OscConfig+0x8ac>)
 800853c:	f023 0301 	bic.w	r3, r3, #1
 8008540:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008542:	f7fa ff4f 	bl	80033e4 <HAL_GetTick>
 8008546:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008548:	bf00      	nop
 800854a:	f7fa ff4b 	bl	80033e4 <HAL_GetTick>
 800854e:	4602      	mov	r2, r0
 8008550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008552:	4293      	cmp	r3, r2
 8008554:	d0f9      	beq.n	800854a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008556:	4b0a      	ldr	r3, [pc, #40]	@ (8008580 <HAL_RCC_OscConfig+0x8ac>)
 8008558:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800855a:	4b0a      	ldr	r3, [pc, #40]	@ (8008584 <HAL_RCC_OscConfig+0x8b0>)
 800855c:	4013      	ands	r3, r2
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008562:	00d2      	lsls	r2, r2, #3
 8008564:	4906      	ldr	r1, [pc, #24]	@ (8008580 <HAL_RCC_OscConfig+0x8ac>)
 8008566:	4313      	orrs	r3, r2
 8008568:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800856a:	4b05      	ldr	r3, [pc, #20]	@ (8008580 <HAL_RCC_OscConfig+0x8ac>)
 800856c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800856e:	4a04      	ldr	r2, [pc, #16]	@ (8008580 <HAL_RCC_OscConfig+0x8ac>)
 8008570:	f043 0301 	orr.w	r3, r3, #1
 8008574:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3730      	adds	r7, #48	@ 0x30
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	58024400 	.word	0x58024400
 8008584:	ffff0007 	.word	0xffff0007

08008588 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d101      	bne.n	800859c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e19c      	b.n	80088d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800859c:	4b8a      	ldr	r3, [pc, #552]	@ (80087c8 <HAL_RCC_ClockConfig+0x240>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 030f 	and.w	r3, r3, #15
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d910      	bls.n	80085cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085aa:	4b87      	ldr	r3, [pc, #540]	@ (80087c8 <HAL_RCC_ClockConfig+0x240>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f023 020f 	bic.w	r2, r3, #15
 80085b2:	4985      	ldr	r1, [pc, #532]	@ (80087c8 <HAL_RCC_ClockConfig+0x240>)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085ba:	4b83      	ldr	r3, [pc, #524]	@ (80087c8 <HAL_RCC_ClockConfig+0x240>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 030f 	and.w	r3, r3, #15
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d001      	beq.n	80085cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	e184      	b.n	80088d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 0304 	and.w	r3, r3, #4
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d010      	beq.n	80085fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	691a      	ldr	r2, [r3, #16]
 80085dc:	4b7b      	ldr	r3, [pc, #492]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d908      	bls.n	80085fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80085e8:	4b78      	ldr	r3, [pc, #480]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	4975      	ldr	r1, [pc, #468]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 80085f6:	4313      	orrs	r3, r2
 80085f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 0308 	and.w	r3, r3, #8
 8008602:	2b00      	cmp	r3, #0
 8008604:	d010      	beq.n	8008628 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	695a      	ldr	r2, [r3, #20]
 800860a:	4b70      	ldr	r3, [pc, #448]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 800860c:	69db      	ldr	r3, [r3, #28]
 800860e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008612:	429a      	cmp	r2, r3
 8008614:	d908      	bls.n	8008628 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008616:	4b6d      	ldr	r3, [pc, #436]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	695b      	ldr	r3, [r3, #20]
 8008622:	496a      	ldr	r1, [pc, #424]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 8008624:	4313      	orrs	r3, r2
 8008626:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 0310 	and.w	r3, r3, #16
 8008630:	2b00      	cmp	r3, #0
 8008632:	d010      	beq.n	8008656 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	699a      	ldr	r2, [r3, #24]
 8008638:	4b64      	ldr	r3, [pc, #400]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 800863a:	69db      	ldr	r3, [r3, #28]
 800863c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008640:	429a      	cmp	r2, r3
 8008642:	d908      	bls.n	8008656 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008644:	4b61      	ldr	r3, [pc, #388]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 8008646:	69db      	ldr	r3, [r3, #28]
 8008648:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	495e      	ldr	r1, [pc, #376]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 8008652:	4313      	orrs	r3, r2
 8008654:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 0320 	and.w	r3, r3, #32
 800865e:	2b00      	cmp	r3, #0
 8008660:	d010      	beq.n	8008684 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	69da      	ldr	r2, [r3, #28]
 8008666:	4b59      	ldr	r3, [pc, #356]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800866e:	429a      	cmp	r2, r3
 8008670:	d908      	bls.n	8008684 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008672:	4b56      	ldr	r3, [pc, #344]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	69db      	ldr	r3, [r3, #28]
 800867e:	4953      	ldr	r1, [pc, #332]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 8008680:	4313      	orrs	r3, r2
 8008682:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 0302 	and.w	r3, r3, #2
 800868c:	2b00      	cmp	r3, #0
 800868e:	d010      	beq.n	80086b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	68da      	ldr	r2, [r3, #12]
 8008694:	4b4d      	ldr	r3, [pc, #308]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 8008696:	699b      	ldr	r3, [r3, #24]
 8008698:	f003 030f 	and.w	r3, r3, #15
 800869c:	429a      	cmp	r2, r3
 800869e:	d908      	bls.n	80086b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086a0:	4b4a      	ldr	r3, [pc, #296]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	f023 020f 	bic.w	r2, r3, #15
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	4947      	ldr	r1, [pc, #284]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 80086ae:	4313      	orrs	r3, r2
 80086b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 0301 	and.w	r3, r3, #1
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d055      	beq.n	800876a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80086be:	4b43      	ldr	r3, [pc, #268]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	4940      	ldr	r1, [pc, #256]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 80086cc:	4313      	orrs	r3, r2
 80086ce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d107      	bne.n	80086e8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086d8:	4b3c      	ldr	r3, [pc, #240]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d121      	bne.n	8008728 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e0f6      	b.n	80088d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	2b03      	cmp	r3, #3
 80086ee:	d107      	bne.n	8008700 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086f0:	4b36      	ldr	r3, [pc, #216]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d115      	bne.n	8008728 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	e0ea      	b.n	80088d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d107      	bne.n	8008718 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008708:	4b30      	ldr	r3, [pc, #192]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008710:	2b00      	cmp	r3, #0
 8008712:	d109      	bne.n	8008728 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e0de      	b.n	80088d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008718:	4b2c      	ldr	r3, [pc, #176]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 0304 	and.w	r3, r3, #4
 8008720:	2b00      	cmp	r3, #0
 8008722:	d101      	bne.n	8008728 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e0d6      	b.n	80088d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008728:	4b28      	ldr	r3, [pc, #160]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	f023 0207 	bic.w	r2, r3, #7
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	4925      	ldr	r1, [pc, #148]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 8008736:	4313      	orrs	r3, r2
 8008738:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800873a:	f7fa fe53 	bl	80033e4 <HAL_GetTick>
 800873e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008740:	e00a      	b.n	8008758 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008742:	f7fa fe4f 	bl	80033e4 <HAL_GetTick>
 8008746:	4602      	mov	r2, r0
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	1ad3      	subs	r3, r2, r3
 800874c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008750:	4293      	cmp	r3, r2
 8008752:	d901      	bls.n	8008758 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008754:	2303      	movs	r3, #3
 8008756:	e0be      	b.n	80088d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008758:	4b1c      	ldr	r3, [pc, #112]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	00db      	lsls	r3, r3, #3
 8008766:	429a      	cmp	r2, r3
 8008768:	d1eb      	bne.n	8008742 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 0302 	and.w	r3, r3, #2
 8008772:	2b00      	cmp	r3, #0
 8008774:	d010      	beq.n	8008798 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	68da      	ldr	r2, [r3, #12]
 800877a:	4b14      	ldr	r3, [pc, #80]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	f003 030f 	and.w	r3, r3, #15
 8008782:	429a      	cmp	r2, r3
 8008784:	d208      	bcs.n	8008798 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008786:	4b11      	ldr	r3, [pc, #68]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	f023 020f 	bic.w	r2, r3, #15
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	490e      	ldr	r1, [pc, #56]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 8008794:	4313      	orrs	r3, r2
 8008796:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008798:	4b0b      	ldr	r3, [pc, #44]	@ (80087c8 <HAL_RCC_ClockConfig+0x240>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 030f 	and.w	r3, r3, #15
 80087a0:	683a      	ldr	r2, [r7, #0]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d214      	bcs.n	80087d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087a6:	4b08      	ldr	r3, [pc, #32]	@ (80087c8 <HAL_RCC_ClockConfig+0x240>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f023 020f 	bic.w	r2, r3, #15
 80087ae:	4906      	ldr	r1, [pc, #24]	@ (80087c8 <HAL_RCC_ClockConfig+0x240>)
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087b6:	4b04      	ldr	r3, [pc, #16]	@ (80087c8 <HAL_RCC_ClockConfig+0x240>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 030f 	and.w	r3, r3, #15
 80087be:	683a      	ldr	r2, [r7, #0]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d005      	beq.n	80087d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	e086      	b.n	80088d6 <HAL_RCC_ClockConfig+0x34e>
 80087c8:	52002000 	.word	0x52002000
 80087cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f003 0304 	and.w	r3, r3, #4
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d010      	beq.n	80087fe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	691a      	ldr	r2, [r3, #16]
 80087e0:	4b3f      	ldr	r3, [pc, #252]	@ (80088e0 <HAL_RCC_ClockConfig+0x358>)
 80087e2:	699b      	ldr	r3, [r3, #24]
 80087e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d208      	bcs.n	80087fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80087ec:	4b3c      	ldr	r3, [pc, #240]	@ (80088e0 <HAL_RCC_ClockConfig+0x358>)
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	4939      	ldr	r1, [pc, #228]	@ (80088e0 <HAL_RCC_ClockConfig+0x358>)
 80087fa:	4313      	orrs	r3, r2
 80087fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 0308 	and.w	r3, r3, #8
 8008806:	2b00      	cmp	r3, #0
 8008808:	d010      	beq.n	800882c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	695a      	ldr	r2, [r3, #20]
 800880e:	4b34      	ldr	r3, [pc, #208]	@ (80088e0 <HAL_RCC_ClockConfig+0x358>)
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008816:	429a      	cmp	r2, r3
 8008818:	d208      	bcs.n	800882c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800881a:	4b31      	ldr	r3, [pc, #196]	@ (80088e0 <HAL_RCC_ClockConfig+0x358>)
 800881c:	69db      	ldr	r3, [r3, #28]
 800881e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	695b      	ldr	r3, [r3, #20]
 8008826:	492e      	ldr	r1, [pc, #184]	@ (80088e0 <HAL_RCC_ClockConfig+0x358>)
 8008828:	4313      	orrs	r3, r2
 800882a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 0310 	and.w	r3, r3, #16
 8008834:	2b00      	cmp	r3, #0
 8008836:	d010      	beq.n	800885a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	699a      	ldr	r2, [r3, #24]
 800883c:	4b28      	ldr	r3, [pc, #160]	@ (80088e0 <HAL_RCC_ClockConfig+0x358>)
 800883e:	69db      	ldr	r3, [r3, #28]
 8008840:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008844:	429a      	cmp	r2, r3
 8008846:	d208      	bcs.n	800885a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008848:	4b25      	ldr	r3, [pc, #148]	@ (80088e0 <HAL_RCC_ClockConfig+0x358>)
 800884a:	69db      	ldr	r3, [r3, #28]
 800884c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	699b      	ldr	r3, [r3, #24]
 8008854:	4922      	ldr	r1, [pc, #136]	@ (80088e0 <HAL_RCC_ClockConfig+0x358>)
 8008856:	4313      	orrs	r3, r2
 8008858:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 0320 	and.w	r3, r3, #32
 8008862:	2b00      	cmp	r3, #0
 8008864:	d010      	beq.n	8008888 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	69da      	ldr	r2, [r3, #28]
 800886a:	4b1d      	ldr	r3, [pc, #116]	@ (80088e0 <HAL_RCC_ClockConfig+0x358>)
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008872:	429a      	cmp	r2, r3
 8008874:	d208      	bcs.n	8008888 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008876:	4b1a      	ldr	r3, [pc, #104]	@ (80088e0 <HAL_RCC_ClockConfig+0x358>)
 8008878:	6a1b      	ldr	r3, [r3, #32]
 800887a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	69db      	ldr	r3, [r3, #28]
 8008882:	4917      	ldr	r1, [pc, #92]	@ (80088e0 <HAL_RCC_ClockConfig+0x358>)
 8008884:	4313      	orrs	r3, r2
 8008886:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008888:	f000 f834 	bl	80088f4 <HAL_RCC_GetSysClockFreq>
 800888c:	4602      	mov	r2, r0
 800888e:	4b14      	ldr	r3, [pc, #80]	@ (80088e0 <HAL_RCC_ClockConfig+0x358>)
 8008890:	699b      	ldr	r3, [r3, #24]
 8008892:	0a1b      	lsrs	r3, r3, #8
 8008894:	f003 030f 	and.w	r3, r3, #15
 8008898:	4912      	ldr	r1, [pc, #72]	@ (80088e4 <HAL_RCC_ClockConfig+0x35c>)
 800889a:	5ccb      	ldrb	r3, [r1, r3]
 800889c:	f003 031f 	and.w	r3, r3, #31
 80088a0:	fa22 f303 	lsr.w	r3, r2, r3
 80088a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088a6:	4b0e      	ldr	r3, [pc, #56]	@ (80088e0 <HAL_RCC_ClockConfig+0x358>)
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	f003 030f 	and.w	r3, r3, #15
 80088ae:	4a0d      	ldr	r2, [pc, #52]	@ (80088e4 <HAL_RCC_ClockConfig+0x35c>)
 80088b0:	5cd3      	ldrb	r3, [r2, r3]
 80088b2:	f003 031f 	and.w	r3, r3, #31
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	fa22 f303 	lsr.w	r3, r2, r3
 80088bc:	4a0a      	ldr	r2, [pc, #40]	@ (80088e8 <HAL_RCC_ClockConfig+0x360>)
 80088be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80088c0:	4a0a      	ldr	r2, [pc, #40]	@ (80088ec <HAL_RCC_ClockConfig+0x364>)
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80088c6:	4b0a      	ldr	r3, [pc, #40]	@ (80088f0 <HAL_RCC_ClockConfig+0x368>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7f9 fd7e 	bl	80023cc <HAL_InitTick>
 80088d0:	4603      	mov	r3, r0
 80088d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80088d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3718      	adds	r7, #24
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	58024400 	.word	0x58024400
 80088e4:	08023418 	.word	0x08023418
 80088e8:	24000008 	.word	0x24000008
 80088ec:	24000004 	.word	0x24000004
 80088f0:	2400000c 	.word	0x2400000c

080088f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b089      	sub	sp, #36	@ 0x24
 80088f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088fa:	4bb3      	ldr	r3, [pc, #716]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008902:	2b18      	cmp	r3, #24
 8008904:	f200 8155 	bhi.w	8008bb2 <HAL_RCC_GetSysClockFreq+0x2be>
 8008908:	a201      	add	r2, pc, #4	@ (adr r2, 8008910 <HAL_RCC_GetSysClockFreq+0x1c>)
 800890a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890e:	bf00      	nop
 8008910:	08008975 	.word	0x08008975
 8008914:	08008bb3 	.word	0x08008bb3
 8008918:	08008bb3 	.word	0x08008bb3
 800891c:	08008bb3 	.word	0x08008bb3
 8008920:	08008bb3 	.word	0x08008bb3
 8008924:	08008bb3 	.word	0x08008bb3
 8008928:	08008bb3 	.word	0x08008bb3
 800892c:	08008bb3 	.word	0x08008bb3
 8008930:	0800899b 	.word	0x0800899b
 8008934:	08008bb3 	.word	0x08008bb3
 8008938:	08008bb3 	.word	0x08008bb3
 800893c:	08008bb3 	.word	0x08008bb3
 8008940:	08008bb3 	.word	0x08008bb3
 8008944:	08008bb3 	.word	0x08008bb3
 8008948:	08008bb3 	.word	0x08008bb3
 800894c:	08008bb3 	.word	0x08008bb3
 8008950:	080089a1 	.word	0x080089a1
 8008954:	08008bb3 	.word	0x08008bb3
 8008958:	08008bb3 	.word	0x08008bb3
 800895c:	08008bb3 	.word	0x08008bb3
 8008960:	08008bb3 	.word	0x08008bb3
 8008964:	08008bb3 	.word	0x08008bb3
 8008968:	08008bb3 	.word	0x08008bb3
 800896c:	08008bb3 	.word	0x08008bb3
 8008970:	080089a7 	.word	0x080089a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008974:	4b94      	ldr	r3, [pc, #592]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0320 	and.w	r3, r3, #32
 800897c:	2b00      	cmp	r3, #0
 800897e:	d009      	beq.n	8008994 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008980:	4b91      	ldr	r3, [pc, #580]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	08db      	lsrs	r3, r3, #3
 8008986:	f003 0303 	and.w	r3, r3, #3
 800898a:	4a90      	ldr	r2, [pc, #576]	@ (8008bcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800898c:	fa22 f303 	lsr.w	r3, r2, r3
 8008990:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008992:	e111      	b.n	8008bb8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008994:	4b8d      	ldr	r3, [pc, #564]	@ (8008bcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008996:	61bb      	str	r3, [r7, #24]
      break;
 8008998:	e10e      	b.n	8008bb8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800899a:	4b8d      	ldr	r3, [pc, #564]	@ (8008bd0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800899c:	61bb      	str	r3, [r7, #24]
      break;
 800899e:	e10b      	b.n	8008bb8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80089a0:	4b8c      	ldr	r3, [pc, #560]	@ (8008bd4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80089a2:	61bb      	str	r3, [r7, #24]
      break;
 80089a4:	e108      	b.n	8008bb8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089a6:	4b88      	ldr	r3, [pc, #544]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089aa:	f003 0303 	and.w	r3, r3, #3
 80089ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80089b0:	4b85      	ldr	r3, [pc, #532]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089b4:	091b      	lsrs	r3, r3, #4
 80089b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80089ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80089bc:	4b82      	ldr	r3, [pc, #520]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089c0:	f003 0301 	and.w	r3, r3, #1
 80089c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80089c6:	4b80      	ldr	r3, [pc, #512]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089ca:	08db      	lsrs	r3, r3, #3
 80089cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	fb02 f303 	mul.w	r3, r2, r3
 80089d6:	ee07 3a90 	vmov	s15, r3
 80089da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f000 80e1 	beq.w	8008bac <HAL_RCC_GetSysClockFreq+0x2b8>
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	f000 8083 	beq.w	8008af8 <HAL_RCC_GetSysClockFreq+0x204>
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	2b02      	cmp	r3, #2
 80089f6:	f200 80a1 	bhi.w	8008b3c <HAL_RCC_GetSysClockFreq+0x248>
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d003      	beq.n	8008a08 <HAL_RCC_GetSysClockFreq+0x114>
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d056      	beq.n	8008ab4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008a06:	e099      	b.n	8008b3c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a08:	4b6f      	ldr	r3, [pc, #444]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 0320 	and.w	r3, r3, #32
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d02d      	beq.n	8008a70 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a14:	4b6c      	ldr	r3, [pc, #432]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	08db      	lsrs	r3, r3, #3
 8008a1a:	f003 0303 	and.w	r3, r3, #3
 8008a1e:	4a6b      	ldr	r2, [pc, #428]	@ (8008bcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a20:	fa22 f303 	lsr.w	r3, r2, r3
 8008a24:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	ee07 3a90 	vmov	s15, r3
 8008a2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	ee07 3a90 	vmov	s15, r3
 8008a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a3e:	4b62      	ldr	r3, [pc, #392]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a46:	ee07 3a90 	vmov	s15, r3
 8008a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a52:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008bd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a6a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008a6e:	e087      	b.n	8008b80 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	ee07 3a90 	vmov	s15, r3
 8008a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a7a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008bdc <HAL_RCC_GetSysClockFreq+0x2e8>
 8008a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a82:	4b51      	ldr	r3, [pc, #324]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a8a:	ee07 3a90 	vmov	s15, r3
 8008a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a92:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a96:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008bd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008ab2:	e065      	b.n	8008b80 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	ee07 3a90 	vmov	s15, r3
 8008aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008abe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008be0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ac6:	4b40      	ldr	r3, [pc, #256]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ace:	ee07 3a90 	vmov	s15, r3
 8008ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ad6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ada:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008bd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ae6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008af2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008af6:	e043      	b.n	8008b80 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	ee07 3a90 	vmov	s15, r3
 8008afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b02:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008be4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b12:	ee07 3a90 	vmov	s15, r3
 8008b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b1e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008bd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b3a:	e021      	b.n	8008b80 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	ee07 3a90 	vmov	s15, r3
 8008b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b46:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008be0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b56:	ee07 3a90 	vmov	s15, r3
 8008b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b62:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008bd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b7e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008b80:	4b11      	ldr	r3, [pc, #68]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b84:	0a5b      	lsrs	r3, r3, #9
 8008b86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	ee07 3a90 	vmov	s15, r3
 8008b94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b98:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ba4:	ee17 3a90 	vmov	r3, s15
 8008ba8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008baa:	e005      	b.n	8008bb8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008bac:	2300      	movs	r3, #0
 8008bae:	61bb      	str	r3, [r7, #24]
      break;
 8008bb0:	e002      	b.n	8008bb8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008bb2:	4b07      	ldr	r3, [pc, #28]	@ (8008bd0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008bb4:	61bb      	str	r3, [r7, #24]
      break;
 8008bb6:	bf00      	nop
  }

  return sysclockfreq;
 8008bb8:	69bb      	ldr	r3, [r7, #24]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3724      	adds	r7, #36	@ 0x24
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	58024400 	.word	0x58024400
 8008bcc:	03d09000 	.word	0x03d09000
 8008bd0:	003d0900 	.word	0x003d0900
 8008bd4:	007a1200 	.word	0x007a1200
 8008bd8:	46000000 	.word	0x46000000
 8008bdc:	4c742400 	.word	0x4c742400
 8008be0:	4a742400 	.word	0x4a742400
 8008be4:	4af42400 	.word	0x4af42400

08008be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008bee:	f7ff fe81 	bl	80088f4 <HAL_RCC_GetSysClockFreq>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	4b10      	ldr	r3, [pc, #64]	@ (8008c38 <HAL_RCC_GetHCLKFreq+0x50>)
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	0a1b      	lsrs	r3, r3, #8
 8008bfa:	f003 030f 	and.w	r3, r3, #15
 8008bfe:	490f      	ldr	r1, [pc, #60]	@ (8008c3c <HAL_RCC_GetHCLKFreq+0x54>)
 8008c00:	5ccb      	ldrb	r3, [r1, r3]
 8008c02:	f003 031f 	and.w	r3, r3, #31
 8008c06:	fa22 f303 	lsr.w	r3, r2, r3
 8008c0a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c38 <HAL_RCC_GetHCLKFreq+0x50>)
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	f003 030f 	and.w	r3, r3, #15
 8008c14:	4a09      	ldr	r2, [pc, #36]	@ (8008c3c <HAL_RCC_GetHCLKFreq+0x54>)
 8008c16:	5cd3      	ldrb	r3, [r2, r3]
 8008c18:	f003 031f 	and.w	r3, r3, #31
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c22:	4a07      	ldr	r2, [pc, #28]	@ (8008c40 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c24:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c26:	4a07      	ldr	r2, [pc, #28]	@ (8008c44 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008c2c:	4b04      	ldr	r3, [pc, #16]	@ (8008c40 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	58024400 	.word	0x58024400
 8008c3c:	08023418 	.word	0x08023418
 8008c40:	24000008 	.word	0x24000008
 8008c44:	24000004 	.word	0x24000004

08008c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008c4c:	f7ff ffcc 	bl	8008be8 <HAL_RCC_GetHCLKFreq>
 8008c50:	4602      	mov	r2, r0
 8008c52:	4b06      	ldr	r3, [pc, #24]	@ (8008c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c54:	69db      	ldr	r3, [r3, #28]
 8008c56:	091b      	lsrs	r3, r3, #4
 8008c58:	f003 0307 	and.w	r3, r3, #7
 8008c5c:	4904      	ldr	r1, [pc, #16]	@ (8008c70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c5e:	5ccb      	ldrb	r3, [r1, r3]
 8008c60:	f003 031f 	and.w	r3, r3, #31
 8008c64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	58024400 	.word	0x58024400
 8008c70:	08023418 	.word	0x08023418

08008c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008c78:	f7ff ffb6 	bl	8008be8 <HAL_RCC_GetHCLKFreq>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	4b06      	ldr	r3, [pc, #24]	@ (8008c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c80:	69db      	ldr	r3, [r3, #28]
 8008c82:	0a1b      	lsrs	r3, r3, #8
 8008c84:	f003 0307 	and.w	r3, r3, #7
 8008c88:	4904      	ldr	r1, [pc, #16]	@ (8008c9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c8a:	5ccb      	ldrb	r3, [r1, r3]
 8008c8c:	f003 031f 	and.w	r3, r3, #31
 8008c90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	58024400 	.word	0x58024400
 8008c9c:	08023418 	.word	0x08023418

08008ca0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	223f      	movs	r2, #63	@ 0x3f
 8008cae:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8008d1c <HAL_RCC_GetClockConfig+0x7c>)
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	f003 0207 	and.w	r2, r3, #7
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008cbc:	4b17      	ldr	r3, [pc, #92]	@ (8008d1c <HAL_RCC_GetClockConfig+0x7c>)
 8008cbe:	699b      	ldr	r3, [r3, #24]
 8008cc0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008cc8:	4b14      	ldr	r3, [pc, #80]	@ (8008d1c <HAL_RCC_GetClockConfig+0x7c>)
 8008cca:	699b      	ldr	r3, [r3, #24]
 8008ccc:	f003 020f 	and.w	r2, r3, #15
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008cd4:	4b11      	ldr	r3, [pc, #68]	@ (8008d1c <HAL_RCC_GetClockConfig+0x7c>)
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8008d1c <HAL_RCC_GetClockConfig+0x7c>)
 8008ce2:	69db      	ldr	r3, [r3, #28]
 8008ce4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008cec:	4b0b      	ldr	r3, [pc, #44]	@ (8008d1c <HAL_RCC_GetClockConfig+0x7c>)
 8008cee:	69db      	ldr	r3, [r3, #28]
 8008cf0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008cf8:	4b08      	ldr	r3, [pc, #32]	@ (8008d1c <HAL_RCC_GetClockConfig+0x7c>)
 8008cfa:	6a1b      	ldr	r3, [r3, #32]
 8008cfc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008d04:	4b06      	ldr	r3, [pc, #24]	@ (8008d20 <HAL_RCC_GetClockConfig+0x80>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 020f 	and.w	r2, r3, #15
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	601a      	str	r2, [r3, #0]
}
 8008d10:	bf00      	nop
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr
 8008d1c:	58024400 	.word	0x58024400
 8008d20:	52002000 	.word	0x52002000

08008d24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d28:	b0ca      	sub	sp, #296	@ 0x128
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008d30:	2300      	movs	r3, #0
 8008d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008d36:	2300      	movs	r3, #0
 8008d38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008d48:	2500      	movs	r5, #0
 8008d4a:	ea54 0305 	orrs.w	r3, r4, r5
 8008d4e:	d049      	beq.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d5a:	d02f      	beq.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008d5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d60:	d828      	bhi.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008d62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d66:	d01a      	beq.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008d68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d6c:	d822      	bhi.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d003      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008d72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d76:	d007      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008d78:	e01c      	b.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d7a:	4bb8      	ldr	r3, [pc, #736]	@ (800905c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d7e:	4ab7      	ldr	r2, [pc, #732]	@ (800905c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d86:	e01a      	b.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d8c:	3308      	adds	r3, #8
 8008d8e:	2102      	movs	r1, #2
 8008d90:	4618      	mov	r0, r3
 8008d92:	f002 fb61 	bl	800b458 <RCCEx_PLL2_Config>
 8008d96:	4603      	mov	r3, r0
 8008d98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d9c:	e00f      	b.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008da2:	3328      	adds	r3, #40	@ 0x28
 8008da4:	2102      	movs	r1, #2
 8008da6:	4618      	mov	r0, r3
 8008da8:	f002 fc08 	bl	800b5bc <RCCEx_PLL3_Config>
 8008dac:	4603      	mov	r3, r0
 8008dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008db2:	e004      	b.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008dba:	e000      	b.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008dbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d10a      	bne.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008dc6:	4ba5      	ldr	r3, [pc, #660]	@ (800905c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008dc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008dd4:	4aa1      	ldr	r2, [pc, #644]	@ (800905c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008dd6:	430b      	orrs	r3, r1
 8008dd8:	6513      	str	r3, [r2, #80]	@ 0x50
 8008dda:	e003      	b.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ddc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008de0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dec:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008df0:	f04f 0900 	mov.w	r9, #0
 8008df4:	ea58 0309 	orrs.w	r3, r8, r9
 8008df8:	d047      	beq.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e00:	2b04      	cmp	r3, #4
 8008e02:	d82a      	bhi.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008e04:	a201      	add	r2, pc, #4	@ (adr r2, 8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0a:	bf00      	nop
 8008e0c:	08008e21 	.word	0x08008e21
 8008e10:	08008e2f 	.word	0x08008e2f
 8008e14:	08008e45 	.word	0x08008e45
 8008e18:	08008e63 	.word	0x08008e63
 8008e1c:	08008e63 	.word	0x08008e63
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e20:	4b8e      	ldr	r3, [pc, #568]	@ (800905c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e24:	4a8d      	ldr	r2, [pc, #564]	@ (800905c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e2c:	e01a      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e32:	3308      	adds	r3, #8
 8008e34:	2100      	movs	r1, #0
 8008e36:	4618      	mov	r0, r3
 8008e38:	f002 fb0e 	bl	800b458 <RCCEx_PLL2_Config>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e42:	e00f      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e48:	3328      	adds	r3, #40	@ 0x28
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f002 fbb5 	bl	800b5bc <RCCEx_PLL3_Config>
 8008e52:	4603      	mov	r3, r0
 8008e54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e58:	e004      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e60:	e000      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008e62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d10a      	bne.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e6c:	4b7b      	ldr	r3, [pc, #492]	@ (800905c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e70:	f023 0107 	bic.w	r1, r3, #7
 8008e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e7a:	4a78      	ldr	r2, [pc, #480]	@ (800905c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e7c:	430b      	orrs	r3, r1
 8008e7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008e80:	e003      	b.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e92:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008e96:	f04f 0b00 	mov.w	fp, #0
 8008e9a:	ea5a 030b 	orrs.w	r3, sl, fp
 8008e9e:	d04c      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ea6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008eaa:	d030      	beq.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008eac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008eb0:	d829      	bhi.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008eb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8008eb4:	d02d      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008eb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8008eb8:	d825      	bhi.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008eba:	2b80      	cmp	r3, #128	@ 0x80
 8008ebc:	d018      	beq.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008ebe:	2b80      	cmp	r3, #128	@ 0x80
 8008ec0:	d821      	bhi.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d002      	beq.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008ec6:	2b40      	cmp	r3, #64	@ 0x40
 8008ec8:	d007      	beq.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008eca:	e01c      	b.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ecc:	4b63      	ldr	r3, [pc, #396]	@ (800905c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed0:	4a62      	ldr	r2, [pc, #392]	@ (800905c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ed2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ed6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008ed8:	e01c      	b.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ede:	3308      	adds	r3, #8
 8008ee0:	2100      	movs	r1, #0
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f002 fab8 	bl	800b458 <RCCEx_PLL2_Config>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008eee:	e011      	b.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ef4:	3328      	adds	r3, #40	@ 0x28
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f002 fb5f 	bl	800b5bc <RCCEx_PLL3_Config>
 8008efe:	4603      	mov	r3, r0
 8008f00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008f04:	e006      	b.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f0c:	e002      	b.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008f0e:	bf00      	nop
 8008f10:	e000      	b.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008f12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d10a      	bne.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008f1c:	4b4f      	ldr	r3, [pc, #316]	@ (800905c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f20:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f2a:	4a4c      	ldr	r2, [pc, #304]	@ (800905c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f2c:	430b      	orrs	r3, r1
 8008f2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f30:	e003      	b.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f42:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008f46:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008f50:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008f54:	460b      	mov	r3, r1
 8008f56:	4313      	orrs	r3, r2
 8008f58:	d053      	beq.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008f62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008f66:	d035      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008f68:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008f6c:	d82e      	bhi.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008f6e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008f72:	d031      	beq.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008f74:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008f78:	d828      	bhi.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008f7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f7e:	d01a      	beq.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008f80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f84:	d822      	bhi.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d003      	beq.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008f8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008f8e:	d007      	beq.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008f90:	e01c      	b.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f92:	4b32      	ldr	r3, [pc, #200]	@ (800905c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f96:	4a31      	ldr	r2, [pc, #196]	@ (800905c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f9e:	e01c      	b.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fa4:	3308      	adds	r3, #8
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f002 fa55 	bl	800b458 <RCCEx_PLL2_Config>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008fb4:	e011      	b.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fba:	3328      	adds	r3, #40	@ 0x28
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f002 fafc 	bl	800b5bc <RCCEx_PLL3_Config>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fca:	e006      	b.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008fd2:	e002      	b.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008fd4:	bf00      	nop
 8008fd6:	e000      	b.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008fd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d10b      	bne.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800905c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fe6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008ff2:	4a1a      	ldr	r2, [pc, #104]	@ (800905c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ff4:	430b      	orrs	r3, r1
 8008ff6:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ff8:	e003      	b.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ffe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800900e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009012:	2300      	movs	r3, #0
 8009014:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009018:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800901c:	460b      	mov	r3, r1
 800901e:	4313      	orrs	r3, r2
 8009020:	d056      	beq.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009026:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800902a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800902e:	d038      	beq.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009030:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009034:	d831      	bhi.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009036:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800903a:	d034      	beq.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800903c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009040:	d82b      	bhi.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009042:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009046:	d01d      	beq.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009048:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800904c:	d825      	bhi.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800904e:	2b00      	cmp	r3, #0
 8009050:	d006      	beq.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009052:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009056:	d00a      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009058:	e01f      	b.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800905a:	bf00      	nop
 800905c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009060:	4ba2      	ldr	r3, [pc, #648]	@ (80092ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009064:	4aa1      	ldr	r2, [pc, #644]	@ (80092ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009066:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800906a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800906c:	e01c      	b.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800906e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009072:	3308      	adds	r3, #8
 8009074:	2100      	movs	r1, #0
 8009076:	4618      	mov	r0, r3
 8009078:	f002 f9ee 	bl	800b458 <RCCEx_PLL2_Config>
 800907c:	4603      	mov	r3, r0
 800907e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009082:	e011      	b.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009088:	3328      	adds	r3, #40	@ 0x28
 800908a:	2100      	movs	r1, #0
 800908c:	4618      	mov	r0, r3
 800908e:	f002 fa95 	bl	800b5bc <RCCEx_PLL3_Config>
 8009092:	4603      	mov	r3, r0
 8009094:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009098:	e006      	b.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80090a0:	e002      	b.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80090a2:	bf00      	nop
 80090a4:	e000      	b.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80090a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d10b      	bne.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80090b0:	4b8e      	ldr	r3, [pc, #568]	@ (80092ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090b4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80090b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80090c0:	4a8a      	ldr	r2, [pc, #552]	@ (80092ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090c2:	430b      	orrs	r3, r1
 80090c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80090c6:	e003      	b.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80090d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80090dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80090e0:	2300      	movs	r3, #0
 80090e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80090e6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80090ea:	460b      	mov	r3, r1
 80090ec:	4313      	orrs	r3, r2
 80090ee:	d03a      	beq.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80090f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090f6:	2b30      	cmp	r3, #48	@ 0x30
 80090f8:	d01f      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80090fa:	2b30      	cmp	r3, #48	@ 0x30
 80090fc:	d819      	bhi.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80090fe:	2b20      	cmp	r3, #32
 8009100:	d00c      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009102:	2b20      	cmp	r3, #32
 8009104:	d815      	bhi.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009106:	2b00      	cmp	r3, #0
 8009108:	d019      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800910a:	2b10      	cmp	r3, #16
 800910c:	d111      	bne.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800910e:	4b77      	ldr	r3, [pc, #476]	@ (80092ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009112:	4a76      	ldr	r2, [pc, #472]	@ (80092ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009118:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800911a:	e011      	b.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800911c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009120:	3308      	adds	r3, #8
 8009122:	2102      	movs	r1, #2
 8009124:	4618      	mov	r0, r3
 8009126:	f002 f997 	bl	800b458 <RCCEx_PLL2_Config>
 800912a:	4603      	mov	r3, r0
 800912c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009130:	e006      	b.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009138:	e002      	b.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800913a:	bf00      	nop
 800913c:	e000      	b.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800913e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009140:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009144:	2b00      	cmp	r3, #0
 8009146:	d10a      	bne.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009148:	4b68      	ldr	r3, [pc, #416]	@ (80092ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800914a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800914c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009156:	4a65      	ldr	r2, [pc, #404]	@ (80092ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009158:	430b      	orrs	r3, r1
 800915a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800915c:	e003      	b.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800915e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009162:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800916a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009172:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009176:	2300      	movs	r3, #0
 8009178:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800917c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009180:	460b      	mov	r3, r1
 8009182:	4313      	orrs	r3, r2
 8009184:	d051      	beq.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800918a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800918c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009190:	d035      	beq.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009192:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009196:	d82e      	bhi.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009198:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800919c:	d031      	beq.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800919e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80091a2:	d828      	bhi.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80091a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091a8:	d01a      	beq.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80091aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091ae:	d822      	bhi.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d003      	beq.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80091b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091b8:	d007      	beq.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80091ba:	e01c      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091bc:	4b4b      	ldr	r3, [pc, #300]	@ (80092ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091c0:	4a4a      	ldr	r2, [pc, #296]	@ (80092ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80091c8:	e01c      	b.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80091ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091ce:	3308      	adds	r3, #8
 80091d0:	2100      	movs	r1, #0
 80091d2:	4618      	mov	r0, r3
 80091d4:	f002 f940 	bl	800b458 <RCCEx_PLL2_Config>
 80091d8:	4603      	mov	r3, r0
 80091da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80091de:	e011      	b.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091e4:	3328      	adds	r3, #40	@ 0x28
 80091e6:	2100      	movs	r1, #0
 80091e8:	4618      	mov	r0, r3
 80091ea:	f002 f9e7 	bl	800b5bc <RCCEx_PLL3_Config>
 80091ee:	4603      	mov	r3, r0
 80091f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80091f4:	e006      	b.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80091fc:	e002      	b.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80091fe:	bf00      	nop
 8009200:	e000      	b.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009202:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009204:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009208:	2b00      	cmp	r3, #0
 800920a:	d10a      	bne.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800920c:	4b37      	ldr	r3, [pc, #220]	@ (80092ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800920e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009210:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800921a:	4a34      	ldr	r2, [pc, #208]	@ (80092ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800921c:	430b      	orrs	r3, r1
 800921e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009220:	e003      	b.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009222:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009226:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800922a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800922e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009232:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009236:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800923a:	2300      	movs	r3, #0
 800923c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009240:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009244:	460b      	mov	r3, r1
 8009246:	4313      	orrs	r3, r2
 8009248:	d056      	beq.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800924a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800924e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009250:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009254:	d033      	beq.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009256:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800925a:	d82c      	bhi.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800925c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009260:	d02f      	beq.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009262:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009266:	d826      	bhi.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009268:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800926c:	d02b      	beq.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800926e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009272:	d820      	bhi.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009274:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009278:	d012      	beq.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800927a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800927e:	d81a      	bhi.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009280:	2b00      	cmp	r3, #0
 8009282:	d022      	beq.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009288:	d115      	bne.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800928a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800928e:	3308      	adds	r3, #8
 8009290:	2101      	movs	r1, #1
 8009292:	4618      	mov	r0, r3
 8009294:	f002 f8e0 	bl	800b458 <RCCEx_PLL2_Config>
 8009298:	4603      	mov	r3, r0
 800929a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800929e:	e015      	b.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80092a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092a4:	3328      	adds	r3, #40	@ 0x28
 80092a6:	2101      	movs	r1, #1
 80092a8:	4618      	mov	r0, r3
 80092aa:	f002 f987 	bl	800b5bc <RCCEx_PLL3_Config>
 80092ae:	4603      	mov	r3, r0
 80092b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80092b4:	e00a      	b.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80092bc:	e006      	b.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80092be:	bf00      	nop
 80092c0:	e004      	b.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80092c2:	bf00      	nop
 80092c4:	e002      	b.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80092c6:	bf00      	nop
 80092c8:	e000      	b.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80092ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d10d      	bne.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80092d4:	4b05      	ldr	r3, [pc, #20]	@ (80092ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092d8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80092dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092e2:	4a02      	ldr	r2, [pc, #8]	@ (80092ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092e4:	430b      	orrs	r3, r1
 80092e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80092e8:	e006      	b.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80092ea:	bf00      	nop
 80092ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80092f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009300:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009304:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009308:	2300      	movs	r3, #0
 800930a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800930e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009312:	460b      	mov	r3, r1
 8009314:	4313      	orrs	r3, r2
 8009316:	d055      	beq.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800931c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009320:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009324:	d033      	beq.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009326:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800932a:	d82c      	bhi.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800932c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009330:	d02f      	beq.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009336:	d826      	bhi.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009338:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800933c:	d02b      	beq.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800933e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009342:	d820      	bhi.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009344:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009348:	d012      	beq.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800934a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800934e:	d81a      	bhi.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009350:	2b00      	cmp	r3, #0
 8009352:	d022      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009354:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009358:	d115      	bne.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800935a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800935e:	3308      	adds	r3, #8
 8009360:	2101      	movs	r1, #1
 8009362:	4618      	mov	r0, r3
 8009364:	f002 f878 	bl	800b458 <RCCEx_PLL2_Config>
 8009368:	4603      	mov	r3, r0
 800936a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800936e:	e015      	b.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009374:	3328      	adds	r3, #40	@ 0x28
 8009376:	2101      	movs	r1, #1
 8009378:	4618      	mov	r0, r3
 800937a:	f002 f91f 	bl	800b5bc <RCCEx_PLL3_Config>
 800937e:	4603      	mov	r3, r0
 8009380:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009384:	e00a      	b.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800938c:	e006      	b.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800938e:	bf00      	nop
 8009390:	e004      	b.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009392:	bf00      	nop
 8009394:	e002      	b.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009396:	bf00      	nop
 8009398:	e000      	b.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800939a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800939c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10b      	bne.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80093a4:	4ba3      	ldr	r3, [pc, #652]	@ (8009634 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093a8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80093ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80093b4:	4a9f      	ldr	r2, [pc, #636]	@ (8009634 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093b6:	430b      	orrs	r3, r1
 80093b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80093ba:	e003      	b.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80093c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093cc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80093d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80093d4:	2300      	movs	r3, #0
 80093d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80093da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80093de:	460b      	mov	r3, r1
 80093e0:	4313      	orrs	r3, r2
 80093e2:	d037      	beq.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80093e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093ee:	d00e      	beq.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80093f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093f4:	d816      	bhi.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d018      	beq.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80093fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093fe:	d111      	bne.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009400:	4b8c      	ldr	r3, [pc, #560]	@ (8009634 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009404:	4a8b      	ldr	r2, [pc, #556]	@ (8009634 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009406:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800940a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800940c:	e00f      	b.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800940e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009412:	3308      	adds	r3, #8
 8009414:	2101      	movs	r1, #1
 8009416:	4618      	mov	r0, r3
 8009418:	f002 f81e 	bl	800b458 <RCCEx_PLL2_Config>
 800941c:	4603      	mov	r3, r0
 800941e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009422:	e004      	b.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800942a:	e000      	b.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800942c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800942e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009432:	2b00      	cmp	r3, #0
 8009434:	d10a      	bne.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009436:	4b7f      	ldr	r3, [pc, #508]	@ (8009634 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800943a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800943e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009444:	4a7b      	ldr	r2, [pc, #492]	@ (8009634 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009446:	430b      	orrs	r3, r1
 8009448:	6513      	str	r3, [r2, #80]	@ 0x50
 800944a:	e003      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800944c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009450:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009460:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009464:	2300      	movs	r3, #0
 8009466:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800946a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800946e:	460b      	mov	r3, r1
 8009470:	4313      	orrs	r3, r2
 8009472:	d039      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009478:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800947a:	2b03      	cmp	r3, #3
 800947c:	d81c      	bhi.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800947e:	a201      	add	r2, pc, #4	@ (adr r2, 8009484 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009484:	080094c1 	.word	0x080094c1
 8009488:	08009495 	.word	0x08009495
 800948c:	080094a3 	.word	0x080094a3
 8009490:	080094c1 	.word	0x080094c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009494:	4b67      	ldr	r3, [pc, #412]	@ (8009634 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009498:	4a66      	ldr	r2, [pc, #408]	@ (8009634 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800949a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800949e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80094a0:	e00f      	b.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80094a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094a6:	3308      	adds	r3, #8
 80094a8:	2102      	movs	r1, #2
 80094aa:	4618      	mov	r0, r3
 80094ac:	f001 ffd4 	bl	800b458 <RCCEx_PLL2_Config>
 80094b0:	4603      	mov	r3, r0
 80094b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80094b6:	e004      	b.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80094b8:	2301      	movs	r3, #1
 80094ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80094be:	e000      	b.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80094c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d10a      	bne.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80094ca:	4b5a      	ldr	r3, [pc, #360]	@ (8009634 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094ce:	f023 0103 	bic.w	r1, r3, #3
 80094d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094d8:	4a56      	ldr	r2, [pc, #344]	@ (8009634 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094da:	430b      	orrs	r3, r1
 80094dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80094de:	e003      	b.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80094e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80094f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80094f8:	2300      	movs	r3, #0
 80094fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80094fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009502:	460b      	mov	r3, r1
 8009504:	4313      	orrs	r3, r2
 8009506:	f000 809f 	beq.w	8009648 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800950a:	4b4b      	ldr	r3, [pc, #300]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a4a      	ldr	r2, [pc, #296]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009514:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009516:	f7f9 ff65 	bl	80033e4 <HAL_GetTick>
 800951a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800951e:	e00b      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009520:	f7f9 ff60 	bl	80033e4 <HAL_GetTick>
 8009524:	4602      	mov	r2, r0
 8009526:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800952a:	1ad3      	subs	r3, r2, r3
 800952c:	2b64      	cmp	r3, #100	@ 0x64
 800952e:	d903      	bls.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009530:	2303      	movs	r3, #3
 8009532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009536:	e005      	b.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009538:	4b3f      	ldr	r3, [pc, #252]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009540:	2b00      	cmp	r3, #0
 8009542:	d0ed      	beq.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009544:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009548:	2b00      	cmp	r3, #0
 800954a:	d179      	bne.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800954c:	4b39      	ldr	r3, [pc, #228]	@ (8009634 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800954e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009554:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009558:	4053      	eors	r3, r2
 800955a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800955e:	2b00      	cmp	r3, #0
 8009560:	d015      	beq.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009562:	4b34      	ldr	r3, [pc, #208]	@ (8009634 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009566:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800956a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800956e:	4b31      	ldr	r3, [pc, #196]	@ (8009634 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009572:	4a30      	ldr	r2, [pc, #192]	@ (8009634 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009578:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800957a:	4b2e      	ldr	r3, [pc, #184]	@ (8009634 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800957c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800957e:	4a2d      	ldr	r2, [pc, #180]	@ (8009634 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009580:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009584:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009586:	4a2b      	ldr	r2, [pc, #172]	@ (8009634 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009588:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800958c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800958e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009592:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009596:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800959a:	d118      	bne.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800959c:	f7f9 ff22 	bl	80033e4 <HAL_GetTick>
 80095a0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80095a4:	e00d      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095a6:	f7f9 ff1d 	bl	80033e4 <HAL_GetTick>
 80095aa:	4602      	mov	r2, r0
 80095ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80095b0:	1ad2      	subs	r2, r2, r3
 80095b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d903      	bls.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80095ba:	2303      	movs	r3, #3
 80095bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80095c0:	e005      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80095c2:	4b1c      	ldr	r3, [pc, #112]	@ (8009634 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095c6:	f003 0302 	and.w	r3, r3, #2
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d0eb      	beq.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80095ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d129      	bne.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80095de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80095e6:	d10e      	bne.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80095e8:	4b12      	ldr	r3, [pc, #72]	@ (8009634 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095ea:	691b      	ldr	r3, [r3, #16]
 80095ec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80095f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80095f8:	091a      	lsrs	r2, r3, #4
 80095fa:	4b10      	ldr	r3, [pc, #64]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80095fc:	4013      	ands	r3, r2
 80095fe:	4a0d      	ldr	r2, [pc, #52]	@ (8009634 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009600:	430b      	orrs	r3, r1
 8009602:	6113      	str	r3, [r2, #16]
 8009604:	e005      	b.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009606:	4b0b      	ldr	r3, [pc, #44]	@ (8009634 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009608:	691b      	ldr	r3, [r3, #16]
 800960a:	4a0a      	ldr	r2, [pc, #40]	@ (8009634 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800960c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009610:	6113      	str	r3, [r2, #16]
 8009612:	4b08      	ldr	r3, [pc, #32]	@ (8009634 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009614:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800961a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800961e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009622:	4a04      	ldr	r2, [pc, #16]	@ (8009634 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009624:	430b      	orrs	r3, r1
 8009626:	6713      	str	r3, [r2, #112]	@ 0x70
 8009628:	e00e      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800962a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800962e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8009632:	e009      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009634:	58024400 	.word	0x58024400
 8009638:	58024800 	.word	0x58024800
 800963c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009640:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009644:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800964c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009650:	f002 0301 	and.w	r3, r2, #1
 8009654:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009658:	2300      	movs	r3, #0
 800965a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800965e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009662:	460b      	mov	r3, r1
 8009664:	4313      	orrs	r3, r2
 8009666:	f000 8089 	beq.w	800977c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800966a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800966e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009670:	2b28      	cmp	r3, #40	@ 0x28
 8009672:	d86b      	bhi.n	800974c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009674:	a201      	add	r2, pc, #4	@ (adr r2, 800967c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967a:	bf00      	nop
 800967c:	08009755 	.word	0x08009755
 8009680:	0800974d 	.word	0x0800974d
 8009684:	0800974d 	.word	0x0800974d
 8009688:	0800974d 	.word	0x0800974d
 800968c:	0800974d 	.word	0x0800974d
 8009690:	0800974d 	.word	0x0800974d
 8009694:	0800974d 	.word	0x0800974d
 8009698:	0800974d 	.word	0x0800974d
 800969c:	08009721 	.word	0x08009721
 80096a0:	0800974d 	.word	0x0800974d
 80096a4:	0800974d 	.word	0x0800974d
 80096a8:	0800974d 	.word	0x0800974d
 80096ac:	0800974d 	.word	0x0800974d
 80096b0:	0800974d 	.word	0x0800974d
 80096b4:	0800974d 	.word	0x0800974d
 80096b8:	0800974d 	.word	0x0800974d
 80096bc:	08009737 	.word	0x08009737
 80096c0:	0800974d 	.word	0x0800974d
 80096c4:	0800974d 	.word	0x0800974d
 80096c8:	0800974d 	.word	0x0800974d
 80096cc:	0800974d 	.word	0x0800974d
 80096d0:	0800974d 	.word	0x0800974d
 80096d4:	0800974d 	.word	0x0800974d
 80096d8:	0800974d 	.word	0x0800974d
 80096dc:	08009755 	.word	0x08009755
 80096e0:	0800974d 	.word	0x0800974d
 80096e4:	0800974d 	.word	0x0800974d
 80096e8:	0800974d 	.word	0x0800974d
 80096ec:	0800974d 	.word	0x0800974d
 80096f0:	0800974d 	.word	0x0800974d
 80096f4:	0800974d 	.word	0x0800974d
 80096f8:	0800974d 	.word	0x0800974d
 80096fc:	08009755 	.word	0x08009755
 8009700:	0800974d 	.word	0x0800974d
 8009704:	0800974d 	.word	0x0800974d
 8009708:	0800974d 	.word	0x0800974d
 800970c:	0800974d 	.word	0x0800974d
 8009710:	0800974d 	.word	0x0800974d
 8009714:	0800974d 	.word	0x0800974d
 8009718:	0800974d 	.word	0x0800974d
 800971c:	08009755 	.word	0x08009755
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009724:	3308      	adds	r3, #8
 8009726:	2101      	movs	r1, #1
 8009728:	4618      	mov	r0, r3
 800972a:	f001 fe95 	bl	800b458 <RCCEx_PLL2_Config>
 800972e:	4603      	mov	r3, r0
 8009730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009734:	e00f      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800973a:	3328      	adds	r3, #40	@ 0x28
 800973c:	2101      	movs	r1, #1
 800973e:	4618      	mov	r0, r3
 8009740:	f001 ff3c 	bl	800b5bc <RCCEx_PLL3_Config>
 8009744:	4603      	mov	r3, r0
 8009746:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800974a:	e004      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009752:	e000      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009756:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800975a:	2b00      	cmp	r3, #0
 800975c:	d10a      	bne.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800975e:	4bbf      	ldr	r3, [pc, #764]	@ (8009a5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009762:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800976a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800976c:	4abb      	ldr	r2, [pc, #748]	@ (8009a5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800976e:	430b      	orrs	r3, r1
 8009770:	6553      	str	r3, [r2, #84]	@ 0x54
 8009772:	e003      	b.n	800977c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009774:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009778:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800977c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009784:	f002 0302 	and.w	r3, r2, #2
 8009788:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800978c:	2300      	movs	r3, #0
 800978e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009792:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009796:	460b      	mov	r3, r1
 8009798:	4313      	orrs	r3, r2
 800979a:	d041      	beq.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800979c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097a2:	2b05      	cmp	r3, #5
 80097a4:	d824      	bhi.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80097a6:	a201      	add	r2, pc, #4	@ (adr r2, 80097ac <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80097a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ac:	080097f9 	.word	0x080097f9
 80097b0:	080097c5 	.word	0x080097c5
 80097b4:	080097db 	.word	0x080097db
 80097b8:	080097f9 	.word	0x080097f9
 80097bc:	080097f9 	.word	0x080097f9
 80097c0:	080097f9 	.word	0x080097f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80097c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097c8:	3308      	adds	r3, #8
 80097ca:	2101      	movs	r1, #1
 80097cc:	4618      	mov	r0, r3
 80097ce:	f001 fe43 	bl	800b458 <RCCEx_PLL2_Config>
 80097d2:	4603      	mov	r3, r0
 80097d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80097d8:	e00f      	b.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80097da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097de:	3328      	adds	r3, #40	@ 0x28
 80097e0:	2101      	movs	r1, #1
 80097e2:	4618      	mov	r0, r3
 80097e4:	f001 feea 	bl	800b5bc <RCCEx_PLL3_Config>
 80097e8:	4603      	mov	r3, r0
 80097ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80097ee:	e004      	b.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80097f6:	e000      	b.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80097f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d10a      	bne.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009802:	4b96      	ldr	r3, [pc, #600]	@ (8009a5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009806:	f023 0107 	bic.w	r1, r3, #7
 800980a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800980e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009810:	4a92      	ldr	r2, [pc, #584]	@ (8009a5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009812:	430b      	orrs	r3, r1
 8009814:	6553      	str	r3, [r2, #84]	@ 0x54
 8009816:	e003      	b.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009818:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800981c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009828:	f002 0304 	and.w	r3, r2, #4
 800982c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009830:	2300      	movs	r3, #0
 8009832:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009836:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800983a:	460b      	mov	r3, r1
 800983c:	4313      	orrs	r3, r2
 800983e:	d044      	beq.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009844:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009848:	2b05      	cmp	r3, #5
 800984a:	d825      	bhi.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800984c:	a201      	add	r2, pc, #4	@ (adr r2, 8009854 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800984e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009852:	bf00      	nop
 8009854:	080098a1 	.word	0x080098a1
 8009858:	0800986d 	.word	0x0800986d
 800985c:	08009883 	.word	0x08009883
 8009860:	080098a1 	.word	0x080098a1
 8009864:	080098a1 	.word	0x080098a1
 8009868:	080098a1 	.word	0x080098a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800986c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009870:	3308      	adds	r3, #8
 8009872:	2101      	movs	r1, #1
 8009874:	4618      	mov	r0, r3
 8009876:	f001 fdef 	bl	800b458 <RCCEx_PLL2_Config>
 800987a:	4603      	mov	r3, r0
 800987c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009880:	e00f      	b.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009886:	3328      	adds	r3, #40	@ 0x28
 8009888:	2101      	movs	r1, #1
 800988a:	4618      	mov	r0, r3
 800988c:	f001 fe96 	bl	800b5bc <RCCEx_PLL3_Config>
 8009890:	4603      	mov	r3, r0
 8009892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009896:	e004      	b.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009898:	2301      	movs	r3, #1
 800989a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800989e:	e000      	b.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80098a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d10b      	bne.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80098aa:	4b6c      	ldr	r3, [pc, #432]	@ (8009a5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80098ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098ae:	f023 0107 	bic.w	r1, r3, #7
 80098b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80098ba:	4a68      	ldr	r2, [pc, #416]	@ (8009a5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80098bc:	430b      	orrs	r3, r1
 80098be:	6593      	str	r3, [r2, #88]	@ 0x58
 80098c0:	e003      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80098ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d2:	f002 0320 	and.w	r3, r2, #32
 80098d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80098da:	2300      	movs	r3, #0
 80098dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80098e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80098e4:	460b      	mov	r3, r1
 80098e6:	4313      	orrs	r3, r2
 80098e8:	d055      	beq.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80098ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80098f6:	d033      	beq.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80098f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80098fc:	d82c      	bhi.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80098fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009902:	d02f      	beq.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009908:	d826      	bhi.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800990a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800990e:	d02b      	beq.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009910:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009914:	d820      	bhi.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009916:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800991a:	d012      	beq.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800991c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009920:	d81a      	bhi.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009922:	2b00      	cmp	r3, #0
 8009924:	d022      	beq.n	800996c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009926:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800992a:	d115      	bne.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800992c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009930:	3308      	adds	r3, #8
 8009932:	2100      	movs	r1, #0
 8009934:	4618      	mov	r0, r3
 8009936:	f001 fd8f 	bl	800b458 <RCCEx_PLL2_Config>
 800993a:	4603      	mov	r3, r0
 800993c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009940:	e015      	b.n	800996e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009946:	3328      	adds	r3, #40	@ 0x28
 8009948:	2102      	movs	r1, #2
 800994a:	4618      	mov	r0, r3
 800994c:	f001 fe36 	bl	800b5bc <RCCEx_PLL3_Config>
 8009950:	4603      	mov	r3, r0
 8009952:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009956:	e00a      	b.n	800996e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800995e:	e006      	b.n	800996e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009960:	bf00      	nop
 8009962:	e004      	b.n	800996e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009964:	bf00      	nop
 8009966:	e002      	b.n	800996e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009968:	bf00      	nop
 800996a:	e000      	b.n	800996e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800996c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800996e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009972:	2b00      	cmp	r3, #0
 8009974:	d10b      	bne.n	800998e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009976:	4b39      	ldr	r3, [pc, #228]	@ (8009a5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800997a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800997e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009986:	4a35      	ldr	r2, [pc, #212]	@ (8009a5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009988:	430b      	orrs	r3, r1
 800998a:	6553      	str	r3, [r2, #84]	@ 0x54
 800998c:	e003      	b.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800998e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009992:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800999a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80099a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80099a6:	2300      	movs	r3, #0
 80099a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80099ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80099b0:	460b      	mov	r3, r1
 80099b2:	4313      	orrs	r3, r2
 80099b4:	d058      	beq.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80099b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80099be:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80099c2:	d033      	beq.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80099c4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80099c8:	d82c      	bhi.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80099ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099ce:	d02f      	beq.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80099d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099d4:	d826      	bhi.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80099d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80099da:	d02b      	beq.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80099dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80099e0:	d820      	bhi.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80099e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099e6:	d012      	beq.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80099e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099ec:	d81a      	bhi.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d022      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80099f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099f6:	d115      	bne.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099fc:	3308      	adds	r3, #8
 80099fe:	2100      	movs	r1, #0
 8009a00:	4618      	mov	r0, r3
 8009a02:	f001 fd29 	bl	800b458 <RCCEx_PLL2_Config>
 8009a06:	4603      	mov	r3, r0
 8009a08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009a0c:	e015      	b.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a12:	3328      	adds	r3, #40	@ 0x28
 8009a14:	2102      	movs	r1, #2
 8009a16:	4618      	mov	r0, r3
 8009a18:	f001 fdd0 	bl	800b5bc <RCCEx_PLL3_Config>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009a22:	e00a      	b.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a2a:	e006      	b.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009a2c:	bf00      	nop
 8009a2e:	e004      	b.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009a30:	bf00      	nop
 8009a32:	e002      	b.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009a34:	bf00      	nop
 8009a36:	e000      	b.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10e      	bne.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009a42:	4b06      	ldr	r3, [pc, #24]	@ (8009a5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a46:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009a52:	4a02      	ldr	r2, [pc, #8]	@ (8009a5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a54:	430b      	orrs	r3, r1
 8009a56:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a58:	e006      	b.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009a5a:	bf00      	nop
 8009a5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a70:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009a74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009a78:	2300      	movs	r3, #0
 8009a7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009a7e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009a82:	460b      	mov	r3, r1
 8009a84:	4313      	orrs	r3, r2
 8009a86:	d055      	beq.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009a90:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009a94:	d033      	beq.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009a96:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009a9a:	d82c      	bhi.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009a9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009aa0:	d02f      	beq.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009aa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009aa6:	d826      	bhi.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009aa8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009aac:	d02b      	beq.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009aae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009ab2:	d820      	bhi.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009ab4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ab8:	d012      	beq.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009aba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009abe:	d81a      	bhi.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d022      	beq.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009ac4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ac8:	d115      	bne.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ace:	3308      	adds	r3, #8
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f001 fcc0 	bl	800b458 <RCCEx_PLL2_Config>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009ade:	e015      	b.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ae4:	3328      	adds	r3, #40	@ 0x28
 8009ae6:	2102      	movs	r1, #2
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f001 fd67 	bl	800b5bc <RCCEx_PLL3_Config>
 8009aee:	4603      	mov	r3, r0
 8009af0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009af4:	e00a      	b.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009afc:	e006      	b.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009afe:	bf00      	nop
 8009b00:	e004      	b.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009b02:	bf00      	nop
 8009b04:	e002      	b.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009b06:	bf00      	nop
 8009b08:	e000      	b.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009b0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d10b      	bne.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009b14:	4ba1      	ldr	r3, [pc, #644]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b18:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009b24:	4a9d      	ldr	r2, [pc, #628]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b26:	430b      	orrs	r3, r1
 8009b28:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b2a:	e003      	b.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3c:	f002 0308 	and.w	r3, r2, #8
 8009b40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009b44:	2300      	movs	r3, #0
 8009b46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009b4a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009b4e:	460b      	mov	r3, r1
 8009b50:	4313      	orrs	r3, r2
 8009b52:	d01e      	beq.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b60:	d10c      	bne.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b66:	3328      	adds	r3, #40	@ 0x28
 8009b68:	2102      	movs	r1, #2
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f001 fd26 	bl	800b5bc <RCCEx_PLL3_Config>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d002      	beq.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009b76:	2301      	movs	r3, #1
 8009b78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009b7c:	4b87      	ldr	r3, [pc, #540]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b80:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b8c:	4a83      	ldr	r2, [pc, #524]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b8e:	430b      	orrs	r3, r1
 8009b90:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9a:	f002 0310 	and.w	r3, r2, #16
 8009b9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009ba8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009bac:	460b      	mov	r3, r1
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	d01e      	beq.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bbe:	d10c      	bne.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bc4:	3328      	adds	r3, #40	@ 0x28
 8009bc6:	2102      	movs	r1, #2
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f001 fcf7 	bl	800b5bc <RCCEx_PLL3_Config>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d002      	beq.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009bda:	4b70      	ldr	r3, [pc, #448]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bde:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009be6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009bea:	4a6c      	ldr	r2, [pc, #432]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009bec:	430b      	orrs	r3, r1
 8009bee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009bfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009c00:	2300      	movs	r3, #0
 8009c02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009c06:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	d03e      	beq.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009c18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c1c:	d022      	beq.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009c1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c22:	d81b      	bhi.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d003      	beq.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c2c:	d00b      	beq.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009c2e:	e015      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c34:	3308      	adds	r3, #8
 8009c36:	2100      	movs	r1, #0
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f001 fc0d 	bl	800b458 <RCCEx_PLL2_Config>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009c44:	e00f      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c4a:	3328      	adds	r3, #40	@ 0x28
 8009c4c:	2102      	movs	r1, #2
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f001 fcb4 	bl	800b5bc <RCCEx_PLL3_Config>
 8009c54:	4603      	mov	r3, r0
 8009c56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009c5a:	e004      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c62:	e000      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009c64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d10b      	bne.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009c6e:	4b4b      	ldr	r3, [pc, #300]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c72:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009c7e:	4a47      	ldr	r2, [pc, #284]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c80:	430b      	orrs	r3, r1
 8009c82:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c84:	e003      	b.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c96:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009c9a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009ca0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	d03b      	beq.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cb2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009cb6:	d01f      	beq.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009cb8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009cbc:	d818      	bhi.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009cbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009cc2:	d003      	beq.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009cc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009cc8:	d007      	beq.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009cca:	e011      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ccc:	4b33      	ldr	r3, [pc, #204]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cd0:	4a32      	ldr	r2, [pc, #200]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009cd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009cd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009cd8:	e00f      	b.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cde:	3328      	adds	r3, #40	@ 0x28
 8009ce0:	2101      	movs	r1, #1
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f001 fc6a 	bl	800b5bc <RCCEx_PLL3_Config>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009cee:	e004      	b.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009cf6:	e000      	b.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d10b      	bne.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009d02:	4b26      	ldr	r3, [pc, #152]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d06:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d12:	4a22      	ldr	r2, [pc, #136]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d14:	430b      	orrs	r3, r1
 8009d16:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d18:	e003      	b.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009d2e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d30:	2300      	movs	r3, #0
 8009d32:	677b      	str	r3, [r7, #116]	@ 0x74
 8009d34:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009d38:	460b      	mov	r3, r1
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	d034      	beq.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d003      	beq.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d4c:	d007      	beq.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009d4e:	e011      	b.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d50:	4b12      	ldr	r3, [pc, #72]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d54:	4a11      	ldr	r2, [pc, #68]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009d5c:	e00e      	b.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d62:	3308      	adds	r3, #8
 8009d64:	2102      	movs	r1, #2
 8009d66:	4618      	mov	r0, r3
 8009d68:	f001 fb76 	bl	800b458 <RCCEx_PLL2_Config>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009d72:	e003      	b.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10d      	bne.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009d84:	4b05      	ldr	r3, [pc, #20]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d88:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d92:	4a02      	ldr	r2, [pc, #8]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d94:	430b      	orrs	r3, r1
 8009d96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009d98:	e006      	b.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009d9a:	bf00      	nop
 8009d9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009da0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009da4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009db4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009db6:	2300      	movs	r3, #0
 8009db8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009dba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	d00c      	beq.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dc8:	3328      	adds	r3, #40	@ 0x28
 8009dca:	2102      	movs	r1, #2
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f001 fbf5 	bl	800b5bc <RCCEx_PLL3_Config>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d002      	beq.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009dea:	663b      	str	r3, [r7, #96]	@ 0x60
 8009dec:	2300      	movs	r3, #0
 8009dee:	667b      	str	r3, [r7, #100]	@ 0x64
 8009df0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009df4:	460b      	mov	r3, r1
 8009df6:	4313      	orrs	r3, r2
 8009df8:	d038      	beq.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e06:	d018      	beq.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009e08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e0c:	d811      	bhi.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009e0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e12:	d014      	beq.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009e14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e18:	d80b      	bhi.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d011      	beq.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009e1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e22:	d106      	bne.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e24:	4bc3      	ldr	r3, [pc, #780]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e28:	4ac2      	ldr	r2, [pc, #776]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009e30:	e008      	b.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e32:	2301      	movs	r3, #1
 8009e34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e38:	e004      	b.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009e3a:	bf00      	nop
 8009e3c:	e002      	b.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009e3e:	bf00      	nop
 8009e40:	e000      	b.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009e42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d10b      	bne.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009e4c:	4bb9      	ldr	r3, [pc, #740]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e50:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e5c:	4ab5      	ldr	r2, [pc, #724]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e5e:	430b      	orrs	r3, r1
 8009e60:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e62:	e003      	b.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e74:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009e78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e7e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009e82:	460b      	mov	r3, r1
 8009e84:	4313      	orrs	r3, r2
 8009e86:	d009      	beq.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009e88:	4baa      	ldr	r3, [pc, #680]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e8c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e96:	4aa7      	ldr	r2, [pc, #668]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e98:	430b      	orrs	r3, r1
 8009e9a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009ea8:	653b      	str	r3, [r7, #80]	@ 0x50
 8009eaa:	2300      	movs	r3, #0
 8009eac:	657b      	str	r3, [r7, #84]	@ 0x54
 8009eae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	d00a      	beq.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009eb8:	4b9e      	ldr	r3, [pc, #632]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009eba:	691b      	ldr	r3, [r3, #16]
 8009ebc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ec4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009ec8:	4a9a      	ldr	r2, [pc, #616]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009eca:	430b      	orrs	r3, r1
 8009ecc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009eda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009edc:	2300      	movs	r3, #0
 8009ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ee0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	d009      	beq.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009eea:	4b92      	ldr	r3, [pc, #584]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009eec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009eee:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ef6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ef8:	4a8e      	ldr	r2, [pc, #568]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009efa:	430b      	orrs	r3, r1
 8009efc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f06:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009f0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f10:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009f14:	460b      	mov	r3, r1
 8009f16:	4313      	orrs	r3, r2
 8009f18:	d00e      	beq.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009f1a:	4b86      	ldr	r3, [pc, #536]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f1c:	691b      	ldr	r3, [r3, #16]
 8009f1e:	4a85      	ldr	r2, [pc, #532]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f20:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009f24:	6113      	str	r3, [r2, #16]
 8009f26:	4b83      	ldr	r3, [pc, #524]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f28:	6919      	ldr	r1, [r3, #16]
 8009f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f2e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009f32:	4a80      	ldr	r2, [pc, #512]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f34:	430b      	orrs	r3, r1
 8009f36:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f40:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009f44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009f46:	2300      	movs	r3, #0
 8009f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f4a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009f4e:	460b      	mov	r3, r1
 8009f50:	4313      	orrs	r3, r2
 8009f52:	d009      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009f54:	4b77      	ldr	r3, [pc, #476]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f58:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f62:	4a74      	ldr	r2, [pc, #464]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f64:	430b      	orrs	r3, r1
 8009f66:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f70:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009f74:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f76:	2300      	movs	r3, #0
 8009f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f7a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009f7e:	460b      	mov	r3, r1
 8009f80:	4313      	orrs	r3, r2
 8009f82:	d00a      	beq.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009f84:	4b6b      	ldr	r3, [pc, #428]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f88:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f94:	4a67      	ldr	r2, [pc, #412]	@ (800a134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f96:	430b      	orrs	r3, r1
 8009f98:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009fa6:	f003 0301 	and.w	r3, r3, #1
 8009faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009fac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	d011      	beq.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fba:	3308      	adds	r3, #8
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f001 fa4a 	bl	800b458 <RCCEx_PLL2_Config>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009fca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d003      	beq.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe2:	2100      	movs	r1, #0
 8009fe4:	6239      	str	r1, [r7, #32]
 8009fe6:	f003 0302 	and.w	r3, r3, #2
 8009fea:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	d011      	beq.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ffa:	3308      	adds	r3, #8
 8009ffc:	2101      	movs	r1, #1
 8009ffe:	4618      	mov	r0, r3
 800a000:	f001 fa2a 	bl	800b458 <RCCEx_PLL2_Config>
 800a004:	4603      	mov	r3, r0
 800a006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a00a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d003      	beq.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a016:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a01a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a022:	2100      	movs	r1, #0
 800a024:	61b9      	str	r1, [r7, #24]
 800a026:	f003 0304 	and.w	r3, r3, #4
 800a02a:	61fb      	str	r3, [r7, #28]
 800a02c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a030:	460b      	mov	r3, r1
 800a032:	4313      	orrs	r3, r2
 800a034:	d011      	beq.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a03a:	3308      	adds	r3, #8
 800a03c:	2102      	movs	r1, #2
 800a03e:	4618      	mov	r0, r3
 800a040:	f001 fa0a 	bl	800b458 <RCCEx_PLL2_Config>
 800a044:	4603      	mov	r3, r0
 800a046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a04a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d003      	beq.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a056:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a05a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a062:	2100      	movs	r1, #0
 800a064:	6139      	str	r1, [r7, #16]
 800a066:	f003 0308 	and.w	r3, r3, #8
 800a06a:	617b      	str	r3, [r7, #20]
 800a06c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a070:	460b      	mov	r3, r1
 800a072:	4313      	orrs	r3, r2
 800a074:	d011      	beq.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a07a:	3328      	adds	r3, #40	@ 0x28
 800a07c:	2100      	movs	r1, #0
 800a07e:	4618      	mov	r0, r3
 800a080:	f001 fa9c 	bl	800b5bc <RCCEx_PLL3_Config>
 800a084:	4603      	mov	r3, r0
 800a086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a08a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d003      	beq.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a096:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a09a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a2:	2100      	movs	r1, #0
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	f003 0310 	and.w	r3, r3, #16
 800a0aa:	60fb      	str	r3, [r7, #12]
 800a0ac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	d011      	beq.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a0b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0ba:	3328      	adds	r3, #40	@ 0x28
 800a0bc:	2101      	movs	r1, #1
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f001 fa7c 	bl	800b5bc <RCCEx_PLL3_Config>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a0ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d003      	beq.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a0da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e2:	2100      	movs	r1, #0
 800a0e4:	6039      	str	r1, [r7, #0]
 800a0e6:	f003 0320 	and.w	r3, r3, #32
 800a0ea:	607b      	str	r3, [r7, #4]
 800a0ec:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	d011      	beq.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a0f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0fa:	3328      	adds	r3, #40	@ 0x28
 800a0fc:	2102      	movs	r1, #2
 800a0fe:	4618      	mov	r0, r3
 800a100:	f001 fa5c 	bl	800b5bc <RCCEx_PLL3_Config>
 800a104:	4603      	mov	r3, r0
 800a106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a10a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d003      	beq.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a116:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a11a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d101      	bne.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a122:	2300      	movs	r3, #0
 800a124:	e000      	b.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a126:	2301      	movs	r3, #1
}
 800a128:	4618      	mov	r0, r3
 800a12a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a12e:	46bd      	mov	sp, r7
 800a130:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a134:	58024400 	.word	0x58024400

0800a138 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b090      	sub	sp, #64	@ 0x40
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a142:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a146:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a14a:	430b      	orrs	r3, r1
 800a14c:	f040 8094 	bne.w	800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a150:	4b9e      	ldr	r3, [pc, #632]	@ (800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a154:	f003 0307 	and.w	r3, r3, #7
 800a158:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a15c:	2b04      	cmp	r3, #4
 800a15e:	f200 8087 	bhi.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a162:	a201      	add	r2, pc, #4	@ (adr r2, 800a168 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a168:	0800a17d 	.word	0x0800a17d
 800a16c:	0800a1a5 	.word	0x0800a1a5
 800a170:	0800a1cd 	.word	0x0800a1cd
 800a174:	0800a269 	.word	0x0800a269
 800a178:	0800a1f5 	.word	0x0800a1f5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a17c:	4b93      	ldr	r3, [pc, #588]	@ (800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a184:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a188:	d108      	bne.n	800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a18a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a18e:	4618      	mov	r0, r3
 800a190:	f001 f810 	bl	800b1b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a198:	f000 bd45 	b.w	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a19c:	2300      	movs	r3, #0
 800a19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1a0:	f000 bd41 	b.w	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1a4:	4b89      	ldr	r3, [pc, #548]	@ (800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1b0:	d108      	bne.n	800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1b2:	f107 0318 	add.w	r3, r7, #24
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f000 fd54 	bl	800ac64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1bc:	69bb      	ldr	r3, [r7, #24]
 800a1be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1c0:	f000 bd31 	b.w	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1c8:	f000 bd2d 	b.w	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1cc:	4b7f      	ldr	r3, [pc, #508]	@ (800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a1d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1d8:	d108      	bne.n	800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1da:	f107 030c 	add.w	r3, r7, #12
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f000 fe94 	bl	800af0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1e8:	f000 bd1d 	b.w	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1f0:	f000 bd19 	b.w	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1f4:	4b75      	ldr	r3, [pc, #468]	@ (800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a1fc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1fe:	4b73      	ldr	r3, [pc, #460]	@ (800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f003 0304 	and.w	r3, r3, #4
 800a206:	2b04      	cmp	r3, #4
 800a208:	d10c      	bne.n	800a224 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a20a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d109      	bne.n	800a224 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a210:	4b6e      	ldr	r3, [pc, #440]	@ (800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	08db      	lsrs	r3, r3, #3
 800a216:	f003 0303 	and.w	r3, r3, #3
 800a21a:	4a6d      	ldr	r2, [pc, #436]	@ (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a21c:	fa22 f303 	lsr.w	r3, r2, r3
 800a220:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a222:	e01f      	b.n	800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a224:	4b69      	ldr	r3, [pc, #420]	@ (800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a22c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a230:	d106      	bne.n	800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a234:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a238:	d102      	bne.n	800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a23a:	4b66      	ldr	r3, [pc, #408]	@ (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a23c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a23e:	e011      	b.n	800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a240:	4b62      	ldr	r3, [pc, #392]	@ (800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a248:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a24c:	d106      	bne.n	800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a24e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a250:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a254:	d102      	bne.n	800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a256:	4b60      	ldr	r3, [pc, #384]	@ (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a258:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a25a:	e003      	b.n	800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a25c:	2300      	movs	r3, #0
 800a25e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a260:	f000 bce1 	b.w	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a264:	f000 bcdf 	b.w	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a268:	4b5c      	ldr	r3, [pc, #368]	@ (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a26a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a26c:	f000 bcdb 	b.w	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a270:	2300      	movs	r3, #0
 800a272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a274:	f000 bcd7 	b.w	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a27c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a280:	430b      	orrs	r3, r1
 800a282:	f040 80ad 	bne.w	800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a286:	4b51      	ldr	r3, [pc, #324]	@ (800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a28a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a28e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a292:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a296:	d056      	beq.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a29a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a29e:	f200 8090 	bhi.w	800a3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a2a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a4:	2bc0      	cmp	r3, #192	@ 0xc0
 800a2a6:	f000 8088 	beq.w	800a3ba <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ac:	2bc0      	cmp	r3, #192	@ 0xc0
 800a2ae:	f200 8088 	bhi.w	800a3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b4:	2b80      	cmp	r3, #128	@ 0x80
 800a2b6:	d032      	beq.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ba:	2b80      	cmp	r3, #128	@ 0x80
 800a2bc:	f200 8081 	bhi.w	800a3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d003      	beq.n	800a2ce <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c8:	2b40      	cmp	r3, #64	@ 0x40
 800a2ca:	d014      	beq.n	800a2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a2cc:	e079      	b.n	800a3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2ce:	4b3f      	ldr	r3, [pc, #252]	@ (800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2da:	d108      	bne.n	800a2ee <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f000 ff67 	bl	800b1b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2ea:	f000 bc9c 	b.w	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2f2:	f000 bc98 	b.w	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2f6:	4b35      	ldr	r3, [pc, #212]	@ (800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a302:	d108      	bne.n	800a316 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a304:	f107 0318 	add.w	r3, r7, #24
 800a308:	4618      	mov	r0, r3
 800a30a:	f000 fcab 	bl	800ac64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a30e:	69bb      	ldr	r3, [r7, #24]
 800a310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a312:	f000 bc88 	b.w	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a316:	2300      	movs	r3, #0
 800a318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a31a:	f000 bc84 	b.w	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a31e:	4b2b      	ldr	r3, [pc, #172]	@ (800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a326:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a32a:	d108      	bne.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a32c:	f107 030c 	add.w	r3, r7, #12
 800a330:	4618      	mov	r0, r3
 800a332:	f000 fdeb 	bl	800af0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a33a:	f000 bc74 	b.w	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a33e:	2300      	movs	r3, #0
 800a340:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a342:	f000 bc70 	b.w	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a346:	4b21      	ldr	r3, [pc, #132]	@ (800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a34a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a34e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a350:	4b1e      	ldr	r3, [pc, #120]	@ (800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f003 0304 	and.w	r3, r3, #4
 800a358:	2b04      	cmp	r3, #4
 800a35a:	d10c      	bne.n	800a376 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a35c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d109      	bne.n	800a376 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a362:	4b1a      	ldr	r3, [pc, #104]	@ (800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	08db      	lsrs	r3, r3, #3
 800a368:	f003 0303 	and.w	r3, r3, #3
 800a36c:	4a18      	ldr	r2, [pc, #96]	@ (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a36e:	fa22 f303 	lsr.w	r3, r2, r3
 800a372:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a374:	e01f      	b.n	800a3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a376:	4b15      	ldr	r3, [pc, #84]	@ (800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a37e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a382:	d106      	bne.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a386:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a38a:	d102      	bne.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a38c:	4b11      	ldr	r3, [pc, #68]	@ (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a38e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a390:	e011      	b.n	800a3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a392:	4b0e      	ldr	r3, [pc, #56]	@ (800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a39a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a39e:	d106      	bne.n	800a3ae <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a3a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3a6:	d102      	bne.n	800a3ae <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a3a8:	4b0b      	ldr	r3, [pc, #44]	@ (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a3aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3ac:	e003      	b.n	800a3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a3b2:	f000 bc38 	b.w	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a3b6:	f000 bc36 	b.w	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a3ba:	4b08      	ldr	r3, [pc, #32]	@ (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a3bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3be:	f000 bc32 	b.w	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3c6:	f000 bc2e 	b.w	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a3ca:	bf00      	nop
 800a3cc:	58024400 	.word	0x58024400
 800a3d0:	03d09000 	.word	0x03d09000
 800a3d4:	003d0900 	.word	0x003d0900
 800a3d8:	007a1200 	.word	0x007a1200
 800a3dc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a3e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3e4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a3e8:	430b      	orrs	r3, r1
 800a3ea:	f040 809c 	bne.w	800a526 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a3ee:	4b9e      	ldr	r3, [pc, #632]	@ (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3f2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a3f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a3fe:	d054      	beq.n	800a4aa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a402:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a406:	f200 808b 	bhi.w	800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a40c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a410:	f000 8083 	beq.w	800a51a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a416:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a41a:	f200 8081 	bhi.w	800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a420:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a424:	d02f      	beq.n	800a486 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a428:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a42c:	d878      	bhi.n	800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a430:	2b00      	cmp	r3, #0
 800a432:	d004      	beq.n	800a43e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a436:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a43a:	d012      	beq.n	800a462 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a43c:	e070      	b.n	800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a43e:	4b8a      	ldr	r3, [pc, #552]	@ (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a446:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a44a:	d107      	bne.n	800a45c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a44c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a450:	4618      	mov	r0, r3
 800a452:	f000 feaf 	bl	800b1b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a45a:	e3e4      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a45c:	2300      	movs	r3, #0
 800a45e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a460:	e3e1      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a462:	4b81      	ldr	r3, [pc, #516]	@ (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a46a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a46e:	d107      	bne.n	800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a470:	f107 0318 	add.w	r3, r7, #24
 800a474:	4618      	mov	r0, r3
 800a476:	f000 fbf5 	bl	800ac64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a47a:	69bb      	ldr	r3, [r7, #24]
 800a47c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a47e:	e3d2      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a480:	2300      	movs	r3, #0
 800a482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a484:	e3cf      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a486:	4b78      	ldr	r3, [pc, #480]	@ (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a48e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a492:	d107      	bne.n	800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a494:	f107 030c 	add.w	r3, r7, #12
 800a498:	4618      	mov	r0, r3
 800a49a:	f000 fd37 	bl	800af0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4a2:	e3c0      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4a8:	e3bd      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a4aa:	4b6f      	ldr	r3, [pc, #444]	@ (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a4b2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4b4:	4b6c      	ldr	r3, [pc, #432]	@ (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f003 0304 	and.w	r3, r3, #4
 800a4bc:	2b04      	cmp	r3, #4
 800a4be:	d10c      	bne.n	800a4da <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a4c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d109      	bne.n	800a4da <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4c6:	4b68      	ldr	r3, [pc, #416]	@ (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	08db      	lsrs	r3, r3, #3
 800a4cc:	f003 0303 	and.w	r3, r3, #3
 800a4d0:	4a66      	ldr	r2, [pc, #408]	@ (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a4d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4d8:	e01e      	b.n	800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4da:	4b63      	ldr	r3, [pc, #396]	@ (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4e6:	d106      	bne.n	800a4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a4e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4ee:	d102      	bne.n	800a4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a4f0:	4b5f      	ldr	r3, [pc, #380]	@ (800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a4f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4f4:	e010      	b.n	800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4f6:	4b5c      	ldr	r3, [pc, #368]	@ (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a502:	d106      	bne.n	800a512 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a506:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a50a:	d102      	bne.n	800a512 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a50c:	4b59      	ldr	r3, [pc, #356]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a50e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a510:	e002      	b.n	800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a512:	2300      	movs	r3, #0
 800a514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a516:	e386      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a518:	e385      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a51a:	4b57      	ldr	r3, [pc, #348]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a51c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a51e:	e382      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a520:	2300      	movs	r3, #0
 800a522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a524:	e37f      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a526:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a52a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a52e:	430b      	orrs	r3, r1
 800a530:	f040 80a7 	bne.w	800a682 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a534:	4b4c      	ldr	r3, [pc, #304]	@ (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a538:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a53c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a540:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a544:	d055      	beq.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a548:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a54c:	f200 8096 	bhi.w	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a552:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a556:	f000 8084 	beq.w	800a662 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a55c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a560:	f200 808c 	bhi.w	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a566:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a56a:	d030      	beq.n	800a5ce <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a56c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a56e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a572:	f200 8083 	bhi.w	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d004      	beq.n	800a586 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a57e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a582:	d012      	beq.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a584:	e07a      	b.n	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a586:	4b38      	ldr	r3, [pc, #224]	@ (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a58e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a592:	d107      	bne.n	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a594:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a598:	4618      	mov	r0, r3
 800a59a:	f000 fe0b 	bl	800b1b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5a2:	e340      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5a8:	e33d      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5aa:	4b2f      	ldr	r3, [pc, #188]	@ (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5b6:	d107      	bne.n	800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5b8:	f107 0318 	add.w	r3, r7, #24
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f000 fb51 	bl	800ac64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5c6:	e32e      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5cc:	e32b      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5ce:	4b26      	ldr	r3, [pc, #152]	@ (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a5d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5da:	d107      	bne.n	800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5dc:	f107 030c 	add.w	r3, r7, #12
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f000 fc93 	bl	800af0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5ea:	e31c      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5f0:	e319      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a5f2:	4b1d      	ldr	r3, [pc, #116]	@ (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a5fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5fc:	4b1a      	ldr	r3, [pc, #104]	@ (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f003 0304 	and.w	r3, r3, #4
 800a604:	2b04      	cmp	r3, #4
 800a606:	d10c      	bne.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d109      	bne.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a60e:	4b16      	ldr	r3, [pc, #88]	@ (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	08db      	lsrs	r3, r3, #3
 800a614:	f003 0303 	and.w	r3, r3, #3
 800a618:	4a14      	ldr	r2, [pc, #80]	@ (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a61a:	fa22 f303 	lsr.w	r3, r2, r3
 800a61e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a620:	e01e      	b.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a622:	4b11      	ldr	r3, [pc, #68]	@ (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a62a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a62e:	d106      	bne.n	800a63e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a632:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a636:	d102      	bne.n	800a63e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a638:	4b0d      	ldr	r3, [pc, #52]	@ (800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a63a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a63c:	e010      	b.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a63e:	4b0a      	ldr	r3, [pc, #40]	@ (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a646:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a64a:	d106      	bne.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a64c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a64e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a652:	d102      	bne.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a654:	4b07      	ldr	r3, [pc, #28]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a656:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a658:	e002      	b.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a65a:	2300      	movs	r3, #0
 800a65c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a65e:	e2e2      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a660:	e2e1      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a662:	4b05      	ldr	r3, [pc, #20]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a666:	e2de      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a668:	58024400 	.word	0x58024400
 800a66c:	03d09000 	.word	0x03d09000
 800a670:	003d0900 	.word	0x003d0900
 800a674:	007a1200 	.word	0x007a1200
 800a678:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a67c:	2300      	movs	r3, #0
 800a67e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a680:	e2d1      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a682:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a686:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a68a:	430b      	orrs	r3, r1
 800a68c:	f040 809c 	bne.w	800a7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a690:	4b93      	ldr	r3, [pc, #588]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a694:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a698:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a69a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a69c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a6a0:	d054      	beq.n	800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a6a8:	f200 808b 	bhi.w	800a7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a6ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a6b2:	f000 8083 	beq.w	800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a6b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a6bc:	f200 8081 	bhi.w	800a7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a6c6:	d02f      	beq.n	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a6c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a6ce:	d878      	bhi.n	800a7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d004      	beq.n	800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a6d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6dc:	d012      	beq.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a6de:	e070      	b.n	800a7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6e0:	4b7f      	ldr	r3, [pc, #508]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6ec:	d107      	bne.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f000 fd5e 	bl	800b1b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6fc:	e293      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6fe:	2300      	movs	r3, #0
 800a700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a702:	e290      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a704:	4b76      	ldr	r3, [pc, #472]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a70c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a710:	d107      	bne.n	800a722 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a712:	f107 0318 	add.w	r3, r7, #24
 800a716:	4618      	mov	r0, r3
 800a718:	f000 faa4 	bl	800ac64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a71c:	69bb      	ldr	r3, [r7, #24]
 800a71e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a720:	e281      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a722:	2300      	movs	r3, #0
 800a724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a726:	e27e      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a728:	4b6d      	ldr	r3, [pc, #436]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a730:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a734:	d107      	bne.n	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a736:	f107 030c 	add.w	r3, r7, #12
 800a73a:	4618      	mov	r0, r3
 800a73c:	f000 fbe6 	bl	800af0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a744:	e26f      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a746:	2300      	movs	r3, #0
 800a748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a74a:	e26c      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a74c:	4b64      	ldr	r3, [pc, #400]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a74e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a750:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a754:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a756:	4b62      	ldr	r3, [pc, #392]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 0304 	and.w	r3, r3, #4
 800a75e:	2b04      	cmp	r3, #4
 800a760:	d10c      	bne.n	800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a764:	2b00      	cmp	r3, #0
 800a766:	d109      	bne.n	800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a768:	4b5d      	ldr	r3, [pc, #372]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	08db      	lsrs	r3, r3, #3
 800a76e:	f003 0303 	and.w	r3, r3, #3
 800a772:	4a5c      	ldr	r2, [pc, #368]	@ (800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a774:	fa22 f303 	lsr.w	r3, r2, r3
 800a778:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a77a:	e01e      	b.n	800a7ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a77c:	4b58      	ldr	r3, [pc, #352]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a784:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a788:	d106      	bne.n	800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a78a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a78c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a790:	d102      	bne.n	800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a792:	4b55      	ldr	r3, [pc, #340]	@ (800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a794:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a796:	e010      	b.n	800a7ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a798:	4b51      	ldr	r3, [pc, #324]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7a4:	d106      	bne.n	800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a7a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7ac:	d102      	bne.n	800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a7ae:	4b4f      	ldr	r3, [pc, #316]	@ (800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a7b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7b2:	e002      	b.n	800a7ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a7b8:	e235      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a7ba:	e234      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a7bc:	4b4c      	ldr	r3, [pc, #304]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a7be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7c0:	e231      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7c6:	e22e      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a7c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7cc:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a7d0:	430b      	orrs	r3, r1
 800a7d2:	f040 808f 	bne.w	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a7d6:	4b42      	ldr	r3, [pc, #264]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7da:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a7de:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a7e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a7e6:	d06b      	beq.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a7e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a7ee:	d874      	bhi.n	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a7f6:	d056      	beq.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a7fe:	d86c      	bhi.n	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a802:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a806:	d03b      	beq.n	800a880 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a80a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a80e:	d864      	bhi.n	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a812:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a816:	d021      	beq.n	800a85c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a81a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a81e:	d85c      	bhi.n	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a822:	2b00      	cmp	r3, #0
 800a824:	d004      	beq.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a82c:	d004      	beq.n	800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a82e:	e054      	b.n	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a830:	f7fe fa0a 	bl	8008c48 <HAL_RCC_GetPCLK1Freq>
 800a834:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a836:	e1f6      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a838:	4b29      	ldr	r3, [pc, #164]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a840:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a844:	d107      	bne.n	800a856 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a846:	f107 0318 	add.w	r3, r7, #24
 800a84a:	4618      	mov	r0, r3
 800a84c:	f000 fa0a 	bl	800ac64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a850:	69fb      	ldr	r3, [r7, #28]
 800a852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a854:	e1e7      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a856:	2300      	movs	r3, #0
 800a858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a85a:	e1e4      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a85c:	4b20      	ldr	r3, [pc, #128]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a864:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a868:	d107      	bne.n	800a87a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a86a:	f107 030c 	add.w	r3, r7, #12
 800a86e:	4618      	mov	r0, r3
 800a870:	f000 fb4c 	bl	800af0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a878:	e1d5      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a87a:	2300      	movs	r3, #0
 800a87c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a87e:	e1d2      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a880:	4b17      	ldr	r3, [pc, #92]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f003 0304 	and.w	r3, r3, #4
 800a888:	2b04      	cmp	r3, #4
 800a88a:	d109      	bne.n	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a88c:	4b14      	ldr	r3, [pc, #80]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	08db      	lsrs	r3, r3, #3
 800a892:	f003 0303 	and.w	r3, r3, #3
 800a896:	4a13      	ldr	r2, [pc, #76]	@ (800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a898:	fa22 f303 	lsr.w	r3, r2, r3
 800a89c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a89e:	e1c2      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8a4:	e1bf      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a8a6:	4b0e      	ldr	r3, [pc, #56]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8b2:	d102      	bne.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a8b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a8b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8b8:	e1b5      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8be:	e1b2      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a8c0:	4b07      	ldr	r3, [pc, #28]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8cc:	d102      	bne.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a8ce:	4b07      	ldr	r3, [pc, #28]	@ (800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a8d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8d2:	e1a8      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8d8:	e1a5      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8de:	e1a2      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a8e0:	58024400 	.word	0x58024400
 800a8e4:	03d09000 	.word	0x03d09000
 800a8e8:	003d0900 	.word	0x003d0900
 800a8ec:	007a1200 	.word	0x007a1200
 800a8f0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a8f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8f8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a8fc:	430b      	orrs	r3, r1
 800a8fe:	d173      	bne.n	800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a900:	4b9c      	ldr	r3, [pc, #624]	@ (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a904:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a908:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a90a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a90c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a910:	d02f      	beq.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a914:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a918:	d863      	bhi.n	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a91a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d004      	beq.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a922:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a926:	d012      	beq.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a928:	e05b      	b.n	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a92a:	4b92      	ldr	r3, [pc, #584]	@ (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a932:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a936:	d107      	bne.n	800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a938:	f107 0318 	add.w	r3, r7, #24
 800a93c:	4618      	mov	r0, r3
 800a93e:	f000 f991 	bl	800ac64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a942:	69bb      	ldr	r3, [r7, #24]
 800a944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a946:	e16e      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a948:	2300      	movs	r3, #0
 800a94a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a94c:	e16b      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a94e:	4b89      	ldr	r3, [pc, #548]	@ (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a956:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a95a:	d107      	bne.n	800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a95c:	f107 030c 	add.w	r3, r7, #12
 800a960:	4618      	mov	r0, r3
 800a962:	f000 fad3 	bl	800af0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a96a:	e15c      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a96c:	2300      	movs	r3, #0
 800a96e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a970:	e159      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a972:	4b80      	ldr	r3, [pc, #512]	@ (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a976:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a97a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a97c:	4b7d      	ldr	r3, [pc, #500]	@ (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f003 0304 	and.w	r3, r3, #4
 800a984:	2b04      	cmp	r3, #4
 800a986:	d10c      	bne.n	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d109      	bne.n	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a98e:	4b79      	ldr	r3, [pc, #484]	@ (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	08db      	lsrs	r3, r3, #3
 800a994:	f003 0303 	and.w	r3, r3, #3
 800a998:	4a77      	ldr	r2, [pc, #476]	@ (800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a99a:	fa22 f303 	lsr.w	r3, r2, r3
 800a99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9a0:	e01e      	b.n	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a9a2:	4b74      	ldr	r3, [pc, #464]	@ (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9ae:	d106      	bne.n	800a9be <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a9b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a9b6:	d102      	bne.n	800a9be <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a9b8:	4b70      	ldr	r3, [pc, #448]	@ (800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a9ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9bc:	e010      	b.n	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a9be:	4b6d      	ldr	r3, [pc, #436]	@ (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9ca:	d106      	bne.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a9cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9d2:	d102      	bne.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a9d4:	4b6a      	ldr	r3, [pc, #424]	@ (800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a9d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9d8:	e002      	b.n	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a9de:	e122      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a9e0:	e121      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9e6:	e11e      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a9e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9ec:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a9f0:	430b      	orrs	r3, r1
 800a9f2:	d133      	bne.n	800aa5c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a9f4:	4b5f      	ldr	r3, [pc, #380]	@ (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a9fc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a9fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d004      	beq.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800aa04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa0a:	d012      	beq.n	800aa32 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800aa0c:	e023      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa0e:	4b59      	ldr	r3, [pc, #356]	@ (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa1a:	d107      	bne.n	800aa2c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa20:	4618      	mov	r0, r3
 800aa22:	f000 fbc7 	bl	800b1b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa2a:	e0fc      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa30:	e0f9      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa32:	4b50      	ldr	r3, [pc, #320]	@ (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa3e:	d107      	bne.n	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa40:	f107 0318 	add.w	r3, r7, #24
 800aa44:	4618      	mov	r0, r3
 800aa46:	f000 f90d 	bl	800ac64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800aa4a:	6a3b      	ldr	r3, [r7, #32]
 800aa4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa4e:	e0ea      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa50:	2300      	movs	r3, #0
 800aa52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa54:	e0e7      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800aa56:	2300      	movs	r3, #0
 800aa58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa5a:	e0e4      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800aa5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa60:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800aa64:	430b      	orrs	r3, r1
 800aa66:	f040 808d 	bne.w	800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800aa6a:	4b42      	ldr	r3, [pc, #264]	@ (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa6e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800aa72:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aa74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa7a:	d06b      	beq.n	800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800aa7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa82:	d874      	bhi.n	800ab6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800aa84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa8a:	d056      	beq.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800aa8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa92:	d86c      	bhi.n	800ab6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800aa94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa96:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aa9a:	d03b      	beq.n	800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800aa9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aaa2:	d864      	bhi.n	800ab6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800aaa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aaaa:	d021      	beq.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800aaac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aab2:	d85c      	bhi.n	800ab6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800aab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d004      	beq.n	800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800aaba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aabc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aac0:	d004      	beq.n	800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800aac2:	e054      	b.n	800ab6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800aac4:	f000 f8b8 	bl	800ac38 <HAL_RCCEx_GetD3PCLK1Freq>
 800aac8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aaca:	e0ac      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aacc:	4b29      	ldr	r3, [pc, #164]	@ (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aad4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aad8:	d107      	bne.n	800aaea <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aada:	f107 0318 	add.w	r3, r7, #24
 800aade:	4618      	mov	r0, r3
 800aae0:	f000 f8c0 	bl	800ac64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aae4:	69fb      	ldr	r3, [r7, #28]
 800aae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aae8:	e09d      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aaea:	2300      	movs	r3, #0
 800aaec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaee:	e09a      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aaf0:	4b20      	ldr	r3, [pc, #128]	@ (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aaf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aafc:	d107      	bne.n	800ab0e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aafe:	f107 030c 	add.w	r3, r7, #12
 800ab02:	4618      	mov	r0, r3
 800ab04:	f000 fa02 	bl	800af0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab0c:	e08b      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab12:	e088      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ab14:	4b17      	ldr	r3, [pc, #92]	@ (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f003 0304 	and.w	r3, r3, #4
 800ab1c:	2b04      	cmp	r3, #4
 800ab1e:	d109      	bne.n	800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab20:	4b14      	ldr	r3, [pc, #80]	@ (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	08db      	lsrs	r3, r3, #3
 800ab26:	f003 0303 	and.w	r3, r3, #3
 800ab2a:	4a13      	ldr	r2, [pc, #76]	@ (800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ab2c:	fa22 f303 	lsr.w	r3, r2, r3
 800ab30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab32:	e078      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab34:	2300      	movs	r3, #0
 800ab36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab38:	e075      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ab3a:	4b0e      	ldr	r3, [pc, #56]	@ (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab46:	d102      	bne.n	800ab4e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ab48:	4b0c      	ldr	r3, [pc, #48]	@ (800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ab4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab4c:	e06b      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab52:	e068      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ab54:	4b07      	ldr	r3, [pc, #28]	@ (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab60:	d102      	bne.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ab62:	4b07      	ldr	r3, [pc, #28]	@ (800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ab64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab66:	e05e      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab6c:	e05b      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab72:	e058      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ab74:	58024400 	.word	0x58024400
 800ab78:	03d09000 	.word	0x03d09000
 800ab7c:	003d0900 	.word	0x003d0900
 800ab80:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ab84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab88:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ab8c:	430b      	orrs	r3, r1
 800ab8e:	d148      	bne.n	800ac22 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ab90:	4b27      	ldr	r3, [pc, #156]	@ (800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ab92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab94:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ab98:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ab9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aba0:	d02a      	beq.n	800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800aba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aba8:	d838      	bhi.n	800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800abaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abac:	2b00      	cmp	r3, #0
 800abae:	d004      	beq.n	800abba <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800abb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800abb6:	d00d      	beq.n	800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800abb8:	e030      	b.n	800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800abba:	4b1d      	ldr	r3, [pc, #116]	@ (800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800abc6:	d102      	bne.n	800abce <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800abc8:	4b1a      	ldr	r3, [pc, #104]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800abca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abcc:	e02b      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abce:	2300      	movs	r3, #0
 800abd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abd2:	e028      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800abd4:	4b16      	ldr	r3, [pc, #88]	@ (800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800abdc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800abe0:	d107      	bne.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800abe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800abe6:	4618      	mov	r0, r3
 800abe8:	f000 fae4 	bl	800b1b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800abec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abf0:	e019      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abf2:	2300      	movs	r3, #0
 800abf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abf6:	e016      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abf8:	4b0d      	ldr	r3, [pc, #52]	@ (800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac04:	d107      	bne.n	800ac16 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac06:	f107 0318 	add.w	r3, r7, #24
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f000 f82a 	bl	800ac64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ac10:	69fb      	ldr	r3, [r7, #28]
 800ac12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac14:	e007      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac16:	2300      	movs	r3, #0
 800ac18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac1a:	e004      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac20:	e001      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800ac22:	2300      	movs	r3, #0
 800ac24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800ac26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3740      	adds	r7, #64	@ 0x40
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	58024400 	.word	0x58024400
 800ac34:	007a1200 	.word	0x007a1200

0800ac38 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ac3c:	f7fd ffd4 	bl	8008be8 <HAL_RCC_GetHCLKFreq>
 800ac40:	4602      	mov	r2, r0
 800ac42:	4b06      	ldr	r3, [pc, #24]	@ (800ac5c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ac44:	6a1b      	ldr	r3, [r3, #32]
 800ac46:	091b      	lsrs	r3, r3, #4
 800ac48:	f003 0307 	and.w	r3, r3, #7
 800ac4c:	4904      	ldr	r1, [pc, #16]	@ (800ac60 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ac4e:	5ccb      	ldrb	r3, [r1, r3]
 800ac50:	f003 031f 	and.w	r3, r3, #31
 800ac54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	58024400 	.word	0x58024400
 800ac60:	08023418 	.word	0x08023418

0800ac64 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b089      	sub	sp, #36	@ 0x24
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac6c:	4ba1      	ldr	r3, [pc, #644]	@ (800aef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac70:	f003 0303 	and.w	r3, r3, #3
 800ac74:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ac76:	4b9f      	ldr	r3, [pc, #636]	@ (800aef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac7a:	0b1b      	lsrs	r3, r3, #12
 800ac7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ac80:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ac82:	4b9c      	ldr	r3, [pc, #624]	@ (800aef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac86:	091b      	lsrs	r3, r3, #4
 800ac88:	f003 0301 	and.w	r3, r3, #1
 800ac8c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ac8e:	4b99      	ldr	r3, [pc, #612]	@ (800aef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac92:	08db      	lsrs	r3, r3, #3
 800ac94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac98:	693a      	ldr	r2, [r7, #16]
 800ac9a:	fb02 f303 	mul.w	r3, r2, r3
 800ac9e:	ee07 3a90 	vmov	s15, r3
 800aca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aca6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	2b00      	cmp	r3, #0
 800acae:	f000 8111 	beq.w	800aed4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	2b02      	cmp	r3, #2
 800acb6:	f000 8083 	beq.w	800adc0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800acba:	69bb      	ldr	r3, [r7, #24]
 800acbc:	2b02      	cmp	r3, #2
 800acbe:	f200 80a1 	bhi.w	800ae04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d003      	beq.n	800acd0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	2b01      	cmp	r3, #1
 800accc:	d056      	beq.n	800ad7c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800acce:	e099      	b.n	800ae04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acd0:	4b88      	ldr	r3, [pc, #544]	@ (800aef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f003 0320 	and.w	r3, r3, #32
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d02d      	beq.n	800ad38 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800acdc:	4b85      	ldr	r3, [pc, #532]	@ (800aef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	08db      	lsrs	r3, r3, #3
 800ace2:	f003 0303 	and.w	r3, r3, #3
 800ace6:	4a84      	ldr	r2, [pc, #528]	@ (800aef8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ace8:	fa22 f303 	lsr.w	r3, r2, r3
 800acec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	ee07 3a90 	vmov	s15, r3
 800acf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	ee07 3a90 	vmov	s15, r3
 800acfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad06:	4b7b      	ldr	r3, [pc, #492]	@ (800aef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad0e:	ee07 3a90 	vmov	s15, r3
 800ad12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad16:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad1a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800aefc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ad36:	e087      	b.n	800ae48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	ee07 3a90 	vmov	s15, r3
 800ad3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad42:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800af00 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ad46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad4a:	4b6a      	ldr	r3, [pc, #424]	@ (800aef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad52:	ee07 3a90 	vmov	s15, r3
 800ad56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad5e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800aefc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad7a:	e065      	b.n	800ae48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	ee07 3a90 	vmov	s15, r3
 800ad82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad86:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800af04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ad8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad8e:	4b59      	ldr	r3, [pc, #356]	@ (800aef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad96:	ee07 3a90 	vmov	s15, r3
 800ad9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ada2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800aefc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ada6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adbe:	e043      	b.n	800ae48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	ee07 3a90 	vmov	s15, r3
 800adc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800af08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800adce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800add2:	4b48      	ldr	r3, [pc, #288]	@ (800aef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800add4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800add6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adda:	ee07 3a90 	vmov	s15, r3
 800adde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ade2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ade6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800aefc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800adea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae02:	e021      	b.n	800ae48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	ee07 3a90 	vmov	s15, r3
 800ae0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae0e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800af04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ae12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae16:	4b37      	ldr	r3, [pc, #220]	@ (800aef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae1e:	ee07 3a90 	vmov	s15, r3
 800ae22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae26:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae2a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800aefc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae46:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ae48:	4b2a      	ldr	r3, [pc, #168]	@ (800aef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae4c:	0a5b      	lsrs	r3, r3, #9
 800ae4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae52:	ee07 3a90 	vmov	s15, r3
 800ae56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae62:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae6e:	ee17 2a90 	vmov	r2, s15
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ae76:	4b1f      	ldr	r3, [pc, #124]	@ (800aef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae7a:	0c1b      	lsrs	r3, r3, #16
 800ae7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae80:	ee07 3a90 	vmov	s15, r3
 800ae84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae90:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae9c:	ee17 2a90 	vmov	r2, s15
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800aea4:	4b13      	ldr	r3, [pc, #76]	@ (800aef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aea8:	0e1b      	lsrs	r3, r3, #24
 800aeaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aeae:	ee07 3a90 	vmov	s15, r3
 800aeb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aeba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aebe:	edd7 6a07 	vldr	s13, [r7, #28]
 800aec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aeca:	ee17 2a90 	vmov	r2, s15
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800aed2:	e008      	b.n	800aee6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2200      	movs	r2, #0
 800aed8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2200      	movs	r2, #0
 800aede:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	609a      	str	r2, [r3, #8]
}
 800aee6:	bf00      	nop
 800aee8:	3724      	adds	r7, #36	@ 0x24
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr
 800aef2:	bf00      	nop
 800aef4:	58024400 	.word	0x58024400
 800aef8:	03d09000 	.word	0x03d09000
 800aefc:	46000000 	.word	0x46000000
 800af00:	4c742400 	.word	0x4c742400
 800af04:	4a742400 	.word	0x4a742400
 800af08:	4af42400 	.word	0x4af42400

0800af0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b089      	sub	sp, #36	@ 0x24
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af14:	4ba1      	ldr	r3, [pc, #644]	@ (800b19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af18:	f003 0303 	and.w	r3, r3, #3
 800af1c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800af1e:	4b9f      	ldr	r3, [pc, #636]	@ (800b19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af22:	0d1b      	lsrs	r3, r3, #20
 800af24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800af28:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800af2a:	4b9c      	ldr	r3, [pc, #624]	@ (800b19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af2e:	0a1b      	lsrs	r3, r3, #8
 800af30:	f003 0301 	and.w	r3, r3, #1
 800af34:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800af36:	4b99      	ldr	r3, [pc, #612]	@ (800b19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af3a:	08db      	lsrs	r3, r3, #3
 800af3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af40:	693a      	ldr	r2, [r7, #16]
 800af42:	fb02 f303 	mul.w	r3, r2, r3
 800af46:	ee07 3a90 	vmov	s15, r3
 800af4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	2b00      	cmp	r3, #0
 800af56:	f000 8111 	beq.w	800b17c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800af5a:	69bb      	ldr	r3, [r7, #24]
 800af5c:	2b02      	cmp	r3, #2
 800af5e:	f000 8083 	beq.w	800b068 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800af62:	69bb      	ldr	r3, [r7, #24]
 800af64:	2b02      	cmp	r3, #2
 800af66:	f200 80a1 	bhi.w	800b0ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800af6a:	69bb      	ldr	r3, [r7, #24]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d003      	beq.n	800af78 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800af70:	69bb      	ldr	r3, [r7, #24]
 800af72:	2b01      	cmp	r3, #1
 800af74:	d056      	beq.n	800b024 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800af76:	e099      	b.n	800b0ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af78:	4b88      	ldr	r3, [pc, #544]	@ (800b19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f003 0320 	and.w	r3, r3, #32
 800af80:	2b00      	cmp	r3, #0
 800af82:	d02d      	beq.n	800afe0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af84:	4b85      	ldr	r3, [pc, #532]	@ (800b19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	08db      	lsrs	r3, r3, #3
 800af8a:	f003 0303 	and.w	r3, r3, #3
 800af8e:	4a84      	ldr	r2, [pc, #528]	@ (800b1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800af90:	fa22 f303 	lsr.w	r3, r2, r3
 800af94:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	ee07 3a90 	vmov	s15, r3
 800af9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	ee07 3a90 	vmov	s15, r3
 800afa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afae:	4b7b      	ldr	r3, [pc, #492]	@ (800b19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afb6:	ee07 3a90 	vmov	s15, r3
 800afba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afbe:	ed97 6a03 	vldr	s12, [r7, #12]
 800afc2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800afde:	e087      	b.n	800b0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	ee07 3a90 	vmov	s15, r3
 800afe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b1a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800afee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aff2:	4b6a      	ldr	r3, [pc, #424]	@ (800b19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800affa:	ee07 3a90 	vmov	s15, r3
 800affe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b002:	ed97 6a03 	vldr	s12, [r7, #12]
 800b006:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b00a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b00e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b01a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b01e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b022:	e065      	b.n	800b0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	ee07 3a90 	vmov	s15, r3
 800b02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b02e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b1ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b036:	4b59      	ldr	r3, [pc, #356]	@ (800b19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b03a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b03e:	ee07 3a90 	vmov	s15, r3
 800b042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b046:	ed97 6a03 	vldr	s12, [r7, #12]
 800b04a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b04e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b05a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b05e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b066:	e043      	b.n	800b0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	ee07 3a90 	vmov	s15, r3
 800b06e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b072:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b07a:	4b48      	ldr	r3, [pc, #288]	@ (800b19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b07c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b07e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b082:	ee07 3a90 	vmov	s15, r3
 800b086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b08a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b08e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b09a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b09e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0aa:	e021      	b.n	800b0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	ee07 3a90 	vmov	s15, r3
 800b0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0b6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b1ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b0ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0be:	4b37      	ldr	r3, [pc, #220]	@ (800b19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0c6:	ee07 3a90 	vmov	s15, r3
 800b0ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b0d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b0f0:	4b2a      	ldr	r3, [pc, #168]	@ (800b19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0f4:	0a5b      	lsrs	r3, r3, #9
 800b0f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0fa:	ee07 3a90 	vmov	s15, r3
 800b0fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b102:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b106:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b10a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b10e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b116:	ee17 2a90 	vmov	r2, s15
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b11e:	4b1f      	ldr	r3, [pc, #124]	@ (800b19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b122:	0c1b      	lsrs	r3, r3, #16
 800b124:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b128:	ee07 3a90 	vmov	s15, r3
 800b12c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b130:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b134:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b138:	edd7 6a07 	vldr	s13, [r7, #28]
 800b13c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b144:	ee17 2a90 	vmov	r2, s15
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b14c:	4b13      	ldr	r3, [pc, #76]	@ (800b19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b14e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b150:	0e1b      	lsrs	r3, r3, #24
 800b152:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b156:	ee07 3a90 	vmov	s15, r3
 800b15a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b15e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b162:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b166:	edd7 6a07 	vldr	s13, [r7, #28]
 800b16a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b16e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b172:	ee17 2a90 	vmov	r2, s15
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b17a:	e008      	b.n	800b18e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2200      	movs	r2, #0
 800b186:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2200      	movs	r2, #0
 800b18c:	609a      	str	r2, [r3, #8]
}
 800b18e:	bf00      	nop
 800b190:	3724      	adds	r7, #36	@ 0x24
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop
 800b19c:	58024400 	.word	0x58024400
 800b1a0:	03d09000 	.word	0x03d09000
 800b1a4:	46000000 	.word	0x46000000
 800b1a8:	4c742400 	.word	0x4c742400
 800b1ac:	4a742400 	.word	0x4a742400
 800b1b0:	4af42400 	.word	0x4af42400

0800b1b4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b089      	sub	sp, #36	@ 0x24
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b1bc:	4ba0      	ldr	r3, [pc, #640]	@ (800b440 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1c0:	f003 0303 	and.w	r3, r3, #3
 800b1c4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b1c6:	4b9e      	ldr	r3, [pc, #632]	@ (800b440 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1ca:	091b      	lsrs	r3, r3, #4
 800b1cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b1d0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b1d2:	4b9b      	ldr	r3, [pc, #620]	@ (800b440 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1d6:	f003 0301 	and.w	r3, r3, #1
 800b1da:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b1dc:	4b98      	ldr	r3, [pc, #608]	@ (800b440 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1e0:	08db      	lsrs	r3, r3, #3
 800b1e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1e6:	693a      	ldr	r2, [r7, #16]
 800b1e8:	fb02 f303 	mul.w	r3, r2, r3
 800b1ec:	ee07 3a90 	vmov	s15, r3
 800b1f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1f4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	f000 8111 	beq.w	800b422 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	2b02      	cmp	r3, #2
 800b204:	f000 8083 	beq.w	800b30e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b208:	69bb      	ldr	r3, [r7, #24]
 800b20a:	2b02      	cmp	r3, #2
 800b20c:	f200 80a1 	bhi.w	800b352 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d003      	beq.n	800b21e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b216:	69bb      	ldr	r3, [r7, #24]
 800b218:	2b01      	cmp	r3, #1
 800b21a:	d056      	beq.n	800b2ca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b21c:	e099      	b.n	800b352 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b21e:	4b88      	ldr	r3, [pc, #544]	@ (800b440 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f003 0320 	and.w	r3, r3, #32
 800b226:	2b00      	cmp	r3, #0
 800b228:	d02d      	beq.n	800b286 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b22a:	4b85      	ldr	r3, [pc, #532]	@ (800b440 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	08db      	lsrs	r3, r3, #3
 800b230:	f003 0303 	and.w	r3, r3, #3
 800b234:	4a83      	ldr	r2, [pc, #524]	@ (800b444 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b236:	fa22 f303 	lsr.w	r3, r2, r3
 800b23a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	ee07 3a90 	vmov	s15, r3
 800b242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	ee07 3a90 	vmov	s15, r3
 800b24c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b250:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b254:	4b7a      	ldr	r3, [pc, #488]	@ (800b440 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b25c:	ee07 3a90 	vmov	s15, r3
 800b260:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b264:	ed97 6a03 	vldr	s12, [r7, #12]
 800b268:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b448 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b26c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b270:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b274:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b278:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b27c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b280:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b284:	e087      	b.n	800b396 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	ee07 3a90 	vmov	s15, r3
 800b28c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b290:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b44c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b294:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b298:	4b69      	ldr	r3, [pc, #420]	@ (800b440 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b29a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b29c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2a0:	ee07 3a90 	vmov	s15, r3
 800b2a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2ac:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b448 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b2b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2c8:	e065      	b.n	800b396 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	ee07 3a90 	vmov	s15, r3
 800b2d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2d4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b450 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b2d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2dc:	4b58      	ldr	r3, [pc, #352]	@ (800b440 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2e4:	ee07 3a90 	vmov	s15, r3
 800b2e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2f0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b448 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b2f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b300:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b304:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b308:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b30c:	e043      	b.n	800b396 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	ee07 3a90 	vmov	s15, r3
 800b314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b318:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b454 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b31c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b320:	4b47      	ldr	r3, [pc, #284]	@ (800b440 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b328:	ee07 3a90 	vmov	s15, r3
 800b32c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b330:	ed97 6a03 	vldr	s12, [r7, #12]
 800b334:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b448 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b338:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b33c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b340:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b344:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b34c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b350:	e021      	b.n	800b396 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	ee07 3a90 	vmov	s15, r3
 800b358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b35c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b44c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b360:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b364:	4b36      	ldr	r3, [pc, #216]	@ (800b440 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b36c:	ee07 3a90 	vmov	s15, r3
 800b370:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b374:	ed97 6a03 	vldr	s12, [r7, #12]
 800b378:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b448 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b37c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b380:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b384:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b388:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b38c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b390:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b394:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b396:	4b2a      	ldr	r3, [pc, #168]	@ (800b440 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b39a:	0a5b      	lsrs	r3, r3, #9
 800b39c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b3a0:	ee07 3a90 	vmov	s15, r3
 800b3a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b3ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3bc:	ee17 2a90 	vmov	r2, s15
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b3c4:	4b1e      	ldr	r3, [pc, #120]	@ (800b440 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3c8:	0c1b      	lsrs	r3, r3, #16
 800b3ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b3ce:	ee07 3a90 	vmov	s15, r3
 800b3d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b3da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3de:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3ea:	ee17 2a90 	vmov	r2, s15
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b3f2:	4b13      	ldr	r3, [pc, #76]	@ (800b440 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3f6:	0e1b      	lsrs	r3, r3, #24
 800b3f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b3fc:	ee07 3a90 	vmov	s15, r3
 800b400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b404:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b408:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b40c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b418:	ee17 2a90 	vmov	r2, s15
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b420:	e008      	b.n	800b434 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2200      	movs	r2, #0
 800b426:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2200      	movs	r2, #0
 800b42c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2200      	movs	r2, #0
 800b432:	609a      	str	r2, [r3, #8]
}
 800b434:	bf00      	nop
 800b436:	3724      	adds	r7, #36	@ 0x24
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr
 800b440:	58024400 	.word	0x58024400
 800b444:	03d09000 	.word	0x03d09000
 800b448:	46000000 	.word	0x46000000
 800b44c:	4c742400 	.word	0x4c742400
 800b450:	4a742400 	.word	0x4a742400
 800b454:	4af42400 	.word	0x4af42400

0800b458 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b462:	2300      	movs	r3, #0
 800b464:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b466:	4b53      	ldr	r3, [pc, #332]	@ (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b46a:	f003 0303 	and.w	r3, r3, #3
 800b46e:	2b03      	cmp	r3, #3
 800b470:	d101      	bne.n	800b476 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b472:	2301      	movs	r3, #1
 800b474:	e099      	b.n	800b5aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b476:	4b4f      	ldr	r3, [pc, #316]	@ (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a4e      	ldr	r2, [pc, #312]	@ (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b47c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b480:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b482:	f7f7 ffaf 	bl	80033e4 <HAL_GetTick>
 800b486:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b488:	e008      	b.n	800b49c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b48a:	f7f7 ffab 	bl	80033e4 <HAL_GetTick>
 800b48e:	4602      	mov	r2, r0
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	1ad3      	subs	r3, r2, r3
 800b494:	2b02      	cmp	r3, #2
 800b496:	d901      	bls.n	800b49c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b498:	2303      	movs	r3, #3
 800b49a:	e086      	b.n	800b5aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b49c:	4b45      	ldr	r3, [pc, #276]	@ (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d1f0      	bne.n	800b48a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b4a8:	4b42      	ldr	r3, [pc, #264]	@ (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b4aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4ac:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	031b      	lsls	r3, r3, #12
 800b4b6:	493f      	ldr	r1, [pc, #252]	@ (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	628b      	str	r3, [r1, #40]	@ 0x28
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	3b01      	subs	r3, #1
 800b4c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	3b01      	subs	r3, #1
 800b4cc:	025b      	lsls	r3, r3, #9
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	431a      	orrs	r2, r3
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	68db      	ldr	r3, [r3, #12]
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	041b      	lsls	r3, r3, #16
 800b4da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b4de:	431a      	orrs	r2, r3
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	691b      	ldr	r3, [r3, #16]
 800b4e4:	3b01      	subs	r3, #1
 800b4e6:	061b      	lsls	r3, r3, #24
 800b4e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b4ec:	4931      	ldr	r1, [pc, #196]	@ (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b4f2:	4b30      	ldr	r3, [pc, #192]	@ (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b4f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	695b      	ldr	r3, [r3, #20]
 800b4fe:	492d      	ldr	r1, [pc, #180]	@ (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b500:	4313      	orrs	r3, r2
 800b502:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b504:	4b2b      	ldr	r3, [pc, #172]	@ (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b508:	f023 0220 	bic.w	r2, r3, #32
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	699b      	ldr	r3, [r3, #24]
 800b510:	4928      	ldr	r1, [pc, #160]	@ (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b512:	4313      	orrs	r3, r2
 800b514:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b516:	4b27      	ldr	r3, [pc, #156]	@ (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b51a:	4a26      	ldr	r2, [pc, #152]	@ (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b51c:	f023 0310 	bic.w	r3, r3, #16
 800b520:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b522:	4b24      	ldr	r3, [pc, #144]	@ (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b524:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b526:	4b24      	ldr	r3, [pc, #144]	@ (800b5b8 <RCCEx_PLL2_Config+0x160>)
 800b528:	4013      	ands	r3, r2
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	69d2      	ldr	r2, [r2, #28]
 800b52e:	00d2      	lsls	r2, r2, #3
 800b530:	4920      	ldr	r1, [pc, #128]	@ (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b532:	4313      	orrs	r3, r2
 800b534:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b536:	4b1f      	ldr	r3, [pc, #124]	@ (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b53a:	4a1e      	ldr	r2, [pc, #120]	@ (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b53c:	f043 0310 	orr.w	r3, r3, #16
 800b540:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d106      	bne.n	800b556 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b548:	4b1a      	ldr	r3, [pc, #104]	@ (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b54a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b54c:	4a19      	ldr	r2, [pc, #100]	@ (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b54e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b552:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b554:	e00f      	b.n	800b576 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d106      	bne.n	800b56a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b55c:	4b15      	ldr	r3, [pc, #84]	@ (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b55e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b560:	4a14      	ldr	r2, [pc, #80]	@ (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b562:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b566:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b568:	e005      	b.n	800b576 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b56a:	4b12      	ldr	r3, [pc, #72]	@ (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b56c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b56e:	4a11      	ldr	r2, [pc, #68]	@ (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b570:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b574:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b576:	4b0f      	ldr	r3, [pc, #60]	@ (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4a0e      	ldr	r2, [pc, #56]	@ (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b57c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b582:	f7f7 ff2f 	bl	80033e4 <HAL_GetTick>
 800b586:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b588:	e008      	b.n	800b59c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b58a:	f7f7 ff2b 	bl	80033e4 <HAL_GetTick>
 800b58e:	4602      	mov	r2, r0
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	1ad3      	subs	r3, r2, r3
 800b594:	2b02      	cmp	r3, #2
 800b596:	d901      	bls.n	800b59c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b598:	2303      	movs	r3, #3
 800b59a:	e006      	b.n	800b5aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b59c:	4b05      	ldr	r3, [pc, #20]	@ (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d0f0      	beq.n	800b58a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	58024400 	.word	0x58024400
 800b5b8:	ffff0007 	.word	0xffff0007

0800b5bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b5ca:	4b53      	ldr	r3, [pc, #332]	@ (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b5cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5ce:	f003 0303 	and.w	r3, r3, #3
 800b5d2:	2b03      	cmp	r3, #3
 800b5d4:	d101      	bne.n	800b5da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	e099      	b.n	800b70e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b5da:	4b4f      	ldr	r3, [pc, #316]	@ (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4a4e      	ldr	r2, [pc, #312]	@ (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b5e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b5e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5e6:	f7f7 fefd 	bl	80033e4 <HAL_GetTick>
 800b5ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b5ec:	e008      	b.n	800b600 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b5ee:	f7f7 fef9 	bl	80033e4 <HAL_GetTick>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	1ad3      	subs	r3, r2, r3
 800b5f8:	2b02      	cmp	r3, #2
 800b5fa:	d901      	bls.n	800b600 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b5fc:	2303      	movs	r3, #3
 800b5fe:	e086      	b.n	800b70e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b600:	4b45      	ldr	r3, [pc, #276]	@ (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d1f0      	bne.n	800b5ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b60c:	4b42      	ldr	r3, [pc, #264]	@ (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b60e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b610:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	051b      	lsls	r3, r3, #20
 800b61a:	493f      	ldr	r1, [pc, #252]	@ (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b61c:	4313      	orrs	r3, r2
 800b61e:	628b      	str	r3, [r1, #40]	@ 0x28
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	3b01      	subs	r3, #1
 800b626:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	689b      	ldr	r3, [r3, #8]
 800b62e:	3b01      	subs	r3, #1
 800b630:	025b      	lsls	r3, r3, #9
 800b632:	b29b      	uxth	r3, r3
 800b634:	431a      	orrs	r2, r3
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	3b01      	subs	r3, #1
 800b63c:	041b      	lsls	r3, r3, #16
 800b63e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b642:	431a      	orrs	r2, r3
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	691b      	ldr	r3, [r3, #16]
 800b648:	3b01      	subs	r3, #1
 800b64a:	061b      	lsls	r3, r3, #24
 800b64c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b650:	4931      	ldr	r1, [pc, #196]	@ (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b652:	4313      	orrs	r3, r2
 800b654:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b656:	4b30      	ldr	r3, [pc, #192]	@ (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b65a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	695b      	ldr	r3, [r3, #20]
 800b662:	492d      	ldr	r1, [pc, #180]	@ (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b664:	4313      	orrs	r3, r2
 800b666:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b668:	4b2b      	ldr	r3, [pc, #172]	@ (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b66a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b66c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	699b      	ldr	r3, [r3, #24]
 800b674:	4928      	ldr	r1, [pc, #160]	@ (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b676:	4313      	orrs	r3, r2
 800b678:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b67a:	4b27      	ldr	r3, [pc, #156]	@ (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b67c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b67e:	4a26      	ldr	r2, [pc, #152]	@ (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b680:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b684:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b686:	4b24      	ldr	r3, [pc, #144]	@ (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b688:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b68a:	4b24      	ldr	r3, [pc, #144]	@ (800b71c <RCCEx_PLL3_Config+0x160>)
 800b68c:	4013      	ands	r3, r2
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	69d2      	ldr	r2, [r2, #28]
 800b692:	00d2      	lsls	r2, r2, #3
 800b694:	4920      	ldr	r1, [pc, #128]	@ (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b696:	4313      	orrs	r3, r2
 800b698:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b69a:	4b1f      	ldr	r3, [pc, #124]	@ (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b69c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b69e:	4a1e      	ldr	r2, [pc, #120]	@ (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b6a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b6a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d106      	bne.n	800b6ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b6ac:	4b1a      	ldr	r3, [pc, #104]	@ (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b6ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6b0:	4a19      	ldr	r2, [pc, #100]	@ (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b6b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b6b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b6b8:	e00f      	b.n	800b6da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d106      	bne.n	800b6ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b6c0:	4b15      	ldr	r3, [pc, #84]	@ (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b6c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6c4:	4a14      	ldr	r2, [pc, #80]	@ (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b6c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b6ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b6cc:	e005      	b.n	800b6da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b6ce:	4b12      	ldr	r3, [pc, #72]	@ (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b6d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6d2:	4a11      	ldr	r2, [pc, #68]	@ (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b6d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b6d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b6da:	4b0f      	ldr	r3, [pc, #60]	@ (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a0e      	ldr	r2, [pc, #56]	@ (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b6e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b6e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6e6:	f7f7 fe7d 	bl	80033e4 <HAL_GetTick>
 800b6ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b6ec:	e008      	b.n	800b700 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b6ee:	f7f7 fe79 	bl	80033e4 <HAL_GetTick>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	1ad3      	subs	r3, r2, r3
 800b6f8:	2b02      	cmp	r3, #2
 800b6fa:	d901      	bls.n	800b700 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b6fc:	2303      	movs	r3, #3
 800b6fe:	e006      	b.n	800b70e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b700:	4b05      	ldr	r3, [pc, #20]	@ (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d0f0      	beq.n	800b6ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b70c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3710      	adds	r7, #16
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop
 800b718:	58024400 	.word	0x58024400
 800b71c:	ffff0007 	.word	0xffff0007

0800b720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b082      	sub	sp, #8
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d101      	bne.n	800b732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b72e:	2301      	movs	r3, #1
 800b730:	e049      	b.n	800b7c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b738:	b2db      	uxtb	r3, r3
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d106      	bne.n	800b74c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2200      	movs	r2, #0
 800b742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 f841 	bl	800b7ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2202      	movs	r2, #2
 800b750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681a      	ldr	r2, [r3, #0]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	3304      	adds	r3, #4
 800b75c:	4619      	mov	r1, r3
 800b75e:	4610      	mov	r0, r2
 800b760:	f000 f9e8 	bl	800bb34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2201      	movs	r2, #1
 800b768:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2201      	movs	r2, #1
 800b770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2201      	movs	r2, #1
 800b778:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2201      	movs	r2, #1
 800b780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2201      	movs	r2, #1
 800b788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2201      	movs	r2, #1
 800b790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2201      	movs	r2, #1
 800b798:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2201      	movs	r2, #1
 800b7a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2201      	movs	r2, #1
 800b7c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b7c4:	2300      	movs	r3, #0
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3708      	adds	r7, #8
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}

0800b7ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b7ce:	b480      	push	{r7}
 800b7d0:	b083      	sub	sp, #12
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b7d6:	bf00      	nop
 800b7d8:	370c      	adds	r7, #12
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr
	...

0800b7e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b085      	sub	sp, #20
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d001      	beq.n	800b7fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	e054      	b.n	800b8a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2202      	movs	r2, #2
 800b800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	68da      	ldr	r2, [r3, #12]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f042 0201 	orr.w	r2, r2, #1
 800b812:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a26      	ldr	r2, [pc, #152]	@ (800b8b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d022      	beq.n	800b864 <HAL_TIM_Base_Start_IT+0x80>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b826:	d01d      	beq.n	800b864 <HAL_TIM_Base_Start_IT+0x80>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4a22      	ldr	r2, [pc, #136]	@ (800b8b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d018      	beq.n	800b864 <HAL_TIM_Base_Start_IT+0x80>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a21      	ldr	r2, [pc, #132]	@ (800b8bc <HAL_TIM_Base_Start_IT+0xd8>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d013      	beq.n	800b864 <HAL_TIM_Base_Start_IT+0x80>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a1f      	ldr	r2, [pc, #124]	@ (800b8c0 <HAL_TIM_Base_Start_IT+0xdc>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d00e      	beq.n	800b864 <HAL_TIM_Base_Start_IT+0x80>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a1e      	ldr	r2, [pc, #120]	@ (800b8c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d009      	beq.n	800b864 <HAL_TIM_Base_Start_IT+0x80>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a1c      	ldr	r2, [pc, #112]	@ (800b8c8 <HAL_TIM_Base_Start_IT+0xe4>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d004      	beq.n	800b864 <HAL_TIM_Base_Start_IT+0x80>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a1b      	ldr	r2, [pc, #108]	@ (800b8cc <HAL_TIM_Base_Start_IT+0xe8>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d115      	bne.n	800b890 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	689a      	ldr	r2, [r3, #8]
 800b86a:	4b19      	ldr	r3, [pc, #100]	@ (800b8d0 <HAL_TIM_Base_Start_IT+0xec>)
 800b86c:	4013      	ands	r3, r2
 800b86e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2b06      	cmp	r3, #6
 800b874:	d015      	beq.n	800b8a2 <HAL_TIM_Base_Start_IT+0xbe>
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b87c:	d011      	beq.n	800b8a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	681a      	ldr	r2, [r3, #0]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f042 0201 	orr.w	r2, r2, #1
 800b88c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b88e:	e008      	b.n	800b8a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f042 0201 	orr.w	r2, r2, #1
 800b89e:	601a      	str	r2, [r3, #0]
 800b8a0:	e000      	b.n	800b8a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b8a4:	2300      	movs	r3, #0
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3714      	adds	r7, #20
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b0:	4770      	bx	lr
 800b8b2:	bf00      	nop
 800b8b4:	40010000 	.word	0x40010000
 800b8b8:	40000400 	.word	0x40000400
 800b8bc:	40000800 	.word	0x40000800
 800b8c0:	40000c00 	.word	0x40000c00
 800b8c4:	40010400 	.word	0x40010400
 800b8c8:	40001800 	.word	0x40001800
 800b8cc:	40014000 	.word	0x40014000
 800b8d0:	00010007 	.word	0x00010007

0800b8d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	68db      	ldr	r3, [r3, #12]
 800b8e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	691b      	ldr	r3, [r3, #16]
 800b8ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	f003 0302 	and.w	r3, r3, #2
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d020      	beq.n	800b938 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f003 0302 	and.w	r3, r3, #2
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d01b      	beq.n	800b938 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f06f 0202 	mvn.w	r2, #2
 800b908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2201      	movs	r2, #1
 800b90e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	699b      	ldr	r3, [r3, #24]
 800b916:	f003 0303 	and.w	r3, r3, #3
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d003      	beq.n	800b926 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 f8e9 	bl	800baf6 <HAL_TIM_IC_CaptureCallback>
 800b924:	e005      	b.n	800b932 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 f8db 	bl	800bae2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f000 f8ec 	bl	800bb0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2200      	movs	r2, #0
 800b936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	f003 0304 	and.w	r3, r3, #4
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d020      	beq.n	800b984 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	f003 0304 	and.w	r3, r3, #4
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d01b      	beq.n	800b984 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f06f 0204 	mvn.w	r2, #4
 800b954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2202      	movs	r2, #2
 800b95a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	699b      	ldr	r3, [r3, #24]
 800b962:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b966:	2b00      	cmp	r3, #0
 800b968:	d003      	beq.n	800b972 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 f8c3 	bl	800baf6 <HAL_TIM_IC_CaptureCallback>
 800b970:	e005      	b.n	800b97e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f000 f8b5 	bl	800bae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f000 f8c6 	bl	800bb0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2200      	movs	r2, #0
 800b982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	f003 0308 	and.w	r3, r3, #8
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d020      	beq.n	800b9d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	f003 0308 	and.w	r3, r3, #8
 800b994:	2b00      	cmp	r3, #0
 800b996:	d01b      	beq.n	800b9d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f06f 0208 	mvn.w	r2, #8
 800b9a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2204      	movs	r2, #4
 800b9a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	69db      	ldr	r3, [r3, #28]
 800b9ae:	f003 0303 	and.w	r3, r3, #3
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d003      	beq.n	800b9be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 f89d 	bl	800baf6 <HAL_TIM_IC_CaptureCallback>
 800b9bc:	e005      	b.n	800b9ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f000 f88f 	bl	800bae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 f8a0 	bl	800bb0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	f003 0310 	and.w	r3, r3, #16
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d020      	beq.n	800ba1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f003 0310 	and.w	r3, r3, #16
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d01b      	beq.n	800ba1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f06f 0210 	mvn.w	r2, #16
 800b9ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2208      	movs	r2, #8
 800b9f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	69db      	ldr	r3, [r3, #28]
 800b9fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d003      	beq.n	800ba0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 f877 	bl	800baf6 <HAL_TIM_IC_CaptureCallback>
 800ba08:	e005      	b.n	800ba16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 f869 	bl	800bae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f000 f87a 	bl	800bb0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	f003 0301 	and.w	r3, r3, #1
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d00c      	beq.n	800ba40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f003 0301 	and.w	r3, r3, #1
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d007      	beq.n	800ba40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f06f 0201 	mvn.w	r2, #1
 800ba38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f7f6 f81a 	bl	8001a74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d104      	bne.n	800ba54 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d00c      	beq.n	800ba6e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d007      	beq.n	800ba6e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ba66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 f913 	bl	800bc94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d00c      	beq.n	800ba92 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d007      	beq.n	800ba92 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ba8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 f90b 	bl	800bca8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d00c      	beq.n	800bab6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d007      	beq.n	800bab6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800baae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f000 f834 	bl	800bb1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	f003 0320 	and.w	r3, r3, #32
 800babc:	2b00      	cmp	r3, #0
 800babe:	d00c      	beq.n	800bada <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f003 0320 	and.w	r3, r3, #32
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d007      	beq.n	800bada <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f06f 0220 	mvn.w	r2, #32
 800bad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 f8d3 	bl	800bc80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bada:	bf00      	nop
 800badc:	3710      	adds	r7, #16
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}

0800bae2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bae2:	b480      	push	{r7}
 800bae4:	b083      	sub	sp, #12
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800baea:	bf00      	nop
 800baec:	370c      	adds	r7, #12
 800baee:	46bd      	mov	sp, r7
 800baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf4:	4770      	bx	lr

0800baf6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800baf6:	b480      	push	{r7}
 800baf8:	b083      	sub	sp, #12
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bafe:	bf00      	nop
 800bb00:	370c      	adds	r7, #12
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr

0800bb0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bb0a:	b480      	push	{r7}
 800bb0c:	b083      	sub	sp, #12
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bb12:	bf00      	nop
 800bb14:	370c      	adds	r7, #12
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr

0800bb1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bb1e:	b480      	push	{r7}
 800bb20:	b083      	sub	sp, #12
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bb26:	bf00      	nop
 800bb28:	370c      	adds	r7, #12
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr
	...

0800bb34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b085      	sub	sp, #20
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	4a46      	ldr	r2, [pc, #280]	@ (800bc60 <TIM_Base_SetConfig+0x12c>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d013      	beq.n	800bb74 <TIM_Base_SetConfig+0x40>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb52:	d00f      	beq.n	800bb74 <TIM_Base_SetConfig+0x40>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	4a43      	ldr	r2, [pc, #268]	@ (800bc64 <TIM_Base_SetConfig+0x130>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d00b      	beq.n	800bb74 <TIM_Base_SetConfig+0x40>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	4a42      	ldr	r2, [pc, #264]	@ (800bc68 <TIM_Base_SetConfig+0x134>)
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d007      	beq.n	800bb74 <TIM_Base_SetConfig+0x40>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	4a41      	ldr	r2, [pc, #260]	@ (800bc6c <TIM_Base_SetConfig+0x138>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d003      	beq.n	800bb74 <TIM_Base_SetConfig+0x40>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	4a40      	ldr	r2, [pc, #256]	@ (800bc70 <TIM_Base_SetConfig+0x13c>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d108      	bne.n	800bb86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	68fa      	ldr	r2, [r7, #12]
 800bb82:	4313      	orrs	r3, r2
 800bb84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	4a35      	ldr	r2, [pc, #212]	@ (800bc60 <TIM_Base_SetConfig+0x12c>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d01f      	beq.n	800bbce <TIM_Base_SetConfig+0x9a>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb94:	d01b      	beq.n	800bbce <TIM_Base_SetConfig+0x9a>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	4a32      	ldr	r2, [pc, #200]	@ (800bc64 <TIM_Base_SetConfig+0x130>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d017      	beq.n	800bbce <TIM_Base_SetConfig+0x9a>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	4a31      	ldr	r2, [pc, #196]	@ (800bc68 <TIM_Base_SetConfig+0x134>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d013      	beq.n	800bbce <TIM_Base_SetConfig+0x9a>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	4a30      	ldr	r2, [pc, #192]	@ (800bc6c <TIM_Base_SetConfig+0x138>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d00f      	beq.n	800bbce <TIM_Base_SetConfig+0x9a>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	4a2f      	ldr	r2, [pc, #188]	@ (800bc70 <TIM_Base_SetConfig+0x13c>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d00b      	beq.n	800bbce <TIM_Base_SetConfig+0x9a>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	4a2e      	ldr	r2, [pc, #184]	@ (800bc74 <TIM_Base_SetConfig+0x140>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d007      	beq.n	800bbce <TIM_Base_SetConfig+0x9a>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	4a2d      	ldr	r2, [pc, #180]	@ (800bc78 <TIM_Base_SetConfig+0x144>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d003      	beq.n	800bbce <TIM_Base_SetConfig+0x9a>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	4a2c      	ldr	r2, [pc, #176]	@ (800bc7c <TIM_Base_SetConfig+0x148>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d108      	bne.n	800bbe0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bbd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	68db      	ldr	r3, [r3, #12]
 800bbda:	68fa      	ldr	r2, [r7, #12]
 800bbdc:	4313      	orrs	r3, r2
 800bbde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	695b      	ldr	r3, [r3, #20]
 800bbea:	4313      	orrs	r3, r2
 800bbec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	68fa      	ldr	r2, [r7, #12]
 800bbf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	689a      	ldr	r2, [r3, #8]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	681a      	ldr	r2, [r3, #0]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	4a16      	ldr	r2, [pc, #88]	@ (800bc60 <TIM_Base_SetConfig+0x12c>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d00f      	beq.n	800bc2c <TIM_Base_SetConfig+0xf8>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	4a18      	ldr	r2, [pc, #96]	@ (800bc70 <TIM_Base_SetConfig+0x13c>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d00b      	beq.n	800bc2c <TIM_Base_SetConfig+0xf8>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	4a17      	ldr	r2, [pc, #92]	@ (800bc74 <TIM_Base_SetConfig+0x140>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d007      	beq.n	800bc2c <TIM_Base_SetConfig+0xf8>
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	4a16      	ldr	r2, [pc, #88]	@ (800bc78 <TIM_Base_SetConfig+0x144>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d003      	beq.n	800bc2c <TIM_Base_SetConfig+0xf8>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	4a15      	ldr	r2, [pc, #84]	@ (800bc7c <TIM_Base_SetConfig+0x148>)
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d103      	bne.n	800bc34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	691a      	ldr	r2, [r3, #16]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2201      	movs	r2, #1
 800bc38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	691b      	ldr	r3, [r3, #16]
 800bc3e:	f003 0301 	and.w	r3, r3, #1
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d105      	bne.n	800bc52 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	691b      	ldr	r3, [r3, #16]
 800bc4a:	f023 0201 	bic.w	r2, r3, #1
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	611a      	str	r2, [r3, #16]
  }
}
 800bc52:	bf00      	nop
 800bc54:	3714      	adds	r7, #20
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr
 800bc5e:	bf00      	nop
 800bc60:	40010000 	.word	0x40010000
 800bc64:	40000400 	.word	0x40000400
 800bc68:	40000800 	.word	0x40000800
 800bc6c:	40000c00 	.word	0x40000c00
 800bc70:	40010400 	.word	0x40010400
 800bc74:	40014000 	.word	0x40014000
 800bc78:	40014400 	.word	0x40014400
 800bc7c:	40014800 	.word	0x40014800

0800bc80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b083      	sub	sp, #12
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc88:	bf00      	nop
 800bc8a:	370c      	adds	r7, #12
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bc9c:	bf00      	nop
 800bc9e:	370c      	adds	r7, #12
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr

0800bca8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b083      	sub	sp, #12
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bcb0:	bf00      	nop
 800bcb2:	370c      	adds	r7, #12
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr

0800bcbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d101      	bne.n	800bcce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bcca:	2301      	movs	r3, #1
 800bccc:	e042      	b.n	800bd54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d106      	bne.n	800bce6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f7f7 f843 	bl	8002d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2224      	movs	r2, #36	@ 0x24
 800bcea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	681a      	ldr	r2, [r3, #0]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f022 0201 	bic.w	r2, r2, #1
 800bcfc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d002      	beq.n	800bd0c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f001 fae0 	bl	800d2cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f000 fd75 	bl	800c7fc <UART_SetConfig>
 800bd12:	4603      	mov	r3, r0
 800bd14:	2b01      	cmp	r3, #1
 800bd16:	d101      	bne.n	800bd1c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	e01b      	b.n	800bd54 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	685a      	ldr	r2, [r3, #4]
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bd2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	689a      	ldr	r2, [r3, #8]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bd3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f042 0201 	orr.w	r2, r2, #1
 800bd4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f001 fb5f 	bl	800d410 <UART_CheckIdleState>
 800bd52:	4603      	mov	r3, r0
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3708      	adds	r7, #8
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b08a      	sub	sp, #40	@ 0x28
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	4613      	mov	r3, r2
 800bd68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd70:	2b20      	cmp	r3, #32
 800bd72:	d167      	bne.n	800be44 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d002      	beq.n	800bd80 <HAL_UART_Transmit_DMA+0x24>
 800bd7a:	88fb      	ldrh	r3, [r7, #6]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d101      	bne.n	800bd84 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800bd80:	2301      	movs	r3, #1
 800bd82:	e060      	b.n	800be46 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	68ba      	ldr	r2, [r7, #8]
 800bd88:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	88fa      	ldrh	r2, [r7, #6]
 800bd8e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	88fa      	ldrh	r2, [r7, #6]
 800bd96:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2221      	movs	r2, #33	@ 0x21
 800bda6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d028      	beq.n	800be04 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bdb6:	4a26      	ldr	r2, [pc, #152]	@ (800be50 <HAL_UART_Transmit_DMA+0xf4>)
 800bdb8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bdbe:	4a25      	ldr	r2, [pc, #148]	@ (800be54 <HAL_UART_Transmit_DMA+0xf8>)
 800bdc0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bdc6:	4a24      	ldr	r2, [pc, #144]	@ (800be58 <HAL_UART_Transmit_DMA+0xfc>)
 800bdc8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bdce:	2200      	movs	r2, #0
 800bdd0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bdda:	4619      	mov	r1, r3
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	3328      	adds	r3, #40	@ 0x28
 800bde2:	461a      	mov	r2, r3
 800bde4:	88fb      	ldrh	r3, [r7, #6]
 800bde6:	f7f9 fa6b 	bl	80052c0 <HAL_DMA_Start_IT>
 800bdea:	4603      	mov	r3, r0
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d009      	beq.n	800be04 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	2210      	movs	r2, #16
 800bdf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2220      	movs	r2, #32
 800bdfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800be00:	2301      	movs	r3, #1
 800be02:	e020      	b.n	800be46 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	2240      	movs	r2, #64	@ 0x40
 800be0a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	3308      	adds	r3, #8
 800be12:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	e853 3f00 	ldrex	r3, [r3]
 800be1a:	613b      	str	r3, [r7, #16]
   return(result);
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be22:	627b      	str	r3, [r7, #36]	@ 0x24
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	3308      	adds	r3, #8
 800be2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be2c:	623a      	str	r2, [r7, #32]
 800be2e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be30:	69f9      	ldr	r1, [r7, #28]
 800be32:	6a3a      	ldr	r2, [r7, #32]
 800be34:	e841 2300 	strex	r3, r2, [r1]
 800be38:	61bb      	str	r3, [r7, #24]
   return(result);
 800be3a:	69bb      	ldr	r3, [r7, #24]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d1e5      	bne.n	800be0c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800be40:	2300      	movs	r3, #0
 800be42:	e000      	b.n	800be46 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800be44:	2302      	movs	r3, #2
  }
}
 800be46:	4618      	mov	r0, r3
 800be48:	3728      	adds	r7, #40	@ 0x28
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	0800d8dd 	.word	0x0800d8dd
 800be54:	0800d973 	.word	0x0800d973
 800be58:	0800daf5 	.word	0x0800daf5

0800be5c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b08a      	sub	sp, #40	@ 0x28
 800be60:	af00      	add	r7, sp, #0
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	4613      	mov	r3, r2
 800be68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be70:	2b20      	cmp	r3, #32
 800be72:	d137      	bne.n	800bee4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d002      	beq.n	800be80 <HAL_UART_Receive_DMA+0x24>
 800be7a:	88fb      	ldrh	r3, [r7, #6]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d101      	bne.n	800be84 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800be80:	2301      	movs	r3, #1
 800be82:	e030      	b.n	800bee6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2200      	movs	r2, #0
 800be88:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	4a18      	ldr	r2, [pc, #96]	@ (800bef0 <HAL_UART_Receive_DMA+0x94>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d01f      	beq.n	800bed4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d018      	beq.n	800bed4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	e853 3f00 	ldrex	r3, [r3]
 800beae:	613b      	str	r3, [r7, #16]
   return(result);
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800beb6:	627b      	str	r3, [r7, #36]	@ 0x24
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	461a      	mov	r2, r3
 800bebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bec0:	623b      	str	r3, [r7, #32]
 800bec2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec4:	69f9      	ldr	r1, [r7, #28]
 800bec6:	6a3a      	ldr	r2, [r7, #32]
 800bec8:	e841 2300 	strex	r3, r2, [r1]
 800becc:	61bb      	str	r3, [r7, #24]
   return(result);
 800bece:	69bb      	ldr	r3, [r7, #24]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d1e6      	bne.n	800bea2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bed4:	88fb      	ldrh	r3, [r7, #6]
 800bed6:	461a      	mov	r2, r3
 800bed8:	68b9      	ldr	r1, [r7, #8]
 800beda:	68f8      	ldr	r0, [r7, #12]
 800bedc:	f001 fbb0 	bl	800d640 <UART_Start_Receive_DMA>
 800bee0:	4603      	mov	r3, r0
 800bee2:	e000      	b.n	800bee6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bee4:	2302      	movs	r3, #2
  }
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3728      	adds	r7, #40	@ 0x28
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	58000c00 	.word	0x58000c00

0800bef4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b090      	sub	sp, #64	@ 0x40
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf0a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf16:	2b80      	cmp	r3, #128	@ 0x80
 800bf18:	d139      	bne.n	800bf8e <HAL_UART_DMAStop+0x9a>
 800bf1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf1c:	2b21      	cmp	r3, #33	@ 0x21
 800bf1e:	d136      	bne.n	800bf8e <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	3308      	adds	r3, #8
 800bf26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf28:	6a3b      	ldr	r3, [r7, #32]
 800bf2a:	e853 3f00 	ldrex	r3, [r3]
 800bf2e:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf36:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	3308      	adds	r3, #8
 800bf3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bf40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bf42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf48:	e841 2300 	strex	r3, r2, [r1]
 800bf4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bf4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d1e5      	bne.n	800bf20 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d015      	beq.n	800bf88 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bf60:	4618      	mov	r0, r3
 800bf62:	f7f9 fc17 	bl	8005794 <HAL_DMA_Abort>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d00d      	beq.n	800bf88 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bf70:	4618      	mov	r0, r3
 800bf72:	f7fb f89d 	bl	80070b0 <HAL_DMA_GetError>
 800bf76:	4603      	mov	r3, r0
 800bf78:	2b20      	cmp	r3, #32
 800bf7a:	d105      	bne.n	800bf88 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2210      	movs	r2, #16
 800bf80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800bf84:	2303      	movs	r3, #3
 800bf86:	e047      	b.n	800c018 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f001 fbff 	bl	800d78c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	689b      	ldr	r3, [r3, #8]
 800bf94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf98:	2b40      	cmp	r3, #64	@ 0x40
 800bf9a:	d13c      	bne.n	800c016 <HAL_UART_DMAStop+0x122>
 800bf9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf9e:	2b22      	cmp	r3, #34	@ 0x22
 800bfa0:	d139      	bne.n	800c016 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	3308      	adds	r3, #8
 800bfa8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	e853 3f00 	ldrex	r3, [r3]
 800bfb0:	60bb      	str	r3, [r7, #8]
   return(result);
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bfb8:	633b      	str	r3, [r7, #48]	@ 0x30
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	3308      	adds	r3, #8
 800bfc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfc2:	61ba      	str	r2, [r7, #24]
 800bfc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc6:	6979      	ldr	r1, [r7, #20]
 800bfc8:	69ba      	ldr	r2, [r7, #24]
 800bfca:	e841 2300 	strex	r3, r2, [r1]
 800bfce:	613b      	str	r3, [r7, #16]
   return(result);
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d1e5      	bne.n	800bfa2 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d017      	beq.n	800c010 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7f9 fbd4 	bl	8005794 <HAL_DMA_Abort>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d00e      	beq.n	800c010 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7fb f859 	bl	80070b0 <HAL_DMA_GetError>
 800bffe:	4603      	mov	r3, r0
 800c000:	2b20      	cmp	r3, #32
 800c002:	d105      	bne.n	800c010 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2210      	movs	r2, #16
 800c008:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c00c:	2303      	movs	r3, #3
 800c00e:	e003      	b.n	800c018 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f001 fbfd 	bl	800d810 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800c016:	2300      	movs	r3, #0
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3740      	adds	r7, #64	@ 0x40
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b0ba      	sub	sp, #232	@ 0xe8
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	69db      	ldr	r3, [r3, #28]
 800c02e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	689b      	ldr	r3, [r3, #8]
 800c042:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c046:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c04a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c04e:	4013      	ands	r3, r2
 800c050:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c054:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d11b      	bne.n	800c094 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c05c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c060:	f003 0320 	and.w	r3, r3, #32
 800c064:	2b00      	cmp	r3, #0
 800c066:	d015      	beq.n	800c094 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c06c:	f003 0320 	and.w	r3, r3, #32
 800c070:	2b00      	cmp	r3, #0
 800c072:	d105      	bne.n	800c080 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c074:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d009      	beq.n	800c094 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c084:	2b00      	cmp	r3, #0
 800c086:	f000 8377 	beq.w	800c778 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	4798      	blx	r3
      }
      return;
 800c092:	e371      	b.n	800c778 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c094:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c098:	2b00      	cmp	r3, #0
 800c09a:	f000 8123 	beq.w	800c2e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c09e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c0a2:	4b8d      	ldr	r3, [pc, #564]	@ (800c2d8 <HAL_UART_IRQHandler+0x2b8>)
 800c0a4:	4013      	ands	r3, r2
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d106      	bne.n	800c0b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c0aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c0ae:	4b8b      	ldr	r3, [pc, #556]	@ (800c2dc <HAL_UART_IRQHandler+0x2bc>)
 800c0b0:	4013      	ands	r3, r2
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	f000 8116 	beq.w	800c2e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c0b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0bc:	f003 0301 	and.w	r3, r3, #1
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d011      	beq.n	800c0e8 <HAL_UART_IRQHandler+0xc8>
 800c0c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c0c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d00b      	beq.n	800c0e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	2201      	movs	r2, #1
 800c0d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0de:	f043 0201 	orr.w	r2, r3, #1
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c0e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0ec:	f003 0302 	and.w	r3, r3, #2
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d011      	beq.n	800c118 <HAL_UART_IRQHandler+0xf8>
 800c0f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c0f8:	f003 0301 	and.w	r3, r3, #1
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d00b      	beq.n	800c118 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	2202      	movs	r2, #2
 800c106:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c10e:	f043 0204 	orr.w	r2, r3, #4
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c11c:	f003 0304 	and.w	r3, r3, #4
 800c120:	2b00      	cmp	r3, #0
 800c122:	d011      	beq.n	800c148 <HAL_UART_IRQHandler+0x128>
 800c124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c128:	f003 0301 	and.w	r3, r3, #1
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d00b      	beq.n	800c148 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2204      	movs	r2, #4
 800c136:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c13e:	f043 0202 	orr.w	r2, r3, #2
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c14c:	f003 0308 	and.w	r3, r3, #8
 800c150:	2b00      	cmp	r3, #0
 800c152:	d017      	beq.n	800c184 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c158:	f003 0320 	and.w	r3, r3, #32
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d105      	bne.n	800c16c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c160:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c164:	4b5c      	ldr	r3, [pc, #368]	@ (800c2d8 <HAL_UART_IRQHandler+0x2b8>)
 800c166:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d00b      	beq.n	800c184 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	2208      	movs	r2, #8
 800c172:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c17a:	f043 0208 	orr.w	r2, r3, #8
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c188:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d012      	beq.n	800c1b6 <HAL_UART_IRQHandler+0x196>
 800c190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c194:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d00c      	beq.n	800c1b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c1a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1ac:	f043 0220 	orr.w	r2, r3, #32
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	f000 82dd 	beq.w	800c77c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c1c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1c6:	f003 0320 	and.w	r3, r3, #32
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d013      	beq.n	800c1f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c1ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1d2:	f003 0320 	and.w	r3, r3, #32
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d105      	bne.n	800c1e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c1da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c1de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d007      	beq.n	800c1f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d003      	beq.n	800c1f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	689b      	ldr	r3, [r3, #8]
 800c206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c20a:	2b40      	cmp	r3, #64	@ 0x40
 800c20c:	d005      	beq.n	800c21a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c20e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c212:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c216:	2b00      	cmp	r3, #0
 800c218:	d054      	beq.n	800c2c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f001 faf8 	bl	800d810 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	689b      	ldr	r3, [r3, #8]
 800c226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c22a:	2b40      	cmp	r3, #64	@ 0x40
 800c22c:	d146      	bne.n	800c2bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	3308      	adds	r3, #8
 800c234:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c238:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c23c:	e853 3f00 	ldrex	r3, [r3]
 800c240:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c244:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c248:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c24c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	3308      	adds	r3, #8
 800c256:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c25a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c25e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c262:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c266:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c26a:	e841 2300 	strex	r3, r2, [r1]
 800c26e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c272:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c276:	2b00      	cmp	r3, #0
 800c278:	d1d9      	bne.n	800c22e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c280:	2b00      	cmp	r3, #0
 800c282:	d017      	beq.n	800c2b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c28a:	4a15      	ldr	r2, [pc, #84]	@ (800c2e0 <HAL_UART_IRQHandler+0x2c0>)
 800c28c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c294:	4618      	mov	r0, r3
 800c296:	f7f9 fd9b 	bl	8005dd0 <HAL_DMA_Abort_IT>
 800c29a:	4603      	mov	r3, r0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d019      	beq.n	800c2d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c2ae:	4610      	mov	r0, r2
 800c2b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2b2:	e00f      	b.n	800c2d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 fa8b 	bl	800c7d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2ba:	e00b      	b.n	800c2d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 fa87 	bl	800c7d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2c2:	e007      	b.n	800c2d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 fa83 	bl	800c7d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c2d2:	e253      	b.n	800c77c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2d4:	bf00      	nop
    return;
 800c2d6:	e251      	b.n	800c77c <HAL_UART_IRQHandler+0x75c>
 800c2d8:	10000001 	.word	0x10000001
 800c2dc:	04000120 	.word	0x04000120
 800c2e0:	0800db75 	.word	0x0800db75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	f040 81e7 	bne.w	800c6bc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c2ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2f2:	f003 0310 	and.w	r3, r3, #16
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	f000 81e0 	beq.w	800c6bc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c2fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c300:	f003 0310 	and.w	r3, r3, #16
 800c304:	2b00      	cmp	r3, #0
 800c306:	f000 81d9 	beq.w	800c6bc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	2210      	movs	r2, #16
 800c310:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	689b      	ldr	r3, [r3, #8]
 800c318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c31c:	2b40      	cmp	r3, #64	@ 0x40
 800c31e:	f040 8151 	bne.w	800c5c4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4a96      	ldr	r2, [pc, #600]	@ (800c584 <HAL_UART_IRQHandler+0x564>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d068      	beq.n	800c402 <HAL_UART_IRQHandler+0x3e2>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	4a93      	ldr	r2, [pc, #588]	@ (800c588 <HAL_UART_IRQHandler+0x568>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d061      	beq.n	800c402 <HAL_UART_IRQHandler+0x3e2>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4a91      	ldr	r2, [pc, #580]	@ (800c58c <HAL_UART_IRQHandler+0x56c>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d05a      	beq.n	800c402 <HAL_UART_IRQHandler+0x3e2>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	4a8e      	ldr	r2, [pc, #568]	@ (800c590 <HAL_UART_IRQHandler+0x570>)
 800c356:	4293      	cmp	r3, r2
 800c358:	d053      	beq.n	800c402 <HAL_UART_IRQHandler+0x3e2>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	4a8c      	ldr	r2, [pc, #560]	@ (800c594 <HAL_UART_IRQHandler+0x574>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d04c      	beq.n	800c402 <HAL_UART_IRQHandler+0x3e2>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4a89      	ldr	r2, [pc, #548]	@ (800c598 <HAL_UART_IRQHandler+0x578>)
 800c372:	4293      	cmp	r3, r2
 800c374:	d045      	beq.n	800c402 <HAL_UART_IRQHandler+0x3e2>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4a87      	ldr	r2, [pc, #540]	@ (800c59c <HAL_UART_IRQHandler+0x57c>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d03e      	beq.n	800c402 <HAL_UART_IRQHandler+0x3e2>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4a84      	ldr	r2, [pc, #528]	@ (800c5a0 <HAL_UART_IRQHandler+0x580>)
 800c38e:	4293      	cmp	r3, r2
 800c390:	d037      	beq.n	800c402 <HAL_UART_IRQHandler+0x3e2>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4a82      	ldr	r2, [pc, #520]	@ (800c5a4 <HAL_UART_IRQHandler+0x584>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d030      	beq.n	800c402 <HAL_UART_IRQHandler+0x3e2>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4a7f      	ldr	r2, [pc, #508]	@ (800c5a8 <HAL_UART_IRQHandler+0x588>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d029      	beq.n	800c402 <HAL_UART_IRQHandler+0x3e2>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4a7d      	ldr	r2, [pc, #500]	@ (800c5ac <HAL_UART_IRQHandler+0x58c>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d022      	beq.n	800c402 <HAL_UART_IRQHandler+0x3e2>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4a7a      	ldr	r2, [pc, #488]	@ (800c5b0 <HAL_UART_IRQHandler+0x590>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d01b      	beq.n	800c402 <HAL_UART_IRQHandler+0x3e2>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4a78      	ldr	r2, [pc, #480]	@ (800c5b4 <HAL_UART_IRQHandler+0x594>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d014      	beq.n	800c402 <HAL_UART_IRQHandler+0x3e2>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4a75      	ldr	r2, [pc, #468]	@ (800c5b8 <HAL_UART_IRQHandler+0x598>)
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d00d      	beq.n	800c402 <HAL_UART_IRQHandler+0x3e2>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	4a73      	ldr	r2, [pc, #460]	@ (800c5bc <HAL_UART_IRQHandler+0x59c>)
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d006      	beq.n	800c402 <HAL_UART_IRQHandler+0x3e2>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4a70      	ldr	r2, [pc, #448]	@ (800c5c0 <HAL_UART_IRQHandler+0x5a0>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d106      	bne.n	800c410 <HAL_UART_IRQHandler+0x3f0>
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	b29b      	uxth	r3, r3
 800c40e:	e005      	b.n	800c41c <HAL_UART_IRQHandler+0x3fc>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	b29b      	uxth	r3, r3
 800c41c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c420:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c424:	2b00      	cmp	r3, #0
 800c426:	f000 81ab 	beq.w	800c780 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c430:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c434:	429a      	cmp	r2, r3
 800c436:	f080 81a3 	bcs.w	800c780 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c440:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c44a:	69db      	ldr	r3, [r3, #28]
 800c44c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c450:	f000 8087 	beq.w	800c562 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c45c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c460:	e853 3f00 	ldrex	r3, [r3]
 800c464:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c468:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c46c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c470:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	461a      	mov	r2, r3
 800c47a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c47e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c482:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c486:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c48a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c48e:	e841 2300 	strex	r3, r2, [r1]
 800c492:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c496:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d1da      	bne.n	800c454 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	3308      	adds	r3, #8
 800c4a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c4a8:	e853 3f00 	ldrex	r3, [r3]
 800c4ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c4ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c4b0:	f023 0301 	bic.w	r3, r3, #1
 800c4b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	3308      	adds	r3, #8
 800c4be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c4c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c4c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c4ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c4ce:	e841 2300 	strex	r3, r2, [r1]
 800c4d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c4d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d1e1      	bne.n	800c49e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	3308      	adds	r3, #8
 800c4e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c4e4:	e853 3f00 	ldrex	r3, [r3]
 800c4e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c4ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c4ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	3308      	adds	r3, #8
 800c4fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c4fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c500:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c502:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c504:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c506:	e841 2300 	strex	r3, r2, [r1]
 800c50a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c50c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d1e3      	bne.n	800c4da <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2220      	movs	r2, #32
 800c516:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2200      	movs	r2, #0
 800c51e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c526:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c528:	e853 3f00 	ldrex	r3, [r3]
 800c52c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c52e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c530:	f023 0310 	bic.w	r3, r3, #16
 800c534:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	461a      	mov	r2, r3
 800c53e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c542:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c544:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c546:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c548:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c54a:	e841 2300 	strex	r3, r2, [r1]
 800c54e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c550:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c552:	2b00      	cmp	r3, #0
 800c554:	d1e4      	bne.n	800c520 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c55c:	4618      	mov	r0, r3
 800c55e:	f7f9 f919 	bl	8005794 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2202      	movs	r2, #2
 800c566:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c574:	b29b      	uxth	r3, r3
 800c576:	1ad3      	subs	r3, r2, r3
 800c578:	b29b      	uxth	r3, r3
 800c57a:	4619      	mov	r1, r3
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f000 f931 	bl	800c7e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c582:	e0fd      	b.n	800c780 <HAL_UART_IRQHandler+0x760>
 800c584:	40020010 	.word	0x40020010
 800c588:	40020028 	.word	0x40020028
 800c58c:	40020040 	.word	0x40020040
 800c590:	40020058 	.word	0x40020058
 800c594:	40020070 	.word	0x40020070
 800c598:	40020088 	.word	0x40020088
 800c59c:	400200a0 	.word	0x400200a0
 800c5a0:	400200b8 	.word	0x400200b8
 800c5a4:	40020410 	.word	0x40020410
 800c5a8:	40020428 	.word	0x40020428
 800c5ac:	40020440 	.word	0x40020440
 800c5b0:	40020458 	.word	0x40020458
 800c5b4:	40020470 	.word	0x40020470
 800c5b8:	40020488 	.word	0x40020488
 800c5bc:	400204a0 	.word	0x400204a0
 800c5c0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	1ad3      	subs	r3, r2, r3
 800c5d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	f000 80cf 	beq.w	800c784 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c5e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	f000 80ca 	beq.w	800c784 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5f8:	e853 3f00 	ldrex	r3, [r3]
 800c5fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c5fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c600:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c604:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	461a      	mov	r2, r3
 800c60e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c612:	647b      	str	r3, [r7, #68]	@ 0x44
 800c614:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c616:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c618:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c61a:	e841 2300 	strex	r3, r2, [r1]
 800c61e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c622:	2b00      	cmp	r3, #0
 800c624:	d1e4      	bne.n	800c5f0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	3308      	adds	r3, #8
 800c62c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c630:	e853 3f00 	ldrex	r3, [r3]
 800c634:	623b      	str	r3, [r7, #32]
   return(result);
 800c636:	6a3a      	ldr	r2, [r7, #32]
 800c638:	4b55      	ldr	r3, [pc, #340]	@ (800c790 <HAL_UART_IRQHandler+0x770>)
 800c63a:	4013      	ands	r3, r2
 800c63c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	3308      	adds	r3, #8
 800c646:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c64a:	633a      	str	r2, [r7, #48]	@ 0x30
 800c64c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c64e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c650:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c652:	e841 2300 	strex	r3, r2, [r1]
 800c656:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d1e3      	bne.n	800c626 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2220      	movs	r2, #32
 800c662:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2200      	movs	r2, #0
 800c66a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2200      	movs	r2, #0
 800c670:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c678:	693b      	ldr	r3, [r7, #16]
 800c67a:	e853 3f00 	ldrex	r3, [r3]
 800c67e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	f023 0310 	bic.w	r3, r3, #16
 800c686:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	461a      	mov	r2, r3
 800c690:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c694:	61fb      	str	r3, [r7, #28]
 800c696:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c698:	69b9      	ldr	r1, [r7, #24]
 800c69a:	69fa      	ldr	r2, [r7, #28]
 800c69c:	e841 2300 	strex	r3, r2, [r1]
 800c6a0:	617b      	str	r3, [r7, #20]
   return(result);
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d1e4      	bne.n	800c672 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2202      	movs	r2, #2
 800c6ac:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c6ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f000 f895 	bl	800c7e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c6ba:	e063      	b.n	800c784 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c6bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d00e      	beq.n	800c6e6 <HAL_UART_IRQHandler+0x6c6>
 800c6c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c6cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d008      	beq.n	800c6e6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c6dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f001 fa89 	bl	800dbf6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c6e4:	e051      	b.n	800c78a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c6e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d014      	beq.n	800c71c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c6f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d105      	bne.n	800c70a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c6fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c702:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c706:	2b00      	cmp	r3, #0
 800c708:	d008      	beq.n	800c71c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d03a      	beq.n	800c788 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	4798      	blx	r3
    }
    return;
 800c71a:	e035      	b.n	800c788 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c71c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c724:	2b00      	cmp	r3, #0
 800c726:	d009      	beq.n	800c73c <HAL_UART_IRQHandler+0x71c>
 800c728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c72c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c730:	2b00      	cmp	r3, #0
 800c732:	d003      	beq.n	800c73c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f001 fa33 	bl	800dba0 <UART_EndTransmit_IT>
    return;
 800c73a:	e026      	b.n	800c78a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c73c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c740:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c744:	2b00      	cmp	r3, #0
 800c746:	d009      	beq.n	800c75c <HAL_UART_IRQHandler+0x73c>
 800c748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c74c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c750:	2b00      	cmp	r3, #0
 800c752:	d003      	beq.n	800c75c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f001 fa62 	bl	800dc1e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c75a:	e016      	b.n	800c78a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c75c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c760:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c764:	2b00      	cmp	r3, #0
 800c766:	d010      	beq.n	800c78a <HAL_UART_IRQHandler+0x76a>
 800c768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	da0c      	bge.n	800c78a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f001 fa4a 	bl	800dc0a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c776:	e008      	b.n	800c78a <HAL_UART_IRQHandler+0x76a>
      return;
 800c778:	bf00      	nop
 800c77a:	e006      	b.n	800c78a <HAL_UART_IRQHandler+0x76a>
    return;
 800c77c:	bf00      	nop
 800c77e:	e004      	b.n	800c78a <HAL_UART_IRQHandler+0x76a>
      return;
 800c780:	bf00      	nop
 800c782:	e002      	b.n	800c78a <HAL_UART_IRQHandler+0x76a>
      return;
 800c784:	bf00      	nop
 800c786:	e000      	b.n	800c78a <HAL_UART_IRQHandler+0x76a>
    return;
 800c788:	bf00      	nop
  }
}
 800c78a:	37e8      	adds	r7, #232	@ 0xe8
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	effffffe 	.word	0xeffffffe

0800c794 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c794:	b480      	push	{r7}
 800c796:	b083      	sub	sp, #12
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c79c:	bf00      	nop
 800c79e:	370c      	adds	r7, #12
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr

0800c7a8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b083      	sub	sp, #12
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c7b0:	bf00      	nop
 800c7b2:	370c      	adds	r7, #12
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr

0800c7bc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b083      	sub	sp, #12
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c7c4:	bf00      	nop
 800c7c6:	370c      	adds	r7, #12
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr

0800c7d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b083      	sub	sp, #12
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c7d8:	bf00      	nop
 800c7da:	370c      	adds	r7, #12
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr

0800c7e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b083      	sub	sp, #12
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	460b      	mov	r3, r1
 800c7ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c7f0:	bf00      	nop
 800c7f2:	370c      	adds	r7, #12
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr

0800c7fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c7fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c800:	b092      	sub	sp, #72	@ 0x48
 800c802:	af00      	add	r7, sp, #0
 800c804:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c806:	2300      	movs	r3, #0
 800c808:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	689a      	ldr	r2, [r3, #8]
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	691b      	ldr	r3, [r3, #16]
 800c814:	431a      	orrs	r2, r3
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	695b      	ldr	r3, [r3, #20]
 800c81a:	431a      	orrs	r2, r3
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	69db      	ldr	r3, [r3, #28]
 800c820:	4313      	orrs	r3, r2
 800c822:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	4bbe      	ldr	r3, [pc, #760]	@ (800cb24 <UART_SetConfig+0x328>)
 800c82c:	4013      	ands	r3, r2
 800c82e:	697a      	ldr	r2, [r7, #20]
 800c830:	6812      	ldr	r2, [r2, #0]
 800c832:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c834:	430b      	orrs	r3, r1
 800c836:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	685b      	ldr	r3, [r3, #4]
 800c83e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	68da      	ldr	r2, [r3, #12]
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	430a      	orrs	r2, r1
 800c84c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	699b      	ldr	r3, [r3, #24]
 800c852:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	4ab3      	ldr	r2, [pc, #716]	@ (800cb28 <UART_SetConfig+0x32c>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d004      	beq.n	800c868 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	6a1b      	ldr	r3, [r3, #32]
 800c862:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c864:	4313      	orrs	r3, r2
 800c866:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	689a      	ldr	r2, [r3, #8]
 800c86e:	4baf      	ldr	r3, [pc, #700]	@ (800cb2c <UART_SetConfig+0x330>)
 800c870:	4013      	ands	r3, r2
 800c872:	697a      	ldr	r2, [r7, #20]
 800c874:	6812      	ldr	r2, [r2, #0]
 800c876:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c878:	430b      	orrs	r3, r1
 800c87a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c882:	f023 010f 	bic.w	r1, r3, #15
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	430a      	orrs	r2, r1
 800c890:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	4aa6      	ldr	r2, [pc, #664]	@ (800cb30 <UART_SetConfig+0x334>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	d177      	bne.n	800c98c <UART_SetConfig+0x190>
 800c89c:	4ba5      	ldr	r3, [pc, #660]	@ (800cb34 <UART_SetConfig+0x338>)
 800c89e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c8a4:	2b28      	cmp	r3, #40	@ 0x28
 800c8a6:	d86d      	bhi.n	800c984 <UART_SetConfig+0x188>
 800c8a8:	a201      	add	r2, pc, #4	@ (adr r2, 800c8b0 <UART_SetConfig+0xb4>)
 800c8aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8ae:	bf00      	nop
 800c8b0:	0800c955 	.word	0x0800c955
 800c8b4:	0800c985 	.word	0x0800c985
 800c8b8:	0800c985 	.word	0x0800c985
 800c8bc:	0800c985 	.word	0x0800c985
 800c8c0:	0800c985 	.word	0x0800c985
 800c8c4:	0800c985 	.word	0x0800c985
 800c8c8:	0800c985 	.word	0x0800c985
 800c8cc:	0800c985 	.word	0x0800c985
 800c8d0:	0800c95d 	.word	0x0800c95d
 800c8d4:	0800c985 	.word	0x0800c985
 800c8d8:	0800c985 	.word	0x0800c985
 800c8dc:	0800c985 	.word	0x0800c985
 800c8e0:	0800c985 	.word	0x0800c985
 800c8e4:	0800c985 	.word	0x0800c985
 800c8e8:	0800c985 	.word	0x0800c985
 800c8ec:	0800c985 	.word	0x0800c985
 800c8f0:	0800c965 	.word	0x0800c965
 800c8f4:	0800c985 	.word	0x0800c985
 800c8f8:	0800c985 	.word	0x0800c985
 800c8fc:	0800c985 	.word	0x0800c985
 800c900:	0800c985 	.word	0x0800c985
 800c904:	0800c985 	.word	0x0800c985
 800c908:	0800c985 	.word	0x0800c985
 800c90c:	0800c985 	.word	0x0800c985
 800c910:	0800c96d 	.word	0x0800c96d
 800c914:	0800c985 	.word	0x0800c985
 800c918:	0800c985 	.word	0x0800c985
 800c91c:	0800c985 	.word	0x0800c985
 800c920:	0800c985 	.word	0x0800c985
 800c924:	0800c985 	.word	0x0800c985
 800c928:	0800c985 	.word	0x0800c985
 800c92c:	0800c985 	.word	0x0800c985
 800c930:	0800c975 	.word	0x0800c975
 800c934:	0800c985 	.word	0x0800c985
 800c938:	0800c985 	.word	0x0800c985
 800c93c:	0800c985 	.word	0x0800c985
 800c940:	0800c985 	.word	0x0800c985
 800c944:	0800c985 	.word	0x0800c985
 800c948:	0800c985 	.word	0x0800c985
 800c94c:	0800c985 	.word	0x0800c985
 800c950:	0800c97d 	.word	0x0800c97d
 800c954:	2301      	movs	r3, #1
 800c956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c95a:	e222      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800c95c:	2304      	movs	r3, #4
 800c95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c962:	e21e      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800c964:	2308      	movs	r3, #8
 800c966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c96a:	e21a      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800c96c:	2310      	movs	r3, #16
 800c96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c972:	e216      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800c974:	2320      	movs	r3, #32
 800c976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c97a:	e212      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800c97c:	2340      	movs	r3, #64	@ 0x40
 800c97e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c982:	e20e      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800c984:	2380      	movs	r3, #128	@ 0x80
 800c986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c98a:	e20a      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4a69      	ldr	r2, [pc, #420]	@ (800cb38 <UART_SetConfig+0x33c>)
 800c992:	4293      	cmp	r3, r2
 800c994:	d130      	bne.n	800c9f8 <UART_SetConfig+0x1fc>
 800c996:	4b67      	ldr	r3, [pc, #412]	@ (800cb34 <UART_SetConfig+0x338>)
 800c998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c99a:	f003 0307 	and.w	r3, r3, #7
 800c99e:	2b05      	cmp	r3, #5
 800c9a0:	d826      	bhi.n	800c9f0 <UART_SetConfig+0x1f4>
 800c9a2:	a201      	add	r2, pc, #4	@ (adr r2, 800c9a8 <UART_SetConfig+0x1ac>)
 800c9a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9a8:	0800c9c1 	.word	0x0800c9c1
 800c9ac:	0800c9c9 	.word	0x0800c9c9
 800c9b0:	0800c9d1 	.word	0x0800c9d1
 800c9b4:	0800c9d9 	.word	0x0800c9d9
 800c9b8:	0800c9e1 	.word	0x0800c9e1
 800c9bc:	0800c9e9 	.word	0x0800c9e9
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9c6:	e1ec      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800c9c8:	2304      	movs	r3, #4
 800c9ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9ce:	e1e8      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800c9d0:	2308      	movs	r3, #8
 800c9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9d6:	e1e4      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800c9d8:	2310      	movs	r3, #16
 800c9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9de:	e1e0      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800c9e0:	2320      	movs	r3, #32
 800c9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9e6:	e1dc      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800c9e8:	2340      	movs	r3, #64	@ 0x40
 800c9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9ee:	e1d8      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800c9f0:	2380      	movs	r3, #128	@ 0x80
 800c9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9f6:	e1d4      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4a4f      	ldr	r2, [pc, #316]	@ (800cb3c <UART_SetConfig+0x340>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d130      	bne.n	800ca64 <UART_SetConfig+0x268>
 800ca02:	4b4c      	ldr	r3, [pc, #304]	@ (800cb34 <UART_SetConfig+0x338>)
 800ca04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca06:	f003 0307 	and.w	r3, r3, #7
 800ca0a:	2b05      	cmp	r3, #5
 800ca0c:	d826      	bhi.n	800ca5c <UART_SetConfig+0x260>
 800ca0e:	a201      	add	r2, pc, #4	@ (adr r2, 800ca14 <UART_SetConfig+0x218>)
 800ca10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca14:	0800ca2d 	.word	0x0800ca2d
 800ca18:	0800ca35 	.word	0x0800ca35
 800ca1c:	0800ca3d 	.word	0x0800ca3d
 800ca20:	0800ca45 	.word	0x0800ca45
 800ca24:	0800ca4d 	.word	0x0800ca4d
 800ca28:	0800ca55 	.word	0x0800ca55
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca32:	e1b6      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800ca34:	2304      	movs	r3, #4
 800ca36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca3a:	e1b2      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800ca3c:	2308      	movs	r3, #8
 800ca3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca42:	e1ae      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800ca44:	2310      	movs	r3, #16
 800ca46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca4a:	e1aa      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800ca4c:	2320      	movs	r3, #32
 800ca4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca52:	e1a6      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800ca54:	2340      	movs	r3, #64	@ 0x40
 800ca56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca5a:	e1a2      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800ca5c:	2380      	movs	r3, #128	@ 0x80
 800ca5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca62:	e19e      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	4a35      	ldr	r2, [pc, #212]	@ (800cb40 <UART_SetConfig+0x344>)
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d130      	bne.n	800cad0 <UART_SetConfig+0x2d4>
 800ca6e:	4b31      	ldr	r3, [pc, #196]	@ (800cb34 <UART_SetConfig+0x338>)
 800ca70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca72:	f003 0307 	and.w	r3, r3, #7
 800ca76:	2b05      	cmp	r3, #5
 800ca78:	d826      	bhi.n	800cac8 <UART_SetConfig+0x2cc>
 800ca7a:	a201      	add	r2, pc, #4	@ (adr r2, 800ca80 <UART_SetConfig+0x284>)
 800ca7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca80:	0800ca99 	.word	0x0800ca99
 800ca84:	0800caa1 	.word	0x0800caa1
 800ca88:	0800caa9 	.word	0x0800caa9
 800ca8c:	0800cab1 	.word	0x0800cab1
 800ca90:	0800cab9 	.word	0x0800cab9
 800ca94:	0800cac1 	.word	0x0800cac1
 800ca98:	2300      	movs	r3, #0
 800ca9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca9e:	e180      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800caa0:	2304      	movs	r3, #4
 800caa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caa6:	e17c      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800caa8:	2308      	movs	r3, #8
 800caaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caae:	e178      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cab0:	2310      	movs	r3, #16
 800cab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cab6:	e174      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cab8:	2320      	movs	r3, #32
 800caba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cabe:	e170      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cac0:	2340      	movs	r3, #64	@ 0x40
 800cac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cac6:	e16c      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cac8:	2380      	movs	r3, #128	@ 0x80
 800caca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cace:	e168      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a1b      	ldr	r2, [pc, #108]	@ (800cb44 <UART_SetConfig+0x348>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d142      	bne.n	800cb60 <UART_SetConfig+0x364>
 800cada:	4b16      	ldr	r3, [pc, #88]	@ (800cb34 <UART_SetConfig+0x338>)
 800cadc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cade:	f003 0307 	and.w	r3, r3, #7
 800cae2:	2b05      	cmp	r3, #5
 800cae4:	d838      	bhi.n	800cb58 <UART_SetConfig+0x35c>
 800cae6:	a201      	add	r2, pc, #4	@ (adr r2, 800caec <UART_SetConfig+0x2f0>)
 800cae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caec:	0800cb05 	.word	0x0800cb05
 800caf0:	0800cb0d 	.word	0x0800cb0d
 800caf4:	0800cb15 	.word	0x0800cb15
 800caf8:	0800cb1d 	.word	0x0800cb1d
 800cafc:	0800cb49 	.word	0x0800cb49
 800cb00:	0800cb51 	.word	0x0800cb51
 800cb04:	2300      	movs	r3, #0
 800cb06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb0a:	e14a      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cb0c:	2304      	movs	r3, #4
 800cb0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb12:	e146      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cb14:	2308      	movs	r3, #8
 800cb16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb1a:	e142      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cb1c:	2310      	movs	r3, #16
 800cb1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb22:	e13e      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cb24:	cfff69f3 	.word	0xcfff69f3
 800cb28:	58000c00 	.word	0x58000c00
 800cb2c:	11fff4ff 	.word	0x11fff4ff
 800cb30:	40011000 	.word	0x40011000
 800cb34:	58024400 	.word	0x58024400
 800cb38:	40004400 	.word	0x40004400
 800cb3c:	40004800 	.word	0x40004800
 800cb40:	40004c00 	.word	0x40004c00
 800cb44:	40005000 	.word	0x40005000
 800cb48:	2320      	movs	r3, #32
 800cb4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb4e:	e128      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cb50:	2340      	movs	r3, #64	@ 0x40
 800cb52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb56:	e124      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cb58:	2380      	movs	r3, #128	@ 0x80
 800cb5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb5e:	e120      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	4acb      	ldr	r2, [pc, #812]	@ (800ce94 <UART_SetConfig+0x698>)
 800cb66:	4293      	cmp	r3, r2
 800cb68:	d176      	bne.n	800cc58 <UART_SetConfig+0x45c>
 800cb6a:	4bcb      	ldr	r3, [pc, #812]	@ (800ce98 <UART_SetConfig+0x69c>)
 800cb6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cb72:	2b28      	cmp	r3, #40	@ 0x28
 800cb74:	d86c      	bhi.n	800cc50 <UART_SetConfig+0x454>
 800cb76:	a201      	add	r2, pc, #4	@ (adr r2, 800cb7c <UART_SetConfig+0x380>)
 800cb78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb7c:	0800cc21 	.word	0x0800cc21
 800cb80:	0800cc51 	.word	0x0800cc51
 800cb84:	0800cc51 	.word	0x0800cc51
 800cb88:	0800cc51 	.word	0x0800cc51
 800cb8c:	0800cc51 	.word	0x0800cc51
 800cb90:	0800cc51 	.word	0x0800cc51
 800cb94:	0800cc51 	.word	0x0800cc51
 800cb98:	0800cc51 	.word	0x0800cc51
 800cb9c:	0800cc29 	.word	0x0800cc29
 800cba0:	0800cc51 	.word	0x0800cc51
 800cba4:	0800cc51 	.word	0x0800cc51
 800cba8:	0800cc51 	.word	0x0800cc51
 800cbac:	0800cc51 	.word	0x0800cc51
 800cbb0:	0800cc51 	.word	0x0800cc51
 800cbb4:	0800cc51 	.word	0x0800cc51
 800cbb8:	0800cc51 	.word	0x0800cc51
 800cbbc:	0800cc31 	.word	0x0800cc31
 800cbc0:	0800cc51 	.word	0x0800cc51
 800cbc4:	0800cc51 	.word	0x0800cc51
 800cbc8:	0800cc51 	.word	0x0800cc51
 800cbcc:	0800cc51 	.word	0x0800cc51
 800cbd0:	0800cc51 	.word	0x0800cc51
 800cbd4:	0800cc51 	.word	0x0800cc51
 800cbd8:	0800cc51 	.word	0x0800cc51
 800cbdc:	0800cc39 	.word	0x0800cc39
 800cbe0:	0800cc51 	.word	0x0800cc51
 800cbe4:	0800cc51 	.word	0x0800cc51
 800cbe8:	0800cc51 	.word	0x0800cc51
 800cbec:	0800cc51 	.word	0x0800cc51
 800cbf0:	0800cc51 	.word	0x0800cc51
 800cbf4:	0800cc51 	.word	0x0800cc51
 800cbf8:	0800cc51 	.word	0x0800cc51
 800cbfc:	0800cc41 	.word	0x0800cc41
 800cc00:	0800cc51 	.word	0x0800cc51
 800cc04:	0800cc51 	.word	0x0800cc51
 800cc08:	0800cc51 	.word	0x0800cc51
 800cc0c:	0800cc51 	.word	0x0800cc51
 800cc10:	0800cc51 	.word	0x0800cc51
 800cc14:	0800cc51 	.word	0x0800cc51
 800cc18:	0800cc51 	.word	0x0800cc51
 800cc1c:	0800cc49 	.word	0x0800cc49
 800cc20:	2301      	movs	r3, #1
 800cc22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc26:	e0bc      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cc28:	2304      	movs	r3, #4
 800cc2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc2e:	e0b8      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cc30:	2308      	movs	r3, #8
 800cc32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc36:	e0b4      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cc38:	2310      	movs	r3, #16
 800cc3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc3e:	e0b0      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cc40:	2320      	movs	r3, #32
 800cc42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc46:	e0ac      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cc48:	2340      	movs	r3, #64	@ 0x40
 800cc4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc4e:	e0a8      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cc50:	2380      	movs	r3, #128	@ 0x80
 800cc52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc56:	e0a4      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a8f      	ldr	r2, [pc, #572]	@ (800ce9c <UART_SetConfig+0x6a0>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d130      	bne.n	800ccc4 <UART_SetConfig+0x4c8>
 800cc62:	4b8d      	ldr	r3, [pc, #564]	@ (800ce98 <UART_SetConfig+0x69c>)
 800cc64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc66:	f003 0307 	and.w	r3, r3, #7
 800cc6a:	2b05      	cmp	r3, #5
 800cc6c:	d826      	bhi.n	800ccbc <UART_SetConfig+0x4c0>
 800cc6e:	a201      	add	r2, pc, #4	@ (adr r2, 800cc74 <UART_SetConfig+0x478>)
 800cc70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc74:	0800cc8d 	.word	0x0800cc8d
 800cc78:	0800cc95 	.word	0x0800cc95
 800cc7c:	0800cc9d 	.word	0x0800cc9d
 800cc80:	0800cca5 	.word	0x0800cca5
 800cc84:	0800ccad 	.word	0x0800ccad
 800cc88:	0800ccb5 	.word	0x0800ccb5
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc92:	e086      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cc94:	2304      	movs	r3, #4
 800cc96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc9a:	e082      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cc9c:	2308      	movs	r3, #8
 800cc9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cca2:	e07e      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cca4:	2310      	movs	r3, #16
 800cca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccaa:	e07a      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800ccac:	2320      	movs	r3, #32
 800ccae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccb2:	e076      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800ccb4:	2340      	movs	r3, #64	@ 0x40
 800ccb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccba:	e072      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800ccbc:	2380      	movs	r3, #128	@ 0x80
 800ccbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccc2:	e06e      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	4a75      	ldr	r2, [pc, #468]	@ (800cea0 <UART_SetConfig+0x6a4>)
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d130      	bne.n	800cd30 <UART_SetConfig+0x534>
 800ccce:	4b72      	ldr	r3, [pc, #456]	@ (800ce98 <UART_SetConfig+0x69c>)
 800ccd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ccd2:	f003 0307 	and.w	r3, r3, #7
 800ccd6:	2b05      	cmp	r3, #5
 800ccd8:	d826      	bhi.n	800cd28 <UART_SetConfig+0x52c>
 800ccda:	a201      	add	r2, pc, #4	@ (adr r2, 800cce0 <UART_SetConfig+0x4e4>)
 800ccdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cce0:	0800ccf9 	.word	0x0800ccf9
 800cce4:	0800cd01 	.word	0x0800cd01
 800cce8:	0800cd09 	.word	0x0800cd09
 800ccec:	0800cd11 	.word	0x0800cd11
 800ccf0:	0800cd19 	.word	0x0800cd19
 800ccf4:	0800cd21 	.word	0x0800cd21
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccfe:	e050      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cd00:	2304      	movs	r3, #4
 800cd02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd06:	e04c      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cd08:	2308      	movs	r3, #8
 800cd0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd0e:	e048      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cd10:	2310      	movs	r3, #16
 800cd12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd16:	e044      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cd18:	2320      	movs	r3, #32
 800cd1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd1e:	e040      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cd20:	2340      	movs	r3, #64	@ 0x40
 800cd22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd26:	e03c      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cd28:	2380      	movs	r3, #128	@ 0x80
 800cd2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd2e:	e038      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4a5b      	ldr	r2, [pc, #364]	@ (800cea4 <UART_SetConfig+0x6a8>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d130      	bne.n	800cd9c <UART_SetConfig+0x5a0>
 800cd3a:	4b57      	ldr	r3, [pc, #348]	@ (800ce98 <UART_SetConfig+0x69c>)
 800cd3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd3e:	f003 0307 	and.w	r3, r3, #7
 800cd42:	2b05      	cmp	r3, #5
 800cd44:	d826      	bhi.n	800cd94 <UART_SetConfig+0x598>
 800cd46:	a201      	add	r2, pc, #4	@ (adr r2, 800cd4c <UART_SetConfig+0x550>)
 800cd48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd4c:	0800cd65 	.word	0x0800cd65
 800cd50:	0800cd6d 	.word	0x0800cd6d
 800cd54:	0800cd75 	.word	0x0800cd75
 800cd58:	0800cd7d 	.word	0x0800cd7d
 800cd5c:	0800cd85 	.word	0x0800cd85
 800cd60:	0800cd8d 	.word	0x0800cd8d
 800cd64:	2302      	movs	r3, #2
 800cd66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd6a:	e01a      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cd6c:	2304      	movs	r3, #4
 800cd6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd72:	e016      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cd74:	2308      	movs	r3, #8
 800cd76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd7a:	e012      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cd7c:	2310      	movs	r3, #16
 800cd7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd82:	e00e      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cd84:	2320      	movs	r3, #32
 800cd86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd8a:	e00a      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cd8c:	2340      	movs	r3, #64	@ 0x40
 800cd8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd92:	e006      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cd94:	2380      	movs	r3, #128	@ 0x80
 800cd96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd9a:	e002      	b.n	800cda2 <UART_SetConfig+0x5a6>
 800cd9c:	2380      	movs	r3, #128	@ 0x80
 800cd9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4a3f      	ldr	r2, [pc, #252]	@ (800cea4 <UART_SetConfig+0x6a8>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	f040 80f8 	bne.w	800cf9e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cdae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cdb2:	2b20      	cmp	r3, #32
 800cdb4:	dc46      	bgt.n	800ce44 <UART_SetConfig+0x648>
 800cdb6:	2b02      	cmp	r3, #2
 800cdb8:	f2c0 8082 	blt.w	800cec0 <UART_SetConfig+0x6c4>
 800cdbc:	3b02      	subs	r3, #2
 800cdbe:	2b1e      	cmp	r3, #30
 800cdc0:	d87e      	bhi.n	800cec0 <UART_SetConfig+0x6c4>
 800cdc2:	a201      	add	r2, pc, #4	@ (adr r2, 800cdc8 <UART_SetConfig+0x5cc>)
 800cdc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdc8:	0800ce4b 	.word	0x0800ce4b
 800cdcc:	0800cec1 	.word	0x0800cec1
 800cdd0:	0800ce53 	.word	0x0800ce53
 800cdd4:	0800cec1 	.word	0x0800cec1
 800cdd8:	0800cec1 	.word	0x0800cec1
 800cddc:	0800cec1 	.word	0x0800cec1
 800cde0:	0800ce63 	.word	0x0800ce63
 800cde4:	0800cec1 	.word	0x0800cec1
 800cde8:	0800cec1 	.word	0x0800cec1
 800cdec:	0800cec1 	.word	0x0800cec1
 800cdf0:	0800cec1 	.word	0x0800cec1
 800cdf4:	0800cec1 	.word	0x0800cec1
 800cdf8:	0800cec1 	.word	0x0800cec1
 800cdfc:	0800cec1 	.word	0x0800cec1
 800ce00:	0800ce73 	.word	0x0800ce73
 800ce04:	0800cec1 	.word	0x0800cec1
 800ce08:	0800cec1 	.word	0x0800cec1
 800ce0c:	0800cec1 	.word	0x0800cec1
 800ce10:	0800cec1 	.word	0x0800cec1
 800ce14:	0800cec1 	.word	0x0800cec1
 800ce18:	0800cec1 	.word	0x0800cec1
 800ce1c:	0800cec1 	.word	0x0800cec1
 800ce20:	0800cec1 	.word	0x0800cec1
 800ce24:	0800cec1 	.word	0x0800cec1
 800ce28:	0800cec1 	.word	0x0800cec1
 800ce2c:	0800cec1 	.word	0x0800cec1
 800ce30:	0800cec1 	.word	0x0800cec1
 800ce34:	0800cec1 	.word	0x0800cec1
 800ce38:	0800cec1 	.word	0x0800cec1
 800ce3c:	0800cec1 	.word	0x0800cec1
 800ce40:	0800ceb3 	.word	0x0800ceb3
 800ce44:	2b40      	cmp	r3, #64	@ 0x40
 800ce46:	d037      	beq.n	800ceb8 <UART_SetConfig+0x6bc>
 800ce48:	e03a      	b.n	800cec0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ce4a:	f7fd fef5 	bl	800ac38 <HAL_RCCEx_GetD3PCLK1Freq>
 800ce4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ce50:	e03c      	b.n	800cecc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7fd ff04 	bl	800ac64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ce5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce60:	e034      	b.n	800cecc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce62:	f107 0318 	add.w	r3, r7, #24
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7fe f850 	bl	800af0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ce6c:	69fb      	ldr	r3, [r7, #28]
 800ce6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce70:	e02c      	b.n	800cecc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce72:	4b09      	ldr	r3, [pc, #36]	@ (800ce98 <UART_SetConfig+0x69c>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f003 0320 	and.w	r3, r3, #32
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d016      	beq.n	800ceac <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ce7e:	4b06      	ldr	r3, [pc, #24]	@ (800ce98 <UART_SetConfig+0x69c>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	08db      	lsrs	r3, r3, #3
 800ce84:	f003 0303 	and.w	r3, r3, #3
 800ce88:	4a07      	ldr	r2, [pc, #28]	@ (800cea8 <UART_SetConfig+0x6ac>)
 800ce8a:	fa22 f303 	lsr.w	r3, r2, r3
 800ce8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ce90:	e01c      	b.n	800cecc <UART_SetConfig+0x6d0>
 800ce92:	bf00      	nop
 800ce94:	40011400 	.word	0x40011400
 800ce98:	58024400 	.word	0x58024400
 800ce9c:	40007800 	.word	0x40007800
 800cea0:	40007c00 	.word	0x40007c00
 800cea4:	58000c00 	.word	0x58000c00
 800cea8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ceac:	4b9d      	ldr	r3, [pc, #628]	@ (800d124 <UART_SetConfig+0x928>)
 800ceae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ceb0:	e00c      	b.n	800cecc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ceb2:	4b9d      	ldr	r3, [pc, #628]	@ (800d128 <UART_SetConfig+0x92c>)
 800ceb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ceb6:	e009      	b.n	800cecc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ceb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cebe:	e005      	b.n	800cecc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800cec0:	2300      	movs	r3, #0
 800cec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cec4:	2301      	movs	r3, #1
 800cec6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ceca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cece:	2b00      	cmp	r3, #0
 800ced0:	f000 81de 	beq.w	800d290 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ced8:	4a94      	ldr	r2, [pc, #592]	@ (800d12c <UART_SetConfig+0x930>)
 800ceda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cede:	461a      	mov	r2, r3
 800cee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cee2:	fbb3 f3f2 	udiv	r3, r3, r2
 800cee6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	685a      	ldr	r2, [r3, #4]
 800ceec:	4613      	mov	r3, r2
 800ceee:	005b      	lsls	r3, r3, #1
 800cef0:	4413      	add	r3, r2
 800cef2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d305      	bcc.n	800cf04 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	685b      	ldr	r3, [r3, #4]
 800cefc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cefe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d903      	bls.n	800cf0c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800cf04:	2301      	movs	r3, #1
 800cf06:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cf0a:	e1c1      	b.n	800d290 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf0e:	2200      	movs	r2, #0
 800cf10:	60bb      	str	r3, [r7, #8]
 800cf12:	60fa      	str	r2, [r7, #12]
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf18:	4a84      	ldr	r2, [pc, #528]	@ (800d12c <UART_SetConfig+0x930>)
 800cf1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf1e:	b29b      	uxth	r3, r3
 800cf20:	2200      	movs	r2, #0
 800cf22:	603b      	str	r3, [r7, #0]
 800cf24:	607a      	str	r2, [r7, #4]
 800cf26:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cf2e:	f7f3 fa8f 	bl	8000450 <__aeabi_uldivmod>
 800cf32:	4602      	mov	r2, r0
 800cf34:	460b      	mov	r3, r1
 800cf36:	4610      	mov	r0, r2
 800cf38:	4619      	mov	r1, r3
 800cf3a:	f04f 0200 	mov.w	r2, #0
 800cf3e:	f04f 0300 	mov.w	r3, #0
 800cf42:	020b      	lsls	r3, r1, #8
 800cf44:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cf48:	0202      	lsls	r2, r0, #8
 800cf4a:	6979      	ldr	r1, [r7, #20]
 800cf4c:	6849      	ldr	r1, [r1, #4]
 800cf4e:	0849      	lsrs	r1, r1, #1
 800cf50:	2000      	movs	r0, #0
 800cf52:	460c      	mov	r4, r1
 800cf54:	4605      	mov	r5, r0
 800cf56:	eb12 0804 	adds.w	r8, r2, r4
 800cf5a:	eb43 0905 	adc.w	r9, r3, r5
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	685b      	ldr	r3, [r3, #4]
 800cf62:	2200      	movs	r2, #0
 800cf64:	469a      	mov	sl, r3
 800cf66:	4693      	mov	fp, r2
 800cf68:	4652      	mov	r2, sl
 800cf6a:	465b      	mov	r3, fp
 800cf6c:	4640      	mov	r0, r8
 800cf6e:	4649      	mov	r1, r9
 800cf70:	f7f3 fa6e 	bl	8000450 <__aeabi_uldivmod>
 800cf74:	4602      	mov	r2, r0
 800cf76:	460b      	mov	r3, r1
 800cf78:	4613      	mov	r3, r2
 800cf7a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cf7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cf82:	d308      	bcc.n	800cf96 <UART_SetConfig+0x79a>
 800cf84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cf8a:	d204      	bcs.n	800cf96 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf92:	60da      	str	r2, [r3, #12]
 800cf94:	e17c      	b.n	800d290 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800cf96:	2301      	movs	r3, #1
 800cf98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cf9c:	e178      	b.n	800d290 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	69db      	ldr	r3, [r3, #28]
 800cfa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cfa6:	f040 80c5 	bne.w	800d134 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800cfaa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cfae:	2b20      	cmp	r3, #32
 800cfb0:	dc48      	bgt.n	800d044 <UART_SetConfig+0x848>
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	db7b      	blt.n	800d0ae <UART_SetConfig+0x8b2>
 800cfb6:	2b20      	cmp	r3, #32
 800cfb8:	d879      	bhi.n	800d0ae <UART_SetConfig+0x8b2>
 800cfba:	a201      	add	r2, pc, #4	@ (adr r2, 800cfc0 <UART_SetConfig+0x7c4>)
 800cfbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfc0:	0800d04b 	.word	0x0800d04b
 800cfc4:	0800d053 	.word	0x0800d053
 800cfc8:	0800d0af 	.word	0x0800d0af
 800cfcc:	0800d0af 	.word	0x0800d0af
 800cfd0:	0800d05b 	.word	0x0800d05b
 800cfd4:	0800d0af 	.word	0x0800d0af
 800cfd8:	0800d0af 	.word	0x0800d0af
 800cfdc:	0800d0af 	.word	0x0800d0af
 800cfe0:	0800d06b 	.word	0x0800d06b
 800cfe4:	0800d0af 	.word	0x0800d0af
 800cfe8:	0800d0af 	.word	0x0800d0af
 800cfec:	0800d0af 	.word	0x0800d0af
 800cff0:	0800d0af 	.word	0x0800d0af
 800cff4:	0800d0af 	.word	0x0800d0af
 800cff8:	0800d0af 	.word	0x0800d0af
 800cffc:	0800d0af 	.word	0x0800d0af
 800d000:	0800d07b 	.word	0x0800d07b
 800d004:	0800d0af 	.word	0x0800d0af
 800d008:	0800d0af 	.word	0x0800d0af
 800d00c:	0800d0af 	.word	0x0800d0af
 800d010:	0800d0af 	.word	0x0800d0af
 800d014:	0800d0af 	.word	0x0800d0af
 800d018:	0800d0af 	.word	0x0800d0af
 800d01c:	0800d0af 	.word	0x0800d0af
 800d020:	0800d0af 	.word	0x0800d0af
 800d024:	0800d0af 	.word	0x0800d0af
 800d028:	0800d0af 	.word	0x0800d0af
 800d02c:	0800d0af 	.word	0x0800d0af
 800d030:	0800d0af 	.word	0x0800d0af
 800d034:	0800d0af 	.word	0x0800d0af
 800d038:	0800d0af 	.word	0x0800d0af
 800d03c:	0800d0af 	.word	0x0800d0af
 800d040:	0800d0a1 	.word	0x0800d0a1
 800d044:	2b40      	cmp	r3, #64	@ 0x40
 800d046:	d02e      	beq.n	800d0a6 <UART_SetConfig+0x8aa>
 800d048:	e031      	b.n	800d0ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d04a:	f7fb fdfd 	bl	8008c48 <HAL_RCC_GetPCLK1Freq>
 800d04e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d050:	e033      	b.n	800d0ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d052:	f7fb fe0f 	bl	8008c74 <HAL_RCC_GetPCLK2Freq>
 800d056:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d058:	e02f      	b.n	800d0ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d05a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d05e:	4618      	mov	r0, r3
 800d060:	f7fd fe00 	bl	800ac64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d068:	e027      	b.n	800d0ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d06a:	f107 0318 	add.w	r3, r7, #24
 800d06e:	4618      	mov	r0, r3
 800d070:	f7fd ff4c 	bl	800af0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d074:	69fb      	ldr	r3, [r7, #28]
 800d076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d078:	e01f      	b.n	800d0ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d07a:	4b2d      	ldr	r3, [pc, #180]	@ (800d130 <UART_SetConfig+0x934>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f003 0320 	and.w	r3, r3, #32
 800d082:	2b00      	cmp	r3, #0
 800d084:	d009      	beq.n	800d09a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d086:	4b2a      	ldr	r3, [pc, #168]	@ (800d130 <UART_SetConfig+0x934>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	08db      	lsrs	r3, r3, #3
 800d08c:	f003 0303 	and.w	r3, r3, #3
 800d090:	4a24      	ldr	r2, [pc, #144]	@ (800d124 <UART_SetConfig+0x928>)
 800d092:	fa22 f303 	lsr.w	r3, r2, r3
 800d096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d098:	e00f      	b.n	800d0ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d09a:	4b22      	ldr	r3, [pc, #136]	@ (800d124 <UART_SetConfig+0x928>)
 800d09c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d09e:	e00c      	b.n	800d0ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d0a0:	4b21      	ldr	r3, [pc, #132]	@ (800d128 <UART_SetConfig+0x92c>)
 800d0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0a4:	e009      	b.n	800d0ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d0a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d0aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0ac:	e005      	b.n	800d0ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d0b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d0ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	f000 80e7 	beq.w	800d290 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0c6:	4a19      	ldr	r2, [pc, #100]	@ (800d12c <UART_SetConfig+0x930>)
 800d0c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0d4:	005a      	lsls	r2, r3, #1
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	685b      	ldr	r3, [r3, #4]
 800d0da:	085b      	lsrs	r3, r3, #1
 800d0dc:	441a      	add	r2, r3
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	685b      	ldr	r3, [r3, #4]
 800d0e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ea:	2b0f      	cmp	r3, #15
 800d0ec:	d916      	bls.n	800d11c <UART_SetConfig+0x920>
 800d0ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d0f4:	d212      	bcs.n	800d11c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d0f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0f8:	b29b      	uxth	r3, r3
 800d0fa:	f023 030f 	bic.w	r3, r3, #15
 800d0fe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d102:	085b      	lsrs	r3, r3, #1
 800d104:	b29b      	uxth	r3, r3
 800d106:	f003 0307 	and.w	r3, r3, #7
 800d10a:	b29a      	uxth	r2, r3
 800d10c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d10e:	4313      	orrs	r3, r2
 800d110:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d118:	60da      	str	r2, [r3, #12]
 800d11a:	e0b9      	b.n	800d290 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d11c:	2301      	movs	r3, #1
 800d11e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d122:	e0b5      	b.n	800d290 <UART_SetConfig+0xa94>
 800d124:	03d09000 	.word	0x03d09000
 800d128:	003d0900 	.word	0x003d0900
 800d12c:	08023430 	.word	0x08023430
 800d130:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d134:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d138:	2b20      	cmp	r3, #32
 800d13a:	dc49      	bgt.n	800d1d0 <UART_SetConfig+0x9d4>
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	db7c      	blt.n	800d23a <UART_SetConfig+0xa3e>
 800d140:	2b20      	cmp	r3, #32
 800d142:	d87a      	bhi.n	800d23a <UART_SetConfig+0xa3e>
 800d144:	a201      	add	r2, pc, #4	@ (adr r2, 800d14c <UART_SetConfig+0x950>)
 800d146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d14a:	bf00      	nop
 800d14c:	0800d1d7 	.word	0x0800d1d7
 800d150:	0800d1df 	.word	0x0800d1df
 800d154:	0800d23b 	.word	0x0800d23b
 800d158:	0800d23b 	.word	0x0800d23b
 800d15c:	0800d1e7 	.word	0x0800d1e7
 800d160:	0800d23b 	.word	0x0800d23b
 800d164:	0800d23b 	.word	0x0800d23b
 800d168:	0800d23b 	.word	0x0800d23b
 800d16c:	0800d1f7 	.word	0x0800d1f7
 800d170:	0800d23b 	.word	0x0800d23b
 800d174:	0800d23b 	.word	0x0800d23b
 800d178:	0800d23b 	.word	0x0800d23b
 800d17c:	0800d23b 	.word	0x0800d23b
 800d180:	0800d23b 	.word	0x0800d23b
 800d184:	0800d23b 	.word	0x0800d23b
 800d188:	0800d23b 	.word	0x0800d23b
 800d18c:	0800d207 	.word	0x0800d207
 800d190:	0800d23b 	.word	0x0800d23b
 800d194:	0800d23b 	.word	0x0800d23b
 800d198:	0800d23b 	.word	0x0800d23b
 800d19c:	0800d23b 	.word	0x0800d23b
 800d1a0:	0800d23b 	.word	0x0800d23b
 800d1a4:	0800d23b 	.word	0x0800d23b
 800d1a8:	0800d23b 	.word	0x0800d23b
 800d1ac:	0800d23b 	.word	0x0800d23b
 800d1b0:	0800d23b 	.word	0x0800d23b
 800d1b4:	0800d23b 	.word	0x0800d23b
 800d1b8:	0800d23b 	.word	0x0800d23b
 800d1bc:	0800d23b 	.word	0x0800d23b
 800d1c0:	0800d23b 	.word	0x0800d23b
 800d1c4:	0800d23b 	.word	0x0800d23b
 800d1c8:	0800d23b 	.word	0x0800d23b
 800d1cc:	0800d22d 	.word	0x0800d22d
 800d1d0:	2b40      	cmp	r3, #64	@ 0x40
 800d1d2:	d02e      	beq.n	800d232 <UART_SetConfig+0xa36>
 800d1d4:	e031      	b.n	800d23a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d1d6:	f7fb fd37 	bl	8008c48 <HAL_RCC_GetPCLK1Freq>
 800d1da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d1dc:	e033      	b.n	800d246 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d1de:	f7fb fd49 	bl	8008c74 <HAL_RCC_GetPCLK2Freq>
 800d1e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d1e4:	e02f      	b.n	800d246 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f7fd fd3a 	bl	800ac64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1f4:	e027      	b.n	800d246 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d1f6:	f107 0318 	add.w	r3, r7, #24
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7fd fe86 	bl	800af0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d200:	69fb      	ldr	r3, [r7, #28]
 800d202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d204:	e01f      	b.n	800d246 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d206:	4b2d      	ldr	r3, [pc, #180]	@ (800d2bc <UART_SetConfig+0xac0>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f003 0320 	and.w	r3, r3, #32
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d009      	beq.n	800d226 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d212:	4b2a      	ldr	r3, [pc, #168]	@ (800d2bc <UART_SetConfig+0xac0>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	08db      	lsrs	r3, r3, #3
 800d218:	f003 0303 	and.w	r3, r3, #3
 800d21c:	4a28      	ldr	r2, [pc, #160]	@ (800d2c0 <UART_SetConfig+0xac4>)
 800d21e:	fa22 f303 	lsr.w	r3, r2, r3
 800d222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d224:	e00f      	b.n	800d246 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d226:	4b26      	ldr	r3, [pc, #152]	@ (800d2c0 <UART_SetConfig+0xac4>)
 800d228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d22a:	e00c      	b.n	800d246 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d22c:	4b25      	ldr	r3, [pc, #148]	@ (800d2c4 <UART_SetConfig+0xac8>)
 800d22e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d230:	e009      	b.n	800d246 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d238:	e005      	b.n	800d246 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d23a:	2300      	movs	r3, #0
 800d23c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d23e:	2301      	movs	r3, #1
 800d240:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d244:	bf00      	nop
    }

    if (pclk != 0U)
 800d246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d021      	beq.n	800d290 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d250:	4a1d      	ldr	r2, [pc, #116]	@ (800d2c8 <UART_SetConfig+0xacc>)
 800d252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d256:	461a      	mov	r2, r3
 800d258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d25a:	fbb3 f2f2 	udiv	r2, r3, r2
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	685b      	ldr	r3, [r3, #4]
 800d262:	085b      	lsrs	r3, r3, #1
 800d264:	441a      	add	r2, r3
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	685b      	ldr	r3, [r3, #4]
 800d26a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d26e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d272:	2b0f      	cmp	r3, #15
 800d274:	d909      	bls.n	800d28a <UART_SetConfig+0xa8e>
 800d276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d278:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d27c:	d205      	bcs.n	800d28a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d27e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d280:	b29a      	uxth	r2, r3
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	60da      	str	r2, [r3, #12]
 800d288:	e002      	b.n	800d290 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d28a:	2301      	movs	r3, #1
 800d28c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	2201      	movs	r2, #1
 800d294:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d298:	697b      	ldr	r3, [r7, #20]
 800d29a:	2201      	movs	r2, #1
 800d29c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d2ac:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3748      	adds	r7, #72	@ 0x48
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d2ba:	bf00      	nop
 800d2bc:	58024400 	.word	0x58024400
 800d2c0:	03d09000 	.word	0x03d09000
 800d2c4:	003d0900 	.word	0x003d0900
 800d2c8:	08023430 	.word	0x08023430

0800d2cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b083      	sub	sp, #12
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2d8:	f003 0308 	and.w	r3, r3, #8
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d00a      	beq.n	800d2f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	685b      	ldr	r3, [r3, #4]
 800d2e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	430a      	orrs	r2, r1
 800d2f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2fa:	f003 0301 	and.w	r3, r3, #1
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d00a      	beq.n	800d318 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	685b      	ldr	r3, [r3, #4]
 800d308:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	430a      	orrs	r2, r1
 800d316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d31c:	f003 0302 	and.w	r3, r3, #2
 800d320:	2b00      	cmp	r3, #0
 800d322:	d00a      	beq.n	800d33a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	685b      	ldr	r3, [r3, #4]
 800d32a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	430a      	orrs	r2, r1
 800d338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d33e:	f003 0304 	and.w	r3, r3, #4
 800d342:	2b00      	cmp	r3, #0
 800d344:	d00a      	beq.n	800d35c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	685b      	ldr	r3, [r3, #4]
 800d34c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	430a      	orrs	r2, r1
 800d35a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d360:	f003 0310 	and.w	r3, r3, #16
 800d364:	2b00      	cmp	r3, #0
 800d366:	d00a      	beq.n	800d37e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	689b      	ldr	r3, [r3, #8]
 800d36e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	430a      	orrs	r2, r1
 800d37c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d382:	f003 0320 	and.w	r3, r3, #32
 800d386:	2b00      	cmp	r3, #0
 800d388:	d00a      	beq.n	800d3a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	689b      	ldr	r3, [r3, #8]
 800d390:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	430a      	orrs	r2, r1
 800d39e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d01a      	beq.n	800d3e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	430a      	orrs	r2, r1
 800d3c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d3ca:	d10a      	bne.n	800d3e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	685b      	ldr	r3, [r3, #4]
 800d3d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	430a      	orrs	r2, r1
 800d3e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d00a      	beq.n	800d404 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	685b      	ldr	r3, [r3, #4]
 800d3f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	430a      	orrs	r2, r1
 800d402:	605a      	str	r2, [r3, #4]
  }
}
 800d404:	bf00      	nop
 800d406:	370c      	adds	r7, #12
 800d408:	46bd      	mov	sp, r7
 800d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40e:	4770      	bx	lr

0800d410 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b098      	sub	sp, #96	@ 0x60
 800d414:	af02      	add	r7, sp, #8
 800d416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2200      	movs	r2, #0
 800d41c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d420:	f7f5 ffe0 	bl	80033e4 <HAL_GetTick>
 800d424:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f003 0308 	and.w	r3, r3, #8
 800d430:	2b08      	cmp	r3, #8
 800d432:	d12f      	bne.n	800d494 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d434:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d438:	9300      	str	r3, [sp, #0]
 800d43a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d43c:	2200      	movs	r2, #0
 800d43e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f000 f88e 	bl	800d564 <UART_WaitOnFlagUntilTimeout>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d022      	beq.n	800d494 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d456:	e853 3f00 	ldrex	r3, [r3]
 800d45a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d45c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d45e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d462:	653b      	str	r3, [r7, #80]	@ 0x50
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	461a      	mov	r2, r3
 800d46a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d46c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d46e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d470:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d472:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d474:	e841 2300 	strex	r3, r2, [r1]
 800d478:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d47a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d1e6      	bne.n	800d44e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2220      	movs	r2, #32
 800d484:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2200      	movs	r2, #0
 800d48c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d490:	2303      	movs	r3, #3
 800d492:	e063      	b.n	800d55c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f003 0304 	and.w	r3, r3, #4
 800d49e:	2b04      	cmp	r3, #4
 800d4a0:	d149      	bne.n	800d536 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d4a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d4a6:	9300      	str	r3, [sp, #0]
 800d4a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f000 f857 	bl	800d564 <UART_WaitOnFlagUntilTimeout>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d03c      	beq.n	800d536 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4c4:	e853 3f00 	ldrex	r3, [r3]
 800d4c8:	623b      	str	r3, [r7, #32]
   return(result);
 800d4ca:	6a3b      	ldr	r3, [r7, #32]
 800d4cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d4d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4da:	633b      	str	r3, [r7, #48]	@ 0x30
 800d4dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d4e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4e2:	e841 2300 	strex	r3, r2, [r1]
 800d4e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d4e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d1e6      	bne.n	800d4bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	3308      	adds	r3, #8
 800d4f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4f6:	693b      	ldr	r3, [r7, #16]
 800d4f8:	e853 3f00 	ldrex	r3, [r3]
 800d4fc:	60fb      	str	r3, [r7, #12]
   return(result);
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f023 0301 	bic.w	r3, r3, #1
 800d504:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	3308      	adds	r3, #8
 800d50c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d50e:	61fa      	str	r2, [r7, #28]
 800d510:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d512:	69b9      	ldr	r1, [r7, #24]
 800d514:	69fa      	ldr	r2, [r7, #28]
 800d516:	e841 2300 	strex	r3, r2, [r1]
 800d51a:	617b      	str	r3, [r7, #20]
   return(result);
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d1e5      	bne.n	800d4ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2220      	movs	r2, #32
 800d526:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2200      	movs	r2, #0
 800d52e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d532:	2303      	movs	r3, #3
 800d534:	e012      	b.n	800d55c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2220      	movs	r2, #32
 800d53a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2220      	movs	r2, #32
 800d542:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2200      	movs	r2, #0
 800d54a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2200      	movs	r2, #0
 800d550:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2200      	movs	r2, #0
 800d556:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d55a:	2300      	movs	r3, #0
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3758      	adds	r7, #88	@ 0x58
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
 800d56a:	60f8      	str	r0, [r7, #12]
 800d56c:	60b9      	str	r1, [r7, #8]
 800d56e:	603b      	str	r3, [r7, #0]
 800d570:	4613      	mov	r3, r2
 800d572:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d574:	e04f      	b.n	800d616 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d576:	69bb      	ldr	r3, [r7, #24]
 800d578:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d57c:	d04b      	beq.n	800d616 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d57e:	f7f5 ff31 	bl	80033e4 <HAL_GetTick>
 800d582:	4602      	mov	r2, r0
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	1ad3      	subs	r3, r2, r3
 800d588:	69ba      	ldr	r2, [r7, #24]
 800d58a:	429a      	cmp	r2, r3
 800d58c:	d302      	bcc.n	800d594 <UART_WaitOnFlagUntilTimeout+0x30>
 800d58e:	69bb      	ldr	r3, [r7, #24]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d101      	bne.n	800d598 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d594:	2303      	movs	r3, #3
 800d596:	e04e      	b.n	800d636 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f003 0304 	and.w	r3, r3, #4
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d037      	beq.n	800d616 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	2b80      	cmp	r3, #128	@ 0x80
 800d5aa:	d034      	beq.n	800d616 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	2b40      	cmp	r3, #64	@ 0x40
 800d5b0:	d031      	beq.n	800d616 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	69db      	ldr	r3, [r3, #28]
 800d5b8:	f003 0308 	and.w	r3, r3, #8
 800d5bc:	2b08      	cmp	r3, #8
 800d5be:	d110      	bne.n	800d5e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	2208      	movs	r2, #8
 800d5c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d5c8:	68f8      	ldr	r0, [r7, #12]
 800d5ca:	f000 f921 	bl	800d810 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	2208      	movs	r2, #8
 800d5d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	2200      	movs	r2, #0
 800d5da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d5de:	2301      	movs	r3, #1
 800d5e0:	e029      	b.n	800d636 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	69db      	ldr	r3, [r3, #28]
 800d5e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d5ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d5f0:	d111      	bne.n	800d616 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d5fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d5fc:	68f8      	ldr	r0, [r7, #12]
 800d5fe:	f000 f907 	bl	800d810 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2220      	movs	r2, #32
 800d606:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2200      	movs	r2, #0
 800d60e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d612:	2303      	movs	r3, #3
 800d614:	e00f      	b.n	800d636 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	69da      	ldr	r2, [r3, #28]
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	4013      	ands	r3, r2
 800d620:	68ba      	ldr	r2, [r7, #8]
 800d622:	429a      	cmp	r2, r3
 800d624:	bf0c      	ite	eq
 800d626:	2301      	moveq	r3, #1
 800d628:	2300      	movne	r3, #0
 800d62a:	b2db      	uxtb	r3, r3
 800d62c:	461a      	mov	r2, r3
 800d62e:	79fb      	ldrb	r3, [r7, #7]
 800d630:	429a      	cmp	r2, r3
 800d632:	d0a0      	beq.n	800d576 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d634:	2300      	movs	r3, #0
}
 800d636:	4618      	mov	r0, r3
 800d638:	3710      	adds	r7, #16
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
	...

0800d640 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b096      	sub	sp, #88	@ 0x58
 800d644:	af00      	add	r7, sp, #0
 800d646:	60f8      	str	r0, [r7, #12]
 800d648:	60b9      	str	r1, [r7, #8]
 800d64a:	4613      	mov	r3, r2
 800d64c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	68ba      	ldr	r2, [r7, #8]
 800d652:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	88fa      	ldrh	r2, [r7, #6]
 800d658:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	2200      	movs	r2, #0
 800d660:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2222      	movs	r2, #34	@ 0x22
 800d668:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d672:	2b00      	cmp	r3, #0
 800d674:	d02d      	beq.n	800d6d2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d67c:	4a40      	ldr	r2, [pc, #256]	@ (800d780 <UART_Start_Receive_DMA+0x140>)
 800d67e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d686:	4a3f      	ldr	r2, [pc, #252]	@ (800d784 <UART_Start_Receive_DMA+0x144>)
 800d688:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d690:	4a3d      	ldr	r2, [pc, #244]	@ (800d788 <UART_Start_Receive_DMA+0x148>)
 800d692:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d69a:	2200      	movs	r2, #0
 800d69c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	3324      	adds	r3, #36	@ 0x24
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	88fb      	ldrh	r3, [r7, #6]
 800d6b4:	f7f7 fe04 	bl	80052c0 <HAL_DMA_Start_IT>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d009      	beq.n	800d6d2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2210      	movs	r2, #16
 800d6c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	2220      	movs	r2, #32
 800d6ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	e051      	b.n	800d776 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	691b      	ldr	r3, [r3, #16]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d018      	beq.n	800d70c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6e2:	e853 3f00 	ldrex	r3, [r3]
 800d6e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d6ee:	657b      	str	r3, [r7, #84]	@ 0x54
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	461a      	mov	r2, r3
 800d6f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d6fa:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6fc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d6fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d700:	e841 2300 	strex	r3, r2, [r1]
 800d704:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d1e6      	bne.n	800d6da <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	3308      	adds	r3, #8
 800d712:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d716:	e853 3f00 	ldrex	r3, [r3]
 800d71a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d71e:	f043 0301 	orr.w	r3, r3, #1
 800d722:	653b      	str	r3, [r7, #80]	@ 0x50
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	3308      	adds	r3, #8
 800d72a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d72c:	637a      	str	r2, [r7, #52]	@ 0x34
 800d72e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d730:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d732:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d734:	e841 2300 	strex	r3, r2, [r1]
 800d738:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d73a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d1e5      	bne.n	800d70c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	3308      	adds	r3, #8
 800d746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	e853 3f00 	ldrex	r3, [r3]
 800d74e:	613b      	str	r3, [r7, #16]
   return(result);
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d756:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	3308      	adds	r3, #8
 800d75e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d760:	623a      	str	r2, [r7, #32]
 800d762:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d764:	69f9      	ldr	r1, [r7, #28]
 800d766:	6a3a      	ldr	r2, [r7, #32]
 800d768:	e841 2300 	strex	r3, r2, [r1]
 800d76c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d76e:	69bb      	ldr	r3, [r7, #24]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d1e5      	bne.n	800d740 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800d774:	2300      	movs	r3, #0
}
 800d776:	4618      	mov	r0, r3
 800d778:	3758      	adds	r7, #88	@ 0x58
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
 800d77e:	bf00      	nop
 800d780:	0800d98f 	.word	0x0800d98f
 800d784:	0800dab7 	.word	0x0800dab7
 800d788:	0800daf5 	.word	0x0800daf5

0800d78c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b08f      	sub	sp, #60	@ 0x3c
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d79a:	6a3b      	ldr	r3, [r7, #32]
 800d79c:	e853 3f00 	ldrex	r3, [r3]
 800d7a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d7a2:	69fb      	ldr	r3, [r7, #28]
 800d7a4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d7a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	461a      	mov	r2, r3
 800d7b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d7b4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d7b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d7ba:	e841 2300 	strex	r3, r2, [r1]
 800d7be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d1e6      	bne.n	800d794 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	3308      	adds	r3, #8
 800d7cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	e853 3f00 	ldrex	r3, [r3]
 800d7d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d7dc:	633b      	str	r3, [r7, #48]	@ 0x30
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	3308      	adds	r3, #8
 800d7e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7e6:	61ba      	str	r2, [r7, #24]
 800d7e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ea:	6979      	ldr	r1, [r7, #20]
 800d7ec:	69ba      	ldr	r2, [r7, #24]
 800d7ee:	e841 2300 	strex	r3, r2, [r1]
 800d7f2:	613b      	str	r3, [r7, #16]
   return(result);
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d1e5      	bne.n	800d7c6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2220      	movs	r2, #32
 800d7fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800d802:	bf00      	nop
 800d804:	373c      	adds	r7, #60	@ 0x3c
 800d806:	46bd      	mov	sp, r7
 800d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80c:	4770      	bx	lr
	...

0800d810 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d810:	b480      	push	{r7}
 800d812:	b095      	sub	sp, #84	@ 0x54
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d81e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d820:	e853 3f00 	ldrex	r3, [r3]
 800d824:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d828:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d82c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	461a      	mov	r2, r3
 800d834:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d836:	643b      	str	r3, [r7, #64]	@ 0x40
 800d838:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d83a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d83c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d83e:	e841 2300 	strex	r3, r2, [r1]
 800d842:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d846:	2b00      	cmp	r3, #0
 800d848:	d1e6      	bne.n	800d818 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	3308      	adds	r3, #8
 800d850:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d852:	6a3b      	ldr	r3, [r7, #32]
 800d854:	e853 3f00 	ldrex	r3, [r3]
 800d858:	61fb      	str	r3, [r7, #28]
   return(result);
 800d85a:	69fa      	ldr	r2, [r7, #28]
 800d85c:	4b1e      	ldr	r3, [pc, #120]	@ (800d8d8 <UART_EndRxTransfer+0xc8>)
 800d85e:	4013      	ands	r3, r2
 800d860:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	3308      	adds	r3, #8
 800d868:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d86a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d86c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d86e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d870:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d872:	e841 2300 	strex	r3, r2, [r1]
 800d876:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d1e5      	bne.n	800d84a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d882:	2b01      	cmp	r3, #1
 800d884:	d118      	bne.n	800d8b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	e853 3f00 	ldrex	r3, [r3]
 800d892:	60bb      	str	r3, [r7, #8]
   return(result);
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	f023 0310 	bic.w	r3, r3, #16
 800d89a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	461a      	mov	r2, r3
 800d8a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d8a4:	61bb      	str	r3, [r7, #24]
 800d8a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8a8:	6979      	ldr	r1, [r7, #20]
 800d8aa:	69ba      	ldr	r2, [r7, #24]
 800d8ac:	e841 2300 	strex	r3, r2, [r1]
 800d8b0:	613b      	str	r3, [r7, #16]
   return(result);
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d1e6      	bne.n	800d886 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2220      	movs	r2, #32
 800d8bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d8cc:	bf00      	nop
 800d8ce:	3754      	adds	r7, #84	@ 0x54
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr
 800d8d8:	effffffe 	.word	0xeffffffe

0800d8dc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b090      	sub	sp, #64	@ 0x40
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8e8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	69db      	ldr	r3, [r3, #28]
 800d8ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d8f2:	d037      	beq.n	800d964 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d8f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d8fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	3308      	adds	r3, #8
 800d902:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d906:	e853 3f00 	ldrex	r3, [r3]
 800d90a:	623b      	str	r3, [r7, #32]
   return(result);
 800d90c:	6a3b      	ldr	r3, [r7, #32]
 800d90e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d912:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	3308      	adds	r3, #8
 800d91a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d91c:	633a      	str	r2, [r7, #48]	@ 0x30
 800d91e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d920:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d924:	e841 2300 	strex	r3, r2, [r1]
 800d928:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d92a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d1e5      	bne.n	800d8fc <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	e853 3f00 	ldrex	r3, [r3]
 800d93c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d944:	637b      	str	r3, [r7, #52]	@ 0x34
 800d946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	461a      	mov	r2, r3
 800d94c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d94e:	61fb      	str	r3, [r7, #28]
 800d950:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d952:	69b9      	ldr	r1, [r7, #24]
 800d954:	69fa      	ldr	r2, [r7, #28]
 800d956:	e841 2300 	strex	r3, r2, [r1]
 800d95a:	617b      	str	r3, [r7, #20]
   return(result);
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d1e6      	bne.n	800d930 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d962:	e002      	b.n	800d96a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d964:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d966:	f7fe ff15 	bl	800c794 <HAL_UART_TxCpltCallback>
}
 800d96a:	bf00      	nop
 800d96c:	3740      	adds	r7, #64	@ 0x40
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}

0800d972 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d972:	b580      	push	{r7, lr}
 800d974:	b084      	sub	sp, #16
 800d976:	af00      	add	r7, sp, #0
 800d978:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d97e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	f7fe ff11 	bl	800c7a8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d986:	bf00      	nop
 800d988:	3710      	adds	r7, #16
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}

0800d98e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d98e:	b580      	push	{r7, lr}
 800d990:	b09c      	sub	sp, #112	@ 0x70
 800d992:	af00      	add	r7, sp, #0
 800d994:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d99a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	69db      	ldr	r3, [r3, #28]
 800d9a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d9a4:	d071      	beq.n	800da8a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d9a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d9ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d9b6:	e853 3f00 	ldrex	r3, [r3]
 800d9ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d9bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d9be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d9c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d9c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	461a      	mov	r2, r3
 800d9ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d9cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d9ce:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d9d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d9d4:	e841 2300 	strex	r3, r2, [r1]
 800d9d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d9da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d1e6      	bne.n	800d9ae <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	3308      	adds	r3, #8
 800d9e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9ea:	e853 3f00 	ldrex	r3, [r3]
 800d9ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d9f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9f2:	f023 0301 	bic.w	r3, r3, #1
 800d9f6:	667b      	str	r3, [r7, #100]	@ 0x64
 800d9f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	3308      	adds	r3, #8
 800d9fe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800da00:	647a      	str	r2, [r7, #68]	@ 0x44
 800da02:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800da06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800da08:	e841 2300 	strex	r3, r2, [r1]
 800da0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800da0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da10:	2b00      	cmp	r3, #0
 800da12:	d1e5      	bne.n	800d9e0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	3308      	adds	r3, #8
 800da1a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da1e:	e853 3f00 	ldrex	r3, [r3]
 800da22:	623b      	str	r3, [r7, #32]
   return(result);
 800da24:	6a3b      	ldr	r3, [r7, #32]
 800da26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800da2a:	663b      	str	r3, [r7, #96]	@ 0x60
 800da2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	3308      	adds	r3, #8
 800da32:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800da34:	633a      	str	r2, [r7, #48]	@ 0x30
 800da36:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800da3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da3c:	e841 2300 	strex	r3, r2, [r1]
 800da40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800da42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da44:	2b00      	cmp	r3, #0
 800da46:	d1e5      	bne.n	800da14 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800da48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da4a:	2220      	movs	r2, #32
 800da4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da54:	2b01      	cmp	r3, #1
 800da56:	d118      	bne.n	800da8a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	e853 3f00 	ldrex	r3, [r3]
 800da64:	60fb      	str	r3, [r7, #12]
   return(result);
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	f023 0310 	bic.w	r3, r3, #16
 800da6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800da6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	461a      	mov	r2, r3
 800da74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800da76:	61fb      	str	r3, [r7, #28]
 800da78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da7a:	69b9      	ldr	r1, [r7, #24]
 800da7c:	69fa      	ldr	r2, [r7, #28]
 800da7e:	e841 2300 	strex	r3, r2, [r1]
 800da82:	617b      	str	r3, [r7, #20]
   return(result);
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d1e6      	bne.n	800da58 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800da8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da8c:	2200      	movs	r2, #0
 800da8e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da94:	2b01      	cmp	r3, #1
 800da96:	d107      	bne.n	800daa8 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800da98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800da9e:	4619      	mov	r1, r3
 800daa0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800daa2:	f7fe fe9f 	bl	800c7e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800daa6:	e002      	b.n	800daae <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800daa8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800daaa:	f7f3 fe6b 	bl	8001784 <HAL_UART_RxCpltCallback>
}
 800daae:	bf00      	nop
 800dab0:	3770      	adds	r7, #112	@ 0x70
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}

0800dab6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dab6:	b580      	push	{r7, lr}
 800dab8:	b084      	sub	sp, #16
 800daba:	af00      	add	r7, sp, #0
 800dabc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dac2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2201      	movs	r2, #1
 800dac8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dace:	2b01      	cmp	r3, #1
 800dad0:	d109      	bne.n	800dae6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800dad8:	085b      	lsrs	r3, r3, #1
 800dada:	b29b      	uxth	r3, r3
 800dadc:	4619      	mov	r1, r3
 800dade:	68f8      	ldr	r0, [r7, #12]
 800dae0:	f7fe fe80 	bl	800c7e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dae4:	e002      	b.n	800daec <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800dae6:	68f8      	ldr	r0, [r7, #12]
 800dae8:	f7fe fe68 	bl	800c7bc <HAL_UART_RxHalfCpltCallback>
}
 800daec:	bf00      	nop
 800daee:	3710      	adds	r7, #16
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}

0800daf4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b086      	sub	sp, #24
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db00:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db08:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800db10:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	689b      	ldr	r3, [r3, #8]
 800db18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db1c:	2b80      	cmp	r3, #128	@ 0x80
 800db1e:	d109      	bne.n	800db34 <UART_DMAError+0x40>
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	2b21      	cmp	r3, #33	@ 0x21
 800db24:	d106      	bne.n	800db34 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	2200      	movs	r2, #0
 800db2a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800db2e:	6978      	ldr	r0, [r7, #20]
 800db30:	f7ff fe2c 	bl	800d78c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	689b      	ldr	r3, [r3, #8]
 800db3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db3e:	2b40      	cmp	r3, #64	@ 0x40
 800db40:	d109      	bne.n	800db56 <UART_DMAError+0x62>
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	2b22      	cmp	r3, #34	@ 0x22
 800db46:	d106      	bne.n	800db56 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	2200      	movs	r2, #0
 800db4c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800db50:	6978      	ldr	r0, [r7, #20]
 800db52:	f7ff fe5d 	bl	800d810 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db5c:	f043 0210 	orr.w	r2, r3, #16
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800db66:	6978      	ldr	r0, [r7, #20]
 800db68:	f7fe fe32 	bl	800c7d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db6c:	bf00      	nop
 800db6e:	3718      	adds	r7, #24
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	2200      	movs	r2, #0
 800db86:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	2200      	movs	r2, #0
 800db8e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800db92:	68f8      	ldr	r0, [r7, #12]
 800db94:	f7fe fe1c 	bl	800c7d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db98:	bf00      	nop
 800db9a:	3710      	adds	r7, #16
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}

0800dba0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b088      	sub	sp, #32
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	e853 3f00 	ldrex	r3, [r3]
 800dbb4:	60bb      	str	r3, [r7, #8]
   return(result);
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dbbc:	61fb      	str	r3, [r7, #28]
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	461a      	mov	r2, r3
 800dbc4:	69fb      	ldr	r3, [r7, #28]
 800dbc6:	61bb      	str	r3, [r7, #24]
 800dbc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbca:	6979      	ldr	r1, [r7, #20]
 800dbcc:	69ba      	ldr	r2, [r7, #24]
 800dbce:	e841 2300 	strex	r3, r2, [r1]
 800dbd2:	613b      	str	r3, [r7, #16]
   return(result);
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d1e6      	bne.n	800dba8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2220      	movs	r2, #32
 800dbde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f7fe fdd3 	bl	800c794 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbee:	bf00      	nop
 800dbf0:	3720      	adds	r7, #32
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}

0800dbf6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dbf6:	b480      	push	{r7}
 800dbf8:	b083      	sub	sp, #12
 800dbfa:	af00      	add	r7, sp, #0
 800dbfc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dbfe:	bf00      	nop
 800dc00:	370c      	adds	r7, #12
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr

0800dc0a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dc0a:	b480      	push	{r7}
 800dc0c:	b083      	sub	sp, #12
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dc12:	bf00      	nop
 800dc14:	370c      	adds	r7, #12
 800dc16:	46bd      	mov	sp, r7
 800dc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1c:	4770      	bx	lr

0800dc1e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dc1e:	b480      	push	{r7}
 800dc20:	b083      	sub	sp, #12
 800dc22:	af00      	add	r7, sp, #0
 800dc24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dc26:	bf00      	nop
 800dc28:	370c      	adds	r7, #12
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc30:	4770      	bx	lr

0800dc32 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dc32:	b480      	push	{r7}
 800dc34:	b085      	sub	sp, #20
 800dc36:	af00      	add	r7, sp, #0
 800dc38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dc40:	2b01      	cmp	r3, #1
 800dc42:	d101      	bne.n	800dc48 <HAL_UARTEx_DisableFifoMode+0x16>
 800dc44:	2302      	movs	r3, #2
 800dc46:	e027      	b.n	800dc98 <HAL_UARTEx_DisableFifoMode+0x66>
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2224      	movs	r2, #36	@ 0x24
 800dc54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	681a      	ldr	r2, [r3, #0]
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	f022 0201 	bic.w	r2, r2, #1
 800dc6e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800dc76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	68fa      	ldr	r2, [r7, #12]
 800dc84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2220      	movs	r2, #32
 800dc8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2200      	movs	r2, #0
 800dc92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dc96:	2300      	movs	r3, #0
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3714      	adds	r7, #20
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca2:	4770      	bx	lr

0800dca4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
 800dcac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	d101      	bne.n	800dcbc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dcb8:	2302      	movs	r3, #2
 800dcba:	e02d      	b.n	800dd18 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2201      	movs	r2, #1
 800dcc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2224      	movs	r2, #36	@ 0x24
 800dcc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	681a      	ldr	r2, [r3, #0]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	f022 0201 	bic.w	r2, r2, #1
 800dce2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	689b      	ldr	r3, [r3, #8]
 800dcea:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	683a      	ldr	r2, [r7, #0]
 800dcf4:	430a      	orrs	r2, r1
 800dcf6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f000 f84f 	bl	800dd9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	68fa      	ldr	r2, [r7, #12]
 800dd04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2220      	movs	r2, #32
 800dd0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2200      	movs	r2, #0
 800dd12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dd16:	2300      	movs	r3, #0
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3710      	adds	r7, #16
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}

0800dd20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b084      	sub	sp, #16
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
 800dd28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dd30:	2b01      	cmp	r3, #1
 800dd32:	d101      	bne.n	800dd38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dd34:	2302      	movs	r3, #2
 800dd36:	e02d      	b.n	800dd94 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2201      	movs	r2, #1
 800dd3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2224      	movs	r2, #36	@ 0x24
 800dd44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	681a      	ldr	r2, [r3, #0]
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f022 0201 	bic.w	r2, r2, #1
 800dd5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	689b      	ldr	r3, [r3, #8]
 800dd66:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	683a      	ldr	r2, [r7, #0]
 800dd70:	430a      	orrs	r2, r1
 800dd72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f000 f811 	bl	800dd9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	68fa      	ldr	r2, [r7, #12]
 800dd80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2220      	movs	r2, #32
 800dd86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dd92:	2300      	movs	r3, #0
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	3710      	adds	r7, #16
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}

0800dd9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b085      	sub	sp, #20
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d108      	bne.n	800ddbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2201      	movs	r2, #1
 800ddb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ddbc:	e031      	b.n	800de22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ddbe:	2310      	movs	r3, #16
 800ddc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ddc2:	2310      	movs	r3, #16
 800ddc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	689b      	ldr	r3, [r3, #8]
 800ddcc:	0e5b      	lsrs	r3, r3, #25
 800ddce:	b2db      	uxtb	r3, r3
 800ddd0:	f003 0307 	and.w	r3, r3, #7
 800ddd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	689b      	ldr	r3, [r3, #8]
 800dddc:	0f5b      	lsrs	r3, r3, #29
 800ddde:	b2db      	uxtb	r3, r3
 800dde0:	f003 0307 	and.w	r3, r3, #7
 800dde4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dde6:	7bbb      	ldrb	r3, [r7, #14]
 800dde8:	7b3a      	ldrb	r2, [r7, #12]
 800ddea:	4911      	ldr	r1, [pc, #68]	@ (800de30 <UARTEx_SetNbDataToProcess+0x94>)
 800ddec:	5c8a      	ldrb	r2, [r1, r2]
 800ddee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ddf2:	7b3a      	ldrb	r2, [r7, #12]
 800ddf4:	490f      	ldr	r1, [pc, #60]	@ (800de34 <UARTEx_SetNbDataToProcess+0x98>)
 800ddf6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ddf8:	fb93 f3f2 	sdiv	r3, r3, r2
 800ddfc:	b29a      	uxth	r2, r3
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de04:	7bfb      	ldrb	r3, [r7, #15]
 800de06:	7b7a      	ldrb	r2, [r7, #13]
 800de08:	4909      	ldr	r1, [pc, #36]	@ (800de30 <UARTEx_SetNbDataToProcess+0x94>)
 800de0a:	5c8a      	ldrb	r2, [r1, r2]
 800de0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800de10:	7b7a      	ldrb	r2, [r7, #13]
 800de12:	4908      	ldr	r1, [pc, #32]	@ (800de34 <UARTEx_SetNbDataToProcess+0x98>)
 800de14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de16:	fb93 f3f2 	sdiv	r3, r3, r2
 800de1a:	b29a      	uxth	r2, r3
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800de22:	bf00      	nop
 800de24:	3714      	adds	r7, #20
 800de26:	46bd      	mov	sp, r7
 800de28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2c:	4770      	bx	lr
 800de2e:	bf00      	nop
 800de30:	08023448 	.word	0x08023448
 800de34:	08023450 	.word	0x08023450

0800de38 <__NVIC_SetPriority>:
{
 800de38:	b480      	push	{r7}
 800de3a:	b083      	sub	sp, #12
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	4603      	mov	r3, r0
 800de40:	6039      	str	r1, [r7, #0]
 800de42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800de44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	db0a      	blt.n	800de62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	b2da      	uxtb	r2, r3
 800de50:	490c      	ldr	r1, [pc, #48]	@ (800de84 <__NVIC_SetPriority+0x4c>)
 800de52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800de56:	0112      	lsls	r2, r2, #4
 800de58:	b2d2      	uxtb	r2, r2
 800de5a:	440b      	add	r3, r1
 800de5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800de60:	e00a      	b.n	800de78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	b2da      	uxtb	r2, r3
 800de66:	4908      	ldr	r1, [pc, #32]	@ (800de88 <__NVIC_SetPriority+0x50>)
 800de68:	88fb      	ldrh	r3, [r7, #6]
 800de6a:	f003 030f 	and.w	r3, r3, #15
 800de6e:	3b04      	subs	r3, #4
 800de70:	0112      	lsls	r2, r2, #4
 800de72:	b2d2      	uxtb	r2, r2
 800de74:	440b      	add	r3, r1
 800de76:	761a      	strb	r2, [r3, #24]
}
 800de78:	bf00      	nop
 800de7a:	370c      	adds	r7, #12
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr
 800de84:	e000e100 	.word	0xe000e100
 800de88:	e000ed00 	.word	0xe000ed00

0800de8c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800de8c:	b580      	push	{r7, lr}
 800de8e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800de90:	4b05      	ldr	r3, [pc, #20]	@ (800dea8 <SysTick_Handler+0x1c>)
 800de92:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800de94:	f002 f9c0 	bl	8010218 <xTaskGetSchedulerState>
 800de98:	4603      	mov	r3, r0
 800de9a:	2b01      	cmp	r3, #1
 800de9c:	d001      	beq.n	800dea2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800de9e:	f003 fac3 	bl	8011428 <xPortSysTickHandler>
  }
}
 800dea2:	bf00      	nop
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	e000e010 	.word	0xe000e010

0800deac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800deac:	b580      	push	{r7, lr}
 800deae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800deb0:	2100      	movs	r1, #0
 800deb2:	f06f 0004 	mvn.w	r0, #4
 800deb6:	f7ff ffbf 	bl	800de38 <__NVIC_SetPriority>
#endif
}
 800deba:	bf00      	nop
 800debc:	bd80      	pop	{r7, pc}
	...

0800dec0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dec0:	b480      	push	{r7}
 800dec2:	b083      	sub	sp, #12
 800dec4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dec6:	f3ef 8305 	mrs	r3, IPSR
 800deca:	603b      	str	r3, [r7, #0]
  return(result);
 800decc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d003      	beq.n	800deda <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ded2:	f06f 0305 	mvn.w	r3, #5
 800ded6:	607b      	str	r3, [r7, #4]
 800ded8:	e00c      	b.n	800def4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800deda:	4b0a      	ldr	r3, [pc, #40]	@ (800df04 <osKernelInitialize+0x44>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d105      	bne.n	800deee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800dee2:	4b08      	ldr	r3, [pc, #32]	@ (800df04 <osKernelInitialize+0x44>)
 800dee4:	2201      	movs	r2, #1
 800dee6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dee8:	2300      	movs	r3, #0
 800deea:	607b      	str	r3, [r7, #4]
 800deec:	e002      	b.n	800def4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800deee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800def2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800def4:	687b      	ldr	r3, [r7, #4]
}
 800def6:	4618      	mov	r0, r3
 800def8:	370c      	adds	r7, #12
 800defa:	46bd      	mov	sp, r7
 800defc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df00:	4770      	bx	lr
 800df02:	bf00      	nop
 800df04:	24032d54 	.word	0x24032d54

0800df08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800df08:	b580      	push	{r7, lr}
 800df0a:	b082      	sub	sp, #8
 800df0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df0e:	f3ef 8305 	mrs	r3, IPSR
 800df12:	603b      	str	r3, [r7, #0]
  return(result);
 800df14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800df16:	2b00      	cmp	r3, #0
 800df18:	d003      	beq.n	800df22 <osKernelStart+0x1a>
    stat = osErrorISR;
 800df1a:	f06f 0305 	mvn.w	r3, #5
 800df1e:	607b      	str	r3, [r7, #4]
 800df20:	e010      	b.n	800df44 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800df22:	4b0b      	ldr	r3, [pc, #44]	@ (800df50 <osKernelStart+0x48>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	2b01      	cmp	r3, #1
 800df28:	d109      	bne.n	800df3e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800df2a:	f7ff ffbf 	bl	800deac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800df2e:	4b08      	ldr	r3, [pc, #32]	@ (800df50 <osKernelStart+0x48>)
 800df30:	2202      	movs	r2, #2
 800df32:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800df34:	f001 fcc2 	bl	800f8bc <vTaskStartScheduler>
      stat = osOK;
 800df38:	2300      	movs	r3, #0
 800df3a:	607b      	str	r3, [r7, #4]
 800df3c:	e002      	b.n	800df44 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800df3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800df42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800df44:	687b      	ldr	r3, [r7, #4]
}
 800df46:	4618      	mov	r0, r3
 800df48:	3708      	adds	r7, #8
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop
 800df50:	24032d54 	.word	0x24032d54

0800df54 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800df54:	b580      	push	{r7, lr}
 800df56:	b082      	sub	sp, #8
 800df58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df5a:	f3ef 8305 	mrs	r3, IPSR
 800df5e:	603b      	str	r3, [r7, #0]
  return(result);
 800df60:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800df62:	2b00      	cmp	r3, #0
 800df64:	d003      	beq.n	800df6e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800df66:	f001 fdd5 	bl	800fb14 <xTaskGetTickCountFromISR>
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	e002      	b.n	800df74 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800df6e:	f001 fdc1 	bl	800faf4 <xTaskGetTickCount>
 800df72:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800df74:	687b      	ldr	r3, [r7, #4]
}
 800df76:	4618      	mov	r0, r3
 800df78:	3708      	adds	r7, #8
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}

0800df7e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800df7e:	b580      	push	{r7, lr}
 800df80:	b08e      	sub	sp, #56	@ 0x38
 800df82:	af04      	add	r7, sp, #16
 800df84:	60f8      	str	r0, [r7, #12]
 800df86:	60b9      	str	r1, [r7, #8]
 800df88:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800df8a:	2300      	movs	r3, #0
 800df8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df8e:	f3ef 8305 	mrs	r3, IPSR
 800df92:	617b      	str	r3, [r7, #20]
  return(result);
 800df94:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800df96:	2b00      	cmp	r3, #0
 800df98:	d17e      	bne.n	800e098 <osThreadNew+0x11a>
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d07b      	beq.n	800e098 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800dfa0:	2380      	movs	r3, #128	@ 0x80
 800dfa2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800dfa4:	2318      	movs	r3, #24
 800dfa6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800dfac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dfb0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d045      	beq.n	800e044 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d002      	beq.n	800dfc6 <osThreadNew+0x48>
        name = attr->name;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	699b      	ldr	r3, [r3, #24]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d002      	beq.n	800dfd4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	699b      	ldr	r3, [r3, #24]
 800dfd2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dfd4:	69fb      	ldr	r3, [r7, #28]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d008      	beq.n	800dfec <osThreadNew+0x6e>
 800dfda:	69fb      	ldr	r3, [r7, #28]
 800dfdc:	2b38      	cmp	r3, #56	@ 0x38
 800dfde:	d805      	bhi.n	800dfec <osThreadNew+0x6e>
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	685b      	ldr	r3, [r3, #4]
 800dfe4:	f003 0301 	and.w	r3, r3, #1
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d001      	beq.n	800dff0 <osThreadNew+0x72>
        return (NULL);
 800dfec:	2300      	movs	r3, #0
 800dfee:	e054      	b.n	800e09a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	695b      	ldr	r3, [r3, #20]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d003      	beq.n	800e000 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	695b      	ldr	r3, [r3, #20]
 800dffc:	089b      	lsrs	r3, r3, #2
 800dffe:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	689b      	ldr	r3, [r3, #8]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d00e      	beq.n	800e026 <osThreadNew+0xa8>
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	68db      	ldr	r3, [r3, #12]
 800e00c:	2ba7      	cmp	r3, #167	@ 0xa7
 800e00e:	d90a      	bls.n	800e026 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e014:	2b00      	cmp	r3, #0
 800e016:	d006      	beq.n	800e026 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	695b      	ldr	r3, [r3, #20]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d002      	beq.n	800e026 <osThreadNew+0xa8>
        mem = 1;
 800e020:	2301      	movs	r3, #1
 800e022:	61bb      	str	r3, [r7, #24]
 800e024:	e010      	b.n	800e048 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	689b      	ldr	r3, [r3, #8]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d10c      	bne.n	800e048 <osThreadNew+0xca>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	68db      	ldr	r3, [r3, #12]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d108      	bne.n	800e048 <osThreadNew+0xca>
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	691b      	ldr	r3, [r3, #16]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d104      	bne.n	800e048 <osThreadNew+0xca>
          mem = 0;
 800e03e:	2300      	movs	r3, #0
 800e040:	61bb      	str	r3, [r7, #24]
 800e042:	e001      	b.n	800e048 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e044:	2300      	movs	r3, #0
 800e046:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e048:	69bb      	ldr	r3, [r7, #24]
 800e04a:	2b01      	cmp	r3, #1
 800e04c:	d110      	bne.n	800e070 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e052:	687a      	ldr	r2, [r7, #4]
 800e054:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e056:	9202      	str	r2, [sp, #8]
 800e058:	9301      	str	r3, [sp, #4]
 800e05a:	69fb      	ldr	r3, [r7, #28]
 800e05c:	9300      	str	r3, [sp, #0]
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	6a3a      	ldr	r2, [r7, #32]
 800e062:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e064:	68f8      	ldr	r0, [r7, #12]
 800e066:	f001 fa35 	bl	800f4d4 <xTaskCreateStatic>
 800e06a:	4603      	mov	r3, r0
 800e06c:	613b      	str	r3, [r7, #16]
 800e06e:	e013      	b.n	800e098 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e070:	69bb      	ldr	r3, [r7, #24]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d110      	bne.n	800e098 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e076:	6a3b      	ldr	r3, [r7, #32]
 800e078:	b29a      	uxth	r2, r3
 800e07a:	f107 0310 	add.w	r3, r7, #16
 800e07e:	9301      	str	r3, [sp, #4]
 800e080:	69fb      	ldr	r3, [r7, #28]
 800e082:	9300      	str	r3, [sp, #0]
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e088:	68f8      	ldr	r0, [r7, #12]
 800e08a:	f001 fa83 	bl	800f594 <xTaskCreate>
 800e08e:	4603      	mov	r3, r0
 800e090:	2b01      	cmp	r3, #1
 800e092:	d001      	beq.n	800e098 <osThreadNew+0x11a>
            hTask = NULL;
 800e094:	2300      	movs	r3, #0
 800e096:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e098:	693b      	ldr	r3, [r7, #16]
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	3728      	adds	r7, #40	@ 0x28
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}
	...

0800e0a4 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b088      	sub	sp, #32
 800e0a8:	af02      	add	r7, sp, #8
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d002      	beq.n	800e0be <osThreadFlagsSet+0x1a>
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	da03      	bge.n	800e0c6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800e0be:	f06f 0303 	mvn.w	r3, #3
 800e0c2:	60fb      	str	r3, [r7, #12]
 800e0c4:	e035      	b.n	800e132 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800e0c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e0ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e0cc:	f3ef 8305 	mrs	r3, IPSR
 800e0d0:	613b      	str	r3, [r7, #16]
  return(result);
 800e0d2:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d01f      	beq.n	800e118 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800e0dc:	f107 0308 	add.w	r3, r7, #8
 800e0e0:	9300      	str	r3, [sp, #0]
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	6839      	ldr	r1, [r7, #0]
 800e0e8:	6978      	ldr	r0, [r7, #20]
 800e0ea:	f002 fb45 	bl	8010778 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800e0ee:	f107 030c 	add.w	r3, r7, #12
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	9200      	str	r2, [sp, #0]
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	2100      	movs	r1, #0
 800e0fa:	6978      	ldr	r0, [r7, #20]
 800e0fc:	f002 fb3c 	bl	8010778 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d015      	beq.n	800e132 <osThreadFlagsSet+0x8e>
 800e106:	4b0d      	ldr	r3, [pc, #52]	@ (800e13c <osThreadFlagsSet+0x98>)
 800e108:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e10c:	601a      	str	r2, [r3, #0]
 800e10e:	f3bf 8f4f 	dsb	sy
 800e112:	f3bf 8f6f 	isb	sy
 800e116:	e00c      	b.n	800e132 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800e118:	2300      	movs	r3, #0
 800e11a:	2201      	movs	r2, #1
 800e11c:	6839      	ldr	r1, [r7, #0]
 800e11e:	6978      	ldr	r0, [r7, #20]
 800e120:	f002 fa68 	bl	80105f4 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800e124:	f107 030c 	add.w	r3, r7, #12
 800e128:	2200      	movs	r2, #0
 800e12a:	2100      	movs	r1, #0
 800e12c:	6978      	ldr	r0, [r7, #20]
 800e12e:	f002 fa61 	bl	80105f4 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800e132:	68fb      	ldr	r3, [r7, #12]
}
 800e134:	4618      	mov	r0, r3
 800e136:	3718      	adds	r7, #24
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}
 800e13c:	e000ed04 	.word	0xe000ed04

0800e140 <osThreadFlagsGet>:

  /* Return flags before clearing */
  return (rflags);
}

uint32_t osThreadFlagsGet (void) {
 800e140:	b580      	push	{r7, lr}
 800e142:	b084      	sub	sp, #16
 800e144:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e146:	f3ef 8305 	mrs	r3, IPSR
 800e14a:	60bb      	str	r3, [r7, #8]
  return(result);
 800e14c:	68bb      	ldr	r3, [r7, #8]
  TaskHandle_t hTask;
  uint32_t rflags;

  if (IS_IRQ()) {
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d003      	beq.n	800e15a <osThreadFlagsGet+0x1a>
    rflags = (uint32_t)osErrorISR;
 800e152:	f06f 0305 	mvn.w	r3, #5
 800e156:	607b      	str	r3, [r7, #4]
 800e158:	e00e      	b.n	800e178 <osThreadFlagsGet+0x38>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800e15a:	f002 f84d 	bl	80101f8 <xTaskGetCurrentTaskHandle>
 800e15e:	60f8      	str	r0, [r7, #12]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags) != pdPASS) {
 800e160:	1d3b      	adds	r3, r7, #4
 800e162:	2200      	movs	r2, #0
 800e164:	2100      	movs	r1, #0
 800e166:	68f8      	ldr	r0, [r7, #12]
 800e168:	f002 fa44 	bl	80105f4 <xTaskGenericNotify>
 800e16c:	4603      	mov	r3, r0
 800e16e:	2b01      	cmp	r3, #1
 800e170:	d002      	beq.n	800e178 <osThreadFlagsGet+0x38>
      rflags = (uint32_t)osError;
 800e172:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e176:	607b      	str	r3, [r7, #4]
    }
  }

  return (rflags);
 800e178:	687b      	ldr	r3, [r7, #4]
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3710      	adds	r7, #16
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}

0800e182 <osThreadFlagsWait>:

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800e182:	b580      	push	{r7, lr}
 800e184:	b08c      	sub	sp, #48	@ 0x30
 800e186:	af00      	add	r7, sp, #0
 800e188:	60f8      	str	r0, [r7, #12]
 800e18a:	60b9      	str	r1, [r7, #8]
 800e18c:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e18e:	f3ef 8305 	mrs	r3, IPSR
 800e192:	617b      	str	r3, [r7, #20]
  return(result);
 800e194:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800e196:	2b00      	cmp	r3, #0
 800e198:	d003      	beq.n	800e1a2 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800e19a:	f06f 0305 	mvn.w	r3, #5
 800e19e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e1a0:	e06b      	b.n	800e27a <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	da03      	bge.n	800e1b0 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800e1a8:	f06f 0303 	mvn.w	r3, #3
 800e1ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e1ae:	e064      	b.n	800e27a <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	f003 0302 	and.w	r3, r3, #2
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d002      	beq.n	800e1c0 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e1be:	e001      	b.n	800e1c4 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800e1cc:	f001 fc92 	bl	800faf4 <xTaskGetTickCount>
 800e1d0:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800e1d2:	f107 0210 	add.w	r2, r7, #16
 800e1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e1da:	2000      	movs	r0, #0
 800e1dc:	f002 f9aa 	bl	8010534 <xTaskNotifyWait>
 800e1e0:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800e1e2:	69fb      	ldr	r3, [r7, #28]
 800e1e4:	2b01      	cmp	r3, #1
 800e1e6:	d137      	bne.n	800e258 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800e1e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	4013      	ands	r3, r2
 800e1ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800e1f0:	693b      	ldr	r3, [r7, #16]
 800e1f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e1f4:	4313      	orrs	r3, r2
 800e1f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	f003 0301 	and.w	r3, r3, #1
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d00c      	beq.n	800e21c <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800e202:	68fa      	ldr	r2, [r7, #12]
 800e204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e206:	4013      	ands	r3, r2
 800e208:	68fa      	ldr	r2, [r7, #12]
 800e20a:	429a      	cmp	r2, r3
 800e20c:	d032      	beq.n	800e274 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d10f      	bne.n	800e234 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800e214:	f06f 0302 	mvn.w	r3, #2
 800e218:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800e21a:	e02e      	b.n	800e27a <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800e21c:	68fa      	ldr	r2, [r7, #12]
 800e21e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e220:	4013      	ands	r3, r2
 800e222:	2b00      	cmp	r3, #0
 800e224:	d128      	bne.n	800e278 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d103      	bne.n	800e234 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800e22c:	f06f 0302 	mvn.w	r3, #2
 800e230:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800e232:	e022      	b.n	800e27a <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800e234:	f001 fc5e 	bl	800faf4 <xTaskGetTickCount>
 800e238:	4602      	mov	r2, r0
 800e23a:	6a3b      	ldr	r3, [r7, #32]
 800e23c:	1ad3      	subs	r3, r2, r3
 800e23e:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800e240:	69ba      	ldr	r2, [r7, #24]
 800e242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e244:	429a      	cmp	r2, r3
 800e246:	d902      	bls.n	800e24e <osThreadFlagsWait+0xcc>
          tout  = 0;
 800e248:	2300      	movs	r3, #0
 800e24a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e24c:	e00e      	b.n	800e26c <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800e24e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e250:	69bb      	ldr	r3, [r7, #24]
 800e252:	1ad3      	subs	r3, r2, r3
 800e254:	627b      	str	r3, [r7, #36]	@ 0x24
 800e256:	e009      	b.n	800e26c <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d103      	bne.n	800e266 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800e25e:	f06f 0302 	mvn.w	r3, #2
 800e262:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e264:	e002      	b.n	800e26c <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800e266:	f06f 0301 	mvn.w	r3, #1
 800e26a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800e26c:	69fb      	ldr	r3, [r7, #28]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d1af      	bne.n	800e1d2 <osThreadFlagsWait+0x50>
 800e272:	e002      	b.n	800e27a <osThreadFlagsWait+0xf8>
            break;
 800e274:	bf00      	nop
 800e276:	e000      	b.n	800e27a <osThreadFlagsWait+0xf8>
            break;
 800e278:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800e27a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3730      	adds	r7, #48	@ 0x30
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}

0800e284 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e284:	b580      	push	{r7, lr}
 800e286:	b084      	sub	sp, #16
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e28c:	f3ef 8305 	mrs	r3, IPSR
 800e290:	60bb      	str	r3, [r7, #8]
  return(result);
 800e292:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e294:	2b00      	cmp	r3, #0
 800e296:	d003      	beq.n	800e2a0 <osDelay+0x1c>
    stat = osErrorISR;
 800e298:	f06f 0305 	mvn.w	r3, #5
 800e29c:	60fb      	str	r3, [r7, #12]
 800e29e:	e007      	b.n	800e2b0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d002      	beq.n	800e2b0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f001 fad0 	bl	800f850 <vTaskDelay>
    }
  }

  return (stat);
 800e2b0:	68fb      	ldr	r3, [r7, #12]
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3710      	adds	r7, #16
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}

0800e2ba <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800e2ba:	b580      	push	{r7, lr}
 800e2bc:	b088      	sub	sp, #32
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e2c6:	f3ef 8305 	mrs	r3, IPSR
 800e2ca:	60bb      	str	r3, [r7, #8]
  return(result);
 800e2cc:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d174      	bne.n	800e3bc <osMutexNew+0x102>
    if (attr != NULL) {
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d003      	beq.n	800e2e0 <osMutexNew+0x26>
      type = attr->attr_bits;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	685b      	ldr	r3, [r3, #4]
 800e2dc:	61bb      	str	r3, [r7, #24]
 800e2de:	e001      	b.n	800e2e4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800e2e4:	69bb      	ldr	r3, [r7, #24]
 800e2e6:	f003 0301 	and.w	r3, r3, #1
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d002      	beq.n	800e2f4 <osMutexNew+0x3a>
      rmtx = 1U;
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	617b      	str	r3, [r7, #20]
 800e2f2:	e001      	b.n	800e2f8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800e2f8:	69bb      	ldr	r3, [r7, #24]
 800e2fa:	f003 0308 	and.w	r3, r3, #8
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d15c      	bne.n	800e3bc <osMutexNew+0x102>
      mem = -1;
 800e302:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e306:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d015      	beq.n	800e33a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	689b      	ldr	r3, [r3, #8]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d006      	beq.n	800e324 <osMutexNew+0x6a>
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	68db      	ldr	r3, [r3, #12]
 800e31a:	2b4f      	cmp	r3, #79	@ 0x4f
 800e31c:	d902      	bls.n	800e324 <osMutexNew+0x6a>
          mem = 1;
 800e31e:	2301      	movs	r3, #1
 800e320:	613b      	str	r3, [r7, #16]
 800e322:	e00c      	b.n	800e33e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	689b      	ldr	r3, [r3, #8]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d108      	bne.n	800e33e <osMutexNew+0x84>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	68db      	ldr	r3, [r3, #12]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d104      	bne.n	800e33e <osMutexNew+0x84>
            mem = 0;
 800e334:	2300      	movs	r3, #0
 800e336:	613b      	str	r3, [r7, #16]
 800e338:	e001      	b.n	800e33e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800e33a:	2300      	movs	r3, #0
 800e33c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	2b01      	cmp	r3, #1
 800e342:	d112      	bne.n	800e36a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800e344:	697b      	ldr	r3, [r7, #20]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d007      	beq.n	800e35a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	689b      	ldr	r3, [r3, #8]
 800e34e:	4619      	mov	r1, r3
 800e350:	2004      	movs	r0, #4
 800e352:	f000 fb20 	bl	800e996 <xQueueCreateMutexStatic>
 800e356:	61f8      	str	r0, [r7, #28]
 800e358:	e016      	b.n	800e388 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	689b      	ldr	r3, [r3, #8]
 800e35e:	4619      	mov	r1, r3
 800e360:	2001      	movs	r0, #1
 800e362:	f000 fb18 	bl	800e996 <xQueueCreateMutexStatic>
 800e366:	61f8      	str	r0, [r7, #28]
 800e368:	e00e      	b.n	800e388 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d10b      	bne.n	800e388 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800e370:	697b      	ldr	r3, [r7, #20]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d004      	beq.n	800e380 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800e376:	2004      	movs	r0, #4
 800e378:	f000 faf5 	bl	800e966 <xQueueCreateMutex>
 800e37c:	61f8      	str	r0, [r7, #28]
 800e37e:	e003      	b.n	800e388 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800e380:	2001      	movs	r0, #1
 800e382:	f000 faf0 	bl	800e966 <xQueueCreateMutex>
 800e386:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800e388:	69fb      	ldr	r3, [r7, #28]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d00c      	beq.n	800e3a8 <osMutexNew+0xee>
        if (attr != NULL) {
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d003      	beq.n	800e39c <osMutexNew+0xe2>
          name = attr->name;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	60fb      	str	r3, [r7, #12]
 800e39a:	e001      	b.n	800e3a0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800e39c:	2300      	movs	r3, #0
 800e39e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800e3a0:	68f9      	ldr	r1, [r7, #12]
 800e3a2:	69f8      	ldr	r0, [r7, #28]
 800e3a4:	f001 f838 	bl	800f418 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800e3a8:	69fb      	ldr	r3, [r7, #28]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d006      	beq.n	800e3bc <osMutexNew+0x102>
 800e3ae:	697b      	ldr	r3, [r7, #20]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d003      	beq.n	800e3bc <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800e3b4:	69fb      	ldr	r3, [r7, #28]
 800e3b6:	f043 0301 	orr.w	r3, r3, #1
 800e3ba:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800e3bc:	69fb      	ldr	r3, [r7, #28]
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3720      	adds	r7, #32
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}

0800e3c6 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800e3c6:	b580      	push	{r7, lr}
 800e3c8:	b086      	sub	sp, #24
 800e3ca:	af00      	add	r7, sp, #0
 800e3cc:	6078      	str	r0, [r7, #4]
 800e3ce:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f023 0301 	bic.w	r3, r3, #1
 800e3d6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f003 0301 	and.w	r3, r3, #1
 800e3de:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e3e4:	f3ef 8305 	mrs	r3, IPSR
 800e3e8:	60bb      	str	r3, [r7, #8]
  return(result);
 800e3ea:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d003      	beq.n	800e3f8 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800e3f0:	f06f 0305 	mvn.w	r3, #5
 800e3f4:	617b      	str	r3, [r7, #20]
 800e3f6:	e02c      	b.n	800e452 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800e3f8:	693b      	ldr	r3, [r7, #16]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d103      	bne.n	800e406 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800e3fe:	f06f 0303 	mvn.w	r3, #3
 800e402:	617b      	str	r3, [r7, #20]
 800e404:	e025      	b.n	800e452 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d011      	beq.n	800e430 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800e40c:	6839      	ldr	r1, [r7, #0]
 800e40e:	6938      	ldr	r0, [r7, #16]
 800e410:	f000 fb11 	bl	800ea36 <xQueueTakeMutexRecursive>
 800e414:	4603      	mov	r3, r0
 800e416:	2b01      	cmp	r3, #1
 800e418:	d01b      	beq.n	800e452 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d003      	beq.n	800e428 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800e420:	f06f 0301 	mvn.w	r3, #1
 800e424:	617b      	str	r3, [r7, #20]
 800e426:	e014      	b.n	800e452 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800e428:	f06f 0302 	mvn.w	r3, #2
 800e42c:	617b      	str	r3, [r7, #20]
 800e42e:	e010      	b.n	800e452 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800e430:	6839      	ldr	r1, [r7, #0]
 800e432:	6938      	ldr	r0, [r7, #16]
 800e434:	f000 fdb8 	bl	800efa8 <xQueueSemaphoreTake>
 800e438:	4603      	mov	r3, r0
 800e43a:	2b01      	cmp	r3, #1
 800e43c:	d009      	beq.n	800e452 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d003      	beq.n	800e44c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800e444:	f06f 0301 	mvn.w	r3, #1
 800e448:	617b      	str	r3, [r7, #20]
 800e44a:	e002      	b.n	800e452 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800e44c:	f06f 0302 	mvn.w	r3, #2
 800e450:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800e452:	697b      	ldr	r3, [r7, #20]
}
 800e454:	4618      	mov	r0, r3
 800e456:	3718      	adds	r7, #24
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b086      	sub	sp, #24
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f023 0301 	bic.w	r3, r3, #1
 800e46a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f003 0301 	and.w	r3, r3, #1
 800e472:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800e474:	2300      	movs	r3, #0
 800e476:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e478:	f3ef 8305 	mrs	r3, IPSR
 800e47c:	60bb      	str	r3, [r7, #8]
  return(result);
 800e47e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800e480:	2b00      	cmp	r3, #0
 800e482:	d003      	beq.n	800e48c <osMutexRelease+0x30>
    stat = osErrorISR;
 800e484:	f06f 0305 	mvn.w	r3, #5
 800e488:	617b      	str	r3, [r7, #20]
 800e48a:	e01f      	b.n	800e4cc <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800e48c:	693b      	ldr	r3, [r7, #16]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d103      	bne.n	800e49a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800e492:	f06f 0303 	mvn.w	r3, #3
 800e496:	617b      	str	r3, [r7, #20]
 800e498:	e018      	b.n	800e4cc <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d009      	beq.n	800e4b4 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800e4a0:	6938      	ldr	r0, [r7, #16]
 800e4a2:	f000 fa93 	bl	800e9cc <xQueueGiveMutexRecursive>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	2b01      	cmp	r3, #1
 800e4aa:	d00f      	beq.n	800e4cc <osMutexRelease+0x70>
        stat = osErrorResource;
 800e4ac:	f06f 0302 	mvn.w	r3, #2
 800e4b0:	617b      	str	r3, [r7, #20]
 800e4b2:	e00b      	b.n	800e4cc <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	2100      	movs	r1, #0
 800e4ba:	6938      	ldr	r0, [r7, #16]
 800e4bc:	f000 faf2 	bl	800eaa4 <xQueueGenericSend>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	2b01      	cmp	r3, #1
 800e4c4:	d002      	beq.n	800e4cc <osMutexRelease+0x70>
        stat = osErrorResource;
 800e4c6:	f06f 0302 	mvn.w	r3, #2
 800e4ca:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e4cc:	697b      	ldr	r3, [r7, #20]
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3718      	adds	r7, #24
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}
	...

0800e4d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e4d8:	b480      	push	{r7}
 800e4da:	b085      	sub	sp, #20
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	60f8      	str	r0, [r7, #12]
 800e4e0:	60b9      	str	r1, [r7, #8]
 800e4e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	4a07      	ldr	r2, [pc, #28]	@ (800e504 <vApplicationGetIdleTaskMemory+0x2c>)
 800e4e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	4a06      	ldr	r2, [pc, #24]	@ (800e508 <vApplicationGetIdleTaskMemory+0x30>)
 800e4ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2280      	movs	r2, #128	@ 0x80
 800e4f4:	601a      	str	r2, [r3, #0]
}
 800e4f6:	bf00      	nop
 800e4f8:	3714      	adds	r7, #20
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e500:	4770      	bx	lr
 800e502:	bf00      	nop
 800e504:	24032d58 	.word	0x24032d58
 800e508:	24032e00 	.word	0x24032e00

0800e50c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e50c:	b480      	push	{r7}
 800e50e:	b085      	sub	sp, #20
 800e510:	af00      	add	r7, sp, #0
 800e512:	60f8      	str	r0, [r7, #12]
 800e514:	60b9      	str	r1, [r7, #8]
 800e516:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	4a07      	ldr	r2, [pc, #28]	@ (800e538 <vApplicationGetTimerTaskMemory+0x2c>)
 800e51c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	4a06      	ldr	r2, [pc, #24]	@ (800e53c <vApplicationGetTimerTaskMemory+0x30>)
 800e522:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e52a:	601a      	str	r2, [r3, #0]
}
 800e52c:	bf00      	nop
 800e52e:	3714      	adds	r7, #20
 800e530:	46bd      	mov	sp, r7
 800e532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e536:	4770      	bx	lr
 800e538:	24033000 	.word	0x24033000
 800e53c:	240330a8 	.word	0x240330a8

0800e540 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e540:	b480      	push	{r7}
 800e542:	b083      	sub	sp, #12
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f103 0208 	add.w	r2, r3, #8
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e558:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f103 0208 	add.w	r2, r3, #8
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f103 0208 	add.w	r2, r3, #8
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2200      	movs	r2, #0
 800e572:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e574:	bf00      	nop
 800e576:	370c      	adds	r7, #12
 800e578:	46bd      	mov	sp, r7
 800e57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57e:	4770      	bx	lr

0800e580 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e580:	b480      	push	{r7}
 800e582:	b083      	sub	sp, #12
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2200      	movs	r2, #0
 800e58c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e58e:	bf00      	nop
 800e590:	370c      	adds	r7, #12
 800e592:	46bd      	mov	sp, r7
 800e594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e598:	4770      	bx	lr

0800e59a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e59a:	b480      	push	{r7}
 800e59c:	b085      	sub	sp, #20
 800e59e:	af00      	add	r7, sp, #0
 800e5a0:	6078      	str	r0, [r7, #4]
 800e5a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	685b      	ldr	r3, [r3, #4]
 800e5a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	68fa      	ldr	r2, [r7, #12]
 800e5ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	689a      	ldr	r2, [r3, #8]
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	689b      	ldr	r3, [r3, #8]
 800e5bc:	683a      	ldr	r2, [r7, #0]
 800e5be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	683a      	ldr	r2, [r7, #0]
 800e5c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	687a      	ldr	r2, [r7, #4]
 800e5ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	1c5a      	adds	r2, r3, #1
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	601a      	str	r2, [r3, #0]
}
 800e5d6:	bf00      	nop
 800e5d8:	3714      	adds	r7, #20
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e0:	4770      	bx	lr

0800e5e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e5e2:	b480      	push	{r7}
 800e5e4:	b085      	sub	sp, #20
 800e5e6:	af00      	add	r7, sp, #0
 800e5e8:	6078      	str	r0, [r7, #4]
 800e5ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e5f8:	d103      	bne.n	800e602 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	691b      	ldr	r3, [r3, #16]
 800e5fe:	60fb      	str	r3, [r7, #12]
 800e600:	e00c      	b.n	800e61c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	3308      	adds	r3, #8
 800e606:	60fb      	str	r3, [r7, #12]
 800e608:	e002      	b.n	800e610 <vListInsert+0x2e>
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	60fb      	str	r3, [r7, #12]
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	685b      	ldr	r3, [r3, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	68ba      	ldr	r2, [r7, #8]
 800e618:	429a      	cmp	r2, r3
 800e61a:	d2f6      	bcs.n	800e60a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	685a      	ldr	r2, [r3, #4]
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	685b      	ldr	r3, [r3, #4]
 800e628:	683a      	ldr	r2, [r7, #0]
 800e62a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	68fa      	ldr	r2, [r7, #12]
 800e630:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	683a      	ldr	r2, [r7, #0]
 800e636:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	687a      	ldr	r2, [r7, #4]
 800e63c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	1c5a      	adds	r2, r3, #1
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	601a      	str	r2, [r3, #0]
}
 800e648:	bf00      	nop
 800e64a:	3714      	adds	r7, #20
 800e64c:	46bd      	mov	sp, r7
 800e64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e652:	4770      	bx	lr

0800e654 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e654:	b480      	push	{r7}
 800e656:	b085      	sub	sp, #20
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	691b      	ldr	r3, [r3, #16]
 800e660:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	685b      	ldr	r3, [r3, #4]
 800e666:	687a      	ldr	r2, [r7, #4]
 800e668:	6892      	ldr	r2, [r2, #8]
 800e66a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	689b      	ldr	r3, [r3, #8]
 800e670:	687a      	ldr	r2, [r7, #4]
 800e672:	6852      	ldr	r2, [r2, #4]
 800e674:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	685b      	ldr	r3, [r3, #4]
 800e67a:	687a      	ldr	r2, [r7, #4]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d103      	bne.n	800e688 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	689a      	ldr	r2, [r3, #8]
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2200      	movs	r2, #0
 800e68c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	1e5a      	subs	r2, r3, #1
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	3714      	adds	r7, #20
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr

0800e6a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b084      	sub	sp, #16
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d10b      	bne.n	800e6d4 <xQueueGenericReset+0x2c>
	__asm volatile
 800e6bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6c0:	f383 8811 	msr	BASEPRI, r3
 800e6c4:	f3bf 8f6f 	isb	sy
 800e6c8:	f3bf 8f4f 	dsb	sy
 800e6cc:	60bb      	str	r3, [r7, #8]
}
 800e6ce:	bf00      	nop
 800e6d0:	bf00      	nop
 800e6d2:	e7fd      	b.n	800e6d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e6d4:	f002 fe18 	bl	8011308 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	681a      	ldr	r2, [r3, #0]
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e6e0:	68f9      	ldr	r1, [r7, #12]
 800e6e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e6e4:	fb01 f303 	mul.w	r3, r1, r3
 800e6e8:	441a      	add	r2, r3
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	681a      	ldr	r2, [r3, #0]
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	681a      	ldr	r2, [r3, #0]
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e704:	3b01      	subs	r3, #1
 800e706:	68f9      	ldr	r1, [r7, #12]
 800e708:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e70a:	fb01 f303 	mul.w	r3, r1, r3
 800e70e:	441a      	add	r2, r3
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	22ff      	movs	r2, #255	@ 0xff
 800e718:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	22ff      	movs	r2, #255	@ 0xff
 800e720:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d114      	bne.n	800e754 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	691b      	ldr	r3, [r3, #16]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d01a      	beq.n	800e768 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	3310      	adds	r3, #16
 800e736:	4618      	mov	r0, r3
 800e738:	f001 fb70 	bl	800fe1c <xTaskRemoveFromEventList>
 800e73c:	4603      	mov	r3, r0
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d012      	beq.n	800e768 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e742:	4b0d      	ldr	r3, [pc, #52]	@ (800e778 <xQueueGenericReset+0xd0>)
 800e744:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e748:	601a      	str	r2, [r3, #0]
 800e74a:	f3bf 8f4f 	dsb	sy
 800e74e:	f3bf 8f6f 	isb	sy
 800e752:	e009      	b.n	800e768 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	3310      	adds	r3, #16
 800e758:	4618      	mov	r0, r3
 800e75a:	f7ff fef1 	bl	800e540 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	3324      	adds	r3, #36	@ 0x24
 800e762:	4618      	mov	r0, r3
 800e764:	f7ff feec 	bl	800e540 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e768:	f002 fe00 	bl	801136c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e76c:	2301      	movs	r3, #1
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3710      	adds	r7, #16
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
 800e776:	bf00      	nop
 800e778:	e000ed04 	.word	0xe000ed04

0800e77c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b08e      	sub	sp, #56	@ 0x38
 800e780:	af02      	add	r7, sp, #8
 800e782:	60f8      	str	r0, [r7, #12]
 800e784:	60b9      	str	r1, [r7, #8]
 800e786:	607a      	str	r2, [r7, #4]
 800e788:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d10b      	bne.n	800e7a8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800e790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e794:	f383 8811 	msr	BASEPRI, r3
 800e798:	f3bf 8f6f 	isb	sy
 800e79c:	f3bf 8f4f 	dsb	sy
 800e7a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e7a2:	bf00      	nop
 800e7a4:	bf00      	nop
 800e7a6:	e7fd      	b.n	800e7a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d10b      	bne.n	800e7c6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800e7ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7b2:	f383 8811 	msr	BASEPRI, r3
 800e7b6:	f3bf 8f6f 	isb	sy
 800e7ba:	f3bf 8f4f 	dsb	sy
 800e7be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e7c0:	bf00      	nop
 800e7c2:	bf00      	nop
 800e7c4:	e7fd      	b.n	800e7c2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d002      	beq.n	800e7d2 <xQueueGenericCreateStatic+0x56>
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d001      	beq.n	800e7d6 <xQueueGenericCreateStatic+0x5a>
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	e000      	b.n	800e7d8 <xQueueGenericCreateStatic+0x5c>
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d10b      	bne.n	800e7f4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800e7dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7e0:	f383 8811 	msr	BASEPRI, r3
 800e7e4:	f3bf 8f6f 	isb	sy
 800e7e8:	f3bf 8f4f 	dsb	sy
 800e7ec:	623b      	str	r3, [r7, #32]
}
 800e7ee:	bf00      	nop
 800e7f0:	bf00      	nop
 800e7f2:	e7fd      	b.n	800e7f0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d102      	bne.n	800e800 <xQueueGenericCreateStatic+0x84>
 800e7fa:	68bb      	ldr	r3, [r7, #8]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d101      	bne.n	800e804 <xQueueGenericCreateStatic+0x88>
 800e800:	2301      	movs	r3, #1
 800e802:	e000      	b.n	800e806 <xQueueGenericCreateStatic+0x8a>
 800e804:	2300      	movs	r3, #0
 800e806:	2b00      	cmp	r3, #0
 800e808:	d10b      	bne.n	800e822 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800e80a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e80e:	f383 8811 	msr	BASEPRI, r3
 800e812:	f3bf 8f6f 	isb	sy
 800e816:	f3bf 8f4f 	dsb	sy
 800e81a:	61fb      	str	r3, [r7, #28]
}
 800e81c:	bf00      	nop
 800e81e:	bf00      	nop
 800e820:	e7fd      	b.n	800e81e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e822:	2350      	movs	r3, #80	@ 0x50
 800e824:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	2b50      	cmp	r3, #80	@ 0x50
 800e82a:	d00b      	beq.n	800e844 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800e82c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e830:	f383 8811 	msr	BASEPRI, r3
 800e834:	f3bf 8f6f 	isb	sy
 800e838:	f3bf 8f4f 	dsb	sy
 800e83c:	61bb      	str	r3, [r7, #24]
}
 800e83e:	bf00      	nop
 800e840:	bf00      	nop
 800e842:	e7fd      	b.n	800e840 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e844:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e84a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d00d      	beq.n	800e86c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e852:	2201      	movs	r2, #1
 800e854:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e858:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e85e:	9300      	str	r3, [sp, #0]
 800e860:	4613      	mov	r3, r2
 800e862:	687a      	ldr	r2, [r7, #4]
 800e864:	68b9      	ldr	r1, [r7, #8]
 800e866:	68f8      	ldr	r0, [r7, #12]
 800e868:	f000 f840 	bl	800e8ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e86e:	4618      	mov	r0, r3
 800e870:	3730      	adds	r7, #48	@ 0x30
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}

0800e876 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e876:	b580      	push	{r7, lr}
 800e878:	b08a      	sub	sp, #40	@ 0x28
 800e87a:	af02      	add	r7, sp, #8
 800e87c:	60f8      	str	r0, [r7, #12]
 800e87e:	60b9      	str	r1, [r7, #8]
 800e880:	4613      	mov	r3, r2
 800e882:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d10b      	bne.n	800e8a2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800e88a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e88e:	f383 8811 	msr	BASEPRI, r3
 800e892:	f3bf 8f6f 	isb	sy
 800e896:	f3bf 8f4f 	dsb	sy
 800e89a:	613b      	str	r3, [r7, #16]
}
 800e89c:	bf00      	nop
 800e89e:	bf00      	nop
 800e8a0:	e7fd      	b.n	800e89e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	68ba      	ldr	r2, [r7, #8]
 800e8a6:	fb02 f303 	mul.w	r3, r2, r3
 800e8aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e8ac:	69fb      	ldr	r3, [r7, #28]
 800e8ae:	3350      	adds	r3, #80	@ 0x50
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f002 fe4b 	bl	801154c <pvPortMalloc>
 800e8b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e8b8:	69bb      	ldr	r3, [r7, #24]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d011      	beq.n	800e8e2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e8be:	69bb      	ldr	r3, [r7, #24]
 800e8c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	3350      	adds	r3, #80	@ 0x50
 800e8c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e8c8:	69bb      	ldr	r3, [r7, #24]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e8d0:	79fa      	ldrb	r2, [r7, #7]
 800e8d2:	69bb      	ldr	r3, [r7, #24]
 800e8d4:	9300      	str	r3, [sp, #0]
 800e8d6:	4613      	mov	r3, r2
 800e8d8:	697a      	ldr	r2, [r7, #20]
 800e8da:	68b9      	ldr	r1, [r7, #8]
 800e8dc:	68f8      	ldr	r0, [r7, #12]
 800e8de:	f000 f805 	bl	800e8ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e8e2:	69bb      	ldr	r3, [r7, #24]
	}
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	3720      	adds	r7, #32
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}

0800e8ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b084      	sub	sp, #16
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	60f8      	str	r0, [r7, #12]
 800e8f4:	60b9      	str	r1, [r7, #8]
 800e8f6:	607a      	str	r2, [r7, #4]
 800e8f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d103      	bne.n	800e908 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e900:	69bb      	ldr	r3, [r7, #24]
 800e902:	69ba      	ldr	r2, [r7, #24]
 800e904:	601a      	str	r2, [r3, #0]
 800e906:	e002      	b.n	800e90e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e908:	69bb      	ldr	r3, [r7, #24]
 800e90a:	687a      	ldr	r2, [r7, #4]
 800e90c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e90e:	69bb      	ldr	r3, [r7, #24]
 800e910:	68fa      	ldr	r2, [r7, #12]
 800e912:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e914:	69bb      	ldr	r3, [r7, #24]
 800e916:	68ba      	ldr	r2, [r7, #8]
 800e918:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e91a:	2101      	movs	r1, #1
 800e91c:	69b8      	ldr	r0, [r7, #24]
 800e91e:	f7ff fec3 	bl	800e6a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e922:	69bb      	ldr	r3, [r7, #24]
 800e924:	78fa      	ldrb	r2, [r7, #3]
 800e926:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e92a:	bf00      	nop
 800e92c:	3710      	adds	r7, #16
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}

0800e932 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e932:	b580      	push	{r7, lr}
 800e934:	b082      	sub	sp, #8
 800e936:	af00      	add	r7, sp, #0
 800e938:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d00e      	beq.n	800e95e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2200      	movs	r2, #0
 800e944:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2200      	movs	r2, #0
 800e94a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2200      	movs	r2, #0
 800e950:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e952:	2300      	movs	r3, #0
 800e954:	2200      	movs	r2, #0
 800e956:	2100      	movs	r1, #0
 800e958:	6878      	ldr	r0, [r7, #4]
 800e95a:	f000 f8a3 	bl	800eaa4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e95e:	bf00      	nop
 800e960:	3708      	adds	r7, #8
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}

0800e966 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e966:	b580      	push	{r7, lr}
 800e968:	b086      	sub	sp, #24
 800e96a:	af00      	add	r7, sp, #0
 800e96c:	4603      	mov	r3, r0
 800e96e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e970:	2301      	movs	r3, #1
 800e972:	617b      	str	r3, [r7, #20]
 800e974:	2300      	movs	r3, #0
 800e976:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e978:	79fb      	ldrb	r3, [r7, #7]
 800e97a:	461a      	mov	r2, r3
 800e97c:	6939      	ldr	r1, [r7, #16]
 800e97e:	6978      	ldr	r0, [r7, #20]
 800e980:	f7ff ff79 	bl	800e876 <xQueueGenericCreate>
 800e984:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e986:	68f8      	ldr	r0, [r7, #12]
 800e988:	f7ff ffd3 	bl	800e932 <prvInitialiseMutex>

		return xNewQueue;
 800e98c:	68fb      	ldr	r3, [r7, #12]
	}
 800e98e:	4618      	mov	r0, r3
 800e990:	3718      	adds	r7, #24
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}

0800e996 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e996:	b580      	push	{r7, lr}
 800e998:	b088      	sub	sp, #32
 800e99a:	af02      	add	r7, sp, #8
 800e99c:	4603      	mov	r3, r0
 800e99e:	6039      	str	r1, [r7, #0]
 800e9a0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	617b      	str	r3, [r7, #20]
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e9aa:	79fb      	ldrb	r3, [r7, #7]
 800e9ac:	9300      	str	r3, [sp, #0]
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	6939      	ldr	r1, [r7, #16]
 800e9b4:	6978      	ldr	r0, [r7, #20]
 800e9b6:	f7ff fee1 	bl	800e77c <xQueueGenericCreateStatic>
 800e9ba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e9bc:	68f8      	ldr	r0, [r7, #12]
 800e9be:	f7ff ffb8 	bl	800e932 <prvInitialiseMutex>

		return xNewQueue;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
	}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3718      	adds	r7, #24
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}

0800e9cc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800e9cc:	b590      	push	{r4, r7, lr}
 800e9ce:	b087      	sub	sp, #28
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d10b      	bne.n	800e9f6 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800e9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9e2:	f383 8811 	msr	BASEPRI, r3
 800e9e6:	f3bf 8f6f 	isb	sy
 800e9ea:	f3bf 8f4f 	dsb	sy
 800e9ee:	60fb      	str	r3, [r7, #12]
}
 800e9f0:	bf00      	nop
 800e9f2:	bf00      	nop
 800e9f4:	e7fd      	b.n	800e9f2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e9f6:	693b      	ldr	r3, [r7, #16]
 800e9f8:	689c      	ldr	r4, [r3, #8]
 800e9fa:	f001 fbfd 	bl	80101f8 <xTaskGetCurrentTaskHandle>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	429c      	cmp	r4, r3
 800ea02:	d111      	bne.n	800ea28 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800ea04:	693b      	ldr	r3, [r7, #16]
 800ea06:	68db      	ldr	r3, [r3, #12]
 800ea08:	1e5a      	subs	r2, r3, #1
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	68db      	ldr	r3, [r3, #12]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d105      	bne.n	800ea22 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800ea16:	2300      	movs	r3, #0
 800ea18:	2200      	movs	r2, #0
 800ea1a:	2100      	movs	r1, #0
 800ea1c:	6938      	ldr	r0, [r7, #16]
 800ea1e:	f000 f841 	bl	800eaa4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800ea22:	2301      	movs	r3, #1
 800ea24:	617b      	str	r3, [r7, #20]
 800ea26:	e001      	b.n	800ea2c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800ea28:	2300      	movs	r3, #0
 800ea2a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800ea2c:	697b      	ldr	r3, [r7, #20]
	}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	371c      	adds	r7, #28
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd90      	pop	{r4, r7, pc}

0800ea36 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800ea36:	b590      	push	{r4, r7, lr}
 800ea38:	b087      	sub	sp, #28
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
 800ea3e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ea44:	693b      	ldr	r3, [r7, #16]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d10b      	bne.n	800ea62 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800ea4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea4e:	f383 8811 	msr	BASEPRI, r3
 800ea52:	f3bf 8f6f 	isb	sy
 800ea56:	f3bf 8f4f 	dsb	sy
 800ea5a:	60fb      	str	r3, [r7, #12]
}
 800ea5c:	bf00      	nop
 800ea5e:	bf00      	nop
 800ea60:	e7fd      	b.n	800ea5e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	689c      	ldr	r4, [r3, #8]
 800ea66:	f001 fbc7 	bl	80101f8 <xTaskGetCurrentTaskHandle>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	429c      	cmp	r4, r3
 800ea6e:	d107      	bne.n	800ea80 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	68db      	ldr	r3, [r3, #12]
 800ea74:	1c5a      	adds	r2, r3, #1
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	617b      	str	r3, [r7, #20]
 800ea7e:	e00c      	b.n	800ea9a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800ea80:	6839      	ldr	r1, [r7, #0]
 800ea82:	6938      	ldr	r0, [r7, #16]
 800ea84:	f000 fa90 	bl	800efa8 <xQueueSemaphoreTake>
 800ea88:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800ea8a:	697b      	ldr	r3, [r7, #20]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d004      	beq.n	800ea9a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	68db      	ldr	r3, [r3, #12]
 800ea94:	1c5a      	adds	r2, r3, #1
 800ea96:	693b      	ldr	r3, [r7, #16]
 800ea98:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800ea9a:	697b      	ldr	r3, [r7, #20]
	}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	371c      	adds	r7, #28
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd90      	pop	{r4, r7, pc}

0800eaa4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b08e      	sub	sp, #56	@ 0x38
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	60f8      	str	r0, [r7, #12]
 800eaac:	60b9      	str	r1, [r7, #8]
 800eaae:	607a      	str	r2, [r7, #4]
 800eab0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800eab2:	2300      	movs	r3, #0
 800eab4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800eaba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d10b      	bne.n	800ead8 <xQueueGenericSend+0x34>
	__asm volatile
 800eac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eac4:	f383 8811 	msr	BASEPRI, r3
 800eac8:	f3bf 8f6f 	isb	sy
 800eacc:	f3bf 8f4f 	dsb	sy
 800ead0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ead2:	bf00      	nop
 800ead4:	bf00      	nop
 800ead6:	e7fd      	b.n	800ead4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d103      	bne.n	800eae6 <xQueueGenericSend+0x42>
 800eade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d101      	bne.n	800eaea <xQueueGenericSend+0x46>
 800eae6:	2301      	movs	r3, #1
 800eae8:	e000      	b.n	800eaec <xQueueGenericSend+0x48>
 800eaea:	2300      	movs	r3, #0
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d10b      	bne.n	800eb08 <xQueueGenericSend+0x64>
	__asm volatile
 800eaf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaf4:	f383 8811 	msr	BASEPRI, r3
 800eaf8:	f3bf 8f6f 	isb	sy
 800eafc:	f3bf 8f4f 	dsb	sy
 800eb00:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800eb02:	bf00      	nop
 800eb04:	bf00      	nop
 800eb06:	e7fd      	b.n	800eb04 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	2b02      	cmp	r3, #2
 800eb0c:	d103      	bne.n	800eb16 <xQueueGenericSend+0x72>
 800eb0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb12:	2b01      	cmp	r3, #1
 800eb14:	d101      	bne.n	800eb1a <xQueueGenericSend+0x76>
 800eb16:	2301      	movs	r3, #1
 800eb18:	e000      	b.n	800eb1c <xQueueGenericSend+0x78>
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d10b      	bne.n	800eb38 <xQueueGenericSend+0x94>
	__asm volatile
 800eb20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb24:	f383 8811 	msr	BASEPRI, r3
 800eb28:	f3bf 8f6f 	isb	sy
 800eb2c:	f3bf 8f4f 	dsb	sy
 800eb30:	623b      	str	r3, [r7, #32]
}
 800eb32:	bf00      	nop
 800eb34:	bf00      	nop
 800eb36:	e7fd      	b.n	800eb34 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eb38:	f001 fb6e 	bl	8010218 <xTaskGetSchedulerState>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d102      	bne.n	800eb48 <xQueueGenericSend+0xa4>
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d101      	bne.n	800eb4c <xQueueGenericSend+0xa8>
 800eb48:	2301      	movs	r3, #1
 800eb4a:	e000      	b.n	800eb4e <xQueueGenericSend+0xaa>
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d10b      	bne.n	800eb6a <xQueueGenericSend+0xc6>
	__asm volatile
 800eb52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb56:	f383 8811 	msr	BASEPRI, r3
 800eb5a:	f3bf 8f6f 	isb	sy
 800eb5e:	f3bf 8f4f 	dsb	sy
 800eb62:	61fb      	str	r3, [r7, #28]
}
 800eb64:	bf00      	nop
 800eb66:	bf00      	nop
 800eb68:	e7fd      	b.n	800eb66 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eb6a:	f002 fbcd 	bl	8011308 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eb6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eb72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb76:	429a      	cmp	r2, r3
 800eb78:	d302      	bcc.n	800eb80 <xQueueGenericSend+0xdc>
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	2b02      	cmp	r3, #2
 800eb7e:	d129      	bne.n	800ebd4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eb80:	683a      	ldr	r2, [r7, #0]
 800eb82:	68b9      	ldr	r1, [r7, #8]
 800eb84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eb86:	f000 fb37 	bl	800f1f8 <prvCopyDataToQueue>
 800eb8a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d010      	beq.n	800ebb6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb96:	3324      	adds	r3, #36	@ 0x24
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f001 f93f 	bl	800fe1c <xTaskRemoveFromEventList>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d013      	beq.n	800ebcc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800eba4:	4b3f      	ldr	r3, [pc, #252]	@ (800eca4 <xQueueGenericSend+0x200>)
 800eba6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ebaa:	601a      	str	r2, [r3, #0]
 800ebac:	f3bf 8f4f 	dsb	sy
 800ebb0:	f3bf 8f6f 	isb	sy
 800ebb4:	e00a      	b.n	800ebcc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ebb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d007      	beq.n	800ebcc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ebbc:	4b39      	ldr	r3, [pc, #228]	@ (800eca4 <xQueueGenericSend+0x200>)
 800ebbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ebc2:	601a      	str	r2, [r3, #0]
 800ebc4:	f3bf 8f4f 	dsb	sy
 800ebc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ebcc:	f002 fbce 	bl	801136c <vPortExitCritical>
				return pdPASS;
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	e063      	b.n	800ec9c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d103      	bne.n	800ebe2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ebda:	f002 fbc7 	bl	801136c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	e05c      	b.n	800ec9c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ebe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d106      	bne.n	800ebf6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ebe8:	f107 0314 	add.w	r3, r7, #20
 800ebec:	4618      	mov	r0, r3
 800ebee:	f001 f9a1 	bl	800ff34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ebf6:	f002 fbb9 	bl	801136c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ebfa:	f000 fecf 	bl	800f99c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ebfe:	f002 fb83 	bl	8011308 <vPortEnterCritical>
 800ec02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ec08:	b25b      	sxtb	r3, r3
 800ec0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ec0e:	d103      	bne.n	800ec18 <xQueueGenericSend+0x174>
 800ec10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec12:	2200      	movs	r2, #0
 800ec14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ec18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ec1e:	b25b      	sxtb	r3, r3
 800ec20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ec24:	d103      	bne.n	800ec2e <xQueueGenericSend+0x18a>
 800ec26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec28:	2200      	movs	r2, #0
 800ec2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ec2e:	f002 fb9d 	bl	801136c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ec32:	1d3a      	adds	r2, r7, #4
 800ec34:	f107 0314 	add.w	r3, r7, #20
 800ec38:	4611      	mov	r1, r2
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f001 f990 	bl	800ff60 <xTaskCheckForTimeOut>
 800ec40:	4603      	mov	r3, r0
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d124      	bne.n	800ec90 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ec46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ec48:	f000 fbce 	bl	800f3e8 <prvIsQueueFull>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d018      	beq.n	800ec84 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ec52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec54:	3310      	adds	r3, #16
 800ec56:	687a      	ldr	r2, [r7, #4]
 800ec58:	4611      	mov	r1, r2
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f001 f88c 	bl	800fd78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ec60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ec62:	f000 fb59 	bl	800f318 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ec66:	f000 fea7 	bl	800f9b8 <xTaskResumeAll>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	f47f af7c 	bne.w	800eb6a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ec72:	4b0c      	ldr	r3, [pc, #48]	@ (800eca4 <xQueueGenericSend+0x200>)
 800ec74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec78:	601a      	str	r2, [r3, #0]
 800ec7a:	f3bf 8f4f 	dsb	sy
 800ec7e:	f3bf 8f6f 	isb	sy
 800ec82:	e772      	b.n	800eb6a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ec84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ec86:	f000 fb47 	bl	800f318 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec8a:	f000 fe95 	bl	800f9b8 <xTaskResumeAll>
 800ec8e:	e76c      	b.n	800eb6a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ec90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ec92:	f000 fb41 	bl	800f318 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ec96:	f000 fe8f 	bl	800f9b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ec9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3738      	adds	r7, #56	@ 0x38
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}
 800eca4:	e000ed04 	.word	0xe000ed04

0800eca8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b090      	sub	sp, #64	@ 0x40
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	60f8      	str	r0, [r7, #12]
 800ecb0:	60b9      	str	r1, [r7, #8]
 800ecb2:	607a      	str	r2, [r7, #4]
 800ecb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ecba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d10b      	bne.n	800ecd8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ecc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecc4:	f383 8811 	msr	BASEPRI, r3
 800ecc8:	f3bf 8f6f 	isb	sy
 800eccc:	f3bf 8f4f 	dsb	sy
 800ecd0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ecd2:	bf00      	nop
 800ecd4:	bf00      	nop
 800ecd6:	e7fd      	b.n	800ecd4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d103      	bne.n	800ece6 <xQueueGenericSendFromISR+0x3e>
 800ecde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ece0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d101      	bne.n	800ecea <xQueueGenericSendFromISR+0x42>
 800ece6:	2301      	movs	r3, #1
 800ece8:	e000      	b.n	800ecec <xQueueGenericSendFromISR+0x44>
 800ecea:	2300      	movs	r3, #0
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d10b      	bne.n	800ed08 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ecf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecf4:	f383 8811 	msr	BASEPRI, r3
 800ecf8:	f3bf 8f6f 	isb	sy
 800ecfc:	f3bf 8f4f 	dsb	sy
 800ed00:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ed02:	bf00      	nop
 800ed04:	bf00      	nop
 800ed06:	e7fd      	b.n	800ed04 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	2b02      	cmp	r3, #2
 800ed0c:	d103      	bne.n	800ed16 <xQueueGenericSendFromISR+0x6e>
 800ed0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed12:	2b01      	cmp	r3, #1
 800ed14:	d101      	bne.n	800ed1a <xQueueGenericSendFromISR+0x72>
 800ed16:	2301      	movs	r3, #1
 800ed18:	e000      	b.n	800ed1c <xQueueGenericSendFromISR+0x74>
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d10b      	bne.n	800ed38 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ed20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed24:	f383 8811 	msr	BASEPRI, r3
 800ed28:	f3bf 8f6f 	isb	sy
 800ed2c:	f3bf 8f4f 	dsb	sy
 800ed30:	623b      	str	r3, [r7, #32]
}
 800ed32:	bf00      	nop
 800ed34:	bf00      	nop
 800ed36:	e7fd      	b.n	800ed34 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ed38:	f002 fbc6 	bl	80114c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ed3c:	f3ef 8211 	mrs	r2, BASEPRI
 800ed40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed44:	f383 8811 	msr	BASEPRI, r3
 800ed48:	f3bf 8f6f 	isb	sy
 800ed4c:	f3bf 8f4f 	dsb	sy
 800ed50:	61fa      	str	r2, [r7, #28]
 800ed52:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ed54:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ed56:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ed58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ed5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d302      	bcc.n	800ed6a <xQueueGenericSendFromISR+0xc2>
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	2b02      	cmp	r3, #2
 800ed68:	d12f      	bne.n	800edca <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ed6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ed70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ed74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed78:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ed7a:	683a      	ldr	r2, [r7, #0]
 800ed7c:	68b9      	ldr	r1, [r7, #8]
 800ed7e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ed80:	f000 fa3a 	bl	800f1f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ed84:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ed88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ed8c:	d112      	bne.n	800edb4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d016      	beq.n	800edc4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed98:	3324      	adds	r3, #36	@ 0x24
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f001 f83e 	bl	800fe1c <xTaskRemoveFromEventList>
 800eda0:	4603      	mov	r3, r0
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d00e      	beq.n	800edc4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d00b      	beq.n	800edc4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2201      	movs	r2, #1
 800edb0:	601a      	str	r2, [r3, #0]
 800edb2:	e007      	b.n	800edc4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800edb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800edb8:	3301      	adds	r3, #1
 800edba:	b2db      	uxtb	r3, r3
 800edbc:	b25a      	sxtb	r2, r3
 800edbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800edc4:	2301      	movs	r3, #1
 800edc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800edc8:	e001      	b.n	800edce <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800edca:	2300      	movs	r3, #0
 800edcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800edce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edd0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800edd8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800edda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800eddc:	4618      	mov	r0, r3
 800edde:	3740      	adds	r7, #64	@ 0x40
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}

0800ede4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b08c      	sub	sp, #48	@ 0x30
 800ede8:	af00      	add	r7, sp, #0
 800edea:	60f8      	str	r0, [r7, #12]
 800edec:	60b9      	str	r1, [r7, #8]
 800edee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800edf0:	2300      	movs	r3, #0
 800edf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800edf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d10b      	bne.n	800ee16 <xQueueReceive+0x32>
	__asm volatile
 800edfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee02:	f383 8811 	msr	BASEPRI, r3
 800ee06:	f3bf 8f6f 	isb	sy
 800ee0a:	f3bf 8f4f 	dsb	sy
 800ee0e:	623b      	str	r3, [r7, #32]
}
 800ee10:	bf00      	nop
 800ee12:	bf00      	nop
 800ee14:	e7fd      	b.n	800ee12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee16:	68bb      	ldr	r3, [r7, #8]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d103      	bne.n	800ee24 <xQueueReceive+0x40>
 800ee1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d101      	bne.n	800ee28 <xQueueReceive+0x44>
 800ee24:	2301      	movs	r3, #1
 800ee26:	e000      	b.n	800ee2a <xQueueReceive+0x46>
 800ee28:	2300      	movs	r3, #0
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d10b      	bne.n	800ee46 <xQueueReceive+0x62>
	__asm volatile
 800ee2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee32:	f383 8811 	msr	BASEPRI, r3
 800ee36:	f3bf 8f6f 	isb	sy
 800ee3a:	f3bf 8f4f 	dsb	sy
 800ee3e:	61fb      	str	r3, [r7, #28]
}
 800ee40:	bf00      	nop
 800ee42:	bf00      	nop
 800ee44:	e7fd      	b.n	800ee42 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ee46:	f001 f9e7 	bl	8010218 <xTaskGetSchedulerState>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d102      	bne.n	800ee56 <xQueueReceive+0x72>
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d101      	bne.n	800ee5a <xQueueReceive+0x76>
 800ee56:	2301      	movs	r3, #1
 800ee58:	e000      	b.n	800ee5c <xQueueReceive+0x78>
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d10b      	bne.n	800ee78 <xQueueReceive+0x94>
	__asm volatile
 800ee60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee64:	f383 8811 	msr	BASEPRI, r3
 800ee68:	f3bf 8f6f 	isb	sy
 800ee6c:	f3bf 8f4f 	dsb	sy
 800ee70:	61bb      	str	r3, [r7, #24]
}
 800ee72:	bf00      	nop
 800ee74:	bf00      	nop
 800ee76:	e7fd      	b.n	800ee74 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ee78:	f002 fa46 	bl	8011308 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee80:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ee82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d01f      	beq.n	800eec8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ee88:	68b9      	ldr	r1, [r7, #8]
 800ee8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ee8c:	f000 fa1e 	bl	800f2cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ee90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee92:	1e5a      	subs	r2, r3, #1
 800ee94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee96:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee9a:	691b      	ldr	r3, [r3, #16]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d00f      	beq.n	800eec0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eea2:	3310      	adds	r3, #16
 800eea4:	4618      	mov	r0, r3
 800eea6:	f000 ffb9 	bl	800fe1c <xTaskRemoveFromEventList>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d007      	beq.n	800eec0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eeb0:	4b3c      	ldr	r3, [pc, #240]	@ (800efa4 <xQueueReceive+0x1c0>)
 800eeb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eeb6:	601a      	str	r2, [r3, #0]
 800eeb8:	f3bf 8f4f 	dsb	sy
 800eebc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eec0:	f002 fa54 	bl	801136c <vPortExitCritical>
				return pdPASS;
 800eec4:	2301      	movs	r3, #1
 800eec6:	e069      	b.n	800ef9c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d103      	bne.n	800eed6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eece:	f002 fa4d 	bl	801136c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eed2:	2300      	movs	r3, #0
 800eed4:	e062      	b.n	800ef9c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d106      	bne.n	800eeea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eedc:	f107 0310 	add.w	r3, r7, #16
 800eee0:	4618      	mov	r0, r3
 800eee2:	f001 f827 	bl	800ff34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eee6:	2301      	movs	r3, #1
 800eee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eeea:	f002 fa3f 	bl	801136c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eeee:	f000 fd55 	bl	800f99c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eef2:	f002 fa09 	bl	8011308 <vPortEnterCritical>
 800eef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eef8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eefc:	b25b      	sxtb	r3, r3
 800eefe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ef02:	d103      	bne.n	800ef0c <xQueueReceive+0x128>
 800ef04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef06:	2200      	movs	r2, #0
 800ef08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ef0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ef12:	b25b      	sxtb	r3, r3
 800ef14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ef18:	d103      	bne.n	800ef22 <xQueueReceive+0x13e>
 800ef1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ef22:	f002 fa23 	bl	801136c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ef26:	1d3a      	adds	r2, r7, #4
 800ef28:	f107 0310 	add.w	r3, r7, #16
 800ef2c:	4611      	mov	r1, r2
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f001 f816 	bl	800ff60 <xTaskCheckForTimeOut>
 800ef34:	4603      	mov	r3, r0
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d123      	bne.n	800ef82 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ef3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef3c:	f000 fa3e 	bl	800f3bc <prvIsQueueEmpty>
 800ef40:	4603      	mov	r3, r0
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d017      	beq.n	800ef76 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ef46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef48:	3324      	adds	r3, #36	@ 0x24
 800ef4a:	687a      	ldr	r2, [r7, #4]
 800ef4c:	4611      	mov	r1, r2
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f000 ff12 	bl	800fd78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ef54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef56:	f000 f9df 	bl	800f318 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ef5a:	f000 fd2d 	bl	800f9b8 <xTaskResumeAll>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d189      	bne.n	800ee78 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ef64:	4b0f      	ldr	r3, [pc, #60]	@ (800efa4 <xQueueReceive+0x1c0>)
 800ef66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef6a:	601a      	str	r2, [r3, #0]
 800ef6c:	f3bf 8f4f 	dsb	sy
 800ef70:	f3bf 8f6f 	isb	sy
 800ef74:	e780      	b.n	800ee78 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ef76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef78:	f000 f9ce 	bl	800f318 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ef7c:	f000 fd1c 	bl	800f9b8 <xTaskResumeAll>
 800ef80:	e77a      	b.n	800ee78 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ef82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef84:	f000 f9c8 	bl	800f318 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ef88:	f000 fd16 	bl	800f9b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ef8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef8e:	f000 fa15 	bl	800f3bc <prvIsQueueEmpty>
 800ef92:	4603      	mov	r3, r0
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	f43f af6f 	beq.w	800ee78 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ef9a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3730      	adds	r7, #48	@ 0x30
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}
 800efa4:	e000ed04 	.word	0xe000ed04

0800efa8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b08e      	sub	sp, #56	@ 0x38
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
 800efb0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800efb2:	2300      	movs	r3, #0
 800efb4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800efba:	2300      	movs	r3, #0
 800efbc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800efbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d10b      	bne.n	800efdc <xQueueSemaphoreTake+0x34>
	__asm volatile
 800efc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efc8:	f383 8811 	msr	BASEPRI, r3
 800efcc:	f3bf 8f6f 	isb	sy
 800efd0:	f3bf 8f4f 	dsb	sy
 800efd4:	623b      	str	r3, [r7, #32]
}
 800efd6:	bf00      	nop
 800efd8:	bf00      	nop
 800efda:	e7fd      	b.n	800efd8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800efdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d00b      	beq.n	800effc <xQueueSemaphoreTake+0x54>
	__asm volatile
 800efe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efe8:	f383 8811 	msr	BASEPRI, r3
 800efec:	f3bf 8f6f 	isb	sy
 800eff0:	f3bf 8f4f 	dsb	sy
 800eff4:	61fb      	str	r3, [r7, #28]
}
 800eff6:	bf00      	nop
 800eff8:	bf00      	nop
 800effa:	e7fd      	b.n	800eff8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800effc:	f001 f90c 	bl	8010218 <xTaskGetSchedulerState>
 800f000:	4603      	mov	r3, r0
 800f002:	2b00      	cmp	r3, #0
 800f004:	d102      	bne.n	800f00c <xQueueSemaphoreTake+0x64>
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d101      	bne.n	800f010 <xQueueSemaphoreTake+0x68>
 800f00c:	2301      	movs	r3, #1
 800f00e:	e000      	b.n	800f012 <xQueueSemaphoreTake+0x6a>
 800f010:	2300      	movs	r3, #0
 800f012:	2b00      	cmp	r3, #0
 800f014:	d10b      	bne.n	800f02e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800f016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f01a:	f383 8811 	msr	BASEPRI, r3
 800f01e:	f3bf 8f6f 	isb	sy
 800f022:	f3bf 8f4f 	dsb	sy
 800f026:	61bb      	str	r3, [r7, #24]
}
 800f028:	bf00      	nop
 800f02a:	bf00      	nop
 800f02c:	e7fd      	b.n	800f02a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f02e:	f002 f96b 	bl	8011308 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f036:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d024      	beq.n	800f088 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f03e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f040:	1e5a      	subs	r2, r3, #1
 800f042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f044:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d104      	bne.n	800f058 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f04e:	f001 fa5d 	bl	801050c <pvTaskIncrementMutexHeldCount>
 800f052:	4602      	mov	r2, r0
 800f054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f056:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f05a:	691b      	ldr	r3, [r3, #16]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d00f      	beq.n	800f080 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f062:	3310      	adds	r3, #16
 800f064:	4618      	mov	r0, r3
 800f066:	f000 fed9 	bl	800fe1c <xTaskRemoveFromEventList>
 800f06a:	4603      	mov	r3, r0
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d007      	beq.n	800f080 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f070:	4b54      	ldr	r3, [pc, #336]	@ (800f1c4 <xQueueSemaphoreTake+0x21c>)
 800f072:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f076:	601a      	str	r2, [r3, #0]
 800f078:	f3bf 8f4f 	dsb	sy
 800f07c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f080:	f002 f974 	bl	801136c <vPortExitCritical>
				return pdPASS;
 800f084:	2301      	movs	r3, #1
 800f086:	e098      	b.n	800f1ba <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d112      	bne.n	800f0b4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f090:	2b00      	cmp	r3, #0
 800f092:	d00b      	beq.n	800f0ac <xQueueSemaphoreTake+0x104>
	__asm volatile
 800f094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f098:	f383 8811 	msr	BASEPRI, r3
 800f09c:	f3bf 8f6f 	isb	sy
 800f0a0:	f3bf 8f4f 	dsb	sy
 800f0a4:	617b      	str	r3, [r7, #20]
}
 800f0a6:	bf00      	nop
 800f0a8:	bf00      	nop
 800f0aa:	e7fd      	b.n	800f0a8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f0ac:	f002 f95e 	bl	801136c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	e082      	b.n	800f1ba <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f0b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d106      	bne.n	800f0c8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f0ba:	f107 030c 	add.w	r3, r7, #12
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f000 ff38 	bl	800ff34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f0c8:	f002 f950 	bl	801136c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f0cc:	f000 fc66 	bl	800f99c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f0d0:	f002 f91a 	bl	8011308 <vPortEnterCritical>
 800f0d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f0da:	b25b      	sxtb	r3, r3
 800f0dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f0e0:	d103      	bne.n	800f0ea <xQueueSemaphoreTake+0x142>
 800f0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f0ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f0f0:	b25b      	sxtb	r3, r3
 800f0f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f0f6:	d103      	bne.n	800f100 <xQueueSemaphoreTake+0x158>
 800f0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f100:	f002 f934 	bl	801136c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f104:	463a      	mov	r2, r7
 800f106:	f107 030c 	add.w	r3, r7, #12
 800f10a:	4611      	mov	r1, r2
 800f10c:	4618      	mov	r0, r3
 800f10e:	f000 ff27 	bl	800ff60 <xTaskCheckForTimeOut>
 800f112:	4603      	mov	r3, r0
 800f114:	2b00      	cmp	r3, #0
 800f116:	d132      	bne.n	800f17e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f118:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f11a:	f000 f94f 	bl	800f3bc <prvIsQueueEmpty>
 800f11e:	4603      	mov	r3, r0
 800f120:	2b00      	cmp	r3, #0
 800f122:	d026      	beq.n	800f172 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d109      	bne.n	800f140 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800f12c:	f002 f8ec 	bl	8011308 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f132:	689b      	ldr	r3, [r3, #8]
 800f134:	4618      	mov	r0, r3
 800f136:	f001 f88d 	bl	8010254 <xTaskPriorityInherit>
 800f13a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800f13c:	f002 f916 	bl	801136c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f142:	3324      	adds	r3, #36	@ 0x24
 800f144:	683a      	ldr	r2, [r7, #0]
 800f146:	4611      	mov	r1, r2
 800f148:	4618      	mov	r0, r3
 800f14a:	f000 fe15 	bl	800fd78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f14e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f150:	f000 f8e2 	bl	800f318 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f154:	f000 fc30 	bl	800f9b8 <xTaskResumeAll>
 800f158:	4603      	mov	r3, r0
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	f47f af67 	bne.w	800f02e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800f160:	4b18      	ldr	r3, [pc, #96]	@ (800f1c4 <xQueueSemaphoreTake+0x21c>)
 800f162:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f166:	601a      	str	r2, [r3, #0]
 800f168:	f3bf 8f4f 	dsb	sy
 800f16c:	f3bf 8f6f 	isb	sy
 800f170:	e75d      	b.n	800f02e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f172:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f174:	f000 f8d0 	bl	800f318 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f178:	f000 fc1e 	bl	800f9b8 <xTaskResumeAll>
 800f17c:	e757      	b.n	800f02e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f17e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f180:	f000 f8ca 	bl	800f318 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f184:	f000 fc18 	bl	800f9b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f188:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f18a:	f000 f917 	bl	800f3bc <prvIsQueueEmpty>
 800f18e:	4603      	mov	r3, r0
 800f190:	2b00      	cmp	r3, #0
 800f192:	f43f af4c 	beq.w	800f02e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d00d      	beq.n	800f1b8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800f19c:	f002 f8b4 	bl	8011308 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f1a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f1a2:	f000 f811 	bl	800f1c8 <prvGetDisinheritPriorityAfterTimeout>
 800f1a6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f1a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1aa:	689b      	ldr	r3, [r3, #8]
 800f1ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f001 f928 	bl	8010404 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f1b4:	f002 f8da 	bl	801136c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f1b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	3738      	adds	r7, #56	@ 0x38
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd80      	pop	{r7, pc}
 800f1c2:	bf00      	nop
 800f1c4:	e000ed04 	.word	0xe000ed04

0800f1c8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f1c8:	b480      	push	{r7}
 800f1ca:	b085      	sub	sp, #20
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d006      	beq.n	800f1e6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800f1e2:	60fb      	str	r3, [r7, #12]
 800f1e4:	e001      	b.n	800f1ea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
	}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	3714      	adds	r7, #20
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f6:	4770      	bx	lr

0800f1f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b086      	sub	sp, #24
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	60f8      	str	r0, [r7, #12]
 800f200:	60b9      	str	r1, [r7, #8]
 800f202:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f204:	2300      	movs	r3, #0
 800f206:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f20c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f212:	2b00      	cmp	r3, #0
 800f214:	d10d      	bne.n	800f232 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d14d      	bne.n	800f2ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	689b      	ldr	r3, [r3, #8]
 800f222:	4618      	mov	r0, r3
 800f224:	f001 f87e 	bl	8010324 <xTaskPriorityDisinherit>
 800f228:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	2200      	movs	r2, #0
 800f22e:	609a      	str	r2, [r3, #8]
 800f230:	e043      	b.n	800f2ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d119      	bne.n	800f26c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	6858      	ldr	r0, [r3, #4]
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f240:	461a      	mov	r2, r3
 800f242:	68b9      	ldr	r1, [r7, #8]
 800f244:	f013 f8e3 	bl	802240e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	685a      	ldr	r2, [r3, #4]
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f250:	441a      	add	r2, r3
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	685a      	ldr	r2, [r3, #4]
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	689b      	ldr	r3, [r3, #8]
 800f25e:	429a      	cmp	r2, r3
 800f260:	d32b      	bcc.n	800f2ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	681a      	ldr	r2, [r3, #0]
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	605a      	str	r2, [r3, #4]
 800f26a:	e026      	b.n	800f2ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	68d8      	ldr	r0, [r3, #12]
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f274:	461a      	mov	r2, r3
 800f276:	68b9      	ldr	r1, [r7, #8]
 800f278:	f013 f8c9 	bl	802240e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	68da      	ldr	r2, [r3, #12]
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f284:	425b      	negs	r3, r3
 800f286:	441a      	add	r2, r3
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	68da      	ldr	r2, [r3, #12]
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	429a      	cmp	r2, r3
 800f296:	d207      	bcs.n	800f2a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	689a      	ldr	r2, [r3, #8]
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2a0:	425b      	negs	r3, r3
 800f2a2:	441a      	add	r2, r3
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2b02      	cmp	r3, #2
 800f2ac:	d105      	bne.n	800f2ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f2ae:	693b      	ldr	r3, [r7, #16]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d002      	beq.n	800f2ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	3b01      	subs	r3, #1
 800f2b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f2ba:	693b      	ldr	r3, [r7, #16]
 800f2bc:	1c5a      	adds	r2, r3, #1
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800f2c2:	697b      	ldr	r3, [r7, #20]
}
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	3718      	adds	r7, #24
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}

0800f2cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b082      	sub	sp, #8
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
 800f2d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d018      	beq.n	800f310 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	68da      	ldr	r2, [r3, #12]
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2e6:	441a      	add	r2, r3
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	68da      	ldr	r2, [r3, #12]
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	689b      	ldr	r3, [r3, #8]
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	d303      	bcc.n	800f300 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681a      	ldr	r2, [r3, #0]
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	68d9      	ldr	r1, [r3, #12]
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f308:	461a      	mov	r2, r3
 800f30a:	6838      	ldr	r0, [r7, #0]
 800f30c:	f013 f87f 	bl	802240e <memcpy>
	}
}
 800f310:	bf00      	nop
 800f312:	3708      	adds	r7, #8
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}

0800f318 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b084      	sub	sp, #16
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f320:	f001 fff2 	bl	8011308 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f32a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f32c:	e011      	b.n	800f352 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f332:	2b00      	cmp	r3, #0
 800f334:	d012      	beq.n	800f35c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	3324      	adds	r3, #36	@ 0x24
 800f33a:	4618      	mov	r0, r3
 800f33c:	f000 fd6e 	bl	800fe1c <xTaskRemoveFromEventList>
 800f340:	4603      	mov	r3, r0
 800f342:	2b00      	cmp	r3, #0
 800f344:	d001      	beq.n	800f34a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f346:	f000 fe6f 	bl	8010028 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f34a:	7bfb      	ldrb	r3, [r7, #15]
 800f34c:	3b01      	subs	r3, #1
 800f34e:	b2db      	uxtb	r3, r3
 800f350:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f356:	2b00      	cmp	r3, #0
 800f358:	dce9      	bgt.n	800f32e <prvUnlockQueue+0x16>
 800f35a:	e000      	b.n	800f35e <prvUnlockQueue+0x46>
					break;
 800f35c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	22ff      	movs	r2, #255	@ 0xff
 800f362:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800f366:	f002 f801 	bl	801136c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f36a:	f001 ffcd 	bl	8011308 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f374:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f376:	e011      	b.n	800f39c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	691b      	ldr	r3, [r3, #16]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d012      	beq.n	800f3a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	3310      	adds	r3, #16
 800f384:	4618      	mov	r0, r3
 800f386:	f000 fd49 	bl	800fe1c <xTaskRemoveFromEventList>
 800f38a:	4603      	mov	r3, r0
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d001      	beq.n	800f394 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f390:	f000 fe4a 	bl	8010028 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f394:	7bbb      	ldrb	r3, [r7, #14]
 800f396:	3b01      	subs	r3, #1
 800f398:	b2db      	uxtb	r3, r3
 800f39a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f39c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	dce9      	bgt.n	800f378 <prvUnlockQueue+0x60>
 800f3a4:	e000      	b.n	800f3a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f3a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	22ff      	movs	r2, #255	@ 0xff
 800f3ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800f3b0:	f001 ffdc 	bl	801136c <vPortExitCritical>
}
 800f3b4:	bf00      	nop
 800f3b6:	3710      	adds	r7, #16
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}

0800f3bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b084      	sub	sp, #16
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f3c4:	f001 ffa0 	bl	8011308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d102      	bne.n	800f3d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	60fb      	str	r3, [r7, #12]
 800f3d4:	e001      	b.n	800f3da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f3da:	f001 ffc7 	bl	801136c <vPortExitCritical>

	return xReturn;
 800f3de:	68fb      	ldr	r3, [r7, #12]
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	3710      	adds	r7, #16
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}

0800f3e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b084      	sub	sp, #16
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f3f0:	f001 ff8a 	bl	8011308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	d102      	bne.n	800f406 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f400:	2301      	movs	r3, #1
 800f402:	60fb      	str	r3, [r7, #12]
 800f404:	e001      	b.n	800f40a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f406:	2300      	movs	r3, #0
 800f408:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f40a:	f001 ffaf 	bl	801136c <vPortExitCritical>

	return xReturn;
 800f40e:	68fb      	ldr	r3, [r7, #12]
}
 800f410:	4618      	mov	r0, r3
 800f412:	3710      	adds	r7, #16
 800f414:	46bd      	mov	sp, r7
 800f416:	bd80      	pop	{r7, pc}

0800f418 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f418:	b480      	push	{r7}
 800f41a:	b085      	sub	sp, #20
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
 800f420:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f422:	2300      	movs	r3, #0
 800f424:	60fb      	str	r3, [r7, #12]
 800f426:	e014      	b.n	800f452 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f428:	4a0f      	ldr	r2, [pc, #60]	@ (800f468 <vQueueAddToRegistry+0x50>)
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d10b      	bne.n	800f44c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f434:	490c      	ldr	r1, [pc, #48]	@ (800f468 <vQueueAddToRegistry+0x50>)
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	683a      	ldr	r2, [r7, #0]
 800f43a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f43e:	4a0a      	ldr	r2, [pc, #40]	@ (800f468 <vQueueAddToRegistry+0x50>)
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	00db      	lsls	r3, r3, #3
 800f444:	4413      	add	r3, r2
 800f446:	687a      	ldr	r2, [r7, #4]
 800f448:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f44a:	e006      	b.n	800f45a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	3301      	adds	r3, #1
 800f450:	60fb      	str	r3, [r7, #12]
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	2b07      	cmp	r3, #7
 800f456:	d9e7      	bls.n	800f428 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f458:	bf00      	nop
 800f45a:	bf00      	nop
 800f45c:	3714      	adds	r7, #20
 800f45e:	46bd      	mov	sp, r7
 800f460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f464:	4770      	bx	lr
 800f466:	bf00      	nop
 800f468:	240334a8 	.word	0x240334a8

0800f46c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b086      	sub	sp, #24
 800f470:	af00      	add	r7, sp, #0
 800f472:	60f8      	str	r0, [r7, #12]
 800f474:	60b9      	str	r1, [r7, #8]
 800f476:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f47c:	f001 ff44 	bl	8011308 <vPortEnterCritical>
 800f480:	697b      	ldr	r3, [r7, #20]
 800f482:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f486:	b25b      	sxtb	r3, r3
 800f488:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f48c:	d103      	bne.n	800f496 <vQueueWaitForMessageRestricted+0x2a>
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	2200      	movs	r2, #0
 800f492:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f49c:	b25b      	sxtb	r3, r3
 800f49e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f4a2:	d103      	bne.n	800f4ac <vQueueWaitForMessageRestricted+0x40>
 800f4a4:	697b      	ldr	r3, [r7, #20]
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f4ac:	f001 ff5e 	bl	801136c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d106      	bne.n	800f4c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f4b8:	697b      	ldr	r3, [r7, #20]
 800f4ba:	3324      	adds	r3, #36	@ 0x24
 800f4bc:	687a      	ldr	r2, [r7, #4]
 800f4be:	68b9      	ldr	r1, [r7, #8]
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f000 fc7f 	bl	800fdc4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f4c6:	6978      	ldr	r0, [r7, #20]
 800f4c8:	f7ff ff26 	bl	800f318 <prvUnlockQueue>
	}
 800f4cc:	bf00      	nop
 800f4ce:	3718      	adds	r7, #24
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}

0800f4d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b08e      	sub	sp, #56	@ 0x38
 800f4d8:	af04      	add	r7, sp, #16
 800f4da:	60f8      	str	r0, [r7, #12]
 800f4dc:	60b9      	str	r1, [r7, #8]
 800f4de:	607a      	str	r2, [r7, #4]
 800f4e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f4e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d10b      	bne.n	800f500 <xTaskCreateStatic+0x2c>
	__asm volatile
 800f4e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4ec:	f383 8811 	msr	BASEPRI, r3
 800f4f0:	f3bf 8f6f 	isb	sy
 800f4f4:	f3bf 8f4f 	dsb	sy
 800f4f8:	623b      	str	r3, [r7, #32]
}
 800f4fa:	bf00      	nop
 800f4fc:	bf00      	nop
 800f4fe:	e7fd      	b.n	800f4fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f502:	2b00      	cmp	r3, #0
 800f504:	d10b      	bne.n	800f51e <xTaskCreateStatic+0x4a>
	__asm volatile
 800f506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f50a:	f383 8811 	msr	BASEPRI, r3
 800f50e:	f3bf 8f6f 	isb	sy
 800f512:	f3bf 8f4f 	dsb	sy
 800f516:	61fb      	str	r3, [r7, #28]
}
 800f518:	bf00      	nop
 800f51a:	bf00      	nop
 800f51c:	e7fd      	b.n	800f51a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f51e:	23a8      	movs	r3, #168	@ 0xa8
 800f520:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f522:	693b      	ldr	r3, [r7, #16]
 800f524:	2ba8      	cmp	r3, #168	@ 0xa8
 800f526:	d00b      	beq.n	800f540 <xTaskCreateStatic+0x6c>
	__asm volatile
 800f528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f52c:	f383 8811 	msr	BASEPRI, r3
 800f530:	f3bf 8f6f 	isb	sy
 800f534:	f3bf 8f4f 	dsb	sy
 800f538:	61bb      	str	r3, [r7, #24]
}
 800f53a:	bf00      	nop
 800f53c:	bf00      	nop
 800f53e:	e7fd      	b.n	800f53c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f540:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f544:	2b00      	cmp	r3, #0
 800f546:	d01e      	beq.n	800f586 <xTaskCreateStatic+0xb2>
 800f548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d01b      	beq.n	800f586 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f54e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f550:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f554:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f556:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f55a:	2202      	movs	r2, #2
 800f55c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f560:	2300      	movs	r3, #0
 800f562:	9303      	str	r3, [sp, #12]
 800f564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f566:	9302      	str	r3, [sp, #8]
 800f568:	f107 0314 	add.w	r3, r7, #20
 800f56c:	9301      	str	r3, [sp, #4]
 800f56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f570:	9300      	str	r3, [sp, #0]
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	687a      	ldr	r2, [r7, #4]
 800f576:	68b9      	ldr	r1, [r7, #8]
 800f578:	68f8      	ldr	r0, [r7, #12]
 800f57a:	f000 f851 	bl	800f620 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f57e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f580:	f000 f8f6 	bl	800f770 <prvAddNewTaskToReadyList>
 800f584:	e001      	b.n	800f58a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800f586:	2300      	movs	r3, #0
 800f588:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f58a:	697b      	ldr	r3, [r7, #20]
	}
 800f58c:	4618      	mov	r0, r3
 800f58e:	3728      	adds	r7, #40	@ 0x28
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}

0800f594 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f594:	b580      	push	{r7, lr}
 800f596:	b08c      	sub	sp, #48	@ 0x30
 800f598:	af04      	add	r7, sp, #16
 800f59a:	60f8      	str	r0, [r7, #12]
 800f59c:	60b9      	str	r1, [r7, #8]
 800f59e:	603b      	str	r3, [r7, #0]
 800f5a0:	4613      	mov	r3, r2
 800f5a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f5a4:	88fb      	ldrh	r3, [r7, #6]
 800f5a6:	009b      	lsls	r3, r3, #2
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f001 ffcf 	bl	801154c <pvPortMalloc>
 800f5ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f5b0:	697b      	ldr	r3, [r7, #20]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d00e      	beq.n	800f5d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f5b6:	20a8      	movs	r0, #168	@ 0xa8
 800f5b8:	f001 ffc8 	bl	801154c <pvPortMalloc>
 800f5bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f5be:	69fb      	ldr	r3, [r7, #28]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d003      	beq.n	800f5cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f5c4:	69fb      	ldr	r3, [r7, #28]
 800f5c6:	697a      	ldr	r2, [r7, #20]
 800f5c8:	631a      	str	r2, [r3, #48]	@ 0x30
 800f5ca:	e005      	b.n	800f5d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f5cc:	6978      	ldr	r0, [r7, #20]
 800f5ce:	f002 f88b 	bl	80116e8 <vPortFree>
 800f5d2:	e001      	b.n	800f5d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f5d8:	69fb      	ldr	r3, [r7, #28]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d017      	beq.n	800f60e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f5de:	69fb      	ldr	r3, [r7, #28]
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f5e6:	88fa      	ldrh	r2, [r7, #6]
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	9303      	str	r3, [sp, #12]
 800f5ec:	69fb      	ldr	r3, [r7, #28]
 800f5ee:	9302      	str	r3, [sp, #8]
 800f5f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5f2:	9301      	str	r3, [sp, #4]
 800f5f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5f6:	9300      	str	r3, [sp, #0]
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	68b9      	ldr	r1, [r7, #8]
 800f5fc:	68f8      	ldr	r0, [r7, #12]
 800f5fe:	f000 f80f 	bl	800f620 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f602:	69f8      	ldr	r0, [r7, #28]
 800f604:	f000 f8b4 	bl	800f770 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f608:	2301      	movs	r3, #1
 800f60a:	61bb      	str	r3, [r7, #24]
 800f60c:	e002      	b.n	800f614 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f60e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f612:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f614:	69bb      	ldr	r3, [r7, #24]
	}
 800f616:	4618      	mov	r0, r3
 800f618:	3720      	adds	r7, #32
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bd80      	pop	{r7, pc}
	...

0800f620 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b088      	sub	sp, #32
 800f624:	af00      	add	r7, sp, #0
 800f626:	60f8      	str	r0, [r7, #12]
 800f628:	60b9      	str	r1, [r7, #8]
 800f62a:	607a      	str	r2, [r7, #4]
 800f62c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f62e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f630:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	009b      	lsls	r3, r3, #2
 800f636:	461a      	mov	r2, r3
 800f638:	21a5      	movs	r1, #165	@ 0xa5
 800f63a:	f012 fdc9 	bl	80221d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f63e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f640:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f642:	6879      	ldr	r1, [r7, #4]
 800f644:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f648:	440b      	add	r3, r1
 800f64a:	009b      	lsls	r3, r3, #2
 800f64c:	4413      	add	r3, r2
 800f64e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f650:	69bb      	ldr	r3, [r7, #24]
 800f652:	f023 0307 	bic.w	r3, r3, #7
 800f656:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f658:	69bb      	ldr	r3, [r7, #24]
 800f65a:	f003 0307 	and.w	r3, r3, #7
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d00b      	beq.n	800f67a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800f662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f666:	f383 8811 	msr	BASEPRI, r3
 800f66a:	f3bf 8f6f 	isb	sy
 800f66e:	f3bf 8f4f 	dsb	sy
 800f672:	617b      	str	r3, [r7, #20]
}
 800f674:	bf00      	nop
 800f676:	bf00      	nop
 800f678:	e7fd      	b.n	800f676 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d01f      	beq.n	800f6c0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f680:	2300      	movs	r3, #0
 800f682:	61fb      	str	r3, [r7, #28]
 800f684:	e012      	b.n	800f6ac <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f686:	68ba      	ldr	r2, [r7, #8]
 800f688:	69fb      	ldr	r3, [r7, #28]
 800f68a:	4413      	add	r3, r2
 800f68c:	7819      	ldrb	r1, [r3, #0]
 800f68e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f690:	69fb      	ldr	r3, [r7, #28]
 800f692:	4413      	add	r3, r2
 800f694:	3334      	adds	r3, #52	@ 0x34
 800f696:	460a      	mov	r2, r1
 800f698:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f69a:	68ba      	ldr	r2, [r7, #8]
 800f69c:	69fb      	ldr	r3, [r7, #28]
 800f69e:	4413      	add	r3, r2
 800f6a0:	781b      	ldrb	r3, [r3, #0]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d006      	beq.n	800f6b4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f6a6:	69fb      	ldr	r3, [r7, #28]
 800f6a8:	3301      	adds	r3, #1
 800f6aa:	61fb      	str	r3, [r7, #28]
 800f6ac:	69fb      	ldr	r3, [r7, #28]
 800f6ae:	2b0f      	cmp	r3, #15
 800f6b0:	d9e9      	bls.n	800f686 <prvInitialiseNewTask+0x66>
 800f6b2:	e000      	b.n	800f6b6 <prvInitialiseNewTask+0x96>
			{
				break;
 800f6b4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f6be:	e003      	b.n	800f6c8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f6c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6ca:	2b37      	cmp	r3, #55	@ 0x37
 800f6cc:	d901      	bls.n	800f6d2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f6ce:	2337      	movs	r3, #55	@ 0x37
 800f6d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f6d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f6dc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f6e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6e6:	3304      	adds	r3, #4
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f7fe ff49 	bl	800e580 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6f0:	3318      	adds	r3, #24
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	f7fe ff44 	bl	800e580 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f700:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f706:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f70a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f70c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f710:	2200      	movs	r2, #0
 800f712:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f718:	2200      	movs	r2, #0
 800f71a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f720:	3354      	adds	r3, #84	@ 0x54
 800f722:	224c      	movs	r2, #76	@ 0x4c
 800f724:	2100      	movs	r1, #0
 800f726:	4618      	mov	r0, r3
 800f728:	f012 fd52 	bl	80221d0 <memset>
 800f72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f72e:	4a0d      	ldr	r2, [pc, #52]	@ (800f764 <prvInitialiseNewTask+0x144>)
 800f730:	659a      	str	r2, [r3, #88]	@ 0x58
 800f732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f734:	4a0c      	ldr	r2, [pc, #48]	@ (800f768 <prvInitialiseNewTask+0x148>)
 800f736:	65da      	str	r2, [r3, #92]	@ 0x5c
 800f738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f73a:	4a0c      	ldr	r2, [pc, #48]	@ (800f76c <prvInitialiseNewTask+0x14c>)
 800f73c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f73e:	683a      	ldr	r2, [r7, #0]
 800f740:	68f9      	ldr	r1, [r7, #12]
 800f742:	69b8      	ldr	r0, [r7, #24]
 800f744:	f001 fcac 	bl	80110a0 <pxPortInitialiseStack>
 800f748:	4602      	mov	r2, r0
 800f74a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f74c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f74e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f750:	2b00      	cmp	r3, #0
 800f752:	d002      	beq.n	800f75a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f756:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f758:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f75a:	bf00      	nop
 800f75c:	3720      	adds	r7, #32
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd80      	pop	{r7, pc}
 800f762:	bf00      	nop
 800f764:	240695ac 	.word	0x240695ac
 800f768:	24069614 	.word	0x24069614
 800f76c:	2406967c 	.word	0x2406967c

0800f770 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b082      	sub	sp, #8
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f778:	f001 fdc6 	bl	8011308 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f77c:	4b2d      	ldr	r3, [pc, #180]	@ (800f834 <prvAddNewTaskToReadyList+0xc4>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	3301      	adds	r3, #1
 800f782:	4a2c      	ldr	r2, [pc, #176]	@ (800f834 <prvAddNewTaskToReadyList+0xc4>)
 800f784:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f786:	4b2c      	ldr	r3, [pc, #176]	@ (800f838 <prvAddNewTaskToReadyList+0xc8>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d109      	bne.n	800f7a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f78e:	4a2a      	ldr	r2, [pc, #168]	@ (800f838 <prvAddNewTaskToReadyList+0xc8>)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f794:	4b27      	ldr	r3, [pc, #156]	@ (800f834 <prvAddNewTaskToReadyList+0xc4>)
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	2b01      	cmp	r3, #1
 800f79a:	d110      	bne.n	800f7be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f79c:	f000 fc68 	bl	8010070 <prvInitialiseTaskLists>
 800f7a0:	e00d      	b.n	800f7be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f7a2:	4b26      	ldr	r3, [pc, #152]	@ (800f83c <prvAddNewTaskToReadyList+0xcc>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d109      	bne.n	800f7be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f7aa:	4b23      	ldr	r3, [pc, #140]	@ (800f838 <prvAddNewTaskToReadyList+0xc8>)
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7b4:	429a      	cmp	r2, r3
 800f7b6:	d802      	bhi.n	800f7be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f7b8:	4a1f      	ldr	r2, [pc, #124]	@ (800f838 <prvAddNewTaskToReadyList+0xc8>)
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f7be:	4b20      	ldr	r3, [pc, #128]	@ (800f840 <prvAddNewTaskToReadyList+0xd0>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	3301      	adds	r3, #1
 800f7c4:	4a1e      	ldr	r2, [pc, #120]	@ (800f840 <prvAddNewTaskToReadyList+0xd0>)
 800f7c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f7c8:	4b1d      	ldr	r3, [pc, #116]	@ (800f840 <prvAddNewTaskToReadyList+0xd0>)
 800f7ca:	681a      	ldr	r2, [r3, #0]
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7d4:	4b1b      	ldr	r3, [pc, #108]	@ (800f844 <prvAddNewTaskToReadyList+0xd4>)
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	d903      	bls.n	800f7e4 <prvAddNewTaskToReadyList+0x74>
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7e0:	4a18      	ldr	r2, [pc, #96]	@ (800f844 <prvAddNewTaskToReadyList+0xd4>)
 800f7e2:	6013      	str	r3, [r2, #0]
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7e8:	4613      	mov	r3, r2
 800f7ea:	009b      	lsls	r3, r3, #2
 800f7ec:	4413      	add	r3, r2
 800f7ee:	009b      	lsls	r3, r3, #2
 800f7f0:	4a15      	ldr	r2, [pc, #84]	@ (800f848 <prvAddNewTaskToReadyList+0xd8>)
 800f7f2:	441a      	add	r2, r3
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	3304      	adds	r3, #4
 800f7f8:	4619      	mov	r1, r3
 800f7fa:	4610      	mov	r0, r2
 800f7fc:	f7fe fecd 	bl	800e59a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f800:	f001 fdb4 	bl	801136c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f804:	4b0d      	ldr	r3, [pc, #52]	@ (800f83c <prvAddNewTaskToReadyList+0xcc>)
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d00e      	beq.n	800f82a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f80c:	4b0a      	ldr	r3, [pc, #40]	@ (800f838 <prvAddNewTaskToReadyList+0xc8>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f816:	429a      	cmp	r2, r3
 800f818:	d207      	bcs.n	800f82a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f81a:	4b0c      	ldr	r3, [pc, #48]	@ (800f84c <prvAddNewTaskToReadyList+0xdc>)
 800f81c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f820:	601a      	str	r2, [r3, #0]
 800f822:	f3bf 8f4f 	dsb	sy
 800f826:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f82a:	bf00      	nop
 800f82c:	3708      	adds	r7, #8
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}
 800f832:	bf00      	nop
 800f834:	240339bc 	.word	0x240339bc
 800f838:	240334e8 	.word	0x240334e8
 800f83c:	240339c8 	.word	0x240339c8
 800f840:	240339d8 	.word	0x240339d8
 800f844:	240339c4 	.word	0x240339c4
 800f848:	240334ec 	.word	0x240334ec
 800f84c:	e000ed04 	.word	0xe000ed04

0800f850 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f850:	b580      	push	{r7, lr}
 800f852:	b084      	sub	sp, #16
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f858:	2300      	movs	r3, #0
 800f85a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d018      	beq.n	800f894 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f862:	4b14      	ldr	r3, [pc, #80]	@ (800f8b4 <vTaskDelay+0x64>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d00b      	beq.n	800f882 <vTaskDelay+0x32>
	__asm volatile
 800f86a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f86e:	f383 8811 	msr	BASEPRI, r3
 800f872:	f3bf 8f6f 	isb	sy
 800f876:	f3bf 8f4f 	dsb	sy
 800f87a:	60bb      	str	r3, [r7, #8]
}
 800f87c:	bf00      	nop
 800f87e:	bf00      	nop
 800f880:	e7fd      	b.n	800f87e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f882:	f000 f88b 	bl	800f99c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f886:	2100      	movs	r1, #0
 800f888:	6878      	ldr	r0, [r7, #4]
 800f88a:	f001 f85b 	bl	8010944 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f88e:	f000 f893 	bl	800f9b8 <xTaskResumeAll>
 800f892:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d107      	bne.n	800f8aa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f89a:	4b07      	ldr	r3, [pc, #28]	@ (800f8b8 <vTaskDelay+0x68>)
 800f89c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f8a0:	601a      	str	r2, [r3, #0]
 800f8a2:	f3bf 8f4f 	dsb	sy
 800f8a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f8aa:	bf00      	nop
 800f8ac:	3710      	adds	r7, #16
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd80      	pop	{r7, pc}
 800f8b2:	bf00      	nop
 800f8b4:	240339e4 	.word	0x240339e4
 800f8b8:	e000ed04 	.word	0xe000ed04

0800f8bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b08a      	sub	sp, #40	@ 0x28
 800f8c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f8ca:	463a      	mov	r2, r7
 800f8cc:	1d39      	adds	r1, r7, #4
 800f8ce:	f107 0308 	add.w	r3, r7, #8
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f7fe fe00 	bl	800e4d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f8d8:	6839      	ldr	r1, [r7, #0]
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	68ba      	ldr	r2, [r7, #8]
 800f8de:	9202      	str	r2, [sp, #8]
 800f8e0:	9301      	str	r3, [sp, #4]
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	9300      	str	r3, [sp, #0]
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	460a      	mov	r2, r1
 800f8ea:	4924      	ldr	r1, [pc, #144]	@ (800f97c <vTaskStartScheduler+0xc0>)
 800f8ec:	4824      	ldr	r0, [pc, #144]	@ (800f980 <vTaskStartScheduler+0xc4>)
 800f8ee:	f7ff fdf1 	bl	800f4d4 <xTaskCreateStatic>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	4a23      	ldr	r2, [pc, #140]	@ (800f984 <vTaskStartScheduler+0xc8>)
 800f8f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f8f8:	4b22      	ldr	r3, [pc, #136]	@ (800f984 <vTaskStartScheduler+0xc8>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d002      	beq.n	800f906 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f900:	2301      	movs	r3, #1
 800f902:	617b      	str	r3, [r7, #20]
 800f904:	e001      	b.n	800f90a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f906:	2300      	movs	r3, #0
 800f908:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f90a:	697b      	ldr	r3, [r7, #20]
 800f90c:	2b01      	cmp	r3, #1
 800f90e:	d102      	bne.n	800f916 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f910:	f001 f86c 	bl	80109ec <xTimerCreateTimerTask>
 800f914:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	2b01      	cmp	r3, #1
 800f91a:	d11b      	bne.n	800f954 <vTaskStartScheduler+0x98>
	__asm volatile
 800f91c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f920:	f383 8811 	msr	BASEPRI, r3
 800f924:	f3bf 8f6f 	isb	sy
 800f928:	f3bf 8f4f 	dsb	sy
 800f92c:	613b      	str	r3, [r7, #16]
}
 800f92e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f930:	4b15      	ldr	r3, [pc, #84]	@ (800f988 <vTaskStartScheduler+0xcc>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	3354      	adds	r3, #84	@ 0x54
 800f936:	4a15      	ldr	r2, [pc, #84]	@ (800f98c <vTaskStartScheduler+0xd0>)
 800f938:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f93a:	4b15      	ldr	r3, [pc, #84]	@ (800f990 <vTaskStartScheduler+0xd4>)
 800f93c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f940:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f942:	4b14      	ldr	r3, [pc, #80]	@ (800f994 <vTaskStartScheduler+0xd8>)
 800f944:	2201      	movs	r2, #1
 800f946:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f948:	4b13      	ldr	r3, [pc, #76]	@ (800f998 <vTaskStartScheduler+0xdc>)
 800f94a:	2200      	movs	r2, #0
 800f94c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f94e:	f001 fc37 	bl	80111c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f952:	e00f      	b.n	800f974 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f95a:	d10b      	bne.n	800f974 <vTaskStartScheduler+0xb8>
	__asm volatile
 800f95c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f960:	f383 8811 	msr	BASEPRI, r3
 800f964:	f3bf 8f6f 	isb	sy
 800f968:	f3bf 8f4f 	dsb	sy
 800f96c:	60fb      	str	r3, [r7, #12]
}
 800f96e:	bf00      	nop
 800f970:	bf00      	nop
 800f972:	e7fd      	b.n	800f970 <vTaskStartScheduler+0xb4>
}
 800f974:	bf00      	nop
 800f976:	3718      	adds	r7, #24
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}
 800f97c:	08023328 	.word	0x08023328
 800f980:	08010041 	.word	0x08010041
 800f984:	240339e0 	.word	0x240339e0
 800f988:	240334e8 	.word	0x240334e8
 800f98c:	240012bc 	.word	0x240012bc
 800f990:	240339dc 	.word	0x240339dc
 800f994:	240339c8 	.word	0x240339c8
 800f998:	240339c0 	.word	0x240339c0

0800f99c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f99c:	b480      	push	{r7}
 800f99e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f9a0:	4b04      	ldr	r3, [pc, #16]	@ (800f9b4 <vTaskSuspendAll+0x18>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	3301      	adds	r3, #1
 800f9a6:	4a03      	ldr	r2, [pc, #12]	@ (800f9b4 <vTaskSuspendAll+0x18>)
 800f9a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f9aa:	bf00      	nop
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b2:	4770      	bx	lr
 800f9b4:	240339e4 	.word	0x240339e4

0800f9b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b084      	sub	sp, #16
 800f9bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f9c6:	4b42      	ldr	r3, [pc, #264]	@ (800fad0 <xTaskResumeAll+0x118>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d10b      	bne.n	800f9e6 <xTaskResumeAll+0x2e>
	__asm volatile
 800f9ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9d2:	f383 8811 	msr	BASEPRI, r3
 800f9d6:	f3bf 8f6f 	isb	sy
 800f9da:	f3bf 8f4f 	dsb	sy
 800f9de:	603b      	str	r3, [r7, #0]
}
 800f9e0:	bf00      	nop
 800f9e2:	bf00      	nop
 800f9e4:	e7fd      	b.n	800f9e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f9e6:	f001 fc8f 	bl	8011308 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f9ea:	4b39      	ldr	r3, [pc, #228]	@ (800fad0 <xTaskResumeAll+0x118>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	3b01      	subs	r3, #1
 800f9f0:	4a37      	ldr	r2, [pc, #220]	@ (800fad0 <xTaskResumeAll+0x118>)
 800f9f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f9f4:	4b36      	ldr	r3, [pc, #216]	@ (800fad0 <xTaskResumeAll+0x118>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d162      	bne.n	800fac2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f9fc:	4b35      	ldr	r3, [pc, #212]	@ (800fad4 <xTaskResumeAll+0x11c>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d05e      	beq.n	800fac2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fa04:	e02f      	b.n	800fa66 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa06:	4b34      	ldr	r3, [pc, #208]	@ (800fad8 <xTaskResumeAll+0x120>)
 800fa08:	68db      	ldr	r3, [r3, #12]
 800fa0a:	68db      	ldr	r3, [r3, #12]
 800fa0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	3318      	adds	r3, #24
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7fe fe1e 	bl	800e654 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	3304      	adds	r3, #4
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f7fe fe19 	bl	800e654 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa26:	4b2d      	ldr	r3, [pc, #180]	@ (800fadc <xTaskResumeAll+0x124>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d903      	bls.n	800fa36 <xTaskResumeAll+0x7e>
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa32:	4a2a      	ldr	r2, [pc, #168]	@ (800fadc <xTaskResumeAll+0x124>)
 800fa34:	6013      	str	r3, [r2, #0]
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa3a:	4613      	mov	r3, r2
 800fa3c:	009b      	lsls	r3, r3, #2
 800fa3e:	4413      	add	r3, r2
 800fa40:	009b      	lsls	r3, r3, #2
 800fa42:	4a27      	ldr	r2, [pc, #156]	@ (800fae0 <xTaskResumeAll+0x128>)
 800fa44:	441a      	add	r2, r3
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	3304      	adds	r3, #4
 800fa4a:	4619      	mov	r1, r3
 800fa4c:	4610      	mov	r0, r2
 800fa4e:	f7fe fda4 	bl	800e59a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa56:	4b23      	ldr	r3, [pc, #140]	@ (800fae4 <xTaskResumeAll+0x12c>)
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d302      	bcc.n	800fa66 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800fa60:	4b21      	ldr	r3, [pc, #132]	@ (800fae8 <xTaskResumeAll+0x130>)
 800fa62:	2201      	movs	r2, #1
 800fa64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fa66:	4b1c      	ldr	r3, [pc, #112]	@ (800fad8 <xTaskResumeAll+0x120>)
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d1cb      	bne.n	800fa06 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d001      	beq.n	800fa78 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fa74:	f000 fba0 	bl	80101b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fa78:	4b1c      	ldr	r3, [pc, #112]	@ (800faec <xTaskResumeAll+0x134>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d010      	beq.n	800faa6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fa84:	f000 f858 	bl	800fb38 <xTaskIncrementTick>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d002      	beq.n	800fa94 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800fa8e:	4b16      	ldr	r3, [pc, #88]	@ (800fae8 <xTaskResumeAll+0x130>)
 800fa90:	2201      	movs	r2, #1
 800fa92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	3b01      	subs	r3, #1
 800fa98:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d1f1      	bne.n	800fa84 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800faa0:	4b12      	ldr	r3, [pc, #72]	@ (800faec <xTaskResumeAll+0x134>)
 800faa2:	2200      	movs	r2, #0
 800faa4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800faa6:	4b10      	ldr	r3, [pc, #64]	@ (800fae8 <xTaskResumeAll+0x130>)
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d009      	beq.n	800fac2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800faae:	2301      	movs	r3, #1
 800fab0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fab2:	4b0f      	ldr	r3, [pc, #60]	@ (800faf0 <xTaskResumeAll+0x138>)
 800fab4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fab8:	601a      	str	r2, [r3, #0]
 800faba:	f3bf 8f4f 	dsb	sy
 800fabe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fac2:	f001 fc53 	bl	801136c <vPortExitCritical>

	return xAlreadyYielded;
 800fac6:	68bb      	ldr	r3, [r7, #8]
}
 800fac8:	4618      	mov	r0, r3
 800faca:	3710      	adds	r7, #16
 800facc:	46bd      	mov	sp, r7
 800face:	bd80      	pop	{r7, pc}
 800fad0:	240339e4 	.word	0x240339e4
 800fad4:	240339bc 	.word	0x240339bc
 800fad8:	2403397c 	.word	0x2403397c
 800fadc:	240339c4 	.word	0x240339c4
 800fae0:	240334ec 	.word	0x240334ec
 800fae4:	240334e8 	.word	0x240334e8
 800fae8:	240339d0 	.word	0x240339d0
 800faec:	240339cc 	.word	0x240339cc
 800faf0:	e000ed04 	.word	0xe000ed04

0800faf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800faf4:	b480      	push	{r7}
 800faf6:	b083      	sub	sp, #12
 800faf8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fafa:	4b05      	ldr	r3, [pc, #20]	@ (800fb10 <xTaskGetTickCount+0x1c>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fb00:	687b      	ldr	r3, [r7, #4]
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	370c      	adds	r7, #12
 800fb06:	46bd      	mov	sp, r7
 800fb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0c:	4770      	bx	lr
 800fb0e:	bf00      	nop
 800fb10:	240339c0 	.word	0x240339c0

0800fb14 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b082      	sub	sp, #8
 800fb18:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fb1a:	f001 fcd5 	bl	80114c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800fb1e:	2300      	movs	r3, #0
 800fb20:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800fb22:	4b04      	ldr	r3, [pc, #16]	@ (800fb34 <xTaskGetTickCountFromISR+0x20>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fb28:	683b      	ldr	r3, [r7, #0]
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3708      	adds	r7, #8
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}
 800fb32:	bf00      	nop
 800fb34:	240339c0 	.word	0x240339c0

0800fb38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b086      	sub	sp, #24
 800fb3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb42:	4b4f      	ldr	r3, [pc, #316]	@ (800fc80 <xTaskIncrementTick+0x148>)
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	f040 8090 	bne.w	800fc6c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fb4c:	4b4d      	ldr	r3, [pc, #308]	@ (800fc84 <xTaskIncrementTick+0x14c>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	3301      	adds	r3, #1
 800fb52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fb54:	4a4b      	ldr	r2, [pc, #300]	@ (800fc84 <xTaskIncrementTick+0x14c>)
 800fb56:	693b      	ldr	r3, [r7, #16]
 800fb58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fb5a:	693b      	ldr	r3, [r7, #16]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d121      	bne.n	800fba4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800fb60:	4b49      	ldr	r3, [pc, #292]	@ (800fc88 <xTaskIncrementTick+0x150>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d00b      	beq.n	800fb82 <xTaskIncrementTick+0x4a>
	__asm volatile
 800fb6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb6e:	f383 8811 	msr	BASEPRI, r3
 800fb72:	f3bf 8f6f 	isb	sy
 800fb76:	f3bf 8f4f 	dsb	sy
 800fb7a:	603b      	str	r3, [r7, #0]
}
 800fb7c:	bf00      	nop
 800fb7e:	bf00      	nop
 800fb80:	e7fd      	b.n	800fb7e <xTaskIncrementTick+0x46>
 800fb82:	4b41      	ldr	r3, [pc, #260]	@ (800fc88 <xTaskIncrementTick+0x150>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	60fb      	str	r3, [r7, #12]
 800fb88:	4b40      	ldr	r3, [pc, #256]	@ (800fc8c <xTaskIncrementTick+0x154>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	4a3e      	ldr	r2, [pc, #248]	@ (800fc88 <xTaskIncrementTick+0x150>)
 800fb8e:	6013      	str	r3, [r2, #0]
 800fb90:	4a3e      	ldr	r2, [pc, #248]	@ (800fc8c <xTaskIncrementTick+0x154>)
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	6013      	str	r3, [r2, #0]
 800fb96:	4b3e      	ldr	r3, [pc, #248]	@ (800fc90 <xTaskIncrementTick+0x158>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	3301      	adds	r3, #1
 800fb9c:	4a3c      	ldr	r2, [pc, #240]	@ (800fc90 <xTaskIncrementTick+0x158>)
 800fb9e:	6013      	str	r3, [r2, #0]
 800fba0:	f000 fb0a 	bl	80101b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fba4:	4b3b      	ldr	r3, [pc, #236]	@ (800fc94 <xTaskIncrementTick+0x15c>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	693a      	ldr	r2, [r7, #16]
 800fbaa:	429a      	cmp	r2, r3
 800fbac:	d349      	bcc.n	800fc42 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fbae:	4b36      	ldr	r3, [pc, #216]	@ (800fc88 <xTaskIncrementTick+0x150>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d104      	bne.n	800fbc2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fbb8:	4b36      	ldr	r3, [pc, #216]	@ (800fc94 <xTaskIncrementTick+0x15c>)
 800fbba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fbbe:	601a      	str	r2, [r3, #0]
					break;
 800fbc0:	e03f      	b.n	800fc42 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbc2:	4b31      	ldr	r3, [pc, #196]	@ (800fc88 <xTaskIncrementTick+0x150>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	68db      	ldr	r3, [r3, #12]
 800fbc8:	68db      	ldr	r3, [r3, #12]
 800fbca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fbcc:	68bb      	ldr	r3, [r7, #8]
 800fbce:	685b      	ldr	r3, [r3, #4]
 800fbd0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fbd2:	693a      	ldr	r2, [r7, #16]
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	429a      	cmp	r2, r3
 800fbd8:	d203      	bcs.n	800fbe2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fbda:	4a2e      	ldr	r2, [pc, #184]	@ (800fc94 <xTaskIncrementTick+0x15c>)
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fbe0:	e02f      	b.n	800fc42 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	3304      	adds	r3, #4
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7fe fd34 	bl	800e654 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d004      	beq.n	800fbfe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	3318      	adds	r3, #24
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	f7fe fd2b 	bl	800e654 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fbfe:	68bb      	ldr	r3, [r7, #8]
 800fc00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc02:	4b25      	ldr	r3, [pc, #148]	@ (800fc98 <xTaskIncrementTick+0x160>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	429a      	cmp	r2, r3
 800fc08:	d903      	bls.n	800fc12 <xTaskIncrementTick+0xda>
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc0e:	4a22      	ldr	r2, [pc, #136]	@ (800fc98 <xTaskIncrementTick+0x160>)
 800fc10:	6013      	str	r3, [r2, #0]
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc16:	4613      	mov	r3, r2
 800fc18:	009b      	lsls	r3, r3, #2
 800fc1a:	4413      	add	r3, r2
 800fc1c:	009b      	lsls	r3, r3, #2
 800fc1e:	4a1f      	ldr	r2, [pc, #124]	@ (800fc9c <xTaskIncrementTick+0x164>)
 800fc20:	441a      	add	r2, r3
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	3304      	adds	r3, #4
 800fc26:	4619      	mov	r1, r3
 800fc28:	4610      	mov	r0, r2
 800fc2a:	f7fe fcb6 	bl	800e59a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc32:	4b1b      	ldr	r3, [pc, #108]	@ (800fca0 <xTaskIncrementTick+0x168>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc38:	429a      	cmp	r2, r3
 800fc3a:	d3b8      	bcc.n	800fbae <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800fc3c:	2301      	movs	r3, #1
 800fc3e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fc40:	e7b5      	b.n	800fbae <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fc42:	4b17      	ldr	r3, [pc, #92]	@ (800fca0 <xTaskIncrementTick+0x168>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc48:	4914      	ldr	r1, [pc, #80]	@ (800fc9c <xTaskIncrementTick+0x164>)
 800fc4a:	4613      	mov	r3, r2
 800fc4c:	009b      	lsls	r3, r3, #2
 800fc4e:	4413      	add	r3, r2
 800fc50:	009b      	lsls	r3, r3, #2
 800fc52:	440b      	add	r3, r1
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	2b01      	cmp	r3, #1
 800fc58:	d901      	bls.n	800fc5e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800fc5a:	2301      	movs	r3, #1
 800fc5c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fc5e:	4b11      	ldr	r3, [pc, #68]	@ (800fca4 <xTaskIncrementTick+0x16c>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d007      	beq.n	800fc76 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800fc66:	2301      	movs	r3, #1
 800fc68:	617b      	str	r3, [r7, #20]
 800fc6a:	e004      	b.n	800fc76 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fc6c:	4b0e      	ldr	r3, [pc, #56]	@ (800fca8 <xTaskIncrementTick+0x170>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	3301      	adds	r3, #1
 800fc72:	4a0d      	ldr	r2, [pc, #52]	@ (800fca8 <xTaskIncrementTick+0x170>)
 800fc74:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fc76:	697b      	ldr	r3, [r7, #20]
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	3718      	adds	r7, #24
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}
 800fc80:	240339e4 	.word	0x240339e4
 800fc84:	240339c0 	.word	0x240339c0
 800fc88:	24033974 	.word	0x24033974
 800fc8c:	24033978 	.word	0x24033978
 800fc90:	240339d4 	.word	0x240339d4
 800fc94:	240339dc 	.word	0x240339dc
 800fc98:	240339c4 	.word	0x240339c4
 800fc9c:	240334ec 	.word	0x240334ec
 800fca0:	240334e8 	.word	0x240334e8
 800fca4:	240339d0 	.word	0x240339d0
 800fca8:	240339cc 	.word	0x240339cc

0800fcac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fcac:	b480      	push	{r7}
 800fcae:	b085      	sub	sp, #20
 800fcb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fcb2:	4b2b      	ldr	r3, [pc, #172]	@ (800fd60 <vTaskSwitchContext+0xb4>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d003      	beq.n	800fcc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fcba:	4b2a      	ldr	r3, [pc, #168]	@ (800fd64 <vTaskSwitchContext+0xb8>)
 800fcbc:	2201      	movs	r2, #1
 800fcbe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fcc0:	e047      	b.n	800fd52 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800fcc2:	4b28      	ldr	r3, [pc, #160]	@ (800fd64 <vTaskSwitchContext+0xb8>)
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcc8:	4b27      	ldr	r3, [pc, #156]	@ (800fd68 <vTaskSwitchContext+0xbc>)
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	60fb      	str	r3, [r7, #12]
 800fcce:	e011      	b.n	800fcf4 <vTaskSwitchContext+0x48>
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d10b      	bne.n	800fcee <vTaskSwitchContext+0x42>
	__asm volatile
 800fcd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcda:	f383 8811 	msr	BASEPRI, r3
 800fcde:	f3bf 8f6f 	isb	sy
 800fce2:	f3bf 8f4f 	dsb	sy
 800fce6:	607b      	str	r3, [r7, #4]
}
 800fce8:	bf00      	nop
 800fcea:	bf00      	nop
 800fcec:	e7fd      	b.n	800fcea <vTaskSwitchContext+0x3e>
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	3b01      	subs	r3, #1
 800fcf2:	60fb      	str	r3, [r7, #12]
 800fcf4:	491d      	ldr	r1, [pc, #116]	@ (800fd6c <vTaskSwitchContext+0xc0>)
 800fcf6:	68fa      	ldr	r2, [r7, #12]
 800fcf8:	4613      	mov	r3, r2
 800fcfa:	009b      	lsls	r3, r3, #2
 800fcfc:	4413      	add	r3, r2
 800fcfe:	009b      	lsls	r3, r3, #2
 800fd00:	440b      	add	r3, r1
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d0e3      	beq.n	800fcd0 <vTaskSwitchContext+0x24>
 800fd08:	68fa      	ldr	r2, [r7, #12]
 800fd0a:	4613      	mov	r3, r2
 800fd0c:	009b      	lsls	r3, r3, #2
 800fd0e:	4413      	add	r3, r2
 800fd10:	009b      	lsls	r3, r3, #2
 800fd12:	4a16      	ldr	r2, [pc, #88]	@ (800fd6c <vTaskSwitchContext+0xc0>)
 800fd14:	4413      	add	r3, r2
 800fd16:	60bb      	str	r3, [r7, #8]
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	685b      	ldr	r3, [r3, #4]
 800fd1c:	685a      	ldr	r2, [r3, #4]
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	605a      	str	r2, [r3, #4]
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	685a      	ldr	r2, [r3, #4]
 800fd26:	68bb      	ldr	r3, [r7, #8]
 800fd28:	3308      	adds	r3, #8
 800fd2a:	429a      	cmp	r2, r3
 800fd2c:	d104      	bne.n	800fd38 <vTaskSwitchContext+0x8c>
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	685b      	ldr	r3, [r3, #4]
 800fd32:	685a      	ldr	r2, [r3, #4]
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	605a      	str	r2, [r3, #4]
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	685b      	ldr	r3, [r3, #4]
 800fd3c:	68db      	ldr	r3, [r3, #12]
 800fd3e:	4a0c      	ldr	r2, [pc, #48]	@ (800fd70 <vTaskSwitchContext+0xc4>)
 800fd40:	6013      	str	r3, [r2, #0]
 800fd42:	4a09      	ldr	r2, [pc, #36]	@ (800fd68 <vTaskSwitchContext+0xbc>)
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fd48:	4b09      	ldr	r3, [pc, #36]	@ (800fd70 <vTaskSwitchContext+0xc4>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	3354      	adds	r3, #84	@ 0x54
 800fd4e:	4a09      	ldr	r2, [pc, #36]	@ (800fd74 <vTaskSwitchContext+0xc8>)
 800fd50:	6013      	str	r3, [r2, #0]
}
 800fd52:	bf00      	nop
 800fd54:	3714      	adds	r7, #20
 800fd56:	46bd      	mov	sp, r7
 800fd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5c:	4770      	bx	lr
 800fd5e:	bf00      	nop
 800fd60:	240339e4 	.word	0x240339e4
 800fd64:	240339d0 	.word	0x240339d0
 800fd68:	240339c4 	.word	0x240339c4
 800fd6c:	240334ec 	.word	0x240334ec
 800fd70:	240334e8 	.word	0x240334e8
 800fd74:	240012bc 	.word	0x240012bc

0800fd78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b084      	sub	sp, #16
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
 800fd80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d10b      	bne.n	800fda0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800fd88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd8c:	f383 8811 	msr	BASEPRI, r3
 800fd90:	f3bf 8f6f 	isb	sy
 800fd94:	f3bf 8f4f 	dsb	sy
 800fd98:	60fb      	str	r3, [r7, #12]
}
 800fd9a:	bf00      	nop
 800fd9c:	bf00      	nop
 800fd9e:	e7fd      	b.n	800fd9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fda0:	4b07      	ldr	r3, [pc, #28]	@ (800fdc0 <vTaskPlaceOnEventList+0x48>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	3318      	adds	r3, #24
 800fda6:	4619      	mov	r1, r3
 800fda8:	6878      	ldr	r0, [r7, #4]
 800fdaa:	f7fe fc1a 	bl	800e5e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fdae:	2101      	movs	r1, #1
 800fdb0:	6838      	ldr	r0, [r7, #0]
 800fdb2:	f000 fdc7 	bl	8010944 <prvAddCurrentTaskToDelayedList>
}
 800fdb6:	bf00      	nop
 800fdb8:	3710      	adds	r7, #16
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}
 800fdbe:	bf00      	nop
 800fdc0:	240334e8 	.word	0x240334e8

0800fdc4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b086      	sub	sp, #24
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	60f8      	str	r0, [r7, #12]
 800fdcc:	60b9      	str	r1, [r7, #8]
 800fdce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d10b      	bne.n	800fdee <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800fdd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdda:	f383 8811 	msr	BASEPRI, r3
 800fdde:	f3bf 8f6f 	isb	sy
 800fde2:	f3bf 8f4f 	dsb	sy
 800fde6:	617b      	str	r3, [r7, #20]
}
 800fde8:	bf00      	nop
 800fdea:	bf00      	nop
 800fdec:	e7fd      	b.n	800fdea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fdee:	4b0a      	ldr	r3, [pc, #40]	@ (800fe18 <vTaskPlaceOnEventListRestricted+0x54>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	3318      	adds	r3, #24
 800fdf4:	4619      	mov	r1, r3
 800fdf6:	68f8      	ldr	r0, [r7, #12]
 800fdf8:	f7fe fbcf 	bl	800e59a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d002      	beq.n	800fe08 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800fe02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fe06:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fe08:	6879      	ldr	r1, [r7, #4]
 800fe0a:	68b8      	ldr	r0, [r7, #8]
 800fe0c:	f000 fd9a 	bl	8010944 <prvAddCurrentTaskToDelayedList>
	}
 800fe10:	bf00      	nop
 800fe12:	3718      	adds	r7, #24
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}
 800fe18:	240334e8 	.word	0x240334e8

0800fe1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b086      	sub	sp, #24
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	68db      	ldr	r3, [r3, #12]
 800fe28:	68db      	ldr	r3, [r3, #12]
 800fe2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fe2c:	693b      	ldr	r3, [r7, #16]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d10b      	bne.n	800fe4a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800fe32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe36:	f383 8811 	msr	BASEPRI, r3
 800fe3a:	f3bf 8f6f 	isb	sy
 800fe3e:	f3bf 8f4f 	dsb	sy
 800fe42:	60fb      	str	r3, [r7, #12]
}
 800fe44:	bf00      	nop
 800fe46:	bf00      	nop
 800fe48:	e7fd      	b.n	800fe46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fe4a:	693b      	ldr	r3, [r7, #16]
 800fe4c:	3318      	adds	r3, #24
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f7fe fc00 	bl	800e654 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe54:	4b1d      	ldr	r3, [pc, #116]	@ (800fecc <xTaskRemoveFromEventList+0xb0>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d11d      	bne.n	800fe98 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fe5c:	693b      	ldr	r3, [r7, #16]
 800fe5e:	3304      	adds	r3, #4
 800fe60:	4618      	mov	r0, r3
 800fe62:	f7fe fbf7 	bl	800e654 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fe66:	693b      	ldr	r3, [r7, #16]
 800fe68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe6a:	4b19      	ldr	r3, [pc, #100]	@ (800fed0 <xTaskRemoveFromEventList+0xb4>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	429a      	cmp	r2, r3
 800fe70:	d903      	bls.n	800fe7a <xTaskRemoveFromEventList+0x5e>
 800fe72:	693b      	ldr	r3, [r7, #16]
 800fe74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe76:	4a16      	ldr	r2, [pc, #88]	@ (800fed0 <xTaskRemoveFromEventList+0xb4>)
 800fe78:	6013      	str	r3, [r2, #0]
 800fe7a:	693b      	ldr	r3, [r7, #16]
 800fe7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe7e:	4613      	mov	r3, r2
 800fe80:	009b      	lsls	r3, r3, #2
 800fe82:	4413      	add	r3, r2
 800fe84:	009b      	lsls	r3, r3, #2
 800fe86:	4a13      	ldr	r2, [pc, #76]	@ (800fed4 <xTaskRemoveFromEventList+0xb8>)
 800fe88:	441a      	add	r2, r3
 800fe8a:	693b      	ldr	r3, [r7, #16]
 800fe8c:	3304      	adds	r3, #4
 800fe8e:	4619      	mov	r1, r3
 800fe90:	4610      	mov	r0, r2
 800fe92:	f7fe fb82 	bl	800e59a <vListInsertEnd>
 800fe96:	e005      	b.n	800fea4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fe98:	693b      	ldr	r3, [r7, #16]
 800fe9a:	3318      	adds	r3, #24
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	480e      	ldr	r0, [pc, #56]	@ (800fed8 <xTaskRemoveFromEventList+0xbc>)
 800fea0:	f7fe fb7b 	bl	800e59a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fea8:	4b0c      	ldr	r3, [pc, #48]	@ (800fedc <xTaskRemoveFromEventList+0xc0>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800feae:	429a      	cmp	r2, r3
 800feb0:	d905      	bls.n	800febe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800feb2:	2301      	movs	r3, #1
 800feb4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800feb6:	4b0a      	ldr	r3, [pc, #40]	@ (800fee0 <xTaskRemoveFromEventList+0xc4>)
 800feb8:	2201      	movs	r2, #1
 800feba:	601a      	str	r2, [r3, #0]
 800febc:	e001      	b.n	800fec2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800febe:	2300      	movs	r3, #0
 800fec0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fec2:	697b      	ldr	r3, [r7, #20]
}
 800fec4:	4618      	mov	r0, r3
 800fec6:	3718      	adds	r7, #24
 800fec8:	46bd      	mov	sp, r7
 800feca:	bd80      	pop	{r7, pc}
 800fecc:	240339e4 	.word	0x240339e4
 800fed0:	240339c4 	.word	0x240339c4
 800fed4:	240334ec 	.word	0x240334ec
 800fed8:	2403397c 	.word	0x2403397c
 800fedc:	240334e8 	.word	0x240334e8
 800fee0:	240339d0 	.word	0x240339d0

0800fee4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b084      	sub	sp, #16
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d10b      	bne.n	800ff0a <vTaskSetTimeOutState+0x26>
	__asm volatile
 800fef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fef6:	f383 8811 	msr	BASEPRI, r3
 800fefa:	f3bf 8f6f 	isb	sy
 800fefe:	f3bf 8f4f 	dsb	sy
 800ff02:	60fb      	str	r3, [r7, #12]
}
 800ff04:	bf00      	nop
 800ff06:	bf00      	nop
 800ff08:	e7fd      	b.n	800ff06 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800ff0a:	f001 f9fd 	bl	8011308 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ff0e:	4b07      	ldr	r3, [pc, #28]	@ (800ff2c <vTaskSetTimeOutState+0x48>)
 800ff10:	681a      	ldr	r2, [r3, #0]
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800ff16:	4b06      	ldr	r3, [pc, #24]	@ (800ff30 <vTaskSetTimeOutState+0x4c>)
 800ff18:	681a      	ldr	r2, [r3, #0]
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800ff1e:	f001 fa25 	bl	801136c <vPortExitCritical>
}
 800ff22:	bf00      	nop
 800ff24:	3710      	adds	r7, #16
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}
 800ff2a:	bf00      	nop
 800ff2c:	240339d4 	.word	0x240339d4
 800ff30:	240339c0 	.word	0x240339c0

0800ff34 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ff34:	b480      	push	{r7}
 800ff36:	b083      	sub	sp, #12
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ff3c:	4b06      	ldr	r3, [pc, #24]	@ (800ff58 <vTaskInternalSetTimeOutState+0x24>)
 800ff3e:	681a      	ldr	r2, [r3, #0]
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ff44:	4b05      	ldr	r3, [pc, #20]	@ (800ff5c <vTaskInternalSetTimeOutState+0x28>)
 800ff46:	681a      	ldr	r2, [r3, #0]
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	605a      	str	r2, [r3, #4]
}
 800ff4c:	bf00      	nop
 800ff4e:	370c      	adds	r7, #12
 800ff50:	46bd      	mov	sp, r7
 800ff52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff56:	4770      	bx	lr
 800ff58:	240339d4 	.word	0x240339d4
 800ff5c:	240339c0 	.word	0x240339c0

0800ff60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b088      	sub	sp, #32
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
 800ff68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d10b      	bne.n	800ff88 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ff70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff74:	f383 8811 	msr	BASEPRI, r3
 800ff78:	f3bf 8f6f 	isb	sy
 800ff7c:	f3bf 8f4f 	dsb	sy
 800ff80:	613b      	str	r3, [r7, #16]
}
 800ff82:	bf00      	nop
 800ff84:	bf00      	nop
 800ff86:	e7fd      	b.n	800ff84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d10b      	bne.n	800ffa6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ff8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff92:	f383 8811 	msr	BASEPRI, r3
 800ff96:	f3bf 8f6f 	isb	sy
 800ff9a:	f3bf 8f4f 	dsb	sy
 800ff9e:	60fb      	str	r3, [r7, #12]
}
 800ffa0:	bf00      	nop
 800ffa2:	bf00      	nop
 800ffa4:	e7fd      	b.n	800ffa2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ffa6:	f001 f9af 	bl	8011308 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ffaa:	4b1d      	ldr	r3, [pc, #116]	@ (8010020 <xTaskCheckForTimeOut+0xc0>)
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	685b      	ldr	r3, [r3, #4]
 800ffb4:	69ba      	ldr	r2, [r7, #24]
 800ffb6:	1ad3      	subs	r3, r2, r3
 800ffb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ffc2:	d102      	bne.n	800ffca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	61fb      	str	r3, [r7, #28]
 800ffc8:	e023      	b.n	8010012 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681a      	ldr	r2, [r3, #0]
 800ffce:	4b15      	ldr	r3, [pc, #84]	@ (8010024 <xTaskCheckForTimeOut+0xc4>)
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	429a      	cmp	r2, r3
 800ffd4:	d007      	beq.n	800ffe6 <xTaskCheckForTimeOut+0x86>
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	685b      	ldr	r3, [r3, #4]
 800ffda:	69ba      	ldr	r2, [r7, #24]
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	d302      	bcc.n	800ffe6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ffe0:	2301      	movs	r3, #1
 800ffe2:	61fb      	str	r3, [r7, #28]
 800ffe4:	e015      	b.n	8010012 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	697a      	ldr	r2, [r7, #20]
 800ffec:	429a      	cmp	r2, r3
 800ffee:	d20b      	bcs.n	8010008 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	681a      	ldr	r2, [r3, #0]
 800fff4:	697b      	ldr	r3, [r7, #20]
 800fff6:	1ad2      	subs	r2, r2, r3
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f7ff ff99 	bl	800ff34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010002:	2300      	movs	r3, #0
 8010004:	61fb      	str	r3, [r7, #28]
 8010006:	e004      	b.n	8010012 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	2200      	movs	r2, #0
 801000c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801000e:	2301      	movs	r3, #1
 8010010:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010012:	f001 f9ab 	bl	801136c <vPortExitCritical>

	return xReturn;
 8010016:	69fb      	ldr	r3, [r7, #28]
}
 8010018:	4618      	mov	r0, r3
 801001a:	3720      	adds	r7, #32
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}
 8010020:	240339c0 	.word	0x240339c0
 8010024:	240339d4 	.word	0x240339d4

08010028 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010028:	b480      	push	{r7}
 801002a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801002c:	4b03      	ldr	r3, [pc, #12]	@ (801003c <vTaskMissedYield+0x14>)
 801002e:	2201      	movs	r2, #1
 8010030:	601a      	str	r2, [r3, #0]
}
 8010032:	bf00      	nop
 8010034:	46bd      	mov	sp, r7
 8010036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003a:	4770      	bx	lr
 801003c:	240339d0 	.word	0x240339d0

08010040 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010040:	b580      	push	{r7, lr}
 8010042:	b082      	sub	sp, #8
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010048:	f000 f852 	bl	80100f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801004c:	4b06      	ldr	r3, [pc, #24]	@ (8010068 <prvIdleTask+0x28>)
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	2b01      	cmp	r3, #1
 8010052:	d9f9      	bls.n	8010048 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010054:	4b05      	ldr	r3, [pc, #20]	@ (801006c <prvIdleTask+0x2c>)
 8010056:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801005a:	601a      	str	r2, [r3, #0]
 801005c:	f3bf 8f4f 	dsb	sy
 8010060:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010064:	e7f0      	b.n	8010048 <prvIdleTask+0x8>
 8010066:	bf00      	nop
 8010068:	240334ec 	.word	0x240334ec
 801006c:	e000ed04 	.word	0xe000ed04

08010070 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010076:	2300      	movs	r3, #0
 8010078:	607b      	str	r3, [r7, #4]
 801007a:	e00c      	b.n	8010096 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801007c:	687a      	ldr	r2, [r7, #4]
 801007e:	4613      	mov	r3, r2
 8010080:	009b      	lsls	r3, r3, #2
 8010082:	4413      	add	r3, r2
 8010084:	009b      	lsls	r3, r3, #2
 8010086:	4a12      	ldr	r2, [pc, #72]	@ (80100d0 <prvInitialiseTaskLists+0x60>)
 8010088:	4413      	add	r3, r2
 801008a:	4618      	mov	r0, r3
 801008c:	f7fe fa58 	bl	800e540 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	3301      	adds	r3, #1
 8010094:	607b      	str	r3, [r7, #4]
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2b37      	cmp	r3, #55	@ 0x37
 801009a:	d9ef      	bls.n	801007c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801009c:	480d      	ldr	r0, [pc, #52]	@ (80100d4 <prvInitialiseTaskLists+0x64>)
 801009e:	f7fe fa4f 	bl	800e540 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80100a2:	480d      	ldr	r0, [pc, #52]	@ (80100d8 <prvInitialiseTaskLists+0x68>)
 80100a4:	f7fe fa4c 	bl	800e540 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80100a8:	480c      	ldr	r0, [pc, #48]	@ (80100dc <prvInitialiseTaskLists+0x6c>)
 80100aa:	f7fe fa49 	bl	800e540 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80100ae:	480c      	ldr	r0, [pc, #48]	@ (80100e0 <prvInitialiseTaskLists+0x70>)
 80100b0:	f7fe fa46 	bl	800e540 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80100b4:	480b      	ldr	r0, [pc, #44]	@ (80100e4 <prvInitialiseTaskLists+0x74>)
 80100b6:	f7fe fa43 	bl	800e540 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80100ba:	4b0b      	ldr	r3, [pc, #44]	@ (80100e8 <prvInitialiseTaskLists+0x78>)
 80100bc:	4a05      	ldr	r2, [pc, #20]	@ (80100d4 <prvInitialiseTaskLists+0x64>)
 80100be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80100c0:	4b0a      	ldr	r3, [pc, #40]	@ (80100ec <prvInitialiseTaskLists+0x7c>)
 80100c2:	4a05      	ldr	r2, [pc, #20]	@ (80100d8 <prvInitialiseTaskLists+0x68>)
 80100c4:	601a      	str	r2, [r3, #0]
}
 80100c6:	bf00      	nop
 80100c8:	3708      	adds	r7, #8
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}
 80100ce:	bf00      	nop
 80100d0:	240334ec 	.word	0x240334ec
 80100d4:	2403394c 	.word	0x2403394c
 80100d8:	24033960 	.word	0x24033960
 80100dc:	2403397c 	.word	0x2403397c
 80100e0:	24033990 	.word	0x24033990
 80100e4:	240339a8 	.word	0x240339a8
 80100e8:	24033974 	.word	0x24033974
 80100ec:	24033978 	.word	0x24033978

080100f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b082      	sub	sp, #8
 80100f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80100f6:	e019      	b.n	801012c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80100f8:	f001 f906 	bl	8011308 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100fc:	4b10      	ldr	r3, [pc, #64]	@ (8010140 <prvCheckTasksWaitingTermination+0x50>)
 80100fe:	68db      	ldr	r3, [r3, #12]
 8010100:	68db      	ldr	r3, [r3, #12]
 8010102:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	3304      	adds	r3, #4
 8010108:	4618      	mov	r0, r3
 801010a:	f7fe faa3 	bl	800e654 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801010e:	4b0d      	ldr	r3, [pc, #52]	@ (8010144 <prvCheckTasksWaitingTermination+0x54>)
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	3b01      	subs	r3, #1
 8010114:	4a0b      	ldr	r2, [pc, #44]	@ (8010144 <prvCheckTasksWaitingTermination+0x54>)
 8010116:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010118:	4b0b      	ldr	r3, [pc, #44]	@ (8010148 <prvCheckTasksWaitingTermination+0x58>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	3b01      	subs	r3, #1
 801011e:	4a0a      	ldr	r2, [pc, #40]	@ (8010148 <prvCheckTasksWaitingTermination+0x58>)
 8010120:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010122:	f001 f923 	bl	801136c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	f000 f810 	bl	801014c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801012c:	4b06      	ldr	r3, [pc, #24]	@ (8010148 <prvCheckTasksWaitingTermination+0x58>)
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d1e1      	bne.n	80100f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010134:	bf00      	nop
 8010136:	bf00      	nop
 8010138:	3708      	adds	r7, #8
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}
 801013e:	bf00      	nop
 8010140:	24033990 	.word	0x24033990
 8010144:	240339bc 	.word	0x240339bc
 8010148:	240339a4 	.word	0x240339a4

0801014c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801014c:	b580      	push	{r7, lr}
 801014e:	b084      	sub	sp, #16
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	3354      	adds	r3, #84	@ 0x54
 8010158:	4618      	mov	r0, r3
 801015a:	f012 f887 	bl	802226c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010164:	2b00      	cmp	r3, #0
 8010166:	d108      	bne.n	801017a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801016c:	4618      	mov	r0, r3
 801016e:	f001 fabb 	bl	80116e8 <vPortFree>
				vPortFree( pxTCB );
 8010172:	6878      	ldr	r0, [r7, #4]
 8010174:	f001 fab8 	bl	80116e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010178:	e019      	b.n	80101ae <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010180:	2b01      	cmp	r3, #1
 8010182:	d103      	bne.n	801018c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f001 faaf 	bl	80116e8 <vPortFree>
	}
 801018a:	e010      	b.n	80101ae <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010192:	2b02      	cmp	r3, #2
 8010194:	d00b      	beq.n	80101ae <prvDeleteTCB+0x62>
	__asm volatile
 8010196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801019a:	f383 8811 	msr	BASEPRI, r3
 801019e:	f3bf 8f6f 	isb	sy
 80101a2:	f3bf 8f4f 	dsb	sy
 80101a6:	60fb      	str	r3, [r7, #12]
}
 80101a8:	bf00      	nop
 80101aa:	bf00      	nop
 80101ac:	e7fd      	b.n	80101aa <prvDeleteTCB+0x5e>
	}
 80101ae:	bf00      	nop
 80101b0:	3710      	adds	r7, #16
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bd80      	pop	{r7, pc}
	...

080101b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80101b8:	b480      	push	{r7}
 80101ba:	b083      	sub	sp, #12
 80101bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80101be:	4b0c      	ldr	r3, [pc, #48]	@ (80101f0 <prvResetNextTaskUnblockTime+0x38>)
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d104      	bne.n	80101d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80101c8:	4b0a      	ldr	r3, [pc, #40]	@ (80101f4 <prvResetNextTaskUnblockTime+0x3c>)
 80101ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80101ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80101d0:	e008      	b.n	80101e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101d2:	4b07      	ldr	r3, [pc, #28]	@ (80101f0 <prvResetNextTaskUnblockTime+0x38>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	68db      	ldr	r3, [r3, #12]
 80101d8:	68db      	ldr	r3, [r3, #12]
 80101da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	685b      	ldr	r3, [r3, #4]
 80101e0:	4a04      	ldr	r2, [pc, #16]	@ (80101f4 <prvResetNextTaskUnblockTime+0x3c>)
 80101e2:	6013      	str	r3, [r2, #0]
}
 80101e4:	bf00      	nop
 80101e6:	370c      	adds	r7, #12
 80101e8:	46bd      	mov	sp, r7
 80101ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ee:	4770      	bx	lr
 80101f0:	24033974 	.word	0x24033974
 80101f4:	240339dc 	.word	0x240339dc

080101f8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80101f8:	b480      	push	{r7}
 80101fa:	b083      	sub	sp, #12
 80101fc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80101fe:	4b05      	ldr	r3, [pc, #20]	@ (8010214 <xTaskGetCurrentTaskHandle+0x1c>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	607b      	str	r3, [r7, #4]

		return xReturn;
 8010204:	687b      	ldr	r3, [r7, #4]
	}
 8010206:	4618      	mov	r0, r3
 8010208:	370c      	adds	r7, #12
 801020a:	46bd      	mov	sp, r7
 801020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010210:	4770      	bx	lr
 8010212:	bf00      	nop
 8010214:	240334e8 	.word	0x240334e8

08010218 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010218:	b480      	push	{r7}
 801021a:	b083      	sub	sp, #12
 801021c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801021e:	4b0b      	ldr	r3, [pc, #44]	@ (801024c <xTaskGetSchedulerState+0x34>)
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d102      	bne.n	801022c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010226:	2301      	movs	r3, #1
 8010228:	607b      	str	r3, [r7, #4]
 801022a:	e008      	b.n	801023e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801022c:	4b08      	ldr	r3, [pc, #32]	@ (8010250 <xTaskGetSchedulerState+0x38>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d102      	bne.n	801023a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010234:	2302      	movs	r3, #2
 8010236:	607b      	str	r3, [r7, #4]
 8010238:	e001      	b.n	801023e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801023a:	2300      	movs	r3, #0
 801023c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801023e:	687b      	ldr	r3, [r7, #4]
	}
 8010240:	4618      	mov	r0, r3
 8010242:	370c      	adds	r7, #12
 8010244:	46bd      	mov	sp, r7
 8010246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024a:	4770      	bx	lr
 801024c:	240339c8 	.word	0x240339c8
 8010250:	240339e4 	.word	0x240339e4

08010254 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010254:	b580      	push	{r7, lr}
 8010256:	b084      	sub	sp, #16
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010260:	2300      	movs	r3, #0
 8010262:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d051      	beq.n	801030e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801026e:	4b2a      	ldr	r3, [pc, #168]	@ (8010318 <xTaskPriorityInherit+0xc4>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010274:	429a      	cmp	r2, r3
 8010276:	d241      	bcs.n	80102fc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010278:	68bb      	ldr	r3, [r7, #8]
 801027a:	699b      	ldr	r3, [r3, #24]
 801027c:	2b00      	cmp	r3, #0
 801027e:	db06      	blt.n	801028e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010280:	4b25      	ldr	r3, [pc, #148]	@ (8010318 <xTaskPriorityInherit+0xc4>)
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010286:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801028a:	68bb      	ldr	r3, [r7, #8]
 801028c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	6959      	ldr	r1, [r3, #20]
 8010292:	68bb      	ldr	r3, [r7, #8]
 8010294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010296:	4613      	mov	r3, r2
 8010298:	009b      	lsls	r3, r3, #2
 801029a:	4413      	add	r3, r2
 801029c:	009b      	lsls	r3, r3, #2
 801029e:	4a1f      	ldr	r2, [pc, #124]	@ (801031c <xTaskPriorityInherit+0xc8>)
 80102a0:	4413      	add	r3, r2
 80102a2:	4299      	cmp	r1, r3
 80102a4:	d122      	bne.n	80102ec <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80102a6:	68bb      	ldr	r3, [r7, #8]
 80102a8:	3304      	adds	r3, #4
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7fe f9d2 	bl	800e654 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80102b0:	4b19      	ldr	r3, [pc, #100]	@ (8010318 <xTaskPriorityInherit+0xc4>)
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102be:	4b18      	ldr	r3, [pc, #96]	@ (8010320 <xTaskPriorityInherit+0xcc>)
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	429a      	cmp	r2, r3
 80102c4:	d903      	bls.n	80102ce <xTaskPriorityInherit+0x7a>
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102ca:	4a15      	ldr	r2, [pc, #84]	@ (8010320 <xTaskPriorityInherit+0xcc>)
 80102cc:	6013      	str	r3, [r2, #0]
 80102ce:	68bb      	ldr	r3, [r7, #8]
 80102d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102d2:	4613      	mov	r3, r2
 80102d4:	009b      	lsls	r3, r3, #2
 80102d6:	4413      	add	r3, r2
 80102d8:	009b      	lsls	r3, r3, #2
 80102da:	4a10      	ldr	r2, [pc, #64]	@ (801031c <xTaskPriorityInherit+0xc8>)
 80102dc:	441a      	add	r2, r3
 80102de:	68bb      	ldr	r3, [r7, #8]
 80102e0:	3304      	adds	r3, #4
 80102e2:	4619      	mov	r1, r3
 80102e4:	4610      	mov	r0, r2
 80102e6:	f7fe f958 	bl	800e59a <vListInsertEnd>
 80102ea:	e004      	b.n	80102f6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80102ec:	4b0a      	ldr	r3, [pc, #40]	@ (8010318 <xTaskPriorityInherit+0xc4>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102f2:	68bb      	ldr	r3, [r7, #8]
 80102f4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80102f6:	2301      	movs	r3, #1
 80102f8:	60fb      	str	r3, [r7, #12]
 80102fa:	e008      	b.n	801030e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010300:	4b05      	ldr	r3, [pc, #20]	@ (8010318 <xTaskPriorityInherit+0xc4>)
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010306:	429a      	cmp	r2, r3
 8010308:	d201      	bcs.n	801030e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801030a:	2301      	movs	r3, #1
 801030c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801030e:	68fb      	ldr	r3, [r7, #12]
	}
 8010310:	4618      	mov	r0, r3
 8010312:	3710      	adds	r7, #16
 8010314:	46bd      	mov	sp, r7
 8010316:	bd80      	pop	{r7, pc}
 8010318:	240334e8 	.word	0x240334e8
 801031c:	240334ec 	.word	0x240334ec
 8010320:	240339c4 	.word	0x240339c4

08010324 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010324:	b580      	push	{r7, lr}
 8010326:	b086      	sub	sp, #24
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010330:	2300      	movs	r3, #0
 8010332:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d058      	beq.n	80103ec <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801033a:	4b2f      	ldr	r3, [pc, #188]	@ (80103f8 <xTaskPriorityDisinherit+0xd4>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	693a      	ldr	r2, [r7, #16]
 8010340:	429a      	cmp	r2, r3
 8010342:	d00b      	beq.n	801035c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8010344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010348:	f383 8811 	msr	BASEPRI, r3
 801034c:	f3bf 8f6f 	isb	sy
 8010350:	f3bf 8f4f 	dsb	sy
 8010354:	60fb      	str	r3, [r7, #12]
}
 8010356:	bf00      	nop
 8010358:	bf00      	nop
 801035a:	e7fd      	b.n	8010358 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801035c:	693b      	ldr	r3, [r7, #16]
 801035e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010360:	2b00      	cmp	r3, #0
 8010362:	d10b      	bne.n	801037c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8010364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010368:	f383 8811 	msr	BASEPRI, r3
 801036c:	f3bf 8f6f 	isb	sy
 8010370:	f3bf 8f4f 	dsb	sy
 8010374:	60bb      	str	r3, [r7, #8]
}
 8010376:	bf00      	nop
 8010378:	bf00      	nop
 801037a:	e7fd      	b.n	8010378 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 801037c:	693b      	ldr	r3, [r7, #16]
 801037e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010380:	1e5a      	subs	r2, r3, #1
 8010382:	693b      	ldr	r3, [r7, #16]
 8010384:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010386:	693b      	ldr	r3, [r7, #16]
 8010388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801038a:	693b      	ldr	r3, [r7, #16]
 801038c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801038e:	429a      	cmp	r2, r3
 8010390:	d02c      	beq.n	80103ec <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010392:	693b      	ldr	r3, [r7, #16]
 8010394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010396:	2b00      	cmp	r3, #0
 8010398:	d128      	bne.n	80103ec <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801039a:	693b      	ldr	r3, [r7, #16]
 801039c:	3304      	adds	r3, #4
 801039e:	4618      	mov	r0, r3
 80103a0:	f7fe f958 	bl	800e654 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80103a4:	693b      	ldr	r3, [r7, #16]
 80103a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80103a8:	693b      	ldr	r3, [r7, #16]
 80103aa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80103ac:	693b      	ldr	r3, [r7, #16]
 80103ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103b0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80103b4:	693b      	ldr	r3, [r7, #16]
 80103b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80103b8:	693b      	ldr	r3, [r7, #16]
 80103ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103bc:	4b0f      	ldr	r3, [pc, #60]	@ (80103fc <xTaskPriorityDisinherit+0xd8>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d903      	bls.n	80103cc <xTaskPriorityDisinherit+0xa8>
 80103c4:	693b      	ldr	r3, [r7, #16]
 80103c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103c8:	4a0c      	ldr	r2, [pc, #48]	@ (80103fc <xTaskPriorityDisinherit+0xd8>)
 80103ca:	6013      	str	r3, [r2, #0]
 80103cc:	693b      	ldr	r3, [r7, #16]
 80103ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103d0:	4613      	mov	r3, r2
 80103d2:	009b      	lsls	r3, r3, #2
 80103d4:	4413      	add	r3, r2
 80103d6:	009b      	lsls	r3, r3, #2
 80103d8:	4a09      	ldr	r2, [pc, #36]	@ (8010400 <xTaskPriorityDisinherit+0xdc>)
 80103da:	441a      	add	r2, r3
 80103dc:	693b      	ldr	r3, [r7, #16]
 80103de:	3304      	adds	r3, #4
 80103e0:	4619      	mov	r1, r3
 80103e2:	4610      	mov	r0, r2
 80103e4:	f7fe f8d9 	bl	800e59a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80103e8:	2301      	movs	r3, #1
 80103ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80103ec:	697b      	ldr	r3, [r7, #20]
	}
 80103ee:	4618      	mov	r0, r3
 80103f0:	3718      	adds	r7, #24
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}
 80103f6:	bf00      	nop
 80103f8:	240334e8 	.word	0x240334e8
 80103fc:	240339c4 	.word	0x240339c4
 8010400:	240334ec 	.word	0x240334ec

08010404 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010404:	b580      	push	{r7, lr}
 8010406:	b088      	sub	sp, #32
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
 801040c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010412:	2301      	movs	r3, #1
 8010414:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d06c      	beq.n	80104f6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801041c:	69bb      	ldr	r3, [r7, #24]
 801041e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010420:	2b00      	cmp	r3, #0
 8010422:	d10b      	bne.n	801043c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8010424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010428:	f383 8811 	msr	BASEPRI, r3
 801042c:	f3bf 8f6f 	isb	sy
 8010430:	f3bf 8f4f 	dsb	sy
 8010434:	60fb      	str	r3, [r7, #12]
}
 8010436:	bf00      	nop
 8010438:	bf00      	nop
 801043a:	e7fd      	b.n	8010438 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801043c:	69bb      	ldr	r3, [r7, #24]
 801043e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010440:	683a      	ldr	r2, [r7, #0]
 8010442:	429a      	cmp	r2, r3
 8010444:	d902      	bls.n	801044c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	61fb      	str	r3, [r7, #28]
 801044a:	e002      	b.n	8010452 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801044c:	69bb      	ldr	r3, [r7, #24]
 801044e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010450:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010452:	69bb      	ldr	r3, [r7, #24]
 8010454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010456:	69fa      	ldr	r2, [r7, #28]
 8010458:	429a      	cmp	r2, r3
 801045a:	d04c      	beq.n	80104f6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801045c:	69bb      	ldr	r3, [r7, #24]
 801045e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010460:	697a      	ldr	r2, [r7, #20]
 8010462:	429a      	cmp	r2, r3
 8010464:	d147      	bne.n	80104f6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010466:	4b26      	ldr	r3, [pc, #152]	@ (8010500 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	69ba      	ldr	r2, [r7, #24]
 801046c:	429a      	cmp	r2, r3
 801046e:	d10b      	bne.n	8010488 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8010470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010474:	f383 8811 	msr	BASEPRI, r3
 8010478:	f3bf 8f6f 	isb	sy
 801047c:	f3bf 8f4f 	dsb	sy
 8010480:	60bb      	str	r3, [r7, #8]
}
 8010482:	bf00      	nop
 8010484:	bf00      	nop
 8010486:	e7fd      	b.n	8010484 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010488:	69bb      	ldr	r3, [r7, #24]
 801048a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801048c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801048e:	69bb      	ldr	r3, [r7, #24]
 8010490:	69fa      	ldr	r2, [r7, #28]
 8010492:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010494:	69bb      	ldr	r3, [r7, #24]
 8010496:	699b      	ldr	r3, [r3, #24]
 8010498:	2b00      	cmp	r3, #0
 801049a:	db04      	blt.n	80104a6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801049c:	69fb      	ldr	r3, [r7, #28]
 801049e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80104a2:	69bb      	ldr	r3, [r7, #24]
 80104a4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80104a6:	69bb      	ldr	r3, [r7, #24]
 80104a8:	6959      	ldr	r1, [r3, #20]
 80104aa:	693a      	ldr	r2, [r7, #16]
 80104ac:	4613      	mov	r3, r2
 80104ae:	009b      	lsls	r3, r3, #2
 80104b0:	4413      	add	r3, r2
 80104b2:	009b      	lsls	r3, r3, #2
 80104b4:	4a13      	ldr	r2, [pc, #76]	@ (8010504 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80104b6:	4413      	add	r3, r2
 80104b8:	4299      	cmp	r1, r3
 80104ba:	d11c      	bne.n	80104f6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80104bc:	69bb      	ldr	r3, [r7, #24]
 80104be:	3304      	adds	r3, #4
 80104c0:	4618      	mov	r0, r3
 80104c2:	f7fe f8c7 	bl	800e654 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80104c6:	69bb      	ldr	r3, [r7, #24]
 80104c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104ca:	4b0f      	ldr	r3, [pc, #60]	@ (8010508 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	429a      	cmp	r2, r3
 80104d0:	d903      	bls.n	80104da <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80104d2:	69bb      	ldr	r3, [r7, #24]
 80104d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104d6:	4a0c      	ldr	r2, [pc, #48]	@ (8010508 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80104d8:	6013      	str	r3, [r2, #0]
 80104da:	69bb      	ldr	r3, [r7, #24]
 80104dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104de:	4613      	mov	r3, r2
 80104e0:	009b      	lsls	r3, r3, #2
 80104e2:	4413      	add	r3, r2
 80104e4:	009b      	lsls	r3, r3, #2
 80104e6:	4a07      	ldr	r2, [pc, #28]	@ (8010504 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80104e8:	441a      	add	r2, r3
 80104ea:	69bb      	ldr	r3, [r7, #24]
 80104ec:	3304      	adds	r3, #4
 80104ee:	4619      	mov	r1, r3
 80104f0:	4610      	mov	r0, r2
 80104f2:	f7fe f852 	bl	800e59a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80104f6:	bf00      	nop
 80104f8:	3720      	adds	r7, #32
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}
 80104fe:	bf00      	nop
 8010500:	240334e8 	.word	0x240334e8
 8010504:	240334ec 	.word	0x240334ec
 8010508:	240339c4 	.word	0x240339c4

0801050c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801050c:	b480      	push	{r7}
 801050e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010510:	4b07      	ldr	r3, [pc, #28]	@ (8010530 <pvTaskIncrementMutexHeldCount+0x24>)
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d004      	beq.n	8010522 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010518:	4b05      	ldr	r3, [pc, #20]	@ (8010530 <pvTaskIncrementMutexHeldCount+0x24>)
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801051e:	3201      	adds	r2, #1
 8010520:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8010522:	4b03      	ldr	r3, [pc, #12]	@ (8010530 <pvTaskIncrementMutexHeldCount+0x24>)
 8010524:	681b      	ldr	r3, [r3, #0]
	}
 8010526:	4618      	mov	r0, r3
 8010528:	46bd      	mov	sp, r7
 801052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052e:	4770      	bx	lr
 8010530:	240334e8 	.word	0x240334e8

08010534 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8010534:	b580      	push	{r7, lr}
 8010536:	b086      	sub	sp, #24
 8010538:	af00      	add	r7, sp, #0
 801053a:	60f8      	str	r0, [r7, #12]
 801053c:	60b9      	str	r1, [r7, #8]
 801053e:	607a      	str	r2, [r7, #4]
 8010540:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8010542:	f000 fee1 	bl	8011308 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8010546:	4b29      	ldr	r3, [pc, #164]	@ (80105ec <xTaskNotifyWait+0xb8>)
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 801054e:	b2db      	uxtb	r3, r3
 8010550:	2b02      	cmp	r3, #2
 8010552:	d01c      	beq.n	801058e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8010554:	4b25      	ldr	r3, [pc, #148]	@ (80105ec <xTaskNotifyWait+0xb8>)
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 801055c:	68fa      	ldr	r2, [r7, #12]
 801055e:	43d2      	mvns	r2, r2
 8010560:	400a      	ands	r2, r1
 8010562:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8010566:	4b21      	ldr	r3, [pc, #132]	@ (80105ec <xTaskNotifyWait+0xb8>)
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	2201      	movs	r2, #1
 801056c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d00b      	beq.n	801058e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010576:	2101      	movs	r1, #1
 8010578:	6838      	ldr	r0, [r7, #0]
 801057a:	f000 f9e3 	bl	8010944 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801057e:	4b1c      	ldr	r3, [pc, #112]	@ (80105f0 <xTaskNotifyWait+0xbc>)
 8010580:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010584:	601a      	str	r2, [r3, #0]
 8010586:	f3bf 8f4f 	dsb	sy
 801058a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801058e:	f000 feed 	bl	801136c <vPortExitCritical>

		taskENTER_CRITICAL();
 8010592:	f000 feb9 	bl	8011308 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d005      	beq.n	80105a8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801059c:	4b13      	ldr	r3, [pc, #76]	@ (80105ec <xTaskNotifyWait+0xb8>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80105a8:	4b10      	ldr	r3, [pc, #64]	@ (80105ec <xTaskNotifyWait+0xb8>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80105b0:	b2db      	uxtb	r3, r3
 80105b2:	2b02      	cmp	r3, #2
 80105b4:	d002      	beq.n	80105bc <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80105b6:	2300      	movs	r3, #0
 80105b8:	617b      	str	r3, [r7, #20]
 80105ba:	e00a      	b.n	80105d2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80105bc:	4b0b      	ldr	r3, [pc, #44]	@ (80105ec <xTaskNotifyWait+0xb8>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 80105c4:	68ba      	ldr	r2, [r7, #8]
 80105c6:	43d2      	mvns	r2, r2
 80105c8:	400a      	ands	r2, r1
 80105ca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 80105ce:	2301      	movs	r3, #1
 80105d0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80105d2:	4b06      	ldr	r3, [pc, #24]	@ (80105ec <xTaskNotifyWait+0xb8>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	2200      	movs	r2, #0
 80105d8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 80105dc:	f000 fec6 	bl	801136c <vPortExitCritical>

		return xReturn;
 80105e0:	697b      	ldr	r3, [r7, #20]
	}
 80105e2:	4618      	mov	r0, r3
 80105e4:	3718      	adds	r7, #24
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}
 80105ea:	bf00      	nop
 80105ec:	240334e8 	.word	0x240334e8
 80105f0:	e000ed04 	.word	0xe000ed04

080105f4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b08a      	sub	sp, #40	@ 0x28
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	60f8      	str	r0, [r7, #12]
 80105fc:	60b9      	str	r1, [r7, #8]
 80105fe:	603b      	str	r3, [r7, #0]
 8010600:	4613      	mov	r3, r2
 8010602:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8010604:	2301      	movs	r3, #1
 8010606:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d10b      	bne.n	8010626 <xTaskGenericNotify+0x32>
	__asm volatile
 801060e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010612:	f383 8811 	msr	BASEPRI, r3
 8010616:	f3bf 8f6f 	isb	sy
 801061a:	f3bf 8f4f 	dsb	sy
 801061e:	61bb      	str	r3, [r7, #24]
}
 8010620:	bf00      	nop
 8010622:	bf00      	nop
 8010624:	e7fd      	b.n	8010622 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801062a:	f000 fe6d 	bl	8011308 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d004      	beq.n	801063e <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010634:	6a3b      	ldr	r3, [r7, #32]
 8010636:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801063e:	6a3b      	ldr	r3, [r7, #32]
 8010640:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8010644:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010646:	6a3b      	ldr	r3, [r7, #32]
 8010648:	2202      	movs	r2, #2
 801064a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 801064e:	79fb      	ldrb	r3, [r7, #7]
 8010650:	2b04      	cmp	r3, #4
 8010652:	d82e      	bhi.n	80106b2 <xTaskGenericNotify+0xbe>
 8010654:	a201      	add	r2, pc, #4	@ (adr r2, 801065c <xTaskGenericNotify+0x68>)
 8010656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801065a:	bf00      	nop
 801065c:	080106d7 	.word	0x080106d7
 8010660:	08010671 	.word	0x08010671
 8010664:	08010683 	.word	0x08010683
 8010668:	08010693 	.word	0x08010693
 801066c:	0801069d 	.word	0x0801069d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010670:	6a3b      	ldr	r3, [r7, #32]
 8010672:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8010676:	68bb      	ldr	r3, [r7, #8]
 8010678:	431a      	orrs	r2, r3
 801067a:	6a3b      	ldr	r3, [r7, #32]
 801067c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8010680:	e02c      	b.n	80106dc <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010682:	6a3b      	ldr	r3, [r7, #32]
 8010684:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010688:	1c5a      	adds	r2, r3, #1
 801068a:	6a3b      	ldr	r3, [r7, #32]
 801068c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8010690:	e024      	b.n	80106dc <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010692:	6a3b      	ldr	r3, [r7, #32]
 8010694:	68ba      	ldr	r2, [r7, #8]
 8010696:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801069a:	e01f      	b.n	80106dc <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801069c:	7ffb      	ldrb	r3, [r7, #31]
 801069e:	2b02      	cmp	r3, #2
 80106a0:	d004      	beq.n	80106ac <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80106a2:	6a3b      	ldr	r3, [r7, #32]
 80106a4:	68ba      	ldr	r2, [r7, #8]
 80106a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80106aa:	e017      	b.n	80106dc <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 80106ac:	2300      	movs	r3, #0
 80106ae:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80106b0:	e014      	b.n	80106dc <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80106b2:	6a3b      	ldr	r3, [r7, #32]
 80106b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80106b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80106bc:	d00d      	beq.n	80106da <xTaskGenericNotify+0xe6>
	__asm volatile
 80106be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106c2:	f383 8811 	msr	BASEPRI, r3
 80106c6:	f3bf 8f6f 	isb	sy
 80106ca:	f3bf 8f4f 	dsb	sy
 80106ce:	617b      	str	r3, [r7, #20]
}
 80106d0:	bf00      	nop
 80106d2:	bf00      	nop
 80106d4:	e7fd      	b.n	80106d2 <xTaskGenericNotify+0xde>
					break;
 80106d6:	bf00      	nop
 80106d8:	e000      	b.n	80106dc <xTaskGenericNotify+0xe8>

					break;
 80106da:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80106dc:	7ffb      	ldrb	r3, [r7, #31]
 80106de:	2b01      	cmp	r3, #1
 80106e0:	d13b      	bne.n	801075a <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80106e2:	6a3b      	ldr	r3, [r7, #32]
 80106e4:	3304      	adds	r3, #4
 80106e6:	4618      	mov	r0, r3
 80106e8:	f7fd ffb4 	bl	800e654 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80106ec:	6a3b      	ldr	r3, [r7, #32]
 80106ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80106f0:	4b1d      	ldr	r3, [pc, #116]	@ (8010768 <xTaskGenericNotify+0x174>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	429a      	cmp	r2, r3
 80106f6:	d903      	bls.n	8010700 <xTaskGenericNotify+0x10c>
 80106f8:	6a3b      	ldr	r3, [r7, #32]
 80106fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106fc:	4a1a      	ldr	r2, [pc, #104]	@ (8010768 <xTaskGenericNotify+0x174>)
 80106fe:	6013      	str	r3, [r2, #0]
 8010700:	6a3b      	ldr	r3, [r7, #32]
 8010702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010704:	4613      	mov	r3, r2
 8010706:	009b      	lsls	r3, r3, #2
 8010708:	4413      	add	r3, r2
 801070a:	009b      	lsls	r3, r3, #2
 801070c:	4a17      	ldr	r2, [pc, #92]	@ (801076c <xTaskGenericNotify+0x178>)
 801070e:	441a      	add	r2, r3
 8010710:	6a3b      	ldr	r3, [r7, #32]
 8010712:	3304      	adds	r3, #4
 8010714:	4619      	mov	r1, r3
 8010716:	4610      	mov	r0, r2
 8010718:	f7fd ff3f 	bl	800e59a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801071c:	6a3b      	ldr	r3, [r7, #32]
 801071e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010720:	2b00      	cmp	r3, #0
 8010722:	d00b      	beq.n	801073c <xTaskGenericNotify+0x148>
	__asm volatile
 8010724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010728:	f383 8811 	msr	BASEPRI, r3
 801072c:	f3bf 8f6f 	isb	sy
 8010730:	f3bf 8f4f 	dsb	sy
 8010734:	613b      	str	r3, [r7, #16]
}
 8010736:	bf00      	nop
 8010738:	bf00      	nop
 801073a:	e7fd      	b.n	8010738 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801073c:	6a3b      	ldr	r3, [r7, #32]
 801073e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010740:	4b0b      	ldr	r3, [pc, #44]	@ (8010770 <xTaskGenericNotify+0x17c>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010746:	429a      	cmp	r2, r3
 8010748:	d907      	bls.n	801075a <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801074a:	4b0a      	ldr	r3, [pc, #40]	@ (8010774 <xTaskGenericNotify+0x180>)
 801074c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010750:	601a      	str	r2, [r3, #0]
 8010752:	f3bf 8f4f 	dsb	sy
 8010756:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801075a:	f000 fe07 	bl	801136c <vPortExitCritical>

		return xReturn;
 801075e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8010760:	4618      	mov	r0, r3
 8010762:	3728      	adds	r7, #40	@ 0x28
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}
 8010768:	240339c4 	.word	0x240339c4
 801076c:	240334ec 	.word	0x240334ec
 8010770:	240334e8 	.word	0x240334e8
 8010774:	e000ed04 	.word	0xe000ed04

08010778 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010778:	b580      	push	{r7, lr}
 801077a:	b08e      	sub	sp, #56	@ 0x38
 801077c:	af00      	add	r7, sp, #0
 801077e:	60f8      	str	r0, [r7, #12]
 8010780:	60b9      	str	r1, [r7, #8]
 8010782:	603b      	str	r3, [r7, #0]
 8010784:	4613      	mov	r3, r2
 8010786:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8010788:	2301      	movs	r3, #1
 801078a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d10b      	bne.n	80107aa <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8010792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010796:	f383 8811 	msr	BASEPRI, r3
 801079a:	f3bf 8f6f 	isb	sy
 801079e:	f3bf 8f4f 	dsb	sy
 80107a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80107a4:	bf00      	nop
 80107a6:	bf00      	nop
 80107a8:	e7fd      	b.n	80107a6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80107aa:	f000 fe8d 	bl	80114c8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 80107b2:	f3ef 8211 	mrs	r2, BASEPRI
 80107b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107ba:	f383 8811 	msr	BASEPRI, r3
 80107be:	f3bf 8f6f 	isb	sy
 80107c2:	f3bf 8f4f 	dsb	sy
 80107c6:	623a      	str	r2, [r7, #32]
 80107c8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80107ca:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80107cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80107ce:	683b      	ldr	r3, [r7, #0]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d004      	beq.n	80107de <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80107d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107d6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80107de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107e0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80107e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80107e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107ea:	2202      	movs	r2, #2
 80107ec:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80107f0:	79fb      	ldrb	r3, [r7, #7]
 80107f2:	2b04      	cmp	r3, #4
 80107f4:	d82e      	bhi.n	8010854 <xTaskGenericNotifyFromISR+0xdc>
 80107f6:	a201      	add	r2, pc, #4	@ (adr r2, 80107fc <xTaskGenericNotifyFromISR+0x84>)
 80107f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107fc:	08010879 	.word	0x08010879
 8010800:	08010811 	.word	0x08010811
 8010804:	08010823 	.word	0x08010823
 8010808:	08010833 	.word	0x08010833
 801080c:	0801083d 	.word	0x0801083d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010812:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8010816:	68bb      	ldr	r3, [r7, #8]
 8010818:	431a      	orrs	r2, r3
 801081a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801081c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8010820:	e02d      	b.n	801087e <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010824:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010828:	1c5a      	adds	r2, r3, #1
 801082a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801082c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8010830:	e025      	b.n	801087e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010834:	68ba      	ldr	r2, [r7, #8]
 8010836:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801083a:	e020      	b.n	801087e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801083c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010840:	2b02      	cmp	r3, #2
 8010842:	d004      	beq.n	801084e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010846:	68ba      	ldr	r2, [r7, #8]
 8010848:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801084c:	e017      	b.n	801087e <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 801084e:	2300      	movs	r3, #0
 8010850:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8010852:	e014      	b.n	801087e <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010856:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801085a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801085e:	d00d      	beq.n	801087c <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8010860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010864:	f383 8811 	msr	BASEPRI, r3
 8010868:	f3bf 8f6f 	isb	sy
 801086c:	f3bf 8f4f 	dsb	sy
 8010870:	61bb      	str	r3, [r7, #24]
}
 8010872:	bf00      	nop
 8010874:	bf00      	nop
 8010876:	e7fd      	b.n	8010874 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8010878:	bf00      	nop
 801087a:	e000      	b.n	801087e <xTaskGenericNotifyFromISR+0x106>
					break;
 801087c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801087e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010882:	2b01      	cmp	r3, #1
 8010884:	d147      	bne.n	8010916 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801088a:	2b00      	cmp	r3, #0
 801088c:	d00b      	beq.n	80108a6 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 801088e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010892:	f383 8811 	msr	BASEPRI, r3
 8010896:	f3bf 8f6f 	isb	sy
 801089a:	f3bf 8f4f 	dsb	sy
 801089e:	617b      	str	r3, [r7, #20]
}
 80108a0:	bf00      	nop
 80108a2:	bf00      	nop
 80108a4:	e7fd      	b.n	80108a2 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80108a6:	4b21      	ldr	r3, [pc, #132]	@ (801092c <xTaskGenericNotifyFromISR+0x1b4>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d11d      	bne.n	80108ea <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80108ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108b0:	3304      	adds	r3, #4
 80108b2:	4618      	mov	r0, r3
 80108b4:	f7fd fece 	bl	800e654 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80108b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108bc:	4b1c      	ldr	r3, [pc, #112]	@ (8010930 <xTaskGenericNotifyFromISR+0x1b8>)
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	429a      	cmp	r2, r3
 80108c2:	d903      	bls.n	80108cc <xTaskGenericNotifyFromISR+0x154>
 80108c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108c8:	4a19      	ldr	r2, [pc, #100]	@ (8010930 <xTaskGenericNotifyFromISR+0x1b8>)
 80108ca:	6013      	str	r3, [r2, #0]
 80108cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108d0:	4613      	mov	r3, r2
 80108d2:	009b      	lsls	r3, r3, #2
 80108d4:	4413      	add	r3, r2
 80108d6:	009b      	lsls	r3, r3, #2
 80108d8:	4a16      	ldr	r2, [pc, #88]	@ (8010934 <xTaskGenericNotifyFromISR+0x1bc>)
 80108da:	441a      	add	r2, r3
 80108dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108de:	3304      	adds	r3, #4
 80108e0:	4619      	mov	r1, r3
 80108e2:	4610      	mov	r0, r2
 80108e4:	f7fd fe59 	bl	800e59a <vListInsertEnd>
 80108e8:	e005      	b.n	80108f6 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80108ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108ec:	3318      	adds	r3, #24
 80108ee:	4619      	mov	r1, r3
 80108f0:	4811      	ldr	r0, [pc, #68]	@ (8010938 <xTaskGenericNotifyFromISR+0x1c0>)
 80108f2:	f7fd fe52 	bl	800e59a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80108f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108fa:	4b10      	ldr	r3, [pc, #64]	@ (801093c <xTaskGenericNotifyFromISR+0x1c4>)
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010900:	429a      	cmp	r2, r3
 8010902:	d908      	bls.n	8010916 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8010904:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010906:	2b00      	cmp	r3, #0
 8010908:	d002      	beq.n	8010910 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801090a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801090c:	2201      	movs	r2, #1
 801090e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8010910:	4b0b      	ldr	r3, [pc, #44]	@ (8010940 <xTaskGenericNotifyFromISR+0x1c8>)
 8010912:	2201      	movs	r2, #1
 8010914:	601a      	str	r2, [r3, #0]
 8010916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010918:	613b      	str	r3, [r7, #16]
	__asm volatile
 801091a:	693b      	ldr	r3, [r7, #16]
 801091c:	f383 8811 	msr	BASEPRI, r3
}
 8010920:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8010922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8010924:	4618      	mov	r0, r3
 8010926:	3738      	adds	r7, #56	@ 0x38
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}
 801092c:	240339e4 	.word	0x240339e4
 8010930:	240339c4 	.word	0x240339c4
 8010934:	240334ec 	.word	0x240334ec
 8010938:	2403397c 	.word	0x2403397c
 801093c:	240334e8 	.word	0x240334e8
 8010940:	240339d0 	.word	0x240339d0

08010944 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b084      	sub	sp, #16
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
 801094c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801094e:	4b21      	ldr	r3, [pc, #132]	@ (80109d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010954:	4b20      	ldr	r3, [pc, #128]	@ (80109d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	3304      	adds	r3, #4
 801095a:	4618      	mov	r0, r3
 801095c:	f7fd fe7a 	bl	800e654 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010966:	d10a      	bne.n	801097e <prvAddCurrentTaskToDelayedList+0x3a>
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d007      	beq.n	801097e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801096e:	4b1a      	ldr	r3, [pc, #104]	@ (80109d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	3304      	adds	r3, #4
 8010974:	4619      	mov	r1, r3
 8010976:	4819      	ldr	r0, [pc, #100]	@ (80109dc <prvAddCurrentTaskToDelayedList+0x98>)
 8010978:	f7fd fe0f 	bl	800e59a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801097c:	e026      	b.n	80109cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801097e:	68fa      	ldr	r2, [r7, #12]
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	4413      	add	r3, r2
 8010984:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010986:	4b14      	ldr	r3, [pc, #80]	@ (80109d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	68ba      	ldr	r2, [r7, #8]
 801098c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801098e:	68ba      	ldr	r2, [r7, #8]
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	429a      	cmp	r2, r3
 8010994:	d209      	bcs.n	80109aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010996:	4b12      	ldr	r3, [pc, #72]	@ (80109e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010998:	681a      	ldr	r2, [r3, #0]
 801099a:	4b0f      	ldr	r3, [pc, #60]	@ (80109d8 <prvAddCurrentTaskToDelayedList+0x94>)
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	3304      	adds	r3, #4
 80109a0:	4619      	mov	r1, r3
 80109a2:	4610      	mov	r0, r2
 80109a4:	f7fd fe1d 	bl	800e5e2 <vListInsert>
}
 80109a8:	e010      	b.n	80109cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80109aa:	4b0e      	ldr	r3, [pc, #56]	@ (80109e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80109ac:	681a      	ldr	r2, [r3, #0]
 80109ae:	4b0a      	ldr	r3, [pc, #40]	@ (80109d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	3304      	adds	r3, #4
 80109b4:	4619      	mov	r1, r3
 80109b6:	4610      	mov	r0, r2
 80109b8:	f7fd fe13 	bl	800e5e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80109bc:	4b0a      	ldr	r3, [pc, #40]	@ (80109e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	68ba      	ldr	r2, [r7, #8]
 80109c2:	429a      	cmp	r2, r3
 80109c4:	d202      	bcs.n	80109cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80109c6:	4a08      	ldr	r2, [pc, #32]	@ (80109e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	6013      	str	r3, [r2, #0]
}
 80109cc:	bf00      	nop
 80109ce:	3710      	adds	r7, #16
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bd80      	pop	{r7, pc}
 80109d4:	240339c0 	.word	0x240339c0
 80109d8:	240334e8 	.word	0x240334e8
 80109dc:	240339a8 	.word	0x240339a8
 80109e0:	24033978 	.word	0x24033978
 80109e4:	24033974 	.word	0x24033974
 80109e8:	240339dc 	.word	0x240339dc

080109ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b08a      	sub	sp, #40	@ 0x28
 80109f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80109f2:	2300      	movs	r3, #0
 80109f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80109f6:	f000 fb13 	bl	8011020 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80109fa:	4b1d      	ldr	r3, [pc, #116]	@ (8010a70 <xTimerCreateTimerTask+0x84>)
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d021      	beq.n	8010a46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010a02:	2300      	movs	r3, #0
 8010a04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010a06:	2300      	movs	r3, #0
 8010a08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010a0a:	1d3a      	adds	r2, r7, #4
 8010a0c:	f107 0108 	add.w	r1, r7, #8
 8010a10:	f107 030c 	add.w	r3, r7, #12
 8010a14:	4618      	mov	r0, r3
 8010a16:	f7fd fd79 	bl	800e50c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010a1a:	6879      	ldr	r1, [r7, #4]
 8010a1c:	68bb      	ldr	r3, [r7, #8]
 8010a1e:	68fa      	ldr	r2, [r7, #12]
 8010a20:	9202      	str	r2, [sp, #8]
 8010a22:	9301      	str	r3, [sp, #4]
 8010a24:	2302      	movs	r3, #2
 8010a26:	9300      	str	r3, [sp, #0]
 8010a28:	2300      	movs	r3, #0
 8010a2a:	460a      	mov	r2, r1
 8010a2c:	4911      	ldr	r1, [pc, #68]	@ (8010a74 <xTimerCreateTimerTask+0x88>)
 8010a2e:	4812      	ldr	r0, [pc, #72]	@ (8010a78 <xTimerCreateTimerTask+0x8c>)
 8010a30:	f7fe fd50 	bl	800f4d4 <xTaskCreateStatic>
 8010a34:	4603      	mov	r3, r0
 8010a36:	4a11      	ldr	r2, [pc, #68]	@ (8010a7c <xTimerCreateTimerTask+0x90>)
 8010a38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010a3a:	4b10      	ldr	r3, [pc, #64]	@ (8010a7c <xTimerCreateTimerTask+0x90>)
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d001      	beq.n	8010a46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010a42:	2301      	movs	r3, #1
 8010a44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010a46:	697b      	ldr	r3, [r7, #20]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d10b      	bne.n	8010a64 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8010a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a50:	f383 8811 	msr	BASEPRI, r3
 8010a54:	f3bf 8f6f 	isb	sy
 8010a58:	f3bf 8f4f 	dsb	sy
 8010a5c:	613b      	str	r3, [r7, #16]
}
 8010a5e:	bf00      	nop
 8010a60:	bf00      	nop
 8010a62:	e7fd      	b.n	8010a60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010a64:	697b      	ldr	r3, [r7, #20]
}
 8010a66:	4618      	mov	r0, r3
 8010a68:	3718      	adds	r7, #24
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd80      	pop	{r7, pc}
 8010a6e:	bf00      	nop
 8010a70:	24033a18 	.word	0x24033a18
 8010a74:	08023330 	.word	0x08023330
 8010a78:	08010bb9 	.word	0x08010bb9
 8010a7c:	24033a1c 	.word	0x24033a1c

08010a80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b08a      	sub	sp, #40	@ 0x28
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	60f8      	str	r0, [r7, #12]
 8010a88:	60b9      	str	r1, [r7, #8]
 8010a8a:	607a      	str	r2, [r7, #4]
 8010a8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010a8e:	2300      	movs	r3, #0
 8010a90:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d10b      	bne.n	8010ab0 <xTimerGenericCommand+0x30>
	__asm volatile
 8010a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a9c:	f383 8811 	msr	BASEPRI, r3
 8010aa0:	f3bf 8f6f 	isb	sy
 8010aa4:	f3bf 8f4f 	dsb	sy
 8010aa8:	623b      	str	r3, [r7, #32]
}
 8010aaa:	bf00      	nop
 8010aac:	bf00      	nop
 8010aae:	e7fd      	b.n	8010aac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010ab0:	4b19      	ldr	r3, [pc, #100]	@ (8010b18 <xTimerGenericCommand+0x98>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d02a      	beq.n	8010b0e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010ab8:	68bb      	ldr	r3, [r7, #8]
 8010aba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	2b05      	cmp	r3, #5
 8010ac8:	dc18      	bgt.n	8010afc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010aca:	f7ff fba5 	bl	8010218 <xTaskGetSchedulerState>
 8010ace:	4603      	mov	r3, r0
 8010ad0:	2b02      	cmp	r3, #2
 8010ad2:	d109      	bne.n	8010ae8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010ad4:	4b10      	ldr	r3, [pc, #64]	@ (8010b18 <xTimerGenericCommand+0x98>)
 8010ad6:	6818      	ldr	r0, [r3, #0]
 8010ad8:	f107 0110 	add.w	r1, r7, #16
 8010adc:	2300      	movs	r3, #0
 8010ade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010ae0:	f7fd ffe0 	bl	800eaa4 <xQueueGenericSend>
 8010ae4:	6278      	str	r0, [r7, #36]	@ 0x24
 8010ae6:	e012      	b.n	8010b0e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8010b18 <xTimerGenericCommand+0x98>)
 8010aea:	6818      	ldr	r0, [r3, #0]
 8010aec:	f107 0110 	add.w	r1, r7, #16
 8010af0:	2300      	movs	r3, #0
 8010af2:	2200      	movs	r2, #0
 8010af4:	f7fd ffd6 	bl	800eaa4 <xQueueGenericSend>
 8010af8:	6278      	str	r0, [r7, #36]	@ 0x24
 8010afa:	e008      	b.n	8010b0e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010afc:	4b06      	ldr	r3, [pc, #24]	@ (8010b18 <xTimerGenericCommand+0x98>)
 8010afe:	6818      	ldr	r0, [r3, #0]
 8010b00:	f107 0110 	add.w	r1, r7, #16
 8010b04:	2300      	movs	r3, #0
 8010b06:	683a      	ldr	r2, [r7, #0]
 8010b08:	f7fe f8ce 	bl	800eca8 <xQueueGenericSendFromISR>
 8010b0c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010b10:	4618      	mov	r0, r3
 8010b12:	3728      	adds	r7, #40	@ 0x28
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}
 8010b18:	24033a18 	.word	0x24033a18

08010b1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b088      	sub	sp, #32
 8010b20:	af02      	add	r7, sp, #8
 8010b22:	6078      	str	r0, [r7, #4]
 8010b24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b26:	4b23      	ldr	r3, [pc, #140]	@ (8010bb4 <prvProcessExpiredTimer+0x98>)
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	68db      	ldr	r3, [r3, #12]
 8010b2c:	68db      	ldr	r3, [r3, #12]
 8010b2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010b30:	697b      	ldr	r3, [r7, #20]
 8010b32:	3304      	adds	r3, #4
 8010b34:	4618      	mov	r0, r3
 8010b36:	f7fd fd8d 	bl	800e654 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010b3a:	697b      	ldr	r3, [r7, #20]
 8010b3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010b40:	f003 0304 	and.w	r3, r3, #4
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d023      	beq.n	8010b90 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010b48:	697b      	ldr	r3, [r7, #20]
 8010b4a:	699a      	ldr	r2, [r3, #24]
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	18d1      	adds	r1, r2, r3
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	683a      	ldr	r2, [r7, #0]
 8010b54:	6978      	ldr	r0, [r7, #20]
 8010b56:	f000 f8d5 	bl	8010d04 <prvInsertTimerInActiveList>
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d020      	beq.n	8010ba2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010b60:	2300      	movs	r3, #0
 8010b62:	9300      	str	r3, [sp, #0]
 8010b64:	2300      	movs	r3, #0
 8010b66:	687a      	ldr	r2, [r7, #4]
 8010b68:	2100      	movs	r1, #0
 8010b6a:	6978      	ldr	r0, [r7, #20]
 8010b6c:	f7ff ff88 	bl	8010a80 <xTimerGenericCommand>
 8010b70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010b72:	693b      	ldr	r3, [r7, #16]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d114      	bne.n	8010ba2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8010b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b7c:	f383 8811 	msr	BASEPRI, r3
 8010b80:	f3bf 8f6f 	isb	sy
 8010b84:	f3bf 8f4f 	dsb	sy
 8010b88:	60fb      	str	r3, [r7, #12]
}
 8010b8a:	bf00      	nop
 8010b8c:	bf00      	nop
 8010b8e:	e7fd      	b.n	8010b8c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010b96:	f023 0301 	bic.w	r3, r3, #1
 8010b9a:	b2da      	uxtb	r2, r3
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010ba2:	697b      	ldr	r3, [r7, #20]
 8010ba4:	6a1b      	ldr	r3, [r3, #32]
 8010ba6:	6978      	ldr	r0, [r7, #20]
 8010ba8:	4798      	blx	r3
}
 8010baa:	bf00      	nop
 8010bac:	3718      	adds	r7, #24
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}
 8010bb2:	bf00      	nop
 8010bb4:	24033a10 	.word	0x24033a10

08010bb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b084      	sub	sp, #16
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010bc0:	f107 0308 	add.w	r3, r7, #8
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	f000 f859 	bl	8010c7c <prvGetNextExpireTime>
 8010bca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010bcc:	68bb      	ldr	r3, [r7, #8]
 8010bce:	4619      	mov	r1, r3
 8010bd0:	68f8      	ldr	r0, [r7, #12]
 8010bd2:	f000 f805 	bl	8010be0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010bd6:	f000 f8d7 	bl	8010d88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010bda:	bf00      	nop
 8010bdc:	e7f0      	b.n	8010bc0 <prvTimerTask+0x8>
	...

08010be0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b084      	sub	sp, #16
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
 8010be8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010bea:	f7fe fed7 	bl	800f99c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010bee:	f107 0308 	add.w	r3, r7, #8
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f000 f866 	bl	8010cc4 <prvSampleTimeNow>
 8010bf8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010bfa:	68bb      	ldr	r3, [r7, #8]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d130      	bne.n	8010c62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d10a      	bne.n	8010c1c <prvProcessTimerOrBlockTask+0x3c>
 8010c06:	687a      	ldr	r2, [r7, #4]
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	d806      	bhi.n	8010c1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010c0e:	f7fe fed3 	bl	800f9b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010c12:	68f9      	ldr	r1, [r7, #12]
 8010c14:	6878      	ldr	r0, [r7, #4]
 8010c16:	f7ff ff81 	bl	8010b1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010c1a:	e024      	b.n	8010c66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d008      	beq.n	8010c34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010c22:	4b13      	ldr	r3, [pc, #76]	@ (8010c70 <prvProcessTimerOrBlockTask+0x90>)
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d101      	bne.n	8010c30 <prvProcessTimerOrBlockTask+0x50>
 8010c2c:	2301      	movs	r3, #1
 8010c2e:	e000      	b.n	8010c32 <prvProcessTimerOrBlockTask+0x52>
 8010c30:	2300      	movs	r3, #0
 8010c32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010c34:	4b0f      	ldr	r3, [pc, #60]	@ (8010c74 <prvProcessTimerOrBlockTask+0x94>)
 8010c36:	6818      	ldr	r0, [r3, #0]
 8010c38:	687a      	ldr	r2, [r7, #4]
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	1ad3      	subs	r3, r2, r3
 8010c3e:	683a      	ldr	r2, [r7, #0]
 8010c40:	4619      	mov	r1, r3
 8010c42:	f7fe fc13 	bl	800f46c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010c46:	f7fe feb7 	bl	800f9b8 <xTaskResumeAll>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d10a      	bne.n	8010c66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010c50:	4b09      	ldr	r3, [pc, #36]	@ (8010c78 <prvProcessTimerOrBlockTask+0x98>)
 8010c52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010c56:	601a      	str	r2, [r3, #0]
 8010c58:	f3bf 8f4f 	dsb	sy
 8010c5c:	f3bf 8f6f 	isb	sy
}
 8010c60:	e001      	b.n	8010c66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010c62:	f7fe fea9 	bl	800f9b8 <xTaskResumeAll>
}
 8010c66:	bf00      	nop
 8010c68:	3710      	adds	r7, #16
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bd80      	pop	{r7, pc}
 8010c6e:	bf00      	nop
 8010c70:	24033a14 	.word	0x24033a14
 8010c74:	24033a18 	.word	0x24033a18
 8010c78:	e000ed04 	.word	0xe000ed04

08010c7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010c7c:	b480      	push	{r7}
 8010c7e:	b085      	sub	sp, #20
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010c84:	4b0e      	ldr	r3, [pc, #56]	@ (8010cc0 <prvGetNextExpireTime+0x44>)
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d101      	bne.n	8010c92 <prvGetNextExpireTime+0x16>
 8010c8e:	2201      	movs	r2, #1
 8010c90:	e000      	b.n	8010c94 <prvGetNextExpireTime+0x18>
 8010c92:	2200      	movs	r2, #0
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d105      	bne.n	8010cac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010ca0:	4b07      	ldr	r3, [pc, #28]	@ (8010cc0 <prvGetNextExpireTime+0x44>)
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	68db      	ldr	r3, [r3, #12]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	60fb      	str	r3, [r7, #12]
 8010caa:	e001      	b.n	8010cb0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010cac:	2300      	movs	r3, #0
 8010cae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010cb0:	68fb      	ldr	r3, [r7, #12]
}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	3714      	adds	r7, #20
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cbc:	4770      	bx	lr
 8010cbe:	bf00      	nop
 8010cc0:	24033a10 	.word	0x24033a10

08010cc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b084      	sub	sp, #16
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010ccc:	f7fe ff12 	bl	800faf4 <xTaskGetTickCount>
 8010cd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8010d00 <prvSampleTimeNow+0x3c>)
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	68fa      	ldr	r2, [r7, #12]
 8010cd8:	429a      	cmp	r2, r3
 8010cda:	d205      	bcs.n	8010ce8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010cdc:	f000 f93a 	bl	8010f54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	2201      	movs	r2, #1
 8010ce4:	601a      	str	r2, [r3, #0]
 8010ce6:	e002      	b.n	8010cee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	2200      	movs	r2, #0
 8010cec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010cee:	4a04      	ldr	r2, [pc, #16]	@ (8010d00 <prvSampleTimeNow+0x3c>)
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010cf4:	68fb      	ldr	r3, [r7, #12]
}
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	3710      	adds	r7, #16
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bd80      	pop	{r7, pc}
 8010cfe:	bf00      	nop
 8010d00:	24033a20 	.word	0x24033a20

08010d04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b086      	sub	sp, #24
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	60f8      	str	r0, [r7, #12]
 8010d0c:	60b9      	str	r1, [r7, #8]
 8010d0e:	607a      	str	r2, [r7, #4]
 8010d10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010d12:	2300      	movs	r3, #0
 8010d14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	68ba      	ldr	r2, [r7, #8]
 8010d1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	68fa      	ldr	r2, [r7, #12]
 8010d20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010d22:	68ba      	ldr	r2, [r7, #8]
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	429a      	cmp	r2, r3
 8010d28:	d812      	bhi.n	8010d50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d2a:	687a      	ldr	r2, [r7, #4]
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	1ad2      	subs	r2, r2, r3
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	699b      	ldr	r3, [r3, #24]
 8010d34:	429a      	cmp	r2, r3
 8010d36:	d302      	bcc.n	8010d3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010d38:	2301      	movs	r3, #1
 8010d3a:	617b      	str	r3, [r7, #20]
 8010d3c:	e01b      	b.n	8010d76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010d3e:	4b10      	ldr	r3, [pc, #64]	@ (8010d80 <prvInsertTimerInActiveList+0x7c>)
 8010d40:	681a      	ldr	r2, [r3, #0]
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	3304      	adds	r3, #4
 8010d46:	4619      	mov	r1, r3
 8010d48:	4610      	mov	r0, r2
 8010d4a:	f7fd fc4a 	bl	800e5e2 <vListInsert>
 8010d4e:	e012      	b.n	8010d76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010d50:	687a      	ldr	r2, [r7, #4]
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	429a      	cmp	r2, r3
 8010d56:	d206      	bcs.n	8010d66 <prvInsertTimerInActiveList+0x62>
 8010d58:	68ba      	ldr	r2, [r7, #8]
 8010d5a:	683b      	ldr	r3, [r7, #0]
 8010d5c:	429a      	cmp	r2, r3
 8010d5e:	d302      	bcc.n	8010d66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010d60:	2301      	movs	r3, #1
 8010d62:	617b      	str	r3, [r7, #20]
 8010d64:	e007      	b.n	8010d76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010d66:	4b07      	ldr	r3, [pc, #28]	@ (8010d84 <prvInsertTimerInActiveList+0x80>)
 8010d68:	681a      	ldr	r2, [r3, #0]
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	3304      	adds	r3, #4
 8010d6e:	4619      	mov	r1, r3
 8010d70:	4610      	mov	r0, r2
 8010d72:	f7fd fc36 	bl	800e5e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010d76:	697b      	ldr	r3, [r7, #20]
}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	3718      	adds	r7, #24
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bd80      	pop	{r7, pc}
 8010d80:	24033a14 	.word	0x24033a14
 8010d84:	24033a10 	.word	0x24033a10

08010d88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b08e      	sub	sp, #56	@ 0x38
 8010d8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010d8e:	e0ce      	b.n	8010f2e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	da19      	bge.n	8010dca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010d96:	1d3b      	adds	r3, r7, #4
 8010d98:	3304      	adds	r3, #4
 8010d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d10b      	bne.n	8010dba <prvProcessReceivedCommands+0x32>
	__asm volatile
 8010da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010da6:	f383 8811 	msr	BASEPRI, r3
 8010daa:	f3bf 8f6f 	isb	sy
 8010dae:	f3bf 8f4f 	dsb	sy
 8010db2:	61fb      	str	r3, [r7, #28]
}
 8010db4:	bf00      	nop
 8010db6:	bf00      	nop
 8010db8:	e7fd      	b.n	8010db6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010dc0:	6850      	ldr	r0, [r2, #4]
 8010dc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010dc4:	6892      	ldr	r2, [r2, #8]
 8010dc6:	4611      	mov	r1, r2
 8010dc8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	f2c0 80ae 	blt.w	8010f2e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dd8:	695b      	ldr	r3, [r3, #20]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d004      	beq.n	8010de8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010de0:	3304      	adds	r3, #4
 8010de2:	4618      	mov	r0, r3
 8010de4:	f7fd fc36 	bl	800e654 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010de8:	463b      	mov	r3, r7
 8010dea:	4618      	mov	r0, r3
 8010dec:	f7ff ff6a 	bl	8010cc4 <prvSampleTimeNow>
 8010df0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	2b09      	cmp	r3, #9
 8010df6:	f200 8097 	bhi.w	8010f28 <prvProcessReceivedCommands+0x1a0>
 8010dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8010e00 <prvProcessReceivedCommands+0x78>)
 8010dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e00:	08010e29 	.word	0x08010e29
 8010e04:	08010e29 	.word	0x08010e29
 8010e08:	08010e29 	.word	0x08010e29
 8010e0c:	08010e9f 	.word	0x08010e9f
 8010e10:	08010eb3 	.word	0x08010eb3
 8010e14:	08010eff 	.word	0x08010eff
 8010e18:	08010e29 	.word	0x08010e29
 8010e1c:	08010e29 	.word	0x08010e29
 8010e20:	08010e9f 	.word	0x08010e9f
 8010e24:	08010eb3 	.word	0x08010eb3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010e2e:	f043 0301 	orr.w	r3, r3, #1
 8010e32:	b2da      	uxtb	r2, r3
 8010e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010e3a:	68ba      	ldr	r2, [r7, #8]
 8010e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e3e:	699b      	ldr	r3, [r3, #24]
 8010e40:	18d1      	adds	r1, r2, r3
 8010e42:	68bb      	ldr	r3, [r7, #8]
 8010e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010e46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010e48:	f7ff ff5c 	bl	8010d04 <prvInsertTimerInActiveList>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d06c      	beq.n	8010f2c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e54:	6a1b      	ldr	r3, [r3, #32]
 8010e56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010e58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010e60:	f003 0304 	and.w	r3, r3, #4
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d061      	beq.n	8010f2c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010e68:	68ba      	ldr	r2, [r7, #8]
 8010e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e6c:	699b      	ldr	r3, [r3, #24]
 8010e6e:	441a      	add	r2, r3
 8010e70:	2300      	movs	r3, #0
 8010e72:	9300      	str	r3, [sp, #0]
 8010e74:	2300      	movs	r3, #0
 8010e76:	2100      	movs	r1, #0
 8010e78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010e7a:	f7ff fe01 	bl	8010a80 <xTimerGenericCommand>
 8010e7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010e80:	6a3b      	ldr	r3, [r7, #32]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d152      	bne.n	8010f2c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8010e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e8a:	f383 8811 	msr	BASEPRI, r3
 8010e8e:	f3bf 8f6f 	isb	sy
 8010e92:	f3bf 8f4f 	dsb	sy
 8010e96:	61bb      	str	r3, [r7, #24]
}
 8010e98:	bf00      	nop
 8010e9a:	bf00      	nop
 8010e9c:	e7fd      	b.n	8010e9a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ea0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010ea4:	f023 0301 	bic.w	r3, r3, #1
 8010ea8:	b2da      	uxtb	r2, r3
 8010eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010eb0:	e03d      	b.n	8010f2e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010eb8:	f043 0301 	orr.w	r3, r3, #1
 8010ebc:	b2da      	uxtb	r2, r3
 8010ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ec0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010ec4:	68ba      	ldr	r2, [r7, #8]
 8010ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ec8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ecc:	699b      	ldr	r3, [r3, #24]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d10b      	bne.n	8010eea <prvProcessReceivedCommands+0x162>
	__asm volatile
 8010ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ed6:	f383 8811 	msr	BASEPRI, r3
 8010eda:	f3bf 8f6f 	isb	sy
 8010ede:	f3bf 8f4f 	dsb	sy
 8010ee2:	617b      	str	r3, [r7, #20]
}
 8010ee4:	bf00      	nop
 8010ee6:	bf00      	nop
 8010ee8:	e7fd      	b.n	8010ee6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eec:	699a      	ldr	r2, [r3, #24]
 8010eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ef0:	18d1      	adds	r1, r2, r3
 8010ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ef4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ef6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010ef8:	f7ff ff04 	bl	8010d04 <prvInsertTimerInActiveList>
					break;
 8010efc:	e017      	b.n	8010f2e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010f04:	f003 0302 	and.w	r3, r3, #2
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d103      	bne.n	8010f14 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8010f0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010f0e:	f000 fbeb 	bl	80116e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010f12:	e00c      	b.n	8010f2e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010f1a:	f023 0301 	bic.w	r3, r3, #1
 8010f1e:	b2da      	uxtb	r2, r3
 8010f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010f26:	e002      	b.n	8010f2e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8010f28:	bf00      	nop
 8010f2a:	e000      	b.n	8010f2e <prvProcessReceivedCommands+0x1a6>
					break;
 8010f2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010f2e:	4b08      	ldr	r3, [pc, #32]	@ (8010f50 <prvProcessReceivedCommands+0x1c8>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	1d39      	adds	r1, r7, #4
 8010f34:	2200      	movs	r2, #0
 8010f36:	4618      	mov	r0, r3
 8010f38:	f7fd ff54 	bl	800ede4 <xQueueReceive>
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	f47f af26 	bne.w	8010d90 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010f44:	bf00      	nop
 8010f46:	bf00      	nop
 8010f48:	3730      	adds	r7, #48	@ 0x30
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}
 8010f4e:	bf00      	nop
 8010f50:	24033a18 	.word	0x24033a18

08010f54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b088      	sub	sp, #32
 8010f58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010f5a:	e049      	b.n	8010ff0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010f5c:	4b2e      	ldr	r3, [pc, #184]	@ (8011018 <prvSwitchTimerLists+0xc4>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	68db      	ldr	r3, [r3, #12]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f66:	4b2c      	ldr	r3, [pc, #176]	@ (8011018 <prvSwitchTimerLists+0xc4>)
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	68db      	ldr	r3, [r3, #12]
 8010f6c:	68db      	ldr	r3, [r3, #12]
 8010f6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	3304      	adds	r3, #4
 8010f74:	4618      	mov	r0, r3
 8010f76:	f7fd fb6d 	bl	800e654 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	6a1b      	ldr	r3, [r3, #32]
 8010f7e:	68f8      	ldr	r0, [r7, #12]
 8010f80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010f88:	f003 0304 	and.w	r3, r3, #4
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d02f      	beq.n	8010ff0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	699b      	ldr	r3, [r3, #24]
 8010f94:	693a      	ldr	r2, [r7, #16]
 8010f96:	4413      	add	r3, r2
 8010f98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010f9a:	68ba      	ldr	r2, [r7, #8]
 8010f9c:	693b      	ldr	r3, [r7, #16]
 8010f9e:	429a      	cmp	r2, r3
 8010fa0:	d90e      	bls.n	8010fc0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	68ba      	ldr	r2, [r7, #8]
 8010fa6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	68fa      	ldr	r2, [r7, #12]
 8010fac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010fae:	4b1a      	ldr	r3, [pc, #104]	@ (8011018 <prvSwitchTimerLists+0xc4>)
 8010fb0:	681a      	ldr	r2, [r3, #0]
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	3304      	adds	r3, #4
 8010fb6:	4619      	mov	r1, r3
 8010fb8:	4610      	mov	r0, r2
 8010fba:	f7fd fb12 	bl	800e5e2 <vListInsert>
 8010fbe:	e017      	b.n	8010ff0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	9300      	str	r3, [sp, #0]
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	693a      	ldr	r2, [r7, #16]
 8010fc8:	2100      	movs	r1, #0
 8010fca:	68f8      	ldr	r0, [r7, #12]
 8010fcc:	f7ff fd58 	bl	8010a80 <xTimerGenericCommand>
 8010fd0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d10b      	bne.n	8010ff0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8010fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fdc:	f383 8811 	msr	BASEPRI, r3
 8010fe0:	f3bf 8f6f 	isb	sy
 8010fe4:	f3bf 8f4f 	dsb	sy
 8010fe8:	603b      	str	r3, [r7, #0]
}
 8010fea:	bf00      	nop
 8010fec:	bf00      	nop
 8010fee:	e7fd      	b.n	8010fec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010ff0:	4b09      	ldr	r3, [pc, #36]	@ (8011018 <prvSwitchTimerLists+0xc4>)
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d1b0      	bne.n	8010f5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010ffa:	4b07      	ldr	r3, [pc, #28]	@ (8011018 <prvSwitchTimerLists+0xc4>)
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011000:	4b06      	ldr	r3, [pc, #24]	@ (801101c <prvSwitchTimerLists+0xc8>)
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	4a04      	ldr	r2, [pc, #16]	@ (8011018 <prvSwitchTimerLists+0xc4>)
 8011006:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011008:	4a04      	ldr	r2, [pc, #16]	@ (801101c <prvSwitchTimerLists+0xc8>)
 801100a:	697b      	ldr	r3, [r7, #20]
 801100c:	6013      	str	r3, [r2, #0]
}
 801100e:	bf00      	nop
 8011010:	3718      	adds	r7, #24
 8011012:	46bd      	mov	sp, r7
 8011014:	bd80      	pop	{r7, pc}
 8011016:	bf00      	nop
 8011018:	24033a10 	.word	0x24033a10
 801101c:	24033a14 	.word	0x24033a14

08011020 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b082      	sub	sp, #8
 8011024:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011026:	f000 f96f 	bl	8011308 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801102a:	4b15      	ldr	r3, [pc, #84]	@ (8011080 <prvCheckForValidListAndQueue+0x60>)
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d120      	bne.n	8011074 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011032:	4814      	ldr	r0, [pc, #80]	@ (8011084 <prvCheckForValidListAndQueue+0x64>)
 8011034:	f7fd fa84 	bl	800e540 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011038:	4813      	ldr	r0, [pc, #76]	@ (8011088 <prvCheckForValidListAndQueue+0x68>)
 801103a:	f7fd fa81 	bl	800e540 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801103e:	4b13      	ldr	r3, [pc, #76]	@ (801108c <prvCheckForValidListAndQueue+0x6c>)
 8011040:	4a10      	ldr	r2, [pc, #64]	@ (8011084 <prvCheckForValidListAndQueue+0x64>)
 8011042:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011044:	4b12      	ldr	r3, [pc, #72]	@ (8011090 <prvCheckForValidListAndQueue+0x70>)
 8011046:	4a10      	ldr	r2, [pc, #64]	@ (8011088 <prvCheckForValidListAndQueue+0x68>)
 8011048:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801104a:	2300      	movs	r3, #0
 801104c:	9300      	str	r3, [sp, #0]
 801104e:	4b11      	ldr	r3, [pc, #68]	@ (8011094 <prvCheckForValidListAndQueue+0x74>)
 8011050:	4a11      	ldr	r2, [pc, #68]	@ (8011098 <prvCheckForValidListAndQueue+0x78>)
 8011052:	2110      	movs	r1, #16
 8011054:	200a      	movs	r0, #10
 8011056:	f7fd fb91 	bl	800e77c <xQueueGenericCreateStatic>
 801105a:	4603      	mov	r3, r0
 801105c:	4a08      	ldr	r2, [pc, #32]	@ (8011080 <prvCheckForValidListAndQueue+0x60>)
 801105e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011060:	4b07      	ldr	r3, [pc, #28]	@ (8011080 <prvCheckForValidListAndQueue+0x60>)
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d005      	beq.n	8011074 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011068:	4b05      	ldr	r3, [pc, #20]	@ (8011080 <prvCheckForValidListAndQueue+0x60>)
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	490b      	ldr	r1, [pc, #44]	@ (801109c <prvCheckForValidListAndQueue+0x7c>)
 801106e:	4618      	mov	r0, r3
 8011070:	f7fe f9d2 	bl	800f418 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011074:	f000 f97a 	bl	801136c <vPortExitCritical>
}
 8011078:	bf00      	nop
 801107a:	46bd      	mov	sp, r7
 801107c:	bd80      	pop	{r7, pc}
 801107e:	bf00      	nop
 8011080:	24033a18 	.word	0x24033a18
 8011084:	240339e8 	.word	0x240339e8
 8011088:	240339fc 	.word	0x240339fc
 801108c:	24033a10 	.word	0x24033a10
 8011090:	24033a14 	.word	0x24033a14
 8011094:	24033ac4 	.word	0x24033ac4
 8011098:	24033a24 	.word	0x24033a24
 801109c:	08023338 	.word	0x08023338

080110a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80110a0:	b480      	push	{r7}
 80110a2:	b085      	sub	sp, #20
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	60f8      	str	r0, [r7, #12]
 80110a8:	60b9      	str	r1, [r7, #8]
 80110aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	3b04      	subs	r3, #4
 80110b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80110b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	3b04      	subs	r3, #4
 80110be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80110c0:	68bb      	ldr	r3, [r7, #8]
 80110c2:	f023 0201 	bic.w	r2, r3, #1
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	3b04      	subs	r3, #4
 80110ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80110d0:	4a0c      	ldr	r2, [pc, #48]	@ (8011104 <pxPortInitialiseStack+0x64>)
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	3b14      	subs	r3, #20
 80110da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80110dc:	687a      	ldr	r2, [r7, #4]
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	3b04      	subs	r3, #4
 80110e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	f06f 0202 	mvn.w	r2, #2
 80110ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	3b20      	subs	r3, #32
 80110f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80110f6:	68fb      	ldr	r3, [r7, #12]
}
 80110f8:	4618      	mov	r0, r3
 80110fa:	3714      	adds	r7, #20
 80110fc:	46bd      	mov	sp, r7
 80110fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011102:	4770      	bx	lr
 8011104:	08011109 	.word	0x08011109

08011108 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011108:	b480      	push	{r7}
 801110a:	b085      	sub	sp, #20
 801110c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801110e:	2300      	movs	r3, #0
 8011110:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011112:	4b13      	ldr	r3, [pc, #76]	@ (8011160 <prvTaskExitError+0x58>)
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801111a:	d00b      	beq.n	8011134 <prvTaskExitError+0x2c>
	__asm volatile
 801111c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011120:	f383 8811 	msr	BASEPRI, r3
 8011124:	f3bf 8f6f 	isb	sy
 8011128:	f3bf 8f4f 	dsb	sy
 801112c:	60fb      	str	r3, [r7, #12]
}
 801112e:	bf00      	nop
 8011130:	bf00      	nop
 8011132:	e7fd      	b.n	8011130 <prvTaskExitError+0x28>
	__asm volatile
 8011134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011138:	f383 8811 	msr	BASEPRI, r3
 801113c:	f3bf 8f6f 	isb	sy
 8011140:	f3bf 8f4f 	dsb	sy
 8011144:	60bb      	str	r3, [r7, #8]
}
 8011146:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011148:	bf00      	nop
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d0fc      	beq.n	801114a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011150:	bf00      	nop
 8011152:	bf00      	nop
 8011154:	3714      	adds	r7, #20
 8011156:	46bd      	mov	sp, r7
 8011158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115c:	4770      	bx	lr
 801115e:	bf00      	nop
 8011160:	24000014 	.word	0x24000014
	...

08011170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011170:	4b07      	ldr	r3, [pc, #28]	@ (8011190 <pxCurrentTCBConst2>)
 8011172:	6819      	ldr	r1, [r3, #0]
 8011174:	6808      	ldr	r0, [r1, #0]
 8011176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801117a:	f380 8809 	msr	PSP, r0
 801117e:	f3bf 8f6f 	isb	sy
 8011182:	f04f 0000 	mov.w	r0, #0
 8011186:	f380 8811 	msr	BASEPRI, r0
 801118a:	4770      	bx	lr
 801118c:	f3af 8000 	nop.w

08011190 <pxCurrentTCBConst2>:
 8011190:	240334e8 	.word	0x240334e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011194:	bf00      	nop
 8011196:	bf00      	nop

08011198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011198:	4808      	ldr	r0, [pc, #32]	@ (80111bc <prvPortStartFirstTask+0x24>)
 801119a:	6800      	ldr	r0, [r0, #0]
 801119c:	6800      	ldr	r0, [r0, #0]
 801119e:	f380 8808 	msr	MSP, r0
 80111a2:	f04f 0000 	mov.w	r0, #0
 80111a6:	f380 8814 	msr	CONTROL, r0
 80111aa:	b662      	cpsie	i
 80111ac:	b661      	cpsie	f
 80111ae:	f3bf 8f4f 	dsb	sy
 80111b2:	f3bf 8f6f 	isb	sy
 80111b6:	df00      	svc	0
 80111b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80111ba:	bf00      	nop
 80111bc:	e000ed08 	.word	0xe000ed08

080111c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b086      	sub	sp, #24
 80111c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80111c6:	4b47      	ldr	r3, [pc, #284]	@ (80112e4 <xPortStartScheduler+0x124>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	4a47      	ldr	r2, [pc, #284]	@ (80112e8 <xPortStartScheduler+0x128>)
 80111cc:	4293      	cmp	r3, r2
 80111ce:	d10b      	bne.n	80111e8 <xPortStartScheduler+0x28>
	__asm volatile
 80111d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111d4:	f383 8811 	msr	BASEPRI, r3
 80111d8:	f3bf 8f6f 	isb	sy
 80111dc:	f3bf 8f4f 	dsb	sy
 80111e0:	613b      	str	r3, [r7, #16]
}
 80111e2:	bf00      	nop
 80111e4:	bf00      	nop
 80111e6:	e7fd      	b.n	80111e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80111e8:	4b3e      	ldr	r3, [pc, #248]	@ (80112e4 <xPortStartScheduler+0x124>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	4a3f      	ldr	r2, [pc, #252]	@ (80112ec <xPortStartScheduler+0x12c>)
 80111ee:	4293      	cmp	r3, r2
 80111f0:	d10b      	bne.n	801120a <xPortStartScheduler+0x4a>
	__asm volatile
 80111f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111f6:	f383 8811 	msr	BASEPRI, r3
 80111fa:	f3bf 8f6f 	isb	sy
 80111fe:	f3bf 8f4f 	dsb	sy
 8011202:	60fb      	str	r3, [r7, #12]
}
 8011204:	bf00      	nop
 8011206:	bf00      	nop
 8011208:	e7fd      	b.n	8011206 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801120a:	4b39      	ldr	r3, [pc, #228]	@ (80112f0 <xPortStartScheduler+0x130>)
 801120c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801120e:	697b      	ldr	r3, [r7, #20]
 8011210:	781b      	ldrb	r3, [r3, #0]
 8011212:	b2db      	uxtb	r3, r3
 8011214:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011216:	697b      	ldr	r3, [r7, #20]
 8011218:	22ff      	movs	r2, #255	@ 0xff
 801121a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801121c:	697b      	ldr	r3, [r7, #20]
 801121e:	781b      	ldrb	r3, [r3, #0]
 8011220:	b2db      	uxtb	r3, r3
 8011222:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011224:	78fb      	ldrb	r3, [r7, #3]
 8011226:	b2db      	uxtb	r3, r3
 8011228:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801122c:	b2da      	uxtb	r2, r3
 801122e:	4b31      	ldr	r3, [pc, #196]	@ (80112f4 <xPortStartScheduler+0x134>)
 8011230:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011232:	4b31      	ldr	r3, [pc, #196]	@ (80112f8 <xPortStartScheduler+0x138>)
 8011234:	2207      	movs	r2, #7
 8011236:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011238:	e009      	b.n	801124e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801123a:	4b2f      	ldr	r3, [pc, #188]	@ (80112f8 <xPortStartScheduler+0x138>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	3b01      	subs	r3, #1
 8011240:	4a2d      	ldr	r2, [pc, #180]	@ (80112f8 <xPortStartScheduler+0x138>)
 8011242:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011244:	78fb      	ldrb	r3, [r7, #3]
 8011246:	b2db      	uxtb	r3, r3
 8011248:	005b      	lsls	r3, r3, #1
 801124a:	b2db      	uxtb	r3, r3
 801124c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801124e:	78fb      	ldrb	r3, [r7, #3]
 8011250:	b2db      	uxtb	r3, r3
 8011252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011256:	2b80      	cmp	r3, #128	@ 0x80
 8011258:	d0ef      	beq.n	801123a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801125a:	4b27      	ldr	r3, [pc, #156]	@ (80112f8 <xPortStartScheduler+0x138>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	f1c3 0307 	rsb	r3, r3, #7
 8011262:	2b04      	cmp	r3, #4
 8011264:	d00b      	beq.n	801127e <xPortStartScheduler+0xbe>
	__asm volatile
 8011266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801126a:	f383 8811 	msr	BASEPRI, r3
 801126e:	f3bf 8f6f 	isb	sy
 8011272:	f3bf 8f4f 	dsb	sy
 8011276:	60bb      	str	r3, [r7, #8]
}
 8011278:	bf00      	nop
 801127a:	bf00      	nop
 801127c:	e7fd      	b.n	801127a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801127e:	4b1e      	ldr	r3, [pc, #120]	@ (80112f8 <xPortStartScheduler+0x138>)
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	021b      	lsls	r3, r3, #8
 8011284:	4a1c      	ldr	r2, [pc, #112]	@ (80112f8 <xPortStartScheduler+0x138>)
 8011286:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011288:	4b1b      	ldr	r3, [pc, #108]	@ (80112f8 <xPortStartScheduler+0x138>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011290:	4a19      	ldr	r2, [pc, #100]	@ (80112f8 <xPortStartScheduler+0x138>)
 8011292:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	b2da      	uxtb	r2, r3
 8011298:	697b      	ldr	r3, [r7, #20]
 801129a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801129c:	4b17      	ldr	r3, [pc, #92]	@ (80112fc <xPortStartScheduler+0x13c>)
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	4a16      	ldr	r2, [pc, #88]	@ (80112fc <xPortStartScheduler+0x13c>)
 80112a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80112a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80112a8:	4b14      	ldr	r3, [pc, #80]	@ (80112fc <xPortStartScheduler+0x13c>)
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	4a13      	ldr	r2, [pc, #76]	@ (80112fc <xPortStartScheduler+0x13c>)
 80112ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80112b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80112b4:	f000 f8da 	bl	801146c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80112b8:	4b11      	ldr	r3, [pc, #68]	@ (8011300 <xPortStartScheduler+0x140>)
 80112ba:	2200      	movs	r2, #0
 80112bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80112be:	f000 f8f9 	bl	80114b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80112c2:	4b10      	ldr	r3, [pc, #64]	@ (8011304 <xPortStartScheduler+0x144>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	4a0f      	ldr	r2, [pc, #60]	@ (8011304 <xPortStartScheduler+0x144>)
 80112c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80112cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80112ce:	f7ff ff63 	bl	8011198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80112d2:	f7fe fceb 	bl	800fcac <vTaskSwitchContext>
	prvTaskExitError();
 80112d6:	f7ff ff17 	bl	8011108 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80112da:	2300      	movs	r3, #0
}
 80112dc:	4618      	mov	r0, r3
 80112de:	3718      	adds	r7, #24
 80112e0:	46bd      	mov	sp, r7
 80112e2:	bd80      	pop	{r7, pc}
 80112e4:	e000ed00 	.word	0xe000ed00
 80112e8:	410fc271 	.word	0x410fc271
 80112ec:	410fc270 	.word	0x410fc270
 80112f0:	e000e400 	.word	0xe000e400
 80112f4:	24033b14 	.word	0x24033b14
 80112f8:	24033b18 	.word	0x24033b18
 80112fc:	e000ed20 	.word	0xe000ed20
 8011300:	24000014 	.word	0x24000014
 8011304:	e000ef34 	.word	0xe000ef34

08011308 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011308:	b480      	push	{r7}
 801130a:	b083      	sub	sp, #12
 801130c:	af00      	add	r7, sp, #0
	__asm volatile
 801130e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011312:	f383 8811 	msr	BASEPRI, r3
 8011316:	f3bf 8f6f 	isb	sy
 801131a:	f3bf 8f4f 	dsb	sy
 801131e:	607b      	str	r3, [r7, #4]
}
 8011320:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011322:	4b10      	ldr	r3, [pc, #64]	@ (8011364 <vPortEnterCritical+0x5c>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	3301      	adds	r3, #1
 8011328:	4a0e      	ldr	r2, [pc, #56]	@ (8011364 <vPortEnterCritical+0x5c>)
 801132a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801132c:	4b0d      	ldr	r3, [pc, #52]	@ (8011364 <vPortEnterCritical+0x5c>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	2b01      	cmp	r3, #1
 8011332:	d110      	bne.n	8011356 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011334:	4b0c      	ldr	r3, [pc, #48]	@ (8011368 <vPortEnterCritical+0x60>)
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	b2db      	uxtb	r3, r3
 801133a:	2b00      	cmp	r3, #0
 801133c:	d00b      	beq.n	8011356 <vPortEnterCritical+0x4e>
	__asm volatile
 801133e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011342:	f383 8811 	msr	BASEPRI, r3
 8011346:	f3bf 8f6f 	isb	sy
 801134a:	f3bf 8f4f 	dsb	sy
 801134e:	603b      	str	r3, [r7, #0]
}
 8011350:	bf00      	nop
 8011352:	bf00      	nop
 8011354:	e7fd      	b.n	8011352 <vPortEnterCritical+0x4a>
	}
}
 8011356:	bf00      	nop
 8011358:	370c      	adds	r7, #12
 801135a:	46bd      	mov	sp, r7
 801135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011360:	4770      	bx	lr
 8011362:	bf00      	nop
 8011364:	24000014 	.word	0x24000014
 8011368:	e000ed04 	.word	0xe000ed04

0801136c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801136c:	b480      	push	{r7}
 801136e:	b083      	sub	sp, #12
 8011370:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011372:	4b12      	ldr	r3, [pc, #72]	@ (80113bc <vPortExitCritical+0x50>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d10b      	bne.n	8011392 <vPortExitCritical+0x26>
	__asm volatile
 801137a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801137e:	f383 8811 	msr	BASEPRI, r3
 8011382:	f3bf 8f6f 	isb	sy
 8011386:	f3bf 8f4f 	dsb	sy
 801138a:	607b      	str	r3, [r7, #4]
}
 801138c:	bf00      	nop
 801138e:	bf00      	nop
 8011390:	e7fd      	b.n	801138e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011392:	4b0a      	ldr	r3, [pc, #40]	@ (80113bc <vPortExitCritical+0x50>)
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	3b01      	subs	r3, #1
 8011398:	4a08      	ldr	r2, [pc, #32]	@ (80113bc <vPortExitCritical+0x50>)
 801139a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801139c:	4b07      	ldr	r3, [pc, #28]	@ (80113bc <vPortExitCritical+0x50>)
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d105      	bne.n	80113b0 <vPortExitCritical+0x44>
 80113a4:	2300      	movs	r3, #0
 80113a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80113a8:	683b      	ldr	r3, [r7, #0]
 80113aa:	f383 8811 	msr	BASEPRI, r3
}
 80113ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80113b0:	bf00      	nop
 80113b2:	370c      	adds	r7, #12
 80113b4:	46bd      	mov	sp, r7
 80113b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ba:	4770      	bx	lr
 80113bc:	24000014 	.word	0x24000014

080113c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80113c0:	f3ef 8009 	mrs	r0, PSP
 80113c4:	f3bf 8f6f 	isb	sy
 80113c8:	4b15      	ldr	r3, [pc, #84]	@ (8011420 <pxCurrentTCBConst>)
 80113ca:	681a      	ldr	r2, [r3, #0]
 80113cc:	f01e 0f10 	tst.w	lr, #16
 80113d0:	bf08      	it	eq
 80113d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80113d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113da:	6010      	str	r0, [r2, #0]
 80113dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80113e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80113e4:	f380 8811 	msr	BASEPRI, r0
 80113e8:	f3bf 8f4f 	dsb	sy
 80113ec:	f3bf 8f6f 	isb	sy
 80113f0:	f7fe fc5c 	bl	800fcac <vTaskSwitchContext>
 80113f4:	f04f 0000 	mov.w	r0, #0
 80113f8:	f380 8811 	msr	BASEPRI, r0
 80113fc:	bc09      	pop	{r0, r3}
 80113fe:	6819      	ldr	r1, [r3, #0]
 8011400:	6808      	ldr	r0, [r1, #0]
 8011402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011406:	f01e 0f10 	tst.w	lr, #16
 801140a:	bf08      	it	eq
 801140c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011410:	f380 8809 	msr	PSP, r0
 8011414:	f3bf 8f6f 	isb	sy
 8011418:	4770      	bx	lr
 801141a:	bf00      	nop
 801141c:	f3af 8000 	nop.w

08011420 <pxCurrentTCBConst>:
 8011420:	240334e8 	.word	0x240334e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011424:	bf00      	nop
 8011426:	bf00      	nop

08011428 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b082      	sub	sp, #8
 801142c:	af00      	add	r7, sp, #0
	__asm volatile
 801142e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011432:	f383 8811 	msr	BASEPRI, r3
 8011436:	f3bf 8f6f 	isb	sy
 801143a:	f3bf 8f4f 	dsb	sy
 801143e:	607b      	str	r3, [r7, #4]
}
 8011440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011442:	f7fe fb79 	bl	800fb38 <xTaskIncrementTick>
 8011446:	4603      	mov	r3, r0
 8011448:	2b00      	cmp	r3, #0
 801144a:	d003      	beq.n	8011454 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801144c:	4b06      	ldr	r3, [pc, #24]	@ (8011468 <xPortSysTickHandler+0x40>)
 801144e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011452:	601a      	str	r2, [r3, #0]
 8011454:	2300      	movs	r3, #0
 8011456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011458:	683b      	ldr	r3, [r7, #0]
 801145a:	f383 8811 	msr	BASEPRI, r3
}
 801145e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011460:	bf00      	nop
 8011462:	3708      	adds	r7, #8
 8011464:	46bd      	mov	sp, r7
 8011466:	bd80      	pop	{r7, pc}
 8011468:	e000ed04 	.word	0xe000ed04

0801146c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801146c:	b480      	push	{r7}
 801146e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011470:	4b0b      	ldr	r3, [pc, #44]	@ (80114a0 <vPortSetupTimerInterrupt+0x34>)
 8011472:	2200      	movs	r2, #0
 8011474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011476:	4b0b      	ldr	r3, [pc, #44]	@ (80114a4 <vPortSetupTimerInterrupt+0x38>)
 8011478:	2200      	movs	r2, #0
 801147a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801147c:	4b0a      	ldr	r3, [pc, #40]	@ (80114a8 <vPortSetupTimerInterrupt+0x3c>)
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	4a0a      	ldr	r2, [pc, #40]	@ (80114ac <vPortSetupTimerInterrupt+0x40>)
 8011482:	fba2 2303 	umull	r2, r3, r2, r3
 8011486:	099b      	lsrs	r3, r3, #6
 8011488:	4a09      	ldr	r2, [pc, #36]	@ (80114b0 <vPortSetupTimerInterrupt+0x44>)
 801148a:	3b01      	subs	r3, #1
 801148c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801148e:	4b04      	ldr	r3, [pc, #16]	@ (80114a0 <vPortSetupTimerInterrupt+0x34>)
 8011490:	2207      	movs	r2, #7
 8011492:	601a      	str	r2, [r3, #0]
}
 8011494:	bf00      	nop
 8011496:	46bd      	mov	sp, r7
 8011498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149c:	4770      	bx	lr
 801149e:	bf00      	nop
 80114a0:	e000e010 	.word	0xe000e010
 80114a4:	e000e018 	.word	0xe000e018
 80114a8:	24000004 	.word	0x24000004
 80114ac:	10624dd3 	.word	0x10624dd3
 80114b0:	e000e014 	.word	0xe000e014

080114b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80114b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80114c4 <vPortEnableVFP+0x10>
 80114b8:	6801      	ldr	r1, [r0, #0]
 80114ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80114be:	6001      	str	r1, [r0, #0]
 80114c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80114c2:	bf00      	nop
 80114c4:	e000ed88 	.word	0xe000ed88

080114c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80114c8:	b480      	push	{r7}
 80114ca:	b085      	sub	sp, #20
 80114cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80114ce:	f3ef 8305 	mrs	r3, IPSR
 80114d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	2b0f      	cmp	r3, #15
 80114d8:	d915      	bls.n	8011506 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80114da:	4a18      	ldr	r2, [pc, #96]	@ (801153c <vPortValidateInterruptPriority+0x74>)
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	4413      	add	r3, r2
 80114e0:	781b      	ldrb	r3, [r3, #0]
 80114e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80114e4:	4b16      	ldr	r3, [pc, #88]	@ (8011540 <vPortValidateInterruptPriority+0x78>)
 80114e6:	781b      	ldrb	r3, [r3, #0]
 80114e8:	7afa      	ldrb	r2, [r7, #11]
 80114ea:	429a      	cmp	r2, r3
 80114ec:	d20b      	bcs.n	8011506 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80114ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114f2:	f383 8811 	msr	BASEPRI, r3
 80114f6:	f3bf 8f6f 	isb	sy
 80114fa:	f3bf 8f4f 	dsb	sy
 80114fe:	607b      	str	r3, [r7, #4]
}
 8011500:	bf00      	nop
 8011502:	bf00      	nop
 8011504:	e7fd      	b.n	8011502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011506:	4b0f      	ldr	r3, [pc, #60]	@ (8011544 <vPortValidateInterruptPriority+0x7c>)
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801150e:	4b0e      	ldr	r3, [pc, #56]	@ (8011548 <vPortValidateInterruptPriority+0x80>)
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	429a      	cmp	r2, r3
 8011514:	d90b      	bls.n	801152e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8011516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801151a:	f383 8811 	msr	BASEPRI, r3
 801151e:	f3bf 8f6f 	isb	sy
 8011522:	f3bf 8f4f 	dsb	sy
 8011526:	603b      	str	r3, [r7, #0]
}
 8011528:	bf00      	nop
 801152a:	bf00      	nop
 801152c:	e7fd      	b.n	801152a <vPortValidateInterruptPriority+0x62>
	}
 801152e:	bf00      	nop
 8011530:	3714      	adds	r7, #20
 8011532:	46bd      	mov	sp, r7
 8011534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011538:	4770      	bx	lr
 801153a:	bf00      	nop
 801153c:	e000e3f0 	.word	0xe000e3f0
 8011540:	24033b14 	.word	0x24033b14
 8011544:	e000ed0c 	.word	0xe000ed0c
 8011548:	24033b18 	.word	0x24033b18

0801154c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801154c:	b580      	push	{r7, lr}
 801154e:	b08a      	sub	sp, #40	@ 0x28
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011554:	2300      	movs	r3, #0
 8011556:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011558:	f7fe fa20 	bl	800f99c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801155c:	4b5c      	ldr	r3, [pc, #368]	@ (80116d0 <pvPortMalloc+0x184>)
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d101      	bne.n	8011568 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011564:	f000 f924 	bl	80117b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011568:	4b5a      	ldr	r3, [pc, #360]	@ (80116d4 <pvPortMalloc+0x188>)
 801156a:	681a      	ldr	r2, [r3, #0]
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	4013      	ands	r3, r2
 8011570:	2b00      	cmp	r3, #0
 8011572:	f040 8095 	bne.w	80116a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d01e      	beq.n	80115ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801157c:	2208      	movs	r2, #8
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	4413      	add	r3, r2
 8011582:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	f003 0307 	and.w	r3, r3, #7
 801158a:	2b00      	cmp	r3, #0
 801158c:	d015      	beq.n	80115ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	f023 0307 	bic.w	r3, r3, #7
 8011594:	3308      	adds	r3, #8
 8011596:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f003 0307 	and.w	r3, r3, #7
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d00b      	beq.n	80115ba <pvPortMalloc+0x6e>
	__asm volatile
 80115a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115a6:	f383 8811 	msr	BASEPRI, r3
 80115aa:	f3bf 8f6f 	isb	sy
 80115ae:	f3bf 8f4f 	dsb	sy
 80115b2:	617b      	str	r3, [r7, #20]
}
 80115b4:	bf00      	nop
 80115b6:	bf00      	nop
 80115b8:	e7fd      	b.n	80115b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d06f      	beq.n	80116a0 <pvPortMalloc+0x154>
 80115c0:	4b45      	ldr	r3, [pc, #276]	@ (80116d8 <pvPortMalloc+0x18c>)
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	687a      	ldr	r2, [r7, #4]
 80115c6:	429a      	cmp	r2, r3
 80115c8:	d86a      	bhi.n	80116a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80115ca:	4b44      	ldr	r3, [pc, #272]	@ (80116dc <pvPortMalloc+0x190>)
 80115cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80115ce:	4b43      	ldr	r3, [pc, #268]	@ (80116dc <pvPortMalloc+0x190>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80115d4:	e004      	b.n	80115e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80115d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80115da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80115e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115e2:	685b      	ldr	r3, [r3, #4]
 80115e4:	687a      	ldr	r2, [r7, #4]
 80115e6:	429a      	cmp	r2, r3
 80115e8:	d903      	bls.n	80115f2 <pvPortMalloc+0xa6>
 80115ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d1f1      	bne.n	80115d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80115f2:	4b37      	ldr	r3, [pc, #220]	@ (80116d0 <pvPortMalloc+0x184>)
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80115f8:	429a      	cmp	r2, r3
 80115fa:	d051      	beq.n	80116a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80115fc:	6a3b      	ldr	r3, [r7, #32]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	2208      	movs	r2, #8
 8011602:	4413      	add	r3, r2
 8011604:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011608:	681a      	ldr	r2, [r3, #0]
 801160a:	6a3b      	ldr	r3, [r7, #32]
 801160c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011610:	685a      	ldr	r2, [r3, #4]
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	1ad2      	subs	r2, r2, r3
 8011616:	2308      	movs	r3, #8
 8011618:	005b      	lsls	r3, r3, #1
 801161a:	429a      	cmp	r2, r3
 801161c:	d920      	bls.n	8011660 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801161e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	4413      	add	r3, r2
 8011624:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011626:	69bb      	ldr	r3, [r7, #24]
 8011628:	f003 0307 	and.w	r3, r3, #7
 801162c:	2b00      	cmp	r3, #0
 801162e:	d00b      	beq.n	8011648 <pvPortMalloc+0xfc>
	__asm volatile
 8011630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011634:	f383 8811 	msr	BASEPRI, r3
 8011638:	f3bf 8f6f 	isb	sy
 801163c:	f3bf 8f4f 	dsb	sy
 8011640:	613b      	str	r3, [r7, #16]
}
 8011642:	bf00      	nop
 8011644:	bf00      	nop
 8011646:	e7fd      	b.n	8011644 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801164a:	685a      	ldr	r2, [r3, #4]
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	1ad2      	subs	r2, r2, r3
 8011650:	69bb      	ldr	r3, [r7, #24]
 8011652:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011656:	687a      	ldr	r2, [r7, #4]
 8011658:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801165a:	69b8      	ldr	r0, [r7, #24]
 801165c:	f000 f90c 	bl	8011878 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011660:	4b1d      	ldr	r3, [pc, #116]	@ (80116d8 <pvPortMalloc+0x18c>)
 8011662:	681a      	ldr	r2, [r3, #0]
 8011664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011666:	685b      	ldr	r3, [r3, #4]
 8011668:	1ad3      	subs	r3, r2, r3
 801166a:	4a1b      	ldr	r2, [pc, #108]	@ (80116d8 <pvPortMalloc+0x18c>)
 801166c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801166e:	4b1a      	ldr	r3, [pc, #104]	@ (80116d8 <pvPortMalloc+0x18c>)
 8011670:	681a      	ldr	r2, [r3, #0]
 8011672:	4b1b      	ldr	r3, [pc, #108]	@ (80116e0 <pvPortMalloc+0x194>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	429a      	cmp	r2, r3
 8011678:	d203      	bcs.n	8011682 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801167a:	4b17      	ldr	r3, [pc, #92]	@ (80116d8 <pvPortMalloc+0x18c>)
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	4a18      	ldr	r2, [pc, #96]	@ (80116e0 <pvPortMalloc+0x194>)
 8011680:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011684:	685a      	ldr	r2, [r3, #4]
 8011686:	4b13      	ldr	r3, [pc, #76]	@ (80116d4 <pvPortMalloc+0x188>)
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	431a      	orrs	r2, r3
 801168c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801168e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011692:	2200      	movs	r2, #0
 8011694:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011696:	4b13      	ldr	r3, [pc, #76]	@ (80116e4 <pvPortMalloc+0x198>)
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	3301      	adds	r3, #1
 801169c:	4a11      	ldr	r2, [pc, #68]	@ (80116e4 <pvPortMalloc+0x198>)
 801169e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80116a0:	f7fe f98a 	bl	800f9b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80116a4:	69fb      	ldr	r3, [r7, #28]
 80116a6:	f003 0307 	and.w	r3, r3, #7
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d00b      	beq.n	80116c6 <pvPortMalloc+0x17a>
	__asm volatile
 80116ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116b2:	f383 8811 	msr	BASEPRI, r3
 80116b6:	f3bf 8f6f 	isb	sy
 80116ba:	f3bf 8f4f 	dsb	sy
 80116be:	60fb      	str	r3, [r7, #12]
}
 80116c0:	bf00      	nop
 80116c2:	bf00      	nop
 80116c4:	e7fd      	b.n	80116c2 <pvPortMalloc+0x176>
	return pvReturn;
 80116c6:	69fb      	ldr	r3, [r7, #28]
}
 80116c8:	4618      	mov	r0, r3
 80116ca:	3728      	adds	r7, #40	@ 0x28
 80116cc:	46bd      	mov	sp, r7
 80116ce:	bd80      	pop	{r7, pc}
 80116d0:	24064864 	.word	0x24064864
 80116d4:	24064878 	.word	0x24064878
 80116d8:	24064868 	.word	0x24064868
 80116dc:	2406485c 	.word	0x2406485c
 80116e0:	2406486c 	.word	0x2406486c
 80116e4:	24064870 	.word	0x24064870

080116e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b086      	sub	sp, #24
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d04f      	beq.n	801179a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80116fa:	2308      	movs	r3, #8
 80116fc:	425b      	negs	r3, r3
 80116fe:	697a      	ldr	r2, [r7, #20]
 8011700:	4413      	add	r3, r2
 8011702:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011704:	697b      	ldr	r3, [r7, #20]
 8011706:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011708:	693b      	ldr	r3, [r7, #16]
 801170a:	685a      	ldr	r2, [r3, #4]
 801170c:	4b25      	ldr	r3, [pc, #148]	@ (80117a4 <vPortFree+0xbc>)
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	4013      	ands	r3, r2
 8011712:	2b00      	cmp	r3, #0
 8011714:	d10b      	bne.n	801172e <vPortFree+0x46>
	__asm volatile
 8011716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801171a:	f383 8811 	msr	BASEPRI, r3
 801171e:	f3bf 8f6f 	isb	sy
 8011722:	f3bf 8f4f 	dsb	sy
 8011726:	60fb      	str	r3, [r7, #12]
}
 8011728:	bf00      	nop
 801172a:	bf00      	nop
 801172c:	e7fd      	b.n	801172a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801172e:	693b      	ldr	r3, [r7, #16]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d00b      	beq.n	801174e <vPortFree+0x66>
	__asm volatile
 8011736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801173a:	f383 8811 	msr	BASEPRI, r3
 801173e:	f3bf 8f6f 	isb	sy
 8011742:	f3bf 8f4f 	dsb	sy
 8011746:	60bb      	str	r3, [r7, #8]
}
 8011748:	bf00      	nop
 801174a:	bf00      	nop
 801174c:	e7fd      	b.n	801174a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801174e:	693b      	ldr	r3, [r7, #16]
 8011750:	685a      	ldr	r2, [r3, #4]
 8011752:	4b14      	ldr	r3, [pc, #80]	@ (80117a4 <vPortFree+0xbc>)
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	4013      	ands	r3, r2
 8011758:	2b00      	cmp	r3, #0
 801175a:	d01e      	beq.n	801179a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801175c:	693b      	ldr	r3, [r7, #16]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d11a      	bne.n	801179a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011764:	693b      	ldr	r3, [r7, #16]
 8011766:	685a      	ldr	r2, [r3, #4]
 8011768:	4b0e      	ldr	r3, [pc, #56]	@ (80117a4 <vPortFree+0xbc>)
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	43db      	mvns	r3, r3
 801176e:	401a      	ands	r2, r3
 8011770:	693b      	ldr	r3, [r7, #16]
 8011772:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011774:	f7fe f912 	bl	800f99c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011778:	693b      	ldr	r3, [r7, #16]
 801177a:	685a      	ldr	r2, [r3, #4]
 801177c:	4b0a      	ldr	r3, [pc, #40]	@ (80117a8 <vPortFree+0xc0>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	4413      	add	r3, r2
 8011782:	4a09      	ldr	r2, [pc, #36]	@ (80117a8 <vPortFree+0xc0>)
 8011784:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011786:	6938      	ldr	r0, [r7, #16]
 8011788:	f000 f876 	bl	8011878 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801178c:	4b07      	ldr	r3, [pc, #28]	@ (80117ac <vPortFree+0xc4>)
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	3301      	adds	r3, #1
 8011792:	4a06      	ldr	r2, [pc, #24]	@ (80117ac <vPortFree+0xc4>)
 8011794:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011796:	f7fe f90f 	bl	800f9b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801179a:	bf00      	nop
 801179c:	3718      	adds	r7, #24
 801179e:	46bd      	mov	sp, r7
 80117a0:	bd80      	pop	{r7, pc}
 80117a2:	bf00      	nop
 80117a4:	24064878 	.word	0x24064878
 80117a8:	24064868 	.word	0x24064868
 80117ac:	24064874 	.word	0x24064874

080117b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80117b0:	b480      	push	{r7}
 80117b2:	b085      	sub	sp, #20
 80117b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80117b6:	4b29      	ldr	r3, [pc, #164]	@ (801185c <prvHeapInit+0xac>)
 80117b8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80117ba:	4b29      	ldr	r3, [pc, #164]	@ (8011860 <prvHeapInit+0xb0>)
 80117bc:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	f003 0307 	and.w	r3, r3, #7
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d00c      	beq.n	80117e2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	3307      	adds	r3, #7
 80117cc:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	f023 0307 	bic.w	r3, r3, #7
 80117d4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80117d6:	68ba      	ldr	r2, [r7, #8]
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	1ad3      	subs	r3, r2, r3
 80117dc:	4a20      	ldr	r2, [pc, #128]	@ (8011860 <prvHeapInit+0xb0>)
 80117de:	4413      	add	r3, r2
 80117e0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80117e6:	4a1f      	ldr	r2, [pc, #124]	@ (8011864 <prvHeapInit+0xb4>)
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80117ec:	4b1d      	ldr	r3, [pc, #116]	@ (8011864 <prvHeapInit+0xb4>)
 80117ee:	2200      	movs	r2, #0
 80117f0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	68ba      	ldr	r2, [r7, #8]
 80117f6:	4413      	add	r3, r2
 80117f8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80117fa:	2208      	movs	r2, #8
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	1a9b      	subs	r3, r3, r2
 8011800:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	f023 0307 	bic.w	r3, r3, #7
 8011808:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	4a16      	ldr	r2, [pc, #88]	@ (8011868 <prvHeapInit+0xb8>)
 801180e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011810:	4b15      	ldr	r3, [pc, #84]	@ (8011868 <prvHeapInit+0xb8>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	2200      	movs	r2, #0
 8011816:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011818:	4b13      	ldr	r3, [pc, #76]	@ (8011868 <prvHeapInit+0xb8>)
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	2200      	movs	r2, #0
 801181e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011824:	683b      	ldr	r3, [r7, #0]
 8011826:	68fa      	ldr	r2, [r7, #12]
 8011828:	1ad2      	subs	r2, r2, r3
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801182e:	4b0e      	ldr	r3, [pc, #56]	@ (8011868 <prvHeapInit+0xb8>)
 8011830:	681a      	ldr	r2, [r3, #0]
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011836:	683b      	ldr	r3, [r7, #0]
 8011838:	685b      	ldr	r3, [r3, #4]
 801183a:	4a0c      	ldr	r2, [pc, #48]	@ (801186c <prvHeapInit+0xbc>)
 801183c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801183e:	683b      	ldr	r3, [r7, #0]
 8011840:	685b      	ldr	r3, [r3, #4]
 8011842:	4a0b      	ldr	r2, [pc, #44]	@ (8011870 <prvHeapInit+0xc0>)
 8011844:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011846:	4b0b      	ldr	r3, [pc, #44]	@ (8011874 <prvHeapInit+0xc4>)
 8011848:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801184c:	601a      	str	r2, [r3, #0]
}
 801184e:	bf00      	nop
 8011850:	3714      	adds	r7, #20
 8011852:	46bd      	mov	sp, r7
 8011854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011858:	4770      	bx	lr
 801185a:	bf00      	nop
 801185c:	00030d40 	.word	0x00030d40
 8011860:	24033b1c 	.word	0x24033b1c
 8011864:	2406485c 	.word	0x2406485c
 8011868:	24064864 	.word	0x24064864
 801186c:	2406486c 	.word	0x2406486c
 8011870:	24064868 	.word	0x24064868
 8011874:	24064878 	.word	0x24064878

08011878 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011878:	b480      	push	{r7}
 801187a:	b085      	sub	sp, #20
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011880:	4b28      	ldr	r3, [pc, #160]	@ (8011924 <prvInsertBlockIntoFreeList+0xac>)
 8011882:	60fb      	str	r3, [r7, #12]
 8011884:	e002      	b.n	801188c <prvInsertBlockIntoFreeList+0x14>
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	60fb      	str	r3, [r7, #12]
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	687a      	ldr	r2, [r7, #4]
 8011892:	429a      	cmp	r2, r3
 8011894:	d8f7      	bhi.n	8011886 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	685b      	ldr	r3, [r3, #4]
 801189e:	68ba      	ldr	r2, [r7, #8]
 80118a0:	4413      	add	r3, r2
 80118a2:	687a      	ldr	r2, [r7, #4]
 80118a4:	429a      	cmp	r2, r3
 80118a6:	d108      	bne.n	80118ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	685a      	ldr	r2, [r3, #4]
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	685b      	ldr	r3, [r3, #4]
 80118b0:	441a      	add	r2, r3
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	685b      	ldr	r3, [r3, #4]
 80118c2:	68ba      	ldr	r2, [r7, #8]
 80118c4:	441a      	add	r2, r3
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	429a      	cmp	r2, r3
 80118cc:	d118      	bne.n	8011900 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	681a      	ldr	r2, [r3, #0]
 80118d2:	4b15      	ldr	r3, [pc, #84]	@ (8011928 <prvInsertBlockIntoFreeList+0xb0>)
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	429a      	cmp	r2, r3
 80118d8:	d00d      	beq.n	80118f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	685a      	ldr	r2, [r3, #4]
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	685b      	ldr	r3, [r3, #4]
 80118e4:	441a      	add	r2, r3
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	681a      	ldr	r2, [r3, #0]
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	601a      	str	r2, [r3, #0]
 80118f4:	e008      	b.n	8011908 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80118f6:	4b0c      	ldr	r3, [pc, #48]	@ (8011928 <prvInsertBlockIntoFreeList+0xb0>)
 80118f8:	681a      	ldr	r2, [r3, #0]
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	601a      	str	r2, [r3, #0]
 80118fe:	e003      	b.n	8011908 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	681a      	ldr	r2, [r3, #0]
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011908:	68fa      	ldr	r2, [r7, #12]
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	429a      	cmp	r2, r3
 801190e:	d002      	beq.n	8011916 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	687a      	ldr	r2, [r7, #4]
 8011914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011916:	bf00      	nop
 8011918:	3714      	adds	r7, #20
 801191a:	46bd      	mov	sp, r7
 801191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011920:	4770      	bx	lr
 8011922:	bf00      	nop
 8011924:	2406485c 	.word	0x2406485c
 8011928:	24064864 	.word	0x24064864

0801192c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand>:
 801192c:	4b04      	ldr	r3, [pc, #16]	@ (8011940 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x14>)
 801192e:	681a      	ldr	r2, [r3, #0]
 8011930:	b10a      	cbz	r2, 8011936 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0xa>
 8011932:	4803      	ldr	r0, [pc, #12]	@ (8011940 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x14>)
 8011934:	4770      	bx	lr
 8011936:	4a03      	ldr	r2, [pc, #12]	@ (8011944 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x18>)
 8011938:	4801      	ldr	r0, [pc, #4]	@ (8011940 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x14>)
 801193a:	6812      	ldr	r2, [r2, #0]
 801193c:	601a      	str	r2, [r3, #0]
 801193e:	4770      	bx	lr
 8011940:	24000020 	.word	0x24000020
 8011944:	24000d2c 	.word	0x24000d2c

08011948 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand>:
 8011948:	4a02      	ldr	r2, [pc, #8]	@ (8011954 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0xc>)
 801194a:	4b03      	ldr	r3, [pc, #12]	@ (8011958 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x10>)
 801194c:	6812      	ldr	r2, [r2, #0]
 801194e:	601a      	str	r2, [r3, #0]
 8011950:	4770      	bx	lr
 8011952:	bf00      	nop
 8011954:	24000d2c 	.word	0x24000d2c
 8011958:	24000020 	.word	0x24000020

0801195c <autoware_auto_control_msgs__msg__AckermannControlCommand__rosidl_typesupport_introspection_c__AckermannControlCommand_init_function>:
 801195c:	f004 bffc 	b.w	8016958 <autoware_auto_control_msgs__msg__AckermannControlCommand__init>

08011960 <autoware_auto_control_msgs__msg__AckermannControlCommand__rosidl_typesupport_introspection_c__AckermannControlCommand_fini_function>:
 8011960:	f005 b838 	b.w	80169d4 <autoware_auto_control_msgs__msg__AckermannControlCommand__fini>

08011964 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand>:
 8011964:	b510      	push	{r4, lr}
 8011966:	4c0a      	ldr	r4, [pc, #40]	@ (8011990 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x2c>)
 8011968:	f001 f880 	bl	8012a6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801196c:	60e0      	str	r0, [r4, #12]
 801196e:	f000 f819 	bl	80119a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>
 8011972:	64a0      	str	r0, [r4, #72]	@ 0x48
 8011974:	f000 f830 	bl	80119d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>
 8011978:	4b06      	ldr	r3, [pc, #24]	@ (8011994 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x30>)
 801197a:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 801197e:	681a      	ldr	r2, [r3, #0]
 8011980:	b10a      	cbz	r2, 8011986 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x22>
 8011982:	4804      	ldr	r0, [pc, #16]	@ (8011994 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x30>)
 8011984:	bd10      	pop	{r4, pc}
 8011986:	4a04      	ldr	r2, [pc, #16]	@ (8011998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x34>)
 8011988:	4802      	ldr	r0, [pc, #8]	@ (8011994 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x30>)
 801198a:	6812      	ldr	r2, [r2, #0]
 801198c:	601a      	str	r2, [r3, #0]
 801198e:	bd10      	pop	{r4, pc}
 8011990:	2400002c 	.word	0x2400002c
 8011994:	240000e0 	.word	0x240000e0
 8011998:	24000d30 	.word	0x24000d30

0801199c <autoware_auto_control_msgs__msg__AckermannLateralCommand__rosidl_typesupport_introspection_c__AckermannLateralCommand_init_function>:
 801199c:	f005 b82a 	b.w	80169f4 <autoware_auto_control_msgs__msg__AckermannLateralCommand__init>

080119a0 <autoware_auto_control_msgs__msg__AckermannLateralCommand__rosidl_typesupport_introspection_c__AckermannLateralCommand_fini_function>:
 80119a0:	f005 b83c 	b.w	8016a1c <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>

080119a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>:
 80119a4:	b508      	push	{r3, lr}
 80119a6:	f001 f861 	bl	8012a6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80119aa:	4b06      	ldr	r3, [pc, #24]	@ (80119c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x20>)
 80119ac:	4906      	ldr	r1, [pc, #24]	@ (80119c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x24>)
 80119ae:	681a      	ldr	r2, [r3, #0]
 80119b0:	60c8      	str	r0, [r1, #12]
 80119b2:	b10a      	cbz	r2, 80119b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x14>
 80119b4:	4803      	ldr	r0, [pc, #12]	@ (80119c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x20>)
 80119b6:	bd08      	pop	{r3, pc}
 80119b8:	4a04      	ldr	r2, [pc, #16]	@ (80119cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x28>)
 80119ba:	4802      	ldr	r0, [pc, #8]	@ (80119c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x20>)
 80119bc:	6812      	ldr	r2, [r2, #0]
 80119be:	601a      	str	r2, [r3, #0]
 80119c0:	bd08      	pop	{r3, pc}
 80119c2:	bf00      	nop
 80119c4:	240001a0 	.word	0x240001a0
 80119c8:	240000ec 	.word	0x240000ec
 80119cc:	24000d30 	.word	0x24000d30

080119d0 <autoware_auto_control_msgs__msg__LongitudinalCommand__rosidl_typesupport_introspection_c__LongitudinalCommand_init_function>:
 80119d0:	f005 b828 	b.w	8016a24 <autoware_auto_control_msgs__msg__LongitudinalCommand__init>

080119d4 <autoware_auto_control_msgs__msg__LongitudinalCommand__rosidl_typesupport_introspection_c__LongitudinalCommand_fini_function>:
 80119d4:	f005 b83c 	b.w	8016a50 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>

080119d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>:
 80119d8:	b508      	push	{r3, lr}
 80119da:	f001 f847 	bl	8012a6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80119de:	4b06      	ldr	r3, [pc, #24]	@ (80119f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x20>)
 80119e0:	4906      	ldr	r1, [pc, #24]	@ (80119fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x24>)
 80119e2:	681a      	ldr	r2, [r3, #0]
 80119e4:	60c8      	str	r0, [r1, #12]
 80119e6:	b10a      	cbz	r2, 80119ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x14>
 80119e8:	4803      	ldr	r0, [pc, #12]	@ (80119f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x20>)
 80119ea:	bd08      	pop	{r3, pc}
 80119ec:	4a04      	ldr	r2, [pc, #16]	@ (8011a00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x28>)
 80119ee:	4802      	ldr	r0, [pc, #8]	@ (80119f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x20>)
 80119f0:	6812      	ldr	r2, [r2, #0]
 80119f2:	601a      	str	r2, [r3, #0]
 80119f4:	bd08      	pop	{r3, pc}
 80119f6:	bf00      	nop
 80119f8:	2400029c 	.word	0x2400029c
 80119fc:	240001ac 	.word	0x240001ac
 8011a00:	24000d30 	.word	0x24000d30

08011a04 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannControlCommand>:
 8011a04:	b570      	push	{r4, r5, r6, lr}
 8011a06:	4604      	mov	r4, r0
 8011a08:	b190      	cbz	r0, 8011a30 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannControlCommand+0x2c>
 8011a0a:	460e      	mov	r6, r1
 8011a0c:	f001 f83c 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 8011a10:	4605      	mov	r5, r0
 8011a12:	f104 0008 	add.w	r0, r4, #8
 8011a16:	4435      	add	r5, r6
 8011a18:	4629      	mov	r1, r5
 8011a1a:	f000 f885 	bl	8011b28 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>
 8011a1e:	4601      	mov	r1, r0
 8011a20:	f104 0018 	add.w	r0, r4, #24
 8011a24:	440d      	add	r5, r1
 8011a26:	4629      	mov	r1, r5
 8011a28:	f000 f90e 	bl	8011c48 <get_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>
 8011a2c:	1b80      	subs	r0, r0, r6
 8011a2e:	4428      	add	r0, r5
 8011a30:	bd70      	pop	{r4, r5, r6, pc}
 8011a32:	bf00      	nop

08011a34 <_AckermannControlCommand__cdr_deserialize>:
 8011a34:	b570      	push	{r4, r5, r6, lr}
 8011a36:	460c      	mov	r4, r1
 8011a38:	b1e1      	cbz	r1, 8011a74 <_AckermannControlCommand__cdr_deserialize+0x40>
 8011a3a:	4605      	mov	r5, r0
 8011a3c:	f001 f888 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011a40:	4603      	mov	r3, r0
 8011a42:	4621      	mov	r1, r4
 8011a44:	4628      	mov	r0, r5
 8011a46:	685b      	ldr	r3, [r3, #4]
 8011a48:	68db      	ldr	r3, [r3, #12]
 8011a4a:	4798      	blx	r3
 8011a4c:	f000 f8f8 	bl	8011c40 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>
 8011a50:	4603      	mov	r3, r0
 8011a52:	f104 0108 	add.w	r1, r4, #8
 8011a56:	4628      	mov	r0, r5
 8011a58:	685b      	ldr	r3, [r3, #4]
 8011a5a:	68db      	ldr	r3, [r3, #12]
 8011a5c:	4798      	blx	r3
 8011a5e:	f000 f9a1 	bl	8011da4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>
 8011a62:	4603      	mov	r3, r0
 8011a64:	f104 0118 	add.w	r1, r4, #24
 8011a68:	4628      	mov	r0, r5
 8011a6a:	685b      	ldr	r3, [r3, #4]
 8011a6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a70:	68db      	ldr	r3, [r3, #12]
 8011a72:	4718      	bx	r3
 8011a74:	4608      	mov	r0, r1
 8011a76:	bd70      	pop	{r4, r5, r6, pc}

08011a78 <_AckermannControlCommand__cdr_serialize>:
 8011a78:	b510      	push	{r4, lr}
 8011a7a:	b082      	sub	sp, #8
 8011a7c:	9101      	str	r1, [sp, #4]
 8011a7e:	b1e8      	cbz	r0, 8011abc <_AckermannControlCommand__cdr_serialize+0x44>
 8011a80:	4604      	mov	r4, r0
 8011a82:	f001 f865 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011a86:	4603      	mov	r3, r0
 8011a88:	9901      	ldr	r1, [sp, #4]
 8011a8a:	4620      	mov	r0, r4
 8011a8c:	685b      	ldr	r3, [r3, #4]
 8011a8e:	689b      	ldr	r3, [r3, #8]
 8011a90:	4798      	blx	r3
 8011a92:	f000 f8d5 	bl	8011c40 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>
 8011a96:	4603      	mov	r3, r0
 8011a98:	9901      	ldr	r1, [sp, #4]
 8011a9a:	f104 0008 	add.w	r0, r4, #8
 8011a9e:	685b      	ldr	r3, [r3, #4]
 8011aa0:	689b      	ldr	r3, [r3, #8]
 8011aa2:	4798      	blx	r3
 8011aa4:	f000 f97e 	bl	8011da4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	9901      	ldr	r1, [sp, #4]
 8011aac:	f104 0018 	add.w	r0, r4, #24
 8011ab0:	685b      	ldr	r3, [r3, #4]
 8011ab2:	689b      	ldr	r3, [r3, #8]
 8011ab4:	b002      	add	sp, #8
 8011ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011aba:	4718      	bx	r3
 8011abc:	b002      	add	sp, #8
 8011abe:	bd10      	pop	{r4, pc}

08011ac0 <_AckermannControlCommand__get_serialized_size>:
 8011ac0:	b538      	push	{r3, r4, r5, lr}
 8011ac2:	4604      	mov	r4, r0
 8011ac4:	b180      	cbz	r0, 8011ae8 <_AckermannControlCommand__get_serialized_size+0x28>
 8011ac6:	2100      	movs	r1, #0
 8011ac8:	f000 ffde 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 8011acc:	4605      	mov	r5, r0
 8011ace:	f104 0008 	add.w	r0, r4, #8
 8011ad2:	4629      	mov	r1, r5
 8011ad4:	f000 f828 	bl	8011b28 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>
 8011ad8:	4601      	mov	r1, r0
 8011ada:	f104 0018 	add.w	r0, r4, #24
 8011ade:	440d      	add	r5, r1
 8011ae0:	4629      	mov	r1, r5
 8011ae2:	f000 f8b1 	bl	8011c48 <get_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>
 8011ae6:	4428      	add	r0, r5
 8011ae8:	bd38      	pop	{r3, r4, r5, pc}
 8011aea:	bf00      	nop

08011aec <_AckermannControlCommand__max_serialized_size>:
 8011aec:	b510      	push	{r4, lr}
 8011aee:	b082      	sub	sp, #8
 8011af0:	2301      	movs	r3, #1
 8011af2:	2100      	movs	r1, #0
 8011af4:	f10d 0007 	add.w	r0, sp, #7
 8011af8:	f88d 3007 	strb.w	r3, [sp, #7]
 8011afc:	f001 f814 	bl	8012b28 <max_serialized_size_builtin_interfaces__msg__Time>
 8011b00:	4604      	mov	r4, r0
 8011b02:	f10d 0007 	add.w	r0, sp, #7
 8011b06:	4621      	mov	r1, r4
 8011b08:	f000 f884 	bl	8011c14 <max_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>
 8011b0c:	4601      	mov	r1, r0
 8011b0e:	f10d 0007 	add.w	r0, sp, #7
 8011b12:	440c      	add	r4, r1
 8011b14:	4621      	mov	r1, r4
 8011b16:	f000 f929 	bl	8011d6c <max_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>
 8011b1a:	4420      	add	r0, r4
 8011b1c:	b002      	add	sp, #8
 8011b1e:	bd10      	pop	{r4, pc}

08011b20 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand>:
 8011b20:	4800      	ldr	r0, [pc, #0]	@ (8011b24 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x4>)
 8011b22:	4770      	bx	lr
 8011b24:	240002a8 	.word	0x240002a8

08011b28 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>:
 8011b28:	b538      	push	{r3, r4, r5, lr}
 8011b2a:	b188      	cbz	r0, 8011b50 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand+0x28>
 8011b2c:	460d      	mov	r5, r1
 8011b2e:	f000 ffab 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 8011b32:	2104      	movs	r1, #4
 8011b34:	182c      	adds	r4, r5, r0
 8011b36:	f1c5 0504 	rsb	r5, r5, #4
 8011b3a:	4620      	mov	r0, r4
 8011b3c:	f002 faa8 	bl	8014090 <ucdr_alignment>
 8011b40:	2104      	movs	r1, #4
 8011b42:	4408      	add	r0, r1
 8011b44:	4404      	add	r4, r0
 8011b46:	4620      	mov	r0, r4
 8011b48:	f002 faa2 	bl	8014090 <ucdr_alignment>
 8011b4c:	4428      	add	r0, r5
 8011b4e:	4420      	add	r0, r4
 8011b50:	bd38      	pop	{r3, r4, r5, pc}
 8011b52:	bf00      	nop

08011b54 <_AckermannLateralCommand__cdr_deserialize>:
 8011b54:	b538      	push	{r3, r4, r5, lr}
 8011b56:	460c      	mov	r4, r1
 8011b58:	b1a1      	cbz	r1, 8011b84 <_AckermannLateralCommand__cdr_deserialize+0x30>
 8011b5a:	4605      	mov	r5, r0
 8011b5c:	f000 fff8 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011b60:	4603      	mov	r3, r0
 8011b62:	4621      	mov	r1, r4
 8011b64:	4628      	mov	r0, r5
 8011b66:	685b      	ldr	r3, [r3, #4]
 8011b68:	68db      	ldr	r3, [r3, #12]
 8011b6a:	4798      	blx	r3
 8011b6c:	f104 0108 	add.w	r1, r4, #8
 8011b70:	4628      	mov	r0, r5
 8011b72:	f002 f80f 	bl	8013b94 <ucdr_deserialize_float>
 8011b76:	f104 010c 	add.w	r1, r4, #12
 8011b7a:	4628      	mov	r0, r5
 8011b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b80:	f002 b808 	b.w	8013b94 <ucdr_deserialize_float>
 8011b84:	4608      	mov	r0, r1
 8011b86:	bd38      	pop	{r3, r4, r5, pc}

08011b88 <_AckermannLateralCommand__cdr_serialize>:
 8011b88:	b1b0      	cbz	r0, 8011bb8 <_AckermannLateralCommand__cdr_serialize+0x30>
 8011b8a:	b538      	push	{r3, r4, r5, lr}
 8011b8c:	4604      	mov	r4, r0
 8011b8e:	460d      	mov	r5, r1
 8011b90:	f000 ffde 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011b94:	4603      	mov	r3, r0
 8011b96:	4629      	mov	r1, r5
 8011b98:	4620      	mov	r0, r4
 8011b9a:	685b      	ldr	r3, [r3, #4]
 8011b9c:	689b      	ldr	r3, [r3, #8]
 8011b9e:	4798      	blx	r3
 8011ba0:	ed94 0a02 	vldr	s0, [r4, #8]
 8011ba4:	4628      	mov	r0, r5
 8011ba6:	f001 ff5d 	bl	8013a64 <ucdr_serialize_float>
 8011baa:	ed94 0a03 	vldr	s0, [r4, #12]
 8011bae:	4628      	mov	r0, r5
 8011bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bb4:	f001 bf56 	b.w	8013a64 <ucdr_serialize_float>
 8011bb8:	4770      	bx	lr
 8011bba:	bf00      	nop

08011bbc <_AckermannLateralCommand__get_serialized_size>:
 8011bbc:	b180      	cbz	r0, 8011be0 <_AckermannLateralCommand__get_serialized_size+0x24>
 8011bbe:	2100      	movs	r1, #0
 8011bc0:	b510      	push	{r4, lr}
 8011bc2:	f000 ff61 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 8011bc6:	4604      	mov	r4, r0
 8011bc8:	2104      	movs	r1, #4
 8011bca:	f002 fa61 	bl	8014090 <ucdr_alignment>
 8011bce:	2104      	movs	r1, #4
 8011bd0:	4420      	add	r0, r4
 8011bd2:	1844      	adds	r4, r0, r1
 8011bd4:	4620      	mov	r0, r4
 8011bd6:	f002 fa5b 	bl	8014090 <ucdr_alignment>
 8011bda:	3004      	adds	r0, #4
 8011bdc:	4420      	add	r0, r4
 8011bde:	bd10      	pop	{r4, pc}
 8011be0:	4770      	bx	lr
 8011be2:	bf00      	nop

08011be4 <_AckermannLateralCommand__max_serialized_size>:
 8011be4:	b510      	push	{r4, lr}
 8011be6:	b082      	sub	sp, #8
 8011be8:	2301      	movs	r3, #1
 8011bea:	2100      	movs	r1, #0
 8011bec:	f10d 0007 	add.w	r0, sp, #7
 8011bf0:	f88d 3007 	strb.w	r3, [sp, #7]
 8011bf4:	f000 ff98 	bl	8012b28 <max_serialized_size_builtin_interfaces__msg__Time>
 8011bf8:	4604      	mov	r4, r0
 8011bfa:	2104      	movs	r1, #4
 8011bfc:	f002 fa48 	bl	8014090 <ucdr_alignment>
 8011c00:	2104      	movs	r1, #4
 8011c02:	4420      	add	r0, r4
 8011c04:	1844      	adds	r4, r0, r1
 8011c06:	4620      	mov	r0, r4
 8011c08:	f002 fa42 	bl	8014090 <ucdr_alignment>
 8011c0c:	3004      	adds	r0, #4
 8011c0e:	4420      	add	r0, r4
 8011c10:	b002      	add	sp, #8
 8011c12:	bd10      	pop	{r4, pc}

08011c14 <max_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>:
 8011c14:	2301      	movs	r3, #1
 8011c16:	b570      	push	{r4, r5, r6, lr}
 8011c18:	460c      	mov	r4, r1
 8011c1a:	7003      	strb	r3, [r0, #0]
 8011c1c:	f000 ff84 	bl	8012b28 <max_serialized_size_builtin_interfaces__msg__Time>
 8011c20:	2104      	movs	r1, #4
 8011c22:	1826      	adds	r6, r4, r0
 8011c24:	f1c4 0404 	rsb	r4, r4, #4
 8011c28:	4630      	mov	r0, r6
 8011c2a:	f002 fa31 	bl	8014090 <ucdr_alignment>
 8011c2e:	2104      	movs	r1, #4
 8011c30:	1845      	adds	r5, r0, r1
 8011c32:	4435      	add	r5, r6
 8011c34:	4628      	mov	r0, r5
 8011c36:	f002 fa2b 	bl	8014090 <ucdr_alignment>
 8011c3a:	4420      	add	r0, r4
 8011c3c:	4428      	add	r0, r5
 8011c3e:	bd70      	pop	{r4, r5, r6, pc}

08011c40 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>:
 8011c40:	4800      	ldr	r0, [pc, #0]	@ (8011c44 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x4>)
 8011c42:	4770      	bx	lr
 8011c44:	240002d0 	.word	0x240002d0

08011c48 <get_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>:
 8011c48:	b1c8      	cbz	r0, 8011c7e <get_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand+0x36>
 8011c4a:	b570      	push	{r4, r5, r6, lr}
 8011c4c:	460d      	mov	r5, r1
 8011c4e:	f000 ff1b 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 8011c52:	2104      	movs	r1, #4
 8011c54:	182e      	adds	r6, r5, r0
 8011c56:	f1c5 0504 	rsb	r5, r5, #4
 8011c5a:	4630      	mov	r0, r6
 8011c5c:	f002 fa18 	bl	8014090 <ucdr_alignment>
 8011c60:	2104      	movs	r1, #4
 8011c62:	1844      	adds	r4, r0, r1
 8011c64:	4434      	add	r4, r6
 8011c66:	4620      	mov	r0, r4
 8011c68:	f002 fa12 	bl	8014090 <ucdr_alignment>
 8011c6c:	2104      	movs	r1, #4
 8011c6e:	4408      	add	r0, r1
 8011c70:	4404      	add	r4, r0
 8011c72:	4620      	mov	r0, r4
 8011c74:	f002 fa0c 	bl	8014090 <ucdr_alignment>
 8011c78:	4428      	add	r0, r5
 8011c7a:	4420      	add	r0, r4
 8011c7c:	bd70      	pop	{r4, r5, r6, pc}
 8011c7e:	4770      	bx	lr

08011c80 <_LongitudinalCommand__cdr_deserialize>:
 8011c80:	b538      	push	{r3, r4, r5, lr}
 8011c82:	460c      	mov	r4, r1
 8011c84:	b1c9      	cbz	r1, 8011cba <_LongitudinalCommand__cdr_deserialize+0x3a>
 8011c86:	4605      	mov	r5, r0
 8011c88:	f000 ff62 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	4621      	mov	r1, r4
 8011c90:	4628      	mov	r0, r5
 8011c92:	685b      	ldr	r3, [r3, #4]
 8011c94:	68db      	ldr	r3, [r3, #12]
 8011c96:	4798      	blx	r3
 8011c98:	f104 0108 	add.w	r1, r4, #8
 8011c9c:	4628      	mov	r0, r5
 8011c9e:	f001 ff79 	bl	8013b94 <ucdr_deserialize_float>
 8011ca2:	f104 010c 	add.w	r1, r4, #12
 8011ca6:	4628      	mov	r0, r5
 8011ca8:	f001 ff74 	bl	8013b94 <ucdr_deserialize_float>
 8011cac:	f104 0110 	add.w	r1, r4, #16
 8011cb0:	4628      	mov	r0, r5
 8011cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011cb6:	f001 bf6d 	b.w	8013b94 <ucdr_deserialize_float>
 8011cba:	4608      	mov	r0, r1
 8011cbc:	bd38      	pop	{r3, r4, r5, pc}
 8011cbe:	bf00      	nop

08011cc0 <_LongitudinalCommand__cdr_serialize>:
 8011cc0:	b1d8      	cbz	r0, 8011cfa <_LongitudinalCommand__cdr_serialize+0x3a>
 8011cc2:	b538      	push	{r3, r4, r5, lr}
 8011cc4:	4604      	mov	r4, r0
 8011cc6:	460d      	mov	r5, r1
 8011cc8:	f000 ff42 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011ccc:	4603      	mov	r3, r0
 8011cce:	4629      	mov	r1, r5
 8011cd0:	4620      	mov	r0, r4
 8011cd2:	685b      	ldr	r3, [r3, #4]
 8011cd4:	689b      	ldr	r3, [r3, #8]
 8011cd6:	4798      	blx	r3
 8011cd8:	ed94 0a02 	vldr	s0, [r4, #8]
 8011cdc:	4628      	mov	r0, r5
 8011cde:	f001 fec1 	bl	8013a64 <ucdr_serialize_float>
 8011ce2:	ed94 0a03 	vldr	s0, [r4, #12]
 8011ce6:	4628      	mov	r0, r5
 8011ce8:	f001 febc 	bl	8013a64 <ucdr_serialize_float>
 8011cec:	ed94 0a04 	vldr	s0, [r4, #16]
 8011cf0:	4628      	mov	r0, r5
 8011cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011cf6:	f001 beb5 	b.w	8013a64 <ucdr_serialize_float>
 8011cfa:	4770      	bx	lr

08011cfc <_LongitudinalCommand__get_serialized_size>:
 8011cfc:	b1b0      	cbz	r0, 8011d2c <_LongitudinalCommand__get_serialized_size+0x30>
 8011cfe:	2100      	movs	r1, #0
 8011d00:	b510      	push	{r4, lr}
 8011d02:	f000 fec1 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 8011d06:	4604      	mov	r4, r0
 8011d08:	2104      	movs	r1, #4
 8011d0a:	f002 f9c1 	bl	8014090 <ucdr_alignment>
 8011d0e:	2104      	movs	r1, #4
 8011d10:	4420      	add	r0, r4
 8011d12:	1844      	adds	r4, r0, r1
 8011d14:	4620      	mov	r0, r4
 8011d16:	f002 f9bb 	bl	8014090 <ucdr_alignment>
 8011d1a:	2104      	movs	r1, #4
 8011d1c:	4408      	add	r0, r1
 8011d1e:	4404      	add	r4, r0
 8011d20:	4620      	mov	r0, r4
 8011d22:	f002 f9b5 	bl	8014090 <ucdr_alignment>
 8011d26:	3004      	adds	r0, #4
 8011d28:	4420      	add	r0, r4
 8011d2a:	bd10      	pop	{r4, pc}
 8011d2c:	4770      	bx	lr
 8011d2e:	bf00      	nop

08011d30 <_LongitudinalCommand__max_serialized_size>:
 8011d30:	b510      	push	{r4, lr}
 8011d32:	b082      	sub	sp, #8
 8011d34:	2301      	movs	r3, #1
 8011d36:	2100      	movs	r1, #0
 8011d38:	f10d 0007 	add.w	r0, sp, #7
 8011d3c:	f88d 3007 	strb.w	r3, [sp, #7]
 8011d40:	f000 fef2 	bl	8012b28 <max_serialized_size_builtin_interfaces__msg__Time>
 8011d44:	4604      	mov	r4, r0
 8011d46:	2104      	movs	r1, #4
 8011d48:	f002 f9a2 	bl	8014090 <ucdr_alignment>
 8011d4c:	2104      	movs	r1, #4
 8011d4e:	4420      	add	r0, r4
 8011d50:	1844      	adds	r4, r0, r1
 8011d52:	4620      	mov	r0, r4
 8011d54:	f002 f99c 	bl	8014090 <ucdr_alignment>
 8011d58:	2104      	movs	r1, #4
 8011d5a:	4408      	add	r0, r1
 8011d5c:	4404      	add	r4, r0
 8011d5e:	4620      	mov	r0, r4
 8011d60:	f002 f996 	bl	8014090 <ucdr_alignment>
 8011d64:	3004      	adds	r0, #4
 8011d66:	4420      	add	r0, r4
 8011d68:	b002      	add	sp, #8
 8011d6a:	bd10      	pop	{r4, pc}

08011d6c <max_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>:
 8011d6c:	2301      	movs	r3, #1
 8011d6e:	b570      	push	{r4, r5, r6, lr}
 8011d70:	460c      	mov	r4, r1
 8011d72:	7003      	strb	r3, [r0, #0]
 8011d74:	f000 fed8 	bl	8012b28 <max_serialized_size_builtin_interfaces__msg__Time>
 8011d78:	2104      	movs	r1, #4
 8011d7a:	1826      	adds	r6, r4, r0
 8011d7c:	f1c4 0404 	rsb	r4, r4, #4
 8011d80:	4630      	mov	r0, r6
 8011d82:	f002 f985 	bl	8014090 <ucdr_alignment>
 8011d86:	2104      	movs	r1, #4
 8011d88:	1845      	adds	r5, r0, r1
 8011d8a:	4435      	add	r5, r6
 8011d8c:	4628      	mov	r0, r5
 8011d8e:	f002 f97f 	bl	8014090 <ucdr_alignment>
 8011d92:	2104      	movs	r1, #4
 8011d94:	4408      	add	r0, r1
 8011d96:	4405      	add	r5, r0
 8011d98:	4628      	mov	r0, r5
 8011d9a:	f002 f979 	bl	8014090 <ucdr_alignment>
 8011d9e:	4420      	add	r0, r4
 8011da0:	4428      	add	r0, r5
 8011da2:	bd70      	pop	{r4, r5, r6, pc}

08011da4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>:
 8011da4:	4800      	ldr	r0, [pc, #0]	@ (8011da8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x4>)
 8011da6:	4770      	bx	lr
 8011da8:	240002f8 	.word	0x240002f8

08011dac <rosidl_typesupport_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand>:
 8011dac:	4b04      	ldr	r3, [pc, #16]	@ (8011dc0 <rosidl_typesupport_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x14>)
 8011dae:	681a      	ldr	r2, [r3, #0]
 8011db0:	b10a      	cbz	r2, 8011db6 <rosidl_typesupport_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0xa>
 8011db2:	4803      	ldr	r0, [pc, #12]	@ (8011dc0 <rosidl_typesupport_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x14>)
 8011db4:	4770      	bx	lr
 8011db6:	4a03      	ldr	r2, [pc, #12]	@ (8011dc4 <rosidl_typesupport_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x18>)
 8011db8:	4801      	ldr	r0, [pc, #4]	@ (8011dc0 <rosidl_typesupport_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x14>)
 8011dba:	6812      	ldr	r2, [r2, #0]
 8011dbc:	601a      	str	r2, [r3, #0]
 8011dbe:	4770      	bx	lr
 8011dc0:	24000328 	.word	0x24000328
 8011dc4:	24000d2c 	.word	0x24000d2c

08011dc8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request>:
 8011dc8:	4b04      	ldr	r3, [pc, #16]	@ (8011ddc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x14>)
 8011dca:	4805      	ldr	r0, [pc, #20]	@ (8011de0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x18>)
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	4905      	ldr	r1, [pc, #20]	@ (8011de4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>)
 8011dd0:	4a05      	ldr	r2, [pc, #20]	@ (8011de8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8011dd2:	6003      	str	r3, [r0, #0]
 8011dd4:	600b      	str	r3, [r1, #0]
 8011dd6:	6013      	str	r3, [r2, #0]
 8011dd8:	4770      	bx	lr
 8011dda:	bf00      	nop
 8011ddc:	24000d2c 	.word	0x24000d2c
 8011de0:	24000344 	.word	0x24000344
 8011de4:	24000350 	.word	0x24000350
 8011de8:	24000328 	.word	0x24000328

08011dec <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport>:
 8011dec:	4b04      	ldr	r3, [pc, #16]	@ (8011e00 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x14>)
 8011dee:	681a      	ldr	r2, [r3, #0]
 8011df0:	b10a      	cbz	r2, 8011df6 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0xa>
 8011df2:	4803      	ldr	r0, [pc, #12]	@ (8011e00 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x14>)
 8011df4:	4770      	bx	lr
 8011df6:	4a03      	ldr	r2, [pc, #12]	@ (8011e04 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x18>)
 8011df8:	4801      	ldr	r0, [pc, #4]	@ (8011e00 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x14>)
 8011dfa:	6812      	ldr	r2, [r2, #0]
 8011dfc:	601a      	str	r2, [r3, #0]
 8011dfe:	4770      	bx	lr
 8011e00:	24000364 	.word	0x24000364
 8011e04:	24000d2c 	.word	0x24000d2c

08011e08 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport>:
 8011e08:	4a02      	ldr	r2, [pc, #8]	@ (8011e14 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0xc>)
 8011e0a:	4b03      	ldr	r3, [pc, #12]	@ (8011e18 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x10>)
 8011e0c:	6812      	ldr	r2, [r2, #0]
 8011e0e:	601a      	str	r2, [r3, #0]
 8011e10:	4770      	bx	lr
 8011e12:	bf00      	nop
 8011e14:	24000d2c 	.word	0x24000d2c
 8011e18:	24000364 	.word	0x24000364

08011e1c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand>:
 8011e1c:	4b04      	ldr	r3, [pc, #16]	@ (8011e30 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x14>)
 8011e1e:	681a      	ldr	r2, [r3, #0]
 8011e20:	b10a      	cbz	r2, 8011e26 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0xa>
 8011e22:	4803      	ldr	r0, [pc, #12]	@ (8011e30 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x14>)
 8011e24:	4770      	bx	lr
 8011e26:	4a03      	ldr	r2, [pc, #12]	@ (8011e34 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x18>)
 8011e28:	4801      	ldr	r0, [pc, #4]	@ (8011e30 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x14>)
 8011e2a:	6812      	ldr	r2, [r2, #0]
 8011e2c:	601a      	str	r2, [r3, #0]
 8011e2e:	4770      	bx	lr
 8011e30:	24000378 	.word	0x24000378
 8011e34:	24000d2c 	.word	0x24000d2c

08011e38 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand>:
 8011e38:	4a02      	ldr	r2, [pc, #8]	@ (8011e44 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0xc>)
 8011e3a:	4b03      	ldr	r3, [pc, #12]	@ (8011e48 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x10>)
 8011e3c:	6812      	ldr	r2, [r2, #0]
 8011e3e:	601a      	str	r2, [r3, #0]
 8011e40:	4770      	bx	lr
 8011e42:	bf00      	nop
 8011e44:	24000d2c 	.word	0x24000d2c
 8011e48:	24000378 	.word	0x24000378

08011e4c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport>:
 8011e4c:	4b04      	ldr	r3, [pc, #16]	@ (8011e60 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x14>)
 8011e4e:	681a      	ldr	r2, [r3, #0]
 8011e50:	b10a      	cbz	r2, 8011e56 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0xa>
 8011e52:	4803      	ldr	r0, [pc, #12]	@ (8011e60 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x14>)
 8011e54:	4770      	bx	lr
 8011e56:	4a03      	ldr	r2, [pc, #12]	@ (8011e64 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x18>)
 8011e58:	4801      	ldr	r0, [pc, #4]	@ (8011e60 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x14>)
 8011e5a:	6812      	ldr	r2, [r2, #0]
 8011e5c:	601a      	str	r2, [r3, #0]
 8011e5e:	4770      	bx	lr
 8011e60:	2400038c 	.word	0x2400038c
 8011e64:	24000d2c 	.word	0x24000d2c

08011e68 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport>:
 8011e68:	4a02      	ldr	r2, [pc, #8]	@ (8011e74 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0xc>)
 8011e6a:	4b03      	ldr	r3, [pc, #12]	@ (8011e78 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x10>)
 8011e6c:	6812      	ldr	r2, [r2, #0]
 8011e6e:	601a      	str	r2, [r3, #0]
 8011e70:	4770      	bx	lr
 8011e72:	bf00      	nop
 8011e74:	24000d2c 	.word	0x24000d2c
 8011e78:	2400038c 	.word	0x2400038c

08011e7c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand>:
 8011e7c:	4b04      	ldr	r3, [pc, #16]	@ (8011e90 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 8011e7e:	681a      	ldr	r2, [r3, #0]
 8011e80:	b10a      	cbz	r2, 8011e86 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0xa>
 8011e82:	4803      	ldr	r0, [pc, #12]	@ (8011e90 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 8011e84:	4770      	bx	lr
 8011e86:	4a03      	ldr	r2, [pc, #12]	@ (8011e94 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x18>)
 8011e88:	4801      	ldr	r0, [pc, #4]	@ (8011e90 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 8011e8a:	6812      	ldr	r2, [r2, #0]
 8011e8c:	601a      	str	r2, [r3, #0]
 8011e8e:	4770      	bx	lr
 8011e90:	240003a0 	.word	0x240003a0
 8011e94:	24000d2c 	.word	0x24000d2c

08011e98 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand>:
 8011e98:	4a02      	ldr	r2, [pc, #8]	@ (8011ea4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0xc>)
 8011e9a:	4b03      	ldr	r3, [pc, #12]	@ (8011ea8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x10>)
 8011e9c:	6812      	ldr	r2, [r2, #0]
 8011e9e:	601a      	str	r2, [r3, #0]
 8011ea0:	4770      	bx	lr
 8011ea2:	bf00      	nop
 8011ea4:	24000d2c 	.word	0x24000d2c
 8011ea8:	240003a0 	.word	0x240003a0

08011eac <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport>:
 8011eac:	4b04      	ldr	r3, [pc, #16]	@ (8011ec0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x14>)
 8011eae:	681a      	ldr	r2, [r3, #0]
 8011eb0:	b10a      	cbz	r2, 8011eb6 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0xa>
 8011eb2:	4803      	ldr	r0, [pc, #12]	@ (8011ec0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x14>)
 8011eb4:	4770      	bx	lr
 8011eb6:	4a03      	ldr	r2, [pc, #12]	@ (8011ec4 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x18>)
 8011eb8:	4801      	ldr	r0, [pc, #4]	@ (8011ec0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x14>)
 8011eba:	6812      	ldr	r2, [r2, #0]
 8011ebc:	601a      	str	r2, [r3, #0]
 8011ebe:	4770      	bx	lr
 8011ec0:	240003b4 	.word	0x240003b4
 8011ec4:	24000d2c 	.word	0x24000d2c

08011ec8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport>:
 8011ec8:	4a02      	ldr	r2, [pc, #8]	@ (8011ed4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0xc>)
 8011eca:	4b03      	ldr	r3, [pc, #12]	@ (8011ed8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x10>)
 8011ecc:	6812      	ldr	r2, [r2, #0]
 8011ece:	601a      	str	r2, [r3, #0]
 8011ed0:	4770      	bx	lr
 8011ed2:	bf00      	nop
 8011ed4:	24000d2c 	.word	0x24000d2c
 8011ed8:	240003b4 	.word	0x240003b4

08011edc <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport>:
 8011edc:	4b04      	ldr	r3, [pc, #16]	@ (8011ef0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x14>)
 8011ede:	681a      	ldr	r2, [r3, #0]
 8011ee0:	b10a      	cbz	r2, 8011ee6 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0xa>
 8011ee2:	4803      	ldr	r0, [pc, #12]	@ (8011ef0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x14>)
 8011ee4:	4770      	bx	lr
 8011ee6:	4a03      	ldr	r2, [pc, #12]	@ (8011ef4 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x18>)
 8011ee8:	4801      	ldr	r0, [pc, #4]	@ (8011ef0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x14>)
 8011eea:	6812      	ldr	r2, [r2, #0]
 8011eec:	601a      	str	r2, [r3, #0]
 8011eee:	4770      	bx	lr
 8011ef0:	240003c8 	.word	0x240003c8
 8011ef4:	24000d2c 	.word	0x24000d2c

08011ef8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport>:
 8011ef8:	4a02      	ldr	r2, [pc, #8]	@ (8011f04 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0xc>)
 8011efa:	4b03      	ldr	r3, [pc, #12]	@ (8011f08 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x10>)
 8011efc:	6812      	ldr	r2, [r2, #0]
 8011efe:	601a      	str	r2, [r3, #0]
 8011f00:	4770      	bx	lr
 8011f02:	bf00      	nop
 8011f04:	24000d2c 	.word	0x24000d2c
 8011f08:	240003c8 	.word	0x240003c8

08011f0c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8011f0c:	4b04      	ldr	r3, [pc, #16]	@ (8011f20 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 8011f0e:	681a      	ldr	r2, [r3, #0]
 8011f10:	b10a      	cbz	r2, 8011f16 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0xa>
 8011f12:	4803      	ldr	r0, [pc, #12]	@ (8011f20 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 8011f14:	4770      	bx	lr
 8011f16:	4a03      	ldr	r2, [pc, #12]	@ (8011f24 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x18>)
 8011f18:	4801      	ldr	r0, [pc, #4]	@ (8011f20 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 8011f1a:	6812      	ldr	r2, [r2, #0]
 8011f1c:	601a      	str	r2, [r3, #0]
 8011f1e:	4770      	bx	lr
 8011f20:	240003dc 	.word	0x240003dc
 8011f24:	24000d2c 	.word	0x24000d2c

08011f28 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8011f28:	4a02      	ldr	r2, [pc, #8]	@ (8011f34 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0xc>)
 8011f2a:	4b03      	ldr	r3, [pc, #12]	@ (8011f38 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x10>)
 8011f2c:	6812      	ldr	r2, [r2, #0]
 8011f2e:	601a      	str	r2, [r3, #0]
 8011f30:	4770      	bx	lr
 8011f32:	bf00      	nop
 8011f34:	24000d2c 	.word	0x24000d2c
 8011f38:	240003dc 	.word	0x240003dc

08011f3c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>:
 8011f3c:	4b04      	ldr	r3, [pc, #16]	@ (8011f50 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 8011f3e:	681a      	ldr	r2, [r3, #0]
 8011f40:	b10a      	cbz	r2, 8011f46 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0xa>
 8011f42:	4803      	ldr	r0, [pc, #12]	@ (8011f50 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 8011f44:	4770      	bx	lr
 8011f46:	4a03      	ldr	r2, [pc, #12]	@ (8011f54 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x18>)
 8011f48:	4801      	ldr	r0, [pc, #4]	@ (8011f50 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 8011f4a:	6812      	ldr	r2, [r2, #0]
 8011f4c:	601a      	str	r2, [r3, #0]
 8011f4e:	4770      	bx	lr
 8011f50:	240003f0 	.word	0x240003f0
 8011f54:	24000d2c 	.word	0x24000d2c

08011f58 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>:
 8011f58:	4a02      	ldr	r2, [pc, #8]	@ (8011f64 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0xc>)
 8011f5a:	4b03      	ldr	r3, [pc, #12]	@ (8011f68 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x10>)
 8011f5c:	6812      	ldr	r2, [r2, #0]
 8011f5e:	601a      	str	r2, [r3, #0]
 8011f60:	4770      	bx	lr
 8011f62:	bf00      	nop
 8011f64:	24000d2c 	.word	0x24000d2c
 8011f68:	240003f0 	.word	0x240003f0

08011f6c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport>:
 8011f6c:	4b04      	ldr	r3, [pc, #16]	@ (8011f80 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x14>)
 8011f6e:	681a      	ldr	r2, [r3, #0]
 8011f70:	b10a      	cbz	r2, 8011f76 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0xa>
 8011f72:	4803      	ldr	r0, [pc, #12]	@ (8011f80 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x14>)
 8011f74:	4770      	bx	lr
 8011f76:	4a03      	ldr	r2, [pc, #12]	@ (8011f84 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x18>)
 8011f78:	4801      	ldr	r0, [pc, #4]	@ (8011f80 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x14>)
 8011f7a:	6812      	ldr	r2, [r2, #0]
 8011f7c:	601a      	str	r2, [r3, #0]
 8011f7e:	4770      	bx	lr
 8011f80:	24000404 	.word	0x24000404
 8011f84:	24000d2c 	.word	0x24000d2c

08011f88 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport>:
 8011f88:	4a02      	ldr	r2, [pc, #8]	@ (8011f94 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0xc>)
 8011f8a:	4b03      	ldr	r3, [pc, #12]	@ (8011f98 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x10>)
 8011f8c:	6812      	ldr	r2, [r2, #0]
 8011f8e:	601a      	str	r2, [r3, #0]
 8011f90:	4770      	bx	lr
 8011f92:	bf00      	nop
 8011f94:	24000d2c 	.word	0x24000d2c
 8011f98:	24000404 	.word	0x24000404

08011f9c <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_init_function>:
 8011f9c:	f004 bd5c 	b.w	8016a58 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__init>

08011fa0 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_fini_function>:
 8011fa0:	f004 bd6c 	b.w	8016a7c <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__fini>

08011fa4 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_init_function>:
 8011fa4:	f004 bd6e 	b.w	8016a84 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__init>

08011fa8 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_fini_function>:
 8011fa8:	f004 bd70 	b.w	8016a8c <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__fini>

08011fac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request>:
 8011fac:	b508      	push	{r3, lr}
 8011fae:	f000 fd5d 	bl	8012a6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011fb2:	4b06      	ldr	r3, [pc, #24]	@ (8011fcc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8011fb4:	4906      	ldr	r1, [pc, #24]	@ (8011fd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x24>)
 8011fb6:	681a      	ldr	r2, [r3, #0]
 8011fb8:	60c8      	str	r0, [r1, #12]
 8011fba:	b10a      	cbz	r2, 8011fc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x14>
 8011fbc:	4803      	ldr	r0, [pc, #12]	@ (8011fcc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8011fbe:	bd08      	pop	{r3, pc}
 8011fc0:	4a04      	ldr	r2, [pc, #16]	@ (8011fd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x28>)
 8011fc2:	4802      	ldr	r0, [pc, #8]	@ (8011fcc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8011fc4:	6812      	ldr	r2, [r2, #0]
 8011fc6:	601a      	str	r2, [r3, #0]
 8011fc8:	bd08      	pop	{r3, pc}
 8011fca:	bf00      	nop
 8011fcc:	24000488 	.word	0x24000488
 8011fd0:	24000410 	.word	0x24000410
 8011fd4:	24000d30 	.word	0x24000d30

08011fd8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response>:
 8011fd8:	4b04      	ldr	r3, [pc, #16]	@ (8011fec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 8011fda:	681a      	ldr	r2, [r3, #0]
 8011fdc:	b10a      	cbz	r2, 8011fe2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0xa>
 8011fde:	4803      	ldr	r0, [pc, #12]	@ (8011fec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 8011fe0:	4770      	bx	lr
 8011fe2:	4a03      	ldr	r2, [pc, #12]	@ (8011ff0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x18>)
 8011fe4:	4801      	ldr	r0, [pc, #4]	@ (8011fec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 8011fe6:	6812      	ldr	r2, [r2, #0]
 8011fe8:	601a      	str	r2, [r3, #0]
 8011fea:	4770      	bx	lr
 8011fec:	240004d0 	.word	0x240004d0
 8011ff0:	24000d30 	.word	0x24000d30

08011ff4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand>:
 8011ff4:	4b16      	ldr	r3, [pc, #88]	@ (8012050 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8011ff6:	681a      	ldr	r2, [r3, #0]
 8011ff8:	b510      	push	{r4, lr}
 8011ffa:	b132      	cbz	r2, 801200a <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x16>
 8011ffc:	685c      	ldr	r4, [r3, #4]
 8011ffe:	68a3      	ldr	r3, [r4, #8]
 8012000:	b153      	cbz	r3, 8012018 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x24>
 8012002:	68e3      	ldr	r3, [r4, #12]
 8012004:	b1a3      	cbz	r3, 8012030 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x3c>
 8012006:	4812      	ldr	r0, [pc, #72]	@ (8012050 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8012008:	bd10      	pop	{r4, pc}
 801200a:	4a12      	ldr	r2, [pc, #72]	@ (8012054 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x60>)
 801200c:	685c      	ldr	r4, [r3, #4]
 801200e:	6812      	ldr	r2, [r2, #0]
 8012010:	601a      	str	r2, [r3, #0]
 8012012:	68a3      	ldr	r3, [r4, #8]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d1f4      	bne.n	8012002 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0xe>
 8012018:	f000 fd28 	bl	8012a6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801201c:	4b0e      	ldr	r3, [pc, #56]	@ (8012058 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x64>)
 801201e:	490f      	ldr	r1, [pc, #60]	@ (801205c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x68>)
 8012020:	681a      	ldr	r2, [r3, #0]
 8012022:	60c8      	str	r0, [r1, #12]
 8012024:	b17a      	cbz	r2, 8012046 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x52>
 8012026:	685b      	ldr	r3, [r3, #4]
 8012028:	60a3      	str	r3, [r4, #8]
 801202a:	68e3      	ldr	r3, [r4, #12]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d1ea      	bne.n	8012006 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x12>
 8012030:	4b0b      	ldr	r3, [pc, #44]	@ (8012060 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x6c>)
 8012032:	681a      	ldr	r2, [r3, #0]
 8012034:	b11a      	cbz	r2, 801203e <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x4a>
 8012036:	685b      	ldr	r3, [r3, #4]
 8012038:	4805      	ldr	r0, [pc, #20]	@ (8012050 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 801203a:	60e3      	str	r3, [r4, #12]
 801203c:	bd10      	pop	{r4, pc}
 801203e:	4a05      	ldr	r2, [pc, #20]	@ (8012054 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8012040:	6812      	ldr	r2, [r2, #0]
 8012042:	601a      	str	r2, [r3, #0]
 8012044:	e7f7      	b.n	8012036 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x42>
 8012046:	4a03      	ldr	r2, [pc, #12]	@ (8012054 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8012048:	6812      	ldr	r2, [r2, #0]
 801204a:	601a      	str	r2, [r3, #0]
 801204c:	e7eb      	b.n	8012026 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x32>
 801204e:	bf00      	nop
 8012050:	240004ec 	.word	0x240004ec
 8012054:	24000d30 	.word	0x24000d30
 8012058:	24000488 	.word	0x24000488
 801205c:	24000410 	.word	0x24000410
 8012060:	240004d0 	.word	0x240004d0

08012064 <autoware_auto_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_init_function>:
 8012064:	f004 bd14 	b.w	8016a90 <autoware_auto_vehicle_msgs__msg__ControlModeReport__init>

08012068 <autoware_auto_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_fini_function>:
 8012068:	f004 bd26 	b.w	8016ab8 <autoware_auto_vehicle_msgs__msg__ControlModeReport__fini>

0801206c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport>:
 801206c:	b508      	push	{r3, lr}
 801206e:	f000 fcfd 	bl	8012a6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012072:	4b06      	ldr	r3, [pc, #24]	@ (801208c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x20>)
 8012074:	4906      	ldr	r1, [pc, #24]	@ (8012090 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x24>)
 8012076:	681a      	ldr	r2, [r3, #0]
 8012078:	60c8      	str	r0, [r1, #12]
 801207a:	b10a      	cbz	r2, 8012080 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x14>
 801207c:	4803      	ldr	r0, [pc, #12]	@ (801208c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x20>)
 801207e:	bd08      	pop	{r3, pc}
 8012080:	4a04      	ldr	r2, [pc, #16]	@ (8012094 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x28>)
 8012082:	4802      	ldr	r0, [pc, #8]	@ (801208c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x20>)
 8012084:	6812      	ldr	r2, [r2, #0]
 8012086:	601a      	str	r2, [r3, #0]
 8012088:	bd08      	pop	{r3, pc}
 801208a:	bf00      	nop
 801208c:	24000570 	.word	0x24000570
 8012090:	240004f8 	.word	0x240004f8
 8012094:	24000d30 	.word	0x24000d30

08012098 <autoware_auto_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_init_function>:
 8012098:	f004 bd12 	b.w	8016ac0 <autoware_auto_vehicle_msgs__msg__GearCommand__init>

0801209c <autoware_auto_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_fini_function>:
 801209c:	f004 bd24 	b.w	8016ae8 <autoware_auto_vehicle_msgs__msg__GearCommand__fini>

080120a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand>:
 80120a0:	b508      	push	{r3, lr}
 80120a2:	f000 fce3 	bl	8012a6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80120a6:	4b06      	ldr	r3, [pc, #24]	@ (80120c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x20>)
 80120a8:	4906      	ldr	r1, [pc, #24]	@ (80120c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x24>)
 80120aa:	681a      	ldr	r2, [r3, #0]
 80120ac:	60c8      	str	r0, [r1, #12]
 80120ae:	b10a      	cbz	r2, 80120b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x14>
 80120b0:	4803      	ldr	r0, [pc, #12]	@ (80120c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x20>)
 80120b2:	bd08      	pop	{r3, pc}
 80120b4:	4a04      	ldr	r2, [pc, #16]	@ (80120c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x28>)
 80120b6:	4802      	ldr	r0, [pc, #8]	@ (80120c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x20>)
 80120b8:	6812      	ldr	r2, [r2, #0]
 80120ba:	601a      	str	r2, [r3, #0]
 80120bc:	bd08      	pop	{r3, pc}
 80120be:	bf00      	nop
 80120c0:	240005f4 	.word	0x240005f4
 80120c4:	2400057c 	.word	0x2400057c
 80120c8:	24000d30 	.word	0x24000d30

080120cc <autoware_auto_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_init_function>:
 80120cc:	f004 bd10 	b.w	8016af0 <autoware_auto_vehicle_msgs__msg__GearReport__init>

080120d0 <autoware_auto_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_fini_function>:
 80120d0:	f004 bd22 	b.w	8016b18 <autoware_auto_vehicle_msgs__msg__GearReport__fini>

080120d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport>:
 80120d4:	b508      	push	{r3, lr}
 80120d6:	f000 fcc9 	bl	8012a6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80120da:	4b06      	ldr	r3, [pc, #24]	@ (80120f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x20>)
 80120dc:	4906      	ldr	r1, [pc, #24]	@ (80120f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x24>)
 80120de:	681a      	ldr	r2, [r3, #0]
 80120e0:	60c8      	str	r0, [r1, #12]
 80120e2:	b10a      	cbz	r2, 80120e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x14>
 80120e4:	4803      	ldr	r0, [pc, #12]	@ (80120f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x20>)
 80120e6:	bd08      	pop	{r3, pc}
 80120e8:	4a04      	ldr	r2, [pc, #16]	@ (80120fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x28>)
 80120ea:	4802      	ldr	r0, [pc, #8]	@ (80120f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x20>)
 80120ec:	6812      	ldr	r2, [r2, #0]
 80120ee:	601a      	str	r2, [r3, #0]
 80120f0:	bd08      	pop	{r3, pc}
 80120f2:	bf00      	nop
 80120f4:	24000678 	.word	0x24000678
 80120f8:	24000600 	.word	0x24000600
 80120fc:	24000d30 	.word	0x24000d30

08012100 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_init_function>:
 8012100:	f004 bd0e 	b.w	8016b20 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__init>

08012104 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_fini_function>:
 8012104:	f004 bd20 	b.w	8016b48 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__fini>

08012108 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand>:
 8012108:	b508      	push	{r3, lr}
 801210a:	f000 fcaf 	bl	8012a6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801210e:	4b06      	ldr	r3, [pc, #24]	@ (8012128 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8012110:	4906      	ldr	r1, [pc, #24]	@ (801212c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x24>)
 8012112:	681a      	ldr	r2, [r3, #0]
 8012114:	60c8      	str	r0, [r1, #12]
 8012116:	b10a      	cbz	r2, 801211c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x14>
 8012118:	4803      	ldr	r0, [pc, #12]	@ (8012128 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 801211a:	bd08      	pop	{r3, pc}
 801211c:	4a04      	ldr	r2, [pc, #16]	@ (8012130 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x28>)
 801211e:	4802      	ldr	r0, [pc, #8]	@ (8012128 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8012120:	6812      	ldr	r2, [r2, #0]
 8012122:	601a      	str	r2, [r3, #0]
 8012124:	bd08      	pop	{r3, pc}
 8012126:	bf00      	nop
 8012128:	240006fc 	.word	0x240006fc
 801212c:	24000684 	.word	0x24000684
 8012130:	24000d30 	.word	0x24000d30

08012134 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_init_function>:
 8012134:	f004 bd0c 	b.w	8016b50 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__init>

08012138 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_fini_function>:
 8012138:	f004 bd1e 	b.w	8016b78 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__fini>

0801213c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport>:
 801213c:	b508      	push	{r3, lr}
 801213e:	f000 fc95 	bl	8012a6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012142:	4b06      	ldr	r3, [pc, #24]	@ (801215c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8012144:	4906      	ldr	r1, [pc, #24]	@ (8012160 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x24>)
 8012146:	681a      	ldr	r2, [r3, #0]
 8012148:	60c8      	str	r0, [r1, #12]
 801214a:	b10a      	cbz	r2, 8012150 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x14>
 801214c:	4803      	ldr	r0, [pc, #12]	@ (801215c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x20>)
 801214e:	bd08      	pop	{r3, pc}
 8012150:	4a04      	ldr	r2, [pc, #16]	@ (8012164 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x28>)
 8012152:	4802      	ldr	r0, [pc, #8]	@ (801215c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8012154:	6812      	ldr	r2, [r2, #0]
 8012156:	601a      	str	r2, [r3, #0]
 8012158:	bd08      	pop	{r3, pc}
 801215a:	bf00      	nop
 801215c:	24000780 	.word	0x24000780
 8012160:	24000708 	.word	0x24000708
 8012164:	24000d30 	.word	0x24000d30

08012168 <autoware_auto_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_init_function>:
 8012168:	f004 bd0a 	b.w	8016b80 <autoware_auto_vehicle_msgs__msg__SteeringReport__init>

0801216c <autoware_auto_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_fini_function>:
 801216c:	f004 bd1c 	b.w	8016ba8 <autoware_auto_vehicle_msgs__msg__SteeringReport__fini>

08012170 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport>:
 8012170:	b508      	push	{r3, lr}
 8012172:	f000 fc7b 	bl	8012a6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012176:	4b06      	ldr	r3, [pc, #24]	@ (8012190 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x20>)
 8012178:	4906      	ldr	r1, [pc, #24]	@ (8012194 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x24>)
 801217a:	681a      	ldr	r2, [r3, #0]
 801217c:	60c8      	str	r0, [r1, #12]
 801217e:	b10a      	cbz	r2, 8012184 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x14>
 8012180:	4803      	ldr	r0, [pc, #12]	@ (8012190 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x20>)
 8012182:	bd08      	pop	{r3, pc}
 8012184:	4a04      	ldr	r2, [pc, #16]	@ (8012198 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x28>)
 8012186:	4802      	ldr	r0, [pc, #8]	@ (8012190 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x20>)
 8012188:	6812      	ldr	r2, [r2, #0]
 801218a:	601a      	str	r2, [r3, #0]
 801218c:	bd08      	pop	{r3, pc}
 801218e:	bf00      	nop
 8012190:	24000804 	.word	0x24000804
 8012194:	2400078c 	.word	0x2400078c
 8012198:	24000d30 	.word	0x24000d30

0801219c <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_init_function>:
 801219c:	f004 bd08 	b.w	8016bb0 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__init>

080121a0 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_fini_function>:
 80121a0:	f004 bd1a 	b.w	8016bd8 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__fini>

080121a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>:
 80121a4:	b508      	push	{r3, lr}
 80121a6:	f000 fc61 	bl	8012a6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80121aa:	4b06      	ldr	r3, [pc, #24]	@ (80121c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 80121ac:	4906      	ldr	r1, [pc, #24]	@ (80121c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x24>)
 80121ae:	681a      	ldr	r2, [r3, #0]
 80121b0:	60c8      	str	r0, [r1, #12]
 80121b2:	b10a      	cbz	r2, 80121b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>
 80121b4:	4803      	ldr	r0, [pc, #12]	@ (80121c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 80121b6:	bd08      	pop	{r3, pc}
 80121b8:	4a04      	ldr	r2, [pc, #16]	@ (80121cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x28>)
 80121ba:	4802      	ldr	r0, [pc, #8]	@ (80121c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 80121bc:	6812      	ldr	r2, [r2, #0]
 80121be:	601a      	str	r2, [r3, #0]
 80121c0:	bd08      	pop	{r3, pc}
 80121c2:	bf00      	nop
 80121c4:	24000888 	.word	0x24000888
 80121c8:	24000810 	.word	0x24000810
 80121cc:	24000d30 	.word	0x24000d30

080121d0 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_init_function>:
 80121d0:	f004 bd06 	b.w	8016be0 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__init>

080121d4 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_fini_function>:
 80121d4:	f004 bd18 	b.w	8016c08 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__fini>

080121d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>:
 80121d8:	b508      	push	{r3, lr}
 80121da:	f000 fc47 	bl	8012a6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80121de:	4b06      	ldr	r3, [pc, #24]	@ (80121f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 80121e0:	4906      	ldr	r1, [pc, #24]	@ (80121fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x24>)
 80121e2:	681a      	ldr	r2, [r3, #0]
 80121e4:	60c8      	str	r0, [r1, #12]
 80121e6:	b10a      	cbz	r2, 80121ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x14>
 80121e8:	4803      	ldr	r0, [pc, #12]	@ (80121f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 80121ea:	bd08      	pop	{r3, pc}
 80121ec:	4a04      	ldr	r2, [pc, #16]	@ (8012200 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x28>)
 80121ee:	4802      	ldr	r0, [pc, #8]	@ (80121f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 80121f0:	6812      	ldr	r2, [r2, #0]
 80121f2:	601a      	str	r2, [r3, #0]
 80121f4:	bd08      	pop	{r3, pc}
 80121f6:	bf00      	nop
 80121f8:	2400090c 	.word	0x2400090c
 80121fc:	24000894 	.word	0x24000894
 8012200:	24000d30 	.word	0x24000d30

08012204 <autoware_auto_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_init_function>:
 8012204:	f004 bd04 	b.w	8016c10 <autoware_auto_vehicle_msgs__msg__VelocityReport__init>

08012208 <autoware_auto_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_fini_function>:
 8012208:	f004 bd18 	b.w	8016c3c <autoware_auto_vehicle_msgs__msg__VelocityReport__fini>

0801220c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport>:
 801220c:	b508      	push	{r3, lr}
 801220e:	f004 f897 	bl	8016340 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012212:	4b06      	ldr	r3, [pc, #24]	@ (801222c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x20>)
 8012214:	4906      	ldr	r1, [pc, #24]	@ (8012230 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x24>)
 8012216:	681a      	ldr	r2, [r3, #0]
 8012218:	60c8      	str	r0, [r1, #12]
 801221a:	b10a      	cbz	r2, 8012220 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x14>
 801221c:	4803      	ldr	r0, [pc, #12]	@ (801222c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x20>)
 801221e:	bd08      	pop	{r3, pc}
 8012220:	4a04      	ldr	r2, [pc, #16]	@ (8012234 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x28>)
 8012222:	4802      	ldr	r0, [pc, #8]	@ (801222c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x20>)
 8012224:	6812      	ldr	r2, [r2, #0]
 8012226:	601a      	str	r2, [r3, #0]
 8012228:	bd08      	pop	{r3, pc}
 801222a:	bf00      	nop
 801222c:	24000a08 	.word	0x24000a08
 8012230:	24000918 	.word	0x24000918
 8012234:	24000d30 	.word	0x24000d30

08012238 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request>:
 8012238:	4800      	ldr	r0, [pc, #0]	@ (801223c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x4>)
 801223a:	4770      	bx	lr
 801223c:	24000a30 	.word	0x24000a30

08012240 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response>:
 8012240:	4800      	ldr	r0, [pc, #0]	@ (8012244 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x4>)
 8012242:	4770      	bx	lr
 8012244:	24000a3c 	.word	0x24000a3c

08012248 <_ControlModeCommand_Response__max_serialized_size>:
 8012248:	2101      	movs	r1, #1
 801224a:	2000      	movs	r0, #0
 801224c:	b508      	push	{r3, lr}
 801224e:	f001 ff1f 	bl	8014090 <ucdr_alignment>
 8012252:	3001      	adds	r0, #1
 8012254:	bd08      	pop	{r3, pc}
 8012256:	bf00      	nop

08012258 <_ControlModeCommand_Response__cdr_deserialize>:
 8012258:	b109      	cbz	r1, 801225e <_ControlModeCommand_Response__cdr_deserialize+0x6>
 801225a:	f000 bc93 	b.w	8012b84 <ucdr_deserialize_bool>
 801225e:	4608      	mov	r0, r1
 8012260:	4770      	bx	lr
 8012262:	bf00      	nop

08012264 <get_serialized_size_autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request>:
 8012264:	b538      	push	{r3, r4, r5, lr}
 8012266:	b158      	cbz	r0, 8012280 <get_serialized_size_autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>
 8012268:	460d      	mov	r5, r1
 801226a:	f000 fc0d 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 801226e:	2101      	movs	r1, #1
 8012270:	182c      	adds	r4, r5, r0
 8012272:	f1c5 0501 	rsb	r5, r5, #1
 8012276:	4620      	mov	r0, r4
 8012278:	f001 ff0a 	bl	8014090 <ucdr_alignment>
 801227c:	4428      	add	r0, r5
 801227e:	4420      	add	r0, r4
 8012280:	bd38      	pop	{r3, r4, r5, pc}
 8012282:	bf00      	nop

08012284 <get_serialized_size_autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response>:
 8012284:	b138      	cbz	r0, 8012296 <get_serialized_size_autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x12>
 8012286:	b508      	push	{r3, lr}
 8012288:	460b      	mov	r3, r1
 801228a:	2101      	movs	r1, #1
 801228c:	4618      	mov	r0, r3
 801228e:	f001 feff 	bl	8014090 <ucdr_alignment>
 8012292:	3001      	adds	r0, #1
 8012294:	bd08      	pop	{r3, pc}
 8012296:	4770      	bx	lr

08012298 <_ControlModeCommand_Request__cdr_deserialize>:
 8012298:	b538      	push	{r3, r4, r5, lr}
 801229a:	460c      	mov	r4, r1
 801229c:	b179      	cbz	r1, 80122be <_ControlModeCommand_Request__cdr_deserialize+0x26>
 801229e:	4605      	mov	r5, r0
 80122a0:	f000 fc56 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80122a4:	4603      	mov	r3, r0
 80122a6:	4621      	mov	r1, r4
 80122a8:	4628      	mov	r0, r5
 80122aa:	685b      	ldr	r3, [r3, #4]
 80122ac:	68db      	ldr	r3, [r3, #12]
 80122ae:	4798      	blx	r3
 80122b0:	f104 0108 	add.w	r1, r4, #8
 80122b4:	4628      	mov	r0, r5
 80122b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80122ba:	f000 bc91 	b.w	8012be0 <ucdr_deserialize_uint8_t>
 80122be:	4608      	mov	r0, r1
 80122c0:	bd38      	pop	{r3, r4, r5, pc}
 80122c2:	bf00      	nop

080122c4 <_ControlModeCommand_Request__cdr_serialize>:
 80122c4:	b180      	cbz	r0, 80122e8 <_ControlModeCommand_Request__cdr_serialize+0x24>
 80122c6:	b538      	push	{r3, r4, r5, lr}
 80122c8:	4604      	mov	r4, r0
 80122ca:	460d      	mov	r5, r1
 80122cc:	f000 fc40 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80122d0:	4603      	mov	r3, r0
 80122d2:	4629      	mov	r1, r5
 80122d4:	4620      	mov	r0, r4
 80122d6:	685b      	ldr	r3, [r3, #4]
 80122d8:	689b      	ldr	r3, [r3, #8]
 80122da:	4798      	blx	r3
 80122dc:	7a21      	ldrb	r1, [r4, #8]
 80122de:	4628      	mov	r0, r5
 80122e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80122e4:	f000 bc66 	b.w	8012bb4 <ucdr_serialize_uint8_t>
 80122e8:	4770      	bx	lr
 80122ea:	bf00      	nop

080122ec <_ControlModeCommand_Response__cdr_serialize>:
 80122ec:	460a      	mov	r2, r1
 80122ee:	b118      	cbz	r0, 80122f8 <_ControlModeCommand_Response__cdr_serialize+0xc>
 80122f0:	7801      	ldrb	r1, [r0, #0]
 80122f2:	4610      	mov	r0, r2
 80122f4:	f000 bc30 	b.w	8012b58 <ucdr_serialize_bool>
 80122f8:	4770      	bx	lr
 80122fa:	bf00      	nop

080122fc <_ControlModeCommand_Response__get_serialized_size>:
 80122fc:	b130      	cbz	r0, 801230c <_ControlModeCommand_Response__get_serialized_size+0x10>
 80122fe:	2101      	movs	r1, #1
 8012300:	2000      	movs	r0, #0
 8012302:	b508      	push	{r3, lr}
 8012304:	f001 fec4 	bl	8014090 <ucdr_alignment>
 8012308:	3001      	adds	r0, #1
 801230a:	bd08      	pop	{r3, pc}
 801230c:	4770      	bx	lr
 801230e:	bf00      	nop

08012310 <_ControlModeCommand_Request__get_serialized_size>:
 8012310:	b150      	cbz	r0, 8012328 <_ControlModeCommand_Request__get_serialized_size+0x18>
 8012312:	2100      	movs	r1, #0
 8012314:	b510      	push	{r4, lr}
 8012316:	f000 fbb7 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 801231a:	4604      	mov	r4, r0
 801231c:	2101      	movs	r1, #1
 801231e:	f001 feb7 	bl	8014090 <ucdr_alignment>
 8012322:	4420      	add	r0, r4
 8012324:	3001      	adds	r0, #1
 8012326:	bd10      	pop	{r4, pc}
 8012328:	4770      	bx	lr
 801232a:	bf00      	nop

0801232c <_ControlModeCommand_Request__max_serialized_size>:
 801232c:	b510      	push	{r4, lr}
 801232e:	b082      	sub	sp, #8
 8012330:	2401      	movs	r4, #1
 8012332:	2100      	movs	r1, #0
 8012334:	f10d 0007 	add.w	r0, sp, #7
 8012338:	f88d 4007 	strb.w	r4, [sp, #7]
 801233c:	f000 fbf4 	bl	8012b28 <max_serialized_size_builtin_interfaces__msg__Time>
 8012340:	4621      	mov	r1, r4
 8012342:	4604      	mov	r4, r0
 8012344:	f001 fea4 	bl	8014090 <ucdr_alignment>
 8012348:	4420      	add	r0, r4
 801234a:	3001      	adds	r0, #1
 801234c:	b002      	add	sp, #8
 801234e:	bd10      	pop	{r4, pc}

08012350 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand>:
 8012350:	4800      	ldr	r0, [pc, #0]	@ (8012354 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x4>)
 8012352:	4770      	bx	lr
 8012354:	24000a24 	.word	0x24000a24

08012358 <get_serialized_size_autoware_auto_vehicle_msgs__msg__ControlModeReport>:
 8012358:	b538      	push	{r3, r4, r5, lr}
 801235a:	b158      	cbz	r0, 8012374 <get_serialized_size_autoware_auto_vehicle_msgs__msg__ControlModeReport+0x1c>
 801235c:	460d      	mov	r5, r1
 801235e:	f000 fb93 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 8012362:	2101      	movs	r1, #1
 8012364:	182c      	adds	r4, r5, r0
 8012366:	f1c5 0501 	rsb	r5, r5, #1
 801236a:	4620      	mov	r0, r4
 801236c:	f001 fe90 	bl	8014090 <ucdr_alignment>
 8012370:	4428      	add	r0, r5
 8012372:	4420      	add	r0, r4
 8012374:	bd38      	pop	{r3, r4, r5, pc}
 8012376:	bf00      	nop

08012378 <_ControlModeReport__cdr_deserialize>:
 8012378:	b538      	push	{r3, r4, r5, lr}
 801237a:	460c      	mov	r4, r1
 801237c:	b179      	cbz	r1, 801239e <_ControlModeReport__cdr_deserialize+0x26>
 801237e:	4605      	mov	r5, r0
 8012380:	f000 fbe6 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012384:	4603      	mov	r3, r0
 8012386:	4621      	mov	r1, r4
 8012388:	4628      	mov	r0, r5
 801238a:	685b      	ldr	r3, [r3, #4]
 801238c:	68db      	ldr	r3, [r3, #12]
 801238e:	4798      	blx	r3
 8012390:	f104 0108 	add.w	r1, r4, #8
 8012394:	4628      	mov	r0, r5
 8012396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801239a:	f000 bc21 	b.w	8012be0 <ucdr_deserialize_uint8_t>
 801239e:	4608      	mov	r0, r1
 80123a0:	bd38      	pop	{r3, r4, r5, pc}
 80123a2:	bf00      	nop

080123a4 <_ControlModeReport__cdr_serialize>:
 80123a4:	b180      	cbz	r0, 80123c8 <_ControlModeReport__cdr_serialize+0x24>
 80123a6:	b538      	push	{r3, r4, r5, lr}
 80123a8:	4604      	mov	r4, r0
 80123aa:	460d      	mov	r5, r1
 80123ac:	f000 fbd0 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80123b0:	4603      	mov	r3, r0
 80123b2:	4629      	mov	r1, r5
 80123b4:	4620      	mov	r0, r4
 80123b6:	685b      	ldr	r3, [r3, #4]
 80123b8:	689b      	ldr	r3, [r3, #8]
 80123ba:	4798      	blx	r3
 80123bc:	7a21      	ldrb	r1, [r4, #8]
 80123be:	4628      	mov	r0, r5
 80123c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80123c4:	f000 bbf6 	b.w	8012bb4 <ucdr_serialize_uint8_t>
 80123c8:	4770      	bx	lr
 80123ca:	bf00      	nop

080123cc <_ControlModeReport__get_serialized_size>:
 80123cc:	b150      	cbz	r0, 80123e4 <_ControlModeReport__get_serialized_size+0x18>
 80123ce:	2100      	movs	r1, #0
 80123d0:	b510      	push	{r4, lr}
 80123d2:	f000 fb59 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 80123d6:	4604      	mov	r4, r0
 80123d8:	2101      	movs	r1, #1
 80123da:	f001 fe59 	bl	8014090 <ucdr_alignment>
 80123de:	4420      	add	r0, r4
 80123e0:	3001      	adds	r0, #1
 80123e2:	bd10      	pop	{r4, pc}
 80123e4:	4770      	bx	lr
 80123e6:	bf00      	nop

080123e8 <_ControlModeReport__max_serialized_size>:
 80123e8:	b510      	push	{r4, lr}
 80123ea:	b082      	sub	sp, #8
 80123ec:	2401      	movs	r4, #1
 80123ee:	2100      	movs	r1, #0
 80123f0:	f10d 0007 	add.w	r0, sp, #7
 80123f4:	f88d 4007 	strb.w	r4, [sp, #7]
 80123f8:	f000 fb96 	bl	8012b28 <max_serialized_size_builtin_interfaces__msg__Time>
 80123fc:	4621      	mov	r1, r4
 80123fe:	4604      	mov	r4, r0
 8012400:	f001 fe46 	bl	8014090 <ucdr_alignment>
 8012404:	4420      	add	r0, r4
 8012406:	3001      	adds	r0, #1
 8012408:	b002      	add	sp, #8
 801240a:	bd10      	pop	{r4, pc}

0801240c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport>:
 801240c:	4800      	ldr	r0, [pc, #0]	@ (8012410 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x4>)
 801240e:	4770      	bx	lr
 8012410:	24000a80 	.word	0x24000a80

08012414 <get_serialized_size_autoware_auto_vehicle_msgs__msg__GearCommand>:
 8012414:	b538      	push	{r3, r4, r5, lr}
 8012416:	b158      	cbz	r0, 8012430 <get_serialized_size_autoware_auto_vehicle_msgs__msg__GearCommand+0x1c>
 8012418:	460d      	mov	r5, r1
 801241a:	f000 fb35 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 801241e:	2101      	movs	r1, #1
 8012420:	182c      	adds	r4, r5, r0
 8012422:	f1c5 0501 	rsb	r5, r5, #1
 8012426:	4620      	mov	r0, r4
 8012428:	f001 fe32 	bl	8014090 <ucdr_alignment>
 801242c:	4428      	add	r0, r5
 801242e:	4420      	add	r0, r4
 8012430:	bd38      	pop	{r3, r4, r5, pc}
 8012432:	bf00      	nop

08012434 <_GearCommand__cdr_deserialize>:
 8012434:	b538      	push	{r3, r4, r5, lr}
 8012436:	460c      	mov	r4, r1
 8012438:	b179      	cbz	r1, 801245a <_GearCommand__cdr_deserialize+0x26>
 801243a:	4605      	mov	r5, r0
 801243c:	f000 fb88 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012440:	4603      	mov	r3, r0
 8012442:	4621      	mov	r1, r4
 8012444:	4628      	mov	r0, r5
 8012446:	685b      	ldr	r3, [r3, #4]
 8012448:	68db      	ldr	r3, [r3, #12]
 801244a:	4798      	blx	r3
 801244c:	f104 0108 	add.w	r1, r4, #8
 8012450:	4628      	mov	r0, r5
 8012452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012456:	f000 bbc3 	b.w	8012be0 <ucdr_deserialize_uint8_t>
 801245a:	4608      	mov	r0, r1
 801245c:	bd38      	pop	{r3, r4, r5, pc}
 801245e:	bf00      	nop

08012460 <_GearCommand__cdr_serialize>:
 8012460:	b180      	cbz	r0, 8012484 <_GearCommand__cdr_serialize+0x24>
 8012462:	b538      	push	{r3, r4, r5, lr}
 8012464:	4604      	mov	r4, r0
 8012466:	460d      	mov	r5, r1
 8012468:	f000 fb72 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801246c:	4603      	mov	r3, r0
 801246e:	4629      	mov	r1, r5
 8012470:	4620      	mov	r0, r4
 8012472:	685b      	ldr	r3, [r3, #4]
 8012474:	689b      	ldr	r3, [r3, #8]
 8012476:	4798      	blx	r3
 8012478:	7a21      	ldrb	r1, [r4, #8]
 801247a:	4628      	mov	r0, r5
 801247c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012480:	f000 bb98 	b.w	8012bb4 <ucdr_serialize_uint8_t>
 8012484:	4770      	bx	lr
 8012486:	bf00      	nop

08012488 <_GearCommand__get_serialized_size>:
 8012488:	b150      	cbz	r0, 80124a0 <_GearCommand__get_serialized_size+0x18>
 801248a:	2100      	movs	r1, #0
 801248c:	b510      	push	{r4, lr}
 801248e:	f000 fafb 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 8012492:	4604      	mov	r4, r0
 8012494:	2101      	movs	r1, #1
 8012496:	f001 fdfb 	bl	8014090 <ucdr_alignment>
 801249a:	4420      	add	r0, r4
 801249c:	3001      	adds	r0, #1
 801249e:	bd10      	pop	{r4, pc}
 80124a0:	4770      	bx	lr
 80124a2:	bf00      	nop

080124a4 <_GearCommand__max_serialized_size>:
 80124a4:	b510      	push	{r4, lr}
 80124a6:	b082      	sub	sp, #8
 80124a8:	2401      	movs	r4, #1
 80124aa:	2100      	movs	r1, #0
 80124ac:	f10d 0007 	add.w	r0, sp, #7
 80124b0:	f88d 4007 	strb.w	r4, [sp, #7]
 80124b4:	f000 fb38 	bl	8012b28 <max_serialized_size_builtin_interfaces__msg__Time>
 80124b8:	4621      	mov	r1, r4
 80124ba:	4604      	mov	r4, r0
 80124bc:	f001 fde8 	bl	8014090 <ucdr_alignment>
 80124c0:	4420      	add	r0, r4
 80124c2:	3001      	adds	r0, #1
 80124c4:	b002      	add	sp, #8
 80124c6:	bd10      	pop	{r4, pc}

080124c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand>:
 80124c8:	4800      	ldr	r0, [pc, #0]	@ (80124cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x4>)
 80124ca:	4770      	bx	lr
 80124cc:	24000aa8 	.word	0x24000aa8

080124d0 <get_serialized_size_autoware_auto_vehicle_msgs__msg__GearReport>:
 80124d0:	b538      	push	{r3, r4, r5, lr}
 80124d2:	b158      	cbz	r0, 80124ec <get_serialized_size_autoware_auto_vehicle_msgs__msg__GearReport+0x1c>
 80124d4:	460d      	mov	r5, r1
 80124d6:	f000 fad7 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 80124da:	2101      	movs	r1, #1
 80124dc:	182c      	adds	r4, r5, r0
 80124de:	f1c5 0501 	rsb	r5, r5, #1
 80124e2:	4620      	mov	r0, r4
 80124e4:	f001 fdd4 	bl	8014090 <ucdr_alignment>
 80124e8:	4428      	add	r0, r5
 80124ea:	4420      	add	r0, r4
 80124ec:	bd38      	pop	{r3, r4, r5, pc}
 80124ee:	bf00      	nop

080124f0 <_GearReport__cdr_deserialize>:
 80124f0:	b538      	push	{r3, r4, r5, lr}
 80124f2:	460c      	mov	r4, r1
 80124f4:	b179      	cbz	r1, 8012516 <_GearReport__cdr_deserialize+0x26>
 80124f6:	4605      	mov	r5, r0
 80124f8:	f000 fb2a 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80124fc:	4603      	mov	r3, r0
 80124fe:	4621      	mov	r1, r4
 8012500:	4628      	mov	r0, r5
 8012502:	685b      	ldr	r3, [r3, #4]
 8012504:	68db      	ldr	r3, [r3, #12]
 8012506:	4798      	blx	r3
 8012508:	f104 0108 	add.w	r1, r4, #8
 801250c:	4628      	mov	r0, r5
 801250e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012512:	f000 bb65 	b.w	8012be0 <ucdr_deserialize_uint8_t>
 8012516:	4608      	mov	r0, r1
 8012518:	bd38      	pop	{r3, r4, r5, pc}
 801251a:	bf00      	nop

0801251c <_GearReport__cdr_serialize>:
 801251c:	b180      	cbz	r0, 8012540 <_GearReport__cdr_serialize+0x24>
 801251e:	b538      	push	{r3, r4, r5, lr}
 8012520:	4604      	mov	r4, r0
 8012522:	460d      	mov	r5, r1
 8012524:	f000 fb14 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012528:	4603      	mov	r3, r0
 801252a:	4629      	mov	r1, r5
 801252c:	4620      	mov	r0, r4
 801252e:	685b      	ldr	r3, [r3, #4]
 8012530:	689b      	ldr	r3, [r3, #8]
 8012532:	4798      	blx	r3
 8012534:	7a21      	ldrb	r1, [r4, #8]
 8012536:	4628      	mov	r0, r5
 8012538:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801253c:	f000 bb3a 	b.w	8012bb4 <ucdr_serialize_uint8_t>
 8012540:	4770      	bx	lr
 8012542:	bf00      	nop

08012544 <_GearReport__get_serialized_size>:
 8012544:	b150      	cbz	r0, 801255c <_GearReport__get_serialized_size+0x18>
 8012546:	2100      	movs	r1, #0
 8012548:	b510      	push	{r4, lr}
 801254a:	f000 fa9d 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 801254e:	4604      	mov	r4, r0
 8012550:	2101      	movs	r1, #1
 8012552:	f001 fd9d 	bl	8014090 <ucdr_alignment>
 8012556:	4420      	add	r0, r4
 8012558:	3001      	adds	r0, #1
 801255a:	bd10      	pop	{r4, pc}
 801255c:	4770      	bx	lr
 801255e:	bf00      	nop

08012560 <_GearReport__max_serialized_size>:
 8012560:	b510      	push	{r4, lr}
 8012562:	b082      	sub	sp, #8
 8012564:	2401      	movs	r4, #1
 8012566:	2100      	movs	r1, #0
 8012568:	f10d 0007 	add.w	r0, sp, #7
 801256c:	f88d 4007 	strb.w	r4, [sp, #7]
 8012570:	f000 fada 	bl	8012b28 <max_serialized_size_builtin_interfaces__msg__Time>
 8012574:	4621      	mov	r1, r4
 8012576:	4604      	mov	r4, r0
 8012578:	f001 fd8a 	bl	8014090 <ucdr_alignment>
 801257c:	4420      	add	r0, r4
 801257e:	3001      	adds	r0, #1
 8012580:	b002      	add	sp, #8
 8012582:	bd10      	pop	{r4, pc}

08012584 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport>:
 8012584:	4800      	ldr	r0, [pc, #0]	@ (8012588 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x4>)
 8012586:	4770      	bx	lr
 8012588:	24000ad0 	.word	0x24000ad0

0801258c <get_serialized_size_autoware_auto_vehicle_msgs__msg__HazardLightsCommand>:
 801258c:	b538      	push	{r3, r4, r5, lr}
 801258e:	b158      	cbz	r0, 80125a8 <get_serialized_size_autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x1c>
 8012590:	460d      	mov	r5, r1
 8012592:	f000 fa79 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 8012596:	2101      	movs	r1, #1
 8012598:	182c      	adds	r4, r5, r0
 801259a:	f1c5 0501 	rsb	r5, r5, #1
 801259e:	4620      	mov	r0, r4
 80125a0:	f001 fd76 	bl	8014090 <ucdr_alignment>
 80125a4:	4428      	add	r0, r5
 80125a6:	4420      	add	r0, r4
 80125a8:	bd38      	pop	{r3, r4, r5, pc}
 80125aa:	bf00      	nop

080125ac <_HazardLightsCommand__cdr_deserialize>:
 80125ac:	b538      	push	{r3, r4, r5, lr}
 80125ae:	460c      	mov	r4, r1
 80125b0:	b179      	cbz	r1, 80125d2 <_HazardLightsCommand__cdr_deserialize+0x26>
 80125b2:	4605      	mov	r5, r0
 80125b4:	f000 facc 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80125b8:	4603      	mov	r3, r0
 80125ba:	4621      	mov	r1, r4
 80125bc:	4628      	mov	r0, r5
 80125be:	685b      	ldr	r3, [r3, #4]
 80125c0:	68db      	ldr	r3, [r3, #12]
 80125c2:	4798      	blx	r3
 80125c4:	f104 0108 	add.w	r1, r4, #8
 80125c8:	4628      	mov	r0, r5
 80125ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125ce:	f000 bb07 	b.w	8012be0 <ucdr_deserialize_uint8_t>
 80125d2:	4608      	mov	r0, r1
 80125d4:	bd38      	pop	{r3, r4, r5, pc}
 80125d6:	bf00      	nop

080125d8 <_HazardLightsCommand__cdr_serialize>:
 80125d8:	b180      	cbz	r0, 80125fc <_HazardLightsCommand__cdr_serialize+0x24>
 80125da:	b538      	push	{r3, r4, r5, lr}
 80125dc:	4604      	mov	r4, r0
 80125de:	460d      	mov	r5, r1
 80125e0:	f000 fab6 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80125e4:	4603      	mov	r3, r0
 80125e6:	4629      	mov	r1, r5
 80125e8:	4620      	mov	r0, r4
 80125ea:	685b      	ldr	r3, [r3, #4]
 80125ec:	689b      	ldr	r3, [r3, #8]
 80125ee:	4798      	blx	r3
 80125f0:	7a21      	ldrb	r1, [r4, #8]
 80125f2:	4628      	mov	r0, r5
 80125f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125f8:	f000 badc 	b.w	8012bb4 <ucdr_serialize_uint8_t>
 80125fc:	4770      	bx	lr
 80125fe:	bf00      	nop

08012600 <_HazardLightsCommand__get_serialized_size>:
 8012600:	b150      	cbz	r0, 8012618 <_HazardLightsCommand__get_serialized_size+0x18>
 8012602:	2100      	movs	r1, #0
 8012604:	b510      	push	{r4, lr}
 8012606:	f000 fa3f 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 801260a:	4604      	mov	r4, r0
 801260c:	2101      	movs	r1, #1
 801260e:	f001 fd3f 	bl	8014090 <ucdr_alignment>
 8012612:	4420      	add	r0, r4
 8012614:	3001      	adds	r0, #1
 8012616:	bd10      	pop	{r4, pc}
 8012618:	4770      	bx	lr
 801261a:	bf00      	nop

0801261c <_HazardLightsCommand__max_serialized_size>:
 801261c:	b510      	push	{r4, lr}
 801261e:	b082      	sub	sp, #8
 8012620:	2401      	movs	r4, #1
 8012622:	2100      	movs	r1, #0
 8012624:	f10d 0007 	add.w	r0, sp, #7
 8012628:	f88d 4007 	strb.w	r4, [sp, #7]
 801262c:	f000 fa7c 	bl	8012b28 <max_serialized_size_builtin_interfaces__msg__Time>
 8012630:	4621      	mov	r1, r4
 8012632:	4604      	mov	r4, r0
 8012634:	f001 fd2c 	bl	8014090 <ucdr_alignment>
 8012638:	4420      	add	r0, r4
 801263a:	3001      	adds	r0, #1
 801263c:	b002      	add	sp, #8
 801263e:	bd10      	pop	{r4, pc}

08012640 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand>:
 8012640:	4800      	ldr	r0, [pc, #0]	@ (8012644 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x4>)
 8012642:	4770      	bx	lr
 8012644:	24000af8 	.word	0x24000af8

08012648 <get_serialized_size_autoware_auto_vehicle_msgs__msg__HazardLightsReport>:
 8012648:	b538      	push	{r3, r4, r5, lr}
 801264a:	b158      	cbz	r0, 8012664 <get_serialized_size_autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x1c>
 801264c:	460d      	mov	r5, r1
 801264e:	f000 fa1b 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 8012652:	2101      	movs	r1, #1
 8012654:	182c      	adds	r4, r5, r0
 8012656:	f1c5 0501 	rsb	r5, r5, #1
 801265a:	4620      	mov	r0, r4
 801265c:	f001 fd18 	bl	8014090 <ucdr_alignment>
 8012660:	4428      	add	r0, r5
 8012662:	4420      	add	r0, r4
 8012664:	bd38      	pop	{r3, r4, r5, pc}
 8012666:	bf00      	nop

08012668 <_HazardLightsReport__cdr_deserialize>:
 8012668:	b538      	push	{r3, r4, r5, lr}
 801266a:	460c      	mov	r4, r1
 801266c:	b179      	cbz	r1, 801268e <_HazardLightsReport__cdr_deserialize+0x26>
 801266e:	4605      	mov	r5, r0
 8012670:	f000 fa6e 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012674:	4603      	mov	r3, r0
 8012676:	4621      	mov	r1, r4
 8012678:	4628      	mov	r0, r5
 801267a:	685b      	ldr	r3, [r3, #4]
 801267c:	68db      	ldr	r3, [r3, #12]
 801267e:	4798      	blx	r3
 8012680:	f104 0108 	add.w	r1, r4, #8
 8012684:	4628      	mov	r0, r5
 8012686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801268a:	f000 baa9 	b.w	8012be0 <ucdr_deserialize_uint8_t>
 801268e:	4608      	mov	r0, r1
 8012690:	bd38      	pop	{r3, r4, r5, pc}
 8012692:	bf00      	nop

08012694 <_HazardLightsReport__cdr_serialize>:
 8012694:	b180      	cbz	r0, 80126b8 <_HazardLightsReport__cdr_serialize+0x24>
 8012696:	b538      	push	{r3, r4, r5, lr}
 8012698:	4604      	mov	r4, r0
 801269a:	460d      	mov	r5, r1
 801269c:	f000 fa58 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80126a0:	4603      	mov	r3, r0
 80126a2:	4629      	mov	r1, r5
 80126a4:	4620      	mov	r0, r4
 80126a6:	685b      	ldr	r3, [r3, #4]
 80126a8:	689b      	ldr	r3, [r3, #8]
 80126aa:	4798      	blx	r3
 80126ac:	7a21      	ldrb	r1, [r4, #8]
 80126ae:	4628      	mov	r0, r5
 80126b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126b4:	f000 ba7e 	b.w	8012bb4 <ucdr_serialize_uint8_t>
 80126b8:	4770      	bx	lr
 80126ba:	bf00      	nop

080126bc <_HazardLightsReport__get_serialized_size>:
 80126bc:	b150      	cbz	r0, 80126d4 <_HazardLightsReport__get_serialized_size+0x18>
 80126be:	2100      	movs	r1, #0
 80126c0:	b510      	push	{r4, lr}
 80126c2:	f000 f9e1 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 80126c6:	4604      	mov	r4, r0
 80126c8:	2101      	movs	r1, #1
 80126ca:	f001 fce1 	bl	8014090 <ucdr_alignment>
 80126ce:	4420      	add	r0, r4
 80126d0:	3001      	adds	r0, #1
 80126d2:	bd10      	pop	{r4, pc}
 80126d4:	4770      	bx	lr
 80126d6:	bf00      	nop

080126d8 <_HazardLightsReport__max_serialized_size>:
 80126d8:	b510      	push	{r4, lr}
 80126da:	b082      	sub	sp, #8
 80126dc:	2401      	movs	r4, #1
 80126de:	2100      	movs	r1, #0
 80126e0:	f10d 0007 	add.w	r0, sp, #7
 80126e4:	f88d 4007 	strb.w	r4, [sp, #7]
 80126e8:	f000 fa1e 	bl	8012b28 <max_serialized_size_builtin_interfaces__msg__Time>
 80126ec:	4621      	mov	r1, r4
 80126ee:	4604      	mov	r4, r0
 80126f0:	f001 fcce 	bl	8014090 <ucdr_alignment>
 80126f4:	4420      	add	r0, r4
 80126f6:	3001      	adds	r0, #1
 80126f8:	b002      	add	sp, #8
 80126fa:	bd10      	pop	{r4, pc}

080126fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport>:
 80126fc:	4800      	ldr	r0, [pc, #0]	@ (8012700 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x4>)
 80126fe:	4770      	bx	lr
 8012700:	24000b20 	.word	0x24000b20

08012704 <get_serialized_size_autoware_auto_vehicle_msgs__msg__SteeringReport>:
 8012704:	b538      	push	{r3, r4, r5, lr}
 8012706:	b158      	cbz	r0, 8012720 <get_serialized_size_autoware_auto_vehicle_msgs__msg__SteeringReport+0x1c>
 8012708:	460d      	mov	r5, r1
 801270a:	f000 f9bd 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 801270e:	2104      	movs	r1, #4
 8012710:	182c      	adds	r4, r5, r0
 8012712:	f1c5 0504 	rsb	r5, r5, #4
 8012716:	4620      	mov	r0, r4
 8012718:	f001 fcba 	bl	8014090 <ucdr_alignment>
 801271c:	4428      	add	r0, r5
 801271e:	4420      	add	r0, r4
 8012720:	bd38      	pop	{r3, r4, r5, pc}
 8012722:	bf00      	nop

08012724 <_SteeringReport__cdr_deserialize>:
 8012724:	b538      	push	{r3, r4, r5, lr}
 8012726:	460c      	mov	r4, r1
 8012728:	b179      	cbz	r1, 801274a <_SteeringReport__cdr_deserialize+0x26>
 801272a:	4605      	mov	r5, r0
 801272c:	f000 fa10 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012730:	4603      	mov	r3, r0
 8012732:	4621      	mov	r1, r4
 8012734:	4628      	mov	r0, r5
 8012736:	685b      	ldr	r3, [r3, #4]
 8012738:	68db      	ldr	r3, [r3, #12]
 801273a:	4798      	blx	r3
 801273c:	f104 0108 	add.w	r1, r4, #8
 8012740:	4628      	mov	r0, r5
 8012742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012746:	f001 ba25 	b.w	8013b94 <ucdr_deserialize_float>
 801274a:	4608      	mov	r0, r1
 801274c:	bd38      	pop	{r3, r4, r5, pc}
 801274e:	bf00      	nop

08012750 <_SteeringReport__cdr_serialize>:
 8012750:	b188      	cbz	r0, 8012776 <_SteeringReport__cdr_serialize+0x26>
 8012752:	b538      	push	{r3, r4, r5, lr}
 8012754:	4604      	mov	r4, r0
 8012756:	460d      	mov	r5, r1
 8012758:	f000 f9fa 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801275c:	4603      	mov	r3, r0
 801275e:	4629      	mov	r1, r5
 8012760:	4620      	mov	r0, r4
 8012762:	685b      	ldr	r3, [r3, #4]
 8012764:	689b      	ldr	r3, [r3, #8]
 8012766:	4798      	blx	r3
 8012768:	ed94 0a02 	vldr	s0, [r4, #8]
 801276c:	4628      	mov	r0, r5
 801276e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012772:	f001 b977 	b.w	8013a64 <ucdr_serialize_float>
 8012776:	4770      	bx	lr

08012778 <_SteeringReport__get_serialized_size>:
 8012778:	b150      	cbz	r0, 8012790 <_SteeringReport__get_serialized_size+0x18>
 801277a:	2100      	movs	r1, #0
 801277c:	b510      	push	{r4, lr}
 801277e:	f000 f983 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 8012782:	4604      	mov	r4, r0
 8012784:	2104      	movs	r1, #4
 8012786:	f001 fc83 	bl	8014090 <ucdr_alignment>
 801278a:	4420      	add	r0, r4
 801278c:	3004      	adds	r0, #4
 801278e:	bd10      	pop	{r4, pc}
 8012790:	4770      	bx	lr
 8012792:	bf00      	nop

08012794 <_SteeringReport__max_serialized_size>:
 8012794:	b510      	push	{r4, lr}
 8012796:	b082      	sub	sp, #8
 8012798:	2301      	movs	r3, #1
 801279a:	2100      	movs	r1, #0
 801279c:	f10d 0007 	add.w	r0, sp, #7
 80127a0:	f88d 3007 	strb.w	r3, [sp, #7]
 80127a4:	f000 f9c0 	bl	8012b28 <max_serialized_size_builtin_interfaces__msg__Time>
 80127a8:	4604      	mov	r4, r0
 80127aa:	2104      	movs	r1, #4
 80127ac:	f001 fc70 	bl	8014090 <ucdr_alignment>
 80127b0:	4420      	add	r0, r4
 80127b2:	3004      	adds	r0, #4
 80127b4:	b002      	add	sp, #8
 80127b6:	bd10      	pop	{r4, pc}

080127b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport>:
 80127b8:	4800      	ldr	r0, [pc, #0]	@ (80127bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x4>)
 80127ba:	4770      	bx	lr
 80127bc:	24000b48 	.word	0x24000b48

080127c0 <get_serialized_size_autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>:
 80127c0:	b538      	push	{r3, r4, r5, lr}
 80127c2:	b158      	cbz	r0, 80127dc <get_serialized_size_autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x1c>
 80127c4:	460d      	mov	r5, r1
 80127c6:	f000 f95f 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 80127ca:	2101      	movs	r1, #1
 80127cc:	182c      	adds	r4, r5, r0
 80127ce:	f1c5 0501 	rsb	r5, r5, #1
 80127d2:	4620      	mov	r0, r4
 80127d4:	f001 fc5c 	bl	8014090 <ucdr_alignment>
 80127d8:	4428      	add	r0, r5
 80127da:	4420      	add	r0, r4
 80127dc:	bd38      	pop	{r3, r4, r5, pc}
 80127de:	bf00      	nop

080127e0 <_TurnIndicatorsCommand__cdr_deserialize>:
 80127e0:	b538      	push	{r3, r4, r5, lr}
 80127e2:	460c      	mov	r4, r1
 80127e4:	b179      	cbz	r1, 8012806 <_TurnIndicatorsCommand__cdr_deserialize+0x26>
 80127e6:	4605      	mov	r5, r0
 80127e8:	f000 f9b2 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80127ec:	4603      	mov	r3, r0
 80127ee:	4621      	mov	r1, r4
 80127f0:	4628      	mov	r0, r5
 80127f2:	685b      	ldr	r3, [r3, #4]
 80127f4:	68db      	ldr	r3, [r3, #12]
 80127f6:	4798      	blx	r3
 80127f8:	f104 0108 	add.w	r1, r4, #8
 80127fc:	4628      	mov	r0, r5
 80127fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012802:	f000 b9ed 	b.w	8012be0 <ucdr_deserialize_uint8_t>
 8012806:	4608      	mov	r0, r1
 8012808:	bd38      	pop	{r3, r4, r5, pc}
 801280a:	bf00      	nop

0801280c <_TurnIndicatorsCommand__cdr_serialize>:
 801280c:	b180      	cbz	r0, 8012830 <_TurnIndicatorsCommand__cdr_serialize+0x24>
 801280e:	b538      	push	{r3, r4, r5, lr}
 8012810:	4604      	mov	r4, r0
 8012812:	460d      	mov	r5, r1
 8012814:	f000 f99c 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012818:	4603      	mov	r3, r0
 801281a:	4629      	mov	r1, r5
 801281c:	4620      	mov	r0, r4
 801281e:	685b      	ldr	r3, [r3, #4]
 8012820:	689b      	ldr	r3, [r3, #8]
 8012822:	4798      	blx	r3
 8012824:	7a21      	ldrb	r1, [r4, #8]
 8012826:	4628      	mov	r0, r5
 8012828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801282c:	f000 b9c2 	b.w	8012bb4 <ucdr_serialize_uint8_t>
 8012830:	4770      	bx	lr
 8012832:	bf00      	nop

08012834 <_TurnIndicatorsCommand__get_serialized_size>:
 8012834:	b150      	cbz	r0, 801284c <_TurnIndicatorsCommand__get_serialized_size+0x18>
 8012836:	2100      	movs	r1, #0
 8012838:	b510      	push	{r4, lr}
 801283a:	f000 f925 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 801283e:	4604      	mov	r4, r0
 8012840:	2101      	movs	r1, #1
 8012842:	f001 fc25 	bl	8014090 <ucdr_alignment>
 8012846:	4420      	add	r0, r4
 8012848:	3001      	adds	r0, #1
 801284a:	bd10      	pop	{r4, pc}
 801284c:	4770      	bx	lr
 801284e:	bf00      	nop

08012850 <_TurnIndicatorsCommand__max_serialized_size>:
 8012850:	b510      	push	{r4, lr}
 8012852:	b082      	sub	sp, #8
 8012854:	2401      	movs	r4, #1
 8012856:	2100      	movs	r1, #0
 8012858:	f10d 0007 	add.w	r0, sp, #7
 801285c:	f88d 4007 	strb.w	r4, [sp, #7]
 8012860:	f000 f962 	bl	8012b28 <max_serialized_size_builtin_interfaces__msg__Time>
 8012864:	4621      	mov	r1, r4
 8012866:	4604      	mov	r4, r0
 8012868:	f001 fc12 	bl	8014090 <ucdr_alignment>
 801286c:	4420      	add	r0, r4
 801286e:	3001      	adds	r0, #1
 8012870:	b002      	add	sp, #8
 8012872:	bd10      	pop	{r4, pc}

08012874 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8012874:	4800      	ldr	r0, [pc, #0]	@ (8012878 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x4>)
 8012876:	4770      	bx	lr
 8012878:	24000b70 	.word	0x24000b70

0801287c <get_serialized_size_autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>:
 801287c:	b538      	push	{r3, r4, r5, lr}
 801287e:	b158      	cbz	r0, 8012898 <get_serialized_size_autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x1c>
 8012880:	460d      	mov	r5, r1
 8012882:	f000 f901 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 8012886:	2101      	movs	r1, #1
 8012888:	182c      	adds	r4, r5, r0
 801288a:	f1c5 0501 	rsb	r5, r5, #1
 801288e:	4620      	mov	r0, r4
 8012890:	f001 fbfe 	bl	8014090 <ucdr_alignment>
 8012894:	4428      	add	r0, r5
 8012896:	4420      	add	r0, r4
 8012898:	bd38      	pop	{r3, r4, r5, pc}
 801289a:	bf00      	nop

0801289c <_TurnIndicatorsReport__cdr_deserialize>:
 801289c:	b538      	push	{r3, r4, r5, lr}
 801289e:	460c      	mov	r4, r1
 80128a0:	b179      	cbz	r1, 80128c2 <_TurnIndicatorsReport__cdr_deserialize+0x26>
 80128a2:	4605      	mov	r5, r0
 80128a4:	f000 f954 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80128a8:	4603      	mov	r3, r0
 80128aa:	4621      	mov	r1, r4
 80128ac:	4628      	mov	r0, r5
 80128ae:	685b      	ldr	r3, [r3, #4]
 80128b0:	68db      	ldr	r3, [r3, #12]
 80128b2:	4798      	blx	r3
 80128b4:	f104 0108 	add.w	r1, r4, #8
 80128b8:	4628      	mov	r0, r5
 80128ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80128be:	f000 b98f 	b.w	8012be0 <ucdr_deserialize_uint8_t>
 80128c2:	4608      	mov	r0, r1
 80128c4:	bd38      	pop	{r3, r4, r5, pc}
 80128c6:	bf00      	nop

080128c8 <_TurnIndicatorsReport__cdr_serialize>:
 80128c8:	b180      	cbz	r0, 80128ec <_TurnIndicatorsReport__cdr_serialize+0x24>
 80128ca:	b538      	push	{r3, r4, r5, lr}
 80128cc:	4604      	mov	r4, r0
 80128ce:	460d      	mov	r5, r1
 80128d0:	f000 f93e 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80128d4:	4603      	mov	r3, r0
 80128d6:	4629      	mov	r1, r5
 80128d8:	4620      	mov	r0, r4
 80128da:	685b      	ldr	r3, [r3, #4]
 80128dc:	689b      	ldr	r3, [r3, #8]
 80128de:	4798      	blx	r3
 80128e0:	7a21      	ldrb	r1, [r4, #8]
 80128e2:	4628      	mov	r0, r5
 80128e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80128e8:	f000 b964 	b.w	8012bb4 <ucdr_serialize_uint8_t>
 80128ec:	4770      	bx	lr
 80128ee:	bf00      	nop

080128f0 <_TurnIndicatorsReport__get_serialized_size>:
 80128f0:	b150      	cbz	r0, 8012908 <_TurnIndicatorsReport__get_serialized_size+0x18>
 80128f2:	2100      	movs	r1, #0
 80128f4:	b510      	push	{r4, lr}
 80128f6:	f000 f8c7 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 80128fa:	4604      	mov	r4, r0
 80128fc:	2101      	movs	r1, #1
 80128fe:	f001 fbc7 	bl	8014090 <ucdr_alignment>
 8012902:	4420      	add	r0, r4
 8012904:	3001      	adds	r0, #1
 8012906:	bd10      	pop	{r4, pc}
 8012908:	4770      	bx	lr
 801290a:	bf00      	nop

0801290c <_TurnIndicatorsReport__max_serialized_size>:
 801290c:	b510      	push	{r4, lr}
 801290e:	b082      	sub	sp, #8
 8012910:	2401      	movs	r4, #1
 8012912:	2100      	movs	r1, #0
 8012914:	f10d 0007 	add.w	r0, sp, #7
 8012918:	f88d 4007 	strb.w	r4, [sp, #7]
 801291c:	f000 f904 	bl	8012b28 <max_serialized_size_builtin_interfaces__msg__Time>
 8012920:	4621      	mov	r1, r4
 8012922:	4604      	mov	r4, r0
 8012924:	f001 fbb4 	bl	8014090 <ucdr_alignment>
 8012928:	4420      	add	r0, r4
 801292a:	3001      	adds	r0, #1
 801292c:	b002      	add	sp, #8
 801292e:	bd10      	pop	{r4, pc}

08012930 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>:
 8012930:	4800      	ldr	r0, [pc, #0]	@ (8012934 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x4>)
 8012932:	4770      	bx	lr
 8012934:	24000b98 	.word	0x24000b98

08012938 <get_serialized_size_autoware_auto_vehicle_msgs__msg__VelocityReport>:
 8012938:	b1c8      	cbz	r0, 801296e <get_serialized_size_autoware_auto_vehicle_msgs__msg__VelocityReport+0x36>
 801293a:	b570      	push	{r4, r5, r6, lr}
 801293c:	460d      	mov	r5, r1
 801293e:	f003 fd23 	bl	8016388 <get_serialized_size_std_msgs__msg__Header>
 8012942:	2104      	movs	r1, #4
 8012944:	182e      	adds	r6, r5, r0
 8012946:	f1c5 0504 	rsb	r5, r5, #4
 801294a:	4630      	mov	r0, r6
 801294c:	f001 fba0 	bl	8014090 <ucdr_alignment>
 8012950:	2104      	movs	r1, #4
 8012952:	1844      	adds	r4, r0, r1
 8012954:	4434      	add	r4, r6
 8012956:	4620      	mov	r0, r4
 8012958:	f001 fb9a 	bl	8014090 <ucdr_alignment>
 801295c:	2104      	movs	r1, #4
 801295e:	4408      	add	r0, r1
 8012960:	4404      	add	r4, r0
 8012962:	4620      	mov	r0, r4
 8012964:	f001 fb94 	bl	8014090 <ucdr_alignment>
 8012968:	4428      	add	r0, r5
 801296a:	4420      	add	r0, r4
 801296c:	bd70      	pop	{r4, r5, r6, pc}
 801296e:	4770      	bx	lr

08012970 <_VelocityReport__cdr_deserialize>:
 8012970:	b538      	push	{r3, r4, r5, lr}
 8012972:	460c      	mov	r4, r1
 8012974:	b1c9      	cbz	r1, 80129aa <_VelocityReport__cdr_deserialize+0x3a>
 8012976:	4605      	mov	r5, r0
 8012978:	f003 fd8a 	bl	8016490 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801297c:	4603      	mov	r3, r0
 801297e:	4621      	mov	r1, r4
 8012980:	4628      	mov	r0, r5
 8012982:	685b      	ldr	r3, [r3, #4]
 8012984:	68db      	ldr	r3, [r3, #12]
 8012986:	4798      	blx	r3
 8012988:	f104 0114 	add.w	r1, r4, #20
 801298c:	4628      	mov	r0, r5
 801298e:	f001 f901 	bl	8013b94 <ucdr_deserialize_float>
 8012992:	f104 0118 	add.w	r1, r4, #24
 8012996:	4628      	mov	r0, r5
 8012998:	f001 f8fc 	bl	8013b94 <ucdr_deserialize_float>
 801299c:	f104 011c 	add.w	r1, r4, #28
 80129a0:	4628      	mov	r0, r5
 80129a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129a6:	f001 b8f5 	b.w	8013b94 <ucdr_deserialize_float>
 80129aa:	4608      	mov	r0, r1
 80129ac:	bd38      	pop	{r3, r4, r5, pc}
 80129ae:	bf00      	nop

080129b0 <_VelocityReport__cdr_serialize>:
 80129b0:	b1d8      	cbz	r0, 80129ea <_VelocityReport__cdr_serialize+0x3a>
 80129b2:	b538      	push	{r3, r4, r5, lr}
 80129b4:	4604      	mov	r4, r0
 80129b6:	460d      	mov	r5, r1
 80129b8:	f003 fd6a 	bl	8016490 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80129bc:	4603      	mov	r3, r0
 80129be:	4629      	mov	r1, r5
 80129c0:	4620      	mov	r0, r4
 80129c2:	685b      	ldr	r3, [r3, #4]
 80129c4:	689b      	ldr	r3, [r3, #8]
 80129c6:	4798      	blx	r3
 80129c8:	ed94 0a05 	vldr	s0, [r4, #20]
 80129cc:	4628      	mov	r0, r5
 80129ce:	f001 f849 	bl	8013a64 <ucdr_serialize_float>
 80129d2:	ed94 0a06 	vldr	s0, [r4, #24]
 80129d6:	4628      	mov	r0, r5
 80129d8:	f001 f844 	bl	8013a64 <ucdr_serialize_float>
 80129dc:	ed94 0a07 	vldr	s0, [r4, #28]
 80129e0:	4628      	mov	r0, r5
 80129e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129e6:	f001 b83d 	b.w	8013a64 <ucdr_serialize_float>
 80129ea:	4770      	bx	lr

080129ec <_VelocityReport__get_serialized_size>:
 80129ec:	b1b0      	cbz	r0, 8012a1c <_VelocityReport__get_serialized_size+0x30>
 80129ee:	2100      	movs	r1, #0
 80129f0:	b510      	push	{r4, lr}
 80129f2:	f003 fcc9 	bl	8016388 <get_serialized_size_std_msgs__msg__Header>
 80129f6:	4604      	mov	r4, r0
 80129f8:	2104      	movs	r1, #4
 80129fa:	f001 fb49 	bl	8014090 <ucdr_alignment>
 80129fe:	2104      	movs	r1, #4
 8012a00:	4420      	add	r0, r4
 8012a02:	1844      	adds	r4, r0, r1
 8012a04:	4620      	mov	r0, r4
 8012a06:	f001 fb43 	bl	8014090 <ucdr_alignment>
 8012a0a:	2104      	movs	r1, #4
 8012a0c:	4408      	add	r0, r1
 8012a0e:	4404      	add	r4, r0
 8012a10:	4620      	mov	r0, r4
 8012a12:	f001 fb3d 	bl	8014090 <ucdr_alignment>
 8012a16:	3004      	adds	r0, #4
 8012a18:	4420      	add	r0, r4
 8012a1a:	bd10      	pop	{r4, pc}
 8012a1c:	4770      	bx	lr
 8012a1e:	bf00      	nop

08012a20 <_VelocityReport__max_serialized_size>:
 8012a20:	b510      	push	{r4, lr}
 8012a22:	b082      	sub	sp, #8
 8012a24:	2301      	movs	r3, #1
 8012a26:	2100      	movs	r1, #0
 8012a28:	f10d 0007 	add.w	r0, sp, #7
 8012a2c:	f88d 3007 	strb.w	r3, [sp, #7]
 8012a30:	f003 fd24 	bl	801647c <max_serialized_size_std_msgs__msg__Header>
 8012a34:	4604      	mov	r4, r0
 8012a36:	2104      	movs	r1, #4
 8012a38:	f001 fb2a 	bl	8014090 <ucdr_alignment>
 8012a3c:	2104      	movs	r1, #4
 8012a3e:	4420      	add	r0, r4
 8012a40:	1844      	adds	r4, r0, r1
 8012a42:	4620      	mov	r0, r4
 8012a44:	f001 fb24 	bl	8014090 <ucdr_alignment>
 8012a48:	2104      	movs	r1, #4
 8012a4a:	4408      	add	r0, r1
 8012a4c:	4404      	add	r4, r0
 8012a4e:	4620      	mov	r0, r4
 8012a50:	f001 fb1e 	bl	8014090 <ucdr_alignment>
 8012a54:	3004      	adds	r0, #4
 8012a56:	4420      	add	r0, r4
 8012a58:	b002      	add	sp, #8
 8012a5a:	bd10      	pop	{r4, pc}

08012a5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport>:
 8012a5c:	4800      	ldr	r0, [pc, #0]	@ (8012a60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x4>)
 8012a5e:	4770      	bx	lr
 8012a60:	24000bc0 	.word	0x24000bc0

08012a64 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8012a64:	f004 b8ee 	b.w	8016c44 <builtin_interfaces__msg__Time__init>

08012a68 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8012a68:	f004 b8f0 	b.w	8016c4c <builtin_interfaces__msg__Time__fini>

08012a6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8012a6c:	4b04      	ldr	r3, [pc, #16]	@ (8012a80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012a6e:	681a      	ldr	r2, [r3, #0]
 8012a70:	b10a      	cbz	r2, 8012a76 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 8012a72:	4803      	ldr	r0, [pc, #12]	@ (8012a80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012a74:	4770      	bx	lr
 8012a76:	4a03      	ldr	r2, [pc, #12]	@ (8012a84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8012a78:	4801      	ldr	r0, [pc, #4]	@ (8012a80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012a7a:	6812      	ldr	r2, [r2, #0]
 8012a7c:	601a      	str	r2, [r3, #0]
 8012a7e:	4770      	bx	lr
 8012a80:	24000c60 	.word	0x24000c60
 8012a84:	24000d30 	.word	0x24000d30

08012a88 <get_serialized_size_builtin_interfaces__msg__Time>:
 8012a88:	b180      	cbz	r0, 8012aac <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8012a8a:	b538      	push	{r3, r4, r5, lr}
 8012a8c:	460d      	mov	r5, r1
 8012a8e:	2104      	movs	r1, #4
 8012a90:	4628      	mov	r0, r5
 8012a92:	f001 fafd 	bl	8014090 <ucdr_alignment>
 8012a96:	1d2b      	adds	r3, r5, #4
 8012a98:	f1c5 0504 	rsb	r5, r5, #4
 8012a9c:	2104      	movs	r1, #4
 8012a9e:	181c      	adds	r4, r3, r0
 8012aa0:	4620      	mov	r0, r4
 8012aa2:	f001 faf5 	bl	8014090 <ucdr_alignment>
 8012aa6:	4428      	add	r0, r5
 8012aa8:	4420      	add	r0, r4
 8012aaa:	bd38      	pop	{r3, r4, r5, pc}
 8012aac:	4770      	bx	lr
 8012aae:	bf00      	nop

08012ab0 <_Time__cdr_deserialize>:
 8012ab0:	b538      	push	{r3, r4, r5, lr}
 8012ab2:	460c      	mov	r4, r1
 8012ab4:	b141      	cbz	r1, 8012ac8 <_Time__cdr_deserialize+0x18>
 8012ab6:	4605      	mov	r5, r0
 8012ab8:	f000 ff44 	bl	8013944 <ucdr_deserialize_int32_t>
 8012abc:	1d21      	adds	r1, r4, #4
 8012abe:	4628      	mov	r0, r5
 8012ac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ac4:	f000 bbbc 	b.w	8013240 <ucdr_deserialize_uint32_t>
 8012ac8:	4608      	mov	r0, r1
 8012aca:	bd38      	pop	{r3, r4, r5, pc}

08012acc <_Time__cdr_serialize>:
 8012acc:	b160      	cbz	r0, 8012ae8 <_Time__cdr_serialize+0x1c>
 8012ace:	b538      	push	{r3, r4, r5, lr}
 8012ad0:	460d      	mov	r5, r1
 8012ad2:	4604      	mov	r4, r0
 8012ad4:	6801      	ldr	r1, [r0, #0]
 8012ad6:	4628      	mov	r0, r5
 8012ad8:	f000 fe9c 	bl	8013814 <ucdr_serialize_int32_t>
 8012adc:	6861      	ldr	r1, [r4, #4]
 8012ade:	4628      	mov	r0, r5
 8012ae0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ae4:	f000 ba7c 	b.w	8012fe0 <ucdr_serialize_uint32_t>
 8012ae8:	4770      	bx	lr
 8012aea:	bf00      	nop

08012aec <_Time__get_serialized_size>:
 8012aec:	b160      	cbz	r0, 8012b08 <_Time__get_serialized_size+0x1c>
 8012aee:	2104      	movs	r1, #4
 8012af0:	2000      	movs	r0, #0
 8012af2:	b510      	push	{r4, lr}
 8012af4:	f001 facc 	bl	8014090 <ucdr_alignment>
 8012af8:	2104      	movs	r1, #4
 8012afa:	1844      	adds	r4, r0, r1
 8012afc:	4620      	mov	r0, r4
 8012afe:	f001 fac7 	bl	8014090 <ucdr_alignment>
 8012b02:	3004      	adds	r0, #4
 8012b04:	4420      	add	r0, r4
 8012b06:	bd10      	pop	{r4, pc}
 8012b08:	4770      	bx	lr
 8012b0a:	bf00      	nop

08012b0c <_Time__max_serialized_size>:
 8012b0c:	b510      	push	{r4, lr}
 8012b0e:	2104      	movs	r1, #4
 8012b10:	2000      	movs	r0, #0
 8012b12:	f001 fabd 	bl	8014090 <ucdr_alignment>
 8012b16:	2104      	movs	r1, #4
 8012b18:	1844      	adds	r4, r0, r1
 8012b1a:	4620      	mov	r0, r4
 8012b1c:	f001 fab8 	bl	8014090 <ucdr_alignment>
 8012b20:	3004      	adds	r0, #4
 8012b22:	4420      	add	r0, r4
 8012b24:	bd10      	pop	{r4, pc}
 8012b26:	bf00      	nop

08012b28 <max_serialized_size_builtin_interfaces__msg__Time>:
 8012b28:	b538      	push	{r3, r4, r5, lr}
 8012b2a:	460c      	mov	r4, r1
 8012b2c:	2301      	movs	r3, #1
 8012b2e:	2104      	movs	r1, #4
 8012b30:	1d25      	adds	r5, r4, #4
 8012b32:	7003      	strb	r3, [r0, #0]
 8012b34:	4620      	mov	r0, r4
 8012b36:	f1c4 0404 	rsb	r4, r4, #4
 8012b3a:	f001 faa9 	bl	8014090 <ucdr_alignment>
 8012b3e:	4405      	add	r5, r0
 8012b40:	2104      	movs	r1, #4
 8012b42:	4628      	mov	r0, r5
 8012b44:	f001 faa4 	bl	8014090 <ucdr_alignment>
 8012b48:	4420      	add	r0, r4
 8012b4a:	4428      	add	r0, r5
 8012b4c:	bd38      	pop	{r3, r4, r5, pc}
 8012b4e:	bf00      	nop

08012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8012b50:	4800      	ldr	r0, [pc, #0]	@ (8012b54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 8012b52:	4770      	bx	lr
 8012b54:	24000c6c 	.word	0x24000c6c

08012b58 <ucdr_serialize_bool>:
 8012b58:	b538      	push	{r3, r4, r5, lr}
 8012b5a:	460d      	mov	r5, r1
 8012b5c:	2101      	movs	r1, #1
 8012b5e:	4604      	mov	r4, r0
 8012b60:	f001 fa4a 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8012b64:	b148      	cbz	r0, 8012b7a <ucdr_serialize_bool+0x22>
 8012b66:	68a3      	ldr	r3, [r4, #8]
 8012b68:	2101      	movs	r1, #1
 8012b6a:	701d      	strb	r5, [r3, #0]
 8012b6c:	68a2      	ldr	r2, [r4, #8]
 8012b6e:	6923      	ldr	r3, [r4, #16]
 8012b70:	440a      	add	r2, r1
 8012b72:	7561      	strb	r1, [r4, #21]
 8012b74:	440b      	add	r3, r1
 8012b76:	60a2      	str	r2, [r4, #8]
 8012b78:	6123      	str	r3, [r4, #16]
 8012b7a:	7da0      	ldrb	r0, [r4, #22]
 8012b7c:	f080 0001 	eor.w	r0, r0, #1
 8012b80:	bd38      	pop	{r3, r4, r5, pc}
 8012b82:	bf00      	nop

08012b84 <ucdr_deserialize_bool>:
 8012b84:	b538      	push	{r3, r4, r5, lr}
 8012b86:	460d      	mov	r5, r1
 8012b88:	2101      	movs	r1, #1
 8012b8a:	4604      	mov	r4, r0
 8012b8c:	f001 fa34 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8012b90:	b160      	cbz	r0, 8012bac <ucdr_deserialize_bool+0x28>
 8012b92:	68a2      	ldr	r2, [r4, #8]
 8012b94:	2101      	movs	r1, #1
 8012b96:	6923      	ldr	r3, [r4, #16]
 8012b98:	f812 0b01 	ldrb.w	r0, [r2], #1
 8012b9c:	440b      	add	r3, r1
 8012b9e:	3800      	subs	r0, #0
 8012ba0:	bf18      	it	ne
 8012ba2:	2001      	movne	r0, #1
 8012ba4:	7028      	strb	r0, [r5, #0]
 8012ba6:	60a2      	str	r2, [r4, #8]
 8012ba8:	6123      	str	r3, [r4, #16]
 8012baa:	7561      	strb	r1, [r4, #21]
 8012bac:	7da0      	ldrb	r0, [r4, #22]
 8012bae:	f080 0001 	eor.w	r0, r0, #1
 8012bb2:	bd38      	pop	{r3, r4, r5, pc}

08012bb4 <ucdr_serialize_uint8_t>:
 8012bb4:	b538      	push	{r3, r4, r5, lr}
 8012bb6:	460d      	mov	r5, r1
 8012bb8:	2101      	movs	r1, #1
 8012bba:	4604      	mov	r4, r0
 8012bbc:	f001 fa1c 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8012bc0:	b148      	cbz	r0, 8012bd6 <ucdr_serialize_uint8_t+0x22>
 8012bc2:	68a3      	ldr	r3, [r4, #8]
 8012bc4:	2101      	movs	r1, #1
 8012bc6:	701d      	strb	r5, [r3, #0]
 8012bc8:	68a2      	ldr	r2, [r4, #8]
 8012bca:	6923      	ldr	r3, [r4, #16]
 8012bcc:	440a      	add	r2, r1
 8012bce:	7561      	strb	r1, [r4, #21]
 8012bd0:	440b      	add	r3, r1
 8012bd2:	60a2      	str	r2, [r4, #8]
 8012bd4:	6123      	str	r3, [r4, #16]
 8012bd6:	7da0      	ldrb	r0, [r4, #22]
 8012bd8:	f080 0001 	eor.w	r0, r0, #1
 8012bdc:	bd38      	pop	{r3, r4, r5, pc}
 8012bde:	bf00      	nop

08012be0 <ucdr_deserialize_uint8_t>:
 8012be0:	b538      	push	{r3, r4, r5, lr}
 8012be2:	460d      	mov	r5, r1
 8012be4:	2101      	movs	r1, #1
 8012be6:	4604      	mov	r4, r0
 8012be8:	f001 fa06 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8012bec:	b150      	cbz	r0, 8012c04 <ucdr_deserialize_uint8_t+0x24>
 8012bee:	68a3      	ldr	r3, [r4, #8]
 8012bf0:	2101      	movs	r1, #1
 8012bf2:	781b      	ldrb	r3, [r3, #0]
 8012bf4:	702b      	strb	r3, [r5, #0]
 8012bf6:	68a2      	ldr	r2, [r4, #8]
 8012bf8:	6923      	ldr	r3, [r4, #16]
 8012bfa:	440a      	add	r2, r1
 8012bfc:	7561      	strb	r1, [r4, #21]
 8012bfe:	440b      	add	r3, r1
 8012c00:	60a2      	str	r2, [r4, #8]
 8012c02:	6123      	str	r3, [r4, #16]
 8012c04:	7da0      	ldrb	r0, [r4, #22]
 8012c06:	f080 0001 	eor.w	r0, r0, #1
 8012c0a:	bd38      	pop	{r3, r4, r5, pc}

08012c0c <ucdr_serialize_uint16_t>:
 8012c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c10:	460b      	mov	r3, r1
 8012c12:	b082      	sub	sp, #8
 8012c14:	4604      	mov	r4, r0
 8012c16:	2102      	movs	r1, #2
 8012c18:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012c1c:	f001 fa40 	bl	80140a0 <ucdr_buffer_alignment>
 8012c20:	4601      	mov	r1, r0
 8012c22:	4620      	mov	r0, r4
 8012c24:	7d67      	ldrb	r7, [r4, #21]
 8012c26:	f001 fa83 	bl	8014130 <ucdr_advance_buffer>
 8012c2a:	2102      	movs	r1, #2
 8012c2c:	4620      	mov	r0, r4
 8012c2e:	f001 f9d7 	bl	8013fe0 <ucdr_check_buffer_available_for>
 8012c32:	bb78      	cbnz	r0, 8012c94 <ucdr_serialize_uint16_t+0x88>
 8012c34:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012c38:	42ab      	cmp	r3, r5
 8012c3a:	d926      	bls.n	8012c8a <ucdr_serialize_uint16_t+0x7e>
 8012c3c:	1b5e      	subs	r6, r3, r5
 8012c3e:	60a3      	str	r3, [r4, #8]
 8012c40:	6923      	ldr	r3, [r4, #16]
 8012c42:	4620      	mov	r0, r4
 8012c44:	f1c6 0802 	rsb	r8, r6, #2
 8012c48:	4433      	add	r3, r6
 8012c4a:	4641      	mov	r1, r8
 8012c4c:	6123      	str	r3, [r4, #16]
 8012c4e:	f001 f9d3 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8012c52:	2800      	cmp	r0, #0
 8012c54:	d03b      	beq.n	8012cce <ucdr_serialize_uint16_t+0xc2>
 8012c56:	7d23      	ldrb	r3, [r4, #20]
 8012c58:	2b01      	cmp	r3, #1
 8012c5a:	d04a      	beq.n	8012cf2 <ucdr_serialize_uint16_t+0xe6>
 8012c5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012c60:	702b      	strb	r3, [r5, #0]
 8012c62:	2e00      	cmp	r6, #0
 8012c64:	d040      	beq.n	8012ce8 <ucdr_serialize_uint16_t+0xdc>
 8012c66:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012c6a:	706b      	strb	r3, [r5, #1]
 8012c6c:	6923      	ldr	r3, [r4, #16]
 8012c6e:	2102      	movs	r1, #2
 8012c70:	68a2      	ldr	r2, [r4, #8]
 8012c72:	3302      	adds	r3, #2
 8012c74:	7da0      	ldrb	r0, [r4, #22]
 8012c76:	4442      	add	r2, r8
 8012c78:	7561      	strb	r1, [r4, #21]
 8012c7a:	1b9e      	subs	r6, r3, r6
 8012c7c:	f080 0001 	eor.w	r0, r0, #1
 8012c80:	60a2      	str	r2, [r4, #8]
 8012c82:	6126      	str	r6, [r4, #16]
 8012c84:	b002      	add	sp, #8
 8012c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c8a:	2102      	movs	r1, #2
 8012c8c:	4620      	mov	r0, r4
 8012c8e:	f001 f9b3 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8012c92:	b190      	cbz	r0, 8012cba <ucdr_serialize_uint16_t+0xae>
 8012c94:	7d23      	ldrb	r3, [r4, #20]
 8012c96:	2b01      	cmp	r3, #1
 8012c98:	68a3      	ldr	r3, [r4, #8]
 8012c9a:	d014      	beq.n	8012cc6 <ucdr_serialize_uint16_t+0xba>
 8012c9c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012ca0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012ca4:	7019      	strb	r1, [r3, #0]
 8012ca6:	68a3      	ldr	r3, [r4, #8]
 8012ca8:	705a      	strb	r2, [r3, #1]
 8012caa:	2102      	movs	r1, #2
 8012cac:	68a2      	ldr	r2, [r4, #8]
 8012cae:	6923      	ldr	r3, [r4, #16]
 8012cb0:	440a      	add	r2, r1
 8012cb2:	7561      	strb	r1, [r4, #21]
 8012cb4:	440b      	add	r3, r1
 8012cb6:	60a2      	str	r2, [r4, #8]
 8012cb8:	6123      	str	r3, [r4, #16]
 8012cba:	7da0      	ldrb	r0, [r4, #22]
 8012cbc:	f080 0001 	eor.w	r0, r0, #1
 8012cc0:	b002      	add	sp, #8
 8012cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cc6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012cca:	801a      	strh	r2, [r3, #0]
 8012ccc:	e7ed      	b.n	8012caa <ucdr_serialize_uint16_t+0x9e>
 8012cce:	68a2      	ldr	r2, [r4, #8]
 8012cd0:	6923      	ldr	r3, [r4, #16]
 8012cd2:	7da0      	ldrb	r0, [r4, #22]
 8012cd4:	1b92      	subs	r2, r2, r6
 8012cd6:	1b9b      	subs	r3, r3, r6
 8012cd8:	7567      	strb	r7, [r4, #21]
 8012cda:	f080 0001 	eor.w	r0, r0, #1
 8012cde:	60a2      	str	r2, [r4, #8]
 8012ce0:	6123      	str	r3, [r4, #16]
 8012ce2:	b002      	add	sp, #8
 8012ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ce8:	68a3      	ldr	r3, [r4, #8]
 8012cea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012cee:	701a      	strb	r2, [r3, #0]
 8012cf0:	e7bc      	b.n	8012c6c <ucdr_serialize_uint16_t+0x60>
 8012cf2:	4628      	mov	r0, r5
 8012cf4:	f10d 0506 	add.w	r5, sp, #6
 8012cf8:	4632      	mov	r2, r6
 8012cfa:	4629      	mov	r1, r5
 8012cfc:	f00f fb87 	bl	802240e <memcpy>
 8012d00:	4642      	mov	r2, r8
 8012d02:	19a9      	adds	r1, r5, r6
 8012d04:	68a0      	ldr	r0, [r4, #8]
 8012d06:	f00f fb82 	bl	802240e <memcpy>
 8012d0a:	e7af      	b.n	8012c6c <ucdr_serialize_uint16_t+0x60>

08012d0c <ucdr_serialize_endian_uint16_t>:
 8012d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012d10:	4604      	mov	r4, r0
 8012d12:	b083      	sub	sp, #12
 8012d14:	460d      	mov	r5, r1
 8012d16:	2102      	movs	r1, #2
 8012d18:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012d1c:	f001 f9c0 	bl	80140a0 <ucdr_buffer_alignment>
 8012d20:	4601      	mov	r1, r0
 8012d22:	4620      	mov	r0, r4
 8012d24:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012d28:	f001 fa02 	bl	8014130 <ucdr_advance_buffer>
 8012d2c:	2102      	movs	r1, #2
 8012d2e:	4620      	mov	r0, r4
 8012d30:	f001 f956 	bl	8013fe0 <ucdr_check_buffer_available_for>
 8012d34:	bb70      	cbnz	r0, 8012d94 <ucdr_serialize_endian_uint16_t+0x88>
 8012d36:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012d3a:	42be      	cmp	r6, r7
 8012d3c:	d925      	bls.n	8012d8a <ucdr_serialize_endian_uint16_t+0x7e>
 8012d3e:	6923      	ldr	r3, [r4, #16]
 8012d40:	4620      	mov	r0, r4
 8012d42:	60a6      	str	r6, [r4, #8]
 8012d44:	1bf6      	subs	r6, r6, r7
 8012d46:	4433      	add	r3, r6
 8012d48:	f1c6 0902 	rsb	r9, r6, #2
 8012d4c:	6123      	str	r3, [r4, #16]
 8012d4e:	4649      	mov	r1, r9
 8012d50:	f001 f952 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8012d54:	2800      	cmp	r0, #0
 8012d56:	d039      	beq.n	8012dcc <ucdr_serialize_endian_uint16_t+0xc0>
 8012d58:	2d01      	cmp	r5, #1
 8012d5a:	d04a      	beq.n	8012df2 <ucdr_serialize_endian_uint16_t+0xe6>
 8012d5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012d60:	703b      	strb	r3, [r7, #0]
 8012d62:	2e00      	cmp	r6, #0
 8012d64:	d040      	beq.n	8012de8 <ucdr_serialize_endian_uint16_t+0xdc>
 8012d66:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012d6a:	707b      	strb	r3, [r7, #1]
 8012d6c:	6923      	ldr	r3, [r4, #16]
 8012d6e:	2102      	movs	r1, #2
 8012d70:	68a2      	ldr	r2, [r4, #8]
 8012d72:	7da0      	ldrb	r0, [r4, #22]
 8012d74:	3302      	adds	r3, #2
 8012d76:	444a      	add	r2, r9
 8012d78:	7561      	strb	r1, [r4, #21]
 8012d7a:	1b9b      	subs	r3, r3, r6
 8012d7c:	f080 0001 	eor.w	r0, r0, #1
 8012d80:	60a2      	str	r2, [r4, #8]
 8012d82:	6123      	str	r3, [r4, #16]
 8012d84:	b003      	add	sp, #12
 8012d86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d8a:	2102      	movs	r1, #2
 8012d8c:	4620      	mov	r0, r4
 8012d8e:	f001 f933 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8012d92:	b188      	cbz	r0, 8012db8 <ucdr_serialize_endian_uint16_t+0xac>
 8012d94:	2d01      	cmp	r5, #1
 8012d96:	68a3      	ldr	r3, [r4, #8]
 8012d98:	d014      	beq.n	8012dc4 <ucdr_serialize_endian_uint16_t+0xb8>
 8012d9a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012d9e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012da2:	7019      	strb	r1, [r3, #0]
 8012da4:	68a3      	ldr	r3, [r4, #8]
 8012da6:	705a      	strb	r2, [r3, #1]
 8012da8:	2102      	movs	r1, #2
 8012daa:	68a2      	ldr	r2, [r4, #8]
 8012dac:	6923      	ldr	r3, [r4, #16]
 8012dae:	440a      	add	r2, r1
 8012db0:	7561      	strb	r1, [r4, #21]
 8012db2:	440b      	add	r3, r1
 8012db4:	60a2      	str	r2, [r4, #8]
 8012db6:	6123      	str	r3, [r4, #16]
 8012db8:	7da0      	ldrb	r0, [r4, #22]
 8012dba:	f080 0001 	eor.w	r0, r0, #1
 8012dbe:	b003      	add	sp, #12
 8012dc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012dc4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012dc8:	801a      	strh	r2, [r3, #0]
 8012dca:	e7ed      	b.n	8012da8 <ucdr_serialize_endian_uint16_t+0x9c>
 8012dcc:	68a2      	ldr	r2, [r4, #8]
 8012dce:	6923      	ldr	r3, [r4, #16]
 8012dd0:	7da0      	ldrb	r0, [r4, #22]
 8012dd2:	1b92      	subs	r2, r2, r6
 8012dd4:	1b9b      	subs	r3, r3, r6
 8012dd6:	f884 8015 	strb.w	r8, [r4, #21]
 8012dda:	f080 0001 	eor.w	r0, r0, #1
 8012dde:	60a2      	str	r2, [r4, #8]
 8012de0:	6123      	str	r3, [r4, #16]
 8012de2:	b003      	add	sp, #12
 8012de4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012de8:	68a3      	ldr	r3, [r4, #8]
 8012dea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012dee:	701a      	strb	r2, [r3, #0]
 8012df0:	e7bc      	b.n	8012d6c <ucdr_serialize_endian_uint16_t+0x60>
 8012df2:	f10d 0506 	add.w	r5, sp, #6
 8012df6:	4632      	mov	r2, r6
 8012df8:	4638      	mov	r0, r7
 8012dfa:	4629      	mov	r1, r5
 8012dfc:	f00f fb07 	bl	802240e <memcpy>
 8012e00:	464a      	mov	r2, r9
 8012e02:	19a9      	adds	r1, r5, r6
 8012e04:	68a0      	ldr	r0, [r4, #8]
 8012e06:	f00f fb02 	bl	802240e <memcpy>
 8012e0a:	e7af      	b.n	8012d6c <ucdr_serialize_endian_uint16_t+0x60>

08012e0c <ucdr_deserialize_uint16_t>:
 8012e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e10:	4604      	mov	r4, r0
 8012e12:	460d      	mov	r5, r1
 8012e14:	2102      	movs	r1, #2
 8012e16:	f001 f943 	bl	80140a0 <ucdr_buffer_alignment>
 8012e1a:	4601      	mov	r1, r0
 8012e1c:	4620      	mov	r0, r4
 8012e1e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012e22:	f001 f985 	bl	8014130 <ucdr_advance_buffer>
 8012e26:	2102      	movs	r1, #2
 8012e28:	4620      	mov	r0, r4
 8012e2a:	f001 f8d9 	bl	8013fe0 <ucdr_check_buffer_available_for>
 8012e2e:	bb60      	cbnz	r0, 8012e8a <ucdr_deserialize_uint16_t+0x7e>
 8012e30:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012e34:	42be      	cmp	r6, r7
 8012e36:	d923      	bls.n	8012e80 <ucdr_deserialize_uint16_t+0x74>
 8012e38:	6923      	ldr	r3, [r4, #16]
 8012e3a:	4620      	mov	r0, r4
 8012e3c:	60a6      	str	r6, [r4, #8]
 8012e3e:	1bf6      	subs	r6, r6, r7
 8012e40:	4433      	add	r3, r6
 8012e42:	f1c6 0902 	rsb	r9, r6, #2
 8012e46:	6123      	str	r3, [r4, #16]
 8012e48:	4649      	mov	r1, r9
 8012e4a:	f001 f8d5 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8012e4e:	2800      	cmp	r0, #0
 8012e50:	d034      	beq.n	8012ebc <ucdr_deserialize_uint16_t+0xb0>
 8012e52:	7d23      	ldrb	r3, [r4, #20]
 8012e54:	2b01      	cmp	r3, #1
 8012e56:	d042      	beq.n	8012ede <ucdr_deserialize_uint16_t+0xd2>
 8012e58:	787b      	ldrb	r3, [r7, #1]
 8012e5a:	702b      	strb	r3, [r5, #0]
 8012e5c:	2e00      	cmp	r6, #0
 8012e5e:	d03a      	beq.n	8012ed6 <ucdr_deserialize_uint16_t+0xca>
 8012e60:	783b      	ldrb	r3, [r7, #0]
 8012e62:	706b      	strb	r3, [r5, #1]
 8012e64:	6923      	ldr	r3, [r4, #16]
 8012e66:	2102      	movs	r1, #2
 8012e68:	68a2      	ldr	r2, [r4, #8]
 8012e6a:	3302      	adds	r3, #2
 8012e6c:	7da0      	ldrb	r0, [r4, #22]
 8012e6e:	444a      	add	r2, r9
 8012e70:	7561      	strb	r1, [r4, #21]
 8012e72:	1b9b      	subs	r3, r3, r6
 8012e74:	f080 0001 	eor.w	r0, r0, #1
 8012e78:	60a2      	str	r2, [r4, #8]
 8012e7a:	6123      	str	r3, [r4, #16]
 8012e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e80:	2102      	movs	r1, #2
 8012e82:	4620      	mov	r0, r4
 8012e84:	f001 f8b8 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8012e88:	b180      	cbz	r0, 8012eac <ucdr_deserialize_uint16_t+0xa0>
 8012e8a:	7d23      	ldrb	r3, [r4, #20]
 8012e8c:	2b01      	cmp	r3, #1
 8012e8e:	68a3      	ldr	r3, [r4, #8]
 8012e90:	d011      	beq.n	8012eb6 <ucdr_deserialize_uint16_t+0xaa>
 8012e92:	785b      	ldrb	r3, [r3, #1]
 8012e94:	702b      	strb	r3, [r5, #0]
 8012e96:	68a3      	ldr	r3, [r4, #8]
 8012e98:	781b      	ldrb	r3, [r3, #0]
 8012e9a:	706b      	strb	r3, [r5, #1]
 8012e9c:	2102      	movs	r1, #2
 8012e9e:	68a2      	ldr	r2, [r4, #8]
 8012ea0:	6923      	ldr	r3, [r4, #16]
 8012ea2:	440a      	add	r2, r1
 8012ea4:	7561      	strb	r1, [r4, #21]
 8012ea6:	440b      	add	r3, r1
 8012ea8:	60a2      	str	r2, [r4, #8]
 8012eaa:	6123      	str	r3, [r4, #16]
 8012eac:	7da0      	ldrb	r0, [r4, #22]
 8012eae:	f080 0001 	eor.w	r0, r0, #1
 8012eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012eb6:	881b      	ldrh	r3, [r3, #0]
 8012eb8:	802b      	strh	r3, [r5, #0]
 8012eba:	e7ef      	b.n	8012e9c <ucdr_deserialize_uint16_t+0x90>
 8012ebc:	68a2      	ldr	r2, [r4, #8]
 8012ebe:	6923      	ldr	r3, [r4, #16]
 8012ec0:	1b92      	subs	r2, r2, r6
 8012ec2:	7da0      	ldrb	r0, [r4, #22]
 8012ec4:	1b9b      	subs	r3, r3, r6
 8012ec6:	f884 8015 	strb.w	r8, [r4, #21]
 8012eca:	f080 0001 	eor.w	r0, r0, #1
 8012ece:	60a2      	str	r2, [r4, #8]
 8012ed0:	6123      	str	r3, [r4, #16]
 8012ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ed6:	68a3      	ldr	r3, [r4, #8]
 8012ed8:	781b      	ldrb	r3, [r3, #0]
 8012eda:	706b      	strb	r3, [r5, #1]
 8012edc:	e7c2      	b.n	8012e64 <ucdr_deserialize_uint16_t+0x58>
 8012ede:	4639      	mov	r1, r7
 8012ee0:	4632      	mov	r2, r6
 8012ee2:	4628      	mov	r0, r5
 8012ee4:	f00f fa93 	bl	802240e <memcpy>
 8012ee8:	464a      	mov	r2, r9
 8012eea:	19a8      	adds	r0, r5, r6
 8012eec:	68a1      	ldr	r1, [r4, #8]
 8012eee:	f00f fa8e 	bl	802240e <memcpy>
 8012ef2:	e7b7      	b.n	8012e64 <ucdr_deserialize_uint16_t+0x58>

08012ef4 <ucdr_deserialize_endian_uint16_t>:
 8012ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ef8:	4604      	mov	r4, r0
 8012efa:	460e      	mov	r6, r1
 8012efc:	2102      	movs	r1, #2
 8012efe:	4615      	mov	r5, r2
 8012f00:	f001 f8ce 	bl	80140a0 <ucdr_buffer_alignment>
 8012f04:	4601      	mov	r1, r0
 8012f06:	4620      	mov	r0, r4
 8012f08:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012f0c:	f001 f910 	bl	8014130 <ucdr_advance_buffer>
 8012f10:	2102      	movs	r1, #2
 8012f12:	4620      	mov	r0, r4
 8012f14:	f001 f864 	bl	8013fe0 <ucdr_check_buffer_available_for>
 8012f18:	bb70      	cbnz	r0, 8012f78 <ucdr_deserialize_endian_uint16_t+0x84>
 8012f1a:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 8012f1e:	454f      	cmp	r7, r9
 8012f20:	d925      	bls.n	8012f6e <ucdr_deserialize_endian_uint16_t+0x7a>
 8012f22:	6923      	ldr	r3, [r4, #16]
 8012f24:	4620      	mov	r0, r4
 8012f26:	60a7      	str	r7, [r4, #8]
 8012f28:	eba7 0709 	sub.w	r7, r7, r9
 8012f2c:	443b      	add	r3, r7
 8012f2e:	f1c7 0a02 	rsb	sl, r7, #2
 8012f32:	6123      	str	r3, [r4, #16]
 8012f34:	4651      	mov	r1, sl
 8012f36:	f001 f85f 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8012f3a:	2800      	cmp	r0, #0
 8012f3c:	d034      	beq.n	8012fa8 <ucdr_deserialize_endian_uint16_t+0xb4>
 8012f3e:	2e01      	cmp	r6, #1
 8012f40:	d043      	beq.n	8012fca <ucdr_deserialize_endian_uint16_t+0xd6>
 8012f42:	f899 3001 	ldrb.w	r3, [r9, #1]
 8012f46:	702b      	strb	r3, [r5, #0]
 8012f48:	2f00      	cmp	r7, #0
 8012f4a:	d03a      	beq.n	8012fc2 <ucdr_deserialize_endian_uint16_t+0xce>
 8012f4c:	f899 3000 	ldrb.w	r3, [r9]
 8012f50:	706b      	strb	r3, [r5, #1]
 8012f52:	6923      	ldr	r3, [r4, #16]
 8012f54:	2102      	movs	r1, #2
 8012f56:	68a2      	ldr	r2, [r4, #8]
 8012f58:	3302      	adds	r3, #2
 8012f5a:	7da0      	ldrb	r0, [r4, #22]
 8012f5c:	4452      	add	r2, sl
 8012f5e:	7561      	strb	r1, [r4, #21]
 8012f60:	1bdb      	subs	r3, r3, r7
 8012f62:	f080 0001 	eor.w	r0, r0, #1
 8012f66:	60a2      	str	r2, [r4, #8]
 8012f68:	6123      	str	r3, [r4, #16]
 8012f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f6e:	2102      	movs	r1, #2
 8012f70:	4620      	mov	r0, r4
 8012f72:	f001 f841 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8012f76:	b178      	cbz	r0, 8012f98 <ucdr_deserialize_endian_uint16_t+0xa4>
 8012f78:	2e01      	cmp	r6, #1
 8012f7a:	68a3      	ldr	r3, [r4, #8]
 8012f7c:	d011      	beq.n	8012fa2 <ucdr_deserialize_endian_uint16_t+0xae>
 8012f7e:	785b      	ldrb	r3, [r3, #1]
 8012f80:	702b      	strb	r3, [r5, #0]
 8012f82:	68a3      	ldr	r3, [r4, #8]
 8012f84:	781b      	ldrb	r3, [r3, #0]
 8012f86:	706b      	strb	r3, [r5, #1]
 8012f88:	2102      	movs	r1, #2
 8012f8a:	68a2      	ldr	r2, [r4, #8]
 8012f8c:	6923      	ldr	r3, [r4, #16]
 8012f8e:	440a      	add	r2, r1
 8012f90:	7561      	strb	r1, [r4, #21]
 8012f92:	440b      	add	r3, r1
 8012f94:	60a2      	str	r2, [r4, #8]
 8012f96:	6123      	str	r3, [r4, #16]
 8012f98:	7da0      	ldrb	r0, [r4, #22]
 8012f9a:	f080 0001 	eor.w	r0, r0, #1
 8012f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fa2:	881b      	ldrh	r3, [r3, #0]
 8012fa4:	802b      	strh	r3, [r5, #0]
 8012fa6:	e7ef      	b.n	8012f88 <ucdr_deserialize_endian_uint16_t+0x94>
 8012fa8:	68a2      	ldr	r2, [r4, #8]
 8012faa:	6923      	ldr	r3, [r4, #16]
 8012fac:	1bd2      	subs	r2, r2, r7
 8012fae:	7da0      	ldrb	r0, [r4, #22]
 8012fb0:	1bdb      	subs	r3, r3, r7
 8012fb2:	f884 8015 	strb.w	r8, [r4, #21]
 8012fb6:	f080 0001 	eor.w	r0, r0, #1
 8012fba:	60a2      	str	r2, [r4, #8]
 8012fbc:	6123      	str	r3, [r4, #16]
 8012fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fc2:	68a3      	ldr	r3, [r4, #8]
 8012fc4:	781b      	ldrb	r3, [r3, #0]
 8012fc6:	706b      	strb	r3, [r5, #1]
 8012fc8:	e7c3      	b.n	8012f52 <ucdr_deserialize_endian_uint16_t+0x5e>
 8012fca:	4649      	mov	r1, r9
 8012fcc:	463a      	mov	r2, r7
 8012fce:	4628      	mov	r0, r5
 8012fd0:	f00f fa1d 	bl	802240e <memcpy>
 8012fd4:	4652      	mov	r2, sl
 8012fd6:	19e8      	adds	r0, r5, r7
 8012fd8:	68a1      	ldr	r1, [r4, #8]
 8012fda:	f00f fa18 	bl	802240e <memcpy>
 8012fde:	e7b8      	b.n	8012f52 <ucdr_deserialize_endian_uint16_t+0x5e>

08012fe0 <ucdr_serialize_uint32_t>:
 8012fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fe4:	b082      	sub	sp, #8
 8012fe6:	4604      	mov	r4, r0
 8012fe8:	9101      	str	r1, [sp, #4]
 8012fea:	2104      	movs	r1, #4
 8012fec:	f001 f858 	bl	80140a0 <ucdr_buffer_alignment>
 8012ff0:	4601      	mov	r1, r0
 8012ff2:	4620      	mov	r0, r4
 8012ff4:	7d67      	ldrb	r7, [r4, #21]
 8012ff6:	f001 f89b 	bl	8014130 <ucdr_advance_buffer>
 8012ffa:	2104      	movs	r1, #4
 8012ffc:	4620      	mov	r0, r4
 8012ffe:	f000 ffef 	bl	8013fe0 <ucdr_check_buffer_available_for>
 8013002:	2800      	cmp	r0, #0
 8013004:	d139      	bne.n	801307a <ucdr_serialize_uint32_t+0x9a>
 8013006:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801300a:	42ab      	cmp	r3, r5
 801300c:	d930      	bls.n	8013070 <ucdr_serialize_uint32_t+0x90>
 801300e:	1b5e      	subs	r6, r3, r5
 8013010:	60a3      	str	r3, [r4, #8]
 8013012:	6923      	ldr	r3, [r4, #16]
 8013014:	4620      	mov	r0, r4
 8013016:	f1c6 0804 	rsb	r8, r6, #4
 801301a:	4433      	add	r3, r6
 801301c:	4641      	mov	r1, r8
 801301e:	6123      	str	r3, [r4, #16]
 8013020:	f000 ffea 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8013024:	2800      	cmp	r0, #0
 8013026:	d04c      	beq.n	80130c2 <ucdr_serialize_uint32_t+0xe2>
 8013028:	7d23      	ldrb	r3, [r4, #20]
 801302a:	2b01      	cmp	r3, #1
 801302c:	d063      	beq.n	80130f6 <ucdr_serialize_uint32_t+0x116>
 801302e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013032:	702b      	strb	r3, [r5, #0]
 8013034:	2e00      	cmp	r6, #0
 8013036:	d051      	beq.n	80130dc <ucdr_serialize_uint32_t+0xfc>
 8013038:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801303c:	2e01      	cmp	r6, #1
 801303e:	706b      	strb	r3, [r5, #1]
 8013040:	d050      	beq.n	80130e4 <ucdr_serialize_uint32_t+0x104>
 8013042:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013046:	2e02      	cmp	r6, #2
 8013048:	70ab      	strb	r3, [r5, #2]
 801304a:	d04f      	beq.n	80130ec <ucdr_serialize_uint32_t+0x10c>
 801304c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013050:	70eb      	strb	r3, [r5, #3]
 8013052:	6923      	ldr	r3, [r4, #16]
 8013054:	2104      	movs	r1, #4
 8013056:	68a2      	ldr	r2, [r4, #8]
 8013058:	3304      	adds	r3, #4
 801305a:	7da0      	ldrb	r0, [r4, #22]
 801305c:	4442      	add	r2, r8
 801305e:	7561      	strb	r1, [r4, #21]
 8013060:	1b9e      	subs	r6, r3, r6
 8013062:	f080 0001 	eor.w	r0, r0, #1
 8013066:	60a2      	str	r2, [r4, #8]
 8013068:	6126      	str	r6, [r4, #16]
 801306a:	b002      	add	sp, #8
 801306c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013070:	2104      	movs	r1, #4
 8013072:	4620      	mov	r0, r4
 8013074:	f000 ffc0 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8013078:	b1d0      	cbz	r0, 80130b0 <ucdr_serialize_uint32_t+0xd0>
 801307a:	7d23      	ldrb	r3, [r4, #20]
 801307c:	2b01      	cmp	r3, #1
 801307e:	68a3      	ldr	r3, [r4, #8]
 8013080:	d01c      	beq.n	80130bc <ucdr_serialize_uint32_t+0xdc>
 8013082:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013086:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801308a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801308e:	7018      	strb	r0, [r3, #0]
 8013090:	68a3      	ldr	r3, [r4, #8]
 8013092:	705a      	strb	r2, [r3, #1]
 8013094:	68a3      	ldr	r3, [r4, #8]
 8013096:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801309a:	7099      	strb	r1, [r3, #2]
 801309c:	68a3      	ldr	r3, [r4, #8]
 801309e:	70da      	strb	r2, [r3, #3]
 80130a0:	2104      	movs	r1, #4
 80130a2:	68a2      	ldr	r2, [r4, #8]
 80130a4:	6923      	ldr	r3, [r4, #16]
 80130a6:	440a      	add	r2, r1
 80130a8:	7561      	strb	r1, [r4, #21]
 80130aa:	440b      	add	r3, r1
 80130ac:	60a2      	str	r2, [r4, #8]
 80130ae:	6123      	str	r3, [r4, #16]
 80130b0:	7da0      	ldrb	r0, [r4, #22]
 80130b2:	f080 0001 	eor.w	r0, r0, #1
 80130b6:	b002      	add	sp, #8
 80130b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130bc:	9a01      	ldr	r2, [sp, #4]
 80130be:	601a      	str	r2, [r3, #0]
 80130c0:	e7ee      	b.n	80130a0 <ucdr_serialize_uint32_t+0xc0>
 80130c2:	68a2      	ldr	r2, [r4, #8]
 80130c4:	6923      	ldr	r3, [r4, #16]
 80130c6:	7da0      	ldrb	r0, [r4, #22]
 80130c8:	1b92      	subs	r2, r2, r6
 80130ca:	1b9b      	subs	r3, r3, r6
 80130cc:	7567      	strb	r7, [r4, #21]
 80130ce:	f080 0001 	eor.w	r0, r0, #1
 80130d2:	60a2      	str	r2, [r4, #8]
 80130d4:	6123      	str	r3, [r4, #16]
 80130d6:	b002      	add	sp, #8
 80130d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130dc:	68a3      	ldr	r3, [r4, #8]
 80130de:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80130e2:	701a      	strb	r2, [r3, #0]
 80130e4:	68a3      	ldr	r3, [r4, #8]
 80130e6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80130ea:	701a      	strb	r2, [r3, #0]
 80130ec:	68a3      	ldr	r3, [r4, #8]
 80130ee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80130f2:	701a      	strb	r2, [r3, #0]
 80130f4:	e7ad      	b.n	8013052 <ucdr_serialize_uint32_t+0x72>
 80130f6:	4628      	mov	r0, r5
 80130f8:	ad01      	add	r5, sp, #4
 80130fa:	4632      	mov	r2, r6
 80130fc:	4629      	mov	r1, r5
 80130fe:	f00f f986 	bl	802240e <memcpy>
 8013102:	4642      	mov	r2, r8
 8013104:	19a9      	adds	r1, r5, r6
 8013106:	68a0      	ldr	r0, [r4, #8]
 8013108:	f00f f981 	bl	802240e <memcpy>
 801310c:	e7a1      	b.n	8013052 <ucdr_serialize_uint32_t+0x72>
 801310e:	bf00      	nop

08013110 <ucdr_serialize_endian_uint32_t>:
 8013110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013114:	4604      	mov	r4, r0
 8013116:	b083      	sub	sp, #12
 8013118:	460d      	mov	r5, r1
 801311a:	2104      	movs	r1, #4
 801311c:	9201      	str	r2, [sp, #4]
 801311e:	f000 ffbf 	bl	80140a0 <ucdr_buffer_alignment>
 8013122:	4601      	mov	r1, r0
 8013124:	4620      	mov	r0, r4
 8013126:	f894 8015 	ldrb.w	r8, [r4, #21]
 801312a:	f001 f801 	bl	8014130 <ucdr_advance_buffer>
 801312e:	2104      	movs	r1, #4
 8013130:	4620      	mov	r0, r4
 8013132:	f000 ff55 	bl	8013fe0 <ucdr_check_buffer_available_for>
 8013136:	2800      	cmp	r0, #0
 8013138:	d138      	bne.n	80131ac <ucdr_serialize_endian_uint32_t+0x9c>
 801313a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801313e:	42b7      	cmp	r7, r6
 8013140:	d92f      	bls.n	80131a2 <ucdr_serialize_endian_uint32_t+0x92>
 8013142:	6923      	ldr	r3, [r4, #16]
 8013144:	4620      	mov	r0, r4
 8013146:	60a7      	str	r7, [r4, #8]
 8013148:	1bbf      	subs	r7, r7, r6
 801314a:	443b      	add	r3, r7
 801314c:	f1c7 0904 	rsb	r9, r7, #4
 8013150:	6123      	str	r3, [r4, #16]
 8013152:	4649      	mov	r1, r9
 8013154:	f000 ff50 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8013158:	2800      	cmp	r0, #0
 801315a:	d04a      	beq.n	80131f2 <ucdr_serialize_endian_uint32_t+0xe2>
 801315c:	2d01      	cmp	r5, #1
 801315e:	d063      	beq.n	8013228 <ucdr_serialize_endian_uint32_t+0x118>
 8013160:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013164:	7033      	strb	r3, [r6, #0]
 8013166:	2f00      	cmp	r7, #0
 8013168:	d051      	beq.n	801320e <ucdr_serialize_endian_uint32_t+0xfe>
 801316a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801316e:	2f01      	cmp	r7, #1
 8013170:	7073      	strb	r3, [r6, #1]
 8013172:	d050      	beq.n	8013216 <ucdr_serialize_endian_uint32_t+0x106>
 8013174:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013178:	2f02      	cmp	r7, #2
 801317a:	70b3      	strb	r3, [r6, #2]
 801317c:	d04f      	beq.n	801321e <ucdr_serialize_endian_uint32_t+0x10e>
 801317e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013182:	70f3      	strb	r3, [r6, #3]
 8013184:	6923      	ldr	r3, [r4, #16]
 8013186:	2104      	movs	r1, #4
 8013188:	68a2      	ldr	r2, [r4, #8]
 801318a:	7da0      	ldrb	r0, [r4, #22]
 801318c:	3304      	adds	r3, #4
 801318e:	444a      	add	r2, r9
 8013190:	7561      	strb	r1, [r4, #21]
 8013192:	1bdb      	subs	r3, r3, r7
 8013194:	f080 0001 	eor.w	r0, r0, #1
 8013198:	60a2      	str	r2, [r4, #8]
 801319a:	6123      	str	r3, [r4, #16]
 801319c:	b003      	add	sp, #12
 801319e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131a2:	2104      	movs	r1, #4
 80131a4:	4620      	mov	r0, r4
 80131a6:	f000 ff27 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 80131aa:	b1c8      	cbz	r0, 80131e0 <ucdr_serialize_endian_uint32_t+0xd0>
 80131ac:	2d01      	cmp	r5, #1
 80131ae:	68a3      	ldr	r3, [r4, #8]
 80131b0:	d01c      	beq.n	80131ec <ucdr_serialize_endian_uint32_t+0xdc>
 80131b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80131b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80131ba:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80131be:	7018      	strb	r0, [r3, #0]
 80131c0:	68a3      	ldr	r3, [r4, #8]
 80131c2:	705a      	strb	r2, [r3, #1]
 80131c4:	68a3      	ldr	r3, [r4, #8]
 80131c6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80131ca:	7099      	strb	r1, [r3, #2]
 80131cc:	68a3      	ldr	r3, [r4, #8]
 80131ce:	70da      	strb	r2, [r3, #3]
 80131d0:	2104      	movs	r1, #4
 80131d2:	68a2      	ldr	r2, [r4, #8]
 80131d4:	6923      	ldr	r3, [r4, #16]
 80131d6:	440a      	add	r2, r1
 80131d8:	7561      	strb	r1, [r4, #21]
 80131da:	440b      	add	r3, r1
 80131dc:	60a2      	str	r2, [r4, #8]
 80131de:	6123      	str	r3, [r4, #16]
 80131e0:	7da0      	ldrb	r0, [r4, #22]
 80131e2:	f080 0001 	eor.w	r0, r0, #1
 80131e6:	b003      	add	sp, #12
 80131e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131ec:	9a01      	ldr	r2, [sp, #4]
 80131ee:	601a      	str	r2, [r3, #0]
 80131f0:	e7ee      	b.n	80131d0 <ucdr_serialize_endian_uint32_t+0xc0>
 80131f2:	68a2      	ldr	r2, [r4, #8]
 80131f4:	6923      	ldr	r3, [r4, #16]
 80131f6:	7da0      	ldrb	r0, [r4, #22]
 80131f8:	1bd2      	subs	r2, r2, r7
 80131fa:	1bdb      	subs	r3, r3, r7
 80131fc:	f884 8015 	strb.w	r8, [r4, #21]
 8013200:	f080 0001 	eor.w	r0, r0, #1
 8013204:	60a2      	str	r2, [r4, #8]
 8013206:	6123      	str	r3, [r4, #16]
 8013208:	b003      	add	sp, #12
 801320a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801320e:	68a3      	ldr	r3, [r4, #8]
 8013210:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013214:	701a      	strb	r2, [r3, #0]
 8013216:	68a3      	ldr	r3, [r4, #8]
 8013218:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801321c:	701a      	strb	r2, [r3, #0]
 801321e:	68a3      	ldr	r3, [r4, #8]
 8013220:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013224:	701a      	strb	r2, [r3, #0]
 8013226:	e7ad      	b.n	8013184 <ucdr_serialize_endian_uint32_t+0x74>
 8013228:	ad01      	add	r5, sp, #4
 801322a:	463a      	mov	r2, r7
 801322c:	4630      	mov	r0, r6
 801322e:	4629      	mov	r1, r5
 8013230:	f00f f8ed 	bl	802240e <memcpy>
 8013234:	464a      	mov	r2, r9
 8013236:	19e9      	adds	r1, r5, r7
 8013238:	68a0      	ldr	r0, [r4, #8]
 801323a:	f00f f8e8 	bl	802240e <memcpy>
 801323e:	e7a1      	b.n	8013184 <ucdr_serialize_endian_uint32_t+0x74>

08013240 <ucdr_deserialize_uint32_t>:
 8013240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013244:	4604      	mov	r4, r0
 8013246:	460d      	mov	r5, r1
 8013248:	2104      	movs	r1, #4
 801324a:	f000 ff29 	bl	80140a0 <ucdr_buffer_alignment>
 801324e:	4601      	mov	r1, r0
 8013250:	4620      	mov	r0, r4
 8013252:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013256:	f000 ff6b 	bl	8014130 <ucdr_advance_buffer>
 801325a:	2104      	movs	r1, #4
 801325c:	4620      	mov	r0, r4
 801325e:	f000 febf 	bl	8013fe0 <ucdr_check_buffer_available_for>
 8013262:	2800      	cmp	r0, #0
 8013264:	d138      	bne.n	80132d8 <ucdr_deserialize_uint32_t+0x98>
 8013266:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801326a:	42b7      	cmp	r7, r6
 801326c:	d92f      	bls.n	80132ce <ucdr_deserialize_uint32_t+0x8e>
 801326e:	6923      	ldr	r3, [r4, #16]
 8013270:	4620      	mov	r0, r4
 8013272:	60a7      	str	r7, [r4, #8]
 8013274:	1bbf      	subs	r7, r7, r6
 8013276:	443b      	add	r3, r7
 8013278:	f1c7 0904 	rsb	r9, r7, #4
 801327c:	6123      	str	r3, [r4, #16]
 801327e:	4649      	mov	r1, r9
 8013280:	f000 feba 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8013284:	2800      	cmp	r0, #0
 8013286:	d046      	beq.n	8013316 <ucdr_deserialize_uint32_t+0xd6>
 8013288:	7d23      	ldrb	r3, [r4, #20]
 801328a:	2b01      	cmp	r3, #1
 801328c:	d05c      	beq.n	8013348 <ucdr_deserialize_uint32_t+0x108>
 801328e:	78f3      	ldrb	r3, [r6, #3]
 8013290:	702b      	strb	r3, [r5, #0]
 8013292:	2f00      	cmp	r7, #0
 8013294:	d04c      	beq.n	8013330 <ucdr_deserialize_uint32_t+0xf0>
 8013296:	78b3      	ldrb	r3, [r6, #2]
 8013298:	2f01      	cmp	r7, #1
 801329a:	706b      	strb	r3, [r5, #1]
 801329c:	f105 0302 	add.w	r3, r5, #2
 80132a0:	d04a      	beq.n	8013338 <ucdr_deserialize_uint32_t+0xf8>
 80132a2:	7873      	ldrb	r3, [r6, #1]
 80132a4:	2f02      	cmp	r7, #2
 80132a6:	70ab      	strb	r3, [r5, #2]
 80132a8:	f105 0303 	add.w	r3, r5, #3
 80132ac:	d048      	beq.n	8013340 <ucdr_deserialize_uint32_t+0x100>
 80132ae:	7833      	ldrb	r3, [r6, #0]
 80132b0:	70eb      	strb	r3, [r5, #3]
 80132b2:	6923      	ldr	r3, [r4, #16]
 80132b4:	2104      	movs	r1, #4
 80132b6:	68a2      	ldr	r2, [r4, #8]
 80132b8:	3304      	adds	r3, #4
 80132ba:	7da0      	ldrb	r0, [r4, #22]
 80132bc:	444a      	add	r2, r9
 80132be:	7561      	strb	r1, [r4, #21]
 80132c0:	1bdb      	subs	r3, r3, r7
 80132c2:	f080 0001 	eor.w	r0, r0, #1
 80132c6:	60a2      	str	r2, [r4, #8]
 80132c8:	6123      	str	r3, [r4, #16]
 80132ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132ce:	2104      	movs	r1, #4
 80132d0:	4620      	mov	r0, r4
 80132d2:	f000 fe91 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 80132d6:	b1b0      	cbz	r0, 8013306 <ucdr_deserialize_uint32_t+0xc6>
 80132d8:	7d23      	ldrb	r3, [r4, #20]
 80132da:	2b01      	cmp	r3, #1
 80132dc:	68a3      	ldr	r3, [r4, #8]
 80132de:	d017      	beq.n	8013310 <ucdr_deserialize_uint32_t+0xd0>
 80132e0:	78db      	ldrb	r3, [r3, #3]
 80132e2:	702b      	strb	r3, [r5, #0]
 80132e4:	68a3      	ldr	r3, [r4, #8]
 80132e6:	789b      	ldrb	r3, [r3, #2]
 80132e8:	706b      	strb	r3, [r5, #1]
 80132ea:	68a3      	ldr	r3, [r4, #8]
 80132ec:	785b      	ldrb	r3, [r3, #1]
 80132ee:	70ab      	strb	r3, [r5, #2]
 80132f0:	68a3      	ldr	r3, [r4, #8]
 80132f2:	781b      	ldrb	r3, [r3, #0]
 80132f4:	70eb      	strb	r3, [r5, #3]
 80132f6:	2104      	movs	r1, #4
 80132f8:	68a2      	ldr	r2, [r4, #8]
 80132fa:	6923      	ldr	r3, [r4, #16]
 80132fc:	440a      	add	r2, r1
 80132fe:	7561      	strb	r1, [r4, #21]
 8013300:	440b      	add	r3, r1
 8013302:	60a2      	str	r2, [r4, #8]
 8013304:	6123      	str	r3, [r4, #16]
 8013306:	7da0      	ldrb	r0, [r4, #22]
 8013308:	f080 0001 	eor.w	r0, r0, #1
 801330c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	602b      	str	r3, [r5, #0]
 8013314:	e7ef      	b.n	80132f6 <ucdr_deserialize_uint32_t+0xb6>
 8013316:	68a2      	ldr	r2, [r4, #8]
 8013318:	6923      	ldr	r3, [r4, #16]
 801331a:	1bd2      	subs	r2, r2, r7
 801331c:	7da0      	ldrb	r0, [r4, #22]
 801331e:	1bdb      	subs	r3, r3, r7
 8013320:	f884 8015 	strb.w	r8, [r4, #21]
 8013324:	f080 0001 	eor.w	r0, r0, #1
 8013328:	60a2      	str	r2, [r4, #8]
 801332a:	6123      	str	r3, [r4, #16]
 801332c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013330:	68a3      	ldr	r3, [r4, #8]
 8013332:	789b      	ldrb	r3, [r3, #2]
 8013334:	706b      	strb	r3, [r5, #1]
 8013336:	1cab      	adds	r3, r5, #2
 8013338:	68a2      	ldr	r2, [r4, #8]
 801333a:	7852      	ldrb	r2, [r2, #1]
 801333c:	f803 2b01 	strb.w	r2, [r3], #1
 8013340:	68a2      	ldr	r2, [r4, #8]
 8013342:	7812      	ldrb	r2, [r2, #0]
 8013344:	701a      	strb	r2, [r3, #0]
 8013346:	e7b4      	b.n	80132b2 <ucdr_deserialize_uint32_t+0x72>
 8013348:	4631      	mov	r1, r6
 801334a:	463a      	mov	r2, r7
 801334c:	4628      	mov	r0, r5
 801334e:	f00f f85e 	bl	802240e <memcpy>
 8013352:	464a      	mov	r2, r9
 8013354:	19e8      	adds	r0, r5, r7
 8013356:	68a1      	ldr	r1, [r4, #8]
 8013358:	f00f f859 	bl	802240e <memcpy>
 801335c:	e7a9      	b.n	80132b2 <ucdr_deserialize_uint32_t+0x72>
 801335e:	bf00      	nop

08013360 <ucdr_deserialize_endian_uint32_t>:
 8013360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013364:	4604      	mov	r4, r0
 8013366:	460e      	mov	r6, r1
 8013368:	2104      	movs	r1, #4
 801336a:	4615      	mov	r5, r2
 801336c:	f000 fe98 	bl	80140a0 <ucdr_buffer_alignment>
 8013370:	4601      	mov	r1, r0
 8013372:	4620      	mov	r0, r4
 8013374:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013378:	f000 feda 	bl	8014130 <ucdr_advance_buffer>
 801337c:	2104      	movs	r1, #4
 801337e:	4620      	mov	r0, r4
 8013380:	f000 fe2e 	bl	8013fe0 <ucdr_check_buffer_available_for>
 8013384:	2800      	cmp	r0, #0
 8013386:	d13c      	bne.n	8013402 <ucdr_deserialize_endian_uint32_t+0xa2>
 8013388:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 801338c:	42bb      	cmp	r3, r7
 801338e:	d933      	bls.n	80133f8 <ucdr_deserialize_endian_uint32_t+0x98>
 8013390:	eba3 0907 	sub.w	r9, r3, r7
 8013394:	60a3      	str	r3, [r4, #8]
 8013396:	6923      	ldr	r3, [r4, #16]
 8013398:	4620      	mov	r0, r4
 801339a:	f1c9 0a04 	rsb	sl, r9, #4
 801339e:	444b      	add	r3, r9
 80133a0:	4651      	mov	r1, sl
 80133a2:	6123      	str	r3, [r4, #16]
 80133a4:	f000 fe28 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 80133a8:	2800      	cmp	r0, #0
 80133aa:	d048      	beq.n	801343e <ucdr_deserialize_endian_uint32_t+0xde>
 80133ac:	2e01      	cmp	r6, #1
 80133ae:	d061      	beq.n	8013474 <ucdr_deserialize_endian_uint32_t+0x114>
 80133b0:	78fb      	ldrb	r3, [r7, #3]
 80133b2:	702b      	strb	r3, [r5, #0]
 80133b4:	f1b9 0f00 	cmp.w	r9, #0
 80133b8:	d050      	beq.n	801345c <ucdr_deserialize_endian_uint32_t+0xfc>
 80133ba:	78bb      	ldrb	r3, [r7, #2]
 80133bc:	f1b9 0f01 	cmp.w	r9, #1
 80133c0:	706b      	strb	r3, [r5, #1]
 80133c2:	f105 0302 	add.w	r3, r5, #2
 80133c6:	d04d      	beq.n	8013464 <ucdr_deserialize_endian_uint32_t+0x104>
 80133c8:	787b      	ldrb	r3, [r7, #1]
 80133ca:	f1b9 0f02 	cmp.w	r9, #2
 80133ce:	70ab      	strb	r3, [r5, #2]
 80133d0:	f105 0303 	add.w	r3, r5, #3
 80133d4:	d04a      	beq.n	801346c <ucdr_deserialize_endian_uint32_t+0x10c>
 80133d6:	783b      	ldrb	r3, [r7, #0]
 80133d8:	70eb      	strb	r3, [r5, #3]
 80133da:	6923      	ldr	r3, [r4, #16]
 80133dc:	2104      	movs	r1, #4
 80133de:	68a2      	ldr	r2, [r4, #8]
 80133e0:	3304      	adds	r3, #4
 80133e2:	7da0      	ldrb	r0, [r4, #22]
 80133e4:	4452      	add	r2, sl
 80133e6:	7561      	strb	r1, [r4, #21]
 80133e8:	eba3 0309 	sub.w	r3, r3, r9
 80133ec:	f080 0001 	eor.w	r0, r0, #1
 80133f0:	60a2      	str	r2, [r4, #8]
 80133f2:	6123      	str	r3, [r4, #16]
 80133f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133f8:	2104      	movs	r1, #4
 80133fa:	4620      	mov	r0, r4
 80133fc:	f000 fdfc 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8013400:	b1a8      	cbz	r0, 801342e <ucdr_deserialize_endian_uint32_t+0xce>
 8013402:	2e01      	cmp	r6, #1
 8013404:	68a3      	ldr	r3, [r4, #8]
 8013406:	d017      	beq.n	8013438 <ucdr_deserialize_endian_uint32_t+0xd8>
 8013408:	78db      	ldrb	r3, [r3, #3]
 801340a:	702b      	strb	r3, [r5, #0]
 801340c:	68a3      	ldr	r3, [r4, #8]
 801340e:	789b      	ldrb	r3, [r3, #2]
 8013410:	706b      	strb	r3, [r5, #1]
 8013412:	68a3      	ldr	r3, [r4, #8]
 8013414:	785b      	ldrb	r3, [r3, #1]
 8013416:	70ab      	strb	r3, [r5, #2]
 8013418:	68a3      	ldr	r3, [r4, #8]
 801341a:	781b      	ldrb	r3, [r3, #0]
 801341c:	70eb      	strb	r3, [r5, #3]
 801341e:	2104      	movs	r1, #4
 8013420:	68a2      	ldr	r2, [r4, #8]
 8013422:	6923      	ldr	r3, [r4, #16]
 8013424:	440a      	add	r2, r1
 8013426:	7561      	strb	r1, [r4, #21]
 8013428:	440b      	add	r3, r1
 801342a:	60a2      	str	r2, [r4, #8]
 801342c:	6123      	str	r3, [r4, #16]
 801342e:	7da0      	ldrb	r0, [r4, #22]
 8013430:	f080 0001 	eor.w	r0, r0, #1
 8013434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	602b      	str	r3, [r5, #0]
 801343c:	e7ef      	b.n	801341e <ucdr_deserialize_endian_uint32_t+0xbe>
 801343e:	68a2      	ldr	r2, [r4, #8]
 8013440:	6923      	ldr	r3, [r4, #16]
 8013442:	eba2 0209 	sub.w	r2, r2, r9
 8013446:	7da0      	ldrb	r0, [r4, #22]
 8013448:	eba3 0309 	sub.w	r3, r3, r9
 801344c:	f884 8015 	strb.w	r8, [r4, #21]
 8013450:	f080 0001 	eor.w	r0, r0, #1
 8013454:	60a2      	str	r2, [r4, #8]
 8013456:	6123      	str	r3, [r4, #16]
 8013458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801345c:	68a3      	ldr	r3, [r4, #8]
 801345e:	789b      	ldrb	r3, [r3, #2]
 8013460:	706b      	strb	r3, [r5, #1]
 8013462:	1cab      	adds	r3, r5, #2
 8013464:	68a2      	ldr	r2, [r4, #8]
 8013466:	7852      	ldrb	r2, [r2, #1]
 8013468:	f803 2b01 	strb.w	r2, [r3], #1
 801346c:	68a2      	ldr	r2, [r4, #8]
 801346e:	7812      	ldrb	r2, [r2, #0]
 8013470:	701a      	strb	r2, [r3, #0]
 8013472:	e7b2      	b.n	80133da <ucdr_deserialize_endian_uint32_t+0x7a>
 8013474:	4639      	mov	r1, r7
 8013476:	464a      	mov	r2, r9
 8013478:	4628      	mov	r0, r5
 801347a:	f00e ffc8 	bl	802240e <memcpy>
 801347e:	4652      	mov	r2, sl
 8013480:	eb05 0009 	add.w	r0, r5, r9
 8013484:	68a1      	ldr	r1, [r4, #8]
 8013486:	f00e ffc2 	bl	802240e <memcpy>
 801348a:	e7a6      	b.n	80133da <ucdr_deserialize_endian_uint32_t+0x7a>

0801348c <ucdr_serialize_uint64_t>:
 801348c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013490:	4604      	mov	r4, r0
 8013492:	b082      	sub	sp, #8
 8013494:	2108      	movs	r1, #8
 8013496:	e9cd 2300 	strd	r2, r3, [sp]
 801349a:	f000 fe01 	bl	80140a0 <ucdr_buffer_alignment>
 801349e:	4601      	mov	r1, r0
 80134a0:	4620      	mov	r0, r4
 80134a2:	7d67      	ldrb	r7, [r4, #21]
 80134a4:	f000 fe44 	bl	8014130 <ucdr_advance_buffer>
 80134a8:	2108      	movs	r1, #8
 80134aa:	4620      	mov	r0, r4
 80134ac:	f000 fd98 	bl	8013fe0 <ucdr_check_buffer_available_for>
 80134b0:	2800      	cmp	r0, #0
 80134b2:	d14e      	bne.n	8013552 <ucdr_serialize_uint64_t+0xc6>
 80134b4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80134b8:	42ab      	cmp	r3, r5
 80134ba:	d945      	bls.n	8013548 <ucdr_serialize_uint64_t+0xbc>
 80134bc:	1b5e      	subs	r6, r3, r5
 80134be:	60a3      	str	r3, [r4, #8]
 80134c0:	6923      	ldr	r3, [r4, #16]
 80134c2:	4620      	mov	r0, r4
 80134c4:	f1c6 0808 	rsb	r8, r6, #8
 80134c8:	4433      	add	r3, r6
 80134ca:	4641      	mov	r1, r8
 80134cc:	6123      	str	r3, [r4, #16]
 80134ce:	f000 fd93 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 80134d2:	2800      	cmp	r0, #0
 80134d4:	d074      	beq.n	80135c0 <ucdr_serialize_uint64_t+0x134>
 80134d6:	7d23      	ldrb	r3, [r4, #20]
 80134d8:	2b01      	cmp	r3, #1
 80134da:	f000 809b 	beq.w	8013614 <ucdr_serialize_uint64_t+0x188>
 80134de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80134e2:	702b      	strb	r3, [r5, #0]
 80134e4:	2e00      	cmp	r6, #0
 80134e6:	d078      	beq.n	80135da <ucdr_serialize_uint64_t+0x14e>
 80134e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80134ec:	2e01      	cmp	r6, #1
 80134ee:	706b      	strb	r3, [r5, #1]
 80134f0:	d077      	beq.n	80135e2 <ucdr_serialize_uint64_t+0x156>
 80134f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80134f6:	2e02      	cmp	r6, #2
 80134f8:	70ab      	strb	r3, [r5, #2]
 80134fa:	d076      	beq.n	80135ea <ucdr_serialize_uint64_t+0x15e>
 80134fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013500:	2e03      	cmp	r6, #3
 8013502:	70eb      	strb	r3, [r5, #3]
 8013504:	d075      	beq.n	80135f2 <ucdr_serialize_uint64_t+0x166>
 8013506:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801350a:	2e04      	cmp	r6, #4
 801350c:	712b      	strb	r3, [r5, #4]
 801350e:	d074      	beq.n	80135fa <ucdr_serialize_uint64_t+0x16e>
 8013510:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8013514:	2e05      	cmp	r6, #5
 8013516:	716b      	strb	r3, [r5, #5]
 8013518:	d073      	beq.n	8013602 <ucdr_serialize_uint64_t+0x176>
 801351a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801351e:	2e06      	cmp	r6, #6
 8013520:	71ab      	strb	r3, [r5, #6]
 8013522:	d072      	beq.n	801360a <ucdr_serialize_uint64_t+0x17e>
 8013524:	f89d 3000 	ldrb.w	r3, [sp]
 8013528:	71eb      	strb	r3, [r5, #7]
 801352a:	6923      	ldr	r3, [r4, #16]
 801352c:	2108      	movs	r1, #8
 801352e:	68a2      	ldr	r2, [r4, #8]
 8013530:	3308      	adds	r3, #8
 8013532:	7da0      	ldrb	r0, [r4, #22]
 8013534:	4442      	add	r2, r8
 8013536:	7561      	strb	r1, [r4, #21]
 8013538:	1b9e      	subs	r6, r3, r6
 801353a:	f080 0001 	eor.w	r0, r0, #1
 801353e:	60a2      	str	r2, [r4, #8]
 8013540:	6126      	str	r6, [r4, #16]
 8013542:	b002      	add	sp, #8
 8013544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013548:	2108      	movs	r1, #8
 801354a:	4620      	mov	r0, r4
 801354c:	f000 fd54 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8013550:	b350      	cbz	r0, 80135a8 <ucdr_serialize_uint64_t+0x11c>
 8013552:	7d23      	ldrb	r3, [r4, #20]
 8013554:	2b01      	cmp	r3, #1
 8013556:	d02d      	beq.n	80135b4 <ucdr_serialize_uint64_t+0x128>
 8013558:	68a3      	ldr	r3, [r4, #8]
 801355a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801355e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013562:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013566:	7018      	strb	r0, [r3, #0]
 8013568:	68a3      	ldr	r3, [r4, #8]
 801356a:	705a      	strb	r2, [r3, #1]
 801356c:	68a3      	ldr	r3, [r4, #8]
 801356e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013572:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8013576:	7099      	strb	r1, [r3, #2]
 8013578:	68a3      	ldr	r3, [r4, #8]
 801357a:	70da      	strb	r2, [r3, #3]
 801357c:	68a3      	ldr	r3, [r4, #8]
 801357e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013582:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8013586:	7118      	strb	r0, [r3, #4]
 8013588:	68a3      	ldr	r3, [r4, #8]
 801358a:	715a      	strb	r2, [r3, #5]
 801358c:	68a3      	ldr	r3, [r4, #8]
 801358e:	f89d 2000 	ldrb.w	r2, [sp]
 8013592:	7199      	strb	r1, [r3, #6]
 8013594:	68a3      	ldr	r3, [r4, #8]
 8013596:	71da      	strb	r2, [r3, #7]
 8013598:	2108      	movs	r1, #8
 801359a:	68a2      	ldr	r2, [r4, #8]
 801359c:	6923      	ldr	r3, [r4, #16]
 801359e:	440a      	add	r2, r1
 80135a0:	7561      	strb	r1, [r4, #21]
 80135a2:	440b      	add	r3, r1
 80135a4:	60a2      	str	r2, [r4, #8]
 80135a6:	6123      	str	r3, [r4, #16]
 80135a8:	7da0      	ldrb	r0, [r4, #22]
 80135aa:	f080 0001 	eor.w	r0, r0, #1
 80135ae:	b002      	add	sp, #8
 80135b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135b4:	466b      	mov	r3, sp
 80135b6:	68a2      	ldr	r2, [r4, #8]
 80135b8:	cb03      	ldmia	r3!, {r0, r1}
 80135ba:	6010      	str	r0, [r2, #0]
 80135bc:	6051      	str	r1, [r2, #4]
 80135be:	e7eb      	b.n	8013598 <ucdr_serialize_uint64_t+0x10c>
 80135c0:	68a2      	ldr	r2, [r4, #8]
 80135c2:	6923      	ldr	r3, [r4, #16]
 80135c4:	7da0      	ldrb	r0, [r4, #22]
 80135c6:	1b92      	subs	r2, r2, r6
 80135c8:	1b9b      	subs	r3, r3, r6
 80135ca:	7567      	strb	r7, [r4, #21]
 80135cc:	f080 0001 	eor.w	r0, r0, #1
 80135d0:	60a2      	str	r2, [r4, #8]
 80135d2:	6123      	str	r3, [r4, #16]
 80135d4:	b002      	add	sp, #8
 80135d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135da:	68a3      	ldr	r3, [r4, #8]
 80135dc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80135e0:	701a      	strb	r2, [r3, #0]
 80135e2:	68a3      	ldr	r3, [r4, #8]
 80135e4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80135e8:	701a      	strb	r2, [r3, #0]
 80135ea:	68a3      	ldr	r3, [r4, #8]
 80135ec:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80135f0:	701a      	strb	r2, [r3, #0]
 80135f2:	68a3      	ldr	r3, [r4, #8]
 80135f4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80135f8:	701a      	strb	r2, [r3, #0]
 80135fa:	68a3      	ldr	r3, [r4, #8]
 80135fc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013600:	701a      	strb	r2, [r3, #0]
 8013602:	68a3      	ldr	r3, [r4, #8]
 8013604:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013608:	701a      	strb	r2, [r3, #0]
 801360a:	68a3      	ldr	r3, [r4, #8]
 801360c:	f89d 2000 	ldrb.w	r2, [sp]
 8013610:	701a      	strb	r2, [r3, #0]
 8013612:	e78a      	b.n	801352a <ucdr_serialize_uint64_t+0x9e>
 8013614:	4628      	mov	r0, r5
 8013616:	466d      	mov	r5, sp
 8013618:	4632      	mov	r2, r6
 801361a:	4629      	mov	r1, r5
 801361c:	f00e fef7 	bl	802240e <memcpy>
 8013620:	4642      	mov	r2, r8
 8013622:	19a9      	adds	r1, r5, r6
 8013624:	68a0      	ldr	r0, [r4, #8]
 8013626:	f00e fef2 	bl	802240e <memcpy>
 801362a:	e77e      	b.n	801352a <ucdr_serialize_uint64_t+0x9e>

0801362c <ucdr_serialize_int16_t>:
 801362c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013630:	460b      	mov	r3, r1
 8013632:	b082      	sub	sp, #8
 8013634:	4604      	mov	r4, r0
 8013636:	2102      	movs	r1, #2
 8013638:	f8ad 3006 	strh.w	r3, [sp, #6]
 801363c:	f000 fd30 	bl	80140a0 <ucdr_buffer_alignment>
 8013640:	4601      	mov	r1, r0
 8013642:	4620      	mov	r0, r4
 8013644:	7d67      	ldrb	r7, [r4, #21]
 8013646:	f000 fd73 	bl	8014130 <ucdr_advance_buffer>
 801364a:	2102      	movs	r1, #2
 801364c:	4620      	mov	r0, r4
 801364e:	f000 fcc7 	bl	8013fe0 <ucdr_check_buffer_available_for>
 8013652:	bb78      	cbnz	r0, 80136b4 <ucdr_serialize_int16_t+0x88>
 8013654:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013658:	42ab      	cmp	r3, r5
 801365a:	d926      	bls.n	80136aa <ucdr_serialize_int16_t+0x7e>
 801365c:	1b5e      	subs	r6, r3, r5
 801365e:	60a3      	str	r3, [r4, #8]
 8013660:	6923      	ldr	r3, [r4, #16]
 8013662:	4620      	mov	r0, r4
 8013664:	f1c6 0802 	rsb	r8, r6, #2
 8013668:	4433      	add	r3, r6
 801366a:	4641      	mov	r1, r8
 801366c:	6123      	str	r3, [r4, #16]
 801366e:	f000 fcc3 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8013672:	2800      	cmp	r0, #0
 8013674:	d03b      	beq.n	80136ee <ucdr_serialize_int16_t+0xc2>
 8013676:	7d23      	ldrb	r3, [r4, #20]
 8013678:	2b01      	cmp	r3, #1
 801367a:	d04a      	beq.n	8013712 <ucdr_serialize_int16_t+0xe6>
 801367c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013680:	702b      	strb	r3, [r5, #0]
 8013682:	2e00      	cmp	r6, #0
 8013684:	d040      	beq.n	8013708 <ucdr_serialize_int16_t+0xdc>
 8013686:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801368a:	706b      	strb	r3, [r5, #1]
 801368c:	6923      	ldr	r3, [r4, #16]
 801368e:	2102      	movs	r1, #2
 8013690:	68a2      	ldr	r2, [r4, #8]
 8013692:	3302      	adds	r3, #2
 8013694:	7da0      	ldrb	r0, [r4, #22]
 8013696:	4442      	add	r2, r8
 8013698:	7561      	strb	r1, [r4, #21]
 801369a:	1b9e      	subs	r6, r3, r6
 801369c:	f080 0001 	eor.w	r0, r0, #1
 80136a0:	60a2      	str	r2, [r4, #8]
 80136a2:	6126      	str	r6, [r4, #16]
 80136a4:	b002      	add	sp, #8
 80136a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136aa:	2102      	movs	r1, #2
 80136ac:	4620      	mov	r0, r4
 80136ae:	f000 fca3 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 80136b2:	b190      	cbz	r0, 80136da <ucdr_serialize_int16_t+0xae>
 80136b4:	7d23      	ldrb	r3, [r4, #20]
 80136b6:	2b01      	cmp	r3, #1
 80136b8:	68a3      	ldr	r3, [r4, #8]
 80136ba:	d014      	beq.n	80136e6 <ucdr_serialize_int16_t+0xba>
 80136bc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80136c0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80136c4:	7019      	strb	r1, [r3, #0]
 80136c6:	68a3      	ldr	r3, [r4, #8]
 80136c8:	705a      	strb	r2, [r3, #1]
 80136ca:	2102      	movs	r1, #2
 80136cc:	68a2      	ldr	r2, [r4, #8]
 80136ce:	6923      	ldr	r3, [r4, #16]
 80136d0:	440a      	add	r2, r1
 80136d2:	7561      	strb	r1, [r4, #21]
 80136d4:	440b      	add	r3, r1
 80136d6:	60a2      	str	r2, [r4, #8]
 80136d8:	6123      	str	r3, [r4, #16]
 80136da:	7da0      	ldrb	r0, [r4, #22]
 80136dc:	f080 0001 	eor.w	r0, r0, #1
 80136e0:	b002      	add	sp, #8
 80136e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136e6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80136ea:	801a      	strh	r2, [r3, #0]
 80136ec:	e7ed      	b.n	80136ca <ucdr_serialize_int16_t+0x9e>
 80136ee:	68a2      	ldr	r2, [r4, #8]
 80136f0:	6923      	ldr	r3, [r4, #16]
 80136f2:	7da0      	ldrb	r0, [r4, #22]
 80136f4:	1b92      	subs	r2, r2, r6
 80136f6:	1b9b      	subs	r3, r3, r6
 80136f8:	7567      	strb	r7, [r4, #21]
 80136fa:	f080 0001 	eor.w	r0, r0, #1
 80136fe:	60a2      	str	r2, [r4, #8]
 8013700:	6123      	str	r3, [r4, #16]
 8013702:	b002      	add	sp, #8
 8013704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013708:	68a3      	ldr	r3, [r4, #8]
 801370a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801370e:	701a      	strb	r2, [r3, #0]
 8013710:	e7bc      	b.n	801368c <ucdr_serialize_int16_t+0x60>
 8013712:	4628      	mov	r0, r5
 8013714:	f10d 0506 	add.w	r5, sp, #6
 8013718:	4632      	mov	r2, r6
 801371a:	4629      	mov	r1, r5
 801371c:	f00e fe77 	bl	802240e <memcpy>
 8013720:	4642      	mov	r2, r8
 8013722:	19a9      	adds	r1, r5, r6
 8013724:	68a0      	ldr	r0, [r4, #8]
 8013726:	f00e fe72 	bl	802240e <memcpy>
 801372a:	e7af      	b.n	801368c <ucdr_serialize_int16_t+0x60>

0801372c <ucdr_deserialize_int16_t>:
 801372c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013730:	4604      	mov	r4, r0
 8013732:	460d      	mov	r5, r1
 8013734:	2102      	movs	r1, #2
 8013736:	f000 fcb3 	bl	80140a0 <ucdr_buffer_alignment>
 801373a:	4601      	mov	r1, r0
 801373c:	4620      	mov	r0, r4
 801373e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013742:	f000 fcf5 	bl	8014130 <ucdr_advance_buffer>
 8013746:	2102      	movs	r1, #2
 8013748:	4620      	mov	r0, r4
 801374a:	f000 fc49 	bl	8013fe0 <ucdr_check_buffer_available_for>
 801374e:	bb60      	cbnz	r0, 80137aa <ucdr_deserialize_int16_t+0x7e>
 8013750:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013754:	42be      	cmp	r6, r7
 8013756:	d923      	bls.n	80137a0 <ucdr_deserialize_int16_t+0x74>
 8013758:	6923      	ldr	r3, [r4, #16]
 801375a:	4620      	mov	r0, r4
 801375c:	60a6      	str	r6, [r4, #8]
 801375e:	1bf6      	subs	r6, r6, r7
 8013760:	4433      	add	r3, r6
 8013762:	f1c6 0902 	rsb	r9, r6, #2
 8013766:	6123      	str	r3, [r4, #16]
 8013768:	4649      	mov	r1, r9
 801376a:	f000 fc45 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 801376e:	2800      	cmp	r0, #0
 8013770:	d034      	beq.n	80137dc <ucdr_deserialize_int16_t+0xb0>
 8013772:	7d23      	ldrb	r3, [r4, #20]
 8013774:	2b01      	cmp	r3, #1
 8013776:	d042      	beq.n	80137fe <ucdr_deserialize_int16_t+0xd2>
 8013778:	787b      	ldrb	r3, [r7, #1]
 801377a:	702b      	strb	r3, [r5, #0]
 801377c:	2e00      	cmp	r6, #0
 801377e:	d03a      	beq.n	80137f6 <ucdr_deserialize_int16_t+0xca>
 8013780:	783b      	ldrb	r3, [r7, #0]
 8013782:	706b      	strb	r3, [r5, #1]
 8013784:	6923      	ldr	r3, [r4, #16]
 8013786:	2102      	movs	r1, #2
 8013788:	68a2      	ldr	r2, [r4, #8]
 801378a:	3302      	adds	r3, #2
 801378c:	7da0      	ldrb	r0, [r4, #22]
 801378e:	444a      	add	r2, r9
 8013790:	7561      	strb	r1, [r4, #21]
 8013792:	1b9b      	subs	r3, r3, r6
 8013794:	f080 0001 	eor.w	r0, r0, #1
 8013798:	60a2      	str	r2, [r4, #8]
 801379a:	6123      	str	r3, [r4, #16]
 801379c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137a0:	2102      	movs	r1, #2
 80137a2:	4620      	mov	r0, r4
 80137a4:	f000 fc28 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 80137a8:	b180      	cbz	r0, 80137cc <ucdr_deserialize_int16_t+0xa0>
 80137aa:	7d23      	ldrb	r3, [r4, #20]
 80137ac:	2b01      	cmp	r3, #1
 80137ae:	68a3      	ldr	r3, [r4, #8]
 80137b0:	d011      	beq.n	80137d6 <ucdr_deserialize_int16_t+0xaa>
 80137b2:	785b      	ldrb	r3, [r3, #1]
 80137b4:	702b      	strb	r3, [r5, #0]
 80137b6:	68a3      	ldr	r3, [r4, #8]
 80137b8:	781b      	ldrb	r3, [r3, #0]
 80137ba:	706b      	strb	r3, [r5, #1]
 80137bc:	2102      	movs	r1, #2
 80137be:	68a2      	ldr	r2, [r4, #8]
 80137c0:	6923      	ldr	r3, [r4, #16]
 80137c2:	440a      	add	r2, r1
 80137c4:	7561      	strb	r1, [r4, #21]
 80137c6:	440b      	add	r3, r1
 80137c8:	60a2      	str	r2, [r4, #8]
 80137ca:	6123      	str	r3, [r4, #16]
 80137cc:	7da0      	ldrb	r0, [r4, #22]
 80137ce:	f080 0001 	eor.w	r0, r0, #1
 80137d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137d6:	881b      	ldrh	r3, [r3, #0]
 80137d8:	802b      	strh	r3, [r5, #0]
 80137da:	e7ef      	b.n	80137bc <ucdr_deserialize_int16_t+0x90>
 80137dc:	68a2      	ldr	r2, [r4, #8]
 80137de:	6923      	ldr	r3, [r4, #16]
 80137e0:	1b92      	subs	r2, r2, r6
 80137e2:	7da0      	ldrb	r0, [r4, #22]
 80137e4:	1b9b      	subs	r3, r3, r6
 80137e6:	f884 8015 	strb.w	r8, [r4, #21]
 80137ea:	f080 0001 	eor.w	r0, r0, #1
 80137ee:	60a2      	str	r2, [r4, #8]
 80137f0:	6123      	str	r3, [r4, #16]
 80137f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137f6:	68a3      	ldr	r3, [r4, #8]
 80137f8:	781b      	ldrb	r3, [r3, #0]
 80137fa:	706b      	strb	r3, [r5, #1]
 80137fc:	e7c2      	b.n	8013784 <ucdr_deserialize_int16_t+0x58>
 80137fe:	4639      	mov	r1, r7
 8013800:	4632      	mov	r2, r6
 8013802:	4628      	mov	r0, r5
 8013804:	f00e fe03 	bl	802240e <memcpy>
 8013808:	464a      	mov	r2, r9
 801380a:	19a8      	adds	r0, r5, r6
 801380c:	68a1      	ldr	r1, [r4, #8]
 801380e:	f00e fdfe 	bl	802240e <memcpy>
 8013812:	e7b7      	b.n	8013784 <ucdr_deserialize_int16_t+0x58>

08013814 <ucdr_serialize_int32_t>:
 8013814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013818:	b082      	sub	sp, #8
 801381a:	4604      	mov	r4, r0
 801381c:	9101      	str	r1, [sp, #4]
 801381e:	2104      	movs	r1, #4
 8013820:	f000 fc3e 	bl	80140a0 <ucdr_buffer_alignment>
 8013824:	4601      	mov	r1, r0
 8013826:	4620      	mov	r0, r4
 8013828:	7d67      	ldrb	r7, [r4, #21]
 801382a:	f000 fc81 	bl	8014130 <ucdr_advance_buffer>
 801382e:	2104      	movs	r1, #4
 8013830:	4620      	mov	r0, r4
 8013832:	f000 fbd5 	bl	8013fe0 <ucdr_check_buffer_available_for>
 8013836:	2800      	cmp	r0, #0
 8013838:	d139      	bne.n	80138ae <ucdr_serialize_int32_t+0x9a>
 801383a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801383e:	42ab      	cmp	r3, r5
 8013840:	d930      	bls.n	80138a4 <ucdr_serialize_int32_t+0x90>
 8013842:	1b5e      	subs	r6, r3, r5
 8013844:	60a3      	str	r3, [r4, #8]
 8013846:	6923      	ldr	r3, [r4, #16]
 8013848:	4620      	mov	r0, r4
 801384a:	f1c6 0804 	rsb	r8, r6, #4
 801384e:	4433      	add	r3, r6
 8013850:	4641      	mov	r1, r8
 8013852:	6123      	str	r3, [r4, #16]
 8013854:	f000 fbd0 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8013858:	2800      	cmp	r0, #0
 801385a:	d04c      	beq.n	80138f6 <ucdr_serialize_int32_t+0xe2>
 801385c:	7d23      	ldrb	r3, [r4, #20]
 801385e:	2b01      	cmp	r3, #1
 8013860:	d063      	beq.n	801392a <ucdr_serialize_int32_t+0x116>
 8013862:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013866:	702b      	strb	r3, [r5, #0]
 8013868:	2e00      	cmp	r6, #0
 801386a:	d051      	beq.n	8013910 <ucdr_serialize_int32_t+0xfc>
 801386c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013870:	2e01      	cmp	r6, #1
 8013872:	706b      	strb	r3, [r5, #1]
 8013874:	d050      	beq.n	8013918 <ucdr_serialize_int32_t+0x104>
 8013876:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801387a:	2e02      	cmp	r6, #2
 801387c:	70ab      	strb	r3, [r5, #2]
 801387e:	d04f      	beq.n	8013920 <ucdr_serialize_int32_t+0x10c>
 8013880:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013884:	70eb      	strb	r3, [r5, #3]
 8013886:	6923      	ldr	r3, [r4, #16]
 8013888:	2104      	movs	r1, #4
 801388a:	68a2      	ldr	r2, [r4, #8]
 801388c:	3304      	adds	r3, #4
 801388e:	7da0      	ldrb	r0, [r4, #22]
 8013890:	4442      	add	r2, r8
 8013892:	7561      	strb	r1, [r4, #21]
 8013894:	1b9e      	subs	r6, r3, r6
 8013896:	f080 0001 	eor.w	r0, r0, #1
 801389a:	60a2      	str	r2, [r4, #8]
 801389c:	6126      	str	r6, [r4, #16]
 801389e:	b002      	add	sp, #8
 80138a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138a4:	2104      	movs	r1, #4
 80138a6:	4620      	mov	r0, r4
 80138a8:	f000 fba6 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 80138ac:	b1d0      	cbz	r0, 80138e4 <ucdr_serialize_int32_t+0xd0>
 80138ae:	7d23      	ldrb	r3, [r4, #20]
 80138b0:	2b01      	cmp	r3, #1
 80138b2:	68a3      	ldr	r3, [r4, #8]
 80138b4:	d01c      	beq.n	80138f0 <ucdr_serialize_int32_t+0xdc>
 80138b6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80138ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80138be:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80138c2:	7018      	strb	r0, [r3, #0]
 80138c4:	68a3      	ldr	r3, [r4, #8]
 80138c6:	705a      	strb	r2, [r3, #1]
 80138c8:	68a3      	ldr	r3, [r4, #8]
 80138ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80138ce:	7099      	strb	r1, [r3, #2]
 80138d0:	68a3      	ldr	r3, [r4, #8]
 80138d2:	70da      	strb	r2, [r3, #3]
 80138d4:	2104      	movs	r1, #4
 80138d6:	68a2      	ldr	r2, [r4, #8]
 80138d8:	6923      	ldr	r3, [r4, #16]
 80138da:	440a      	add	r2, r1
 80138dc:	7561      	strb	r1, [r4, #21]
 80138de:	440b      	add	r3, r1
 80138e0:	60a2      	str	r2, [r4, #8]
 80138e2:	6123      	str	r3, [r4, #16]
 80138e4:	7da0      	ldrb	r0, [r4, #22]
 80138e6:	f080 0001 	eor.w	r0, r0, #1
 80138ea:	b002      	add	sp, #8
 80138ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138f0:	9a01      	ldr	r2, [sp, #4]
 80138f2:	601a      	str	r2, [r3, #0]
 80138f4:	e7ee      	b.n	80138d4 <ucdr_serialize_int32_t+0xc0>
 80138f6:	68a2      	ldr	r2, [r4, #8]
 80138f8:	6923      	ldr	r3, [r4, #16]
 80138fa:	7da0      	ldrb	r0, [r4, #22]
 80138fc:	1b92      	subs	r2, r2, r6
 80138fe:	1b9b      	subs	r3, r3, r6
 8013900:	7567      	strb	r7, [r4, #21]
 8013902:	f080 0001 	eor.w	r0, r0, #1
 8013906:	60a2      	str	r2, [r4, #8]
 8013908:	6123      	str	r3, [r4, #16]
 801390a:	b002      	add	sp, #8
 801390c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013910:	68a3      	ldr	r3, [r4, #8]
 8013912:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013916:	701a      	strb	r2, [r3, #0]
 8013918:	68a3      	ldr	r3, [r4, #8]
 801391a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801391e:	701a      	strb	r2, [r3, #0]
 8013920:	68a3      	ldr	r3, [r4, #8]
 8013922:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013926:	701a      	strb	r2, [r3, #0]
 8013928:	e7ad      	b.n	8013886 <ucdr_serialize_int32_t+0x72>
 801392a:	4628      	mov	r0, r5
 801392c:	ad01      	add	r5, sp, #4
 801392e:	4632      	mov	r2, r6
 8013930:	4629      	mov	r1, r5
 8013932:	f00e fd6c 	bl	802240e <memcpy>
 8013936:	4642      	mov	r2, r8
 8013938:	19a9      	adds	r1, r5, r6
 801393a:	68a0      	ldr	r0, [r4, #8]
 801393c:	f00e fd67 	bl	802240e <memcpy>
 8013940:	e7a1      	b.n	8013886 <ucdr_serialize_int32_t+0x72>
 8013942:	bf00      	nop

08013944 <ucdr_deserialize_int32_t>:
 8013944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013948:	4604      	mov	r4, r0
 801394a:	460d      	mov	r5, r1
 801394c:	2104      	movs	r1, #4
 801394e:	f000 fba7 	bl	80140a0 <ucdr_buffer_alignment>
 8013952:	4601      	mov	r1, r0
 8013954:	4620      	mov	r0, r4
 8013956:	f894 8015 	ldrb.w	r8, [r4, #21]
 801395a:	f000 fbe9 	bl	8014130 <ucdr_advance_buffer>
 801395e:	2104      	movs	r1, #4
 8013960:	4620      	mov	r0, r4
 8013962:	f000 fb3d 	bl	8013fe0 <ucdr_check_buffer_available_for>
 8013966:	2800      	cmp	r0, #0
 8013968:	d138      	bne.n	80139dc <ucdr_deserialize_int32_t+0x98>
 801396a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801396e:	42b7      	cmp	r7, r6
 8013970:	d92f      	bls.n	80139d2 <ucdr_deserialize_int32_t+0x8e>
 8013972:	6923      	ldr	r3, [r4, #16]
 8013974:	4620      	mov	r0, r4
 8013976:	60a7      	str	r7, [r4, #8]
 8013978:	1bbf      	subs	r7, r7, r6
 801397a:	443b      	add	r3, r7
 801397c:	f1c7 0904 	rsb	r9, r7, #4
 8013980:	6123      	str	r3, [r4, #16]
 8013982:	4649      	mov	r1, r9
 8013984:	f000 fb38 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8013988:	2800      	cmp	r0, #0
 801398a:	d046      	beq.n	8013a1a <ucdr_deserialize_int32_t+0xd6>
 801398c:	7d23      	ldrb	r3, [r4, #20]
 801398e:	2b01      	cmp	r3, #1
 8013990:	d05c      	beq.n	8013a4c <ucdr_deserialize_int32_t+0x108>
 8013992:	78f3      	ldrb	r3, [r6, #3]
 8013994:	702b      	strb	r3, [r5, #0]
 8013996:	2f00      	cmp	r7, #0
 8013998:	d04c      	beq.n	8013a34 <ucdr_deserialize_int32_t+0xf0>
 801399a:	78b3      	ldrb	r3, [r6, #2]
 801399c:	2f01      	cmp	r7, #1
 801399e:	706b      	strb	r3, [r5, #1]
 80139a0:	f105 0302 	add.w	r3, r5, #2
 80139a4:	d04a      	beq.n	8013a3c <ucdr_deserialize_int32_t+0xf8>
 80139a6:	7873      	ldrb	r3, [r6, #1]
 80139a8:	2f02      	cmp	r7, #2
 80139aa:	70ab      	strb	r3, [r5, #2]
 80139ac:	f105 0303 	add.w	r3, r5, #3
 80139b0:	d048      	beq.n	8013a44 <ucdr_deserialize_int32_t+0x100>
 80139b2:	7833      	ldrb	r3, [r6, #0]
 80139b4:	70eb      	strb	r3, [r5, #3]
 80139b6:	6923      	ldr	r3, [r4, #16]
 80139b8:	2104      	movs	r1, #4
 80139ba:	68a2      	ldr	r2, [r4, #8]
 80139bc:	3304      	adds	r3, #4
 80139be:	7da0      	ldrb	r0, [r4, #22]
 80139c0:	444a      	add	r2, r9
 80139c2:	7561      	strb	r1, [r4, #21]
 80139c4:	1bdb      	subs	r3, r3, r7
 80139c6:	f080 0001 	eor.w	r0, r0, #1
 80139ca:	60a2      	str	r2, [r4, #8]
 80139cc:	6123      	str	r3, [r4, #16]
 80139ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139d2:	2104      	movs	r1, #4
 80139d4:	4620      	mov	r0, r4
 80139d6:	f000 fb0f 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 80139da:	b1b0      	cbz	r0, 8013a0a <ucdr_deserialize_int32_t+0xc6>
 80139dc:	7d23      	ldrb	r3, [r4, #20]
 80139de:	2b01      	cmp	r3, #1
 80139e0:	68a3      	ldr	r3, [r4, #8]
 80139e2:	d017      	beq.n	8013a14 <ucdr_deserialize_int32_t+0xd0>
 80139e4:	78db      	ldrb	r3, [r3, #3]
 80139e6:	702b      	strb	r3, [r5, #0]
 80139e8:	68a3      	ldr	r3, [r4, #8]
 80139ea:	789b      	ldrb	r3, [r3, #2]
 80139ec:	706b      	strb	r3, [r5, #1]
 80139ee:	68a3      	ldr	r3, [r4, #8]
 80139f0:	785b      	ldrb	r3, [r3, #1]
 80139f2:	70ab      	strb	r3, [r5, #2]
 80139f4:	68a3      	ldr	r3, [r4, #8]
 80139f6:	781b      	ldrb	r3, [r3, #0]
 80139f8:	70eb      	strb	r3, [r5, #3]
 80139fa:	2104      	movs	r1, #4
 80139fc:	68a2      	ldr	r2, [r4, #8]
 80139fe:	6923      	ldr	r3, [r4, #16]
 8013a00:	440a      	add	r2, r1
 8013a02:	7561      	strb	r1, [r4, #21]
 8013a04:	440b      	add	r3, r1
 8013a06:	60a2      	str	r2, [r4, #8]
 8013a08:	6123      	str	r3, [r4, #16]
 8013a0a:	7da0      	ldrb	r0, [r4, #22]
 8013a0c:	f080 0001 	eor.w	r0, r0, #1
 8013a10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	602b      	str	r3, [r5, #0]
 8013a18:	e7ef      	b.n	80139fa <ucdr_deserialize_int32_t+0xb6>
 8013a1a:	68a2      	ldr	r2, [r4, #8]
 8013a1c:	6923      	ldr	r3, [r4, #16]
 8013a1e:	1bd2      	subs	r2, r2, r7
 8013a20:	7da0      	ldrb	r0, [r4, #22]
 8013a22:	1bdb      	subs	r3, r3, r7
 8013a24:	f884 8015 	strb.w	r8, [r4, #21]
 8013a28:	f080 0001 	eor.w	r0, r0, #1
 8013a2c:	60a2      	str	r2, [r4, #8]
 8013a2e:	6123      	str	r3, [r4, #16]
 8013a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a34:	68a3      	ldr	r3, [r4, #8]
 8013a36:	789b      	ldrb	r3, [r3, #2]
 8013a38:	706b      	strb	r3, [r5, #1]
 8013a3a:	1cab      	adds	r3, r5, #2
 8013a3c:	68a2      	ldr	r2, [r4, #8]
 8013a3e:	7852      	ldrb	r2, [r2, #1]
 8013a40:	f803 2b01 	strb.w	r2, [r3], #1
 8013a44:	68a2      	ldr	r2, [r4, #8]
 8013a46:	7812      	ldrb	r2, [r2, #0]
 8013a48:	701a      	strb	r2, [r3, #0]
 8013a4a:	e7b4      	b.n	80139b6 <ucdr_deserialize_int32_t+0x72>
 8013a4c:	4631      	mov	r1, r6
 8013a4e:	463a      	mov	r2, r7
 8013a50:	4628      	mov	r0, r5
 8013a52:	f00e fcdc 	bl	802240e <memcpy>
 8013a56:	464a      	mov	r2, r9
 8013a58:	19e8      	adds	r0, r5, r7
 8013a5a:	68a1      	ldr	r1, [r4, #8]
 8013a5c:	f00e fcd7 	bl	802240e <memcpy>
 8013a60:	e7a9      	b.n	80139b6 <ucdr_deserialize_int32_t+0x72>
 8013a62:	bf00      	nop

08013a64 <ucdr_serialize_float>:
 8013a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a68:	4604      	mov	r4, r0
 8013a6a:	b082      	sub	sp, #8
 8013a6c:	2104      	movs	r1, #4
 8013a6e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013a72:	f000 fb15 	bl	80140a0 <ucdr_buffer_alignment>
 8013a76:	4601      	mov	r1, r0
 8013a78:	4620      	mov	r0, r4
 8013a7a:	7d67      	ldrb	r7, [r4, #21]
 8013a7c:	f000 fb58 	bl	8014130 <ucdr_advance_buffer>
 8013a80:	2104      	movs	r1, #4
 8013a82:	4620      	mov	r0, r4
 8013a84:	f000 faac 	bl	8013fe0 <ucdr_check_buffer_available_for>
 8013a88:	2800      	cmp	r0, #0
 8013a8a:	d139      	bne.n	8013b00 <ucdr_serialize_float+0x9c>
 8013a8c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013a90:	42ab      	cmp	r3, r5
 8013a92:	d930      	bls.n	8013af6 <ucdr_serialize_float+0x92>
 8013a94:	1b5e      	subs	r6, r3, r5
 8013a96:	60a3      	str	r3, [r4, #8]
 8013a98:	6923      	ldr	r3, [r4, #16]
 8013a9a:	4620      	mov	r0, r4
 8013a9c:	f1c6 0804 	rsb	r8, r6, #4
 8013aa0:	4433      	add	r3, r6
 8013aa2:	4641      	mov	r1, r8
 8013aa4:	6123      	str	r3, [r4, #16]
 8013aa6:	f000 faa7 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8013aaa:	2800      	cmp	r0, #0
 8013aac:	d04c      	beq.n	8013b48 <ucdr_serialize_float+0xe4>
 8013aae:	7d23      	ldrb	r3, [r4, #20]
 8013ab0:	2b01      	cmp	r3, #1
 8013ab2:	d063      	beq.n	8013b7c <ucdr_serialize_float+0x118>
 8013ab4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013ab8:	702b      	strb	r3, [r5, #0]
 8013aba:	2e00      	cmp	r6, #0
 8013abc:	d051      	beq.n	8013b62 <ucdr_serialize_float+0xfe>
 8013abe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013ac2:	2e01      	cmp	r6, #1
 8013ac4:	706b      	strb	r3, [r5, #1]
 8013ac6:	d050      	beq.n	8013b6a <ucdr_serialize_float+0x106>
 8013ac8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013acc:	2e02      	cmp	r6, #2
 8013ace:	70ab      	strb	r3, [r5, #2]
 8013ad0:	d04f      	beq.n	8013b72 <ucdr_serialize_float+0x10e>
 8013ad2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013ad6:	70eb      	strb	r3, [r5, #3]
 8013ad8:	6923      	ldr	r3, [r4, #16]
 8013ada:	2104      	movs	r1, #4
 8013adc:	68a2      	ldr	r2, [r4, #8]
 8013ade:	3304      	adds	r3, #4
 8013ae0:	7da0      	ldrb	r0, [r4, #22]
 8013ae2:	4442      	add	r2, r8
 8013ae4:	7561      	strb	r1, [r4, #21]
 8013ae6:	1b9e      	subs	r6, r3, r6
 8013ae8:	f080 0001 	eor.w	r0, r0, #1
 8013aec:	60a2      	str	r2, [r4, #8]
 8013aee:	6126      	str	r6, [r4, #16]
 8013af0:	b002      	add	sp, #8
 8013af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013af6:	2104      	movs	r1, #4
 8013af8:	4620      	mov	r0, r4
 8013afa:	f000 fa7d 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8013afe:	b1d0      	cbz	r0, 8013b36 <ucdr_serialize_float+0xd2>
 8013b00:	7d23      	ldrb	r3, [r4, #20]
 8013b02:	2b01      	cmp	r3, #1
 8013b04:	68a3      	ldr	r3, [r4, #8]
 8013b06:	d01c      	beq.n	8013b42 <ucdr_serialize_float+0xde>
 8013b08:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013b0c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013b10:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013b14:	7018      	strb	r0, [r3, #0]
 8013b16:	68a3      	ldr	r3, [r4, #8]
 8013b18:	705a      	strb	r2, [r3, #1]
 8013b1a:	68a3      	ldr	r3, [r4, #8]
 8013b1c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013b20:	7099      	strb	r1, [r3, #2]
 8013b22:	68a3      	ldr	r3, [r4, #8]
 8013b24:	70da      	strb	r2, [r3, #3]
 8013b26:	2104      	movs	r1, #4
 8013b28:	68a2      	ldr	r2, [r4, #8]
 8013b2a:	6923      	ldr	r3, [r4, #16]
 8013b2c:	440a      	add	r2, r1
 8013b2e:	7561      	strb	r1, [r4, #21]
 8013b30:	440b      	add	r3, r1
 8013b32:	60a2      	str	r2, [r4, #8]
 8013b34:	6123      	str	r3, [r4, #16]
 8013b36:	7da0      	ldrb	r0, [r4, #22]
 8013b38:	f080 0001 	eor.w	r0, r0, #1
 8013b3c:	b002      	add	sp, #8
 8013b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b42:	9a01      	ldr	r2, [sp, #4]
 8013b44:	601a      	str	r2, [r3, #0]
 8013b46:	e7ee      	b.n	8013b26 <ucdr_serialize_float+0xc2>
 8013b48:	68a2      	ldr	r2, [r4, #8]
 8013b4a:	6923      	ldr	r3, [r4, #16]
 8013b4c:	7da0      	ldrb	r0, [r4, #22]
 8013b4e:	1b92      	subs	r2, r2, r6
 8013b50:	1b9b      	subs	r3, r3, r6
 8013b52:	7567      	strb	r7, [r4, #21]
 8013b54:	f080 0001 	eor.w	r0, r0, #1
 8013b58:	60a2      	str	r2, [r4, #8]
 8013b5a:	6123      	str	r3, [r4, #16]
 8013b5c:	b002      	add	sp, #8
 8013b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b62:	68a3      	ldr	r3, [r4, #8]
 8013b64:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013b68:	701a      	strb	r2, [r3, #0]
 8013b6a:	68a3      	ldr	r3, [r4, #8]
 8013b6c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013b70:	701a      	strb	r2, [r3, #0]
 8013b72:	68a3      	ldr	r3, [r4, #8]
 8013b74:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013b78:	701a      	strb	r2, [r3, #0]
 8013b7a:	e7ad      	b.n	8013ad8 <ucdr_serialize_float+0x74>
 8013b7c:	4628      	mov	r0, r5
 8013b7e:	ad01      	add	r5, sp, #4
 8013b80:	4632      	mov	r2, r6
 8013b82:	4629      	mov	r1, r5
 8013b84:	f00e fc43 	bl	802240e <memcpy>
 8013b88:	4642      	mov	r2, r8
 8013b8a:	19a9      	adds	r1, r5, r6
 8013b8c:	68a0      	ldr	r0, [r4, #8]
 8013b8e:	f00e fc3e 	bl	802240e <memcpy>
 8013b92:	e7a1      	b.n	8013ad8 <ucdr_serialize_float+0x74>

08013b94 <ucdr_deserialize_float>:
 8013b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b98:	4604      	mov	r4, r0
 8013b9a:	460d      	mov	r5, r1
 8013b9c:	2104      	movs	r1, #4
 8013b9e:	f000 fa7f 	bl	80140a0 <ucdr_buffer_alignment>
 8013ba2:	4601      	mov	r1, r0
 8013ba4:	4620      	mov	r0, r4
 8013ba6:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013baa:	f000 fac1 	bl	8014130 <ucdr_advance_buffer>
 8013bae:	2104      	movs	r1, #4
 8013bb0:	4620      	mov	r0, r4
 8013bb2:	f000 fa15 	bl	8013fe0 <ucdr_check_buffer_available_for>
 8013bb6:	2800      	cmp	r0, #0
 8013bb8:	d138      	bne.n	8013c2c <ucdr_deserialize_float+0x98>
 8013bba:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013bbe:	42b7      	cmp	r7, r6
 8013bc0:	d92f      	bls.n	8013c22 <ucdr_deserialize_float+0x8e>
 8013bc2:	6923      	ldr	r3, [r4, #16]
 8013bc4:	4620      	mov	r0, r4
 8013bc6:	60a7      	str	r7, [r4, #8]
 8013bc8:	1bbf      	subs	r7, r7, r6
 8013bca:	443b      	add	r3, r7
 8013bcc:	f1c7 0904 	rsb	r9, r7, #4
 8013bd0:	6123      	str	r3, [r4, #16]
 8013bd2:	4649      	mov	r1, r9
 8013bd4:	f000 fa10 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8013bd8:	2800      	cmp	r0, #0
 8013bda:	d046      	beq.n	8013c6a <ucdr_deserialize_float+0xd6>
 8013bdc:	7d23      	ldrb	r3, [r4, #20]
 8013bde:	2b01      	cmp	r3, #1
 8013be0:	d05c      	beq.n	8013c9c <ucdr_deserialize_float+0x108>
 8013be2:	78f3      	ldrb	r3, [r6, #3]
 8013be4:	702b      	strb	r3, [r5, #0]
 8013be6:	2f00      	cmp	r7, #0
 8013be8:	d04c      	beq.n	8013c84 <ucdr_deserialize_float+0xf0>
 8013bea:	78b3      	ldrb	r3, [r6, #2]
 8013bec:	2f01      	cmp	r7, #1
 8013bee:	706b      	strb	r3, [r5, #1]
 8013bf0:	f105 0302 	add.w	r3, r5, #2
 8013bf4:	d04a      	beq.n	8013c8c <ucdr_deserialize_float+0xf8>
 8013bf6:	7873      	ldrb	r3, [r6, #1]
 8013bf8:	2f02      	cmp	r7, #2
 8013bfa:	70ab      	strb	r3, [r5, #2]
 8013bfc:	f105 0303 	add.w	r3, r5, #3
 8013c00:	d048      	beq.n	8013c94 <ucdr_deserialize_float+0x100>
 8013c02:	7833      	ldrb	r3, [r6, #0]
 8013c04:	70eb      	strb	r3, [r5, #3]
 8013c06:	6923      	ldr	r3, [r4, #16]
 8013c08:	2104      	movs	r1, #4
 8013c0a:	68a2      	ldr	r2, [r4, #8]
 8013c0c:	3304      	adds	r3, #4
 8013c0e:	7da0      	ldrb	r0, [r4, #22]
 8013c10:	444a      	add	r2, r9
 8013c12:	7561      	strb	r1, [r4, #21]
 8013c14:	1bdb      	subs	r3, r3, r7
 8013c16:	f080 0001 	eor.w	r0, r0, #1
 8013c1a:	60a2      	str	r2, [r4, #8]
 8013c1c:	6123      	str	r3, [r4, #16]
 8013c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c22:	2104      	movs	r1, #4
 8013c24:	4620      	mov	r0, r4
 8013c26:	f000 f9e7 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8013c2a:	b1b0      	cbz	r0, 8013c5a <ucdr_deserialize_float+0xc6>
 8013c2c:	7d23      	ldrb	r3, [r4, #20]
 8013c2e:	2b01      	cmp	r3, #1
 8013c30:	68a3      	ldr	r3, [r4, #8]
 8013c32:	d017      	beq.n	8013c64 <ucdr_deserialize_float+0xd0>
 8013c34:	78db      	ldrb	r3, [r3, #3]
 8013c36:	702b      	strb	r3, [r5, #0]
 8013c38:	68a3      	ldr	r3, [r4, #8]
 8013c3a:	789b      	ldrb	r3, [r3, #2]
 8013c3c:	706b      	strb	r3, [r5, #1]
 8013c3e:	68a3      	ldr	r3, [r4, #8]
 8013c40:	785b      	ldrb	r3, [r3, #1]
 8013c42:	70ab      	strb	r3, [r5, #2]
 8013c44:	68a3      	ldr	r3, [r4, #8]
 8013c46:	781b      	ldrb	r3, [r3, #0]
 8013c48:	70eb      	strb	r3, [r5, #3]
 8013c4a:	2104      	movs	r1, #4
 8013c4c:	68a2      	ldr	r2, [r4, #8]
 8013c4e:	6923      	ldr	r3, [r4, #16]
 8013c50:	440a      	add	r2, r1
 8013c52:	7561      	strb	r1, [r4, #21]
 8013c54:	440b      	add	r3, r1
 8013c56:	60a2      	str	r2, [r4, #8]
 8013c58:	6123      	str	r3, [r4, #16]
 8013c5a:	7da0      	ldrb	r0, [r4, #22]
 8013c5c:	f080 0001 	eor.w	r0, r0, #1
 8013c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	602b      	str	r3, [r5, #0]
 8013c68:	e7ef      	b.n	8013c4a <ucdr_deserialize_float+0xb6>
 8013c6a:	68a2      	ldr	r2, [r4, #8]
 8013c6c:	6923      	ldr	r3, [r4, #16]
 8013c6e:	1bd2      	subs	r2, r2, r7
 8013c70:	7da0      	ldrb	r0, [r4, #22]
 8013c72:	1bdb      	subs	r3, r3, r7
 8013c74:	f884 8015 	strb.w	r8, [r4, #21]
 8013c78:	f080 0001 	eor.w	r0, r0, #1
 8013c7c:	60a2      	str	r2, [r4, #8]
 8013c7e:	6123      	str	r3, [r4, #16]
 8013c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c84:	68a3      	ldr	r3, [r4, #8]
 8013c86:	789b      	ldrb	r3, [r3, #2]
 8013c88:	706b      	strb	r3, [r5, #1]
 8013c8a:	1cab      	adds	r3, r5, #2
 8013c8c:	68a2      	ldr	r2, [r4, #8]
 8013c8e:	7852      	ldrb	r2, [r2, #1]
 8013c90:	f803 2b01 	strb.w	r2, [r3], #1
 8013c94:	68a2      	ldr	r2, [r4, #8]
 8013c96:	7812      	ldrb	r2, [r2, #0]
 8013c98:	701a      	strb	r2, [r3, #0]
 8013c9a:	e7b4      	b.n	8013c06 <ucdr_deserialize_float+0x72>
 8013c9c:	4631      	mov	r1, r6
 8013c9e:	463a      	mov	r2, r7
 8013ca0:	4628      	mov	r0, r5
 8013ca2:	f00e fbb4 	bl	802240e <memcpy>
 8013ca6:	464a      	mov	r2, r9
 8013ca8:	19e8      	adds	r0, r5, r7
 8013caa:	68a1      	ldr	r1, [r4, #8]
 8013cac:	f00e fbaf 	bl	802240e <memcpy>
 8013cb0:	e7a9      	b.n	8013c06 <ucdr_deserialize_float+0x72>
 8013cb2:	bf00      	nop

08013cb4 <ucdr_serialize_double>:
 8013cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cb8:	4604      	mov	r4, r0
 8013cba:	b082      	sub	sp, #8
 8013cbc:	2108      	movs	r1, #8
 8013cbe:	ed8d 0b00 	vstr	d0, [sp]
 8013cc2:	f000 f9ed 	bl	80140a0 <ucdr_buffer_alignment>
 8013cc6:	4601      	mov	r1, r0
 8013cc8:	4620      	mov	r0, r4
 8013cca:	7d67      	ldrb	r7, [r4, #21]
 8013ccc:	f000 fa30 	bl	8014130 <ucdr_advance_buffer>
 8013cd0:	2108      	movs	r1, #8
 8013cd2:	4620      	mov	r0, r4
 8013cd4:	f000 f984 	bl	8013fe0 <ucdr_check_buffer_available_for>
 8013cd8:	2800      	cmp	r0, #0
 8013cda:	d14e      	bne.n	8013d7a <ucdr_serialize_double+0xc6>
 8013cdc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013ce0:	42ab      	cmp	r3, r5
 8013ce2:	d945      	bls.n	8013d70 <ucdr_serialize_double+0xbc>
 8013ce4:	1b5e      	subs	r6, r3, r5
 8013ce6:	60a3      	str	r3, [r4, #8]
 8013ce8:	6923      	ldr	r3, [r4, #16]
 8013cea:	4620      	mov	r0, r4
 8013cec:	f1c6 0808 	rsb	r8, r6, #8
 8013cf0:	4433      	add	r3, r6
 8013cf2:	4641      	mov	r1, r8
 8013cf4:	6123      	str	r3, [r4, #16]
 8013cf6:	f000 f97f 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8013cfa:	2800      	cmp	r0, #0
 8013cfc:	d074      	beq.n	8013de8 <ucdr_serialize_double+0x134>
 8013cfe:	7d23      	ldrb	r3, [r4, #20]
 8013d00:	2b01      	cmp	r3, #1
 8013d02:	f000 809b 	beq.w	8013e3c <ucdr_serialize_double+0x188>
 8013d06:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013d0a:	702b      	strb	r3, [r5, #0]
 8013d0c:	2e00      	cmp	r6, #0
 8013d0e:	d078      	beq.n	8013e02 <ucdr_serialize_double+0x14e>
 8013d10:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013d14:	2e01      	cmp	r6, #1
 8013d16:	706b      	strb	r3, [r5, #1]
 8013d18:	d077      	beq.n	8013e0a <ucdr_serialize_double+0x156>
 8013d1a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013d1e:	2e02      	cmp	r6, #2
 8013d20:	70ab      	strb	r3, [r5, #2]
 8013d22:	d076      	beq.n	8013e12 <ucdr_serialize_double+0x15e>
 8013d24:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013d28:	2e03      	cmp	r6, #3
 8013d2a:	70eb      	strb	r3, [r5, #3]
 8013d2c:	d075      	beq.n	8013e1a <ucdr_serialize_double+0x166>
 8013d2e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013d32:	2e04      	cmp	r6, #4
 8013d34:	712b      	strb	r3, [r5, #4]
 8013d36:	d074      	beq.n	8013e22 <ucdr_serialize_double+0x16e>
 8013d38:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8013d3c:	2e05      	cmp	r6, #5
 8013d3e:	716b      	strb	r3, [r5, #5]
 8013d40:	d073      	beq.n	8013e2a <ucdr_serialize_double+0x176>
 8013d42:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8013d46:	2e06      	cmp	r6, #6
 8013d48:	71ab      	strb	r3, [r5, #6]
 8013d4a:	d072      	beq.n	8013e32 <ucdr_serialize_double+0x17e>
 8013d4c:	f89d 3000 	ldrb.w	r3, [sp]
 8013d50:	71eb      	strb	r3, [r5, #7]
 8013d52:	6923      	ldr	r3, [r4, #16]
 8013d54:	2108      	movs	r1, #8
 8013d56:	68a2      	ldr	r2, [r4, #8]
 8013d58:	3308      	adds	r3, #8
 8013d5a:	7da0      	ldrb	r0, [r4, #22]
 8013d5c:	4442      	add	r2, r8
 8013d5e:	7561      	strb	r1, [r4, #21]
 8013d60:	1b9e      	subs	r6, r3, r6
 8013d62:	f080 0001 	eor.w	r0, r0, #1
 8013d66:	60a2      	str	r2, [r4, #8]
 8013d68:	6126      	str	r6, [r4, #16]
 8013d6a:	b002      	add	sp, #8
 8013d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d70:	2108      	movs	r1, #8
 8013d72:	4620      	mov	r0, r4
 8013d74:	f000 f940 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8013d78:	b350      	cbz	r0, 8013dd0 <ucdr_serialize_double+0x11c>
 8013d7a:	7d23      	ldrb	r3, [r4, #20]
 8013d7c:	2b01      	cmp	r3, #1
 8013d7e:	d02d      	beq.n	8013ddc <ucdr_serialize_double+0x128>
 8013d80:	68a3      	ldr	r3, [r4, #8]
 8013d82:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013d86:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013d8a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013d8e:	7018      	strb	r0, [r3, #0]
 8013d90:	68a3      	ldr	r3, [r4, #8]
 8013d92:	705a      	strb	r2, [r3, #1]
 8013d94:	68a3      	ldr	r3, [r4, #8]
 8013d96:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013d9a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8013d9e:	7099      	strb	r1, [r3, #2]
 8013da0:	68a3      	ldr	r3, [r4, #8]
 8013da2:	70da      	strb	r2, [r3, #3]
 8013da4:	68a3      	ldr	r3, [r4, #8]
 8013da6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013daa:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8013dae:	7118      	strb	r0, [r3, #4]
 8013db0:	68a3      	ldr	r3, [r4, #8]
 8013db2:	715a      	strb	r2, [r3, #5]
 8013db4:	68a3      	ldr	r3, [r4, #8]
 8013db6:	f89d 2000 	ldrb.w	r2, [sp]
 8013dba:	7199      	strb	r1, [r3, #6]
 8013dbc:	68a3      	ldr	r3, [r4, #8]
 8013dbe:	71da      	strb	r2, [r3, #7]
 8013dc0:	2108      	movs	r1, #8
 8013dc2:	68a2      	ldr	r2, [r4, #8]
 8013dc4:	6923      	ldr	r3, [r4, #16]
 8013dc6:	440a      	add	r2, r1
 8013dc8:	7561      	strb	r1, [r4, #21]
 8013dca:	440b      	add	r3, r1
 8013dcc:	60a2      	str	r2, [r4, #8]
 8013dce:	6123      	str	r3, [r4, #16]
 8013dd0:	7da0      	ldrb	r0, [r4, #22]
 8013dd2:	f080 0001 	eor.w	r0, r0, #1
 8013dd6:	b002      	add	sp, #8
 8013dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ddc:	466b      	mov	r3, sp
 8013dde:	68a2      	ldr	r2, [r4, #8]
 8013de0:	cb03      	ldmia	r3!, {r0, r1}
 8013de2:	6010      	str	r0, [r2, #0]
 8013de4:	6051      	str	r1, [r2, #4]
 8013de6:	e7eb      	b.n	8013dc0 <ucdr_serialize_double+0x10c>
 8013de8:	68a2      	ldr	r2, [r4, #8]
 8013dea:	6923      	ldr	r3, [r4, #16]
 8013dec:	7da0      	ldrb	r0, [r4, #22]
 8013dee:	1b92      	subs	r2, r2, r6
 8013df0:	1b9b      	subs	r3, r3, r6
 8013df2:	7567      	strb	r7, [r4, #21]
 8013df4:	f080 0001 	eor.w	r0, r0, #1
 8013df8:	60a2      	str	r2, [r4, #8]
 8013dfa:	6123      	str	r3, [r4, #16]
 8013dfc:	b002      	add	sp, #8
 8013dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e02:	68a3      	ldr	r3, [r4, #8]
 8013e04:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013e08:	701a      	strb	r2, [r3, #0]
 8013e0a:	68a3      	ldr	r3, [r4, #8]
 8013e0c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013e10:	701a      	strb	r2, [r3, #0]
 8013e12:	68a3      	ldr	r3, [r4, #8]
 8013e14:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013e18:	701a      	strb	r2, [r3, #0]
 8013e1a:	68a3      	ldr	r3, [r4, #8]
 8013e1c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013e20:	701a      	strb	r2, [r3, #0]
 8013e22:	68a3      	ldr	r3, [r4, #8]
 8013e24:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013e28:	701a      	strb	r2, [r3, #0]
 8013e2a:	68a3      	ldr	r3, [r4, #8]
 8013e2c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013e30:	701a      	strb	r2, [r3, #0]
 8013e32:	68a3      	ldr	r3, [r4, #8]
 8013e34:	f89d 2000 	ldrb.w	r2, [sp]
 8013e38:	701a      	strb	r2, [r3, #0]
 8013e3a:	e78a      	b.n	8013d52 <ucdr_serialize_double+0x9e>
 8013e3c:	4628      	mov	r0, r5
 8013e3e:	466d      	mov	r5, sp
 8013e40:	4632      	mov	r2, r6
 8013e42:	4629      	mov	r1, r5
 8013e44:	f00e fae3 	bl	802240e <memcpy>
 8013e48:	4642      	mov	r2, r8
 8013e4a:	19a9      	adds	r1, r5, r6
 8013e4c:	68a0      	ldr	r0, [r4, #8]
 8013e4e:	f00e fade 	bl	802240e <memcpy>
 8013e52:	e77e      	b.n	8013d52 <ucdr_serialize_double+0x9e>

08013e54 <ucdr_deserialize_double>:
 8013e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e58:	4604      	mov	r4, r0
 8013e5a:	460d      	mov	r5, r1
 8013e5c:	2108      	movs	r1, #8
 8013e5e:	f000 f91f 	bl	80140a0 <ucdr_buffer_alignment>
 8013e62:	4601      	mov	r1, r0
 8013e64:	4620      	mov	r0, r4
 8013e66:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013e6a:	f000 f961 	bl	8014130 <ucdr_advance_buffer>
 8013e6e:	2108      	movs	r1, #8
 8013e70:	4620      	mov	r0, r4
 8013e72:	f000 f8b5 	bl	8013fe0 <ucdr_check_buffer_available_for>
 8013e76:	2800      	cmp	r0, #0
 8013e78:	d151      	bne.n	8013f1e <ucdr_deserialize_double+0xca>
 8013e7a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013e7e:	42be      	cmp	r6, r7
 8013e80:	d948      	bls.n	8013f14 <ucdr_deserialize_double+0xc0>
 8013e82:	6923      	ldr	r3, [r4, #16]
 8013e84:	4620      	mov	r0, r4
 8013e86:	60a6      	str	r6, [r4, #8]
 8013e88:	1bf6      	subs	r6, r6, r7
 8013e8a:	4433      	add	r3, r6
 8013e8c:	f1c6 0908 	rsb	r9, r6, #8
 8013e90:	6123      	str	r3, [r4, #16]
 8013e92:	4649      	mov	r1, r9
 8013e94:	f000 f8b0 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8013e98:	2800      	cmp	r0, #0
 8013e9a:	d06d      	beq.n	8013f78 <ucdr_deserialize_double+0x124>
 8013e9c:	7d23      	ldrb	r3, [r4, #20]
 8013e9e:	2b01      	cmp	r3, #1
 8013ea0:	f000 8093 	beq.w	8013fca <ucdr_deserialize_double+0x176>
 8013ea4:	79fb      	ldrb	r3, [r7, #7]
 8013ea6:	702b      	strb	r3, [r5, #0]
 8013ea8:	2e00      	cmp	r6, #0
 8013eaa:	d072      	beq.n	8013f92 <ucdr_deserialize_double+0x13e>
 8013eac:	79bb      	ldrb	r3, [r7, #6]
 8013eae:	2e01      	cmp	r6, #1
 8013eb0:	706b      	strb	r3, [r5, #1]
 8013eb2:	f105 0302 	add.w	r3, r5, #2
 8013eb6:	d070      	beq.n	8013f9a <ucdr_deserialize_double+0x146>
 8013eb8:	797b      	ldrb	r3, [r7, #5]
 8013eba:	2e02      	cmp	r6, #2
 8013ebc:	70ab      	strb	r3, [r5, #2]
 8013ebe:	f105 0303 	add.w	r3, r5, #3
 8013ec2:	d06e      	beq.n	8013fa2 <ucdr_deserialize_double+0x14e>
 8013ec4:	793b      	ldrb	r3, [r7, #4]
 8013ec6:	2e03      	cmp	r6, #3
 8013ec8:	70eb      	strb	r3, [r5, #3]
 8013eca:	f105 0304 	add.w	r3, r5, #4
 8013ece:	d06c      	beq.n	8013faa <ucdr_deserialize_double+0x156>
 8013ed0:	78fb      	ldrb	r3, [r7, #3]
 8013ed2:	2e04      	cmp	r6, #4
 8013ed4:	712b      	strb	r3, [r5, #4]
 8013ed6:	f105 0305 	add.w	r3, r5, #5
 8013eda:	d06a      	beq.n	8013fb2 <ucdr_deserialize_double+0x15e>
 8013edc:	78bb      	ldrb	r3, [r7, #2]
 8013ede:	2e05      	cmp	r6, #5
 8013ee0:	716b      	strb	r3, [r5, #5]
 8013ee2:	f105 0306 	add.w	r3, r5, #6
 8013ee6:	d068      	beq.n	8013fba <ucdr_deserialize_double+0x166>
 8013ee8:	787b      	ldrb	r3, [r7, #1]
 8013eea:	2e06      	cmp	r6, #6
 8013eec:	71ab      	strb	r3, [r5, #6]
 8013eee:	f105 0307 	add.w	r3, r5, #7
 8013ef2:	d066      	beq.n	8013fc2 <ucdr_deserialize_double+0x16e>
 8013ef4:	783b      	ldrb	r3, [r7, #0]
 8013ef6:	71eb      	strb	r3, [r5, #7]
 8013ef8:	6923      	ldr	r3, [r4, #16]
 8013efa:	2108      	movs	r1, #8
 8013efc:	68a2      	ldr	r2, [r4, #8]
 8013efe:	3308      	adds	r3, #8
 8013f00:	7da0      	ldrb	r0, [r4, #22]
 8013f02:	444a      	add	r2, r9
 8013f04:	7561      	strb	r1, [r4, #21]
 8013f06:	1b9e      	subs	r6, r3, r6
 8013f08:	f080 0001 	eor.w	r0, r0, #1
 8013f0c:	60a2      	str	r2, [r4, #8]
 8013f0e:	6126      	str	r6, [r4, #16]
 8013f10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f14:	2108      	movs	r1, #8
 8013f16:	4620      	mov	r0, r4
 8013f18:	f000 f86e 	bl	8013ff8 <ucdr_check_final_buffer_behavior>
 8013f1c:	b310      	cbz	r0, 8013f64 <ucdr_deserialize_double+0x110>
 8013f1e:	7d23      	ldrb	r3, [r4, #20]
 8013f20:	2b01      	cmp	r3, #1
 8013f22:	68a3      	ldr	r3, [r4, #8]
 8013f24:	d023      	beq.n	8013f6e <ucdr_deserialize_double+0x11a>
 8013f26:	79db      	ldrb	r3, [r3, #7]
 8013f28:	702b      	strb	r3, [r5, #0]
 8013f2a:	68a3      	ldr	r3, [r4, #8]
 8013f2c:	799b      	ldrb	r3, [r3, #6]
 8013f2e:	706b      	strb	r3, [r5, #1]
 8013f30:	68a3      	ldr	r3, [r4, #8]
 8013f32:	795b      	ldrb	r3, [r3, #5]
 8013f34:	70ab      	strb	r3, [r5, #2]
 8013f36:	68a3      	ldr	r3, [r4, #8]
 8013f38:	791b      	ldrb	r3, [r3, #4]
 8013f3a:	70eb      	strb	r3, [r5, #3]
 8013f3c:	68a3      	ldr	r3, [r4, #8]
 8013f3e:	78db      	ldrb	r3, [r3, #3]
 8013f40:	712b      	strb	r3, [r5, #4]
 8013f42:	68a3      	ldr	r3, [r4, #8]
 8013f44:	789b      	ldrb	r3, [r3, #2]
 8013f46:	716b      	strb	r3, [r5, #5]
 8013f48:	68a3      	ldr	r3, [r4, #8]
 8013f4a:	785b      	ldrb	r3, [r3, #1]
 8013f4c:	71ab      	strb	r3, [r5, #6]
 8013f4e:	68a3      	ldr	r3, [r4, #8]
 8013f50:	781b      	ldrb	r3, [r3, #0]
 8013f52:	71eb      	strb	r3, [r5, #7]
 8013f54:	2108      	movs	r1, #8
 8013f56:	68a2      	ldr	r2, [r4, #8]
 8013f58:	6923      	ldr	r3, [r4, #16]
 8013f5a:	440a      	add	r2, r1
 8013f5c:	7561      	strb	r1, [r4, #21]
 8013f5e:	440b      	add	r3, r1
 8013f60:	60a2      	str	r2, [r4, #8]
 8013f62:	6123      	str	r3, [r4, #16]
 8013f64:	7da0      	ldrb	r0, [r4, #22]
 8013f66:	f080 0001 	eor.w	r0, r0, #1
 8013f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f6e:	681a      	ldr	r2, [r3, #0]
 8013f70:	685b      	ldr	r3, [r3, #4]
 8013f72:	602a      	str	r2, [r5, #0]
 8013f74:	606b      	str	r3, [r5, #4]
 8013f76:	e7ed      	b.n	8013f54 <ucdr_deserialize_double+0x100>
 8013f78:	68a2      	ldr	r2, [r4, #8]
 8013f7a:	6923      	ldr	r3, [r4, #16]
 8013f7c:	1b92      	subs	r2, r2, r6
 8013f7e:	7da0      	ldrb	r0, [r4, #22]
 8013f80:	1b9b      	subs	r3, r3, r6
 8013f82:	f884 8015 	strb.w	r8, [r4, #21]
 8013f86:	f080 0001 	eor.w	r0, r0, #1
 8013f8a:	60a2      	str	r2, [r4, #8]
 8013f8c:	6123      	str	r3, [r4, #16]
 8013f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f92:	68a3      	ldr	r3, [r4, #8]
 8013f94:	799b      	ldrb	r3, [r3, #6]
 8013f96:	706b      	strb	r3, [r5, #1]
 8013f98:	1cab      	adds	r3, r5, #2
 8013f9a:	68a2      	ldr	r2, [r4, #8]
 8013f9c:	7952      	ldrb	r2, [r2, #5]
 8013f9e:	f803 2b01 	strb.w	r2, [r3], #1
 8013fa2:	68a2      	ldr	r2, [r4, #8]
 8013fa4:	7912      	ldrb	r2, [r2, #4]
 8013fa6:	f803 2b01 	strb.w	r2, [r3], #1
 8013faa:	68a2      	ldr	r2, [r4, #8]
 8013fac:	78d2      	ldrb	r2, [r2, #3]
 8013fae:	f803 2b01 	strb.w	r2, [r3], #1
 8013fb2:	68a2      	ldr	r2, [r4, #8]
 8013fb4:	7892      	ldrb	r2, [r2, #2]
 8013fb6:	f803 2b01 	strb.w	r2, [r3], #1
 8013fba:	68a2      	ldr	r2, [r4, #8]
 8013fbc:	7852      	ldrb	r2, [r2, #1]
 8013fbe:	f803 2b01 	strb.w	r2, [r3], #1
 8013fc2:	68a2      	ldr	r2, [r4, #8]
 8013fc4:	7812      	ldrb	r2, [r2, #0]
 8013fc6:	701a      	strb	r2, [r3, #0]
 8013fc8:	e796      	b.n	8013ef8 <ucdr_deserialize_double+0xa4>
 8013fca:	4639      	mov	r1, r7
 8013fcc:	4632      	mov	r2, r6
 8013fce:	4628      	mov	r0, r5
 8013fd0:	f00e fa1d 	bl	802240e <memcpy>
 8013fd4:	464a      	mov	r2, r9
 8013fd6:	19a8      	adds	r0, r5, r6
 8013fd8:	68a1      	ldr	r1, [r4, #8]
 8013fda:	f00e fa18 	bl	802240e <memcpy>
 8013fde:	e78b      	b.n	8013ef8 <ucdr_deserialize_double+0xa4>

08013fe0 <ucdr_check_buffer_available_for>:
 8013fe0:	7d83      	ldrb	r3, [r0, #22]
 8013fe2:	b93b      	cbnz	r3, 8013ff4 <ucdr_check_buffer_available_for+0x14>
 8013fe4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8013fe8:	4419      	add	r1, r3
 8013fea:	4288      	cmp	r0, r1
 8013fec:	bf34      	ite	cc
 8013fee:	2000      	movcc	r0, #0
 8013ff0:	2001      	movcs	r0, #1
 8013ff2:	4770      	bx	lr
 8013ff4:	2000      	movs	r0, #0
 8013ff6:	4770      	bx	lr

08013ff8 <ucdr_check_final_buffer_behavior>:
 8013ff8:	7d83      	ldrb	r3, [r0, #22]
 8013ffa:	b943      	cbnz	r3, 801400e <ucdr_check_final_buffer_behavior+0x16>
 8013ffc:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8014000:	b510      	push	{r4, lr}
 8014002:	4291      	cmp	r1, r2
 8014004:	4604      	mov	r4, r0
 8014006:	d205      	bcs.n	8014014 <ucdr_check_final_buffer_behavior+0x1c>
 8014008:	2301      	movs	r3, #1
 801400a:	4618      	mov	r0, r3
 801400c:	bd10      	pop	{r4, pc}
 801400e:	2300      	movs	r3, #0
 8014010:	4618      	mov	r0, r3
 8014012:	4770      	bx	lr
 8014014:	6982      	ldr	r2, [r0, #24]
 8014016:	b13a      	cbz	r2, 8014028 <ucdr_check_final_buffer_behavior+0x30>
 8014018:	69c1      	ldr	r1, [r0, #28]
 801401a:	4790      	blx	r2
 801401c:	f080 0301 	eor.w	r3, r0, #1
 8014020:	75a0      	strb	r0, [r4, #22]
 8014022:	b2db      	uxtb	r3, r3
 8014024:	4618      	mov	r0, r3
 8014026:	bd10      	pop	{r4, pc}
 8014028:	2001      	movs	r0, #1
 801402a:	75a0      	strb	r0, [r4, #22]
 801402c:	e7fa      	b.n	8014024 <ucdr_check_final_buffer_behavior+0x2c>
 801402e:	bf00      	nop

08014030 <ucdr_set_on_full_buffer_callback>:
 8014030:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8014034:	4770      	bx	lr
 8014036:	bf00      	nop

08014038 <ucdr_init_buffer_origin_offset_endian>:
 8014038:	b410      	push	{r4}
 801403a:	9c01      	ldr	r4, [sp, #4]
 801403c:	440a      	add	r2, r1
 801403e:	6001      	str	r1, [r0, #0]
 8014040:	6042      	str	r2, [r0, #4]
 8014042:	190a      	adds	r2, r1, r4
 8014044:	441c      	add	r4, r3
 8014046:	6082      	str	r2, [r0, #8]
 8014048:	2200      	movs	r2, #0
 801404a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 801404e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8014052:	7542      	strb	r2, [r0, #21]
 8014054:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014058:	7582      	strb	r2, [r0, #22]
 801405a:	7503      	strb	r3, [r0, #20]
 801405c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8014060:	4770      	bx	lr
 8014062:	bf00      	nop

08014064 <ucdr_init_buffer_origin_offset>:
 8014064:	b510      	push	{r4, lr}
 8014066:	b082      	sub	sp, #8
 8014068:	9c04      	ldr	r4, [sp, #16]
 801406a:	9400      	str	r4, [sp, #0]
 801406c:	2401      	movs	r4, #1
 801406e:	9401      	str	r4, [sp, #4]
 8014070:	f7ff ffe2 	bl	8014038 <ucdr_init_buffer_origin_offset_endian>
 8014074:	b002      	add	sp, #8
 8014076:	bd10      	pop	{r4, pc}

08014078 <ucdr_init_buffer_origin>:
 8014078:	b510      	push	{r4, lr}
 801407a:	2400      	movs	r4, #0
 801407c:	b082      	sub	sp, #8
 801407e:	9400      	str	r4, [sp, #0]
 8014080:	f7ff fff0 	bl	8014064 <ucdr_init_buffer_origin_offset>
 8014084:	b002      	add	sp, #8
 8014086:	bd10      	pop	{r4, pc}

08014088 <ucdr_init_buffer>:
 8014088:	2300      	movs	r3, #0
 801408a:	f7ff bff5 	b.w	8014078 <ucdr_init_buffer_origin>
 801408e:	bf00      	nop

08014090 <ucdr_alignment>:
 8014090:	fbb0 f2f1 	udiv	r2, r0, r1
 8014094:	fb02 0011 	mls	r0, r2, r1, r0
 8014098:	1e4b      	subs	r3, r1, #1
 801409a:	1a08      	subs	r0, r1, r0
 801409c:	4018      	ands	r0, r3
 801409e:	4770      	bx	lr

080140a0 <ucdr_buffer_alignment>:
 80140a0:	7d43      	ldrb	r3, [r0, #21]
 80140a2:	428b      	cmp	r3, r1
 80140a4:	d209      	bcs.n	80140ba <ucdr_buffer_alignment+0x1a>
 80140a6:	6903      	ldr	r3, [r0, #16]
 80140a8:	1e4a      	subs	r2, r1, #1
 80140aa:	fbb3 f0f1 	udiv	r0, r3, r1
 80140ae:	fb01 3010 	mls	r0, r1, r0, r3
 80140b2:	1a09      	subs	r1, r1, r0
 80140b4:	ea01 0002 	and.w	r0, r1, r2
 80140b8:	4770      	bx	lr
 80140ba:	2000      	movs	r0, #0
 80140bc:	4770      	bx	lr
 80140be:	bf00      	nop

080140c0 <ucdr_align_to>:
 80140c0:	b538      	push	{r3, r4, r5, lr}
 80140c2:	4604      	mov	r4, r0
 80140c4:	460d      	mov	r5, r1
 80140c6:	f7ff ffeb 	bl	80140a0 <ucdr_buffer_alignment>
 80140ca:	68a3      	ldr	r3, [r4, #8]
 80140cc:	7565      	strb	r5, [r4, #21]
 80140ce:	181a      	adds	r2, r3, r0
 80140d0:	6923      	ldr	r3, [r4, #16]
 80140d2:	4418      	add	r0, r3
 80140d4:	6863      	ldr	r3, [r4, #4]
 80140d6:	4293      	cmp	r3, r2
 80140d8:	6120      	str	r0, [r4, #16]
 80140da:	bf28      	it	cs
 80140dc:	4613      	movcs	r3, r2
 80140de:	60a3      	str	r3, [r4, #8]
 80140e0:	bd38      	pop	{r3, r4, r5, pc}
 80140e2:	bf00      	nop

080140e4 <ucdr_buffer_length>:
 80140e4:	6882      	ldr	r2, [r0, #8]
 80140e6:	6800      	ldr	r0, [r0, #0]
 80140e8:	1a10      	subs	r0, r2, r0
 80140ea:	4770      	bx	lr

080140ec <ucdr_buffer_remaining>:
 80140ec:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80140f0:	1a10      	subs	r0, r2, r0
 80140f2:	4770      	bx	lr

080140f4 <ucdr_check_final_buffer_behavior_array>:
 80140f4:	b538      	push	{r3, r4, r5, lr}
 80140f6:	7d83      	ldrb	r3, [r0, #22]
 80140f8:	b9a3      	cbnz	r3, 8014124 <ucdr_check_final_buffer_behavior_array+0x30>
 80140fa:	4604      	mov	r4, r0
 80140fc:	460d      	mov	r5, r1
 80140fe:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8014102:	429a      	cmp	r2, r3
 8014104:	d300      	bcc.n	8014108 <ucdr_check_final_buffer_behavior_array+0x14>
 8014106:	b931      	cbnz	r1, 8014116 <ucdr_check_final_buffer_behavior_array+0x22>
 8014108:	4620      	mov	r0, r4
 801410a:	f7ff ffef 	bl	80140ec <ucdr_buffer_remaining>
 801410e:	42a8      	cmp	r0, r5
 8014110:	bf28      	it	cs
 8014112:	4628      	movcs	r0, r5
 8014114:	bd38      	pop	{r3, r4, r5, pc}
 8014116:	6983      	ldr	r3, [r0, #24]
 8014118:	b133      	cbz	r3, 8014128 <ucdr_check_final_buffer_behavior_array+0x34>
 801411a:	69c1      	ldr	r1, [r0, #28]
 801411c:	4798      	blx	r3
 801411e:	75a0      	strb	r0, [r4, #22]
 8014120:	2800      	cmp	r0, #0
 8014122:	d0f1      	beq.n	8014108 <ucdr_check_final_buffer_behavior_array+0x14>
 8014124:	2000      	movs	r0, #0
 8014126:	bd38      	pop	{r3, r4, r5, pc}
 8014128:	2301      	movs	r3, #1
 801412a:	7583      	strb	r3, [r0, #22]
 801412c:	e7fa      	b.n	8014124 <ucdr_check_final_buffer_behavior_array+0x30>
 801412e:	bf00      	nop

08014130 <ucdr_advance_buffer>:
 8014130:	b538      	push	{r3, r4, r5, lr}
 8014132:	4604      	mov	r4, r0
 8014134:	460d      	mov	r5, r1
 8014136:	f7ff ff53 	bl	8013fe0 <ucdr_check_buffer_available_for>
 801413a:	b178      	cbz	r0, 801415c <ucdr_advance_buffer+0x2c>
 801413c:	6923      	ldr	r3, [r4, #16]
 801413e:	68a2      	ldr	r2, [r4, #8]
 8014140:	442b      	add	r3, r5
 8014142:	442a      	add	r2, r5
 8014144:	6123      	str	r3, [r4, #16]
 8014146:	2301      	movs	r3, #1
 8014148:	60a2      	str	r2, [r4, #8]
 801414a:	7563      	strb	r3, [r4, #21]
 801414c:	bd38      	pop	{r3, r4, r5, pc}
 801414e:	68a2      	ldr	r2, [r4, #8]
 8014150:	1a2d      	subs	r5, r5, r0
 8014152:	6923      	ldr	r3, [r4, #16]
 8014154:	4402      	add	r2, r0
 8014156:	4418      	add	r0, r3
 8014158:	60a2      	str	r2, [r4, #8]
 801415a:	6120      	str	r0, [r4, #16]
 801415c:	4629      	mov	r1, r5
 801415e:	2201      	movs	r2, #1
 8014160:	4620      	mov	r0, r4
 8014162:	f7ff ffc7 	bl	80140f4 <ucdr_check_final_buffer_behavior_array>
 8014166:	2800      	cmp	r0, #0
 8014168:	d1f1      	bne.n	801414e <ucdr_advance_buffer+0x1e>
 801416a:	2301      	movs	r3, #1
 801416c:	7563      	strb	r3, [r4, #21]
 801416e:	bd38      	pop	{r3, r4, r5, pc}

08014170 <rcl_get_zero_initialized_publisher>:
 8014170:	4b01      	ldr	r3, [pc, #4]	@ (8014178 <rcl_get_zero_initialized_publisher+0x8>)
 8014172:	6818      	ldr	r0, [r3, #0]
 8014174:	4770      	bx	lr
 8014176:	bf00      	nop
 8014178:	080247c8 	.word	0x080247c8

0801417c <rcl_publisher_init>:
 801417c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014180:	b088      	sub	sp, #32
 8014182:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8014184:	2e00      	cmp	r6, #0
 8014186:	d06b      	beq.n	8014260 <rcl_publisher_init+0xe4>
 8014188:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 801418c:	4605      	mov	r5, r0
 801418e:	460f      	mov	r7, r1
 8014190:	4690      	mov	r8, r2
 8014192:	4650      	mov	r0, sl
 8014194:	4699      	mov	r9, r3
 8014196:	f001 f917 	bl	80153c8 <rcutils_allocator_is_valid>
 801419a:	f080 0401 	eor.w	r4, r0, #1
 801419e:	b2e4      	uxtb	r4, r4
 80141a0:	2c00      	cmp	r4, #0
 80141a2:	d15d      	bne.n	8014260 <rcl_publisher_init+0xe4>
 80141a4:	2d00      	cmp	r5, #0
 80141a6:	d05b      	beq.n	8014260 <rcl_publisher_init+0xe4>
 80141a8:	682b      	ldr	r3, [r5, #0]
 80141aa:	b123      	cbz	r3, 80141b6 <rcl_publisher_init+0x3a>
 80141ac:	2464      	movs	r4, #100	@ 0x64
 80141ae:	4620      	mov	r0, r4
 80141b0:	b008      	add	sp, #32
 80141b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141b6:	4638      	mov	r0, r7
 80141b8:	f007 f812 	bl	801b1e0 <rcl_node_is_valid>
 80141bc:	2800      	cmp	r0, #0
 80141be:	d054      	beq.n	801426a <rcl_publisher_init+0xee>
 80141c0:	f1b8 0f00 	cmp.w	r8, #0
 80141c4:	d04c      	beq.n	8014260 <rcl_publisher_init+0xe4>
 80141c6:	fab9 f389 	clz	r3, r9
 80141ca:	095b      	lsrs	r3, r3, #5
 80141cc:	f1b9 0f00 	cmp.w	r9, #0
 80141d0:	d046      	beq.n	8014260 <rcl_publisher_init+0xe4>
 80141d2:	aa07      	add	r2, sp, #28
 80141d4:	9307      	str	r3, [sp, #28]
 80141d6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80141da:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 80141de:	9205      	str	r2, [sp, #20]
 80141e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80141e4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80141e8:	4649      	mov	r1, r9
 80141ea:	4638      	mov	r0, r7
 80141ec:	e89a 000c 	ldmia.w	sl, {r2, r3}
 80141f0:	f007 f84e 	bl	801b290 <rcl_node_resolve_name>
 80141f4:	2800      	cmp	r0, #0
 80141f6:	d14f      	bne.n	8014298 <rcl_publisher_init+0x11c>
 80141f8:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 80141fa:	20c8      	movs	r0, #200	@ 0xc8
 80141fc:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80141fe:	4798      	blx	r3
 8014200:	6028      	str	r0, [r5, #0]
 8014202:	2800      	cmp	r0, #0
 8014204:	d050      	beq.n	80142a8 <rcl_publisher_init+0x12c>
 8014206:	4638      	mov	r0, r7
 8014208:	f007 f80c 	bl	801b224 <rcl_node_get_rmw_handle>
 801420c:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8014210:	4641      	mov	r1, r8
 8014212:	9a07      	ldr	r2, [sp, #28]
 8014214:	9300      	str	r3, [sp, #0]
 8014216:	4633      	mov	r3, r6
 8014218:	682c      	ldr	r4, [r5, #0]
 801421a:	f001 fa23 	bl	8015664 <rmw_create_publisher>
 801421e:	682b      	ldr	r3, [r5, #0]
 8014220:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 8014224:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8014228:	b370      	cbz	r0, 8014288 <rcl_publisher_init+0x10c>
 801422a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 801422e:	f001 fafd 	bl	801582c <rmw_publisher_get_actual_qos>
 8014232:	682b      	ldr	r3, [r5, #0]
 8014234:	4604      	mov	r4, r0
 8014236:	b9d0      	cbnz	r0, 801426e <rcl_publisher_init+0xf2>
 8014238:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 801423c:	4631      	mov	r1, r6
 801423e:	4618      	mov	r0, r3
 8014240:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8014244:	2270      	movs	r2, #112	@ 0x70
 8014246:	f00e f8e2 	bl	802240e <memcpy>
 801424a:	683a      	ldr	r2, [r7, #0]
 801424c:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 8014250:	9807      	ldr	r0, [sp, #28]
 8014252:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8014254:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8014256:	4798      	blx	r3
 8014258:	4620      	mov	r0, r4
 801425a:	b008      	add	sp, #32
 801425c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014260:	240b      	movs	r4, #11
 8014262:	4620      	mov	r0, r4
 8014264:	b008      	add	sp, #32
 8014266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801426a:	24c8      	movs	r4, #200	@ 0xc8
 801426c:	e79f      	b.n	80141ae <rcl_publisher_init+0x32>
 801426e:	b1cb      	cbz	r3, 80142a4 <rcl_publisher_init+0x128>
 8014270:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8014274:	b142      	cbz	r2, 8014288 <rcl_publisher_init+0x10c>
 8014276:	4638      	mov	r0, r7
 8014278:	f006 ffd4 	bl	801b224 <rcl_node_get_rmw_handle>
 801427c:	682b      	ldr	r3, [r5, #0]
 801427e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8014282:	f001 fae7 	bl	8015854 <rmw_destroy_publisher>
 8014286:	682b      	ldr	r3, [r5, #0]
 8014288:	4618      	mov	r0, r3
 801428a:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 801428c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801428e:	2401      	movs	r4, #1
 8014290:	4790      	blx	r2
 8014292:	2300      	movs	r3, #0
 8014294:	602b      	str	r3, [r5, #0]
 8014296:	e7db      	b.n	8014250 <rcl_publisher_init+0xd4>
 8014298:	2867      	cmp	r0, #103	@ 0x67
 801429a:	d007      	beq.n	80142ac <rcl_publisher_init+0x130>
 801429c:	2869      	cmp	r0, #105	@ 0x69
 801429e:	d005      	beq.n	80142ac <rcl_publisher_init+0x130>
 80142a0:	280a      	cmp	r0, #10
 80142a2:	d001      	beq.n	80142a8 <rcl_publisher_init+0x12c>
 80142a4:	2401      	movs	r4, #1
 80142a6:	e7d3      	b.n	8014250 <rcl_publisher_init+0xd4>
 80142a8:	240a      	movs	r4, #10
 80142aa:	e7d1      	b.n	8014250 <rcl_publisher_init+0xd4>
 80142ac:	2467      	movs	r4, #103	@ 0x67
 80142ae:	e7cf      	b.n	8014250 <rcl_publisher_init+0xd4>

080142b0 <rcl_publisher_get_default_options>:
 80142b0:	b570      	push	{r4, r5, r6, lr}
 80142b2:	4d14      	ldr	r5, [pc, #80]	@ (8014304 <rcl_publisher_get_default_options+0x54>)
 80142b4:	b088      	sub	sp, #32
 80142b6:	4604      	mov	r4, r0
 80142b8:	2250      	movs	r2, #80	@ 0x50
 80142ba:	4913      	ldr	r1, [pc, #76]	@ (8014308 <rcl_publisher_get_default_options+0x58>)
 80142bc:	4628      	mov	r0, r5
 80142be:	f00e f8a6 	bl	802240e <memcpy>
 80142c2:	a802      	add	r0, sp, #8
 80142c4:	f001 f872 	bl	80153ac <rcutils_get_default_allocator>
 80142c8:	f10d 0c08 	add.w	ip, sp, #8
 80142cc:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80142d0:	466e      	mov	r6, sp
 80142d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80142d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80142da:	f8dc 3000 	ldr.w	r3, [ip]
 80142de:	4630      	mov	r0, r6
 80142e0:	f8ce 3000 	str.w	r3, [lr]
 80142e4:	f001 f8fc 	bl	80154e0 <rmw_get_default_publisher_options>
 80142e8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80142ec:	2270      	movs	r2, #112	@ 0x70
 80142ee:	e896 0003 	ldmia.w	r6, {r0, r1}
 80142f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80142f6:	4629      	mov	r1, r5
 80142f8:	4620      	mov	r0, r4
 80142fa:	f00e f888 	bl	802240e <memcpy>
 80142fe:	4620      	mov	r0, r4
 8014300:	b008      	add	sp, #32
 8014302:	bd70      	pop	{r4, r5, r6, pc}
 8014304:	24064880 	.word	0x24064880
 8014308:	080247d0 	.word	0x080247d0

0801430c <rcl_publish>:
 801430c:	b1f8      	cbz	r0, 801434e <rcl_publish+0x42>
 801430e:	6803      	ldr	r3, [r0, #0]
 8014310:	b570      	push	{r4, r5, r6, lr}
 8014312:	4604      	mov	r4, r0
 8014314:	b1b3      	cbz	r3, 8014344 <rcl_publish+0x38>
 8014316:	4616      	mov	r6, r2
 8014318:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 801431c:	b192      	cbz	r2, 8014344 <rcl_publish+0x38>
 801431e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8014322:	460d      	mov	r5, r1
 8014324:	f006 fb7c 	bl	801aa20 <rcl_context_is_valid>
 8014328:	b160      	cbz	r0, 8014344 <rcl_publish+0x38>
 801432a:	6823      	ldr	r3, [r4, #0]
 801432c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8014330:	b140      	cbz	r0, 8014344 <rcl_publish+0x38>
 8014332:	b155      	cbz	r5, 801434a <rcl_publish+0x3e>
 8014334:	4632      	mov	r2, r6
 8014336:	4629      	mov	r1, r5
 8014338:	f001 f934 	bl	80155a4 <rmw_publish>
 801433c:	3800      	subs	r0, #0
 801433e:	bf18      	it	ne
 8014340:	2001      	movne	r0, #1
 8014342:	bd70      	pop	{r4, r5, r6, pc}
 8014344:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8014348:	bd70      	pop	{r4, r5, r6, pc}
 801434a:	200b      	movs	r0, #11
 801434c:	bd70      	pop	{r4, r5, r6, pc}
 801434e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8014352:	4770      	bx	lr

08014354 <rcl_publisher_is_valid>:
 8014354:	b1a0      	cbz	r0, 8014380 <rcl_publisher_is_valid+0x2c>
 8014356:	6803      	ldr	r3, [r0, #0]
 8014358:	b510      	push	{r4, lr}
 801435a:	4604      	mov	r4, r0
 801435c:	b173      	cbz	r3, 801437c <rcl_publisher_is_valid+0x28>
 801435e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8014362:	b15a      	cbz	r2, 801437c <rcl_publisher_is_valid+0x28>
 8014364:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8014368:	f006 fb5a 	bl	801aa20 <rcl_context_is_valid>
 801436c:	b130      	cbz	r0, 801437c <rcl_publisher_is_valid+0x28>
 801436e:	6823      	ldr	r3, [r4, #0]
 8014370:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8014374:	3800      	subs	r0, #0
 8014376:	bf18      	it	ne
 8014378:	2001      	movne	r0, #1
 801437a:	bd10      	pop	{r4, pc}
 801437c:	2000      	movs	r0, #0
 801437e:	bd10      	pop	{r4, pc}
 8014380:	2000      	movs	r0, #0
 8014382:	4770      	bx	lr

08014384 <rcl_publisher_is_valid_except_context>:
 8014384:	b130      	cbz	r0, 8014394 <rcl_publisher_is_valid_except_context+0x10>
 8014386:	6800      	ldr	r0, [r0, #0]
 8014388:	b120      	cbz	r0, 8014394 <rcl_publisher_is_valid_except_context+0x10>
 801438a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 801438e:	3800      	subs	r0, #0
 8014390:	bf18      	it	ne
 8014392:	2001      	movne	r0, #1
 8014394:	4770      	bx	lr
 8014396:	bf00      	nop

08014398 <_rclc_check_for_new_data>:
 8014398:	2800      	cmp	r0, #0
 801439a:	d046      	beq.n	801442a <_rclc_check_for_new_data+0x92>
 801439c:	4603      	mov	r3, r0
 801439e:	b530      	push	{r4, r5, lr}
 80143a0:	7802      	ldrb	r2, [r0, #0]
 80143a2:	b085      	sub	sp, #20
 80143a4:	2a0a      	cmp	r2, #10
 80143a6:	d842      	bhi.n	801442e <_rclc_check_for_new_data+0x96>
 80143a8:	e8df f002 	tbb	[pc, r2]
 80143ac:	14181212 	.word	0x14181212
 80143b0:	06060614 	.word	0x06060614
 80143b4:	2e1a      	.short	0x2e1a
 80143b6:	16          	.byte	0x16
 80143b7:	00          	.byte	0x00
 80143b8:	6a0a      	ldr	r2, [r1, #32]
 80143ba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80143bc:	2000      	movs	r0, #0
 80143be:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80143c2:	1a12      	subs	r2, r2, r0
 80143c4:	bf18      	it	ne
 80143c6:	2201      	movne	r2, #1
 80143c8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80143cc:	b005      	add	sp, #20
 80143ce:	bd30      	pop	{r4, r5, pc}
 80143d0:	680a      	ldr	r2, [r1, #0]
 80143d2:	e7f2      	b.n	80143ba <_rclc_check_for_new_data+0x22>
 80143d4:	698a      	ldr	r2, [r1, #24]
 80143d6:	e7f0      	b.n	80143ba <_rclc_check_for_new_data+0x22>
 80143d8:	688a      	ldr	r2, [r1, #8]
 80143da:	e7ee      	b.n	80143ba <_rclc_check_for_new_data+0x22>
 80143dc:	690a      	ldr	r2, [r1, #16]
 80143de:	e7ec      	b.n	80143ba <_rclc_check_for_new_data+0x22>
 80143e0:	685c      	ldr	r4, [r3, #4]
 80143e2:	4608      	mov	r0, r1
 80143e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80143e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80143ec:	f104 0542 	add.w	r5, r4, #66	@ 0x42
 80143f0:	f104 0110 	add.w	r1, r4, #16
 80143f4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80143f8:	9500      	str	r5, [sp, #0]
 80143fa:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 80143fe:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 8014402:	f008 ff3d 	bl	801d280 <rcl_action_client_wait_set_get_entities_ready>
 8014406:	e7e1      	b.n	80143cc <_rclc_check_for_new_data+0x34>
 8014408:	685c      	ldr	r4, [r3, #4]
 801440a:	4608      	mov	r0, r1
 801440c:	f104 0222 	add.w	r2, r4, #34	@ 0x22
 8014410:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 8014414:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8014418:	e9cd 2100 	strd	r2, r1, [sp]
 801441c:	f104 0220 	add.w	r2, r4, #32
 8014420:	f104 0110 	add.w	r1, r4, #16
 8014424:	f009 f946 	bl	801d6b4 <rcl_action_server_wait_set_get_entities_ready>
 8014428:	e7d0      	b.n	80143cc <_rclc_check_for_new_data+0x34>
 801442a:	200b      	movs	r0, #11
 801442c:	4770      	bx	lr
 801442e:	2001      	movs	r0, #1
 8014430:	e7cc      	b.n	80143cc <_rclc_check_for_new_data+0x34>
 8014432:	bf00      	nop

08014434 <_rclc_take_new_data>:
 8014434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014436:	b09b      	sub	sp, #108	@ 0x6c
 8014438:	2800      	cmp	r0, #0
 801443a:	f000 8088 	beq.w	801454e <_rclc_take_new_data+0x11a>
 801443e:	7803      	ldrb	r3, [r0, #0]
 8014440:	4604      	mov	r4, r0
 8014442:	2b0a      	cmp	r3, #10
 8014444:	f200 8167 	bhi.w	8014716 <_rclc_take_new_data+0x2e2>
 8014448:	e8df f003 	tbb	[pc, r3]
 801444c:	44152d2d 	.word	0x44152d2d
 8014450:	19191944 	.word	0x19191944
 8014454:	065a      	.short	0x065a
 8014456:	15          	.byte	0x15
 8014457:	00          	.byte	0x00
 8014458:	6840      	ldr	r0, [r0, #4]
 801445a:	f890 3020 	ldrb.w	r3, [r0, #32]
 801445e:	2b00      	cmp	r3, #0
 8014460:	f040 80b2 	bne.w	80145c8 <_rclc_take_new_data+0x194>
 8014464:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8014468:	2b00      	cmp	r3, #0
 801446a:	f040 80e4 	bne.w	8014636 <_rclc_take_new_data+0x202>
 801446e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8014472:	2b00      	cmp	r3, #0
 8014474:	d16f      	bne.n	8014556 <_rclc_take_new_data+0x122>
 8014476:	2500      	movs	r5, #0
 8014478:	4628      	mov	r0, r5
 801447a:	b01b      	add	sp, #108	@ 0x6c
 801447c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801447e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8014480:	6a0b      	ldr	r3, [r1, #32]
 8014482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d0f5      	beq.n	8014476 <_rclc_take_new_data+0x42>
 801448a:	6882      	ldr	r2, [r0, #8]
 801448c:	f100 0110 	add.w	r1, r0, #16
 8014490:	6840      	ldr	r0, [r0, #4]
 8014492:	f007 f993 	bl	801b7bc <rcl_take_request>
 8014496:	4605      	mov	r5, r0
 8014498:	2800      	cmp	r0, #0
 801449a:	d0ec      	beq.n	8014476 <_rclc_take_new_data+0x42>
 801449c:	f240 2359 	movw	r3, #601	@ 0x259
 80144a0:	4298      	cmp	r0, r3
 80144a2:	d013      	beq.n	80144cc <_rclc_take_new_data+0x98>
 80144a4:	e029      	b.n	80144fa <_rclc_take_new_data+0xc6>
 80144a6:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80144a8:	680b      	ldr	r3, [r1, #0]
 80144aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d0e1      	beq.n	8014476 <_rclc_take_new_data+0x42>
 80144b2:	2300      	movs	r3, #0
 80144b4:	aa0a      	add	r2, sp, #40	@ 0x28
 80144b6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 80144ba:	f007 fac3 	bl	801ba44 <rcl_take>
 80144be:	4605      	mov	r5, r0
 80144c0:	2800      	cmp	r0, #0
 80144c2:	d0d9      	beq.n	8014478 <_rclc_take_new_data+0x44>
 80144c4:	f240 1391 	movw	r3, #401	@ 0x191
 80144c8:	4298      	cmp	r0, r3
 80144ca:	d116      	bne.n	80144fa <_rclc_take_new_data+0xc6>
 80144cc:	2300      	movs	r3, #0
 80144ce:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 80144d2:	e7d1      	b.n	8014478 <_rclc_take_new_data+0x44>
 80144d4:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80144d6:	698b      	ldr	r3, [r1, #24]
 80144d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d0ca      	beq.n	8014476 <_rclc_take_new_data+0x42>
 80144e0:	6882      	ldr	r2, [r0, #8]
 80144e2:	f100 0110 	add.w	r1, r0, #16
 80144e6:	6840      	ldr	r0, [r0, #4]
 80144e8:	f006 fa2a 	bl	801a940 <rcl_take_response>
 80144ec:	4605      	mov	r5, r0
 80144ee:	2800      	cmp	r0, #0
 80144f0:	d0c1      	beq.n	8014476 <_rclc_take_new_data+0x42>
 80144f2:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80144f6:	4298      	cmp	r0, r3
 80144f8:	d0be      	beq.n	8014478 <_rclc_take_new_data+0x44>
 80144fa:	f000 ff89 	bl	8015410 <rcutils_reset_error>
 80144fe:	e7bb      	b.n	8014478 <_rclc_take_new_data+0x44>
 8014500:	6840      	ldr	r0, [r0, #4]
 8014502:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8014506:	2b00      	cmp	r3, #0
 8014508:	d17d      	bne.n	8014606 <_rclc_take_new_data+0x1d2>
 801450a:	69c3      	ldr	r3, [r0, #28]
 801450c:	b11b      	cbz	r3, 8014516 <_rclc_take_new_data+0xe2>
 801450e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8014512:	2b00      	cmp	r3, #0
 8014514:	d144      	bne.n	80145a0 <_rclc_take_new_data+0x16c>
 8014516:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 801451a:	2b00      	cmp	r3, #0
 801451c:	f040 80ac 	bne.w	8014678 <_rclc_take_new_data+0x244>
 8014520:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8014524:	2b00      	cmp	r3, #0
 8014526:	d0a6      	beq.n	8014476 <_rclc_take_new_data+0x42>
 8014528:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801452a:	a90a      	add	r1, sp, #40	@ 0x28
 801452c:	3010      	adds	r0, #16
 801452e:	f008 fd7f 	bl	801d030 <rcl_action_take_result_response>
 8014532:	4605      	mov	r5, r0
 8014534:	2800      	cmp	r0, #0
 8014536:	d1e0      	bne.n	80144fa <_rclc_take_new_data+0xc6>
 8014538:	6860      	ldr	r0, [r4, #4]
 801453a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801453e:	f009 f9e9 	bl	801d914 <rclc_action_find_handle_by_result_request_sequence_number>
 8014542:	2800      	cmp	r0, #0
 8014544:	d098      	beq.n	8014478 <_rclc_take_new_data+0x44>
 8014546:	2301      	movs	r3, #1
 8014548:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 801454c:	e794      	b.n	8014478 <_rclc_take_new_data+0x44>
 801454e:	250b      	movs	r5, #11
 8014550:	4628      	mov	r0, r5
 8014552:	b01b      	add	sp, #108	@ 0x6c
 8014554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014556:	ae04      	add	r6, sp, #16
 8014558:	3010      	adds	r0, #16
 801455a:	aa0a      	add	r2, sp, #40	@ 0x28
 801455c:	4631      	mov	r1, r6
 801455e:	f008 ffdd 	bl	801d51c <rcl_action_take_cancel_request>
 8014562:	4605      	mov	r5, r0
 8014564:	2800      	cmp	r0, #0
 8014566:	d1c8      	bne.n	80144fa <_rclc_take_new_data+0xc6>
 8014568:	a90a      	add	r1, sp, #40	@ 0x28
 801456a:	6860      	ldr	r0, [r4, #4]
 801456c:	f009 f992 	bl	801d894 <rclc_action_find_goal_handle_by_uuid>
 8014570:	4607      	mov	r7, r0
 8014572:	2800      	cmp	r0, #0
 8014574:	f000 80bb 	beq.w	80146ee <_rclc_take_new_data+0x2ba>
 8014578:	2101      	movs	r1, #1
 801457a:	f990 0008 	ldrsb.w	r0, [r0, #8]
 801457e:	f009 f913 	bl	801d7a8 <rcl_action_transition_goal_state>
 8014582:	2803      	cmp	r0, #3
 8014584:	4684      	mov	ip, r0
 8014586:	f040 80a7 	bne.w	80146d8 <_rclc_take_new_data+0x2a4>
 801458a:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 801458e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014592:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014596:	e884 0003 	stmia.w	r4, {r0, r1}
 801459a:	f887 c008 	strb.w	ip, [r7, #8]
 801459e:	e76b      	b.n	8014478 <_rclc_take_new_data+0x44>
 80145a0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80145a2:	3010      	adds	r0, #16
 80145a4:	f008 fdc4 	bl	801d130 <rcl_action_take_feedback>
 80145a8:	4605      	mov	r5, r0
 80145aa:	2800      	cmp	r0, #0
 80145ac:	d1a5      	bne.n	80144fa <_rclc_take_new_data+0xc6>
 80145ae:	6860      	ldr	r0, [r4, #4]
 80145b0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80145b2:	f009 f96f 	bl	801d894 <rclc_action_find_goal_handle_by_uuid>
 80145b6:	4603      	mov	r3, r0
 80145b8:	2800      	cmp	r0, #0
 80145ba:	f000 80a3 	beq.w	8014704 <_rclc_take_new_data+0x2d0>
 80145be:	2201      	movs	r2, #1
 80145c0:	6860      	ldr	r0, [r4, #4]
 80145c2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80145c6:	e7a6      	b.n	8014516 <_rclc_take_new_data+0xe2>
 80145c8:	f009 f93e 	bl	801d848 <rclc_action_take_goal_handle>
 80145cc:	4606      	mov	r6, r0
 80145ce:	6860      	ldr	r0, [r4, #4]
 80145d0:	2e00      	cmp	r6, #0
 80145d2:	f43f af47 	beq.w	8014464 <_rclc_take_new_data+0x30>
 80145d6:	6070      	str	r0, [r6, #4]
 80145d8:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 80145dc:	69f2      	ldr	r2, [r6, #28]
 80145de:	3010      	adds	r0, #16
 80145e0:	f008 fee4 	bl	801d3ac <rcl_action_take_goal_request>
 80145e4:	4605      	mov	r5, r0
 80145e6:	2800      	cmp	r0, #0
 80145e8:	f040 808e 	bne.w	8014708 <_rclc_take_new_data+0x2d4>
 80145ec:	69f7      	ldr	r7, [r6, #28]
 80145ee:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80145f0:	7235      	strb	r5, [r6, #8]
 80145f2:	f8c6 0009 	str.w	r0, [r6, #9]
 80145f6:	f8c6 100d 	str.w	r1, [r6, #13]
 80145fa:	6860      	ldr	r0, [r4, #4]
 80145fc:	f8c6 2011 	str.w	r2, [r6, #17]
 8014600:	f8c6 3015 	str.w	r3, [r6, #21]
 8014604:	e72e      	b.n	8014464 <_rclc_take_new_data+0x30>
 8014606:	aa04      	add	r2, sp, #16
 8014608:	a90a      	add	r1, sp, #40	@ 0x28
 801460a:	3010      	adds	r0, #16
 801460c:	f008 fc98 	bl	801cf40 <rcl_action_take_goal_response>
 8014610:	4605      	mov	r5, r0
 8014612:	2800      	cmp	r0, #0
 8014614:	f47f af71 	bne.w	80144fa <_rclc_take_new_data+0xc6>
 8014618:	6860      	ldr	r0, [r4, #4]
 801461a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801461e:	f009 f967 	bl	801d8f0 <rclc_action_find_handle_by_goal_request_sequence_number>
 8014622:	b130      	cbz	r0, 8014632 <_rclc_take_new_data+0x1fe>
 8014624:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8014628:	2201      	movs	r2, #1
 801462a:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 801462e:	f880 2020 	strb.w	r2, [r0, #32]
 8014632:	6860      	ldr	r0, [r4, #4]
 8014634:	e769      	b.n	801450a <_rclc_take_new_data+0xd6>
 8014636:	3010      	adds	r0, #16
 8014638:	aa04      	add	r2, sp, #16
 801463a:	a90a      	add	r1, sp, #40	@ 0x28
 801463c:	f008 ff2e 	bl	801d49c <rcl_action_take_result_request>
 8014640:	4605      	mov	r5, r0
 8014642:	2800      	cmp	r0, #0
 8014644:	f47f af59 	bne.w	80144fa <_rclc_take_new_data+0xc6>
 8014648:	a904      	add	r1, sp, #16
 801464a:	6860      	ldr	r0, [r4, #4]
 801464c:	f009 f922 	bl	801d894 <rclc_action_find_goal_handle_by_uuid>
 8014650:	4607      	mov	r7, r0
 8014652:	b160      	cbz	r0, 801466e <_rclc_take_new_data+0x23a>
 8014654:	ad0a      	add	r5, sp, #40	@ 0x28
 8014656:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 801465a:	f04f 0c02 	mov.w	ip, #2
 801465e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014660:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014662:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014666:	e886 0003 	stmia.w	r6, {r0, r1}
 801466a:	f887 c008 	strb.w	ip, [r7, #8]
 801466e:	6860      	ldr	r0, [r4, #4]
 8014670:	2300      	movs	r3, #0
 8014672:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8014676:	e6fa      	b.n	801446e <_rclc_take_new_data+0x3a>
 8014678:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 801467c:	a90a      	add	r1, sp, #40	@ 0x28
 801467e:	3010      	adds	r0, #16
 8014680:	f008 fd16 	bl	801d0b0 <rcl_action_take_cancel_response>
 8014684:	4605      	mov	r5, r0
 8014686:	2800      	cmp	r0, #0
 8014688:	f47f af37 	bne.w	80144fa <_rclc_take_new_data+0xc6>
 801468c:	6860      	ldr	r0, [r4, #4]
 801468e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8014692:	f009 f951 	bl	801d938 <rclc_action_find_handle_by_cancel_request_sequence_number>
 8014696:	4606      	mov	r6, r0
 8014698:	6860      	ldr	r0, [r4, #4]
 801469a:	2e00      	cmp	r6, #0
 801469c:	f43f af40 	beq.w	8014520 <_rclc_take_new_data+0xec>
 80146a0:	2701      	movs	r7, #1
 80146a2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80146a4:	84b7      	strh	r7, [r6, #36]	@ 0x24
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	f43f af3a 	beq.w	8014520 <_rclc_take_new_data+0xec>
 80146ac:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80146ae:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80146b2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80146b6:	f009 f8ed 	bl	801d894 <rclc_action_find_goal_handle_by_uuid>
 80146ba:	b138      	cbz	r0, 80146cc <_rclc_take_new_data+0x298>
 80146bc:	6860      	ldr	r0, [r4, #4]
 80146be:	3501      	adds	r5, #1
 80146c0:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 80146c4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80146c6:	42ab      	cmp	r3, r5
 80146c8:	d8f0      	bhi.n	80146ac <_rclc_take_new_data+0x278>
 80146ca:	e729      	b.n	8014520 <_rclc_take_new_data+0xec>
 80146cc:	6860      	ldr	r0, [r4, #4]
 80146ce:	3501      	adds	r5, #1
 80146d0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80146d2:	42ab      	cmp	r3, r5
 80146d4:	d8ea      	bhi.n	80146ac <_rclc_take_new_data+0x278>
 80146d6:	e723      	b.n	8014520 <_rclc_take_new_data+0xec>
 80146d8:	ab06      	add	r3, sp, #24
 80146da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80146dc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80146e0:	2103      	movs	r1, #3
 80146e2:	6860      	ldr	r0, [r4, #4]
 80146e4:	e896 000c 	ldmia.w	r6, {r2, r3}
 80146e8:	f009 f99a 	bl	801da20 <rclc_action_server_goal_cancel_reject>
 80146ec:	e6c4      	b.n	8014478 <_rclc_take_new_data+0x44>
 80146ee:	ab06      	add	r3, sp, #24
 80146f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80146f2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80146f6:	2102      	movs	r1, #2
 80146f8:	6860      	ldr	r0, [r4, #4]
 80146fa:	e896 000c 	ldmia.w	r6, {r2, r3}
 80146fe:	f009 f98f 	bl	801da20 <rclc_action_server_goal_cancel_reject>
 8014702:	e6b9      	b.n	8014478 <_rclc_take_new_data+0x44>
 8014704:	6860      	ldr	r0, [r4, #4]
 8014706:	e706      	b.n	8014516 <_rclc_take_new_data+0xe2>
 8014708:	4631      	mov	r1, r6
 801470a:	6860      	ldr	r0, [r4, #4]
 801470c:	f009 f8ac 	bl	801d868 <rclc_action_remove_used_goal_handle>
 8014710:	f000 fe7e 	bl	8015410 <rcutils_reset_error>
 8014714:	e6b0      	b.n	8014478 <_rclc_take_new_data+0x44>
 8014716:	2501      	movs	r5, #1
 8014718:	e6ae      	b.n	8014478 <_rclc_take_new_data+0x44>
 801471a:	bf00      	nop

0801471c <_rclc_execute.part.0>:
 801471c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801471e:	7803      	ldrb	r3, [r0, #0]
 8014720:	b085      	sub	sp, #20
 8014722:	4604      	mov	r4, r0
 8014724:	2b0a      	cmp	r3, #10
 8014726:	f200 8139 	bhi.w	801499c <_rclc_execute.part.0+0x280>
 801472a:	e8df f003 	tbb	[pc, r3]
 801472e:	4268      	.short	0x4268
 8014730:	06a75b4d 	.word	0x06a75b4d
 8014734:	721d0606 	.word	0x721d0606
 8014738:	62          	.byte	0x62
 8014739:	00          	.byte	0x00
 801473a:	2b06      	cmp	r3, #6
 801473c:	f000 8126 	beq.w	801498c <_rclc_execute.part.0+0x270>
 8014740:	2b07      	cmp	r3, #7
 8014742:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014744:	f040 811c 	bne.w	8014980 <_rclc_execute.part.0+0x264>
 8014748:	f104 0510 	add.w	r5, r4, #16
 801474c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 8014750:	6880      	ldr	r0, [r0, #8]
 8014752:	4798      	blx	r3
 8014754:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8014756:	4629      	mov	r1, r5
 8014758:	6860      	ldr	r0, [r4, #4]
 801475a:	f007 f86f 	bl	801b83c <rcl_send_response>
 801475e:	4604      	mov	r4, r0
 8014760:	b378      	cbz	r0, 80147c2 <_rclc_execute.part.0+0xa6>
 8014762:	f000 fe55 	bl	8015410 <rcutils_reset_error>
 8014766:	e02c      	b.n	80147c2 <_rclc_execute.part.0+0xa6>
 8014768:	6840      	ldr	r0, [r0, #4]
 801476a:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 801476e:	2b00      	cmp	r3, #0
 8014770:	f000 808e 	beq.w	8014890 <_rclc_execute.part.0+0x174>
 8014774:	2600      	movs	r6, #0
 8014776:	2701      	movs	r7, #1
 8014778:	e004      	b.n	8014784 <_rclc_execute.part.0+0x68>
 801477a:	f009 f83f 	bl	801d7fc <rclc_action_send_result_request>
 801477e:	b998      	cbnz	r0, 80147a8 <_rclc_execute.part.0+0x8c>
 8014780:	722f      	strb	r7, [r5, #8]
 8014782:	6860      	ldr	r0, [r4, #4]
 8014784:	f009 f8ea 	bl	801d95c <rclc_action_find_first_handle_with_goal_response>
 8014788:	4605      	mov	r5, r0
 801478a:	2800      	cmp	r0, #0
 801478c:	d07f      	beq.n	801488e <_rclc_execute.part.0+0x172>
 801478e:	6863      	ldr	r3, [r4, #4]
 8014790:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014792:	699b      	ldr	r3, [r3, #24]
 8014794:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8014798:	f885 6020 	strb.w	r6, [r5, #32]
 801479c:	4798      	blx	r3
 801479e:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 80147a2:	4628      	mov	r0, r5
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d1e8      	bne.n	801477a <_rclc_execute.part.0+0x5e>
 80147a8:	6860      	ldr	r0, [r4, #4]
 80147aa:	4629      	mov	r1, r5
 80147ac:	f009 f85c 	bl	801d868 <rclc_action_remove_used_goal_handle>
 80147b0:	e7e7      	b.n	8014782 <_rclc_execute.part.0+0x66>
 80147b2:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 80147b6:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 80147ba:	b100      	cbz	r0, 80147be <_rclc_execute.part.0+0xa2>
 80147bc:	68a0      	ldr	r0, [r4, #8]
 80147be:	2400      	movs	r4, #0
 80147c0:	4798      	blx	r3
 80147c2:	4620      	mov	r0, r4
 80147c4:	b005      	add	sp, #20
 80147c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147c8:	6840      	ldr	r0, [r0, #4]
 80147ca:	f007 fc6f 	bl	801c0ac <rcl_timer_call>
 80147ce:	f240 3321 	movw	r3, #801	@ 0x321
 80147d2:	4604      	mov	r4, r0
 80147d4:	4298      	cmp	r0, r3
 80147d6:	d001      	beq.n	80147dc <_rclc_execute.part.0+0xc0>
 80147d8:	2800      	cmp	r0, #0
 80147da:	d1c2      	bne.n	8014762 <_rclc_execute.part.0+0x46>
 80147dc:	2400      	movs	r4, #0
 80147de:	4620      	mov	r0, r4
 80147e0:	b005      	add	sp, #20
 80147e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147e4:	2400      	movs	r4, #0
 80147e6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80147e8:	6880      	ldr	r0, [r0, #8]
 80147ea:	4798      	blx	r3
 80147ec:	4620      	mov	r0, r4
 80147ee:	b005      	add	sp, #20
 80147f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147f2:	2400      	movs	r4, #0
 80147f4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80147f6:	4798      	blx	r3
 80147f8:	4620      	mov	r0, r4
 80147fa:	b005      	add	sp, #20
 80147fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147fe:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8014802:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014804:	b100      	cbz	r0, 8014808 <_rclc_execute.part.0+0xec>
 8014806:	68a0      	ldr	r0, [r4, #8]
 8014808:	2400      	movs	r4, #0
 801480a:	4798      	blx	r3
 801480c:	4620      	mov	r0, r4
 801480e:	b005      	add	sp, #20
 8014810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014812:	6840      	ldr	r0, [r0, #4]
 8014814:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8014818:	bb3b      	cbnz	r3, 801486a <_rclc_execute.part.0+0x14e>
 801481a:	f890 3020 	ldrb.w	r3, [r0, #32]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d07d      	beq.n	801491e <_rclc_execute.part.0+0x202>
 8014822:	f640 0634 	movw	r6, #2100	@ 0x834
 8014826:	2701      	movs	r7, #1
 8014828:	e007      	b.n	801483a <_rclc_execute.part.0+0x11e>
 801482a:	4628      	mov	r0, r5
 801482c:	f009 f8ae 	bl	801d98c <rclc_action_server_response_goal_request>
 8014830:	4629      	mov	r1, r5
 8014832:	6860      	ldr	r0, [r4, #4]
 8014834:	f009 f818 	bl	801d868 <rclc_action_remove_used_goal_handle>
 8014838:	6860      	ldr	r0, [r4, #4]
 801483a:	2100      	movs	r1, #0
 801483c:	f009 f840 	bl	801d8c0 <rclc_action_find_first_handle_by_status>
 8014840:	4605      	mov	r5, r0
 8014842:	2800      	cmp	r0, #0
 8014844:	d068      	beq.n	8014918 <_rclc_execute.part.0+0x1fc>
 8014846:	6863      	ldr	r3, [r4, #4]
 8014848:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801484a:	699b      	ldr	r3, [r3, #24]
 801484c:	4798      	blx	r3
 801484e:	42b0      	cmp	r0, r6
 8014850:	f04f 0100 	mov.w	r1, #0
 8014854:	d1e9      	bne.n	801482a <_rclc_execute.part.0+0x10e>
 8014856:	2101      	movs	r1, #1
 8014858:	4628      	mov	r0, r5
 801485a:	f009 f897 	bl	801d98c <rclc_action_server_response_goal_request>
 801485e:	722f      	strb	r7, [r5, #8]
 8014860:	e7ea      	b.n	8014838 <_rclc_execute.part.0+0x11c>
 8014862:	6848      	ldr	r0, [r1, #4]
 8014864:	f009 f800 	bl	801d868 <rclc_action_remove_used_goal_handle>
 8014868:	6860      	ldr	r0, [r4, #4]
 801486a:	f009 f835 	bl	801d8d8 <rclc_action_find_first_terminated_handle>
 801486e:	4601      	mov	r1, r0
 8014870:	2800      	cmp	r0, #0
 8014872:	d1f6      	bne.n	8014862 <_rclc_execute.part.0+0x146>
 8014874:	6860      	ldr	r0, [r4, #4]
 8014876:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 801487a:	e7ce      	b.n	801481a <_rclc_execute.part.0+0xfe>
 801487c:	2400      	movs	r4, #0
 801487e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014880:	f100 0110 	add.w	r1, r0, #16
 8014884:	6880      	ldr	r0, [r0, #8]
 8014886:	4798      	blx	r3
 8014888:	4620      	mov	r0, r4
 801488a:	b005      	add	sp, #20
 801488c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801488e:	6860      	ldr	r0, [r4, #4]
 8014890:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8014894:	b18b      	cbz	r3, 80148ba <_rclc_execute.part.0+0x19e>
 8014896:	68c5      	ldr	r5, [r0, #12]
 8014898:	b32d      	cbz	r5, 80148e6 <_rclc_execute.part.0+0x1ca>
 801489a:	2600      	movs	r6, #0
 801489c:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 80148a0:	b143      	cbz	r3, 80148b4 <_rclc_execute.part.0+0x198>
 80148a2:	69c3      	ldr	r3, [r0, #28]
 80148a4:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 80148a8:	b123      	cbz	r3, 80148b4 <_rclc_execute.part.0+0x198>
 80148aa:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80148ac:	4628      	mov	r0, r5
 80148ae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80148b0:	4798      	blx	r3
 80148b2:	6860      	ldr	r0, [r4, #4]
 80148b4:	682d      	ldr	r5, [r5, #0]
 80148b6:	2d00      	cmp	r5, #0
 80148b8:	d1f0      	bne.n	801489c <_rclc_execute.part.0+0x180>
 80148ba:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80148be:	b193      	cbz	r3, 80148e6 <_rclc_execute.part.0+0x1ca>
 80148c0:	68c5      	ldr	r5, [r0, #12]
 80148c2:	b185      	cbz	r5, 80148e6 <_rclc_execute.part.0+0x1ca>
 80148c4:	2600      	movs	r6, #0
 80148c6:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 80148ca:	b14b      	cbz	r3, 80148e0 <_rclc_execute.part.0+0x1c4>
 80148cc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80148ce:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 80148d2:	b12b      	cbz	r3, 80148e0 <_rclc_execute.part.0+0x1c4>
 80148d4:	4628      	mov	r0, r5
 80148d6:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 80148da:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80148dc:	4798      	blx	r3
 80148de:	6860      	ldr	r0, [r4, #4]
 80148e0:	682d      	ldr	r5, [r5, #0]
 80148e2:	2d00      	cmp	r5, #0
 80148e4:	d1ef      	bne.n	80148c6 <_rclc_execute.part.0+0x1aa>
 80148e6:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	f43f af76 	beq.w	80147dc <_rclc_execute.part.0+0xc0>
 80148f0:	2700      	movs	r7, #0
 80148f2:	e00b      	b.n	801490c <_rclc_execute.part.0+0x1f0>
 80148f4:	6863      	ldr	r3, [r4, #4]
 80148f6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80148f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80148fa:	6a1e      	ldr	r6, [r3, #32]
 80148fc:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8014900:	47b0      	blx	r6
 8014902:	6860      	ldr	r0, [r4, #4]
 8014904:	4629      	mov	r1, r5
 8014906:	f008 ffaf 	bl	801d868 <rclc_action_remove_used_goal_handle>
 801490a:	6860      	ldr	r0, [r4, #4]
 801490c:	f009 f832 	bl	801d974 <rclc_action_find_first_handle_with_result_response>
 8014910:	4605      	mov	r5, r0
 8014912:	2800      	cmp	r0, #0
 8014914:	d1ee      	bne.n	80148f4 <_rclc_execute.part.0+0x1d8>
 8014916:	e761      	b.n	80147dc <_rclc_execute.part.0+0xc0>
 8014918:	6860      	ldr	r0, [r4, #4]
 801491a:	f880 5020 	strb.w	r5, [r0, #32]
 801491e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8014922:	2b00      	cmp	r3, #0
 8014924:	f43f af5a 	beq.w	80147dc <_rclc_execute.part.0+0xc0>
 8014928:	68c5      	ldr	r5, [r0, #12]
 801492a:	b1b5      	cbz	r5, 801495a <_rclc_execute.part.0+0x23e>
 801492c:	2602      	movs	r6, #2
 801492e:	e001      	b.n	8014934 <_rclc_execute.part.0+0x218>
 8014930:	682d      	ldr	r5, [r5, #0]
 8014932:	b195      	cbz	r5, 801495a <_rclc_execute.part.0+0x23e>
 8014934:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8014938:	2b03      	cmp	r3, #3
 801493a:	d1f9      	bne.n	8014930 <_rclc_execute.part.0+0x214>
 801493c:	69c3      	ldr	r3, [r0, #28]
 801493e:	4628      	mov	r0, r5
 8014940:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014942:	4798      	blx	r3
 8014944:	4603      	mov	r3, r0
 8014946:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 801494a:	4628      	mov	r0, r5
 801494c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8014950:	b143      	cbz	r3, 8014964 <_rclc_execute.part.0+0x248>
 8014952:	f009 f839 	bl	801d9c8 <rclc_action_server_goal_cancel_accept>
 8014956:	6860      	ldr	r0, [r4, #4]
 8014958:	e7ea      	b.n	8014930 <_rclc_execute.part.0+0x214>
 801495a:	2300      	movs	r3, #0
 801495c:	461c      	mov	r4, r3
 801495e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8014962:	e72e      	b.n	80147c2 <_rclc_execute.part.0+0xa6>
 8014964:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8014966:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 801496a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801496e:	2101      	movs	r1, #1
 8014970:	6860      	ldr	r0, [r4, #4]
 8014972:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014976:	f009 f853 	bl	801da20 <rclc_action_server_goal_cancel_reject>
 801497a:	722e      	strb	r6, [r5, #8]
 801497c:	6860      	ldr	r0, [r4, #4]
 801497e:	e7d7      	b.n	8014930 <_rclc_execute.part.0+0x214>
 8014980:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8014982:	f104 0510 	add.w	r5, r4, #16
 8014986:	6880      	ldr	r0, [r0, #8]
 8014988:	4798      	blx	r3
 801498a:	e6e3      	b.n	8014754 <_rclc_execute.part.0+0x38>
 801498c:	f100 0510 	add.w	r5, r0, #16
 8014990:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014992:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8014994:	4629      	mov	r1, r5
 8014996:	6880      	ldr	r0, [r0, #8]
 8014998:	4798      	blx	r3
 801499a:	e6db      	b.n	8014754 <_rclc_execute.part.0+0x38>
 801499c:	2401      	movs	r4, #1
 801499e:	e710      	b.n	80147c2 <_rclc_execute.part.0+0xa6>

080149a0 <rclc_executor_trigger_any>:
 80149a0:	2800      	cmp	r0, #0
 80149a2:	d03d      	beq.n	8014a20 <rclc_executor_trigger_any+0x80>
 80149a4:	2900      	cmp	r1, #0
 80149a6:	d03c      	beq.n	8014a22 <rclc_executor_trigger_any+0x82>
 80149a8:	4603      	mov	r3, r0
 80149aa:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 80149ae:	2200      	movs	r2, #0
 80149b0:	2800      	cmp	r0, #0
 80149b2:	d035      	beq.n	8014a20 <rclc_executor_trigger_any+0x80>
 80149b4:	b430      	push	{r4, r5}
 80149b6:	f893 c000 	ldrb.w	ip, [r3]
 80149ba:	f1bc 0f08 	cmp.w	ip, #8
 80149be:	d11d      	bne.n	80149fc <rclc_executor_trigger_any+0x5c>
 80149c0:	685c      	ldr	r4, [r3, #4]
 80149c2:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 80149c4:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 80149c8:	d105      	bne.n	80149d6 <rclc_executor_trigger_any+0x36>
 80149ca:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 80149ce:	b910      	cbnz	r0, 80149d6 <rclc_executor_trigger_any+0x36>
 80149d0:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 80149d4:	b128      	cbz	r0, 80149e2 <rclc_executor_trigger_any+0x42>
 80149d6:	bc30      	pop	{r4, r5}
 80149d8:	4770      	bx	lr
 80149da:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 80149de:	2800      	cmp	r0, #0
 80149e0:	d1f9      	bne.n	80149d6 <rclc_executor_trigger_any+0x36>
 80149e2:	3201      	adds	r2, #1
 80149e4:	3340      	adds	r3, #64	@ 0x40
 80149e6:	4291      	cmp	r1, r2
 80149e8:	d017      	beq.n	8014a1a <rclc_executor_trigger_any+0x7a>
 80149ea:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 80149ee:	2800      	cmp	r0, #0
 80149f0:	d0f1      	beq.n	80149d6 <rclc_executor_trigger_any+0x36>
 80149f2:	f893 c000 	ldrb.w	ip, [r3]
 80149f6:	f1bc 0f08 	cmp.w	ip, #8
 80149fa:	d0e1      	beq.n	80149c0 <rclc_executor_trigger_any+0x20>
 80149fc:	f1bc 0f09 	cmp.w	ip, #9
 8014a00:	d1eb      	bne.n	80149da <rclc_executor_trigger_any+0x3a>
 8014a02:	685c      	ldr	r4, [r3, #4]
 8014a04:	6a25      	ldr	r5, [r4, #32]
 8014a06:	2d00      	cmp	r5, #0
 8014a08:	d1e5      	bne.n	80149d6 <rclc_executor_trigger_any+0x36>
 8014a0a:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8014a0e:	2800      	cmp	r0, #0
 8014a10:	d1e1      	bne.n	80149d6 <rclc_executor_trigger_any+0x36>
 8014a12:	3201      	adds	r2, #1
 8014a14:	3340      	adds	r3, #64	@ 0x40
 8014a16:	4291      	cmp	r1, r2
 8014a18:	d1e7      	bne.n	80149ea <rclc_executor_trigger_any+0x4a>
 8014a1a:	2000      	movs	r0, #0
 8014a1c:	bc30      	pop	{r4, r5}
 8014a1e:	4770      	bx	lr
 8014a20:	4770      	bx	lr
 8014a22:	4608      	mov	r0, r1
 8014a24:	4770      	bx	lr
 8014a26:	bf00      	nop

08014a28 <rclc_executor_get_zero_initialized_executor>:
 8014a28:	b510      	push	{r4, lr}
 8014a2a:	4604      	mov	r4, r0
 8014a2c:	2288      	movs	r2, #136	@ 0x88
 8014a2e:	4902      	ldr	r1, [pc, #8]	@ (8014a38 <rclc_executor_get_zero_initialized_executor+0x10>)
 8014a30:	f00d fced 	bl	802240e <memcpy>
 8014a34:	4620      	mov	r0, r4
 8014a36:	bd10      	pop	{r4, pc}
 8014a38:	08024820 	.word	0x08024820
 8014a3c:	00000000 	.word	0x00000000

08014a40 <rclc_executor_init>:
 8014a40:	2900      	cmp	r1, #0
 8014a42:	d06a      	beq.n	8014b1a <rclc_executor_init+0xda>
 8014a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a48:	4605      	mov	r5, r0
 8014a4a:	b0b0      	sub	sp, #192	@ 0xc0
 8014a4c:	2800      	cmp	r0, #0
 8014a4e:	d05c      	beq.n	8014b0a <rclc_executor_init+0xca>
 8014a50:	4616      	mov	r6, r2
 8014a52:	4618      	mov	r0, r3
 8014a54:	4688      	mov	r8, r1
 8014a56:	461f      	mov	r7, r3
 8014a58:	f000 fcb6 	bl	80153c8 <rcutils_allocator_is_valid>
 8014a5c:	2e00      	cmp	r6, #0
 8014a5e:	d054      	beq.n	8014b0a <rclc_executor_init+0xca>
 8014a60:	f080 0401 	eor.w	r4, r0, #1
 8014a64:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8014a68:	d14f      	bne.n	8014b0a <rclc_executor_init+0xca>
 8014a6a:	2288      	movs	r2, #136	@ 0x88
 8014a6c:	4930      	ldr	r1, [pc, #192]	@ (8014b30 <rclc_executor_init+0xf0>)
 8014a6e:	a80e      	add	r0, sp, #56	@ 0x38
 8014a70:	f00d fccd 	bl	802240e <memcpy>
 8014a74:	a90e      	add	r1, sp, #56	@ 0x38
 8014a76:	2288      	movs	r2, #136	@ 0x88
 8014a78:	4628      	mov	r0, r5
 8014a7a:	f00d fcc8 	bl	802240e <memcpy>
 8014a7e:	4668      	mov	r0, sp
 8014a80:	f8c5 8000 	str.w	r8, [r5]
 8014a84:	60ae      	str	r6, [r5, #8]
 8014a86:	f007 fc87 	bl	801c398 <rcl_get_zero_initialized_wait_set>
 8014a8a:	46ec      	mov	ip, sp
 8014a8c:	f105 0e14 	add.w	lr, r5, #20
 8014a90:	f8d7 8000 	ldr.w	r8, [r7]
 8014a94:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014a98:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014a9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014aa0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014aa4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014aa8:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8014b28 <rclc_executor_init+0xe8>
 8014aac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014ab0:	f8dc 3000 	ldr.w	r3, [ip]
 8014ab4:	01b0      	lsls	r0, r6, #6
 8014ab6:	6939      	ldr	r1, [r7, #16]
 8014ab8:	f8ce 3000 	str.w	r3, [lr]
 8014abc:	612f      	str	r7, [r5, #16]
 8014abe:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8014ac2:	47c0      	blx	r8
 8014ac4:	6068      	str	r0, [r5, #4]
 8014ac6:	b908      	cbnz	r0, 8014acc <rclc_executor_init+0x8c>
 8014ac8:	e029      	b.n	8014b1e <rclc_executor_init+0xde>
 8014aca:	6868      	ldr	r0, [r5, #4]
 8014acc:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8014ad0:	3401      	adds	r4, #1
 8014ad2:	4631      	mov	r1, r6
 8014ad4:	f000 fac0 	bl	8015058 <rclc_executor_handle_init>
 8014ad8:	42a6      	cmp	r6, r4
 8014ada:	d8f6      	bhi.n	8014aca <rclc_executor_init+0x8a>
 8014adc:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8014ae0:	f000 faae 	bl	8015040 <rclc_executor_handle_counters_zero_init>
 8014ae4:	4a13      	ldr	r2, [pc, #76]	@ (8014b34 <rclc_executor_init+0xf4>)
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	6868      	ldr	r0, [r5, #4]
 8014aea:	e9c5 231e 	strd	r2, r3, [r5, #120]	@ 0x78
 8014aee:	b168      	cbz	r0, 8014b0c <rclc_executor_init+0xcc>
 8014af0:	68ab      	ldr	r3, [r5, #8]
 8014af2:	b173      	cbz	r3, 8014b12 <rclc_executor_init+0xd2>
 8014af4:	692a      	ldr	r2, [r5, #16]
 8014af6:	fab2 f382 	clz	r3, r2
 8014afa:	095b      	lsrs	r3, r3, #5
 8014afc:	b14a      	cbz	r2, 8014b12 <rclc_executor_init+0xd2>
 8014afe:	4618      	mov	r0, r3
 8014b00:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
 8014b04:	b030      	add	sp, #192	@ 0xc0
 8014b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b0a:	200b      	movs	r0, #11
 8014b0c:	b030      	add	sp, #192	@ 0xc0
 8014b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b12:	2000      	movs	r0, #0
 8014b14:	b030      	add	sp, #192	@ 0xc0
 8014b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b1a:	200b      	movs	r0, #11
 8014b1c:	4770      	bx	lr
 8014b1e:	200a      	movs	r0, #10
 8014b20:	e7f4      	b.n	8014b0c <rclc_executor_init+0xcc>
 8014b22:	bf00      	nop
 8014b24:	f3af 8000 	nop.w
 8014b28:	3b9aca00 	.word	0x3b9aca00
 8014b2c:	00000000 	.word	0x00000000
 8014b30:	08024820 	.word	0x08024820
 8014b34:	080149a1 	.word	0x080149a1

08014b38 <rclc_executor_add_subscription>:
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	bf18      	it	ne
 8014b3c:	2a00      	cmpne	r2, #0
 8014b3e:	b570      	push	{r4, r5, r6, lr}
 8014b40:	4604      	mov	r4, r0
 8014b42:	bf0c      	ite	eq
 8014b44:	2001      	moveq	r0, #1
 8014b46:	2000      	movne	r0, #0
 8014b48:	f89d c010 	ldrb.w	ip, [sp, #16]
 8014b4c:	2900      	cmp	r1, #0
 8014b4e:	bf08      	it	eq
 8014b50:	f040 0001 	orreq.w	r0, r0, #1
 8014b54:	bb28      	cbnz	r0, 8014ba2 <rclc_executor_add_subscription+0x6a>
 8014b56:	fab4 f584 	clz	r5, r4
 8014b5a:	096d      	lsrs	r5, r5, #5
 8014b5c:	b30c      	cbz	r4, 8014ba2 <rclc_executor_add_subscription+0x6a>
 8014b5e:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 8014b62:	4286      	cmp	r6, r0
 8014b64:	d301      	bcc.n	8014b6a <rclc_executor_add_subscription+0x32>
 8014b66:	2001      	movs	r0, #1
 8014b68:	bd70      	pop	{r4, r5, r6, pc}
 8014b6a:	6860      	ldr	r0, [r4, #4]
 8014b6c:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 8014b70:	f800 500e 	strb.w	r5, [r0, lr]
 8014b74:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8014b78:	3601      	adds	r6, #1
 8014b7a:	6303      	str	r3, [r0, #48]	@ 0x30
 8014b7c:	2301      	movs	r3, #1
 8014b7e:	62c5      	str	r5, [r0, #44]	@ 0x2c
 8014b80:	f104 0514 	add.w	r5, r4, #20
 8014b84:	f880 c001 	strb.w	ip, [r0, #1]
 8014b88:	8703      	strh	r3, [r0, #56]	@ 0x38
 8014b8a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8014b8e:	4628      	mov	r0, r5
 8014b90:	60e6      	str	r6, [r4, #12]
 8014b92:	f007 fc15 	bl	801c3c0 <rcl_wait_set_is_valid>
 8014b96:	b930      	cbnz	r0, 8014ba6 <rclc_executor_add_subscription+0x6e>
 8014b98:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8014b9a:	2000      	movs	r0, #0
 8014b9c:	3301      	adds	r3, #1
 8014b9e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8014ba0:	bd70      	pop	{r4, r5, r6, pc}
 8014ba2:	200b      	movs	r0, #11
 8014ba4:	bd70      	pop	{r4, r5, r6, pc}
 8014ba6:	4628      	mov	r0, r5
 8014ba8:	f007 fc10 	bl	801c3cc <rcl_wait_set_fini>
 8014bac:	2800      	cmp	r0, #0
 8014bae:	d0f3      	beq.n	8014b98 <rclc_executor_add_subscription+0x60>
 8014bb0:	bd70      	pop	{r4, r5, r6, pc}
 8014bb2:	bf00      	nop

08014bb4 <rclc_executor_add_service>:
 8014bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bb6:	9d06      	ldr	r5, [sp, #24]
 8014bb8:	4604      	mov	r4, r0
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	bf18      	it	ne
 8014bbe:	2d00      	cmpne	r5, #0
 8014bc0:	bf0c      	ite	eq
 8014bc2:	2001      	moveq	r0, #1
 8014bc4:	2000      	movne	r0, #0
 8014bc6:	2a00      	cmp	r2, #0
 8014bc8:	bf08      	it	eq
 8014bca:	f040 0001 	orreq.w	r0, r0, #1
 8014bce:	2900      	cmp	r1, #0
 8014bd0:	bf08      	it	eq
 8014bd2:	f040 0001 	orreq.w	r0, r0, #1
 8014bd6:	bb40      	cbnz	r0, 8014c2a <rclc_executor_add_service+0x76>
 8014bd8:	fab4 f684 	clz	r6, r4
 8014bdc:	0976      	lsrs	r6, r6, #5
 8014bde:	b324      	cbz	r4, 8014c2a <rclc_executor_add_service+0x76>
 8014be0:	e9d4 7002 	ldrd	r7, r0, [r4, #8]
 8014be4:	42b8      	cmp	r0, r7
 8014be6:	d301      	bcc.n	8014bec <rclc_executor_add_service+0x38>
 8014be8:	2001      	movs	r0, #1
 8014bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014bec:	6867      	ldr	r7, [r4, #4]
 8014bee:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 8014bf2:	f100 0c01 	add.w	ip, r0, #1
 8014bf6:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 8014bfa:	6283      	str	r3, [r0, #40]	@ 0x28
 8014bfc:	2305      	movs	r3, #5
 8014bfe:	6305      	str	r5, [r0, #48]	@ 0x30
 8014c00:	f104 0514 	add.w	r5, r4, #20
 8014c04:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8014c08:	f827 300e 	strh.w	r3, [r7, lr]
 8014c0c:	2301      	movs	r3, #1
 8014c0e:	62c6      	str	r6, [r0, #44]	@ 0x2c
 8014c10:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8014c14:	4628      	mov	r0, r5
 8014c16:	f8c4 c00c 	str.w	ip, [r4, #12]
 8014c1a:	f007 fbd1 	bl	801c3c0 <rcl_wait_set_is_valid>
 8014c1e:	b930      	cbnz	r0, 8014c2e <rclc_executor_add_service+0x7a>
 8014c20:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8014c22:	2000      	movs	r0, #0
 8014c24:	3301      	adds	r3, #1
 8014c26:	6563      	str	r3, [r4, #84]	@ 0x54
 8014c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c2a:	200b      	movs	r0, #11
 8014c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c2e:	4628      	mov	r0, r5
 8014c30:	f007 fbcc 	bl	801c3cc <rcl_wait_set_fini>
 8014c34:	2800      	cmp	r0, #0
 8014c36:	d0f3      	beq.n	8014c20 <rclc_executor_add_service+0x6c>
 8014c38:	e7d7      	b.n	8014bea <rclc_executor_add_service+0x36>
 8014c3a:	bf00      	nop

08014c3c <rclc_executor_prepare>:
 8014c3c:	2800      	cmp	r0, #0
 8014c3e:	d044      	beq.n	8014cca <rclc_executor_prepare+0x8e>
 8014c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c42:	f100 0514 	add.w	r5, r0, #20
 8014c46:	b09b      	sub	sp, #108	@ 0x6c
 8014c48:	4604      	mov	r4, r0
 8014c4a:	4628      	mov	r0, r5
 8014c4c:	f007 fbb8 	bl	801c3c0 <rcl_wait_set_is_valid>
 8014c50:	b110      	cbz	r0, 8014c58 <rclc_executor_prepare+0x1c>
 8014c52:	2000      	movs	r0, #0
 8014c54:	b01b      	add	sp, #108	@ 0x6c
 8014c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c58:	4628      	mov	r0, r5
 8014c5a:	f007 fbb7 	bl	801c3cc <rcl_wait_set_fini>
 8014c5e:	2800      	cmp	r0, #0
 8014c60:	d130      	bne.n	8014cc4 <rclc_executor_prepare+0x88>
 8014c62:	a80c      	add	r0, sp, #48	@ 0x30
 8014c64:	ae04      	add	r6, sp, #16
 8014c66:	f007 fb97 	bl	801c398 <rcl_get_zero_initialized_wait_set>
 8014c6a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8014c6e:	46ae      	mov	lr, r5
 8014c70:	6927      	ldr	r7, [r4, #16]
 8014c72:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014c76:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014c7a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014c7e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014c82:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014c86:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014c8a:	f8dc 3000 	ldr.w	r3, [ip]
 8014c8e:	f8ce 3000 	str.w	r3, [lr]
 8014c92:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014c94:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014c96:	683b      	ldr	r3, [r7, #0]
 8014c98:	4628      	mov	r0, r5
 8014c9a:	6822      	ldr	r2, [r4, #0]
 8014c9c:	6033      	str	r3, [r6, #0]
 8014c9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014ca0:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8014ca2:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014ca6:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 8014caa:	e9cd 2100 	strd	r2, r1, [sp]
 8014cae:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8014cb0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8014cb2:	f007 fe8b 	bl	801c9cc <rcl_wait_set_init>
 8014cb6:	2800      	cmp	r0, #0
 8014cb8:	d0cc      	beq.n	8014c54 <rclc_executor_prepare+0x18>
 8014cba:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014cbc:	f000 fba8 	bl	8015410 <rcutils_reset_error>
 8014cc0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8014cc2:	e7c7      	b.n	8014c54 <rclc_executor_prepare+0x18>
 8014cc4:	f000 fba4 	bl	8015410 <rcutils_reset_error>
 8014cc8:	e7cb      	b.n	8014c62 <rclc_executor_prepare+0x26>
 8014cca:	200b      	movs	r0, #11
 8014ccc:	4770      	bx	lr
 8014cce:	bf00      	nop

08014cd0 <rclc_executor_spin_some.part.0>:
 8014cd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cd4:	4605      	mov	r5, r0
 8014cd6:	4691      	mov	r9, r2
 8014cd8:	4698      	mov	r8, r3
 8014cda:	f7ff ffaf 	bl	8014c3c <rclc_executor_prepare>
 8014cde:	f105 0614 	add.w	r6, r5, #20
 8014ce2:	4630      	mov	r0, r6
 8014ce4:	f007 fc3e 	bl	801c564 <rcl_wait_set_clear>
 8014ce8:	4607      	mov	r7, r0
 8014cea:	2800      	cmp	r0, #0
 8014cec:	f040 80a8 	bne.w	8014e40 <rclc_executor_spin_some.part.0+0x170>
 8014cf0:	68ab      	ldr	r3, [r5, #8]
 8014cf2:	b30b      	cbz	r3, 8014d38 <rclc_executor_spin_some.part.0+0x68>
 8014cf4:	4604      	mov	r4, r0
 8014cf6:	6869      	ldr	r1, [r5, #4]
 8014cf8:	01a2      	lsls	r2, r4, #6
 8014cfa:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8014cfe:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8014d02:	b1cb      	cbz	r3, 8014d38 <rclc_executor_spin_some.part.0+0x68>
 8014d04:	5c8b      	ldrb	r3, [r1, r2]
 8014d06:	2b0a      	cmp	r3, #10
 8014d08:	f200 80de 	bhi.w	8014ec8 <rclc_executor_spin_some.part.0+0x1f8>
 8014d0c:	e8df f003 	tbb	[pc, r3]
 8014d10:	8da99d9d 	.word	0x8da99d9d
 8014d14:	0606068d 	.word	0x0606068d
 8014d18:	c1ce      	.short	0xc1ce
 8014d1a:	b5          	.byte	0xb5
 8014d1b:	00          	.byte	0x00
 8014d1c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014d20:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014d24:	4630      	mov	r0, r6
 8014d26:	f007 ff6d 	bl	801cc04 <rcl_wait_set_add_service>
 8014d2a:	2800      	cmp	r0, #0
 8014d2c:	f040 8087 	bne.w	8014e3e <rclc_executor_spin_some.part.0+0x16e>
 8014d30:	3401      	adds	r4, #1
 8014d32:	68ab      	ldr	r3, [r5, #8]
 8014d34:	429c      	cmp	r4, r3
 8014d36:	d3de      	bcc.n	8014cf6 <rclc_executor_spin_some.part.0+0x26>
 8014d38:	4643      	mov	r3, r8
 8014d3a:	464a      	mov	r2, r9
 8014d3c:	4630      	mov	r0, r6
 8014d3e:	f007 ff8f 	bl	801cc60 <rcl_wait>
 8014d42:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	f000 80c6 	beq.w	8014ed8 <rclc_executor_spin_some.part.0+0x208>
 8014d4c:	2b01      	cmp	r3, #1
 8014d4e:	f040 80bb 	bne.w	8014ec8 <rclc_executor_spin_some.part.0+0x1f8>
 8014d52:	68ab      	ldr	r3, [r5, #8]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	f000 8159 	beq.w	801500c <rclc_executor_spin_some.part.0+0x33c>
 8014d5a:	2400      	movs	r4, #0
 8014d5c:	f240 1991 	movw	r9, #401	@ 0x191
 8014d60:	46a0      	mov	r8, r4
 8014d62:	e00a      	b.n	8014d7a <rclc_executor_spin_some.part.0+0xaa>
 8014d64:	f7ff fb18 	bl	8014398 <_rclc_check_for_new_data>
 8014d68:	4604      	mov	r4, r0
 8014d6a:	b110      	cbz	r0, 8014d72 <rclc_executor_spin_some.part.0+0xa2>
 8014d6c:	4548      	cmp	r0, r9
 8014d6e:	f040 80b1 	bne.w	8014ed4 <rclc_executor_spin_some.part.0+0x204>
 8014d72:	68ab      	ldr	r3, [r5, #8]
 8014d74:	4598      	cmp	r8, r3
 8014d76:	f080 8126 	bcs.w	8014fc6 <rclc_executor_spin_some.part.0+0x2f6>
 8014d7a:	686a      	ldr	r2, [r5, #4]
 8014d7c:	4631      	mov	r1, r6
 8014d7e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8014d82:	f108 0801 	add.w	r8, r8, #1
 8014d86:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8014d8a:	f1bc 0f00 	cmp.w	ip, #0
 8014d8e:	d1e9      	bne.n	8014d64 <rclc_executor_spin_some.part.0+0x94>
 8014d90:	4619      	mov	r1, r3
 8014d92:	4610      	mov	r0, r2
 8014d94:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8014d98:	4798      	blx	r3
 8014d9a:	2800      	cmp	r0, #0
 8014d9c:	f000 809a 	beq.w	8014ed4 <rclc_executor_spin_some.part.0+0x204>
 8014da0:	68ab      	ldr	r3, [r5, #8]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	f000 8096 	beq.w	8014ed4 <rclc_executor_spin_some.part.0+0x204>
 8014da8:	f04f 0800 	mov.w	r8, #0
 8014dac:	f240 1991 	movw	r9, #401	@ 0x191
 8014db0:	e009      	b.n	8014dc6 <rclc_executor_spin_some.part.0+0xf6>
 8014db2:	f7ff fb3f 	bl	8014434 <_rclc_take_new_data>
 8014db6:	4604      	mov	r4, r0
 8014db8:	b110      	cbz	r0, 8014dc0 <rclc_executor_spin_some.part.0+0xf0>
 8014dba:	4548      	cmp	r0, r9
 8014dbc:	f040 808a 	bne.w	8014ed4 <rclc_executor_spin_some.part.0+0x204>
 8014dc0:	68ab      	ldr	r3, [r5, #8]
 8014dc2:	4598      	cmp	r8, r3
 8014dc4:	d209      	bcs.n	8014dda <rclc_executor_spin_some.part.0+0x10a>
 8014dc6:	6868      	ldr	r0, [r5, #4]
 8014dc8:	4631      	mov	r1, r6
 8014dca:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8014dce:	f108 0801 	add.w	r8, r8, #1
 8014dd2:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8014dd6:	2a00      	cmp	r2, #0
 8014dd8:	d1eb      	bne.n	8014db2 <rclc_executor_spin_some.part.0+0xe2>
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d07a      	beq.n	8014ed4 <rclc_executor_spin_some.part.0+0x204>
 8014dde:	2600      	movs	r6, #0
 8014de0:	e00e      	b.n	8014e00 <rclc_executor_spin_some.part.0+0x130>
 8014de2:	f812 200c 	ldrb.w	r2, [r2, ip]
 8014de6:	2a08      	cmp	r2, #8
 8014de8:	f000 80fc 	beq.w	8014fe4 <rclc_executor_spin_some.part.0+0x314>
 8014dec:	2a09      	cmp	r2, #9
 8014dee:	f000 80ee 	beq.w	8014fce <rclc_executor_spin_some.part.0+0x2fe>
 8014df2:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 8014df6:	b98a      	cbnz	r2, 8014e1c <rclc_executor_spin_some.part.0+0x14c>
 8014df8:	3601      	adds	r6, #1
 8014dfa:	429e      	cmp	r6, r3
 8014dfc:	d267      	bcs.n	8014ece <rclc_executor_spin_some.part.0+0x1fe>
 8014dfe:	2400      	movs	r4, #0
 8014e00:	686a      	ldr	r2, [r5, #4]
 8014e02:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8014e06:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8014e0a:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8014e0e:	2900      	cmp	r1, #0
 8014e10:	d060      	beq.n	8014ed4 <rclc_executor_spin_some.part.0+0x204>
 8014e12:	7841      	ldrb	r1, [r0, #1]
 8014e14:	2900      	cmp	r1, #0
 8014e16:	d0e4      	beq.n	8014de2 <rclc_executor_spin_some.part.0+0x112>
 8014e18:	2901      	cmp	r1, #1
 8014e1a:	d1ed      	bne.n	8014df8 <rclc_executor_spin_some.part.0+0x128>
 8014e1c:	f7ff fc7e 	bl	801471c <_rclc_execute.part.0>
 8014e20:	2800      	cmp	r0, #0
 8014e22:	f040 80b5 	bne.w	8014f90 <rclc_executor_spin_some.part.0+0x2c0>
 8014e26:	68ab      	ldr	r3, [r5, #8]
 8014e28:	e7e6      	b.n	8014df8 <rclc_executor_spin_some.part.0+0x128>
 8014e2a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014e2e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014e32:	4630      	mov	r0, r6
 8014e34:	f007 feba 	bl	801cbac <rcl_wait_set_add_client>
 8014e38:	2800      	cmp	r0, #0
 8014e3a:	f43f af79 	beq.w	8014d30 <rclc_executor_spin_some.part.0+0x60>
 8014e3e:	4607      	mov	r7, r0
 8014e40:	f000 fae6 	bl	8015410 <rcutils_reset_error>
 8014e44:	4638      	mov	r0, r7
 8014e46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e4a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014e4e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014e52:	4630      	mov	r0, r6
 8014e54:	f007 fb5a 	bl	801c50c <rcl_wait_set_add_subscription>
 8014e58:	2800      	cmp	r0, #0
 8014e5a:	f43f af69 	beq.w	8014d30 <rclc_executor_spin_some.part.0+0x60>
 8014e5e:	4607      	mov	r7, r0
 8014e60:	e7ee      	b.n	8014e40 <rclc_executor_spin_some.part.0+0x170>
 8014e62:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014e66:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014e6a:	4630      	mov	r0, r6
 8014e6c:	f007 fe6e 	bl	801cb4c <rcl_wait_set_add_timer>
 8014e70:	2800      	cmp	r0, #0
 8014e72:	f43f af5d 	beq.w	8014d30 <rclc_executor_spin_some.part.0+0x60>
 8014e76:	4607      	mov	r7, r0
 8014e78:	e7e2      	b.n	8014e40 <rclc_executor_spin_some.part.0+0x170>
 8014e7a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014e7e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014e82:	4630      	mov	r0, r6
 8014e84:	f007 fe36 	bl	801caf4 <rcl_wait_set_add_guard_condition>
 8014e88:	2800      	cmp	r0, #0
 8014e8a:	f43f af51 	beq.w	8014d30 <rclc_executor_spin_some.part.0+0x60>
 8014e8e:	4607      	mov	r7, r0
 8014e90:	e7d6      	b.n	8014e40 <rclc_executor_spin_some.part.0+0x170>
 8014e92:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014e96:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014e9a:	4630      	mov	r0, r6
 8014e9c:	3110      	adds	r1, #16
 8014e9e:	f008 fbb5 	bl	801d60c <rcl_action_wait_set_add_action_server>
 8014ea2:	2800      	cmp	r0, #0
 8014ea4:	f43f af44 	beq.w	8014d30 <rclc_executor_spin_some.part.0+0x60>
 8014ea8:	4607      	mov	r7, r0
 8014eaa:	e7c9      	b.n	8014e40 <rclc_executor_spin_some.part.0+0x170>
 8014eac:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014eb6:	4630      	mov	r0, r6
 8014eb8:	3110      	adds	r1, #16
 8014eba:	f008 f97d 	bl	801d1b8 <rcl_action_wait_set_add_action_client>
 8014ebe:	2800      	cmp	r0, #0
 8014ec0:	f43f af36 	beq.w	8014d30 <rclc_executor_spin_some.part.0+0x60>
 8014ec4:	4607      	mov	r7, r0
 8014ec6:	e7bb      	b.n	8014e40 <rclc_executor_spin_some.part.0+0x170>
 8014ec8:	2701      	movs	r7, #1
 8014eca:	f000 faa1 	bl	8015410 <rcutils_reset_error>
 8014ece:	4638      	mov	r0, r7
 8014ed0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ed4:	4627      	mov	r7, r4
 8014ed6:	e7fa      	b.n	8014ece <rclc_executor_spin_some.part.0+0x1fe>
 8014ed8:	68ab      	ldr	r3, [r5, #8]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	f000 8093 	beq.w	8015006 <rclc_executor_spin_some.part.0+0x336>
 8014ee0:	2400      	movs	r4, #0
 8014ee2:	f240 1991 	movw	r9, #401	@ 0x191
 8014ee6:	46a0      	mov	r8, r4
 8014ee8:	e008      	b.n	8014efc <rclc_executor_spin_some.part.0+0x22c>
 8014eea:	f7ff fa55 	bl	8014398 <_rclc_check_for_new_data>
 8014eee:	4604      	mov	r4, r0
 8014ef0:	b108      	cbz	r0, 8014ef6 <rclc_executor_spin_some.part.0+0x226>
 8014ef2:	4548      	cmp	r0, r9
 8014ef4:	d1ee      	bne.n	8014ed4 <rclc_executor_spin_some.part.0+0x204>
 8014ef6:	68ab      	ldr	r3, [r5, #8]
 8014ef8:	4598      	cmp	r8, r3
 8014efa:	d266      	bcs.n	8014fca <rclc_executor_spin_some.part.0+0x2fa>
 8014efc:	686a      	ldr	r2, [r5, #4]
 8014efe:	4631      	mov	r1, r6
 8014f00:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8014f04:	f108 0801 	add.w	r8, r8, #1
 8014f08:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8014f0c:	f1bc 0f00 	cmp.w	ip, #0
 8014f10:	d1eb      	bne.n	8014eea <rclc_executor_spin_some.part.0+0x21a>
 8014f12:	4619      	mov	r1, r3
 8014f14:	4610      	mov	r0, r2
 8014f16:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8014f1a:	4798      	blx	r3
 8014f1c:	2800      	cmp	r0, #0
 8014f1e:	d0d9      	beq.n	8014ed4 <rclc_executor_spin_some.part.0+0x204>
 8014f20:	68ab      	ldr	r3, [r5, #8]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d0d6      	beq.n	8014ed4 <rclc_executor_spin_some.part.0+0x204>
 8014f26:	f04f 0a00 	mov.w	sl, #0
 8014f2a:	f240 1891 	movw	r8, #401	@ 0x191
 8014f2e:	f240 2959 	movw	r9, #601	@ 0x259
 8014f32:	e00e      	b.n	8014f52 <rclc_executor_spin_some.part.0+0x282>
 8014f34:	f813 300b 	ldrb.w	r3, [r3, fp]
 8014f38:	2b08      	cmp	r3, #8
 8014f3a:	d034      	beq.n	8014fa6 <rclc_executor_spin_some.part.0+0x2d6>
 8014f3c:	2b09      	cmp	r3, #9
 8014f3e:	d029      	beq.n	8014f94 <rclc_executor_spin_some.part.0+0x2c4>
 8014f40:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8014f44:	bb03      	cbnz	r3, 8014f88 <rclc_executor_spin_some.part.0+0x2b8>
 8014f46:	f10a 0a01 	add.w	sl, sl, #1
 8014f4a:	68ab      	ldr	r3, [r5, #8]
 8014f4c:	459a      	cmp	sl, r3
 8014f4e:	d2be      	bcs.n	8014ece <rclc_executor_spin_some.part.0+0x1fe>
 8014f50:	2400      	movs	r4, #0
 8014f52:	6868      	ldr	r0, [r5, #4]
 8014f54:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8014f58:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 8014f5c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d0b7      	beq.n	8014ed4 <rclc_executor_spin_some.part.0+0x204>
 8014f64:	4631      	mov	r1, r6
 8014f66:	f7ff fa65 	bl	8014434 <_rclc_take_new_data>
 8014f6a:	2800      	cmp	r0, #0
 8014f6c:	bf18      	it	ne
 8014f6e:	4540      	cmpne	r0, r8
 8014f70:	d001      	beq.n	8014f76 <rclc_executor_spin_some.part.0+0x2a6>
 8014f72:	4548      	cmp	r0, r9
 8014f74:	d10c      	bne.n	8014f90 <rclc_executor_spin_some.part.0+0x2c0>
 8014f76:	686b      	ldr	r3, [r5, #4]
 8014f78:	eb13 000b 	adds.w	r0, r3, fp
 8014f7c:	d021      	beq.n	8014fc2 <rclc_executor_spin_some.part.0+0x2f2>
 8014f7e:	7842      	ldrb	r2, [r0, #1]
 8014f80:	2a00      	cmp	r2, #0
 8014f82:	d0d7      	beq.n	8014f34 <rclc_executor_spin_some.part.0+0x264>
 8014f84:	2a01      	cmp	r2, #1
 8014f86:	d1de      	bne.n	8014f46 <rclc_executor_spin_some.part.0+0x276>
 8014f88:	f7ff fbc8 	bl	801471c <_rclc_execute.part.0>
 8014f8c:	2800      	cmp	r0, #0
 8014f8e:	d0da      	beq.n	8014f46 <rclc_executor_spin_some.part.0+0x276>
 8014f90:	4607      	mov	r7, r0
 8014f92:	e79c      	b.n	8014ece <rclc_executor_spin_some.part.0+0x1fe>
 8014f94:	6843      	ldr	r3, [r0, #4]
 8014f96:	6a1a      	ldr	r2, [r3, #32]
 8014f98:	2a00      	cmp	r2, #0
 8014f9a:	d1f5      	bne.n	8014f88 <rclc_executor_spin_some.part.0+0x2b8>
 8014f9c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d0d0      	beq.n	8014f46 <rclc_executor_spin_some.part.0+0x276>
 8014fa4:	e7f0      	b.n	8014f88 <rclc_executor_spin_some.part.0+0x2b8>
 8014fa6:	6843      	ldr	r3, [r0, #4]
 8014fa8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014faa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8014fae:	d1eb      	bne.n	8014f88 <rclc_executor_spin_some.part.0+0x2b8>
 8014fb0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8014fb4:	2a00      	cmp	r2, #0
 8014fb6:	d1e7      	bne.n	8014f88 <rclc_executor_spin_some.part.0+0x2b8>
 8014fb8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d0c2      	beq.n	8014f46 <rclc_executor_spin_some.part.0+0x276>
 8014fc0:	e7e2      	b.n	8014f88 <rclc_executor_spin_some.part.0+0x2b8>
 8014fc2:	270b      	movs	r7, #11
 8014fc4:	e783      	b.n	8014ece <rclc_executor_spin_some.part.0+0x1fe>
 8014fc6:	686a      	ldr	r2, [r5, #4]
 8014fc8:	e6e2      	b.n	8014d90 <rclc_executor_spin_some.part.0+0xc0>
 8014fca:	686a      	ldr	r2, [r5, #4]
 8014fcc:	e7a1      	b.n	8014f12 <rclc_executor_spin_some.part.0+0x242>
 8014fce:	6842      	ldr	r2, [r0, #4]
 8014fd0:	6a11      	ldr	r1, [r2, #32]
 8014fd2:	2900      	cmp	r1, #0
 8014fd4:	f47f af22 	bne.w	8014e1c <rclc_executor_spin_some.part.0+0x14c>
 8014fd8:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8014fdc:	2a00      	cmp	r2, #0
 8014fde:	f43f af0b 	beq.w	8014df8 <rclc_executor_spin_some.part.0+0x128>
 8014fe2:	e71b      	b.n	8014e1c <rclc_executor_spin_some.part.0+0x14c>
 8014fe4:	6842      	ldr	r2, [r0, #4]
 8014fe6:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8014fe8:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 8014fec:	f47f af16 	bne.w	8014e1c <rclc_executor_spin_some.part.0+0x14c>
 8014ff0:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 8014ff4:	2900      	cmp	r1, #0
 8014ff6:	f47f af11 	bne.w	8014e1c <rclc_executor_spin_some.part.0+0x14c>
 8014ffa:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8014ffe:	2a00      	cmp	r2, #0
 8015000:	f43f aefa 	beq.w	8014df8 <rclc_executor_spin_some.part.0+0x128>
 8015004:	e70a      	b.n	8014e1c <rclc_executor_spin_some.part.0+0x14c>
 8015006:	686a      	ldr	r2, [r5, #4]
 8015008:	461c      	mov	r4, r3
 801500a:	e782      	b.n	8014f12 <rclc_executor_spin_some.part.0+0x242>
 801500c:	686a      	ldr	r2, [r5, #4]
 801500e:	461c      	mov	r4, r3
 8015010:	e6be      	b.n	8014d90 <rclc_executor_spin_some.part.0+0xc0>
 8015012:	bf00      	nop

08015014 <rclc_executor_spin_some>:
 8015014:	b190      	cbz	r0, 801503c <rclc_executor_spin_some+0x28>
 8015016:	b570      	push	{r4, r5, r6, lr}
 8015018:	4604      	mov	r4, r0
 801501a:	6800      	ldr	r0, [r0, #0]
 801501c:	4616      	mov	r6, r2
 801501e:	461d      	mov	r5, r3
 8015020:	f005 fcfe 	bl	801aa20 <rcl_context_is_valid>
 8015024:	b130      	cbz	r0, 8015034 <rclc_executor_spin_some+0x20>
 8015026:	4632      	mov	r2, r6
 8015028:	462b      	mov	r3, r5
 801502a:	4620      	mov	r0, r4
 801502c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015030:	f7ff be4e 	b.w	8014cd0 <rclc_executor_spin_some.part.0>
 8015034:	f000 f9ec 	bl	8015410 <rcutils_reset_error>
 8015038:	2001      	movs	r0, #1
 801503a:	bd70      	pop	{r4, r5, r6, pc}
 801503c:	200b      	movs	r0, #11
 801503e:	4770      	bx	lr

08015040 <rclc_executor_handle_counters_zero_init>:
 8015040:	b130      	cbz	r0, 8015050 <rclc_executor_handle_counters_zero_init+0x10>
 8015042:	2220      	movs	r2, #32
 8015044:	2100      	movs	r1, #0
 8015046:	b508      	push	{r3, lr}
 8015048:	f00d f8c2 	bl	80221d0 <memset>
 801504c:	2000      	movs	r0, #0
 801504e:	bd08      	pop	{r3, pc}
 8015050:	200b      	movs	r0, #11
 8015052:	4770      	bx	lr
 8015054:	0000      	movs	r0, r0
	...

08015058 <rclc_executor_handle_init>:
 8015058:	4603      	mov	r3, r0
 801505a:	b178      	cbz	r0, 801507c <rclc_executor_handle_init+0x24>
 801505c:	2200      	movs	r2, #0
 801505e:	f04f 0c0b 	mov.w	ip, #11
 8015062:	6341      	str	r1, [r0, #52]	@ 0x34
 8015064:	4610      	mov	r0, r2
 8015066:	f8a3 c000 	strh.w	ip, [r3]
 801506a:	631a      	str	r2, [r3, #48]	@ 0x30
 801506c:	871a      	strh	r2, [r3, #56]	@ 0x38
 801506e:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 8015080 <rclc_executor_handle_init+0x28>
 8015072:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8015076:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 801507a:	4770      	bx	lr
 801507c:	200b      	movs	r0, #11
 801507e:	4770      	bx	lr
	...

08015088 <rclc_support_init>:
 8015088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801508c:	b086      	sub	sp, #24
 801508e:	b3bb      	cbz	r3, 8015100 <rclc_support_init+0x78>
 8015090:	4606      	mov	r6, r0
 8015092:	b3a8      	cbz	r0, 8015100 <rclc_support_init+0x78>
 8015094:	461c      	mov	r4, r3
 8015096:	460f      	mov	r7, r1
 8015098:	4690      	mov	r8, r2
 801509a:	f005 fe2d 	bl	801acf8 <rcl_get_zero_initialized_init_options>
 801509e:	f104 050c 	add.w	r5, r4, #12
 80150a2:	9005      	str	r0, [sp, #20]
 80150a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80150a8:	e88d 0003 	stmia.w	sp, {r0, r1}
 80150ac:	a805      	add	r0, sp, #20
 80150ae:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80150b2:	f005 fe23 	bl	801acfc <rcl_init_options_init>
 80150b6:	4605      	mov	r5, r0
 80150b8:	b9e0      	cbnz	r0, 80150f4 <rclc_support_init+0x6c>
 80150ba:	ad02      	add	r5, sp, #8
 80150bc:	4628      	mov	r0, r5
 80150be:	f005 fca5 	bl	801aa0c <rcl_get_zero_initialized_context>
 80150c2:	4633      	mov	r3, r6
 80150c4:	aa05      	add	r2, sp, #20
 80150c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80150ca:	e886 0003 	stmia.w	r6, {r0, r1}
 80150ce:	4641      	mov	r1, r8
 80150d0:	4638      	mov	r0, r7
 80150d2:	f005 fd0b 	bl	801aaec <rcl_init>
 80150d6:	4605      	mov	r5, r0
 80150d8:	b9b8      	cbnz	r0, 801510a <rclc_support_init+0x82>
 80150da:	4622      	mov	r2, r4
 80150dc:	f106 010c 	add.w	r1, r6, #12
 80150e0:	2003      	movs	r0, #3
 80150e2:	60b4      	str	r4, [r6, #8]
 80150e4:	f006 fd2e 	bl	801bb44 <rcl_clock_init>
 80150e8:	4605      	mov	r5, r0
 80150ea:	b970      	cbnz	r0, 801510a <rclc_support_init+0x82>
 80150ec:	a805      	add	r0, sp, #20
 80150ee:	f005 fe6b 	bl	801adc8 <rcl_init_options_fini>
 80150f2:	b108      	cbz	r0, 80150f8 <rclc_support_init+0x70>
 80150f4:	f000 f98c 	bl	8015410 <rcutils_reset_error>
 80150f8:	4628      	mov	r0, r5
 80150fa:	b006      	add	sp, #24
 80150fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015100:	250b      	movs	r5, #11
 8015102:	4628      	mov	r0, r5
 8015104:	b006      	add	sp, #24
 8015106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801510a:	f000 f981 	bl	8015410 <rcutils_reset_error>
 801510e:	a805      	add	r0, sp, #20
 8015110:	f005 fe5a 	bl	801adc8 <rcl_init_options_fini>
 8015114:	2800      	cmp	r0, #0
 8015116:	d0ef      	beq.n	80150f8 <rclc_support_init+0x70>
 8015118:	e7ec      	b.n	80150f4 <rclc_support_init+0x6c>
 801511a:	bf00      	nop

0801511c <rclc_node_init_default>:
 801511c:	2b00      	cmp	r3, #0
 801511e:	bf18      	it	ne
 8015120:	2a00      	cmpne	r2, #0
 8015122:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015126:	4616      	mov	r6, r2
 8015128:	bf0c      	ite	eq
 801512a:	2201      	moveq	r2, #1
 801512c:	2200      	movne	r2, #0
 801512e:	b0a1      	sub	sp, #132	@ 0x84
 8015130:	2900      	cmp	r1, #0
 8015132:	bf08      	it	eq
 8015134:	f042 0201 	orreq.w	r2, r2, #1
 8015138:	bb22      	cbnz	r2, 8015184 <rclc_node_init_default+0x68>
 801513a:	4604      	mov	r4, r0
 801513c:	b310      	cbz	r0, 8015184 <rclc_node_init_default+0x68>
 801513e:	f10d 0810 	add.w	r8, sp, #16
 8015142:	461f      	mov	r7, r3
 8015144:	460d      	mov	r5, r1
 8015146:	f10d 0918 	add.w	r9, sp, #24
 801514a:	4640      	mov	r0, r8
 801514c:	f005 fef6 	bl	801af3c <rcl_get_zero_initialized_node>
 8015150:	e898 0003 	ldmia.w	r8, {r0, r1}
 8015154:	e884 0003 	stmia.w	r4, {r0, r1}
 8015158:	4648      	mov	r0, r9
 801515a:	f006 f869 	bl	801b230 <rcl_node_get_default_options>
 801515e:	4640      	mov	r0, r8
 8015160:	f005 feec 	bl	801af3c <rcl_get_zero_initialized_node>
 8015164:	f8cd 9000 	str.w	r9, [sp]
 8015168:	463b      	mov	r3, r7
 801516a:	4632      	mov	r2, r6
 801516c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8015170:	e884 0003 	stmia.w	r4, {r0, r1}
 8015174:	4629      	mov	r1, r5
 8015176:	4620      	mov	r0, r4
 8015178:	f005 feea 	bl	801af50 <rcl_node_init>
 801517c:	b930      	cbnz	r0, 801518c <rclc_node_init_default+0x70>
 801517e:	b021      	add	sp, #132	@ 0x84
 8015180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015184:	200b      	movs	r0, #11
 8015186:	b021      	add	sp, #132	@ 0x84
 8015188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801518c:	9003      	str	r0, [sp, #12]
 801518e:	f000 f93f 	bl	8015410 <rcutils_reset_error>
 8015192:	f000 f93d 	bl	8015410 <rcutils_reset_error>
 8015196:	9803      	ldr	r0, [sp, #12]
 8015198:	b021      	add	sp, #132	@ 0x84
 801519a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801519e:	bf00      	nop

080151a0 <rclc_publisher_init>:
 80151a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80151a4:	b0a1      	sub	sp, #132	@ 0x84
 80151a6:	9e28      	ldr	r6, [sp, #160]	@ 0xa0
 80151a8:	2e00      	cmp	r6, #0
 80151aa:	bf18      	it	ne
 80151ac:	2b00      	cmpne	r3, #0
 80151ae:	bf0c      	ite	eq
 80151b0:	f04f 0c01 	moveq.w	ip, #1
 80151b4:	f04f 0c00 	movne.w	ip, #0
 80151b8:	2a00      	cmp	r2, #0
 80151ba:	bf08      	it	eq
 80151bc:	f04c 0c01 	orreq.w	ip, ip, #1
 80151c0:	2900      	cmp	r1, #0
 80151c2:	bf08      	it	eq
 80151c4:	f04c 0c01 	orreq.w	ip, ip, #1
 80151c8:	f1bc 0f00 	cmp.w	ip, #0
 80151cc:	d11d      	bne.n	801520a <rclc_publisher_init+0x6a>
 80151ce:	4604      	mov	r4, r0
 80151d0:	b1d8      	cbz	r0, 801520a <rclc_publisher_init+0x6a>
 80151d2:	f10d 0910 	add.w	r9, sp, #16
 80151d6:	461f      	mov	r7, r3
 80151d8:	4690      	mov	r8, r2
 80151da:	460d      	mov	r5, r1
 80151dc:	f7fe ffc8 	bl	8014170 <rcl_get_zero_initialized_publisher>
 80151e0:	6020      	str	r0, [r4, #0]
 80151e2:	4648      	mov	r0, r9
 80151e4:	f7ff f864 	bl	80142b0 <rcl_publisher_get_default_options>
 80151e8:	4631      	mov	r1, r6
 80151ea:	2250      	movs	r2, #80	@ 0x50
 80151ec:	4648      	mov	r0, r9
 80151ee:	f00d f90e 	bl	802240e <memcpy>
 80151f2:	463b      	mov	r3, r7
 80151f4:	4642      	mov	r2, r8
 80151f6:	4629      	mov	r1, r5
 80151f8:	4620      	mov	r0, r4
 80151fa:	f8cd 9000 	str.w	r9, [sp]
 80151fe:	f7fe ffbd 	bl	801417c <rcl_publisher_init>
 8015202:	b930      	cbnz	r0, 8015212 <rclc_publisher_init+0x72>
 8015204:	b021      	add	sp, #132	@ 0x84
 8015206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801520a:	200b      	movs	r0, #11
 801520c:	b021      	add	sp, #132	@ 0x84
 801520e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015212:	9003      	str	r0, [sp, #12]
 8015214:	f000 f8fc 	bl	8015410 <rcutils_reset_error>
 8015218:	9803      	ldr	r0, [sp, #12]
 801521a:	b021      	add	sp, #132	@ 0x84
 801521c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015220 <rclc_service_init>:
 8015220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015224:	b09f      	sub	sp, #124	@ 0x7c
 8015226:	9e26      	ldr	r6, [sp, #152]	@ 0x98
 8015228:	2e00      	cmp	r6, #0
 801522a:	bf18      	it	ne
 801522c:	2b00      	cmpne	r3, #0
 801522e:	bf0c      	ite	eq
 8015230:	f04f 0c01 	moveq.w	ip, #1
 8015234:	f04f 0c00 	movne.w	ip, #0
 8015238:	2a00      	cmp	r2, #0
 801523a:	bf08      	it	eq
 801523c:	f04c 0c01 	orreq.w	ip, ip, #1
 8015240:	2900      	cmp	r1, #0
 8015242:	bf08      	it	eq
 8015244:	f04c 0c01 	orreq.w	ip, ip, #1
 8015248:	f1bc 0f00 	cmp.w	ip, #0
 801524c:	d11d      	bne.n	801528a <rclc_service_init+0x6a>
 801524e:	4604      	mov	r4, r0
 8015250:	b1d8      	cbz	r0, 801528a <rclc_service_init+0x6a>
 8015252:	f10d 0910 	add.w	r9, sp, #16
 8015256:	461f      	mov	r7, r3
 8015258:	4690      	mov	r8, r2
 801525a:	460d      	mov	r5, r1
 801525c:	f006 f9ec 	bl	801b638 <rcl_get_zero_initialized_service>
 8015260:	6020      	str	r0, [r4, #0]
 8015262:	4648      	mov	r0, r9
 8015264:	f006 fa80 	bl	801b768 <rcl_service_get_default_options>
 8015268:	4631      	mov	r1, r6
 801526a:	2250      	movs	r2, #80	@ 0x50
 801526c:	4648      	mov	r0, r9
 801526e:	f00d f8ce 	bl	802240e <memcpy>
 8015272:	463b      	mov	r3, r7
 8015274:	4642      	mov	r2, r8
 8015276:	4629      	mov	r1, r5
 8015278:	4620      	mov	r0, r4
 801527a:	f8cd 9000 	str.w	r9, [sp]
 801527e:	f006 f9e1 	bl	801b644 <rcl_service_init>
 8015282:	b930      	cbnz	r0, 8015292 <rclc_service_init+0x72>
 8015284:	b01f      	add	sp, #124	@ 0x7c
 8015286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801528a:	200b      	movs	r0, #11
 801528c:	b01f      	add	sp, #124	@ 0x7c
 801528e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015292:	9003      	str	r0, [sp, #12]
 8015294:	f000 f8bc 	bl	8015410 <rcutils_reset_error>
 8015298:	9803      	ldr	r0, [sp, #12]
 801529a:	b01f      	add	sp, #124	@ 0x7c
 801529c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080152a0 <rclc_subscription_init>:
 80152a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80152a4:	b0a1      	sub	sp, #132	@ 0x84
 80152a6:	9e28      	ldr	r6, [sp, #160]	@ 0xa0
 80152a8:	2e00      	cmp	r6, #0
 80152aa:	bf18      	it	ne
 80152ac:	2b00      	cmpne	r3, #0
 80152ae:	bf0c      	ite	eq
 80152b0:	f04f 0c01 	moveq.w	ip, #1
 80152b4:	f04f 0c00 	movne.w	ip, #0
 80152b8:	2a00      	cmp	r2, #0
 80152ba:	bf08      	it	eq
 80152bc:	f04c 0c01 	orreq.w	ip, ip, #1
 80152c0:	2900      	cmp	r1, #0
 80152c2:	bf08      	it	eq
 80152c4:	f04c 0c01 	orreq.w	ip, ip, #1
 80152c8:	f1bc 0f00 	cmp.w	ip, #0
 80152cc:	d11d      	bne.n	801530a <rclc_subscription_init+0x6a>
 80152ce:	4604      	mov	r4, r0
 80152d0:	b1d8      	cbz	r0, 801530a <rclc_subscription_init+0x6a>
 80152d2:	f10d 0910 	add.w	r9, sp, #16
 80152d6:	461f      	mov	r7, r3
 80152d8:	4690      	mov	r8, r2
 80152da:	460d      	mov	r5, r1
 80152dc:	f006 fad0 	bl	801b880 <rcl_get_zero_initialized_subscription>
 80152e0:	6020      	str	r0, [r4, #0]
 80152e2:	4648      	mov	r0, r9
 80152e4:	f006 fb80 	bl	801b9e8 <rcl_subscription_get_default_options>
 80152e8:	4631      	mov	r1, r6
 80152ea:	2250      	movs	r2, #80	@ 0x50
 80152ec:	4648      	mov	r0, r9
 80152ee:	f00d f88e 	bl	802240e <memcpy>
 80152f2:	463b      	mov	r3, r7
 80152f4:	4642      	mov	r2, r8
 80152f6:	4629      	mov	r1, r5
 80152f8:	4620      	mov	r0, r4
 80152fa:	f8cd 9000 	str.w	r9, [sp]
 80152fe:	f006 fac5 	bl	801b88c <rcl_subscription_init>
 8015302:	b930      	cbnz	r0, 8015312 <rclc_subscription_init+0x72>
 8015304:	b021      	add	sp, #132	@ 0x84
 8015306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801530a:	200b      	movs	r0, #11
 801530c:	b021      	add	sp, #132	@ 0x84
 801530e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015312:	9003      	str	r0, [sp, #12]
 8015314:	f000 f87c 	bl	8015410 <rcutils_reset_error>
 8015318:	9803      	ldr	r0, [sp, #12]
 801531a:	b021      	add	sp, #132	@ 0x84
 801531c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015320 <rclc_timer_init_default>:
 8015320:	b361      	cbz	r1, 801537c <rclc_timer_init_default+0x5c>
 8015322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015326:	4606      	mov	r6, r0
 8015328:	b08a      	sub	sp, #40	@ 0x28
 801532a:	b318      	cbz	r0, 8015374 <rclc_timer_init_default+0x54>
 801532c:	460d      	mov	r5, r1
 801532e:	4690      	mov	r8, r2
 8015330:	461f      	mov	r7, r3
 8015332:	f006 fdff 	bl	801bf34 <rcl_get_zero_initialized_timer>
 8015336:	68ac      	ldr	r4, [r5, #8]
 8015338:	f10d 0c0c 	add.w	ip, sp, #12
 801533c:	6030      	str	r0, [r6, #0]
 801533e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015340:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015344:	6823      	ldr	r3, [r4, #0]
 8015346:	462a      	mov	r2, r5
 8015348:	f105 010c 	add.w	r1, r5, #12
 801534c:	4630      	mov	r0, r6
 801534e:	f8cc 3000 	str.w	r3, [ip]
 8015352:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015354:	e9cd 8700 	strd	r8, r7, [sp]
 8015358:	9302      	str	r3, [sp, #8]
 801535a:	f006 fdf1 	bl	801bf40 <rcl_timer_init>
 801535e:	b910      	cbnz	r0, 8015366 <rclc_timer_init_default+0x46>
 8015360:	b00a      	add	sp, #40	@ 0x28
 8015362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015366:	9009      	str	r0, [sp, #36]	@ 0x24
 8015368:	f000 f852 	bl	8015410 <rcutils_reset_error>
 801536c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801536e:	b00a      	add	sp, #40	@ 0x28
 8015370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015374:	200b      	movs	r0, #11
 8015376:	b00a      	add	sp, #40	@ 0x28
 8015378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801537c:	200b      	movs	r0, #11
 801537e:	4770      	bx	lr

08015380 <__default_zero_allocate>:
 8015380:	f00c ba4e 	b.w	8021820 <calloc>

08015384 <__default_reallocate>:
 8015384:	f00c bbec 	b.w	8021b60 <realloc>

08015388 <__default_deallocate>:
 8015388:	f00c bac8 	b.w	802191c <free>

0801538c <__default_allocate>:
 801538c:	f00c babe 	b.w	802190c <malloc>

08015390 <rcutils_get_zero_initialized_allocator>:
 8015390:	b510      	push	{r4, lr}
 8015392:	4c05      	ldr	r4, [pc, #20]	@ (80153a8 <rcutils_get_zero_initialized_allocator+0x18>)
 8015394:	4686      	mov	lr, r0
 8015396:	4684      	mov	ip, r0
 8015398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801539a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801539e:	6823      	ldr	r3, [r4, #0]
 80153a0:	4670      	mov	r0, lr
 80153a2:	f8cc 3000 	str.w	r3, [ip]
 80153a6:	bd10      	pop	{r4, pc}
 80153a8:	080248a8 	.word	0x080248a8

080153ac <rcutils_get_default_allocator>:
 80153ac:	b510      	push	{r4, lr}
 80153ae:	4c05      	ldr	r4, [pc, #20]	@ (80153c4 <rcutils_get_default_allocator+0x18>)
 80153b0:	4686      	mov	lr, r0
 80153b2:	4684      	mov	ip, r0
 80153b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80153b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80153ba:	6823      	ldr	r3, [r4, #0]
 80153bc:	4670      	mov	r0, lr
 80153be:	f8cc 3000 	str.w	r3, [ip]
 80153c2:	bd10      	pop	{r4, pc}
 80153c4:	24000c94 	.word	0x24000c94

080153c8 <rcutils_allocator_is_valid>:
 80153c8:	b158      	cbz	r0, 80153e2 <rcutils_allocator_is_valid+0x1a>
 80153ca:	6803      	ldr	r3, [r0, #0]
 80153cc:	b143      	cbz	r3, 80153e0 <rcutils_allocator_is_valid+0x18>
 80153ce:	6843      	ldr	r3, [r0, #4]
 80153d0:	b133      	cbz	r3, 80153e0 <rcutils_allocator_is_valid+0x18>
 80153d2:	68c3      	ldr	r3, [r0, #12]
 80153d4:	b123      	cbz	r3, 80153e0 <rcutils_allocator_is_valid+0x18>
 80153d6:	6880      	ldr	r0, [r0, #8]
 80153d8:	3800      	subs	r0, #0
 80153da:	bf18      	it	ne
 80153dc:	2001      	movne	r0, #1
 80153de:	4770      	bx	lr
 80153e0:	4618      	mov	r0, r3
 80153e2:	4770      	bx	lr

080153e4 <rcutils_get_error_string>:
 80153e4:	4b06      	ldr	r3, [pc, #24]	@ (8015400 <rcutils_get_error_string+0x1c>)
 80153e6:	781b      	ldrb	r3, [r3, #0]
 80153e8:	b13b      	cbz	r3, 80153fa <rcutils_get_error_string+0x16>
 80153ea:	4b06      	ldr	r3, [pc, #24]	@ (8015404 <rcutils_get_error_string+0x20>)
 80153ec:	781a      	ldrb	r2, [r3, #0]
 80153ee:	b90a      	cbnz	r2, 80153f4 <rcutils_get_error_string+0x10>
 80153f0:	2201      	movs	r2, #1
 80153f2:	701a      	strb	r2, [r3, #0]
 80153f4:	4b04      	ldr	r3, [pc, #16]	@ (8015408 <rcutils_get_error_string+0x24>)
 80153f6:	7818      	ldrb	r0, [r3, #0]
 80153f8:	4770      	bx	lr
 80153fa:	4b04      	ldr	r3, [pc, #16]	@ (801540c <rcutils_get_error_string+0x28>)
 80153fc:	7818      	ldrb	r0, [r3, #0]
 80153fe:	4770      	bx	lr
 8015400:	240648f0 	.word	0x240648f0
 8015404:	24064909 	.word	0x24064909
 8015408:	24064908 	.word	0x24064908
 801540c:	080238b8 	.word	0x080238b8

08015410 <rcutils_reset_error>:
 8015410:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8015430 <rcutils_reset_error+0x20>
 8015414:	2300      	movs	r3, #0
 8015416:	4a08      	ldr	r2, [pc, #32]	@ (8015438 <rcutils_reset_error+0x28>)
 8015418:	4808      	ldr	r0, [pc, #32]	@ (801543c <rcutils_reset_error+0x2c>)
 801541a:	8013      	strh	r3, [r2, #0]
 801541c:	4908      	ldr	r1, [pc, #32]	@ (8015440 <rcutils_reset_error+0x30>)
 801541e:	7003      	strb	r3, [r0, #0]
 8015420:	700b      	strb	r3, [r1, #0]
 8015422:	ed82 7b02 	vstr	d7, [r2, #8]
 8015426:	4a07      	ldr	r2, [pc, #28]	@ (8015444 <rcutils_reset_error+0x34>)
 8015428:	7013      	strb	r3, [r2, #0]
 801542a:	4770      	bx	lr
 801542c:	f3af 8000 	nop.w
	...
 8015438:	240648f8 	.word	0x240648f8
 801543c:	24064909 	.word	0x24064909
 8015440:	24064908 	.word	0x24064908
 8015444:	240648f0 	.word	0x240648f0

08015448 <rcutils_system_time_now>:
 8015448:	b300      	cbz	r0, 801548c <rcutils_system_time_now+0x44>
 801544a:	b570      	push	{r4, r5, r6, lr}
 801544c:	b084      	sub	sp, #16
 801544e:	4604      	mov	r4, r0
 8015450:	2001      	movs	r0, #1
 8015452:	4669      	mov	r1, sp
 8015454:	f7ec ff24 	bl	80022a0 <clock_gettime>
 8015458:	e9dd 3100 	ldrd	r3, r1, [sp]
 801545c:	2900      	cmp	r1, #0
 801545e:	db12      	blt.n	8015486 <rcutils_system_time_now+0x3e>
 8015460:	ea53 0201 	orrs.w	r2, r3, r1
 8015464:	9d02      	ldr	r5, [sp, #8]
 8015466:	d101      	bne.n	801546c <rcutils_system_time_now+0x24>
 8015468:	2d00      	cmp	r5, #0
 801546a:	db0c      	blt.n	8015486 <rcutils_system_time_now+0x3e>
 801546c:	4e08      	ldr	r6, [pc, #32]	@ (8015490 <rcutils_system_time_now+0x48>)
 801546e:	2000      	movs	r0, #0
 8015470:	fba3 3206 	umull	r3, r2, r3, r6
 8015474:	195b      	adds	r3, r3, r5
 8015476:	fb06 2201 	mla	r2, r6, r1, r2
 801547a:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 801547e:	e9c4 3200 	strd	r3, r2, [r4]
 8015482:	b004      	add	sp, #16
 8015484:	bd70      	pop	{r4, r5, r6, pc}
 8015486:	2002      	movs	r0, #2
 8015488:	b004      	add	sp, #16
 801548a:	bd70      	pop	{r4, r5, r6, pc}
 801548c:	200b      	movs	r0, #11
 801548e:	4770      	bx	lr
 8015490:	3b9aca00 	.word	0x3b9aca00

08015494 <rcutils_steady_time_now>:
 8015494:	b300      	cbz	r0, 80154d8 <rcutils_steady_time_now+0x44>
 8015496:	b570      	push	{r4, r5, r6, lr}
 8015498:	b084      	sub	sp, #16
 801549a:	4604      	mov	r4, r0
 801549c:	2000      	movs	r0, #0
 801549e:	4669      	mov	r1, sp
 80154a0:	f7ec fefe 	bl	80022a0 <clock_gettime>
 80154a4:	e9dd 3100 	ldrd	r3, r1, [sp]
 80154a8:	2900      	cmp	r1, #0
 80154aa:	db12      	blt.n	80154d2 <rcutils_steady_time_now+0x3e>
 80154ac:	ea53 0201 	orrs.w	r2, r3, r1
 80154b0:	9d02      	ldr	r5, [sp, #8]
 80154b2:	d101      	bne.n	80154b8 <rcutils_steady_time_now+0x24>
 80154b4:	2d00      	cmp	r5, #0
 80154b6:	db0c      	blt.n	80154d2 <rcutils_steady_time_now+0x3e>
 80154b8:	4e08      	ldr	r6, [pc, #32]	@ (80154dc <rcutils_steady_time_now+0x48>)
 80154ba:	2000      	movs	r0, #0
 80154bc:	fba3 3206 	umull	r3, r2, r3, r6
 80154c0:	195b      	adds	r3, r3, r5
 80154c2:	fb06 2201 	mla	r2, r6, r1, r2
 80154c6:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80154ca:	e9c4 3200 	strd	r3, r2, [r4]
 80154ce:	b004      	add	sp, #16
 80154d0:	bd70      	pop	{r4, r5, r6, pc}
 80154d2:	2002      	movs	r0, #2
 80154d4:	b004      	add	sp, #16
 80154d6:	bd70      	pop	{r4, r5, r6, pc}
 80154d8:	200b      	movs	r0, #11
 80154da:	4770      	bx	lr
 80154dc:	3b9aca00 	.word	0x3b9aca00

080154e0 <rmw_get_default_publisher_options>:
 80154e0:	2200      	movs	r2, #0
 80154e2:	6002      	str	r2, [r0, #0]
 80154e4:	7102      	strb	r2, [r0, #4]
 80154e6:	4770      	bx	lr

080154e8 <rmw_uros_set_custom_transport>:
 80154e8:	b470      	push	{r4, r5, r6}
 80154ea:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 80154ee:	b162      	cbz	r2, 801550a <rmw_uros_set_custom_transport+0x22>
 80154f0:	b15b      	cbz	r3, 801550a <rmw_uros_set_custom_transport+0x22>
 80154f2:	b155      	cbz	r5, 801550a <rmw_uros_set_custom_transport+0x22>
 80154f4:	b14e      	cbz	r6, 801550a <rmw_uros_set_custom_transport+0x22>
 80154f6:	4c06      	ldr	r4, [pc, #24]	@ (8015510 <rmw_uros_set_custom_transport+0x28>)
 80154f8:	7020      	strb	r0, [r4, #0]
 80154fa:	2000      	movs	r0, #0
 80154fc:	6166      	str	r6, [r4, #20]
 80154fe:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8015502:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015506:	bc70      	pop	{r4, r5, r6}
 8015508:	4770      	bx	lr
 801550a:	200b      	movs	r0, #11
 801550c:	bc70      	pop	{r4, r5, r6}
 801550e:	4770      	bx	lr
 8015510:	2406490c 	.word	0x2406490c

08015514 <rmw_uros_ping_agent>:
 8015514:	4b1f      	ldr	r3, [pc, #124]	@ (8015594 <rmw_uros_ping_agent+0x80>)
 8015516:	7b1a      	ldrb	r2, [r3, #12]
 8015518:	b570      	push	{r4, r5, r6, lr}
 801551a:	4605      	mov	r5, r0
 801551c:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8015520:	460e      	mov	r6, r1
 8015522:	b192      	cbz	r2, 801554a <rmw_uros_ping_agent+0x36>
 8015524:	681c      	ldr	r4, [r3, #0]
 8015526:	b184      	cbz	r4, 801554a <rmw_uros_ping_agent+0x36>
 8015528:	68a0      	ldr	r0, [r4, #8]
 801552a:	4632      	mov	r2, r6
 801552c:	4629      	mov	r1, r5
 801552e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015532:	f001 ff0f 	bl	8017354 <uxr_ping_agent_session>
 8015536:	6864      	ldr	r4, [r4, #4]
 8015538:	f080 0301 	eor.w	r3, r0, #1
 801553c:	b2d8      	uxtb	r0, r3
 801553e:	b10c      	cbz	r4, 8015544 <rmw_uros_ping_agent+0x30>
 8015540:	2800      	cmp	r0, #0
 8015542:	d1f1      	bne.n	8015528 <rmw_uros_ping_agent+0x14>
 8015544:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8015548:	bd70      	pop	{r4, r5, r6, pc}
 801554a:	4b13      	ldr	r3, [pc, #76]	@ (8015598 <rmw_uros_ping_agent+0x84>)
 801554c:	2100      	movs	r1, #0
 801554e:	781a      	ldrb	r2, [r3, #0]
 8015550:	6918      	ldr	r0, [r3, #16]
 8015552:	f88d 2200 	strb.w	r2, [sp, #512]	@ 0x200
 8015556:	685a      	ldr	r2, [r3, #4]
 8015558:	909c      	str	r0, [sp, #624]	@ 0x270
 801555a:	92a3      	str	r2, [sp, #652]	@ 0x28c
 801555c:	6958      	ldr	r0, [r3, #20]
 801555e:	68da      	ldr	r2, [r3, #12]
 8015560:	689b      	ldr	r3, [r3, #8]
 8015562:	929b      	str	r2, [sp, #620]	@ 0x26c
 8015564:	466a      	mov	r2, sp
 8015566:	909d      	str	r0, [sp, #628]	@ 0x274
 8015568:	4608      	mov	r0, r1
 801556a:	939a      	str	r3, [sp, #616]	@ 0x268
 801556c:	f000 f9c6 	bl	80158fc <rmw_uxrce_transport_init>
 8015570:	2800      	cmp	r0, #0
 8015572:	d1e7      	bne.n	8015544 <rmw_uros_ping_agent+0x30>
 8015574:	4632      	mov	r2, r6
 8015576:	4629      	mov	r1, r5
 8015578:	a89e      	add	r0, sp, #632	@ 0x278
 801557a:	f001 ff37 	bl	80173ec <uxr_ping_agent_attempts>
 801557e:	4604      	mov	r4, r0
 8015580:	4668      	mov	r0, sp
 8015582:	f001 feb3 	bl	80172ec <uxr_close_custom_transport>
 8015586:	f084 0301 	eor.w	r3, r4, #1
 801558a:	b2d8      	uxtb	r0, r3
 801558c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8015590:	bd70      	pop	{r4, r5, r6, pc}
 8015592:	bf00      	nop
 8015594:	24069224 	.word	0x24069224
 8015598:	2406490c 	.word	0x2406490c

0801559c <flush_session>:
 801559c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 801559e:	f002 bcb7 	b.w	8017f10 <uxr_run_session_until_confirm_delivery>
 80155a2:	bf00      	nop

080155a4 <rmw_publish>:
 80155a4:	2800      	cmp	r0, #0
 80155a6:	d053      	beq.n	8015650 <rmw_publish+0xac>
 80155a8:	b570      	push	{r4, r5, r6, lr}
 80155aa:	460d      	mov	r5, r1
 80155ac:	b08e      	sub	sp, #56	@ 0x38
 80155ae:	2900      	cmp	r1, #0
 80155b0:	d04b      	beq.n	801564a <rmw_publish+0xa6>
 80155b2:	4604      	mov	r4, r0
 80155b4:	6800      	ldr	r0, [r0, #0]
 80155b6:	f000 fdcf 	bl	8016158 <is_uxrce_rmw_identifier_valid>
 80155ba:	2800      	cmp	r0, #0
 80155bc:	d045      	beq.n	801564a <rmw_publish+0xa6>
 80155be:	6866      	ldr	r6, [r4, #4]
 80155c0:	2e00      	cmp	r6, #0
 80155c2:	d042      	beq.n	801564a <rmw_publish+0xa6>
 80155c4:	69b4      	ldr	r4, [r6, #24]
 80155c6:	4628      	mov	r0, r5
 80155c8:	6923      	ldr	r3, [r4, #16]
 80155ca:	4798      	blx	r3
 80155cc:	69f3      	ldr	r3, [r6, #28]
 80155ce:	9005      	str	r0, [sp, #20]
 80155d0:	b113      	cbz	r3, 80155d8 <rmw_publish+0x34>
 80155d2:	a805      	add	r0, sp, #20
 80155d4:	4798      	blx	r3
 80155d6:	9805      	ldr	r0, [sp, #20]
 80155d8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80155dc:	691b      	ldr	r3, [r3, #16]
 80155de:	9000      	str	r0, [sp, #0]
 80155e0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80155e4:	6972      	ldr	r2, [r6, #20]
 80155e6:	ab06      	add	r3, sp, #24
 80155e8:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 80155ea:	f003 ff8b 	bl	8019504 <uxr_prepare_output_stream>
 80155ee:	b1d8      	cbz	r0, 8015628 <rmw_publish+0x84>
 80155f0:	68a3      	ldr	r3, [r4, #8]
 80155f2:	a906      	add	r1, sp, #24
 80155f4:	4628      	mov	r0, r5
 80155f6:	4798      	blx	r3
 80155f8:	6a33      	ldr	r3, [r6, #32]
 80155fa:	4604      	mov	r4, r0
 80155fc:	b10b      	cbz	r3, 8015602 <rmw_publish+0x5e>
 80155fe:	a806      	add	r0, sp, #24
 8015600:	4798      	blx	r3
 8015602:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 8015606:	2b01      	cmp	r3, #1
 8015608:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801560c:	d022      	beq.n	8015654 <rmw_publish+0xb0>
 801560e:	6918      	ldr	r0, [r3, #16]
 8015610:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 8015612:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015616:	f002 fc7b 	bl	8017f10 <uxr_run_session_until_confirm_delivery>
 801561a:	4020      	ands	r0, r4
 801561c:	b2c4      	uxtb	r4, r0
 801561e:	f084 0001 	eor.w	r0, r4, #1
 8015622:	b2c0      	uxtb	r0, r0
 8015624:	b00e      	add	sp, #56	@ 0x38
 8015626:	bd70      	pop	{r4, r5, r6, pc}
 8015628:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801562c:	6918      	ldr	r0, [r3, #16]
 801562e:	9b05      	ldr	r3, [sp, #20]
 8015630:	9602      	str	r6, [sp, #8]
 8015632:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015636:	9300      	str	r3, [sp, #0]
 8015638:	4b09      	ldr	r3, [pc, #36]	@ (8015660 <rmw_publish+0xbc>)
 801563a:	9301      	str	r3, [sp, #4]
 801563c:	ab06      	add	r3, sp, #24
 801563e:	6972      	ldr	r2, [r6, #20]
 8015640:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8015642:	f003 ff8f 	bl	8019564 <uxr_prepare_output_stream_fragmented>
 8015646:	2800      	cmp	r0, #0
 8015648:	d1d2      	bne.n	80155f0 <rmw_publish+0x4c>
 801564a:	2001      	movs	r0, #1
 801564c:	b00e      	add	sp, #56	@ 0x38
 801564e:	bd70      	pop	{r4, r5, r6, pc}
 8015650:	2001      	movs	r0, #1
 8015652:	4770      	bx	lr
 8015654:	6918      	ldr	r0, [r3, #16]
 8015656:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801565a:	f002 f89f 	bl	801779c <uxr_flash_output_streams>
 801565e:	e7de      	b.n	801561e <rmw_publish+0x7a>
 8015660:	0801559d 	.word	0x0801559d

08015664 <rmw_create_publisher>:
 8015664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015668:	b087      	sub	sp, #28
 801566a:	2800      	cmp	r0, #0
 801566c:	f000 80d2 	beq.w	8015814 <rmw_create_publisher+0x1b0>
 8015670:	460e      	mov	r6, r1
 8015672:	2900      	cmp	r1, #0
 8015674:	f000 80ce 	beq.w	8015814 <rmw_create_publisher+0x1b0>
 8015678:	4604      	mov	r4, r0
 801567a:	6800      	ldr	r0, [r0, #0]
 801567c:	4615      	mov	r5, r2
 801567e:	461f      	mov	r7, r3
 8015680:	f000 fd6a 	bl	8016158 <is_uxrce_rmw_identifier_valid>
 8015684:	f080 0001 	eor.w	r0, r0, #1
 8015688:	b2c0      	uxtb	r0, r0
 801568a:	2800      	cmp	r0, #0
 801568c:	f040 80c2 	bne.w	8015814 <rmw_create_publisher+0x1b0>
 8015690:	2d00      	cmp	r5, #0
 8015692:	f000 80bf 	beq.w	8015814 <rmw_create_publisher+0x1b0>
 8015696:	782b      	ldrb	r3, [r5, #0]
 8015698:	2b00      	cmp	r3, #0
 801569a:	f000 80bb 	beq.w	8015814 <rmw_create_publisher+0x1b0>
 801569e:	2f00      	cmp	r7, #0
 80156a0:	f000 80b8 	beq.w	8015814 <rmw_create_publisher+0x1b0>
 80156a4:	485e      	ldr	r0, [pc, #376]	@ (8015820 <rmw_create_publisher+0x1bc>)
 80156a6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80156aa:	f008 ff73 	bl	801e594 <get_memory>
 80156ae:	2800      	cmp	r0, #0
 80156b0:	f000 80b0 	beq.w	8015814 <rmw_create_publisher+0x1b0>
 80156b4:	6884      	ldr	r4, [r0, #8]
 80156b6:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 80156ba:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 80156be:	f008 ffd1 	bl	801e664 <rmw_get_implementation_identifier>
 80156c2:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 80156c6:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 80156ca:	4628      	mov	r0, r5
 80156cc:	f7ea fe12 	bl	80002f4 <strlen>
 80156d0:	3001      	adds	r0, #1
 80156d2:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 80156d6:	283c      	cmp	r0, #60	@ 0x3c
 80156d8:	f200 808f 	bhi.w	80157fa <rmw_create_publisher+0x196>
 80156dc:	462b      	mov	r3, r5
 80156de:	4a51      	ldr	r2, [pc, #324]	@ (8015824 <rmw_create_publisher+0x1c0>)
 80156e0:	213c      	movs	r1, #60	@ 0x3c
 80156e2:	4650      	mov	r0, sl
 80156e4:	f00c fc06 	bl	8021ef4 <sniprintf>
 80156e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80156ec:	4639      	mov	r1, r7
 80156ee:	2250      	movs	r2, #80	@ 0x50
 80156f0:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80156f2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80156f6:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 80156fa:	f00c fe88 	bl	802240e <memcpy>
 80156fe:	7a3b      	ldrb	r3, [r7, #8]
 8015700:	4630      	mov	r0, r6
 8015702:	4949      	ldr	r1, [pc, #292]	@ (8015828 <rmw_create_publisher+0x1c4>)
 8015704:	2b02      	cmp	r3, #2
 8015706:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801570a:	bf0c      	ite	eq
 801570c:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8015710:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 8015714:	67a3      	str	r3, [r4, #120]	@ 0x78
 8015716:	2300      	movs	r3, #0
 8015718:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801571c:	f000 fd98 	bl	8016250 <get_message_typesupport_handle>
 8015720:	2800      	cmp	r0, #0
 8015722:	d06a      	beq.n	80157fa <rmw_create_publisher+0x196>
 8015724:	6842      	ldr	r2, [r0, #4]
 8015726:	61a2      	str	r2, [r4, #24]
 8015728:	2a00      	cmp	r2, #0
 801572a:	d066      	beq.n	80157fa <rmw_create_publisher+0x196>
 801572c:	4629      	mov	r1, r5
 801572e:	463b      	mov	r3, r7
 8015730:	4648      	mov	r0, r9
 8015732:	f009 fa03 	bl	801eb3c <create_topic>
 8015736:	6260      	str	r0, [r4, #36]	@ 0x24
 8015738:	2800      	cmp	r0, #0
 801573a:	d062      	beq.n	8015802 <rmw_create_publisher+0x19e>
 801573c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015740:	2103      	movs	r1, #3
 8015742:	2506      	movs	r5, #6
 8015744:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015748:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 801574c:	1c42      	adds	r2, r0, #1
 801574e:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 8015752:	f001 fdcf 	bl	80172f4 <uxr_object_id>
 8015756:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 801575a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801575e:	6120      	str	r0, [r4, #16]
 8015760:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 8015764:	6910      	ldr	r0, [r2, #16]
 8015766:	9500      	str	r5, [sp, #0]
 8015768:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801576c:	6819      	ldr	r1, [r3, #0]
 801576e:	6922      	ldr	r2, [r4, #16]
 8015770:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015774:	f001 fb78 	bl	8016e68 <uxr_buffer_create_publisher_bin>
 8015778:	4602      	mov	r2, r0
 801577a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801577e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8015782:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015786:	f000 fbd5 	bl	8015f34 <run_xrce_session>
 801578a:	b3b0      	cbz	r0, 80157fa <rmw_create_publisher+0x196>
 801578c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015790:	2105      	movs	r1, #5
 8015792:	f10d 0a10 	add.w	sl, sp, #16
 8015796:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801579a:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 801579e:	1c42      	adds	r2, r0, #1
 80157a0:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 80157a4:	f001 fda6 	bl	80172f4 <uxr_object_id>
 80157a8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80157ac:	4639      	mov	r1, r7
 80157ae:	6160      	str	r0, [r4, #20]
 80157b0:	691e      	ldr	r6, [r3, #16]
 80157b2:	4650      	mov	r0, sl
 80157b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80157b8:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 80157bc:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 80157c0:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 80157c4:	f000 fbd2 	bl	8015f6c <convert_qos_profile>
 80157c8:	9503      	str	r5, [sp, #12]
 80157ca:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80157ce:	9001      	str	r0, [sp, #4]
 80157d0:	4630      	mov	r0, r6
 80157d2:	f8ad 1008 	strh.w	r1, [sp, #8]
 80157d6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80157da:	9300      	str	r3, [sp, #0]
 80157dc:	6839      	ldr	r1, [r7, #0]
 80157de:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80157e2:	f001 fba1 	bl	8016f28 <uxr_buffer_create_datawriter_bin>
 80157e6:	4602      	mov	r2, r0
 80157e8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80157ec:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80157f0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80157f4:	f000 fb9e 	bl	8015f34 <run_xrce_session>
 80157f8:	b970      	cbnz	r0, 8015818 <rmw_create_publisher+0x1b4>
 80157fa:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80157fc:	b108      	cbz	r0, 8015802 <rmw_create_publisher+0x19e>
 80157fe:	f000 fa8b 	bl	8015d18 <rmw_uxrce_fini_topic_memory>
 8015802:	4640      	mov	r0, r8
 8015804:	f04f 0800 	mov.w	r8, #0
 8015808:	f000 fa2e 	bl	8015c68 <rmw_uxrce_fini_publisher_memory>
 801580c:	4640      	mov	r0, r8
 801580e:	b007      	add	sp, #28
 8015810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015814:	f04f 0800 	mov.w	r8, #0
 8015818:	4640      	mov	r0, r8
 801581a:	b007      	add	sp, #28
 801581c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015820:	24069204 	.word	0x24069204
 8015824:	080248cc 	.word	0x080248cc
 8015828:	08023598 	.word	0x08023598

0801582c <rmw_publisher_get_actual_qos>:
 801582c:	b178      	cbz	r0, 801584e <rmw_publisher_get_actual_qos+0x22>
 801582e:	b510      	push	{r4, lr}
 8015830:	fab1 f481 	clz	r4, r1
 8015834:	0964      	lsrs	r4, r4, #5
 8015836:	b141      	cbz	r1, 801584a <rmw_publisher_get_actual_qos+0x1e>
 8015838:	6843      	ldr	r3, [r0, #4]
 801583a:	2250      	movs	r2, #80	@ 0x50
 801583c:	4608      	mov	r0, r1
 801583e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8015842:	f00c fde4 	bl	802240e <memcpy>
 8015846:	4620      	mov	r0, r4
 8015848:	bd10      	pop	{r4, pc}
 801584a:	200b      	movs	r0, #11
 801584c:	bd10      	pop	{r4, pc}
 801584e:	200b      	movs	r0, #11
 8015850:	4770      	bx	lr
 8015852:	bf00      	nop

08015854 <rmw_destroy_publisher>:
 8015854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015858:	b128      	cbz	r0, 8015866 <rmw_destroy_publisher+0x12>
 801585a:	4604      	mov	r4, r0
 801585c:	6800      	ldr	r0, [r0, #0]
 801585e:	460d      	mov	r5, r1
 8015860:	f000 fc7a 	bl	8016158 <is_uxrce_rmw_identifier_valid>
 8015864:	b918      	cbnz	r0, 801586e <rmw_destroy_publisher+0x1a>
 8015866:	2401      	movs	r4, #1
 8015868:	4620      	mov	r0, r4
 801586a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801586e:	6863      	ldr	r3, [r4, #4]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d0f8      	beq.n	8015866 <rmw_destroy_publisher+0x12>
 8015874:	fab5 f485 	clz	r4, r5
 8015878:	0964      	lsrs	r4, r4, #5
 801587a:	2d00      	cmp	r5, #0
 801587c:	d0f3      	beq.n	8015866 <rmw_destroy_publisher+0x12>
 801587e:	6828      	ldr	r0, [r5, #0]
 8015880:	f000 fc6a 	bl	8016158 <is_uxrce_rmw_identifier_valid>
 8015884:	2800      	cmp	r0, #0
 8015886:	d0ee      	beq.n	8015866 <rmw_destroy_publisher+0x12>
 8015888:	686e      	ldr	r6, [r5, #4]
 801588a:	2e00      	cmp	r6, #0
 801588c:	d0eb      	beq.n	8015866 <rmw_destroy_publisher+0x12>
 801588e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8015890:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 8015894:	f009 f9a2 	bl	801ebdc <destroy_topic>
 8015898:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801589c:	6972      	ldr	r2, [r6, #20]
 801589e:	6918      	ldr	r0, [r3, #16]
 80158a0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80158a4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80158a8:	6819      	ldr	r1, [r3, #0]
 80158aa:	f001 fa29 	bl	8016d00 <uxr_buffer_delete_entity>
 80158ae:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80158b2:	4680      	mov	r8, r0
 80158b4:	6932      	ldr	r2, [r6, #16]
 80158b6:	6918      	ldr	r0, [r3, #16]
 80158b8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80158bc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80158c0:	6819      	ldr	r1, [r3, #0]
 80158c2:	f001 fa1d 	bl	8016d00 <uxr_buffer_delete_entity>
 80158c6:	4606      	mov	r6, r0
 80158c8:	6938      	ldr	r0, [r7, #16]
 80158ca:	4642      	mov	r2, r8
 80158cc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80158d0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80158d4:	f000 fb2e 	bl	8015f34 <run_xrce_session>
 80158d8:	693f      	ldr	r7, [r7, #16]
 80158da:	4632      	mov	r2, r6
 80158dc:	4606      	mov	r6, r0
 80158de:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80158e2:	4638      	mov	r0, r7
 80158e4:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 80158e8:	f000 fb24 	bl	8015f34 <run_xrce_session>
 80158ec:	b126      	cbz	r6, 80158f8 <rmw_destroy_publisher+0xa4>
 80158ee:	b118      	cbz	r0, 80158f8 <rmw_destroy_publisher+0xa4>
 80158f0:	4628      	mov	r0, r5
 80158f2:	f000 f9b9 	bl	8015c68 <rmw_uxrce_fini_publisher_memory>
 80158f6:	e7b7      	b.n	8015868 <rmw_destroy_publisher+0x14>
 80158f8:	2402      	movs	r4, #2
 80158fa:	e7f9      	b.n	80158f0 <rmw_destroy_publisher+0x9c>

080158fc <rmw_uxrce_transport_init>:
 80158fc:	b508      	push	{r3, lr}
 80158fe:	b108      	cbz	r0, 8015904 <rmw_uxrce_transport_init+0x8>
 8015900:	f100 0210 	add.w	r2, r0, #16
 8015904:	b139      	cbz	r1, 8015916 <rmw_uxrce_transport_init+0x1a>
 8015906:	6949      	ldr	r1, [r1, #20]
 8015908:	4610      	mov	r0, r2
 801590a:	f001 fcbb 	bl	8017284 <uxr_init_custom_transport>
 801590e:	f080 0001 	eor.w	r0, r0, #1
 8015912:	b2c0      	uxtb	r0, r0
 8015914:	bd08      	pop	{r3, pc}
 8015916:	4b04      	ldr	r3, [pc, #16]	@ (8015928 <rmw_uxrce_transport_init+0x2c>)
 8015918:	4610      	mov	r0, r2
 801591a:	6859      	ldr	r1, [r3, #4]
 801591c:	f001 fcb2 	bl	8017284 <uxr_init_custom_transport>
 8015920:	f080 0001 	eor.w	r0, r0, #1
 8015924:	b2c0      	uxtb	r0, r0
 8015926:	bd08      	pop	{r3, pc}
 8015928:	2406490c 	.word	0x2406490c

0801592c <rmw_uros_epoch_nanos>:
 801592c:	4b05      	ldr	r3, [pc, #20]	@ (8015944 <rmw_uros_epoch_nanos+0x18>)
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	b123      	cbz	r3, 801593c <rmw_uros_epoch_nanos+0x10>
 8015932:	6898      	ldr	r0, [r3, #8]
 8015934:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015938:	f001 bf26 	b.w	8017788 <uxr_epoch_nanos>
 801593c:	2000      	movs	r0, #0
 801593e:	2100      	movs	r1, #0
 8015940:	4770      	bx	lr
 8015942:	bf00      	nop
 8015944:	24069224 	.word	0x24069224

08015948 <rmw_uros_sync_session>:
 8015948:	b508      	push	{r3, lr}
 801594a:	4b07      	ldr	r3, [pc, #28]	@ (8015968 <rmw_uros_sync_session+0x20>)
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	b14b      	cbz	r3, 8015964 <rmw_uros_sync_session+0x1c>
 8015950:	4601      	mov	r1, r0
 8015952:	6898      	ldr	r0, [r3, #8]
 8015954:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015958:	f002 fb56 	bl	8018008 <uxr_sync_session>
 801595c:	f080 0001 	eor.w	r0, r0, #1
 8015960:	b2c0      	uxtb	r0, r0
 8015962:	bd08      	pop	{r3, pc}
 8015964:	2001      	movs	r0, #1
 8015966:	bd08      	pop	{r3, pc}
 8015968:	24069224 	.word	0x24069224

0801596c <rmw_uxrce_init_service_memory>:
 801596c:	b1e2      	cbz	r2, 80159a8 <rmw_uxrce_init_service_memory+0x3c>
 801596e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015972:	7b05      	ldrb	r5, [r0, #12]
 8015974:	4606      	mov	r6, r0
 8015976:	b9ad      	cbnz	r5, 80159a4 <rmw_uxrce_init_service_memory+0x38>
 8015978:	23c8      	movs	r3, #200	@ 0xc8
 801597a:	4617      	mov	r7, r2
 801597c:	460c      	mov	r4, r1
 801597e:	46a8      	mov	r8, r5
 8015980:	6083      	str	r3, [r0, #8]
 8015982:	f240 1301 	movw	r3, #257	@ 0x101
 8015986:	e9c0 5500 	strd	r5, r5, [r0]
 801598a:	8183      	strh	r3, [r0, #12]
 801598c:	3501      	adds	r5, #1
 801598e:	4621      	mov	r1, r4
 8015990:	4630      	mov	r0, r6
 8015992:	f008 fe0f 	bl	801e5b4 <put_memory>
 8015996:	42af      	cmp	r7, r5
 8015998:	60a4      	str	r4, [r4, #8]
 801599a:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 801599e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 80159a2:	d1f3      	bne.n	801598c <rmw_uxrce_init_service_memory+0x20>
 80159a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159a8:	4770      	bx	lr
 80159aa:	bf00      	nop

080159ac <rmw_uxrce_init_client_memory>:
 80159ac:	b1e2      	cbz	r2, 80159e8 <rmw_uxrce_init_client_memory+0x3c>
 80159ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159b2:	7b05      	ldrb	r5, [r0, #12]
 80159b4:	4606      	mov	r6, r0
 80159b6:	b9ad      	cbnz	r5, 80159e4 <rmw_uxrce_init_client_memory+0x38>
 80159b8:	23c8      	movs	r3, #200	@ 0xc8
 80159ba:	4617      	mov	r7, r2
 80159bc:	460c      	mov	r4, r1
 80159be:	46a8      	mov	r8, r5
 80159c0:	6083      	str	r3, [r0, #8]
 80159c2:	f240 1301 	movw	r3, #257	@ 0x101
 80159c6:	e9c0 5500 	strd	r5, r5, [r0]
 80159ca:	8183      	strh	r3, [r0, #12]
 80159cc:	3501      	adds	r5, #1
 80159ce:	4621      	mov	r1, r4
 80159d0:	4630      	mov	r0, r6
 80159d2:	f008 fdef 	bl	801e5b4 <put_memory>
 80159d6:	42af      	cmp	r7, r5
 80159d8:	60a4      	str	r4, [r4, #8]
 80159da:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 80159de:	f804 8cbc 	strb.w	r8, [r4, #-188]
 80159e2:	d1f3      	bne.n	80159cc <rmw_uxrce_init_client_memory+0x20>
 80159e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159e8:	4770      	bx	lr
 80159ea:	bf00      	nop

080159ec <rmw_uxrce_init_publisher_memory>:
 80159ec:	b1e2      	cbz	r2, 8015a28 <rmw_uxrce_init_publisher_memory+0x3c>
 80159ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159f2:	7b05      	ldrb	r5, [r0, #12]
 80159f4:	4606      	mov	r6, r0
 80159f6:	b9ad      	cbnz	r5, 8015a24 <rmw_uxrce_init_publisher_memory+0x38>
 80159f8:	23d8      	movs	r3, #216	@ 0xd8
 80159fa:	4617      	mov	r7, r2
 80159fc:	460c      	mov	r4, r1
 80159fe:	46a8      	mov	r8, r5
 8015a00:	6083      	str	r3, [r0, #8]
 8015a02:	f240 1301 	movw	r3, #257	@ 0x101
 8015a06:	e9c0 5500 	strd	r5, r5, [r0]
 8015a0a:	8183      	strh	r3, [r0, #12]
 8015a0c:	3501      	adds	r5, #1
 8015a0e:	4621      	mov	r1, r4
 8015a10:	4630      	mov	r0, r6
 8015a12:	f008 fdcf 	bl	801e5b4 <put_memory>
 8015a16:	42af      	cmp	r7, r5
 8015a18:	60a4      	str	r4, [r4, #8]
 8015a1a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8015a1e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8015a22:	d1f3      	bne.n	8015a0c <rmw_uxrce_init_publisher_memory+0x20>
 8015a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a28:	4770      	bx	lr
 8015a2a:	bf00      	nop

08015a2c <rmw_uxrce_init_subscription_memory>:
 8015a2c:	b1e2      	cbz	r2, 8015a68 <rmw_uxrce_init_subscription_memory+0x3c>
 8015a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a32:	7b05      	ldrb	r5, [r0, #12]
 8015a34:	4606      	mov	r6, r0
 8015a36:	b9ad      	cbnz	r5, 8015a64 <rmw_uxrce_init_subscription_memory+0x38>
 8015a38:	23d8      	movs	r3, #216	@ 0xd8
 8015a3a:	4617      	mov	r7, r2
 8015a3c:	460c      	mov	r4, r1
 8015a3e:	46a8      	mov	r8, r5
 8015a40:	6083      	str	r3, [r0, #8]
 8015a42:	f240 1301 	movw	r3, #257	@ 0x101
 8015a46:	e9c0 5500 	strd	r5, r5, [r0]
 8015a4a:	8183      	strh	r3, [r0, #12]
 8015a4c:	3501      	adds	r5, #1
 8015a4e:	4621      	mov	r1, r4
 8015a50:	4630      	mov	r0, r6
 8015a52:	f008 fdaf 	bl	801e5b4 <put_memory>
 8015a56:	42af      	cmp	r7, r5
 8015a58:	60a4      	str	r4, [r4, #8]
 8015a5a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8015a5e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8015a62:	d1f3      	bne.n	8015a4c <rmw_uxrce_init_subscription_memory+0x20>
 8015a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a68:	4770      	bx	lr
 8015a6a:	bf00      	nop

08015a6c <rmw_uxrce_init_node_memory>:
 8015a6c:	b1e2      	cbz	r2, 8015aa8 <rmw_uxrce_init_node_memory+0x3c>
 8015a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a72:	7b05      	ldrb	r5, [r0, #12]
 8015a74:	4606      	mov	r6, r0
 8015a76:	b9ad      	cbnz	r5, 8015aa4 <rmw_uxrce_init_node_memory+0x38>
 8015a78:	23a4      	movs	r3, #164	@ 0xa4
 8015a7a:	4617      	mov	r7, r2
 8015a7c:	460c      	mov	r4, r1
 8015a7e:	46a8      	mov	r8, r5
 8015a80:	6083      	str	r3, [r0, #8]
 8015a82:	f240 1301 	movw	r3, #257	@ 0x101
 8015a86:	e9c0 5500 	strd	r5, r5, [r0]
 8015a8a:	8183      	strh	r3, [r0, #12]
 8015a8c:	3501      	adds	r5, #1
 8015a8e:	4621      	mov	r1, r4
 8015a90:	4630      	mov	r0, r6
 8015a92:	f008 fd8f 	bl	801e5b4 <put_memory>
 8015a96:	42af      	cmp	r7, r5
 8015a98:	60a4      	str	r4, [r4, #8]
 8015a9a:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8015a9e:	f804 8c98 	strb.w	r8, [r4, #-152]
 8015aa2:	d1f3      	bne.n	8015a8c <rmw_uxrce_init_node_memory+0x20>
 8015aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015aa8:	4770      	bx	lr
 8015aaa:	bf00      	nop

08015aac <rmw_uxrce_init_session_memory>:
 8015aac:	b1ea      	cbz	r2, 8015aea <rmw_uxrce_init_session_memory+0x3e>
 8015aae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ab2:	7b05      	ldrb	r5, [r0, #12]
 8015ab4:	4606      	mov	r6, r0
 8015ab6:	b9b5      	cbnz	r5, 8015ae6 <rmw_uxrce_init_session_memory+0x3a>
 8015ab8:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8015abc:	f240 1301 	movw	r3, #257	@ 0x101
 8015ac0:	4617      	mov	r7, r2
 8015ac2:	460c      	mov	r4, r1
 8015ac4:	46a9      	mov	r9, r5
 8015ac6:	f8c0 8008 	str.w	r8, [r0, #8]
 8015aca:	8183      	strh	r3, [r0, #12]
 8015acc:	e9c0 5500 	strd	r5, r5, [r0]
 8015ad0:	3501      	adds	r5, #1
 8015ad2:	4621      	mov	r1, r4
 8015ad4:	4630      	mov	r0, r6
 8015ad6:	f008 fd6d 	bl	801e5b4 <put_memory>
 8015ada:	42af      	cmp	r7, r5
 8015adc:	60a4      	str	r4, [r4, #8]
 8015ade:	f884 900c 	strb.w	r9, [r4, #12]
 8015ae2:	4444      	add	r4, r8
 8015ae4:	d1f4      	bne.n	8015ad0 <rmw_uxrce_init_session_memory+0x24>
 8015ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015aea:	4770      	bx	lr

08015aec <rmw_uxrce_init_topic_memory>:
 8015aec:	b1e2      	cbz	r2, 8015b28 <rmw_uxrce_init_topic_memory+0x3c>
 8015aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015af2:	7b05      	ldrb	r5, [r0, #12]
 8015af4:	4606      	mov	r6, r0
 8015af6:	b9ad      	cbnz	r5, 8015b24 <rmw_uxrce_init_topic_memory+0x38>
 8015af8:	231c      	movs	r3, #28
 8015afa:	4617      	mov	r7, r2
 8015afc:	460c      	mov	r4, r1
 8015afe:	46a8      	mov	r8, r5
 8015b00:	6083      	str	r3, [r0, #8]
 8015b02:	f240 1301 	movw	r3, #257	@ 0x101
 8015b06:	e9c0 5500 	strd	r5, r5, [r0]
 8015b0a:	8183      	strh	r3, [r0, #12]
 8015b0c:	3501      	adds	r5, #1
 8015b0e:	4621      	mov	r1, r4
 8015b10:	4630      	mov	r0, r6
 8015b12:	f008 fd4f 	bl	801e5b4 <put_memory>
 8015b16:	42af      	cmp	r7, r5
 8015b18:	60a4      	str	r4, [r4, #8]
 8015b1a:	f104 041c 	add.w	r4, r4, #28
 8015b1e:	f804 8c10 	strb.w	r8, [r4, #-16]
 8015b22:	d1f3      	bne.n	8015b0c <rmw_uxrce_init_topic_memory+0x20>
 8015b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b28:	4770      	bx	lr
 8015b2a:	bf00      	nop

08015b2c <rmw_uxrce_init_static_input_buffer_memory>:
 8015b2c:	b1ea      	cbz	r2, 8015b6a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8015b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b32:	7b05      	ldrb	r5, [r0, #12]
 8015b34:	4606      	mov	r6, r0
 8015b36:	b9b5      	cbnz	r5, 8015b66 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8015b38:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8015b3c:	4617      	mov	r7, r2
 8015b3e:	460c      	mov	r4, r1
 8015b40:	46a8      	mov	r8, r5
 8015b42:	6083      	str	r3, [r0, #8]
 8015b44:	f240 1301 	movw	r3, #257	@ 0x101
 8015b48:	e9c0 5500 	strd	r5, r5, [r0]
 8015b4c:	8183      	strh	r3, [r0, #12]
 8015b4e:	3501      	adds	r5, #1
 8015b50:	4621      	mov	r1, r4
 8015b52:	4630      	mov	r0, r6
 8015b54:	f008 fd2e 	bl	801e5b4 <put_memory>
 8015b58:	42af      	cmp	r7, r5
 8015b5a:	60a4      	str	r4, [r4, #8]
 8015b5c:	f884 800c 	strb.w	r8, [r4, #12]
 8015b60:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8015b64:	d1f3      	bne.n	8015b4e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8015b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b6a:	4770      	bx	lr

08015b6c <rmw_uxrce_init_init_options_impl_memory>:
 8015b6c:	b1e2      	cbz	r2, 8015ba8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8015b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b72:	7b05      	ldrb	r5, [r0, #12]
 8015b74:	4606      	mov	r6, r0
 8015b76:	b9ad      	cbnz	r5, 8015ba4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8015b78:	232c      	movs	r3, #44	@ 0x2c
 8015b7a:	4617      	mov	r7, r2
 8015b7c:	460c      	mov	r4, r1
 8015b7e:	46a8      	mov	r8, r5
 8015b80:	6083      	str	r3, [r0, #8]
 8015b82:	f240 1301 	movw	r3, #257	@ 0x101
 8015b86:	e9c0 5500 	strd	r5, r5, [r0]
 8015b8a:	8183      	strh	r3, [r0, #12]
 8015b8c:	3501      	adds	r5, #1
 8015b8e:	4621      	mov	r1, r4
 8015b90:	4630      	mov	r0, r6
 8015b92:	f008 fd0f 	bl	801e5b4 <put_memory>
 8015b96:	42af      	cmp	r7, r5
 8015b98:	60a4      	str	r4, [r4, #8]
 8015b9a:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8015b9e:	f804 8c20 	strb.w	r8, [r4, #-32]
 8015ba2:	d1f3      	bne.n	8015b8c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8015ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ba8:	4770      	bx	lr
 8015baa:	bf00      	nop

08015bac <rmw_uxrce_init_wait_set_memory>:
 8015bac:	b1e2      	cbz	r2, 8015be8 <rmw_uxrce_init_wait_set_memory+0x3c>
 8015bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bb2:	7b05      	ldrb	r5, [r0, #12]
 8015bb4:	4606      	mov	r6, r0
 8015bb6:	b9ad      	cbnz	r5, 8015be4 <rmw_uxrce_init_wait_set_memory+0x38>
 8015bb8:	231c      	movs	r3, #28
 8015bba:	4617      	mov	r7, r2
 8015bbc:	460c      	mov	r4, r1
 8015bbe:	46a8      	mov	r8, r5
 8015bc0:	6083      	str	r3, [r0, #8]
 8015bc2:	f240 1301 	movw	r3, #257	@ 0x101
 8015bc6:	e9c0 5500 	strd	r5, r5, [r0]
 8015bca:	8183      	strh	r3, [r0, #12]
 8015bcc:	3501      	adds	r5, #1
 8015bce:	4621      	mov	r1, r4
 8015bd0:	4630      	mov	r0, r6
 8015bd2:	f008 fcef 	bl	801e5b4 <put_memory>
 8015bd6:	42af      	cmp	r7, r5
 8015bd8:	60a4      	str	r4, [r4, #8]
 8015bda:	f104 041c 	add.w	r4, r4, #28
 8015bde:	f804 8c10 	strb.w	r8, [r4, #-16]
 8015be2:	d1f3      	bne.n	8015bcc <rmw_uxrce_init_wait_set_memory+0x20>
 8015be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015be8:	4770      	bx	lr
 8015bea:	bf00      	nop

08015bec <rmw_uxrce_init_guard_condition_memory>:
 8015bec:	b1e2      	cbz	r2, 8015c28 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8015bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bf2:	7b05      	ldrb	r5, [r0, #12]
 8015bf4:	4606      	mov	r6, r0
 8015bf6:	b9ad      	cbnz	r5, 8015c24 <rmw_uxrce_init_guard_condition_memory+0x38>
 8015bf8:	2320      	movs	r3, #32
 8015bfa:	4617      	mov	r7, r2
 8015bfc:	460c      	mov	r4, r1
 8015bfe:	46a8      	mov	r8, r5
 8015c00:	6083      	str	r3, [r0, #8]
 8015c02:	f240 1301 	movw	r3, #257	@ 0x101
 8015c06:	e9c0 5500 	strd	r5, r5, [r0]
 8015c0a:	8183      	strh	r3, [r0, #12]
 8015c0c:	3501      	adds	r5, #1
 8015c0e:	4621      	mov	r1, r4
 8015c10:	4630      	mov	r0, r6
 8015c12:	f008 fccf 	bl	801e5b4 <put_memory>
 8015c16:	42af      	cmp	r7, r5
 8015c18:	60a4      	str	r4, [r4, #8]
 8015c1a:	f104 0420 	add.w	r4, r4, #32
 8015c1e:	f804 8c14 	strb.w	r8, [r4, #-20]
 8015c22:	d1f3      	bne.n	8015c0c <rmw_uxrce_init_guard_condition_memory+0x20>
 8015c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c28:	4770      	bx	lr
 8015c2a:	bf00      	nop

08015c2c <rmw_uxrce_fini_session_memory>:
 8015c2c:	4601      	mov	r1, r0
 8015c2e:	4801      	ldr	r0, [pc, #4]	@ (8015c34 <rmw_uxrce_fini_session_memory+0x8>)
 8015c30:	f008 bcc0 	b.w	801e5b4 <put_memory>
 8015c34:	24069224 	.word	0x24069224

08015c38 <rmw_uxrce_fini_node_memory>:
 8015c38:	b538      	push	{r3, r4, r5, lr}
 8015c3a:	4604      	mov	r4, r0
 8015c3c:	6800      	ldr	r0, [r0, #0]
 8015c3e:	b128      	cbz	r0, 8015c4c <rmw_uxrce_fini_node_memory+0x14>
 8015c40:	4b07      	ldr	r3, [pc, #28]	@ (8015c60 <rmw_uxrce_fini_node_memory+0x28>)
 8015c42:	6819      	ldr	r1, [r3, #0]
 8015c44:	f7ea fb4c 	bl	80002e0 <strcmp>
 8015c48:	b940      	cbnz	r0, 8015c5c <rmw_uxrce_fini_node_memory+0x24>
 8015c4a:	6020      	str	r0, [r4, #0]
 8015c4c:	6861      	ldr	r1, [r4, #4]
 8015c4e:	b129      	cbz	r1, 8015c5c <rmw_uxrce_fini_node_memory+0x24>
 8015c50:	2500      	movs	r5, #0
 8015c52:	4804      	ldr	r0, [pc, #16]	@ (8015c64 <rmw_uxrce_fini_node_memory+0x2c>)
 8015c54:	610d      	str	r5, [r1, #16]
 8015c56:	f008 fcad 	bl	801e5b4 <put_memory>
 8015c5a:	6065      	str	r5, [r4, #4]
 8015c5c:	bd38      	pop	{r3, r4, r5, pc}
 8015c5e:	bf00      	nop
 8015c60:	08025848 	.word	0x08025848
 8015c64:	240691f4 	.word	0x240691f4

08015c68 <rmw_uxrce_fini_publisher_memory>:
 8015c68:	b510      	push	{r4, lr}
 8015c6a:	4604      	mov	r4, r0
 8015c6c:	6800      	ldr	r0, [r0, #0]
 8015c6e:	b128      	cbz	r0, 8015c7c <rmw_uxrce_fini_publisher_memory+0x14>
 8015c70:	4b06      	ldr	r3, [pc, #24]	@ (8015c8c <rmw_uxrce_fini_publisher_memory+0x24>)
 8015c72:	6819      	ldr	r1, [r3, #0]
 8015c74:	f7ea fb34 	bl	80002e0 <strcmp>
 8015c78:	b938      	cbnz	r0, 8015c8a <rmw_uxrce_fini_publisher_memory+0x22>
 8015c7a:	6020      	str	r0, [r4, #0]
 8015c7c:	6861      	ldr	r1, [r4, #4]
 8015c7e:	b121      	cbz	r1, 8015c8a <rmw_uxrce_fini_publisher_memory+0x22>
 8015c80:	4803      	ldr	r0, [pc, #12]	@ (8015c90 <rmw_uxrce_fini_publisher_memory+0x28>)
 8015c82:	f008 fc97 	bl	801e5b4 <put_memory>
 8015c86:	2300      	movs	r3, #0
 8015c88:	6063      	str	r3, [r4, #4]
 8015c8a:	bd10      	pop	{r4, pc}
 8015c8c:	08025848 	.word	0x08025848
 8015c90:	24069204 	.word	0x24069204

08015c94 <rmw_uxrce_fini_subscription_memory>:
 8015c94:	b510      	push	{r4, lr}
 8015c96:	4604      	mov	r4, r0
 8015c98:	6800      	ldr	r0, [r0, #0]
 8015c9a:	b128      	cbz	r0, 8015ca8 <rmw_uxrce_fini_subscription_memory+0x14>
 8015c9c:	4b06      	ldr	r3, [pc, #24]	@ (8015cb8 <rmw_uxrce_fini_subscription_memory+0x24>)
 8015c9e:	6819      	ldr	r1, [r3, #0]
 8015ca0:	f7ea fb1e 	bl	80002e0 <strcmp>
 8015ca4:	b938      	cbnz	r0, 8015cb6 <rmw_uxrce_fini_subscription_memory+0x22>
 8015ca6:	6020      	str	r0, [r4, #0]
 8015ca8:	6861      	ldr	r1, [r4, #4]
 8015caa:	b121      	cbz	r1, 8015cb6 <rmw_uxrce_fini_subscription_memory+0x22>
 8015cac:	4803      	ldr	r0, [pc, #12]	@ (8015cbc <rmw_uxrce_fini_subscription_memory+0x28>)
 8015cae:	f008 fc81 	bl	801e5b4 <put_memory>
 8015cb2:	2300      	movs	r3, #0
 8015cb4:	6063      	str	r3, [r4, #4]
 8015cb6:	bd10      	pop	{r4, pc}
 8015cb8:	08025848 	.word	0x08025848
 8015cbc:	24069244 	.word	0x24069244

08015cc0 <rmw_uxrce_fini_service_memory>:
 8015cc0:	b510      	push	{r4, lr}
 8015cc2:	4604      	mov	r4, r0
 8015cc4:	6800      	ldr	r0, [r0, #0]
 8015cc6:	b128      	cbz	r0, 8015cd4 <rmw_uxrce_fini_service_memory+0x14>
 8015cc8:	4b06      	ldr	r3, [pc, #24]	@ (8015ce4 <rmw_uxrce_fini_service_memory+0x24>)
 8015cca:	6819      	ldr	r1, [r3, #0]
 8015ccc:	f7ea fb08 	bl	80002e0 <strcmp>
 8015cd0:	b938      	cbnz	r0, 8015ce2 <rmw_uxrce_fini_service_memory+0x22>
 8015cd2:	6020      	str	r0, [r4, #0]
 8015cd4:	6861      	ldr	r1, [r4, #4]
 8015cd6:	b121      	cbz	r1, 8015ce2 <rmw_uxrce_fini_service_memory+0x22>
 8015cd8:	4803      	ldr	r0, [pc, #12]	@ (8015ce8 <rmw_uxrce_fini_service_memory+0x28>)
 8015cda:	f008 fc6b 	bl	801e5b4 <put_memory>
 8015cde:	2300      	movs	r3, #0
 8015ce0:	6063      	str	r3, [r4, #4]
 8015ce2:	bd10      	pop	{r4, pc}
 8015ce4:	08025848 	.word	0x08025848
 8015ce8:	24069214 	.word	0x24069214

08015cec <rmw_uxrce_fini_client_memory>:
 8015cec:	b510      	push	{r4, lr}
 8015cee:	4604      	mov	r4, r0
 8015cf0:	6800      	ldr	r0, [r0, #0]
 8015cf2:	b128      	cbz	r0, 8015d00 <rmw_uxrce_fini_client_memory+0x14>
 8015cf4:	4b06      	ldr	r3, [pc, #24]	@ (8015d10 <rmw_uxrce_fini_client_memory+0x24>)
 8015cf6:	6819      	ldr	r1, [r3, #0]
 8015cf8:	f7ea faf2 	bl	80002e0 <strcmp>
 8015cfc:	b938      	cbnz	r0, 8015d0e <rmw_uxrce_fini_client_memory+0x22>
 8015cfe:	6020      	str	r0, [r4, #0]
 8015d00:	6861      	ldr	r1, [r4, #4]
 8015d02:	b121      	cbz	r1, 8015d0e <rmw_uxrce_fini_client_memory+0x22>
 8015d04:	4803      	ldr	r0, [pc, #12]	@ (8015d14 <rmw_uxrce_fini_client_memory+0x28>)
 8015d06:	f008 fc55 	bl	801e5b4 <put_memory>
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	6063      	str	r3, [r4, #4]
 8015d0e:	bd10      	pop	{r4, pc}
 8015d10:	08025848 	.word	0x08025848
 8015d14:	24064928 	.word	0x24064928

08015d18 <rmw_uxrce_fini_topic_memory>:
 8015d18:	b510      	push	{r4, lr}
 8015d1a:	4604      	mov	r4, r0
 8015d1c:	4803      	ldr	r0, [pc, #12]	@ (8015d2c <rmw_uxrce_fini_topic_memory+0x14>)
 8015d1e:	4621      	mov	r1, r4
 8015d20:	f008 fc48 	bl	801e5b4 <put_memory>
 8015d24:	2300      	movs	r3, #0
 8015d26:	61a3      	str	r3, [r4, #24]
 8015d28:	bd10      	pop	{r4, pc}
 8015d2a:	bf00      	nop
 8015d2c:	24069254 	.word	0x24069254

08015d30 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8015d30:	b082      	sub	sp, #8
 8015d32:	492b      	ldr	r1, [pc, #172]	@ (8015de0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8015d34:	b530      	push	{r4, r5, lr}
 8015d36:	680d      	ldr	r5, [r1, #0]
 8015d38:	ac03      	add	r4, sp, #12
 8015d3a:	e884 000c 	stmia.w	r4, {r2, r3}
 8015d3e:	461c      	mov	r4, r3
 8015d40:	2d00      	cmp	r5, #0
 8015d42:	d04b      	beq.n	8015ddc <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8015d44:	462b      	mov	r3, r5
 8015d46:	2100      	movs	r1, #0
 8015d48:	689a      	ldr	r2, [r3, #8]
 8015d4a:	685b      	ldr	r3, [r3, #4]
 8015d4c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8015d50:	4290      	cmp	r0, r2
 8015d52:	bf08      	it	eq
 8015d54:	3101      	addeq	r1, #1
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d1f6      	bne.n	8015d48 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8015d5a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8015d5e:	2b02      	cmp	r3, #2
 8015d60:	d029      	beq.n	8015db6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8015d62:	d820      	bhi.n	8015da6 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8015d64:	428c      	cmp	r4, r1
 8015d66:	d828      	bhi.n	8015dba <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8015d68:	fab4 f284 	clz	r2, r4
 8015d6c:	0952      	lsrs	r2, r2, #5
 8015d6e:	b324      	cbz	r4, 8015dba <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8015d70:	b1dd      	cbz	r5, 8015daa <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8015d72:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8015d76:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8015d7a:	e001      	b.n	8015d80 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8015d7c:	686d      	ldr	r5, [r5, #4]
 8015d7e:	b1ad      	cbz	r5, 8015dac <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8015d80:	68ab      	ldr	r3, [r5, #8]
 8015d82:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 8015d86:	4288      	cmp	r0, r1
 8015d88:	d1f8      	bne.n	8015d7c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8015d8a:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 8015d8e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8015d92:	4561      	cmp	r1, ip
 8015d94:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8015d98:	eb73 0e04 	sbcs.w	lr, r3, r4
 8015d9c:	daee      	bge.n	8015d7c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8015d9e:	468c      	mov	ip, r1
 8015da0:	461c      	mov	r4, r3
 8015da2:	462a      	mov	r2, r5
 8015da4:	e7ea      	b.n	8015d7c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8015da6:	2b03      	cmp	r3, #3
 8015da8:	d0dc      	beq.n	8015d64 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8015daa:	2200      	movs	r2, #0
 8015dac:	4610      	mov	r0, r2
 8015dae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015db2:	b002      	add	sp, #8
 8015db4:	4770      	bx	lr
 8015db6:	428c      	cmp	r4, r1
 8015db8:	d905      	bls.n	8015dc6 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8015dba:	4809      	ldr	r0, [pc, #36]	@ (8015de0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8015dbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015dc0:	b002      	add	sp, #8
 8015dc2:	f008 bbe7 	b.w	801e594 <get_memory>
 8015dc6:	fab4 f284 	clz	r2, r4
 8015dca:	0952      	lsrs	r2, r2, #5
 8015dcc:	2c00      	cmp	r4, #0
 8015dce:	d1ed      	bne.n	8015dac <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8015dd0:	4803      	ldr	r0, [pc, #12]	@ (8015de0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8015dd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015dd6:	b002      	add	sp, #8
 8015dd8:	f008 bbdc 	b.w	801e594 <get_memory>
 8015ddc:	4629      	mov	r1, r5
 8015dde:	e7bc      	b.n	8015d5a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8015de0:	24069234 	.word	0x24069234

08015de4 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8015de4:	4b12      	ldr	r3, [pc, #72]	@ (8015e30 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	b530      	push	{r4, r5, lr}
 8015dea:	b1f3      	cbz	r3, 8015e2a <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8015dec:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8015df0:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8015df4:	2400      	movs	r4, #0
 8015df6:	e001      	b.n	8015dfc <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8015df8:	685b      	ldr	r3, [r3, #4]
 8015dfa:	b1a3      	cbz	r3, 8015e26 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8015dfc:	689a      	ldr	r2, [r3, #8]
 8015dfe:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8015e02:	4288      	cmp	r0, r1
 8015e04:	d1f8      	bne.n	8015df8 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8015e06:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8015e0a:	f502 6202 	add.w	r2, r2, #2080	@ 0x820
 8015e0e:	4571      	cmp	r1, lr
 8015e10:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8015e14:	eb72 050c 	sbcs.w	r5, r2, ip
 8015e18:	daee      	bge.n	8015df8 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8015e1a:	461c      	mov	r4, r3
 8015e1c:	685b      	ldr	r3, [r3, #4]
 8015e1e:	468e      	mov	lr, r1
 8015e20:	4694      	mov	ip, r2
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d1ea      	bne.n	8015dfc <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8015e26:	4620      	mov	r0, r4
 8015e28:	bd30      	pop	{r4, r5, pc}
 8015e2a:	461c      	mov	r4, r3
 8015e2c:	4620      	mov	r0, r4
 8015e2e:	bd30      	pop	{r4, r5, pc}
 8015e30:	24069234 	.word	0x24069234
 8015e34:	00000000 	.word	0x00000000

08015e38 <rmw_uxrce_clean_expired_static_input_buffer>:
 8015e38:	4b3d      	ldr	r3, [pc, #244]	@ (8015f30 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8015e3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e3e:	681f      	ldr	r7, [r3, #0]
 8015e40:	ed2d 8b06 	vpush	{d8-d10}
 8015e44:	b08d      	sub	sp, #52	@ 0x34
 8015e46:	f7ff fd71 	bl	801592c <rmw_uros_epoch_nanos>
 8015e4a:	2f00      	cmp	r7, #0
 8015e4c:	d05d      	beq.n	8015f0a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8015e4e:	46b8      	mov	r8, r7
 8015e50:	4681      	mov	r9, r0
 8015e52:	468a      	mov	sl, r1
 8015e54:	ac04      	add	r4, sp, #16
 8015e56:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015e5a:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8015e5e:	2b04      	cmp	r3, #4
 8015e60:	ed9f 8b2d 	vldr	d8, [pc, #180]	@ 8015f18 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8015e64:	ed9f ab2e 	vldr	d10, [pc, #184]	@ 8015f20 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8015e68:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 8015f28 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8015e6c:	d03f      	beq.n	8015eee <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8015e6e:	2b05      	cmp	r3, #5
 8015e70:	d044      	beq.n	8015efc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8015e72:	2b03      	cmp	r3, #3
 8015e74:	d03b      	beq.n	8015eee <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8015e76:	ed8d 8b04 	vstr	d8, [sp, #16]
 8015e7a:	ed8d ab06 	vstr	d10, [sp, #24]
 8015e7e:	ab08      	add	r3, sp, #32
 8015e80:	ed8d 8b08 	vstr	d8, [sp, #32]
 8015e84:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8015e88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015e8a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015e8e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015e92:	f008 f9a1 	bl	801e1d8 <rmw_time_equal>
 8015e96:	b118      	cbz	r0, 8015ea0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8015e98:	ed8d 9b04 	vstr	d9, [sp, #16]
 8015e9c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8015ea0:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8015ea4:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8015ea8:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8015eac:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8015eb0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015eb4:	f008 f9e6 	bl	801e284 <rmw_time_total_nsec>
 8015eb8:	1830      	adds	r0, r6, r0
 8015eba:	eb47 0101 	adc.w	r1, r7, r1
 8015ebe:	4548      	cmp	r0, r9
 8015ec0:	eb71 030a 	sbcs.w	r3, r1, sl
 8015ec4:	db05      	blt.n	8015ed2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8015ec6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8015eca:	4591      	cmp	r9, r2
 8015ecc:	eb7a 0303 	sbcs.w	r3, sl, r3
 8015ed0:	da03      	bge.n	8015eda <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8015ed2:	4641      	mov	r1, r8
 8015ed4:	4816      	ldr	r0, [pc, #88]	@ (8015f30 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8015ed6:	f008 fb6d 	bl	801e5b4 <put_memory>
 8015eda:	f1bb 0f00 	cmp.w	fp, #0
 8015ede:	d014      	beq.n	8015f0a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8015ee0:	46d8      	mov	r8, fp
 8015ee2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015ee6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8015eea:	2b04      	cmp	r3, #4
 8015eec:	d1bf      	bne.n	8015e6e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8015eee:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8015ef2:	3340      	adds	r3, #64	@ 0x40
 8015ef4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015ef6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015efa:	e7c0      	b.n	8015e7e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8015efc:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8015f00:	3348      	adds	r3, #72	@ 0x48
 8015f02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015f04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015f08:	e7b9      	b.n	8015e7e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8015f0a:	b00d      	add	sp, #52	@ 0x34
 8015f0c:	ecbd 8b06 	vpop	{d8-d10}
 8015f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f14:	f3af 8000 	nop.w
	...
 8015f20:	00000001 	.word	0x00000001
 8015f24:	00000000 	.word	0x00000000
 8015f28:	0000001e 	.word	0x0000001e
 8015f2c:	00000000 	.word	0x00000000
 8015f30:	24069234 	.word	0x24069234

08015f34 <run_xrce_session>:
 8015f34:	b510      	push	{r4, lr}
 8015f36:	788c      	ldrb	r4, [r1, #2]
 8015f38:	b086      	sub	sp, #24
 8015f3a:	2c01      	cmp	r4, #1
 8015f3c:	f8ad 200e 	strh.w	r2, [sp, #14]
 8015f40:	d00c      	beq.n	8015f5c <run_xrce_session+0x28>
 8015f42:	2401      	movs	r4, #1
 8015f44:	4619      	mov	r1, r3
 8015f46:	f10d 020e 	add.w	r2, sp, #14
 8015f4a:	f10d 0317 	add.w	r3, sp, #23
 8015f4e:	9400      	str	r4, [sp, #0]
 8015f50:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015f54:	f002 f800 	bl	8017f58 <uxr_run_session_until_all_status>
 8015f58:	b006      	add	sp, #24
 8015f5a:	bd10      	pop	{r4, pc}
 8015f5c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015f60:	f001 fc1c 	bl	801779c <uxr_flash_output_streams>
 8015f64:	4620      	mov	r0, r4
 8015f66:	b006      	add	sp, #24
 8015f68:	bd10      	pop	{r4, pc}
 8015f6a:	bf00      	nop

08015f6c <convert_qos_profile>:
 8015f6c:	7a4a      	ldrb	r2, [r1, #9]
 8015f6e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8015f72:	2a02      	cmp	r2, #2
 8015f74:	bf18      	it	ne
 8015f76:	2200      	movne	r2, #0
 8015f78:	7002      	strb	r2, [r0, #0]
 8015f7a:	f1ac 0202 	sub.w	r2, ip, #2
 8015f7e:	fab2 f282 	clz	r2, r2
 8015f82:	0952      	lsrs	r2, r2, #5
 8015f84:	7042      	strb	r2, [r0, #1]
 8015f86:	780a      	ldrb	r2, [r1, #0]
 8015f88:	8889      	ldrh	r1, [r1, #4]
 8015f8a:	f1a2 0202 	sub.w	r2, r2, #2
 8015f8e:	8081      	strh	r1, [r0, #4]
 8015f90:	fab2 f282 	clz	r2, r2
 8015f94:	0952      	lsrs	r2, r2, #5
 8015f96:	7082      	strb	r2, [r0, #2]
 8015f98:	4770      	bx	lr
 8015f9a:	bf00      	nop

08015f9c <generate_service_topics>:
 8015f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f9e:	461d      	mov	r5, r3
 8015fa0:	b083      	sub	sp, #12
 8015fa2:	4606      	mov	r6, r0
 8015fa4:	4c11      	ldr	r4, [pc, #68]	@ (8015fec <generate_service_topics+0x50>)
 8015fa6:	4608      	mov	r0, r1
 8015fa8:	4b11      	ldr	r3, [pc, #68]	@ (8015ff0 <generate_service_topics+0x54>)
 8015faa:	4617      	mov	r7, r2
 8015fac:	4629      	mov	r1, r5
 8015fae:	4a11      	ldr	r2, [pc, #68]	@ (8015ff4 <generate_service_topics+0x58>)
 8015fb0:	9401      	str	r4, [sp, #4]
 8015fb2:	9600      	str	r6, [sp, #0]
 8015fb4:	f00b ff9e 	bl	8021ef4 <sniprintf>
 8015fb8:	4a0f      	ldr	r2, [pc, #60]	@ (8015ff8 <generate_service_topics+0x5c>)
 8015fba:	4604      	mov	r4, r0
 8015fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8015ffc <generate_service_topics+0x60>)
 8015fbe:	9201      	str	r2, [sp, #4]
 8015fc0:	4638      	mov	r0, r7
 8015fc2:	4a0c      	ldr	r2, [pc, #48]	@ (8015ff4 <generate_service_topics+0x58>)
 8015fc4:	4629      	mov	r1, r5
 8015fc6:	9600      	str	r6, [sp, #0]
 8015fc8:	f00b ff94 	bl	8021ef4 <sniprintf>
 8015fcc:	2c00      	cmp	r4, #0
 8015fce:	bfa8      	it	ge
 8015fd0:	42a5      	cmpge	r5, r4
 8015fd2:	bfcc      	ite	gt
 8015fd4:	2401      	movgt	r4, #1
 8015fd6:	2400      	movle	r4, #0
 8015fd8:	dd05      	ble.n	8015fe6 <generate_service_topics+0x4a>
 8015fda:	2800      	cmp	r0, #0
 8015fdc:	bfa8      	it	ge
 8015fde:	4285      	cmpge	r5, r0
 8015fe0:	bfcc      	ite	gt
 8015fe2:	2401      	movgt	r4, #1
 8015fe4:	2400      	movle	r4, #0
 8015fe6:	4620      	mov	r0, r4
 8015fe8:	b003      	add	sp, #12
 8015fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015fec:	080248f0 	.word	0x080248f0
 8015ff0:	080248ec 	.word	0x080248ec
 8015ff4:	080248c8 	.word	0x080248c8
 8015ff8:	080248e4 	.word	0x080248e4
 8015ffc:	080248e0 	.word	0x080248e0

08016000 <generate_service_types>:
 8016000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016004:	4606      	mov	r6, r0
 8016006:	b087      	sub	sp, #28
 8016008:	461c      	mov	r4, r3
 801600a:	6883      	ldr	r3, [r0, #8]
 801600c:	460d      	mov	r5, r1
 801600e:	4617      	mov	r7, r2
 8016010:	4798      	blx	r3
 8016012:	68f3      	ldr	r3, [r6, #12]
 8016014:	4606      	mov	r6, r0
 8016016:	4798      	blx	r3
 8016018:	2300      	movs	r3, #0
 801601a:	f8d0 b004 	ldr.w	fp, [r0, #4]
 801601e:	6872      	ldr	r2, [r6, #4]
 8016020:	702b      	strb	r3, [r5, #0]
 8016022:	6813      	ldr	r3, [r2, #0]
 8016024:	2b00      	cmp	r3, #0
 8016026:	d03f      	beq.n	80160a8 <generate_service_types+0xa8>
 8016028:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80160bc <generate_service_types+0xbc>
 801602c:	4649      	mov	r1, r9
 801602e:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 80160c4 <generate_service_types+0xc4>
 8016032:	4628      	mov	r0, r5
 8016034:	f8df a090 	ldr.w	sl, [pc, #144]	@ 80160c8 <generate_service_types+0xc8>
 8016038:	f8cd 8014 	str.w	r8, [sp, #20]
 801603c:	6852      	ldr	r2, [r2, #4]
 801603e:	9100      	str	r1, [sp, #0]
 8016040:	4621      	mov	r1, r4
 8016042:	f8cd 8008 	str.w	r8, [sp, #8]
 8016046:	f8cd a004 	str.w	sl, [sp, #4]
 801604a:	e9cd 9203 	strd	r9, r2, [sp, #12]
 801604e:	4a1a      	ldr	r2, [pc, #104]	@ (80160b8 <generate_service_types+0xb8>)
 8016050:	f00b ff50 	bl	8021ef4 <sniprintf>
 8016054:	2300      	movs	r3, #0
 8016056:	42a0      	cmp	r0, r4
 8016058:	ea6f 0600 	mvn.w	r6, r0
 801605c:	703b      	strb	r3, [r7, #0]
 801605e:	f8db 3000 	ldr.w	r3, [fp]
 8016062:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 8016066:	bfac      	ite	ge
 8016068:	2500      	movge	r5, #0
 801606a:	2501      	movlt	r5, #1
 801606c:	b30b      	cbz	r3, 80160b2 <generate_service_types+0xb2>
 801606e:	4a13      	ldr	r2, [pc, #76]	@ (80160bc <generate_service_types+0xbc>)
 8016070:	f8cd 8014 	str.w	r8, [sp, #20]
 8016074:	402e      	ands	r6, r5
 8016076:	f8db 1004 	ldr.w	r1, [fp, #4]
 801607a:	4638      	mov	r0, r7
 801607c:	9104      	str	r1, [sp, #16]
 801607e:	4621      	mov	r1, r4
 8016080:	e9cd 2a00 	strd	r2, sl, [sp]
 8016084:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8016088:	4a0b      	ldr	r2, [pc, #44]	@ (80160b8 <generate_service_types+0xb8>)
 801608a:	f00b ff33 	bl	8021ef4 <sniprintf>
 801608e:	2800      	cmp	r0, #0
 8016090:	bfb4      	ite	lt
 8016092:	2600      	movlt	r6, #0
 8016094:	f006 0601 	andge.w	r6, r6, #1
 8016098:	42a0      	cmp	r0, r4
 801609a:	bfac      	ite	ge
 801609c:	2000      	movge	r0, #0
 801609e:	f006 0001 	andlt.w	r0, r6, #1
 80160a2:	b007      	add	sp, #28
 80160a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160a8:	4b05      	ldr	r3, [pc, #20]	@ (80160c0 <generate_service_types+0xc0>)
 80160aa:	f8df 9010 	ldr.w	r9, [pc, #16]	@ 80160bc <generate_service_types+0xbc>
 80160ae:	4619      	mov	r1, r3
 80160b0:	e7bd      	b.n	801602e <generate_service_types+0x2e>
 80160b2:	4b03      	ldr	r3, [pc, #12]	@ (80160c0 <generate_service_types+0xc0>)
 80160b4:	461a      	mov	r2, r3
 80160b6:	e7db      	b.n	8016070 <generate_service_types+0x70>
 80160b8:	080248c0 	.word	0x080248c0
 80160bc:	080248bc 	.word	0x080248bc
 80160c0:	08025984 	.word	0x08025984
 80160c4:	080248d0 	.word	0x080248d0
 80160c8:	080248d4 	.word	0x080248d4

080160cc <generate_type_name>:
 80160cc:	2300      	movs	r3, #0
 80160ce:	b530      	push	{r4, r5, lr}
 80160d0:	700b      	strb	r3, [r1, #0]
 80160d2:	b087      	sub	sp, #28
 80160d4:	6803      	ldr	r3, [r0, #0]
 80160d6:	4614      	mov	r4, r2
 80160d8:	b1bb      	cbz	r3, 801610a <generate_type_name+0x3e>
 80160da:	4a0e      	ldr	r2, [pc, #56]	@ (8016114 <generate_type_name+0x48>)
 80160dc:	4615      	mov	r5, r2
 80160de:	9500      	str	r5, [sp, #0]
 80160e0:	9203      	str	r2, [sp, #12]
 80160e2:	4d0d      	ldr	r5, [pc, #52]	@ (8016118 <generate_type_name+0x4c>)
 80160e4:	6842      	ldr	r2, [r0, #4]
 80160e6:	4608      	mov	r0, r1
 80160e8:	490c      	ldr	r1, [pc, #48]	@ (801611c <generate_type_name+0x50>)
 80160ea:	9204      	str	r2, [sp, #16]
 80160ec:	9105      	str	r1, [sp, #20]
 80160ee:	9102      	str	r1, [sp, #8]
 80160f0:	4621      	mov	r1, r4
 80160f2:	4a0b      	ldr	r2, [pc, #44]	@ (8016120 <generate_type_name+0x54>)
 80160f4:	9501      	str	r5, [sp, #4]
 80160f6:	f00b fefd 	bl	8021ef4 <sniprintf>
 80160fa:	2800      	cmp	r0, #0
 80160fc:	bfa8      	it	ge
 80160fe:	4284      	cmpge	r4, r0
 8016100:	bfcc      	ite	gt
 8016102:	2001      	movgt	r0, #1
 8016104:	2000      	movle	r0, #0
 8016106:	b007      	add	sp, #28
 8016108:	bd30      	pop	{r4, r5, pc}
 801610a:	4b06      	ldr	r3, [pc, #24]	@ (8016124 <generate_type_name+0x58>)
 801610c:	4a01      	ldr	r2, [pc, #4]	@ (8016114 <generate_type_name+0x48>)
 801610e:	461d      	mov	r5, r3
 8016110:	e7e5      	b.n	80160de <generate_type_name+0x12>
 8016112:	bf00      	nop
 8016114:	080248bc 	.word	0x080248bc
 8016118:	080248d4 	.word	0x080248d4
 801611c:	080248d0 	.word	0x080248d0
 8016120:	080248c0 	.word	0x080248c0
 8016124:	08025984 	.word	0x08025984

08016128 <generate_topic_name>:
 8016128:	b530      	push	{r4, r5, lr}
 801612a:	4614      	mov	r4, r2
 801612c:	b083      	sub	sp, #12
 801612e:	4605      	mov	r5, r0
 8016130:	4b07      	ldr	r3, [pc, #28]	@ (8016150 <generate_topic_name+0x28>)
 8016132:	4a08      	ldr	r2, [pc, #32]	@ (8016154 <generate_topic_name+0x2c>)
 8016134:	4608      	mov	r0, r1
 8016136:	9500      	str	r5, [sp, #0]
 8016138:	4621      	mov	r1, r4
 801613a:	f00b fedb 	bl	8021ef4 <sniprintf>
 801613e:	2800      	cmp	r0, #0
 8016140:	bfa8      	it	ge
 8016142:	4284      	cmpge	r4, r0
 8016144:	bfcc      	ite	gt
 8016146:	2001      	movgt	r0, #1
 8016148:	2000      	movle	r0, #0
 801614a:	b003      	add	sp, #12
 801614c:	bd30      	pop	{r4, r5, pc}
 801614e:	bf00      	nop
 8016150:	080248f8 	.word	0x080248f8
 8016154:	080248d8 	.word	0x080248d8

08016158 <is_uxrce_rmw_identifier_valid>:
 8016158:	b510      	push	{r4, lr}
 801615a:	4604      	mov	r4, r0
 801615c:	b140      	cbz	r0, 8016170 <is_uxrce_rmw_identifier_valid+0x18>
 801615e:	f008 fa81 	bl	801e664 <rmw_get_implementation_identifier>
 8016162:	4601      	mov	r1, r0
 8016164:	4620      	mov	r0, r4
 8016166:	f7ea f8bb 	bl	80002e0 <strcmp>
 801616a:	fab0 f080 	clz	r0, r0
 801616e:	0940      	lsrs	r0, r0, #5
 8016170:	bd10      	pop	{r4, pc}
 8016172:	bf00      	nop

08016174 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 8016174:	4b04      	ldr	r3, [pc, #16]	@ (8016188 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x14>)
 8016176:	681a      	ldr	r2, [r3, #0]
 8016178:	b10a      	cbz	r2, 801617e <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0xa>
 801617a:	4803      	ldr	r0, [pc, #12]	@ (8016188 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x14>)
 801617c:	4770      	bx	lr
 801617e:	4a03      	ldr	r2, [pc, #12]	@ (801618c <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x18>)
 8016180:	4801      	ldr	r0, [pc, #4]	@ (8016188 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x14>)
 8016182:	6812      	ldr	r2, [r2, #0]
 8016184:	601a      	str	r2, [r3, #0]
 8016186:	4770      	bx	lr
 8016188:	24000cb0 	.word	0x24000cb0
 801618c:	24000d2c 	.word	0x24000d2c

08016190 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 8016190:	4a02      	ldr	r2, [pc, #8]	@ (801619c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0xc>)
 8016192:	4b03      	ldr	r3, [pc, #12]	@ (80161a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x10>)
 8016194:	6812      	ldr	r2, [r2, #0]
 8016196:	601a      	str	r2, [r3, #0]
 8016198:	4770      	bx	lr
 801619a:	bf00      	nop
 801619c:	24000d2c 	.word	0x24000d2c
 80161a0:	24000cb0 	.word	0x24000cb0

080161a4 <rosgraph_msgs__msg__Clock__rosidl_typesupport_introspection_c__Clock_init_function>:
 80161a4:	f009 bc2a 	b.w	801f9fc <rosgraph_msgs__msg__Clock__init>

080161a8 <rosgraph_msgs__msg__Clock__rosidl_typesupport_introspection_c__Clock_fini_function>:
 80161a8:	f009 bc3a 	b.w	801fa20 <rosgraph_msgs__msg__Clock__fini>

080161ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 80161ac:	b508      	push	{r3, lr}
 80161ae:	f7fc fc5d 	bl	8012a6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80161b2:	4b06      	ldr	r3, [pc, #24]	@ (80161cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x20>)
 80161b4:	4906      	ldr	r1, [pc, #24]	@ (80161d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x24>)
 80161b6:	681a      	ldr	r2, [r3, #0]
 80161b8:	60c8      	str	r0, [r1, #12]
 80161ba:	b10a      	cbz	r2, 80161c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x14>
 80161bc:	4803      	ldr	r0, [pc, #12]	@ (80161cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x20>)
 80161be:	bd08      	pop	{r3, pc}
 80161c0:	4a04      	ldr	r2, [pc, #16]	@ (80161d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x28>)
 80161c2:	4802      	ldr	r0, [pc, #8]	@ (80161cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x20>)
 80161c4:	6812      	ldr	r2, [r2, #0]
 80161c6:	601a      	str	r2, [r3, #0]
 80161c8:	bd08      	pop	{r3, pc}
 80161ca:	bf00      	nop
 80161cc:	24000cf8 	.word	0x24000cf8
 80161d0:	24000cbc 	.word	0x24000cbc
 80161d4:	24000d30 	.word	0x24000d30

080161d8 <get_serialized_size_rosgraph_msgs__msg__Clock>:
 80161d8:	b108      	cbz	r0, 80161de <get_serialized_size_rosgraph_msgs__msg__Clock+0x6>
 80161da:	f7fc bc55 	b.w	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 80161de:	4770      	bx	lr

080161e0 <_Clock__max_serialized_size>:
 80161e0:	b500      	push	{lr}
 80161e2:	b083      	sub	sp, #12
 80161e4:	2301      	movs	r3, #1
 80161e6:	2100      	movs	r1, #0
 80161e8:	f10d 0007 	add.w	r0, sp, #7
 80161ec:	f88d 3007 	strb.w	r3, [sp, #7]
 80161f0:	f7fc fc9a 	bl	8012b28 <max_serialized_size_builtin_interfaces__msg__Time>
 80161f4:	b003      	add	sp, #12
 80161f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80161fa:	bf00      	nop

080161fc <_Clock__get_serialized_size>:
 80161fc:	b110      	cbz	r0, 8016204 <_Clock__get_serialized_size+0x8>
 80161fe:	2100      	movs	r1, #0
 8016200:	f7fc bc42 	b.w	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 8016204:	4770      	bx	lr
 8016206:	bf00      	nop

08016208 <_Clock__cdr_deserialize>:
 8016208:	b570      	push	{r4, r5, r6, lr}
 801620a:	460c      	mov	r4, r1
 801620c:	b151      	cbz	r1, 8016224 <_Clock__cdr_deserialize+0x1c>
 801620e:	4605      	mov	r5, r0
 8016210:	f7fc fc9e 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016214:	4603      	mov	r3, r0
 8016216:	4621      	mov	r1, r4
 8016218:	4628      	mov	r0, r5
 801621a:	685b      	ldr	r3, [r3, #4]
 801621c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016220:	68db      	ldr	r3, [r3, #12]
 8016222:	4718      	bx	r3
 8016224:	4608      	mov	r0, r1
 8016226:	bd70      	pop	{r4, r5, r6, pc}

08016228 <_Clock__cdr_serialize>:
 8016228:	b160      	cbz	r0, 8016244 <_Clock__cdr_serialize+0x1c>
 801622a:	b570      	push	{r4, r5, r6, lr}
 801622c:	4604      	mov	r4, r0
 801622e:	460d      	mov	r5, r1
 8016230:	f7fc fc8e 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016234:	4603      	mov	r3, r0
 8016236:	4629      	mov	r1, r5
 8016238:	4620      	mov	r0, r4
 801623a:	685b      	ldr	r3, [r3, #4]
 801623c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016240:	689b      	ldr	r3, [r3, #8]
 8016242:	4718      	bx	r3
 8016244:	4770      	bx	lr
 8016246:	bf00      	nop

08016248 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 8016248:	4800      	ldr	r0, [pc, #0]	@ (801624c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x4>)
 801624a:	4770      	bx	lr
 801624c:	24000d04 	.word	0x24000d04

08016250 <get_message_typesupport_handle>:
 8016250:	6883      	ldr	r3, [r0, #8]
 8016252:	4718      	bx	r3

08016254 <get_message_typesupport_handle_function>:
 8016254:	b510      	push	{r4, lr}
 8016256:	4604      	mov	r4, r0
 8016258:	6800      	ldr	r0, [r0, #0]
 801625a:	f7ea f841 	bl	80002e0 <strcmp>
 801625e:	2800      	cmp	r0, #0
 8016260:	bf0c      	ite	eq
 8016262:	4620      	moveq	r0, r4
 8016264:	2000      	movne	r0, #0
 8016266:	bd10      	pop	{r4, pc}

08016268 <get_service_typesupport_handle>:
 8016268:	6883      	ldr	r3, [r0, #8]
 801626a:	4718      	bx	r3

0801626c <get_service_typesupport_handle_function>:
 801626c:	b510      	push	{r4, lr}
 801626e:	4604      	mov	r4, r0
 8016270:	6800      	ldr	r0, [r0, #0]
 8016272:	f7ea f835 	bl	80002e0 <strcmp>
 8016276:	2800      	cmp	r0, #0
 8016278:	bf0c      	ite	eq
 801627a:	4620      	moveq	r0, r4
 801627c:	2000      	movne	r0, #0
 801627e:	bd10      	pop	{r4, pc}

08016280 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8016280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016284:	6805      	ldr	r5, [r0, #0]
 8016286:	4604      	mov	r4, r0
 8016288:	460e      	mov	r6, r1
 801628a:	4628      	mov	r0, r5
 801628c:	f7ea f828 	bl	80002e0 <strcmp>
 8016290:	b1c8      	cbz	r0, 80162c6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8016292:	4b11      	ldr	r3, [pc, #68]	@ (80162d8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	429d      	cmp	r5, r3
 8016298:	d112      	bne.n	80162c0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801629a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801629e:	f8d8 4000 	ldr.w	r4, [r8]
 80162a2:	b16c      	cbz	r4, 80162c0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80162a4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80162a8:	2700      	movs	r7, #0
 80162aa:	3d04      	subs	r5, #4
 80162ac:	4631      	mov	r1, r6
 80162ae:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80162b2:	f7ea f815 	bl	80002e0 <strcmp>
 80162b6:	00bb      	lsls	r3, r7, #2
 80162b8:	b140      	cbz	r0, 80162cc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80162ba:	3701      	adds	r7, #1
 80162bc:	42bc      	cmp	r4, r7
 80162be:	d1f5      	bne.n	80162ac <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80162c0:	2000      	movs	r0, #0
 80162c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162c6:	4620      	mov	r0, r4
 80162c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162cc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80162d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80162d4:	58d3      	ldr	r3, [r2, r3]
 80162d6:	4718      	bx	r3
 80162d8:	24000d2c 	.word	0x24000d2c

080162dc <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 80162dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162e0:	6805      	ldr	r5, [r0, #0]
 80162e2:	4604      	mov	r4, r0
 80162e4:	460e      	mov	r6, r1
 80162e6:	4628      	mov	r0, r5
 80162e8:	f7e9 fffa 	bl	80002e0 <strcmp>
 80162ec:	b1c8      	cbz	r0, 8016322 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 80162ee:	4b11      	ldr	r3, [pc, #68]	@ (8016334 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	429d      	cmp	r5, r3
 80162f4:	d112      	bne.n	801631c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 80162f6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80162fa:	f8d8 4000 	ldr.w	r4, [r8]
 80162fe:	b16c      	cbz	r4, 801631c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8016300:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016304:	2700      	movs	r7, #0
 8016306:	3d04      	subs	r5, #4
 8016308:	4631      	mov	r1, r6
 801630a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801630e:	f7e9 ffe7 	bl	80002e0 <strcmp>
 8016312:	00bb      	lsls	r3, r7, #2
 8016314:	b140      	cbz	r0, 8016328 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 8016316:	3701      	adds	r7, #1
 8016318:	42bc      	cmp	r4, r7
 801631a:	d1f5      	bne.n	8016308 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 801631c:	2000      	movs	r0, #0
 801631e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016322:	4620      	mov	r0, r4
 8016324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016328:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801632c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016330:	58d3      	ldr	r3, [r2, r3]
 8016332:	4718      	bx	r3
 8016334:	24000d2c 	.word	0x24000d2c

08016338 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 8016338:	f009 bb76 	b.w	801fa28 <std_msgs__msg__Header__init>

0801633c <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 801633c:	f009 bb98 	b.w	801fa70 <std_msgs__msg__Header__fini>

08016340 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8016340:	b508      	push	{r3, lr}
 8016342:	f7fc fb93 	bl	8012a6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016346:	4b06      	ldr	r3, [pc, #24]	@ (8016360 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8016348:	4906      	ldr	r1, [pc, #24]	@ (8016364 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 801634a:	681a      	ldr	r2, [r3, #0]
 801634c:	60c8      	str	r0, [r1, #12]
 801634e:	b10a      	cbz	r2, 8016354 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 8016350:	4803      	ldr	r0, [pc, #12]	@ (8016360 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8016352:	bd08      	pop	{r3, pc}
 8016354:	4a04      	ldr	r2, [pc, #16]	@ (8016368 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 8016356:	4802      	ldr	r0, [pc, #8]	@ (8016360 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8016358:	6812      	ldr	r2, [r2, #0]
 801635a:	601a      	str	r2, [r3, #0]
 801635c:	bd08      	pop	{r3, pc}
 801635e:	bf00      	nop
 8016360:	24000dac 	.word	0x24000dac
 8016364:	24000d34 	.word	0x24000d34
 8016368:	24000d30 	.word	0x24000d30

0801636c <_Header__max_serialized_size>:
 801636c:	b500      	push	{lr}
 801636e:	b083      	sub	sp, #12
 8016370:	2301      	movs	r3, #1
 8016372:	2100      	movs	r1, #0
 8016374:	f10d 0007 	add.w	r0, sp, #7
 8016378:	f88d 3007 	strb.w	r3, [sp, #7]
 801637c:	f7fc fbd4 	bl	8012b28 <max_serialized_size_builtin_interfaces__msg__Time>
 8016380:	b003      	add	sp, #12
 8016382:	f85d fb04 	ldr.w	pc, [sp], #4
 8016386:	bf00      	nop

08016388 <get_serialized_size_std_msgs__msg__Header>:
 8016388:	b570      	push	{r4, r5, r6, lr}
 801638a:	4605      	mov	r5, r0
 801638c:	b168      	cbz	r0, 80163aa <get_serialized_size_std_msgs__msg__Header+0x22>
 801638e:	460c      	mov	r4, r1
 8016390:	f7fc fb7a 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 8016394:	2104      	movs	r1, #4
 8016396:	1826      	adds	r6, r4, r0
 8016398:	f1c4 0405 	rsb	r4, r4, #5
 801639c:	4630      	mov	r0, r6
 801639e:	f7fd fe77 	bl	8014090 <ucdr_alignment>
 80163a2:	68e9      	ldr	r1, [r5, #12]
 80163a4:	440c      	add	r4, r1
 80163a6:	4404      	add	r4, r0
 80163a8:	19a0      	adds	r0, r4, r6
 80163aa:	bd70      	pop	{r4, r5, r6, pc}

080163ac <_Header__cdr_deserialize>:
 80163ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163ae:	460c      	mov	r4, r1
 80163b0:	b083      	sub	sp, #12
 80163b2:	b1e9      	cbz	r1, 80163f0 <_Header__cdr_deserialize+0x44>
 80163b4:	4606      	mov	r6, r0
 80163b6:	f7fc fbcb 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80163ba:	4603      	mov	r3, r0
 80163bc:	4621      	mov	r1, r4
 80163be:	4630      	mov	r0, r6
 80163c0:	685b      	ldr	r3, [r3, #4]
 80163c2:	68db      	ldr	r3, [r3, #12]
 80163c4:	4798      	blx	r3
 80163c6:	6927      	ldr	r7, [r4, #16]
 80163c8:	ab01      	add	r3, sp, #4
 80163ca:	68a1      	ldr	r1, [r4, #8]
 80163cc:	463a      	mov	r2, r7
 80163ce:	4630      	mov	r0, r6
 80163d0:	f000 fc50 	bl	8016c74 <ucdr_deserialize_sequence_char>
 80163d4:	9b01      	ldr	r3, [sp, #4]
 80163d6:	4605      	mov	r5, r0
 80163d8:	b920      	cbnz	r0, 80163e4 <_Header__cdr_deserialize+0x38>
 80163da:	429f      	cmp	r7, r3
 80163dc:	d30c      	bcc.n	80163f8 <_Header__cdr_deserialize+0x4c>
 80163de:	4628      	mov	r0, r5
 80163e0:	b003      	add	sp, #12
 80163e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163e4:	b103      	cbz	r3, 80163e8 <_Header__cdr_deserialize+0x3c>
 80163e6:	3b01      	subs	r3, #1
 80163e8:	4628      	mov	r0, r5
 80163ea:	60e3      	str	r3, [r4, #12]
 80163ec:	b003      	add	sp, #12
 80163ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163f0:	460d      	mov	r5, r1
 80163f2:	4628      	mov	r0, r5
 80163f4:	b003      	add	sp, #12
 80163f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163f8:	2101      	movs	r1, #1
 80163fa:	4630      	mov	r0, r6
 80163fc:	75b5      	strb	r5, [r6, #22]
 80163fe:	7571      	strb	r1, [r6, #21]
 8016400:	60e5      	str	r5, [r4, #12]
 8016402:	f7fd fe5d 	bl	80140c0 <ucdr_align_to>
 8016406:	4630      	mov	r0, r6
 8016408:	9901      	ldr	r1, [sp, #4]
 801640a:	f7fd fe91 	bl	8014130 <ucdr_advance_buffer>
 801640e:	4628      	mov	r0, r5
 8016410:	b003      	add	sp, #12
 8016412:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016414 <_Header__cdr_serialize>:
 8016414:	b308      	cbz	r0, 801645a <_Header__cdr_serialize+0x46>
 8016416:	b570      	push	{r4, r5, r6, lr}
 8016418:	4604      	mov	r4, r0
 801641a:	460d      	mov	r5, r1
 801641c:	f7fc fb98 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016420:	4603      	mov	r3, r0
 8016422:	4629      	mov	r1, r5
 8016424:	4620      	mov	r0, r4
 8016426:	685b      	ldr	r3, [r3, #4]
 8016428:	689b      	ldr	r3, [r3, #8]
 801642a:	4798      	blx	r3
 801642c:	68a6      	ldr	r6, [r4, #8]
 801642e:	b15e      	cbz	r6, 8016448 <_Header__cdr_serialize+0x34>
 8016430:	4630      	mov	r0, r6
 8016432:	f7e9 ff5f 	bl	80002f4 <strlen>
 8016436:	4603      	mov	r3, r0
 8016438:	1c42      	adds	r2, r0, #1
 801643a:	4631      	mov	r1, r6
 801643c:	4628      	mov	r0, r5
 801643e:	60e3      	str	r3, [r4, #12]
 8016440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016444:	f000 bc04 	b.w	8016c50 <ucdr_serialize_sequence_char>
 8016448:	4633      	mov	r3, r6
 801644a:	4632      	mov	r2, r6
 801644c:	4631      	mov	r1, r6
 801644e:	4628      	mov	r0, r5
 8016450:	60e3      	str	r3, [r4, #12]
 8016452:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016456:	f000 bbfb 	b.w	8016c50 <ucdr_serialize_sequence_char>
 801645a:	4770      	bx	lr

0801645c <_Header__get_serialized_size>:
 801645c:	b538      	push	{r3, r4, r5, lr}
 801645e:	4604      	mov	r4, r0
 8016460:	b150      	cbz	r0, 8016478 <_Header__get_serialized_size+0x1c>
 8016462:	2100      	movs	r1, #0
 8016464:	f7fc fb10 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 8016468:	2104      	movs	r1, #4
 801646a:	4605      	mov	r5, r0
 801646c:	f7fd fe10 	bl	8014090 <ucdr_alignment>
 8016470:	68e2      	ldr	r2, [r4, #12]
 8016472:	3205      	adds	r2, #5
 8016474:	1953      	adds	r3, r2, r5
 8016476:	4418      	add	r0, r3
 8016478:	bd38      	pop	{r3, r4, r5, pc}
 801647a:	bf00      	nop

0801647c <max_serialized_size_std_msgs__msg__Header>:
 801647c:	2301      	movs	r3, #1
 801647e:	b510      	push	{r4, lr}
 8016480:	7003      	strb	r3, [r0, #0]
 8016482:	4604      	mov	r4, r0
 8016484:	f7fc fb50 	bl	8012b28 <max_serialized_size_builtin_interfaces__msg__Time>
 8016488:	2300      	movs	r3, #0
 801648a:	7023      	strb	r3, [r4, #0]
 801648c:	bd10      	pop	{r4, pc}
 801648e:	bf00      	nop

08016490 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8016490:	4800      	ldr	r0, [pc, #0]	@ (8016494 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 8016492:	4770      	bx	lr
 8016494:	24000db8 	.word	0x24000db8

08016498 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8016498:	4b04      	ldr	r3, [pc, #16]	@ (80164ac <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 801649a:	681a      	ldr	r2, [r3, #0]
 801649c:	b10a      	cbz	r2, 80164a2 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xa>
 801649e:	4803      	ldr	r0, [pc, #12]	@ (80164ac <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 80164a0:	4770      	bx	lr
 80164a2:	4a03      	ldr	r2, [pc, #12]	@ (80164b0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x18>)
 80164a4:	4801      	ldr	r0, [pc, #4]	@ (80164ac <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 80164a6:	6812      	ldr	r2, [r2, #0]
 80164a8:	601a      	str	r2, [r3, #0]
 80164aa:	4770      	bx	lr
 80164ac:	24000de8 	.word	0x24000de8
 80164b0:	24000d2c 	.word	0x24000d2c

080164b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 80164b4:	4a02      	ldr	r2, [pc, #8]	@ (80164c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xc>)
 80164b6:	4b03      	ldr	r3, [pc, #12]	@ (80164c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x10>)
 80164b8:	6812      	ldr	r2, [r2, #0]
 80164ba:	601a      	str	r2, [r3, #0]
 80164bc:	4770      	bx	lr
 80164be:	bf00      	nop
 80164c0:	24000d2c 	.word	0x24000d2c
 80164c4:	24000de8 	.word	0x24000de8

080164c8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80164c8:	4b04      	ldr	r3, [pc, #16]	@ (80164dc <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 80164ca:	681a      	ldr	r2, [r3, #0]
 80164cc:	b10a      	cbz	r2, 80164d2 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xa>
 80164ce:	4803      	ldr	r0, [pc, #12]	@ (80164dc <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 80164d0:	4770      	bx	lr
 80164d2:	4a03      	ldr	r2, [pc, #12]	@ (80164e0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x18>)
 80164d4:	4801      	ldr	r0, [pc, #4]	@ (80164dc <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 80164d6:	6812      	ldr	r2, [r2, #0]
 80164d8:	601a      	str	r2, [r3, #0]
 80164da:	4770      	bx	lr
 80164dc:	24000dfc 	.word	0x24000dfc
 80164e0:	24000d2c 	.word	0x24000d2c

080164e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80164e4:	4a02      	ldr	r2, [pc, #8]	@ (80164f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xc>)
 80164e6:	4b03      	ldr	r3, [pc, #12]	@ (80164f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x10>)
 80164e8:	6812      	ldr	r2, [r2, #0]
 80164ea:	601a      	str	r2, [r3, #0]
 80164ec:	4770      	bx	lr
 80164ee:	bf00      	nop
 80164f0:	24000d2c 	.word	0x24000d2c
 80164f4:	24000dfc 	.word	0x24000dfc

080164f8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80164f8:	4b04      	ldr	r3, [pc, #16]	@ (801650c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 80164fa:	681a      	ldr	r2, [r3, #0]
 80164fc:	b10a      	cbz	r2, 8016502 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xa>
 80164fe:	4803      	ldr	r0, [pc, #12]	@ (801650c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 8016500:	4770      	bx	lr
 8016502:	4a03      	ldr	r2, [pc, #12]	@ (8016510 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x18>)
 8016504:	4801      	ldr	r0, [pc, #4]	@ (801650c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 8016506:	6812      	ldr	r2, [r2, #0]
 8016508:	601a      	str	r2, [r3, #0]
 801650a:	4770      	bx	lr
 801650c:	24000e10 	.word	0x24000e10
 8016510:	24000d2c 	.word	0x24000d2c

08016514 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8016514:	4a02      	ldr	r2, [pc, #8]	@ (8016520 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xc>)
 8016516:	4b03      	ldr	r3, [pc, #12]	@ (8016524 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x10>)
 8016518:	6812      	ldr	r2, [r2, #0]
 801651a:	601a      	str	r2, [r3, #0]
 801651c:	4770      	bx	lr
 801651e:	bf00      	nop
 8016520:	24000d2c 	.word	0x24000d2c
 8016524:	24000e10 	.word	0x24000e10

08016528 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8016528:	4b04      	ldr	r3, [pc, #16]	@ (801653c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 801652a:	681a      	ldr	r2, [r3, #0]
 801652c:	b10a      	cbz	r2, 8016532 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xa>
 801652e:	4803      	ldr	r0, [pc, #12]	@ (801653c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 8016530:	4770      	bx	lr
 8016532:	4a03      	ldr	r2, [pc, #12]	@ (8016540 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x18>)
 8016534:	4801      	ldr	r0, [pc, #4]	@ (801653c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 8016536:	6812      	ldr	r2, [r2, #0]
 8016538:	601a      	str	r2, [r3, #0]
 801653a:	4770      	bx	lr
 801653c:	24000e24 	.word	0x24000e24
 8016540:	24000d2c 	.word	0x24000d2c

08016544 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8016544:	4a02      	ldr	r2, [pc, #8]	@ (8016550 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xc>)
 8016546:	4b03      	ldr	r3, [pc, #12]	@ (8016554 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x10>)
 8016548:	6812      	ldr	r2, [r2, #0]
 801654a:	601a      	str	r2, [r3, #0]
 801654c:	4770      	bx	lr
 801654e:	bf00      	nop
 8016550:	24000d2c 	.word	0x24000d2c
 8016554:	24000e24 	.word	0x24000e24

08016558 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_init_function>:
 8016558:	f009 ba96 	b.w	801fa88 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>

0801655c <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_fini_function>:
 801655c:	f009 bab8 	b.w	801fad0 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>

08016560 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8016560:	b510      	push	{r4, lr}
 8016562:	4c08      	ldr	r4, [pc, #32]	@ (8016584 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x24>)
 8016564:	f7ff feec 	bl	8016340 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8016568:	60e0      	str	r0, [r4, #12]
 801656a:	f009 fb1d 	bl	801fba8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 801656e:	4b06      	ldr	r3, [pc, #24]	@ (8016588 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8016570:	64a0      	str	r0, [r4, #72]	@ 0x48
 8016572:	681a      	ldr	r2, [r3, #0]
 8016574:	b10a      	cbz	r2, 801657a <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1a>
 8016576:	4804      	ldr	r0, [pc, #16]	@ (8016588 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8016578:	bd10      	pop	{r4, pc}
 801657a:	4a04      	ldr	r2, [pc, #16]	@ (801658c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x2c>)
 801657c:	4802      	ldr	r0, [pc, #8]	@ (8016588 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 801657e:	6812      	ldr	r2, [r2, #0]
 8016580:	601a      	str	r2, [r3, #0]
 8016582:	bd10      	pop	{r4, pc}
 8016584:	24000e30 	.word	0x24000e30
 8016588:	24000ea8 	.word	0x24000ea8
 801658c:	24000d30 	.word	0x24000d30

08016590 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_init_function>:
 8016590:	f009 baaa 	b.w	801fae8 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>

08016594 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_fini_function>:
 8016594:	f009 bacc 	b.w	801fb30 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>

08016598 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8016598:	b510      	push	{r4, lr}
 801659a:	4c08      	ldr	r4, [pc, #32]	@ (80165bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x24>)
 801659c:	f7ff fed0 	bl	8016340 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 80165a0:	60e0      	str	r0, [r4, #12]
 80165a2:	f009 fb13 	bl	801fbcc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 80165a6:	4b06      	ldr	r3, [pc, #24]	@ (80165c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 80165a8:	64a0      	str	r0, [r4, #72]	@ 0x48
 80165aa:	681a      	ldr	r2, [r3, #0]
 80165ac:	b10a      	cbz	r2, 80165b2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1a>
 80165ae:	4804      	ldr	r0, [pc, #16]	@ (80165c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 80165b0:	bd10      	pop	{r4, pc}
 80165b2:	4a04      	ldr	r2, [pc, #16]	@ (80165c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x2c>)
 80165b4:	4802      	ldr	r0, [pc, #8]	@ (80165c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 80165b6:	6812      	ldr	r2, [r2, #0]
 80165b8:	601a      	str	r2, [r3, #0]
 80165ba:	bd10      	pop	{r4, pc}
 80165bc:	24000eb4 	.word	0x24000eb4
 80165c0:	24000f2c 	.word	0x24000f2c
 80165c4:	24000d30 	.word	0x24000d30

080165c8 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_init_function>:
 80165c8:	f009 babe 	b.w	801fb48 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>

080165cc <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_fini_function>:
 80165cc:	f009 bace 	b.w	801fb6c <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>

080165d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80165d0:	b508      	push	{r3, lr}
 80165d2:	f7fc fa4b 	bl	8012a6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80165d6:	4b06      	ldr	r3, [pc, #24]	@ (80165f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 80165d8:	4906      	ldr	r1, [pc, #24]	@ (80165f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x24>)
 80165da:	681a      	ldr	r2, [r3, #0]
 80165dc:	60c8      	str	r0, [r1, #12]
 80165de:	b10a      	cbz	r2, 80165e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>
 80165e0:	4803      	ldr	r0, [pc, #12]	@ (80165f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 80165e2:	bd08      	pop	{r3, pc}
 80165e4:	4a04      	ldr	r2, [pc, #16]	@ (80165f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x28>)
 80165e6:	4802      	ldr	r0, [pc, #8]	@ (80165f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 80165e8:	6812      	ldr	r2, [r2, #0]
 80165ea:	601a      	str	r2, [r3, #0]
 80165ec:	bd08      	pop	{r3, pc}
 80165ee:	bf00      	nop
 80165f0:	24000fb0 	.word	0x24000fb0
 80165f4:	24000f38 	.word	0x24000f38
 80165f8:	24000d30 	.word	0x24000d30

080165fc <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_init_function>:
 80165fc:	f009 baba 	b.w	801fb74 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>

08016600 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_fini_function>:
 8016600:	f009 baca 	b.w	801fb98 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>

08016604 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8016604:	b508      	push	{r3, lr}
 8016606:	f7fc fa31 	bl	8012a6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801660a:	4b06      	ldr	r3, [pc, #24]	@ (8016624 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 801660c:	4906      	ldr	r1, [pc, #24]	@ (8016628 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x24>)
 801660e:	681a      	ldr	r2, [r3, #0]
 8016610:	60c8      	str	r0, [r1, #12]
 8016612:	b10a      	cbz	r2, 8016618 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>
 8016614:	4803      	ldr	r0, [pc, #12]	@ (8016624 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8016616:	bd08      	pop	{r3, pc}
 8016618:	4a04      	ldr	r2, [pc, #16]	@ (801662c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x28>)
 801661a:	4802      	ldr	r0, [pc, #8]	@ (8016624 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 801661c:	6812      	ldr	r2, [r2, #0]
 801661e:	601a      	str	r2, [r3, #0]
 8016620:	bd08      	pop	{r3, pc}
 8016622:	bf00      	nop
 8016624:	24001034 	.word	0x24001034
 8016628:	24000fbc 	.word	0x24000fbc
 801662c:	24000d30 	.word	0x24000d30

08016630 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8016630:	b538      	push	{r3, r4, r5, lr}
 8016632:	4604      	mov	r4, r0
 8016634:	b150      	cbz	r0, 801664c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1c>
 8016636:	460d      	mov	r5, r1
 8016638:	f7ff fea6 	bl	8016388 <get_serialized_size_std_msgs__msg__Header>
 801663c:	4603      	mov	r3, r0
 801663e:	f104 0018 	add.w	r0, r4, #24
 8016642:	461c      	mov	r4, r3
 8016644:	18e9      	adds	r1, r5, r3
 8016646:	f009 facf 	bl	801fbe8 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 801664a:	4420      	add	r0, r4
 801664c:	bd38      	pop	{r3, r4, r5, pc}
 801664e:	bf00      	nop

08016650 <_ActuationCommandStamped__cdr_deserialize>:
 8016650:	b570      	push	{r4, r5, r6, lr}
 8016652:	460c      	mov	r4, r1
 8016654:	b199      	cbz	r1, 801667e <_ActuationCommandStamped__cdr_deserialize+0x2e>
 8016656:	4605      	mov	r5, r0
 8016658:	f7ff ff1a 	bl	8016490 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801665c:	4603      	mov	r3, r0
 801665e:	4621      	mov	r1, r4
 8016660:	4628      	mov	r0, r5
 8016662:	685b      	ldr	r3, [r3, #4]
 8016664:	68db      	ldr	r3, [r3, #12]
 8016666:	4798      	blx	r3
 8016668:	f009 fb46 	bl	801fcf8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 801666c:	4603      	mov	r3, r0
 801666e:	f104 0118 	add.w	r1, r4, #24
 8016672:	4628      	mov	r0, r5
 8016674:	685b      	ldr	r3, [r3, #4]
 8016676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801667a:	68db      	ldr	r3, [r3, #12]
 801667c:	4718      	bx	r3
 801667e:	4608      	mov	r0, r1
 8016680:	bd70      	pop	{r4, r5, r6, pc}
 8016682:	bf00      	nop

08016684 <_ActuationCommandStamped__cdr_serialize>:
 8016684:	b510      	push	{r4, lr}
 8016686:	b082      	sub	sp, #8
 8016688:	9101      	str	r1, [sp, #4]
 801668a:	b1a0      	cbz	r0, 80166b6 <_ActuationCommandStamped__cdr_serialize+0x32>
 801668c:	4604      	mov	r4, r0
 801668e:	f7ff feff 	bl	8016490 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8016692:	4603      	mov	r3, r0
 8016694:	9901      	ldr	r1, [sp, #4]
 8016696:	4620      	mov	r0, r4
 8016698:	685b      	ldr	r3, [r3, #4]
 801669a:	689b      	ldr	r3, [r3, #8]
 801669c:	4798      	blx	r3
 801669e:	f009 fb2b 	bl	801fcf8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 80166a2:	4603      	mov	r3, r0
 80166a4:	9901      	ldr	r1, [sp, #4]
 80166a6:	f104 0018 	add.w	r0, r4, #24
 80166aa:	685b      	ldr	r3, [r3, #4]
 80166ac:	689b      	ldr	r3, [r3, #8]
 80166ae:	b002      	add	sp, #8
 80166b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80166b4:	4718      	bx	r3
 80166b6:	b002      	add	sp, #8
 80166b8:	bd10      	pop	{r4, pc}
 80166ba:	bf00      	nop

080166bc <_ActuationCommandStamped__get_serialized_size>:
 80166bc:	b510      	push	{r4, lr}
 80166be:	4604      	mov	r4, r0
 80166c0:	b148      	cbz	r0, 80166d6 <_ActuationCommandStamped__get_serialized_size+0x1a>
 80166c2:	2100      	movs	r1, #0
 80166c4:	f7ff fe60 	bl	8016388 <get_serialized_size_std_msgs__msg__Header>
 80166c8:	4601      	mov	r1, r0
 80166ca:	f104 0018 	add.w	r0, r4, #24
 80166ce:	460c      	mov	r4, r1
 80166d0:	f009 fa8a 	bl	801fbe8 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 80166d4:	4420      	add	r0, r4
 80166d6:	bd10      	pop	{r4, pc}

080166d8 <_ActuationCommandStamped__max_serialized_size>:
 80166d8:	b510      	push	{r4, lr}
 80166da:	b082      	sub	sp, #8
 80166dc:	2301      	movs	r3, #1
 80166de:	2100      	movs	r1, #0
 80166e0:	f10d 0007 	add.w	r0, sp, #7
 80166e4:	f88d 3007 	strb.w	r3, [sp, #7]
 80166e8:	f7ff fec8 	bl	801647c <max_serialized_size_std_msgs__msg__Header>
 80166ec:	4604      	mov	r4, r0
 80166ee:	f10d 0007 	add.w	r0, sp, #7
 80166f2:	4621      	mov	r1, r4
 80166f4:	f009 fae6 	bl	801fcc4 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 80166f8:	4420      	add	r0, r4
 80166fa:	b002      	add	sp, #8
 80166fc:	bd10      	pop	{r4, pc}
 80166fe:	bf00      	nop

08016700 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8016700:	4800      	ldr	r0, [pc, #0]	@ (8016704 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x4>)
 8016702:	4770      	bx	lr
 8016704:	24001040 	.word	0x24001040

08016708 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8016708:	b538      	push	{r3, r4, r5, lr}
 801670a:	4604      	mov	r4, r0
 801670c:	b150      	cbz	r0, 8016724 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1c>
 801670e:	460d      	mov	r5, r1
 8016710:	f7ff fe3a 	bl	8016388 <get_serialized_size_std_msgs__msg__Header>
 8016714:	4603      	mov	r3, r0
 8016716:	f104 0018 	add.w	r0, r4, #24
 801671a:	461c      	mov	r4, r3
 801671c:	18e9      	adds	r1, r5, r3
 801671e:	f009 faef 	bl	801fd00 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8016722:	4420      	add	r0, r4
 8016724:	bd38      	pop	{r3, r4, r5, pc}
 8016726:	bf00      	nop

08016728 <_ActuationStatusStamped__cdr_deserialize>:
 8016728:	b570      	push	{r4, r5, r6, lr}
 801672a:	460c      	mov	r4, r1
 801672c:	b199      	cbz	r1, 8016756 <_ActuationStatusStamped__cdr_deserialize+0x2e>
 801672e:	4605      	mov	r5, r0
 8016730:	f7ff feae 	bl	8016490 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8016734:	4603      	mov	r3, r0
 8016736:	4621      	mov	r1, r4
 8016738:	4628      	mov	r0, r5
 801673a:	685b      	ldr	r3, [r3, #4]
 801673c:	68db      	ldr	r3, [r3, #12]
 801673e:	4798      	blx	r3
 8016740:	f009 fb66 	bl	801fe10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8016744:	4603      	mov	r3, r0
 8016746:	f104 0118 	add.w	r1, r4, #24
 801674a:	4628      	mov	r0, r5
 801674c:	685b      	ldr	r3, [r3, #4]
 801674e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016752:	68db      	ldr	r3, [r3, #12]
 8016754:	4718      	bx	r3
 8016756:	4608      	mov	r0, r1
 8016758:	bd70      	pop	{r4, r5, r6, pc}
 801675a:	bf00      	nop

0801675c <_ActuationStatusStamped__cdr_serialize>:
 801675c:	b510      	push	{r4, lr}
 801675e:	b082      	sub	sp, #8
 8016760:	9101      	str	r1, [sp, #4]
 8016762:	b1a0      	cbz	r0, 801678e <_ActuationStatusStamped__cdr_serialize+0x32>
 8016764:	4604      	mov	r4, r0
 8016766:	f7ff fe93 	bl	8016490 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801676a:	4603      	mov	r3, r0
 801676c:	9901      	ldr	r1, [sp, #4]
 801676e:	4620      	mov	r0, r4
 8016770:	685b      	ldr	r3, [r3, #4]
 8016772:	689b      	ldr	r3, [r3, #8]
 8016774:	4798      	blx	r3
 8016776:	f009 fb4b 	bl	801fe10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 801677a:	4603      	mov	r3, r0
 801677c:	9901      	ldr	r1, [sp, #4]
 801677e:	f104 0018 	add.w	r0, r4, #24
 8016782:	685b      	ldr	r3, [r3, #4]
 8016784:	689b      	ldr	r3, [r3, #8]
 8016786:	b002      	add	sp, #8
 8016788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801678c:	4718      	bx	r3
 801678e:	b002      	add	sp, #8
 8016790:	bd10      	pop	{r4, pc}
 8016792:	bf00      	nop

08016794 <_ActuationStatusStamped__get_serialized_size>:
 8016794:	b510      	push	{r4, lr}
 8016796:	4604      	mov	r4, r0
 8016798:	b148      	cbz	r0, 80167ae <_ActuationStatusStamped__get_serialized_size+0x1a>
 801679a:	2100      	movs	r1, #0
 801679c:	f7ff fdf4 	bl	8016388 <get_serialized_size_std_msgs__msg__Header>
 80167a0:	4601      	mov	r1, r0
 80167a2:	f104 0018 	add.w	r0, r4, #24
 80167a6:	460c      	mov	r4, r1
 80167a8:	f009 faaa 	bl	801fd00 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 80167ac:	4420      	add	r0, r4
 80167ae:	bd10      	pop	{r4, pc}

080167b0 <_ActuationStatusStamped__max_serialized_size>:
 80167b0:	b510      	push	{r4, lr}
 80167b2:	b082      	sub	sp, #8
 80167b4:	2301      	movs	r3, #1
 80167b6:	2100      	movs	r1, #0
 80167b8:	f10d 0007 	add.w	r0, sp, #7
 80167bc:	f88d 3007 	strb.w	r3, [sp, #7]
 80167c0:	f7ff fe5c 	bl	801647c <max_serialized_size_std_msgs__msg__Header>
 80167c4:	4604      	mov	r4, r0
 80167c6:	f10d 0007 	add.w	r0, sp, #7
 80167ca:	4621      	mov	r1, r4
 80167cc:	f009 fb06 	bl	801fddc <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 80167d0:	4420      	add	r0, r4
 80167d2:	b002      	add	sp, #8
 80167d4:	bd10      	pop	{r4, pc}
 80167d6:	bf00      	nop

080167d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80167d8:	4800      	ldr	r0, [pc, #0]	@ (80167dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x4>)
 80167da:	4770      	bx	lr
 80167dc:	24001068 	.word	0x24001068

080167e0 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80167e0:	b538      	push	{r3, r4, r5, lr}
 80167e2:	b158      	cbz	r0, 80167fc <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x1c>
 80167e4:	460d      	mov	r5, r1
 80167e6:	f7fc f94f 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 80167ea:	2104      	movs	r1, #4
 80167ec:	182c      	adds	r4, r5, r0
 80167ee:	f1c5 0504 	rsb	r5, r5, #4
 80167f2:	4620      	mov	r0, r4
 80167f4:	f7fd fc4c 	bl	8014090 <ucdr_alignment>
 80167f8:	4428      	add	r0, r5
 80167fa:	4420      	add	r0, r4
 80167fc:	bd38      	pop	{r3, r4, r5, pc}
 80167fe:	bf00      	nop

08016800 <_SteeringWheelStatusStamped__cdr_deserialize>:
 8016800:	b538      	push	{r3, r4, r5, lr}
 8016802:	460c      	mov	r4, r1
 8016804:	b179      	cbz	r1, 8016826 <_SteeringWheelStatusStamped__cdr_deserialize+0x26>
 8016806:	4605      	mov	r5, r0
 8016808:	f7fc f9a2 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801680c:	4603      	mov	r3, r0
 801680e:	4621      	mov	r1, r4
 8016810:	4628      	mov	r0, r5
 8016812:	685b      	ldr	r3, [r3, #4]
 8016814:	68db      	ldr	r3, [r3, #12]
 8016816:	4798      	blx	r3
 8016818:	f104 0108 	add.w	r1, r4, #8
 801681c:	4628      	mov	r0, r5
 801681e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016822:	f7fd b9b7 	b.w	8013b94 <ucdr_deserialize_float>
 8016826:	4608      	mov	r0, r1
 8016828:	bd38      	pop	{r3, r4, r5, pc}
 801682a:	bf00      	nop

0801682c <_SteeringWheelStatusStamped__cdr_serialize>:
 801682c:	b188      	cbz	r0, 8016852 <_SteeringWheelStatusStamped__cdr_serialize+0x26>
 801682e:	b538      	push	{r3, r4, r5, lr}
 8016830:	4604      	mov	r4, r0
 8016832:	460d      	mov	r5, r1
 8016834:	f7fc f98c 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016838:	4603      	mov	r3, r0
 801683a:	4629      	mov	r1, r5
 801683c:	4620      	mov	r0, r4
 801683e:	685b      	ldr	r3, [r3, #4]
 8016840:	689b      	ldr	r3, [r3, #8]
 8016842:	4798      	blx	r3
 8016844:	ed94 0a02 	vldr	s0, [r4, #8]
 8016848:	4628      	mov	r0, r5
 801684a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801684e:	f7fd b909 	b.w	8013a64 <ucdr_serialize_float>
 8016852:	4770      	bx	lr

08016854 <_SteeringWheelStatusStamped__get_serialized_size>:
 8016854:	b150      	cbz	r0, 801686c <_SteeringWheelStatusStamped__get_serialized_size+0x18>
 8016856:	2100      	movs	r1, #0
 8016858:	b510      	push	{r4, lr}
 801685a:	f7fc f915 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 801685e:	4604      	mov	r4, r0
 8016860:	2104      	movs	r1, #4
 8016862:	f7fd fc15 	bl	8014090 <ucdr_alignment>
 8016866:	4420      	add	r0, r4
 8016868:	3004      	adds	r0, #4
 801686a:	bd10      	pop	{r4, pc}
 801686c:	4770      	bx	lr
 801686e:	bf00      	nop

08016870 <_SteeringWheelStatusStamped__max_serialized_size>:
 8016870:	b510      	push	{r4, lr}
 8016872:	b082      	sub	sp, #8
 8016874:	2301      	movs	r3, #1
 8016876:	2100      	movs	r1, #0
 8016878:	f10d 0007 	add.w	r0, sp, #7
 801687c:	f88d 3007 	strb.w	r3, [sp, #7]
 8016880:	f7fc f952 	bl	8012b28 <max_serialized_size_builtin_interfaces__msg__Time>
 8016884:	4604      	mov	r4, r0
 8016886:	2104      	movs	r1, #4
 8016888:	f7fd fc02 	bl	8014090 <ucdr_alignment>
 801688c:	4420      	add	r0, r4
 801688e:	3004      	adds	r0, #4
 8016890:	b002      	add	sp, #8
 8016892:	bd10      	pop	{r4, pc}

08016894 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8016894:	4800      	ldr	r0, [pc, #0]	@ (8016898 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x4>)
 8016896:	4770      	bx	lr
 8016898:	24001090 	.word	0x24001090

0801689c <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 801689c:	b538      	push	{r3, r4, r5, lr}
 801689e:	b158      	cbz	r0, 80168b8 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x1c>
 80168a0:	460d      	mov	r5, r1
 80168a2:	f7fc f8f1 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 80168a6:	2101      	movs	r1, #1
 80168a8:	182c      	adds	r4, r5, r0
 80168aa:	f1c5 0501 	rsb	r5, r5, #1
 80168ae:	4620      	mov	r0, r4
 80168b0:	f7fd fbee 	bl	8014090 <ucdr_alignment>
 80168b4:	4428      	add	r0, r5
 80168b6:	4420      	add	r0, r4
 80168b8:	bd38      	pop	{r3, r4, r5, pc}
 80168ba:	bf00      	nop

080168bc <_VehicleEmergencyStamped__cdr_deserialize>:
 80168bc:	b538      	push	{r3, r4, r5, lr}
 80168be:	460c      	mov	r4, r1
 80168c0:	b179      	cbz	r1, 80168e2 <_VehicleEmergencyStamped__cdr_deserialize+0x26>
 80168c2:	4605      	mov	r5, r0
 80168c4:	f7fc f944 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80168c8:	4603      	mov	r3, r0
 80168ca:	4621      	mov	r1, r4
 80168cc:	4628      	mov	r0, r5
 80168ce:	685b      	ldr	r3, [r3, #4]
 80168d0:	68db      	ldr	r3, [r3, #12]
 80168d2:	4798      	blx	r3
 80168d4:	f104 0108 	add.w	r1, r4, #8
 80168d8:	4628      	mov	r0, r5
 80168da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80168de:	f7fc b951 	b.w	8012b84 <ucdr_deserialize_bool>
 80168e2:	4608      	mov	r0, r1
 80168e4:	bd38      	pop	{r3, r4, r5, pc}
 80168e6:	bf00      	nop

080168e8 <_VehicleEmergencyStamped__cdr_serialize>:
 80168e8:	b180      	cbz	r0, 801690c <_VehicleEmergencyStamped__cdr_serialize+0x24>
 80168ea:	b538      	push	{r3, r4, r5, lr}
 80168ec:	4604      	mov	r4, r0
 80168ee:	460d      	mov	r5, r1
 80168f0:	f7fc f92e 	bl	8012b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80168f4:	4603      	mov	r3, r0
 80168f6:	4629      	mov	r1, r5
 80168f8:	4620      	mov	r0, r4
 80168fa:	685b      	ldr	r3, [r3, #4]
 80168fc:	689b      	ldr	r3, [r3, #8]
 80168fe:	4798      	blx	r3
 8016900:	7a21      	ldrb	r1, [r4, #8]
 8016902:	4628      	mov	r0, r5
 8016904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016908:	f7fc b926 	b.w	8012b58 <ucdr_serialize_bool>
 801690c:	4770      	bx	lr
 801690e:	bf00      	nop

08016910 <_VehicleEmergencyStamped__get_serialized_size>:
 8016910:	b150      	cbz	r0, 8016928 <_VehicleEmergencyStamped__get_serialized_size+0x18>
 8016912:	2100      	movs	r1, #0
 8016914:	b510      	push	{r4, lr}
 8016916:	f7fc f8b7 	bl	8012a88 <get_serialized_size_builtin_interfaces__msg__Time>
 801691a:	4604      	mov	r4, r0
 801691c:	2101      	movs	r1, #1
 801691e:	f7fd fbb7 	bl	8014090 <ucdr_alignment>
 8016922:	4420      	add	r0, r4
 8016924:	3001      	adds	r0, #1
 8016926:	bd10      	pop	{r4, pc}
 8016928:	4770      	bx	lr
 801692a:	bf00      	nop

0801692c <_VehicleEmergencyStamped__max_serialized_size>:
 801692c:	b510      	push	{r4, lr}
 801692e:	b082      	sub	sp, #8
 8016930:	2401      	movs	r4, #1
 8016932:	2100      	movs	r1, #0
 8016934:	f10d 0007 	add.w	r0, sp, #7
 8016938:	f88d 4007 	strb.w	r4, [sp, #7]
 801693c:	f7fc f8f4 	bl	8012b28 <max_serialized_size_builtin_interfaces__msg__Time>
 8016940:	4621      	mov	r1, r4
 8016942:	4604      	mov	r4, r0
 8016944:	f7fd fba4 	bl	8014090 <ucdr_alignment>
 8016948:	4420      	add	r0, r4
 801694a:	3001      	adds	r0, #1
 801694c:	b002      	add	sp, #8
 801694e:	bd10      	pop	{r4, pc}

08016950 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8016950:	4800      	ldr	r0, [pc, #0]	@ (8016954 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x4>)
 8016952:	4770      	bx	lr
 8016954:	240010b8 	.word	0x240010b8

08016958 <autoware_auto_control_msgs__msg__AckermannControlCommand__init>:
 8016958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801695a:	4605      	mov	r5, r0
 801695c:	b300      	cbz	r0, 80169a0 <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x48>
 801695e:	f000 f971 	bl	8016c44 <builtin_interfaces__msg__Time__init>
 8016962:	4604      	mov	r4, r0
 8016964:	b178      	cbz	r0, 8016986 <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x2e>
 8016966:	f105 0608 	add.w	r6, r5, #8
 801696a:	4630      	mov	r0, r6
 801696c:	f000 f842 	bl	80169f4 <autoware_auto_control_msgs__msg__AckermannLateralCommand__init>
 8016970:	4604      	mov	r4, r0
 8016972:	b1c0      	cbz	r0, 80169a6 <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x4e>
 8016974:	f105 0718 	add.w	r7, r5, #24
 8016978:	4638      	mov	r0, r7
 801697a:	f000 f853 	bl	8016a24 <autoware_auto_control_msgs__msg__LongitudinalCommand__init>
 801697e:	4604      	mov	r4, r0
 8016980:	b1e8      	cbz	r0, 80169be <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x66>
 8016982:	4620      	mov	r0, r4
 8016984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016986:	4628      	mov	r0, r5
 8016988:	f000 f960 	bl	8016c4c <builtin_interfaces__msg__Time__fini>
 801698c:	f105 0008 	add.w	r0, r5, #8
 8016990:	f000 f844 	bl	8016a1c <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>
 8016994:	f105 0018 	add.w	r0, r5, #24
 8016998:	f000 f85a 	bl	8016a50 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>
 801699c:	4620      	mov	r0, r4
 801699e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169a0:	4604      	mov	r4, r0
 80169a2:	4620      	mov	r0, r4
 80169a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169a6:	4628      	mov	r0, r5
 80169a8:	f000 f950 	bl	8016c4c <builtin_interfaces__msg__Time__fini>
 80169ac:	4630      	mov	r0, r6
 80169ae:	f000 f835 	bl	8016a1c <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>
 80169b2:	f105 0018 	add.w	r0, r5, #24
 80169b6:	f000 f84b 	bl	8016a50 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>
 80169ba:	4620      	mov	r0, r4
 80169bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169be:	4628      	mov	r0, r5
 80169c0:	f000 f944 	bl	8016c4c <builtin_interfaces__msg__Time__fini>
 80169c4:	4630      	mov	r0, r6
 80169c6:	f000 f829 	bl	8016a1c <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>
 80169ca:	4638      	mov	r0, r7
 80169cc:	f000 f840 	bl	8016a50 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>
 80169d0:	e7d7      	b.n	8016982 <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x2a>
 80169d2:	bf00      	nop

080169d4 <autoware_auto_control_msgs__msg__AckermannControlCommand__fini>:
 80169d4:	b168      	cbz	r0, 80169f2 <autoware_auto_control_msgs__msg__AckermannControlCommand__fini+0x1e>
 80169d6:	b510      	push	{r4, lr}
 80169d8:	4604      	mov	r4, r0
 80169da:	f000 f937 	bl	8016c4c <builtin_interfaces__msg__Time__fini>
 80169de:	f104 0008 	add.w	r0, r4, #8
 80169e2:	f000 f81b 	bl	8016a1c <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>
 80169e6:	f104 0018 	add.w	r0, r4, #24
 80169ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80169ee:	f000 b82f 	b.w	8016a50 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>
 80169f2:	4770      	bx	lr

080169f4 <autoware_auto_control_msgs__msg__AckermannLateralCommand__init>:
 80169f4:	b538      	push	{r3, r4, r5, lr}
 80169f6:	4604      	mov	r4, r0
 80169f8:	b140      	cbz	r0, 8016a0c <autoware_auto_control_msgs__msg__AckermannLateralCommand__init+0x18>
 80169fa:	f000 f923 	bl	8016c44 <builtin_interfaces__msg__Time__init>
 80169fe:	4605      	mov	r5, r0
 8016a00:	b138      	cbz	r0, 8016a12 <autoware_auto_control_msgs__msg__AckermannLateralCommand__init+0x1e>
 8016a02:	2300      	movs	r3, #0
 8016a04:	4628      	mov	r0, r5
 8016a06:	60a3      	str	r3, [r4, #8]
 8016a08:	60e3      	str	r3, [r4, #12]
 8016a0a:	bd38      	pop	{r3, r4, r5, pc}
 8016a0c:	4605      	mov	r5, r0
 8016a0e:	4628      	mov	r0, r5
 8016a10:	bd38      	pop	{r3, r4, r5, pc}
 8016a12:	4620      	mov	r0, r4
 8016a14:	f000 f91a 	bl	8016c4c <builtin_interfaces__msg__Time__fini>
 8016a18:	4628      	mov	r0, r5
 8016a1a:	bd38      	pop	{r3, r4, r5, pc}

08016a1c <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>:
 8016a1c:	b108      	cbz	r0, 8016a22 <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini+0x6>
 8016a1e:	f000 b915 	b.w	8016c4c <builtin_interfaces__msg__Time__fini>
 8016a22:	4770      	bx	lr

08016a24 <autoware_auto_control_msgs__msg__LongitudinalCommand__init>:
 8016a24:	b538      	push	{r3, r4, r5, lr}
 8016a26:	4604      	mov	r4, r0
 8016a28:	b148      	cbz	r0, 8016a3e <autoware_auto_control_msgs__msg__LongitudinalCommand__init+0x1a>
 8016a2a:	f000 f90b 	bl	8016c44 <builtin_interfaces__msg__Time__init>
 8016a2e:	4605      	mov	r5, r0
 8016a30:	b140      	cbz	r0, 8016a44 <autoware_auto_control_msgs__msg__LongitudinalCommand__init+0x20>
 8016a32:	2300      	movs	r3, #0
 8016a34:	4628      	mov	r0, r5
 8016a36:	60a3      	str	r3, [r4, #8]
 8016a38:	60e3      	str	r3, [r4, #12]
 8016a3a:	6123      	str	r3, [r4, #16]
 8016a3c:	bd38      	pop	{r3, r4, r5, pc}
 8016a3e:	4605      	mov	r5, r0
 8016a40:	4628      	mov	r0, r5
 8016a42:	bd38      	pop	{r3, r4, r5, pc}
 8016a44:	4620      	mov	r0, r4
 8016a46:	f000 f901 	bl	8016c4c <builtin_interfaces__msg__Time__fini>
 8016a4a:	4628      	mov	r0, r5
 8016a4c:	bd38      	pop	{r3, r4, r5, pc}
 8016a4e:	bf00      	nop

08016a50 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>:
 8016a50:	b108      	cbz	r0, 8016a56 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini+0x6>
 8016a52:	f000 b8fb 	b.w	8016c4c <builtin_interfaces__msg__Time__fini>
 8016a56:	4770      	bx	lr

08016a58 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__init>:
 8016a58:	b538      	push	{r3, r4, r5, lr}
 8016a5a:	4604      	mov	r4, r0
 8016a5c:	b128      	cbz	r0, 8016a6a <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__init+0x12>
 8016a5e:	f000 f8f1 	bl	8016c44 <builtin_interfaces__msg__Time__init>
 8016a62:	4605      	mov	r5, r0
 8016a64:	b120      	cbz	r0, 8016a70 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__init+0x18>
 8016a66:	4628      	mov	r0, r5
 8016a68:	bd38      	pop	{r3, r4, r5, pc}
 8016a6a:	4605      	mov	r5, r0
 8016a6c:	4628      	mov	r0, r5
 8016a6e:	bd38      	pop	{r3, r4, r5, pc}
 8016a70:	4620      	mov	r0, r4
 8016a72:	f000 f8eb 	bl	8016c4c <builtin_interfaces__msg__Time__fini>
 8016a76:	4628      	mov	r0, r5
 8016a78:	bd38      	pop	{r3, r4, r5, pc}
 8016a7a:	bf00      	nop

08016a7c <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__fini>:
 8016a7c:	b108      	cbz	r0, 8016a82 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__fini+0x6>
 8016a7e:	f000 b8e5 	b.w	8016c4c <builtin_interfaces__msg__Time__fini>
 8016a82:	4770      	bx	lr

08016a84 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__init>:
 8016a84:	3800      	subs	r0, #0
 8016a86:	bf18      	it	ne
 8016a88:	2001      	movne	r0, #1
 8016a8a:	4770      	bx	lr

08016a8c <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__fini>:
 8016a8c:	4770      	bx	lr
 8016a8e:	bf00      	nop

08016a90 <autoware_auto_vehicle_msgs__msg__ControlModeReport__init>:
 8016a90:	b538      	push	{r3, r4, r5, lr}
 8016a92:	4604      	mov	r4, r0
 8016a94:	b138      	cbz	r0, 8016aa6 <autoware_auto_vehicle_msgs__msg__ControlModeReport__init+0x16>
 8016a96:	f000 f8d5 	bl	8016c44 <builtin_interfaces__msg__Time__init>
 8016a9a:	4605      	mov	r5, r0
 8016a9c:	b130      	cbz	r0, 8016aac <autoware_auto_vehicle_msgs__msg__ControlModeReport__init+0x1c>
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	4628      	mov	r0, r5
 8016aa2:	7223      	strb	r3, [r4, #8]
 8016aa4:	bd38      	pop	{r3, r4, r5, pc}
 8016aa6:	4605      	mov	r5, r0
 8016aa8:	4628      	mov	r0, r5
 8016aaa:	bd38      	pop	{r3, r4, r5, pc}
 8016aac:	4620      	mov	r0, r4
 8016aae:	f000 f8cd 	bl	8016c4c <builtin_interfaces__msg__Time__fini>
 8016ab2:	4628      	mov	r0, r5
 8016ab4:	bd38      	pop	{r3, r4, r5, pc}
 8016ab6:	bf00      	nop

08016ab8 <autoware_auto_vehicle_msgs__msg__ControlModeReport__fini>:
 8016ab8:	b108      	cbz	r0, 8016abe <autoware_auto_vehicle_msgs__msg__ControlModeReport__fini+0x6>
 8016aba:	f000 b8c7 	b.w	8016c4c <builtin_interfaces__msg__Time__fini>
 8016abe:	4770      	bx	lr

08016ac0 <autoware_auto_vehicle_msgs__msg__GearCommand__init>:
 8016ac0:	b538      	push	{r3, r4, r5, lr}
 8016ac2:	4604      	mov	r4, r0
 8016ac4:	b138      	cbz	r0, 8016ad6 <autoware_auto_vehicle_msgs__msg__GearCommand__init+0x16>
 8016ac6:	f000 f8bd 	bl	8016c44 <builtin_interfaces__msg__Time__init>
 8016aca:	4605      	mov	r5, r0
 8016acc:	b130      	cbz	r0, 8016adc <autoware_auto_vehicle_msgs__msg__GearCommand__init+0x1c>
 8016ace:	2300      	movs	r3, #0
 8016ad0:	4628      	mov	r0, r5
 8016ad2:	7223      	strb	r3, [r4, #8]
 8016ad4:	bd38      	pop	{r3, r4, r5, pc}
 8016ad6:	4605      	mov	r5, r0
 8016ad8:	4628      	mov	r0, r5
 8016ada:	bd38      	pop	{r3, r4, r5, pc}
 8016adc:	4620      	mov	r0, r4
 8016ade:	f000 f8b5 	bl	8016c4c <builtin_interfaces__msg__Time__fini>
 8016ae2:	4628      	mov	r0, r5
 8016ae4:	bd38      	pop	{r3, r4, r5, pc}
 8016ae6:	bf00      	nop

08016ae8 <autoware_auto_vehicle_msgs__msg__GearCommand__fini>:
 8016ae8:	b108      	cbz	r0, 8016aee <autoware_auto_vehicle_msgs__msg__GearCommand__fini+0x6>
 8016aea:	f000 b8af 	b.w	8016c4c <builtin_interfaces__msg__Time__fini>
 8016aee:	4770      	bx	lr

08016af0 <autoware_auto_vehicle_msgs__msg__GearReport__init>:
 8016af0:	b538      	push	{r3, r4, r5, lr}
 8016af2:	4604      	mov	r4, r0
 8016af4:	b138      	cbz	r0, 8016b06 <autoware_auto_vehicle_msgs__msg__GearReport__init+0x16>
 8016af6:	f000 f8a5 	bl	8016c44 <builtin_interfaces__msg__Time__init>
 8016afa:	4605      	mov	r5, r0
 8016afc:	b130      	cbz	r0, 8016b0c <autoware_auto_vehicle_msgs__msg__GearReport__init+0x1c>
 8016afe:	2300      	movs	r3, #0
 8016b00:	4628      	mov	r0, r5
 8016b02:	7223      	strb	r3, [r4, #8]
 8016b04:	bd38      	pop	{r3, r4, r5, pc}
 8016b06:	4605      	mov	r5, r0
 8016b08:	4628      	mov	r0, r5
 8016b0a:	bd38      	pop	{r3, r4, r5, pc}
 8016b0c:	4620      	mov	r0, r4
 8016b0e:	f000 f89d 	bl	8016c4c <builtin_interfaces__msg__Time__fini>
 8016b12:	4628      	mov	r0, r5
 8016b14:	bd38      	pop	{r3, r4, r5, pc}
 8016b16:	bf00      	nop

08016b18 <autoware_auto_vehicle_msgs__msg__GearReport__fini>:
 8016b18:	b108      	cbz	r0, 8016b1e <autoware_auto_vehicle_msgs__msg__GearReport__fini+0x6>
 8016b1a:	f000 b897 	b.w	8016c4c <builtin_interfaces__msg__Time__fini>
 8016b1e:	4770      	bx	lr

08016b20 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__init>:
 8016b20:	b538      	push	{r3, r4, r5, lr}
 8016b22:	4604      	mov	r4, r0
 8016b24:	b138      	cbz	r0, 8016b36 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__init+0x16>
 8016b26:	f000 f88d 	bl	8016c44 <builtin_interfaces__msg__Time__init>
 8016b2a:	4605      	mov	r5, r0
 8016b2c:	b130      	cbz	r0, 8016b3c <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__init+0x1c>
 8016b2e:	2300      	movs	r3, #0
 8016b30:	4628      	mov	r0, r5
 8016b32:	7223      	strb	r3, [r4, #8]
 8016b34:	bd38      	pop	{r3, r4, r5, pc}
 8016b36:	4605      	mov	r5, r0
 8016b38:	4628      	mov	r0, r5
 8016b3a:	bd38      	pop	{r3, r4, r5, pc}
 8016b3c:	4620      	mov	r0, r4
 8016b3e:	f000 f885 	bl	8016c4c <builtin_interfaces__msg__Time__fini>
 8016b42:	4628      	mov	r0, r5
 8016b44:	bd38      	pop	{r3, r4, r5, pc}
 8016b46:	bf00      	nop

08016b48 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__fini>:
 8016b48:	b108      	cbz	r0, 8016b4e <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__fini+0x6>
 8016b4a:	f000 b87f 	b.w	8016c4c <builtin_interfaces__msg__Time__fini>
 8016b4e:	4770      	bx	lr

08016b50 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__init>:
 8016b50:	b538      	push	{r3, r4, r5, lr}
 8016b52:	4604      	mov	r4, r0
 8016b54:	b138      	cbz	r0, 8016b66 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__init+0x16>
 8016b56:	f000 f875 	bl	8016c44 <builtin_interfaces__msg__Time__init>
 8016b5a:	4605      	mov	r5, r0
 8016b5c:	b130      	cbz	r0, 8016b6c <autoware_auto_vehicle_msgs__msg__HazardLightsReport__init+0x1c>
 8016b5e:	2300      	movs	r3, #0
 8016b60:	4628      	mov	r0, r5
 8016b62:	7223      	strb	r3, [r4, #8]
 8016b64:	bd38      	pop	{r3, r4, r5, pc}
 8016b66:	4605      	mov	r5, r0
 8016b68:	4628      	mov	r0, r5
 8016b6a:	bd38      	pop	{r3, r4, r5, pc}
 8016b6c:	4620      	mov	r0, r4
 8016b6e:	f000 f86d 	bl	8016c4c <builtin_interfaces__msg__Time__fini>
 8016b72:	4628      	mov	r0, r5
 8016b74:	bd38      	pop	{r3, r4, r5, pc}
 8016b76:	bf00      	nop

08016b78 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__fini>:
 8016b78:	b108      	cbz	r0, 8016b7e <autoware_auto_vehicle_msgs__msg__HazardLightsReport__fini+0x6>
 8016b7a:	f000 b867 	b.w	8016c4c <builtin_interfaces__msg__Time__fini>
 8016b7e:	4770      	bx	lr

08016b80 <autoware_auto_vehicle_msgs__msg__SteeringReport__init>:
 8016b80:	b538      	push	{r3, r4, r5, lr}
 8016b82:	4604      	mov	r4, r0
 8016b84:	b138      	cbz	r0, 8016b96 <autoware_auto_vehicle_msgs__msg__SteeringReport__init+0x16>
 8016b86:	f000 f85d 	bl	8016c44 <builtin_interfaces__msg__Time__init>
 8016b8a:	4605      	mov	r5, r0
 8016b8c:	b130      	cbz	r0, 8016b9c <autoware_auto_vehicle_msgs__msg__SteeringReport__init+0x1c>
 8016b8e:	2300      	movs	r3, #0
 8016b90:	4628      	mov	r0, r5
 8016b92:	60a3      	str	r3, [r4, #8]
 8016b94:	bd38      	pop	{r3, r4, r5, pc}
 8016b96:	4605      	mov	r5, r0
 8016b98:	4628      	mov	r0, r5
 8016b9a:	bd38      	pop	{r3, r4, r5, pc}
 8016b9c:	4620      	mov	r0, r4
 8016b9e:	f000 f855 	bl	8016c4c <builtin_interfaces__msg__Time__fini>
 8016ba2:	4628      	mov	r0, r5
 8016ba4:	bd38      	pop	{r3, r4, r5, pc}
 8016ba6:	bf00      	nop

08016ba8 <autoware_auto_vehicle_msgs__msg__SteeringReport__fini>:
 8016ba8:	b108      	cbz	r0, 8016bae <autoware_auto_vehicle_msgs__msg__SteeringReport__fini+0x6>
 8016baa:	f000 b84f 	b.w	8016c4c <builtin_interfaces__msg__Time__fini>
 8016bae:	4770      	bx	lr

08016bb0 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__init>:
 8016bb0:	b538      	push	{r3, r4, r5, lr}
 8016bb2:	4604      	mov	r4, r0
 8016bb4:	b138      	cbz	r0, 8016bc6 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x16>
 8016bb6:	f000 f845 	bl	8016c44 <builtin_interfaces__msg__Time__init>
 8016bba:	4605      	mov	r5, r0
 8016bbc:	b130      	cbz	r0, 8016bcc <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x1c>
 8016bbe:	2300      	movs	r3, #0
 8016bc0:	4628      	mov	r0, r5
 8016bc2:	7223      	strb	r3, [r4, #8]
 8016bc4:	bd38      	pop	{r3, r4, r5, pc}
 8016bc6:	4605      	mov	r5, r0
 8016bc8:	4628      	mov	r0, r5
 8016bca:	bd38      	pop	{r3, r4, r5, pc}
 8016bcc:	4620      	mov	r0, r4
 8016bce:	f000 f83d 	bl	8016c4c <builtin_interfaces__msg__Time__fini>
 8016bd2:	4628      	mov	r0, r5
 8016bd4:	bd38      	pop	{r3, r4, r5, pc}
 8016bd6:	bf00      	nop

08016bd8 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__fini>:
 8016bd8:	b108      	cbz	r0, 8016bde <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__fini+0x6>
 8016bda:	f000 b837 	b.w	8016c4c <builtin_interfaces__msg__Time__fini>
 8016bde:	4770      	bx	lr

08016be0 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__init>:
 8016be0:	b538      	push	{r3, r4, r5, lr}
 8016be2:	4604      	mov	r4, r0
 8016be4:	b138      	cbz	r0, 8016bf6 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__init+0x16>
 8016be6:	f000 f82d 	bl	8016c44 <builtin_interfaces__msg__Time__init>
 8016bea:	4605      	mov	r5, r0
 8016bec:	b130      	cbz	r0, 8016bfc <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__init+0x1c>
 8016bee:	2300      	movs	r3, #0
 8016bf0:	4628      	mov	r0, r5
 8016bf2:	7223      	strb	r3, [r4, #8]
 8016bf4:	bd38      	pop	{r3, r4, r5, pc}
 8016bf6:	4605      	mov	r5, r0
 8016bf8:	4628      	mov	r0, r5
 8016bfa:	bd38      	pop	{r3, r4, r5, pc}
 8016bfc:	4620      	mov	r0, r4
 8016bfe:	f000 f825 	bl	8016c4c <builtin_interfaces__msg__Time__fini>
 8016c02:	4628      	mov	r0, r5
 8016c04:	bd38      	pop	{r3, r4, r5, pc}
 8016c06:	bf00      	nop

08016c08 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__fini>:
 8016c08:	b108      	cbz	r0, 8016c0e <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__fini+0x6>
 8016c0a:	f000 b81f 	b.w	8016c4c <builtin_interfaces__msg__Time__fini>
 8016c0e:	4770      	bx	lr

08016c10 <autoware_auto_vehicle_msgs__msg__VelocityReport__init>:
 8016c10:	b538      	push	{r3, r4, r5, lr}
 8016c12:	4604      	mov	r4, r0
 8016c14:	b148      	cbz	r0, 8016c2a <autoware_auto_vehicle_msgs__msg__VelocityReport__init+0x1a>
 8016c16:	f008 ff07 	bl	801fa28 <std_msgs__msg__Header__init>
 8016c1a:	4605      	mov	r5, r0
 8016c1c:	b140      	cbz	r0, 8016c30 <autoware_auto_vehicle_msgs__msg__VelocityReport__init+0x20>
 8016c1e:	2300      	movs	r3, #0
 8016c20:	4628      	mov	r0, r5
 8016c22:	6163      	str	r3, [r4, #20]
 8016c24:	61a3      	str	r3, [r4, #24]
 8016c26:	61e3      	str	r3, [r4, #28]
 8016c28:	bd38      	pop	{r3, r4, r5, pc}
 8016c2a:	4605      	mov	r5, r0
 8016c2c:	4628      	mov	r0, r5
 8016c2e:	bd38      	pop	{r3, r4, r5, pc}
 8016c30:	4620      	mov	r0, r4
 8016c32:	f008 ff1d 	bl	801fa70 <std_msgs__msg__Header__fini>
 8016c36:	4628      	mov	r0, r5
 8016c38:	bd38      	pop	{r3, r4, r5, pc}
 8016c3a:	bf00      	nop

08016c3c <autoware_auto_vehicle_msgs__msg__VelocityReport__fini>:
 8016c3c:	b108      	cbz	r0, 8016c42 <autoware_auto_vehicle_msgs__msg__VelocityReport__fini+0x6>
 8016c3e:	f008 bf17 	b.w	801fa70 <std_msgs__msg__Header__fini>
 8016c42:	4770      	bx	lr

08016c44 <builtin_interfaces__msg__Time__init>:
 8016c44:	3800      	subs	r0, #0
 8016c46:	bf18      	it	ne
 8016c48:	2001      	movne	r0, #1
 8016c4a:	4770      	bx	lr

08016c4c <builtin_interfaces__msg__Time__fini>:
 8016c4c:	4770      	bx	lr
 8016c4e:	bf00      	nop

08016c50 <ucdr_serialize_sequence_char>:
 8016c50:	b570      	push	{r4, r5, r6, lr}
 8016c52:	4615      	mov	r5, r2
 8016c54:	460e      	mov	r6, r1
 8016c56:	7d01      	ldrb	r1, [r0, #20]
 8016c58:	4604      	mov	r4, r0
 8016c5a:	f7fc fa59 	bl	8013110 <ucdr_serialize_endian_uint32_t>
 8016c5e:	b90d      	cbnz	r5, 8016c64 <ucdr_serialize_sequence_char+0x14>
 8016c60:	2001      	movs	r0, #1
 8016c62:	bd70      	pop	{r4, r5, r6, pc}
 8016c64:	462b      	mov	r3, r5
 8016c66:	4632      	mov	r2, r6
 8016c68:	7d21      	ldrb	r1, [r4, #20]
 8016c6a:	4620      	mov	r0, r4
 8016c6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c70:	f009 b8d2 	b.w	801fe18 <ucdr_serialize_endian_array_char>

08016c74 <ucdr_deserialize_sequence_char>:
 8016c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c78:	461d      	mov	r5, r3
 8016c7a:	4616      	mov	r6, r2
 8016c7c:	460f      	mov	r7, r1
 8016c7e:	461a      	mov	r2, r3
 8016c80:	7d01      	ldrb	r1, [r0, #20]
 8016c82:	4604      	mov	r4, r0
 8016c84:	f7fc fb6c 	bl	8013360 <ucdr_deserialize_endian_uint32_t>
 8016c88:	682b      	ldr	r3, [r5, #0]
 8016c8a:	429e      	cmp	r6, r3
 8016c8c:	d201      	bcs.n	8016c92 <ucdr_deserialize_sequence_char+0x1e>
 8016c8e:	2201      	movs	r2, #1
 8016c90:	75a2      	strb	r2, [r4, #22]
 8016c92:	b913      	cbnz	r3, 8016c9a <ucdr_deserialize_sequence_char+0x26>
 8016c94:	2001      	movs	r0, #1
 8016c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c9a:	463a      	mov	r2, r7
 8016c9c:	7d21      	ldrb	r1, [r4, #20]
 8016c9e:	4620      	mov	r0, r4
 8016ca0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ca4:	f009 b8ea 	b.w	801fe7c <ucdr_deserialize_endian_array_char>

08016ca8 <ucdr_serialize_sequence_uint8_t>:
 8016ca8:	b570      	push	{r4, r5, r6, lr}
 8016caa:	4615      	mov	r5, r2
 8016cac:	460e      	mov	r6, r1
 8016cae:	7d01      	ldrb	r1, [r0, #20]
 8016cb0:	4604      	mov	r4, r0
 8016cb2:	f7fc fa2d 	bl	8013110 <ucdr_serialize_endian_uint32_t>
 8016cb6:	b90d      	cbnz	r5, 8016cbc <ucdr_serialize_sequence_uint8_t+0x14>
 8016cb8:	2001      	movs	r0, #1
 8016cba:	bd70      	pop	{r4, r5, r6, pc}
 8016cbc:	462b      	mov	r3, r5
 8016cbe:	4632      	mov	r2, r6
 8016cc0:	7d21      	ldrb	r1, [r4, #20]
 8016cc2:	4620      	mov	r0, r4
 8016cc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016cc8:	f009 b93e 	b.w	801ff48 <ucdr_serialize_endian_array_uint8_t>

08016ccc <ucdr_deserialize_sequence_uint8_t>:
 8016ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cd0:	461d      	mov	r5, r3
 8016cd2:	4616      	mov	r6, r2
 8016cd4:	460f      	mov	r7, r1
 8016cd6:	461a      	mov	r2, r3
 8016cd8:	7d01      	ldrb	r1, [r0, #20]
 8016cda:	4604      	mov	r4, r0
 8016cdc:	f7fc fb40 	bl	8013360 <ucdr_deserialize_endian_uint32_t>
 8016ce0:	682b      	ldr	r3, [r5, #0]
 8016ce2:	429e      	cmp	r6, r3
 8016ce4:	d201      	bcs.n	8016cea <ucdr_deserialize_sequence_uint8_t+0x1e>
 8016ce6:	2201      	movs	r2, #1
 8016ce8:	75a2      	strb	r2, [r4, #22]
 8016cea:	b913      	cbnz	r3, 8016cf2 <ucdr_deserialize_sequence_uint8_t+0x26>
 8016cec:	2001      	movs	r0, #1
 8016cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cf2:	463a      	mov	r2, r7
 8016cf4:	7d21      	ldrb	r1, [r4, #20]
 8016cf6:	4620      	mov	r0, r4
 8016cf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016cfc:	f009 b98a 	b.w	8020014 <ucdr_deserialize_endian_array_uint8_t>

08016d00 <uxr_buffer_delete_entity>:
 8016d00:	b510      	push	{r4, lr}
 8016d02:	2300      	movs	r3, #0
 8016d04:	b08e      	sub	sp, #56	@ 0x38
 8016d06:	4604      	mov	r4, r0
 8016d08:	9103      	str	r1, [sp, #12]
 8016d0a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8016d0e:	2303      	movs	r3, #3
 8016d10:	2204      	movs	r2, #4
 8016d12:	9300      	str	r3, [sp, #0]
 8016d14:	ab06      	add	r3, sp, #24
 8016d16:	f001 fbcb 	bl	80184b0 <uxr_prepare_stream_to_write_submessage>
 8016d1a:	b918      	cbnz	r0, 8016d24 <uxr_buffer_delete_entity+0x24>
 8016d1c:	4604      	mov	r4, r0
 8016d1e:	4620      	mov	r0, r4
 8016d20:	b00e      	add	sp, #56	@ 0x38
 8016d22:	bd10      	pop	{r4, pc}
 8016d24:	9902      	ldr	r1, [sp, #8]
 8016d26:	aa05      	add	r2, sp, #20
 8016d28:	4620      	mov	r0, r4
 8016d2a:	f001 fcfd 	bl	8018728 <uxr_init_base_object_request>
 8016d2e:	4604      	mov	r4, r0
 8016d30:	a905      	add	r1, sp, #20
 8016d32:	a806      	add	r0, sp, #24
 8016d34:	f003 fc18 	bl	801a568 <uxr_serialize_DELETE_Payload>
 8016d38:	4620      	mov	r0, r4
 8016d3a:	b00e      	add	sp, #56	@ 0x38
 8016d3c:	bd10      	pop	{r4, pc}
 8016d3e:	bf00      	nop

08016d40 <uxr_common_create_entity>:
 8016d40:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8016d44:	b510      	push	{r4, lr}
 8016d46:	f1bc 0f01 	cmp.w	ip, #1
 8016d4a:	b08c      	sub	sp, #48	@ 0x30
 8016d4c:	4604      	mov	r4, r0
 8016d4e:	9202      	str	r2, [sp, #8]
 8016d50:	bf0c      	ite	eq
 8016d52:	f003 0201 	andeq.w	r2, r3, #1
 8016d56:	2200      	movne	r2, #0
 8016d58:	330e      	adds	r3, #14
 8016d5a:	9103      	str	r1, [sp, #12]
 8016d5c:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8016d60:	441a      	add	r2, r3
 8016d62:	ab04      	add	r3, sp, #16
 8016d64:	9101      	str	r1, [sp, #4]
 8016d66:	2101      	movs	r1, #1
 8016d68:	b292      	uxth	r2, r2
 8016d6a:	9100      	str	r1, [sp, #0]
 8016d6c:	9903      	ldr	r1, [sp, #12]
 8016d6e:	f001 fb9f 	bl	80184b0 <uxr_prepare_stream_to_write_submessage>
 8016d72:	b918      	cbnz	r0, 8016d7c <uxr_common_create_entity+0x3c>
 8016d74:	4604      	mov	r4, r0
 8016d76:	4620      	mov	r0, r4
 8016d78:	b00c      	add	sp, #48	@ 0x30
 8016d7a:	bd10      	pop	{r4, pc}
 8016d7c:	9902      	ldr	r1, [sp, #8]
 8016d7e:	4620      	mov	r0, r4
 8016d80:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016d82:	f001 fcd1 	bl	8018728 <uxr_init_base_object_request>
 8016d86:	4604      	mov	r4, r0
 8016d88:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8016d8a:	a804      	add	r0, sp, #16
 8016d8c:	f003 fb30 	bl	801a3f0 <uxr_serialize_CREATE_Payload>
 8016d90:	4620      	mov	r0, r4
 8016d92:	b00c      	add	sp, #48	@ 0x30
 8016d94:	bd10      	pop	{r4, pc}
 8016d96:	bf00      	nop

08016d98 <uxr_buffer_create_participant_bin>:
 8016d98:	b570      	push	{r4, r5, r6, lr}
 8016d9a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8016d9e:	4605      	mov	r5, r0
 8016da0:	ac11      	add	r4, sp, #68	@ 0x44
 8016da2:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8016da6:	2303      	movs	r3, #3
 8016da8:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8016dac:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8016db0:	7223      	strb	r3, [r4, #8]
 8016db2:	2300      	movs	r3, #0
 8016db4:	2201      	movs	r2, #1
 8016db6:	f88d 3014 	strb.w	r3, [sp, #20]
 8016dba:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8016dbc:	7122      	strb	r2, [r4, #4]
 8016dbe:	b1cb      	cbz	r3, 8016df4 <uxr_buffer_create_participant_bin+0x5c>
 8016dc0:	f88d 201c 	strb.w	r2, [sp, #28]
 8016dc4:	9308      	str	r3, [sp, #32]
 8016dc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016dca:	a915      	add	r1, sp, #84	@ 0x54
 8016dcc:	a809      	add	r0, sp, #36	@ 0x24
 8016dce:	f7fd f95b 	bl	8014088 <ucdr_init_buffer>
 8016dd2:	a905      	add	r1, sp, #20
 8016dd4:	a809      	add	r0, sp, #36	@ 0x24
 8016dd6:	f002 fec1 	bl	8019b5c <uxr_serialize_OBJK_DomainParticipant_Binary>
 8016dda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016ddc:	9600      	str	r6, [sp, #0]
 8016dde:	4628      	mov	r0, r5
 8016de0:	9401      	str	r4, [sp, #4]
 8016de2:	60e3      	str	r3, [r4, #12]
 8016de4:	b29b      	uxth	r3, r3
 8016de6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8016dea:	f7ff ffa9 	bl	8016d40 <uxr_common_create_entity>
 8016dee:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8016df2:	bd70      	pop	{r4, r5, r6, pc}
 8016df4:	f88d 301c 	strb.w	r3, [sp, #28]
 8016df8:	e7e5      	b.n	8016dc6 <uxr_buffer_create_participant_bin+0x2e>
 8016dfa:	bf00      	nop

08016dfc <uxr_buffer_create_topic_bin>:
 8016dfc:	b570      	push	{r4, r5, r6, lr}
 8016dfe:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8016e02:	4605      	mov	r5, r0
 8016e04:	4618      	mov	r0, r3
 8016e06:	9105      	str	r1, [sp, #20]
 8016e08:	a997      	add	r1, sp, #604	@ 0x25c
 8016e0a:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8016e0e:	ac13      	add	r4, sp, #76	@ 0x4c
 8016e10:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8016e14:	2302      	movs	r3, #2
 8016e16:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8016e1a:	f000 fa8d 	bl	8017338 <uxr_object_id_to_raw>
 8016e1e:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8016e20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016e24:	a917      	add	r1, sp, #92	@ 0x5c
 8016e26:	a80b      	add	r0, sp, #44	@ 0x2c
 8016e28:	9306      	str	r3, [sp, #24]
 8016e2a:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8016e2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8016e2e:	2303      	movs	r3, #3
 8016e30:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8016e34:	2301      	movs	r3, #1
 8016e36:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	f88d 301c 	strb.w	r3, [sp, #28]
 8016e40:	f7fd f922 	bl	8014088 <ucdr_init_buffer>
 8016e44:	a906      	add	r1, sp, #24
 8016e46:	a80b      	add	r0, sp, #44	@ 0x2c
 8016e48:	f002 feaa 	bl	8019ba0 <uxr_serialize_OBJK_Topic_Binary>
 8016e4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016e4e:	4628      	mov	r0, r5
 8016e50:	9600      	str	r6, [sp, #0]
 8016e52:	9316      	str	r3, [sp, #88]	@ 0x58
 8016e54:	b29b      	uxth	r3, r3
 8016e56:	9401      	str	r4, [sp, #4]
 8016e58:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8016e5c:	f7ff ff70 	bl	8016d40 <uxr_common_create_entity>
 8016e60:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8016e64:	bd70      	pop	{r4, r5, r6, pc}
 8016e66:	bf00      	nop

08016e68 <uxr_buffer_create_publisher_bin>:
 8016e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e6a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8016e6e:	2603      	movs	r6, #3
 8016e70:	4605      	mov	r5, r0
 8016e72:	4618      	mov	r0, r3
 8016e74:	9105      	str	r1, [sp, #20]
 8016e76:	a992      	add	r1, sp, #584	@ 0x248
 8016e78:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8016e7c:	ac0e      	add	r4, sp, #56	@ 0x38
 8016e7e:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8016e82:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8016e86:	f000 fa57 	bl	8017338 <uxr_object_id_to_raw>
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016e90:	a912      	add	r1, sp, #72	@ 0x48
 8016e92:	a806      	add	r0, sp, #24
 8016e94:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8016e98:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8016e9c:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8016ea0:	f7fd f8f2 	bl	8014088 <ucdr_init_buffer>
 8016ea4:	a993      	add	r1, sp, #588	@ 0x24c
 8016ea6:	a806      	add	r0, sp, #24
 8016ea8:	f002 ff2e 	bl	8019d08 <uxr_serialize_OBJK_Publisher_Binary>
 8016eac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016eae:	4628      	mov	r0, r5
 8016eb0:	9700      	str	r7, [sp, #0]
 8016eb2:	9311      	str	r3, [sp, #68]	@ 0x44
 8016eb4:	b29b      	uxth	r3, r3
 8016eb6:	9401      	str	r4, [sp, #4]
 8016eb8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8016ebc:	f7ff ff40 	bl	8016d40 <uxr_common_create_entity>
 8016ec0:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8016ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ec6:	bf00      	nop

08016ec8 <uxr_buffer_create_subscriber_bin>:
 8016ec8:	b570      	push	{r4, r5, r6, lr}
 8016eca:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 8016ece:	4605      	mov	r5, r0
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	9105      	str	r1, [sp, #20]
 8016ed4:	a992      	add	r1, sp, #584	@ 0x248
 8016ed6:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 8016eda:	ac0e      	add	r4, sp, #56	@ 0x38
 8016edc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8016ee0:	2304      	movs	r3, #4
 8016ee2:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8016ee6:	f000 fa27 	bl	8017338 <uxr_object_id_to_raw>
 8016eea:	2300      	movs	r3, #0
 8016eec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016ef0:	a912      	add	r1, sp, #72	@ 0x48
 8016ef2:	a806      	add	r0, sp, #24
 8016ef4:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8016ef8:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8016efc:	2303      	movs	r3, #3
 8016efe:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8016f02:	f7fd f8c1 	bl	8014088 <ucdr_init_buffer>
 8016f06:	a993      	add	r1, sp, #588	@ 0x24c
 8016f08:	a806      	add	r0, sp, #24
 8016f0a:	f002 ffad 	bl	8019e68 <uxr_serialize_OBJK_Subscriber_Binary>
 8016f0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016f10:	4628      	mov	r0, r5
 8016f12:	9600      	str	r6, [sp, #0]
 8016f14:	9311      	str	r3, [sp, #68]	@ 0x44
 8016f16:	b29b      	uxth	r3, r3
 8016f18:	9401      	str	r4, [sp, #4]
 8016f1a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8016f1e:	f7ff ff0f 	bl	8016d40 <uxr_common_create_entity>
 8016f22:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 8016f26:	bd70      	pop	{r4, r5, r6, pc}

08016f28 <uxr_buffer_create_datawriter_bin>:
 8016f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f2c:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8016f30:	4606      	mov	r6, r0
 8016f32:	4618      	mov	r0, r3
 8016f34:	2703      	movs	r7, #3
 8016f36:	ac1d      	add	r4, sp, #116	@ 0x74
 8016f38:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8016f3c:	9105      	str	r1, [sp, #20]
 8016f3e:	a9a1      	add	r1, sp, #644	@ 0x284
 8016f40:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8016f44:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8016f48:	2305      	movs	r3, #5
 8016f4a:	7123      	strb	r3, [r4, #4]
 8016f4c:	f000 f9f4 	bl	8017338 <uxr_object_id_to_raw>
 8016f50:	a90e      	add	r1, sp, #56	@ 0x38
 8016f52:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8016f54:	7227      	strb	r7, [r4, #8]
 8016f56:	f000 f9ef 	bl	8017338 <uxr_object_id_to_raw>
 8016f5a:	2300      	movs	r3, #0
 8016f5c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8016f60:	3d00      	subs	r5, #0
 8016f62:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8016f66:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8016f6a:	bf18      	it	ne
 8016f6c:	2501      	movne	r5, #1
 8016f6e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8016f72:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8016f76:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8016f7a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8016f7e:	2301      	movs	r3, #1
 8016f80:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8016f84:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8016f88:	bb8a      	cbnz	r2, 8016fee <uxr_buffer_create_datawriter_bin+0xc6>
 8016f8a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8016f8e:	f04f 0c13 	mov.w	ip, #19
 8016f92:	250b      	movs	r5, #11
 8016f94:	2221      	movs	r2, #33	@ 0x21
 8016f96:	2111      	movs	r1, #17
 8016f98:	2009      	movs	r0, #9
 8016f9a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8016f9e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8016fa2:	b923      	cbnz	r3, 8016fae <uxr_buffer_create_datawriter_bin+0x86>
 8016fa4:	4672      	mov	r2, lr
 8016fa6:	4661      	mov	r1, ip
 8016fa8:	4628      	mov	r0, r5
 8016faa:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8016fae:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8016fb2:	2b01      	cmp	r3, #1
 8016fb4:	d025      	beq.n	8017002 <uxr_buffer_create_datawriter_bin+0xda>
 8016fb6:	2b03      	cmp	r3, #3
 8016fb8:	d029      	beq.n	801700e <uxr_buffer_create_datawriter_bin+0xe6>
 8016fba:	b32b      	cbz	r3, 8017008 <uxr_buffer_create_datawriter_bin+0xe0>
 8016fbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016fc0:	a921      	add	r1, sp, #132	@ 0x84
 8016fc2:	a806      	add	r0, sp, #24
 8016fc4:	f7fd f860 	bl	8014088 <ucdr_init_buffer>
 8016fc8:	a90e      	add	r1, sp, #56	@ 0x38
 8016fca:	a806      	add	r0, sp, #24
 8016fcc:	f002 fffe 	bl	8019fcc <uxr_serialize_OBJK_DataWriter_Binary>
 8016fd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016fd2:	f8cd 8000 	str.w	r8, [sp]
 8016fd6:	4630      	mov	r0, r6
 8016fd8:	9401      	str	r4, [sp, #4]
 8016fda:	60e3      	str	r3, [r4, #12]
 8016fdc:	b29b      	uxth	r3, r3
 8016fde:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8016fe2:	f7ff fead 	bl	8016d40 <uxr_common_create_entity>
 8016fe6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8016fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fee:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8016ff2:	f04f 0c12 	mov.w	ip, #18
 8016ff6:	250a      	movs	r5, #10
 8016ff8:	2220      	movs	r2, #32
 8016ffa:	2110      	movs	r1, #16
 8016ffc:	2008      	movs	r0, #8
 8016ffe:	2702      	movs	r7, #2
 8017000:	e7cd      	b.n	8016f9e <uxr_buffer_create_datawriter_bin+0x76>
 8017002:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8017006:	e7d9      	b.n	8016fbc <uxr_buffer_create_datawriter_bin+0x94>
 8017008:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801700c:	e7d6      	b.n	8016fbc <uxr_buffer_create_datawriter_bin+0x94>
 801700e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8017012:	e7d3      	b.n	8016fbc <uxr_buffer_create_datawriter_bin+0x94>

08017014 <uxr_buffer_create_datareader_bin>:
 8017014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017018:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801701c:	4606      	mov	r6, r0
 801701e:	4618      	mov	r0, r3
 8017020:	2703      	movs	r7, #3
 8017022:	ac1f      	add	r4, sp, #124	@ 0x7c
 8017024:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 8017028:	9105      	str	r1, [sp, #20]
 801702a:	a9a3      	add	r1, sp, #652	@ 0x28c
 801702c:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 8017030:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017034:	2306      	movs	r3, #6
 8017036:	7123      	strb	r3, [r4, #4]
 8017038:	f000 f97e 	bl	8017338 <uxr_object_id_to_raw>
 801703c:	a90e      	add	r1, sp, #56	@ 0x38
 801703e:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 8017040:	7227      	strb	r7, [r4, #8]
 8017042:	f000 f979 	bl	8017338 <uxr_object_id_to_raw>
 8017046:	2300      	movs	r3, #0
 8017048:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 801704c:	3d00      	subs	r5, #0
 801704e:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 8017052:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8017056:	bf18      	it	ne
 8017058:	2501      	movne	r5, #1
 801705a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801705e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8017062:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8017066:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801706a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801706e:	2301      	movs	r3, #1
 8017070:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8017074:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8017078:	bb8a      	cbnz	r2, 80170de <uxr_buffer_create_datareader_bin+0xca>
 801707a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801707e:	f04f 0c13 	mov.w	ip, #19
 8017082:	250b      	movs	r5, #11
 8017084:	2221      	movs	r2, #33	@ 0x21
 8017086:	2111      	movs	r1, #17
 8017088:	2009      	movs	r0, #9
 801708a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801708e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 8017092:	b923      	cbnz	r3, 801709e <uxr_buffer_create_datareader_bin+0x8a>
 8017094:	4672      	mov	r2, lr
 8017096:	4661      	mov	r1, ip
 8017098:	4628      	mov	r0, r5
 801709a:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801709e:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 80170a2:	2b01      	cmp	r3, #1
 80170a4:	d025      	beq.n	80170f2 <uxr_buffer_create_datareader_bin+0xde>
 80170a6:	2b03      	cmp	r3, #3
 80170a8:	d029      	beq.n	80170fe <uxr_buffer_create_datareader_bin+0xea>
 80170aa:	b32b      	cbz	r3, 80170f8 <uxr_buffer_create_datareader_bin+0xe4>
 80170ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80170b0:	a923      	add	r1, sp, #140	@ 0x8c
 80170b2:	a806      	add	r0, sp, #24
 80170b4:	f7fc ffe8 	bl	8014088 <ucdr_init_buffer>
 80170b8:	a90e      	add	r1, sp, #56	@ 0x38
 80170ba:	a806      	add	r0, sp, #24
 80170bc:	f002 ff4a 	bl	8019f54 <uxr_serialize_OBJK_DataReader_Binary>
 80170c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80170c2:	f8cd 8000 	str.w	r8, [sp]
 80170c6:	4630      	mov	r0, r6
 80170c8:	9401      	str	r4, [sp, #4]
 80170ca:	60e3      	str	r3, [r4, #12]
 80170cc:	b29b      	uxth	r3, r3
 80170ce:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80170d2:	f7ff fe35 	bl	8016d40 <uxr_common_create_entity>
 80170d6:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80170da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170de:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80170e2:	f04f 0c12 	mov.w	ip, #18
 80170e6:	250a      	movs	r5, #10
 80170e8:	2220      	movs	r2, #32
 80170ea:	2110      	movs	r1, #16
 80170ec:	2008      	movs	r0, #8
 80170ee:	2702      	movs	r7, #2
 80170f0:	e7cd      	b.n	801708e <uxr_buffer_create_datareader_bin+0x7a>
 80170f2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80170f6:	e7d9      	b.n	80170ac <uxr_buffer_create_datareader_bin+0x98>
 80170f8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80170fc:	e7d6      	b.n	80170ac <uxr_buffer_create_datareader_bin+0x98>
 80170fe:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8017102:	e7d3      	b.n	80170ac <uxr_buffer_create_datareader_bin+0x98>

08017104 <uxr_buffer_create_replier_bin>:
 8017104:	b570      	push	{r4, r5, r6, lr}
 8017106:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 801710a:	4605      	mov	r5, r0
 801710c:	4618      	mov	r0, r3
 801710e:	9105      	str	r1, [sp, #20]
 8017110:	a999      	add	r1, sp, #612	@ 0x264
 8017112:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 8017116:	ac15      	add	r4, sp, #84	@ 0x54
 8017118:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801711c:	2308      	movs	r3, #8
 801711e:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 8017122:	f000 f909 	bl	8017338 <uxr_object_id_to_raw>
 8017126:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 8017128:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801712c:	a919      	add	r1, sp, #100	@ 0x64
 801712e:	a80d      	add	r0, sp, #52	@ 0x34
 8017130:	9306      	str	r3, [sp, #24]
 8017132:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 8017134:	9307      	str	r3, [sp, #28]
 8017136:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 8017138:	9308      	str	r3, [sp, #32]
 801713a:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 801713c:	930c      	str	r3, [sp, #48]	@ 0x30
 801713e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017140:	930a      	str	r3, [sp, #40]	@ 0x28
 8017142:	2301      	movs	r3, #1
 8017144:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8017148:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801714c:	2303      	movs	r3, #3
 801714e:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 8017152:	f7fc ff99 	bl	8014088 <ucdr_init_buffer>
 8017156:	a906      	add	r1, sp, #24
 8017158:	a80d      	add	r0, sp, #52	@ 0x34
 801715a:	f002 ff63 	bl	801a024 <uxr_serialize_OBJK_Replier_Binary>
 801715e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017160:	4628      	mov	r0, r5
 8017162:	9600      	str	r6, [sp, #0]
 8017164:	9318      	str	r3, [sp, #96]	@ 0x60
 8017166:	b29b      	uxth	r3, r3
 8017168:	9401      	str	r4, [sp, #4]
 801716a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801716e:	f7ff fde7 	bl	8016d40 <uxr_common_create_entity>
 8017172:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 8017176:	bd70      	pop	{r4, r5, r6, pc}

08017178 <get_custom_error>:
 8017178:	4b01      	ldr	r3, [pc, #4]	@ (8017180 <get_custom_error+0x8>)
 801717a:	7818      	ldrb	r0, [r3, #0]
 801717c:	4770      	bx	lr
 801717e:	bf00      	nop
 8017180:	24069274 	.word	0x24069274

08017184 <recv_custom_msg>:
 8017184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017188:	4693      	mov	fp, r2
 801718a:	b089      	sub	sp, #36	@ 0x24
 801718c:	2200      	movs	r2, #0
 801718e:	4604      	mov	r4, r0
 8017190:	468a      	mov	sl, r1
 8017192:	9305      	str	r3, [sp, #20]
 8017194:	f88d 201e 	strb.w	r2, [sp, #30]
 8017198:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 801719c:	b322      	cbz	r2, 80171e8 <recv_custom_msg+0x64>
 801719e:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80171a2:	f10d 081f 	add.w	r8, sp, #31
 80171a6:	af05      	add	r7, sp, #20
 80171a8:	f10d 061e 	add.w	r6, sp, #30
 80171ac:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80171b0:	e002      	b.n	80171b8 <recv_custom_msg+0x34>
 80171b2:	9b05      	ldr	r3, [sp, #20]
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	dd0f      	ble.n	80171d8 <recv_custom_msg+0x54>
 80171b8:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80171bc:	4623      	mov	r3, r4
 80171be:	4622      	mov	r2, r4
 80171c0:	4648      	mov	r0, r9
 80171c2:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80171c6:	e9cd 5600 	strd	r5, r6, [sp]
 80171ca:	f001 fcc3 	bl	8018b54 <uxr_read_framed_msg>
 80171ce:	2800      	cmp	r0, #0
 80171d0:	d0ef      	beq.n	80171b2 <recv_custom_msg+0x2e>
 80171d2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80171d6:	b1b3      	cbz	r3, 8017206 <recv_custom_msg+0x82>
 80171d8:	4b0f      	ldr	r3, [pc, #60]	@ (8017218 <recv_custom_msg+0x94>)
 80171da:	2000      	movs	r0, #0
 80171dc:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80171e0:	701a      	strb	r2, [r3, #0]
 80171e2:	b009      	add	sp, #36	@ 0x24
 80171e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171e8:	f10d 021f 	add.w	r2, sp, #31
 80171ec:	4601      	mov	r1, r0
 80171ee:	9200      	str	r2, [sp, #0]
 80171f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80171f4:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 80171f8:	47a8      	blx	r5
 80171fa:	2800      	cmp	r0, #0
 80171fc:	d0ec      	beq.n	80171d8 <recv_custom_msg+0x54>
 80171fe:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017202:	2b00      	cmp	r3, #0
 8017204:	d1e8      	bne.n	80171d8 <recv_custom_msg+0x54>
 8017206:	f8cb 0000 	str.w	r0, [fp]
 801720a:	2001      	movs	r0, #1
 801720c:	f8ca 4000 	str.w	r4, [sl]
 8017210:	b009      	add	sp, #36	@ 0x24
 8017212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017216:	bf00      	nop
 8017218:	24069274 	.word	0x24069274

0801721c <send_custom_msg>:
 801721c:	b530      	push	{r4, r5, lr}
 801721e:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8017222:	b087      	sub	sp, #28
 8017224:	4614      	mov	r4, r2
 8017226:	b995      	cbnz	r5, 801724e <send_custom_msg+0x32>
 8017228:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 801722c:	f10d 0317 	add.w	r3, sp, #23
 8017230:	47a8      	blx	r5
 8017232:	1e03      	subs	r3, r0, #0
 8017234:	bf18      	it	ne
 8017236:	2301      	movne	r3, #1
 8017238:	42a0      	cmp	r0, r4
 801723a:	bf18      	it	ne
 801723c:	2300      	movne	r3, #0
 801723e:	b91b      	cbnz	r3, 8017248 <send_custom_msg+0x2c>
 8017240:	4a0a      	ldr	r2, [pc, #40]	@ (801726c <send_custom_msg+0x50>)
 8017242:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8017246:	7011      	strb	r1, [r2, #0]
 8017248:	4618      	mov	r0, r3
 801724a:	b007      	add	sp, #28
 801724c:	bd30      	pop	{r4, r5, pc}
 801724e:	460b      	mov	r3, r1
 8017250:	2200      	movs	r2, #0
 8017252:	f10d 0117 	add.w	r1, sp, #23
 8017256:	9400      	str	r4, [sp, #0]
 8017258:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801725c:	4602      	mov	r2, r0
 801725e:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8017262:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8017266:	f001 fa97 	bl	8018798 <uxr_write_framed_msg>
 801726a:	e7e2      	b.n	8017232 <send_custom_msg+0x16>
 801726c:	24069274 	.word	0x24069274

08017270 <uxr_set_custom_transport_callbacks>:
 8017270:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8017274:	9901      	ldr	r1, [sp, #4]
 8017276:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 801727a:	9b00      	ldr	r3, [sp, #0]
 801727c:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 8017280:	4770      	bx	lr
 8017282:	bf00      	nop

08017284 <uxr_init_custom_transport>:
 8017284:	b538      	push	{r3, r4, r5, lr}
 8017286:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801728a:	b303      	cbz	r3, 80172ce <uxr_init_custom_transport+0x4a>
 801728c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8017290:	4604      	mov	r4, r0
 8017292:	b1e2      	cbz	r2, 80172ce <uxr_init_custom_transport+0x4a>
 8017294:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8017298:	b1ca      	cbz	r2, 80172ce <uxr_init_custom_transport+0x4a>
 801729a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801729e:	b1b2      	cbz	r2, 80172ce <uxr_init_custom_transport+0x4a>
 80172a0:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80172a4:	4798      	blx	r3
 80172a6:	4605      	mov	r5, r0
 80172a8:	b188      	cbz	r0, 80172ce <uxr_init_custom_transport+0x4a>
 80172aa:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 80172ae:	b98b      	cbnz	r3, 80172d4 <uxr_init_custom_transport+0x50>
 80172b0:	4b0b      	ldr	r3, [pc, #44]	@ (80172e0 <uxr_init_custom_transport+0x5c>)
 80172b2:	4628      	mov	r0, r5
 80172b4:	490b      	ldr	r1, [pc, #44]	@ (80172e4 <uxr_init_custom_transport+0x60>)
 80172b6:	4a0c      	ldr	r2, [pc, #48]	@ (80172e8 <uxr_init_custom_transport+0x64>)
 80172b8:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 80172bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80172c0:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 80172c4:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 80172c8:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80172cc:	bd38      	pop	{r3, r4, r5, pc}
 80172ce:	2500      	movs	r5, #0
 80172d0:	4628      	mov	r0, r5
 80172d2:	bd38      	pop	{r3, r4, r5, pc}
 80172d4:	2100      	movs	r1, #0
 80172d6:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80172da:	f001 fa57 	bl	801878c <uxr_init_framing_io>
 80172de:	e7e7      	b.n	80172b0 <uxr_init_custom_transport+0x2c>
 80172e0:	08017185 	.word	0x08017185
 80172e4:	0801721d 	.word	0x0801721d
 80172e8:	08017179 	.word	0x08017179

080172ec <uxr_close_custom_transport>:
 80172ec:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 80172f0:	4718      	bx	r3
 80172f2:	bf00      	nop

080172f4 <uxr_object_id>:
 80172f4:	b082      	sub	sp, #8
 80172f6:	2300      	movs	r3, #0
 80172f8:	f88d 1006 	strb.w	r1, [sp, #6]
 80172fc:	f360 030f 	bfi	r3, r0, #0, #16
 8017300:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017304:	f362 431f 	bfi	r3, r2, #16, #16
 8017308:	4618      	mov	r0, r3
 801730a:	b002      	add	sp, #8
 801730c:	4770      	bx	lr
 801730e:	bf00      	nop

08017310 <uxr_object_id_from_raw>:
 8017310:	7843      	ldrb	r3, [r0, #1]
 8017312:	b082      	sub	sp, #8
 8017314:	7801      	ldrb	r1, [r0, #0]
 8017316:	2000      	movs	r0, #0
 8017318:	091a      	lsrs	r2, r3, #4
 801731a:	f003 030f 	and.w	r3, r3, #15
 801731e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8017322:	f88d 3006 	strb.w	r3, [sp, #6]
 8017326:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801732a:	f362 000f 	bfi	r0, r2, #0, #16
 801732e:	f363 401f 	bfi	r0, r3, #16, #16
 8017332:	b002      	add	sp, #8
 8017334:	4770      	bx	lr
 8017336:	bf00      	nop

08017338 <uxr_object_id_to_raw>:
 8017338:	4602      	mov	r2, r0
 801733a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801733e:	b082      	sub	sp, #8
 8017340:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8017344:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8017348:	f881 c000 	strb.w	ip, [r1]
 801734c:	7048      	strb	r0, [r1, #1]
 801734e:	b002      	add	sp, #8
 8017350:	4770      	bx	lr
 8017352:	bf00      	nop

08017354 <uxr_ping_agent_session>:
 8017354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017358:	4617      	mov	r7, r2
 801735a:	b091      	sub	sp, #68	@ 0x44
 801735c:	2210      	movs	r2, #16
 801735e:	4606      	mov	r6, r0
 8017360:	4688      	mov	r8, r1
 8017362:	a808      	add	r0, sp, #32
 8017364:	eb0d 0102 	add.w	r1, sp, r2
 8017368:	2500      	movs	r5, #0
 801736a:	f7fc fe8d 	bl	8014088 <ucdr_init_buffer>
 801736e:	4b1e      	ldr	r3, [pc, #120]	@ (80173e8 <uxr_ping_agent_session+0x94>)
 8017370:	2402      	movs	r4, #2
 8017372:	462a      	mov	r2, r5
 8017374:	881b      	ldrh	r3, [r3, #0]
 8017376:	a808      	add	r0, sp, #32
 8017378:	9500      	str	r5, [sp, #0]
 801737a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801737e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8017382:	7831      	ldrb	r1, [r6, #0]
 8017384:	f8ad 3008 	strh.w	r3, [sp, #8]
 8017388:	462b      	mov	r3, r5
 801738a:	9403      	str	r4, [sp, #12]
 801738c:	f002 f9b4 	bl	80196f8 <uxr_serialize_message_header>
 8017390:	4621      	mov	r1, r4
 8017392:	462b      	mov	r3, r5
 8017394:	2208      	movs	r2, #8
 8017396:	a808      	add	r0, sp, #32
 8017398:	f001 ffb2 	bl	8019300 <uxr_buffer_submessage_header>
 801739c:	4604      	mov	r4, r0
 801739e:	a902      	add	r1, sp, #8
 80173a0:	a808      	add	r0, sp, #32
 80173a2:	f003 f8b5 	bl	801a510 <uxr_serialize_GET_INFO_Payload>
 80173a6:	b104      	cbz	r4, 80173aa <uxr_ping_agent_session+0x56>
 80173a8:	b918      	cbnz	r0, 80173b2 <uxr_ping_agent_session+0x5e>
 80173aa:	2000      	movs	r0, #0
 80173ac:	b011      	add	sp, #68	@ 0x44
 80173ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80173b2:	a808      	add	r0, sp, #32
 80173b4:	f7fc fe96 	bl	80140e4 <ucdr_buffer_length>
 80173b8:	4681      	mov	r9, r0
 80173ba:	e00d      	b.n	80173d8 <uxr_ping_agent_session+0x84>
 80173bc:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80173be:	e9d3 0400 	ldrd	r0, r4, [r3]
 80173c2:	47a0      	blx	r4
 80173c4:	4604      	mov	r4, r0
 80173c6:	4641      	mov	r1, r8
 80173c8:	4630      	mov	r0, r6
 80173ca:	f000 fe71 	bl	80180b0 <uxr_run_session_until_pong>
 80173ce:	ea04 0c00 	and.w	ip, r4, r0
 80173d2:	f01c 00ff 	ands.w	r0, ip, #255	@ 0xff
 80173d6:	d1e9      	bne.n	80173ac <uxr_ping_agent_session+0x58>
 80173d8:	42af      	cmp	r7, r5
 80173da:	464a      	mov	r2, r9
 80173dc:	a904      	add	r1, sp, #16
 80173de:	f105 0501 	add.w	r5, r5, #1
 80173e2:	d1eb      	bne.n	80173bc <uxr_ping_agent_session+0x68>
 80173e4:	e7e1      	b.n	80173aa <uxr_ping_agent_session+0x56>
 80173e6:	bf00      	nop
 80173e8:	08023340 	.word	0x08023340

080173ec <uxr_ping_agent_attempts>:
 80173ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173f0:	ed2d 8b02 	vpush	{d8}
 80173f4:	b0d3      	sub	sp, #332	@ 0x14c
 80173f6:	4606      	mov	r6, r0
 80173f8:	468a      	mov	sl, r1
 80173fa:	2400      	movs	r4, #0
 80173fc:	a90c      	add	r1, sp, #48	@ 0x30
 80173fe:	a810      	add	r0, sp, #64	@ 0x40
 8017400:	9205      	str	r2, [sp, #20]
 8017402:	2210      	movs	r2, #16
 8017404:	f7fc fe40 	bl	8014088 <ucdr_init_buffer>
 8017408:	4b53      	ldr	r3, [pc, #332]	@ (8017558 <uxr_ping_agent_attempts+0x16c>)
 801740a:	2502      	movs	r5, #2
 801740c:	4622      	mov	r2, r4
 801740e:	881b      	ldrh	r3, [r3, #0]
 8017410:	2180      	movs	r1, #128	@ 0x80
 8017412:	a810      	add	r0, sp, #64	@ 0x40
 8017414:	9400      	str	r4, [sp, #0]
 8017416:	f8ad 3082 	strh.w	r3, [sp, #130]	@ 0x82
 801741a:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 801741e:	9521      	str	r5, [sp, #132]	@ 0x84
 8017420:	f8ad 3080 	strh.w	r3, [sp, #128]	@ 0x80
 8017424:	4623      	mov	r3, r4
 8017426:	f002 f967 	bl	80196f8 <uxr_serialize_message_header>
 801742a:	4623      	mov	r3, r4
 801742c:	4629      	mov	r1, r5
 801742e:	2208      	movs	r2, #8
 8017430:	a810      	add	r0, sp, #64	@ 0x40
 8017432:	f001 ff65 	bl	8019300 <uxr_buffer_submessage_header>
 8017436:	4681      	mov	r9, r0
 8017438:	a920      	add	r1, sp, #128	@ 0x80
 801743a:	a810      	add	r0, sp, #64	@ 0x40
 801743c:	f003 f868 	bl	801a510 <uxr_serialize_GET_INFO_Payload>
 8017440:	ea09 0000 	and.w	r0, r9, r0
 8017444:	f010 09ff 	ands.w	r9, r0, #255	@ 0xff
 8017448:	d107      	bne.n	801745a <uxr_ping_agent_attempts+0x6e>
 801744a:	f04f 0b00 	mov.w	fp, #0
 801744e:	4658      	mov	r0, fp
 8017450:	b053      	add	sp, #332	@ 0x14c
 8017452:	ecbd 8b02 	vpop	{d8}
 8017456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801745a:	a810      	add	r0, sp, #64	@ 0x40
 801745c:	9404      	str	r4, [sp, #16]
 801745e:	f7fc fe41 	bl	80140e4 <ucdr_buffer_length>
 8017462:	ee08 0a10 	vmov	s16, r0
 8017466:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801746a:	4293      	cmp	r3, r2
 801746c:	d0ed      	beq.n	801744a <uxr_ping_agent_attempts+0x5e>
 801746e:	ee18 2a10 	vmov	r2, s16
 8017472:	a90c      	add	r1, sp, #48	@ 0x30
 8017474:	4655      	mov	r5, sl
 8017476:	f04f 0800 	mov.w	r8, #0
 801747a:	e9d6 0300 	ldrd	r0, r3, [r6]
 801747e:	4798      	blx	r3
 8017480:	f001 ff84 	bl	801938c <uxr_millis>
 8017484:	9003      	str	r0, [sp, #12]
 8017486:	e00b      	b.n	80174a0 <uxr_ping_agent_attempts+0xb4>
 8017488:	f001 ff80 	bl	801938c <uxr_millis>
 801748c:	9b03      	ldr	r3, [sp, #12]
 801748e:	1ac0      	subs	r0, r0, r3
 8017490:	1a2d      	subs	r5, r5, r0
 8017492:	f001 ff7b 	bl	801938c <uxr_millis>
 8017496:	9003      	str	r0, [sp, #12]
 8017498:	2d00      	cmp	r5, #0
 801749a:	dd30      	ble.n	80174fe <uxr_ping_agent_attempts+0x112>
 801749c:	2f00      	cmp	r7, #0
 801749e:	d02e      	beq.n	80174fe <uxr_ping_agent_attempts+0x112>
 80174a0:	4653      	mov	r3, sl
 80174a2:	aa09      	add	r2, sp, #36	@ 0x24
 80174a4:	a908      	add	r1, sp, #32
 80174a6:	6830      	ldr	r0, [r6, #0]
 80174a8:	68b4      	ldr	r4, [r6, #8]
 80174aa:	464f      	mov	r7, r9
 80174ac:	f8cd 8020 	str.w	r8, [sp, #32]
 80174b0:	47a0      	blx	r4
 80174b2:	4683      	mov	fp, r0
 80174b4:	2800      	cmp	r0, #0
 80174b6:	d0e7      	beq.n	8017488 <uxr_ping_agent_attempts+0x9c>
 80174b8:	a818      	add	r0, sp, #96	@ 0x60
 80174ba:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80174be:	f7fc fde3 	bl	8014088 <ucdr_init_buffer>
 80174c2:	ab07      	add	r3, sp, #28
 80174c4:	f10d 0219 	add.w	r2, sp, #25
 80174c8:	a918      	add	r1, sp, #96	@ 0x60
 80174ca:	a80a      	add	r0, sp, #40	@ 0x28
 80174cc:	e9cd 880a 	strd	r8, r8, [sp, #40]	@ 0x28
 80174d0:	f001 f8e2 	bl	8018698 <uxr_read_session_header>
 80174d4:	22c8      	movs	r2, #200	@ 0xc8
 80174d6:	2100      	movs	r1, #0
 80174d8:	a820      	add	r0, sp, #128	@ 0x80
 80174da:	f00a fe79 	bl	80221d0 <memset>
 80174de:	a818      	add	r0, sp, #96	@ 0x60
 80174e0:	f7fc fe04 	bl	80140ec <ucdr_buffer_remaining>
 80174e4:	2804      	cmp	r0, #4
 80174e6:	d816      	bhi.n	8017516 <uxr_ping_agent_attempts+0x12a>
 80174e8:	f89d 3135 	ldrb.w	r3, [sp, #309]	@ 0x135
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	bf13      	iteet	ne
 80174f0:	f04f 0b01 	movne.w	fp, #1
 80174f4:	f04f 0b00 	moveq.w	fp, #0
 80174f8:	2701      	moveq	r7, #1
 80174fa:	2700      	movne	r7, #0
 80174fc:	e7c4      	b.n	8017488 <uxr_ping_agent_attempts+0x9c>
 80174fe:	9b04      	ldr	r3, [sp, #16]
 8017500:	3301      	adds	r3, #1
 8017502:	9304      	str	r3, [sp, #16]
 8017504:	f1bb 0f00 	cmp.w	fp, #0
 8017508:	d0ad      	beq.n	8017466 <uxr_ping_agent_attempts+0x7a>
 801750a:	4658      	mov	r0, fp
 801750c:	b053      	add	sp, #332	@ 0x14c
 801750e:	ecbd 8b02 	vpop	{d8}
 8017512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017516:	f10d 031e 	add.w	r3, sp, #30
 801751a:	f10d 021b 	add.w	r2, sp, #27
 801751e:	f10d 011a 	add.w	r1, sp, #26
 8017522:	a818      	add	r0, sp, #96	@ 0x60
 8017524:	f88d 801a 	strb.w	r8, [sp, #26]
 8017528:	f8ad 801e 	strh.w	r8, [sp, #30]
 801752c:	f88d 801b 	strb.w	r8, [sp, #27]
 8017530:	f002 f934 	bl	801979c <uxr_deserialize_submessage_header>
 8017534:	a818      	add	r0, sp, #96	@ 0x60
 8017536:	f7fc fdd9 	bl	80140ec <ucdr_buffer_remaining>
 801753a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801753e:	4298      	cmp	r0, r3
 8017540:	d3d2      	bcc.n	80174e8 <uxr_ping_agent_attempts+0xfc>
 8017542:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8017546:	2b06      	cmp	r3, #6
 8017548:	d1ce      	bne.n	80174e8 <uxr_ping_agent_attempts+0xfc>
 801754a:	a918      	add	r1, sp, #96	@ 0x60
 801754c:	a820      	add	r0, sp, #128	@ 0x80
 801754e:	f88d 8135 	strb.w	r8, [sp, #309]	@ 0x135
 8017552:	f000 f997 	bl	8017884 <read_submessage_info>
 8017556:	e7c7      	b.n	80174e8 <uxr_ping_agent_attempts+0xfc>
 8017558:	08023340 	.word	0x08023340

0801755c <on_get_fragmentation_info>:
 801755c:	b500      	push	{lr}
 801755e:	b08b      	sub	sp, #44	@ 0x2c
 8017560:	4601      	mov	r1, r0
 8017562:	2204      	movs	r2, #4
 8017564:	a802      	add	r0, sp, #8
 8017566:	f7fc fd8f 	bl	8014088 <ucdr_init_buffer>
 801756a:	f10d 0305 	add.w	r3, sp, #5
 801756e:	f10d 0206 	add.w	r2, sp, #6
 8017572:	a901      	add	r1, sp, #4
 8017574:	a802      	add	r0, sp, #8
 8017576:	f001 fedd 	bl	8019334 <uxr_read_submessage_header>
 801757a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801757e:	2b0d      	cmp	r3, #13
 8017580:	d003      	beq.n	801758a <on_get_fragmentation_info+0x2e>
 8017582:	2000      	movs	r0, #0
 8017584:	b00b      	add	sp, #44	@ 0x2c
 8017586:	f85d fb04 	ldr.w	pc, [sp], #4
 801758a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801758e:	f013 0f02 	tst.w	r3, #2
 8017592:	bf14      	ite	ne
 8017594:	2002      	movne	r0, #2
 8017596:	2001      	moveq	r0, #1
 8017598:	b00b      	add	sp, #44	@ 0x2c
 801759a:	f85d fb04 	ldr.w	pc, [sp], #4
 801759e:	bf00      	nop

080175a0 <read_submessage_get_info>:
 80175a0:	b570      	push	{r4, r5, r6, lr}
 80175a2:	2500      	movs	r5, #0
 80175a4:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 80175a8:	460e      	mov	r6, r1
 80175aa:	4604      	mov	r4, r0
 80175ac:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80175b0:	4629      	mov	r1, r5
 80175b2:	a810      	add	r0, sp, #64	@ 0x40
 80175b4:	9503      	str	r5, [sp, #12]
 80175b6:	9504      	str	r5, [sp, #16]
 80175b8:	f00a fe0a 	bl	80221d0 <memset>
 80175bc:	a903      	add	r1, sp, #12
 80175be:	4630      	mov	r0, r6
 80175c0:	f002 ffbc 	bl	801a53c <uxr_deserialize_GET_INFO_Payload>
 80175c4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80175c8:	4620      	mov	r0, r4
 80175ca:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80175ce:	f001 f8a3 	bl	8018718 <uxr_session_header_offset>
 80175d2:	462b      	mov	r3, r5
 80175d4:	220c      	movs	r2, #12
 80175d6:	a905      	add	r1, sp, #20
 80175d8:	9000      	str	r0, [sp, #0]
 80175da:	a808      	add	r0, sp, #32
 80175dc:	f7fc fd42 	bl	8014064 <ucdr_init_buffer_origin_offset>
 80175e0:	a910      	add	r1, sp, #64	@ 0x40
 80175e2:	a808      	add	r0, sp, #32
 80175e4:	f003 f81e 	bl	801a624 <uxr_serialize_INFO_Payload>
 80175e8:	9b08      	ldr	r3, [sp, #32]
 80175ea:	462a      	mov	r2, r5
 80175ec:	4629      	mov	r1, r5
 80175ee:	4620      	mov	r0, r4
 80175f0:	f001 f83e 	bl	8018670 <uxr_stamp_session_header>
 80175f4:	a808      	add	r0, sp, #32
 80175f6:	f7fc fd75 	bl	80140e4 <ucdr_buffer_length>
 80175fa:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80175fc:	4602      	mov	r2, r0
 80175fe:	a905      	add	r1, sp, #20
 8017600:	e9d3 0400 	ldrd	r0, r4, [r3]
 8017604:	47a0      	blx	r4
 8017606:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801760a:	bd70      	pop	{r4, r5, r6, pc}

0801760c <write_submessage_acknack.isra.0>:
 801760c:	b570      	push	{r4, r5, r6, lr}
 801760e:	b092      	sub	sp, #72	@ 0x48
 8017610:	4605      	mov	r5, r0
 8017612:	460e      	mov	r6, r1
 8017614:	4614      	mov	r4, r2
 8017616:	f001 f87f 	bl	8018718 <uxr_session_header_offset>
 801761a:	a905      	add	r1, sp, #20
 801761c:	9000      	str	r0, [sp, #0]
 801761e:	2300      	movs	r3, #0
 8017620:	a80a      	add	r0, sp, #40	@ 0x28
 8017622:	2211      	movs	r2, #17
 8017624:	f7fc fd1e 	bl	8014064 <ucdr_init_buffer_origin_offset>
 8017628:	2218      	movs	r2, #24
 801762a:	2300      	movs	r3, #0
 801762c:	210a      	movs	r1, #10
 801762e:	fb02 5404 	mla	r4, r2, r4, r5
 8017632:	a80a      	add	r0, sp, #40	@ 0x28
 8017634:	2205      	movs	r2, #5
 8017636:	3450      	adds	r4, #80	@ 0x50
 8017638:	f001 fe62 	bl	8019300 <uxr_buffer_submessage_header>
 801763c:	a903      	add	r1, sp, #12
 801763e:	4620      	mov	r0, r4
 8017640:	f008 fece 	bl	80203e0 <uxr_compute_acknack>
 8017644:	ba40      	rev16	r0, r0
 8017646:	a903      	add	r1, sp, #12
 8017648:	f88d 6010 	strb.w	r6, [sp, #16]
 801764c:	f8ad 000e 	strh.w	r0, [sp, #14]
 8017650:	a80a      	add	r0, sp, #40	@ 0x28
 8017652:	f003 f859 	bl	801a708 <uxr_serialize_ACKNACK_Payload>
 8017656:	2200      	movs	r2, #0
 8017658:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801765a:	4628      	mov	r0, r5
 801765c:	4611      	mov	r1, r2
 801765e:	f001 f807 	bl	8018670 <uxr_stamp_session_header>
 8017662:	a80a      	add	r0, sp, #40	@ 0x28
 8017664:	f7fc fd3e 	bl	80140e4 <ucdr_buffer_length>
 8017668:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801766a:	4602      	mov	r2, r0
 801766c:	a905      	add	r1, sp, #20
 801766e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8017672:	47a0      	blx	r4
 8017674:	b012      	add	sp, #72	@ 0x48
 8017676:	bd70      	pop	{r4, r5, r6, pc}

08017678 <uxr_init_session>:
 8017678:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80176b0 <uxr_init_session+0x38>
 801767c:	2300      	movs	r3, #0
 801767e:	b510      	push	{r4, lr}
 8017680:	4604      	mov	r4, r0
 8017682:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8017686:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 801768a:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 801768e:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8017692:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8017696:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 801769a:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 801769e:	2181      	movs	r1, #129	@ 0x81
 80176a0:	f000 ff4a 	bl	8018538 <uxr_init_session_info>
 80176a4:	f104 0008 	add.w	r0, r4, #8
 80176a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80176ac:	f001 bd44 	b.w	8019138 <uxr_init_stream_storage>
	...

080176b8 <uxr_set_status_callback>:
 80176b8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 80176bc:	4770      	bx	lr
 80176be:	bf00      	nop

080176c0 <uxr_set_topic_callback>:
 80176c0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80176c4:	4770      	bx	lr
 80176c6:	bf00      	nop

080176c8 <uxr_set_request_callback>:
 80176c8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 80176cc:	4770      	bx	lr
 80176ce:	bf00      	nop

080176d0 <uxr_set_reply_callback>:
 80176d0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 80176d4:	4770      	bx	lr
 80176d6:	bf00      	nop

080176d8 <uxr_create_output_best_effort_stream>:
 80176d8:	b510      	push	{r4, lr}
 80176da:	4604      	mov	r4, r0
 80176dc:	b084      	sub	sp, #16
 80176de:	e9cd 2100 	strd	r2, r1, [sp]
 80176e2:	f001 f819 	bl	8018718 <uxr_session_header_offset>
 80176e6:	4603      	mov	r3, r0
 80176e8:	f104 0008 	add.w	r0, r4, #8
 80176ec:	e9dd 2100 	ldrd	r2, r1, [sp]
 80176f0:	b004      	add	sp, #16
 80176f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80176f6:	f001 bd65 	b.w	80191c4 <uxr_add_output_best_effort_buffer>
 80176fa:	bf00      	nop

080176fc <uxr_create_output_reliable_stream>:
 80176fc:	b530      	push	{r4, r5, lr}
 80176fe:	b089      	sub	sp, #36	@ 0x24
 8017700:	4604      	mov	r4, r0
 8017702:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8017706:	9303      	str	r3, [sp, #12]
 8017708:	f001 f806 	bl	8018718 <uxr_session_header_offset>
 801770c:	4605      	mov	r5, r0
 801770e:	9905      	ldr	r1, [sp, #20]
 8017710:	f104 0008 	add.w	r0, r4, #8
 8017714:	9500      	str	r5, [sp, #0]
 8017716:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 801771a:	f001 fd67 	bl	80191ec <uxr_add_output_reliable_buffer>
 801771e:	2200      	movs	r2, #0
 8017720:	fa5f fc80 	uxtb.w	ip, r0
 8017724:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8017728:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801772c:	0e03      	lsrs	r3, r0, #24
 801772e:	f36c 0207 	bfi	r2, ip, #0, #8
 8017732:	f364 220f 	bfi	r2, r4, #8, #8
 8017736:	f361 4217 	bfi	r2, r1, #16, #8
 801773a:	f363 621f 	bfi	r2, r3, #24, #8
 801773e:	4610      	mov	r0, r2
 8017740:	b009      	add	sp, #36	@ 0x24
 8017742:	bd30      	pop	{r4, r5, pc}

08017744 <uxr_create_input_best_effort_stream>:
 8017744:	b082      	sub	sp, #8
 8017746:	3008      	adds	r0, #8
 8017748:	b002      	add	sp, #8
 801774a:	f001 bd69 	b.w	8019220 <uxr_add_input_best_effort_buffer>
 801774e:	bf00      	nop

08017750 <uxr_create_input_reliable_stream>:
 8017750:	b510      	push	{r4, lr}
 8017752:	4c0c      	ldr	r4, [pc, #48]	@ (8017784 <uxr_create_input_reliable_stream+0x34>)
 8017754:	b084      	sub	sp, #16
 8017756:	3008      	adds	r0, #8
 8017758:	9400      	str	r4, [sp, #0]
 801775a:	f001 fd77 	bl	801924c <uxr_add_input_reliable_buffer>
 801775e:	2200      	movs	r2, #0
 8017760:	fa5f fe80 	uxtb.w	lr, r0
 8017764:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8017768:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801776c:	0e03      	lsrs	r3, r0, #24
 801776e:	f36e 0207 	bfi	r2, lr, #0, #8
 8017772:	f36c 220f 	bfi	r2, ip, #8, #8
 8017776:	f361 4217 	bfi	r2, r1, #16, #8
 801777a:	f363 621f 	bfi	r2, r3, #24, #8
 801777e:	4610      	mov	r0, r2
 8017780:	b004      	add	sp, #16
 8017782:	bd10      	pop	{r4, pc}
 8017784:	0801755d 	.word	0x0801755d

08017788 <uxr_epoch_nanos>:
 8017788:	b510      	push	{r4, lr}
 801778a:	4604      	mov	r4, r0
 801778c:	f001 fe1a 	bl	80193c4 <uxr_nanos>
 8017790:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8017794:	1ac0      	subs	r0, r0, r3
 8017796:	eb61 0102 	sbc.w	r1, r1, r2
 801779a:	bd10      	pop	{r4, pc}

0801779c <uxr_flash_output_streams>:
 801779c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177a0:	7e03      	ldrb	r3, [r0, #24]
 80177a2:	b084      	sub	sp, #16
 80177a4:	4604      	mov	r4, r0
 80177a6:	b1fb      	cbz	r3, 80177e8 <uxr_flash_output_streams+0x4c>
 80177a8:	f04f 0900 	mov.w	r9, #0
 80177ac:	f10d 0802 	add.w	r8, sp, #2
 80177b0:	af03      	add	r7, sp, #12
 80177b2:	ae02      	add	r6, sp, #8
 80177b4:	4648      	mov	r0, r9
 80177b6:	2201      	movs	r2, #1
 80177b8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80177bc:	4611      	mov	r1, r2
 80177be:	3508      	adds	r5, #8
 80177c0:	f001 fc60 	bl	8019084 <uxr_stream_id>
 80177c4:	4684      	mov	ip, r0
 80177c6:	4643      	mov	r3, r8
 80177c8:	463a      	mov	r2, r7
 80177ca:	4631      	mov	r1, r6
 80177cc:	4628      	mov	r0, r5
 80177ce:	f8cd c004 	str.w	ip, [sp, #4]
 80177d2:	f008 fe8f 	bl	80204f4 <uxr_prepare_best_effort_buffer_to_send>
 80177d6:	2800      	cmp	r0, #0
 80177d8:	d13d      	bne.n	8017856 <uxr_flash_output_streams+0xba>
 80177da:	f109 0901 	add.w	r9, r9, #1
 80177de:	7e23      	ldrb	r3, [r4, #24]
 80177e0:	fa5f f089 	uxtb.w	r0, r9
 80177e4:	4283      	cmp	r3, r0
 80177e6:	d8e6      	bhi.n	80177b6 <uxr_flash_output_streams+0x1a>
 80177e8:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80177ec:	b383      	cbz	r3, 8017850 <uxr_flash_output_streams+0xb4>
 80177ee:	f04f 0900 	mov.w	r9, #0
 80177f2:	f10d 0802 	add.w	r8, sp, #2
 80177f6:	af03      	add	r7, sp, #12
 80177f8:	ae02      	add	r6, sp, #8
 80177fa:	4648      	mov	r0, r9
 80177fc:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8017800:	2201      	movs	r2, #1
 8017802:	2102      	movs	r1, #2
 8017804:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8017808:	f001 fc3c 	bl	8019084 <uxr_stream_id>
 801780c:	9001      	str	r0, [sp, #4]
 801780e:	3520      	adds	r5, #32
 8017810:	e00c      	b.n	801782c <uxr_flash_output_streams+0x90>
 8017812:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8017816:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801781a:	9b02      	ldr	r3, [sp, #8]
 801781c:	f000 ff28 	bl	8018670 <uxr_stamp_session_header>
 8017820:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8017822:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8017826:	e9d3 0a00 	ldrd	r0, sl, [r3]
 801782a:	47d0      	blx	sl
 801782c:	4643      	mov	r3, r8
 801782e:	463a      	mov	r2, r7
 8017830:	4631      	mov	r1, r6
 8017832:	4628      	mov	r0, r5
 8017834:	f009 f880 	bl	8020938 <uxr_prepare_next_reliable_buffer_to_send>
 8017838:	4603      	mov	r3, r0
 801783a:	4620      	mov	r0, r4
 801783c:	2b00      	cmp	r3, #0
 801783e:	d1e8      	bne.n	8017812 <uxr_flash_output_streams+0x76>
 8017840:	f109 0901 	add.w	r9, r9, #1
 8017844:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8017848:	fa5f f089 	uxtb.w	r0, r9
 801784c:	4283      	cmp	r3, r0
 801784e:	d8d5      	bhi.n	80177fc <uxr_flash_output_streams+0x60>
 8017850:	b004      	add	sp, #16
 8017852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017856:	9b02      	ldr	r3, [sp, #8]
 8017858:	4620      	mov	r0, r4
 801785a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801785e:	f109 0901 	add.w	r9, r9, #1
 8017862:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8017866:	f000 ff03 	bl	8018670 <uxr_stamp_session_header>
 801786a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801786c:	9a03      	ldr	r2, [sp, #12]
 801786e:	685d      	ldr	r5, [r3, #4]
 8017870:	6818      	ldr	r0, [r3, #0]
 8017872:	9902      	ldr	r1, [sp, #8]
 8017874:	47a8      	blx	r5
 8017876:	7e23      	ldrb	r3, [r4, #24]
 8017878:	fa5f f089 	uxtb.w	r0, r9
 801787c:	4283      	cmp	r3, r0
 801787e:	d89a      	bhi.n	80177b6 <uxr_flash_output_streams+0x1a>
 8017880:	e7b2      	b.n	80177e8 <uxr_flash_output_streams+0x4c>
 8017882:	bf00      	nop

08017884 <read_submessage_info>:
 8017884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017888:	460d      	mov	r5, r1
 801788a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801788e:	4606      	mov	r6, r0
 8017890:	4669      	mov	r1, sp
 8017892:	4628      	mov	r0, r5
 8017894:	f002 fd4e 	bl	801a334 <uxr_deserialize_BaseObjectReply>
 8017898:	4604      	mov	r4, r0
 801789a:	a902      	add	r1, sp, #8
 801789c:	4628      	mov	r0, r5
 801789e:	f89d 7005 	ldrb.w	r7, [sp, #5]
 80178a2:	f7fb f96f 	bl	8012b84 <ucdr_deserialize_bool>
 80178a6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80178aa:	4004      	ands	r4, r0
 80178ac:	b2e4      	uxtb	r4, r4
 80178ae:	b95b      	cbnz	r3, 80178c8 <read_submessage_info+0x44>
 80178b0:	a987      	add	r1, sp, #540	@ 0x21c
 80178b2:	4628      	mov	r0, r5
 80178b4:	f7fb f966 	bl	8012b84 <ucdr_deserialize_bool>
 80178b8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 80178bc:	4680      	mov	r8, r0
 80178be:	b94b      	cbnz	r3, 80178d4 <read_submessage_info+0x50>
 80178c0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80178c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178c8:	a903      	add	r1, sp, #12
 80178ca:	4628      	mov	r0, r5
 80178cc:	f002 fbde 	bl	801a08c <uxr_deserialize_ObjectVariant>
 80178d0:	4004      	ands	r4, r0
 80178d2:	e7ed      	b.n	80178b0 <read_submessage_info+0x2c>
 80178d4:	a988      	add	r1, sp, #544	@ 0x220
 80178d6:	4628      	mov	r0, r5
 80178d8:	f7fb f982 	bl	8012be0 <ucdr_deserialize_uint8_t>
 80178dc:	ea14 0f08 	tst.w	r4, r8
 80178e0:	d0ee      	beq.n	80178c0 <read_submessage_info+0x3c>
 80178e2:	2800      	cmp	r0, #0
 80178e4:	d0ec      	beq.n	80178c0 <read_submessage_info+0x3c>
 80178e6:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 80178ea:	2b0d      	cmp	r3, #13
 80178ec:	d1e8      	bne.n	80178c0 <read_submessage_info+0x3c>
 80178ee:	a98a      	add	r1, sp, #552	@ 0x228
 80178f0:	4628      	mov	r0, r5
 80178f2:	f7fb ff1b 	bl	801372c <ucdr_deserialize_int16_t>
 80178f6:	b138      	cbz	r0, 8017908 <read_submessage_info+0x84>
 80178f8:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	dd06      	ble.n	801790e <read_submessage_info+0x8a>
 8017900:	2f00      	cmp	r7, #0
 8017902:	bf14      	ite	ne
 8017904:	2001      	movne	r0, #1
 8017906:	2002      	moveq	r0, #2
 8017908:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 801790c:	e7d8      	b.n	80178c0 <read_submessage_info+0x3c>
 801790e:	2000      	movs	r0, #0
 8017910:	e7fa      	b.n	8017908 <read_submessage_info+0x84>
 8017912:	bf00      	nop

08017914 <read_submessage_list>:
 8017914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017918:	4604      	mov	r4, r0
 801791a:	b097      	sub	sp, #92	@ 0x5c
 801791c:	460d      	mov	r5, r1
 801791e:	4ec1      	ldr	r6, [pc, #772]	@ (8017c24 <read_submessage_list+0x310>)
 8017920:	9209      	str	r2, [sp, #36]	@ 0x24
 8017922:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8017926:	aa0c      	add	r2, sp, #48	@ 0x30
 8017928:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 801792c:	4628      	mov	r0, r5
 801792e:	f001 fd01 	bl	8019334 <uxr_read_submessage_header>
 8017932:	2800      	cmp	r0, #0
 8017934:	f000 8142 	beq.w	8017bbc <read_submessage_list+0x2a8>
 8017938:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 801793c:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8017940:	3b02      	subs	r3, #2
 8017942:	2b0d      	cmp	r3, #13
 8017944:	d8ed      	bhi.n	8017922 <read_submessage_list+0xe>
 8017946:	a101      	add	r1, pc, #4	@ (adr r1, 801794c <read_submessage_list+0x38>)
 8017948:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801794c:	08017bb3 	.word	0x08017bb3
 8017950:	08017923 	.word	0x08017923
 8017954:	08017ba3 	.word	0x08017ba3
 8017958:	08017b41 	.word	0x08017b41
 801795c:	08017b37 	.word	0x08017b37
 8017960:	08017923 	.word	0x08017923
 8017964:	08017923 	.word	0x08017923
 8017968:	08017a8d 	.word	0x08017a8d
 801796c:	08017a1f 	.word	0x08017a1f
 8017970:	080179df 	.word	0x080179df
 8017974:	08017923 	.word	0x08017923
 8017978:	08017923 	.word	0x08017923
 801797c:	08017923 	.word	0x08017923
 8017980:	08017985 	.word	0x08017985
 8017984:	a910      	add	r1, sp, #64	@ 0x40
 8017986:	4628      	mov	r0, r5
 8017988:	f002 ff20 	bl	801a7cc <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 801798c:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 8017990:	f1b8 0f00 	cmp.w	r8, #0
 8017994:	f000 811a 	beq.w	8017bcc <read_submessage_list+0x2b8>
 8017998:	f001 fd14 	bl	80193c4 <uxr_nanos>
 801799c:	4602      	mov	r2, r0
 801799e:	460b      	mov	r3, r1
 80179a0:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 80179a4:	2100      	movs	r1, #0
 80179a6:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80179a8:	9006      	str	r0, [sp, #24]
 80179aa:	468c      	mov	ip, r1
 80179ac:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80179ae:	fbc7 0c06 	smlal	r0, ip, r7, r6
 80179b2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80179b4:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 80179b8:	468c      	mov	ip, r1
 80179ba:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80179bc:	fbc7 0c06 	smlal	r0, ip, r7, r6
 80179c0:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 80179c4:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 80179c8:	fbc7 0106 	smlal	r0, r1, r7, r6
 80179cc:	e9cd 0100 	strd	r0, r1, [sp]
 80179d0:	4620      	mov	r0, r4
 80179d2:	47c0      	blx	r8
 80179d4:	f04f 0301 	mov.w	r3, #1
 80179d8:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 80179dc:	e7a1      	b.n	8017922 <read_submessage_list+0xe>
 80179de:	a910      	add	r1, sp, #64	@ 0x40
 80179e0:	4628      	mov	r0, r5
 80179e2:	f002 fed1 	bl	801a788 <uxr_deserialize_HEARTBEAT_Payload>
 80179e6:	2100      	movs	r1, #0
 80179e8:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80179ec:	f001 fb78 	bl	80190e0 <uxr_stream_id_from_raw>
 80179f0:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80179f4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80179f6:	f104 0008 	add.w	r0, r4, #8
 80179fa:	4641      	mov	r1, r8
 80179fc:	f001 fc5e 	bl	80192bc <uxr_get_input_reliable_stream>
 8017a00:	2800      	cmp	r0, #0
 8017a02:	d08e      	beq.n	8017922 <read_submessage_list+0xe>
 8017a04:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8017a08:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8017a0c:	f008 fcdc 	bl	80203c8 <uxr_process_heartbeat>
 8017a10:	4642      	mov	r2, r8
 8017a12:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8017a16:	4620      	mov	r0, r4
 8017a18:	f7ff fdf8 	bl	801760c <write_submessage_acknack.isra.0>
 8017a1c:	e781      	b.n	8017922 <read_submessage_list+0xe>
 8017a1e:	a910      	add	r1, sp, #64	@ 0x40
 8017a20:	4628      	mov	r0, r5
 8017a22:	f002 fe89 	bl	801a738 <uxr_deserialize_ACKNACK_Payload>
 8017a26:	2100      	movs	r1, #0
 8017a28:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8017a2c:	f001 fb58 	bl	80190e0 <uxr_stream_id_from_raw>
 8017a30:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8017a34:	900d      	str	r0, [sp, #52]	@ 0x34
 8017a36:	f104 0008 	add.w	r0, r4, #8
 8017a3a:	f001 fc29 	bl	8019290 <uxr_get_output_reliable_stream>
 8017a3e:	4680      	mov	r8, r0
 8017a40:	2800      	cmp	r0, #0
 8017a42:	f43f af6e 	beq.w	8017922 <read_submessage_list+0xe>
 8017a46:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8017a4a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8017a4e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8017a52:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8017a56:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8017a5a:	b289      	uxth	r1, r1
 8017a5c:	f009 f814 	bl	8020a88 <uxr_process_acknack>
 8017a60:	4640      	mov	r0, r8
 8017a62:	f008 ffd5 	bl	8020a10 <uxr_begin_output_nack_buffer_it>
 8017a66:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8017a6a:	e005      	b.n	8017a78 <read_submessage_list+0x164>
 8017a6c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8017a6e:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 8017a72:	e9d3 0900 	ldrd	r0, r9, [r3]
 8017a76:	47c8      	blx	r9
 8017a78:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8017a7c:	aa0f      	add	r2, sp, #60	@ 0x3c
 8017a7e:	4651      	mov	r1, sl
 8017a80:	4640      	mov	r0, r8
 8017a82:	f008 ffc7 	bl	8020a14 <uxr_next_reliable_nack_buffer_to_send>
 8017a86:	2800      	cmp	r0, #0
 8017a88:	d1f0      	bne.n	8017a6c <read_submessage_list+0x158>
 8017a8a:	e74a      	b.n	8017922 <read_submessage_list+0xe>
 8017a8c:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8017a90:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8017a94:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 8017a98:	4628      	mov	r0, r5
 8017a9a:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8017a9e:	4651      	mov	r1, sl
 8017aa0:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8017aa4:	f1a8 0804 	sub.w	r8, r8, #4
 8017aa8:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8017aac:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8017ab0:	fa1f f888 	uxth.w	r8, r8
 8017ab4:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8017ab8:	f009 090e 	and.w	r9, r9, #14
 8017abc:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8017ac0:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8017ac4:	f002 fb84 	bl	801a1d0 <uxr_deserialize_BaseObjectRequest>
 8017ac8:	4650      	mov	r0, sl
 8017aca:	a90f      	add	r1, sp, #60	@ 0x3c
 8017acc:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8017ad0:	f000 fe4a 	bl	8018768 <uxr_parse_base_object_request>
 8017ad4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8017ad6:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8017ada:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8017ade:	9110      	str	r1, [sp, #64]	@ 0x40
 8017ae0:	f1bb 0f00 	cmp.w	fp, #0
 8017ae4:	d006      	beq.n	8017af4 <read_submessage_list+0x1e0>
 8017ae6:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8017aea:	4652      	mov	r2, sl
 8017aec:	4620      	mov	r0, r4
 8017aee:	9300      	str	r3, [sp, #0]
 8017af0:	2300      	movs	r3, #0
 8017af2:	47d8      	blx	fp
 8017af4:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8017af6:	b182      	cbz	r2, 8017b1a <read_submessage_list+0x206>
 8017af8:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8017afa:	f04f 0c00 	mov.w	ip, #0
 8017afe:	3902      	subs	r1, #2
 8017b00:	e003      	b.n	8017b0a <read_submessage_list+0x1f6>
 8017b02:	f10c 0c01 	add.w	ip, ip, #1
 8017b06:	4594      	cmp	ip, r2
 8017b08:	d007      	beq.n	8017b1a <read_submessage_list+0x206>
 8017b0a:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8017b0e:	4553      	cmp	r3, sl
 8017b10:	d1f7      	bne.n	8017b02 <read_submessage_list+0x1ee>
 8017b12:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8017b14:	2200      	movs	r2, #0
 8017b16:	f803 200c 	strb.w	r2, [r3, ip]
 8017b1a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8017b1e:	464b      	mov	r3, r9
 8017b20:	4642      	mov	r2, r8
 8017b22:	4620      	mov	r0, r4
 8017b24:	9102      	str	r1, [sp, #8]
 8017b26:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8017b28:	9101      	str	r1, [sp, #4]
 8017b2a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8017b2c:	9100      	str	r1, [sp, #0]
 8017b2e:	4629      	mov	r1, r5
 8017b30:	f009 f86c 	bl	8020c0c <read_submessage_format>
 8017b34:	e6f5      	b.n	8017922 <read_submessage_list+0xe>
 8017b36:	4629      	mov	r1, r5
 8017b38:	4620      	mov	r0, r4
 8017b3a:	f7ff fea3 	bl	8017884 <read_submessage_info>
 8017b3e:	e6f0      	b.n	8017922 <read_submessage_list+0xe>
 8017b40:	2a00      	cmp	r2, #0
 8017b42:	d03e      	beq.n	8017bc2 <read_submessage_list+0x2ae>
 8017b44:	a910      	add	r1, sp, #64	@ 0x40
 8017b46:	4628      	mov	r0, r5
 8017b48:	f002 fd4e 	bl	801a5e8 <uxr_deserialize_STATUS_Payload>
 8017b4c:	a90e      	add	r1, sp, #56	@ 0x38
 8017b4e:	aa0d      	add	r2, sp, #52	@ 0x34
 8017b50:	a810      	add	r0, sp, #64	@ 0x40
 8017b52:	f000 fe09 	bl	8018768 <uxr_parse_base_object_request>
 8017b56:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8017b58:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8017b5c:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8017b60:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 8017b64:	910f      	str	r1, [sp, #60]	@ 0x3c
 8017b66:	f1ba 0f00 	cmp.w	sl, #0
 8017b6a:	d006      	beq.n	8017b7a <read_submessage_list+0x266>
 8017b6c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8017b70:	4642      	mov	r2, r8
 8017b72:	4620      	mov	r0, r4
 8017b74:	9300      	str	r3, [sp, #0]
 8017b76:	464b      	mov	r3, r9
 8017b78:	47d0      	blx	sl
 8017b7a:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8017b7c:	2a00      	cmp	r2, #0
 8017b7e:	f43f aed0 	beq.w	8017922 <read_submessage_list+0xe>
 8017b82:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8017b84:	2100      	movs	r1, #0
 8017b86:	3802      	subs	r0, #2
 8017b88:	e003      	b.n	8017b92 <read_submessage_list+0x27e>
 8017b8a:	3101      	adds	r1, #1
 8017b8c:	4291      	cmp	r1, r2
 8017b8e:	f43f aec8 	beq.w	8017922 <read_submessage_list+0xe>
 8017b92:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8017b96:	4543      	cmp	r3, r8
 8017b98:	d1f7      	bne.n	8017b8a <read_submessage_list+0x276>
 8017b9a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8017b9c:	f803 9001 	strb.w	r9, [r3, r1]
 8017ba0:	e6bf      	b.n	8017922 <read_submessage_list+0xe>
 8017ba2:	2a00      	cmp	r2, #0
 8017ba4:	f47f aebd 	bne.w	8017922 <read_submessage_list+0xe>
 8017ba8:	4629      	mov	r1, r5
 8017baa:	4620      	mov	r0, r4
 8017bac:	f000 fd20 	bl	80185f0 <uxr_read_create_session_status>
 8017bb0:	e6b7      	b.n	8017922 <read_submessage_list+0xe>
 8017bb2:	4629      	mov	r1, r5
 8017bb4:	4620      	mov	r0, r4
 8017bb6:	f7ff fcf3 	bl	80175a0 <read_submessage_get_info>
 8017bba:	e6b2      	b.n	8017922 <read_submessage_list+0xe>
 8017bbc:	b017      	add	sp, #92	@ 0x5c
 8017bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bc2:	4629      	mov	r1, r5
 8017bc4:	4620      	mov	r0, r4
 8017bc6:	f000 fd21 	bl	801860c <uxr_read_delete_session_status>
 8017bca:	e6aa      	b.n	8017922 <read_submessage_list+0xe>
 8017bcc:	f001 fbfa 	bl	80193c4 <uxr_nanos>
 8017bd0:	4642      	mov	r2, r8
 8017bd2:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8017bd4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017bd6:	fbc7 3206 	smlal	r3, r2, r7, r6
 8017bda:	1818      	adds	r0, r3, r0
 8017bdc:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8017bde:	eb42 0101 	adc.w	r1, r2, r1
 8017be2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017be4:	4642      	mov	r2, r8
 8017be6:	fbc7 3206 	smlal	r3, r2, r7, r6
 8017bea:	469c      	mov	ip, r3
 8017bec:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 8017bf0:	fbc3 7806 	smlal	r7, r8, r3, r6
 8017bf4:	4643      	mov	r3, r8
 8017bf6:	eb1c 0c07 	adds.w	ip, ip, r7
 8017bfa:	eb42 0203 	adc.w	r2, r2, r3
 8017bfe:	ebb0 030c 	subs.w	r3, r0, ip
 8017c02:	eb61 0202 	sbc.w	r2, r1, r2
 8017c06:	2a00      	cmp	r2, #0
 8017c08:	db08      	blt.n	8017c1c <read_submessage_list+0x308>
 8017c0a:	085b      	lsrs	r3, r3, #1
 8017c0c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8017c10:	1052      	asrs	r2, r2, #1
 8017c12:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8017c16:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 8017c1a:	e6db      	b.n	80179d4 <read_submessage_list+0xc0>
 8017c1c:	3301      	adds	r3, #1
 8017c1e:	f142 0200 	adc.w	r2, r2, #0
 8017c22:	e7f2      	b.n	8017c0a <read_submessage_list+0x2f6>
 8017c24:	3b9aca00 	.word	0x3b9aca00

08017c28 <listen_message_reliably>:
 8017c28:	1e0b      	subs	r3, r1, #0
 8017c2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c2e:	bfb8      	it	lt
 8017c30:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8017c34:	b09d      	sub	sp, #116	@ 0x74
 8017c36:	4680      	mov	r8, r0
 8017c38:	9305      	str	r3, [sp, #20]
 8017c3a:	f001 fba7 	bl	801938c <uxr_millis>
 8017c3e:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8017c42:	4681      	mov	r9, r0
 8017c44:	2a00      	cmp	r2, #0
 8017c46:	f000 809a 	beq.w	8017d7e <listen_message_reliably+0x156>
 8017c4a:	2600      	movs	r6, #0
 8017c4c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017c50:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8017c54:	460f      	mov	r7, r1
 8017c56:	4630      	mov	r0, r6
 8017c58:	9303      	str	r3, [sp, #12]
 8017c5a:	e00e      	b.n	8017c7a <listen_message_reliably+0x52>
 8017c5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017c5e:	3601      	adds	r6, #1
 8017c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017c62:	455a      	cmp	r2, fp
 8017c64:	9903      	ldr	r1, [sp, #12]
 8017c66:	b2f0      	uxtb	r0, r6
 8017c68:	eb73 0101 	sbcs.w	r1, r3, r1
 8017c6c:	da01      	bge.n	8017c72 <listen_message_reliably+0x4a>
 8017c6e:	4693      	mov	fp, r2
 8017c70:	9303      	str	r3, [sp, #12]
 8017c72:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8017c76:	4283      	cmp	r3, r0
 8017c78:	d95f      	bls.n	8017d3a <listen_message_reliably+0x112>
 8017c7a:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8017c7e:	2102      	movs	r1, #2
 8017c80:	2201      	movs	r2, #1
 8017c82:	00e4      	lsls	r4, r4, #3
 8017c84:	f001 f9fe 	bl	8019084 <uxr_stream_id>
 8017c88:	4601      	mov	r1, r0
 8017c8a:	f104 0520 	add.w	r5, r4, #32
 8017c8e:	463b      	mov	r3, r7
 8017c90:	464a      	mov	r2, r9
 8017c92:	9109      	str	r1, [sp, #36]	@ 0x24
 8017c94:	4445      	add	r5, r8
 8017c96:	4628      	mov	r0, r5
 8017c98:	f008 fe8e 	bl	80209b8 <uxr_update_output_stream_heartbeat_timestamp>
 8017c9c:	eb08 0304 	add.w	r3, r8, r4
 8017ca0:	2800      	cmp	r0, #0
 8017ca2:	d0db      	beq.n	8017c5c <listen_message_reliably+0x34>
 8017ca4:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8017ca8:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8017cac:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8017cb0:	4640      	mov	r0, r8
 8017cb2:	3501      	adds	r5, #1
 8017cb4:	4444      	add	r4, r8
 8017cb6:	9304      	str	r3, [sp, #16]
 8017cb8:	f000 fd2e 	bl	8018718 <uxr_session_header_offset>
 8017cbc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8017cc0:	2300      	movs	r3, #0
 8017cc2:	2211      	movs	r2, #17
 8017cc4:	a90c      	add	r1, sp, #48	@ 0x30
 8017cc6:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8017cca:	9000      	str	r0, [sp, #0]
 8017ccc:	4650      	mov	r0, sl
 8017cce:	3601      	adds	r6, #1
 8017cd0:	f7fc f9c8 	bl	8014064 <ucdr_init_buffer_origin_offset>
 8017cd4:	2300      	movs	r3, #0
 8017cd6:	2205      	movs	r2, #5
 8017cd8:	210b      	movs	r1, #11
 8017cda:	4650      	mov	r0, sl
 8017cdc:	f001 fb10 	bl	8019300 <uxr_buffer_submessage_header>
 8017ce0:	2101      	movs	r1, #1
 8017ce2:	8968      	ldrh	r0, [r5, #10]
 8017ce4:	f009 f85c 	bl	8020da0 <uxr_seq_num_add>
 8017ce8:	892b      	ldrh	r3, [r5, #8]
 8017cea:	4602      	mov	r2, r0
 8017cec:	a90a      	add	r1, sp, #40	@ 0x28
 8017cee:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8017cf2:	4650      	mov	r0, sl
 8017cf4:	9b04      	ldr	r3, [sp, #16]
 8017cf6:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8017cfa:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8017cfe:	f002 fd2f 	bl	801a760 <uxr_serialize_HEARTBEAT_Payload>
 8017d02:	2200      	movs	r2, #0
 8017d04:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017d06:	4640      	mov	r0, r8
 8017d08:	4611      	mov	r1, r2
 8017d0a:	f000 fcb1 	bl	8018670 <uxr_stamp_session_header>
 8017d0e:	4650      	mov	r0, sl
 8017d10:	f7fc f9e8 	bl	80140e4 <ucdr_buffer_length>
 8017d14:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8017d18:	4602      	mov	r2, r0
 8017d1a:	a90c      	add	r1, sp, #48	@ 0x30
 8017d1c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8017d20:	47a8      	blx	r5
 8017d22:	9903      	ldr	r1, [sp, #12]
 8017d24:	b2f0      	uxtb	r0, r6
 8017d26:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8017d2a:	455a      	cmp	r2, fp
 8017d2c:	eb73 0101 	sbcs.w	r1, r3, r1
 8017d30:	db9d      	blt.n	8017c6e <listen_message_reliably+0x46>
 8017d32:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8017d36:	4283      	cmp	r3, r0
 8017d38:	d89f      	bhi.n	8017c7a <listen_message_reliably+0x52>
 8017d3a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017d3e:	9a03      	ldr	r2, [sp, #12]
 8017d40:	429a      	cmp	r2, r3
 8017d42:	bf08      	it	eq
 8017d44:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8017d48:	d019      	beq.n	8017d7e <listen_message_reliably+0x156>
 8017d4a:	ebab 0309 	sub.w	r3, fp, r9
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	9d05      	ldr	r5, [sp, #20]
 8017d52:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 8017d56:	aa08      	add	r2, sp, #32
 8017d58:	bf08      	it	eq
 8017d5a:	2301      	moveq	r3, #1
 8017d5c:	a907      	add	r1, sp, #28
 8017d5e:	6884      	ldr	r4, [r0, #8]
 8017d60:	429d      	cmp	r5, r3
 8017d62:	6800      	ldr	r0, [r0, #0]
 8017d64:	bfa8      	it	ge
 8017d66:	461d      	movge	r5, r3
 8017d68:	462b      	mov	r3, r5
 8017d6a:	47a0      	blx	r4
 8017d6c:	b948      	cbnz	r0, 8017d82 <listen_message_reliably+0x15a>
 8017d6e:	9b05      	ldr	r3, [sp, #20]
 8017d70:	1b5b      	subs	r3, r3, r5
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	9305      	str	r3, [sp, #20]
 8017d76:	f73f af60 	bgt.w	8017c3a <listen_message_reliably+0x12>
 8017d7a:	4604      	mov	r4, r0
 8017d7c:	e012      	b.n	8017da4 <listen_message_reliably+0x17c>
 8017d7e:	9b05      	ldr	r3, [sp, #20]
 8017d80:	e7e5      	b.n	8017d4e <listen_message_reliably+0x126>
 8017d82:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8017d86:	4604      	mov	r4, r0
 8017d88:	2500      	movs	r5, #0
 8017d8a:	a80c      	add	r0, sp, #48	@ 0x30
 8017d8c:	f7fc f97c 	bl	8014088 <ucdr_init_buffer>
 8017d90:	f10d 031a 	add.w	r3, sp, #26
 8017d94:	aa06      	add	r2, sp, #24
 8017d96:	a90c      	add	r1, sp, #48	@ 0x30
 8017d98:	4640      	mov	r0, r8
 8017d9a:	f88d 5018 	strb.w	r5, [sp, #24]
 8017d9e:	f000 fc7b 	bl	8018698 <uxr_read_session_header>
 8017da2:	b918      	cbnz	r0, 8017dac <listen_message_reliably+0x184>
 8017da4:	4620      	mov	r0, r4
 8017da6:	b01d      	add	sp, #116	@ 0x74
 8017da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dac:	4629      	mov	r1, r5
 8017dae:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8017db2:	f001 f995 	bl	80190e0 <uxr_stream_id_from_raw>
 8017db6:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8017dba:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8017dbe:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8017dc2:	2e01      	cmp	r6, #1
 8017dc4:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8017dc8:	d04b      	beq.n	8017e62 <listen_message_reliably+0x23a>
 8017dca:	2e02      	cmp	r6, #2
 8017dcc:	d00f      	beq.n	8017dee <listen_message_reliably+0x1c6>
 8017dce:	2e00      	cmp	r6, #0
 8017dd0:	d1e8      	bne.n	8017da4 <listen_message_reliably+0x17c>
 8017dd2:	4631      	mov	r1, r6
 8017dd4:	4630      	mov	r0, r6
 8017dd6:	f001 f983 	bl	80190e0 <uxr_stream_id_from_raw>
 8017dda:	4602      	mov	r2, r0
 8017ddc:	a90c      	add	r1, sp, #48	@ 0x30
 8017dde:	4640      	mov	r0, r8
 8017de0:	920a      	str	r2, [sp, #40]	@ 0x28
 8017de2:	f7ff fd97 	bl	8017914 <read_submessage_list>
 8017de6:	4620      	mov	r0, r4
 8017de8:	b01d      	add	sp, #116	@ 0x74
 8017dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dee:	4629      	mov	r1, r5
 8017df0:	f108 0008 	add.w	r0, r8, #8
 8017df4:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8017df8:	f001 fa60 	bl	80192bc <uxr_get_input_reliable_stream>
 8017dfc:	4607      	mov	r7, r0
 8017dfe:	b338      	cbz	r0, 8017e50 <listen_message_reliably+0x228>
 8017e00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017e02:	a80c      	add	r0, sp, #48	@ 0x30
 8017e04:	9203      	str	r2, [sp, #12]
 8017e06:	f7fc f971 	bl	80140ec <ucdr_buffer_remaining>
 8017e0a:	4603      	mov	r3, r0
 8017e0c:	f10d 0019 	add.w	r0, sp, #25
 8017e10:	9a03      	ldr	r2, [sp, #12]
 8017e12:	4651      	mov	r1, sl
 8017e14:	9000      	str	r0, [sp, #0]
 8017e16:	4638      	mov	r0, r7
 8017e18:	f008 f9da 	bl	80201d0 <uxr_receive_reliable_message>
 8017e1c:	b1c0      	cbz	r0, 8017e50 <listen_message_reliably+0x228>
 8017e1e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8017e22:	b393      	cbz	r3, 8017e8a <listen_message_reliably+0x262>
 8017e24:	ae14      	add	r6, sp, #80	@ 0x50
 8017e26:	f04f 0a02 	mov.w	sl, #2
 8017e2a:	e00a      	b.n	8017e42 <listen_message_reliably+0x21a>
 8017e2c:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8017e30:	4631      	mov	r1, r6
 8017e32:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 8017e36:	4640      	mov	r0, r8
 8017e38:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8017e3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017e3e:	f7ff fd69 	bl	8017914 <read_submessage_list>
 8017e42:	2204      	movs	r2, #4
 8017e44:	4631      	mov	r1, r6
 8017e46:	4638      	mov	r0, r7
 8017e48:	f008 fa44 	bl	80202d4 <uxr_next_input_reliable_buffer_available>
 8017e4c:	2800      	cmp	r0, #0
 8017e4e:	d1ed      	bne.n	8017e2c <listen_message_reliably+0x204>
 8017e50:	4640      	mov	r0, r8
 8017e52:	462a      	mov	r2, r5
 8017e54:	4649      	mov	r1, r9
 8017e56:	f7ff fbd9 	bl	801760c <write_submessage_acknack.isra.0>
 8017e5a:	4620      	mov	r0, r4
 8017e5c:	b01d      	add	sp, #116	@ 0x74
 8017e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e62:	4629      	mov	r1, r5
 8017e64:	f108 0008 	add.w	r0, r8, #8
 8017e68:	f001 fa1e 	bl	80192a8 <uxr_get_input_best_effort_stream>
 8017e6c:	2800      	cmp	r0, #0
 8017e6e:	d099      	beq.n	8017da4 <listen_message_reliably+0x17c>
 8017e70:	4651      	mov	r1, sl
 8017e72:	f008 f923 	bl	80200bc <uxr_receive_best_effort_message>
 8017e76:	2800      	cmp	r0, #0
 8017e78:	d094      	beq.n	8017da4 <listen_message_reliably+0x17c>
 8017e7a:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8017e7e:	a90c      	add	r1, sp, #48	@ 0x30
 8017e80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017e82:	4640      	mov	r0, r8
 8017e84:	f7ff fd46 	bl	8017914 <read_submessage_list>
 8017e88:	e78c      	b.n	8017da4 <listen_message_reliably+0x17c>
 8017e8a:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8017e8e:	a90c      	add	r1, sp, #48	@ 0x30
 8017e90:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017e92:	4640      	mov	r0, r8
 8017e94:	f7ff fd3e 	bl	8017914 <read_submessage_list>
 8017e98:	e7c4      	b.n	8017e24 <listen_message_reliably+0x1fc>
 8017e9a:	bf00      	nop

08017e9c <uxr_run_session_timeout>:
 8017e9c:	b570      	push	{r4, r5, r6, lr}
 8017e9e:	4604      	mov	r4, r0
 8017ea0:	460d      	mov	r5, r1
 8017ea2:	f001 fa73 	bl	801938c <uxr_millis>
 8017ea6:	4606      	mov	r6, r0
 8017ea8:	4620      	mov	r0, r4
 8017eaa:	f7ff fc77 	bl	801779c <uxr_flash_output_streams>
 8017eae:	4629      	mov	r1, r5
 8017eb0:	4620      	mov	r0, r4
 8017eb2:	f7ff feb9 	bl	8017c28 <listen_message_reliably>
 8017eb6:	f001 fa69 	bl	801938c <uxr_millis>
 8017eba:	1b83      	subs	r3, r0, r6
 8017ebc:	1ae9      	subs	r1, r5, r3
 8017ebe:	2900      	cmp	r1, #0
 8017ec0:	dcf6      	bgt.n	8017eb0 <uxr_run_session_timeout+0x14>
 8017ec2:	f104 0008 	add.w	r0, r4, #8
 8017ec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017eca:	f001 ba03 	b.w	80192d4 <uxr_output_streams_confirmed>
 8017ece:	bf00      	nop

08017ed0 <uxr_run_session_until_data>:
 8017ed0:	b570      	push	{r4, r5, r6, lr}
 8017ed2:	4604      	mov	r4, r0
 8017ed4:	460d      	mov	r5, r1
 8017ed6:	f001 fa59 	bl	801938c <uxr_millis>
 8017eda:	4606      	mov	r6, r0
 8017edc:	4620      	mov	r0, r4
 8017ede:	f7ff fc5d 	bl	801779c <uxr_flash_output_streams>
 8017ee2:	2300      	movs	r3, #0
 8017ee4:	4629      	mov	r1, r5
 8017ee6:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8017eea:	e005      	b.n	8017ef8 <uxr_run_session_until_data+0x28>
 8017eec:	f001 fa4e 	bl	801938c <uxr_millis>
 8017ef0:	1b83      	subs	r3, r0, r6
 8017ef2:	1ae9      	subs	r1, r5, r3
 8017ef4:	2900      	cmp	r1, #0
 8017ef6:	dd07      	ble.n	8017f08 <uxr_run_session_until_data+0x38>
 8017ef8:	4620      	mov	r0, r4
 8017efa:	f7ff fe95 	bl	8017c28 <listen_message_reliably>
 8017efe:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8017f02:	2800      	cmp	r0, #0
 8017f04:	d0f2      	beq.n	8017eec <uxr_run_session_until_data+0x1c>
 8017f06:	bd70      	pop	{r4, r5, r6, pc}
 8017f08:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8017f0c:	bd70      	pop	{r4, r5, r6, pc}
 8017f0e:	bf00      	nop

08017f10 <uxr_run_session_until_confirm_delivery>:
 8017f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f14:	4606      	mov	r6, r0
 8017f16:	460d      	mov	r5, r1
 8017f18:	f001 fa38 	bl	801938c <uxr_millis>
 8017f1c:	4607      	mov	r7, r0
 8017f1e:	4630      	mov	r0, r6
 8017f20:	f106 0808 	add.w	r8, r6, #8
 8017f24:	f7ff fc3a 	bl	801779c <uxr_flash_output_streams>
 8017f28:	2d00      	cmp	r5, #0
 8017f2a:	db10      	blt.n	8017f4e <uxr_run_session_until_confirm_delivery+0x3e>
 8017f2c:	462c      	mov	r4, r5
 8017f2e:	e006      	b.n	8017f3e <uxr_run_session_until_confirm_delivery+0x2e>
 8017f30:	f7ff fe7a 	bl	8017c28 <listen_message_reliably>
 8017f34:	f001 fa2a 	bl	801938c <uxr_millis>
 8017f38:	1bc3      	subs	r3, r0, r7
 8017f3a:	1aec      	subs	r4, r5, r3
 8017f3c:	d407      	bmi.n	8017f4e <uxr_run_session_until_confirm_delivery+0x3e>
 8017f3e:	4640      	mov	r0, r8
 8017f40:	f001 f9c8 	bl	80192d4 <uxr_output_streams_confirmed>
 8017f44:	4603      	mov	r3, r0
 8017f46:	4621      	mov	r1, r4
 8017f48:	4630      	mov	r0, r6
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d0f0      	beq.n	8017f30 <uxr_run_session_until_confirm_delivery+0x20>
 8017f4e:	4640      	mov	r0, r8
 8017f50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017f54:	f001 b9be 	b.w	80192d4 <uxr_output_streams_confirmed>

08017f58 <uxr_run_session_until_all_status>:
 8017f58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f5c:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8017f60:	4606      	mov	r6, r0
 8017f62:	4688      	mov	r8, r1
 8017f64:	4692      	mov	sl, r2
 8017f66:	461f      	mov	r7, r3
 8017f68:	f7ff fc18 	bl	801779c <uxr_flash_output_streams>
 8017f6c:	f1bb 0f00 	cmp.w	fp, #0
 8017f70:	d004      	beq.n	8017f7c <uxr_run_session_until_all_status+0x24>
 8017f72:	465a      	mov	r2, fp
 8017f74:	21ff      	movs	r1, #255	@ 0xff
 8017f76:	4638      	mov	r0, r7
 8017f78:	f00a f92a 	bl	80221d0 <memset>
 8017f7c:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8017f80:	1e7d      	subs	r5, r7, #1
 8017f82:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 8017f86:	f001 fa01 	bl	801938c <uxr_millis>
 8017f8a:	4641      	mov	r1, r8
 8017f8c:	4681      	mov	r9, r0
 8017f8e:	4630      	mov	r0, r6
 8017f90:	f7ff fe4a 	bl	8017c28 <listen_message_reliably>
 8017f94:	f001 f9fa 	bl	801938c <uxr_millis>
 8017f98:	eba0 0009 	sub.w	r0, r0, r9
 8017f9c:	eba8 0100 	sub.w	r1, r8, r0
 8017fa0:	f1bb 0f00 	cmp.w	fp, #0
 8017fa4:	d029      	beq.n	8017ffa <uxr_run_session_until_all_status+0xa2>
 8017fa6:	46ae      	mov	lr, r5
 8017fa8:	f04f 0c00 	mov.w	ip, #0
 8017fac:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8017fb0:	2cff      	cmp	r4, #255	@ 0xff
 8017fb2:	d015      	beq.n	8017fe0 <uxr_run_session_until_all_status+0x88>
 8017fb4:	f10c 0c01 	add.w	ip, ip, #1
 8017fb8:	45e3      	cmp	fp, ip
 8017fba:	d8f7      	bhi.n	8017fac <uxr_run_session_until_all_status+0x54>
 8017fbc:	2300      	movs	r3, #0
 8017fbe:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8017fc0:	e000      	b.n	8017fc4 <uxr_run_session_until_all_status+0x6c>
 8017fc2:	b158      	cbz	r0, 8017fdc <uxr_run_session_until_all_status+0x84>
 8017fc4:	462b      	mov	r3, r5
 8017fc6:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8017fca:	3302      	adds	r3, #2
 8017fcc:	2801      	cmp	r0, #1
 8017fce:	eba3 0307 	sub.w	r3, r3, r7
 8017fd2:	bf8c      	ite	hi
 8017fd4:	2000      	movhi	r0, #0
 8017fd6:	2001      	movls	r0, #1
 8017fd8:	459b      	cmp	fp, r3
 8017fda:	d8f2      	bhi.n	8017fc2 <uxr_run_session_until_all_status+0x6a>
 8017fdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fe0:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8017fe4:	f10c 0c01 	add.w	ip, ip, #1
 8017fe8:	45dc      	cmp	ip, fp
 8017fea:	d201      	bcs.n	8017ff0 <uxr_run_session_until_all_status+0x98>
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d0dd      	beq.n	8017fac <uxr_run_session_until_all_status+0x54>
 8017ff0:	2900      	cmp	r1, #0
 8017ff2:	dde3      	ble.n	8017fbc <uxr_run_session_until_all_status+0x64>
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d1ca      	bne.n	8017f8e <uxr_run_session_until_all_status+0x36>
 8017ff8:	e7e0      	b.n	8017fbc <uxr_run_session_until_all_status+0x64>
 8017ffa:	2001      	movs	r0, #1
 8017ffc:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8018000:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018004:	0000      	movs	r0, r0
	...

08018008 <uxr_sync_session>:
 8018008:	b5f0      	push	{r4, r5, r6, r7, lr}
 801800a:	b093      	sub	sp, #76	@ 0x4c
 801800c:	4604      	mov	r4, r0
 801800e:	460d      	mov	r5, r1
 8018010:	f000 fb82 	bl	8018718 <uxr_session_header_offset>
 8018014:	2214      	movs	r2, #20
 8018016:	2300      	movs	r3, #0
 8018018:	9000      	str	r0, [sp, #0]
 801801a:	a80a      	add	r0, sp, #40	@ 0x28
 801801c:	eb0d 0102 	add.w	r1, sp, r2
 8018020:	f7fc f820 	bl	8014064 <ucdr_init_buffer_origin_offset>
 8018024:	2300      	movs	r3, #0
 8018026:	2208      	movs	r2, #8
 8018028:	210e      	movs	r1, #14
 801802a:	a80a      	add	r0, sp, #40	@ 0x28
 801802c:	f001 f968 	bl	8019300 <uxr_buffer_submessage_header>
 8018030:	f001 f9c8 	bl	80193c4 <uxr_nanos>
 8018034:	460e      	mov	r6, r1
 8018036:	4607      	mov	r7, r0
 8018038:	a31b      	add	r3, pc, #108	@ (adr r3, 80180a8 <uxr_sync_session+0xa0>)
 801803a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801803e:	f7e8 f9b7 	bl	80003b0 <__aeabi_ldivmod>
 8018042:	4631      	mov	r1, r6
 8018044:	9003      	str	r0, [sp, #12]
 8018046:	4638      	mov	r0, r7
 8018048:	a317      	add	r3, pc, #92	@ (adr r3, 80180a8 <uxr_sync_session+0xa0>)
 801804a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801804e:	f7e8 f9af 	bl	80003b0 <__aeabi_ldivmod>
 8018052:	a903      	add	r1, sp, #12
 8018054:	a80a      	add	r0, sp, #40	@ 0x28
 8018056:	9204      	str	r2, [sp, #16]
 8018058:	f002 fbaa 	bl	801a7b0 <uxr_serialize_TIMESTAMP_Payload>
 801805c:	2200      	movs	r2, #0
 801805e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018060:	4620      	mov	r0, r4
 8018062:	4611      	mov	r1, r2
 8018064:	f000 fb04 	bl	8018670 <uxr_stamp_session_header>
 8018068:	a80a      	add	r0, sp, #40	@ 0x28
 801806a:	f7fc f83b 	bl	80140e4 <ucdr_buffer_length>
 801806e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018070:	4602      	mov	r2, r0
 8018072:	a905      	add	r1, sp, #20
 8018074:	e9d3 0600 	ldrd	r0, r6, [r3]
 8018078:	47b0      	blx	r6
 801807a:	f001 f987 	bl	801938c <uxr_millis>
 801807e:	2300      	movs	r3, #0
 8018080:	4606      	mov	r6, r0
 8018082:	4629      	mov	r1, r5
 8018084:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8018088:	e000      	b.n	801808c <uxr_sync_session+0x84>
 801808a:	b950      	cbnz	r0, 80180a2 <uxr_sync_session+0x9a>
 801808c:	4620      	mov	r0, r4
 801808e:	f7ff fdcb 	bl	8017c28 <listen_message_reliably>
 8018092:	f001 f97b 	bl	801938c <uxr_millis>
 8018096:	1b83      	subs	r3, r0, r6
 8018098:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 801809c:	1ae9      	subs	r1, r5, r3
 801809e:	2900      	cmp	r1, #0
 80180a0:	dcf3      	bgt.n	801808a <uxr_sync_session+0x82>
 80180a2:	b013      	add	sp, #76	@ 0x4c
 80180a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180a6:	bf00      	nop
 80180a8:	3b9aca00 	.word	0x3b9aca00
 80180ac:	00000000 	.word	0x00000000

080180b0 <uxr_run_session_until_pong>:
 80180b0:	b570      	push	{r4, r5, r6, lr}
 80180b2:	4604      	mov	r4, r0
 80180b4:	460d      	mov	r5, r1
 80180b6:	f001 f969 	bl	801938c <uxr_millis>
 80180ba:	4606      	mov	r6, r0
 80180bc:	4620      	mov	r0, r4
 80180be:	f7ff fb6d 	bl	801779c <uxr_flash_output_streams>
 80180c2:	2300      	movs	r3, #0
 80180c4:	4629      	mov	r1, r5
 80180c6:	f884 30b5 	strb.w	r3, [r4, #181]	@ 0xb5
 80180ca:	e005      	b.n	80180d8 <uxr_run_session_until_pong+0x28>
 80180cc:	f001 f95e 	bl	801938c <uxr_millis>
 80180d0:	1b83      	subs	r3, r0, r6
 80180d2:	1ae9      	subs	r1, r5, r3
 80180d4:	2900      	cmp	r1, #0
 80180d6:	dd0c      	ble.n	80180f2 <uxr_run_session_until_pong+0x42>
 80180d8:	4620      	mov	r0, r4
 80180da:	f7ff fda5 	bl	8017c28 <listen_message_reliably>
 80180de:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 80180e2:	2800      	cmp	r0, #0
 80180e4:	d0f2      	beq.n	80180cc <uxr_run_session_until_pong+0x1c>
 80180e6:	f1a0 0001 	sub.w	r0, r0, #1
 80180ea:	fab0 f080 	clz	r0, r0
 80180ee:	0940      	lsrs	r0, r0, #5
 80180f0:	bd70      	pop	{r4, r5, r6, pc}
 80180f2:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 80180f6:	f1a0 0001 	sub.w	r0, r0, #1
 80180fa:	fab0 f080 	clz	r0, r0
 80180fe:	0940      	lsrs	r0, r0, #5
 8018100:	bd70      	pop	{r4, r5, r6, pc}
 8018102:	bf00      	nop

08018104 <wait_session_status>:
 8018104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018108:	4604      	mov	r4, r0
 801810a:	b09d      	sub	sp, #116	@ 0x74
 801810c:	20ff      	movs	r0, #255	@ 0xff
 801810e:	9303      	str	r3, [sp, #12]
 8018110:	7160      	strb	r0, [r4, #5]
 8018112:	2b00      	cmp	r3, #0
 8018114:	f000 80b6 	beq.w	8018284 <wait_session_status+0x180>
 8018118:	4689      	mov	r9, r1
 801811a:	4692      	mov	sl, r2
 801811c:	f04f 0b00 	mov.w	fp, #0
 8018120:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018122:	4652      	mov	r2, sl
 8018124:	4649      	mov	r1, r9
 8018126:	e9d3 0500 	ldrd	r0, r5, [r3]
 801812a:	47a8      	blx	r5
 801812c:	f001 f92e 	bl	801938c <uxr_millis>
 8018130:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8018134:	4605      	mov	r5, r0
 8018136:	e009      	b.n	801814c <wait_session_status+0x48>
 8018138:	f001 f928 	bl	801938c <uxr_millis>
 801813c:	1b40      	subs	r0, r0, r5
 801813e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8018142:	2b00      	cmp	r3, #0
 8018144:	dd40      	ble.n	80181c8 <wait_session_status+0xc4>
 8018146:	7960      	ldrb	r0, [r4, #5]
 8018148:	28ff      	cmp	r0, #255	@ 0xff
 801814a:	d145      	bne.n	80181d8 <wait_session_status+0xd4>
 801814c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801814e:	a908      	add	r1, sp, #32
 8018150:	6896      	ldr	r6, [r2, #8]
 8018152:	6810      	ldr	r0, [r2, #0]
 8018154:	aa09      	add	r2, sp, #36	@ 0x24
 8018156:	47b0      	blx	r6
 8018158:	2800      	cmp	r0, #0
 801815a:	d0ed      	beq.n	8018138 <wait_session_status+0x34>
 801815c:	a80c      	add	r0, sp, #48	@ 0x30
 801815e:	2600      	movs	r6, #0
 8018160:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8018164:	f7fb ff90 	bl	8014088 <ucdr_init_buffer>
 8018168:	f10d 031e 	add.w	r3, sp, #30
 801816c:	aa07      	add	r2, sp, #28
 801816e:	a90c      	add	r1, sp, #48	@ 0x30
 8018170:	4620      	mov	r0, r4
 8018172:	f88d 601c 	strb.w	r6, [sp, #28]
 8018176:	f000 fa8f 	bl	8018698 <uxr_read_session_header>
 801817a:	2800      	cmp	r0, #0
 801817c:	d0dc      	beq.n	8018138 <wait_session_status+0x34>
 801817e:	4631      	mov	r1, r6
 8018180:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8018184:	f000 ffac 	bl	80190e0 <uxr_stream_id_from_raw>
 8018188:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801818c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8018190:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8018194:	2f01      	cmp	r7, #1
 8018196:	9302      	str	r3, [sp, #8]
 8018198:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 801819c:	d05c      	beq.n	8018258 <wait_session_status+0x154>
 801819e:	2f02      	cmp	r7, #2
 80181a0:	d020      	beq.n	80181e4 <wait_session_status+0xe0>
 80181a2:	2f00      	cmp	r7, #0
 80181a4:	d1c8      	bne.n	8018138 <wait_session_status+0x34>
 80181a6:	4639      	mov	r1, r7
 80181a8:	4638      	mov	r0, r7
 80181aa:	f000 ff99 	bl	80190e0 <uxr_stream_id_from_raw>
 80181ae:	a90c      	add	r1, sp, #48	@ 0x30
 80181b0:	4602      	mov	r2, r0
 80181b2:	900b      	str	r0, [sp, #44]	@ 0x2c
 80181b4:	4620      	mov	r0, r4
 80181b6:	f7ff fbad 	bl	8017914 <read_submessage_list>
 80181ba:	f001 f8e7 	bl	801938c <uxr_millis>
 80181be:	1b40      	subs	r0, r0, r5
 80181c0:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	dcbe      	bgt.n	8018146 <wait_session_status+0x42>
 80181c8:	f10b 0b01 	add.w	fp, fp, #1
 80181cc:	9b03      	ldr	r3, [sp, #12]
 80181ce:	7960      	ldrb	r0, [r4, #5]
 80181d0:	455b      	cmp	r3, fp
 80181d2:	d001      	beq.n	80181d8 <wait_session_status+0xd4>
 80181d4:	28ff      	cmp	r0, #255	@ 0xff
 80181d6:	d0a3      	beq.n	8018120 <wait_session_status+0x1c>
 80181d8:	38ff      	subs	r0, #255	@ 0xff
 80181da:	bf18      	it	ne
 80181dc:	2001      	movne	r0, #1
 80181de:	b01d      	add	sp, #116	@ 0x74
 80181e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181e4:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80181e8:	4631      	mov	r1, r6
 80181ea:	f104 0008 	add.w	r0, r4, #8
 80181ee:	9304      	str	r3, [sp, #16]
 80181f0:	f001 f864 	bl	80192bc <uxr_get_input_reliable_stream>
 80181f4:	4680      	mov	r8, r0
 80181f6:	b348      	cbz	r0, 801824c <wait_session_status+0x148>
 80181f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80181fa:	a80c      	add	r0, sp, #48	@ 0x30
 80181fc:	9205      	str	r2, [sp, #20]
 80181fe:	f7fb ff75 	bl	80140ec <ucdr_buffer_remaining>
 8018202:	4603      	mov	r3, r0
 8018204:	f10d 001d 	add.w	r0, sp, #29
 8018208:	9a05      	ldr	r2, [sp, #20]
 801820a:	9000      	str	r0, [sp, #0]
 801820c:	4640      	mov	r0, r8
 801820e:	9902      	ldr	r1, [sp, #8]
 8018210:	f007 ffde 	bl	80201d0 <uxr_receive_reliable_message>
 8018214:	b1d0      	cbz	r0, 801824c <wait_session_status+0x148>
 8018216:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801821a:	2b00      	cmp	r3, #0
 801821c:	d03a      	beq.n	8018294 <wait_session_status+0x190>
 801821e:	9f04      	ldr	r7, [sp, #16]
 8018220:	e00a      	b.n	8018238 <wait_session_status+0x134>
 8018222:	f04f 0302 	mov.w	r3, #2
 8018226:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 801822a:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801822e:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8018232:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018234:	f7ff fb6e 	bl	8017914 <read_submessage_list>
 8018238:	a914      	add	r1, sp, #80	@ 0x50
 801823a:	2204      	movs	r2, #4
 801823c:	4640      	mov	r0, r8
 801823e:	f008 f849 	bl	80202d4 <uxr_next_input_reliable_buffer_available>
 8018242:	4603      	mov	r3, r0
 8018244:	a914      	add	r1, sp, #80	@ 0x50
 8018246:	4620      	mov	r0, r4
 8018248:	2b00      	cmp	r3, #0
 801824a:	d1ea      	bne.n	8018222 <wait_session_status+0x11e>
 801824c:	4632      	mov	r2, r6
 801824e:	9904      	ldr	r1, [sp, #16]
 8018250:	4620      	mov	r0, r4
 8018252:	f7ff f9db 	bl	801760c <write_submessage_acknack.isra.0>
 8018256:	e76f      	b.n	8018138 <wait_session_status+0x34>
 8018258:	4631      	mov	r1, r6
 801825a:	f104 0008 	add.w	r0, r4, #8
 801825e:	f001 f823 	bl	80192a8 <uxr_get_input_best_effort_stream>
 8018262:	2800      	cmp	r0, #0
 8018264:	f43f af68 	beq.w	8018138 <wait_session_status+0x34>
 8018268:	9902      	ldr	r1, [sp, #8]
 801826a:	f007 ff27 	bl	80200bc <uxr_receive_best_effort_message>
 801826e:	2800      	cmp	r0, #0
 8018270:	f43f af62 	beq.w	8018138 <wait_session_status+0x34>
 8018274:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8018278:	a90c      	add	r1, sp, #48	@ 0x30
 801827a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801827c:	4620      	mov	r0, r4
 801827e:	f7ff fb49 	bl	8017914 <read_submessage_list>
 8018282:	e759      	b.n	8018138 <wait_session_status+0x34>
 8018284:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018286:	e9d3 0400 	ldrd	r0, r4, [r3]
 801828a:	47a0      	blx	r4
 801828c:	2001      	movs	r0, #1
 801828e:	b01d      	add	sp, #116	@ 0x74
 8018290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018294:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8018298:	a90c      	add	r1, sp, #48	@ 0x30
 801829a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801829c:	4620      	mov	r0, r4
 801829e:	f7ff fb39 	bl	8017914 <read_submessage_list>
 80182a2:	e7bc      	b.n	801821e <wait_session_status+0x11a>

080182a4 <uxr_delete_session_retries>:
 80182a4:	b530      	push	{r4, r5, lr}
 80182a6:	b08f      	sub	sp, #60	@ 0x3c
 80182a8:	4604      	mov	r4, r0
 80182aa:	460d      	mov	r5, r1
 80182ac:	f000 fa34 	bl	8018718 <uxr_session_header_offset>
 80182b0:	2300      	movs	r3, #0
 80182b2:	2210      	movs	r2, #16
 80182b4:	a902      	add	r1, sp, #8
 80182b6:	9000      	str	r0, [sp, #0]
 80182b8:	a806      	add	r0, sp, #24
 80182ba:	f7fb fed3 	bl	8014064 <ucdr_init_buffer_origin_offset>
 80182be:	a906      	add	r1, sp, #24
 80182c0:	4620      	mov	r0, r4
 80182c2:	f000 f979 	bl	80185b8 <uxr_buffer_delete_session>
 80182c6:	2200      	movs	r2, #0
 80182c8:	9b06      	ldr	r3, [sp, #24]
 80182ca:	4620      	mov	r0, r4
 80182cc:	4611      	mov	r1, r2
 80182ce:	f000 f9cf 	bl	8018670 <uxr_stamp_session_header>
 80182d2:	a806      	add	r0, sp, #24
 80182d4:	f7fb ff06 	bl	80140e4 <ucdr_buffer_length>
 80182d8:	462b      	mov	r3, r5
 80182da:	4602      	mov	r2, r0
 80182dc:	a902      	add	r1, sp, #8
 80182de:	4620      	mov	r0, r4
 80182e0:	f7ff ff10 	bl	8018104 <wait_session_status>
 80182e4:	b118      	cbz	r0, 80182ee <uxr_delete_session_retries+0x4a>
 80182e6:	7960      	ldrb	r0, [r4, #5]
 80182e8:	fab0 f080 	clz	r0, r0
 80182ec:	0940      	lsrs	r0, r0, #5
 80182ee:	b00f      	add	sp, #60	@ 0x3c
 80182f0:	bd30      	pop	{r4, r5, pc}
 80182f2:	bf00      	nop

080182f4 <uxr_create_session>:
 80182f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182f8:	f100 0b08 	add.w	fp, r0, #8
 80182fc:	4604      	mov	r4, r0
 80182fe:	b0ab      	sub	sp, #172	@ 0xac
 8018300:	4658      	mov	r0, fp
 8018302:	465e      	mov	r6, fp
 8018304:	f000 ff22 	bl	801914c <uxr_reset_stream_storage>
 8018308:	4620      	mov	r0, r4
 801830a:	f000 fa05 	bl	8018718 <uxr_session_header_offset>
 801830e:	2300      	movs	r3, #0
 8018310:	221c      	movs	r2, #28
 8018312:	a90b      	add	r1, sp, #44	@ 0x2c
 8018314:	9000      	str	r0, [sp, #0]
 8018316:	a812      	add	r0, sp, #72	@ 0x48
 8018318:	f7fb fea4 	bl	8014064 <ucdr_init_buffer_origin_offset>
 801831c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801831e:	a912      	add	r1, sp, #72	@ 0x48
 8018320:	4620      	mov	r0, r4
 8018322:	8a1a      	ldrh	r2, [r3, #16]
 8018324:	3a04      	subs	r2, #4
 8018326:	b292      	uxth	r2, r2
 8018328:	f000 f91c 	bl	8018564 <uxr_buffer_create_session>
 801832c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801832e:	4620      	mov	r0, r4
 8018330:	f000 f98a 	bl	8018648 <uxr_stamp_create_session_header>
 8018334:	a812      	add	r0, sp, #72	@ 0x48
 8018336:	f7fb fed5 	bl	80140e4 <ucdr_buffer_length>
 801833a:	23ff      	movs	r3, #255	@ 0xff
 801833c:	4681      	mov	r9, r0
 801833e:	7163      	strb	r3, [r4, #5]
 8018340:	230a      	movs	r3, #10
 8018342:	9303      	str	r3, [sp, #12]
 8018344:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018346:	464a      	mov	r2, r9
 8018348:	a90b      	add	r1, sp, #44	@ 0x2c
 801834a:	e9d3 0500 	ldrd	r0, r5, [r3]
 801834e:	47a8      	blx	r5
 8018350:	f001 f81c 	bl	801938c <uxr_millis>
 8018354:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8018358:	4605      	mov	r5, r0
 801835a:	e009      	b.n	8018370 <uxr_create_session+0x7c>
 801835c:	f001 f816 	bl	801938c <uxr_millis>
 8018360:	1b40      	subs	r0, r0, r5
 8018362:	7962      	ldrb	r2, [r4, #5]
 8018364:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8018368:	2b00      	cmp	r3, #0
 801836a:	dd38      	ble.n	80183de <uxr_create_session+0xea>
 801836c:	2aff      	cmp	r2, #255	@ 0xff
 801836e:	d13c      	bne.n	80183ea <uxr_create_session+0xf6>
 8018370:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8018372:	a907      	add	r1, sp, #28
 8018374:	6897      	ldr	r7, [r2, #8]
 8018376:	6810      	ldr	r0, [r2, #0]
 8018378:	aa08      	add	r2, sp, #32
 801837a:	47b8      	blx	r7
 801837c:	2800      	cmp	r0, #0
 801837e:	d0ed      	beq.n	801835c <uxr_create_session+0x68>
 8018380:	a81a      	add	r0, sp, #104	@ 0x68
 8018382:	2700      	movs	r7, #0
 8018384:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8018388:	f7fb fe7e 	bl	8014088 <ucdr_init_buffer>
 801838c:	f10d 031a 	add.w	r3, sp, #26
 8018390:	aa06      	add	r2, sp, #24
 8018392:	a91a      	add	r1, sp, #104	@ 0x68
 8018394:	4620      	mov	r0, r4
 8018396:	f88d 7018 	strb.w	r7, [sp, #24]
 801839a:	f000 f97d 	bl	8018698 <uxr_read_session_header>
 801839e:	2800      	cmp	r0, #0
 80183a0:	d0dc      	beq.n	801835c <uxr_create_session+0x68>
 80183a2:	4639      	mov	r1, r7
 80183a4:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80183a8:	f000 fe9a 	bl	80190e0 <uxr_stream_id_from_raw>
 80183ac:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80183b0:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 80183b4:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80183b8:	2f01      	cmp	r7, #1
 80183ba:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80183be:	d053      	beq.n	8018468 <uxr_create_session+0x174>
 80183c0:	2f02      	cmp	r7, #2
 80183c2:	d018      	beq.n	80183f6 <uxr_create_session+0x102>
 80183c4:	2f00      	cmp	r7, #0
 80183c6:	d1c9      	bne.n	801835c <uxr_create_session+0x68>
 80183c8:	4639      	mov	r1, r7
 80183ca:	4638      	mov	r0, r7
 80183cc:	f000 fe88 	bl	80190e0 <uxr_stream_id_from_raw>
 80183d0:	a91a      	add	r1, sp, #104	@ 0x68
 80183d2:	4602      	mov	r2, r0
 80183d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80183d6:	4620      	mov	r0, r4
 80183d8:	f7ff fa9c 	bl	8017914 <read_submessage_list>
 80183dc:	e7be      	b.n	801835c <uxr_create_session+0x68>
 80183de:	9b03      	ldr	r3, [sp, #12]
 80183e0:	3b01      	subs	r3, #1
 80183e2:	9303      	str	r3, [sp, #12]
 80183e4:	d001      	beq.n	80183ea <uxr_create_session+0xf6>
 80183e6:	2aff      	cmp	r2, #255	@ 0xff
 80183e8:	d0ac      	beq.n	8018344 <uxr_create_session+0x50>
 80183ea:	2a00      	cmp	r2, #0
 80183ec:	d051      	beq.n	8018492 <uxr_create_session+0x19e>
 80183ee:	2000      	movs	r0, #0
 80183f0:	b02b      	add	sp, #172	@ 0xac
 80183f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183f6:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80183fa:	4641      	mov	r1, r8
 80183fc:	4630      	mov	r0, r6
 80183fe:	9304      	str	r3, [sp, #16]
 8018400:	f000 ff5c 	bl	80192bc <uxr_get_input_reliable_stream>
 8018404:	4682      	mov	sl, r0
 8018406:	b348      	cbz	r0, 801845c <uxr_create_session+0x168>
 8018408:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801840a:	a81a      	add	r0, sp, #104	@ 0x68
 801840c:	9205      	str	r2, [sp, #20]
 801840e:	f7fb fe6d 	bl	80140ec <ucdr_buffer_remaining>
 8018412:	4603      	mov	r3, r0
 8018414:	f10d 0019 	add.w	r0, sp, #25
 8018418:	9a05      	ldr	r2, [sp, #20]
 801841a:	4659      	mov	r1, fp
 801841c:	9000      	str	r0, [sp, #0]
 801841e:	4650      	mov	r0, sl
 8018420:	f007 fed6 	bl	80201d0 <uxr_receive_reliable_message>
 8018424:	b1d0      	cbz	r0, 801845c <uxr_create_session+0x168>
 8018426:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801842a:	2b00      	cmp	r3, #0
 801842c:	d038      	beq.n	80184a0 <uxr_create_session+0x1ac>
 801842e:	9f04      	ldr	r7, [sp, #16]
 8018430:	e00a      	b.n	8018448 <uxr_create_session+0x154>
 8018432:	f04f 0302 	mov.w	r3, #2
 8018436:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 801843a:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 801843e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018442:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018444:	f7ff fa66 	bl	8017914 <read_submessage_list>
 8018448:	a922      	add	r1, sp, #136	@ 0x88
 801844a:	2204      	movs	r2, #4
 801844c:	4650      	mov	r0, sl
 801844e:	f007 ff41 	bl	80202d4 <uxr_next_input_reliable_buffer_available>
 8018452:	4603      	mov	r3, r0
 8018454:	a922      	add	r1, sp, #136	@ 0x88
 8018456:	4620      	mov	r0, r4
 8018458:	2b00      	cmp	r3, #0
 801845a:	d1ea      	bne.n	8018432 <uxr_create_session+0x13e>
 801845c:	4642      	mov	r2, r8
 801845e:	9904      	ldr	r1, [sp, #16]
 8018460:	4620      	mov	r0, r4
 8018462:	f7ff f8d3 	bl	801760c <write_submessage_acknack.isra.0>
 8018466:	e779      	b.n	801835c <uxr_create_session+0x68>
 8018468:	4641      	mov	r1, r8
 801846a:	4630      	mov	r0, r6
 801846c:	f000 ff1c 	bl	80192a8 <uxr_get_input_best_effort_stream>
 8018470:	2800      	cmp	r0, #0
 8018472:	f43f af73 	beq.w	801835c <uxr_create_session+0x68>
 8018476:	4659      	mov	r1, fp
 8018478:	f007 fe20 	bl	80200bc <uxr_receive_best_effort_message>
 801847c:	2800      	cmp	r0, #0
 801847e:	f43f af6d 	beq.w	801835c <uxr_create_session+0x68>
 8018482:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8018486:	a91a      	add	r1, sp, #104	@ 0x68
 8018488:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801848a:	4620      	mov	r0, r4
 801848c:	f7ff fa42 	bl	8017914 <read_submessage_list>
 8018490:	e764      	b.n	801835c <uxr_create_session+0x68>
 8018492:	4630      	mov	r0, r6
 8018494:	f000 fe5a 	bl	801914c <uxr_reset_stream_storage>
 8018498:	2001      	movs	r0, #1
 801849a:	b02b      	add	sp, #172	@ 0xac
 801849c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184a0:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 80184a4:	a91a      	add	r1, sp, #104	@ 0x68
 80184a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80184a8:	4620      	mov	r0, r4
 80184aa:	f7ff fa33 	bl	8017914 <read_submessage_list>
 80184ae:	e7be      	b.n	801842e <uxr_create_session+0x13a>

080184b0 <uxr_prepare_stream_to_write_submessage>:
 80184b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80184b4:	b082      	sub	sp, #8
 80184b6:	4604      	mov	r4, r0
 80184b8:	4610      	mov	r0, r2
 80184ba:	4615      	mov	r5, r2
 80184bc:	461e      	mov	r6, r3
 80184be:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 80184c2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80184c6:	f105 0904 	add.w	r9, r5, #4
 80184ca:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80184ce:	9101      	str	r1, [sp, #4]
 80184d0:	f000 ff56 	bl	8019380 <uxr_submessage_padding>
 80184d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80184d8:	4481      	add	r9, r0
 80184da:	2b01      	cmp	r3, #1
 80184dc:	d01d      	beq.n	801851a <uxr_prepare_stream_to_write_submessage+0x6a>
 80184de:	2b02      	cmp	r3, #2
 80184e0:	d116      	bne.n	8018510 <uxr_prepare_stream_to_write_submessage+0x60>
 80184e2:	f104 0008 	add.w	r0, r4, #8
 80184e6:	4651      	mov	r1, sl
 80184e8:	f000 fed2 	bl	8019290 <uxr_get_output_reliable_stream>
 80184ec:	4604      	mov	r4, r0
 80184ee:	b158      	cbz	r0, 8018508 <uxr_prepare_stream_to_write_submessage+0x58>
 80184f0:	4649      	mov	r1, r9
 80184f2:	4632      	mov	r2, r6
 80184f4:	f008 f8b2 	bl	802065c <uxr_prepare_reliable_buffer_to_write>
 80184f8:	4604      	mov	r4, r0
 80184fa:	b12c      	cbz	r4, 8018508 <uxr_prepare_stream_to_write_submessage+0x58>
 80184fc:	4643      	mov	r3, r8
 80184fe:	b2aa      	uxth	r2, r5
 8018500:	4639      	mov	r1, r7
 8018502:	4630      	mov	r0, r6
 8018504:	f000 fefc 	bl	8019300 <uxr_buffer_submessage_header>
 8018508:	4620      	mov	r0, r4
 801850a:	b002      	add	sp, #8
 801850c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018510:	2400      	movs	r4, #0
 8018512:	4620      	mov	r0, r4
 8018514:	b002      	add	sp, #8
 8018516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801851a:	f104 0008 	add.w	r0, r4, #8
 801851e:	4651      	mov	r1, sl
 8018520:	f000 feae 	bl	8019280 <uxr_get_output_best_effort_stream>
 8018524:	4604      	mov	r4, r0
 8018526:	2800      	cmp	r0, #0
 8018528:	d0ee      	beq.n	8018508 <uxr_prepare_stream_to_write_submessage+0x58>
 801852a:	4649      	mov	r1, r9
 801852c:	4632      	mov	r2, r6
 801852e:	f007 ffc1 	bl	80204b4 <uxr_prepare_best_effort_buffer_to_write>
 8018532:	4604      	mov	r4, r0
 8018534:	e7e1      	b.n	80184fa <uxr_prepare_stream_to_write_submessage+0x4a>
 8018536:	bf00      	nop

08018538 <uxr_init_session_info>:
 8018538:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801853c:	23ff      	movs	r3, #255	@ 0xff
 801853e:	7102      	strb	r2, [r0, #4]
 8018540:	f880 c001 	strb.w	ip, [r0, #1]
 8018544:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8018548:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801854c:	7001      	strb	r1, [r0, #0]
 801854e:	f880 c002 	strb.w	ip, [r0, #2]
 8018552:	7143      	strb	r3, [r0, #5]
 8018554:	70c2      	strb	r2, [r0, #3]
 8018556:	b500      	push	{lr}
 8018558:	f04f 0e09 	mov.w	lr, #9
 801855c:	f8a0 e006 	strh.w	lr, [r0, #6]
 8018560:	f85d fb04 	ldr.w	pc, [sp], #4

08018564 <uxr_buffer_create_session>:
 8018564:	b530      	push	{r4, r5, lr}
 8018566:	2300      	movs	r3, #0
 8018568:	b089      	sub	sp, #36	@ 0x24
 801856a:	4d12      	ldr	r5, [pc, #72]	@ (80185b4 <uxr_buffer_create_session+0x50>)
 801856c:	460c      	mov	r4, r1
 801856e:	9307      	str	r3, [sp, #28]
 8018570:	4619      	mov	r1, r3
 8018572:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018576:	2201      	movs	r2, #1
 8018578:	9301      	str	r3, [sp, #4]
 801857a:	80c2      	strh	r2, [r0, #6]
 801857c:	f88d 2004 	strb.w	r2, [sp, #4]
 8018580:	682a      	ldr	r2, [r5, #0]
 8018582:	9303      	str	r3, [sp, #12]
 8018584:	9200      	str	r2, [sp, #0]
 8018586:	88aa      	ldrh	r2, [r5, #4]
 8018588:	9306      	str	r3, [sp, #24]
 801858a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801858e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8018592:	9202      	str	r2, [sp, #8]
 8018594:	7802      	ldrb	r2, [r0, #0]
 8018596:	4620      	mov	r0, r4
 8018598:	f88d 200c 	strb.w	r2, [sp, #12]
 801859c:	2210      	movs	r2, #16
 801859e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80185a2:	f000 fead 	bl	8019300 <uxr_buffer_submessage_header>
 80185a6:	4669      	mov	r1, sp
 80185a8:	4620      	mov	r0, r4
 80185aa:	f001 ff1f 	bl	801a3ec <uxr_serialize_CREATE_CLIENT_Payload>
 80185ae:	b009      	add	sp, #36	@ 0x24
 80185b0:	bd30      	pop	{r4, r5, pc}
 80185b2:	bf00      	nop
 80185b4:	08023344 	.word	0x08023344

080185b8 <uxr_buffer_delete_session>:
 80185b8:	4a0c      	ldr	r2, [pc, #48]	@ (80185ec <uxr_buffer_delete_session+0x34>)
 80185ba:	2302      	movs	r3, #2
 80185bc:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 80185c0:	b510      	push	{r4, lr}
 80185c2:	460c      	mov	r4, r1
 80185c4:	b082      	sub	sp, #8
 80185c6:	8911      	ldrh	r1, [r2, #8]
 80185c8:	2204      	movs	r2, #4
 80185ca:	80c3      	strh	r3, [r0, #6]
 80185cc:	2300      	movs	r3, #0
 80185ce:	f8ad 1006 	strh.w	r1, [sp, #6]
 80185d2:	4620      	mov	r0, r4
 80185d4:	2103      	movs	r1, #3
 80185d6:	f8ad c004 	strh.w	ip, [sp, #4]
 80185da:	f000 fe91 	bl	8019300 <uxr_buffer_submessage_header>
 80185de:	a901      	add	r1, sp, #4
 80185e0:	4620      	mov	r0, r4
 80185e2:	f001 ffc1 	bl	801a568 <uxr_serialize_DELETE_Payload>
 80185e6:	b002      	add	sp, #8
 80185e8:	bd10      	pop	{r4, pc}
 80185ea:	bf00      	nop
 80185ec:	08023344 	.word	0x08023344

080185f0 <uxr_read_create_session_status>:
 80185f0:	b510      	push	{r4, lr}
 80185f2:	460b      	mov	r3, r1
 80185f4:	b088      	sub	sp, #32
 80185f6:	4604      	mov	r4, r0
 80185f8:	a901      	add	r1, sp, #4
 80185fa:	4618      	mov	r0, r3
 80185fc:	f001 ffc4 	bl	801a588 <uxr_deserialize_STATUS_AGENT_Payload>
 8018600:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8018604:	7163      	strb	r3, [r4, #5]
 8018606:	b008      	add	sp, #32
 8018608:	bd10      	pop	{r4, pc}
 801860a:	bf00      	nop

0801860c <uxr_read_delete_session_status>:
 801860c:	b510      	push	{r4, lr}
 801860e:	b084      	sub	sp, #16
 8018610:	4604      	mov	r4, r0
 8018612:	4608      	mov	r0, r1
 8018614:	a902      	add	r1, sp, #8
 8018616:	f001 ffe7 	bl	801a5e8 <uxr_deserialize_STATUS_Payload>
 801861a:	88e3      	ldrh	r3, [r4, #6]
 801861c:	2b02      	cmp	r3, #2
 801861e:	d001      	beq.n	8018624 <uxr_read_delete_session_status+0x18>
 8018620:	b004      	add	sp, #16
 8018622:	bd10      	pop	{r4, pc}
 8018624:	f10d 000a 	add.w	r0, sp, #10
 8018628:	f7fe fe72 	bl	8017310 <uxr_object_id_from_raw>
 801862c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8018630:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8018634:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8018638:	b29b      	uxth	r3, r3
 801863a:	2b02      	cmp	r3, #2
 801863c:	d1f0      	bne.n	8018620 <uxr_read_delete_session_status+0x14>
 801863e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8018642:	7163      	strb	r3, [r4, #5]
 8018644:	e7ec      	b.n	8018620 <uxr_read_delete_session_status+0x14>
 8018646:	bf00      	nop

08018648 <uxr_stamp_create_session_header>:
 8018648:	b510      	push	{r4, lr}
 801864a:	2208      	movs	r2, #8
 801864c:	b08a      	sub	sp, #40	@ 0x28
 801864e:	4604      	mov	r4, r0
 8018650:	eb0d 0002 	add.w	r0, sp, r2
 8018654:	f7fb fd18 	bl	8014088 <ucdr_init_buffer>
 8018658:	f814 1b01 	ldrb.w	r1, [r4], #1
 801865c:	2300      	movs	r3, #0
 801865e:	a802      	add	r0, sp, #8
 8018660:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8018664:	9400      	str	r4, [sp, #0]
 8018666:	461a      	mov	r2, r3
 8018668:	f001 f846 	bl	80196f8 <uxr_serialize_message_header>
 801866c:	b00a      	add	sp, #40	@ 0x28
 801866e:	bd10      	pop	{r4, pc}

08018670 <uxr_stamp_session_header>:
 8018670:	b530      	push	{r4, r5, lr}
 8018672:	b08d      	sub	sp, #52	@ 0x34
 8018674:	4604      	mov	r4, r0
 8018676:	460d      	mov	r5, r1
 8018678:	4619      	mov	r1, r3
 801867a:	a804      	add	r0, sp, #16
 801867c:	9203      	str	r2, [sp, #12]
 801867e:	2208      	movs	r2, #8
 8018680:	f7fb fd02 	bl	8014088 <ucdr_init_buffer>
 8018684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018688:	9b03      	ldr	r3, [sp, #12]
 801868a:	462a      	mov	r2, r5
 801868c:	a804      	add	r0, sp, #16
 801868e:	9400      	str	r4, [sp, #0]
 8018690:	f001 f832 	bl	80196f8 <uxr_serialize_message_header>
 8018694:	b00d      	add	sp, #52	@ 0x34
 8018696:	bd30      	pop	{r4, r5, pc}

08018698 <uxr_read_session_header>:
 8018698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801869c:	4607      	mov	r7, r0
 801869e:	b084      	sub	sp, #16
 80186a0:	4608      	mov	r0, r1
 80186a2:	460c      	mov	r4, r1
 80186a4:	4615      	mov	r5, r2
 80186a6:	461e      	mov	r6, r3
 80186a8:	f7fb fd20 	bl	80140ec <ucdr_buffer_remaining>
 80186ac:	2808      	cmp	r0, #8
 80186ae:	d803      	bhi.n	80186b8 <uxr_read_session_header+0x20>
 80186b0:	2000      	movs	r0, #0
 80186b2:	b004      	add	sp, #16
 80186b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186b8:	f10d 080c 	add.w	r8, sp, #12
 80186bc:	4633      	mov	r3, r6
 80186be:	462a      	mov	r2, r5
 80186c0:	4620      	mov	r0, r4
 80186c2:	f10d 010b 	add.w	r1, sp, #11
 80186c6:	f8cd 8000 	str.w	r8, [sp]
 80186ca:	f001 f833 	bl	8019734 <uxr_deserialize_message_header>
 80186ce:	783a      	ldrb	r2, [r7, #0]
 80186d0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80186d4:	4293      	cmp	r3, r2
 80186d6:	d1eb      	bne.n	80186b0 <uxr_read_session_header+0x18>
 80186d8:	061b      	lsls	r3, r3, #24
 80186da:	d41b      	bmi.n	8018714 <uxr_read_session_header+0x7c>
 80186dc:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80186e0:	787b      	ldrb	r3, [r7, #1]
 80186e2:	429a      	cmp	r2, r3
 80186e4:	d003      	beq.n	80186ee <uxr_read_session_header+0x56>
 80186e6:	2001      	movs	r0, #1
 80186e8:	f080 0001 	eor.w	r0, r0, #1
 80186ec:	e7e1      	b.n	80186b2 <uxr_read_session_header+0x1a>
 80186ee:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80186f2:	1cb8      	adds	r0, r7, #2
 80186f4:	78bb      	ldrb	r3, [r7, #2]
 80186f6:	429a      	cmp	r2, r3
 80186f8:	d1f5      	bne.n	80186e6 <uxr_read_session_header+0x4e>
 80186fa:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80186fe:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8018702:	429a      	cmp	r2, r3
 8018704:	d1ef      	bne.n	80186e6 <uxr_read_session_header+0x4e>
 8018706:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801870a:	7843      	ldrb	r3, [r0, #1]
 801870c:	429a      	cmp	r2, r3
 801870e:	d1ea      	bne.n	80186e6 <uxr_read_session_header+0x4e>
 8018710:	2000      	movs	r0, #0
 8018712:	e7e9      	b.n	80186e8 <uxr_read_session_header+0x50>
 8018714:	2001      	movs	r0, #1
 8018716:	e7cc      	b.n	80186b2 <uxr_read_session_header+0x1a>

08018718 <uxr_session_header_offset>:
 8018718:	f990 3000 	ldrsb.w	r3, [r0]
 801871c:	2b00      	cmp	r3, #0
 801871e:	bfac      	ite	ge
 8018720:	2008      	movge	r0, #8
 8018722:	2004      	movlt	r0, #4
 8018724:	4770      	bx	lr
 8018726:	bf00      	nop

08018728 <uxr_init_base_object_request>:
 8018728:	b510      	push	{r4, lr}
 801872a:	b082      	sub	sp, #8
 801872c:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8018730:	9101      	str	r1, [sp, #4]
 8018732:	88c3      	ldrh	r3, [r0, #6]
 8018734:	f1a3 010a 	sub.w	r1, r3, #10
 8018738:	b289      	uxth	r1, r1
 801873a:	42a1      	cmp	r1, r4
 801873c:	d80f      	bhi.n	801875e <uxr_init_base_object_request+0x36>
 801873e:	3301      	adds	r3, #1
 8018740:	b29c      	uxth	r4, r3
 8018742:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8018746:	b2db      	uxtb	r3, r3
 8018748:	80c4      	strh	r4, [r0, #6]
 801874a:	1c91      	adds	r1, r2, #2
 801874c:	9801      	ldr	r0, [sp, #4]
 801874e:	f882 c000 	strb.w	ip, [r2]
 8018752:	7053      	strb	r3, [r2, #1]
 8018754:	f7fe fdf0 	bl	8017338 <uxr_object_id_to_raw>
 8018758:	4620      	mov	r0, r4
 801875a:	b002      	add	sp, #8
 801875c:	bd10      	pop	{r4, pc}
 801875e:	230a      	movs	r3, #10
 8018760:	f04f 0c00 	mov.w	ip, #0
 8018764:	461c      	mov	r4, r3
 8018766:	e7ef      	b.n	8018748 <uxr_init_base_object_request+0x20>

08018768 <uxr_parse_base_object_request>:
 8018768:	b570      	push	{r4, r5, r6, lr}
 801876a:	4604      	mov	r4, r0
 801876c:	3002      	adds	r0, #2
 801876e:	460d      	mov	r5, r1
 8018770:	4616      	mov	r6, r2
 8018772:	f7fe fdcd 	bl	8017310 <uxr_object_id_from_raw>
 8018776:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801877a:	8028      	strh	r0, [r5, #0]
 801877c:	806b      	strh	r3, [r5, #2]
 801877e:	7822      	ldrb	r2, [r4, #0]
 8018780:	7863      	ldrb	r3, [r4, #1]
 8018782:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8018786:	8033      	strh	r3, [r6, #0]
 8018788:	bd70      	pop	{r4, r5, r6, pc}
 801878a:	bf00      	nop

0801878c <uxr_init_framing_io>:
 801878c:	2300      	movs	r3, #0
 801878e:	7041      	strb	r1, [r0, #1]
 8018790:	7003      	strb	r3, [r0, #0]
 8018792:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8018794:	4770      	bx	lr
 8018796:	bf00      	nop

08018798 <uxr_write_framed_msg>:
 8018798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801879c:	4617      	mov	r7, r2
 801879e:	7842      	ldrb	r2, [r0, #1]
 80187a0:	460e      	mov	r6, r1
 80187a2:	b083      	sub	sp, #12
 80187a4:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 80187a8:	469b      	mov	fp, r3
 80187aa:	237e      	movs	r3, #126	@ 0x7e
 80187ac:	4604      	mov	r4, r0
 80187ae:	2901      	cmp	r1, #1
 80187b0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80187b4:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80187b8:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80187bc:	f240 8115 	bls.w	80189ea <uxr_write_framed_msg+0x252>
 80187c0:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80187c4:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80187c8:	2202      	movs	r2, #2
 80187ca:	2901      	cmp	r1, #1
 80187cc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80187d0:	d952      	bls.n	8018878 <uxr_write_framed_msg+0xe0>
 80187d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80187d4:	2103      	movs	r1, #3
 80187d6:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80187da:	b2dd      	uxtb	r5, r3
 80187dc:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80187e0:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 80187e4:	2a01      	cmp	r2, #1
 80187e6:	d95c      	bls.n	80188a2 <uxr_write_framed_msg+0x10a>
 80187e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80187ea:	1862      	adds	r2, r4, r1
 80187ec:	3101      	adds	r1, #1
 80187ee:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80187f2:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 80187f6:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80187fa:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80187fe:	2a01      	cmp	r2, #1
 8018800:	d961      	bls.n	80188c6 <uxr_write_framed_msg+0x12e>
 8018802:	1c4a      	adds	r2, r1, #1
 8018804:	4421      	add	r1, r4
 8018806:	b2d2      	uxtb	r2, r2
 8018808:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801880c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018810:	2b00      	cmp	r3, #0
 8018812:	d06a      	beq.n	80188ea <uxr_write_framed_msg+0x152>
 8018814:	f04f 0800 	mov.w	r8, #0
 8018818:	46c1      	mov	r9, r8
 801881a:	e016      	b.n	801884a <uxr_write_framed_msg+0xb2>
 801881c:	2a29      	cmp	r2, #41	@ 0x29
 801881e:	d868      	bhi.n	80188f2 <uxr_write_framed_msg+0x15a>
 8018820:	18a0      	adds	r0, r4, r2
 8018822:	3201      	adds	r2, #1
 8018824:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8018828:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801882c:	ea88 0101 	eor.w	r1, r8, r1
 8018830:	4b7d      	ldr	r3, [pc, #500]	@ (8018a28 <uxr_write_framed_msg+0x290>)
 8018832:	f109 0901 	add.w	r9, r9, #1
 8018836:	b2c9      	uxtb	r1, r1
 8018838:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 801883c:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8018840:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018842:	454b      	cmp	r3, r9
 8018844:	d969      	bls.n	801891a <uxr_write_framed_msg+0x182>
 8018846:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801884a:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801884e:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8018852:	2801      	cmp	r0, #1
 8018854:	d8e2      	bhi.n	801881c <uxr_write_framed_msg+0x84>
 8018856:	1c50      	adds	r0, r2, #1
 8018858:	b2c0      	uxtb	r0, r0
 801885a:	2829      	cmp	r0, #41	@ 0x29
 801885c:	d849      	bhi.n	80188f2 <uxr_write_framed_msg+0x15a>
 801885e:	18a0      	adds	r0, r4, r2
 8018860:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8018864:	3202      	adds	r2, #2
 8018866:	f081 0520 	eor.w	r5, r1, #32
 801886a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801886e:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8018872:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018876:	e7d9      	b.n	801882c <uxr_write_framed_msg+0x94>
 8018878:	2104      	movs	r1, #4
 801887a:	f04f 0c03 	mov.w	ip, #3
 801887e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018880:	4422      	add	r2, r4
 8018882:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8018886:	44a4      	add	ip, r4
 8018888:	b2dd      	uxtb	r5, r3
 801888a:	f080 0020 	eor.w	r0, r0, #32
 801888e:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 8018892:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8018896:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 801889a:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801889e:	2a01      	cmp	r2, #1
 80188a0:	d8a2      	bhi.n	80187e8 <uxr_write_framed_msg+0x50>
 80188a2:	1862      	adds	r2, r4, r1
 80188a4:	207d      	movs	r0, #125	@ 0x7d
 80188a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80188a8:	f085 0520 	eor.w	r5, r5, #32
 80188ac:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 80188b0:	3102      	adds	r1, #2
 80188b2:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80188b6:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 80188ba:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80188be:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80188c2:	2a01      	cmp	r2, #1
 80188c4:	d89d      	bhi.n	8018802 <uxr_write_framed_msg+0x6a>
 80188c6:	1c4d      	adds	r5, r1, #1
 80188c8:	1c8a      	adds	r2, r1, #2
 80188ca:	f080 0020 	eor.w	r0, r0, #32
 80188ce:	4421      	add	r1, r4
 80188d0:	fa54 f585 	uxtab	r5, r4, r5
 80188d4:	b2d2      	uxtb	r2, r2
 80188d6:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80188da:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 80188de:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 80188e2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d194      	bne.n	8018814 <uxr_write_framed_msg+0x7c>
 80188ea:	4619      	mov	r1, r3
 80188ec:	f8ad 3004 	strh.w	r3, [sp, #4]
 80188f0:	e019      	b.n	8018926 <uxr_write_framed_msg+0x18e>
 80188f2:	2500      	movs	r5, #0
 80188f4:	e000      	b.n	80188f8 <uxr_write_framed_msg+0x160>
 80188f6:	b160      	cbz	r0, 8018912 <uxr_write_framed_msg+0x17a>
 80188f8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80188fc:	1b52      	subs	r2, r2, r5
 80188fe:	4653      	mov	r3, sl
 8018900:	4638      	mov	r0, r7
 8018902:	4421      	add	r1, r4
 8018904:	47b0      	blx	r6
 8018906:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801890a:	4405      	add	r5, r0
 801890c:	4295      	cmp	r5, r2
 801890e:	d3f2      	bcc.n	80188f6 <uxr_write_framed_msg+0x15e>
 8018910:	d066      	beq.n	80189e0 <uxr_write_framed_msg+0x248>
 8018912:	2000      	movs	r0, #0
 8018914:	b003      	add	sp, #12
 8018916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801891a:	fa5f f188 	uxtb.w	r1, r8
 801891e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018922:	f8ad 8004 	strh.w	r8, [sp, #4]
 8018926:	f04f 0900 	mov.w	r9, #0
 801892a:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 801892e:	46c8      	mov	r8, r9
 8018930:	e013      	b.n	801895a <uxr_write_framed_msg+0x1c2>
 8018932:	2a29      	cmp	r2, #41	@ 0x29
 8018934:	d824      	bhi.n	8018980 <uxr_write_framed_msg+0x1e8>
 8018936:	18a3      	adds	r3, r4, r2
 8018938:	3201      	adds	r2, #1
 801893a:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 801893e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018942:	f109 0901 	add.w	r9, r9, #1
 8018946:	f1b9 0f02 	cmp.w	r9, #2
 801894a:	d02d      	beq.n	80189a8 <uxr_write_framed_msg+0x210>
 801894c:	f109 0308 	add.w	r3, r9, #8
 8018950:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018954:	446b      	add	r3, sp
 8018956:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 801895a:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 801895e:	2b01      	cmp	r3, #1
 8018960:	d8e7      	bhi.n	8018932 <uxr_write_framed_msg+0x19a>
 8018962:	1c53      	adds	r3, r2, #1
 8018964:	b2db      	uxtb	r3, r3
 8018966:	2b29      	cmp	r3, #41	@ 0x29
 8018968:	d80a      	bhi.n	8018980 <uxr_write_framed_msg+0x1e8>
 801896a:	18a3      	adds	r3, r4, r2
 801896c:	f081 0120 	eor.w	r1, r1, #32
 8018970:	3202      	adds	r2, #2
 8018972:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 8018976:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 801897a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801897e:	e7e0      	b.n	8018942 <uxr_write_framed_msg+0x1aa>
 8018980:	2500      	movs	r5, #0
 8018982:	e001      	b.n	8018988 <uxr_write_framed_msg+0x1f0>
 8018984:	2800      	cmp	r0, #0
 8018986:	d0c4      	beq.n	8018912 <uxr_write_framed_msg+0x17a>
 8018988:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801898c:	1b52      	subs	r2, r2, r5
 801898e:	4653      	mov	r3, sl
 8018990:	4638      	mov	r0, r7
 8018992:	4421      	add	r1, r4
 8018994:	47b0      	blx	r6
 8018996:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801899a:	4405      	add	r5, r0
 801899c:	4295      	cmp	r5, r2
 801899e:	d3f1      	bcc.n	8018984 <uxr_write_framed_msg+0x1ec>
 80189a0:	d1b7      	bne.n	8018912 <uxr_write_framed_msg+0x17a>
 80189a2:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 80189a6:	e7d1      	b.n	801894c <uxr_write_framed_msg+0x1b4>
 80189a8:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80189ac:	b19a      	cbz	r2, 80189d6 <uxr_write_framed_msg+0x23e>
 80189ae:	2500      	movs	r5, #0
 80189b0:	e001      	b.n	80189b6 <uxr_write_framed_msg+0x21e>
 80189b2:	2800      	cmp	r0, #0
 80189b4:	d0ad      	beq.n	8018912 <uxr_write_framed_msg+0x17a>
 80189b6:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80189ba:	1b52      	subs	r2, r2, r5
 80189bc:	4653      	mov	r3, sl
 80189be:	4638      	mov	r0, r7
 80189c0:	4421      	add	r1, r4
 80189c2:	47b0      	blx	r6
 80189c4:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80189c8:	4405      	add	r5, r0
 80189ca:	4295      	cmp	r5, r2
 80189cc:	d3f1      	bcc.n	80189b2 <uxr_write_framed_msg+0x21a>
 80189ce:	d1a0      	bne.n	8018912 <uxr_write_framed_msg+0x17a>
 80189d0:	2300      	movs	r3, #0
 80189d2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80189d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80189d8:	b298      	uxth	r0, r3
 80189da:	b003      	add	sp, #12
 80189dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189e0:	f04f 0300 	mov.w	r3, #0
 80189e4:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80189e8:	e72a      	b.n	8018840 <uxr_write_framed_msg+0xa8>
 80189ea:	217d      	movs	r1, #125	@ 0x7d
 80189ec:	f082 0220 	eor.w	r2, r2, #32
 80189f0:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 80189f4:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80189f8:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 80189fc:	2203      	movs	r2, #3
 80189fe:	2901      	cmp	r1, #1
 8018a00:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018a04:	d803      	bhi.n	8018a0e <uxr_write_framed_msg+0x276>
 8018a06:	2105      	movs	r1, #5
 8018a08:	f04f 0c04 	mov.w	ip, #4
 8018a0c:	e737      	b.n	801887e <uxr_write_framed_msg+0xe6>
 8018a0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018a10:	2104      	movs	r1, #4
 8018a12:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8018a16:	b2dd      	uxtb	r5, r3
 8018a18:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8018a1c:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8018a20:	2a01      	cmp	r2, #1
 8018a22:	f63f aee1 	bhi.w	80187e8 <uxr_write_framed_msg+0x50>
 8018a26:	e73c      	b.n	80188a2 <uxr_write_framed_msg+0x10a>
 8018a28:	08025034 	.word	0x08025034

08018a2c <uxr_framing_read_transport>:
 8018a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a30:	4604      	mov	r4, r0
 8018a32:	b085      	sub	sp, #20
 8018a34:	4692      	mov	sl, r2
 8018a36:	4689      	mov	r9, r1
 8018a38:	461d      	mov	r5, r3
 8018a3a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8018a3c:	f000 fca6 	bl	801938c <uxr_millis>
 8018a40:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8018a44:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8018a48:	4680      	mov	r8, r0
 8018a4a:	42ba      	cmp	r2, r7
 8018a4c:	d05f      	beq.n	8018b0e <uxr_framing_read_transport+0xe2>
 8018a4e:	d817      	bhi.n	8018a80 <uxr_framing_read_transport+0x54>
 8018a50:	3f01      	subs	r7, #1
 8018a52:	1aba      	subs	r2, r7, r2
 8018a54:	2700      	movs	r7, #0
 8018a56:	b2d2      	uxtb	r2, r2
 8018a58:	42b2      	cmp	r2, r6
 8018a5a:	d81a      	bhi.n	8018a92 <uxr_framing_read_transport+0x66>
 8018a5c:	19d3      	adds	r3, r2, r7
 8018a5e:	42b3      	cmp	r3, r6
 8018a60:	d852      	bhi.n	8018b08 <uxr_framing_read_transport+0xdc>
 8018a62:	b9d2      	cbnz	r2, 8018a9a <uxr_framing_read_transport+0x6e>
 8018a64:	2600      	movs	r6, #0
 8018a66:	f000 fc91 	bl	801938c <uxr_millis>
 8018a6a:	682b      	ldr	r3, [r5, #0]
 8018a6c:	eba0 0008 	sub.w	r0, r0, r8
 8018a70:	1a1b      	subs	r3, r3, r0
 8018a72:	4630      	mov	r0, r6
 8018a74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018a78:	602b      	str	r3, [r5, #0]
 8018a7a:	b005      	add	sp, #20
 8018a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a80:	2f00      	cmp	r7, #0
 8018a82:	d060      	beq.n	8018b46 <uxr_framing_read_transport+0x11a>
 8018a84:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 8018a88:	3f01      	subs	r7, #1
 8018a8a:	b2d2      	uxtb	r2, r2
 8018a8c:	b2ff      	uxtb	r7, r7
 8018a8e:	42b2      	cmp	r2, r6
 8018a90:	d9e4      	bls.n	8018a5c <uxr_framing_read_transport+0x30>
 8018a92:	b2f2      	uxtb	r2, r6
 8018a94:	2700      	movs	r7, #0
 8018a96:	2a00      	cmp	r2, #0
 8018a98:	d0e4      	beq.n	8018a64 <uxr_framing_read_transport+0x38>
 8018a9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018a9c:	4650      	mov	r0, sl
 8018a9e:	9203      	str	r2, [sp, #12]
 8018aa0:	9300      	str	r3, [sp, #0]
 8018aa2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018aa6:	682b      	ldr	r3, [r5, #0]
 8018aa8:	3102      	adds	r1, #2
 8018aaa:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 8018b50 <uxr_framing_read_transport+0x124>
 8018aae:	4421      	add	r1, r4
 8018ab0:	47c8      	blx	r9
 8018ab2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018ab6:	4606      	mov	r6, r0
 8018ab8:	4403      	add	r3, r0
 8018aba:	0859      	lsrs	r1, r3, #1
 8018abc:	fbab 2101 	umull	r2, r1, fp, r1
 8018ac0:	222a      	movs	r2, #42	@ 0x2a
 8018ac2:	0889      	lsrs	r1, r1, #2
 8018ac4:	fb02 3111 	mls	r1, r2, r1, r3
 8018ac8:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8018acc:	2800      	cmp	r0, #0
 8018ace:	d0c9      	beq.n	8018a64 <uxr_framing_read_transport+0x38>
 8018ad0:	9a03      	ldr	r2, [sp, #12]
 8018ad2:	4290      	cmp	r0, r2
 8018ad4:	d1c7      	bne.n	8018a66 <uxr_framing_read_transport+0x3a>
 8018ad6:	2f00      	cmp	r7, #0
 8018ad8:	d0c5      	beq.n	8018a66 <uxr_framing_read_transport+0x3a>
 8018ada:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018adc:	3102      	adds	r1, #2
 8018ade:	463a      	mov	r2, r7
 8018ae0:	4650      	mov	r0, sl
 8018ae2:	4421      	add	r1, r4
 8018ae4:	9300      	str	r3, [sp, #0]
 8018ae6:	2300      	movs	r3, #0
 8018ae8:	47c8      	blx	r9
 8018aea:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8018aee:	4406      	add	r6, r0
 8018af0:	1813      	adds	r3, r2, r0
 8018af2:	085a      	lsrs	r2, r3, #1
 8018af4:	fbab 1b02 	umull	r1, fp, fp, r2
 8018af8:	222a      	movs	r2, #42	@ 0x2a
 8018afa:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8018afe:	fb02 331b 	mls	r3, r2, fp, r3
 8018b02:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8018b06:	e7ae      	b.n	8018a66 <uxr_framing_read_transport+0x3a>
 8018b08:	1ab6      	subs	r6, r6, r2
 8018b0a:	b2f7      	uxtb	r7, r6
 8018b0c:	e7a9      	b.n	8018a62 <uxr_framing_read_transport+0x36>
 8018b0e:	2300      	movs	r3, #0
 8018b10:	2e28      	cmp	r6, #40	@ 0x28
 8018b12:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8018b14:	d9bd      	bls.n	8018a92 <uxr_framing_read_transport+0x66>
 8018b16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018b18:	2229      	movs	r2, #41	@ 0x29
 8018b1a:	1ca1      	adds	r1, r4, #2
 8018b1c:	4650      	mov	r0, sl
 8018b1e:	9300      	str	r3, [sp, #0]
 8018b20:	682b      	ldr	r3, [r5, #0]
 8018b22:	47c8      	blx	r9
 8018b24:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018b28:	4606      	mov	r6, r0
 8018b2a:	212a      	movs	r1, #42	@ 0x2a
 8018b2c:	4403      	add	r3, r0
 8018b2e:	4808      	ldr	r0, [pc, #32]	@ (8018b50 <uxr_framing_read_transport+0x124>)
 8018b30:	085a      	lsrs	r2, r3, #1
 8018b32:	fba0 0202 	umull	r0, r2, r0, r2
 8018b36:	0892      	lsrs	r2, r2, #2
 8018b38:	fb01 3312 	mls	r3, r1, r2, r3
 8018b3c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8018b40:	2e00      	cmp	r6, #0
 8018b42:	d08f      	beq.n	8018a64 <uxr_framing_read_transport+0x38>
 8018b44:	e78f      	b.n	8018a66 <uxr_framing_read_transport+0x3a>
 8018b46:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 8018b4a:	b2d2      	uxtb	r2, r2
 8018b4c:	e784      	b.n	8018a58 <uxr_framing_read_transport+0x2c>
 8018b4e:	bf00      	nop
 8018b50:	30c30c31 	.word	0x30c30c31

08018b54 <uxr_read_framed_msg>:
 8018b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b58:	461e      	mov	r6, r3
 8018b5a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8018b5e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8018b62:	b083      	sub	sp, #12
 8018b64:	4604      	mov	r4, r0
 8018b66:	4688      	mov	r8, r1
 8018b68:	429d      	cmp	r5, r3
 8018b6a:	4691      	mov	r9, r2
 8018b6c:	f000 818c 	beq.w	8018e88 <uxr_read_framed_msg+0x334>
 8018b70:	7823      	ldrb	r3, [r4, #0]
 8018b72:	4dc3      	ldr	r5, [pc, #780]	@ (8018e80 <uxr_read_framed_msg+0x32c>)
 8018b74:	4fc3      	ldr	r7, [pc, #780]	@ (8018e84 <uxr_read_framed_msg+0x330>)
 8018b76:	2b07      	cmp	r3, #7
 8018b78:	d8fd      	bhi.n	8018b76 <uxr_read_framed_msg+0x22>
 8018b7a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8018b7e:	011c      	.short	0x011c
 8018b80:	00d900fb 	.word	0x00d900fb
 8018b84:	008f00ba 	.word	0x008f00ba
 8018b88:	00320051 	.word	0x00320051
 8018b8c:	0008      	.short	0x0008
 8018b8e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018b92:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018b96:	4299      	cmp	r1, r3
 8018b98:	f000 814d 	beq.w	8018e36 <uxr_read_framed_msg+0x2e2>
 8018b9c:	18e2      	adds	r2, r4, r3
 8018b9e:	7892      	ldrb	r2, [r2, #2]
 8018ba0:	2a7d      	cmp	r2, #125	@ 0x7d
 8018ba2:	f000 81b8 	beq.w	8018f16 <uxr_read_framed_msg+0x3c2>
 8018ba6:	3301      	adds	r3, #1
 8018ba8:	212a      	movs	r1, #42	@ 0x2a
 8018baa:	2a7e      	cmp	r2, #126	@ 0x7e
 8018bac:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8018bb0:	fba5 c000 	umull	ip, r0, r5, r0
 8018bb4:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8018bb8:	fb01 3310 	mls	r3, r1, r0, r3
 8018bbc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018bc0:	f000 8257 	beq.w	8019072 <uxr_read_framed_msg+0x51e>
 8018bc4:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8018bc6:	2000      	movs	r0, #0
 8018bc8:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8018bca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8018bce:	7020      	strb	r0, [r4, #0]
 8018bd0:	b29b      	uxth	r3, r3
 8018bd2:	4299      	cmp	r1, r3
 8018bd4:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8018bd6:	f000 8178 	beq.w	8018eca <uxr_read_framed_msg+0x376>
 8018bda:	2000      	movs	r0, #0
 8018bdc:	b003      	add	sp, #12
 8018bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018be2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018be6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018bea:	4298      	cmp	r0, r3
 8018bec:	f000 8132 	beq.w	8018e54 <uxr_read_framed_msg+0x300>
 8018bf0:	18e2      	adds	r2, r4, r3
 8018bf2:	7891      	ldrb	r1, [r2, #2]
 8018bf4:	297d      	cmp	r1, #125	@ 0x7d
 8018bf6:	f000 8170 	beq.w	8018eda <uxr_read_framed_msg+0x386>
 8018bfa:	3301      	adds	r3, #1
 8018bfc:	202a      	movs	r0, #42	@ 0x2a
 8018bfe:	297e      	cmp	r1, #126	@ 0x7e
 8018c00:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018c04:	fba5 c202 	umull	ip, r2, r5, r2
 8018c08:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018c0c:	fb00 3312 	mls	r3, r0, r2, r3
 8018c10:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018c14:	f000 821d 	beq.w	8019052 <uxr_read_framed_msg+0x4fe>
 8018c18:	2307      	movs	r3, #7
 8018c1a:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8018c1c:	7023      	strb	r3, [r4, #0]
 8018c1e:	e7aa      	b.n	8018b76 <uxr_read_framed_msg+0x22>
 8018c20:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8018c22:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8018c26:	459e      	cmp	lr, r3
 8018c28:	d827      	bhi.n	8018c7a <uxr_read_framed_msg+0x126>
 8018c2a:	e032      	b.n	8018c92 <uxr_read_framed_msg+0x13e>
 8018c2c:	fba5 b101 	umull	fp, r1, r5, r1
 8018c30:	f89c c002 	ldrb.w	ip, [ip, #2]
 8018c34:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8018c38:	0889      	lsrs	r1, r1, #2
 8018c3a:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8018c3e:	fb0b 0111 	mls	r1, fp, r1, r0
 8018c42:	f000 80d4 	beq.w	8018dee <uxr_read_framed_msg+0x29a>
 8018c46:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8018c4a:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 8018c4e:	f000 80cb 	beq.w	8018de8 <uxr_read_framed_msg+0x294>
 8018c52:	f806 c003 	strb.w	ip, [r6, r3]
 8018c56:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8018c58:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8018c5a:	ea80 010c 	eor.w	r1, r0, ip
 8018c5e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8018c62:	3301      	adds	r3, #1
 8018c64:	b2c9      	uxtb	r1, r1
 8018c66:	b29b      	uxth	r3, r3
 8018c68:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8018c6c:	4573      	cmp	r3, lr
 8018c6e:	8663      	strh	r3, [r4, #50]	@ 0x32
 8018c70:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8018c74:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8018c76:	f080 811d 	bcs.w	8018eb4 <uxr_read_framed_msg+0x360>
 8018c7a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8018c7e:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8018c82:	1c50      	adds	r0, r2, #1
 8018c84:	eb04 0c02 	add.w	ip, r4, r2
 8018c88:	4592      	cmp	sl, r2
 8018c8a:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8018c8e:	d1cd      	bne.n	8018c2c <uxr_read_framed_msg+0xd8>
 8018c90:	459e      	cmp	lr, r3
 8018c92:	f040 8114 	bne.w	8018ebe <uxr_read_framed_msg+0x36a>
 8018c96:	2306      	movs	r3, #6
 8018c98:	7023      	strb	r3, [r4, #0]
 8018c9a:	e76c      	b.n	8018b76 <uxr_read_framed_msg+0x22>
 8018c9c:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018ca0:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018ca4:	4298      	cmp	r0, r3
 8018ca6:	f000 80c6 	beq.w	8018e36 <uxr_read_framed_msg+0x2e2>
 8018caa:	18e2      	adds	r2, r4, r3
 8018cac:	7891      	ldrb	r1, [r2, #2]
 8018cae:	297d      	cmp	r1, #125	@ 0x7d
 8018cb0:	f000 8193 	beq.w	8018fda <uxr_read_framed_msg+0x486>
 8018cb4:	3301      	adds	r3, #1
 8018cb6:	202a      	movs	r0, #42	@ 0x2a
 8018cb8:	297e      	cmp	r1, #126	@ 0x7e
 8018cba:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018cbe:	fba5 c202 	umull	ip, r2, r5, r2
 8018cc2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018cc6:	fb00 3312 	mls	r3, r0, r2, r3
 8018cca:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018cce:	f000 81d0 	beq.w	8019072 <uxr_read_framed_msg+0x51e>
 8018cd2:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8018cd4:	2000      	movs	r0, #0
 8018cd6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8018cda:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018cdc:	8660      	strh	r0, [r4, #50]	@ 0x32
 8018cde:	b29b      	uxth	r3, r3
 8018ce0:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8018ce2:	428b      	cmp	r3, r1
 8018ce4:	8623      	strh	r3, [r4, #48]	@ 0x30
 8018ce6:	f240 80e2 	bls.w	8018eae <uxr_read_framed_msg+0x35a>
 8018cea:	7020      	strb	r0, [r4, #0]
 8018cec:	b003      	add	sp, #12
 8018cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cf2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018cf6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018cfa:	4298      	cmp	r0, r3
 8018cfc:	f000 80aa 	beq.w	8018e54 <uxr_read_framed_msg+0x300>
 8018d00:	18e2      	adds	r2, r4, r3
 8018d02:	7891      	ldrb	r1, [r2, #2]
 8018d04:	297d      	cmp	r1, #125	@ 0x7d
 8018d06:	f000 8186 	beq.w	8019016 <uxr_read_framed_msg+0x4c2>
 8018d0a:	3301      	adds	r3, #1
 8018d0c:	202a      	movs	r0, #42	@ 0x2a
 8018d0e:	297e      	cmp	r1, #126	@ 0x7e
 8018d10:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018d14:	fba5 c202 	umull	ip, r2, r5, r2
 8018d18:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018d1c:	fb00 3312 	mls	r3, r0, r2, r3
 8018d20:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018d24:	f000 8195 	beq.w	8019052 <uxr_read_framed_msg+0x4fe>
 8018d28:	2304      	movs	r3, #4
 8018d2a:	8621      	strh	r1, [r4, #48]	@ 0x30
 8018d2c:	7023      	strb	r3, [r4, #0]
 8018d2e:	e722      	b.n	8018b76 <uxr_read_framed_msg+0x22>
 8018d30:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018d34:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8018d38:	4290      	cmp	r0, r2
 8018d3a:	f000 80b4 	beq.w	8018ea6 <uxr_read_framed_msg+0x352>
 8018d3e:	18a3      	adds	r3, r4, r2
 8018d40:	7899      	ldrb	r1, [r3, #2]
 8018d42:	297d      	cmp	r1, #125	@ 0x7d
 8018d44:	f000 8107 	beq.w	8018f56 <uxr_read_framed_msg+0x402>
 8018d48:	3201      	adds	r2, #1
 8018d4a:	232a      	movs	r3, #42	@ 0x2a
 8018d4c:	297e      	cmp	r1, #126	@ 0x7e
 8018d4e:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8018d52:	fba5 c000 	umull	ip, r0, r5, r0
 8018d56:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8018d5a:	fb03 2210 	mls	r2, r3, r0, r2
 8018d5e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018d62:	f000 818a 	beq.w	801907a <uxr_read_framed_msg+0x526>
 8018d66:	7863      	ldrb	r3, [r4, #1]
 8018d68:	428b      	cmp	r3, r1
 8018d6a:	bf0c      	ite	eq
 8018d6c:	2303      	moveq	r3, #3
 8018d6e:	2300      	movne	r3, #0
 8018d70:	7023      	strb	r3, [r4, #0]
 8018d72:	e700      	b.n	8018b76 <uxr_read_framed_msg+0x22>
 8018d74:	2300      	movs	r3, #0
 8018d76:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018d7a:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8018d7e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018d82:	4299      	cmp	r1, r3
 8018d84:	d06a      	beq.n	8018e5c <uxr_read_framed_msg+0x308>
 8018d86:	18e2      	adds	r2, r4, r3
 8018d88:	7890      	ldrb	r0, [r2, #2]
 8018d8a:	287d      	cmp	r0, #125	@ 0x7d
 8018d8c:	f000 8100 	beq.w	8018f90 <uxr_read_framed_msg+0x43c>
 8018d90:	3301      	adds	r3, #1
 8018d92:	212a      	movs	r1, #42	@ 0x2a
 8018d94:	287e      	cmp	r0, #126	@ 0x7e
 8018d96:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8018d9a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018d9e:	fba5 c202 	umull	ip, r2, r5, r2
 8018da2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018da6:	fb01 3312 	mls	r3, r1, r2, r3
 8018daa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018dae:	d055      	beq.n	8018e5c <uxr_read_framed_msg+0x308>
 8018db0:	2302      	movs	r3, #2
 8018db2:	7023      	strb	r3, [r4, #0]
 8018db4:	e6df      	b.n	8018b76 <uxr_read_framed_msg+0x22>
 8018db6:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 8018dba:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8018dbe:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018dc2:	1c5a      	adds	r2, r3, #1
 8018dc4:	459c      	cmp	ip, r3
 8018dc6:	eb04 0103 	add.w	r1, r4, r3
 8018dca:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8018dce:	f43f af04 	beq.w	8018bda <uxr_read_framed_msg+0x86>
 8018dd2:	fba5 0303 	umull	r0, r3, r5, r3
 8018dd6:	7889      	ldrb	r1, [r1, #2]
 8018dd8:	089b      	lsrs	r3, r3, #2
 8018dda:	297e      	cmp	r1, #126	@ 0x7e
 8018ddc:	fb0e 2313 	mls	r3, lr, r3, r2
 8018de0:	b2db      	uxtb	r3, r3
 8018de2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018de6:	d1ec      	bne.n	8018dc2 <uxr_read_framed_msg+0x26e>
 8018de8:	2301      	movs	r3, #1
 8018dea:	7023      	strb	r3, [r4, #0]
 8018dec:	e6c3      	b.n	8018b76 <uxr_read_framed_msg+0x22>
 8018dee:	1c50      	adds	r0, r2, #1
 8018df0:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8018df4:	3202      	adds	r2, #2
 8018df6:	0841      	lsrs	r1, r0, #1
 8018df8:	fba5 c101 	umull	ip, r1, r5, r1
 8018dfc:	0889      	lsrs	r1, r1, #2
 8018dfe:	fb0b 0111 	mls	r1, fp, r1, r0
 8018e02:	1860      	adds	r0, r4, r1
 8018e04:	b2c9      	uxtb	r1, r1
 8018e06:	458a      	cmp	sl, r1
 8018e08:	f43f af42 	beq.w	8018c90 <uxr_read_framed_msg+0x13c>
 8018e0c:	0851      	lsrs	r1, r2, #1
 8018e0e:	7880      	ldrb	r0, [r0, #2]
 8018e10:	fba5 a101 	umull	sl, r1, r5, r1
 8018e14:	287e      	cmp	r0, #126	@ 0x7e
 8018e16:	f080 0c20 	eor.w	ip, r0, #32
 8018e1a:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8018e1e:	fb0b 2211 	mls	r2, fp, r1, r2
 8018e22:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018e26:	f47f af14 	bne.w	8018c52 <uxr_read_framed_msg+0xfe>
 8018e2a:	459e      	cmp	lr, r3
 8018e2c:	f43f af33 	beq.w	8018c96 <uxr_read_framed_msg+0x142>
 8018e30:	2301      	movs	r3, #1
 8018e32:	7023      	strb	r3, [r4, #0]
 8018e34:	e69f      	b.n	8018b76 <uxr_read_framed_msg+0x22>
 8018e36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018e38:	9300      	str	r3, [sp, #0]
 8018e3a:	2301      	movs	r3, #1
 8018e3c:	9301      	str	r3, [sp, #4]
 8018e3e:	464a      	mov	r2, r9
 8018e40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018e42:	4641      	mov	r1, r8
 8018e44:	4620      	mov	r0, r4
 8018e46:	f7ff fdf1 	bl	8018a2c <uxr_framing_read_transport>
 8018e4a:	2800      	cmp	r0, #0
 8018e4c:	f43f aec5 	beq.w	8018bda <uxr_read_framed_msg+0x86>
 8018e50:	7823      	ldrb	r3, [r4, #0]
 8018e52:	e690      	b.n	8018b76 <uxr_read_framed_msg+0x22>
 8018e54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018e56:	9300      	str	r3, [sp, #0]
 8018e58:	2302      	movs	r3, #2
 8018e5a:	e7ef      	b.n	8018e3c <uxr_read_framed_msg+0x2e8>
 8018e5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018e5e:	464a      	mov	r2, r9
 8018e60:	4641      	mov	r1, r8
 8018e62:	4620      	mov	r0, r4
 8018e64:	9300      	str	r3, [sp, #0]
 8018e66:	2304      	movs	r3, #4
 8018e68:	9301      	str	r3, [sp, #4]
 8018e6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018e6c:	f7ff fdde 	bl	8018a2c <uxr_framing_read_transport>
 8018e70:	2800      	cmp	r0, #0
 8018e72:	d1ed      	bne.n	8018e50 <uxr_read_framed_msg+0x2fc>
 8018e74:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8018e78:	2b7e      	cmp	r3, #126	@ 0x7e
 8018e7a:	d0e9      	beq.n	8018e50 <uxr_read_framed_msg+0x2fc>
 8018e7c:	e6ad      	b.n	8018bda <uxr_read_framed_msg+0x86>
 8018e7e:	bf00      	nop
 8018e80:	30c30c31 	.word	0x30c30c31
 8018e84:	08025034 	.word	0x08025034
 8018e88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018e8a:	9300      	str	r3, [sp, #0]
 8018e8c:	2305      	movs	r3, #5
 8018e8e:	9301      	str	r3, [sp, #4]
 8018e90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018e92:	f7ff fdcb 	bl	8018a2c <uxr_framing_read_transport>
 8018e96:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8018e9a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018e9e:	429a      	cmp	r2, r3
 8018ea0:	f43f ae9b 	beq.w	8018bda <uxr_read_framed_msg+0x86>
 8018ea4:	e664      	b.n	8018b70 <uxr_read_framed_msg+0x1c>
 8018ea6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018ea8:	9300      	str	r3, [sp, #0]
 8018eaa:	2303      	movs	r3, #3
 8018eac:	e7c6      	b.n	8018e3c <uxr_read_framed_msg+0x2e8>
 8018eae:	2305      	movs	r3, #5
 8018eb0:	7023      	strb	r3, [r4, #0]
 8018eb2:	e660      	b.n	8018b76 <uxr_read_framed_msg+0x22>
 8018eb4:	f43f aeef 	beq.w	8018c96 <uxr_read_framed_msg+0x142>
 8018eb8:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8018ebc:	d094      	beq.n	8018de8 <uxr_read_framed_msg+0x294>
 8018ebe:	ebae 0303 	sub.w	r3, lr, r3
 8018ec2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018ec4:	3302      	adds	r3, #2
 8018ec6:	9200      	str	r2, [sp, #0]
 8018ec8:	e7b8      	b.n	8018e3c <uxr_read_framed_msg+0x2e8>
 8018eca:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8018ece:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018ed0:	7013      	strb	r3, [r2, #0]
 8018ed2:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8018ed4:	b003      	add	sp, #12
 8018ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018eda:	1c59      	adds	r1, r3, #1
 8018edc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8018ee0:	084a      	lsrs	r2, r1, #1
 8018ee2:	fba5 e202 	umull	lr, r2, r5, r2
 8018ee6:	0892      	lsrs	r2, r2, #2
 8018ee8:	fb0c 1212 	mls	r2, ip, r2, r1
 8018eec:	b2d1      	uxtb	r1, r2
 8018eee:	4288      	cmp	r0, r1
 8018ef0:	d0b0      	beq.n	8018e54 <uxr_read_framed_msg+0x300>
 8018ef2:	3302      	adds	r3, #2
 8018ef4:	4422      	add	r2, r4
 8018ef6:	7891      	ldrb	r1, [r2, #2]
 8018ef8:	085a      	lsrs	r2, r3, #1
 8018efa:	fba5 0202 	umull	r0, r2, r5, r2
 8018efe:	297e      	cmp	r1, #126	@ 0x7e
 8018f00:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018f04:	fb0c 3312 	mls	r3, ip, r2, r3
 8018f08:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018f0c:	f000 80a1 	beq.w	8019052 <uxr_read_framed_msg+0x4fe>
 8018f10:	f081 0120 	eor.w	r1, r1, #32
 8018f14:	e680      	b.n	8018c18 <uxr_read_framed_msg+0xc4>
 8018f16:	f103 0c01 	add.w	ip, r3, #1
 8018f1a:	202a      	movs	r0, #42	@ 0x2a
 8018f1c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8018f20:	fba5 e202 	umull	lr, r2, r5, r2
 8018f24:	0892      	lsrs	r2, r2, #2
 8018f26:	fb00 c212 	mls	r2, r0, r2, ip
 8018f2a:	fa5f fc82 	uxtb.w	ip, r2
 8018f2e:	4561      	cmp	r1, ip
 8018f30:	d081      	beq.n	8018e36 <uxr_read_framed_msg+0x2e2>
 8018f32:	3302      	adds	r3, #2
 8018f34:	4422      	add	r2, r4
 8018f36:	0859      	lsrs	r1, r3, #1
 8018f38:	7892      	ldrb	r2, [r2, #2]
 8018f3a:	fba5 c101 	umull	ip, r1, r5, r1
 8018f3e:	2a7e      	cmp	r2, #126	@ 0x7e
 8018f40:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8018f44:	fb00 3311 	mls	r3, r0, r1, r3
 8018f48:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018f4c:	f000 8091 	beq.w	8019072 <uxr_read_framed_msg+0x51e>
 8018f50:	f082 0220 	eor.w	r2, r2, #32
 8018f54:	e636      	b.n	8018bc4 <uxr_read_framed_msg+0x70>
 8018f56:	1c51      	adds	r1, r2, #1
 8018f58:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8018f5c:	084b      	lsrs	r3, r1, #1
 8018f5e:	fba5 e303 	umull	lr, r3, r5, r3
 8018f62:	089b      	lsrs	r3, r3, #2
 8018f64:	fb0c 1313 	mls	r3, ip, r3, r1
 8018f68:	b2d9      	uxtb	r1, r3
 8018f6a:	4288      	cmp	r0, r1
 8018f6c:	d09b      	beq.n	8018ea6 <uxr_read_framed_msg+0x352>
 8018f6e:	3202      	adds	r2, #2
 8018f70:	4423      	add	r3, r4
 8018f72:	0850      	lsrs	r0, r2, #1
 8018f74:	789b      	ldrb	r3, [r3, #2]
 8018f76:	fba5 1000 	umull	r1, r0, r5, r0
 8018f7a:	2b7e      	cmp	r3, #126	@ 0x7e
 8018f7c:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8018f80:	fb0c 2210 	mls	r2, ip, r0, r2
 8018f84:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018f88:	d077      	beq.n	801907a <uxr_read_framed_msg+0x526>
 8018f8a:	f083 0120 	eor.w	r1, r3, #32
 8018f8e:	e6ea      	b.n	8018d66 <uxr_read_framed_msg+0x212>
 8018f90:	f103 0c01 	add.w	ip, r3, #1
 8018f94:	202a      	movs	r0, #42	@ 0x2a
 8018f96:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8018f9a:	fba5 e202 	umull	lr, r2, r5, r2
 8018f9e:	0892      	lsrs	r2, r2, #2
 8018fa0:	fb00 c212 	mls	r2, r0, r2, ip
 8018fa4:	fa5f fc82 	uxtb.w	ip, r2
 8018fa8:	4561      	cmp	r1, ip
 8018faa:	f43f af57 	beq.w	8018e5c <uxr_read_framed_msg+0x308>
 8018fae:	3302      	adds	r3, #2
 8018fb0:	4422      	add	r2, r4
 8018fb2:	7891      	ldrb	r1, [r2, #2]
 8018fb4:	085a      	lsrs	r2, r3, #1
 8018fb6:	fba5 c202 	umull	ip, r2, r5, r2
 8018fba:	297e      	cmp	r1, #126	@ 0x7e
 8018fbc:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8018fc0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018fc4:	fb00 3312 	mls	r3, r0, r2, r3
 8018fc8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018fcc:	f43f af46 	beq.w	8018e5c <uxr_read_framed_msg+0x308>
 8018fd0:	f081 0120 	eor.w	r1, r1, #32
 8018fd4:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8018fd8:	e6ea      	b.n	8018db0 <uxr_read_framed_msg+0x25c>
 8018fda:	1c59      	adds	r1, r3, #1
 8018fdc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8018fe0:	084a      	lsrs	r2, r1, #1
 8018fe2:	fba5 e202 	umull	lr, r2, r5, r2
 8018fe6:	0892      	lsrs	r2, r2, #2
 8018fe8:	fb0c 1212 	mls	r2, ip, r2, r1
 8018fec:	b2d1      	uxtb	r1, r2
 8018fee:	4288      	cmp	r0, r1
 8018ff0:	f43f af21 	beq.w	8018e36 <uxr_read_framed_msg+0x2e2>
 8018ff4:	3302      	adds	r3, #2
 8018ff6:	4422      	add	r2, r4
 8018ff8:	7891      	ldrb	r1, [r2, #2]
 8018ffa:	085a      	lsrs	r2, r3, #1
 8018ffc:	fba5 0202 	umull	r0, r2, r5, r2
 8019000:	297e      	cmp	r1, #126	@ 0x7e
 8019002:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019006:	fb0c 3312 	mls	r3, ip, r2, r3
 801900a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801900e:	d030      	beq.n	8019072 <uxr_read_framed_msg+0x51e>
 8019010:	f081 0120 	eor.w	r1, r1, #32
 8019014:	e65d      	b.n	8018cd2 <uxr_read_framed_msg+0x17e>
 8019016:	1c59      	adds	r1, r3, #1
 8019018:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801901c:	084a      	lsrs	r2, r1, #1
 801901e:	fba5 e202 	umull	lr, r2, r5, r2
 8019022:	0892      	lsrs	r2, r2, #2
 8019024:	fb0c 1212 	mls	r2, ip, r2, r1
 8019028:	b2d1      	uxtb	r1, r2
 801902a:	4288      	cmp	r0, r1
 801902c:	f43f af12 	beq.w	8018e54 <uxr_read_framed_msg+0x300>
 8019030:	3302      	adds	r3, #2
 8019032:	4422      	add	r2, r4
 8019034:	7891      	ldrb	r1, [r2, #2]
 8019036:	085a      	lsrs	r2, r3, #1
 8019038:	fba5 0202 	umull	r0, r2, r5, r2
 801903c:	297e      	cmp	r1, #126	@ 0x7e
 801903e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019042:	fb0c 3312 	mls	r3, ip, r2, r3
 8019046:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801904a:	d002      	beq.n	8019052 <uxr_read_framed_msg+0x4fe>
 801904c:	f081 0120 	eor.w	r1, r1, #32
 8019050:	e66a      	b.n	8018d28 <uxr_read_framed_msg+0x1d4>
 8019052:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019054:	9300      	str	r3, [sp, #0]
 8019056:	2302      	movs	r3, #2
 8019058:	9301      	str	r3, [sp, #4]
 801905a:	464a      	mov	r2, r9
 801905c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801905e:	4641      	mov	r1, r8
 8019060:	4620      	mov	r0, r4
 8019062:	f7ff fce3 	bl	8018a2c <uxr_framing_read_transport>
 8019066:	2800      	cmp	r0, #0
 8019068:	f47f aef2 	bne.w	8018e50 <uxr_read_framed_msg+0x2fc>
 801906c:	2301      	movs	r3, #1
 801906e:	7023      	strb	r3, [r4, #0]
 8019070:	e581      	b.n	8018b76 <uxr_read_framed_msg+0x22>
 8019072:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019074:	9300      	str	r3, [sp, #0]
 8019076:	2301      	movs	r3, #1
 8019078:	e7ee      	b.n	8019058 <uxr_read_framed_msg+0x504>
 801907a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801907c:	9300      	str	r3, [sp, #0]
 801907e:	2303      	movs	r3, #3
 8019080:	e7ea      	b.n	8019058 <uxr_read_framed_msg+0x504>
 8019082:	bf00      	nop

08019084 <uxr_stream_id>:
 8019084:	2901      	cmp	r1, #1
 8019086:	4684      	mov	ip, r0
 8019088:	b500      	push	{lr}
 801908a:	b083      	sub	sp, #12
 801908c:	d01f      	beq.n	80190ce <uxr_stream_id+0x4a>
 801908e:	2902      	cmp	r1, #2
 8019090:	f04f 0e00 	mov.w	lr, #0
 8019094:	d020      	beq.n	80190d8 <uxr_stream_id+0x54>
 8019096:	2300      	movs	r3, #0
 8019098:	2000      	movs	r0, #0
 801909a:	f36e 0307 	bfi	r3, lr, #0, #8
 801909e:	f36c 230f 	bfi	r3, ip, #8, #8
 80190a2:	f361 4317 	bfi	r3, r1, #16, #8
 80190a6:	f362 631f 	bfi	r3, r2, #24, #8
 80190aa:	fa5f fc83 	uxtb.w	ip, r3
 80190ae:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80190b2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80190b6:	0e1b      	lsrs	r3, r3, #24
 80190b8:	f36c 0007 	bfi	r0, ip, #0, #8
 80190bc:	f361 200f 	bfi	r0, r1, #8, #8
 80190c0:	f362 4017 	bfi	r0, r2, #16, #8
 80190c4:	f363 601f 	bfi	r0, r3, #24, #8
 80190c8:	b003      	add	sp, #12
 80190ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80190ce:	f100 0e01 	add.w	lr, r0, #1
 80190d2:	fa5f fe8e 	uxtb.w	lr, lr
 80190d6:	e7de      	b.n	8019096 <uxr_stream_id+0x12>
 80190d8:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 80190dc:	e7db      	b.n	8019096 <uxr_stream_id+0x12>
 80190de:	bf00      	nop

080190e0 <uxr_stream_id_from_raw>:
 80190e0:	b082      	sub	sp, #8
 80190e2:	b130      	cbz	r0, 80190f2 <uxr_stream_id_from_raw+0x12>
 80190e4:	0603      	lsls	r3, r0, #24
 80190e6:	d421      	bmi.n	801912c <uxr_stream_id_from_raw+0x4c>
 80190e8:	1e42      	subs	r2, r0, #1
 80190ea:	f04f 0c01 	mov.w	ip, #1
 80190ee:	b2d2      	uxtb	r2, r2
 80190f0:	e001      	b.n	80190f6 <uxr_stream_id_from_raw+0x16>
 80190f2:	4684      	mov	ip, r0
 80190f4:	4602      	mov	r2, r0
 80190f6:	2300      	movs	r3, #0
 80190f8:	f360 0307 	bfi	r3, r0, #0, #8
 80190fc:	2000      	movs	r0, #0
 80190fe:	f362 230f 	bfi	r3, r2, #8, #8
 8019102:	f36c 4317 	bfi	r3, ip, #16, #8
 8019106:	f361 631f 	bfi	r3, r1, #24, #8
 801910a:	fa5f fc83 	uxtb.w	ip, r3
 801910e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019112:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8019116:	0e1b      	lsrs	r3, r3, #24
 8019118:	f36c 0007 	bfi	r0, ip, #0, #8
 801911c:	f361 200f 	bfi	r0, r1, #8, #8
 8019120:	f362 4017 	bfi	r0, r2, #16, #8
 8019124:	f363 601f 	bfi	r0, r3, #24, #8
 8019128:	b002      	add	sp, #8
 801912a:	4770      	bx	lr
 801912c:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8019130:	f04f 0c02 	mov.w	ip, #2
 8019134:	e7df      	b.n	80190f6 <uxr_stream_id_from_raw+0x16>
 8019136:	bf00      	nop

08019138 <uxr_init_stream_storage>:
 8019138:	2300      	movs	r3, #0
 801913a:	7403      	strb	r3, [r0, #16]
 801913c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8019140:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8019144:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8019148:	4770      	bx	lr
 801914a:	bf00      	nop

0801914c <uxr_reset_stream_storage>:
 801914c:	b570      	push	{r4, r5, r6, lr}
 801914e:	7c03      	ldrb	r3, [r0, #16]
 8019150:	4604      	mov	r4, r0
 8019152:	b14b      	cbz	r3, 8019168 <uxr_reset_stream_storage+0x1c>
 8019154:	4606      	mov	r6, r0
 8019156:	2500      	movs	r5, #0
 8019158:	4630      	mov	r0, r6
 801915a:	3501      	adds	r5, #1
 801915c:	f007 f9a4 	bl	80204a8 <uxr_reset_output_best_effort_stream>
 8019160:	7c23      	ldrb	r3, [r4, #16]
 8019162:	3610      	adds	r6, #16
 8019164:	42ab      	cmp	r3, r5
 8019166:	d8f7      	bhi.n	8019158 <uxr_reset_stream_storage+0xc>
 8019168:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801916c:	b15b      	cbz	r3, 8019186 <uxr_reset_stream_storage+0x3a>
 801916e:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019172:	2500      	movs	r5, #0
 8019174:	4630      	mov	r0, r6
 8019176:	3501      	adds	r5, #1
 8019178:	f006 ff9c 	bl	80200b4 <uxr_reset_input_best_effort_stream>
 801917c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8019180:	3602      	adds	r6, #2
 8019182:	42ab      	cmp	r3, r5
 8019184:	d8f6      	bhi.n	8019174 <uxr_reset_stream_storage+0x28>
 8019186:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801918a:	b15b      	cbz	r3, 80191a4 <uxr_reset_stream_storage+0x58>
 801918c:	f104 0618 	add.w	r6, r4, #24
 8019190:	2500      	movs	r5, #0
 8019192:	4630      	mov	r0, r6
 8019194:	3501      	adds	r5, #1
 8019196:	f007 fa33 	bl	8020600 <uxr_reset_output_reliable_stream>
 801919a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801919e:	3628      	adds	r6, #40	@ 0x28
 80191a0:	42ab      	cmp	r3, r5
 80191a2:	d8f6      	bhi.n	8019192 <uxr_reset_stream_storage+0x46>
 80191a4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80191a8:	b15b      	cbz	r3, 80191c2 <uxr_reset_stream_storage+0x76>
 80191aa:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80191ae:	2500      	movs	r5, #0
 80191b0:	4630      	mov	r0, r6
 80191b2:	3501      	adds	r5, #1
 80191b4:	f006 ffea 	bl	802018c <uxr_reset_input_reliable_stream>
 80191b8:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80191bc:	3618      	adds	r6, #24
 80191be:	42ab      	cmp	r3, r5
 80191c0:	d8f6      	bhi.n	80191b0 <uxr_reset_stream_storage+0x64>
 80191c2:	bd70      	pop	{r4, r5, r6, pc}

080191c4 <uxr_add_output_best_effort_buffer>:
 80191c4:	b510      	push	{r4, lr}
 80191c6:	7c04      	ldrb	r4, [r0, #16]
 80191c8:	b082      	sub	sp, #8
 80191ca:	f104 0c01 	add.w	ip, r4, #1
 80191ce:	f880 c010 	strb.w	ip, [r0, #16]
 80191d2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80191d6:	f007 f95d 	bl	8020494 <uxr_init_output_best_effort_stream>
 80191da:	2201      	movs	r2, #1
 80191dc:	4620      	mov	r0, r4
 80191de:	4611      	mov	r1, r2
 80191e0:	b002      	add	sp, #8
 80191e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80191e6:	f7ff bf4d 	b.w	8019084 <uxr_stream_id>
 80191ea:	bf00      	nop

080191ec <uxr_add_output_reliable_buffer>:
 80191ec:	b510      	push	{r4, lr}
 80191ee:	b084      	sub	sp, #16
 80191f0:	4684      	mov	ip, r0
 80191f2:	2028      	movs	r0, #40	@ 0x28
 80191f4:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80191f8:	9400      	str	r4, [sp, #0]
 80191fa:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 80191fe:	fb00 c004 	mla	r0, r0, r4, ip
 8019202:	f104 0e01 	add.w	lr, r4, #1
 8019206:	3018      	adds	r0, #24
 8019208:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 801920c:	f007 f9c2 	bl	8020594 <uxr_init_output_reliable_stream>
 8019210:	2201      	movs	r2, #1
 8019212:	2102      	movs	r1, #2
 8019214:	4620      	mov	r0, r4
 8019216:	b004      	add	sp, #16
 8019218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801921c:	f7ff bf32 	b.w	8019084 <uxr_stream_id>

08019220 <uxr_add_input_best_effort_buffer>:
 8019220:	b510      	push	{r4, lr}
 8019222:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8019226:	b082      	sub	sp, #8
 8019228:	1c62      	adds	r2, r4, #1
 801922a:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 801922e:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8019232:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019236:	f006 ff39 	bl	80200ac <uxr_init_input_best_effort_stream>
 801923a:	2200      	movs	r2, #0
 801923c:	2101      	movs	r1, #1
 801923e:	4620      	mov	r0, r4
 8019240:	b002      	add	sp, #8
 8019242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019246:	f7ff bf1d 	b.w	8019084 <uxr_stream_id>
 801924a:	bf00      	nop

0801924c <uxr_add_input_reliable_buffer>:
 801924c:	b510      	push	{r4, lr}
 801924e:	b084      	sub	sp, #16
 8019250:	4684      	mov	ip, r0
 8019252:	2018      	movs	r0, #24
 8019254:	9c06      	ldr	r4, [sp, #24]
 8019256:	9400      	str	r4, [sp, #0]
 8019258:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 801925c:	fb00 c004 	mla	r0, r0, r4, ip
 8019260:	f104 0e01 	add.w	lr, r4, #1
 8019264:	3048      	adds	r0, #72	@ 0x48
 8019266:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801926a:	f006 ff69 	bl	8020140 <uxr_init_input_reliable_stream>
 801926e:	2200      	movs	r2, #0
 8019270:	2102      	movs	r1, #2
 8019272:	4620      	mov	r0, r4
 8019274:	b004      	add	sp, #16
 8019276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801927a:	f7ff bf03 	b.w	8019084 <uxr_stream_id>
 801927e:	bf00      	nop

08019280 <uxr_get_output_best_effort_stream>:
 8019280:	7c03      	ldrb	r3, [r0, #16]
 8019282:	428b      	cmp	r3, r1
 8019284:	bf8c      	ite	hi
 8019286:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801928a:	2000      	movls	r0, #0
 801928c:	4770      	bx	lr
 801928e:	bf00      	nop

08019290 <uxr_get_output_reliable_stream>:
 8019290:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8019294:	428b      	cmp	r3, r1
 8019296:	d904      	bls.n	80192a2 <uxr_get_output_reliable_stream+0x12>
 8019298:	2328      	movs	r3, #40	@ 0x28
 801929a:	fb03 0001 	mla	r0, r3, r1, r0
 801929e:	3018      	adds	r0, #24
 80192a0:	4770      	bx	lr
 80192a2:	2000      	movs	r0, #0
 80192a4:	4770      	bx	lr
 80192a6:	bf00      	nop

080192a8 <uxr_get_input_best_effort_stream>:
 80192a8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80192ac:	428b      	cmp	r3, r1
 80192ae:	d903      	bls.n	80192b8 <uxr_get_input_best_effort_stream+0x10>
 80192b0:	3121      	adds	r1, #33	@ 0x21
 80192b2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80192b6:	4770      	bx	lr
 80192b8:	2000      	movs	r0, #0
 80192ba:	4770      	bx	lr

080192bc <uxr_get_input_reliable_stream>:
 80192bc:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80192c0:	428b      	cmp	r3, r1
 80192c2:	d904      	bls.n	80192ce <uxr_get_input_reliable_stream+0x12>
 80192c4:	2318      	movs	r3, #24
 80192c6:	fb03 0001 	mla	r0, r3, r1, r0
 80192ca:	3048      	adds	r0, #72	@ 0x48
 80192cc:	4770      	bx	lr
 80192ce:	2000      	movs	r0, #0
 80192d0:	4770      	bx	lr
 80192d2:	bf00      	nop

080192d4 <uxr_output_streams_confirmed>:
 80192d4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80192d8:	b183      	cbz	r3, 80192fc <uxr_output_streams_confirmed+0x28>
 80192da:	b570      	push	{r4, r5, r6, lr}
 80192dc:	4606      	mov	r6, r0
 80192de:	f100 0518 	add.w	r5, r0, #24
 80192e2:	2400      	movs	r4, #0
 80192e4:	e000      	b.n	80192e8 <uxr_output_streams_confirmed+0x14>
 80192e6:	b140      	cbz	r0, 80192fa <uxr_output_streams_confirmed+0x26>
 80192e8:	4628      	mov	r0, r5
 80192ea:	3401      	adds	r4, #1
 80192ec:	f007 fbfc 	bl	8020ae8 <uxr_is_output_up_to_date>
 80192f0:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 80192f4:	3528      	adds	r5, #40	@ 0x28
 80192f6:	42a3      	cmp	r3, r4
 80192f8:	d8f5      	bhi.n	80192e6 <uxr_output_streams_confirmed+0x12>
 80192fa:	bd70      	pop	{r4, r5, r6, pc}
 80192fc:	2001      	movs	r0, #1
 80192fe:	4770      	bx	lr

08019300 <uxr_buffer_submessage_header>:
 8019300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019302:	460e      	mov	r6, r1
 8019304:	2104      	movs	r1, #4
 8019306:	4604      	mov	r4, r0
 8019308:	4615      	mov	r5, r2
 801930a:	461f      	mov	r7, r3
 801930c:	f7fa fed8 	bl	80140c0 <ucdr_align_to>
 8019310:	2301      	movs	r3, #1
 8019312:	4631      	mov	r1, r6
 8019314:	4620      	mov	r0, r4
 8019316:	ea47 0203 	orr.w	r2, r7, r3
 801931a:	7523      	strb	r3, [r4, #20]
 801931c:	462b      	mov	r3, r5
 801931e:	f000 fa29 	bl	8019774 <uxr_serialize_submessage_header>
 8019322:	4620      	mov	r0, r4
 8019324:	f7fa fee2 	bl	80140ec <ucdr_buffer_remaining>
 8019328:	42a8      	cmp	r0, r5
 801932a:	bf34      	ite	cc
 801932c:	2000      	movcc	r0, #0
 801932e:	2001      	movcs	r0, #1
 8019330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019332:	bf00      	nop

08019334 <uxr_read_submessage_header>:
 8019334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019338:	4604      	mov	r4, r0
 801933a:	460d      	mov	r5, r1
 801933c:	2104      	movs	r1, #4
 801933e:	4616      	mov	r6, r2
 8019340:	4698      	mov	r8, r3
 8019342:	f7fa febd 	bl	80140c0 <ucdr_align_to>
 8019346:	4620      	mov	r0, r4
 8019348:	f7fa fed0 	bl	80140ec <ucdr_buffer_remaining>
 801934c:	2803      	cmp	r0, #3
 801934e:	bf8c      	ite	hi
 8019350:	2701      	movhi	r7, #1
 8019352:	2700      	movls	r7, #0
 8019354:	d802      	bhi.n	801935c <uxr_read_submessage_header+0x28>
 8019356:	4638      	mov	r0, r7
 8019358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801935c:	4633      	mov	r3, r6
 801935e:	4642      	mov	r2, r8
 8019360:	4620      	mov	r0, r4
 8019362:	4629      	mov	r1, r5
 8019364:	f000 fa1a 	bl	801979c <uxr_deserialize_submessage_header>
 8019368:	f898 3000 	ldrb.w	r3, [r8]
 801936c:	4638      	mov	r0, r7
 801936e:	f003 0201 	and.w	r2, r3, #1
 8019372:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8019376:	f888 3000 	strb.w	r3, [r8]
 801937a:	7522      	strb	r2, [r4, #20]
 801937c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019380 <uxr_submessage_padding>:
 8019380:	f010 0003 	ands.w	r0, r0, #3
 8019384:	bf18      	it	ne
 8019386:	f1c0 0004 	rsbne	r0, r0, #4
 801938a:	4770      	bx	lr

0801938c <uxr_millis>:
 801938c:	b510      	push	{r4, lr}
 801938e:	b084      	sub	sp, #16
 8019390:	2001      	movs	r0, #1
 8019392:	4669      	mov	r1, sp
 8019394:	f7e8 ff84 	bl	80022a0 <clock_gettime>
 8019398:	4908      	ldr	r1, [pc, #32]	@ (80193bc <uxr_millis+0x30>)
 801939a:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 801939e:	fba0 0301 	umull	r0, r3, r0, r1
 80193a2:	1900      	adds	r0, r0, r4
 80193a4:	fb01 3102 	mla	r1, r1, r2, r3
 80193a8:	4a05      	ldr	r2, [pc, #20]	@ (80193c0 <uxr_millis+0x34>)
 80193aa:	f04f 0300 	mov.w	r3, #0
 80193ae:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80193b2:	f7e6 fffd 	bl	80003b0 <__aeabi_ldivmod>
 80193b6:	b004      	add	sp, #16
 80193b8:	bd10      	pop	{r4, pc}
 80193ba:	bf00      	nop
 80193bc:	3b9aca00 	.word	0x3b9aca00
 80193c0:	000f4240 	.word	0x000f4240

080193c4 <uxr_nanos>:
 80193c4:	b510      	push	{r4, lr}
 80193c6:	b084      	sub	sp, #16
 80193c8:	2001      	movs	r0, #1
 80193ca:	4669      	mov	r1, sp
 80193cc:	f7e8 ff68 	bl	80022a0 <clock_gettime>
 80193d0:	4a06      	ldr	r2, [pc, #24]	@ (80193ec <uxr_nanos+0x28>)
 80193d2:	9800      	ldr	r0, [sp, #0]
 80193d4:	9902      	ldr	r1, [sp, #8]
 80193d6:	fba0 0302 	umull	r0, r3, r0, r2
 80193da:	9c01      	ldr	r4, [sp, #4]
 80193dc:	1840      	adds	r0, r0, r1
 80193de:	fb02 3304 	mla	r3, r2, r4, r3
 80193e2:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80193e6:	b004      	add	sp, #16
 80193e8:	bd10      	pop	{r4, pc}
 80193ea:	bf00      	nop
 80193ec:	3b9aca00 	.word	0x3b9aca00

080193f0 <on_full_output_buffer_fragmented>:
 80193f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80193f4:	460c      	mov	r4, r1
 80193f6:	b08a      	sub	sp, #40	@ 0x28
 80193f8:	4606      	mov	r6, r0
 80193fa:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 80193fe:	f104 0008 	add.w	r0, r4, #8
 8019402:	f7ff ff45 	bl	8019290 <uxr_get_output_reliable_stream>
 8019406:	4605      	mov	r5, r0
 8019408:	f007 fb78 	bl	8020afc <get_available_free_slots>
 801940c:	b968      	cbnz	r0, 801942a <on_full_output_buffer_fragmented+0x3a>
 801940e:	4620      	mov	r0, r4
 8019410:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8019414:	4798      	blx	r3
 8019416:	b918      	cbnz	r0, 8019420 <on_full_output_buffer_fragmented+0x30>
 8019418:	2001      	movs	r0, #1
 801941a:	b00a      	add	sp, #40	@ 0x28
 801941c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019420:	4628      	mov	r0, r5
 8019422:	f007 fb6b 	bl	8020afc <get_available_free_slots>
 8019426:	2800      	cmp	r0, #0
 8019428:	d0f6      	beq.n	8019418 <on_full_output_buffer_fragmented+0x28>
 801942a:	8929      	ldrh	r1, [r5, #8]
 801942c:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8019430:	89eb      	ldrh	r3, [r5, #14]
 8019432:	7b28      	ldrb	r0, [r5, #12]
 8019434:	686f      	ldr	r7, [r5, #4]
 8019436:	1a12      	subs	r2, r2, r0
 8019438:	fbb3 f0f1 	udiv	r0, r3, r1
 801943c:	fbb7 f7f1 	udiv	r7, r7, r1
 8019440:	fb01 3110 	mls	r1, r1, r0, r3
 8019444:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8019448:	b289      	uxth	r1, r1
 801944a:	fb07 f101 	mul.w	r1, r7, r1
 801944e:	3f04      	subs	r7, #4
 8019450:	443a      	add	r2, r7
 8019452:	3104      	adds	r1, #4
 8019454:	fa1f f882 	uxth.w	r8, r2
 8019458:	463a      	mov	r2, r7
 801945a:	eba3 0308 	sub.w	r3, r3, r8
 801945e:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8019462:	682b      	ldr	r3, [r5, #0]
 8019464:	4419      	add	r1, r3
 8019466:	2300      	movs	r3, #0
 8019468:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801946c:	9000      	str	r0, [sp, #0]
 801946e:	a802      	add	r0, sp, #8
 8019470:	f7fa fdf8 	bl	8014064 <ucdr_init_buffer_origin_offset>
 8019474:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8019478:	f102 0308 	add.w	r3, r2, #8
 801947c:	42bb      	cmp	r3, r7
 801947e:	d927      	bls.n	80194d0 <on_full_output_buffer_fragmented+0xe0>
 8019480:	4642      	mov	r2, r8
 8019482:	2300      	movs	r3, #0
 8019484:	210d      	movs	r1, #13
 8019486:	a802      	add	r0, sp, #8
 8019488:	f7ff ff3a 	bl	8019300 <uxr_buffer_submessage_header>
 801948c:	8929      	ldrh	r1, [r5, #8]
 801948e:	89eb      	ldrh	r3, [r5, #14]
 8019490:	686a      	ldr	r2, [r5, #4]
 8019492:	fbb3 f0f1 	udiv	r0, r3, r1
 8019496:	fbb2 f2f1 	udiv	r2, r2, r1
 801949a:	fb01 3310 	mls	r3, r1, r0, r3
 801949e:	b29b      	uxth	r3, r3
 80194a0:	fb02 f303 	mul.w	r3, r2, r3
 80194a4:	682a      	ldr	r2, [r5, #0]
 80194a6:	50d7      	str	r7, [r2, r3]
 80194a8:	2101      	movs	r1, #1
 80194aa:	89e8      	ldrh	r0, [r5, #14]
 80194ac:	f007 fc78 	bl	8020da0 <uxr_seq_num_add>
 80194b0:	9904      	ldr	r1, [sp, #16]
 80194b2:	9a03      	ldr	r2, [sp, #12]
 80194b4:	81e8      	strh	r0, [r5, #14]
 80194b6:	4630      	mov	r0, r6
 80194b8:	1a52      	subs	r2, r2, r1
 80194ba:	f7fa fde5 	bl	8014088 <ucdr_init_buffer>
 80194be:	4630      	mov	r0, r6
 80194c0:	4622      	mov	r2, r4
 80194c2:	490f      	ldr	r1, [pc, #60]	@ (8019500 <on_full_output_buffer_fragmented+0x110>)
 80194c4:	f7fa fdb4 	bl	8014030 <ucdr_set_on_full_buffer_callback>
 80194c8:	2000      	movs	r0, #0
 80194ca:	b00a      	add	sp, #40	@ 0x28
 80194cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194d0:	b292      	uxth	r2, r2
 80194d2:	2302      	movs	r3, #2
 80194d4:	210d      	movs	r1, #13
 80194d6:	a802      	add	r0, sp, #8
 80194d8:	f7ff ff12 	bl	8019300 <uxr_buffer_submessage_header>
 80194dc:	8928      	ldrh	r0, [r5, #8]
 80194de:	89eb      	ldrh	r3, [r5, #14]
 80194e0:	6869      	ldr	r1, [r5, #4]
 80194e2:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80194e6:	fbb3 f7f0 	udiv	r7, r3, r0
 80194ea:	fbb1 f1f0 	udiv	r1, r1, r0
 80194ee:	fb00 3317 	mls	r3, r0, r7, r3
 80194f2:	3208      	adds	r2, #8
 80194f4:	b29b      	uxth	r3, r3
 80194f6:	fb01 f303 	mul.w	r3, r1, r3
 80194fa:	6829      	ldr	r1, [r5, #0]
 80194fc:	50ca      	str	r2, [r1, r3]
 80194fe:	e7d3      	b.n	80194a8 <on_full_output_buffer_fragmented+0xb8>
 8019500:	080193f1 	.word	0x080193f1

08019504 <uxr_prepare_output_stream>:
 8019504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019506:	b087      	sub	sp, #28
 8019508:	2707      	movs	r7, #7
 801950a:	2500      	movs	r5, #0
 801950c:	461c      	mov	r4, r3
 801950e:	4606      	mov	r6, r0
 8019510:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8019514:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019516:	e9cd 7500 	strd	r7, r5, [sp]
 801951a:	3204      	adds	r2, #4
 801951c:	f7fe ffc8 	bl	80184b0 <uxr_prepare_stream_to_write_submessage>
 8019520:	f080 0201 	eor.w	r2, r0, #1
 8019524:	b2d2      	uxtb	r2, r2
 8019526:	75a2      	strb	r2, [r4, #22]
 8019528:	b112      	cbz	r2, 8019530 <uxr_prepare_output_stream+0x2c>
 801952a:	4628      	mov	r0, r5
 801952c:	b007      	add	sp, #28
 801952e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019530:	aa05      	add	r2, sp, #20
 8019532:	9902      	ldr	r1, [sp, #8]
 8019534:	4630      	mov	r0, r6
 8019536:	f7ff f8f7 	bl	8018728 <uxr_init_base_object_request>
 801953a:	a905      	add	r1, sp, #20
 801953c:	4605      	mov	r5, r0
 801953e:	4620      	mov	r0, r4
 8019540:	f001 f8d2 	bl	801a6e8 <uxr_serialize_WRITE_DATA_Payload_Data>
 8019544:	69a6      	ldr	r6, [r4, #24]
 8019546:	69e7      	ldr	r7, [r4, #28]
 8019548:	4620      	mov	r0, r4
 801954a:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801954e:	1a52      	subs	r2, r2, r1
 8019550:	f7fa fd9a 	bl	8014088 <ucdr_init_buffer>
 8019554:	4620      	mov	r0, r4
 8019556:	463a      	mov	r2, r7
 8019558:	4631      	mov	r1, r6
 801955a:	f7fa fd69 	bl	8014030 <ucdr_set_on_full_buffer_callback>
 801955e:	4628      	mov	r0, r5
 8019560:	b007      	add	sp, #28
 8019562:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019564 <uxr_prepare_output_stream_fragmented>:
 8019564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019568:	b091      	sub	sp, #68	@ 0x44
 801956a:	4605      	mov	r5, r0
 801956c:	3008      	adds	r0, #8
 801956e:	461e      	mov	r6, r3
 8019570:	9105      	str	r1, [sp, #20]
 8019572:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8019576:	9204      	str	r2, [sp, #16]
 8019578:	f7ff fe8a 	bl	8019290 <uxr_get_output_reliable_stream>
 801957c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8019580:	2b01      	cmp	r3, #1
 8019582:	f000 8093 	beq.w	80196ac <uxr_prepare_output_stream_fragmented+0x148>
 8019586:	4604      	mov	r4, r0
 8019588:	2800      	cmp	r0, #0
 801958a:	f000 808f 	beq.w	80196ac <uxr_prepare_output_stream_fragmented+0x148>
 801958e:	f007 fab5 	bl	8020afc <get_available_free_slots>
 8019592:	2800      	cmp	r0, #0
 8019594:	f000 8085 	beq.w	80196a2 <uxr_prepare_output_stream_fragmented+0x13e>
 8019598:	8923      	ldrh	r3, [r4, #8]
 801959a:	89e7      	ldrh	r7, [r4, #14]
 801959c:	6862      	ldr	r2, [r4, #4]
 801959e:	fbb7 f9f3 	udiv	r9, r7, r3
 80195a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80195a6:	fb03 7919 	mls	r9, r3, r9, r7
 80195aa:	6823      	ldr	r3, [r4, #0]
 80195ac:	f1a2 0b04 	sub.w	fp, r2, #4
 80195b0:	9203      	str	r2, [sp, #12]
 80195b2:	fa1f f989 	uxth.w	r9, r9
 80195b6:	fb02 f909 	mul.w	r9, r2, r9
 80195ba:	f109 0904 	add.w	r9, r9, #4
 80195be:	4499      	add	r9, r3
 80195c0:	7b23      	ldrb	r3, [r4, #12]
 80195c2:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80195c6:	4543      	cmp	r3, r8
 80195c8:	d37c      	bcc.n	80196c4 <uxr_prepare_output_stream_fragmented+0x160>
 80195ca:	f1ab 0a04 	sub.w	sl, fp, #4
 80195ce:	465a      	mov	r2, fp
 80195d0:	4649      	mov	r1, r9
 80195d2:	a808      	add	r0, sp, #32
 80195d4:	ebaa 0a03 	sub.w	sl, sl, r3
 80195d8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80195da:	f8cd 8000 	str.w	r8, [sp]
 80195de:	3308      	adds	r3, #8
 80195e0:	fa1f fa8a 	uxth.w	sl, sl
 80195e4:	9302      	str	r3, [sp, #8]
 80195e6:	2300      	movs	r3, #0
 80195e8:	f7fa fd3c 	bl	8014064 <ucdr_init_buffer_origin_offset>
 80195ec:	9b02      	ldr	r3, [sp, #8]
 80195ee:	4652      	mov	r2, sl
 80195f0:	210d      	movs	r1, #13
 80195f2:	455b      	cmp	r3, fp
 80195f4:	bf34      	ite	cc
 80195f6:	2302      	movcc	r3, #2
 80195f8:	2300      	movcs	r3, #0
 80195fa:	a808      	add	r0, sp, #32
 80195fc:	f7ff fe80 	bl	8019300 <uxr_buffer_submessage_header>
 8019600:	8921      	ldrh	r1, [r4, #8]
 8019602:	6863      	ldr	r3, [r4, #4]
 8019604:	4638      	mov	r0, r7
 8019606:	fbb7 f2f1 	udiv	r2, r7, r1
 801960a:	fbb3 f3f1 	udiv	r3, r3, r1
 801960e:	fb01 7212 	mls	r2, r1, r2, r7
 8019612:	2101      	movs	r1, #1
 8019614:	b292      	uxth	r2, r2
 8019616:	fb02 f303 	mul.w	r3, r2, r3
 801961a:	6822      	ldr	r2, [r4, #0]
 801961c:	f842 b003 	str.w	fp, [r2, r3]
 8019620:	f007 fbbe 	bl	8020da0 <uxr_seq_num_add>
 8019624:	9b03      	ldr	r3, [sp, #12]
 8019626:	f108 0104 	add.w	r1, r8, #4
 801962a:	4607      	mov	r7, r0
 801962c:	f1a3 0208 	sub.w	r2, r3, #8
 8019630:	4630      	mov	r0, r6
 8019632:	4449      	add	r1, r9
 8019634:	eba2 0208 	sub.w	r2, r2, r8
 8019638:	f7fa fd26 	bl	8014088 <ucdr_init_buffer>
 801963c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801963e:	2107      	movs	r1, #7
 8019640:	81e7      	strh	r7, [r4, #14]
 8019642:	1d1a      	adds	r2, r3, #4
 8019644:	2300      	movs	r3, #0
 8019646:	4630      	mov	r0, r6
 8019648:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 801964c:	bf28      	it	cs
 801964e:	461a      	movcs	r2, r3
 8019650:	b292      	uxth	r2, r2
 8019652:	f7ff fe55 	bl	8019300 <uxr_buffer_submessage_header>
 8019656:	aa07      	add	r2, sp, #28
 8019658:	9904      	ldr	r1, [sp, #16]
 801965a:	4628      	mov	r0, r5
 801965c:	f7ff f864 	bl	8018728 <uxr_init_base_object_request>
 8019660:	4604      	mov	r4, r0
 8019662:	b320      	cbz	r0, 80196ae <uxr_prepare_output_stream_fragmented+0x14a>
 8019664:	a907      	add	r1, sp, #28
 8019666:	4630      	mov	r0, r6
 8019668:	f001 f83e 	bl	801a6e8 <uxr_serialize_WRITE_DATA_Payload_Data>
 801966c:	4630      	mov	r0, r6
 801966e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8019672:	1a52      	subs	r2, r2, r1
 8019674:	f7fa fd08 	bl	8014088 <ucdr_init_buffer>
 8019678:	9b05      	ldr	r3, [sp, #20]
 801967a:	9a02      	ldr	r2, [sp, #8]
 801967c:	4630      	mov	r0, r6
 801967e:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8019682:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8019684:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 8019688:	462a      	mov	r2, r5
 801968a:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 801968e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8019690:	4918      	ldr	r1, [pc, #96]	@ (80196f4 <uxr_prepare_output_stream_fragmented+0x190>)
 8019692:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8019696:	f7fa fccb 	bl	8014030 <ucdr_set_on_full_buffer_callback>
 801969a:	4620      	mov	r0, r4
 801969c:	b011      	add	sp, #68	@ 0x44
 801969e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196a2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80196a4:	4628      	mov	r0, r5
 80196a6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80196a8:	4798      	blx	r3
 80196aa:	b920      	cbnz	r0, 80196b6 <uxr_prepare_output_stream_fragmented+0x152>
 80196ac:	2400      	movs	r4, #0
 80196ae:	4620      	mov	r0, r4
 80196b0:	b011      	add	sp, #68	@ 0x44
 80196b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196b6:	4620      	mov	r0, r4
 80196b8:	f007 fa20 	bl	8020afc <get_available_free_slots>
 80196bc:	2800      	cmp	r0, #0
 80196be:	f47f af6b 	bne.w	8019598 <uxr_prepare_output_stream_fragmented+0x34>
 80196c2:	e7f3      	b.n	80196ac <uxr_prepare_output_stream_fragmented+0x148>
 80196c4:	4638      	mov	r0, r7
 80196c6:	2101      	movs	r1, #1
 80196c8:	f007 fb6a 	bl	8020da0 <uxr_seq_num_add>
 80196cc:	8922      	ldrh	r2, [r4, #8]
 80196ce:	6863      	ldr	r3, [r4, #4]
 80196d0:	4607      	mov	r7, r0
 80196d2:	fbb3 f9f2 	udiv	r9, r3, r2
 80196d6:	fbb0 f3f2 	udiv	r3, r0, r2
 80196da:	fb02 0313 	mls	r3, r2, r3, r0
 80196de:	b29b      	uxth	r3, r3
 80196e0:	fb03 f909 	mul.w	r9, r3, r9
 80196e4:	6823      	ldr	r3, [r4, #0]
 80196e6:	f109 0904 	add.w	r9, r9, #4
 80196ea:	4499      	add	r9, r3
 80196ec:	7b23      	ldrb	r3, [r4, #12]
 80196ee:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80196f2:	e76a      	b.n	80195ca <uxr_prepare_output_stream_fragmented+0x66>
 80196f4:	080193f1 	.word	0x080193f1

080196f8 <uxr_serialize_message_header>:
 80196f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80196fa:	4616      	mov	r6, r2
 80196fc:	b083      	sub	sp, #12
 80196fe:	4604      	mov	r4, r0
 8019700:	460d      	mov	r5, r1
 8019702:	9301      	str	r3, [sp, #4]
 8019704:	9f08      	ldr	r7, [sp, #32]
 8019706:	f7f9 fa55 	bl	8012bb4 <ucdr_serialize_uint8_t>
 801970a:	4631      	mov	r1, r6
 801970c:	4620      	mov	r0, r4
 801970e:	f7f9 fa51 	bl	8012bb4 <ucdr_serialize_uint8_t>
 8019712:	9a01      	ldr	r2, [sp, #4]
 8019714:	2101      	movs	r1, #1
 8019716:	4620      	mov	r0, r4
 8019718:	f7f9 faf8 	bl	8012d0c <ucdr_serialize_endian_uint16_t>
 801971c:	062b      	lsls	r3, r5, #24
 801971e:	d501      	bpl.n	8019724 <uxr_serialize_message_header+0x2c>
 8019720:	b003      	add	sp, #12
 8019722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019724:	2204      	movs	r2, #4
 8019726:	4639      	mov	r1, r7
 8019728:	4620      	mov	r0, r4
 801972a:	b003      	add	sp, #12
 801972c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019730:	f006 bbd8 	b.w	801fee4 <ucdr_serialize_array_uint8_t>

08019734 <uxr_deserialize_message_header>:
 8019734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019736:	4616      	mov	r6, r2
 8019738:	b083      	sub	sp, #12
 801973a:	4604      	mov	r4, r0
 801973c:	460d      	mov	r5, r1
 801973e:	9301      	str	r3, [sp, #4]
 8019740:	9f08      	ldr	r7, [sp, #32]
 8019742:	f7f9 fa4d 	bl	8012be0 <ucdr_deserialize_uint8_t>
 8019746:	4631      	mov	r1, r6
 8019748:	4620      	mov	r0, r4
 801974a:	f7f9 fa49 	bl	8012be0 <ucdr_deserialize_uint8_t>
 801974e:	9a01      	ldr	r2, [sp, #4]
 8019750:	2101      	movs	r1, #1
 8019752:	4620      	mov	r0, r4
 8019754:	f7f9 fbce 	bl	8012ef4 <ucdr_deserialize_endian_uint16_t>
 8019758:	f995 3000 	ldrsb.w	r3, [r5]
 801975c:	2b00      	cmp	r3, #0
 801975e:	da01      	bge.n	8019764 <uxr_deserialize_message_header+0x30>
 8019760:	b003      	add	sp, #12
 8019762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019764:	2204      	movs	r2, #4
 8019766:	4639      	mov	r1, r7
 8019768:	4620      	mov	r0, r4
 801976a:	b003      	add	sp, #12
 801976c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019770:	f006 bc1c 	b.w	801ffac <ucdr_deserialize_array_uint8_t>

08019774 <uxr_serialize_submessage_header>:
 8019774:	b530      	push	{r4, r5, lr}
 8019776:	4615      	mov	r5, r2
 8019778:	b083      	sub	sp, #12
 801977a:	4604      	mov	r4, r0
 801977c:	9301      	str	r3, [sp, #4]
 801977e:	f7f9 fa19 	bl	8012bb4 <ucdr_serialize_uint8_t>
 8019782:	4629      	mov	r1, r5
 8019784:	4620      	mov	r0, r4
 8019786:	f7f9 fa15 	bl	8012bb4 <ucdr_serialize_uint8_t>
 801978a:	9a01      	ldr	r2, [sp, #4]
 801978c:	2101      	movs	r1, #1
 801978e:	4620      	mov	r0, r4
 8019790:	b003      	add	sp, #12
 8019792:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019796:	f7f9 bab9 	b.w	8012d0c <ucdr_serialize_endian_uint16_t>
 801979a:	bf00      	nop

0801979c <uxr_deserialize_submessage_header>:
 801979c:	b530      	push	{r4, r5, lr}
 801979e:	4615      	mov	r5, r2
 80197a0:	b083      	sub	sp, #12
 80197a2:	4604      	mov	r4, r0
 80197a4:	9301      	str	r3, [sp, #4]
 80197a6:	f7f9 fa1b 	bl	8012be0 <ucdr_deserialize_uint8_t>
 80197aa:	4629      	mov	r1, r5
 80197ac:	4620      	mov	r0, r4
 80197ae:	f7f9 fa17 	bl	8012be0 <ucdr_deserialize_uint8_t>
 80197b2:	9a01      	ldr	r2, [sp, #4]
 80197b4:	2101      	movs	r1, #1
 80197b6:	4620      	mov	r0, r4
 80197b8:	b003      	add	sp, #12
 80197ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80197be:	f7f9 bb99 	b.w	8012ef4 <ucdr_deserialize_endian_uint16_t>
 80197c2:	bf00      	nop

080197c4 <uxr_serialize_CLIENT_Representation>:
 80197c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80197c8:	2204      	movs	r2, #4
 80197ca:	460e      	mov	r6, r1
 80197cc:	4605      	mov	r5, r0
 80197ce:	f006 fb89 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 80197d2:	4607      	mov	r7, r0
 80197d4:	2202      	movs	r2, #2
 80197d6:	1d31      	adds	r1, r6, #4
 80197d8:	4628      	mov	r0, r5
 80197da:	f006 fb83 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 80197de:	4038      	ands	r0, r7
 80197e0:	2202      	movs	r2, #2
 80197e2:	1db1      	adds	r1, r6, #6
 80197e4:	b2c7      	uxtb	r7, r0
 80197e6:	4628      	mov	r0, r5
 80197e8:	f006 fb7c 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 80197ec:	2204      	movs	r2, #4
 80197ee:	4007      	ands	r7, r0
 80197f0:	f106 0108 	add.w	r1, r6, #8
 80197f4:	4628      	mov	r0, r5
 80197f6:	f006 fb75 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 80197fa:	4007      	ands	r7, r0
 80197fc:	7b31      	ldrb	r1, [r6, #12]
 80197fe:	4628      	mov	r0, r5
 8019800:	f7f9 f9d8 	bl	8012bb4 <ucdr_serialize_uint8_t>
 8019804:	7b71      	ldrb	r1, [r6, #13]
 8019806:	4007      	ands	r7, r0
 8019808:	4628      	mov	r0, r5
 801980a:	f7f9 f9a5 	bl	8012b58 <ucdr_serialize_bool>
 801980e:	7b73      	ldrb	r3, [r6, #13]
 8019810:	ea07 0800 	and.w	r8, r7, r0
 8019814:	b93b      	cbnz	r3, 8019826 <uxr_serialize_CLIENT_Representation+0x62>
 8019816:	8bb1      	ldrh	r1, [r6, #28]
 8019818:	4628      	mov	r0, r5
 801981a:	f7f9 f9f7 	bl	8012c0c <ucdr_serialize_uint16_t>
 801981e:	ea08 0000 	and.w	r0, r8, r0
 8019822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019826:	6931      	ldr	r1, [r6, #16]
 8019828:	4628      	mov	r0, r5
 801982a:	f7f9 fbd9 	bl	8012fe0 <ucdr_serialize_uint32_t>
 801982e:	6933      	ldr	r3, [r6, #16]
 8019830:	b1e3      	cbz	r3, 801986c <uxr_serialize_CLIENT_Representation+0xa8>
 8019832:	b1c0      	cbz	r0, 8019866 <uxr_serialize_CLIENT_Representation+0xa2>
 8019834:	4637      	mov	r7, r6
 8019836:	f04f 0900 	mov.w	r9, #0
 801983a:	e000      	b.n	801983e <uxr_serialize_CLIENT_Representation+0x7a>
 801983c:	b19c      	cbz	r4, 8019866 <uxr_serialize_CLIENT_Representation+0xa2>
 801983e:	6979      	ldr	r1, [r7, #20]
 8019840:	4628      	mov	r0, r5
 8019842:	f006 fc1b 	bl	802007c <ucdr_serialize_string>
 8019846:	69b9      	ldr	r1, [r7, #24]
 8019848:	4604      	mov	r4, r0
 801984a:	4628      	mov	r0, r5
 801984c:	f006 fc16 	bl	802007c <ucdr_serialize_string>
 8019850:	f109 0901 	add.w	r9, r9, #1
 8019854:	6933      	ldr	r3, [r6, #16]
 8019856:	4004      	ands	r4, r0
 8019858:	3708      	adds	r7, #8
 801985a:	4599      	cmp	r9, r3
 801985c:	b2e4      	uxtb	r4, r4
 801985e:	d3ed      	bcc.n	801983c <uxr_serialize_CLIENT_Representation+0x78>
 8019860:	ea08 0804 	and.w	r8, r8, r4
 8019864:	e7d7      	b.n	8019816 <uxr_serialize_CLIENT_Representation+0x52>
 8019866:	f04f 0800 	mov.w	r8, #0
 801986a:	e7d4      	b.n	8019816 <uxr_serialize_CLIENT_Representation+0x52>
 801986c:	ea08 0800 	and.w	r8, r8, r0
 8019870:	e7d1      	b.n	8019816 <uxr_serialize_CLIENT_Representation+0x52>
 8019872:	bf00      	nop

08019874 <uxr_deserialize_CLIENT_Representation>:
 8019874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019878:	2204      	movs	r2, #4
 801987a:	460c      	mov	r4, r1
 801987c:	4605      	mov	r5, r0
 801987e:	f006 fb95 	bl	801ffac <ucdr_deserialize_array_uint8_t>
 8019882:	4607      	mov	r7, r0
 8019884:	2202      	movs	r2, #2
 8019886:	1d21      	adds	r1, r4, #4
 8019888:	4628      	mov	r0, r5
 801988a:	f006 fb8f 	bl	801ffac <ucdr_deserialize_array_uint8_t>
 801988e:	4038      	ands	r0, r7
 8019890:	2202      	movs	r2, #2
 8019892:	1da1      	adds	r1, r4, #6
 8019894:	b2c6      	uxtb	r6, r0
 8019896:	4628      	mov	r0, r5
 8019898:	f006 fb88 	bl	801ffac <ucdr_deserialize_array_uint8_t>
 801989c:	2204      	movs	r2, #4
 801989e:	4006      	ands	r6, r0
 80198a0:	f104 0108 	add.w	r1, r4, #8
 80198a4:	4628      	mov	r0, r5
 80198a6:	f006 fb81 	bl	801ffac <ucdr_deserialize_array_uint8_t>
 80198aa:	4006      	ands	r6, r0
 80198ac:	f104 010c 	add.w	r1, r4, #12
 80198b0:	4628      	mov	r0, r5
 80198b2:	f7f9 f995 	bl	8012be0 <ucdr_deserialize_uint8_t>
 80198b6:	f104 010d 	add.w	r1, r4, #13
 80198ba:	ea06 0700 	and.w	r7, r6, r0
 80198be:	4628      	mov	r0, r5
 80198c0:	f7f9 f960 	bl	8012b84 <ucdr_deserialize_bool>
 80198c4:	7b63      	ldrb	r3, [r4, #13]
 80198c6:	4007      	ands	r7, r0
 80198c8:	b93b      	cbnz	r3, 80198da <uxr_deserialize_CLIENT_Representation+0x66>
 80198ca:	f104 011c 	add.w	r1, r4, #28
 80198ce:	4628      	mov	r0, r5
 80198d0:	f7f9 fa9c 	bl	8012e0c <ucdr_deserialize_uint16_t>
 80198d4:	4038      	ands	r0, r7
 80198d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80198da:	f104 0110 	add.w	r1, r4, #16
 80198de:	4628      	mov	r0, r5
 80198e0:	f7f9 fcae 	bl	8013240 <ucdr_deserialize_uint32_t>
 80198e4:	6923      	ldr	r3, [r4, #16]
 80198e6:	2b01      	cmp	r3, #1
 80198e8:	d903      	bls.n	80198f2 <uxr_deserialize_CLIENT_Representation+0x7e>
 80198ea:	2301      	movs	r3, #1
 80198ec:	2700      	movs	r7, #0
 80198ee:	75ab      	strb	r3, [r5, #22]
 80198f0:	e7eb      	b.n	80198ca <uxr_deserialize_CLIENT_Representation+0x56>
 80198f2:	b30b      	cbz	r3, 8019938 <uxr_deserialize_CLIENT_Representation+0xc4>
 80198f4:	b1f0      	cbz	r0, 8019934 <uxr_deserialize_CLIENT_Representation+0xc0>
 80198f6:	46a0      	mov	r8, r4
 80198f8:	f04f 0900 	mov.w	r9, #0
 80198fc:	e000      	b.n	8019900 <uxr_deserialize_CLIENT_Representation+0x8c>
 80198fe:	b1ce      	cbz	r6, 8019934 <uxr_deserialize_CLIENT_Representation+0xc0>
 8019900:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8019904:	f108 0808 	add.w	r8, r8, #8
 8019908:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801990c:	4628      	mov	r0, r5
 801990e:	f006 fbc5 	bl	802009c <ucdr_deserialize_string>
 8019912:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8019916:	4606      	mov	r6, r0
 8019918:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801991c:	4628      	mov	r0, r5
 801991e:	f109 0901 	add.w	r9, r9, #1
 8019922:	f006 fbbb 	bl	802009c <ucdr_deserialize_string>
 8019926:	6923      	ldr	r3, [r4, #16]
 8019928:	4006      	ands	r6, r0
 801992a:	4599      	cmp	r9, r3
 801992c:	b2f6      	uxtb	r6, r6
 801992e:	d3e6      	bcc.n	80198fe <uxr_deserialize_CLIENT_Representation+0x8a>
 8019930:	4037      	ands	r7, r6
 8019932:	e7ca      	b.n	80198ca <uxr_deserialize_CLIENT_Representation+0x56>
 8019934:	2700      	movs	r7, #0
 8019936:	e7c8      	b.n	80198ca <uxr_deserialize_CLIENT_Representation+0x56>
 8019938:	4007      	ands	r7, r0
 801993a:	e7c6      	b.n	80198ca <uxr_deserialize_CLIENT_Representation+0x56>

0801993c <uxr_serialize_AGENT_Representation>:
 801993c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019940:	2204      	movs	r2, #4
 8019942:	460f      	mov	r7, r1
 8019944:	4605      	mov	r5, r0
 8019946:	f006 facd 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 801994a:	4604      	mov	r4, r0
 801994c:	2202      	movs	r2, #2
 801994e:	1d39      	adds	r1, r7, #4
 8019950:	4628      	mov	r0, r5
 8019952:	f006 fac7 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 8019956:	4020      	ands	r0, r4
 8019958:	2202      	movs	r2, #2
 801995a:	1db9      	adds	r1, r7, #6
 801995c:	b2c4      	uxtb	r4, r0
 801995e:	4628      	mov	r0, r5
 8019960:	f006 fac0 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 8019964:	7a39      	ldrb	r1, [r7, #8]
 8019966:	4004      	ands	r4, r0
 8019968:	4628      	mov	r0, r5
 801996a:	f7f9 f8f5 	bl	8012b58 <ucdr_serialize_bool>
 801996e:	7a3b      	ldrb	r3, [r7, #8]
 8019970:	ea00 0804 	and.w	r8, r0, r4
 8019974:	b913      	cbnz	r3, 801997c <uxr_serialize_AGENT_Representation+0x40>
 8019976:	4640      	mov	r0, r8
 8019978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801997c:	68f9      	ldr	r1, [r7, #12]
 801997e:	4628      	mov	r0, r5
 8019980:	f7f9 fb2e 	bl	8012fe0 <ucdr_serialize_uint32_t>
 8019984:	68fb      	ldr	r3, [r7, #12]
 8019986:	b303      	cbz	r3, 80199ca <uxr_serialize_AGENT_Representation+0x8e>
 8019988:	b1d0      	cbz	r0, 80199c0 <uxr_serialize_AGENT_Representation+0x84>
 801998a:	463e      	mov	r6, r7
 801998c:	f04f 0900 	mov.w	r9, #0
 8019990:	e000      	b.n	8019994 <uxr_serialize_AGENT_Representation+0x58>
 8019992:	b1ac      	cbz	r4, 80199c0 <uxr_serialize_AGENT_Representation+0x84>
 8019994:	6931      	ldr	r1, [r6, #16]
 8019996:	4628      	mov	r0, r5
 8019998:	f006 fb70 	bl	802007c <ucdr_serialize_string>
 801999c:	6971      	ldr	r1, [r6, #20]
 801999e:	4604      	mov	r4, r0
 80199a0:	4628      	mov	r0, r5
 80199a2:	f006 fb6b 	bl	802007c <ucdr_serialize_string>
 80199a6:	f109 0901 	add.w	r9, r9, #1
 80199aa:	68fb      	ldr	r3, [r7, #12]
 80199ac:	4004      	ands	r4, r0
 80199ae:	3608      	adds	r6, #8
 80199b0:	4599      	cmp	r9, r3
 80199b2:	b2e4      	uxtb	r4, r4
 80199b4:	d3ed      	bcc.n	8019992 <uxr_serialize_AGENT_Representation+0x56>
 80199b6:	ea08 0804 	and.w	r8, r8, r4
 80199ba:	4640      	mov	r0, r8
 80199bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80199c0:	f04f 0800 	mov.w	r8, #0
 80199c4:	4640      	mov	r0, r8
 80199c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80199ca:	ea08 0800 	and.w	r8, r8, r0
 80199ce:	e7d2      	b.n	8019976 <uxr_serialize_AGENT_Representation+0x3a>

080199d0 <uxr_serialize_DATAWRITER_Representation>:
 80199d0:	b570      	push	{r4, r5, r6, lr}
 80199d2:	460d      	mov	r5, r1
 80199d4:	7809      	ldrb	r1, [r1, #0]
 80199d6:	4606      	mov	r6, r0
 80199d8:	f7f9 f8ec 	bl	8012bb4 <ucdr_serialize_uint8_t>
 80199dc:	4604      	mov	r4, r0
 80199de:	b130      	cbz	r0, 80199ee <uxr_serialize_DATAWRITER_Representation+0x1e>
 80199e0:	782b      	ldrb	r3, [r5, #0]
 80199e2:	2b02      	cmp	r3, #2
 80199e4:	d00c      	beq.n	8019a00 <uxr_serialize_DATAWRITER_Representation+0x30>
 80199e6:	2b03      	cmp	r3, #3
 80199e8:	d010      	beq.n	8019a0c <uxr_serialize_DATAWRITER_Representation+0x3c>
 80199ea:	2b01      	cmp	r3, #1
 80199ec:	d008      	beq.n	8019a00 <uxr_serialize_DATAWRITER_Representation+0x30>
 80199ee:	2202      	movs	r2, #2
 80199f0:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80199f4:	4630      	mov	r0, r6
 80199f6:	f006 fa75 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 80199fa:	4020      	ands	r0, r4
 80199fc:	b2c0      	uxtb	r0, r0
 80199fe:	bd70      	pop	{r4, r5, r6, pc}
 8019a00:	6869      	ldr	r1, [r5, #4]
 8019a02:	4630      	mov	r0, r6
 8019a04:	f006 fb3a 	bl	802007c <ucdr_serialize_string>
 8019a08:	4604      	mov	r4, r0
 8019a0a:	e7f0      	b.n	80199ee <uxr_serialize_DATAWRITER_Representation+0x1e>
 8019a0c:	4629      	mov	r1, r5
 8019a0e:	4630      	mov	r0, r6
 8019a10:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8019a14:	3104      	adds	r1, #4
 8019a16:	f7fd f947 	bl	8016ca8 <ucdr_serialize_sequence_uint8_t>
 8019a1a:	4604      	mov	r4, r0
 8019a1c:	e7e7      	b.n	80199ee <uxr_serialize_DATAWRITER_Representation+0x1e>
 8019a1e:	bf00      	nop

08019a20 <uxr_serialize_ObjectVariant.part.0>:
 8019a20:	b570      	push	{r4, r5, r6, lr}
 8019a22:	780b      	ldrb	r3, [r1, #0]
 8019a24:	460c      	mov	r4, r1
 8019a26:	4605      	mov	r5, r0
 8019a28:	3b01      	subs	r3, #1
 8019a2a:	2b0d      	cmp	r3, #13
 8019a2c:	d854      	bhi.n	8019ad8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8019a2e:	e8df f003 	tbb	[pc, r3]
 8019a32:	0730      	.short	0x0730
 8019a34:	07071b1b 	.word	0x07071b1b
 8019a38:	0c530707 	.word	0x0c530707
 8019a3c:	494e0c0c 	.word	0x494e0c0c
 8019a40:	3104      	adds	r1, #4
 8019a42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019a46:	f7ff bfc3 	b.w	80199d0 <uxr_serialize_DATAWRITER_Representation>
 8019a4a:	7909      	ldrb	r1, [r1, #4]
 8019a4c:	f7f9 f8b2 	bl	8012bb4 <ucdr_serialize_uint8_t>
 8019a50:	b1e8      	cbz	r0, 8019a8e <uxr_serialize_ObjectVariant.part.0+0x6e>
 8019a52:	7923      	ldrb	r3, [r4, #4]
 8019a54:	2b01      	cmp	r3, #1
 8019a56:	d001      	beq.n	8019a5c <uxr_serialize_ObjectVariant.part.0+0x3c>
 8019a58:	2b02      	cmp	r3, #2
 8019a5a:	d13d      	bne.n	8019ad8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8019a5c:	68a1      	ldr	r1, [r4, #8]
 8019a5e:	4628      	mov	r0, r5
 8019a60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019a64:	f006 bb0a 	b.w	802007c <ucdr_serialize_string>
 8019a68:	7909      	ldrb	r1, [r1, #4]
 8019a6a:	f7f9 f8a3 	bl	8012bb4 <ucdr_serialize_uint8_t>
 8019a6e:	4606      	mov	r6, r0
 8019a70:	b120      	cbz	r0, 8019a7c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8019a72:	7923      	ldrb	r3, [r4, #4]
 8019a74:	2b02      	cmp	r3, #2
 8019a76:	d039      	beq.n	8019aec <uxr_serialize_ObjectVariant.part.0+0xcc>
 8019a78:	2b03      	cmp	r3, #3
 8019a7a:	d02f      	beq.n	8019adc <uxr_serialize_ObjectVariant.part.0+0xbc>
 8019a7c:	2202      	movs	r2, #2
 8019a7e:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8019a82:	4628      	mov	r0, r5
 8019a84:	f006 fa2e 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 8019a88:	4030      	ands	r0, r6
 8019a8a:	b2c0      	uxtb	r0, r0
 8019a8c:	bd70      	pop	{r4, r5, r6, pc}
 8019a8e:	2000      	movs	r0, #0
 8019a90:	bd70      	pop	{r4, r5, r6, pc}
 8019a92:	7909      	ldrb	r1, [r1, #4]
 8019a94:	f7f9 f88e 	bl	8012bb4 <ucdr_serialize_uint8_t>
 8019a98:	4606      	mov	r6, r0
 8019a9a:	b158      	cbz	r0, 8019ab4 <uxr_serialize_ObjectVariant.part.0+0x94>
 8019a9c:	7923      	ldrb	r3, [r4, #4]
 8019a9e:	2b02      	cmp	r3, #2
 8019aa0:	d003      	beq.n	8019aaa <uxr_serialize_ObjectVariant.part.0+0x8a>
 8019aa2:	2b03      	cmp	r3, #3
 8019aa4:	d028      	beq.n	8019af8 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8019aa6:	2b01      	cmp	r3, #1
 8019aa8:	d104      	bne.n	8019ab4 <uxr_serialize_ObjectVariant.part.0+0x94>
 8019aaa:	68a1      	ldr	r1, [r4, #8]
 8019aac:	4628      	mov	r0, r5
 8019aae:	f006 fae5 	bl	802007c <ucdr_serialize_string>
 8019ab2:	4606      	mov	r6, r0
 8019ab4:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8019ab8:	4628      	mov	r0, r5
 8019aba:	f7f9 fdb7 	bl	801362c <ucdr_serialize_int16_t>
 8019abe:	4030      	ands	r0, r6
 8019ac0:	b2c0      	uxtb	r0, r0
 8019ac2:	bd70      	pop	{r4, r5, r6, pc}
 8019ac4:	3104      	adds	r1, #4
 8019ac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019aca:	f7ff be7b 	b.w	80197c4 <uxr_serialize_CLIENT_Representation>
 8019ace:	3104      	adds	r1, #4
 8019ad0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019ad4:	f7ff bf32 	b.w	801993c <uxr_serialize_AGENT_Representation>
 8019ad8:	2001      	movs	r0, #1
 8019ada:	bd70      	pop	{r4, r5, r6, pc}
 8019adc:	68a2      	ldr	r2, [r4, #8]
 8019ade:	f104 010c 	add.w	r1, r4, #12
 8019ae2:	4628      	mov	r0, r5
 8019ae4:	f7fd f8e0 	bl	8016ca8 <ucdr_serialize_sequence_uint8_t>
 8019ae8:	4606      	mov	r6, r0
 8019aea:	e7c7      	b.n	8019a7c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8019aec:	68a1      	ldr	r1, [r4, #8]
 8019aee:	4628      	mov	r0, r5
 8019af0:	f006 fac4 	bl	802007c <ucdr_serialize_string>
 8019af4:	4606      	mov	r6, r0
 8019af6:	e7c1      	b.n	8019a7c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8019af8:	68a2      	ldr	r2, [r4, #8]
 8019afa:	f104 010c 	add.w	r1, r4, #12
 8019afe:	4628      	mov	r0, r5
 8019b00:	f7fd f8d2 	bl	8016ca8 <ucdr_serialize_sequence_uint8_t>
 8019b04:	4606      	mov	r6, r0
 8019b06:	e7d5      	b.n	8019ab4 <uxr_serialize_ObjectVariant.part.0+0x94>

08019b08 <uxr_deserialize_DATAWRITER_Representation>:
 8019b08:	b570      	push	{r4, r5, r6, lr}
 8019b0a:	4606      	mov	r6, r0
 8019b0c:	460d      	mov	r5, r1
 8019b0e:	f7f9 f867 	bl	8012be0 <ucdr_deserialize_uint8_t>
 8019b12:	4604      	mov	r4, r0
 8019b14:	b130      	cbz	r0, 8019b24 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8019b16:	782b      	ldrb	r3, [r5, #0]
 8019b18:	2b02      	cmp	r3, #2
 8019b1a:	d00c      	beq.n	8019b36 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8019b1c:	2b03      	cmp	r3, #3
 8019b1e:	d012      	beq.n	8019b46 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8019b20:	2b01      	cmp	r3, #1
 8019b22:	d008      	beq.n	8019b36 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8019b24:	2202      	movs	r2, #2
 8019b26:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8019b2a:	4630      	mov	r0, r6
 8019b2c:	f006 fa3e 	bl	801ffac <ucdr_deserialize_array_uint8_t>
 8019b30:	4020      	ands	r0, r4
 8019b32:	b2c0      	uxtb	r0, r0
 8019b34:	bd70      	pop	{r4, r5, r6, pc}
 8019b36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019b3a:	6869      	ldr	r1, [r5, #4]
 8019b3c:	4630      	mov	r0, r6
 8019b3e:	f006 faad 	bl	802009c <ucdr_deserialize_string>
 8019b42:	4604      	mov	r4, r0
 8019b44:	e7ee      	b.n	8019b24 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8019b46:	1d2b      	adds	r3, r5, #4
 8019b48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019b4c:	f105 0108 	add.w	r1, r5, #8
 8019b50:	4630      	mov	r0, r6
 8019b52:	f7fd f8bb 	bl	8016ccc <ucdr_deserialize_sequence_uint8_t>
 8019b56:	4604      	mov	r4, r0
 8019b58:	e7e4      	b.n	8019b24 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8019b5a:	bf00      	nop

08019b5c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8019b5c:	b570      	push	{r4, r5, r6, lr}
 8019b5e:	460d      	mov	r5, r1
 8019b60:	7809      	ldrb	r1, [r1, #0]
 8019b62:	4606      	mov	r6, r0
 8019b64:	f7f8 fff8 	bl	8012b58 <ucdr_serialize_bool>
 8019b68:	782b      	ldrb	r3, [r5, #0]
 8019b6a:	4604      	mov	r4, r0
 8019b6c:	b94b      	cbnz	r3, 8019b82 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8019b6e:	7a29      	ldrb	r1, [r5, #8]
 8019b70:	4630      	mov	r0, r6
 8019b72:	f7f8 fff1 	bl	8012b58 <ucdr_serialize_bool>
 8019b76:	7a2b      	ldrb	r3, [r5, #8]
 8019b78:	4004      	ands	r4, r0
 8019b7a:	b2e4      	uxtb	r4, r4
 8019b7c:	b943      	cbnz	r3, 8019b90 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8019b7e:	4620      	mov	r0, r4
 8019b80:	bd70      	pop	{r4, r5, r6, pc}
 8019b82:	6869      	ldr	r1, [r5, #4]
 8019b84:	4630      	mov	r0, r6
 8019b86:	f006 fa79 	bl	802007c <ucdr_serialize_string>
 8019b8a:	4004      	ands	r4, r0
 8019b8c:	b2e4      	uxtb	r4, r4
 8019b8e:	e7ee      	b.n	8019b6e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8019b90:	68e9      	ldr	r1, [r5, #12]
 8019b92:	4630      	mov	r0, r6
 8019b94:	f006 fa72 	bl	802007c <ucdr_serialize_string>
 8019b98:	4004      	ands	r4, r0
 8019b9a:	4620      	mov	r0, r4
 8019b9c:	bd70      	pop	{r4, r5, r6, pc}
 8019b9e:	bf00      	nop

08019ba0 <uxr_serialize_OBJK_Topic_Binary>:
 8019ba0:	b570      	push	{r4, r5, r6, lr}
 8019ba2:	460d      	mov	r5, r1
 8019ba4:	4606      	mov	r6, r0
 8019ba6:	6809      	ldr	r1, [r1, #0]
 8019ba8:	f006 fa68 	bl	802007c <ucdr_serialize_string>
 8019bac:	4604      	mov	r4, r0
 8019bae:	7929      	ldrb	r1, [r5, #4]
 8019bb0:	4630      	mov	r0, r6
 8019bb2:	f7f8 ffd1 	bl	8012b58 <ucdr_serialize_bool>
 8019bb6:	792b      	ldrb	r3, [r5, #4]
 8019bb8:	4004      	ands	r4, r0
 8019bba:	b2e4      	uxtb	r4, r4
 8019bbc:	b943      	cbnz	r3, 8019bd0 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8019bbe:	7b29      	ldrb	r1, [r5, #12]
 8019bc0:	4630      	mov	r0, r6
 8019bc2:	f7f8 ffc9 	bl	8012b58 <ucdr_serialize_bool>
 8019bc6:	7b2b      	ldrb	r3, [r5, #12]
 8019bc8:	4004      	ands	r4, r0
 8019bca:	b93b      	cbnz	r3, 8019bdc <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8019bcc:	4620      	mov	r0, r4
 8019bce:	bd70      	pop	{r4, r5, r6, pc}
 8019bd0:	68a9      	ldr	r1, [r5, #8]
 8019bd2:	4630      	mov	r0, r6
 8019bd4:	f006 fa52 	bl	802007c <ucdr_serialize_string>
 8019bd8:	4004      	ands	r4, r0
 8019bda:	e7f0      	b.n	8019bbe <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8019bdc:	6929      	ldr	r1, [r5, #16]
 8019bde:	4630      	mov	r0, r6
 8019be0:	f006 fa4c 	bl	802007c <ucdr_serialize_string>
 8019be4:	4004      	ands	r4, r0
 8019be6:	b2e4      	uxtb	r4, r4
 8019be8:	4620      	mov	r0, r4
 8019bea:	bd70      	pop	{r4, r5, r6, pc}

08019bec <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8019bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019bf0:	460c      	mov	r4, r1
 8019bf2:	7809      	ldrb	r1, [r1, #0]
 8019bf4:	4606      	mov	r6, r0
 8019bf6:	f7f8 ffaf 	bl	8012b58 <ucdr_serialize_bool>
 8019bfa:	7823      	ldrb	r3, [r4, #0]
 8019bfc:	4605      	mov	r5, r0
 8019bfe:	b96b      	cbnz	r3, 8019c1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8019c00:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8019c04:	4630      	mov	r0, r6
 8019c06:	f7f8 ffa7 	bl	8012b58 <ucdr_serialize_bool>
 8019c0a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8019c0e:	4005      	ands	r5, r0
 8019c10:	b2ed      	uxtb	r5, r5
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	d169      	bne.n	8019cea <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8019c16:	4628      	mov	r0, r5
 8019c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c1c:	6861      	ldr	r1, [r4, #4]
 8019c1e:	4630      	mov	r0, r6
 8019c20:	f7f9 f9de 	bl	8012fe0 <ucdr_serialize_uint32_t>
 8019c24:	6863      	ldr	r3, [r4, #4]
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	d06b      	beq.n	8019d02 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8019c2a:	2800      	cmp	r0, #0
 8019c2c:	d067      	beq.n	8019cfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019c2e:	68a1      	ldr	r1, [r4, #8]
 8019c30:	4630      	mov	r0, r6
 8019c32:	f006 fa23 	bl	802007c <ucdr_serialize_string>
 8019c36:	6863      	ldr	r3, [r4, #4]
 8019c38:	2b01      	cmp	r3, #1
 8019c3a:	d953      	bls.n	8019ce4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019c3c:	2800      	cmp	r0, #0
 8019c3e:	d05e      	beq.n	8019cfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019c40:	68e1      	ldr	r1, [r4, #12]
 8019c42:	4630      	mov	r0, r6
 8019c44:	f006 fa1a 	bl	802007c <ucdr_serialize_string>
 8019c48:	6863      	ldr	r3, [r4, #4]
 8019c4a:	2b02      	cmp	r3, #2
 8019c4c:	d94a      	bls.n	8019ce4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019c4e:	2800      	cmp	r0, #0
 8019c50:	d055      	beq.n	8019cfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019c52:	6921      	ldr	r1, [r4, #16]
 8019c54:	4630      	mov	r0, r6
 8019c56:	f006 fa11 	bl	802007c <ucdr_serialize_string>
 8019c5a:	6863      	ldr	r3, [r4, #4]
 8019c5c:	2b03      	cmp	r3, #3
 8019c5e:	d941      	bls.n	8019ce4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019c60:	2800      	cmp	r0, #0
 8019c62:	d04c      	beq.n	8019cfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019c64:	6961      	ldr	r1, [r4, #20]
 8019c66:	4630      	mov	r0, r6
 8019c68:	f006 fa08 	bl	802007c <ucdr_serialize_string>
 8019c6c:	6863      	ldr	r3, [r4, #4]
 8019c6e:	2b04      	cmp	r3, #4
 8019c70:	d938      	bls.n	8019ce4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019c72:	2800      	cmp	r0, #0
 8019c74:	d043      	beq.n	8019cfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019c76:	69a1      	ldr	r1, [r4, #24]
 8019c78:	4630      	mov	r0, r6
 8019c7a:	f006 f9ff 	bl	802007c <ucdr_serialize_string>
 8019c7e:	6863      	ldr	r3, [r4, #4]
 8019c80:	2b05      	cmp	r3, #5
 8019c82:	d92f      	bls.n	8019ce4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019c84:	2800      	cmp	r0, #0
 8019c86:	d03a      	beq.n	8019cfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019c88:	69e1      	ldr	r1, [r4, #28]
 8019c8a:	4630      	mov	r0, r6
 8019c8c:	f006 f9f6 	bl	802007c <ucdr_serialize_string>
 8019c90:	6863      	ldr	r3, [r4, #4]
 8019c92:	2b06      	cmp	r3, #6
 8019c94:	d926      	bls.n	8019ce4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019c96:	b390      	cbz	r0, 8019cfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019c98:	6a21      	ldr	r1, [r4, #32]
 8019c9a:	4630      	mov	r0, r6
 8019c9c:	f006 f9ee 	bl	802007c <ucdr_serialize_string>
 8019ca0:	6863      	ldr	r3, [r4, #4]
 8019ca2:	2b07      	cmp	r3, #7
 8019ca4:	d91e      	bls.n	8019ce4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019ca6:	b350      	cbz	r0, 8019cfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019ca8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8019caa:	4630      	mov	r0, r6
 8019cac:	f006 f9e6 	bl	802007c <ucdr_serialize_string>
 8019cb0:	6863      	ldr	r3, [r4, #4]
 8019cb2:	2b08      	cmp	r3, #8
 8019cb4:	d916      	bls.n	8019ce4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019cb6:	b310      	cbz	r0, 8019cfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019cb8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8019cba:	4630      	mov	r0, r6
 8019cbc:	f006 f9de 	bl	802007c <ucdr_serialize_string>
 8019cc0:	6863      	ldr	r3, [r4, #4]
 8019cc2:	2b09      	cmp	r3, #9
 8019cc4:	d90e      	bls.n	8019ce4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019cc6:	b1d0      	cbz	r0, 8019cfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019cc8:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8019ccc:	2709      	movs	r7, #9
 8019cce:	e000      	b.n	8019cd2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8019cd0:	b1a8      	cbz	r0, 8019cfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019cd2:	f858 1b04 	ldr.w	r1, [r8], #4
 8019cd6:	4630      	mov	r0, r6
 8019cd8:	f006 f9d0 	bl	802007c <ucdr_serialize_string>
 8019cdc:	3701      	adds	r7, #1
 8019cde:	6862      	ldr	r2, [r4, #4]
 8019ce0:	4297      	cmp	r7, r2
 8019ce2:	d3f5      	bcc.n	8019cd0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8019ce4:	4005      	ands	r5, r0
 8019ce6:	b2ed      	uxtb	r5, r5
 8019ce8:	e78a      	b.n	8019c00 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8019cea:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019cec:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8019cf0:	4630      	mov	r0, r6
 8019cf2:	f7fc ffd9 	bl	8016ca8 <ucdr_serialize_sequence_uint8_t>
 8019cf6:	4005      	ands	r5, r0
 8019cf8:	4628      	mov	r0, r5
 8019cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019cfe:	2500      	movs	r5, #0
 8019d00:	e77e      	b.n	8019c00 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8019d02:	4028      	ands	r0, r5
 8019d04:	b2c5      	uxtb	r5, r0
 8019d06:	e77b      	b.n	8019c00 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08019d08 <uxr_serialize_OBJK_Publisher_Binary>:
 8019d08:	b570      	push	{r4, r5, r6, lr}
 8019d0a:	460d      	mov	r5, r1
 8019d0c:	7809      	ldrb	r1, [r1, #0]
 8019d0e:	4606      	mov	r6, r0
 8019d10:	f7f8 ff22 	bl	8012b58 <ucdr_serialize_bool>
 8019d14:	782b      	ldrb	r3, [r5, #0]
 8019d16:	4604      	mov	r4, r0
 8019d18:	b94b      	cbnz	r3, 8019d2e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8019d1a:	7a29      	ldrb	r1, [r5, #8]
 8019d1c:	4630      	mov	r0, r6
 8019d1e:	f7f8 ff1b 	bl	8012b58 <ucdr_serialize_bool>
 8019d22:	7a2b      	ldrb	r3, [r5, #8]
 8019d24:	4004      	ands	r4, r0
 8019d26:	b2e4      	uxtb	r4, r4
 8019d28:	b943      	cbnz	r3, 8019d3c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8019d2a:	4620      	mov	r0, r4
 8019d2c:	bd70      	pop	{r4, r5, r6, pc}
 8019d2e:	6869      	ldr	r1, [r5, #4]
 8019d30:	4630      	mov	r0, r6
 8019d32:	f006 f9a3 	bl	802007c <ucdr_serialize_string>
 8019d36:	4004      	ands	r4, r0
 8019d38:	b2e4      	uxtb	r4, r4
 8019d3a:	e7ee      	b.n	8019d1a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8019d3c:	f105 010c 	add.w	r1, r5, #12
 8019d40:	4630      	mov	r0, r6
 8019d42:	f7ff ff53 	bl	8019bec <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8019d46:	4004      	ands	r4, r0
 8019d48:	4620      	mov	r0, r4
 8019d4a:	bd70      	pop	{r4, r5, r6, pc}

08019d4c <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8019d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d50:	460c      	mov	r4, r1
 8019d52:	7809      	ldrb	r1, [r1, #0]
 8019d54:	4606      	mov	r6, r0
 8019d56:	f7f8 feff 	bl	8012b58 <ucdr_serialize_bool>
 8019d5a:	7823      	ldrb	r3, [r4, #0]
 8019d5c:	4605      	mov	r5, r0
 8019d5e:	b96b      	cbnz	r3, 8019d7c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8019d60:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8019d64:	4630      	mov	r0, r6
 8019d66:	f7f8 fef7 	bl	8012b58 <ucdr_serialize_bool>
 8019d6a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8019d6e:	4005      	ands	r5, r0
 8019d70:	b2ed      	uxtb	r5, r5
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	d169      	bne.n	8019e4a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8019d76:	4628      	mov	r0, r5
 8019d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d7c:	6861      	ldr	r1, [r4, #4]
 8019d7e:	4630      	mov	r0, r6
 8019d80:	f7f9 f92e 	bl	8012fe0 <ucdr_serialize_uint32_t>
 8019d84:	6863      	ldr	r3, [r4, #4]
 8019d86:	2b00      	cmp	r3, #0
 8019d88:	d06b      	beq.n	8019e62 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8019d8a:	2800      	cmp	r0, #0
 8019d8c:	d067      	beq.n	8019e5e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019d8e:	68a1      	ldr	r1, [r4, #8]
 8019d90:	4630      	mov	r0, r6
 8019d92:	f006 f973 	bl	802007c <ucdr_serialize_string>
 8019d96:	6863      	ldr	r3, [r4, #4]
 8019d98:	2b01      	cmp	r3, #1
 8019d9a:	d953      	bls.n	8019e44 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019d9c:	2800      	cmp	r0, #0
 8019d9e:	d05e      	beq.n	8019e5e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019da0:	68e1      	ldr	r1, [r4, #12]
 8019da2:	4630      	mov	r0, r6
 8019da4:	f006 f96a 	bl	802007c <ucdr_serialize_string>
 8019da8:	6863      	ldr	r3, [r4, #4]
 8019daa:	2b02      	cmp	r3, #2
 8019dac:	d94a      	bls.n	8019e44 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019dae:	2800      	cmp	r0, #0
 8019db0:	d055      	beq.n	8019e5e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019db2:	6921      	ldr	r1, [r4, #16]
 8019db4:	4630      	mov	r0, r6
 8019db6:	f006 f961 	bl	802007c <ucdr_serialize_string>
 8019dba:	6863      	ldr	r3, [r4, #4]
 8019dbc:	2b03      	cmp	r3, #3
 8019dbe:	d941      	bls.n	8019e44 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019dc0:	2800      	cmp	r0, #0
 8019dc2:	d04c      	beq.n	8019e5e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019dc4:	6961      	ldr	r1, [r4, #20]
 8019dc6:	4630      	mov	r0, r6
 8019dc8:	f006 f958 	bl	802007c <ucdr_serialize_string>
 8019dcc:	6863      	ldr	r3, [r4, #4]
 8019dce:	2b04      	cmp	r3, #4
 8019dd0:	d938      	bls.n	8019e44 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019dd2:	2800      	cmp	r0, #0
 8019dd4:	d043      	beq.n	8019e5e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019dd6:	69a1      	ldr	r1, [r4, #24]
 8019dd8:	4630      	mov	r0, r6
 8019dda:	f006 f94f 	bl	802007c <ucdr_serialize_string>
 8019dde:	6863      	ldr	r3, [r4, #4]
 8019de0:	2b05      	cmp	r3, #5
 8019de2:	d92f      	bls.n	8019e44 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019de4:	2800      	cmp	r0, #0
 8019de6:	d03a      	beq.n	8019e5e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019de8:	69e1      	ldr	r1, [r4, #28]
 8019dea:	4630      	mov	r0, r6
 8019dec:	f006 f946 	bl	802007c <ucdr_serialize_string>
 8019df0:	6863      	ldr	r3, [r4, #4]
 8019df2:	2b06      	cmp	r3, #6
 8019df4:	d926      	bls.n	8019e44 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019df6:	b390      	cbz	r0, 8019e5e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019df8:	6a21      	ldr	r1, [r4, #32]
 8019dfa:	4630      	mov	r0, r6
 8019dfc:	f006 f93e 	bl	802007c <ucdr_serialize_string>
 8019e00:	6863      	ldr	r3, [r4, #4]
 8019e02:	2b07      	cmp	r3, #7
 8019e04:	d91e      	bls.n	8019e44 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019e06:	b350      	cbz	r0, 8019e5e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019e08:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8019e0a:	4630      	mov	r0, r6
 8019e0c:	f006 f936 	bl	802007c <ucdr_serialize_string>
 8019e10:	6863      	ldr	r3, [r4, #4]
 8019e12:	2b08      	cmp	r3, #8
 8019e14:	d916      	bls.n	8019e44 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019e16:	b310      	cbz	r0, 8019e5e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019e18:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8019e1a:	4630      	mov	r0, r6
 8019e1c:	f006 f92e 	bl	802007c <ucdr_serialize_string>
 8019e20:	6863      	ldr	r3, [r4, #4]
 8019e22:	2b09      	cmp	r3, #9
 8019e24:	d90e      	bls.n	8019e44 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019e26:	b1d0      	cbz	r0, 8019e5e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019e28:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8019e2c:	2709      	movs	r7, #9
 8019e2e:	e000      	b.n	8019e32 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8019e30:	b1a8      	cbz	r0, 8019e5e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019e32:	f858 1b04 	ldr.w	r1, [r8], #4
 8019e36:	4630      	mov	r0, r6
 8019e38:	f006 f920 	bl	802007c <ucdr_serialize_string>
 8019e3c:	3701      	adds	r7, #1
 8019e3e:	6862      	ldr	r2, [r4, #4]
 8019e40:	4297      	cmp	r7, r2
 8019e42:	d3f5      	bcc.n	8019e30 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8019e44:	4005      	ands	r5, r0
 8019e46:	b2ed      	uxtb	r5, r5
 8019e48:	e78a      	b.n	8019d60 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8019e4a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019e4c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8019e50:	4630      	mov	r0, r6
 8019e52:	f7fc ff29 	bl	8016ca8 <ucdr_serialize_sequence_uint8_t>
 8019e56:	4005      	ands	r5, r0
 8019e58:	4628      	mov	r0, r5
 8019e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e5e:	2500      	movs	r5, #0
 8019e60:	e77e      	b.n	8019d60 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8019e62:	4028      	ands	r0, r5
 8019e64:	b2c5      	uxtb	r5, r0
 8019e66:	e77b      	b.n	8019d60 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08019e68 <uxr_serialize_OBJK_Subscriber_Binary>:
 8019e68:	b570      	push	{r4, r5, r6, lr}
 8019e6a:	460d      	mov	r5, r1
 8019e6c:	7809      	ldrb	r1, [r1, #0]
 8019e6e:	4606      	mov	r6, r0
 8019e70:	f7f8 fe72 	bl	8012b58 <ucdr_serialize_bool>
 8019e74:	782b      	ldrb	r3, [r5, #0]
 8019e76:	4604      	mov	r4, r0
 8019e78:	b94b      	cbnz	r3, 8019e8e <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8019e7a:	7a29      	ldrb	r1, [r5, #8]
 8019e7c:	4630      	mov	r0, r6
 8019e7e:	f7f8 fe6b 	bl	8012b58 <ucdr_serialize_bool>
 8019e82:	7a2b      	ldrb	r3, [r5, #8]
 8019e84:	4004      	ands	r4, r0
 8019e86:	b2e4      	uxtb	r4, r4
 8019e88:	b943      	cbnz	r3, 8019e9c <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8019e8a:	4620      	mov	r0, r4
 8019e8c:	bd70      	pop	{r4, r5, r6, pc}
 8019e8e:	6869      	ldr	r1, [r5, #4]
 8019e90:	4630      	mov	r0, r6
 8019e92:	f006 f8f3 	bl	802007c <ucdr_serialize_string>
 8019e96:	4004      	ands	r4, r0
 8019e98:	b2e4      	uxtb	r4, r4
 8019e9a:	e7ee      	b.n	8019e7a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8019e9c:	f105 010c 	add.w	r1, r5, #12
 8019ea0:	4630      	mov	r0, r6
 8019ea2:	f7ff ff53 	bl	8019d4c <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8019ea6:	4004      	ands	r4, r0
 8019ea8:	4620      	mov	r0, r4
 8019eaa:	bd70      	pop	{r4, r5, r6, pc}

08019eac <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8019eac:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8019eb0:	4688      	mov	r8, r1
 8019eb2:	4681      	mov	r9, r0
 8019eb4:	8809      	ldrh	r1, [r1, #0]
 8019eb6:	f7f8 fea9 	bl	8012c0c <ucdr_serialize_uint16_t>
 8019eba:	4606      	mov	r6, r0
 8019ebc:	f898 1002 	ldrb.w	r1, [r8, #2]
 8019ec0:	4648      	mov	r0, r9
 8019ec2:	f7f8 fe49 	bl	8012b58 <ucdr_serialize_bool>
 8019ec6:	f898 3002 	ldrb.w	r3, [r8, #2]
 8019eca:	4006      	ands	r6, r0
 8019ecc:	b2f5      	uxtb	r5, r6
 8019ece:	b9eb      	cbnz	r3, 8019f0c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8019ed0:	f898 1006 	ldrb.w	r1, [r8, #6]
 8019ed4:	4648      	mov	r0, r9
 8019ed6:	f7f8 fe3f 	bl	8012b58 <ucdr_serialize_bool>
 8019eda:	f898 3006 	ldrb.w	r3, [r8, #6]
 8019ede:	4005      	ands	r5, r0
 8019ee0:	bb7b      	cbnz	r3, 8019f42 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8019ee2:	f898 100c 	ldrb.w	r1, [r8, #12]
 8019ee6:	4648      	mov	r0, r9
 8019ee8:	f7f8 fe36 	bl	8012b58 <ucdr_serialize_bool>
 8019eec:	f898 300c 	ldrb.w	r3, [r8, #12]
 8019ef0:	4005      	ands	r5, r0
 8019ef2:	b9f3      	cbnz	r3, 8019f32 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8019ef4:	f898 1014 	ldrb.w	r1, [r8, #20]
 8019ef8:	4648      	mov	r0, r9
 8019efa:	f7f8 fe2d 	bl	8012b58 <ucdr_serialize_bool>
 8019efe:	f898 3014 	ldrb.w	r3, [r8, #20]
 8019f02:	4005      	ands	r5, r0
 8019f04:	b94b      	cbnz	r3, 8019f1a <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8019f06:	4628      	mov	r0, r5
 8019f08:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8019f0c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8019f10:	4648      	mov	r0, r9
 8019f12:	f7f8 fe7b 	bl	8012c0c <ucdr_serialize_uint16_t>
 8019f16:	4005      	ands	r5, r0
 8019f18:	e7da      	b.n	8019ed0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8019f1a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8019f1e:	f108 011c 	add.w	r1, r8, #28
 8019f22:	4648      	mov	r0, r9
 8019f24:	f7fc fec0 	bl	8016ca8 <ucdr_serialize_sequence_uint8_t>
 8019f28:	4028      	ands	r0, r5
 8019f2a:	b2c5      	uxtb	r5, r0
 8019f2c:	4628      	mov	r0, r5
 8019f2e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8019f32:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8019f36:	4648      	mov	r0, r9
 8019f38:	f7f9 f852 	bl	8012fe0 <ucdr_serialize_uint32_t>
 8019f3c:	4028      	ands	r0, r5
 8019f3e:	b2c5      	uxtb	r5, r0
 8019f40:	e7d8      	b.n	8019ef4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8019f42:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8019f46:	4648      	mov	r0, r9
 8019f48:	f7f9 f84a 	bl	8012fe0 <ucdr_serialize_uint32_t>
 8019f4c:	4028      	ands	r0, r5
 8019f4e:	b2c5      	uxtb	r5, r0
 8019f50:	e7c7      	b.n	8019ee2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8019f52:	bf00      	nop

08019f54 <uxr_serialize_OBJK_DataReader_Binary>:
 8019f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f56:	2202      	movs	r2, #2
 8019f58:	460c      	mov	r4, r1
 8019f5a:	4606      	mov	r6, r0
 8019f5c:	f005 ffc2 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 8019f60:	4605      	mov	r5, r0
 8019f62:	78a1      	ldrb	r1, [r4, #2]
 8019f64:	4630      	mov	r0, r6
 8019f66:	f7f8 fdf7 	bl	8012b58 <ucdr_serialize_bool>
 8019f6a:	78a3      	ldrb	r3, [r4, #2]
 8019f6c:	4005      	ands	r5, r0
 8019f6e:	b2ed      	uxtb	r5, r5
 8019f70:	b90b      	cbnz	r3, 8019f76 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8019f72:	4628      	mov	r0, r5
 8019f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f76:	f104 0108 	add.w	r1, r4, #8
 8019f7a:	4630      	mov	r0, r6
 8019f7c:	f7ff ff96 	bl	8019eac <uxr_serialize_OBJK_Endpoint_QosBinary>
 8019f80:	4607      	mov	r7, r0
 8019f82:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8019f86:	4630      	mov	r0, r6
 8019f88:	f7f8 fde6 	bl	8012b58 <ucdr_serialize_bool>
 8019f8c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8019f90:	4038      	ands	r0, r7
 8019f92:	b2c7      	uxtb	r7, r0
 8019f94:	b95b      	cbnz	r3, 8019fae <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8019f96:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8019f9a:	4630      	mov	r0, r6
 8019f9c:	f7f8 fddc 	bl	8012b58 <ucdr_serialize_bool>
 8019fa0:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8019fa4:	4007      	ands	r7, r0
 8019fa6:	b94b      	cbnz	r3, 8019fbc <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8019fa8:	403d      	ands	r5, r7
 8019faa:	4628      	mov	r0, r5
 8019fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019fae:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8019fb2:	4630      	mov	r0, r6
 8019fb4:	f7f9 fa6a 	bl	801348c <ucdr_serialize_uint64_t>
 8019fb8:	4007      	ands	r7, r0
 8019fba:	e7ec      	b.n	8019f96 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8019fbc:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8019fbe:	4630      	mov	r0, r6
 8019fc0:	f006 f85c 	bl	802007c <ucdr_serialize_string>
 8019fc4:	4007      	ands	r7, r0
 8019fc6:	b2ff      	uxtb	r7, r7
 8019fc8:	e7ee      	b.n	8019fa8 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8019fca:	bf00      	nop

08019fcc <uxr_serialize_OBJK_DataWriter_Binary>:
 8019fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fce:	2202      	movs	r2, #2
 8019fd0:	460d      	mov	r5, r1
 8019fd2:	4606      	mov	r6, r0
 8019fd4:	f005 ff86 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 8019fd8:	4604      	mov	r4, r0
 8019fda:	78a9      	ldrb	r1, [r5, #2]
 8019fdc:	4630      	mov	r0, r6
 8019fde:	f7f8 fdbb 	bl	8012b58 <ucdr_serialize_bool>
 8019fe2:	78ab      	ldrb	r3, [r5, #2]
 8019fe4:	4004      	ands	r4, r0
 8019fe6:	b2e4      	uxtb	r4, r4
 8019fe8:	b90b      	cbnz	r3, 8019fee <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8019fea:	4620      	mov	r0, r4
 8019fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019fee:	f105 0108 	add.w	r1, r5, #8
 8019ff2:	4630      	mov	r0, r6
 8019ff4:	f7ff ff5a 	bl	8019eac <uxr_serialize_OBJK_Endpoint_QosBinary>
 8019ff8:	4607      	mov	r7, r0
 8019ffa:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8019ffe:	4630      	mov	r0, r6
 801a000:	f7f8 fdaa 	bl	8012b58 <ucdr_serialize_bool>
 801a004:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801a008:	4038      	ands	r0, r7
 801a00a:	b2c7      	uxtb	r7, r0
 801a00c:	b913      	cbnz	r3, 801a014 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801a00e:	403c      	ands	r4, r7
 801a010:	4620      	mov	r0, r4
 801a012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a014:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 801a018:	4630      	mov	r0, r6
 801a01a:	f7f9 fa37 	bl	801348c <ucdr_serialize_uint64_t>
 801a01e:	4007      	ands	r7, r0
 801a020:	e7f5      	b.n	801a00e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801a022:	bf00      	nop

0801a024 <uxr_serialize_OBJK_Replier_Binary>:
 801a024:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 801a028:	460f      	mov	r7, r1
 801a02a:	4680      	mov	r8, r0
 801a02c:	6809      	ldr	r1, [r1, #0]
 801a02e:	f006 f825 	bl	802007c <ucdr_serialize_string>
 801a032:	4605      	mov	r5, r0
 801a034:	6879      	ldr	r1, [r7, #4]
 801a036:	4640      	mov	r0, r8
 801a038:	f006 f820 	bl	802007c <ucdr_serialize_string>
 801a03c:	4005      	ands	r5, r0
 801a03e:	68b9      	ldr	r1, [r7, #8]
 801a040:	4640      	mov	r0, r8
 801a042:	b2ec      	uxtb	r4, r5
 801a044:	f006 f81a 	bl	802007c <ucdr_serialize_string>
 801a048:	7b39      	ldrb	r1, [r7, #12]
 801a04a:	4004      	ands	r4, r0
 801a04c:	4640      	mov	r0, r8
 801a04e:	f7f8 fd83 	bl	8012b58 <ucdr_serialize_bool>
 801a052:	7b3b      	ldrb	r3, [r7, #12]
 801a054:	4004      	ands	r4, r0
 801a056:	b94b      	cbnz	r3, 801a06c <uxr_serialize_OBJK_Replier_Binary+0x48>
 801a058:	7d39      	ldrb	r1, [r7, #20]
 801a05a:	4640      	mov	r0, r8
 801a05c:	f7f8 fd7c 	bl	8012b58 <ucdr_serialize_bool>
 801a060:	7d3b      	ldrb	r3, [r7, #20]
 801a062:	4004      	ands	r4, r0
 801a064:	b943      	cbnz	r3, 801a078 <uxr_serialize_OBJK_Replier_Binary+0x54>
 801a066:	4620      	mov	r0, r4
 801a068:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801a06c:	6939      	ldr	r1, [r7, #16]
 801a06e:	4640      	mov	r0, r8
 801a070:	f006 f804 	bl	802007c <ucdr_serialize_string>
 801a074:	4004      	ands	r4, r0
 801a076:	e7ef      	b.n	801a058 <uxr_serialize_OBJK_Replier_Binary+0x34>
 801a078:	69b9      	ldr	r1, [r7, #24]
 801a07a:	4640      	mov	r0, r8
 801a07c:	f005 fffe 	bl	802007c <ucdr_serialize_string>
 801a080:	4004      	ands	r4, r0
 801a082:	b2e4      	uxtb	r4, r4
 801a084:	4620      	mov	r0, r4
 801a086:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801a08a:	bf00      	nop

0801a08c <uxr_deserialize_ObjectVariant>:
 801a08c:	b570      	push	{r4, r5, r6, lr}
 801a08e:	4605      	mov	r5, r0
 801a090:	460e      	mov	r6, r1
 801a092:	f7f8 fda5 	bl	8012be0 <ucdr_deserialize_uint8_t>
 801a096:	b168      	cbz	r0, 801a0b4 <uxr_deserialize_ObjectVariant+0x28>
 801a098:	7833      	ldrb	r3, [r6, #0]
 801a09a:	4604      	mov	r4, r0
 801a09c:	3b01      	subs	r3, #1
 801a09e:	2b0d      	cmp	r3, #13
 801a0a0:	d809      	bhi.n	801a0b6 <uxr_deserialize_ObjectVariant+0x2a>
 801a0a2:	e8df f003 	tbb	[pc, r3]
 801a0a6:	0a41      	.short	0x0a41
 801a0a8:	0a0a2323 	.word	0x0a0a2323
 801a0ac:	10080a0a 	.word	0x10080a0a
 801a0b0:	565c1010 	.word	0x565c1010
 801a0b4:	2400      	movs	r4, #0
 801a0b6:	4620      	mov	r0, r4
 801a0b8:	bd70      	pop	{r4, r5, r6, pc}
 801a0ba:	1d31      	adds	r1, r6, #4
 801a0bc:	4628      	mov	r0, r5
 801a0be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a0c2:	f7ff bd21 	b.w	8019b08 <uxr_deserialize_DATAWRITER_Representation>
 801a0c6:	1d31      	adds	r1, r6, #4
 801a0c8:	4628      	mov	r0, r5
 801a0ca:	f7f8 fd89 	bl	8012be0 <ucdr_deserialize_uint8_t>
 801a0ce:	2800      	cmp	r0, #0
 801a0d0:	d0f0      	beq.n	801a0b4 <uxr_deserialize_ObjectVariant+0x28>
 801a0d2:	7933      	ldrb	r3, [r6, #4]
 801a0d4:	2b01      	cmp	r3, #1
 801a0d6:	d001      	beq.n	801a0dc <uxr_deserialize_ObjectVariant+0x50>
 801a0d8:	2b02      	cmp	r3, #2
 801a0da:	d1ec      	bne.n	801a0b6 <uxr_deserialize_ObjectVariant+0x2a>
 801a0dc:	68b1      	ldr	r1, [r6, #8]
 801a0de:	4628      	mov	r0, r5
 801a0e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a0e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a0e8:	f005 bfd8 	b.w	802009c <ucdr_deserialize_string>
 801a0ec:	1d31      	adds	r1, r6, #4
 801a0ee:	4628      	mov	r0, r5
 801a0f0:	f7f8 fd76 	bl	8012be0 <ucdr_deserialize_uint8_t>
 801a0f4:	4604      	mov	r4, r0
 801a0f6:	b170      	cbz	r0, 801a116 <uxr_deserialize_ObjectVariant+0x8a>
 801a0f8:	7933      	ldrb	r3, [r6, #4]
 801a0fa:	2b02      	cmp	r3, #2
 801a0fc:	d04c      	beq.n	801a198 <uxr_deserialize_ObjectVariant+0x10c>
 801a0fe:	2b03      	cmp	r3, #3
 801a100:	d109      	bne.n	801a116 <uxr_deserialize_ObjectVariant+0x8a>
 801a102:	f106 0308 	add.w	r3, r6, #8
 801a106:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a10a:	f106 010c 	add.w	r1, r6, #12
 801a10e:	4628      	mov	r0, r5
 801a110:	f7fc fddc 	bl	8016ccc <ucdr_deserialize_sequence_uint8_t>
 801a114:	4604      	mov	r4, r0
 801a116:	2202      	movs	r2, #2
 801a118:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801a11c:	4628      	mov	r0, r5
 801a11e:	f005 ff45 	bl	801ffac <ucdr_deserialize_array_uint8_t>
 801a122:	4020      	ands	r0, r4
 801a124:	b2c4      	uxtb	r4, r0
 801a126:	e7c6      	b.n	801a0b6 <uxr_deserialize_ObjectVariant+0x2a>
 801a128:	1d31      	adds	r1, r6, #4
 801a12a:	4628      	mov	r0, r5
 801a12c:	f7f8 fd58 	bl	8012be0 <ucdr_deserialize_uint8_t>
 801a130:	4604      	mov	r4, r0
 801a132:	b130      	cbz	r0, 801a142 <uxr_deserialize_ObjectVariant+0xb6>
 801a134:	7933      	ldrb	r3, [r6, #4]
 801a136:	2b02      	cmp	r3, #2
 801a138:	d036      	beq.n	801a1a8 <uxr_deserialize_ObjectVariant+0x11c>
 801a13a:	2b03      	cmp	r3, #3
 801a13c:	d03c      	beq.n	801a1b8 <uxr_deserialize_ObjectVariant+0x12c>
 801a13e:	2b01      	cmp	r3, #1
 801a140:	d032      	beq.n	801a1a8 <uxr_deserialize_ObjectVariant+0x11c>
 801a142:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801a146:	4628      	mov	r0, r5
 801a148:	f7f9 faf0 	bl	801372c <ucdr_deserialize_int16_t>
 801a14c:	4020      	ands	r0, r4
 801a14e:	b2c4      	uxtb	r4, r0
 801a150:	e7b1      	b.n	801a0b6 <uxr_deserialize_ObjectVariant+0x2a>
 801a152:	1d31      	adds	r1, r6, #4
 801a154:	4628      	mov	r0, r5
 801a156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a15a:	f7ff bb8b 	b.w	8019874 <uxr_deserialize_CLIENT_Representation>
 801a15e:	2204      	movs	r2, #4
 801a160:	4628      	mov	r0, r5
 801a162:	18b1      	adds	r1, r6, r2
 801a164:	f005 ff22 	bl	801ffac <ucdr_deserialize_array_uint8_t>
 801a168:	4604      	mov	r4, r0
 801a16a:	2202      	movs	r2, #2
 801a16c:	f106 0108 	add.w	r1, r6, #8
 801a170:	4628      	mov	r0, r5
 801a172:	f005 ff1b 	bl	801ffac <ucdr_deserialize_array_uint8_t>
 801a176:	4004      	ands	r4, r0
 801a178:	2202      	movs	r2, #2
 801a17a:	f106 010a 	add.w	r1, r6, #10
 801a17e:	4628      	mov	r0, r5
 801a180:	b2e4      	uxtb	r4, r4
 801a182:	f005 ff13 	bl	801ffac <ucdr_deserialize_array_uint8_t>
 801a186:	4603      	mov	r3, r0
 801a188:	f106 010c 	add.w	r1, r6, #12
 801a18c:	4628      	mov	r0, r5
 801a18e:	401c      	ands	r4, r3
 801a190:	f7f8 fcf8 	bl	8012b84 <ucdr_deserialize_bool>
 801a194:	4004      	ands	r4, r0
 801a196:	e78e      	b.n	801a0b6 <uxr_deserialize_ObjectVariant+0x2a>
 801a198:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a19c:	68b1      	ldr	r1, [r6, #8]
 801a19e:	4628      	mov	r0, r5
 801a1a0:	f005 ff7c 	bl	802009c <ucdr_deserialize_string>
 801a1a4:	4604      	mov	r4, r0
 801a1a6:	e7b6      	b.n	801a116 <uxr_deserialize_ObjectVariant+0x8a>
 801a1a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a1ac:	68b1      	ldr	r1, [r6, #8]
 801a1ae:	4628      	mov	r0, r5
 801a1b0:	f005 ff74 	bl	802009c <ucdr_deserialize_string>
 801a1b4:	4604      	mov	r4, r0
 801a1b6:	e7c4      	b.n	801a142 <uxr_deserialize_ObjectVariant+0xb6>
 801a1b8:	f106 0308 	add.w	r3, r6, #8
 801a1bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a1c0:	f106 010c 	add.w	r1, r6, #12
 801a1c4:	4628      	mov	r0, r5
 801a1c6:	f7fc fd81 	bl	8016ccc <ucdr_deserialize_sequence_uint8_t>
 801a1ca:	4604      	mov	r4, r0
 801a1cc:	e7b9      	b.n	801a142 <uxr_deserialize_ObjectVariant+0xb6>
 801a1ce:	bf00      	nop

0801a1d0 <uxr_deserialize_BaseObjectRequest>:
 801a1d0:	b570      	push	{r4, r5, r6, lr}
 801a1d2:	2202      	movs	r2, #2
 801a1d4:	4605      	mov	r5, r0
 801a1d6:	460e      	mov	r6, r1
 801a1d8:	f005 fee8 	bl	801ffac <ucdr_deserialize_array_uint8_t>
 801a1dc:	2202      	movs	r2, #2
 801a1de:	4604      	mov	r4, r0
 801a1e0:	4628      	mov	r0, r5
 801a1e2:	18b1      	adds	r1, r6, r2
 801a1e4:	f005 fee2 	bl	801ffac <ucdr_deserialize_array_uint8_t>
 801a1e8:	4020      	ands	r0, r4
 801a1ea:	b2c0      	uxtb	r0, r0
 801a1ec:	bd70      	pop	{r4, r5, r6, pc}
 801a1ee:	bf00      	nop

0801a1f0 <uxr_serialize_ActivityInfoVariant>:
 801a1f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a1f4:	460e      	mov	r6, r1
 801a1f6:	7809      	ldrb	r1, [r1, #0]
 801a1f8:	4680      	mov	r8, r0
 801a1fa:	f7f8 fcdb 	bl	8012bb4 <ucdr_serialize_uint8_t>
 801a1fe:	4607      	mov	r7, r0
 801a200:	b138      	cbz	r0, 801a212 <uxr_serialize_ActivityInfoVariant+0x22>
 801a202:	7833      	ldrb	r3, [r6, #0]
 801a204:	2b06      	cmp	r3, #6
 801a206:	f000 8081 	beq.w	801a30c <uxr_serialize_ActivityInfoVariant+0x11c>
 801a20a:	2b0d      	cmp	r3, #13
 801a20c:	d014      	beq.n	801a238 <uxr_serialize_ActivityInfoVariant+0x48>
 801a20e:	2b05      	cmp	r3, #5
 801a210:	d002      	beq.n	801a218 <uxr_serialize_ActivityInfoVariant+0x28>
 801a212:	4638      	mov	r0, r7
 801a214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a218:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801a21c:	4640      	mov	r0, r8
 801a21e:	f7f9 fa05 	bl	801362c <ucdr_serialize_int16_t>
 801a222:	4607      	mov	r7, r0
 801a224:	4640      	mov	r0, r8
 801a226:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801a22a:	f7f9 f92f 	bl	801348c <ucdr_serialize_uint64_t>
 801a22e:	4038      	ands	r0, r7
 801a230:	b2c7      	uxtb	r7, r0
 801a232:	4638      	mov	r0, r7
 801a234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a238:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801a23c:	4640      	mov	r0, r8
 801a23e:	f7f9 f9f5 	bl	801362c <ucdr_serialize_int16_t>
 801a242:	68f1      	ldr	r1, [r6, #12]
 801a244:	4607      	mov	r7, r0
 801a246:	4640      	mov	r0, r8
 801a248:	f7f8 feca 	bl	8012fe0 <ucdr_serialize_uint32_t>
 801a24c:	68f3      	ldr	r3, [r6, #12]
 801a24e:	2b00      	cmp	r3, #0
 801a250:	d0ed      	beq.n	801a22e <uxr_serialize_ActivityInfoVariant+0x3e>
 801a252:	b318      	cbz	r0, 801a29c <uxr_serialize_ActivityInfoVariant+0xac>
 801a254:	f106 090c 	add.w	r9, r6, #12
 801a258:	2400      	movs	r4, #0
 801a25a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801a25e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801a262:	7c29      	ldrb	r1, [r5, #16]
 801a264:	4640      	mov	r0, r8
 801a266:	f7f8 fca5 	bl	8012bb4 <ucdr_serialize_uint8_t>
 801a26a:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801a26e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801a272:	2800      	cmp	r0, #0
 801a274:	d051      	beq.n	801a31a <uxr_serialize_ActivityInfoVariant+0x12a>
 801a276:	7c2b      	ldrb	r3, [r5, #16]
 801a278:	00c9      	lsls	r1, r1, #3
 801a27a:	2b03      	cmp	r3, #3
 801a27c:	d854      	bhi.n	801a328 <uxr_serialize_ActivityInfoVariant+0x138>
 801a27e:	e8df f003 	tbb	[pc, r3]
 801a282:	2133      	.short	0x2133
 801a284:	020f      	.short	0x020f
 801a286:	4449      	add	r1, r9
 801a288:	4640      	mov	r0, r8
 801a28a:	6889      	ldr	r1, [r1, #8]
 801a28c:	f005 fef6 	bl	802007c <ucdr_serialize_string>
 801a290:	3401      	adds	r4, #1
 801a292:	68f2      	ldr	r2, [r6, #12]
 801a294:	4294      	cmp	r4, r2
 801a296:	d244      	bcs.n	801a322 <uxr_serialize_ActivityInfoVariant+0x132>
 801a298:	2800      	cmp	r0, #0
 801a29a:	d1de      	bne.n	801a25a <uxr_serialize_ActivityInfoVariant+0x6a>
 801a29c:	2700      	movs	r7, #0
 801a29e:	e7b8      	b.n	801a212 <uxr_serialize_ActivityInfoVariant+0x22>
 801a2a0:	3108      	adds	r1, #8
 801a2a2:	44a2      	add	sl, r4
 801a2a4:	2210      	movs	r2, #16
 801a2a6:	4640      	mov	r0, r8
 801a2a8:	4449      	add	r1, r9
 801a2aa:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801a2ae:	f005 fe19 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 801a2b2:	4605      	mov	r5, r0
 801a2b4:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 801a2b8:	4640      	mov	r0, r8
 801a2ba:	f7f8 fe91 	bl	8012fe0 <ucdr_serialize_uint32_t>
 801a2be:	4028      	ands	r0, r5
 801a2c0:	b2c0      	uxtb	r0, r0
 801a2c2:	e7e5      	b.n	801a290 <uxr_serialize_ActivityInfoVariant+0xa0>
 801a2c4:	3108      	adds	r1, #8
 801a2c6:	44a2      	add	sl, r4
 801a2c8:	2204      	movs	r2, #4
 801a2ca:	4640      	mov	r0, r8
 801a2cc:	4449      	add	r1, r9
 801a2ce:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801a2d2:	f005 fe07 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 801a2d6:	4605      	mov	r5, r0
 801a2d8:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 801a2dc:	4640      	mov	r0, r8
 801a2de:	f7f8 fc95 	bl	8012c0c <ucdr_serialize_uint16_t>
 801a2e2:	4028      	ands	r0, r5
 801a2e4:	b2c0      	uxtb	r0, r0
 801a2e6:	e7d3      	b.n	801a290 <uxr_serialize_ActivityInfoVariant+0xa0>
 801a2e8:	3108      	adds	r1, #8
 801a2ea:	44a2      	add	sl, r4
 801a2ec:	2202      	movs	r2, #2
 801a2ee:	4640      	mov	r0, r8
 801a2f0:	4449      	add	r1, r9
 801a2f2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801a2f6:	f005 fdf5 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 801a2fa:	4605      	mov	r5, r0
 801a2fc:	f89a 1016 	ldrb.w	r1, [sl, #22]
 801a300:	4640      	mov	r0, r8
 801a302:	f7f8 fc57 	bl	8012bb4 <ucdr_serialize_uint8_t>
 801a306:	4028      	ands	r0, r5
 801a308:	b2c0      	uxtb	r0, r0
 801a30a:	e7c1      	b.n	801a290 <uxr_serialize_ActivityInfoVariant+0xa0>
 801a30c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801a310:	4640      	mov	r0, r8
 801a312:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a316:	f7f9 b989 	b.w	801362c <ucdr_serialize_int16_t>
 801a31a:	3401      	adds	r4, #1
 801a31c:	68f2      	ldr	r2, [r6, #12]
 801a31e:	42a2      	cmp	r2, r4
 801a320:	d8bc      	bhi.n	801a29c <uxr_serialize_ActivityInfoVariant+0xac>
 801a322:	4007      	ands	r7, r0
 801a324:	b2ff      	uxtb	r7, r7
 801a326:	e774      	b.n	801a212 <uxr_serialize_ActivityInfoVariant+0x22>
 801a328:	3401      	adds	r4, #1
 801a32a:	68f3      	ldr	r3, [r6, #12]
 801a32c:	3518      	adds	r5, #24
 801a32e:	429c      	cmp	r4, r3
 801a330:	d397      	bcc.n	801a262 <uxr_serialize_ActivityInfoVariant+0x72>
 801a332:	e76e      	b.n	801a212 <uxr_serialize_ActivityInfoVariant+0x22>

0801a334 <uxr_deserialize_BaseObjectReply>:
 801a334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a338:	2202      	movs	r2, #2
 801a33a:	4606      	mov	r6, r0
 801a33c:	460f      	mov	r7, r1
 801a33e:	f005 fe35 	bl	801ffac <ucdr_deserialize_array_uint8_t>
 801a342:	2202      	movs	r2, #2
 801a344:	4605      	mov	r5, r0
 801a346:	4630      	mov	r0, r6
 801a348:	18b9      	adds	r1, r7, r2
 801a34a:	f005 fe2f 	bl	801ffac <ucdr_deserialize_array_uint8_t>
 801a34e:	4680      	mov	r8, r0
 801a350:	1d39      	adds	r1, r7, #4
 801a352:	4630      	mov	r0, r6
 801a354:	f7f8 fc44 	bl	8012be0 <ucdr_deserialize_uint8_t>
 801a358:	ea05 0508 	and.w	r5, r5, r8
 801a35c:	4604      	mov	r4, r0
 801a35e:	1d79      	adds	r1, r7, #5
 801a360:	4630      	mov	r0, r6
 801a362:	402c      	ands	r4, r5
 801a364:	f7f8 fc3c 	bl	8012be0 <ucdr_deserialize_uint8_t>
 801a368:	4020      	ands	r0, r4
 801a36a:	b2c0      	uxtb	r0, r0
 801a36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a370 <uxr_serialize_ReadSpecification>:
 801a370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a372:	460e      	mov	r6, r1
 801a374:	4607      	mov	r7, r0
 801a376:	7809      	ldrb	r1, [r1, #0]
 801a378:	f7f8 fc1c 	bl	8012bb4 <ucdr_serialize_uint8_t>
 801a37c:	4604      	mov	r4, r0
 801a37e:	7871      	ldrb	r1, [r6, #1]
 801a380:	4638      	mov	r0, r7
 801a382:	f7f8 fc17 	bl	8012bb4 <ucdr_serialize_uint8_t>
 801a386:	4004      	ands	r4, r0
 801a388:	78b1      	ldrb	r1, [r6, #2]
 801a38a:	4638      	mov	r0, r7
 801a38c:	f7f8 fbe4 	bl	8012b58 <ucdr_serialize_bool>
 801a390:	78b3      	ldrb	r3, [r6, #2]
 801a392:	b2e4      	uxtb	r4, r4
 801a394:	4004      	ands	r4, r0
 801a396:	b943      	cbnz	r3, 801a3aa <uxr_serialize_ReadSpecification+0x3a>
 801a398:	7a31      	ldrb	r1, [r6, #8]
 801a39a:	4638      	mov	r0, r7
 801a39c:	f7f8 fbdc 	bl	8012b58 <ucdr_serialize_bool>
 801a3a0:	7a33      	ldrb	r3, [r6, #8]
 801a3a2:	4004      	ands	r4, r0
 801a3a4:	b93b      	cbnz	r3, 801a3b6 <uxr_serialize_ReadSpecification+0x46>
 801a3a6:	4620      	mov	r0, r4
 801a3a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3aa:	6871      	ldr	r1, [r6, #4]
 801a3ac:	4638      	mov	r0, r7
 801a3ae:	f005 fe65 	bl	802007c <ucdr_serialize_string>
 801a3b2:	4004      	ands	r4, r0
 801a3b4:	e7f0      	b.n	801a398 <uxr_serialize_ReadSpecification+0x28>
 801a3b6:	8971      	ldrh	r1, [r6, #10]
 801a3b8:	4638      	mov	r0, r7
 801a3ba:	f7f8 fc27 	bl	8012c0c <ucdr_serialize_uint16_t>
 801a3be:	4605      	mov	r5, r0
 801a3c0:	89b1      	ldrh	r1, [r6, #12]
 801a3c2:	4638      	mov	r0, r7
 801a3c4:	f7f8 fc22 	bl	8012c0c <ucdr_serialize_uint16_t>
 801a3c8:	4005      	ands	r5, r0
 801a3ca:	89f1      	ldrh	r1, [r6, #14]
 801a3cc:	4638      	mov	r0, r7
 801a3ce:	b2ed      	uxtb	r5, r5
 801a3d0:	f7f8 fc1c 	bl	8012c0c <ucdr_serialize_uint16_t>
 801a3d4:	8a31      	ldrh	r1, [r6, #16]
 801a3d6:	4025      	ands	r5, r4
 801a3d8:	4604      	mov	r4, r0
 801a3da:	4638      	mov	r0, r7
 801a3dc:	4025      	ands	r5, r4
 801a3de:	f7f8 fc15 	bl	8012c0c <ucdr_serialize_uint16_t>
 801a3e2:	ea00 0405 	and.w	r4, r0, r5
 801a3e6:	4620      	mov	r0, r4
 801a3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3ea:	bf00      	nop

0801a3ec <uxr_serialize_CREATE_CLIENT_Payload>:
 801a3ec:	f7ff b9ea 	b.w	80197c4 <uxr_serialize_CLIENT_Representation>

0801a3f0 <uxr_serialize_CREATE_Payload>:
 801a3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3f2:	2202      	movs	r2, #2
 801a3f4:	4607      	mov	r7, r0
 801a3f6:	460e      	mov	r6, r1
 801a3f8:	f005 fd74 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 801a3fc:	2202      	movs	r2, #2
 801a3fe:	4605      	mov	r5, r0
 801a400:	4638      	mov	r0, r7
 801a402:	18b1      	adds	r1, r6, r2
 801a404:	f005 fd6e 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 801a408:	7931      	ldrb	r1, [r6, #4]
 801a40a:	4604      	mov	r4, r0
 801a40c:	4638      	mov	r0, r7
 801a40e:	f7f8 fbd1 	bl	8012bb4 <ucdr_serialize_uint8_t>
 801a412:	b170      	cbz	r0, 801a432 <uxr_serialize_CREATE_Payload+0x42>
 801a414:	7933      	ldrb	r3, [r6, #4]
 801a416:	402c      	ands	r4, r5
 801a418:	3b01      	subs	r3, #1
 801a41a:	b2e4      	uxtb	r4, r4
 801a41c:	2b0d      	cmp	r3, #13
 801a41e:	d809      	bhi.n	801a434 <uxr_serialize_CREATE_Payload+0x44>
 801a420:	e8df f003 	tbb	[pc, r3]
 801a424:	23230a4c 	.word	0x23230a4c
 801a428:	0a0a0a0a 	.word	0x0a0a0a0a
 801a42c:	12121208 	.word	0x12121208
 801a430:	3e45      	.short	0x3e45
 801a432:	2400      	movs	r4, #0
 801a434:	4620      	mov	r0, r4
 801a436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a438:	f106 0108 	add.w	r1, r6, #8
 801a43c:	4638      	mov	r0, r7
 801a43e:	f7ff fac7 	bl	80199d0 <uxr_serialize_DATAWRITER_Representation>
 801a442:	4004      	ands	r4, r0
 801a444:	4620      	mov	r0, r4
 801a446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a448:	7a31      	ldrb	r1, [r6, #8]
 801a44a:	4638      	mov	r0, r7
 801a44c:	f7f8 fbb2 	bl	8012bb4 <ucdr_serialize_uint8_t>
 801a450:	2800      	cmp	r0, #0
 801a452:	d0ee      	beq.n	801a432 <uxr_serialize_CREATE_Payload+0x42>
 801a454:	7a33      	ldrb	r3, [r6, #8]
 801a456:	2b01      	cmp	r3, #1
 801a458:	d001      	beq.n	801a45e <uxr_serialize_CREATE_Payload+0x6e>
 801a45a:	2b02      	cmp	r3, #2
 801a45c:	d1ea      	bne.n	801a434 <uxr_serialize_CREATE_Payload+0x44>
 801a45e:	68f1      	ldr	r1, [r6, #12]
 801a460:	4638      	mov	r0, r7
 801a462:	f005 fe0b 	bl	802007c <ucdr_serialize_string>
 801a466:	4004      	ands	r4, r0
 801a468:	e7e4      	b.n	801a434 <uxr_serialize_CREATE_Payload+0x44>
 801a46a:	7a31      	ldrb	r1, [r6, #8]
 801a46c:	4638      	mov	r0, r7
 801a46e:	f7f8 fba1 	bl	8012bb4 <ucdr_serialize_uint8_t>
 801a472:	4605      	mov	r5, r0
 801a474:	b158      	cbz	r0, 801a48e <uxr_serialize_CREATE_Payload+0x9e>
 801a476:	7a33      	ldrb	r3, [r6, #8]
 801a478:	2b02      	cmp	r3, #2
 801a47a:	d034      	beq.n	801a4e6 <uxr_serialize_CREATE_Payload+0xf6>
 801a47c:	2b03      	cmp	r3, #3
 801a47e:	d106      	bne.n	801a48e <uxr_serialize_CREATE_Payload+0x9e>
 801a480:	68f2      	ldr	r2, [r6, #12]
 801a482:	f106 0110 	add.w	r1, r6, #16
 801a486:	4638      	mov	r0, r7
 801a488:	f7fc fc0e 	bl	8016ca8 <ucdr_serialize_sequence_uint8_t>
 801a48c:	4605      	mov	r5, r0
 801a48e:	2202      	movs	r2, #2
 801a490:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 801a494:	4638      	mov	r0, r7
 801a496:	f005 fd25 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 801a49a:	4028      	ands	r0, r5
 801a49c:	4004      	ands	r4, r0
 801a49e:	e7c9      	b.n	801a434 <uxr_serialize_CREATE_Payload+0x44>
 801a4a0:	f106 0108 	add.w	r1, r6, #8
 801a4a4:	4638      	mov	r0, r7
 801a4a6:	f7ff f98d 	bl	80197c4 <uxr_serialize_CLIENT_Representation>
 801a4aa:	4004      	ands	r4, r0
 801a4ac:	e7c2      	b.n	801a434 <uxr_serialize_CREATE_Payload+0x44>
 801a4ae:	f106 0108 	add.w	r1, r6, #8
 801a4b2:	4638      	mov	r0, r7
 801a4b4:	f7ff fa42 	bl	801993c <uxr_serialize_AGENT_Representation>
 801a4b8:	4004      	ands	r4, r0
 801a4ba:	e7bb      	b.n	801a434 <uxr_serialize_CREATE_Payload+0x44>
 801a4bc:	7a31      	ldrb	r1, [r6, #8]
 801a4be:	4638      	mov	r0, r7
 801a4c0:	f7f8 fb78 	bl	8012bb4 <ucdr_serialize_uint8_t>
 801a4c4:	4605      	mov	r5, r0
 801a4c6:	b130      	cbz	r0, 801a4d6 <uxr_serialize_CREATE_Payload+0xe6>
 801a4c8:	7a33      	ldrb	r3, [r6, #8]
 801a4ca:	2b02      	cmp	r3, #2
 801a4cc:	d011      	beq.n	801a4f2 <uxr_serialize_CREATE_Payload+0x102>
 801a4ce:	2b03      	cmp	r3, #3
 801a4d0:	d015      	beq.n	801a4fe <uxr_serialize_CREATE_Payload+0x10e>
 801a4d2:	2b01      	cmp	r3, #1
 801a4d4:	d00d      	beq.n	801a4f2 <uxr_serialize_CREATE_Payload+0x102>
 801a4d6:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801a4da:	4638      	mov	r0, r7
 801a4dc:	f7f9 f8a6 	bl	801362c <ucdr_serialize_int16_t>
 801a4e0:	4028      	ands	r0, r5
 801a4e2:	4004      	ands	r4, r0
 801a4e4:	e7a6      	b.n	801a434 <uxr_serialize_CREATE_Payload+0x44>
 801a4e6:	68f1      	ldr	r1, [r6, #12]
 801a4e8:	4638      	mov	r0, r7
 801a4ea:	f005 fdc7 	bl	802007c <ucdr_serialize_string>
 801a4ee:	4605      	mov	r5, r0
 801a4f0:	e7cd      	b.n	801a48e <uxr_serialize_CREATE_Payload+0x9e>
 801a4f2:	68f1      	ldr	r1, [r6, #12]
 801a4f4:	4638      	mov	r0, r7
 801a4f6:	f005 fdc1 	bl	802007c <ucdr_serialize_string>
 801a4fa:	4605      	mov	r5, r0
 801a4fc:	e7eb      	b.n	801a4d6 <uxr_serialize_CREATE_Payload+0xe6>
 801a4fe:	68f2      	ldr	r2, [r6, #12]
 801a500:	f106 0110 	add.w	r1, r6, #16
 801a504:	4638      	mov	r0, r7
 801a506:	f7fc fbcf 	bl	8016ca8 <ucdr_serialize_sequence_uint8_t>
 801a50a:	4605      	mov	r5, r0
 801a50c:	e7e3      	b.n	801a4d6 <uxr_serialize_CREATE_Payload+0xe6>
 801a50e:	bf00      	nop

0801a510 <uxr_serialize_GET_INFO_Payload>:
 801a510:	b570      	push	{r4, r5, r6, lr}
 801a512:	2202      	movs	r2, #2
 801a514:	4605      	mov	r5, r0
 801a516:	460e      	mov	r6, r1
 801a518:	f005 fce4 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 801a51c:	2202      	movs	r2, #2
 801a51e:	4604      	mov	r4, r0
 801a520:	4628      	mov	r0, r5
 801a522:	18b1      	adds	r1, r6, r2
 801a524:	f005 fcde 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 801a528:	4603      	mov	r3, r0
 801a52a:	6871      	ldr	r1, [r6, #4]
 801a52c:	4628      	mov	r0, r5
 801a52e:	401c      	ands	r4, r3
 801a530:	f7f8 fd56 	bl	8012fe0 <ucdr_serialize_uint32_t>
 801a534:	b2e4      	uxtb	r4, r4
 801a536:	4020      	ands	r0, r4
 801a538:	bd70      	pop	{r4, r5, r6, pc}
 801a53a:	bf00      	nop

0801a53c <uxr_deserialize_GET_INFO_Payload>:
 801a53c:	b570      	push	{r4, r5, r6, lr}
 801a53e:	2202      	movs	r2, #2
 801a540:	4605      	mov	r5, r0
 801a542:	460e      	mov	r6, r1
 801a544:	f005 fd32 	bl	801ffac <ucdr_deserialize_array_uint8_t>
 801a548:	2202      	movs	r2, #2
 801a54a:	4604      	mov	r4, r0
 801a54c:	4628      	mov	r0, r5
 801a54e:	18b1      	adds	r1, r6, r2
 801a550:	f005 fd2c 	bl	801ffac <ucdr_deserialize_array_uint8_t>
 801a554:	4603      	mov	r3, r0
 801a556:	1d31      	adds	r1, r6, #4
 801a558:	4628      	mov	r0, r5
 801a55a:	401c      	ands	r4, r3
 801a55c:	f7f8 fe70 	bl	8013240 <ucdr_deserialize_uint32_t>
 801a560:	b2e4      	uxtb	r4, r4
 801a562:	4020      	ands	r0, r4
 801a564:	bd70      	pop	{r4, r5, r6, pc}
 801a566:	bf00      	nop

0801a568 <uxr_serialize_DELETE_Payload>:
 801a568:	b570      	push	{r4, r5, r6, lr}
 801a56a:	2202      	movs	r2, #2
 801a56c:	4605      	mov	r5, r0
 801a56e:	460e      	mov	r6, r1
 801a570:	f005 fcb8 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 801a574:	2202      	movs	r2, #2
 801a576:	4604      	mov	r4, r0
 801a578:	4628      	mov	r0, r5
 801a57a:	18b1      	adds	r1, r6, r2
 801a57c:	f005 fcb2 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 801a580:	4020      	ands	r0, r4
 801a582:	b2c0      	uxtb	r0, r0
 801a584:	bd70      	pop	{r4, r5, r6, pc}
 801a586:	bf00      	nop

0801a588 <uxr_deserialize_STATUS_AGENT_Payload>:
 801a588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a58c:	460e      	mov	r6, r1
 801a58e:	4605      	mov	r5, r0
 801a590:	f7f8 fb26 	bl	8012be0 <ucdr_deserialize_uint8_t>
 801a594:	4604      	mov	r4, r0
 801a596:	1c71      	adds	r1, r6, #1
 801a598:	4628      	mov	r0, r5
 801a59a:	f7f8 fb21 	bl	8012be0 <ucdr_deserialize_uint8_t>
 801a59e:	2204      	movs	r2, #4
 801a5a0:	4681      	mov	r9, r0
 801a5a2:	4628      	mov	r0, r5
 801a5a4:	18b1      	adds	r1, r6, r2
 801a5a6:	f005 fd01 	bl	801ffac <ucdr_deserialize_array_uint8_t>
 801a5aa:	f106 0108 	add.w	r1, r6, #8
 801a5ae:	4680      	mov	r8, r0
 801a5b0:	2202      	movs	r2, #2
 801a5b2:	4628      	mov	r0, r5
 801a5b4:	f005 fcfa 	bl	801ffac <ucdr_deserialize_array_uint8_t>
 801a5b8:	ea04 0309 	and.w	r3, r4, r9
 801a5bc:	4607      	mov	r7, r0
 801a5be:	2202      	movs	r2, #2
 801a5c0:	b2db      	uxtb	r3, r3
 801a5c2:	f106 010a 	add.w	r1, r6, #10
 801a5c6:	4628      	mov	r0, r5
 801a5c8:	ea03 0408 	and.w	r4, r3, r8
 801a5cc:	f005 fcee 	bl	801ffac <ucdr_deserialize_array_uint8_t>
 801a5d0:	4603      	mov	r3, r0
 801a5d2:	4628      	mov	r0, r5
 801a5d4:	403c      	ands	r4, r7
 801a5d6:	f106 010c 	add.w	r1, r6, #12
 801a5da:	461d      	mov	r5, r3
 801a5dc:	f7f8 fad2 	bl	8012b84 <ucdr_deserialize_bool>
 801a5e0:	4025      	ands	r5, r4
 801a5e2:	4028      	ands	r0, r5
 801a5e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801a5e8 <uxr_deserialize_STATUS_Payload>:
 801a5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5ec:	2202      	movs	r2, #2
 801a5ee:	4606      	mov	r6, r0
 801a5f0:	460f      	mov	r7, r1
 801a5f2:	f005 fcdb 	bl	801ffac <ucdr_deserialize_array_uint8_t>
 801a5f6:	2202      	movs	r2, #2
 801a5f8:	4605      	mov	r5, r0
 801a5fa:	4630      	mov	r0, r6
 801a5fc:	18b9      	adds	r1, r7, r2
 801a5fe:	f005 fcd5 	bl	801ffac <ucdr_deserialize_array_uint8_t>
 801a602:	4680      	mov	r8, r0
 801a604:	1d39      	adds	r1, r7, #4
 801a606:	4630      	mov	r0, r6
 801a608:	f7f8 faea 	bl	8012be0 <ucdr_deserialize_uint8_t>
 801a60c:	ea05 0508 	and.w	r5, r5, r8
 801a610:	4604      	mov	r4, r0
 801a612:	1d79      	adds	r1, r7, #5
 801a614:	4630      	mov	r0, r6
 801a616:	402c      	ands	r4, r5
 801a618:	f7f8 fae2 	bl	8012be0 <ucdr_deserialize_uint8_t>
 801a61c:	4020      	ands	r0, r4
 801a61e:	b2c0      	uxtb	r0, r0
 801a620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a624 <uxr_serialize_INFO_Payload>:
 801a624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a628:	2202      	movs	r2, #2
 801a62a:	460c      	mov	r4, r1
 801a62c:	4605      	mov	r5, r0
 801a62e:	f005 fc59 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 801a632:	2202      	movs	r2, #2
 801a634:	4680      	mov	r8, r0
 801a636:	4628      	mov	r0, r5
 801a638:	18a1      	adds	r1, r4, r2
 801a63a:	f005 fc53 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 801a63e:	4607      	mov	r7, r0
 801a640:	7921      	ldrb	r1, [r4, #4]
 801a642:	4628      	mov	r0, r5
 801a644:	f7f8 fab6 	bl	8012bb4 <ucdr_serialize_uint8_t>
 801a648:	ea08 0807 	and.w	r8, r8, r7
 801a64c:	4606      	mov	r6, r0
 801a64e:	7961      	ldrb	r1, [r4, #5]
 801a650:	4628      	mov	r0, r5
 801a652:	ea06 0608 	and.w	r6, r6, r8
 801a656:	f7f8 faad 	bl	8012bb4 <ucdr_serialize_uint8_t>
 801a65a:	7a21      	ldrb	r1, [r4, #8]
 801a65c:	4030      	ands	r0, r6
 801a65e:	b2c7      	uxtb	r7, r0
 801a660:	4628      	mov	r0, r5
 801a662:	f7f8 fa79 	bl	8012b58 <ucdr_serialize_bool>
 801a666:	7a23      	ldrb	r3, [r4, #8]
 801a668:	4606      	mov	r6, r0
 801a66a:	b96b      	cbnz	r3, 801a688 <uxr_serialize_INFO_Payload+0x64>
 801a66c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 801a670:	4628      	mov	r0, r5
 801a672:	f7f8 fa71 	bl	8012b58 <ucdr_serialize_bool>
 801a676:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801a67a:	4030      	ands	r0, r6
 801a67c:	b2c6      	uxtb	r6, r0
 801a67e:	b983      	cbnz	r3, 801a6a2 <uxr_serialize_INFO_Payload+0x7e>
 801a680:	ea06 0007 	and.w	r0, r6, r7
 801a684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a688:	7b21      	ldrb	r1, [r4, #12]
 801a68a:	4628      	mov	r0, r5
 801a68c:	f7f8 fa92 	bl	8012bb4 <ucdr_serialize_uint8_t>
 801a690:	b188      	cbz	r0, 801a6b6 <uxr_serialize_INFO_Payload+0x92>
 801a692:	f104 010c 	add.w	r1, r4, #12
 801a696:	4628      	mov	r0, r5
 801a698:	f7ff f9c2 	bl	8019a20 <uxr_serialize_ObjectVariant.part.0>
 801a69c:	4030      	ands	r0, r6
 801a69e:	b2c6      	uxtb	r6, r0
 801a6a0:	e7e4      	b.n	801a66c <uxr_serialize_INFO_Payload+0x48>
 801a6a2:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801a6a6:	4628      	mov	r0, r5
 801a6a8:	f7ff fda2 	bl	801a1f0 <uxr_serialize_ActivityInfoVariant>
 801a6ac:	4006      	ands	r6, r0
 801a6ae:	ea06 0007 	and.w	r0, r6, r7
 801a6b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6b6:	4606      	mov	r6, r0
 801a6b8:	e7d8      	b.n	801a66c <uxr_serialize_INFO_Payload+0x48>
 801a6ba:	bf00      	nop

0801a6bc <uxr_serialize_READ_DATA_Payload>:
 801a6bc:	b570      	push	{r4, r5, r6, lr}
 801a6be:	2202      	movs	r2, #2
 801a6c0:	4605      	mov	r5, r0
 801a6c2:	460e      	mov	r6, r1
 801a6c4:	f005 fc0e 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 801a6c8:	2202      	movs	r2, #2
 801a6ca:	4604      	mov	r4, r0
 801a6cc:	4628      	mov	r0, r5
 801a6ce:	18b1      	adds	r1, r6, r2
 801a6d0:	f005 fc08 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 801a6d4:	4603      	mov	r3, r0
 801a6d6:	1d31      	adds	r1, r6, #4
 801a6d8:	4628      	mov	r0, r5
 801a6da:	401c      	ands	r4, r3
 801a6dc:	f7ff fe48 	bl	801a370 <uxr_serialize_ReadSpecification>
 801a6e0:	b2e4      	uxtb	r4, r4
 801a6e2:	4020      	ands	r0, r4
 801a6e4:	bd70      	pop	{r4, r5, r6, pc}
 801a6e6:	bf00      	nop

0801a6e8 <uxr_serialize_WRITE_DATA_Payload_Data>:
 801a6e8:	b570      	push	{r4, r5, r6, lr}
 801a6ea:	2202      	movs	r2, #2
 801a6ec:	4605      	mov	r5, r0
 801a6ee:	460e      	mov	r6, r1
 801a6f0:	f005 fbf8 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 801a6f4:	2202      	movs	r2, #2
 801a6f6:	4604      	mov	r4, r0
 801a6f8:	4628      	mov	r0, r5
 801a6fa:	18b1      	adds	r1, r6, r2
 801a6fc:	f005 fbf2 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 801a700:	4020      	ands	r0, r4
 801a702:	b2c0      	uxtb	r0, r0
 801a704:	bd70      	pop	{r4, r5, r6, pc}
 801a706:	bf00      	nop

0801a708 <uxr_serialize_ACKNACK_Payload>:
 801a708:	b570      	push	{r4, r5, r6, lr}
 801a70a:	460c      	mov	r4, r1
 801a70c:	4605      	mov	r5, r0
 801a70e:	460e      	mov	r6, r1
 801a710:	f834 1b02 	ldrh.w	r1, [r4], #2
 801a714:	f7f8 fa7a 	bl	8012c0c <ucdr_serialize_uint16_t>
 801a718:	2202      	movs	r2, #2
 801a71a:	4621      	mov	r1, r4
 801a71c:	4604      	mov	r4, r0
 801a71e:	4628      	mov	r0, r5
 801a720:	f005 fbe0 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 801a724:	4603      	mov	r3, r0
 801a726:	7931      	ldrb	r1, [r6, #4]
 801a728:	4628      	mov	r0, r5
 801a72a:	401c      	ands	r4, r3
 801a72c:	f7f8 fa42 	bl	8012bb4 <ucdr_serialize_uint8_t>
 801a730:	b2e4      	uxtb	r4, r4
 801a732:	4020      	ands	r0, r4
 801a734:	bd70      	pop	{r4, r5, r6, pc}
 801a736:	bf00      	nop

0801a738 <uxr_deserialize_ACKNACK_Payload>:
 801a738:	b570      	push	{r4, r5, r6, lr}
 801a73a:	460e      	mov	r6, r1
 801a73c:	4605      	mov	r5, r0
 801a73e:	f7f8 fb65 	bl	8012e0c <ucdr_deserialize_uint16_t>
 801a742:	2202      	movs	r2, #2
 801a744:	4604      	mov	r4, r0
 801a746:	4628      	mov	r0, r5
 801a748:	18b1      	adds	r1, r6, r2
 801a74a:	f005 fc2f 	bl	801ffac <ucdr_deserialize_array_uint8_t>
 801a74e:	4603      	mov	r3, r0
 801a750:	1d31      	adds	r1, r6, #4
 801a752:	4628      	mov	r0, r5
 801a754:	401c      	ands	r4, r3
 801a756:	f7f8 fa43 	bl	8012be0 <ucdr_deserialize_uint8_t>
 801a75a:	b2e4      	uxtb	r4, r4
 801a75c:	4020      	ands	r0, r4
 801a75e:	bd70      	pop	{r4, r5, r6, pc}

0801a760 <uxr_serialize_HEARTBEAT_Payload>:
 801a760:	b570      	push	{r4, r5, r6, lr}
 801a762:	460d      	mov	r5, r1
 801a764:	4606      	mov	r6, r0
 801a766:	8809      	ldrh	r1, [r1, #0]
 801a768:	f7f8 fa50 	bl	8012c0c <ucdr_serialize_uint16_t>
 801a76c:	8869      	ldrh	r1, [r5, #2]
 801a76e:	4604      	mov	r4, r0
 801a770:	4630      	mov	r0, r6
 801a772:	f7f8 fa4b 	bl	8012c0c <ucdr_serialize_uint16_t>
 801a776:	4603      	mov	r3, r0
 801a778:	7929      	ldrb	r1, [r5, #4]
 801a77a:	4630      	mov	r0, r6
 801a77c:	401c      	ands	r4, r3
 801a77e:	f7f8 fa19 	bl	8012bb4 <ucdr_serialize_uint8_t>
 801a782:	b2e4      	uxtb	r4, r4
 801a784:	4020      	ands	r0, r4
 801a786:	bd70      	pop	{r4, r5, r6, pc}

0801a788 <uxr_deserialize_HEARTBEAT_Payload>:
 801a788:	b570      	push	{r4, r5, r6, lr}
 801a78a:	460e      	mov	r6, r1
 801a78c:	4605      	mov	r5, r0
 801a78e:	f7f8 fb3d 	bl	8012e0c <ucdr_deserialize_uint16_t>
 801a792:	4604      	mov	r4, r0
 801a794:	1cb1      	adds	r1, r6, #2
 801a796:	4628      	mov	r0, r5
 801a798:	f7f8 fb38 	bl	8012e0c <ucdr_deserialize_uint16_t>
 801a79c:	4603      	mov	r3, r0
 801a79e:	1d31      	adds	r1, r6, #4
 801a7a0:	4628      	mov	r0, r5
 801a7a2:	401c      	ands	r4, r3
 801a7a4:	f7f8 fa1c 	bl	8012be0 <ucdr_deserialize_uint8_t>
 801a7a8:	b2e4      	uxtb	r4, r4
 801a7aa:	4020      	ands	r0, r4
 801a7ac:	bd70      	pop	{r4, r5, r6, pc}
 801a7ae:	bf00      	nop

0801a7b0 <uxr_serialize_TIMESTAMP_Payload>:
 801a7b0:	b570      	push	{r4, r5, r6, lr}
 801a7b2:	460d      	mov	r5, r1
 801a7b4:	4606      	mov	r6, r0
 801a7b6:	6809      	ldr	r1, [r1, #0]
 801a7b8:	f7f9 f82c 	bl	8013814 <ucdr_serialize_int32_t>
 801a7bc:	4604      	mov	r4, r0
 801a7be:	6869      	ldr	r1, [r5, #4]
 801a7c0:	4630      	mov	r0, r6
 801a7c2:	f7f8 fc0d 	bl	8012fe0 <ucdr_serialize_uint32_t>
 801a7c6:	4020      	ands	r0, r4
 801a7c8:	b2c0      	uxtb	r0, r0
 801a7ca:	bd70      	pop	{r4, r5, r6, pc}

0801a7cc <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801a7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7d0:	460e      	mov	r6, r1
 801a7d2:	4605      	mov	r5, r0
 801a7d4:	f7f9 f8b6 	bl	8013944 <ucdr_deserialize_int32_t>
 801a7d8:	4607      	mov	r7, r0
 801a7da:	1d31      	adds	r1, r6, #4
 801a7dc:	4628      	mov	r0, r5
 801a7de:	f7f8 fd2f 	bl	8013240 <ucdr_deserialize_uint32_t>
 801a7e2:	4680      	mov	r8, r0
 801a7e4:	f106 0108 	add.w	r1, r6, #8
 801a7e8:	4628      	mov	r0, r5
 801a7ea:	f7f9 f8ab 	bl	8013944 <ucdr_deserialize_int32_t>
 801a7ee:	ea07 0708 	and.w	r7, r7, r8
 801a7f2:	4604      	mov	r4, r0
 801a7f4:	f106 010c 	add.w	r1, r6, #12
 801a7f8:	4628      	mov	r0, r5
 801a7fa:	403c      	ands	r4, r7
 801a7fc:	f7f8 fd20 	bl	8013240 <ucdr_deserialize_uint32_t>
 801a800:	f106 0110 	add.w	r1, r6, #16
 801a804:	4004      	ands	r4, r0
 801a806:	4628      	mov	r0, r5
 801a808:	f7f9 f89c 	bl	8013944 <ucdr_deserialize_int32_t>
 801a80c:	4603      	mov	r3, r0
 801a80e:	b2e4      	uxtb	r4, r4
 801a810:	4628      	mov	r0, r5
 801a812:	461d      	mov	r5, r3
 801a814:	f106 0114 	add.w	r1, r6, #20
 801a818:	f7f8 fd12 	bl	8013240 <ucdr_deserialize_uint32_t>
 801a81c:	402c      	ands	r4, r5
 801a81e:	4020      	ands	r0, r4
 801a820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a824 <uxr_serialize_SampleIdentity>:
 801a824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a828:	4604      	mov	r4, r0
 801a82a:	460d      	mov	r5, r1
 801a82c:	220c      	movs	r2, #12
 801a82e:	f005 fb59 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 801a832:	2203      	movs	r2, #3
 801a834:	f105 010c 	add.w	r1, r5, #12
 801a838:	4607      	mov	r7, r0
 801a83a:	4620      	mov	r0, r4
 801a83c:	f005 fb52 	bl	801fee4 <ucdr_serialize_array_uint8_t>
 801a840:	7be9      	ldrb	r1, [r5, #15]
 801a842:	4680      	mov	r8, r0
 801a844:	4620      	mov	r0, r4
 801a846:	f7f8 f9b5 	bl	8012bb4 <ucdr_serialize_uint8_t>
 801a84a:	6929      	ldr	r1, [r5, #16]
 801a84c:	4606      	mov	r6, r0
 801a84e:	4620      	mov	r0, r4
 801a850:	f7f8 ffe0 	bl	8013814 <ucdr_serialize_int32_t>
 801a854:	ea07 0708 	and.w	r7, r7, r8
 801a858:	4603      	mov	r3, r0
 801a85a:	4620      	mov	r0, r4
 801a85c:	403e      	ands	r6, r7
 801a85e:	6969      	ldr	r1, [r5, #20]
 801a860:	461c      	mov	r4, r3
 801a862:	f7f8 fbbd 	bl	8012fe0 <ucdr_serialize_uint32_t>
 801a866:	4034      	ands	r4, r6
 801a868:	4020      	ands	r0, r4
 801a86a:	b2c0      	uxtb	r0, r0
 801a86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a870 <uxr_deserialize_SampleIdentity>:
 801a870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a874:	4604      	mov	r4, r0
 801a876:	460d      	mov	r5, r1
 801a878:	220c      	movs	r2, #12
 801a87a:	f005 fb97 	bl	801ffac <ucdr_deserialize_array_uint8_t>
 801a87e:	2203      	movs	r2, #3
 801a880:	f105 010c 	add.w	r1, r5, #12
 801a884:	4607      	mov	r7, r0
 801a886:	4620      	mov	r0, r4
 801a888:	f005 fb90 	bl	801ffac <ucdr_deserialize_array_uint8_t>
 801a88c:	f105 010f 	add.w	r1, r5, #15
 801a890:	4680      	mov	r8, r0
 801a892:	4620      	mov	r0, r4
 801a894:	f7f8 f9a4 	bl	8012be0 <ucdr_deserialize_uint8_t>
 801a898:	f105 0110 	add.w	r1, r5, #16
 801a89c:	4606      	mov	r6, r0
 801a89e:	4620      	mov	r0, r4
 801a8a0:	f7f9 f850 	bl	8013944 <ucdr_deserialize_int32_t>
 801a8a4:	ea07 0708 	and.w	r7, r7, r8
 801a8a8:	4603      	mov	r3, r0
 801a8aa:	4620      	mov	r0, r4
 801a8ac:	403e      	ands	r6, r7
 801a8ae:	f105 0114 	add.w	r1, r5, #20
 801a8b2:	461c      	mov	r4, r3
 801a8b4:	f7f8 fcc4 	bl	8013240 <ucdr_deserialize_uint32_t>
 801a8b8:	4034      	ands	r4, r6
 801a8ba:	4020      	ands	r0, r4
 801a8bc:	b2c0      	uxtb	r0, r0
 801a8be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a8c2:	bf00      	nop

0801a8c4 <rcl_client_get_rmw_handle>:
 801a8c4:	b118      	cbz	r0, 801a8ce <rcl_client_get_rmw_handle+0xa>
 801a8c6:	6800      	ldr	r0, [r0, #0]
 801a8c8:	b108      	cbz	r0, 801a8ce <rcl_client_get_rmw_handle+0xa>
 801a8ca:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801a8ce:	4770      	bx	lr

0801a8d0 <rcl_send_request>:
 801a8d0:	b570      	push	{r4, r5, r6, lr}
 801a8d2:	b082      	sub	sp, #8
 801a8d4:	b1f8      	cbz	r0, 801a916 <rcl_send_request+0x46>
 801a8d6:	4604      	mov	r4, r0
 801a8d8:	6800      	ldr	r0, [r0, #0]
 801a8da:	b1e0      	cbz	r0, 801a916 <rcl_send_request+0x46>
 801a8dc:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 801a8e0:	b1cb      	cbz	r3, 801a916 <rcl_send_request+0x46>
 801a8e2:	460e      	mov	r6, r1
 801a8e4:	b1e1      	cbz	r1, 801a920 <rcl_send_request+0x50>
 801a8e6:	4615      	mov	r5, r2
 801a8e8:	b1d2      	cbz	r2, 801a920 <rcl_send_request+0x50>
 801a8ea:	2105      	movs	r1, #5
 801a8ec:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801a8f0:	f003 f8b6 	bl	801da60 <__atomic_load_8>
 801a8f4:	4602      	mov	r2, r0
 801a8f6:	460b      	mov	r3, r1
 801a8f8:	4631      	mov	r1, r6
 801a8fa:	e9c5 2300 	strd	r2, r3, [r5]
 801a8fe:	6823      	ldr	r3, [r4, #0]
 801a900:	462a      	mov	r2, r5
 801a902:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801a906:	f004 faa1 	bl	801ee4c <rmw_send_request>
 801a90a:	4606      	mov	r6, r0
 801a90c:	b160      	cbz	r0, 801a928 <rcl_send_request+0x58>
 801a90e:	2601      	movs	r6, #1
 801a910:	4630      	mov	r0, r6
 801a912:	b002      	add	sp, #8
 801a914:	bd70      	pop	{r4, r5, r6, pc}
 801a916:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801a91a:	4630      	mov	r0, r6
 801a91c:	b002      	add	sp, #8
 801a91e:	bd70      	pop	{r4, r5, r6, pc}
 801a920:	260b      	movs	r6, #11
 801a922:	4630      	mov	r0, r6
 801a924:	b002      	add	sp, #8
 801a926:	bd70      	pop	{r4, r5, r6, pc}
 801a928:	6820      	ldr	r0, [r4, #0]
 801a92a:	2105      	movs	r1, #5
 801a92c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a930:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801a934:	9100      	str	r1, [sp, #0]
 801a936:	f003 f8ff 	bl	801db38 <__atomic_exchange_8>
 801a93a:	4630      	mov	r0, r6
 801a93c:	b002      	add	sp, #8
 801a93e:	bd70      	pop	{r4, r5, r6, pc}

0801a940 <rcl_take_response>:
 801a940:	b570      	push	{r4, r5, r6, lr}
 801a942:	468e      	mov	lr, r1
 801a944:	b08c      	sub	sp, #48	@ 0x30
 801a946:	460c      	mov	r4, r1
 801a948:	4616      	mov	r6, r2
 801a94a:	f10d 0c18 	add.w	ip, sp, #24
 801a94e:	4605      	mov	r5, r0
 801a950:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a954:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a958:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801a95c:	e88c 0003 	stmia.w	ip, {r0, r1}
 801a960:	b35d      	cbz	r5, 801a9ba <rcl_take_response+0x7a>
 801a962:	682b      	ldr	r3, [r5, #0]
 801a964:	b34b      	cbz	r3, 801a9ba <rcl_take_response+0x7a>
 801a966:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801a96a:	b330      	cbz	r0, 801a9ba <rcl_take_response+0x7a>
 801a96c:	b346      	cbz	r6, 801a9c0 <rcl_take_response+0x80>
 801a96e:	2300      	movs	r3, #0
 801a970:	4632      	mov	r2, r6
 801a972:	a902      	add	r1, sp, #8
 801a974:	f88d 3007 	strb.w	r3, [sp, #7]
 801a978:	f10d 0307 	add.w	r3, sp, #7
 801a97c:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 801a9c8 <rcl_take_response+0x88>
 801a980:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a984:	ed8d 7b04 	vstr	d7, [sp, #16]
 801a988:	f004 fb68 	bl	801f05c <rmw_take_response>
 801a98c:	4605      	mov	r5, r0
 801a98e:	b9c8      	cbnz	r0, 801a9c4 <rcl_take_response+0x84>
 801a990:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801a994:	f240 13f5 	movw	r3, #501	@ 0x1f5
 801a998:	2a00      	cmp	r2, #0
 801a99a:	bf08      	it	eq
 801a99c:	461d      	moveq	r5, r3
 801a99e:	f10d 0e18 	add.w	lr, sp, #24
 801a9a2:	46a4      	mov	ip, r4
 801a9a4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a9a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a9ac:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801a9b0:	e88c 0003 	stmia.w	ip, {r0, r1}
 801a9b4:	4628      	mov	r0, r5
 801a9b6:	b00c      	add	sp, #48	@ 0x30
 801a9b8:	bd70      	pop	{r4, r5, r6, pc}
 801a9ba:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801a9be:	e7ee      	b.n	801a99e <rcl_take_response+0x5e>
 801a9c0:	250b      	movs	r5, #11
 801a9c2:	e7ec      	b.n	801a99e <rcl_take_response+0x5e>
 801a9c4:	2501      	movs	r5, #1
 801a9c6:	e7ea      	b.n	801a99e <rcl_take_response+0x5e>
	...

0801a9d0 <rcl_client_is_valid>:
 801a9d0:	b130      	cbz	r0, 801a9e0 <rcl_client_is_valid+0x10>
 801a9d2:	6800      	ldr	r0, [r0, #0]
 801a9d4:	b120      	cbz	r0, 801a9e0 <rcl_client_is_valid+0x10>
 801a9d6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801a9da:	3800      	subs	r0, #0
 801a9dc:	bf18      	it	ne
 801a9de:	2001      	movne	r0, #1
 801a9e0:	4770      	bx	lr
 801a9e2:	bf00      	nop

0801a9e4 <rcl_convert_rmw_ret_to_rcl_ret>:
 801a9e4:	280b      	cmp	r0, #11
 801a9e6:	dc0d      	bgt.n	801aa04 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801a9e8:	2800      	cmp	r0, #0
 801a9ea:	db09      	blt.n	801aa00 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801a9ec:	280b      	cmp	r0, #11
 801a9ee:	d807      	bhi.n	801aa00 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801a9f0:	e8df f000 	tbb	[pc, r0]
 801a9f4:	07060607 	.word	0x07060607
 801a9f8:	06060606 	.word	0x06060606
 801a9fc:	07070606 	.word	0x07070606
 801aa00:	2001      	movs	r0, #1
 801aa02:	4770      	bx	lr
 801aa04:	28cb      	cmp	r0, #203	@ 0xcb
 801aa06:	bf18      	it	ne
 801aa08:	2001      	movne	r0, #1
 801aa0a:	4770      	bx	lr

0801aa0c <rcl_get_zero_initialized_context>:
 801aa0c:	4a03      	ldr	r2, [pc, #12]	@ (801aa1c <rcl_get_zero_initialized_context+0x10>)
 801aa0e:	4603      	mov	r3, r0
 801aa10:	e892 0003 	ldmia.w	r2, {r0, r1}
 801aa14:	e883 0003 	stmia.w	r3, {r0, r1}
 801aa18:	4618      	mov	r0, r3
 801aa1a:	4770      	bx	lr
 801aa1c:	08025234 	.word	0x08025234

0801aa20 <rcl_context_is_valid>:
 801aa20:	b118      	cbz	r0, 801aa2a <rcl_context_is_valid+0xa>
 801aa22:	6840      	ldr	r0, [r0, #4]
 801aa24:	3800      	subs	r0, #0
 801aa26:	bf18      	it	ne
 801aa28:	2001      	movne	r0, #1
 801aa2a:	4770      	bx	lr

0801aa2c <__cleanup_context>:
 801aa2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aa30:	4606      	mov	r6, r0
 801aa32:	2300      	movs	r3, #0
 801aa34:	6800      	ldr	r0, [r0, #0]
 801aa36:	6073      	str	r3, [r6, #4]
 801aa38:	2800      	cmp	r0, #0
 801aa3a:	d049      	beq.n	801aad0 <__cleanup_context+0xa4>
 801aa3c:	6947      	ldr	r7, [r0, #20]
 801aa3e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801aa42:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801aa46:	b137      	cbz	r7, 801aa56 <__cleanup_context+0x2a>
 801aa48:	3014      	adds	r0, #20
 801aa4a:	f000 f9bd 	bl	801adc8 <rcl_init_options_fini>
 801aa4e:	4607      	mov	r7, r0
 801aa50:	2800      	cmp	r0, #0
 801aa52:	d144      	bne.n	801aade <__cleanup_context+0xb2>
 801aa54:	6830      	ldr	r0, [r6, #0]
 801aa56:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801aa58:	b143      	cbz	r3, 801aa6c <__cleanup_context+0x40>
 801aa5a:	3028      	adds	r0, #40	@ 0x28
 801aa5c:	f004 f83c 	bl	801ead8 <rmw_context_fini>
 801aa60:	b118      	cbz	r0, 801aa6a <__cleanup_context+0x3e>
 801aa62:	2f00      	cmp	r7, #0
 801aa64:	d03e      	beq.n	801aae4 <__cleanup_context+0xb8>
 801aa66:	f7fa fcd3 	bl	8015410 <rcutils_reset_error>
 801aa6a:	6830      	ldr	r0, [r6, #0]
 801aa6c:	6a03      	ldr	r3, [r0, #32]
 801aa6e:	b1db      	cbz	r3, 801aaa8 <__cleanup_context+0x7c>
 801aa70:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801aa74:	2a01      	cmp	r2, #1
 801aa76:	f17c 0100 	sbcs.w	r1, ip, #0
 801aa7a:	db11      	blt.n	801aaa0 <__cleanup_context+0x74>
 801aa7c:	2400      	movs	r4, #0
 801aa7e:	4625      	mov	r5, r4
 801aa80:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801aa84:	4649      	mov	r1, r9
 801aa86:	b1b8      	cbz	r0, 801aab8 <__cleanup_context+0x8c>
 801aa88:	47c0      	blx	r8
 801aa8a:	6833      	ldr	r3, [r6, #0]
 801aa8c:	3401      	adds	r4, #1
 801aa8e:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801aa92:	f145 0500 	adc.w	r5, r5, #0
 801aa96:	6a1b      	ldr	r3, [r3, #32]
 801aa98:	4294      	cmp	r4, r2
 801aa9a:	eb75 010c 	sbcs.w	r1, r5, ip
 801aa9e:	dbef      	blt.n	801aa80 <__cleanup_context+0x54>
 801aaa0:	4618      	mov	r0, r3
 801aaa2:	4649      	mov	r1, r9
 801aaa4:	47c0      	blx	r8
 801aaa6:	6830      	ldr	r0, [r6, #0]
 801aaa8:	4649      	mov	r1, r9
 801aaaa:	47c0      	blx	r8
 801aaac:	2300      	movs	r3, #0
 801aaae:	4638      	mov	r0, r7
 801aab0:	e9c6 3300 	strd	r3, r3, [r6]
 801aab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aab8:	3401      	adds	r4, #1
 801aaba:	f145 0500 	adc.w	r5, r5, #0
 801aabe:	4294      	cmp	r4, r2
 801aac0:	eb75 010c 	sbcs.w	r1, r5, ip
 801aac4:	dbdc      	blt.n	801aa80 <__cleanup_context+0x54>
 801aac6:	4618      	mov	r0, r3
 801aac8:	4649      	mov	r1, r9
 801aaca:	47c0      	blx	r8
 801aacc:	6830      	ldr	r0, [r6, #0]
 801aace:	e7eb      	b.n	801aaa8 <__cleanup_context+0x7c>
 801aad0:	4607      	mov	r7, r0
 801aad2:	2300      	movs	r3, #0
 801aad4:	4638      	mov	r0, r7
 801aad6:	e9c6 3300 	strd	r3, r3, [r6]
 801aada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aade:	f7fa fc97 	bl	8015410 <rcutils_reset_error>
 801aae2:	e7b7      	b.n	801aa54 <__cleanup_context+0x28>
 801aae4:	f7ff ff7e 	bl	801a9e4 <rcl_convert_rmw_ret_to_rcl_ret>
 801aae8:	4607      	mov	r7, r0
 801aaea:	e7bc      	b.n	801aa66 <__cleanup_context+0x3a>

0801aaec <rcl_init>:
 801aaec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aaf0:	1e05      	subs	r5, r0, #0
 801aaf2:	b09e      	sub	sp, #120	@ 0x78
 801aaf4:	460e      	mov	r6, r1
 801aaf6:	4690      	mov	r8, r2
 801aaf8:	461f      	mov	r7, r3
 801aafa:	f340 809f 	ble.w	801ac3c <rcl_init+0x150>
 801aafe:	2900      	cmp	r1, #0
 801ab00:	f000 809f 	beq.w	801ac42 <rcl_init+0x156>
 801ab04:	f1a1 0e04 	sub.w	lr, r1, #4
 801ab08:	f04f 0c00 	mov.w	ip, #0
 801ab0c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 801ab10:	f10c 0c01 	add.w	ip, ip, #1
 801ab14:	2c00      	cmp	r4, #0
 801ab16:	f000 8094 	beq.w	801ac42 <rcl_init+0x156>
 801ab1a:	4565      	cmp	r5, ip
 801ab1c:	d1f6      	bne.n	801ab0c <rcl_init+0x20>
 801ab1e:	f1b8 0f00 	cmp.w	r8, #0
 801ab22:	f000 808e 	beq.w	801ac42 <rcl_init+0x156>
 801ab26:	f8d8 4000 	ldr.w	r4, [r8]
 801ab2a:	2c00      	cmp	r4, #0
 801ab2c:	f000 8089 	beq.w	801ac42 <rcl_init+0x156>
 801ab30:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 801ab34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ab36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ab3a:	6823      	ldr	r3, [r4, #0]
 801ab3c:	a819      	add	r0, sp, #100	@ 0x64
 801ab3e:	f8cc 3000 	str.w	r3, [ip]
 801ab42:	f7fa fc41 	bl	80153c8 <rcutils_allocator_is_valid>
 801ab46:	f080 0001 	eor.w	r0, r0, #1
 801ab4a:	b2c0      	uxtb	r0, r0
 801ab4c:	2800      	cmp	r0, #0
 801ab4e:	d178      	bne.n	801ac42 <rcl_init+0x156>
 801ab50:	2f00      	cmp	r7, #0
 801ab52:	d076      	beq.n	801ac42 <rcl_init+0x156>
 801ab54:	683b      	ldr	r3, [r7, #0]
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	d178      	bne.n	801ac4c <rcl_init+0x160>
 801ab5a:	2178      	movs	r1, #120	@ 0x78
 801ab5c:	2001      	movs	r0, #1
 801ab5e:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801ab62:	4798      	blx	r3
 801ab64:	4604      	mov	r4, r0
 801ab66:	6038      	str	r0, [r7, #0]
 801ab68:	2800      	cmp	r0, #0
 801ab6a:	f000 80b6 	beq.w	801acda <rcl_init+0x1ee>
 801ab6e:	a802      	add	r0, sp, #8
 801ab70:	f003 faea 	bl	801e148 <rmw_get_zero_initialized_context>
 801ab74:	a902      	add	r1, sp, #8
 801ab76:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801ab7a:	2250      	movs	r2, #80	@ 0x50
 801ab7c:	f007 fc47 	bl	802240e <memcpy>
 801ab80:	ac19      	add	r4, sp, #100	@ 0x64
 801ab82:	f8d7 e000 	ldr.w	lr, [r7]
 801ab86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ab88:	46f4      	mov	ip, lr
 801ab8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ab8e:	6823      	ldr	r3, [r4, #0]
 801ab90:	f10e 0114 	add.w	r1, lr, #20
 801ab94:	4640      	mov	r0, r8
 801ab96:	f8cc 3000 	str.w	r3, [ip]
 801ab9a:	f000 f93f 	bl	801ae1c <rcl_init_options_copy>
 801ab9e:	4604      	mov	r4, r0
 801aba0:	2800      	cmp	r0, #0
 801aba2:	d144      	bne.n	801ac2e <rcl_init+0x142>
 801aba4:	f8d7 9000 	ldr.w	r9, [r7]
 801aba8:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801abac:	f8c9 0020 	str.w	r0, [r9, #32]
 801abb0:	f8c9 5018 	str.w	r5, [r9, #24]
 801abb4:	f8c9 801c 	str.w	r8, [r9, #28]
 801abb8:	2d00      	cmp	r5, #0
 801abba:	d04e      	beq.n	801ac5a <rcl_init+0x16e>
 801abbc:	2e00      	cmp	r6, #0
 801abbe:	d04c      	beq.n	801ac5a <rcl_init+0x16e>
 801abc0:	2104      	movs	r1, #4
 801abc2:	4628      	mov	r0, r5
 801abc4:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801abc8:	4798      	blx	r3
 801abca:	f8c9 0020 	str.w	r0, [r9, #32]
 801abce:	f8d7 9000 	ldr.w	r9, [r7]
 801abd2:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801abd6:	46ca      	mov	sl, r9
 801abd8:	b343      	cbz	r3, 801ac2c <rcl_init+0x140>
 801abda:	2d01      	cmp	r5, #1
 801abdc:	f178 0300 	sbcs.w	r3, r8, #0
 801abe0:	db3b      	blt.n	801ac5a <rcl_init+0x16e>
 801abe2:	2400      	movs	r4, #0
 801abe4:	3e04      	subs	r6, #4
 801abe6:	46a1      	mov	r9, r4
 801abe8:	e00b      	b.n	801ac02 <rcl_init+0x116>
 801abea:	6831      	ldr	r1, [r6, #0]
 801abec:	f007 fc0f 	bl	802240e <memcpy>
 801abf0:	3401      	adds	r4, #1
 801abf2:	f149 0900 	adc.w	r9, r9, #0
 801abf6:	45c8      	cmp	r8, r9
 801abf8:	bf08      	it	eq
 801abfa:	42a5      	cmpeq	r5, r4
 801abfc:	d02b      	beq.n	801ac56 <rcl_init+0x16a>
 801abfe:	f8d7 a000 	ldr.w	sl, [r7]
 801ac02:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801ac06:	f7e5 fb75 	bl	80002f4 <strlen>
 801ac0a:	1c42      	adds	r2, r0, #1
 801ac0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ac0e:	4610      	mov	r0, r2
 801ac10:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801ac12:	f8da a020 	ldr.w	sl, [sl, #32]
 801ac16:	9201      	str	r2, [sp, #4]
 801ac18:	4798      	blx	r3
 801ac1a:	683b      	ldr	r3, [r7, #0]
 801ac1c:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801ac20:	6a1b      	ldr	r3, [r3, #32]
 801ac22:	9a01      	ldr	r2, [sp, #4]
 801ac24:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ac28:	2800      	cmp	r0, #0
 801ac2a:	d1de      	bne.n	801abea <rcl_init+0xfe>
 801ac2c:	240a      	movs	r4, #10
 801ac2e:	4638      	mov	r0, r7
 801ac30:	f7ff fefc 	bl	801aa2c <__cleanup_context>
 801ac34:	4620      	mov	r0, r4
 801ac36:	b01e      	add	sp, #120	@ 0x78
 801ac38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac3c:	2900      	cmp	r1, #0
 801ac3e:	f43f af6e 	beq.w	801ab1e <rcl_init+0x32>
 801ac42:	240b      	movs	r4, #11
 801ac44:	4620      	mov	r0, r4
 801ac46:	b01e      	add	sp, #120	@ 0x78
 801ac48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac4c:	2464      	movs	r4, #100	@ 0x64
 801ac4e:	4620      	mov	r0, r4
 801ac50:	b01e      	add	sp, #120	@ 0x78
 801ac52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac56:	f8d7 9000 	ldr.w	r9, [r7]
 801ac5a:	4926      	ldr	r1, [pc, #152]	@ (801acf4 <rcl_init+0x208>)
 801ac5c:	680b      	ldr	r3, [r1, #0]
 801ac5e:	3301      	adds	r3, #1
 801ac60:	d036      	beq.n	801acd0 <rcl_init+0x1e4>
 801ac62:	461a      	mov	r2, r3
 801ac64:	2400      	movs	r4, #0
 801ac66:	600b      	str	r3, [r1, #0]
 801ac68:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801ac6c:	607b      	str	r3, [r7, #4]
 801ac6e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801ac70:	3301      	adds	r3, #1
 801ac72:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801ac76:	d034      	beq.n	801ace2 <rcl_init+0x1f6>
 801ac78:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 801ac7c:	b93b      	cbnz	r3, 801ac8e <rcl_init+0x1a2>
 801ac7e:	3030      	adds	r0, #48	@ 0x30
 801ac80:	f000 f93a 	bl	801aef8 <rcl_get_localhost_only>
 801ac84:	4604      	mov	r4, r0
 801ac86:	2800      	cmp	r0, #0
 801ac88:	d1d1      	bne.n	801ac2e <rcl_init+0x142>
 801ac8a:	683b      	ldr	r3, [r7, #0]
 801ac8c:	6958      	ldr	r0, [r3, #20]
 801ac8e:	aa18      	add	r2, sp, #96	@ 0x60
 801ac90:	a917      	add	r1, sp, #92	@ 0x5c
 801ac92:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801ac94:	f001 fb6e 	bl	801c374 <rcl_validate_enclave_name>
 801ac98:	4604      	mov	r4, r0
 801ac9a:	2800      	cmp	r0, #0
 801ac9c:	d1c7      	bne.n	801ac2e <rcl_init+0x142>
 801ac9e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801aca0:	b9eb      	cbnz	r3, 801acde <rcl_init+0x1f2>
 801aca2:	6839      	ldr	r1, [r7, #0]
 801aca4:	694b      	ldr	r3, [r1, #20]
 801aca6:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801acaa:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801acac:	f000 fc72 	bl	801b594 <rcl_get_security_options_from_environment>
 801acb0:	4604      	mov	r4, r0
 801acb2:	2800      	cmp	r0, #0
 801acb4:	d1bb      	bne.n	801ac2e <rcl_init+0x142>
 801acb6:	6839      	ldr	r1, [r7, #0]
 801acb8:	6948      	ldr	r0, [r1, #20]
 801acba:	3128      	adds	r1, #40	@ 0x28
 801acbc:	3018      	adds	r0, #24
 801acbe:	f003 fdd5 	bl	801e86c <rmw_init>
 801acc2:	4604      	mov	r4, r0
 801acc4:	2800      	cmp	r0, #0
 801acc6:	d0bd      	beq.n	801ac44 <rcl_init+0x158>
 801acc8:	f7ff fe8c 	bl	801a9e4 <rcl_convert_rmw_ret_to_rcl_ret>
 801accc:	4604      	mov	r4, r0
 801acce:	e7ae      	b.n	801ac2e <rcl_init+0x142>
 801acd0:	2201      	movs	r2, #1
 801acd2:	461c      	mov	r4, r3
 801acd4:	600a      	str	r2, [r1, #0]
 801acd6:	4613      	mov	r3, r2
 801acd8:	e7c6      	b.n	801ac68 <rcl_init+0x17c>
 801acda:	240a      	movs	r4, #10
 801acdc:	e7b2      	b.n	801ac44 <rcl_init+0x158>
 801acde:	2401      	movs	r4, #1
 801ace0:	e7a5      	b.n	801ac2e <rcl_init+0x142>
 801ace2:	3024      	adds	r0, #36	@ 0x24
 801ace4:	f006 f87c 	bl	8020de0 <rcl_get_default_domain_id>
 801ace8:	4604      	mov	r4, r0
 801acea:	2800      	cmp	r0, #0
 801acec:	d19f      	bne.n	801ac2e <rcl_init+0x142>
 801acee:	683b      	ldr	r3, [r7, #0]
 801acf0:	6958      	ldr	r0, [r3, #20]
 801acf2:	e7c1      	b.n	801ac78 <rcl_init+0x18c>
 801acf4:	24069278 	.word	0x24069278

0801acf8 <rcl_get_zero_initialized_init_options>:
 801acf8:	2000      	movs	r0, #0
 801acfa:	4770      	bx	lr

0801acfc <rcl_init_options_init>:
 801acfc:	b084      	sub	sp, #16
 801acfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ad00:	b097      	sub	sp, #92	@ 0x5c
 801ad02:	ae1d      	add	r6, sp, #116	@ 0x74
 801ad04:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 801ad08:	2800      	cmp	r0, #0
 801ad0a:	d058      	beq.n	801adbe <rcl_init_options_init+0xc2>
 801ad0c:	6803      	ldr	r3, [r0, #0]
 801ad0e:	4605      	mov	r5, r0
 801ad10:	b133      	cbz	r3, 801ad20 <rcl_init_options_init+0x24>
 801ad12:	2464      	movs	r4, #100	@ 0x64
 801ad14:	4620      	mov	r0, r4
 801ad16:	b017      	add	sp, #92	@ 0x5c
 801ad18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ad1c:	b004      	add	sp, #16
 801ad1e:	4770      	bx	lr
 801ad20:	4630      	mov	r0, r6
 801ad22:	f7fa fb51 	bl	80153c8 <rcutils_allocator_is_valid>
 801ad26:	2800      	cmp	r0, #0
 801ad28:	d049      	beq.n	801adbe <rcl_init_options_init+0xc2>
 801ad2a:	46b4      	mov	ip, r6
 801ad2c:	ac11      	add	r4, sp, #68	@ 0x44
 801ad2e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ad32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ad34:	f8dc 3000 	ldr.w	r3, [ip]
 801ad38:	2050      	movs	r0, #80	@ 0x50
 801ad3a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801ad3c:	6023      	str	r3, [r4, #0]
 801ad3e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ad40:	4798      	blx	r3
 801ad42:	4604      	mov	r4, r0
 801ad44:	6028      	str	r0, [r5, #0]
 801ad46:	2800      	cmp	r0, #0
 801ad48:	d03b      	beq.n	801adc2 <rcl_init_options_init+0xc6>
 801ad4a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801ad4e:	4686      	mov	lr, r0
 801ad50:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ad54:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801ad58:	f8dc 3000 	ldr.w	r3, [ip]
 801ad5c:	a802      	add	r0, sp, #8
 801ad5e:	f8ce 3000 	str.w	r3, [lr]
 801ad62:	f003 fa05 	bl	801e170 <rmw_get_zero_initialized_init_options>
 801ad66:	f10d 0e08 	add.w	lr, sp, #8
 801ad6a:	f104 0c18 	add.w	ip, r4, #24
 801ad6e:	682f      	ldr	r7, [r5, #0]
 801ad70:	ac20      	add	r4, sp, #128	@ 0x80
 801ad72:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ad76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ad7a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ad7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ad82:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ad86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ad8a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801ad8e:	e88c 0003 	stmia.w	ip, {r0, r1}
 801ad92:	e894 0003 	ldmia.w	r4, {r0, r1}
 801ad96:	e88d 0003 	stmia.w	sp, {r0, r1}
 801ad9a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801ad9e:	f107 0018 	add.w	r0, r7, #24
 801ada2:	f003 fc65 	bl	801e670 <rmw_init_options_init>
 801ada6:	4604      	mov	r4, r0
 801ada8:	2800      	cmp	r0, #0
 801adaa:	d0b3      	beq.n	801ad14 <rcl_init_options_init+0x18>
 801adac:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801adae:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801adb0:	6828      	ldr	r0, [r5, #0]
 801adb2:	4798      	blx	r3
 801adb4:	4620      	mov	r0, r4
 801adb6:	f7ff fe15 	bl	801a9e4 <rcl_convert_rmw_ret_to_rcl_ret>
 801adba:	4604      	mov	r4, r0
 801adbc:	e7aa      	b.n	801ad14 <rcl_init_options_init+0x18>
 801adbe:	240b      	movs	r4, #11
 801adc0:	e7a8      	b.n	801ad14 <rcl_init_options_init+0x18>
 801adc2:	240a      	movs	r4, #10
 801adc4:	e7a6      	b.n	801ad14 <rcl_init_options_init+0x18>
 801adc6:	bf00      	nop

0801adc8 <rcl_init_options_fini>:
 801adc8:	b530      	push	{r4, r5, lr}
 801adca:	b087      	sub	sp, #28
 801adcc:	b1f0      	cbz	r0, 801ae0c <rcl_init_options_fini+0x44>
 801adce:	6803      	ldr	r3, [r0, #0]
 801add0:	4604      	mov	r4, r0
 801add2:	b1db      	cbz	r3, 801ae0c <rcl_init_options_fini+0x44>
 801add4:	469c      	mov	ip, r3
 801add6:	f10d 0e04 	add.w	lr, sp, #4
 801adda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801adde:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801ade2:	f8dc 3000 	ldr.w	r3, [ip]
 801ade6:	a801      	add	r0, sp, #4
 801ade8:	f8ce 3000 	str.w	r3, [lr]
 801adec:	f7fa faec 	bl	80153c8 <rcutils_allocator_is_valid>
 801adf0:	b160      	cbz	r0, 801ae0c <rcl_init_options_fini+0x44>
 801adf2:	6820      	ldr	r0, [r4, #0]
 801adf4:	3018      	adds	r0, #24
 801adf6:	f003 fcf5 	bl	801e7e4 <rmw_init_options_fini>
 801adfa:	4605      	mov	r5, r0
 801adfc:	b950      	cbnz	r0, 801ae14 <rcl_init_options_fini+0x4c>
 801adfe:	6820      	ldr	r0, [r4, #0]
 801ae00:	9b02      	ldr	r3, [sp, #8]
 801ae02:	9905      	ldr	r1, [sp, #20]
 801ae04:	4798      	blx	r3
 801ae06:	4628      	mov	r0, r5
 801ae08:	b007      	add	sp, #28
 801ae0a:	bd30      	pop	{r4, r5, pc}
 801ae0c:	250b      	movs	r5, #11
 801ae0e:	4628      	mov	r0, r5
 801ae10:	b007      	add	sp, #28
 801ae12:	bd30      	pop	{r4, r5, pc}
 801ae14:	f7ff fde6 	bl	801a9e4 <rcl_convert_rmw_ret_to_rcl_ret>
 801ae18:	4605      	mov	r5, r0
 801ae1a:	e7f8      	b.n	801ae0e <rcl_init_options_fini+0x46>

0801ae1c <rcl_init_options_copy>:
 801ae1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae20:	b094      	sub	sp, #80	@ 0x50
 801ae22:	2800      	cmp	r0, #0
 801ae24:	d05b      	beq.n	801aede <rcl_init_options_copy+0xc2>
 801ae26:	4604      	mov	r4, r0
 801ae28:	6800      	ldr	r0, [r0, #0]
 801ae2a:	2800      	cmp	r0, #0
 801ae2c:	d057      	beq.n	801aede <rcl_init_options_copy+0xc2>
 801ae2e:	460e      	mov	r6, r1
 801ae30:	f7fa faca 	bl	80153c8 <rcutils_allocator_is_valid>
 801ae34:	2e00      	cmp	r6, #0
 801ae36:	d052      	beq.n	801aede <rcl_init_options_copy+0xc2>
 801ae38:	f080 0001 	eor.w	r0, r0, #1
 801ae3c:	b2c0      	uxtb	r0, r0
 801ae3e:	2800      	cmp	r0, #0
 801ae40:	d14d      	bne.n	801aede <rcl_init_options_copy+0xc2>
 801ae42:	6833      	ldr	r3, [r6, #0]
 801ae44:	b123      	cbz	r3, 801ae50 <rcl_init_options_copy+0x34>
 801ae46:	2464      	movs	r4, #100	@ 0x64
 801ae48:	4620      	mov	r0, r4
 801ae4a:	b014      	add	sp, #80	@ 0x50
 801ae4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae50:	6827      	ldr	r7, [r4, #0]
 801ae52:	ad0f      	add	r5, sp, #60	@ 0x3c
 801ae54:	46bc      	mov	ip, r7
 801ae56:	f8d7 8000 	ldr.w	r8, [r7]
 801ae5a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ae5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ae60:	f8dc 3000 	ldr.w	r3, [ip]
 801ae64:	2050      	movs	r0, #80	@ 0x50
 801ae66:	4619      	mov	r1, r3
 801ae68:	602b      	str	r3, [r5, #0]
 801ae6a:	47c0      	blx	r8
 801ae6c:	4605      	mov	r5, r0
 801ae6e:	6030      	str	r0, [r6, #0]
 801ae70:	b3d0      	cbz	r0, 801aee8 <rcl_init_options_copy+0xcc>
 801ae72:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 801ae76:	4686      	mov	lr, r0
 801ae78:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ae7c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801ae80:	f8dc 3000 	ldr.w	r3, [ip]
 801ae84:	4668      	mov	r0, sp
 801ae86:	f8ce 3000 	str.w	r3, [lr]
 801ae8a:	f003 f971 	bl	801e170 <rmw_get_zero_initialized_init_options>
 801ae8e:	46ee      	mov	lr, sp
 801ae90:	f105 0c18 	add.w	ip, r5, #24
 801ae94:	6824      	ldr	r4, [r4, #0]
 801ae96:	6835      	ldr	r5, [r6, #0]
 801ae98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ae9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aea0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801aea4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aea8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801aeac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aeb0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801aeb4:	e88c 0003 	stmia.w	ip, {r0, r1}
 801aeb8:	f104 0018 	add.w	r0, r4, #24
 801aebc:	f105 0118 	add.w	r1, r5, #24
 801aec0:	f003 fc3e 	bl	801e740 <rmw_init_options_copy>
 801aec4:	4604      	mov	r4, r0
 801aec6:	2800      	cmp	r0, #0
 801aec8:	d0be      	beq.n	801ae48 <rcl_init_options_copy+0x2c>
 801aeca:	f7fa fa8b 	bl	80153e4 <rcutils_get_error_string>
 801aece:	f7fa fa9f 	bl	8015410 <rcutils_reset_error>
 801aed2:	4630      	mov	r0, r6
 801aed4:	f7ff ff78 	bl	801adc8 <rcl_init_options_fini>
 801aed8:	b140      	cbz	r0, 801aeec <rcl_init_options_copy+0xd0>
 801aeda:	4604      	mov	r4, r0
 801aedc:	e7b4      	b.n	801ae48 <rcl_init_options_copy+0x2c>
 801aede:	240b      	movs	r4, #11
 801aee0:	4620      	mov	r0, r4
 801aee2:	b014      	add	sp, #80	@ 0x50
 801aee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aee8:	240a      	movs	r4, #10
 801aeea:	e7ad      	b.n	801ae48 <rcl_init_options_copy+0x2c>
 801aeec:	4620      	mov	r0, r4
 801aeee:	b014      	add	sp, #80	@ 0x50
 801aef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aef4:	f7ff bd76 	b.w	801a9e4 <rcl_convert_rmw_ret_to_rcl_ret>

0801aef8 <rcl_get_localhost_only>:
 801aef8:	b510      	push	{r4, lr}
 801aefa:	2300      	movs	r3, #0
 801aefc:	b082      	sub	sp, #8
 801aefe:	9301      	str	r3, [sp, #4]
 801af00:	b1b8      	cbz	r0, 801af32 <rcl_get_localhost_only+0x3a>
 801af02:	4604      	mov	r4, r0
 801af04:	a901      	add	r1, sp, #4
 801af06:	480c      	ldr	r0, [pc, #48]	@ (801af38 <rcl_get_localhost_only+0x40>)
 801af08:	f002 fe4e 	bl	801dba8 <rcutils_get_env>
 801af0c:	b110      	cbz	r0, 801af14 <rcl_get_localhost_only+0x1c>
 801af0e:	2001      	movs	r0, #1
 801af10:	b002      	add	sp, #8
 801af12:	bd10      	pop	{r4, pc}
 801af14:	9b01      	ldr	r3, [sp, #4]
 801af16:	b113      	cbz	r3, 801af1e <rcl_get_localhost_only+0x26>
 801af18:	781a      	ldrb	r2, [r3, #0]
 801af1a:	2a31      	cmp	r2, #49	@ 0x31
 801af1c:	d004      	beq.n	801af28 <rcl_get_localhost_only+0x30>
 801af1e:	2302      	movs	r3, #2
 801af20:	2000      	movs	r0, #0
 801af22:	7023      	strb	r3, [r4, #0]
 801af24:	b002      	add	sp, #8
 801af26:	bd10      	pop	{r4, pc}
 801af28:	785b      	ldrb	r3, [r3, #1]
 801af2a:	2b00      	cmp	r3, #0
 801af2c:	d1f7      	bne.n	801af1e <rcl_get_localhost_only+0x26>
 801af2e:	2301      	movs	r3, #1
 801af30:	e7f6      	b.n	801af20 <rcl_get_localhost_only+0x28>
 801af32:	200b      	movs	r0, #11
 801af34:	b002      	add	sp, #8
 801af36:	bd10      	pop	{r4, pc}
 801af38:	0802523c 	.word	0x0802523c

0801af3c <rcl_get_zero_initialized_node>:
 801af3c:	4a03      	ldr	r2, [pc, #12]	@ (801af4c <rcl_get_zero_initialized_node+0x10>)
 801af3e:	4603      	mov	r3, r0
 801af40:	e892 0003 	ldmia.w	r2, {r0, r1}
 801af44:	e883 0003 	stmia.w	r3, {r0, r1}
 801af48:	4618      	mov	r0, r3
 801af4a:	4770      	bx	lr
 801af4c:	08025264 	.word	0x08025264

0801af50 <rcl_node_init>:
 801af50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af54:	b0a9      	sub	sp, #164	@ 0xa4
 801af56:	4604      	mov	r4, r0
 801af58:	460e      	mov	r6, r1
 801af5a:	4615      	mov	r5, r2
 801af5c:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 801af60:	a823      	add	r0, sp, #140	@ 0x8c
 801af62:	461f      	mov	r7, r3
 801af64:	f006 f9b0 	bl	80212c8 <rcl_guard_condition_get_default_options>
 801af68:	f1b8 0f00 	cmp.w	r8, #0
 801af6c:	f000 80f3 	beq.w	801b156 <rcl_node_init+0x206>
 801af70:	4640      	mov	r0, r8
 801af72:	f7fa fa29 	bl	80153c8 <rcutils_allocator_is_valid>
 801af76:	2d00      	cmp	r5, #0
 801af78:	bf18      	it	ne
 801af7a:	2c00      	cmpne	r4, #0
 801af7c:	f080 0001 	eor.w	r0, r0, #1
 801af80:	bf0c      	ite	eq
 801af82:	f04f 0c01 	moveq.w	ip, #1
 801af86:	f04f 0c00 	movne.w	ip, #0
 801af8a:	2e00      	cmp	r6, #0
 801af8c:	bf08      	it	eq
 801af8e:	f04c 0c01 	orreq.w	ip, ip, #1
 801af92:	ea4c 0c00 	orr.w	ip, ip, r0
 801af96:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 801af9a:	f040 80dc 	bne.w	801b156 <rcl_node_init+0x206>
 801af9e:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801afa2:	f1ba 0f00 	cmp.w	sl, #0
 801afa6:	f040 80fc 	bne.w	801b1a2 <rcl_node_init+0x252>
 801afaa:	2f00      	cmp	r7, #0
 801afac:	f000 80d3 	beq.w	801b156 <rcl_node_init+0x206>
 801afb0:	4638      	mov	r0, r7
 801afb2:	f7ff fd35 	bl	801aa20 <rcl_context_is_valid>
 801afb6:	4683      	mov	fp, r0
 801afb8:	2800      	cmp	r0, #0
 801afba:	f000 80d2 	beq.w	801b162 <rcl_node_init+0x212>
 801afbe:	4652      	mov	r2, sl
 801afc0:	4630      	mov	r0, r6
 801afc2:	a922      	add	r1, sp, #136	@ 0x88
 801afc4:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 801afc8:	f003 fa84 	bl	801e4d4 <rmw_validate_node_name>
 801afcc:	4682      	mov	sl, r0
 801afce:	2800      	cmp	r0, #0
 801afd0:	f040 80c3 	bne.w	801b15a <rcl_node_init+0x20a>
 801afd4:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801afd6:	2800      	cmp	r0, #0
 801afd8:	f040 80f1 	bne.w	801b1be <rcl_node_init+0x26e>
 801afdc:	4628      	mov	r0, r5
 801afde:	f7e5 f989 	bl	80002f4 <strlen>
 801afe2:	2800      	cmp	r0, #0
 801afe4:	f040 80c0 	bne.w	801b168 <rcl_node_init+0x218>
 801afe8:	4d79      	ldr	r5, [pc, #484]	@ (801b1d0 <rcl_node_init+0x280>)
 801afea:	a922      	add	r1, sp, #136	@ 0x88
 801afec:	2200      	movs	r2, #0
 801afee:	4628      	mov	r0, r5
 801aff0:	f003 fa52 	bl	801e498 <rmw_validate_namespace>
 801aff4:	4682      	mov	sl, r0
 801aff6:	2800      	cmp	r0, #0
 801aff8:	f040 80af 	bne.w	801b15a <rcl_node_init+0x20a>
 801affc:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801affe:	2800      	cmp	r0, #0
 801b000:	f040 80d5 	bne.w	801b1ae <rcl_node_init+0x25e>
 801b004:	f8d8 3000 	ldr.w	r3, [r8]
 801b008:	2078      	movs	r0, #120	@ 0x78
 801b00a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b00e:	4798      	blx	r3
 801b010:	4682      	mov	sl, r0
 801b012:	6060      	str	r0, [r4, #4]
 801b014:	2800      	cmp	r0, #0
 801b016:	f000 80cf 	beq.w	801b1b8 <rcl_node_init+0x268>
 801b01a:	2200      	movs	r2, #0
 801b01c:	2300      	movs	r3, #0
 801b01e:	a808      	add	r0, sp, #32
 801b020:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 801b024:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 801b028:	f000 f902 	bl	801b230 <rcl_node_get_default_options>
 801b02c:	a908      	add	r1, sp, #32
 801b02e:	4650      	mov	r0, sl
 801b030:	2268      	movs	r2, #104	@ 0x68
 801b032:	f007 f9ec 	bl	802240e <memcpy>
 801b036:	6861      	ldr	r1, [r4, #4]
 801b038:	4640      	mov	r0, r8
 801b03a:	6027      	str	r7, [r4, #0]
 801b03c:	f000 f906 	bl	801b24c <rcl_node_options_copy>
 801b040:	2800      	cmp	r0, #0
 801b042:	d158      	bne.n	801b0f6 <rcl_node_init+0x1a6>
 801b044:	4628      	mov	r0, r5
 801b046:	f7e5 f955 	bl	80002f4 <strlen>
 801b04a:	4428      	add	r0, r5
 801b04c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801b050:	e9cd 5603 	strd	r5, r6, [sp, #12]
 801b054:	2b2f      	cmp	r3, #47	@ 0x2f
 801b056:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801b05a:	9300      	str	r3, [sp, #0]
 801b05c:	bf0c      	ite	eq
 801b05e:	4b5d      	ldreq	r3, [pc, #372]	@ (801b1d4 <rcl_node_init+0x284>)
 801b060:	4b5d      	ldrne	r3, [pc, #372]	@ (801b1d8 <rcl_node_init+0x288>)
 801b062:	9302      	str	r3, [sp, #8]
 801b064:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b068:	9301      	str	r3, [sp, #4]
 801b06a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801b06e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801b072:	f002 fdc1 	bl	801dbf8 <rcutils_format_string_limit>
 801b076:	6823      	ldr	r3, [r4, #0]
 801b078:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 801b07c:	4631      	mov	r1, r6
 801b07e:	6818      	ldr	r0, [r3, #0]
 801b080:	462a      	mov	r2, r5
 801b082:	6866      	ldr	r6, [r4, #4]
 801b084:	3028      	adds	r0, #40	@ 0x28
 801b086:	f003 fe4b 	bl	801ed20 <rmw_create_node>
 801b08a:	6863      	ldr	r3, [r4, #4]
 801b08c:	66b0      	str	r0, [r6, #104]	@ 0x68
 801b08e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801b090:	2800      	cmp	r0, #0
 801b092:	d032      	beq.n	801b0fa <rcl_node_init+0x1aa>
 801b094:	f003 fed4 	bl	801ee40 <rmw_node_get_graph_guard_condition>
 801b098:	4682      	mov	sl, r0
 801b09a:	b360      	cbz	r0, 801b0f6 <rcl_node_init+0x1a6>
 801b09c:	f8d8 3000 	ldr.w	r3, [r8]
 801b0a0:	2008      	movs	r0, #8
 801b0a2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b0a6:	6866      	ldr	r6, [r4, #4]
 801b0a8:	4798      	blx	r3
 801b0aa:	6863      	ldr	r3, [r4, #4]
 801b0ac:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801b0ae:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 801b0b2:	f1bb 0f00 	cmp.w	fp, #0
 801b0b6:	d020      	beq.n	801b0fa <rcl_node_init+0x1aa>
 801b0b8:	a806      	add	r0, sp, #24
 801b0ba:	ae23      	add	r6, sp, #140	@ 0x8c
 801b0bc:	f006 f82a 	bl	8021114 <rcl_get_zero_initialized_guard_condition>
 801b0c0:	a806      	add	r0, sp, #24
 801b0c2:	6863      	ldr	r3, [r4, #4]
 801b0c4:	46c4      	mov	ip, r8
 801b0c6:	c803      	ldmia	r0, {r0, r1}
 801b0c8:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 801b0cc:	e88b 0003 	stmia.w	fp, {r0, r1}
 801b0d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b0d4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801b0d6:	f8dc 3000 	ldr.w	r3, [ip]
 801b0da:	6033      	str	r3, [r6, #0]
 801b0dc:	ab28      	add	r3, sp, #160	@ 0xa0
 801b0de:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801b0e2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801b0e6:	4651      	mov	r1, sl
 801b0e8:	463a      	mov	r2, r7
 801b0ea:	4670      	mov	r0, lr
 801b0ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b0ee:	f006 f869 	bl	80211c4 <rcl_guard_condition_init_from_rmw>
 801b0f2:	4682      	mov	sl, r0
 801b0f4:	b328      	cbz	r0, 801b142 <rcl_node_init+0x1f2>
 801b0f6:	6863      	ldr	r3, [r4, #4]
 801b0f8:	b1f3      	cbz	r3, 801b138 <rcl_node_init+0x1e8>
 801b0fa:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801b0fc:	b128      	cbz	r0, 801b10a <rcl_node_init+0x1ba>
 801b0fe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b102:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b106:	4798      	blx	r3
 801b108:	6863      	ldr	r3, [r4, #4]
 801b10a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801b10c:	b110      	cbz	r0, 801b114 <rcl_node_init+0x1c4>
 801b10e:	f003 fe19 	bl	801ed44 <rmw_destroy_node>
 801b112:	6863      	ldr	r3, [r4, #4]
 801b114:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801b116:	b148      	cbz	r0, 801b12c <rcl_node_init+0x1dc>
 801b118:	f006 f8b0 	bl	802127c <rcl_guard_condition_fini>
 801b11c:	6863      	ldr	r3, [r4, #4]
 801b11e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b122:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801b124:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b128:	4798      	blx	r3
 801b12a:	6863      	ldr	r3, [r4, #4]
 801b12c:	4618      	mov	r0, r3
 801b12e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b132:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b136:	4798      	blx	r3
 801b138:	2300      	movs	r3, #0
 801b13a:	f04f 0a01 	mov.w	sl, #1
 801b13e:	e9c4 3300 	strd	r3, r3, [r4]
 801b142:	f1b9 0f00 	cmp.w	r9, #0
 801b146:	d008      	beq.n	801b15a <rcl_node_init+0x20a>
 801b148:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b14c:	4628      	mov	r0, r5
 801b14e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b152:	4798      	blx	r3
 801b154:	e001      	b.n	801b15a <rcl_node_init+0x20a>
 801b156:	f04f 0a0b 	mov.w	sl, #11
 801b15a:	4650      	mov	r0, sl
 801b15c:	b029      	add	sp, #164	@ 0xa4
 801b15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b162:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 801b166:	e7f8      	b.n	801b15a <rcl_node_init+0x20a>
 801b168:	782b      	ldrb	r3, [r5, #0]
 801b16a:	2b2f      	cmp	r3, #47	@ 0x2f
 801b16c:	f43f af3d 	beq.w	801afea <rcl_node_init+0x9a>
 801b170:	9503      	str	r5, [sp, #12]
 801b172:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801b176:	9300      	str	r3, [sp, #0]
 801b178:	4b18      	ldr	r3, [pc, #96]	@ (801b1dc <rcl_node_init+0x28c>)
 801b17a:	9302      	str	r3, [sp, #8]
 801b17c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b180:	9301      	str	r3, [sp, #4]
 801b182:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801b186:	f002 fd37 	bl	801dbf8 <rcutils_format_string_limit>
 801b18a:	4605      	mov	r5, r0
 801b18c:	b1e0      	cbz	r0, 801b1c8 <rcl_node_init+0x278>
 801b18e:	2200      	movs	r2, #0
 801b190:	a922      	add	r1, sp, #136	@ 0x88
 801b192:	9222      	str	r2, [sp, #136]	@ 0x88
 801b194:	f003 f980 	bl	801e498 <rmw_validate_namespace>
 801b198:	4682      	mov	sl, r0
 801b19a:	2800      	cmp	r0, #0
 801b19c:	d1d4      	bne.n	801b148 <rcl_node_init+0x1f8>
 801b19e:	46d9      	mov	r9, fp
 801b1a0:	e72c      	b.n	801affc <rcl_node_init+0xac>
 801b1a2:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 801b1a6:	4650      	mov	r0, sl
 801b1a8:	b029      	add	sp, #164	@ 0xa4
 801b1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1ae:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 801b1b2:	f003 f983 	bl	801e4bc <rmw_namespace_validation_result_string>
 801b1b6:	e7c4      	b.n	801b142 <rcl_node_init+0x1f2>
 801b1b8:	f04f 0a0a 	mov.w	sl, #10
 801b1bc:	e7c1      	b.n	801b142 <rcl_node_init+0x1f2>
 801b1be:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 801b1c2:	f003 f9db 	bl	801e57c <rmw_node_name_validation_result_string>
 801b1c6:	e7c8      	b.n	801b15a <rcl_node_init+0x20a>
 801b1c8:	f04f 0a0a 	mov.w	sl, #10
 801b1cc:	e7c5      	b.n	801b15a <rcl_node_init+0x20a>
 801b1ce:	bf00      	nop
 801b1d0:	08025254 	.word	0x08025254
 801b1d4:	080248d8 	.word	0x080248d8
 801b1d8:	0802525c 	.word	0x0802525c
 801b1dc:	08025258 	.word	0x08025258

0801b1e0 <rcl_node_is_valid>:
 801b1e0:	b130      	cbz	r0, 801b1f0 <rcl_node_is_valid+0x10>
 801b1e2:	6843      	ldr	r3, [r0, #4]
 801b1e4:	b123      	cbz	r3, 801b1f0 <rcl_node_is_valid+0x10>
 801b1e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b1e8:	b113      	cbz	r3, 801b1f0 <rcl_node_is_valid+0x10>
 801b1ea:	6800      	ldr	r0, [r0, #0]
 801b1ec:	f7ff bc18 	b.w	801aa20 <rcl_context_is_valid>
 801b1f0:	2000      	movs	r0, #0
 801b1f2:	4770      	bx	lr

0801b1f4 <rcl_node_get_name>:
 801b1f4:	b120      	cbz	r0, 801b200 <rcl_node_get_name+0xc>
 801b1f6:	6840      	ldr	r0, [r0, #4]
 801b1f8:	b110      	cbz	r0, 801b200 <rcl_node_get_name+0xc>
 801b1fa:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801b1fc:	b100      	cbz	r0, 801b200 <rcl_node_get_name+0xc>
 801b1fe:	6880      	ldr	r0, [r0, #8]
 801b200:	4770      	bx	lr
 801b202:	bf00      	nop

0801b204 <rcl_node_get_namespace>:
 801b204:	b120      	cbz	r0, 801b210 <rcl_node_get_namespace+0xc>
 801b206:	6840      	ldr	r0, [r0, #4]
 801b208:	b110      	cbz	r0, 801b210 <rcl_node_get_namespace+0xc>
 801b20a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801b20c:	b100      	cbz	r0, 801b210 <rcl_node_get_namespace+0xc>
 801b20e:	68c0      	ldr	r0, [r0, #12]
 801b210:	4770      	bx	lr
 801b212:	bf00      	nop

0801b214 <rcl_node_get_options>:
 801b214:	b128      	cbz	r0, 801b222 <rcl_node_get_options+0xe>
 801b216:	6840      	ldr	r0, [r0, #4]
 801b218:	b118      	cbz	r0, 801b222 <rcl_node_get_options+0xe>
 801b21a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b21c:	2b00      	cmp	r3, #0
 801b21e:	bf08      	it	eq
 801b220:	2000      	moveq	r0, #0
 801b222:	4770      	bx	lr

0801b224 <rcl_node_get_rmw_handle>:
 801b224:	b110      	cbz	r0, 801b22c <rcl_node_get_rmw_handle+0x8>
 801b226:	6840      	ldr	r0, [r0, #4]
 801b228:	b100      	cbz	r0, 801b22c <rcl_node_get_rmw_handle+0x8>
 801b22a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801b22c:	4770      	bx	lr
 801b22e:	bf00      	nop

0801b230 <rcl_node_get_default_options>:
 801b230:	b510      	push	{r4, lr}
 801b232:	4604      	mov	r4, r0
 801b234:	2268      	movs	r2, #104	@ 0x68
 801b236:	2100      	movs	r1, #0
 801b238:	f006 ffca 	bl	80221d0 <memset>
 801b23c:	4620      	mov	r0, r4
 801b23e:	f7fa f8b5 	bl	80153ac <rcutils_get_default_allocator>
 801b242:	2301      	movs	r3, #1
 801b244:	4620      	mov	r0, r4
 801b246:	7523      	strb	r3, [r4, #20]
 801b248:	bd10      	pop	{r4, pc}
 801b24a:	bf00      	nop

0801b24c <rcl_node_options_copy>:
 801b24c:	2800      	cmp	r0, #0
 801b24e:	bf18      	it	ne
 801b250:	4288      	cmpne	r0, r1
 801b252:	d01b      	beq.n	801b28c <rcl_node_options_copy+0x40>
 801b254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b256:	fab1 f681 	clz	r6, r1
 801b25a:	460c      	mov	r4, r1
 801b25c:	0976      	lsrs	r6, r6, #5
 801b25e:	b199      	cbz	r1, 801b288 <rcl_node_options_copy+0x3c>
 801b260:	4605      	mov	r5, r0
 801b262:	8a87      	ldrh	r7, [r0, #20]
 801b264:	4684      	mov	ip, r0
 801b266:	468e      	mov	lr, r1
 801b268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b26a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b26e:	682b      	ldr	r3, [r5, #0]
 801b270:	2250      	movs	r2, #80	@ 0x50
 801b272:	f10c 0118 	add.w	r1, ip, #24
 801b276:	f104 0018 	add.w	r0, r4, #24
 801b27a:	f8ce 3000 	str.w	r3, [lr]
 801b27e:	82a7      	strh	r7, [r4, #20]
 801b280:	f007 f8c5 	bl	802240e <memcpy>
 801b284:	4630      	mov	r0, r6
 801b286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b288:	200b      	movs	r0, #11
 801b28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b28c:	200b      	movs	r0, #11
 801b28e:	4770      	bx	lr

0801b290 <rcl_node_resolve_name>:
 801b290:	b082      	sub	sp, #8
 801b292:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b296:	b091      	sub	sp, #68	@ 0x44
 801b298:	ac1a      	add	r4, sp, #104	@ 0x68
 801b29a:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 801b29e:	e884 000c 	stmia.w	r4, {r2, r3}
 801b2a2:	2800      	cmp	r0, #0
 801b2a4:	d03d      	beq.n	801b322 <rcl_node_resolve_name+0x92>
 801b2a6:	460c      	mov	r4, r1
 801b2a8:	4605      	mov	r5, r0
 801b2aa:	f7ff ffb3 	bl	801b214 <rcl_node_get_options>
 801b2ae:	2800      	cmp	r0, #0
 801b2b0:	d03a      	beq.n	801b328 <rcl_node_resolve_name+0x98>
 801b2b2:	4628      	mov	r0, r5
 801b2b4:	f7ff ff9e 	bl	801b1f4 <rcl_node_get_name>
 801b2b8:	4606      	mov	r6, r0
 801b2ba:	4628      	mov	r0, r5
 801b2bc:	ad0b      	add	r5, sp, #44	@ 0x2c
 801b2be:	f7ff ffa1 	bl	801b204 <rcl_node_get_namespace>
 801b2c2:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 801b2c6:	4607      	mov	r7, r0
 801b2c8:	46ac      	mov	ip, r5
 801b2ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b2ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b2d2:	f8de 3000 	ldr.w	r3, [lr]
 801b2d6:	f8cc 3000 	str.w	r3, [ip]
 801b2da:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b2dc:	b30b      	cbz	r3, 801b322 <rcl_node_resolve_name+0x92>
 801b2de:	4689      	mov	r9, r1
 801b2e0:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 801b2e4:	f002 fe00 	bl	801dee8 <rcutils_get_zero_initialized_string_map>
 801b2e8:	ab10      	add	r3, sp, #64	@ 0x40
 801b2ea:	9008      	str	r0, [sp, #32]
 801b2ec:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801b2f0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b2f4:	2100      	movs	r1, #0
 801b2f6:	a808      	add	r0, sp, #32
 801b2f8:	e895 000c 	ldmia.w	r5, {r2, r3}
 801b2fc:	f002 fe6a 	bl	801dfd4 <rcutils_string_map_init>
 801b300:	4683      	mov	fp, r0
 801b302:	b1a0      	cbz	r0, 801b32e <rcl_node_resolve_name+0x9e>
 801b304:	f7fa f86e 	bl	80153e4 <rcutils_get_error_string>
 801b308:	f7fa f882 	bl	8015410 <rcutils_reset_error>
 801b30c:	f1bb 0f0a 	cmp.w	fp, #10
 801b310:	bf18      	it	ne
 801b312:	f04f 0b01 	movne.w	fp, #1
 801b316:	4658      	mov	r0, fp
 801b318:	b011      	add	sp, #68	@ 0x44
 801b31a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b31e:	b002      	add	sp, #8
 801b320:	4770      	bx	lr
 801b322:	f04f 0b0b 	mov.w	fp, #11
 801b326:	e7f6      	b.n	801b316 <rcl_node_resolve_name+0x86>
 801b328:	f04f 0b01 	mov.w	fp, #1
 801b32c:	e7f3      	b.n	801b316 <rcl_node_resolve_name+0x86>
 801b32e:	9009      	str	r0, [sp, #36]	@ 0x24
 801b330:	9007      	str	r0, [sp, #28]
 801b332:	a808      	add	r0, sp, #32
 801b334:	f005 fee8 	bl	8021108 <rcl_get_default_topic_name_substitutions>
 801b338:	4683      	mov	fp, r0
 801b33a:	b180      	cbz	r0, 801b35e <rcl_node_resolve_name+0xce>
 801b33c:	280a      	cmp	r0, #10
 801b33e:	a808      	add	r0, sp, #32
 801b340:	bf18      	it	ne
 801b342:	f04f 0b01 	movne.w	fp, #1
 801b346:	f002 fe85 	bl	801e054 <rcutils_string_map_fini>
 801b34a:	4604      	mov	r4, r0
 801b34c:	2800      	cmp	r0, #0
 801b34e:	d15b      	bne.n	801b408 <rcl_node_resolve_name+0x178>
 801b350:	4651      	mov	r1, sl
 801b352:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b354:	47c8      	blx	r9
 801b356:	4651      	mov	r1, sl
 801b358:	4620      	mov	r0, r4
 801b35a:	47c8      	blx	r9
 801b35c:	e7db      	b.n	801b316 <rcl_node_resolve_name+0x86>
 801b35e:	ab09      	add	r3, sp, #36	@ 0x24
 801b360:	46ec      	mov	ip, sp
 801b362:	9305      	str	r3, [sp, #20]
 801b364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b366:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b36a:	682b      	ldr	r3, [r5, #0]
 801b36c:	463a      	mov	r2, r7
 801b36e:	4631      	mov	r1, r6
 801b370:	4620      	mov	r0, r4
 801b372:	f8cc 3000 	str.w	r3, [ip]
 801b376:	ab08      	add	r3, sp, #32
 801b378:	f005 fd66 	bl	8020e48 <rcl_expand_topic_name>
 801b37c:	4683      	mov	fp, r0
 801b37e:	b9d8      	cbnz	r0, 801b3b8 <rcl_node_resolve_name+0x128>
 801b380:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801b382:	4602      	mov	r2, r0
 801b384:	9009      	str	r0, [sp, #36]	@ 0x24
 801b386:	a90a      	add	r1, sp, #40	@ 0x28
 801b388:	4620      	mov	r0, r4
 801b38a:	f002 ffb5 	bl	801e2f8 <rmw_validate_full_topic_name>
 801b38e:	bb50      	cbnz	r0, 801b3e6 <rcl_node_resolve_name+0x156>
 801b390:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801b392:	2d00      	cmp	r5, #0
 801b394:	d140      	bne.n	801b418 <rcl_node_resolve_name+0x188>
 801b396:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b398:	a808      	add	r0, sp, #32
 801b39a:	601c      	str	r4, [r3, #0]
 801b39c:	f002 fe5a 	bl	801e054 <rcutils_string_map_fini>
 801b3a0:	4683      	mov	fp, r0
 801b3a2:	2800      	cmp	r0, #0
 801b3a4:	d043      	beq.n	801b42e <rcl_node_resolve_name+0x19e>
 801b3a6:	f7fa f81d 	bl	80153e4 <rcutils_get_error_string>
 801b3aa:	46a8      	mov	r8, r5
 801b3ac:	f04f 0b01 	mov.w	fp, #1
 801b3b0:	462c      	mov	r4, r5
 801b3b2:	f7fa f82d 	bl	8015410 <rcutils_reset_error>
 801b3b6:	e00a      	b.n	801b3ce <rcl_node_resolve_name+0x13e>
 801b3b8:	2867      	cmp	r0, #103	@ 0x67
 801b3ba:	bf14      	ite	ne
 801b3bc:	f04f 0800 	movne.w	r8, #0
 801b3c0:	f008 0801 	andeq.w	r8, r8, #1
 801b3c4:	9c07      	ldr	r4, [sp, #28]
 801b3c6:	a808      	add	r0, sp, #32
 801b3c8:	f002 fe44 	bl	801e054 <rcutils_string_map_fini>
 801b3cc:	bb50      	cbnz	r0, 801b424 <rcl_node_resolve_name+0x194>
 801b3ce:	4651      	mov	r1, sl
 801b3d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b3d2:	47c8      	blx	r9
 801b3d4:	4651      	mov	r1, sl
 801b3d6:	4620      	mov	r0, r4
 801b3d8:	47c8      	blx	r9
 801b3da:	f1b8 0f00 	cmp.w	r8, #0
 801b3de:	bf18      	it	ne
 801b3e0:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 801b3e4:	e797      	b.n	801b316 <rcl_node_resolve_name+0x86>
 801b3e6:	f7f9 fffd 	bl	80153e4 <rcutils_get_error_string>
 801b3ea:	f7fa f811 	bl	8015410 <rcutils_reset_error>
 801b3ee:	a808      	add	r0, sp, #32
 801b3f0:	f002 fe30 	bl	801e054 <rcutils_string_map_fini>
 801b3f4:	b998      	cbnz	r0, 801b41e <rcl_node_resolve_name+0x18e>
 801b3f6:	4651      	mov	r1, sl
 801b3f8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b3fa:	47c8      	blx	r9
 801b3fc:	4651      	mov	r1, sl
 801b3fe:	4620      	mov	r0, r4
 801b400:	f04f 0b01 	mov.w	fp, #1
 801b404:	47c8      	blx	r9
 801b406:	e786      	b.n	801b316 <rcl_node_resolve_name+0x86>
 801b408:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801b40c:	f7f9 ffea 	bl	80153e4 <rcutils_get_error_string>
 801b410:	f7f9 fffe 	bl	8015410 <rcutils_reset_error>
 801b414:	4644      	mov	r4, r8
 801b416:	e7da      	b.n	801b3ce <rcl_node_resolve_name+0x13e>
 801b418:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 801b41c:	e7d3      	b.n	801b3c6 <rcl_node_resolve_name+0x136>
 801b41e:	46d8      	mov	r8, fp
 801b420:	f04f 0b01 	mov.w	fp, #1
 801b424:	f7f9 ffde 	bl	80153e4 <rcutils_get_error_string>
 801b428:	f7f9 fff2 	bl	8015410 <rcutils_reset_error>
 801b42c:	e7cf      	b.n	801b3ce <rcl_node_resolve_name+0x13e>
 801b42e:	4651      	mov	r1, sl
 801b430:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b432:	47c8      	blx	r9
 801b434:	4651      	mov	r1, sl
 801b436:	4658      	mov	r0, fp
 801b438:	47c8      	blx	r9
 801b43a:	e76c      	b.n	801b316 <rcl_node_resolve_name+0x86>

0801b43c <exact_match_lookup>:
 801b43c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b43e:	f102 0708 	add.w	r7, r2, #8
 801b442:	460b      	mov	r3, r1
 801b444:	b085      	sub	sp, #20
 801b446:	4614      	mov	r4, r2
 801b448:	4606      	mov	r6, r0
 801b44a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801b44e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b452:	4618      	mov	r0, r3
 801b454:	4919      	ldr	r1, [pc, #100]	@ (801b4bc <exact_match_lookup+0x80>)
 801b456:	e894 000c 	ldmia.w	r4, {r2, r3}
 801b45a:	f002 fbbf 	bl	801dbdc <rcutils_join_path>
 801b45e:	7833      	ldrb	r3, [r6, #0]
 801b460:	4605      	mov	r5, r0
 801b462:	2b2f      	cmp	r3, #47	@ 0x2f
 801b464:	d023      	beq.n	801b4ae <exact_match_lookup+0x72>
 801b466:	f104 030c 	add.w	r3, r4, #12
 801b46a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b46e:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b472:	1c70      	adds	r0, r6, #1
 801b474:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801b478:	f002 fbb6 	bl	801dbe8 <rcutils_to_native_path>
 801b47c:	4606      	mov	r6, r0
 801b47e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801b482:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b486:	4631      	mov	r1, r6
 801b488:	4628      	mov	r0, r5
 801b48a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801b48e:	f002 fba5 	bl	801dbdc <rcutils_join_path>
 801b492:	4603      	mov	r3, r0
 801b494:	4630      	mov	r0, r6
 801b496:	6862      	ldr	r2, [r4, #4]
 801b498:	461e      	mov	r6, r3
 801b49a:	6921      	ldr	r1, [r4, #16]
 801b49c:	4790      	blx	r2
 801b49e:	4628      	mov	r0, r5
 801b4a0:	4635      	mov	r5, r6
 801b4a2:	6863      	ldr	r3, [r4, #4]
 801b4a4:	6921      	ldr	r1, [r4, #16]
 801b4a6:	4798      	blx	r3
 801b4a8:	4628      	mov	r0, r5
 801b4aa:	b005      	add	sp, #20
 801b4ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b4ae:	7873      	ldrb	r3, [r6, #1]
 801b4b0:	2b00      	cmp	r3, #0
 801b4b2:	d1d8      	bne.n	801b466 <exact_match_lookup+0x2a>
 801b4b4:	4628      	mov	r0, r5
 801b4b6:	b005      	add	sp, #20
 801b4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b4ba:	bf00      	nop
 801b4bc:	080252a8 	.word	0x080252a8

0801b4c0 <rcl_get_secure_root>:
 801b4c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b4c4:	b085      	sub	sp, #20
 801b4c6:	b168      	cbz	r0, 801b4e4 <rcl_get_secure_root+0x24>
 801b4c8:	4607      	mov	r7, r0
 801b4ca:	4608      	mov	r0, r1
 801b4cc:	460c      	mov	r4, r1
 801b4ce:	f7f9 ff7b 	bl	80153c8 <rcutils_allocator_is_valid>
 801b4d2:	b138      	cbz	r0, 801b4e4 <rcl_get_secure_root+0x24>
 801b4d4:	2300      	movs	r3, #0
 801b4d6:	482d      	ldr	r0, [pc, #180]	@ (801b58c <rcl_get_secure_root+0xcc>)
 801b4d8:	a903      	add	r1, sp, #12
 801b4da:	9303      	str	r3, [sp, #12]
 801b4dc:	f002 fb64 	bl	801dba8 <rcutils_get_env>
 801b4e0:	4605      	mov	r5, r0
 801b4e2:	b120      	cbz	r0, 801b4ee <rcl_get_secure_root+0x2e>
 801b4e4:	2500      	movs	r5, #0
 801b4e6:	4628      	mov	r0, r5
 801b4e8:	b005      	add	sp, #20
 801b4ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b4ee:	9b03      	ldr	r3, [sp, #12]
 801b4f0:	781a      	ldrb	r2, [r3, #0]
 801b4f2:	2a00      	cmp	r2, #0
 801b4f4:	d0f6      	beq.n	801b4e4 <rcl_get_secure_root+0x24>
 801b4f6:	f104 090c 	add.w	r9, r4, #12
 801b4fa:	e899 0003 	ldmia.w	r9, {r0, r1}
 801b4fe:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b502:	4618      	mov	r0, r3
 801b504:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801b508:	f002 fcb0 	bl	801de6c <rcutils_strdup>
 801b50c:	4680      	mov	r8, r0
 801b50e:	2800      	cmp	r0, #0
 801b510:	d0e8      	beq.n	801b4e4 <rcl_get_secure_root+0x24>
 801b512:	a903      	add	r1, sp, #12
 801b514:	481e      	ldr	r0, [pc, #120]	@ (801b590 <rcl_get_secure_root+0xd0>)
 801b516:	9503      	str	r5, [sp, #12]
 801b518:	f002 fb46 	bl	801dba8 <rcutils_get_env>
 801b51c:	b160      	cbz	r0, 801b538 <rcl_get_secure_root+0x78>
 801b51e:	2600      	movs	r6, #0
 801b520:	4630      	mov	r0, r6
 801b522:	6863      	ldr	r3, [r4, #4]
 801b524:	6921      	ldr	r1, [r4, #16]
 801b526:	4798      	blx	r3
 801b528:	4640      	mov	r0, r8
 801b52a:	6863      	ldr	r3, [r4, #4]
 801b52c:	6921      	ldr	r1, [r4, #16]
 801b52e:	4798      	blx	r3
 801b530:	4628      	mov	r0, r5
 801b532:	b005      	add	sp, #20
 801b534:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b538:	9b03      	ldr	r3, [sp, #12]
 801b53a:	781e      	ldrb	r6, [r3, #0]
 801b53c:	b1f6      	cbz	r6, 801b57c <rcl_get_secure_root+0xbc>
 801b53e:	e899 0003 	ldmia.w	r9, {r0, r1}
 801b542:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b546:	4618      	mov	r0, r3
 801b548:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801b54c:	f002 fc8e 	bl	801de6c <rcutils_strdup>
 801b550:	4606      	mov	r6, r0
 801b552:	2800      	cmp	r0, #0
 801b554:	d0e3      	beq.n	801b51e <rcl_get_secure_root+0x5e>
 801b556:	4622      	mov	r2, r4
 801b558:	4641      	mov	r1, r8
 801b55a:	f7ff ff6f 	bl	801b43c <exact_match_lookup>
 801b55e:	4605      	mov	r5, r0
 801b560:	2d00      	cmp	r5, #0
 801b562:	d0dd      	beq.n	801b520 <rcl_get_secure_root+0x60>
 801b564:	4628      	mov	r0, r5
 801b566:	f002 fb37 	bl	801dbd8 <rcutils_is_directory>
 801b56a:	4603      	mov	r3, r0
 801b56c:	2800      	cmp	r0, #0
 801b56e:	d1d7      	bne.n	801b520 <rcl_get_secure_root+0x60>
 801b570:	4628      	mov	r0, r5
 801b572:	6921      	ldr	r1, [r4, #16]
 801b574:	461d      	mov	r5, r3
 801b576:	6863      	ldr	r3, [r4, #4]
 801b578:	4798      	blx	r3
 801b57a:	e7d1      	b.n	801b520 <rcl_get_secure_root+0x60>
 801b57c:	4622      	mov	r2, r4
 801b57e:	4638      	mov	r0, r7
 801b580:	4641      	mov	r1, r8
 801b582:	f7ff ff5b 	bl	801b43c <exact_match_lookup>
 801b586:	4605      	mov	r5, r0
 801b588:	e7ea      	b.n	801b560 <rcl_get_secure_root+0xa0>
 801b58a:	bf00      	nop
 801b58c:	080252b4 	.word	0x080252b4
 801b590:	080252cc 	.word	0x080252cc

0801b594 <rcl_get_security_options_from_environment>:
 801b594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b598:	b082      	sub	sp, #8
 801b59a:	2300      	movs	r3, #0
 801b59c:	4606      	mov	r6, r0
 801b59e:	460f      	mov	r7, r1
 801b5a0:	4821      	ldr	r0, [pc, #132]	@ (801b628 <rcl_get_security_options_from_environment+0x94>)
 801b5a2:	a901      	add	r1, sp, #4
 801b5a4:	4690      	mov	r8, r2
 801b5a6:	9301      	str	r3, [sp, #4]
 801b5a8:	f002 fafe 	bl	801dba8 <rcutils_get_env>
 801b5ac:	b120      	cbz	r0, 801b5b8 <rcl_get_security_options_from_environment+0x24>
 801b5ae:	2501      	movs	r5, #1
 801b5b0:	4628      	mov	r0, r5
 801b5b2:	b002      	add	sp, #8
 801b5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b5b8:	4604      	mov	r4, r0
 801b5ba:	491c      	ldr	r1, [pc, #112]	@ (801b62c <rcl_get_security_options_from_environment+0x98>)
 801b5bc:	9801      	ldr	r0, [sp, #4]
 801b5be:	f7e4 fe8f 	bl	80002e0 <strcmp>
 801b5c2:	4605      	mov	r5, r0
 801b5c4:	b9f0      	cbnz	r0, 801b604 <rcl_get_security_options_from_environment+0x70>
 801b5c6:	9001      	str	r0, [sp, #4]
 801b5c8:	f1b8 0f00 	cmp.w	r8, #0
 801b5cc:	d021      	beq.n	801b612 <rcl_get_security_options_from_environment+0x7e>
 801b5ce:	a901      	add	r1, sp, #4
 801b5d0:	4817      	ldr	r0, [pc, #92]	@ (801b630 <rcl_get_security_options_from_environment+0x9c>)
 801b5d2:	f002 fae9 	bl	801dba8 <rcutils_get_env>
 801b5d6:	2800      	cmp	r0, #0
 801b5d8:	d1e9      	bne.n	801b5ae <rcl_get_security_options_from_environment+0x1a>
 801b5da:	4916      	ldr	r1, [pc, #88]	@ (801b634 <rcl_get_security_options_from_environment+0xa0>)
 801b5dc:	9801      	ldr	r0, [sp, #4]
 801b5de:	f7e4 fe7f 	bl	80002e0 <strcmp>
 801b5e2:	4603      	mov	r3, r0
 801b5e4:	4639      	mov	r1, r7
 801b5e6:	4630      	mov	r0, r6
 801b5e8:	fab3 f383 	clz	r3, r3
 801b5ec:	095b      	lsrs	r3, r3, #5
 801b5ee:	f888 3000 	strb.w	r3, [r8]
 801b5f2:	f7ff ff65 	bl	801b4c0 <rcl_get_secure_root>
 801b5f6:	b170      	cbz	r0, 801b616 <rcl_get_security_options_from_environment+0x82>
 801b5f8:	f8c8 0004 	str.w	r0, [r8, #4]
 801b5fc:	4628      	mov	r0, r5
 801b5fe:	b002      	add	sp, #8
 801b600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b604:	4625      	mov	r5, r4
 801b606:	f888 4000 	strb.w	r4, [r8]
 801b60a:	4628      	mov	r0, r5
 801b60c:	b002      	add	sp, #8
 801b60e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b612:	250b      	movs	r5, #11
 801b614:	e7cc      	b.n	801b5b0 <rcl_get_security_options_from_environment+0x1c>
 801b616:	f898 5000 	ldrb.w	r5, [r8]
 801b61a:	f1a5 0501 	sub.w	r5, r5, #1
 801b61e:	fab5 f585 	clz	r5, r5
 801b622:	096d      	lsrs	r5, r5, #5
 801b624:	e7c4      	b.n	801b5b0 <rcl_get_security_options_from_environment+0x1c>
 801b626:	bf00      	nop
 801b628:	0802526c 	.word	0x0802526c
 801b62c:	08025280 	.word	0x08025280
 801b630:	08025288 	.word	0x08025288
 801b634:	080252a0 	.word	0x080252a0

0801b638 <rcl_get_zero_initialized_service>:
 801b638:	4b01      	ldr	r3, [pc, #4]	@ (801b640 <rcl_get_zero_initialized_service+0x8>)
 801b63a:	6818      	ldr	r0, [r3, #0]
 801b63c:	4770      	bx	lr
 801b63e:	bf00      	nop
 801b640:	080252ec 	.word	0x080252ec

0801b644 <rcl_service_init>:
 801b644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b648:	b088      	sub	sp, #32
 801b64a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801b64c:	b1ff      	cbz	r7, 801b68e <rcl_service_init+0x4a>
 801b64e:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 801b652:	4605      	mov	r5, r0
 801b654:	460e      	mov	r6, r1
 801b656:	4691      	mov	r9, r2
 801b658:	4650      	mov	r0, sl
 801b65a:	4698      	mov	r8, r3
 801b65c:	f7f9 feb4 	bl	80153c8 <rcutils_allocator_is_valid>
 801b660:	f080 0401 	eor.w	r4, r0, #1
 801b664:	b2e4      	uxtb	r4, r4
 801b666:	b994      	cbnz	r4, 801b68e <rcl_service_init+0x4a>
 801b668:	b18d      	cbz	r5, 801b68e <rcl_service_init+0x4a>
 801b66a:	4630      	mov	r0, r6
 801b66c:	f7ff fdb8 	bl	801b1e0 <rcl_node_is_valid>
 801b670:	2800      	cmp	r0, #0
 801b672:	d05d      	beq.n	801b730 <rcl_service_init+0xec>
 801b674:	f1b8 0f00 	cmp.w	r8, #0
 801b678:	d009      	beq.n	801b68e <rcl_service_init+0x4a>
 801b67a:	f1b9 0f00 	cmp.w	r9, #0
 801b67e:	d006      	beq.n	801b68e <rcl_service_init+0x4a>
 801b680:	682b      	ldr	r3, [r5, #0]
 801b682:	b14b      	cbz	r3, 801b698 <rcl_service_init+0x54>
 801b684:	2464      	movs	r4, #100	@ 0x64
 801b686:	4620      	mov	r0, r4
 801b688:	b008      	add	sp, #32
 801b68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b68e:	240b      	movs	r4, #11
 801b690:	4620      	mov	r0, r4
 801b692:	b008      	add	sp, #32
 801b694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b698:	aa07      	add	r2, sp, #28
 801b69a:	9304      	str	r3, [sp, #16]
 801b69c:	9307      	str	r3, [sp, #28]
 801b69e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801b6a2:	9205      	str	r2, [sp, #20]
 801b6a4:	2201      	movs	r2, #1
 801b6a6:	9203      	str	r2, [sp, #12]
 801b6a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b6ac:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b6b0:	4641      	mov	r1, r8
 801b6b2:	4630      	mov	r0, r6
 801b6b4:	e89a 000c 	ldmia.w	sl, {r2, r3}
 801b6b8:	f7ff fdea 	bl	801b290 <rcl_node_resolve_name>
 801b6bc:	2800      	cmp	r0, #0
 801b6be:	d146      	bne.n	801b74e <rcl_service_init+0x10a>
 801b6c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b6c2:	f44f 7088 	mov.w	r0, #272	@ 0x110
 801b6c6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b6c8:	4798      	blx	r3
 801b6ca:	6028      	str	r0, [r5, #0]
 801b6cc:	2800      	cmp	r0, #0
 801b6ce:	d046      	beq.n	801b75e <rcl_service_init+0x11a>
 801b6d0:	4630      	mov	r0, r6
 801b6d2:	f7ff fda7 	bl	801b224 <rcl_node_get_rmw_handle>
 801b6d6:	463b      	mov	r3, r7
 801b6d8:	4649      	mov	r1, r9
 801b6da:	9a07      	ldr	r2, [sp, #28]
 801b6dc:	682c      	ldr	r4, [r5, #0]
 801b6de:	f003 fd05 	bl	801f0ec <rmw_create_service>
 801b6e2:	682b      	ldr	r3, [r5, #0]
 801b6e4:	f8c4 0108 	str.w	r0, [r4, #264]	@ 0x108
 801b6e8:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801b6ec:	b338      	cbz	r0, 801b73e <rcl_service_init+0xfa>
 801b6ee:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 801b6f2:	f003 fe2d 	bl	801f350 <rmw_service_request_subscription_get_actual_qos>
 801b6f6:	bb00      	cbnz	r0, 801b73a <rcl_service_init+0xf6>
 801b6f8:	682b      	ldr	r3, [r5, #0]
 801b6fa:	f103 01b8 	add.w	r1, r3, #184	@ 0xb8
 801b6fe:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801b702:	f003 fe11 	bl	801f328 <rmw_service_response_publisher_get_actual_qos>
 801b706:	4604      	mov	r4, r0
 801b708:	b9b8      	cbnz	r0, 801b73a <rcl_service_init+0xf6>
 801b70a:	6828      	ldr	r0, [r5, #0]
 801b70c:	2268      	movs	r2, #104	@ 0x68
 801b70e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801b712:	4639      	mov	r1, r7
 801b714:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 801b718:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 801b71c:	f006 fe77 	bl	802240e <memcpy>
 801b720:	9807      	ldr	r0, [sp, #28]
 801b722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b724:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b726:	4798      	blx	r3
 801b728:	4620      	mov	r0, r4
 801b72a:	b008      	add	sp, #32
 801b72c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b730:	24c8      	movs	r4, #200	@ 0xc8
 801b732:	4620      	mov	r0, r4
 801b734:	b008      	add	sp, #32
 801b736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b73a:	682b      	ldr	r3, [r5, #0]
 801b73c:	b16b      	cbz	r3, 801b75a <rcl_service_init+0x116>
 801b73e:	4618      	mov	r0, r3
 801b740:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b742:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b744:	2401      	movs	r4, #1
 801b746:	4790      	blx	r2
 801b748:	2300      	movs	r3, #0
 801b74a:	602b      	str	r3, [r5, #0]
 801b74c:	e7e8      	b.n	801b720 <rcl_service_init+0xdc>
 801b74e:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 801b752:	2b01      	cmp	r3, #1
 801b754:	d905      	bls.n	801b762 <rcl_service_init+0x11e>
 801b756:	280a      	cmp	r0, #10
 801b758:	d001      	beq.n	801b75e <rcl_service_init+0x11a>
 801b75a:	2401      	movs	r4, #1
 801b75c:	e7e0      	b.n	801b720 <rcl_service_init+0xdc>
 801b75e:	240a      	movs	r4, #10
 801b760:	e7de      	b.n	801b720 <rcl_service_init+0xdc>
 801b762:	2468      	movs	r4, #104	@ 0x68
 801b764:	e7dc      	b.n	801b720 <rcl_service_init+0xdc>
 801b766:	bf00      	nop

0801b768 <rcl_service_get_default_options>:
 801b768:	b530      	push	{r4, r5, lr}
 801b76a:	4d0f      	ldr	r5, [pc, #60]	@ (801b7a8 <rcl_service_get_default_options+0x40>)
 801b76c:	b087      	sub	sp, #28
 801b76e:	4604      	mov	r4, r0
 801b770:	2250      	movs	r2, #80	@ 0x50
 801b772:	490e      	ldr	r1, [pc, #56]	@ (801b7ac <rcl_service_get_default_options+0x44>)
 801b774:	4628      	mov	r0, r5
 801b776:	f006 fe4a 	bl	802240e <memcpy>
 801b77a:	4668      	mov	r0, sp
 801b77c:	f7f9 fe16 	bl	80153ac <rcutils_get_default_allocator>
 801b780:	46ec      	mov	ip, sp
 801b782:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 801b786:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b78a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b78e:	f8dc 3000 	ldr.w	r3, [ip]
 801b792:	2268      	movs	r2, #104	@ 0x68
 801b794:	4629      	mov	r1, r5
 801b796:	4620      	mov	r0, r4
 801b798:	f8ce 3000 	str.w	r3, [lr]
 801b79c:	f006 fe37 	bl	802240e <memcpy>
 801b7a0:	4620      	mov	r0, r4
 801b7a2:	b007      	add	sp, #28
 801b7a4:	bd30      	pop	{r4, r5, pc}
 801b7a6:	bf00      	nop
 801b7a8:	24069280 	.word	0x24069280
 801b7ac:	080252f0 	.word	0x080252f0

0801b7b0 <rcl_service_get_rmw_handle>:
 801b7b0:	b118      	cbz	r0, 801b7ba <rcl_service_get_rmw_handle+0xa>
 801b7b2:	6800      	ldr	r0, [r0, #0]
 801b7b4:	b108      	cbz	r0, 801b7ba <rcl_service_get_rmw_handle+0xa>
 801b7b6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801b7ba:	4770      	bx	lr

0801b7bc <rcl_take_request>:
 801b7bc:	b570      	push	{r4, r5, r6, lr}
 801b7be:	468e      	mov	lr, r1
 801b7c0:	b08c      	sub	sp, #48	@ 0x30
 801b7c2:	460c      	mov	r4, r1
 801b7c4:	4616      	mov	r6, r2
 801b7c6:	f10d 0c18 	add.w	ip, sp, #24
 801b7ca:	4605      	mov	r5, r0
 801b7cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b7d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b7d4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b7d8:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b7dc:	b30d      	cbz	r5, 801b822 <rcl_take_request+0x66>
 801b7de:	682b      	ldr	r3, [r5, #0]
 801b7e0:	b1fb      	cbz	r3, 801b822 <rcl_take_request+0x66>
 801b7e2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801b7e6:	b1e0      	cbz	r0, 801b822 <rcl_take_request+0x66>
 801b7e8:	b336      	cbz	r6, 801b838 <rcl_take_request+0x7c>
 801b7ea:	2300      	movs	r3, #0
 801b7ec:	4632      	mov	r2, r6
 801b7ee:	a902      	add	r1, sp, #8
 801b7f0:	f88d 3007 	strb.w	r3, [sp, #7]
 801b7f4:	f10d 0307 	add.w	r3, sp, #7
 801b7f8:	f003 fb76 	bl	801eee8 <rmw_take_request>
 801b7fc:	4605      	mov	r5, r0
 801b7fe:	b198      	cbz	r0, 801b828 <rcl_take_request+0x6c>
 801b800:	280a      	cmp	r0, #10
 801b802:	bf18      	it	ne
 801b804:	2501      	movne	r5, #1
 801b806:	f10d 0e18 	add.w	lr, sp, #24
 801b80a:	46a4      	mov	ip, r4
 801b80c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b810:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b814:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b818:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b81c:	4628      	mov	r0, r5
 801b81e:	b00c      	add	sp, #48	@ 0x30
 801b820:	bd70      	pop	{r4, r5, r6, pc}
 801b822:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801b826:	e7ee      	b.n	801b806 <rcl_take_request+0x4a>
 801b828:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801b82c:	f240 2359 	movw	r3, #601	@ 0x259
 801b830:	2a00      	cmp	r2, #0
 801b832:	bf08      	it	eq
 801b834:	461d      	moveq	r5, r3
 801b836:	e7e6      	b.n	801b806 <rcl_take_request+0x4a>
 801b838:	250b      	movs	r5, #11
 801b83a:	e7e4      	b.n	801b806 <rcl_take_request+0x4a>

0801b83c <rcl_send_response>:
 801b83c:	b170      	cbz	r0, 801b85c <rcl_send_response+0x20>
 801b83e:	6800      	ldr	r0, [r0, #0]
 801b840:	b160      	cbz	r0, 801b85c <rcl_send_response+0x20>
 801b842:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801b846:	b148      	cbz	r0, 801b85c <rcl_send_response+0x20>
 801b848:	b169      	cbz	r1, 801b866 <rcl_send_response+0x2a>
 801b84a:	b510      	push	{r4, lr}
 801b84c:	b14a      	cbz	r2, 801b862 <rcl_send_response+0x26>
 801b84e:	f003 fba9 	bl	801efa4 <rmw_send_response>
 801b852:	b110      	cbz	r0, 801b85a <rcl_send_response+0x1e>
 801b854:	2802      	cmp	r0, #2
 801b856:	bf18      	it	ne
 801b858:	2001      	movne	r0, #1
 801b85a:	bd10      	pop	{r4, pc}
 801b85c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 801b860:	4770      	bx	lr
 801b862:	200b      	movs	r0, #11
 801b864:	bd10      	pop	{r4, pc}
 801b866:	200b      	movs	r0, #11
 801b868:	4770      	bx	lr
 801b86a:	bf00      	nop

0801b86c <rcl_service_is_valid>:
 801b86c:	b130      	cbz	r0, 801b87c <rcl_service_is_valid+0x10>
 801b86e:	6800      	ldr	r0, [r0, #0]
 801b870:	b120      	cbz	r0, 801b87c <rcl_service_is_valid+0x10>
 801b872:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801b876:	3800      	subs	r0, #0
 801b878:	bf18      	it	ne
 801b87a:	2001      	movne	r0, #1
 801b87c:	4770      	bx	lr
 801b87e:	bf00      	nop

0801b880 <rcl_get_zero_initialized_subscription>:
 801b880:	4b01      	ldr	r3, [pc, #4]	@ (801b888 <rcl_get_zero_initialized_subscription+0x8>)
 801b882:	6818      	ldr	r0, [r3, #0]
 801b884:	4770      	bx	lr
 801b886:	bf00      	nop
 801b888:	08025340 	.word	0x08025340

0801b88c <rcl_subscription_init>:
 801b88c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b890:	b088      	sub	sp, #32
 801b892:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801b894:	b1ff      	cbz	r7, 801b8d6 <rcl_subscription_init+0x4a>
 801b896:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 801b89a:	4605      	mov	r5, r0
 801b89c:	460e      	mov	r6, r1
 801b89e:	4691      	mov	r9, r2
 801b8a0:	4650      	mov	r0, sl
 801b8a2:	4698      	mov	r8, r3
 801b8a4:	f7f9 fd90 	bl	80153c8 <rcutils_allocator_is_valid>
 801b8a8:	f080 0401 	eor.w	r4, r0, #1
 801b8ac:	b2e4      	uxtb	r4, r4
 801b8ae:	b994      	cbnz	r4, 801b8d6 <rcl_subscription_init+0x4a>
 801b8b0:	b18d      	cbz	r5, 801b8d6 <rcl_subscription_init+0x4a>
 801b8b2:	4630      	mov	r0, r6
 801b8b4:	f7ff fc94 	bl	801b1e0 <rcl_node_is_valid>
 801b8b8:	2800      	cmp	r0, #0
 801b8ba:	d055      	beq.n	801b968 <rcl_subscription_init+0xdc>
 801b8bc:	f1b9 0f00 	cmp.w	r9, #0
 801b8c0:	d009      	beq.n	801b8d6 <rcl_subscription_init+0x4a>
 801b8c2:	f1b8 0f00 	cmp.w	r8, #0
 801b8c6:	d006      	beq.n	801b8d6 <rcl_subscription_init+0x4a>
 801b8c8:	682b      	ldr	r3, [r5, #0]
 801b8ca:	b14b      	cbz	r3, 801b8e0 <rcl_subscription_init+0x54>
 801b8cc:	2464      	movs	r4, #100	@ 0x64
 801b8ce:	4620      	mov	r0, r4
 801b8d0:	b008      	add	sp, #32
 801b8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8d6:	240b      	movs	r4, #11
 801b8d8:	4620      	mov	r0, r4
 801b8da:	b008      	add	sp, #32
 801b8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8e0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801b8e4:	aa07      	add	r2, sp, #28
 801b8e6:	9307      	str	r3, [sp, #28]
 801b8e8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801b8ec:	9205      	str	r2, [sp, #20]
 801b8ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b8f2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b8f6:	4641      	mov	r1, r8
 801b8f8:	4630      	mov	r0, r6
 801b8fa:	e89a 000c 	ldmia.w	sl, {r2, r3}
 801b8fe:	f7ff fcc7 	bl	801b290 <rcl_node_resolve_name>
 801b902:	2800      	cmp	r0, #0
 801b904:	d15f      	bne.n	801b9c6 <rcl_subscription_init+0x13a>
 801b906:	21c8      	movs	r1, #200	@ 0xc8
 801b908:	2001      	movs	r0, #1
 801b90a:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	@ 0x5c
 801b90e:	4798      	blx	r3
 801b910:	6028      	str	r0, [r5, #0]
 801b912:	2800      	cmp	r0, #0
 801b914:	d05f      	beq.n	801b9d6 <rcl_subscription_init+0x14a>
 801b916:	4630      	mov	r0, r6
 801b918:	f7ff fc84 	bl	801b224 <rcl_node_get_rmw_handle>
 801b91c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801b920:	4649      	mov	r1, r9
 801b922:	9a07      	ldr	r2, [sp, #28]
 801b924:	9300      	str	r3, [sp, #0]
 801b926:	463b      	mov	r3, r7
 801b928:	682c      	ldr	r4, [r5, #0]
 801b92a:	f003 fd25 	bl	801f378 <rmw_create_subscription>
 801b92e:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 801b932:	682c      	ldr	r4, [r5, #0]
 801b934:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 801b938:	b348      	cbz	r0, 801b98e <rcl_subscription_init+0x102>
 801b93a:	f104 0170 	add.w	r1, r4, #112	@ 0x70
 801b93e:	f003 fe11 	bl	801f564 <rmw_subscription_get_actual_qos>
 801b942:	4604      	mov	r4, r0
 801b944:	b9a8      	cbnz	r0, 801b972 <rcl_subscription_init+0xe6>
 801b946:	6828      	ldr	r0, [r5, #0]
 801b948:	2270      	movs	r2, #112	@ 0x70
 801b94a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801b94e:	4639      	mov	r1, r7
 801b950:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 801b954:	f006 fd5b 	bl	802240e <memcpy>
 801b958:	9807      	ldr	r0, [sp, #28]
 801b95a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b95c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b95e:	4798      	blx	r3
 801b960:	4620      	mov	r0, r4
 801b962:	b008      	add	sp, #32
 801b964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b968:	24c8      	movs	r4, #200	@ 0xc8
 801b96a:	4620      	mov	r0, r4
 801b96c:	b008      	add	sp, #32
 801b96e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b972:	682c      	ldr	r4, [r5, #0]
 801b974:	b36c      	cbz	r4, 801b9d2 <rcl_subscription_init+0x146>
 801b976:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 801b97a:	b14b      	cbz	r3, 801b990 <rcl_subscription_init+0x104>
 801b97c:	4630      	mov	r0, r6
 801b97e:	f7ff fc51 	bl	801b224 <rcl_node_get_rmw_handle>
 801b982:	682b      	ldr	r3, [r5, #0]
 801b984:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 801b988:	f003 fe00 	bl	801f58c <rmw_destroy_subscription>
 801b98c:	682c      	ldr	r4, [r5, #0]
 801b98e:	b194      	cbz	r4, 801b9b6 <rcl_subscription_init+0x12a>
 801b990:	f104 0650 	add.w	r6, r4, #80	@ 0x50
 801b994:	4630      	mov	r0, r6
 801b996:	f7f9 fd17 	bl	80153c8 <rcutils_allocator_is_valid>
 801b99a:	b158      	cbz	r0, 801b9b4 <rcl_subscription_init+0x128>
 801b99c:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 801b99e:	b148      	cbz	r0, 801b9b4 <rcl_subscription_init+0x128>
 801b9a0:	4631      	mov	r1, r6
 801b9a2:	f002 fbf9 	bl	801e198 <rmw_subscription_content_filter_options_fini>
 801b9a6:	4606      	mov	r6, r0
 801b9a8:	b9c8      	cbnz	r0, 801b9de <rcl_subscription_init+0x152>
 801b9aa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801b9ac:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 801b9ae:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 801b9b0:	4798      	blx	r3
 801b9b2:	66e6      	str	r6, [r4, #108]	@ 0x6c
 801b9b4:	682c      	ldr	r4, [r5, #0]
 801b9b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b9b8:	4620      	mov	r0, r4
 801b9ba:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b9bc:	2401      	movs	r4, #1
 801b9be:	4798      	blx	r3
 801b9c0:	2300      	movs	r3, #0
 801b9c2:	602b      	str	r3, [r5, #0]
 801b9c4:	e7c8      	b.n	801b958 <rcl_subscription_init+0xcc>
 801b9c6:	2867      	cmp	r0, #103	@ 0x67
 801b9c8:	d007      	beq.n	801b9da <rcl_subscription_init+0x14e>
 801b9ca:	2869      	cmp	r0, #105	@ 0x69
 801b9cc:	d005      	beq.n	801b9da <rcl_subscription_init+0x14e>
 801b9ce:	280a      	cmp	r0, #10
 801b9d0:	d001      	beq.n	801b9d6 <rcl_subscription_init+0x14a>
 801b9d2:	2401      	movs	r4, #1
 801b9d4:	e7c0      	b.n	801b958 <rcl_subscription_init+0xcc>
 801b9d6:	240a      	movs	r4, #10
 801b9d8:	e7be      	b.n	801b958 <rcl_subscription_init+0xcc>
 801b9da:	2467      	movs	r4, #103	@ 0x67
 801b9dc:	e7bc      	b.n	801b958 <rcl_subscription_init+0xcc>
 801b9de:	f7ff f801 	bl	801a9e4 <rcl_convert_rmw_ret_to_rcl_ret>
 801b9e2:	682c      	ldr	r4, [r5, #0]
 801b9e4:	e7e7      	b.n	801b9b6 <rcl_subscription_init+0x12a>
 801b9e6:	bf00      	nop

0801b9e8 <rcl_subscription_get_default_options>:
 801b9e8:	b570      	push	{r4, r5, r6, lr}
 801b9ea:	4d14      	ldr	r5, [pc, #80]	@ (801ba3c <rcl_subscription_get_default_options+0x54>)
 801b9ec:	b08a      	sub	sp, #40	@ 0x28
 801b9ee:	4604      	mov	r4, r0
 801b9f0:	2250      	movs	r2, #80	@ 0x50
 801b9f2:	4913      	ldr	r1, [pc, #76]	@ (801ba40 <rcl_subscription_get_default_options+0x58>)
 801b9f4:	4628      	mov	r0, r5
 801b9f6:	f006 fd0a 	bl	802240e <memcpy>
 801b9fa:	a804      	add	r0, sp, #16
 801b9fc:	f7f9 fcd6 	bl	80153ac <rcutils_get_default_allocator>
 801ba00:	f10d 0c10 	add.w	ip, sp, #16
 801ba04:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 801ba08:	466e      	mov	r6, sp
 801ba0a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ba0e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801ba12:	f8dc 3000 	ldr.w	r3, [ip]
 801ba16:	4630      	mov	r0, r6
 801ba18:	f8ce 3000 	str.w	r3, [lr]
 801ba1c:	f002 fbd6 	bl	801e1cc <rmw_get_default_subscription_options>
 801ba20:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 801ba24:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801ba28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801ba2c:	2270      	movs	r2, #112	@ 0x70
 801ba2e:	4629      	mov	r1, r5
 801ba30:	4620      	mov	r0, r4
 801ba32:	f006 fcec 	bl	802240e <memcpy>
 801ba36:	4620      	mov	r0, r4
 801ba38:	b00a      	add	sp, #40	@ 0x28
 801ba3a:	bd70      	pop	{r4, r5, r6, pc}
 801ba3c:	240692e8 	.word	0x240692e8
 801ba40:	08025348 	.word	0x08025348

0801ba44 <rcl_take>:
 801ba44:	2800      	cmp	r0, #0
 801ba46:	d049      	beq.n	801badc <rcl_take+0x98>
 801ba48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba4c:	4615      	mov	r5, r2
 801ba4e:	6802      	ldr	r2, [r0, #0]
 801ba50:	b0a4      	sub	sp, #144	@ 0x90
 801ba52:	4604      	mov	r4, r0
 801ba54:	2a00      	cmp	r2, #0
 801ba56:	d039      	beq.n	801bacc <rcl_take+0x88>
 801ba58:	461f      	mov	r7, r3
 801ba5a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 801ba5e:	b3ab      	cbz	r3, 801bacc <rcl_take+0x88>
 801ba60:	460e      	mov	r6, r1
 801ba62:	2900      	cmp	r1, #0
 801ba64:	d038      	beq.n	801bad8 <rcl_take+0x94>
 801ba66:	2d00      	cmp	r5, #0
 801ba68:	d03c      	beq.n	801bae4 <rcl_take+0xa0>
 801ba6a:	a802      	add	r0, sp, #8
 801ba6c:	f04f 0800 	mov.w	r8, #0
 801ba70:	f002 fc3a 	bl	801e2e8 <rmw_get_zero_initialized_message_info>
 801ba74:	f10d 0c08 	add.w	ip, sp, #8
 801ba78:	46ae      	mov	lr, r5
 801ba7a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ba7e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801ba82:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ba86:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801ba8a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ba8e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801ba92:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801ba96:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801ba9a:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 801ba9e:	462b      	mov	r3, r5
 801baa0:	6820      	ldr	r0, [r4, #0]
 801baa2:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 801baa6:	4631      	mov	r1, r6
 801baa8:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801baac:	9700      	str	r7, [sp, #0]
 801baae:	f003 fdcf 	bl	801f650 <rmw_take_with_info>
 801bab2:	4603      	mov	r3, r0
 801bab4:	b9c0      	cbnz	r0, 801bae8 <rcl_take+0xa4>
 801bab6:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 801baba:	f240 1291 	movw	r2, #401	@ 0x191
 801babe:	2900      	cmp	r1, #0
 801bac0:	bf08      	it	eq
 801bac2:	4613      	moveq	r3, r2
 801bac4:	4618      	mov	r0, r3
 801bac6:	b024      	add	sp, #144	@ 0x90
 801bac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bacc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801bad0:	4618      	mov	r0, r3
 801bad2:	b024      	add	sp, #144	@ 0x90
 801bad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bad8:	230b      	movs	r3, #11
 801bada:	e7f3      	b.n	801bac4 <rcl_take+0x80>
 801badc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801bae0:	4618      	mov	r0, r3
 801bae2:	4770      	bx	lr
 801bae4:	ad14      	add	r5, sp, #80	@ 0x50
 801bae6:	e7c0      	b.n	801ba6a <rcl_take+0x26>
 801bae8:	f7fe ff7c 	bl	801a9e4 <rcl_convert_rmw_ret_to_rcl_ret>
 801baec:	4603      	mov	r3, r0
 801baee:	e7e9      	b.n	801bac4 <rcl_take+0x80>

0801baf0 <rcl_subscription_get_rmw_handle>:
 801baf0:	b118      	cbz	r0, 801bafa <rcl_subscription_get_rmw_handle+0xa>
 801baf2:	6800      	ldr	r0, [r0, #0]
 801baf4:	b108      	cbz	r0, 801bafa <rcl_subscription_get_rmw_handle+0xa>
 801baf6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801bafa:	4770      	bx	lr

0801bafc <rcl_subscription_is_valid>:
 801bafc:	b130      	cbz	r0, 801bb0c <rcl_subscription_is_valid+0x10>
 801bafe:	6800      	ldr	r0, [r0, #0]
 801bb00:	b120      	cbz	r0, 801bb0c <rcl_subscription_is_valid+0x10>
 801bb02:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801bb06:	3800      	subs	r0, #0
 801bb08:	bf18      	it	ne
 801bb0a:	2001      	movne	r0, #1
 801bb0c:	4770      	bx	lr
 801bb0e:	bf00      	nop

0801bb10 <rcl_get_system_time>:
 801bb10:	4608      	mov	r0, r1
 801bb12:	f7f9 bc99 	b.w	8015448 <rcutils_system_time_now>
 801bb16:	bf00      	nop

0801bb18 <rcl_get_steady_time>:
 801bb18:	4608      	mov	r0, r1
 801bb1a:	f7f9 bcbb 	b.w	8015494 <rcutils_steady_time_now>
 801bb1e:	bf00      	nop

0801bb20 <rcl_get_ros_time>:
 801bb20:	7a03      	ldrb	r3, [r0, #8]
 801bb22:	b510      	push	{r4, lr}
 801bb24:	460c      	mov	r4, r1
 801bb26:	b143      	cbz	r3, 801bb3a <rcl_get_ros_time+0x1a>
 801bb28:	2105      	movs	r1, #5
 801bb2a:	f001 ff99 	bl	801da60 <__atomic_load_8>
 801bb2e:	4602      	mov	r2, r0
 801bb30:	460b      	mov	r3, r1
 801bb32:	2000      	movs	r0, #0
 801bb34:	e9c4 2300 	strd	r2, r3, [r4]
 801bb38:	bd10      	pop	{r4, pc}
 801bb3a:	4608      	mov	r0, r1
 801bb3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bb40:	f7f9 bc82 	b.w	8015448 <rcutils_system_time_now>

0801bb44 <rcl_clock_init>:
 801bb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb46:	4605      	mov	r5, r0
 801bb48:	4610      	mov	r0, r2
 801bb4a:	4614      	mov	r4, r2
 801bb4c:	460e      	mov	r6, r1
 801bb4e:	f7f9 fc3b 	bl	80153c8 <rcutils_allocator_is_valid>
 801bb52:	b128      	cbz	r0, 801bb60 <rcl_clock_init+0x1c>
 801bb54:	2d03      	cmp	r5, #3
 801bb56:	d803      	bhi.n	801bb60 <rcl_clock_init+0x1c>
 801bb58:	e8df f005 	tbb	[pc, r5]
 801bb5c:	0659301f 	.word	0x0659301f
 801bb60:	f04f 0c0b 	mov.w	ip, #11
 801bb64:	4660      	mov	r0, ip
 801bb66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bb68:	2c00      	cmp	r4, #0
 801bb6a:	d0f9      	beq.n	801bb60 <rcl_clock_init+0x1c>
 801bb6c:	fab6 f386 	clz	r3, r6
 801bb70:	095b      	lsrs	r3, r3, #5
 801bb72:	2e00      	cmp	r6, #0
 801bb74:	d0f4      	beq.n	801bb60 <rcl_clock_init+0x1c>
 801bb76:	6133      	str	r3, [r6, #16]
 801bb78:	469c      	mov	ip, r3
 801bb7a:	f106 0514 	add.w	r5, r6, #20
 801bb7e:	4f32      	ldr	r7, [pc, #200]	@ (801bc48 <rcl_clock_init+0x104>)
 801bb80:	f04f 0e03 	mov.w	lr, #3
 801bb84:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bb88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bb8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bb8c:	6823      	ldr	r3, [r4, #0]
 801bb8e:	4660      	mov	r0, ip
 801bb90:	602b      	str	r3, [r5, #0]
 801bb92:	60f7      	str	r7, [r6, #12]
 801bb94:	f886 e000 	strb.w	lr, [r6]
 801bb98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bb9a:	2e00      	cmp	r6, #0
 801bb9c:	d0e0      	beq.n	801bb60 <rcl_clock_init+0x1c>
 801bb9e:	2300      	movs	r3, #0
 801bba0:	f106 0514 	add.w	r5, r6, #20
 801bba4:	7033      	strb	r3, [r6, #0]
 801bba6:	469c      	mov	ip, r3
 801bba8:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bbac:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801bbb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bbb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bbb4:	6823      	ldr	r3, [r4, #0]
 801bbb6:	4660      	mov	r0, ip
 801bbb8:	602b      	str	r3, [r5, #0]
 801bbba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bbbc:	2c00      	cmp	r4, #0
 801bbbe:	d0cf      	beq.n	801bb60 <rcl_clock_init+0x1c>
 801bbc0:	fab6 f586 	clz	r5, r6
 801bbc4:	096d      	lsrs	r5, r5, #5
 801bbc6:	2e00      	cmp	r6, #0
 801bbc8:	d0ca      	beq.n	801bb60 <rcl_clock_init+0x1c>
 801bbca:	46a6      	mov	lr, r4
 801bbcc:	7035      	strb	r5, [r6, #0]
 801bbce:	f106 0c14 	add.w	ip, r6, #20
 801bbd2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bbd6:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801bbda:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801bbde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bbe2:	f8de 3000 	ldr.w	r3, [lr]
 801bbe6:	2010      	movs	r0, #16
 801bbe8:	f8cc 3000 	str.w	r3, [ip]
 801bbec:	6823      	ldr	r3, [r4, #0]
 801bbee:	6921      	ldr	r1, [r4, #16]
 801bbf0:	4798      	blx	r3
 801bbf2:	6130      	str	r0, [r6, #16]
 801bbf4:	b320      	cbz	r0, 801bc40 <rcl_clock_init+0xfc>
 801bbf6:	2200      	movs	r2, #0
 801bbf8:	2300      	movs	r3, #0
 801bbfa:	46ac      	mov	ip, r5
 801bbfc:	7205      	strb	r5, [r0, #8]
 801bbfe:	e9c0 2300 	strd	r2, r3, [r0]
 801bc02:	4a12      	ldr	r2, [pc, #72]	@ (801bc4c <rcl_clock_init+0x108>)
 801bc04:	2301      	movs	r3, #1
 801bc06:	4660      	mov	r0, ip
 801bc08:	60f2      	str	r2, [r6, #12]
 801bc0a:	7033      	strb	r3, [r6, #0]
 801bc0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc0e:	2c00      	cmp	r4, #0
 801bc10:	d0a6      	beq.n	801bb60 <rcl_clock_init+0x1c>
 801bc12:	fab6 f386 	clz	r3, r6
 801bc16:	095b      	lsrs	r3, r3, #5
 801bc18:	2e00      	cmp	r6, #0
 801bc1a:	d0a1      	beq.n	801bb60 <rcl_clock_init+0x1c>
 801bc1c:	6133      	str	r3, [r6, #16]
 801bc1e:	469c      	mov	ip, r3
 801bc20:	f106 0514 	add.w	r5, r6, #20
 801bc24:	f8df e028 	ldr.w	lr, [pc, #40]	@ 801bc50 <rcl_clock_init+0x10c>
 801bc28:	2702      	movs	r7, #2
 801bc2a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bc2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bc30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bc32:	6823      	ldr	r3, [r4, #0]
 801bc34:	4660      	mov	r0, ip
 801bc36:	602b      	str	r3, [r5, #0]
 801bc38:	f8c6 e00c 	str.w	lr, [r6, #12]
 801bc3c:	7037      	strb	r7, [r6, #0]
 801bc3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc40:	f04f 0c0a 	mov.w	ip, #10
 801bc44:	e78e      	b.n	801bb64 <rcl_clock_init+0x20>
 801bc46:	bf00      	nop
 801bc48:	0801bb19 	.word	0x0801bb19
 801bc4c:	0801bb21 	.word	0x0801bb21
 801bc50:	0801bb11 	.word	0x0801bb11

0801bc54 <rcl_clock_get_now>:
 801bc54:	b140      	cbz	r0, 801bc68 <rcl_clock_get_now+0x14>
 801bc56:	b139      	cbz	r1, 801bc68 <rcl_clock_get_now+0x14>
 801bc58:	7803      	ldrb	r3, [r0, #0]
 801bc5a:	b11b      	cbz	r3, 801bc64 <rcl_clock_get_now+0x10>
 801bc5c:	68c3      	ldr	r3, [r0, #12]
 801bc5e:	b10b      	cbz	r3, 801bc64 <rcl_clock_get_now+0x10>
 801bc60:	6900      	ldr	r0, [r0, #16]
 801bc62:	4718      	bx	r3
 801bc64:	2001      	movs	r0, #1
 801bc66:	4770      	bx	lr
 801bc68:	200b      	movs	r0, #11
 801bc6a:	4770      	bx	lr

0801bc6c <rcl_clock_add_jump_callback>:
 801bc6c:	b082      	sub	sp, #8
 801bc6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc72:	a906      	add	r1, sp, #24
 801bc74:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	@ 0x30
 801bc78:	e881 000c 	stmia.w	r1, {r2, r3}
 801bc7c:	b330      	cbz	r0, 801bccc <rcl_clock_add_jump_callback+0x60>
 801bc7e:	4604      	mov	r4, r0
 801bc80:	3014      	adds	r0, #20
 801bc82:	f7f9 fba1 	bl	80153c8 <rcutils_allocator_is_valid>
 801bc86:	b30d      	cbz	r5, 801bccc <rcl_clock_add_jump_callback+0x60>
 801bc88:	f080 0301 	eor.w	r3, r0, #1
 801bc8c:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 801bc90:	d11c      	bne.n	801bccc <rcl_clock_add_jump_callback+0x60>
 801bc92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bc94:	2a00      	cmp	r2, #0
 801bc96:	db19      	blt.n	801bccc <rcl_clock_add_jump_callback+0x60>
 801bc98:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801bc9c:	2901      	cmp	r1, #1
 801bc9e:	f172 0200 	sbcs.w	r2, r2, #0
 801bca2:	da13      	bge.n	801bccc <rcl_clock_add_jump_callback+0x60>
 801bca4:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 801bca8:	2f00      	cmp	r7, #0
 801bcaa:	d040      	beq.n	801bd2e <rcl_clock_add_jump_callback+0xc2>
 801bcac:	4602      	mov	r2, r0
 801bcae:	e003      	b.n	801bcb8 <rcl_clock_add_jump_callback+0x4c>
 801bcb0:	42bb      	cmp	r3, r7
 801bcb2:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 801bcb6:	d010      	beq.n	801bcda <rcl_clock_add_jump_callback+0x6e>
 801bcb8:	6811      	ldr	r1, [r2, #0]
 801bcba:	3301      	adds	r3, #1
 801bcbc:	42a9      	cmp	r1, r5
 801bcbe:	d1f7      	bne.n	801bcb0 <rcl_clock_add_jump_callback+0x44>
 801bcc0:	6a11      	ldr	r1, [r2, #32]
 801bcc2:	42b1      	cmp	r1, r6
 801bcc4:	d1f4      	bne.n	801bcb0 <rcl_clock_add_jump_callback+0x44>
 801bcc6:	f04f 0e01 	mov.w	lr, #1
 801bcca:	e001      	b.n	801bcd0 <rcl_clock_add_jump_callback+0x64>
 801bccc:	f04f 0e0b 	mov.w	lr, #11
 801bcd0:	4670      	mov	r0, lr
 801bcd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bcd6:	b002      	add	sp, #8
 801bcd8:	4770      	bx	lr
 801bcda:	3301      	adds	r3, #1
 801bcdc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801bce0:	00d9      	lsls	r1, r3, #3
 801bce2:	69e3      	ldr	r3, [r4, #28]
 801bce4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801bce6:	4798      	blx	r3
 801bce8:	b1f0      	cbz	r0, 801bd28 <rcl_clock_add_jump_callback+0xbc>
 801bcea:	68a3      	ldr	r3, [r4, #8]
 801bcec:	f10d 0c18 	add.w	ip, sp, #24
 801bcf0:	6060      	str	r0, [r4, #4]
 801bcf2:	f04f 0e00 	mov.w	lr, #0
 801bcf6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801bcfa:	f103 0801 	add.w	r8, r3, #1
 801bcfe:	f840 5032 	str.w	r5, [r0, r2, lsl #3]
 801bd02:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801bd06:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bd0a:	f105 0708 	add.w	r7, r5, #8
 801bd0e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801bd10:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801bd14:	e887 0003 	stmia.w	r7, {r0, r1}
 801bd18:	4670      	mov	r0, lr
 801bd1a:	622e      	str	r6, [r5, #32]
 801bd1c:	f8c4 8008 	str.w	r8, [r4, #8]
 801bd20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bd24:	b002      	add	sp, #8
 801bd26:	4770      	bx	lr
 801bd28:	f04f 0e0a 	mov.w	lr, #10
 801bd2c:	e7d0      	b.n	801bcd0 <rcl_clock_add_jump_callback+0x64>
 801bd2e:	2128      	movs	r1, #40	@ 0x28
 801bd30:	e7d7      	b.n	801bce2 <rcl_clock_add_jump_callback+0x76>
 801bd32:	bf00      	nop

0801bd34 <rcl_clock_remove_jump_callback>:
 801bd34:	2800      	cmp	r0, #0
 801bd36:	d05f      	beq.n	801bdf8 <rcl_clock_remove_jump_callback+0xc4>
 801bd38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd3c:	4605      	mov	r5, r0
 801bd3e:	3014      	adds	r0, #20
 801bd40:	460f      	mov	r7, r1
 801bd42:	4692      	mov	sl, r2
 801bd44:	f7f9 fb40 	bl	80153c8 <rcutils_allocator_is_valid>
 801bd48:	f080 0001 	eor.w	r0, r0, #1
 801bd4c:	b2c0      	uxtb	r0, r0
 801bd4e:	2800      	cmp	r0, #0
 801bd50:	d13f      	bne.n	801bdd2 <rcl_clock_remove_jump_callback+0x9e>
 801bd52:	2f00      	cmp	r7, #0
 801bd54:	d03d      	beq.n	801bdd2 <rcl_clock_remove_jump_callback+0x9e>
 801bd56:	f8d5 8008 	ldr.w	r8, [r5, #8]
 801bd5a:	f1b8 0f00 	cmp.w	r8, #0
 801bd5e:	d00c      	beq.n	801bd7a <rcl_clock_remove_jump_callback+0x46>
 801bd60:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801bd64:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 801bd68:	464c      	mov	r4, r9
 801bd6a:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 801bd6e:	6823      	ldr	r3, [r4, #0]
 801bd70:	42bb      	cmp	r3, r7
 801bd72:	d005      	beq.n	801bd80 <rcl_clock_remove_jump_callback+0x4c>
 801bd74:	3428      	adds	r4, #40	@ 0x28
 801bd76:	42a6      	cmp	r6, r4
 801bd78:	d1f9      	bne.n	801bd6e <rcl_clock_remove_jump_callback+0x3a>
 801bd7a:	2001      	movs	r0, #1
 801bd7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd80:	6a23      	ldr	r3, [r4, #32]
 801bd82:	3428      	adds	r4, #40	@ 0x28
 801bd84:	42a6      	cmp	r6, r4
 801bd86:	d02f      	beq.n	801bde8 <rcl_clock_remove_jump_callback+0xb4>
 801bd88:	4553      	cmp	r3, sl
 801bd8a:	d1f0      	bne.n	801bd6e <rcl_clock_remove_jump_callback+0x3a>
 801bd8c:	46a6      	mov	lr, r4
 801bd8e:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 801bd92:	3428      	adds	r4, #40	@ 0x28
 801bd94:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bd98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bd9c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bda0:	42a6      	cmp	r6, r4
 801bda2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bda6:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801bdaa:	e88c 0003 	stmia.w	ip, {r0, r1}
 801bdae:	d1ed      	bne.n	801bd8c <rcl_clock_remove_jump_callback+0x58>
 801bdb0:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 801bdb4:	60ac      	str	r4, [r5, #8]
 801bdb6:	b17c      	cbz	r4, 801bdd8 <rcl_clock_remove_jump_callback+0xa4>
 801bdb8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801bdbc:	69eb      	ldr	r3, [r5, #28]
 801bdbe:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801bdc0:	4648      	mov	r0, r9
 801bdc2:	00e1      	lsls	r1, r4, #3
 801bdc4:	4798      	blx	r3
 801bdc6:	4603      	mov	r3, r0
 801bdc8:	b1c0      	cbz	r0, 801bdfc <rcl_clock_remove_jump_callback+0xc8>
 801bdca:	2000      	movs	r0, #0
 801bdcc:	606b      	str	r3, [r5, #4]
 801bdce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bdd2:	200b      	movs	r0, #11
 801bdd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bdd8:	4648      	mov	r0, r9
 801bdda:	69ab      	ldr	r3, [r5, #24]
 801bddc:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 801bdde:	4798      	blx	r3
 801bde0:	4620      	mov	r0, r4
 801bde2:	606c      	str	r4, [r5, #4]
 801bde4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bde8:	4553      	cmp	r3, sl
 801bdea:	d1c6      	bne.n	801bd7a <rcl_clock_remove_jump_callback+0x46>
 801bdec:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 801bdf0:	60ac      	str	r4, [r5, #8]
 801bdf2:	2c00      	cmp	r4, #0
 801bdf4:	d1e0      	bne.n	801bdb8 <rcl_clock_remove_jump_callback+0x84>
 801bdf6:	e7ef      	b.n	801bdd8 <rcl_clock_remove_jump_callback+0xa4>
 801bdf8:	200b      	movs	r0, #11
 801bdfa:	4770      	bx	lr
 801bdfc:	200a      	movs	r0, #10
 801bdfe:	e7e9      	b.n	801bdd4 <rcl_clock_remove_jump_callback+0xa0>

0801be00 <_rcl_timer_time_jump>:
 801be00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be04:	4605      	mov	r5, r0
 801be06:	b084      	sub	sp, #16
 801be08:	4614      	mov	r4, r2
 801be0a:	b131      	cbz	r1, 801be1a <_rcl_timer_time_jump+0x1a>
 801be0c:	7803      	ldrb	r3, [r0, #0]
 801be0e:	3b02      	subs	r3, #2
 801be10:	2b01      	cmp	r3, #1
 801be12:	d93f      	bls.n	801be94 <_rcl_timer_time_jump+0x94>
 801be14:	b004      	add	sp, #16
 801be16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801be1a:	6813      	ldr	r3, [r2, #0]
 801be1c:	a902      	add	r1, sp, #8
 801be1e:	6818      	ldr	r0, [r3, #0]
 801be20:	f7ff ff18 	bl	801bc54 <rcl_clock_get_now>
 801be24:	2800      	cmp	r0, #0
 801be26:	d1f5      	bne.n	801be14 <_rcl_timer_time_jump+0x14>
 801be28:	6820      	ldr	r0, [r4, #0]
 801be2a:	2105      	movs	r1, #5
 801be2c:	3020      	adds	r0, #32
 801be2e:	f001 fe17 	bl	801da60 <__atomic_load_8>
 801be32:	6823      	ldr	r3, [r4, #0]
 801be34:	4681      	mov	r9, r0
 801be36:	4688      	mov	r8, r1
 801be38:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 801be3c:	2105      	movs	r1, #5
 801be3e:	f001 fe0f 	bl	801da60 <__atomic_load_8>
 801be42:	4607      	mov	r7, r0
 801be44:	6820      	ldr	r0, [r4, #0]
 801be46:	460e      	mov	r6, r1
 801be48:	2105      	movs	r1, #5
 801be4a:	3018      	adds	r0, #24
 801be4c:	f001 fe08 	bl	801da60 <__atomic_load_8>
 801be50:	782b      	ldrb	r3, [r5, #0]
 801be52:	4682      	mov	sl, r0
 801be54:	460d      	mov	r5, r1
 801be56:	3b02      	subs	r3, #2
 801be58:	9a02      	ldr	r2, [sp, #8]
 801be5a:	2b01      	cmp	r3, #1
 801be5c:	9b03      	ldr	r3, [sp, #12]
 801be5e:	d937      	bls.n	801bed0 <_rcl_timer_time_jump+0xd0>
 801be60:	42ba      	cmp	r2, r7
 801be62:	eb73 0106 	sbcs.w	r1, r3, r6
 801be66:	da60      	bge.n	801bf2a <_rcl_timer_time_jump+0x12a>
 801be68:	454a      	cmp	r2, r9
 801be6a:	eb73 0108 	sbcs.w	r1, r3, r8
 801be6e:	dad1      	bge.n	801be14 <_rcl_timer_time_jump+0x14>
 801be70:	eb1a 0202 	adds.w	r2, sl, r2
 801be74:	6820      	ldr	r0, [r4, #0]
 801be76:	eb43 0305 	adc.w	r3, r3, r5
 801be7a:	2505      	movs	r5, #5
 801be7c:	3028      	adds	r0, #40	@ 0x28
 801be7e:	9500      	str	r5, [sp, #0]
 801be80:	f001 fe24 	bl	801dacc <__atomic_store_8>
 801be84:	6820      	ldr	r0, [r4, #0]
 801be86:	9500      	str	r5, [sp, #0]
 801be88:	3020      	adds	r0, #32
 801be8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801be8e:	f001 fe1d 	bl	801dacc <__atomic_store_8>
 801be92:	e7bf      	b.n	801be14 <_rcl_timer_time_jump+0x14>
 801be94:	6813      	ldr	r3, [r2, #0]
 801be96:	a902      	add	r1, sp, #8
 801be98:	6818      	ldr	r0, [r3, #0]
 801be9a:	f7ff fedb 	bl	801bc54 <rcl_clock_get_now>
 801be9e:	2800      	cmp	r0, #0
 801bea0:	d1b8      	bne.n	801be14 <_rcl_timer_time_jump+0x14>
 801bea2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bea6:	4313      	orrs	r3, r2
 801bea8:	d0b4      	beq.n	801be14 <_rcl_timer_time_jump+0x14>
 801beaa:	6820      	ldr	r0, [r4, #0]
 801beac:	2105      	movs	r1, #5
 801beae:	3028      	adds	r0, #40	@ 0x28
 801beb0:	f001 fdd6 	bl	801da60 <__atomic_load_8>
 801beb4:	9d02      	ldr	r5, [sp, #8]
 801beb6:	4602      	mov	r2, r0
 801beb8:	9b03      	ldr	r3, [sp, #12]
 801beba:	6820      	ldr	r0, [r4, #0]
 801bebc:	1b52      	subs	r2, r2, r5
 801bebe:	f100 0030 	add.w	r0, r0, #48	@ 0x30
 801bec2:	eb61 0303 	sbc.w	r3, r1, r3
 801bec6:	2105      	movs	r1, #5
 801bec8:	9100      	str	r1, [sp, #0]
 801beca:	f001 fdff 	bl	801dacc <__atomic_store_8>
 801bece:	e7a1      	b.n	801be14 <_rcl_timer_time_jump+0x14>
 801bed0:	4313      	orrs	r3, r2
 801bed2:	d09f      	beq.n	801be14 <_rcl_timer_time_jump+0x14>
 801bed4:	6820      	ldr	r0, [r4, #0]
 801bed6:	f04f 0805 	mov.w	r8, #5
 801beda:	2300      	movs	r3, #0
 801bedc:	2200      	movs	r2, #0
 801bede:	3030      	adds	r0, #48	@ 0x30
 801bee0:	f8cd 8000 	str.w	r8, [sp]
 801bee4:	f001 fe28 	bl	801db38 <__atomic_exchange_8>
 801bee8:	ea51 0300 	orrs.w	r3, r1, r0
 801beec:	4606      	mov	r6, r0
 801beee:	460f      	mov	r7, r1
 801bef0:	d090      	beq.n	801be14 <_rcl_timer_time_jump+0x14>
 801bef2:	9a02      	ldr	r2, [sp, #8]
 801bef4:	9b03      	ldr	r3, [sp, #12]
 801bef6:	1a12      	subs	r2, r2, r0
 801bef8:	f8cd 8000 	str.w	r8, [sp]
 801befc:	6820      	ldr	r0, [r4, #0]
 801befe:	eb63 0301 	sbc.w	r3, r3, r1
 801bf02:	eb12 020a 	adds.w	r2, r2, sl
 801bf06:	f100 0028 	add.w	r0, r0, #40	@ 0x28
 801bf0a:	eb43 0305 	adc.w	r3, r3, r5
 801bf0e:	f001 fddd 	bl	801dacc <__atomic_store_8>
 801bf12:	f8cd 8000 	str.w	r8, [sp]
 801bf16:	6820      	ldr	r0, [r4, #0]
 801bf18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bf1c:	3020      	adds	r0, #32
 801bf1e:	1b92      	subs	r2, r2, r6
 801bf20:	eb63 0307 	sbc.w	r3, r3, r7
 801bf24:	f001 fdd2 	bl	801dacc <__atomic_store_8>
 801bf28:	e774      	b.n	801be14 <_rcl_timer_time_jump+0x14>
 801bf2a:	6820      	ldr	r0, [r4, #0]
 801bf2c:	3008      	adds	r0, #8
 801bf2e:	f005 f9e7 	bl	8021300 <rcl_trigger_guard_condition>
 801bf32:	e76f      	b.n	801be14 <_rcl_timer_time_jump+0x14>

0801bf34 <rcl_get_zero_initialized_timer>:
 801bf34:	4b01      	ldr	r3, [pc, #4]	@ (801bf3c <rcl_get_zero_initialized_timer+0x8>)
 801bf36:	6818      	ldr	r0, [r3, #0]
 801bf38:	4770      	bx	lr
 801bf3a:	bf00      	nop
 801bf3c:	08025398 	.word	0x08025398

0801bf40 <rcl_timer_init>:
 801bf40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf44:	b0ab      	sub	sp, #172	@ 0xac
 801bf46:	460d      	mov	r5, r1
 801bf48:	4604      	mov	r4, r0
 801bf4a:	4692      	mov	sl, r2
 801bf4c:	a837      	add	r0, sp, #220	@ 0xdc
 801bf4e:	9f35      	ldr	r7, [sp, #212]	@ 0xd4
 801bf50:	f8dd 80d0 	ldr.w	r8, [sp, #208]	@ 0xd0
 801bf54:	f7f9 fa38 	bl	80153c8 <rcutils_allocator_is_valid>
 801bf58:	fab5 f385 	clz	r3, r5
 801bf5c:	095b      	lsrs	r3, r3, #5
 801bf5e:	ea43 73d7 	orr.w	r3, r3, r7, lsr #31
 801bf62:	2c00      	cmp	r4, #0
 801bf64:	bf08      	it	eq
 801bf66:	f043 0301 	orreq.w	r3, r3, #1
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	d164      	bne.n	801c038 <rcl_timer_init+0xf8>
 801bf6e:	f080 0001 	eor.w	r0, r0, #1
 801bf72:	b2c0      	uxtb	r0, r0
 801bf74:	2800      	cmp	r0, #0
 801bf76:	d15f      	bne.n	801c038 <rcl_timer_init+0xf8>
 801bf78:	6823      	ldr	r3, [r4, #0]
 801bf7a:	b123      	cbz	r3, 801bf86 <rcl_timer_init+0x46>
 801bf7c:	2664      	movs	r6, #100	@ 0x64
 801bf7e:	4630      	mov	r0, r6
 801bf80:	b02b      	add	sp, #172	@ 0xac
 801bf82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf86:	a908      	add	r1, sp, #32
 801bf88:	4628      	mov	r0, r5
 801bf8a:	f7ff fe63 	bl	801bc54 <rcl_clock_get_now>
 801bf8e:	4606      	mov	r6, r0
 801bf90:	2800      	cmp	r0, #0
 801bf92:	d1f4      	bne.n	801bf7e <rcl_timer_init+0x3e>
 801bf94:	f10d 0b18 	add.w	fp, sp, #24
 801bf98:	ae0b      	add	r6, sp, #44	@ 0x2c
 801bf9a:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 801bf9e:	4658      	mov	r0, fp
 801bfa0:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 801bfa4:	f005 f8b6 	bl	8021114 <rcl_get_zero_initialized_guard_condition>
 801bfa8:	e89b 0003 	ldmia.w	fp, {r0, r1}
 801bfac:	e889 0003 	stmia.w	r9, {r0, r1}
 801bfb0:	4630      	mov	r0, r6
 801bfb2:	f005 f989 	bl	80212c8 <rcl_guard_condition_get_default_options>
 801bfb6:	ab0d      	add	r3, sp, #52	@ 0x34
 801bfb8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801bfbc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801bfc0:	4651      	mov	r1, sl
 801bfc2:	4648      	mov	r0, r9
 801bfc4:	e896 000c 	ldmia.w	r6, {r2, r3}
 801bfc8:	f005 f8ae 	bl	8021128 <rcl_guard_condition_init>
 801bfcc:	4606      	mov	r6, r0
 801bfce:	2800      	cmp	r0, #0
 801bfd0:	d1d5      	bne.n	801bf7e <rcl_timer_init+0x3e>
 801bfd2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801bfd4:	781b      	ldrb	r3, [r3, #0]
 801bfd6:	2b01      	cmp	r3, #1
 801bfd8:	d033      	beq.n	801c042 <rcl_timer_init+0x102>
 801bfda:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 801bfdc:	4642      	mov	r2, r8
 801bfde:	463b      	mov	r3, r7
 801bfe0:	f10d 0edc 	add.w	lr, sp, #220	@ 0xdc
 801bfe4:	911a      	str	r1, [sp, #104]	@ 0x68
 801bfe6:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 801bfea:	f04f 0a00 	mov.w	sl, #0
 801bfee:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 801bff2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801bff6:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 801c0a0 <rcl_timer_init+0x160>
 801bffa:	eb12 0008 	adds.w	r0, r2, r8
 801bffe:	eb47 0103 	adc.w	r1, r7, r3
 801c002:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 801c006:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 801c00a:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 801c00e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c012:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c016:	f8de 3000 	ldr.w	r3, [lr]
 801c01a:	2050      	movs	r0, #80	@ 0x50
 801c01c:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 801c020:	4619      	mov	r1, r3
 801c022:	f8cc 3000 	str.w	r3, [ip]
 801c026:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 801c028:	4798      	blx	r3
 801c02a:	6020      	str	r0, [r4, #0]
 801c02c:	b358      	cbz	r0, 801c086 <rcl_timer_init+0x146>
 801c02e:	2250      	movs	r2, #80	@ 0x50
 801c030:	a916      	add	r1, sp, #88	@ 0x58
 801c032:	f006 f9ec 	bl	802240e <memcpy>
 801c036:	e7a2      	b.n	801bf7e <rcl_timer_init+0x3e>
 801c038:	260b      	movs	r6, #11
 801c03a:	4630      	mov	r0, r6
 801c03c:	b02b      	add	sp, #172	@ 0xac
 801c03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c042:	2001      	movs	r0, #1
 801c044:	2100      	movs	r1, #0
 801c046:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 801c04a:	ab12      	add	r3, sp, #72	@ 0x48
 801c04c:	4a16      	ldr	r2, [pc, #88]	@ (801c0a8 <rcl_timer_init+0x168>)
 801c04e:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 801c052:	9405      	str	r4, [sp, #20]
 801c054:	9204      	str	r2, [sp, #16]
 801c056:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 801c05a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c05e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801c062:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 801c066:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c068:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801c06c:	4628      	mov	r0, r5
 801c06e:	e89c 000c 	ldmia.w	ip, {r2, r3}
 801c072:	f7ff fdfb 	bl	801bc6c <rcl_clock_add_jump_callback>
 801c076:	4603      	mov	r3, r0
 801c078:	2800      	cmp	r0, #0
 801c07a:	d0ae      	beq.n	801bfda <rcl_timer_init+0x9a>
 801c07c:	4648      	mov	r0, r9
 801c07e:	461e      	mov	r6, r3
 801c080:	f005 f8fc 	bl	802127c <rcl_guard_condition_fini>
 801c084:	e77b      	b.n	801bf7e <rcl_timer_init+0x3e>
 801c086:	4648      	mov	r0, r9
 801c088:	260a      	movs	r6, #10
 801c08a:	f005 f8f7 	bl	802127c <rcl_guard_condition_fini>
 801c08e:	4622      	mov	r2, r4
 801c090:	4905      	ldr	r1, [pc, #20]	@ (801c0a8 <rcl_timer_init+0x168>)
 801c092:	4628      	mov	r0, r5
 801c094:	f7ff fe4e 	bl	801bd34 <rcl_clock_remove_jump_callback>
 801c098:	e771      	b.n	801bf7e <rcl_timer_init+0x3e>
 801c09a:	bf00      	nop
 801c09c:	f3af 8000 	nop.w
	...
 801c0a8:	0801be01 	.word	0x0801be01

0801c0ac <rcl_timer_call>:
 801c0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0b0:	b087      	sub	sp, #28
 801c0b2:	2800      	cmp	r0, #0
 801c0b4:	d06c      	beq.n	801c190 <rcl_timer_call+0xe4>
 801c0b6:	6803      	ldr	r3, [r0, #0]
 801c0b8:	4604      	mov	r4, r0
 801c0ba:	2b00      	cmp	r3, #0
 801c0bc:	d062      	beq.n	801c184 <rcl_timer_call+0xd8>
 801c0be:	f3bf 8f5b 	dmb	ish
 801c0c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c0c6:	f3bf 8f5b 	dmb	ish
 801c0ca:	2b00      	cmp	r3, #0
 801c0cc:	d14f      	bne.n	801c16e <rcl_timer_call+0xc2>
 801c0ce:	6803      	ldr	r3, [r0, #0]
 801c0d0:	a904      	add	r1, sp, #16
 801c0d2:	6818      	ldr	r0, [r3, #0]
 801c0d4:	f7ff fdbe 	bl	801bc54 <rcl_clock_get_now>
 801c0d8:	4605      	mov	r5, r0
 801c0da:	2800      	cmp	r0, #0
 801c0dc:	d149      	bne.n	801c172 <rcl_timer_call+0xc6>
 801c0de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c0e2:	2b00      	cmp	r3, #0
 801c0e4:	db49      	blt.n	801c17a <rcl_timer_call+0xce>
 801c0e6:	2605      	movs	r6, #5
 801c0e8:	6820      	ldr	r0, [r4, #0]
 801c0ea:	9600      	str	r6, [sp, #0]
 801c0ec:	3020      	adds	r0, #32
 801c0ee:	f001 fd23 	bl	801db38 <__atomic_exchange_8>
 801c0f2:	6823      	ldr	r3, [r4, #0]
 801c0f4:	4680      	mov	r8, r0
 801c0f6:	f3bf 8f5b 	dmb	ish
 801c0fa:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801c0fe:	f3bf 8f5b 	dmb	ish
 801c102:	6820      	ldr	r0, [r4, #0]
 801c104:	4689      	mov	r9, r1
 801c106:	4631      	mov	r1, r6
 801c108:	3028      	adds	r0, #40	@ 0x28
 801c10a:	f001 fca9 	bl	801da60 <__atomic_load_8>
 801c10e:	460f      	mov	r7, r1
 801c110:	4631      	mov	r1, r6
 801c112:	4606      	mov	r6, r0
 801c114:	6820      	ldr	r0, [r4, #0]
 801c116:	3018      	adds	r0, #24
 801c118:	f001 fca2 	bl	801da60 <__atomic_load_8>
 801c11c:	4602      	mov	r2, r0
 801c11e:	9804      	ldr	r0, [sp, #16]
 801c120:	460b      	mov	r3, r1
 801c122:	18b6      	adds	r6, r6, r2
 801c124:	f8dd c014 	ldr.w	ip, [sp, #20]
 801c128:	4692      	mov	sl, r2
 801c12a:	eb47 0701 	adc.w	r7, r7, r1
 801c12e:	4286      	cmp	r6, r0
 801c130:	eb77 010c 	sbcs.w	r1, r7, ip
 801c134:	da04      	bge.n	801c140 <rcl_timer_call+0x94>
 801c136:	ea53 0102 	orrs.w	r1, r3, r2
 801c13a:	d12e      	bne.n	801c19a <rcl_timer_call+0xee>
 801c13c:	4606      	mov	r6, r0
 801c13e:	4667      	mov	r7, ip
 801c140:	6820      	ldr	r0, [r4, #0]
 801c142:	2105      	movs	r1, #5
 801c144:	4632      	mov	r2, r6
 801c146:	463b      	mov	r3, r7
 801c148:	3028      	adds	r0, #40	@ 0x28
 801c14a:	9100      	str	r1, [sp, #0]
 801c14c:	f001 fcbe 	bl	801dacc <__atomic_store_8>
 801c150:	f1bb 0f00 	cmp.w	fp, #0
 801c154:	d00d      	beq.n	801c172 <rcl_timer_call+0xc6>
 801c156:	9a04      	ldr	r2, [sp, #16]
 801c158:	4620      	mov	r0, r4
 801c15a:	9b05      	ldr	r3, [sp, #20]
 801c15c:	ebb2 0208 	subs.w	r2, r2, r8
 801c160:	eb63 0309 	sbc.w	r3, r3, r9
 801c164:	47d8      	blx	fp
 801c166:	4628      	mov	r0, r5
 801c168:	b007      	add	sp, #28
 801c16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c16e:	f240 3521 	movw	r5, #801	@ 0x321
 801c172:	4628      	mov	r0, r5
 801c174:	b007      	add	sp, #28
 801c176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c17a:	2501      	movs	r5, #1
 801c17c:	4628      	mov	r0, r5
 801c17e:	b007      	add	sp, #28
 801c180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c184:	f44f 7548 	mov.w	r5, #800	@ 0x320
 801c188:	4628      	mov	r0, r5
 801c18a:	b007      	add	sp, #28
 801c18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c190:	250b      	movs	r5, #11
 801c192:	4628      	mov	r0, r5
 801c194:	b007      	add	sp, #28
 801c196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c19a:	1b80      	subs	r0, r0, r6
 801c19c:	eb6c 0107 	sbc.w	r1, ip, r7
 801c1a0:	3801      	subs	r0, #1
 801c1a2:	f161 0100 	sbc.w	r1, r1, #0
 801c1a6:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801c1aa:	f7e4 f901 	bl	80003b0 <__aeabi_ldivmod>
 801c1ae:	9b02      	ldr	r3, [sp, #8]
 801c1b0:	3001      	adds	r0, #1
 801c1b2:	f141 0100 	adc.w	r1, r1, #0
 801c1b6:	fb00 f303 	mul.w	r3, r0, r3
 801c1ba:	fb01 330a 	mla	r3, r1, sl, r3
 801c1be:	fba0 0a0a 	umull	r0, sl, r0, sl
 801c1c2:	1986      	adds	r6, r0, r6
 801c1c4:	4453      	add	r3, sl
 801c1c6:	eb43 0707 	adc.w	r7, r3, r7
 801c1ca:	e7b9      	b.n	801c140 <rcl_timer_call+0x94>

0801c1cc <rcl_timer_is_ready>:
 801c1cc:	b570      	push	{r4, r5, r6, lr}
 801c1ce:	b082      	sub	sp, #8
 801c1d0:	b380      	cbz	r0, 801c234 <rcl_timer_is_ready+0x68>
 801c1d2:	6803      	ldr	r3, [r0, #0]
 801c1d4:	4604      	mov	r4, r0
 801c1d6:	b38b      	cbz	r3, 801c23c <rcl_timer_is_ready+0x70>
 801c1d8:	460d      	mov	r5, r1
 801c1da:	b359      	cbz	r1, 801c234 <rcl_timer_is_ready+0x68>
 801c1dc:	f3bf 8f5b 	dmb	ish
 801c1e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c1e4:	f3bf 8f5b 	dmb	ish
 801c1e8:	b953      	cbnz	r3, 801c200 <rcl_timer_is_ready+0x34>
 801c1ea:	6803      	ldr	r3, [r0, #0]
 801c1ec:	4669      	mov	r1, sp
 801c1ee:	6818      	ldr	r0, [r3, #0]
 801c1f0:	f7ff fd30 	bl	801bc54 <rcl_clock_get_now>
 801c1f4:	4606      	mov	r6, r0
 801c1f6:	b148      	cbz	r0, 801c20c <rcl_timer_is_ready+0x40>
 801c1f8:	f240 3321 	movw	r3, #801	@ 0x321
 801c1fc:	4298      	cmp	r0, r3
 801c1fe:	d102      	bne.n	801c206 <rcl_timer_is_ready+0x3a>
 801c200:	2300      	movs	r3, #0
 801c202:	461e      	mov	r6, r3
 801c204:	702b      	strb	r3, [r5, #0]
 801c206:	4630      	mov	r0, r6
 801c208:	b002      	add	sp, #8
 801c20a:	bd70      	pop	{r4, r5, r6, pc}
 801c20c:	6820      	ldr	r0, [r4, #0]
 801c20e:	2105      	movs	r1, #5
 801c210:	3028      	adds	r0, #40	@ 0x28
 801c212:	f001 fc25 	bl	801da60 <__atomic_load_8>
 801c216:	9b00      	ldr	r3, [sp, #0]
 801c218:	1ac0      	subs	r0, r0, r3
 801c21a:	9b01      	ldr	r3, [sp, #4]
 801c21c:	eb61 0103 	sbc.w	r1, r1, r3
 801c220:	2801      	cmp	r0, #1
 801c222:	4630      	mov	r0, r6
 801c224:	f171 0300 	sbcs.w	r3, r1, #0
 801c228:	bfb4      	ite	lt
 801c22a:	2301      	movlt	r3, #1
 801c22c:	2300      	movge	r3, #0
 801c22e:	702b      	strb	r3, [r5, #0]
 801c230:	b002      	add	sp, #8
 801c232:	bd70      	pop	{r4, r5, r6, pc}
 801c234:	260b      	movs	r6, #11
 801c236:	4630      	mov	r0, r6
 801c238:	b002      	add	sp, #8
 801c23a:	bd70      	pop	{r4, r5, r6, pc}
 801c23c:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801c240:	e7e1      	b.n	801c206 <rcl_timer_is_ready+0x3a>
 801c242:	bf00      	nop

0801c244 <rcl_timer_get_time_until_next_call>:
 801c244:	b570      	push	{r4, r5, r6, lr}
 801c246:	b082      	sub	sp, #8
 801c248:	b330      	cbz	r0, 801c298 <rcl_timer_get_time_until_next_call+0x54>
 801c24a:	6803      	ldr	r3, [r0, #0]
 801c24c:	4604      	mov	r4, r0
 801c24e:	b33b      	cbz	r3, 801c2a0 <rcl_timer_get_time_until_next_call+0x5c>
 801c250:	460d      	mov	r5, r1
 801c252:	b309      	cbz	r1, 801c298 <rcl_timer_get_time_until_next_call+0x54>
 801c254:	f3bf 8f5b 	dmb	ish
 801c258:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c25c:	f3bf 8f5b 	dmb	ish
 801c260:	b9ab      	cbnz	r3, 801c28e <rcl_timer_get_time_until_next_call+0x4a>
 801c262:	6803      	ldr	r3, [r0, #0]
 801c264:	4669      	mov	r1, sp
 801c266:	6818      	ldr	r0, [r3, #0]
 801c268:	f7ff fcf4 	bl	801bc54 <rcl_clock_get_now>
 801c26c:	4606      	mov	r6, r0
 801c26e:	b958      	cbnz	r0, 801c288 <rcl_timer_get_time_until_next_call+0x44>
 801c270:	6820      	ldr	r0, [r4, #0]
 801c272:	2105      	movs	r1, #5
 801c274:	3028      	adds	r0, #40	@ 0x28
 801c276:	f001 fbf3 	bl	801da60 <__atomic_load_8>
 801c27a:	9b00      	ldr	r3, [sp, #0]
 801c27c:	1ac0      	subs	r0, r0, r3
 801c27e:	9b01      	ldr	r3, [sp, #4]
 801c280:	eb61 0103 	sbc.w	r1, r1, r3
 801c284:	6028      	str	r0, [r5, #0]
 801c286:	6069      	str	r1, [r5, #4]
 801c288:	4630      	mov	r0, r6
 801c28a:	b002      	add	sp, #8
 801c28c:	bd70      	pop	{r4, r5, r6, pc}
 801c28e:	f240 3621 	movw	r6, #801	@ 0x321
 801c292:	4630      	mov	r0, r6
 801c294:	b002      	add	sp, #8
 801c296:	bd70      	pop	{r4, r5, r6, pc}
 801c298:	260b      	movs	r6, #11
 801c29a:	4630      	mov	r0, r6
 801c29c:	b002      	add	sp, #8
 801c29e:	bd70      	pop	{r4, r5, r6, pc}
 801c2a0:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801c2a4:	e7f0      	b.n	801c288 <rcl_timer_get_time_until_next_call+0x44>
 801c2a6:	bf00      	nop

0801c2a8 <rcl_timer_get_guard_condition>:
 801c2a8:	b130      	cbz	r0, 801c2b8 <rcl_timer_get_guard_condition+0x10>
 801c2aa:	6800      	ldr	r0, [r0, #0]
 801c2ac:	b120      	cbz	r0, 801c2b8 <rcl_timer_get_guard_condition+0x10>
 801c2ae:	68c3      	ldr	r3, [r0, #12]
 801c2b0:	b10b      	cbz	r3, 801c2b6 <rcl_timer_get_guard_condition+0xe>
 801c2b2:	3008      	adds	r0, #8
 801c2b4:	4770      	bx	lr
 801c2b6:	4618      	mov	r0, r3
 801c2b8:	4770      	bx	lr
 801c2ba:	bf00      	nop

0801c2bc <rcl_validate_enclave_name_with_size>:
 801c2bc:	2800      	cmp	r0, #0
 801c2be:	d049      	beq.n	801c354 <rcl_validate_enclave_name_with_size+0x98>
 801c2c0:	b570      	push	{r4, r5, r6, lr}
 801c2c2:	4615      	mov	r5, r2
 801c2c4:	b0c2      	sub	sp, #264	@ 0x108
 801c2c6:	b19a      	cbz	r2, 801c2f0 <rcl_validate_enclave_name_with_size+0x34>
 801c2c8:	461e      	mov	r6, r3
 801c2ca:	466a      	mov	r2, sp
 801c2cc:	ab01      	add	r3, sp, #4
 801c2ce:	460c      	mov	r4, r1
 801c2d0:	f002 f88e 	bl	801e3f0 <rmw_validate_namespace_with_size>
 801c2d4:	4684      	mov	ip, r0
 801c2d6:	b9b8      	cbnz	r0, 801c308 <rcl_validate_enclave_name_with_size+0x4c>
 801c2d8:	9900      	ldr	r1, [sp, #0]
 801c2da:	b171      	cbz	r1, 801c2fa <rcl_validate_enclave_name_with_size+0x3e>
 801c2dc:	2907      	cmp	r1, #7
 801c2de:	d019      	beq.n	801c314 <rcl_validate_enclave_name_with_size+0x58>
 801c2e0:	1e4b      	subs	r3, r1, #1
 801c2e2:	2b05      	cmp	r3, #5
 801c2e4:	d83a      	bhi.n	801c35c <rcl_validate_enclave_name_with_size+0xa0>
 801c2e6:	e8df f003 	tbb	[pc, r3]
 801c2ea:	2926      	.short	0x2926
 801c2ec:	1d322f2c 	.word	0x1d322f2c
 801c2f0:	f04f 0c0b 	mov.w	ip, #11
 801c2f4:	4660      	mov	r0, ip
 801c2f6:	b042      	add	sp, #264	@ 0x108
 801c2f8:	bd70      	pop	{r4, r5, r6, pc}
 801c2fa:	2907      	cmp	r1, #7
 801c2fc:	d00a      	beq.n	801c314 <rcl_validate_enclave_name_with_size+0x58>
 801c2fe:	2300      	movs	r3, #0
 801c300:	4660      	mov	r0, ip
 801c302:	602b      	str	r3, [r5, #0]
 801c304:	b042      	add	sp, #264	@ 0x108
 801c306:	bd70      	pop	{r4, r5, r6, pc}
 801c308:	f7fe fb6c 	bl	801a9e4 <rcl_convert_rmw_ret_to_rcl_ret>
 801c30c:	4684      	mov	ip, r0
 801c30e:	4660      	mov	r0, ip
 801c310:	b042      	add	sp, #264	@ 0x108
 801c312:	bd70      	pop	{r4, r5, r6, pc}
 801c314:	2cff      	cmp	r4, #255	@ 0xff
 801c316:	d9f2      	bls.n	801c2fe <rcl_validate_enclave_name_with_size+0x42>
 801c318:	6029      	str	r1, [r5, #0]
 801c31a:	2e00      	cmp	r6, #0
 801c31c:	d0ea      	beq.n	801c2f4 <rcl_validate_enclave_name_with_size+0x38>
 801c31e:	23fe      	movs	r3, #254	@ 0xfe
 801c320:	6033      	str	r3, [r6, #0]
 801c322:	e7e7      	b.n	801c2f4 <rcl_validate_enclave_name_with_size+0x38>
 801c324:	2306      	movs	r3, #6
 801c326:	602b      	str	r3, [r5, #0]
 801c328:	2e00      	cmp	r6, #0
 801c32a:	d0e3      	beq.n	801c2f4 <rcl_validate_enclave_name_with_size+0x38>
 801c32c:	9b01      	ldr	r3, [sp, #4]
 801c32e:	4660      	mov	r0, ip
 801c330:	6033      	str	r3, [r6, #0]
 801c332:	b042      	add	sp, #264	@ 0x108
 801c334:	bd70      	pop	{r4, r5, r6, pc}
 801c336:	2301      	movs	r3, #1
 801c338:	602b      	str	r3, [r5, #0]
 801c33a:	e7f5      	b.n	801c328 <rcl_validate_enclave_name_with_size+0x6c>
 801c33c:	2302      	movs	r3, #2
 801c33e:	602b      	str	r3, [r5, #0]
 801c340:	e7f2      	b.n	801c328 <rcl_validate_enclave_name_with_size+0x6c>
 801c342:	2303      	movs	r3, #3
 801c344:	602b      	str	r3, [r5, #0]
 801c346:	e7ef      	b.n	801c328 <rcl_validate_enclave_name_with_size+0x6c>
 801c348:	2304      	movs	r3, #4
 801c34a:	602b      	str	r3, [r5, #0]
 801c34c:	e7ec      	b.n	801c328 <rcl_validate_enclave_name_with_size+0x6c>
 801c34e:	2305      	movs	r3, #5
 801c350:	602b      	str	r3, [r5, #0]
 801c352:	e7e9      	b.n	801c328 <rcl_validate_enclave_name_with_size+0x6c>
 801c354:	f04f 0c0b 	mov.w	ip, #11
 801c358:	4660      	mov	r0, ip
 801c35a:	4770      	bx	lr
 801c35c:	460b      	mov	r3, r1
 801c35e:	4a04      	ldr	r2, [pc, #16]	@ (801c370 <rcl_validate_enclave_name_with_size+0xb4>)
 801c360:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801c364:	a802      	add	r0, sp, #8
 801c366:	f001 fd33 	bl	801ddd0 <rcutils_snprintf>
 801c36a:	f04f 0c01 	mov.w	ip, #1
 801c36e:	e7c1      	b.n	801c2f4 <rcl_validate_enclave_name_with_size+0x38>
 801c370:	0802539c 	.word	0x0802539c

0801c374 <rcl_validate_enclave_name>:
 801c374:	b168      	cbz	r0, 801c392 <rcl_validate_enclave_name+0x1e>
 801c376:	b570      	push	{r4, r5, r6, lr}
 801c378:	460d      	mov	r5, r1
 801c37a:	4616      	mov	r6, r2
 801c37c:	4604      	mov	r4, r0
 801c37e:	f7e3 ffb9 	bl	80002f4 <strlen>
 801c382:	4633      	mov	r3, r6
 801c384:	4601      	mov	r1, r0
 801c386:	462a      	mov	r2, r5
 801c388:	4620      	mov	r0, r4
 801c38a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c38e:	f7ff bf95 	b.w	801c2bc <rcl_validate_enclave_name_with_size>
 801c392:	200b      	movs	r0, #11
 801c394:	4770      	bx	lr
 801c396:	bf00      	nop

0801c398 <rcl_get_zero_initialized_wait_set>:
 801c398:	b510      	push	{r4, lr}
 801c39a:	4c08      	ldr	r4, [pc, #32]	@ (801c3bc <rcl_get_zero_initialized_wait_set+0x24>)
 801c39c:	4686      	mov	lr, r0
 801c39e:	4684      	mov	ip, r0
 801c3a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c3a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c3a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c3a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c3ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c3ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c3b2:	6823      	ldr	r3, [r4, #0]
 801c3b4:	4670      	mov	r0, lr
 801c3b6:	f8cc 3000 	str.w	r3, [ip]
 801c3ba:	bd10      	pop	{r4, pc}
 801c3bc:	080253fc 	.word	0x080253fc

0801c3c0 <rcl_wait_set_is_valid>:
 801c3c0:	b118      	cbz	r0, 801c3ca <rcl_wait_set_is_valid+0xa>
 801c3c2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801c3c4:	3800      	subs	r0, #0
 801c3c6:	bf18      	it	ne
 801c3c8:	2001      	movne	r0, #1
 801c3ca:	4770      	bx	lr

0801c3cc <rcl_wait_set_fini>:
 801c3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c3d0:	b082      	sub	sp, #8
 801c3d2:	2800      	cmp	r0, #0
 801c3d4:	f000 8095 	beq.w	801c502 <rcl_wait_set_fini+0x136>
 801c3d8:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801c3da:	4604      	mov	r4, r0
 801c3dc:	2e00      	cmp	r6, #0
 801c3de:	f000 808c 	beq.w	801c4fa <rcl_wait_set_fini+0x12e>
 801c3e2:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801c3e4:	f003 faf6 	bl	801f9d4 <rmw_destroy_wait_set>
 801c3e8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c3ea:	1e06      	subs	r6, r0, #0
 801c3ec:	bf18      	it	ne
 801c3ee:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801c3f2:	2d00      	cmp	r5, #0
 801c3f4:	f000 8081 	beq.w	801c4fa <rcl_wait_set_fini+0x12e>
 801c3f8:	2700      	movs	r7, #0
 801c3fa:	6820      	ldr	r0, [r4, #0]
 801c3fc:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801c400:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c402:	6067      	str	r7, [r4, #4]
 801c404:	602f      	str	r7, [r5, #0]
 801c406:	b120      	cbz	r0, 801c412 <rcl_wait_set_fini+0x46>
 801c408:	9101      	str	r1, [sp, #4]
 801c40a:	47c0      	blx	r8
 801c40c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c40e:	9901      	ldr	r1, [sp, #4]
 801c410:	6027      	str	r7, [r4, #0]
 801c412:	68a8      	ldr	r0, [r5, #8]
 801c414:	b120      	cbz	r0, 801c420 <rcl_wait_set_fini+0x54>
 801c416:	47c0      	blx	r8
 801c418:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c41a:	2300      	movs	r3, #0
 801c41c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801c420:	f04f 0800 	mov.w	r8, #0
 801c424:	68a0      	ldr	r0, [r4, #8]
 801c426:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801c428:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c42a:	f8c4 800c 	str.w	r8, [r4, #12]
 801c42e:	f8c5 800c 	str.w	r8, [r5, #12]
 801c432:	b128      	cbz	r0, 801c440 <rcl_wait_set_fini+0x74>
 801c434:	47b8      	blx	r7
 801c436:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c438:	f8c4 8008 	str.w	r8, [r4, #8]
 801c43c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801c43e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c440:	f04f 0800 	mov.w	r8, #0
 801c444:	6968      	ldr	r0, [r5, #20]
 801c446:	f8c5 8010 	str.w	r8, [r5, #16]
 801c44a:	b128      	cbz	r0, 801c458 <rcl_wait_set_fini+0x8c>
 801c44c:	47b8      	blx	r7
 801c44e:	f8c5 8014 	str.w	r8, [r5, #20]
 801c452:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c454:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801c456:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c458:	f04f 0800 	mov.w	r8, #0
 801c45c:	6920      	ldr	r0, [r4, #16]
 801c45e:	f8c4 8014 	str.w	r8, [r4, #20]
 801c462:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801c466:	b128      	cbz	r0, 801c474 <rcl_wait_set_fini+0xa8>
 801c468:	47b8      	blx	r7
 801c46a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c46c:	f8c4 8010 	str.w	r8, [r4, #16]
 801c470:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801c472:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c474:	f04f 0800 	mov.w	r8, #0
 801c478:	69a0      	ldr	r0, [r4, #24]
 801c47a:	f8c4 801c 	str.w	r8, [r4, #28]
 801c47e:	f8c5 8018 	str.w	r8, [r5, #24]
 801c482:	b128      	cbz	r0, 801c490 <rcl_wait_set_fini+0xc4>
 801c484:	9101      	str	r1, [sp, #4]
 801c486:	47b8      	blx	r7
 801c488:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c48a:	9901      	ldr	r1, [sp, #4]
 801c48c:	f8c4 8018 	str.w	r8, [r4, #24]
 801c490:	6a28      	ldr	r0, [r5, #32]
 801c492:	b120      	cbz	r0, 801c49e <rcl_wait_set_fini+0xd2>
 801c494:	47b8      	blx	r7
 801c496:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c498:	2300      	movs	r3, #0
 801c49a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801c49e:	2700      	movs	r7, #0
 801c4a0:	6a20      	ldr	r0, [r4, #32]
 801c4a2:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801c4a6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c4a8:	6267      	str	r7, [r4, #36]	@ 0x24
 801c4aa:	626f      	str	r7, [r5, #36]	@ 0x24
 801c4ac:	b120      	cbz	r0, 801c4b8 <rcl_wait_set_fini+0xec>
 801c4ae:	9101      	str	r1, [sp, #4]
 801c4b0:	47c0      	blx	r8
 801c4b2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c4b4:	9901      	ldr	r1, [sp, #4]
 801c4b6:	6227      	str	r7, [r4, #32]
 801c4b8:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801c4ba:	b120      	cbz	r0, 801c4c6 <rcl_wait_set_fini+0xfa>
 801c4bc:	47c0      	blx	r8
 801c4be:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c4c0:	2300      	movs	r3, #0
 801c4c2:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801c4c6:	2700      	movs	r7, #0
 801c4c8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801c4ca:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801c4ce:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c4d0:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801c4d2:	632f      	str	r7, [r5, #48]	@ 0x30
 801c4d4:	b120      	cbz	r0, 801c4e0 <rcl_wait_set_fini+0x114>
 801c4d6:	9101      	str	r1, [sp, #4]
 801c4d8:	47c0      	blx	r8
 801c4da:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c4dc:	9901      	ldr	r1, [sp, #4]
 801c4de:	62a7      	str	r7, [r4, #40]	@ 0x28
 801c4e0:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801c4e2:	b120      	cbz	r0, 801c4ee <rcl_wait_set_fini+0x122>
 801c4e4:	47c0      	blx	r8
 801c4e6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c4e8:	2300      	movs	r3, #0
 801c4ea:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801c4ee:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801c4f0:	4628      	mov	r0, r5
 801c4f2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c4f4:	4798      	blx	r3
 801c4f6:	2300      	movs	r3, #0
 801c4f8:	6323      	str	r3, [r4, #48]	@ 0x30
 801c4fa:	4630      	mov	r0, r6
 801c4fc:	b002      	add	sp, #8
 801c4fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c502:	260b      	movs	r6, #11
 801c504:	4630      	mov	r0, r6
 801c506:	b002      	add	sp, #8
 801c508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c50c <rcl_wait_set_add_subscription>:
 801c50c:	b318      	cbz	r0, 801c556 <rcl_wait_set_add_subscription+0x4a>
 801c50e:	b538      	push	{r3, r4, r5, lr}
 801c510:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801c512:	4604      	mov	r4, r0
 801c514:	b30b      	cbz	r3, 801c55a <rcl_wait_set_add_subscription+0x4e>
 801c516:	b319      	cbz	r1, 801c560 <rcl_wait_set_add_subscription+0x54>
 801c518:	681d      	ldr	r5, [r3, #0]
 801c51a:	6840      	ldr	r0, [r0, #4]
 801c51c:	4285      	cmp	r5, r0
 801c51e:	d217      	bcs.n	801c550 <rcl_wait_set_add_subscription+0x44>
 801c520:	1c68      	adds	r0, r5, #1
 801c522:	6018      	str	r0, [r3, #0]
 801c524:	6823      	ldr	r3, [r4, #0]
 801c526:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c52a:	b102      	cbz	r2, 801c52e <rcl_wait_set_add_subscription+0x22>
 801c52c:	6015      	str	r5, [r2, #0]
 801c52e:	4608      	mov	r0, r1
 801c530:	f7ff fade 	bl	801baf0 <rcl_subscription_get_rmw_handle>
 801c534:	b150      	cbz	r0, 801c54c <rcl_wait_set_add_subscription+0x40>
 801c536:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c538:	6842      	ldr	r2, [r0, #4]
 801c53a:	2000      	movs	r0, #0
 801c53c:	689b      	ldr	r3, [r3, #8]
 801c53e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c542:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801c544:	6853      	ldr	r3, [r2, #4]
 801c546:	3301      	adds	r3, #1
 801c548:	6053      	str	r3, [r2, #4]
 801c54a:	bd38      	pop	{r3, r4, r5, pc}
 801c54c:	2001      	movs	r0, #1
 801c54e:	bd38      	pop	{r3, r4, r5, pc}
 801c550:	f240 3086 	movw	r0, #902	@ 0x386
 801c554:	bd38      	pop	{r3, r4, r5, pc}
 801c556:	200b      	movs	r0, #11
 801c558:	4770      	bx	lr
 801c55a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801c55e:	bd38      	pop	{r3, r4, r5, pc}
 801c560:	200b      	movs	r0, #11
 801c562:	bd38      	pop	{r3, r4, r5, pc}

0801c564 <rcl_wait_set_clear>:
 801c564:	2800      	cmp	r0, #0
 801c566:	d074      	beq.n	801c652 <rcl_wait_set_clear+0xee>
 801c568:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801c56a:	b510      	push	{r4, lr}
 801c56c:	4604      	mov	r4, r0
 801c56e:	2b00      	cmp	r3, #0
 801c570:	d071      	beq.n	801c656 <rcl_wait_set_clear+0xf2>
 801c572:	6800      	ldr	r0, [r0, #0]
 801c574:	b138      	cbz	r0, 801c586 <rcl_wait_set_clear+0x22>
 801c576:	6862      	ldr	r2, [r4, #4]
 801c578:	2100      	movs	r1, #0
 801c57a:	0092      	lsls	r2, r2, #2
 801c57c:	f005 fe28 	bl	80221d0 <memset>
 801c580:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c582:	2200      	movs	r2, #0
 801c584:	601a      	str	r2, [r3, #0]
 801c586:	68a0      	ldr	r0, [r4, #8]
 801c588:	b138      	cbz	r0, 801c59a <rcl_wait_set_clear+0x36>
 801c58a:	68e2      	ldr	r2, [r4, #12]
 801c58c:	2100      	movs	r1, #0
 801c58e:	0092      	lsls	r2, r2, #2
 801c590:	f005 fe1e 	bl	80221d0 <memset>
 801c594:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c596:	2200      	movs	r2, #0
 801c598:	60da      	str	r2, [r3, #12]
 801c59a:	69a0      	ldr	r0, [r4, #24]
 801c59c:	b138      	cbz	r0, 801c5ae <rcl_wait_set_clear+0x4a>
 801c59e:	69e2      	ldr	r2, [r4, #28]
 801c5a0:	2100      	movs	r1, #0
 801c5a2:	0092      	lsls	r2, r2, #2
 801c5a4:	f005 fe14 	bl	80221d0 <memset>
 801c5a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c5aa:	2200      	movs	r2, #0
 801c5ac:	619a      	str	r2, [r3, #24]
 801c5ae:	6a20      	ldr	r0, [r4, #32]
 801c5b0:	b138      	cbz	r0, 801c5c2 <rcl_wait_set_clear+0x5e>
 801c5b2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801c5b4:	2100      	movs	r1, #0
 801c5b6:	0092      	lsls	r2, r2, #2
 801c5b8:	f005 fe0a 	bl	80221d0 <memset>
 801c5bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c5be:	2200      	movs	r2, #0
 801c5c0:	625a      	str	r2, [r3, #36]	@ 0x24
 801c5c2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801c5c4:	b138      	cbz	r0, 801c5d6 <rcl_wait_set_clear+0x72>
 801c5c6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801c5c8:	2100      	movs	r1, #0
 801c5ca:	0092      	lsls	r2, r2, #2
 801c5cc:	f005 fe00 	bl	80221d0 <memset>
 801c5d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c5d2:	2200      	movs	r2, #0
 801c5d4:	631a      	str	r2, [r3, #48]	@ 0x30
 801c5d6:	6920      	ldr	r0, [r4, #16]
 801c5d8:	b138      	cbz	r0, 801c5ea <rcl_wait_set_clear+0x86>
 801c5da:	6962      	ldr	r2, [r4, #20]
 801c5dc:	2100      	movs	r1, #0
 801c5de:	0092      	lsls	r2, r2, #2
 801c5e0:	f005 fdf6 	bl	80221d0 <memset>
 801c5e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c5e6:	2200      	movs	r2, #0
 801c5e8:	641a      	str	r2, [r3, #64]	@ 0x40
 801c5ea:	6898      	ldr	r0, [r3, #8]
 801c5ec:	b138      	cbz	r0, 801c5fe <rcl_wait_set_clear+0x9a>
 801c5ee:	685a      	ldr	r2, [r3, #4]
 801c5f0:	2100      	movs	r1, #0
 801c5f2:	0092      	lsls	r2, r2, #2
 801c5f4:	f005 fdec 	bl	80221d0 <memset>
 801c5f8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c5fa:	2200      	movs	r2, #0
 801c5fc:	605a      	str	r2, [r3, #4]
 801c5fe:	6958      	ldr	r0, [r3, #20]
 801c600:	b138      	cbz	r0, 801c612 <rcl_wait_set_clear+0xae>
 801c602:	691a      	ldr	r2, [r3, #16]
 801c604:	2100      	movs	r1, #0
 801c606:	0092      	lsls	r2, r2, #2
 801c608:	f005 fde2 	bl	80221d0 <memset>
 801c60c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c60e:	2200      	movs	r2, #0
 801c610:	611a      	str	r2, [r3, #16]
 801c612:	6a18      	ldr	r0, [r3, #32]
 801c614:	b138      	cbz	r0, 801c626 <rcl_wait_set_clear+0xc2>
 801c616:	69da      	ldr	r2, [r3, #28]
 801c618:	2100      	movs	r1, #0
 801c61a:	0092      	lsls	r2, r2, #2
 801c61c:	f005 fdd8 	bl	80221d0 <memset>
 801c620:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c622:	2200      	movs	r2, #0
 801c624:	61da      	str	r2, [r3, #28]
 801c626:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801c628:	b138      	cbz	r0, 801c63a <rcl_wait_set_clear+0xd6>
 801c62a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801c62c:	2100      	movs	r1, #0
 801c62e:	0092      	lsls	r2, r2, #2
 801c630:	f005 fdce 	bl	80221d0 <memset>
 801c634:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c636:	2200      	movs	r2, #0
 801c638:	629a      	str	r2, [r3, #40]	@ 0x28
 801c63a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801c63c:	b140      	cbz	r0, 801c650 <rcl_wait_set_clear+0xec>
 801c63e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801c640:	2100      	movs	r1, #0
 801c642:	0092      	lsls	r2, r2, #2
 801c644:	f005 fdc4 	bl	80221d0 <memset>
 801c648:	2300      	movs	r3, #0
 801c64a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801c64c:	4618      	mov	r0, r3
 801c64e:	6353      	str	r3, [r2, #52]	@ 0x34
 801c650:	bd10      	pop	{r4, pc}
 801c652:	200b      	movs	r0, #11
 801c654:	4770      	bx	lr
 801c656:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801c65a:	bd10      	pop	{r4, pc}

0801c65c <rcl_wait_set_resize>:
 801c65c:	2800      	cmp	r0, #0
 801c65e:	f000 8180 	beq.w	801c962 <rcl_wait_set_resize+0x306>
 801c662:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c666:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 801c668:	b083      	sub	sp, #12
 801c66a:	4605      	mov	r5, r0
 801c66c:	2c00      	cmp	r4, #0
 801c66e:	f000 817a 	beq.w	801c966 <rcl_wait_set_resize+0x30a>
 801c672:	f04f 0900 	mov.w	r9, #0
 801c676:	461f      	mov	r7, r3
 801c678:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801c67c:	4688      	mov	r8, r1
 801c67e:	4616      	mov	r6, r2
 801c680:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801c684:	f8c0 9004 	str.w	r9, [r0, #4]
 801c688:	f8c4 9000 	str.w	r9, [r4]
 801c68c:	2900      	cmp	r1, #0
 801c68e:	f000 80bf 	beq.w	801c810 <rcl_wait_set_resize+0x1b4>
 801c692:	008c      	lsls	r4, r1, #2
 801c694:	4652      	mov	r2, sl
 801c696:	6800      	ldr	r0, [r0, #0]
 801c698:	4621      	mov	r1, r4
 801c69a:	9301      	str	r3, [sp, #4]
 801c69c:	4798      	blx	r3
 801c69e:	9b01      	ldr	r3, [sp, #4]
 801c6a0:	6028      	str	r0, [r5, #0]
 801c6a2:	2800      	cmp	r0, #0
 801c6a4:	f000 80f6 	beq.w	801c894 <rcl_wait_set_resize+0x238>
 801c6a8:	4622      	mov	r2, r4
 801c6aa:	4649      	mov	r1, r9
 801c6ac:	9301      	str	r3, [sp, #4]
 801c6ae:	f005 fd8f 	bl	80221d0 <memset>
 801c6b2:	f8c5 8004 	str.w	r8, [r5, #4]
 801c6b6:	4652      	mov	r2, sl
 801c6b8:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801c6bc:	4621      	mov	r1, r4
 801c6be:	9b01      	ldr	r3, [sp, #4]
 801c6c0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801c6c4:	f8c8 9004 	str.w	r9, [r8, #4]
 801c6c8:	4798      	blx	r3
 801c6ca:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c6cc:	f8c8 0008 	str.w	r0, [r8, #8]
 801c6d0:	689b      	ldr	r3, [r3, #8]
 801c6d2:	2b00      	cmp	r3, #0
 801c6d4:	f000 814a 	beq.w	801c96c <rcl_wait_set_resize+0x310>
 801c6d8:	4622      	mov	r2, r4
 801c6da:	4649      	mov	r1, r9
 801c6dc:	4618      	mov	r0, r3
 801c6de:	f005 fd77 	bl	80221d0 <memset>
 801c6e2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c6e4:	f04f 0800 	mov.w	r8, #0
 801c6e8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c6ec:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 801c6f0:	f8c5 800c 	str.w	r8, [r5, #12]
 801c6f4:	f8c4 800c 	str.w	r8, [r4, #12]
 801c6f8:	2e00      	cmp	r6, #0
 801c6fa:	f040 809b 	bne.w	801c834 <rcl_wait_set_resize+0x1d8>
 801c6fe:	68a8      	ldr	r0, [r5, #8]
 801c700:	b128      	cbz	r0, 801c70e <rcl_wait_set_resize+0xb2>
 801c702:	4649      	mov	r1, r9
 801c704:	4790      	blx	r2
 801c706:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c708:	60ae      	str	r6, [r5, #8]
 801c70a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c70e:	f04f 0800 	mov.w	r8, #0
 801c712:	19f6      	adds	r6, r6, r7
 801c714:	f8c4 8010 	str.w	r8, [r4, #16]
 801c718:	f040 80a2 	bne.w	801c860 <rcl_wait_set_resize+0x204>
 801c71c:	6960      	ldr	r0, [r4, #20]
 801c71e:	b130      	cbz	r0, 801c72e <rcl_wait_set_resize+0xd2>
 801c720:	4649      	mov	r1, r9
 801c722:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801c724:	4798      	blx	r3
 801c726:	6166      	str	r6, [r4, #20]
 801c728:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c72a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c72e:	2600      	movs	r6, #0
 801c730:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801c734:	616e      	str	r6, [r5, #20]
 801c736:	6426      	str	r6, [r4, #64]	@ 0x40
 801c738:	2f00      	cmp	r7, #0
 801c73a:	f040 80af 	bne.w	801c89c <rcl_wait_set_resize+0x240>
 801c73e:	6928      	ldr	r0, [r5, #16]
 801c740:	b138      	cbz	r0, 801c752 <rcl_wait_set_resize+0xf6>
 801c742:	4649      	mov	r1, r9
 801c744:	47d0      	blx	sl
 801c746:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c748:	612f      	str	r7, [r5, #16]
 801c74a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c74e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801c752:	2600      	movs	r6, #0
 801c754:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c756:	61ee      	str	r6, [r5, #28]
 801c758:	61a6      	str	r6, [r4, #24]
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	f040 8093 	bne.w	801c886 <rcl_wait_set_resize+0x22a>
 801c760:	69a8      	ldr	r0, [r5, #24]
 801c762:	b120      	cbz	r0, 801c76e <rcl_wait_set_resize+0x112>
 801c764:	4649      	mov	r1, r9
 801c766:	47d0      	blx	sl
 801c768:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c76a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c76c:	61ab      	str	r3, [r5, #24]
 801c76e:	6a20      	ldr	r0, [r4, #32]
 801c770:	b128      	cbz	r0, 801c77e <rcl_wait_set_resize+0x122>
 801c772:	4649      	mov	r1, r9
 801c774:	47d0      	blx	sl
 801c776:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c778:	2300      	movs	r3, #0
 801c77a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801c77e:	2600      	movs	r6, #0
 801c780:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c782:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801c784:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801c788:	626e      	str	r6, [r5, #36]	@ 0x24
 801c78a:	6266      	str	r6, [r4, #36]	@ 0x24
 801c78c:	2b00      	cmp	r3, #0
 801c78e:	f000 8098 	beq.w	801c8c2 <rcl_wait_set_resize+0x266>
 801c792:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801c796:	463a      	mov	r2, r7
 801c798:	6a28      	ldr	r0, [r5, #32]
 801c79a:	4651      	mov	r1, sl
 801c79c:	47c8      	blx	r9
 801c79e:	6228      	str	r0, [r5, #32]
 801c7a0:	2800      	cmp	r0, #0
 801c7a2:	d077      	beq.n	801c894 <rcl_wait_set_resize+0x238>
 801c7a4:	4652      	mov	r2, sl
 801c7a6:	4631      	mov	r1, r6
 801c7a8:	f005 fd12 	bl	80221d0 <memset>
 801c7ac:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c7ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c7b0:	463a      	mov	r2, r7
 801c7b2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801c7b4:	4651      	mov	r1, sl
 801c7b6:	626b      	str	r3, [r5, #36]	@ 0x24
 801c7b8:	62a6      	str	r6, [r4, #40]	@ 0x28
 801c7ba:	47c8      	blx	r9
 801c7bc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c7be:	62e0      	str	r0, [r4, #44]	@ 0x2c
 801c7c0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801c7c2:	2c00      	cmp	r4, #0
 801c7c4:	f000 80f2 	beq.w	801c9ac <rcl_wait_set_resize+0x350>
 801c7c8:	4620      	mov	r0, r4
 801c7ca:	4652      	mov	r2, sl
 801c7cc:	4631      	mov	r1, r6
 801c7ce:	f005 fcff 	bl	80221d0 <memset>
 801c7d2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c7d4:	2600      	movs	r6, #0
 801c7d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c7d8:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801c7da:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801c7de:	62ee      	str	r6, [r5, #44]	@ 0x2c
 801c7e0:	6326      	str	r6, [r4, #48]	@ 0x30
 801c7e2:	2b00      	cmp	r3, #0
 801c7e4:	f040 8097 	bne.w	801c916 <rcl_wait_set_resize+0x2ba>
 801c7e8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801c7ea:	b120      	cbz	r0, 801c7f6 <rcl_wait_set_resize+0x19a>
 801c7ec:	4639      	mov	r1, r7
 801c7ee:	47c0      	blx	r8
 801c7f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c7f2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c7f4:	62ab      	str	r3, [r5, #40]	@ 0x28
 801c7f6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801c7f8:	2800      	cmp	r0, #0
 801c7fa:	d04c      	beq.n	801c896 <rcl_wait_set_resize+0x23a>
 801c7fc:	4639      	mov	r1, r7
 801c7fe:	47c0      	blx	r8
 801c800:	2300      	movs	r3, #0
 801c802:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801c804:	4618      	mov	r0, r3
 801c806:	e9c2 330d 	strd	r3, r3, [r2, #52]	@ 0x34
 801c80a:	b003      	add	sp, #12
 801c80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c810:	6800      	ldr	r0, [r0, #0]
 801c812:	b120      	cbz	r0, 801c81e <rcl_wait_set_resize+0x1c2>
 801c814:	4651      	mov	r1, sl
 801c816:	47d8      	blx	fp
 801c818:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c81a:	f8c5 8000 	str.w	r8, [r5]
 801c81e:	68a0      	ldr	r0, [r4, #8]
 801c820:	2800      	cmp	r0, #0
 801c822:	f43f af5f 	beq.w	801c6e4 <rcl_wait_set_resize+0x88>
 801c826:	4651      	mov	r1, sl
 801c828:	47d8      	blx	fp
 801c82a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c82c:	2300      	movs	r3, #0
 801c82e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801c832:	e757      	b.n	801c6e4 <rcl_wait_set_resize+0x88>
 801c834:	00b4      	lsls	r4, r6, #2
 801c836:	464a      	mov	r2, r9
 801c838:	68a8      	ldr	r0, [r5, #8]
 801c83a:	4621      	mov	r1, r4
 801c83c:	4798      	blx	r3
 801c83e:	60a8      	str	r0, [r5, #8]
 801c840:	b340      	cbz	r0, 801c894 <rcl_wait_set_resize+0x238>
 801c842:	4622      	mov	r2, r4
 801c844:	4641      	mov	r1, r8
 801c846:	f005 fcc3 	bl	80221d0 <memset>
 801c84a:	f04f 0800 	mov.w	r8, #0
 801c84e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c850:	60ee      	str	r6, [r5, #12]
 801c852:	19f6      	adds	r6, r6, r7
 801c854:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c858:	f8c4 8010 	str.w	r8, [r4, #16]
 801c85c:	f43f af5e 	beq.w	801c71c <rcl_wait_set_resize+0xc0>
 801c860:	00b6      	lsls	r6, r6, #2
 801c862:	464a      	mov	r2, r9
 801c864:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801c866:	6960      	ldr	r0, [r4, #20]
 801c868:	4631      	mov	r1, r6
 801c86a:	4798      	blx	r3
 801c86c:	4681      	mov	r9, r0
 801c86e:	6160      	str	r0, [r4, #20]
 801c870:	2800      	cmp	r0, #0
 801c872:	f000 8084 	beq.w	801c97e <rcl_wait_set_resize+0x322>
 801c876:	4632      	mov	r2, r6
 801c878:	4641      	mov	r1, r8
 801c87a:	f005 fca9 	bl	80221d0 <memset>
 801c87e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c880:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c884:	e753      	b.n	801c72e <rcl_wait_set_resize+0xd2>
 801c886:	009c      	lsls	r4, r3, #2
 801c888:	464a      	mov	r2, r9
 801c88a:	69a8      	ldr	r0, [r5, #24]
 801c88c:	4621      	mov	r1, r4
 801c88e:	47c0      	blx	r8
 801c890:	61a8      	str	r0, [r5, #24]
 801c892:	bb40      	cbnz	r0, 801c8e6 <rcl_wait_set_resize+0x28a>
 801c894:	200a      	movs	r0, #10
 801c896:	b003      	add	sp, #12
 801c898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c89c:	00bc      	lsls	r4, r7, #2
 801c89e:	464a      	mov	r2, r9
 801c8a0:	6928      	ldr	r0, [r5, #16]
 801c8a2:	4621      	mov	r1, r4
 801c8a4:	47c0      	blx	r8
 801c8a6:	6128      	str	r0, [r5, #16]
 801c8a8:	2800      	cmp	r0, #0
 801c8aa:	d0f3      	beq.n	801c894 <rcl_wait_set_resize+0x238>
 801c8ac:	4622      	mov	r2, r4
 801c8ae:	4631      	mov	r1, r6
 801c8b0:	f005 fc8e 	bl	80221d0 <memset>
 801c8b4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c8b6:	616f      	str	r7, [r5, #20]
 801c8b8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c8bc:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801c8c0:	e747      	b.n	801c752 <rcl_wait_set_resize+0xf6>
 801c8c2:	6a28      	ldr	r0, [r5, #32]
 801c8c4:	b120      	cbz	r0, 801c8d0 <rcl_wait_set_resize+0x274>
 801c8c6:	4639      	mov	r1, r7
 801c8c8:	47c0      	blx	r8
 801c8ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c8cc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c8ce:	622b      	str	r3, [r5, #32]
 801c8d0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801c8d2:	2800      	cmp	r0, #0
 801c8d4:	f43f af7e 	beq.w	801c7d4 <rcl_wait_set_resize+0x178>
 801c8d8:	4639      	mov	r1, r7
 801c8da:	47c0      	blx	r8
 801c8dc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c8de:	2300      	movs	r3, #0
 801c8e0:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801c8e4:	e776      	b.n	801c7d4 <rcl_wait_set_resize+0x178>
 801c8e6:	4622      	mov	r2, r4
 801c8e8:	4631      	mov	r1, r6
 801c8ea:	f005 fc71 	bl	80221d0 <memset>
 801c8ee:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 801c8f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c8f2:	464a      	mov	r2, r9
 801c8f4:	6a38      	ldr	r0, [r7, #32]
 801c8f6:	4621      	mov	r1, r4
 801c8f8:	61eb      	str	r3, [r5, #28]
 801c8fa:	61fe      	str	r6, [r7, #28]
 801c8fc:	47c0      	blx	r8
 801c8fe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c900:	6238      	str	r0, [r7, #32]
 801c902:	6a1f      	ldr	r7, [r3, #32]
 801c904:	2f00      	cmp	r7, #0
 801c906:	d04a      	beq.n	801c99e <rcl_wait_set_resize+0x342>
 801c908:	4622      	mov	r2, r4
 801c90a:	4631      	mov	r1, r6
 801c90c:	4638      	mov	r0, r7
 801c90e:	f005 fc5f 	bl	80221d0 <memset>
 801c912:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c914:	e733      	b.n	801c77e <rcl_wait_set_resize+0x122>
 801c916:	009c      	lsls	r4, r3, #2
 801c918:	463a      	mov	r2, r7
 801c91a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801c91c:	4621      	mov	r1, r4
 801c91e:	47c8      	blx	r9
 801c920:	62a8      	str	r0, [r5, #40]	@ 0x28
 801c922:	2800      	cmp	r0, #0
 801c924:	d0b6      	beq.n	801c894 <rcl_wait_set_resize+0x238>
 801c926:	4622      	mov	r2, r4
 801c928:	4631      	mov	r1, r6
 801c92a:	f005 fc51 	bl	80221d0 <memset>
 801c92e:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801c932:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c934:	463a      	mov	r2, r7
 801c936:	4621      	mov	r1, r4
 801c938:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801c93c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801c93e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801c942:	47c8      	blx	r9
 801c944:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c946:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801c94a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c94c:	2b00      	cmp	r3, #0
 801c94e:	d034      	beq.n	801c9ba <rcl_wait_set_resize+0x35e>
 801c950:	4622      	mov	r2, r4
 801c952:	4631      	mov	r1, r6
 801c954:	4618      	mov	r0, r3
 801c956:	f005 fc3b 	bl	80221d0 <memset>
 801c95a:	4630      	mov	r0, r6
 801c95c:	b003      	add	sp, #12
 801c95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c962:	200b      	movs	r0, #11
 801c964:	4770      	bx	lr
 801c966:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801c96a:	e794      	b.n	801c896 <rcl_wait_set_resize+0x23a>
 801c96c:	6828      	ldr	r0, [r5, #0]
 801c96e:	4651      	mov	r1, sl
 801c970:	9301      	str	r3, [sp, #4]
 801c972:	47d8      	blx	fp
 801c974:	9b01      	ldr	r3, [sp, #4]
 801c976:	200a      	movs	r0, #10
 801c978:	e9c5 3300 	strd	r3, r3, [r5]
 801c97c:	e78b      	b.n	801c896 <rcl_wait_set_resize+0x23a>
 801c97e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c980:	68a8      	ldr	r0, [r5, #8]
 801c982:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801c984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c986:	4798      	blx	r3
 801c988:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c98a:	6928      	ldr	r0, [r5, #16]
 801c98c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801c98e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801c990:	e9c5 9902 	strd	r9, r9, [r5, #8]
 801c994:	4790      	blx	r2
 801c996:	200a      	movs	r0, #10
 801c998:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801c99c:	e77b      	b.n	801c896 <rcl_wait_set_resize+0x23a>
 801c99e:	69a8      	ldr	r0, [r5, #24]
 801c9a0:	4649      	mov	r1, r9
 801c9a2:	47d0      	blx	sl
 801c9a4:	200a      	movs	r0, #10
 801c9a6:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801c9aa:	e774      	b.n	801c896 <rcl_wait_set_resize+0x23a>
 801c9ac:	6a28      	ldr	r0, [r5, #32]
 801c9ae:	4639      	mov	r1, r7
 801c9b0:	47c0      	blx	r8
 801c9b2:	200a      	movs	r0, #10
 801c9b4:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801c9b8:	e76d      	b.n	801c896 <rcl_wait_set_resize+0x23a>
 801c9ba:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801c9bc:	4639      	mov	r1, r7
 801c9be:	9301      	str	r3, [sp, #4]
 801c9c0:	47c0      	blx	r8
 801c9c2:	9b01      	ldr	r3, [sp, #4]
 801c9c4:	200a      	movs	r0, #10
 801c9c6:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801c9ca:	e764      	b.n	801c896 <rcl_wait_set_resize+0x23a>

0801c9cc <rcl_wait_set_init>:
 801c9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9d0:	b085      	sub	sp, #20
 801c9d2:	4605      	mov	r5, r0
 801c9d4:	460e      	mov	r6, r1
 801c9d6:	4617      	mov	r7, r2
 801c9d8:	a812      	add	r0, sp, #72	@ 0x48
 801c9da:	4698      	mov	r8, r3
 801c9dc:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 801c9e0:	f7f8 fcf2 	bl	80153c8 <rcutils_allocator_is_valid>
 801c9e4:	2d00      	cmp	r5, #0
 801c9e6:	d072      	beq.n	801cace <rcl_wait_set_init+0x102>
 801c9e8:	f080 0001 	eor.w	r0, r0, #1
 801c9ec:	b2c0      	uxtb	r0, r0
 801c9ee:	2800      	cmp	r0, #0
 801c9f0:	d16d      	bne.n	801cace <rcl_wait_set_init+0x102>
 801c9f2:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801c9f6:	f1ba 0f00 	cmp.w	sl, #0
 801c9fa:	d004      	beq.n	801ca06 <rcl_wait_set_init+0x3a>
 801c9fc:	2464      	movs	r4, #100	@ 0x64
 801c9fe:	4620      	mov	r0, r4
 801ca00:	b005      	add	sp, #20
 801ca02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca06:	f1b9 0f00 	cmp.w	r9, #0
 801ca0a:	d060      	beq.n	801cace <rcl_wait_set_init+0x102>
 801ca0c:	4648      	mov	r0, r9
 801ca0e:	f7fe f807 	bl	801aa20 <rcl_context_is_valid>
 801ca12:	2800      	cmp	r0, #0
 801ca14:	d068      	beq.n	801cae8 <rcl_wait_set_init+0x11c>
 801ca16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ca18:	205c      	movs	r0, #92	@ 0x5c
 801ca1a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801ca1c:	4798      	blx	r3
 801ca1e:	6328      	str	r0, [r5, #48]	@ 0x30
 801ca20:	2800      	cmp	r0, #0
 801ca22:	d063      	beq.n	801caec <rcl_wait_set_init+0x120>
 801ca24:	225c      	movs	r2, #92	@ 0x5c
 801ca26:	4651      	mov	r1, sl
 801ca28:	f005 fbd2 	bl	80221d0 <memset>
 801ca2c:	ac12      	add	r4, sp, #72	@ 0x48
 801ca2e:	f8d5 b030 	ldr.w	fp, [r5, #48]	@ 0x30
 801ca32:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801ca36:	f10b 0c48 	add.w	ip, fp, #72	@ 0x48
 801ca3a:	f8cb 9044 	str.w	r9, [fp, #68]	@ 0x44
 801ca3e:	eb03 0e02 	add.w	lr, r3, r2
 801ca42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ca44:	f8d9 9000 	ldr.w	r9, [r9]
 801ca48:	449e      	add	lr, r3
 801ca4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ca4c:	e9cb aa01 	strd	sl, sl, [fp, #4]
 801ca50:	e9cb aa04 	strd	sl, sl, [fp, #16]
 801ca54:	e9cb aa07 	strd	sl, sl, [fp, #28]
 801ca58:	e9cb aa0a 	strd	sl, sl, [fp, #40]	@ 0x28
 801ca5c:	e9cb aa0d 	strd	sl, sl, [fp, #52]	@ 0x34
 801ca60:	44be      	add	lr, r7
 801ca62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ca66:	6823      	ldr	r3, [r4, #0]
 801ca68:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 801ca6c:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 801ca70:	f8cc 3000 	str.w	r3, [ip]
 801ca74:	f002 ffa4 	bl	801f9c0 <rmw_create_wait_set>
 801ca78:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ca7a:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 801ca7e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801ca80:	b350      	cbz	r0, 801cad8 <rcl_wait_set_init+0x10c>
 801ca82:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ca84:	4643      	mov	r3, r8
 801ca86:	463a      	mov	r2, r7
 801ca88:	4631      	mov	r1, r6
 801ca8a:	9402      	str	r4, [sp, #8]
 801ca8c:	4628      	mov	r0, r5
 801ca8e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ca90:	9401      	str	r4, [sp, #4]
 801ca92:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ca94:	9400      	str	r4, [sp, #0]
 801ca96:	f7ff fde1 	bl	801c65c <rcl_wait_set_resize>
 801ca9a:	4604      	mov	r4, r0
 801ca9c:	2800      	cmp	r0, #0
 801ca9e:	d0ae      	beq.n	801c9fe <rcl_wait_set_init+0x32>
 801caa0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801caa2:	bb2b      	cbnz	r3, 801caf0 <rcl_wait_set_init+0x124>
 801caa4:	2600      	movs	r6, #0
 801caa6:	4628      	mov	r0, r5
 801caa8:	4633      	mov	r3, r6
 801caaa:	4632      	mov	r2, r6
 801caac:	4631      	mov	r1, r6
 801caae:	9600      	str	r6, [sp, #0]
 801cab0:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801cab4:	f7ff fdd2 	bl	801c65c <rcl_wait_set_resize>
 801cab8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801caba:	2800      	cmp	r0, #0
 801cabc:	d09f      	beq.n	801c9fe <rcl_wait_set_init+0x32>
 801cabe:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801cac0:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 801cac2:	4798      	blx	r3
 801cac4:	4620      	mov	r0, r4
 801cac6:	632e      	str	r6, [r5, #48]	@ 0x30
 801cac8:	b005      	add	sp, #20
 801caca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cace:	240b      	movs	r4, #11
 801cad0:	4620      	mov	r0, r4
 801cad2:	b005      	add	sp, #20
 801cad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cad8:	2401      	movs	r4, #1
 801cada:	f002 ff7b 	bl	801f9d4 <rmw_destroy_wait_set>
 801cade:	2800      	cmp	r0, #0
 801cae0:	bf18      	it	ne
 801cae2:	f44f 7461 	movne.w	r4, #900	@ 0x384
 801cae6:	e7dd      	b.n	801caa4 <rcl_wait_set_init+0xd8>
 801cae8:	2465      	movs	r4, #101	@ 0x65
 801caea:	e788      	b.n	801c9fe <rcl_wait_set_init+0x32>
 801caec:	240a      	movs	r4, #10
 801caee:	e786      	b.n	801c9fe <rcl_wait_set_init+0x32>
 801caf0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801caf2:	e7f2      	b.n	801cada <rcl_wait_set_init+0x10e>

0801caf4 <rcl_wait_set_add_guard_condition>:
 801caf4:	b318      	cbz	r0, 801cb3e <rcl_wait_set_add_guard_condition+0x4a>
 801caf6:	b538      	push	{r3, r4, r5, lr}
 801caf8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801cafa:	4604      	mov	r4, r0
 801cafc:	b30b      	cbz	r3, 801cb42 <rcl_wait_set_add_guard_condition+0x4e>
 801cafe:	b319      	cbz	r1, 801cb48 <rcl_wait_set_add_guard_condition+0x54>
 801cb00:	68dd      	ldr	r5, [r3, #12]
 801cb02:	68c0      	ldr	r0, [r0, #12]
 801cb04:	4285      	cmp	r5, r0
 801cb06:	d217      	bcs.n	801cb38 <rcl_wait_set_add_guard_condition+0x44>
 801cb08:	1c68      	adds	r0, r5, #1
 801cb0a:	60d8      	str	r0, [r3, #12]
 801cb0c:	68a3      	ldr	r3, [r4, #8]
 801cb0e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801cb12:	b102      	cbz	r2, 801cb16 <rcl_wait_set_add_guard_condition+0x22>
 801cb14:	6015      	str	r5, [r2, #0]
 801cb16:	4608      	mov	r0, r1
 801cb18:	f004 fc02 	bl	8021320 <rcl_guard_condition_get_rmw_handle>
 801cb1c:	b150      	cbz	r0, 801cb34 <rcl_wait_set_add_guard_condition+0x40>
 801cb1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cb20:	6842      	ldr	r2, [r0, #4]
 801cb22:	2000      	movs	r0, #0
 801cb24:	695b      	ldr	r3, [r3, #20]
 801cb26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cb2a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801cb2c:	6913      	ldr	r3, [r2, #16]
 801cb2e:	3301      	adds	r3, #1
 801cb30:	6113      	str	r3, [r2, #16]
 801cb32:	bd38      	pop	{r3, r4, r5, pc}
 801cb34:	2001      	movs	r0, #1
 801cb36:	bd38      	pop	{r3, r4, r5, pc}
 801cb38:	f240 3086 	movw	r0, #902	@ 0x386
 801cb3c:	bd38      	pop	{r3, r4, r5, pc}
 801cb3e:	200b      	movs	r0, #11
 801cb40:	4770      	bx	lr
 801cb42:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801cb46:	bd38      	pop	{r3, r4, r5, pc}
 801cb48:	200b      	movs	r0, #11
 801cb4a:	bd38      	pop	{r3, r4, r5, pc}

0801cb4c <rcl_wait_set_add_timer>:
 801cb4c:	b328      	cbz	r0, 801cb9a <rcl_wait_set_add_timer+0x4e>
 801cb4e:	b538      	push	{r3, r4, r5, lr}
 801cb50:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801cb52:	4604      	mov	r4, r0
 801cb54:	b31b      	cbz	r3, 801cb9e <rcl_wait_set_add_timer+0x52>
 801cb56:	b329      	cbz	r1, 801cba4 <rcl_wait_set_add_timer+0x58>
 801cb58:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801cb5a:	6965      	ldr	r5, [r4, #20]
 801cb5c:	42a8      	cmp	r0, r5
 801cb5e:	d219      	bcs.n	801cb94 <rcl_wait_set_add_timer+0x48>
 801cb60:	1c45      	adds	r5, r0, #1
 801cb62:	641d      	str	r5, [r3, #64]	@ 0x40
 801cb64:	6923      	ldr	r3, [r4, #16]
 801cb66:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 801cb6a:	b102      	cbz	r2, 801cb6e <rcl_wait_set_add_timer+0x22>
 801cb6c:	6010      	str	r0, [r2, #0]
 801cb6e:	4608      	mov	r0, r1
 801cb70:	f7ff fb9a 	bl	801c2a8 <rcl_timer_get_guard_condition>
 801cb74:	b168      	cbz	r0, 801cb92 <rcl_wait_set_add_timer+0x46>
 801cb76:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801cb78:	68e3      	ldr	r3, [r4, #12]
 801cb7a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 801cb7c:	3b01      	subs	r3, #1
 801cb7e:	441d      	add	r5, r3
 801cb80:	f004 fbce 	bl	8021320 <rcl_guard_condition_get_rmw_handle>
 801cb84:	b180      	cbz	r0, 801cba8 <rcl_wait_set_add_timer+0x5c>
 801cb86:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cb88:	6842      	ldr	r2, [r0, #4]
 801cb8a:	2000      	movs	r0, #0
 801cb8c:	695b      	ldr	r3, [r3, #20]
 801cb8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cb92:	bd38      	pop	{r3, r4, r5, pc}
 801cb94:	f240 3086 	movw	r0, #902	@ 0x386
 801cb98:	bd38      	pop	{r3, r4, r5, pc}
 801cb9a:	200b      	movs	r0, #11
 801cb9c:	4770      	bx	lr
 801cb9e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801cba2:	bd38      	pop	{r3, r4, r5, pc}
 801cba4:	200b      	movs	r0, #11
 801cba6:	bd38      	pop	{r3, r4, r5, pc}
 801cba8:	2001      	movs	r0, #1
 801cbaa:	bd38      	pop	{r3, r4, r5, pc}

0801cbac <rcl_wait_set_add_client>:
 801cbac:	b318      	cbz	r0, 801cbf6 <rcl_wait_set_add_client+0x4a>
 801cbae:	b538      	push	{r3, r4, r5, lr}
 801cbb0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801cbb2:	4604      	mov	r4, r0
 801cbb4:	b30b      	cbz	r3, 801cbfa <rcl_wait_set_add_client+0x4e>
 801cbb6:	b319      	cbz	r1, 801cc00 <rcl_wait_set_add_client+0x54>
 801cbb8:	699d      	ldr	r5, [r3, #24]
 801cbba:	69c0      	ldr	r0, [r0, #28]
 801cbbc:	4285      	cmp	r5, r0
 801cbbe:	d217      	bcs.n	801cbf0 <rcl_wait_set_add_client+0x44>
 801cbc0:	1c68      	adds	r0, r5, #1
 801cbc2:	6198      	str	r0, [r3, #24]
 801cbc4:	69a3      	ldr	r3, [r4, #24]
 801cbc6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801cbca:	b102      	cbz	r2, 801cbce <rcl_wait_set_add_client+0x22>
 801cbcc:	6015      	str	r5, [r2, #0]
 801cbce:	4608      	mov	r0, r1
 801cbd0:	f7fd fe78 	bl	801a8c4 <rcl_client_get_rmw_handle>
 801cbd4:	b150      	cbz	r0, 801cbec <rcl_wait_set_add_client+0x40>
 801cbd6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cbd8:	6842      	ldr	r2, [r0, #4]
 801cbda:	2000      	movs	r0, #0
 801cbdc:	6a1b      	ldr	r3, [r3, #32]
 801cbde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cbe2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801cbe4:	69d3      	ldr	r3, [r2, #28]
 801cbe6:	3301      	adds	r3, #1
 801cbe8:	61d3      	str	r3, [r2, #28]
 801cbea:	bd38      	pop	{r3, r4, r5, pc}
 801cbec:	2001      	movs	r0, #1
 801cbee:	bd38      	pop	{r3, r4, r5, pc}
 801cbf0:	f240 3086 	movw	r0, #902	@ 0x386
 801cbf4:	bd38      	pop	{r3, r4, r5, pc}
 801cbf6:	200b      	movs	r0, #11
 801cbf8:	4770      	bx	lr
 801cbfa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801cbfe:	bd38      	pop	{r3, r4, r5, pc}
 801cc00:	200b      	movs	r0, #11
 801cc02:	bd38      	pop	{r3, r4, r5, pc}

0801cc04 <rcl_wait_set_add_service>:
 801cc04:	b318      	cbz	r0, 801cc4e <rcl_wait_set_add_service+0x4a>
 801cc06:	b538      	push	{r3, r4, r5, lr}
 801cc08:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801cc0a:	4604      	mov	r4, r0
 801cc0c:	b30b      	cbz	r3, 801cc52 <rcl_wait_set_add_service+0x4e>
 801cc0e:	b319      	cbz	r1, 801cc58 <rcl_wait_set_add_service+0x54>
 801cc10:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801cc12:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801cc14:	4285      	cmp	r5, r0
 801cc16:	d217      	bcs.n	801cc48 <rcl_wait_set_add_service+0x44>
 801cc18:	1c68      	adds	r0, r5, #1
 801cc1a:	6258      	str	r0, [r3, #36]	@ 0x24
 801cc1c:	6a23      	ldr	r3, [r4, #32]
 801cc1e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801cc22:	b102      	cbz	r2, 801cc26 <rcl_wait_set_add_service+0x22>
 801cc24:	6015      	str	r5, [r2, #0]
 801cc26:	4608      	mov	r0, r1
 801cc28:	f7fe fdc2 	bl	801b7b0 <rcl_service_get_rmw_handle>
 801cc2c:	b150      	cbz	r0, 801cc44 <rcl_wait_set_add_service+0x40>
 801cc2e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cc30:	6842      	ldr	r2, [r0, #4]
 801cc32:	2000      	movs	r0, #0
 801cc34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cc36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cc3a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801cc3c:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 801cc3e:	3301      	adds	r3, #1
 801cc40:	6293      	str	r3, [r2, #40]	@ 0x28
 801cc42:	bd38      	pop	{r3, r4, r5, pc}
 801cc44:	2001      	movs	r0, #1
 801cc46:	bd38      	pop	{r3, r4, r5, pc}
 801cc48:	f240 3086 	movw	r0, #902	@ 0x386
 801cc4c:	bd38      	pop	{r3, r4, r5, pc}
 801cc4e:	200b      	movs	r0, #11
 801cc50:	4770      	bx	lr
 801cc52:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801cc56:	bd38      	pop	{r3, r4, r5, pc}
 801cc58:	200b      	movs	r0, #11
 801cc5a:	bd38      	pop	{r3, r4, r5, pc}
 801cc5c:	0000      	movs	r0, r0
	...

0801cc60 <rcl_wait>:
 801cc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc64:	ed2d 8b02 	vpush	{d8}
 801cc68:	b08d      	sub	sp, #52	@ 0x34
 801cc6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801cc6e:	2800      	cmp	r0, #0
 801cc70:	f000 814f 	beq.w	801cf12 <rcl_wait+0x2b2>
 801cc74:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801cc76:	4605      	mov	r5, r0
 801cc78:	2e00      	cmp	r6, #0
 801cc7a:	f000 811a 	beq.w	801ceb2 <rcl_wait+0x252>
 801cc7e:	6843      	ldr	r3, [r0, #4]
 801cc80:	b983      	cbnz	r3, 801cca4 <rcl_wait+0x44>
 801cc82:	68eb      	ldr	r3, [r5, #12]
 801cc84:	b973      	cbnz	r3, 801cca4 <rcl_wait+0x44>
 801cc86:	696b      	ldr	r3, [r5, #20]
 801cc88:	b963      	cbnz	r3, 801cca4 <rcl_wait+0x44>
 801cc8a:	69eb      	ldr	r3, [r5, #28]
 801cc8c:	b953      	cbnz	r3, 801cca4 <rcl_wait+0x44>
 801cc8e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801cc90:	b943      	cbnz	r3, 801cca4 <rcl_wait+0x44>
 801cc92:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801cc94:	b933      	cbnz	r3, 801cca4 <rcl_wait+0x44>
 801cc96:	f240 3085 	movw	r0, #901	@ 0x385
 801cc9a:	b00d      	add	sp, #52	@ 0x34
 801cc9c:	ecbd 8b02 	vpop	{d8}
 801cca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cca4:	9b04      	ldr	r3, [sp, #16]
 801cca6:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 801cca8:	2b01      	cmp	r3, #1
 801ccaa:	9b05      	ldr	r3, [sp, #20]
 801ccac:	f173 0300 	sbcs.w	r3, r3, #0
 801ccb0:	f2c0 80f8 	blt.w	801cea4 <rcl_wait+0x244>
 801ccb4:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 801ccb8:	2a00      	cmp	r2, #0
 801ccba:	f000 810f 	beq.w	801cedc <rcl_wait+0x27c>
 801ccbe:	2400      	movs	r4, #0
 801ccc0:	4613      	mov	r3, r2
 801ccc2:	f240 3921 	movw	r9, #801	@ 0x321
 801ccc6:	4632      	mov	r2, r6
 801ccc8:	46a2      	mov	sl, r4
 801ccca:	46a3      	mov	fp, r4
 801cccc:	ed9f 8b98 	vldr	d8, [pc, #608]	@ 801cf30 <rcl_wait+0x2d0>
 801ccd0:	e014      	b.n	801ccfc <rcl_wait+0x9c>
 801ccd2:	2800      	cmp	r0, #0
 801ccd4:	d1e1      	bne.n	801cc9a <rcl_wait+0x3a>
 801ccd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ccda:	4542      	cmp	r2, r8
 801ccdc:	eb73 0107 	sbcs.w	r1, r3, r7
 801cce0:	da03      	bge.n	801ccea <rcl_wait+0x8a>
 801cce2:	4690      	mov	r8, r2
 801cce4:	461f      	mov	r7, r3
 801cce6:	f04f 0b01 	mov.w	fp, #1
 801ccea:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801ccec:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801ccee:	3401      	adds	r4, #1
 801ccf0:	f14a 0a00 	adc.w	sl, sl, #0
 801ccf4:	429c      	cmp	r4, r3
 801ccf6:	f17a 0100 	sbcs.w	r1, sl, #0
 801ccfa:	d228      	bcs.n	801cd4e <rcl_wait+0xee>
 801ccfc:	6928      	ldr	r0, [r5, #16]
 801ccfe:	a908      	add	r1, sp, #32
 801cd00:	00a6      	lsls	r6, r4, #2
 801cd02:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801cd06:	2800      	cmp	r0, #0
 801cd08:	d0f1      	beq.n	801ccee <rcl_wait+0x8e>
 801cd0a:	68eb      	ldr	r3, [r5, #12]
 801cd0c:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801cd10:	4423      	add	r3, r4
 801cd12:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 801cd16:	f1be 0f00 	cmp.w	lr, #0
 801cd1a:	d006      	beq.n	801cd2a <rcl_wait+0xca>
 801cd1c:	6913      	ldr	r3, [r2, #16]
 801cd1e:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801cd22:	3301      	adds	r3, #1
 801cd24:	6113      	str	r3, [r2, #16]
 801cd26:	692b      	ldr	r3, [r5, #16]
 801cd28:	5998      	ldr	r0, [r3, r6]
 801cd2a:	ed8d 8b08 	vstr	d8, [sp, #32]
 801cd2e:	f7ff fa89 	bl	801c244 <rcl_timer_get_time_until_next_call>
 801cd32:	4548      	cmp	r0, r9
 801cd34:	d1cd      	bne.n	801ccd2 <rcl_wait+0x72>
 801cd36:	692b      	ldr	r3, [r5, #16]
 801cd38:	2200      	movs	r2, #0
 801cd3a:	3401      	adds	r4, #1
 801cd3c:	519a      	str	r2, [r3, r6]
 801cd3e:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801cd40:	f14a 0a00 	adc.w	sl, sl, #0
 801cd44:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801cd46:	429c      	cmp	r4, r3
 801cd48:	f17a 0100 	sbcs.w	r1, sl, #0
 801cd4c:	d3d6      	bcc.n	801ccfc <rcl_wait+0x9c>
 801cd4e:	4659      	mov	r1, fp
 801cd50:	4616      	mov	r6, r2
 801cd52:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801cd56:	4313      	orrs	r3, r2
 801cd58:	f040 80b4 	bne.w	801cec4 <rcl_wait+0x264>
 801cd5c:	2300      	movs	r3, #0
 801cd5e:	2200      	movs	r2, #0
 801cd60:	460c      	mov	r4, r1
 801cd62:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801cd66:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801cd6a:	ab08      	add	r3, sp, #32
 801cd6c:	9302      	str	r3, [sp, #8]
 801cd6e:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 801cd72:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 801cd74:	f106 0110 	add.w	r1, r6, #16
 801cd78:	9300      	str	r3, [sp, #0]
 801cd7a:	1d30      	adds	r0, r6, #4
 801cd7c:	f106 031c 	add.w	r3, r6, #28
 801cd80:	9201      	str	r2, [sp, #4]
 801cd82:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 801cd86:	f002 fcb7 	bl	801f6f8 <rmw_wait>
 801cd8a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cd8c:	4680      	mov	r8, r0
 801cd8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801cd90:	b1e2      	cbz	r2, 801cdcc <rcl_wait+0x16c>
 801cd92:	f04f 0900 	mov.w	r9, #0
 801cd96:	464f      	mov	r7, r9
 801cd98:	692a      	ldr	r2, [r5, #16]
 801cd9a:	f10d 011f 	add.w	r1, sp, #31
 801cd9e:	ea4f 0689 	mov.w	r6, r9, lsl #2
 801cda2:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801cda6:	b160      	cbz	r0, 801cdc2 <rcl_wait+0x162>
 801cda8:	f88d 701f 	strb.w	r7, [sp, #31]
 801cdac:	f7ff fa0e 	bl	801c1cc <rcl_timer_is_ready>
 801cdb0:	2800      	cmp	r0, #0
 801cdb2:	f47f af72 	bne.w	801cc9a <rcl_wait+0x3a>
 801cdb6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801cdba:	b90b      	cbnz	r3, 801cdc0 <rcl_wait+0x160>
 801cdbc:	692a      	ldr	r2, [r5, #16]
 801cdbe:	5193      	str	r3, [r2, r6]
 801cdc0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cdc2:	f109 0901 	add.w	r9, r9, #1
 801cdc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801cdc8:	454a      	cmp	r2, r9
 801cdca:	d8e5      	bhi.n	801cd98 <rcl_wait+0x138>
 801cdcc:	f038 0002 	bics.w	r0, r8, #2
 801cdd0:	d176      	bne.n	801cec0 <rcl_wait+0x260>
 801cdd2:	686f      	ldr	r7, [r5, #4]
 801cdd4:	b17f      	cbz	r7, 801cdf6 <rcl_wait+0x196>
 801cdd6:	4602      	mov	r2, r0
 801cdd8:	e002      	b.n	801cde0 <rcl_wait+0x180>
 801cdda:	3201      	adds	r2, #1
 801cddc:	42ba      	cmp	r2, r7
 801cdde:	d00a      	beq.n	801cdf6 <rcl_wait+0x196>
 801cde0:	6899      	ldr	r1, [r3, #8]
 801cde2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cde6:	2900      	cmp	r1, #0
 801cde8:	d1f7      	bne.n	801cdda <rcl_wait+0x17a>
 801cdea:	682e      	ldr	r6, [r5, #0]
 801cdec:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cdf0:	3201      	adds	r2, #1
 801cdf2:	42ba      	cmp	r2, r7
 801cdf4:	d1f4      	bne.n	801cde0 <rcl_wait+0x180>
 801cdf6:	68ef      	ldr	r7, [r5, #12]
 801cdf8:	b17f      	cbz	r7, 801ce1a <rcl_wait+0x1ba>
 801cdfa:	2200      	movs	r2, #0
 801cdfc:	e002      	b.n	801ce04 <rcl_wait+0x1a4>
 801cdfe:	3201      	adds	r2, #1
 801ce00:	42ba      	cmp	r2, r7
 801ce02:	d00a      	beq.n	801ce1a <rcl_wait+0x1ba>
 801ce04:	6959      	ldr	r1, [r3, #20]
 801ce06:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ce0a:	2900      	cmp	r1, #0
 801ce0c:	d1f7      	bne.n	801cdfe <rcl_wait+0x19e>
 801ce0e:	68ae      	ldr	r6, [r5, #8]
 801ce10:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801ce14:	3201      	adds	r2, #1
 801ce16:	42ba      	cmp	r2, r7
 801ce18:	d1f4      	bne.n	801ce04 <rcl_wait+0x1a4>
 801ce1a:	69ef      	ldr	r7, [r5, #28]
 801ce1c:	b17f      	cbz	r7, 801ce3e <rcl_wait+0x1de>
 801ce1e:	2200      	movs	r2, #0
 801ce20:	e002      	b.n	801ce28 <rcl_wait+0x1c8>
 801ce22:	3201      	adds	r2, #1
 801ce24:	42ba      	cmp	r2, r7
 801ce26:	d00a      	beq.n	801ce3e <rcl_wait+0x1de>
 801ce28:	6a19      	ldr	r1, [r3, #32]
 801ce2a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ce2e:	2900      	cmp	r1, #0
 801ce30:	d1f7      	bne.n	801ce22 <rcl_wait+0x1c2>
 801ce32:	69ae      	ldr	r6, [r5, #24]
 801ce34:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801ce38:	3201      	adds	r2, #1
 801ce3a:	42ba      	cmp	r2, r7
 801ce3c:	d1f4      	bne.n	801ce28 <rcl_wait+0x1c8>
 801ce3e:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 801ce40:	b17f      	cbz	r7, 801ce62 <rcl_wait+0x202>
 801ce42:	2200      	movs	r2, #0
 801ce44:	e002      	b.n	801ce4c <rcl_wait+0x1ec>
 801ce46:	3201      	adds	r2, #1
 801ce48:	42ba      	cmp	r2, r7
 801ce4a:	d00a      	beq.n	801ce62 <rcl_wait+0x202>
 801ce4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801ce4e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ce52:	2900      	cmp	r1, #0
 801ce54:	d1f7      	bne.n	801ce46 <rcl_wait+0x1e6>
 801ce56:	6a2e      	ldr	r6, [r5, #32]
 801ce58:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801ce5c:	3201      	adds	r2, #1
 801ce5e:	42ba      	cmp	r2, r7
 801ce60:	d1f4      	bne.n	801ce4c <rcl_wait+0x1ec>
 801ce62:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 801ce64:	b17f      	cbz	r7, 801ce86 <rcl_wait+0x226>
 801ce66:	2200      	movs	r2, #0
 801ce68:	e002      	b.n	801ce70 <rcl_wait+0x210>
 801ce6a:	3201      	adds	r2, #1
 801ce6c:	42ba      	cmp	r2, r7
 801ce6e:	d00a      	beq.n	801ce86 <rcl_wait+0x226>
 801ce70:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801ce72:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ce76:	2900      	cmp	r1, #0
 801ce78:	d1f7      	bne.n	801ce6a <rcl_wait+0x20a>
 801ce7a:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 801ce7c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801ce80:	3201      	adds	r2, #1
 801ce82:	42ba      	cmp	r2, r7
 801ce84:	d1f4      	bne.n	801ce70 <rcl_wait+0x210>
 801ce86:	f1b8 0f02 	cmp.w	r8, #2
 801ce8a:	f47f af06 	bne.w	801cc9a <rcl_wait+0x3a>
 801ce8e:	f084 0301 	eor.w	r3, r4, #1
 801ce92:	b2db      	uxtb	r3, r3
 801ce94:	2b00      	cmp	r3, #0
 801ce96:	bf18      	it	ne
 801ce98:	2002      	movne	r0, #2
 801ce9a:	b00d      	add	sp, #52	@ 0x34
 801ce9c:	ecbd 8b02 	vpop	{d8}
 801cea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cea4:	2a00      	cmp	r2, #0
 801cea6:	d03a      	beq.n	801cf1e <rcl_wait+0x2be>
 801cea8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801ceac:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801ceb0:	e705      	b.n	801ccbe <rcl_wait+0x5e>
 801ceb2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801ceb6:	b00d      	add	sp, #52	@ 0x34
 801ceb8:	ecbd 8b02 	vpop	{d8}
 801cebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cec0:	2001      	movs	r0, #1
 801cec2:	e6ea      	b.n	801cc9a <rcl_wait+0x3a>
 801cec4:	9b04      	ldr	r3, [sp, #16]
 801cec6:	460c      	mov	r4, r1
 801cec8:	2b01      	cmp	r3, #1
 801ceca:	9b05      	ldr	r3, [sp, #20]
 801cecc:	f173 0300 	sbcs.w	r3, r3, #0
 801ced0:	bfa8      	it	ge
 801ced2:	f044 0401 	orrge.w	r4, r4, #1
 801ced6:	b914      	cbnz	r4, 801cede <rcl_wait+0x27e>
 801ced8:	4623      	mov	r3, r4
 801ceda:	e747      	b.n	801cd6c <rcl_wait+0x10c>
 801cedc:	4611      	mov	r1, r2
 801cede:	2f00      	cmp	r7, #0
 801cee0:	da02      	bge.n	801cee8 <rcl_wait+0x288>
 801cee2:	f04f 0800 	mov.w	r8, #0
 801cee6:	4647      	mov	r7, r8
 801cee8:	460c      	mov	r4, r1
 801ceea:	4640      	mov	r0, r8
 801ceec:	4639      	mov	r1, r7
 801ceee:	a312      	add	r3, pc, #72	@ (adr r3, 801cf38 <rcl_wait+0x2d8>)
 801cef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cef4:	f7e3 fa5c 	bl	80003b0 <__aeabi_ldivmod>
 801cef8:	a30f      	add	r3, pc, #60	@ (adr r3, 801cf38 <rcl_wait+0x2d8>)
 801cefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cefe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801cf02:	4640      	mov	r0, r8
 801cf04:	4639      	mov	r1, r7
 801cf06:	f7e3 fa53 	bl	80003b0 <__aeabi_ldivmod>
 801cf0a:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801cf0e:	ab08      	add	r3, sp, #32
 801cf10:	e72c      	b.n	801cd6c <rcl_wait+0x10c>
 801cf12:	200b      	movs	r0, #11
 801cf14:	b00d      	add	sp, #52	@ 0x34
 801cf16:	ecbd 8b02 	vpop	{d8}
 801cf1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf1e:	4611      	mov	r1, r2
 801cf20:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801cf24:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801cf28:	e713      	b.n	801cd52 <rcl_wait+0xf2>
 801cf2a:	bf00      	nop
 801cf2c:	f3af 8000 	nop.w
 801cf30:	ffffffff 	.word	0xffffffff
 801cf34:	7fffffff 	.word	0x7fffffff
 801cf38:	3b9aca00 	.word	0x3b9aca00
 801cf3c:	00000000 	.word	0x00000000

0801cf40 <rcl_action_take_goal_response>:
 801cf40:	2800      	cmp	r0, #0
 801cf42:	d039      	beq.n	801cfb8 <rcl_action_take_goal_response+0x78>
 801cf44:	b570      	push	{r4, r5, r6, lr}
 801cf46:	4604      	mov	r4, r0
 801cf48:	6800      	ldr	r0, [r0, #0]
 801cf4a:	b380      	cbz	r0, 801cfae <rcl_action_take_goal_response+0x6e>
 801cf4c:	460e      	mov	r6, r1
 801cf4e:	4615      	mov	r5, r2
 801cf50:	f7fd fd3e 	bl	801a9d0 <rcl_client_is_valid>
 801cf54:	b330      	cbz	r0, 801cfa4 <rcl_action_take_goal_response+0x64>
 801cf56:	6820      	ldr	r0, [r4, #0]
 801cf58:	3004      	adds	r0, #4
 801cf5a:	f7fd fd39 	bl	801a9d0 <rcl_client_is_valid>
 801cf5e:	b308      	cbz	r0, 801cfa4 <rcl_action_take_goal_response+0x64>
 801cf60:	6820      	ldr	r0, [r4, #0]
 801cf62:	3008      	adds	r0, #8
 801cf64:	f7fd fd34 	bl	801a9d0 <rcl_client_is_valid>
 801cf68:	b1e0      	cbz	r0, 801cfa4 <rcl_action_take_goal_response+0x64>
 801cf6a:	6820      	ldr	r0, [r4, #0]
 801cf6c:	300c      	adds	r0, #12
 801cf6e:	f7fe fdc5 	bl	801bafc <rcl_subscription_is_valid>
 801cf72:	b1b8      	cbz	r0, 801cfa4 <rcl_action_take_goal_response+0x64>
 801cf74:	6820      	ldr	r0, [r4, #0]
 801cf76:	3010      	adds	r0, #16
 801cf78:	f7fe fdc0 	bl	801bafc <rcl_subscription_is_valid>
 801cf7c:	b190      	cbz	r0, 801cfa4 <rcl_action_take_goal_response+0x64>
 801cf7e:	b1cd      	cbz	r5, 801cfb4 <rcl_action_take_goal_response+0x74>
 801cf80:	b1c6      	cbz	r6, 801cfb4 <rcl_action_take_goal_response+0x74>
 801cf82:	462a      	mov	r2, r5
 801cf84:	4631      	mov	r1, r6
 801cf86:	6820      	ldr	r0, [r4, #0]
 801cf88:	f7fd fcda 	bl	801a940 <rcl_take_response>
 801cf8c:	b148      	cbz	r0, 801cfa2 <rcl_action_take_goal_response+0x62>
 801cf8e:	280a      	cmp	r0, #10
 801cf90:	d007      	beq.n	801cfa2 <rcl_action_take_goal_response+0x62>
 801cf92:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801cf96:	f640 0337 	movw	r3, #2103	@ 0x837
 801cf9a:	4290      	cmp	r0, r2
 801cf9c:	bf0c      	ite	eq
 801cf9e:	4618      	moveq	r0, r3
 801cfa0:	2001      	movne	r0, #1
 801cfa2:	bd70      	pop	{r4, r5, r6, pc}
 801cfa4:	f7f8 fa34 	bl	8015410 <rcutils_reset_error>
 801cfa8:	f640 0036 	movw	r0, #2102	@ 0x836
 801cfac:	bd70      	pop	{r4, r5, r6, pc}
 801cfae:	f640 0036 	movw	r0, #2102	@ 0x836
 801cfb2:	bd70      	pop	{r4, r5, r6, pc}
 801cfb4:	200b      	movs	r0, #11
 801cfb6:	bd70      	pop	{r4, r5, r6, pc}
 801cfb8:	f640 0036 	movw	r0, #2102	@ 0x836
 801cfbc:	4770      	bx	lr
 801cfbe:	bf00      	nop

0801cfc0 <rcl_action_send_result_request>:
 801cfc0:	b390      	cbz	r0, 801d028 <rcl_action_send_result_request+0x68>
 801cfc2:	b570      	push	{r4, r5, r6, lr}
 801cfc4:	4604      	mov	r4, r0
 801cfc6:	6800      	ldr	r0, [r0, #0]
 801cfc8:	b348      	cbz	r0, 801d01e <rcl_action_send_result_request+0x5e>
 801cfca:	460e      	mov	r6, r1
 801cfcc:	4615      	mov	r5, r2
 801cfce:	f7fd fcff 	bl	801a9d0 <rcl_client_is_valid>
 801cfd2:	b1f8      	cbz	r0, 801d014 <rcl_action_send_result_request+0x54>
 801cfd4:	6820      	ldr	r0, [r4, #0]
 801cfd6:	3004      	adds	r0, #4
 801cfd8:	f7fd fcfa 	bl	801a9d0 <rcl_client_is_valid>
 801cfdc:	b1d0      	cbz	r0, 801d014 <rcl_action_send_result_request+0x54>
 801cfde:	6820      	ldr	r0, [r4, #0]
 801cfe0:	3008      	adds	r0, #8
 801cfe2:	f7fd fcf5 	bl	801a9d0 <rcl_client_is_valid>
 801cfe6:	b1a8      	cbz	r0, 801d014 <rcl_action_send_result_request+0x54>
 801cfe8:	6820      	ldr	r0, [r4, #0]
 801cfea:	300c      	adds	r0, #12
 801cfec:	f7fe fd86 	bl	801bafc <rcl_subscription_is_valid>
 801cff0:	b180      	cbz	r0, 801d014 <rcl_action_send_result_request+0x54>
 801cff2:	6820      	ldr	r0, [r4, #0]
 801cff4:	3010      	adds	r0, #16
 801cff6:	f7fe fd81 	bl	801bafc <rcl_subscription_is_valid>
 801cffa:	b158      	cbz	r0, 801d014 <rcl_action_send_result_request+0x54>
 801cffc:	b195      	cbz	r5, 801d024 <rcl_action_send_result_request+0x64>
 801cffe:	b18e      	cbz	r6, 801d024 <rcl_action_send_result_request+0x64>
 801d000:	6820      	ldr	r0, [r4, #0]
 801d002:	462a      	mov	r2, r5
 801d004:	4631      	mov	r1, r6
 801d006:	3008      	adds	r0, #8
 801d008:	f7fd fc62 	bl	801a8d0 <rcl_send_request>
 801d00c:	3800      	subs	r0, #0
 801d00e:	bf18      	it	ne
 801d010:	2001      	movne	r0, #1
 801d012:	bd70      	pop	{r4, r5, r6, pc}
 801d014:	f7f8 f9fc 	bl	8015410 <rcutils_reset_error>
 801d018:	f640 0036 	movw	r0, #2102	@ 0x836
 801d01c:	bd70      	pop	{r4, r5, r6, pc}
 801d01e:	f640 0036 	movw	r0, #2102	@ 0x836
 801d022:	bd70      	pop	{r4, r5, r6, pc}
 801d024:	200b      	movs	r0, #11
 801d026:	bd70      	pop	{r4, r5, r6, pc}
 801d028:	f640 0036 	movw	r0, #2102	@ 0x836
 801d02c:	4770      	bx	lr
 801d02e:	bf00      	nop

0801d030 <rcl_action_take_result_response>:
 801d030:	2800      	cmp	r0, #0
 801d032:	d03a      	beq.n	801d0aa <rcl_action_take_result_response+0x7a>
 801d034:	b570      	push	{r4, r5, r6, lr}
 801d036:	4604      	mov	r4, r0
 801d038:	6800      	ldr	r0, [r0, #0]
 801d03a:	b388      	cbz	r0, 801d0a0 <rcl_action_take_result_response+0x70>
 801d03c:	460e      	mov	r6, r1
 801d03e:	4615      	mov	r5, r2
 801d040:	f7fd fcc6 	bl	801a9d0 <rcl_client_is_valid>
 801d044:	b338      	cbz	r0, 801d096 <rcl_action_take_result_response+0x66>
 801d046:	6820      	ldr	r0, [r4, #0]
 801d048:	3004      	adds	r0, #4
 801d04a:	f7fd fcc1 	bl	801a9d0 <rcl_client_is_valid>
 801d04e:	b310      	cbz	r0, 801d096 <rcl_action_take_result_response+0x66>
 801d050:	6820      	ldr	r0, [r4, #0]
 801d052:	3008      	adds	r0, #8
 801d054:	f7fd fcbc 	bl	801a9d0 <rcl_client_is_valid>
 801d058:	b1e8      	cbz	r0, 801d096 <rcl_action_take_result_response+0x66>
 801d05a:	6820      	ldr	r0, [r4, #0]
 801d05c:	300c      	adds	r0, #12
 801d05e:	f7fe fd4d 	bl	801bafc <rcl_subscription_is_valid>
 801d062:	b1c0      	cbz	r0, 801d096 <rcl_action_take_result_response+0x66>
 801d064:	6820      	ldr	r0, [r4, #0]
 801d066:	3010      	adds	r0, #16
 801d068:	f7fe fd48 	bl	801bafc <rcl_subscription_is_valid>
 801d06c:	b198      	cbz	r0, 801d096 <rcl_action_take_result_response+0x66>
 801d06e:	b1d5      	cbz	r5, 801d0a6 <rcl_action_take_result_response+0x76>
 801d070:	b1ce      	cbz	r6, 801d0a6 <rcl_action_take_result_response+0x76>
 801d072:	6820      	ldr	r0, [r4, #0]
 801d074:	462a      	mov	r2, r5
 801d076:	4631      	mov	r1, r6
 801d078:	3008      	adds	r0, #8
 801d07a:	f7fd fc61 	bl	801a940 <rcl_take_response>
 801d07e:	b148      	cbz	r0, 801d094 <rcl_action_take_result_response+0x64>
 801d080:	280a      	cmp	r0, #10
 801d082:	d007      	beq.n	801d094 <rcl_action_take_result_response+0x64>
 801d084:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801d088:	f640 0337 	movw	r3, #2103	@ 0x837
 801d08c:	4290      	cmp	r0, r2
 801d08e:	bf0c      	ite	eq
 801d090:	4618      	moveq	r0, r3
 801d092:	2001      	movne	r0, #1
 801d094:	bd70      	pop	{r4, r5, r6, pc}
 801d096:	f7f8 f9bb 	bl	8015410 <rcutils_reset_error>
 801d09a:	f640 0036 	movw	r0, #2102	@ 0x836
 801d09e:	bd70      	pop	{r4, r5, r6, pc}
 801d0a0:	f640 0036 	movw	r0, #2102	@ 0x836
 801d0a4:	bd70      	pop	{r4, r5, r6, pc}
 801d0a6:	200b      	movs	r0, #11
 801d0a8:	bd70      	pop	{r4, r5, r6, pc}
 801d0aa:	f640 0036 	movw	r0, #2102	@ 0x836
 801d0ae:	4770      	bx	lr

0801d0b0 <rcl_action_take_cancel_response>:
 801d0b0:	2800      	cmp	r0, #0
 801d0b2:	d03a      	beq.n	801d12a <rcl_action_take_cancel_response+0x7a>
 801d0b4:	b570      	push	{r4, r5, r6, lr}
 801d0b6:	4604      	mov	r4, r0
 801d0b8:	6800      	ldr	r0, [r0, #0]
 801d0ba:	b388      	cbz	r0, 801d120 <rcl_action_take_cancel_response+0x70>
 801d0bc:	460e      	mov	r6, r1
 801d0be:	4615      	mov	r5, r2
 801d0c0:	f7fd fc86 	bl	801a9d0 <rcl_client_is_valid>
 801d0c4:	b338      	cbz	r0, 801d116 <rcl_action_take_cancel_response+0x66>
 801d0c6:	6820      	ldr	r0, [r4, #0]
 801d0c8:	3004      	adds	r0, #4
 801d0ca:	f7fd fc81 	bl	801a9d0 <rcl_client_is_valid>
 801d0ce:	b310      	cbz	r0, 801d116 <rcl_action_take_cancel_response+0x66>
 801d0d0:	6820      	ldr	r0, [r4, #0]
 801d0d2:	3008      	adds	r0, #8
 801d0d4:	f7fd fc7c 	bl	801a9d0 <rcl_client_is_valid>
 801d0d8:	b1e8      	cbz	r0, 801d116 <rcl_action_take_cancel_response+0x66>
 801d0da:	6820      	ldr	r0, [r4, #0]
 801d0dc:	300c      	adds	r0, #12
 801d0de:	f7fe fd0d 	bl	801bafc <rcl_subscription_is_valid>
 801d0e2:	b1c0      	cbz	r0, 801d116 <rcl_action_take_cancel_response+0x66>
 801d0e4:	6820      	ldr	r0, [r4, #0]
 801d0e6:	3010      	adds	r0, #16
 801d0e8:	f7fe fd08 	bl	801bafc <rcl_subscription_is_valid>
 801d0ec:	b198      	cbz	r0, 801d116 <rcl_action_take_cancel_response+0x66>
 801d0ee:	b1d5      	cbz	r5, 801d126 <rcl_action_take_cancel_response+0x76>
 801d0f0:	b1ce      	cbz	r6, 801d126 <rcl_action_take_cancel_response+0x76>
 801d0f2:	6820      	ldr	r0, [r4, #0]
 801d0f4:	462a      	mov	r2, r5
 801d0f6:	4631      	mov	r1, r6
 801d0f8:	3004      	adds	r0, #4
 801d0fa:	f7fd fc21 	bl	801a940 <rcl_take_response>
 801d0fe:	b148      	cbz	r0, 801d114 <rcl_action_take_cancel_response+0x64>
 801d100:	280a      	cmp	r0, #10
 801d102:	d007      	beq.n	801d114 <rcl_action_take_cancel_response+0x64>
 801d104:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801d108:	f640 0337 	movw	r3, #2103	@ 0x837
 801d10c:	4290      	cmp	r0, r2
 801d10e:	bf0c      	ite	eq
 801d110:	4618      	moveq	r0, r3
 801d112:	2001      	movne	r0, #1
 801d114:	bd70      	pop	{r4, r5, r6, pc}
 801d116:	f7f8 f97b 	bl	8015410 <rcutils_reset_error>
 801d11a:	f640 0036 	movw	r0, #2102	@ 0x836
 801d11e:	bd70      	pop	{r4, r5, r6, pc}
 801d120:	f640 0036 	movw	r0, #2102	@ 0x836
 801d124:	bd70      	pop	{r4, r5, r6, pc}
 801d126:	200b      	movs	r0, #11
 801d128:	bd70      	pop	{r4, r5, r6, pc}
 801d12a:	f640 0036 	movw	r0, #2102	@ 0x836
 801d12e:	4770      	bx	lr

0801d130 <rcl_action_take_feedback>:
 801d130:	2800      	cmp	r0, #0
 801d132:	d038      	beq.n	801d1a6 <rcl_action_take_feedback+0x76>
 801d134:	b530      	push	{r4, r5, lr}
 801d136:	4604      	mov	r4, r0
 801d138:	6800      	ldr	r0, [r0, #0]
 801d13a:	b091      	sub	sp, #68	@ 0x44
 801d13c:	b378      	cbz	r0, 801d19e <rcl_action_take_feedback+0x6e>
 801d13e:	460d      	mov	r5, r1
 801d140:	f7fd fc46 	bl	801a9d0 <rcl_client_is_valid>
 801d144:	b328      	cbz	r0, 801d192 <rcl_action_take_feedback+0x62>
 801d146:	6820      	ldr	r0, [r4, #0]
 801d148:	3004      	adds	r0, #4
 801d14a:	f7fd fc41 	bl	801a9d0 <rcl_client_is_valid>
 801d14e:	b300      	cbz	r0, 801d192 <rcl_action_take_feedback+0x62>
 801d150:	6820      	ldr	r0, [r4, #0]
 801d152:	3008      	adds	r0, #8
 801d154:	f7fd fc3c 	bl	801a9d0 <rcl_client_is_valid>
 801d158:	b1d8      	cbz	r0, 801d192 <rcl_action_take_feedback+0x62>
 801d15a:	6820      	ldr	r0, [r4, #0]
 801d15c:	300c      	adds	r0, #12
 801d15e:	f7fe fccd 	bl	801bafc <rcl_subscription_is_valid>
 801d162:	b1b0      	cbz	r0, 801d192 <rcl_action_take_feedback+0x62>
 801d164:	6820      	ldr	r0, [r4, #0]
 801d166:	3010      	adds	r0, #16
 801d168:	f7fe fcc8 	bl	801bafc <rcl_subscription_is_valid>
 801d16c:	b188      	cbz	r0, 801d192 <rcl_action_take_feedback+0x62>
 801d16e:	b1ed      	cbz	r5, 801d1ac <rcl_action_take_feedback+0x7c>
 801d170:	6820      	ldr	r0, [r4, #0]
 801d172:	2300      	movs	r3, #0
 801d174:	466a      	mov	r2, sp
 801d176:	4629      	mov	r1, r5
 801d178:	300c      	adds	r0, #12
 801d17a:	f7fe fc63 	bl	801ba44 <rcl_take>
 801d17e:	b160      	cbz	r0, 801d19a <rcl_action_take_feedback+0x6a>
 801d180:	f240 1391 	movw	r3, #401	@ 0x191
 801d184:	4298      	cmp	r0, r3
 801d186:	d014      	beq.n	801d1b2 <rcl_action_take_feedback+0x82>
 801d188:	280a      	cmp	r0, #10
 801d18a:	bf18      	it	ne
 801d18c:	2001      	movne	r0, #1
 801d18e:	b011      	add	sp, #68	@ 0x44
 801d190:	bd30      	pop	{r4, r5, pc}
 801d192:	f7f8 f93d 	bl	8015410 <rcutils_reset_error>
 801d196:	f640 0036 	movw	r0, #2102	@ 0x836
 801d19a:	b011      	add	sp, #68	@ 0x44
 801d19c:	bd30      	pop	{r4, r5, pc}
 801d19e:	f640 0036 	movw	r0, #2102	@ 0x836
 801d1a2:	b011      	add	sp, #68	@ 0x44
 801d1a4:	bd30      	pop	{r4, r5, pc}
 801d1a6:	f640 0036 	movw	r0, #2102	@ 0x836
 801d1aa:	4770      	bx	lr
 801d1ac:	200b      	movs	r0, #11
 801d1ae:	b011      	add	sp, #68	@ 0x44
 801d1b0:	bd30      	pop	{r4, r5, pc}
 801d1b2:	f640 0037 	movw	r0, #2103	@ 0x837
 801d1b6:	e7f0      	b.n	801d19a <rcl_action_take_feedback+0x6a>

0801d1b8 <rcl_action_wait_set_add_action_client>:
 801d1b8:	2800      	cmp	r0, #0
 801d1ba:	d048      	beq.n	801d24e <rcl_action_wait_set_add_action_client+0x96>
 801d1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d1be:	460c      	mov	r4, r1
 801d1c0:	2900      	cmp	r1, #0
 801d1c2:	d03c      	beq.n	801d23e <rcl_action_wait_set_add_action_client+0x86>
 801d1c4:	4605      	mov	r5, r0
 801d1c6:	6808      	ldr	r0, [r1, #0]
 801d1c8:	2800      	cmp	r0, #0
 801d1ca:	d038      	beq.n	801d23e <rcl_action_wait_set_add_action_client+0x86>
 801d1cc:	4617      	mov	r7, r2
 801d1ce:	461e      	mov	r6, r3
 801d1d0:	f7fd fbfe 	bl	801a9d0 <rcl_client_is_valid>
 801d1d4:	b3b0      	cbz	r0, 801d244 <rcl_action_wait_set_add_action_client+0x8c>
 801d1d6:	6820      	ldr	r0, [r4, #0]
 801d1d8:	3004      	adds	r0, #4
 801d1da:	f7fd fbf9 	bl	801a9d0 <rcl_client_is_valid>
 801d1de:	b388      	cbz	r0, 801d244 <rcl_action_wait_set_add_action_client+0x8c>
 801d1e0:	6820      	ldr	r0, [r4, #0]
 801d1e2:	3008      	adds	r0, #8
 801d1e4:	f7fd fbf4 	bl	801a9d0 <rcl_client_is_valid>
 801d1e8:	b360      	cbz	r0, 801d244 <rcl_action_wait_set_add_action_client+0x8c>
 801d1ea:	6820      	ldr	r0, [r4, #0]
 801d1ec:	300c      	adds	r0, #12
 801d1ee:	f7fe fc85 	bl	801bafc <rcl_subscription_is_valid>
 801d1f2:	b338      	cbz	r0, 801d244 <rcl_action_wait_set_add_action_client+0x8c>
 801d1f4:	6820      	ldr	r0, [r4, #0]
 801d1f6:	3010      	adds	r0, #16
 801d1f8:	f7fe fc80 	bl	801bafc <rcl_subscription_is_valid>
 801d1fc:	b310      	cbz	r0, 801d244 <rcl_action_wait_set_add_action_client+0x8c>
 801d1fe:	6821      	ldr	r1, [r4, #0]
 801d200:	4628      	mov	r0, r5
 801d202:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801d206:	f7ff fcd1 	bl	801cbac <rcl_wait_set_add_client>
 801d20a:	b9b8      	cbnz	r0, 801d23c <rcl_action_wait_set_add_action_client+0x84>
 801d20c:	6821      	ldr	r1, [r4, #0]
 801d20e:	4628      	mov	r0, r5
 801d210:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801d214:	3104      	adds	r1, #4
 801d216:	f7ff fcc9 	bl	801cbac <rcl_wait_set_add_client>
 801d21a:	b978      	cbnz	r0, 801d23c <rcl_action_wait_set_add_action_client+0x84>
 801d21c:	6821      	ldr	r1, [r4, #0]
 801d21e:	4628      	mov	r0, r5
 801d220:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801d224:	3108      	adds	r1, #8
 801d226:	f7ff fcc1 	bl	801cbac <rcl_wait_set_add_client>
 801d22a:	b938      	cbnz	r0, 801d23c <rcl_action_wait_set_add_action_client+0x84>
 801d22c:	6821      	ldr	r1, [r4, #0]
 801d22e:	4628      	mov	r0, r5
 801d230:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801d234:	310c      	adds	r1, #12
 801d236:	f7ff f969 	bl	801c50c <rcl_wait_set_add_subscription>
 801d23a:	b158      	cbz	r0, 801d254 <rcl_action_wait_set_add_action_client+0x9c>
 801d23c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d23e:	f640 0036 	movw	r0, #2102	@ 0x836
 801d242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d244:	f7f8 f8e4 	bl	8015410 <rcutils_reset_error>
 801d248:	f640 0036 	movw	r0, #2102	@ 0x836
 801d24c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d24e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801d252:	4770      	bx	lr
 801d254:	6821      	ldr	r1, [r4, #0]
 801d256:	4628      	mov	r0, r5
 801d258:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801d25c:	3110      	adds	r1, #16
 801d25e:	f7ff f955 	bl	801c50c <rcl_wait_set_add_subscription>
 801d262:	2800      	cmp	r0, #0
 801d264:	d1ea      	bne.n	801d23c <rcl_action_wait_set_add_action_client+0x84>
 801d266:	b11f      	cbz	r7, 801d270 <rcl_action_wait_set_add_action_client+0xb8>
 801d268:	6823      	ldr	r3, [r4, #0]
 801d26a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801d26e:	603b      	str	r3, [r7, #0]
 801d270:	2e00      	cmp	r6, #0
 801d272:	d0e3      	beq.n	801d23c <rcl_action_wait_set_add_action_client+0x84>
 801d274:	6823      	ldr	r3, [r4, #0]
 801d276:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801d27a:	6033      	str	r3, [r6, #0]
 801d27c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d27e:	bf00      	nop

0801d280 <rcl_action_client_wait_set_get_entities_ready>:
 801d280:	2800      	cmp	r0, #0
 801d282:	d050      	beq.n	801d326 <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801d284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d288:	460c      	mov	r4, r1
 801d28a:	2900      	cmp	r1, #0
 801d28c:	d03e      	beq.n	801d30c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801d28e:	4605      	mov	r5, r0
 801d290:	6808      	ldr	r0, [r1, #0]
 801d292:	2800      	cmp	r0, #0
 801d294:	d03a      	beq.n	801d30c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801d296:	4616      	mov	r6, r2
 801d298:	461f      	mov	r7, r3
 801d29a:	f7fd fb99 	bl	801a9d0 <rcl_client_is_valid>
 801d29e:	2800      	cmp	r0, #0
 801d2a0:	d038      	beq.n	801d314 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d2a2:	6820      	ldr	r0, [r4, #0]
 801d2a4:	3004      	adds	r0, #4
 801d2a6:	f7fd fb93 	bl	801a9d0 <rcl_client_is_valid>
 801d2aa:	2800      	cmp	r0, #0
 801d2ac:	d032      	beq.n	801d314 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d2ae:	6820      	ldr	r0, [r4, #0]
 801d2b0:	3008      	adds	r0, #8
 801d2b2:	f7fd fb8d 	bl	801a9d0 <rcl_client_is_valid>
 801d2b6:	b368      	cbz	r0, 801d314 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d2b8:	6820      	ldr	r0, [r4, #0]
 801d2ba:	300c      	adds	r0, #12
 801d2bc:	f7fe fc1e 	bl	801bafc <rcl_subscription_is_valid>
 801d2c0:	b340      	cbz	r0, 801d314 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d2c2:	6820      	ldr	r0, [r4, #0]
 801d2c4:	3010      	adds	r0, #16
 801d2c6:	f7fe fc19 	bl	801bafc <rcl_subscription_is_valid>
 801d2ca:	b318      	cbz	r0, 801d314 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d2cc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
 801d2d0:	2a00      	cmp	r2, #0
 801d2d2:	bf18      	it	ne
 801d2d4:	2b00      	cmpne	r3, #0
 801d2d6:	9b08      	ldr	r3, [sp, #32]
 801d2d8:	bf0c      	ite	eq
 801d2da:	2101      	moveq	r1, #1
 801d2dc:	2100      	movne	r1, #0
 801d2de:	2b00      	cmp	r3, #0
 801d2e0:	bf08      	it	eq
 801d2e2:	f041 0101 	orreq.w	r1, r1, #1
 801d2e6:	2f00      	cmp	r7, #0
 801d2e8:	bf08      	it	eq
 801d2ea:	f041 0101 	orreq.w	r1, r1, #1
 801d2ee:	b9b9      	cbnz	r1, 801d320 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801d2f0:	b1b6      	cbz	r6, 801d320 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801d2f2:	6823      	ldr	r3, [r4, #0]
 801d2f4:	686c      	ldr	r4, [r5, #4]
 801d2f6:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	@ 0x1d0
 801d2fa:	428a      	cmp	r2, r1
 801d2fc:	4610      	mov	r0, r2
 801d2fe:	bf38      	it	cc
 801d300:	4608      	movcc	r0, r1
 801d302:	4284      	cmp	r4, r0
 801d304:	d812      	bhi.n	801d32c <rcl_action_client_wait_set_get_entities_ready+0xac>
 801d306:	2001      	movs	r0, #1
 801d308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d30c:	f640 0036 	movw	r0, #2102	@ 0x836
 801d310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d314:	f7f8 f87c 	bl	8015410 <rcutils_reset_error>
 801d318:	f640 0036 	movw	r0, #2102	@ 0x836
 801d31c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d320:	200b      	movs	r0, #11
 801d322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d326:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801d32a:	4770      	bx	lr
 801d32c:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	@ 0x1c4
 801d330:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	@ 0x1cc
 801d334:	45f0      	cmp	r8, lr
 801d336:	4640      	mov	r0, r8
 801d338:	69ec      	ldr	r4, [r5, #28]
 801d33a:	bf38      	it	cc
 801d33c:	4670      	movcc	r0, lr
 801d33e:	4560      	cmp	r0, ip
 801d340:	bf38      	it	cc
 801d342:	4660      	movcc	r0, ip
 801d344:	4284      	cmp	r4, r0
 801d346:	d9de      	bls.n	801d306 <rcl_action_client_wait_set_get_entities_ready+0x86>
 801d348:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801d34c:	682d      	ldr	r5, [r5, #0]
 801d34e:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 801d352:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 801d356:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801d35a:	1a18      	subs	r0, r3, r0
 801d35c:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 801d360:	f103 0c0c 	add.w	ip, r3, #12
 801d364:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 801d368:	fab0 f080 	clz	r0, r0
 801d36c:	eba5 050c 	sub.w	r5, r5, ip
 801d370:	0940      	lsrs	r0, r0, #5
 801d372:	fab5 f585 	clz	r5, r5
 801d376:	096d      	lsrs	r5, r5, #5
 801d378:	7035      	strb	r5, [r6, #0]
 801d37a:	f103 0510 	add.w	r5, r3, #16
 801d37e:	1b64      	subs	r4, r4, r5
 801d380:	9d08      	ldr	r5, [sp, #32]
 801d382:	fab4 f484 	clz	r4, r4
 801d386:	0964      	lsrs	r4, r4, #5
 801d388:	703c      	strb	r4, [r7, #0]
 801d38a:	1d1c      	adds	r4, r3, #4
 801d38c:	3308      	adds	r3, #8
 801d38e:	7028      	strb	r0, [r5, #0]
 801d390:	1b09      	subs	r1, r1, r4
 801d392:	2000      	movs	r0, #0
 801d394:	1ad3      	subs	r3, r2, r3
 801d396:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d398:	fab1 f181 	clz	r1, r1
 801d39c:	fab3 f383 	clz	r3, r3
 801d3a0:	0949      	lsrs	r1, r1, #5
 801d3a2:	095b      	lsrs	r3, r3, #5
 801d3a4:	7011      	strb	r1, [r2, #0]
 801d3a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d3a8:	7013      	strb	r3, [r2, #0]
 801d3aa:	e7b1      	b.n	801d310 <rcl_action_client_wait_set_get_entities_ready+0x90>

0801d3ac <rcl_action_take_goal_request>:
 801d3ac:	2800      	cmp	r0, #0
 801d3ae:	d039      	beq.n	801d424 <rcl_action_take_goal_request+0x78>
 801d3b0:	b570      	push	{r4, r5, r6, lr}
 801d3b2:	4604      	mov	r4, r0
 801d3b4:	6800      	ldr	r0, [r0, #0]
 801d3b6:	b380      	cbz	r0, 801d41a <rcl_action_take_goal_request+0x6e>
 801d3b8:	460e      	mov	r6, r1
 801d3ba:	4615      	mov	r5, r2
 801d3bc:	f7fe fa56 	bl	801b86c <rcl_service_is_valid>
 801d3c0:	b330      	cbz	r0, 801d410 <rcl_action_take_goal_request+0x64>
 801d3c2:	6820      	ldr	r0, [r4, #0]
 801d3c4:	3004      	adds	r0, #4
 801d3c6:	f7fe fa51 	bl	801b86c <rcl_service_is_valid>
 801d3ca:	b308      	cbz	r0, 801d410 <rcl_action_take_goal_request+0x64>
 801d3cc:	6820      	ldr	r0, [r4, #0]
 801d3ce:	3008      	adds	r0, #8
 801d3d0:	f7fe fa4c 	bl	801b86c <rcl_service_is_valid>
 801d3d4:	b1e0      	cbz	r0, 801d410 <rcl_action_take_goal_request+0x64>
 801d3d6:	6820      	ldr	r0, [r4, #0]
 801d3d8:	300c      	adds	r0, #12
 801d3da:	f7f6 ffbb 	bl	8014354 <rcl_publisher_is_valid>
 801d3de:	b1b8      	cbz	r0, 801d410 <rcl_action_take_goal_request+0x64>
 801d3e0:	6820      	ldr	r0, [r4, #0]
 801d3e2:	3010      	adds	r0, #16
 801d3e4:	f7f6 ffb6 	bl	8014354 <rcl_publisher_is_valid>
 801d3e8:	b190      	cbz	r0, 801d410 <rcl_action_take_goal_request+0x64>
 801d3ea:	b1cd      	cbz	r5, 801d420 <rcl_action_take_goal_request+0x74>
 801d3ec:	b1c6      	cbz	r6, 801d420 <rcl_action_take_goal_request+0x74>
 801d3ee:	462a      	mov	r2, r5
 801d3f0:	4631      	mov	r1, r6
 801d3f2:	6820      	ldr	r0, [r4, #0]
 801d3f4:	f7fe f9e2 	bl	801b7bc <rcl_take_request>
 801d3f8:	b148      	cbz	r0, 801d40e <rcl_action_take_goal_request+0x62>
 801d3fa:	280a      	cmp	r0, #10
 801d3fc:	d007      	beq.n	801d40e <rcl_action_take_goal_request+0x62>
 801d3fe:	f240 2259 	movw	r2, #601	@ 0x259
 801d402:	f640 0399 	movw	r3, #2201	@ 0x899
 801d406:	4290      	cmp	r0, r2
 801d408:	bf0c      	ite	eq
 801d40a:	4618      	moveq	r0, r3
 801d40c:	2001      	movne	r0, #1
 801d40e:	bd70      	pop	{r4, r5, r6, pc}
 801d410:	f7f7 fffe 	bl	8015410 <rcutils_reset_error>
 801d414:	f640 0098 	movw	r0, #2200	@ 0x898
 801d418:	bd70      	pop	{r4, r5, r6, pc}
 801d41a:	f640 0098 	movw	r0, #2200	@ 0x898
 801d41e:	bd70      	pop	{r4, r5, r6, pc}
 801d420:	200b      	movs	r0, #11
 801d422:	bd70      	pop	{r4, r5, r6, pc}
 801d424:	f640 0098 	movw	r0, #2200	@ 0x898
 801d428:	4770      	bx	lr
 801d42a:	bf00      	nop

0801d42c <rcl_action_send_goal_response>:
 801d42c:	b390      	cbz	r0, 801d494 <rcl_action_send_goal_response+0x68>
 801d42e:	b570      	push	{r4, r5, r6, lr}
 801d430:	4604      	mov	r4, r0
 801d432:	6800      	ldr	r0, [r0, #0]
 801d434:	b348      	cbz	r0, 801d48a <rcl_action_send_goal_response+0x5e>
 801d436:	460e      	mov	r6, r1
 801d438:	4615      	mov	r5, r2
 801d43a:	f7fe fa17 	bl	801b86c <rcl_service_is_valid>
 801d43e:	b1f8      	cbz	r0, 801d480 <rcl_action_send_goal_response+0x54>
 801d440:	6820      	ldr	r0, [r4, #0]
 801d442:	3004      	adds	r0, #4
 801d444:	f7fe fa12 	bl	801b86c <rcl_service_is_valid>
 801d448:	b1d0      	cbz	r0, 801d480 <rcl_action_send_goal_response+0x54>
 801d44a:	6820      	ldr	r0, [r4, #0]
 801d44c:	3008      	adds	r0, #8
 801d44e:	f7fe fa0d 	bl	801b86c <rcl_service_is_valid>
 801d452:	b1a8      	cbz	r0, 801d480 <rcl_action_send_goal_response+0x54>
 801d454:	6820      	ldr	r0, [r4, #0]
 801d456:	300c      	adds	r0, #12
 801d458:	f7f6 ff7c 	bl	8014354 <rcl_publisher_is_valid>
 801d45c:	b180      	cbz	r0, 801d480 <rcl_action_send_goal_response+0x54>
 801d45e:	6820      	ldr	r0, [r4, #0]
 801d460:	3010      	adds	r0, #16
 801d462:	f7f6 ff77 	bl	8014354 <rcl_publisher_is_valid>
 801d466:	b158      	cbz	r0, 801d480 <rcl_action_send_goal_response+0x54>
 801d468:	b195      	cbz	r5, 801d490 <rcl_action_send_goal_response+0x64>
 801d46a:	b18e      	cbz	r6, 801d490 <rcl_action_send_goal_response+0x64>
 801d46c:	462a      	mov	r2, r5
 801d46e:	4631      	mov	r1, r6
 801d470:	6820      	ldr	r0, [r4, #0]
 801d472:	f7fe f9e3 	bl	801b83c <rcl_send_response>
 801d476:	b110      	cbz	r0, 801d47e <rcl_action_send_goal_response+0x52>
 801d478:	2802      	cmp	r0, #2
 801d47a:	bf18      	it	ne
 801d47c:	2001      	movne	r0, #1
 801d47e:	bd70      	pop	{r4, r5, r6, pc}
 801d480:	f7f7 ffc6 	bl	8015410 <rcutils_reset_error>
 801d484:	f640 0098 	movw	r0, #2200	@ 0x898
 801d488:	bd70      	pop	{r4, r5, r6, pc}
 801d48a:	f640 0098 	movw	r0, #2200	@ 0x898
 801d48e:	bd70      	pop	{r4, r5, r6, pc}
 801d490:	200b      	movs	r0, #11
 801d492:	bd70      	pop	{r4, r5, r6, pc}
 801d494:	f640 0098 	movw	r0, #2200	@ 0x898
 801d498:	4770      	bx	lr
 801d49a:	bf00      	nop

0801d49c <rcl_action_take_result_request>:
 801d49c:	2800      	cmp	r0, #0
 801d49e:	d03a      	beq.n	801d516 <rcl_action_take_result_request+0x7a>
 801d4a0:	b570      	push	{r4, r5, r6, lr}
 801d4a2:	4604      	mov	r4, r0
 801d4a4:	6800      	ldr	r0, [r0, #0]
 801d4a6:	b388      	cbz	r0, 801d50c <rcl_action_take_result_request+0x70>
 801d4a8:	460e      	mov	r6, r1
 801d4aa:	4615      	mov	r5, r2
 801d4ac:	f7fe f9de 	bl	801b86c <rcl_service_is_valid>
 801d4b0:	b338      	cbz	r0, 801d502 <rcl_action_take_result_request+0x66>
 801d4b2:	6820      	ldr	r0, [r4, #0]
 801d4b4:	3004      	adds	r0, #4
 801d4b6:	f7fe f9d9 	bl	801b86c <rcl_service_is_valid>
 801d4ba:	b310      	cbz	r0, 801d502 <rcl_action_take_result_request+0x66>
 801d4bc:	6820      	ldr	r0, [r4, #0]
 801d4be:	3008      	adds	r0, #8
 801d4c0:	f7fe f9d4 	bl	801b86c <rcl_service_is_valid>
 801d4c4:	b1e8      	cbz	r0, 801d502 <rcl_action_take_result_request+0x66>
 801d4c6:	6820      	ldr	r0, [r4, #0]
 801d4c8:	300c      	adds	r0, #12
 801d4ca:	f7f6 ff43 	bl	8014354 <rcl_publisher_is_valid>
 801d4ce:	b1c0      	cbz	r0, 801d502 <rcl_action_take_result_request+0x66>
 801d4d0:	6820      	ldr	r0, [r4, #0]
 801d4d2:	3010      	adds	r0, #16
 801d4d4:	f7f6 ff3e 	bl	8014354 <rcl_publisher_is_valid>
 801d4d8:	b198      	cbz	r0, 801d502 <rcl_action_take_result_request+0x66>
 801d4da:	b1d5      	cbz	r5, 801d512 <rcl_action_take_result_request+0x76>
 801d4dc:	b1ce      	cbz	r6, 801d512 <rcl_action_take_result_request+0x76>
 801d4de:	6820      	ldr	r0, [r4, #0]
 801d4e0:	462a      	mov	r2, r5
 801d4e2:	4631      	mov	r1, r6
 801d4e4:	3008      	adds	r0, #8
 801d4e6:	f7fe f969 	bl	801b7bc <rcl_take_request>
 801d4ea:	b148      	cbz	r0, 801d500 <rcl_action_take_result_request+0x64>
 801d4ec:	280a      	cmp	r0, #10
 801d4ee:	d007      	beq.n	801d500 <rcl_action_take_result_request+0x64>
 801d4f0:	f240 2259 	movw	r2, #601	@ 0x259
 801d4f4:	f640 0399 	movw	r3, #2201	@ 0x899
 801d4f8:	4290      	cmp	r0, r2
 801d4fa:	bf0c      	ite	eq
 801d4fc:	4618      	moveq	r0, r3
 801d4fe:	2001      	movne	r0, #1
 801d500:	bd70      	pop	{r4, r5, r6, pc}
 801d502:	f7f7 ff85 	bl	8015410 <rcutils_reset_error>
 801d506:	f640 0098 	movw	r0, #2200	@ 0x898
 801d50a:	bd70      	pop	{r4, r5, r6, pc}
 801d50c:	f640 0098 	movw	r0, #2200	@ 0x898
 801d510:	bd70      	pop	{r4, r5, r6, pc}
 801d512:	200b      	movs	r0, #11
 801d514:	bd70      	pop	{r4, r5, r6, pc}
 801d516:	f640 0098 	movw	r0, #2200	@ 0x898
 801d51a:	4770      	bx	lr

0801d51c <rcl_action_take_cancel_request>:
 801d51c:	2800      	cmp	r0, #0
 801d51e:	d03a      	beq.n	801d596 <rcl_action_take_cancel_request+0x7a>
 801d520:	b570      	push	{r4, r5, r6, lr}
 801d522:	4604      	mov	r4, r0
 801d524:	6800      	ldr	r0, [r0, #0]
 801d526:	b388      	cbz	r0, 801d58c <rcl_action_take_cancel_request+0x70>
 801d528:	460e      	mov	r6, r1
 801d52a:	4615      	mov	r5, r2
 801d52c:	f7fe f99e 	bl	801b86c <rcl_service_is_valid>
 801d530:	b338      	cbz	r0, 801d582 <rcl_action_take_cancel_request+0x66>
 801d532:	6820      	ldr	r0, [r4, #0]
 801d534:	3004      	adds	r0, #4
 801d536:	f7fe f999 	bl	801b86c <rcl_service_is_valid>
 801d53a:	b310      	cbz	r0, 801d582 <rcl_action_take_cancel_request+0x66>
 801d53c:	6820      	ldr	r0, [r4, #0]
 801d53e:	3008      	adds	r0, #8
 801d540:	f7fe f994 	bl	801b86c <rcl_service_is_valid>
 801d544:	b1e8      	cbz	r0, 801d582 <rcl_action_take_cancel_request+0x66>
 801d546:	6820      	ldr	r0, [r4, #0]
 801d548:	300c      	adds	r0, #12
 801d54a:	f7f6 ff03 	bl	8014354 <rcl_publisher_is_valid>
 801d54e:	b1c0      	cbz	r0, 801d582 <rcl_action_take_cancel_request+0x66>
 801d550:	6820      	ldr	r0, [r4, #0]
 801d552:	3010      	adds	r0, #16
 801d554:	f7f6 fefe 	bl	8014354 <rcl_publisher_is_valid>
 801d558:	b198      	cbz	r0, 801d582 <rcl_action_take_cancel_request+0x66>
 801d55a:	b1d5      	cbz	r5, 801d592 <rcl_action_take_cancel_request+0x76>
 801d55c:	b1ce      	cbz	r6, 801d592 <rcl_action_take_cancel_request+0x76>
 801d55e:	6820      	ldr	r0, [r4, #0]
 801d560:	462a      	mov	r2, r5
 801d562:	4631      	mov	r1, r6
 801d564:	3004      	adds	r0, #4
 801d566:	f7fe f929 	bl	801b7bc <rcl_take_request>
 801d56a:	b148      	cbz	r0, 801d580 <rcl_action_take_cancel_request+0x64>
 801d56c:	280a      	cmp	r0, #10
 801d56e:	d007      	beq.n	801d580 <rcl_action_take_cancel_request+0x64>
 801d570:	f240 2259 	movw	r2, #601	@ 0x259
 801d574:	f640 0399 	movw	r3, #2201	@ 0x899
 801d578:	4290      	cmp	r0, r2
 801d57a:	bf0c      	ite	eq
 801d57c:	4618      	moveq	r0, r3
 801d57e:	2001      	movne	r0, #1
 801d580:	bd70      	pop	{r4, r5, r6, pc}
 801d582:	f7f7 ff45 	bl	8015410 <rcutils_reset_error>
 801d586:	f640 0098 	movw	r0, #2200	@ 0x898
 801d58a:	bd70      	pop	{r4, r5, r6, pc}
 801d58c:	f640 0098 	movw	r0, #2200	@ 0x898
 801d590:	bd70      	pop	{r4, r5, r6, pc}
 801d592:	200b      	movs	r0, #11
 801d594:	bd70      	pop	{r4, r5, r6, pc}
 801d596:	f640 0098 	movw	r0, #2200	@ 0x898
 801d59a:	4770      	bx	lr

0801d59c <rcl_action_send_cancel_response>:
 801d59c:	b398      	cbz	r0, 801d606 <rcl_action_send_cancel_response+0x6a>
 801d59e:	b570      	push	{r4, r5, r6, lr}
 801d5a0:	4604      	mov	r4, r0
 801d5a2:	6800      	ldr	r0, [r0, #0]
 801d5a4:	b350      	cbz	r0, 801d5fc <rcl_action_send_cancel_response+0x60>
 801d5a6:	460e      	mov	r6, r1
 801d5a8:	4615      	mov	r5, r2
 801d5aa:	f7fe f95f 	bl	801b86c <rcl_service_is_valid>
 801d5ae:	b300      	cbz	r0, 801d5f2 <rcl_action_send_cancel_response+0x56>
 801d5b0:	6820      	ldr	r0, [r4, #0]
 801d5b2:	3004      	adds	r0, #4
 801d5b4:	f7fe f95a 	bl	801b86c <rcl_service_is_valid>
 801d5b8:	b1d8      	cbz	r0, 801d5f2 <rcl_action_send_cancel_response+0x56>
 801d5ba:	6820      	ldr	r0, [r4, #0]
 801d5bc:	3008      	adds	r0, #8
 801d5be:	f7fe f955 	bl	801b86c <rcl_service_is_valid>
 801d5c2:	b1b0      	cbz	r0, 801d5f2 <rcl_action_send_cancel_response+0x56>
 801d5c4:	6820      	ldr	r0, [r4, #0]
 801d5c6:	300c      	adds	r0, #12
 801d5c8:	f7f6 fec4 	bl	8014354 <rcl_publisher_is_valid>
 801d5cc:	b188      	cbz	r0, 801d5f2 <rcl_action_send_cancel_response+0x56>
 801d5ce:	6820      	ldr	r0, [r4, #0]
 801d5d0:	3010      	adds	r0, #16
 801d5d2:	f7f6 febf 	bl	8014354 <rcl_publisher_is_valid>
 801d5d6:	b160      	cbz	r0, 801d5f2 <rcl_action_send_cancel_response+0x56>
 801d5d8:	b19d      	cbz	r5, 801d602 <rcl_action_send_cancel_response+0x66>
 801d5da:	b196      	cbz	r6, 801d602 <rcl_action_send_cancel_response+0x66>
 801d5dc:	6820      	ldr	r0, [r4, #0]
 801d5de:	462a      	mov	r2, r5
 801d5e0:	4631      	mov	r1, r6
 801d5e2:	3004      	adds	r0, #4
 801d5e4:	f7fe f92a 	bl	801b83c <rcl_send_response>
 801d5e8:	b110      	cbz	r0, 801d5f0 <rcl_action_send_cancel_response+0x54>
 801d5ea:	2802      	cmp	r0, #2
 801d5ec:	bf18      	it	ne
 801d5ee:	2001      	movne	r0, #1
 801d5f0:	bd70      	pop	{r4, r5, r6, pc}
 801d5f2:	f7f7 ff0d 	bl	8015410 <rcutils_reset_error>
 801d5f6:	f640 0098 	movw	r0, #2200	@ 0x898
 801d5fa:	bd70      	pop	{r4, r5, r6, pc}
 801d5fc:	f640 0098 	movw	r0, #2200	@ 0x898
 801d600:	bd70      	pop	{r4, r5, r6, pc}
 801d602:	200b      	movs	r0, #11
 801d604:	bd70      	pop	{r4, r5, r6, pc}
 801d606:	f640 0098 	movw	r0, #2200	@ 0x898
 801d60a:	4770      	bx	lr

0801d60c <rcl_action_wait_set_add_action_server>:
 801d60c:	2800      	cmp	r0, #0
 801d60e:	d04d      	beq.n	801d6ac <rcl_action_wait_set_add_action_server+0xa0>
 801d610:	b570      	push	{r4, r5, r6, lr}
 801d612:	460c      	mov	r4, r1
 801d614:	b159      	cbz	r1, 801d62e <rcl_action_wait_set_add_action_server+0x22>
 801d616:	4605      	mov	r5, r0
 801d618:	6808      	ldr	r0, [r1, #0]
 801d61a:	b140      	cbz	r0, 801d62e <rcl_action_wait_set_add_action_server+0x22>
 801d61c:	4616      	mov	r6, r2
 801d61e:	f7fe f925 	bl	801b86c <rcl_service_is_valid>
 801d622:	b120      	cbz	r0, 801d62e <rcl_action_wait_set_add_action_server+0x22>
 801d624:	6820      	ldr	r0, [r4, #0]
 801d626:	3004      	adds	r0, #4
 801d628:	f7fe f920 	bl	801b86c <rcl_service_is_valid>
 801d62c:	b910      	cbnz	r0, 801d634 <rcl_action_wait_set_add_action_server+0x28>
 801d62e:	f640 0098 	movw	r0, #2200	@ 0x898
 801d632:	bd70      	pop	{r4, r5, r6, pc}
 801d634:	6820      	ldr	r0, [r4, #0]
 801d636:	3008      	adds	r0, #8
 801d638:	f7fe f918 	bl	801b86c <rcl_service_is_valid>
 801d63c:	2800      	cmp	r0, #0
 801d63e:	d0f6      	beq.n	801d62e <rcl_action_wait_set_add_action_server+0x22>
 801d640:	6820      	ldr	r0, [r4, #0]
 801d642:	300c      	adds	r0, #12
 801d644:	f7f6 fe9e 	bl	8014384 <rcl_publisher_is_valid_except_context>
 801d648:	2800      	cmp	r0, #0
 801d64a:	d0f0      	beq.n	801d62e <rcl_action_wait_set_add_action_server+0x22>
 801d64c:	6820      	ldr	r0, [r4, #0]
 801d64e:	3010      	adds	r0, #16
 801d650:	f7f6 fe98 	bl	8014384 <rcl_publisher_is_valid_except_context>
 801d654:	2800      	cmp	r0, #0
 801d656:	d0ea      	beq.n	801d62e <rcl_action_wait_set_add_action_server+0x22>
 801d658:	6821      	ldr	r1, [r4, #0]
 801d65a:	4628      	mov	r0, r5
 801d65c:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801d660:	f7ff fad0 	bl	801cc04 <rcl_wait_set_add_service>
 801d664:	2800      	cmp	r0, #0
 801d666:	d1e4      	bne.n	801d632 <rcl_action_wait_set_add_action_server+0x26>
 801d668:	6821      	ldr	r1, [r4, #0]
 801d66a:	4628      	mov	r0, r5
 801d66c:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801d670:	3104      	adds	r1, #4
 801d672:	f7ff fac7 	bl	801cc04 <rcl_wait_set_add_service>
 801d676:	2800      	cmp	r0, #0
 801d678:	d1db      	bne.n	801d632 <rcl_action_wait_set_add_action_server+0x26>
 801d67a:	6821      	ldr	r1, [r4, #0]
 801d67c:	4628      	mov	r0, r5
 801d67e:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801d682:	3108      	adds	r1, #8
 801d684:	f7ff fabe 	bl	801cc04 <rcl_wait_set_add_service>
 801d688:	2800      	cmp	r0, #0
 801d68a:	d1d2      	bne.n	801d632 <rcl_action_wait_set_add_action_server+0x26>
 801d68c:	6821      	ldr	r1, [r4, #0]
 801d68e:	4628      	mov	r0, r5
 801d690:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 801d694:	3114      	adds	r1, #20
 801d696:	f7ff fa59 	bl	801cb4c <rcl_wait_set_add_timer>
 801d69a:	2800      	cmp	r0, #0
 801d69c:	d1c9      	bne.n	801d632 <rcl_action_wait_set_add_action_server+0x26>
 801d69e:	2e00      	cmp	r6, #0
 801d6a0:	d0c7      	beq.n	801d632 <rcl_action_wait_set_add_action_server+0x26>
 801d6a2:	6823      	ldr	r3, [r4, #0]
 801d6a4:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801d6a8:	6033      	str	r3, [r6, #0]
 801d6aa:	bd70      	pop	{r4, r5, r6, pc}
 801d6ac:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801d6b0:	4770      	bx	lr
 801d6b2:	bf00      	nop

0801d6b4 <rcl_action_server_wait_set_get_entities_ready>:
 801d6b4:	2800      	cmp	r0, #0
 801d6b6:	d067      	beq.n	801d788 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 801d6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d6bc:	460c      	mov	r4, r1
 801d6be:	b161      	cbz	r1, 801d6da <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d6c0:	4605      	mov	r5, r0
 801d6c2:	6808      	ldr	r0, [r1, #0]
 801d6c4:	b148      	cbz	r0, 801d6da <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d6c6:	4616      	mov	r6, r2
 801d6c8:	4698      	mov	r8, r3
 801d6ca:	f7fe f8cf 	bl	801b86c <rcl_service_is_valid>
 801d6ce:	b120      	cbz	r0, 801d6da <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d6d0:	6820      	ldr	r0, [r4, #0]
 801d6d2:	3004      	adds	r0, #4
 801d6d4:	f7fe f8ca 	bl	801b86c <rcl_service_is_valid>
 801d6d8:	b918      	cbnz	r0, 801d6e2 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801d6da:	f640 0098 	movw	r0, #2200	@ 0x898
 801d6de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d6e2:	6820      	ldr	r0, [r4, #0]
 801d6e4:	3008      	adds	r0, #8
 801d6e6:	f7fe f8c1 	bl	801b86c <rcl_service_is_valid>
 801d6ea:	2800      	cmp	r0, #0
 801d6ec:	d0f5      	beq.n	801d6da <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d6ee:	6820      	ldr	r0, [r4, #0]
 801d6f0:	300c      	adds	r0, #12
 801d6f2:	f7f6 fe47 	bl	8014384 <rcl_publisher_is_valid_except_context>
 801d6f6:	2800      	cmp	r0, #0
 801d6f8:	d0ef      	beq.n	801d6da <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d6fa:	6820      	ldr	r0, [r4, #0]
 801d6fc:	3010      	adds	r0, #16
 801d6fe:	f7f6 fe41 	bl	8014384 <rcl_publisher_is_valid_except_context>
 801d702:	2800      	cmp	r0, #0
 801d704:	d0e9      	beq.n	801d6da <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d706:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d70a:	2a00      	cmp	r2, #0
 801d70c:	bf18      	it	ne
 801d70e:	2b00      	cmpne	r3, #0
 801d710:	bf0c      	ite	eq
 801d712:	2101      	moveq	r1, #1
 801d714:	2100      	movne	r1, #0
 801d716:	f1b8 0f00 	cmp.w	r8, #0
 801d71a:	bf08      	it	eq
 801d71c:	f041 0101 	orreq.w	r1, r1, #1
 801d720:	bba9      	cbnz	r1, 801d78e <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d722:	b3a6      	cbz	r6, 801d78e <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d724:	6821      	ldr	r1, [r4, #0]
 801d726:	2000      	movs	r0, #0
 801d728:	692c      	ldr	r4, [r5, #16]
 801d72a:	f8d1 21e8 	ldr.w	r2, [r1, #488]	@ 0x1e8
 801d72e:	6a2f      	ldr	r7, [r5, #32]
 801d730:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d734:	f8d1 41dc 	ldr.w	r4, [r1, #476]	@ 0x1dc
 801d738:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 801d73c:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 801d740:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 801d744:	1a64      	subs	r4, r4, r1
 801d746:	f8d1 31e4 	ldr.w	r3, [r1, #484]	@ 0x1e4
 801d74a:	fab4 f484 	clz	r4, r4
 801d74e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801d752:	0964      	lsrs	r4, r4, #5
 801d754:	7034      	strb	r4, [r6, #0]
 801d756:	1d0c      	adds	r4, r1, #4
 801d758:	1b2c      	subs	r4, r5, r4
 801d75a:	fab4 f484 	clz	r4, r4
 801d75e:	0964      	lsrs	r4, r4, #5
 801d760:	f888 4000 	strb.w	r4, [r8]
 801d764:	f101 0408 	add.w	r4, r1, #8
 801d768:	1b1b      	subs	r3, r3, r4
 801d76a:	9c06      	ldr	r4, [sp, #24]
 801d76c:	fab3 f383 	clz	r3, r3
 801d770:	095b      	lsrs	r3, r3, #5
 801d772:	7023      	strb	r3, [r4, #0]
 801d774:	f101 0314 	add.w	r3, r1, #20
 801d778:	1ad3      	subs	r3, r2, r3
 801d77a:	9a07      	ldr	r2, [sp, #28]
 801d77c:	fab3 f383 	clz	r3, r3
 801d780:	095b      	lsrs	r3, r3, #5
 801d782:	7013      	strb	r3, [r2, #0]
 801d784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d788:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801d78c:	4770      	bx	lr
 801d78e:	200b      	movs	r0, #11
 801d790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d794 <_execute_event_handler>:
 801d794:	2002      	movs	r0, #2
 801d796:	4770      	bx	lr

0801d798 <_cancel_goal_event_handler>:
 801d798:	2003      	movs	r0, #3
 801d79a:	4770      	bx	lr

0801d79c <_succeed_event_handler>:
 801d79c:	2004      	movs	r0, #4
 801d79e:	4770      	bx	lr

0801d7a0 <_abort_event_handler>:
 801d7a0:	2006      	movs	r0, #6
 801d7a2:	4770      	bx	lr

0801d7a4 <_canceled_event_handler>:
 801d7a4:	2005      	movs	r0, #5
 801d7a6:	4770      	bx	lr

0801d7a8 <rcl_action_transition_goal_state>:
 801d7a8:	b2c2      	uxtb	r2, r0
 801d7aa:	2a06      	cmp	r2, #6
 801d7ac:	d810      	bhi.n	801d7d0 <rcl_action_transition_goal_state+0x28>
 801d7ae:	2904      	cmp	r1, #4
 801d7b0:	d80e      	bhi.n	801d7d0 <rcl_action_transition_goal_state+0x28>
 801d7b2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801d7b6:	b410      	push	{r4}
 801d7b8:	1853      	adds	r3, r2, r1
 801d7ba:	4c06      	ldr	r4, [pc, #24]	@ (801d7d4 <rcl_action_transition_goal_state+0x2c>)
 801d7bc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801d7c0:	b113      	cbz	r3, 801d7c8 <rcl_action_transition_goal_state+0x20>
 801d7c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d7c6:	4718      	bx	r3
 801d7c8:	2000      	movs	r0, #0
 801d7ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d7ce:	4770      	bx	lr
 801d7d0:	2000      	movs	r0, #0
 801d7d2:	4770      	bx	lr
 801d7d4:	08025430 	.word	0x08025430

0801d7d8 <rcl_action_get_zero_initialized_cancel_response>:
 801d7d8:	b510      	push	{r4, lr}
 801d7da:	4c07      	ldr	r4, [pc, #28]	@ (801d7f8 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801d7dc:	4686      	mov	lr, r0
 801d7de:	4684      	mov	ip, r0
 801d7e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d7e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d7e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d7e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d7ec:	6823      	ldr	r3, [r4, #0]
 801d7ee:	4670      	mov	r0, lr
 801d7f0:	f8cc 3000 	str.w	r3, [ip]
 801d7f4:	bd10      	pop	{r4, pc}
 801d7f6:	bf00      	nop
 801d7f8:	080254bc 	.word	0x080254bc

0801d7fc <rclc_action_send_result_request>:
 801d7fc:	b1d0      	cbz	r0, 801d834 <rclc_action_send_result_request+0x38>
 801d7fe:	4684      	mov	ip, r0
 801d800:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801d804:	b500      	push	{lr}
 801d806:	b087      	sub	sp, #28
 801d808:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801d80c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801d810:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801d814:	f10d 0e08 	add.w	lr, sp, #8
 801d818:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801d81c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801d820:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801d824:	a902      	add	r1, sp, #8
 801d826:	3010      	adds	r0, #16
 801d828:	f7ff fbca 	bl	801cfc0 <rcl_action_send_result_request>
 801d82c:	b920      	cbnz	r0, 801d838 <rclc_action_send_result_request+0x3c>
 801d82e:	b007      	add	sp, #28
 801d830:	f85d fb04 	ldr.w	pc, [sp], #4
 801d834:	200b      	movs	r0, #11
 801d836:	4770      	bx	lr
 801d838:	9001      	str	r0, [sp, #4]
 801d83a:	f7f7 fde9 	bl	8015410 <rcutils_reset_error>
 801d83e:	9801      	ldr	r0, [sp, #4]
 801d840:	b007      	add	sp, #28
 801d842:	f85d fb04 	ldr.w	pc, [sp], #4
 801d846:	bf00      	nop

0801d848 <rclc_action_take_goal_handle>:
 801d848:	b160      	cbz	r0, 801d864 <rclc_action_take_goal_handle+0x1c>
 801d84a:	6883      	ldr	r3, [r0, #8]
 801d84c:	b143      	cbz	r3, 801d860 <rclc_action_take_goal_handle+0x18>
 801d84e:	6819      	ldr	r1, [r3, #0]
 801d850:	2200      	movs	r2, #0
 801d852:	6081      	str	r1, [r0, #8]
 801d854:	721a      	strb	r2, [r3, #8]
 801d856:	68c1      	ldr	r1, [r0, #12]
 801d858:	621a      	str	r2, [r3, #32]
 801d85a:	849a      	strh	r2, [r3, #36]	@ 0x24
 801d85c:	6019      	str	r1, [r3, #0]
 801d85e:	60c3      	str	r3, [r0, #12]
 801d860:	4618      	mov	r0, r3
 801d862:	4770      	bx	lr
 801d864:	4603      	mov	r3, r0
 801d866:	e7fb      	b.n	801d860 <rclc_action_take_goal_handle+0x18>

0801d868 <rclc_action_remove_used_goal_handle>:
 801d868:	b180      	cbz	r0, 801d88c <rclc_action_remove_used_goal_handle+0x24>
 801d86a:	b179      	cbz	r1, 801d88c <rclc_action_remove_used_goal_handle+0x24>
 801d86c:	68c3      	ldr	r3, [r0, #12]
 801d86e:	4299      	cmp	r1, r3
 801d870:	d00d      	beq.n	801d88e <rclc_action_remove_used_goal_handle+0x26>
 801d872:	b12b      	cbz	r3, 801d880 <rclc_action_remove_used_goal_handle+0x18>
 801d874:	681a      	ldr	r2, [r3, #0]
 801d876:	4291      	cmp	r1, r2
 801d878:	d003      	beq.n	801d882 <rclc_action_remove_used_goal_handle+0x1a>
 801d87a:	4613      	mov	r3, r2
 801d87c:	2b00      	cmp	r3, #0
 801d87e:	d1f9      	bne.n	801d874 <rclc_action_remove_used_goal_handle+0xc>
 801d880:	4770      	bx	lr
 801d882:	680a      	ldr	r2, [r1, #0]
 801d884:	601a      	str	r2, [r3, #0]
 801d886:	6883      	ldr	r3, [r0, #8]
 801d888:	600b      	str	r3, [r1, #0]
 801d88a:	6081      	str	r1, [r0, #8]
 801d88c:	4770      	bx	lr
 801d88e:	680b      	ldr	r3, [r1, #0]
 801d890:	60c3      	str	r3, [r0, #12]
 801d892:	e7f8      	b.n	801d886 <rclc_action_remove_used_goal_handle+0x1e>

0801d894 <rclc_action_find_goal_handle_by_uuid>:
 801d894:	b538      	push	{r3, r4, r5, lr}
 801d896:	b181      	cbz	r1, 801d8ba <rclc_action_find_goal_handle_by_uuid+0x26>
 801d898:	b178      	cbz	r0, 801d8ba <rclc_action_find_goal_handle_by_uuid+0x26>
 801d89a:	68c4      	ldr	r4, [r0, #12]
 801d89c:	460d      	mov	r5, r1
 801d89e:	b914      	cbnz	r4, 801d8a6 <rclc_action_find_goal_handle_by_uuid+0x12>
 801d8a0:	e009      	b.n	801d8b6 <rclc_action_find_goal_handle_by_uuid+0x22>
 801d8a2:	6824      	ldr	r4, [r4, #0]
 801d8a4:	b13c      	cbz	r4, 801d8b6 <rclc_action_find_goal_handle_by_uuid+0x22>
 801d8a6:	f104 0009 	add.w	r0, r4, #9
 801d8aa:	2210      	movs	r2, #16
 801d8ac:	4629      	mov	r1, r5
 801d8ae:	f004 fc65 	bl	802217c <memcmp>
 801d8b2:	2800      	cmp	r0, #0
 801d8b4:	d1f5      	bne.n	801d8a2 <rclc_action_find_goal_handle_by_uuid+0xe>
 801d8b6:	4620      	mov	r0, r4
 801d8b8:	bd38      	pop	{r3, r4, r5, pc}
 801d8ba:	2400      	movs	r4, #0
 801d8bc:	4620      	mov	r0, r4
 801d8be:	bd38      	pop	{r3, r4, r5, pc}

0801d8c0 <rclc_action_find_first_handle_by_status>:
 801d8c0:	b140      	cbz	r0, 801d8d4 <rclc_action_find_first_handle_by_status+0x14>
 801d8c2:	68c0      	ldr	r0, [r0, #12]
 801d8c4:	b910      	cbnz	r0, 801d8cc <rclc_action_find_first_handle_by_status+0xc>
 801d8c6:	e005      	b.n	801d8d4 <rclc_action_find_first_handle_by_status+0x14>
 801d8c8:	6800      	ldr	r0, [r0, #0]
 801d8ca:	b118      	cbz	r0, 801d8d4 <rclc_action_find_first_handle_by_status+0x14>
 801d8cc:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801d8d0:	428b      	cmp	r3, r1
 801d8d2:	d1f9      	bne.n	801d8c8 <rclc_action_find_first_handle_by_status+0x8>
 801d8d4:	4770      	bx	lr
 801d8d6:	bf00      	nop

0801d8d8 <rclc_action_find_first_terminated_handle>:
 801d8d8:	b140      	cbz	r0, 801d8ec <rclc_action_find_first_terminated_handle+0x14>
 801d8da:	68c0      	ldr	r0, [r0, #12]
 801d8dc:	b910      	cbnz	r0, 801d8e4 <rclc_action_find_first_terminated_handle+0xc>
 801d8de:	e005      	b.n	801d8ec <rclc_action_find_first_terminated_handle+0x14>
 801d8e0:	6800      	ldr	r0, [r0, #0]
 801d8e2:	b118      	cbz	r0, 801d8ec <rclc_action_find_first_terminated_handle+0x14>
 801d8e4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801d8e8:	2b03      	cmp	r3, #3
 801d8ea:	ddf9      	ble.n	801d8e0 <rclc_action_find_first_terminated_handle+0x8>
 801d8ec:	4770      	bx	lr
 801d8ee:	bf00      	nop

0801d8f0 <rclc_action_find_handle_by_goal_request_sequence_number>:
 801d8f0:	b170      	cbz	r0, 801d910 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801d8f2:	68c0      	ldr	r0, [r0, #12]
 801d8f4:	b160      	cbz	r0, 801d910 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801d8f6:	b410      	push	{r4}
 801d8f8:	e001      	b.n	801d8fe <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801d8fa:	6800      	ldr	r0, [r0, #0]
 801d8fc:	b128      	cbz	r0, 801d90a <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801d8fe:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801d902:	4299      	cmp	r1, r3
 801d904:	bf08      	it	eq
 801d906:	4294      	cmpeq	r4, r2
 801d908:	d1f7      	bne.n	801d8fa <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801d90a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d90e:	4770      	bx	lr
 801d910:	4770      	bx	lr
 801d912:	bf00      	nop

0801d914 <rclc_action_find_handle_by_result_request_sequence_number>:
 801d914:	b170      	cbz	r0, 801d934 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801d916:	68c0      	ldr	r0, [r0, #12]
 801d918:	b160      	cbz	r0, 801d934 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801d91a:	b410      	push	{r4}
 801d91c:	e001      	b.n	801d922 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801d91e:	6800      	ldr	r0, [r0, #0]
 801d920:	b128      	cbz	r0, 801d92e <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801d922:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801d926:	4299      	cmp	r1, r3
 801d928:	bf08      	it	eq
 801d92a:	4294      	cmpeq	r4, r2
 801d92c:	d1f7      	bne.n	801d91e <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801d92e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d932:	4770      	bx	lr
 801d934:	4770      	bx	lr
 801d936:	bf00      	nop

0801d938 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801d938:	b170      	cbz	r0, 801d958 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801d93a:	68c0      	ldr	r0, [r0, #12]
 801d93c:	b160      	cbz	r0, 801d958 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801d93e:	b410      	push	{r4}
 801d940:	e001      	b.n	801d946 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801d942:	6800      	ldr	r0, [r0, #0]
 801d944:	b128      	cbz	r0, 801d952 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801d946:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801d94a:	4299      	cmp	r1, r3
 801d94c:	bf08      	it	eq
 801d94e:	4294      	cmpeq	r4, r2
 801d950:	d1f7      	bne.n	801d942 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801d952:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d956:	4770      	bx	lr
 801d958:	4770      	bx	lr
 801d95a:	bf00      	nop

0801d95c <rclc_action_find_first_handle_with_goal_response>:
 801d95c:	b140      	cbz	r0, 801d970 <rclc_action_find_first_handle_with_goal_response+0x14>
 801d95e:	68c0      	ldr	r0, [r0, #12]
 801d960:	b910      	cbnz	r0, 801d968 <rclc_action_find_first_handle_with_goal_response+0xc>
 801d962:	e005      	b.n	801d970 <rclc_action_find_first_handle_with_goal_response+0x14>
 801d964:	6800      	ldr	r0, [r0, #0]
 801d966:	b118      	cbz	r0, 801d970 <rclc_action_find_first_handle_with_goal_response+0x14>
 801d968:	f890 3020 	ldrb.w	r3, [r0, #32]
 801d96c:	2b00      	cmp	r3, #0
 801d96e:	d0f9      	beq.n	801d964 <rclc_action_find_first_handle_with_goal_response+0x8>
 801d970:	4770      	bx	lr
 801d972:	bf00      	nop

0801d974 <rclc_action_find_first_handle_with_result_response>:
 801d974:	b140      	cbz	r0, 801d988 <rclc_action_find_first_handle_with_result_response+0x14>
 801d976:	68c0      	ldr	r0, [r0, #12]
 801d978:	b910      	cbnz	r0, 801d980 <rclc_action_find_first_handle_with_result_response+0xc>
 801d97a:	e005      	b.n	801d988 <rclc_action_find_first_handle_with_result_response+0x14>
 801d97c:	6800      	ldr	r0, [r0, #0]
 801d97e:	b118      	cbz	r0, 801d988 <rclc_action_find_first_handle_with_result_response+0x14>
 801d980:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 801d984:	2b00      	cmp	r3, #0
 801d986:	d0f9      	beq.n	801d97c <rclc_action_find_first_handle_with_result_response+0x8>
 801d988:	4770      	bx	lr
 801d98a:	bf00      	nop

0801d98c <rclc_action_server_response_goal_request>:
 801d98c:	b198      	cbz	r0, 801d9b6 <rclc_action_server_response_goal_request+0x2a>
 801d98e:	2200      	movs	r2, #0
 801d990:	460b      	mov	r3, r1
 801d992:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801d996:	b510      	push	{r4, lr}
 801d998:	6844      	ldr	r4, [r0, #4]
 801d99a:	b086      	sub	sp, #24
 801d99c:	f104 0010 	add.w	r0, r4, #16
 801d9a0:	9205      	str	r2, [sp, #20]
 801d9a2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801d9a6:	aa03      	add	r2, sp, #12
 801d9a8:	f88d 300c 	strb.w	r3, [sp, #12]
 801d9ac:	f7ff fd3e 	bl	801d42c <rcl_action_send_goal_response>
 801d9b0:	b918      	cbnz	r0, 801d9ba <rclc_action_server_response_goal_request+0x2e>
 801d9b2:	b006      	add	sp, #24
 801d9b4:	bd10      	pop	{r4, pc}
 801d9b6:	200b      	movs	r0, #11
 801d9b8:	4770      	bx	lr
 801d9ba:	9001      	str	r0, [sp, #4]
 801d9bc:	f7f7 fd28 	bl	8015410 <rcutils_reset_error>
 801d9c0:	9801      	ldr	r0, [sp, #4]
 801d9c2:	b006      	add	sp, #24
 801d9c4:	bd10      	pop	{r4, pc}
 801d9c6:	bf00      	nop

0801d9c8 <rclc_action_server_goal_cancel_accept>:
 801d9c8:	b310      	cbz	r0, 801da10 <rclc_action_server_goal_cancel_accept+0x48>
 801d9ca:	b510      	push	{r4, lr}
 801d9cc:	b090      	sub	sp, #64	@ 0x40
 801d9ce:	4604      	mov	r4, r0
 801d9d0:	a806      	add	r0, sp, #24
 801d9d2:	f7ff ff01 	bl	801d7d8 <rcl_action_get_zero_initialized_cancel_response>
 801d9d6:	2300      	movs	r3, #0
 801d9d8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801d9dc:	46ec      	mov	ip, sp
 801d9de:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801d9e2:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801d9e6:	f88d 3018 	strb.w	r3, [sp, #24]
 801d9ea:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801d9ee:	f8cd d01c 	str.w	sp, [sp, #28]
 801d9f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d9f6:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801da18 <rclc_action_server_goal_cancel_accept+0x50>
 801d9fa:	6860      	ldr	r0, [r4, #4]
 801d9fc:	aa06      	add	r2, sp, #24
 801d9fe:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801da02:	3010      	adds	r0, #16
 801da04:	ed8d 7b08 	vstr	d7, [sp, #32]
 801da08:	f7ff fdc8 	bl	801d59c <rcl_action_send_cancel_response>
 801da0c:	b010      	add	sp, #64	@ 0x40
 801da0e:	bd10      	pop	{r4, pc}
 801da10:	200b      	movs	r0, #11
 801da12:	4770      	bx	lr
 801da14:	f3af 8000 	nop.w
 801da18:	00000001 	.word	0x00000001
 801da1c:	00000001 	.word	0x00000001

0801da20 <rclc_action_server_goal_cancel_reject>:
 801da20:	b082      	sub	sp, #8
 801da22:	b530      	push	{r4, r5, lr}
 801da24:	b08b      	sub	sp, #44	@ 0x2c
 801da26:	ac0e      	add	r4, sp, #56	@ 0x38
 801da28:	e884 000c 	stmia.w	r4, {r2, r3}
 801da2c:	b188      	cbz	r0, 801da52 <rclc_action_server_goal_cancel_reject+0x32>
 801da2e:	4604      	mov	r4, r0
 801da30:	a801      	add	r0, sp, #4
 801da32:	460d      	mov	r5, r1
 801da34:	f7ff fed0 	bl	801d7d8 <rcl_action_get_zero_initialized_cancel_response>
 801da38:	aa01      	add	r2, sp, #4
 801da3a:	a90e      	add	r1, sp, #56	@ 0x38
 801da3c:	f104 0010 	add.w	r0, r4, #16
 801da40:	f88d 5004 	strb.w	r5, [sp, #4]
 801da44:	f7ff fdaa 	bl	801d59c <rcl_action_send_cancel_response>
 801da48:	b00b      	add	sp, #44	@ 0x2c
 801da4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801da4e:	b002      	add	sp, #8
 801da50:	4770      	bx	lr
 801da52:	200b      	movs	r0, #11
 801da54:	b00b      	add	sp, #44	@ 0x2c
 801da56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801da5a:	b002      	add	sp, #8
 801da5c:	4770      	bx	lr
 801da5e:	bf00      	nop

0801da60 <__atomic_load_8>:
 801da60:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801da64:	4a16      	ldr	r2, [pc, #88]	@ (801dac0 <__atomic_load_8+0x60>)
 801da66:	4b17      	ldr	r3, [pc, #92]	@ (801dac4 <__atomic_load_8+0x64>)
 801da68:	f04f 0c01 	mov.w	ip, #1
 801da6c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 801da70:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801da74:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801da78:	fb02 f101 	mul.w	r1, r2, r1
 801da7c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801da80:	fba3 2301 	umull	r2, r3, r3, r1
 801da84:	091b      	lsrs	r3, r3, #4
 801da86:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801da8a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801da8e:	b4d0      	push	{r4, r6, r7}
 801da90:	1ac9      	subs	r1, r1, r3
 801da92:	4c0d      	ldr	r4, [pc, #52]	@ (801dac8 <__atomic_load_8+0x68>)
 801da94:	1862      	adds	r2, r4, r1
 801da96:	e8d2 3f4f 	ldrexb	r3, [r2]
 801da9a:	e8c2 cf46 	strexb	r6, ip, [r2]
 801da9e:	2e00      	cmp	r6, #0
 801daa0:	d1f9      	bne.n	801da96 <__atomic_load_8+0x36>
 801daa2:	b2db      	uxtb	r3, r3
 801daa4:	f3bf 8f5b 	dmb	ish
 801daa8:	2b00      	cmp	r3, #0
 801daaa:	d1f4      	bne.n	801da96 <__atomic_load_8+0x36>
 801daac:	e9d0 6700 	ldrd	r6, r7, [r0]
 801dab0:	f3bf 8f5b 	dmb	ish
 801dab4:	5463      	strb	r3, [r4, r1]
 801dab6:	4630      	mov	r0, r6
 801dab8:	4639      	mov	r1, r7
 801daba:	bcd0      	pop	{r4, r6, r7}
 801dabc:	4770      	bx	lr
 801dabe:	bf00      	nop
 801dac0:	27d4eb2d 	.word	0x27d4eb2d
 801dac4:	b21642c9 	.word	0xb21642c9
 801dac8:	24069358 	.word	0x24069358

0801dacc <__atomic_store_8>:
 801dacc:	b570      	push	{r4, r5, r6, lr}
 801dace:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 801dad2:	4916      	ldr	r1, [pc, #88]	@ (801db2c <__atomic_store_8+0x60>)
 801dad4:	4c16      	ldr	r4, [pc, #88]	@ (801db30 <__atomic_store_8+0x64>)
 801dad6:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 801dada:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801dade:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801dae2:	fb01 fe0e 	mul.w	lr, r1, lr
 801dae6:	4913      	ldr	r1, [pc, #76]	@ (801db34 <__atomic_store_8+0x68>)
 801dae8:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 801daec:	fba1 510e 	umull	r5, r1, r1, lr
 801daf0:	f04f 0501 	mov.w	r5, #1
 801daf4:	0909      	lsrs	r1, r1, #4
 801daf6:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801dafa:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 801dafe:	ebae 0e01 	sub.w	lr, lr, r1
 801db02:	eb04 0c0e 	add.w	ip, r4, lr
 801db06:	e8dc 1f4f 	ldrexb	r1, [ip]
 801db0a:	e8cc 5f46 	strexb	r6, r5, [ip]
 801db0e:	2e00      	cmp	r6, #0
 801db10:	d1f9      	bne.n	801db06 <__atomic_store_8+0x3a>
 801db12:	b2c9      	uxtb	r1, r1
 801db14:	f3bf 8f5b 	dmb	ish
 801db18:	2900      	cmp	r1, #0
 801db1a:	d1f4      	bne.n	801db06 <__atomic_store_8+0x3a>
 801db1c:	e9c0 2300 	strd	r2, r3, [r0]
 801db20:	f3bf 8f5b 	dmb	ish
 801db24:	f804 100e 	strb.w	r1, [r4, lr]
 801db28:	bd70      	pop	{r4, r5, r6, pc}
 801db2a:	bf00      	nop
 801db2c:	27d4eb2d 	.word	0x27d4eb2d
 801db30:	24069358 	.word	0x24069358
 801db34:	b21642c9 	.word	0xb21642c9

0801db38 <__atomic_exchange_8>:
 801db38:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801db3c:	4917      	ldr	r1, [pc, #92]	@ (801db9c <__atomic_exchange_8+0x64>)
 801db3e:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 801db42:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801db46:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801db4a:	fb01 fc0c 	mul.w	ip, r1, ip
 801db4e:	4914      	ldr	r1, [pc, #80]	@ (801dba0 <__atomic_exchange_8+0x68>)
 801db50:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801db54:	b570      	push	{r4, r5, r6, lr}
 801db56:	4686      	mov	lr, r0
 801db58:	fba1 010c 	umull	r0, r1, r1, ip
 801db5c:	4d11      	ldr	r5, [pc, #68]	@ (801dba4 <__atomic_exchange_8+0x6c>)
 801db5e:	f04f 0001 	mov.w	r0, #1
 801db62:	0909      	lsrs	r1, r1, #4
 801db64:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801db68:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 801db6c:	ebac 0c01 	sub.w	ip, ip, r1
 801db70:	eb05 010c 	add.w	r1, r5, ip
 801db74:	e8d1 4f4f 	ldrexb	r4, [r1]
 801db78:	e8c1 0f46 	strexb	r6, r0, [r1]
 801db7c:	2e00      	cmp	r6, #0
 801db7e:	d1f9      	bne.n	801db74 <__atomic_exchange_8+0x3c>
 801db80:	b2e4      	uxtb	r4, r4
 801db82:	f3bf 8f5b 	dmb	ish
 801db86:	2c00      	cmp	r4, #0
 801db88:	d1f4      	bne.n	801db74 <__atomic_exchange_8+0x3c>
 801db8a:	e9de 0100 	ldrd	r0, r1, [lr]
 801db8e:	e9ce 2300 	strd	r2, r3, [lr]
 801db92:	f3bf 8f5b 	dmb	ish
 801db96:	f805 400c 	strb.w	r4, [r5, ip]
 801db9a:	bd70      	pop	{r4, r5, r6, pc}
 801db9c:	27d4eb2d 	.word	0x27d4eb2d
 801dba0:	b21642c9 	.word	0xb21642c9
 801dba4:	24069358 	.word	0x24069358

0801dba8 <rcutils_get_env>:
 801dba8:	b168      	cbz	r0, 801dbc6 <rcutils_get_env+0x1e>
 801dbaa:	b510      	push	{r4, lr}
 801dbac:	460c      	mov	r4, r1
 801dbae:	b129      	cbz	r1, 801dbbc <rcutils_get_env+0x14>
 801dbb0:	f003 fe64 	bl	802187c <getenv>
 801dbb4:	b120      	cbz	r0, 801dbc0 <rcutils_get_env+0x18>
 801dbb6:	6020      	str	r0, [r4, #0]
 801dbb8:	2000      	movs	r0, #0
 801dbba:	bd10      	pop	{r4, pc}
 801dbbc:	4803      	ldr	r0, [pc, #12]	@ (801dbcc <rcutils_get_env+0x24>)
 801dbbe:	bd10      	pop	{r4, pc}
 801dbc0:	4b03      	ldr	r3, [pc, #12]	@ (801dbd0 <rcutils_get_env+0x28>)
 801dbc2:	6023      	str	r3, [r4, #0]
 801dbc4:	bd10      	pop	{r4, pc}
 801dbc6:	4803      	ldr	r0, [pc, #12]	@ (801dbd4 <rcutils_get_env+0x2c>)
 801dbc8:	4770      	bx	lr
 801dbca:	bf00      	nop
 801dbcc:	080254fc 	.word	0x080254fc
 801dbd0:	08025984 	.word	0x08025984
 801dbd4:	080254e0 	.word	0x080254e0

0801dbd8 <rcutils_is_directory>:
 801dbd8:	2000      	movs	r0, #0
 801dbda:	4770      	bx	lr

0801dbdc <rcutils_join_path>:
 801dbdc:	b082      	sub	sp, #8
 801dbde:	2000      	movs	r0, #0
 801dbe0:	e88d 000c 	stmia.w	sp, {r2, r3}
 801dbe4:	b002      	add	sp, #8
 801dbe6:	4770      	bx	lr

0801dbe8 <rcutils_to_native_path>:
 801dbe8:	b084      	sub	sp, #16
 801dbea:	2000      	movs	r0, #0
 801dbec:	f10d 0c04 	add.w	ip, sp, #4
 801dbf0:	b004      	add	sp, #16
 801dbf2:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801dbf6:	4770      	bx	lr

0801dbf8 <rcutils_format_string_limit>:
 801dbf8:	b40f      	push	{r0, r1, r2, r3}
 801dbfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dbfc:	b083      	sub	sp, #12
 801dbfe:	ac08      	add	r4, sp, #32
 801dc00:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801dc02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801dc06:	b326      	cbz	r6, 801dc52 <rcutils_format_string_limit+0x5a>
 801dc08:	a808      	add	r0, sp, #32
 801dc0a:	f7f7 fbdd 	bl	80153c8 <rcutils_allocator_is_valid>
 801dc0e:	b300      	cbz	r0, 801dc52 <rcutils_format_string_limit+0x5a>
 801dc10:	2100      	movs	r1, #0
 801dc12:	ab0f      	add	r3, sp, #60	@ 0x3c
 801dc14:	4632      	mov	r2, r6
 801dc16:	4608      	mov	r0, r1
 801dc18:	e9cd 3300 	strd	r3, r3, [sp]
 801dc1c:	f000 f906 	bl	801de2c <rcutils_vsnprintf>
 801dc20:	1c43      	adds	r3, r0, #1
 801dc22:	4605      	mov	r5, r0
 801dc24:	d015      	beq.n	801dc52 <rcutils_format_string_limit+0x5a>
 801dc26:	1c47      	adds	r7, r0, #1
 801dc28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dc2a:	429f      	cmp	r7, r3
 801dc2c:	d901      	bls.n	801dc32 <rcutils_format_string_limit+0x3a>
 801dc2e:	1e5d      	subs	r5, r3, #1
 801dc30:	461f      	mov	r7, r3
 801dc32:	9b08      	ldr	r3, [sp, #32]
 801dc34:	4638      	mov	r0, r7
 801dc36:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801dc38:	4798      	blx	r3
 801dc3a:	4604      	mov	r4, r0
 801dc3c:	b148      	cbz	r0, 801dc52 <rcutils_format_string_limit+0x5a>
 801dc3e:	4632      	mov	r2, r6
 801dc40:	4639      	mov	r1, r7
 801dc42:	9b01      	ldr	r3, [sp, #4]
 801dc44:	f000 f8f2 	bl	801de2c <rcutils_vsnprintf>
 801dc48:	2800      	cmp	r0, #0
 801dc4a:	db09      	blt.n	801dc60 <rcutils_format_string_limit+0x68>
 801dc4c:	2300      	movs	r3, #0
 801dc4e:	5563      	strb	r3, [r4, r5]
 801dc50:	e000      	b.n	801dc54 <rcutils_format_string_limit+0x5c>
 801dc52:	2400      	movs	r4, #0
 801dc54:	4620      	mov	r0, r4
 801dc56:	b003      	add	sp, #12
 801dc58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801dc5c:	b004      	add	sp, #16
 801dc5e:	4770      	bx	lr
 801dc60:	4620      	mov	r0, r4
 801dc62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dc64:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801dc66:	2400      	movs	r4, #0
 801dc68:	4798      	blx	r3
 801dc6a:	e7f3      	b.n	801dc54 <rcutils_format_string_limit+0x5c>

0801dc6c <rcutils_repl_str>:
 801dc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc70:	ed2d 8b02 	vpush	{d8}
 801dc74:	b087      	sub	sp, #28
 801dc76:	2600      	movs	r6, #0
 801dc78:	4680      	mov	r8, r0
 801dc7a:	468a      	mov	sl, r1
 801dc7c:	9000      	str	r0, [sp, #0]
 801dc7e:	4608      	mov	r0, r1
 801dc80:	ee08 2a10 	vmov	s16, r2
 801dc84:	4699      	mov	r9, r3
 801dc86:	2510      	movs	r5, #16
 801dc88:	f7e2 fb34 	bl	80002f4 <strlen>
 801dc8c:	4637      	mov	r7, r6
 801dc8e:	46b3      	mov	fp, r6
 801dc90:	9001      	str	r0, [sp, #4]
 801dc92:	e01e      	b.n	801dcd2 <rcutils_repl_str+0x66>
 801dc94:	f10b 0b01 	add.w	fp, fp, #1
 801dc98:	9b01      	ldr	r3, [sp, #4]
 801dc9a:	455e      	cmp	r6, fp
 801dc9c:	eb04 0803 	add.w	r8, r4, r3
 801dca0:	d211      	bcs.n	801dcc6 <rcutils_repl_str+0x5a>
 801dca2:	442e      	add	r6, r5
 801dca4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801dca8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801dcac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dcb0:	00b1      	lsls	r1, r6, #2
 801dcb2:	4798      	blx	r3
 801dcb4:	2800      	cmp	r0, #0
 801dcb6:	f000 8088 	beq.w	801ddca <rcutils_repl_str+0x15e>
 801dcba:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 801dcbe:	4607      	mov	r7, r0
 801dcc0:	bf28      	it	cs
 801dcc2:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 801dcc6:	9a00      	ldr	r2, [sp, #0]
 801dcc8:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 801dccc:	1aa4      	subs	r4, r4, r2
 801dcce:	f843 4c04 	str.w	r4, [r3, #-4]
 801dcd2:	4651      	mov	r1, sl
 801dcd4:	4640      	mov	r0, r8
 801dcd6:	f004 faa2 	bl	802221e <strstr>
 801dcda:	4604      	mov	r4, r0
 801dcdc:	4638      	mov	r0, r7
 801dcde:	2c00      	cmp	r4, #0
 801dce0:	d1d8      	bne.n	801dc94 <rcutils_repl_str+0x28>
 801dce2:	4640      	mov	r0, r8
 801dce4:	f7e2 fb06 	bl	80002f4 <strlen>
 801dce8:	9b00      	ldr	r3, [sp, #0]
 801dcea:	eba8 0803 	sub.w	r8, r8, r3
 801dcee:	eb08 0400 	add.w	r4, r8, r0
 801dcf2:	9402      	str	r4, [sp, #8]
 801dcf4:	f1bb 0f00 	cmp.w	fp, #0
 801dcf8:	d045      	beq.n	801dd86 <rcutils_repl_str+0x11a>
 801dcfa:	ee18 0a10 	vmov	r0, s16
 801dcfe:	f7e2 faf9 	bl	80002f4 <strlen>
 801dd02:	9a01      	ldr	r2, [sp, #4]
 801dd04:	4606      	mov	r6, r0
 801dd06:	f8d9 3000 	ldr.w	r3, [r9]
 801dd0a:	1a82      	subs	r2, r0, r2
 801dd0c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801dd10:	fb0b 4202 	mla	r2, fp, r2, r4
 801dd14:	1c50      	adds	r0, r2, #1
 801dd16:	9205      	str	r2, [sp, #20]
 801dd18:	4798      	blx	r3
 801dd1a:	4682      	mov	sl, r0
 801dd1c:	2800      	cmp	r0, #0
 801dd1e:	d054      	beq.n	801ddca <rcutils_repl_str+0x15e>
 801dd20:	683a      	ldr	r2, [r7, #0]
 801dd22:	463d      	mov	r5, r7
 801dd24:	9900      	ldr	r1, [sp, #0]
 801dd26:	2401      	movs	r4, #1
 801dd28:	f004 fb71 	bl	802240e <memcpy>
 801dd2c:	683b      	ldr	r3, [r7, #0]
 801dd2e:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 801dd32:	eb0a 0803 	add.w	r8, sl, r3
 801dd36:	ee18 7a10 	vmov	r7, s16
 801dd3a:	f8dd a000 	ldr.w	sl, [sp]
 801dd3e:	f8cd 9000 	str.w	r9, [sp]
 801dd42:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801dd46:	4632      	mov	r2, r6
 801dd48:	4639      	mov	r1, r7
 801dd4a:	4640      	mov	r0, r8
 801dd4c:	44b0      	add	r8, r6
 801dd4e:	f004 fb5e 	bl	802240e <memcpy>
 801dd52:	f855 2b04 	ldr.w	r2, [r5], #4
 801dd56:	45a3      	cmp	fp, r4
 801dd58:	444a      	add	r2, r9
 801dd5a:	eb0a 0102 	add.w	r1, sl, r2
 801dd5e:	d02a      	beq.n	801ddb6 <rcutils_repl_str+0x14a>
 801dd60:	6828      	ldr	r0, [r5, #0]
 801dd62:	1a82      	subs	r2, r0, r2
 801dd64:	4640      	mov	r0, r8
 801dd66:	4490      	add	r8, r2
 801dd68:	f004 fb51 	bl	802240e <memcpy>
 801dd6c:	1c62      	adds	r2, r4, #1
 801dd6e:	45a3      	cmp	fp, r4
 801dd70:	4614      	mov	r4, r2
 801dd72:	d8e8      	bhi.n	801dd46 <rcutils_repl_str+0xda>
 801dd74:	f8dd 9000 	ldr.w	r9, [sp]
 801dd78:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801dd7c:	2300      	movs	r3, #0
 801dd7e:	9a05      	ldr	r2, [sp, #20]
 801dd80:	f80a 3002 	strb.w	r3, [sl, r2]
 801dd84:	e00b      	b.n	801dd9e <rcutils_repl_str+0x132>
 801dd86:	4620      	mov	r0, r4
 801dd88:	f8d9 3000 	ldr.w	r3, [r9]
 801dd8c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801dd90:	3001      	adds	r0, #1
 801dd92:	4798      	blx	r3
 801dd94:	4682      	mov	sl, r0
 801dd96:	b110      	cbz	r0, 801dd9e <rcutils_repl_str+0x132>
 801dd98:	9900      	ldr	r1, [sp, #0]
 801dd9a:	f004 fb30 	bl	80223fe <strcpy>
 801dd9e:	4638      	mov	r0, r7
 801dda0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801dda4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801dda8:	4798      	blx	r3
 801ddaa:	4650      	mov	r0, sl
 801ddac:	b007      	add	sp, #28
 801ddae:	ecbd 8b02 	vpop	{d8}
 801ddb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddb6:	9b02      	ldr	r3, [sp, #8]
 801ddb8:	4640      	mov	r0, r8
 801ddba:	f8dd 9000 	ldr.w	r9, [sp]
 801ddbe:	1a9a      	subs	r2, r3, r2
 801ddc0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801ddc4:	f004 fb23 	bl	802240e <memcpy>
 801ddc8:	e7d8      	b.n	801dd7c <rcutils_repl_str+0x110>
 801ddca:	f04f 0a00 	mov.w	sl, #0
 801ddce:	e7e6      	b.n	801dd9e <rcutils_repl_str+0x132>

0801ddd0 <rcutils_snprintf>:
 801ddd0:	b40c      	push	{r2, r3}
 801ddd2:	b530      	push	{r4, r5, lr}
 801ddd4:	b083      	sub	sp, #12
 801ddd6:	ab06      	add	r3, sp, #24
 801ddd8:	f853 2b04 	ldr.w	r2, [r3], #4
 801dddc:	9301      	str	r3, [sp, #4]
 801ddde:	b1e2      	cbz	r2, 801de1a <rcutils_snprintf+0x4a>
 801dde0:	fab0 f480 	clz	r4, r0
 801dde4:	fab1 f581 	clz	r5, r1
 801dde8:	ea50 0c01 	orrs.w	ip, r0, r1
 801ddec:	ea4f 1454 	mov.w	r4, r4, lsr #5
 801ddf0:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801ddf4:	d008      	beq.n	801de08 <rcutils_snprintf+0x38>
 801ddf6:	b984      	cbnz	r4, 801de1a <rcutils_snprintf+0x4a>
 801ddf8:	b97d      	cbnz	r5, 801de1a <rcutils_snprintf+0x4a>
 801ddfa:	f004 f91d 	bl	8022038 <vsniprintf>
 801ddfe:	b003      	add	sp, #12
 801de00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801de04:	b002      	add	sp, #8
 801de06:	4770      	bx	lr
 801de08:	4661      	mov	r1, ip
 801de0a:	4660      	mov	r0, ip
 801de0c:	f004 f914 	bl	8022038 <vsniprintf>
 801de10:	b003      	add	sp, #12
 801de12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801de16:	b002      	add	sp, #8
 801de18:	4770      	bx	lr
 801de1a:	f004 fac3 	bl	80223a4 <__errno>
 801de1e:	2216      	movs	r2, #22
 801de20:	4603      	mov	r3, r0
 801de22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801de26:	601a      	str	r2, [r3, #0]
 801de28:	e7e9      	b.n	801ddfe <rcutils_snprintf+0x2e>
 801de2a:	bf00      	nop

0801de2c <rcutils_vsnprintf>:
 801de2c:	b570      	push	{r4, r5, r6, lr}
 801de2e:	b1b2      	cbz	r2, 801de5e <rcutils_vsnprintf+0x32>
 801de30:	fab0 f480 	clz	r4, r0
 801de34:	fab1 f581 	clz	r5, r1
 801de38:	ea50 0c01 	orrs.w	ip, r0, r1
 801de3c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 801de40:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801de44:	d005      	beq.n	801de52 <rcutils_vsnprintf+0x26>
 801de46:	b954      	cbnz	r4, 801de5e <rcutils_vsnprintf+0x32>
 801de48:	b94d      	cbnz	r5, 801de5e <rcutils_vsnprintf+0x32>
 801de4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801de4e:	f004 b8f3 	b.w	8022038 <vsniprintf>
 801de52:	4661      	mov	r1, ip
 801de54:	4660      	mov	r0, ip
 801de56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801de5a:	f004 b8ed 	b.w	8022038 <vsniprintf>
 801de5e:	f004 faa1 	bl	80223a4 <__errno>
 801de62:	2316      	movs	r3, #22
 801de64:	6003      	str	r3, [r0, #0]
 801de66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801de6a:	bd70      	pop	{r4, r5, r6, pc}

0801de6c <rcutils_strdup>:
 801de6c:	b084      	sub	sp, #16
 801de6e:	b570      	push	{r4, r5, r6, lr}
 801de70:	b082      	sub	sp, #8
 801de72:	4605      	mov	r5, r0
 801de74:	ac07      	add	r4, sp, #28
 801de76:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 801de7a:	b1b0      	cbz	r0, 801deaa <rcutils_strdup+0x3e>
 801de7c:	f7e2 fa3a 	bl	80002f4 <strlen>
 801de80:	1c42      	adds	r2, r0, #1
 801de82:	9b07      	ldr	r3, [sp, #28]
 801de84:	4606      	mov	r6, r0
 801de86:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801de88:	4610      	mov	r0, r2
 801de8a:	9201      	str	r2, [sp, #4]
 801de8c:	4798      	blx	r3
 801de8e:	4604      	mov	r4, r0
 801de90:	b128      	cbz	r0, 801de9e <rcutils_strdup+0x32>
 801de92:	9a01      	ldr	r2, [sp, #4]
 801de94:	4629      	mov	r1, r5
 801de96:	f004 faba 	bl	802240e <memcpy>
 801de9a:	2300      	movs	r3, #0
 801de9c:	55a3      	strb	r3, [r4, r6]
 801de9e:	4620      	mov	r0, r4
 801dea0:	b002      	add	sp, #8
 801dea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dea6:	b004      	add	sp, #16
 801dea8:	4770      	bx	lr
 801deaa:	4604      	mov	r4, r0
 801deac:	e7f7      	b.n	801de9e <rcutils_strdup+0x32>
 801deae:	bf00      	nop

0801deb0 <rcutils_strndup>:
 801deb0:	b082      	sub	sp, #8
 801deb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801deb4:	ac06      	add	r4, sp, #24
 801deb6:	4605      	mov	r5, r0
 801deb8:	e884 000c 	stmia.w	r4, {r2, r3}
 801debc:	b188      	cbz	r0, 801dee2 <rcutils_strndup+0x32>
 801debe:	1c4f      	adds	r7, r1, #1
 801dec0:	460e      	mov	r6, r1
 801dec2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dec4:	4638      	mov	r0, r7
 801dec6:	4790      	blx	r2
 801dec8:	4604      	mov	r4, r0
 801deca:	b128      	cbz	r0, 801ded8 <rcutils_strndup+0x28>
 801decc:	463a      	mov	r2, r7
 801dece:	4629      	mov	r1, r5
 801ded0:	f004 fa9d 	bl	802240e <memcpy>
 801ded4:	2300      	movs	r3, #0
 801ded6:	55a3      	strb	r3, [r4, r6]
 801ded8:	4620      	mov	r0, r4
 801deda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801dede:	b002      	add	sp, #8
 801dee0:	4770      	bx	lr
 801dee2:	4604      	mov	r4, r0
 801dee4:	e7f8      	b.n	801ded8 <rcutils_strndup+0x28>
 801dee6:	bf00      	nop

0801dee8 <rcutils_get_zero_initialized_string_map>:
 801dee8:	2000      	movs	r0, #0
 801deea:	4b01      	ldr	r3, [pc, #4]	@ (801def0 <rcutils_get_zero_initialized_string_map+0x8>)
 801deec:	6018      	str	r0, [r3, #0]
 801deee:	4770      	bx	lr
 801def0:	24069370 	.word	0x24069370

0801def4 <rcutils_string_map_reserve>:
 801def4:	2800      	cmp	r0, #0
 801def6:	d05e      	beq.n	801dfb6 <rcutils_string_map_reserve+0xc2>
 801def8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801defc:	460c      	mov	r4, r1
 801defe:	6801      	ldr	r1, [r0, #0]
 801df00:	b082      	sub	sp, #8
 801df02:	4605      	mov	r5, r0
 801df04:	b129      	cbz	r1, 801df12 <rcutils_string_map_reserve+0x1e>
 801df06:	68cb      	ldr	r3, [r1, #12]
 801df08:	42a3      	cmp	r3, r4
 801df0a:	d906      	bls.n	801df1a <rcutils_string_map_reserve+0x26>
 801df0c:	461c      	mov	r4, r3
 801df0e:	2900      	cmp	r1, #0
 801df10:	d1f9      	bne.n	801df06 <rcutils_string_map_reserve+0x12>
 801df12:	201f      	movs	r0, #31
 801df14:	b002      	add	sp, #8
 801df16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df1a:	688b      	ldr	r3, [r1, #8]
 801df1c:	42a3      	cmp	r3, r4
 801df1e:	d046      	beq.n	801dfae <rcutils_string_map_reserve+0xba>
 801df20:	6a0e      	ldr	r6, [r1, #32]
 801df22:	2c00      	cmp	r4, #0
 801df24:	d033      	beq.n	801df8e <rcutils_string_map_reserve+0x9a>
 801df26:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801df2a:	d242      	bcs.n	801dfb2 <rcutils_string_map_reserve+0xbe>
 801df2c:	00a7      	lsls	r7, r4, #2
 801df2e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801df32:	6808      	ldr	r0, [r1, #0]
 801df34:	4632      	mov	r2, r6
 801df36:	4639      	mov	r1, r7
 801df38:	47c0      	blx	r8
 801df3a:	2800      	cmp	r0, #0
 801df3c:	d039      	beq.n	801dfb2 <rcutils_string_map_reserve+0xbe>
 801df3e:	682b      	ldr	r3, [r5, #0]
 801df40:	4632      	mov	r2, r6
 801df42:	4639      	mov	r1, r7
 801df44:	6018      	str	r0, [r3, #0]
 801df46:	6858      	ldr	r0, [r3, #4]
 801df48:	47c0      	blx	r8
 801df4a:	2800      	cmp	r0, #0
 801df4c:	d031      	beq.n	801dfb2 <rcutils_string_map_reserve+0xbe>
 801df4e:	682d      	ldr	r5, [r5, #0]
 801df50:	68ab      	ldr	r3, [r5, #8]
 801df52:	6068      	str	r0, [r5, #4]
 801df54:	42a3      	cmp	r3, r4
 801df56:	d225      	bcs.n	801dfa4 <rcutils_string_map_reserve+0xb0>
 801df58:	682a      	ldr	r2, [r5, #0]
 801df5a:	eb00 0c07 	add.w	ip, r0, r7
 801df5e:	0099      	lsls	r1, r3, #2
 801df60:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801df64:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801df68:	45e6      	cmp	lr, ip
 801df6a:	d203      	bcs.n	801df74 <rcutils_string_map_reserve+0x80>
 801df6c:	eb02 0c07 	add.w	ip, r2, r7
 801df70:	4566      	cmp	r6, ip
 801df72:	d322      	bcc.n	801dfba <rcutils_string_map_reserve+0xc6>
 801df74:	1ae3      	subs	r3, r4, r3
 801df76:	4670      	mov	r0, lr
 801df78:	2100      	movs	r1, #0
 801df7a:	009a      	lsls	r2, r3, #2
 801df7c:	9201      	str	r2, [sp, #4]
 801df7e:	f004 f927 	bl	80221d0 <memset>
 801df82:	9a01      	ldr	r2, [sp, #4]
 801df84:	2100      	movs	r1, #0
 801df86:	4630      	mov	r0, r6
 801df88:	f004 f922 	bl	80221d0 <memset>
 801df8c:	e00a      	b.n	801dfa4 <rcutils_string_map_reserve+0xb0>
 801df8e:	694f      	ldr	r7, [r1, #20]
 801df90:	6808      	ldr	r0, [r1, #0]
 801df92:	4631      	mov	r1, r6
 801df94:	47b8      	blx	r7
 801df96:	682b      	ldr	r3, [r5, #0]
 801df98:	4631      	mov	r1, r6
 801df9a:	6858      	ldr	r0, [r3, #4]
 801df9c:	601c      	str	r4, [r3, #0]
 801df9e:	47b8      	blx	r7
 801dfa0:	682d      	ldr	r5, [r5, #0]
 801dfa2:	606c      	str	r4, [r5, #4]
 801dfa4:	2000      	movs	r0, #0
 801dfa6:	60ac      	str	r4, [r5, #8]
 801dfa8:	b002      	add	sp, #8
 801dfaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dfae:	2000      	movs	r0, #0
 801dfb0:	e7b0      	b.n	801df14 <rcutils_string_map_reserve+0x20>
 801dfb2:	200a      	movs	r0, #10
 801dfb4:	e7ae      	b.n	801df14 <rcutils_string_map_reserve+0x20>
 801dfb6:	200b      	movs	r0, #11
 801dfb8:	4770      	bx	lr
 801dfba:	1f0b      	subs	r3, r1, #4
 801dfbc:	4418      	add	r0, r3
 801dfbe:	4413      	add	r3, r2
 801dfc0:	3a04      	subs	r2, #4
 801dfc2:	4417      	add	r7, r2
 801dfc4:	2200      	movs	r2, #0
 801dfc6:	f843 2f04 	str.w	r2, [r3, #4]!
 801dfca:	42bb      	cmp	r3, r7
 801dfcc:	f840 2f04 	str.w	r2, [r0, #4]!
 801dfd0:	d1f9      	bne.n	801dfc6 <rcutils_string_map_reserve+0xd2>
 801dfd2:	e7e7      	b.n	801dfa4 <rcutils_string_map_reserve+0xb0>

0801dfd4 <rcutils_string_map_init>:
 801dfd4:	b082      	sub	sp, #8
 801dfd6:	b570      	push	{r4, r5, r6, lr}
 801dfd8:	ac04      	add	r4, sp, #16
 801dfda:	e884 000c 	stmia.w	r4, {r2, r3}
 801dfde:	b380      	cbz	r0, 801e042 <rcutils_string_map_init+0x6e>
 801dfe0:	6806      	ldr	r6, [r0, #0]
 801dfe2:	4604      	mov	r4, r0
 801dfe4:	b12e      	cbz	r6, 801dff2 <rcutils_string_map_init+0x1e>
 801dfe6:	251e      	movs	r5, #30
 801dfe8:	4628      	mov	r0, r5
 801dfea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dfee:	b002      	add	sp, #8
 801dff0:	4770      	bx	lr
 801dff2:	a804      	add	r0, sp, #16
 801dff4:	460d      	mov	r5, r1
 801dff6:	f7f7 f9e7 	bl	80153c8 <rcutils_allocator_is_valid>
 801dffa:	b310      	cbz	r0, 801e042 <rcutils_string_map_init+0x6e>
 801dffc:	9b04      	ldr	r3, [sp, #16]
 801dffe:	2024      	movs	r0, #36	@ 0x24
 801e000:	9908      	ldr	r1, [sp, #32]
 801e002:	4798      	blx	r3
 801e004:	6020      	str	r0, [r4, #0]
 801e006:	b310      	cbz	r0, 801e04e <rcutils_string_map_init+0x7a>
 801e008:	f10d 0e10 	add.w	lr, sp, #16
 801e00c:	f100 0c10 	add.w	ip, r0, #16
 801e010:	e9c0 6600 	strd	r6, r6, [r0]
 801e014:	e9c0 6602 	strd	r6, r6, [r0, #8]
 801e018:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e01c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e020:	f8de 3000 	ldr.w	r3, [lr]
 801e024:	4629      	mov	r1, r5
 801e026:	4620      	mov	r0, r4
 801e028:	f8cc 3000 	str.w	r3, [ip]
 801e02c:	f7ff ff62 	bl	801def4 <rcutils_string_map_reserve>
 801e030:	4605      	mov	r5, r0
 801e032:	2800      	cmp	r0, #0
 801e034:	d0d8      	beq.n	801dfe8 <rcutils_string_map_init+0x14>
 801e036:	9b05      	ldr	r3, [sp, #20]
 801e038:	9908      	ldr	r1, [sp, #32]
 801e03a:	6820      	ldr	r0, [r4, #0]
 801e03c:	4798      	blx	r3
 801e03e:	6026      	str	r6, [r4, #0]
 801e040:	e7d2      	b.n	801dfe8 <rcutils_string_map_init+0x14>
 801e042:	250b      	movs	r5, #11
 801e044:	4628      	mov	r0, r5
 801e046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e04a:	b002      	add	sp, #8
 801e04c:	4770      	bx	lr
 801e04e:	250a      	movs	r5, #10
 801e050:	e7ca      	b.n	801dfe8 <rcutils_string_map_init+0x14>
 801e052:	bf00      	nop

0801e054 <rcutils_string_map_fini>:
 801e054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e058:	b082      	sub	sp, #8
 801e05a:	2800      	cmp	r0, #0
 801e05c:	d03a      	beq.n	801e0d4 <rcutils_string_map_fini+0x80>
 801e05e:	6804      	ldr	r4, [r0, #0]
 801e060:	4606      	mov	r6, r0
 801e062:	2c00      	cmp	r4, #0
 801e064:	d032      	beq.n	801e0cc <rcutils_string_map_fini+0x78>
 801e066:	68a3      	ldr	r3, [r4, #8]
 801e068:	b32b      	cbz	r3, 801e0b6 <rcutils_string_map_fini+0x62>
 801e06a:	2500      	movs	r5, #0
 801e06c:	6822      	ldr	r2, [r4, #0]
 801e06e:	462f      	mov	r7, r5
 801e070:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801e074:	b1e0      	cbz	r0, 801e0b0 <rcutils_string_map_fini+0x5c>
 801e076:	6a21      	ldr	r1, [r4, #32]
 801e078:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801e07c:	9101      	str	r1, [sp, #4]
 801e07e:	47c0      	blx	r8
 801e080:	9901      	ldr	r1, [sp, #4]
 801e082:	e9d4 3200 	ldrd	r3, r2, [r4]
 801e086:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 801e08a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801e08e:	47c0      	blx	r8
 801e090:	68e3      	ldr	r3, [r4, #12]
 801e092:	6862      	ldr	r2, [r4, #4]
 801e094:	3b01      	subs	r3, #1
 801e096:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801e09a:	3501      	adds	r5, #1
 801e09c:	60e3      	str	r3, [r4, #12]
 801e09e:	6834      	ldr	r4, [r6, #0]
 801e0a0:	68a3      	ldr	r3, [r4, #8]
 801e0a2:	429d      	cmp	r5, r3
 801e0a4:	d207      	bcs.n	801e0b6 <rcutils_string_map_fini+0x62>
 801e0a6:	6822      	ldr	r2, [r4, #0]
 801e0a8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801e0ac:	2800      	cmp	r0, #0
 801e0ae:	d1e2      	bne.n	801e076 <rcutils_string_map_fini+0x22>
 801e0b0:	3501      	adds	r5, #1
 801e0b2:	429d      	cmp	r5, r3
 801e0b4:	d3dc      	bcc.n	801e070 <rcutils_string_map_fini+0x1c>
 801e0b6:	2100      	movs	r1, #0
 801e0b8:	4630      	mov	r0, r6
 801e0ba:	f7ff ff1b 	bl	801def4 <rcutils_string_map_reserve>
 801e0be:	4604      	mov	r4, r0
 801e0c0:	b920      	cbnz	r0, 801e0cc <rcutils_string_map_fini+0x78>
 801e0c2:	6830      	ldr	r0, [r6, #0]
 801e0c4:	6943      	ldr	r3, [r0, #20]
 801e0c6:	6a01      	ldr	r1, [r0, #32]
 801e0c8:	4798      	blx	r3
 801e0ca:	6034      	str	r4, [r6, #0]
 801e0cc:	4620      	mov	r0, r4
 801e0ce:	b002      	add	sp, #8
 801e0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e0d4:	240b      	movs	r4, #11
 801e0d6:	4620      	mov	r0, r4
 801e0d8:	b002      	add	sp, #8
 801e0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e0de:	bf00      	nop

0801e0e0 <rcutils_string_map_getn>:
 801e0e0:	b378      	cbz	r0, 801e142 <rcutils_string_map_getn+0x62>
 801e0e2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0e6:	f8d0 b000 	ldr.w	fp, [r0]
 801e0ea:	f1bb 0f00 	cmp.w	fp, #0
 801e0ee:	d01f      	beq.n	801e130 <rcutils_string_map_getn+0x50>
 801e0f0:	fab1 f481 	clz	r4, r1
 801e0f4:	4688      	mov	r8, r1
 801e0f6:	0964      	lsrs	r4, r4, #5
 801e0f8:	b1d1      	cbz	r1, 801e130 <rcutils_string_map_getn+0x50>
 801e0fa:	f8db 7008 	ldr.w	r7, [fp, #8]
 801e0fe:	f8db 6000 	ldr.w	r6, [fp]
 801e102:	b1af      	cbz	r7, 801e130 <rcutils_string_map_getn+0x50>
 801e104:	4691      	mov	r9, r2
 801e106:	3e04      	subs	r6, #4
 801e108:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801e10c:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801e110:	3401      	adds	r4, #1
 801e112:	4628      	mov	r0, r5
 801e114:	b155      	cbz	r5, 801e12c <rcutils_string_map_getn+0x4c>
 801e116:	f7e2 f8ed 	bl	80002f4 <strlen>
 801e11a:	4602      	mov	r2, r0
 801e11c:	4629      	mov	r1, r5
 801e11e:	4640      	mov	r0, r8
 801e120:	454a      	cmp	r2, r9
 801e122:	bf38      	it	cc
 801e124:	464a      	movcc	r2, r9
 801e126:	f004 f868 	bl	80221fa <strncmp>
 801e12a:	b120      	cbz	r0, 801e136 <rcutils_string_map_getn+0x56>
 801e12c:	42a7      	cmp	r7, r4
 801e12e:	d1eb      	bne.n	801e108 <rcutils_string_map_getn+0x28>
 801e130:	2000      	movs	r0, #0
 801e132:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e136:	f8db 3004 	ldr.w	r3, [fp, #4]
 801e13a:	f853 000a 	ldr.w	r0, [r3, sl]
 801e13e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e142:	4770      	bx	lr
 801e144:	0000      	movs	r0, r0
	...

0801e148 <rmw_get_zero_initialized_context>:
 801e148:	b510      	push	{r4, lr}
 801e14a:	4604      	mov	r4, r0
 801e14c:	3010      	adds	r0, #16
 801e14e:	f000 f80f 	bl	801e170 <rmw_get_zero_initialized_init_options>
 801e152:	2300      	movs	r3, #0
 801e154:	4620      	mov	r0, r4
 801e156:	60a3      	str	r3, [r4, #8]
 801e158:	64a3      	str	r3, [r4, #72]	@ 0x48
 801e15a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 801e15c:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 801e168 <rmw_get_zero_initialized_context+0x20>
 801e160:	ed84 7b00 	vstr	d7, [r4]
 801e164:	bd10      	pop	{r4, pc}
 801e166:	bf00      	nop
	...

0801e170 <rmw_get_zero_initialized_init_options>:
 801e170:	b510      	push	{r4, lr}
 801e172:	4604      	mov	r4, r0
 801e174:	2238      	movs	r2, #56	@ 0x38
 801e176:	2100      	movs	r1, #0
 801e178:	f004 f82a 	bl	80221d0 <memset>
 801e17c:	f104 0010 	add.w	r0, r4, #16
 801e180:	f000 f806 	bl	801e190 <rmw_get_default_security_options>
 801e184:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e188:	4620      	mov	r0, r4
 801e18a:	60e3      	str	r3, [r4, #12]
 801e18c:	bd10      	pop	{r4, pc}
 801e18e:	bf00      	nop

0801e190 <rmw_get_default_security_options>:
 801e190:	2200      	movs	r2, #0
 801e192:	7002      	strb	r2, [r0, #0]
 801e194:	6042      	str	r2, [r0, #4]
 801e196:	4770      	bx	lr

0801e198 <rmw_subscription_content_filter_options_fini>:
 801e198:	b1b0      	cbz	r0, 801e1c8 <rmw_subscription_content_filter_options_fini+0x30>
 801e19a:	b538      	push	{r3, r4, r5, lr}
 801e19c:	4604      	mov	r4, r0
 801e19e:	4608      	mov	r0, r1
 801e1a0:	460d      	mov	r5, r1
 801e1a2:	f7f7 f911 	bl	80153c8 <rcutils_allocator_is_valid>
 801e1a6:	b168      	cbz	r0, 801e1c4 <rmw_subscription_content_filter_options_fini+0x2c>
 801e1a8:	6820      	ldr	r0, [r4, #0]
 801e1aa:	b120      	cbz	r0, 801e1b6 <rmw_subscription_content_filter_options_fini+0x1e>
 801e1ac:	686b      	ldr	r3, [r5, #4]
 801e1ae:	6929      	ldr	r1, [r5, #16]
 801e1b0:	4798      	blx	r3
 801e1b2:	2300      	movs	r3, #0
 801e1b4:	6023      	str	r3, [r4, #0]
 801e1b6:	1d20      	adds	r0, r4, #4
 801e1b8:	f003 f97c 	bl	80214b4 <rcutils_string_array_fini>
 801e1bc:	3800      	subs	r0, #0
 801e1be:	bf18      	it	ne
 801e1c0:	2001      	movne	r0, #1
 801e1c2:	bd38      	pop	{r3, r4, r5, pc}
 801e1c4:	200b      	movs	r0, #11
 801e1c6:	bd38      	pop	{r3, r4, r5, pc}
 801e1c8:	200b      	movs	r0, #11
 801e1ca:	4770      	bx	lr

0801e1cc <rmw_get_default_subscription_options>:
 801e1cc:	2200      	movs	r2, #0
 801e1ce:	e9c0 2200 	strd	r2, r2, [r0]
 801e1d2:	6082      	str	r2, [r0, #8]
 801e1d4:	4770      	bx	lr
 801e1d6:	bf00      	nop

0801e1d8 <rmw_time_equal>:
 801e1d8:	b4f0      	push	{r4, r5, r6, r7}
 801e1da:	b084      	sub	sp, #16
 801e1dc:	ac04      	add	r4, sp, #16
 801e1de:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801e1e2:	4603      	mov	r3, r0
 801e1e4:	4925      	ldr	r1, [pc, #148]	@ (801e27c <rmw_time_equal+0xa4>)
 801e1e6:	9d01      	ldr	r5, [sp, #4]
 801e1e8:	4610      	mov	r0, r2
 801e1ea:	4299      	cmp	r1, r3
 801e1ec:	f04f 0202 	mov.w	r2, #2
 801e1f0:	9e03      	ldr	r6, [sp, #12]
 801e1f2:	41aa      	sbcs	r2, r5
 801e1f4:	d330      	bcc.n	801e258 <rmw_time_equal+0x80>
 801e1f6:	4c22      	ldr	r4, [pc, #136]	@ (801e280 <rmw_time_equal+0xa8>)
 801e1f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e1fc:	fba3 3204 	umull	r3, r2, r3, r4
 801e200:	fb04 2205 	mla	r2, r4, r5, r2
 801e204:	43dd      	mvns	r5, r3
 801e206:	1a8c      	subs	r4, r1, r2
 801e208:	4285      	cmp	r5, r0
 801e20a:	41b4      	sbcs	r4, r6
 801e20c:	d332      	bcc.n	801e274 <rmw_time_equal+0x9c>
 801e20e:	eb10 0c03 	adds.w	ip, r0, r3
 801e212:	eb42 0106 	adc.w	r1, r2, r6
 801e216:	4819      	ldr	r0, [pc, #100]	@ (801e27c <rmw_time_equal+0xa4>)
 801e218:	2202      	movs	r2, #2
 801e21a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801e21c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801e21e:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801e222:	4298      	cmp	r0, r3
 801e224:	41b2      	sbcs	r2, r6
 801e226:	d31c      	bcc.n	801e262 <rmw_time_equal+0x8a>
 801e228:	4c15      	ldr	r4, [pc, #84]	@ (801e280 <rmw_time_equal+0xa8>)
 801e22a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801e22e:	fba3 3204 	umull	r3, r2, r3, r4
 801e232:	fb04 2206 	mla	r2, r4, r6, r2
 801e236:	43de      	mvns	r6, r3
 801e238:	1a84      	subs	r4, r0, r2
 801e23a:	42ae      	cmp	r6, r5
 801e23c:	41bc      	sbcs	r4, r7
 801e23e:	d315      	bcc.n	801e26c <rmw_time_equal+0x94>
 801e240:	195b      	adds	r3, r3, r5
 801e242:	eb42 0207 	adc.w	r2, r2, r7
 801e246:	428a      	cmp	r2, r1
 801e248:	bf08      	it	eq
 801e24a:	4563      	cmpeq	r3, ip
 801e24c:	bf0c      	ite	eq
 801e24e:	2001      	moveq	r0, #1
 801e250:	2000      	movne	r0, #0
 801e252:	b004      	add	sp, #16
 801e254:	bcf0      	pop	{r4, r5, r6, r7}
 801e256:	4770      	bx	lr
 801e258:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801e25c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e260:	e7d9      	b.n	801e216 <rmw_time_equal+0x3e>
 801e262:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e266:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 801e26a:	e7ec      	b.n	801e246 <rmw_time_equal+0x6e>
 801e26c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e270:	4602      	mov	r2, r0
 801e272:	e7e8      	b.n	801e246 <rmw_time_equal+0x6e>
 801e274:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801e278:	e7cd      	b.n	801e216 <rmw_time_equal+0x3e>
 801e27a:	bf00      	nop
 801e27c:	25c17d04 	.word	0x25c17d04
 801e280:	3b9aca00 	.word	0x3b9aca00

0801e284 <rmw_time_total_nsec>:
 801e284:	b470      	push	{r4, r5, r6}
 801e286:	b085      	sub	sp, #20
 801e288:	ac04      	add	r4, sp, #16
 801e28a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801e28e:	4603      	mov	r3, r0
 801e290:	4913      	ldr	r1, [pc, #76]	@ (801e2e0 <rmw_time_total_nsec+0x5c>)
 801e292:	9d01      	ldr	r5, [sp, #4]
 801e294:	4610      	mov	r0, r2
 801e296:	4299      	cmp	r1, r3
 801e298:	f04f 0202 	mov.w	r2, #2
 801e29c:	9e03      	ldr	r6, [sp, #12]
 801e29e:	41aa      	sbcs	r2, r5
 801e2a0:	d311      	bcc.n	801e2c6 <rmw_time_total_nsec+0x42>
 801e2a2:	4c10      	ldr	r4, [pc, #64]	@ (801e2e4 <rmw_time_total_nsec+0x60>)
 801e2a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e2a8:	fba3 3204 	umull	r3, r2, r3, r4
 801e2ac:	fb04 2205 	mla	r2, r4, r5, r2
 801e2b0:	43dd      	mvns	r5, r3
 801e2b2:	1a8c      	subs	r4, r1, r2
 801e2b4:	4285      	cmp	r5, r0
 801e2b6:	41b4      	sbcs	r4, r6
 801e2b8:	d30c      	bcc.n	801e2d4 <rmw_time_total_nsec+0x50>
 801e2ba:	1818      	adds	r0, r3, r0
 801e2bc:	eb42 0106 	adc.w	r1, r2, r6
 801e2c0:	b005      	add	sp, #20
 801e2c2:	bc70      	pop	{r4, r5, r6}
 801e2c4:	4770      	bx	lr
 801e2c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e2ca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e2ce:	b005      	add	sp, #20
 801e2d0:	bc70      	pop	{r4, r5, r6}
 801e2d2:	4770      	bx	lr
 801e2d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e2d8:	b005      	add	sp, #20
 801e2da:	bc70      	pop	{r4, r5, r6}
 801e2dc:	4770      	bx	lr
 801e2de:	bf00      	nop
 801e2e0:	25c17d04 	.word	0x25c17d04
 801e2e4:	3b9aca00 	.word	0x3b9aca00

0801e2e8 <rmw_get_zero_initialized_message_info>:
 801e2e8:	b510      	push	{r4, lr}
 801e2ea:	4604      	mov	r4, r0
 801e2ec:	2240      	movs	r2, #64	@ 0x40
 801e2ee:	2100      	movs	r1, #0
 801e2f0:	f003 ff6e 	bl	80221d0 <memset>
 801e2f4:	4620      	mov	r0, r4
 801e2f6:	bd10      	pop	{r4, pc}

0801e2f8 <rmw_validate_full_topic_name>:
 801e2f8:	2800      	cmp	r0, #0
 801e2fa:	d05d      	beq.n	801e3b8 <rmw_validate_full_topic_name+0xc0>
 801e2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e300:	460d      	mov	r5, r1
 801e302:	2900      	cmp	r1, #0
 801e304:	d05a      	beq.n	801e3bc <rmw_validate_full_topic_name+0xc4>
 801e306:	4604      	mov	r4, r0
 801e308:	4616      	mov	r6, r2
 801e30a:	f7e1 fff3 	bl	80002f4 <strlen>
 801e30e:	b150      	cbz	r0, 801e326 <rmw_validate_full_topic_name+0x2e>
 801e310:	7823      	ldrb	r3, [r4, #0]
 801e312:	2b2f      	cmp	r3, #47	@ 0x2f
 801e314:	d00e      	beq.n	801e334 <rmw_validate_full_topic_name+0x3c>
 801e316:	2302      	movs	r3, #2
 801e318:	602b      	str	r3, [r5, #0]
 801e31a:	b146      	cbz	r6, 801e32e <rmw_validate_full_topic_name+0x36>
 801e31c:	2300      	movs	r3, #0
 801e31e:	4618      	mov	r0, r3
 801e320:	6033      	str	r3, [r6, #0]
 801e322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e326:	2301      	movs	r3, #1
 801e328:	602b      	str	r3, [r5, #0]
 801e32a:	2e00      	cmp	r6, #0
 801e32c:	d1f6      	bne.n	801e31c <rmw_validate_full_topic_name+0x24>
 801e32e:	2000      	movs	r0, #0
 801e330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e334:	1e43      	subs	r3, r0, #1
 801e336:	5ce2      	ldrb	r2, [r4, r3]
 801e338:	2a2f      	cmp	r2, #47	@ 0x2f
 801e33a:	d041      	beq.n	801e3c0 <rmw_validate_full_topic_name+0xc8>
 801e33c:	1e62      	subs	r2, r4, #1
 801e33e:	f1c4 0e01 	rsb	lr, r4, #1
 801e342:	eb02 0800 	add.w	r8, r2, r0
 801e346:	eb0e 0702 	add.w	r7, lr, r2
 801e34a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801e34e:	f023 0120 	bic.w	r1, r3, #32
 801e352:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 801e356:	3941      	subs	r1, #65	@ 0x41
 801e358:	2919      	cmp	r1, #25
 801e35a:	d90f      	bls.n	801e37c <rmw_validate_full_topic_name+0x84>
 801e35c:	f1bc 0f0a 	cmp.w	ip, #10
 801e360:	d90c      	bls.n	801e37c <rmw_validate_full_topic_name+0x84>
 801e362:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 801e366:	fab3 f383 	clz	r3, r3
 801e36a:	095b      	lsrs	r3, r3, #5
 801e36c:	b933      	cbnz	r3, 801e37c <rmw_validate_full_topic_name+0x84>
 801e36e:	2204      	movs	r2, #4
 801e370:	602a      	str	r2, [r5, #0]
 801e372:	2e00      	cmp	r6, #0
 801e374:	d0db      	beq.n	801e32e <rmw_validate_full_topic_name+0x36>
 801e376:	4618      	mov	r0, r3
 801e378:	6037      	str	r7, [r6, #0]
 801e37a:	e7d2      	b.n	801e322 <rmw_validate_full_topic_name+0x2a>
 801e37c:	4542      	cmp	r2, r8
 801e37e:	d1e2      	bne.n	801e346 <rmw_validate_full_topic_name+0x4e>
 801e380:	2301      	movs	r3, #1
 801e382:	4f1a      	ldr	r7, [pc, #104]	@ (801e3ec <rmw_validate_full_topic_name+0xf4>)
 801e384:	e004      	b.n	801e390 <rmw_validate_full_topic_name+0x98>
 801e386:	4298      	cmp	r0, r3
 801e388:	f104 0401 	add.w	r4, r4, #1
 801e38c:	4613      	mov	r3, r2
 801e38e:	d91c      	bls.n	801e3ca <rmw_validate_full_topic_name+0xd2>
 801e390:	4298      	cmp	r0, r3
 801e392:	f103 0201 	add.w	r2, r3, #1
 801e396:	d0f6      	beq.n	801e386 <rmw_validate_full_topic_name+0x8e>
 801e398:	7821      	ldrb	r1, [r4, #0]
 801e39a:	292f      	cmp	r1, #47	@ 0x2f
 801e39c:	d1f3      	bne.n	801e386 <rmw_validate_full_topic_name+0x8e>
 801e39e:	7861      	ldrb	r1, [r4, #1]
 801e3a0:	292f      	cmp	r1, #47	@ 0x2f
 801e3a2:	d01e      	beq.n	801e3e2 <rmw_validate_full_topic_name+0xea>
 801e3a4:	5dc9      	ldrb	r1, [r1, r7]
 801e3a6:	0749      	lsls	r1, r1, #29
 801e3a8:	d5ed      	bpl.n	801e386 <rmw_validate_full_topic_name+0x8e>
 801e3aa:	2206      	movs	r2, #6
 801e3ac:	602a      	str	r2, [r5, #0]
 801e3ae:	2e00      	cmp	r6, #0
 801e3b0:	d0bd      	beq.n	801e32e <rmw_validate_full_topic_name+0x36>
 801e3b2:	2000      	movs	r0, #0
 801e3b4:	6033      	str	r3, [r6, #0]
 801e3b6:	e7b4      	b.n	801e322 <rmw_validate_full_topic_name+0x2a>
 801e3b8:	200b      	movs	r0, #11
 801e3ba:	4770      	bx	lr
 801e3bc:	200b      	movs	r0, #11
 801e3be:	e7b0      	b.n	801e322 <rmw_validate_full_topic_name+0x2a>
 801e3c0:	2203      	movs	r2, #3
 801e3c2:	602a      	str	r2, [r5, #0]
 801e3c4:	2e00      	cmp	r6, #0
 801e3c6:	d1f4      	bne.n	801e3b2 <rmw_validate_full_topic_name+0xba>
 801e3c8:	e7b1      	b.n	801e32e <rmw_validate_full_topic_name+0x36>
 801e3ca:	28f7      	cmp	r0, #247	@ 0xf7
 801e3cc:	d803      	bhi.n	801e3d6 <rmw_validate_full_topic_name+0xde>
 801e3ce:	2300      	movs	r3, #0
 801e3d0:	4618      	mov	r0, r3
 801e3d2:	602b      	str	r3, [r5, #0]
 801e3d4:	e7a5      	b.n	801e322 <rmw_validate_full_topic_name+0x2a>
 801e3d6:	2307      	movs	r3, #7
 801e3d8:	602b      	str	r3, [r5, #0]
 801e3da:	2e00      	cmp	r6, #0
 801e3dc:	d0a7      	beq.n	801e32e <rmw_validate_full_topic_name+0x36>
 801e3de:	23f6      	movs	r3, #246	@ 0xf6
 801e3e0:	e7e7      	b.n	801e3b2 <rmw_validate_full_topic_name+0xba>
 801e3e2:	2205      	movs	r2, #5
 801e3e4:	602a      	str	r2, [r5, #0]
 801e3e6:	2e00      	cmp	r6, #0
 801e3e8:	d1e3      	bne.n	801e3b2 <rmw_validate_full_topic_name+0xba>
 801e3ea:	e7a0      	b.n	801e32e <rmw_validate_full_topic_name+0x36>
 801e3ec:	08025a9a 	.word	0x08025a9a

0801e3f0 <rmw_validate_namespace_with_size>:
 801e3f0:	2800      	cmp	r0, #0
 801e3f2:	d043      	beq.n	801e47c <rmw_validate_namespace_with_size+0x8c>
 801e3f4:	b570      	push	{r4, r5, r6, lr}
 801e3f6:	4614      	mov	r4, r2
 801e3f8:	b0c2      	sub	sp, #264	@ 0x108
 801e3fa:	b32a      	cbz	r2, 801e448 <rmw_validate_namespace_with_size+0x58>
 801e3fc:	2901      	cmp	r1, #1
 801e3fe:	460d      	mov	r5, r1
 801e400:	461e      	mov	r6, r3
 801e402:	d102      	bne.n	801e40a <rmw_validate_namespace_with_size+0x1a>
 801e404:	7803      	ldrb	r3, [r0, #0]
 801e406:	2b2f      	cmp	r3, #47	@ 0x2f
 801e408:	d012      	beq.n	801e430 <rmw_validate_namespace_with_size+0x40>
 801e40a:	aa01      	add	r2, sp, #4
 801e40c:	4669      	mov	r1, sp
 801e40e:	f7ff ff73 	bl	801e2f8 <rmw_validate_full_topic_name>
 801e412:	b980      	cbnz	r0, 801e436 <rmw_validate_namespace_with_size+0x46>
 801e414:	9a00      	ldr	r2, [sp, #0]
 801e416:	b14a      	cbz	r2, 801e42c <rmw_validate_namespace_with_size+0x3c>
 801e418:	2a07      	cmp	r2, #7
 801e41a:	d007      	beq.n	801e42c <rmw_validate_namespace_with_size+0x3c>
 801e41c:	1e53      	subs	r3, r2, #1
 801e41e:	2b05      	cmp	r3, #5
 801e420:	d82e      	bhi.n	801e480 <rmw_validate_namespace_with_size+0x90>
 801e422:	e8df f003 	tbb	[pc, r3]
 801e426:	1f1c      	.short	0x1f1c
 801e428:	14282522 	.word	0x14282522
 801e42c:	2df5      	cmp	r5, #245	@ 0xf5
 801e42e:	d804      	bhi.n	801e43a <rmw_validate_namespace_with_size+0x4a>
 801e430:	2300      	movs	r3, #0
 801e432:	4618      	mov	r0, r3
 801e434:	6023      	str	r3, [r4, #0]
 801e436:	b042      	add	sp, #264	@ 0x108
 801e438:	bd70      	pop	{r4, r5, r6, pc}
 801e43a:	2307      	movs	r3, #7
 801e43c:	6023      	str	r3, [r4, #0]
 801e43e:	2e00      	cmp	r6, #0
 801e440:	d0f9      	beq.n	801e436 <rmw_validate_namespace_with_size+0x46>
 801e442:	23f4      	movs	r3, #244	@ 0xf4
 801e444:	6033      	str	r3, [r6, #0]
 801e446:	e7f6      	b.n	801e436 <rmw_validate_namespace_with_size+0x46>
 801e448:	200b      	movs	r0, #11
 801e44a:	b042      	add	sp, #264	@ 0x108
 801e44c:	bd70      	pop	{r4, r5, r6, pc}
 801e44e:	2306      	movs	r3, #6
 801e450:	6023      	str	r3, [r4, #0]
 801e452:	2e00      	cmp	r6, #0
 801e454:	d0ef      	beq.n	801e436 <rmw_validate_namespace_with_size+0x46>
 801e456:	9b01      	ldr	r3, [sp, #4]
 801e458:	6033      	str	r3, [r6, #0]
 801e45a:	b042      	add	sp, #264	@ 0x108
 801e45c:	bd70      	pop	{r4, r5, r6, pc}
 801e45e:	2301      	movs	r3, #1
 801e460:	6023      	str	r3, [r4, #0]
 801e462:	e7f6      	b.n	801e452 <rmw_validate_namespace_with_size+0x62>
 801e464:	2302      	movs	r3, #2
 801e466:	6023      	str	r3, [r4, #0]
 801e468:	e7f3      	b.n	801e452 <rmw_validate_namespace_with_size+0x62>
 801e46a:	2303      	movs	r3, #3
 801e46c:	6023      	str	r3, [r4, #0]
 801e46e:	e7f0      	b.n	801e452 <rmw_validate_namespace_with_size+0x62>
 801e470:	2304      	movs	r3, #4
 801e472:	6023      	str	r3, [r4, #0]
 801e474:	e7ed      	b.n	801e452 <rmw_validate_namespace_with_size+0x62>
 801e476:	2305      	movs	r3, #5
 801e478:	6023      	str	r3, [r4, #0]
 801e47a:	e7ea      	b.n	801e452 <rmw_validate_namespace_with_size+0x62>
 801e47c:	200b      	movs	r0, #11
 801e47e:	4770      	bx	lr
 801e480:	4613      	mov	r3, r2
 801e482:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801e486:	4a03      	ldr	r2, [pc, #12]	@ (801e494 <rmw_validate_namespace_with_size+0xa4>)
 801e488:	a802      	add	r0, sp, #8
 801e48a:	f7ff fca1 	bl	801ddd0 <rcutils_snprintf>
 801e48e:	2001      	movs	r0, #1
 801e490:	e7d1      	b.n	801e436 <rmw_validate_namespace_with_size+0x46>
 801e492:	bf00      	nop
 801e494:	08025518 	.word	0x08025518

0801e498 <rmw_validate_namespace>:
 801e498:	b168      	cbz	r0, 801e4b6 <rmw_validate_namespace+0x1e>
 801e49a:	b570      	push	{r4, r5, r6, lr}
 801e49c:	460d      	mov	r5, r1
 801e49e:	4616      	mov	r6, r2
 801e4a0:	4604      	mov	r4, r0
 801e4a2:	f7e1 ff27 	bl	80002f4 <strlen>
 801e4a6:	4633      	mov	r3, r6
 801e4a8:	4601      	mov	r1, r0
 801e4aa:	462a      	mov	r2, r5
 801e4ac:	4620      	mov	r0, r4
 801e4ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e4b2:	f7ff bf9d 	b.w	801e3f0 <rmw_validate_namespace_with_size>
 801e4b6:	200b      	movs	r0, #11
 801e4b8:	4770      	bx	lr
 801e4ba:	bf00      	nop

0801e4bc <rmw_namespace_validation_result_string>:
 801e4bc:	2807      	cmp	r0, #7
 801e4be:	d803      	bhi.n	801e4c8 <rmw_namespace_validation_result_string+0xc>
 801e4c0:	4b02      	ldr	r3, [pc, #8]	@ (801e4cc <rmw_namespace_validation_result_string+0x10>)
 801e4c2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801e4c6:	4770      	bx	lr
 801e4c8:	4801      	ldr	r0, [pc, #4]	@ (801e4d0 <rmw_namespace_validation_result_string+0x14>)
 801e4ca:	4770      	bx	lr
 801e4cc:	08025710 	.word	0x08025710
 801e4d0:	08025568 	.word	0x08025568

0801e4d4 <rmw_validate_node_name>:
 801e4d4:	2800      	cmp	r0, #0
 801e4d6:	d042      	beq.n	801e55e <rmw_validate_node_name+0x8a>
 801e4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e4dc:	460d      	mov	r5, r1
 801e4de:	2900      	cmp	r1, #0
 801e4e0:	d03f      	beq.n	801e562 <rmw_validate_node_name+0x8e>
 801e4e2:	4604      	mov	r4, r0
 801e4e4:	4616      	mov	r6, r2
 801e4e6:	f7e1 ff05 	bl	80002f4 <strlen>
 801e4ea:	b310      	cbz	r0, 801e532 <rmw_validate_node_name+0x5e>
 801e4ec:	1e63      	subs	r3, r4, #1
 801e4ee:	f1c4 0101 	rsb	r1, r4, #1
 801e4f2:	eb03 0800 	add.w	r8, r3, r0
 801e4f6:	18cf      	adds	r7, r1, r3
 801e4f8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801e4fc:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 801e500:	f02e 0c20 	bic.w	ip, lr, #32
 801e504:	2a09      	cmp	r2, #9
 801e506:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801e50a:	d905      	bls.n	801e518 <rmw_validate_node_name+0x44>
 801e50c:	f1bc 0f19 	cmp.w	ip, #25
 801e510:	d902      	bls.n	801e518 <rmw_validate_node_name+0x44>
 801e512:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801e516:	d114      	bne.n	801e542 <rmw_validate_node_name+0x6e>
 801e518:	4598      	cmp	r8, r3
 801e51a:	d1ec      	bne.n	801e4f6 <rmw_validate_node_name+0x22>
 801e51c:	7822      	ldrb	r2, [r4, #0]
 801e51e:	4b16      	ldr	r3, [pc, #88]	@ (801e578 <rmw_validate_node_name+0xa4>)
 801e520:	5cd3      	ldrb	r3, [r2, r3]
 801e522:	f013 0304 	ands.w	r3, r3, #4
 801e526:	d113      	bne.n	801e550 <rmw_validate_node_name+0x7c>
 801e528:	28ff      	cmp	r0, #255	@ 0xff
 801e52a:	d81c      	bhi.n	801e566 <rmw_validate_node_name+0x92>
 801e52c:	4618      	mov	r0, r3
 801e52e:	602b      	str	r3, [r5, #0]
 801e530:	e00c      	b.n	801e54c <rmw_validate_node_name+0x78>
 801e532:	2301      	movs	r3, #1
 801e534:	602b      	str	r3, [r5, #0]
 801e536:	b17e      	cbz	r6, 801e558 <rmw_validate_node_name+0x84>
 801e538:	2300      	movs	r3, #0
 801e53a:	4618      	mov	r0, r3
 801e53c:	6033      	str	r3, [r6, #0]
 801e53e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e542:	2302      	movs	r3, #2
 801e544:	602b      	str	r3, [r5, #0]
 801e546:	b13e      	cbz	r6, 801e558 <rmw_validate_node_name+0x84>
 801e548:	2000      	movs	r0, #0
 801e54a:	6037      	str	r7, [r6, #0]
 801e54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e550:	2303      	movs	r3, #3
 801e552:	602b      	str	r3, [r5, #0]
 801e554:	2e00      	cmp	r6, #0
 801e556:	d1ef      	bne.n	801e538 <rmw_validate_node_name+0x64>
 801e558:	2000      	movs	r0, #0
 801e55a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e55e:	200b      	movs	r0, #11
 801e560:	4770      	bx	lr
 801e562:	200b      	movs	r0, #11
 801e564:	e7f2      	b.n	801e54c <rmw_validate_node_name+0x78>
 801e566:	2204      	movs	r2, #4
 801e568:	602a      	str	r2, [r5, #0]
 801e56a:	2e00      	cmp	r6, #0
 801e56c:	d0f4      	beq.n	801e558 <rmw_validate_node_name+0x84>
 801e56e:	22fe      	movs	r2, #254	@ 0xfe
 801e570:	4618      	mov	r0, r3
 801e572:	6032      	str	r2, [r6, #0]
 801e574:	e7ea      	b.n	801e54c <rmw_validate_node_name+0x78>
 801e576:	bf00      	nop
 801e578:	08025a9a 	.word	0x08025a9a

0801e57c <rmw_node_name_validation_result_string>:
 801e57c:	2804      	cmp	r0, #4
 801e57e:	d803      	bhi.n	801e588 <rmw_node_name_validation_result_string+0xc>
 801e580:	4b02      	ldr	r3, [pc, #8]	@ (801e58c <rmw_node_name_validation_result_string+0x10>)
 801e582:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801e586:	4770      	bx	lr
 801e588:	4801      	ldr	r0, [pc, #4]	@ (801e590 <rmw_node_name_validation_result_string+0x14>)
 801e58a:	4770      	bx	lr
 801e58c:	0802581c 	.word	0x0802581c
 801e590:	08025730 	.word	0x08025730

0801e594 <get_memory>:
 801e594:	4603      	mov	r3, r0
 801e596:	6840      	ldr	r0, [r0, #4]
 801e598:	b158      	cbz	r0, 801e5b2 <get_memory+0x1e>
 801e59a:	6842      	ldr	r2, [r0, #4]
 801e59c:	605a      	str	r2, [r3, #4]
 801e59e:	b10a      	cbz	r2, 801e5a4 <get_memory+0x10>
 801e5a0:	2100      	movs	r1, #0
 801e5a2:	6011      	str	r1, [r2, #0]
 801e5a4:	681a      	ldr	r2, [r3, #0]
 801e5a6:	6042      	str	r2, [r0, #4]
 801e5a8:	b102      	cbz	r2, 801e5ac <get_memory+0x18>
 801e5aa:	6010      	str	r0, [r2, #0]
 801e5ac:	2200      	movs	r2, #0
 801e5ae:	6002      	str	r2, [r0, #0]
 801e5b0:	6018      	str	r0, [r3, #0]
 801e5b2:	4770      	bx	lr

0801e5b4 <put_memory>:
 801e5b4:	680b      	ldr	r3, [r1, #0]
 801e5b6:	b10b      	cbz	r3, 801e5bc <put_memory+0x8>
 801e5b8:	684a      	ldr	r2, [r1, #4]
 801e5ba:	605a      	str	r2, [r3, #4]
 801e5bc:	684a      	ldr	r2, [r1, #4]
 801e5be:	b102      	cbz	r2, 801e5c2 <put_memory+0xe>
 801e5c0:	6013      	str	r3, [r2, #0]
 801e5c2:	6803      	ldr	r3, [r0, #0]
 801e5c4:	428b      	cmp	r3, r1
 801e5c6:	6843      	ldr	r3, [r0, #4]
 801e5c8:	bf08      	it	eq
 801e5ca:	6002      	streq	r2, [r0, #0]
 801e5cc:	604b      	str	r3, [r1, #4]
 801e5ce:	b103      	cbz	r3, 801e5d2 <put_memory+0x1e>
 801e5d0:	6019      	str	r1, [r3, #0]
 801e5d2:	2300      	movs	r3, #0
 801e5d4:	600b      	str	r3, [r1, #0]
 801e5d6:	6041      	str	r1, [r0, #4]
 801e5d8:	4770      	bx	lr
 801e5da:	bf00      	nop

0801e5dc <rmw_destroy_client>:
 801e5dc:	b570      	push	{r4, r5, r6, lr}
 801e5de:	b128      	cbz	r0, 801e5ec <rmw_destroy_client+0x10>
 801e5e0:	4604      	mov	r4, r0
 801e5e2:	6800      	ldr	r0, [r0, #0]
 801e5e4:	460d      	mov	r5, r1
 801e5e6:	f7f7 fdb7 	bl	8016158 <is_uxrce_rmw_identifier_valid>
 801e5ea:	b910      	cbnz	r0, 801e5f2 <rmw_destroy_client+0x16>
 801e5ec:	2401      	movs	r4, #1
 801e5ee:	4620      	mov	r0, r4
 801e5f0:	bd70      	pop	{r4, r5, r6, pc}
 801e5f2:	6863      	ldr	r3, [r4, #4]
 801e5f4:	2b00      	cmp	r3, #0
 801e5f6:	d0f9      	beq.n	801e5ec <rmw_destroy_client+0x10>
 801e5f8:	2d00      	cmp	r5, #0
 801e5fa:	d0f7      	beq.n	801e5ec <rmw_destroy_client+0x10>
 801e5fc:	6828      	ldr	r0, [r5, #0]
 801e5fe:	f7f7 fdab 	bl	8016158 <is_uxrce_rmw_identifier_valid>
 801e602:	2800      	cmp	r0, #0
 801e604:	d0f2      	beq.n	801e5ec <rmw_destroy_client+0x10>
 801e606:	686e      	ldr	r6, [r5, #4]
 801e608:	2e00      	cmp	r6, #0
 801e60a:	d0ef      	beq.n	801e5ec <rmw_destroy_client+0x10>
 801e60c:	6864      	ldr	r4, [r4, #4]
 801e60e:	6932      	ldr	r2, [r6, #16]
 801e610:	6920      	ldr	r0, [r4, #16]
 801e612:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801e616:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801e61a:	6819      	ldr	r1, [r3, #0]
 801e61c:	f002 faca 	bl	8020bb4 <uxr_buffer_cancel_data>
 801e620:	4602      	mov	r2, r0
 801e622:	6920      	ldr	r0, [r4, #16]
 801e624:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801e628:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801e62c:	f7f7 fc82 	bl	8015f34 <run_xrce_session>
 801e630:	6920      	ldr	r0, [r4, #16]
 801e632:	6932      	ldr	r2, [r6, #16]
 801e634:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801e638:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801e63c:	6819      	ldr	r1, [r3, #0]
 801e63e:	f7f8 fb5f 	bl	8016d00 <uxr_buffer_delete_entity>
 801e642:	4602      	mov	r2, r0
 801e644:	6920      	ldr	r0, [r4, #16]
 801e646:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801e64a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801e64e:	f7f7 fc71 	bl	8015f34 <run_xrce_session>
 801e652:	4603      	mov	r3, r0
 801e654:	4628      	mov	r0, r5
 801e656:	2b00      	cmp	r3, #0
 801e658:	bf14      	ite	ne
 801e65a:	2400      	movne	r4, #0
 801e65c:	2402      	moveq	r4, #2
 801e65e:	f7f7 fb45 	bl	8015cec <rmw_uxrce_fini_client_memory>
 801e662:	e7c4      	b.n	801e5ee <rmw_destroy_client+0x12>

0801e664 <rmw_get_implementation_identifier>:
 801e664:	4b01      	ldr	r3, [pc, #4]	@ (801e66c <rmw_get_implementation_identifier+0x8>)
 801e666:	6818      	ldr	r0, [r3, #0]
 801e668:	4770      	bx	lr
 801e66a:	bf00      	nop
 801e66c:	08025848 	.word	0x08025848

0801e670 <rmw_init_options_init>:
 801e670:	b084      	sub	sp, #16
 801e672:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e674:	b083      	sub	sp, #12
 801e676:	ad09      	add	r5, sp, #36	@ 0x24
 801e678:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801e67c:	b130      	cbz	r0, 801e68c <rmw_init_options_init+0x1c>
 801e67e:	4604      	mov	r4, r0
 801e680:	4628      	mov	r0, r5
 801e682:	f7f6 fea1 	bl	80153c8 <rcutils_allocator_is_valid>
 801e686:	b108      	cbz	r0, 801e68c <rmw_init_options_init+0x1c>
 801e688:	68a6      	ldr	r6, [r4, #8]
 801e68a:	b12e      	cbz	r6, 801e698 <rmw_init_options_init+0x28>
 801e68c:	200b      	movs	r0, #11
 801e68e:	b003      	add	sp, #12
 801e690:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e694:	b004      	add	sp, #16
 801e696:	4770      	bx	lr
 801e698:	2200      	movs	r2, #0
 801e69a:	2300      	movs	r3, #0
 801e69c:	f104 0c20 	add.w	ip, r4, #32
 801e6a0:	f8df e098 	ldr.w	lr, [pc, #152]	@ 801e73c <rmw_init_options_init+0xcc>
 801e6a4:	466f      	mov	r7, sp
 801e6a6:	e9c4 2300 	strd	r2, r3, [r4]
 801e6aa:	4b20      	ldr	r3, [pc, #128]	@ (801e72c <rmw_init_options_init+0xbc>)
 801e6ac:	681b      	ldr	r3, [r3, #0]
 801e6ae:	60a3      	str	r3, [r4, #8]
 801e6b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e6b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e6b6:	682b      	ldr	r3, [r5, #0]
 801e6b8:	4638      	mov	r0, r7
 801e6ba:	f8cc 3000 	str.w	r3, [ip]
 801e6be:	f8c4 e01c 	str.w	lr, [r4, #28]
 801e6c2:	60e6      	str	r6, [r4, #12]
 801e6c4:	f7ff fd64 	bl	801e190 <rmw_get_default_security_options>
 801e6c8:	f104 0310 	add.w	r3, r4, #16
 801e6cc:	2203      	movs	r2, #3
 801e6ce:	e897 0003 	ldmia.w	r7, {r0, r1}
 801e6d2:	e883 0003 	stmia.w	r3, {r0, r1}
 801e6d6:	4816      	ldr	r0, [pc, #88]	@ (801e730 <rmw_init_options_init+0xc0>)
 801e6d8:	4916      	ldr	r1, [pc, #88]	@ (801e734 <rmw_init_options_init+0xc4>)
 801e6da:	7626      	strb	r6, [r4, #24]
 801e6dc:	f7f7 fa46 	bl	8015b6c <rmw_uxrce_init_init_options_impl_memory>
 801e6e0:	4813      	ldr	r0, [pc, #76]	@ (801e730 <rmw_init_options_init+0xc0>)
 801e6e2:	f7ff ff57 	bl	801e594 <get_memory>
 801e6e6:	b1f0      	cbz	r0, 801e726 <rmw_init_options_init+0xb6>
 801e6e8:	4a13      	ldr	r2, [pc, #76]	@ (801e738 <rmw_init_options_init+0xc8>)
 801e6ea:	6883      	ldr	r3, [r0, #8]
 801e6ec:	6851      	ldr	r1, [r2, #4]
 801e6ee:	6363      	str	r3, [r4, #52]	@ 0x34
 801e6f0:	7810      	ldrb	r0, [r2, #0]
 801e6f2:	6159      	str	r1, [r3, #20]
 801e6f4:	68d1      	ldr	r1, [r2, #12]
 801e6f6:	7418      	strb	r0, [r3, #16]
 801e6f8:	61d9      	str	r1, [r3, #28]
 801e6fa:	6911      	ldr	r1, [r2, #16]
 801e6fc:	6219      	str	r1, [r3, #32]
 801e6fe:	6951      	ldr	r1, [r2, #20]
 801e700:	6892      	ldr	r2, [r2, #8]
 801e702:	6259      	str	r1, [r3, #36]	@ 0x24
 801e704:	619a      	str	r2, [r3, #24]
 801e706:	f7fa fe5d 	bl	80193c4 <uxr_nanos>
 801e70a:	f003 f9bd 	bl	8021a88 <srand>
 801e70e:	f003 f9e9 	bl	8021ae4 <rand>
 801e712:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e714:	6298      	str	r0, [r3, #40]	@ 0x28
 801e716:	2800      	cmp	r0, #0
 801e718:	d0f9      	beq.n	801e70e <rmw_init_options_init+0x9e>
 801e71a:	2000      	movs	r0, #0
 801e71c:	b003      	add	sp, #12
 801e71e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e722:	b004      	add	sp, #16
 801e724:	4770      	bx	lr
 801e726:	2001      	movs	r0, #1
 801e728:	e7b1      	b.n	801e68e <rmw_init_options_init+0x1e>
 801e72a:	bf00      	nop
 801e72c:	08025848 	.word	0x08025848
 801e730:	240691e4 	.word	0x240691e4
 801e734:	24064a80 	.word	0x24064a80
 801e738:	2406490c 	.word	0x2406490c
 801e73c:	08025254 	.word	0x08025254

0801e740 <rmw_init_options_copy>:
 801e740:	2800      	cmp	r0, #0
 801e742:	d047      	beq.n	801e7d4 <rmw_init_options_copy+0x94>
 801e744:	b570      	push	{r4, r5, r6, lr}
 801e746:	460d      	mov	r5, r1
 801e748:	b149      	cbz	r1, 801e75e <rmw_init_options_copy+0x1e>
 801e74a:	4604      	mov	r4, r0
 801e74c:	6880      	ldr	r0, [r0, #8]
 801e74e:	b120      	cbz	r0, 801e75a <rmw_init_options_copy+0x1a>
 801e750:	4b22      	ldr	r3, [pc, #136]	@ (801e7dc <rmw_init_options_copy+0x9c>)
 801e752:	6819      	ldr	r1, [r3, #0]
 801e754:	f7e1 fdc4 	bl	80002e0 <strcmp>
 801e758:	bba8      	cbnz	r0, 801e7c6 <rmw_init_options_copy+0x86>
 801e75a:	68ab      	ldr	r3, [r5, #8]
 801e75c:	b11b      	cbz	r3, 801e766 <rmw_init_options_copy+0x26>
 801e75e:	f04f 0c0b 	mov.w	ip, #11
 801e762:	4660      	mov	r0, ip
 801e764:	bd70      	pop	{r4, r5, r6, pc}
 801e766:	4623      	mov	r3, r4
 801e768:	462a      	mov	r2, r5
 801e76a:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 801e76e:	f8d3 e000 	ldr.w	lr, [r3]
 801e772:	3310      	adds	r3, #16
 801e774:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 801e778:	3210      	adds	r2, #16
 801e77a:	f853 0c08 	ldr.w	r0, [r3, #-8]
 801e77e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801e782:	42b3      	cmp	r3, r6
 801e784:	f842 ec10 	str.w	lr, [r2, #-16]
 801e788:	f842 cc0c 	str.w	ip, [r2, #-12]
 801e78c:	f842 0c08 	str.w	r0, [r2, #-8]
 801e790:	f842 1c04 	str.w	r1, [r2, #-4]
 801e794:	d1eb      	bne.n	801e76e <rmw_init_options_copy+0x2e>
 801e796:	6819      	ldr	r1, [r3, #0]
 801e798:	685b      	ldr	r3, [r3, #4]
 801e79a:	4811      	ldr	r0, [pc, #68]	@ (801e7e0 <rmw_init_options_copy+0xa0>)
 801e79c:	6011      	str	r1, [r2, #0]
 801e79e:	6053      	str	r3, [r2, #4]
 801e7a0:	f7ff fef8 	bl	801e594 <get_memory>
 801e7a4:	b198      	cbz	r0, 801e7ce <rmw_init_options_copy+0x8e>
 801e7a6:	6883      	ldr	r3, [r0, #8]
 801e7a8:	f04f 0c00 	mov.w	ip, #0
 801e7ac:	636b      	str	r3, [r5, #52]	@ 0x34
 801e7ae:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 801e7b0:	f103 0410 	add.w	r4, r3, #16
 801e7b4:	3510      	adds	r5, #16
 801e7b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e7b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e7ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e7be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801e7c2:	4660      	mov	r0, ip
 801e7c4:	bd70      	pop	{r4, r5, r6, pc}
 801e7c6:	f04f 0c0c 	mov.w	ip, #12
 801e7ca:	4660      	mov	r0, ip
 801e7cc:	bd70      	pop	{r4, r5, r6, pc}
 801e7ce:	f04f 0c01 	mov.w	ip, #1
 801e7d2:	e7c6      	b.n	801e762 <rmw_init_options_copy+0x22>
 801e7d4:	f04f 0c0b 	mov.w	ip, #11
 801e7d8:	4660      	mov	r0, ip
 801e7da:	4770      	bx	lr
 801e7dc:	08025848 	.word	0x08025848
 801e7e0:	240691e4 	.word	0x240691e4

0801e7e4 <rmw_init_options_fini>:
 801e7e4:	b510      	push	{r4, lr}
 801e7e6:	b08e      	sub	sp, #56	@ 0x38
 801e7e8:	b388      	cbz	r0, 801e84e <rmw_init_options_fini+0x6a>
 801e7ea:	4604      	mov	r4, r0
 801e7ec:	3020      	adds	r0, #32
 801e7ee:	f7f6 fdeb 	bl	80153c8 <rcutils_allocator_is_valid>
 801e7f2:	b360      	cbz	r0, 801e84e <rmw_init_options_fini+0x6a>
 801e7f4:	68a0      	ldr	r0, [r4, #8]
 801e7f6:	b120      	cbz	r0, 801e802 <rmw_init_options_fini+0x1e>
 801e7f8:	4b1a      	ldr	r3, [pc, #104]	@ (801e864 <rmw_init_options_fini+0x80>)
 801e7fa:	6819      	ldr	r1, [r3, #0]
 801e7fc:	f7e1 fd70 	bl	80002e0 <strcmp>
 801e800:	bb68      	cbnz	r0, 801e85e <rmw_init_options_fini+0x7a>
 801e802:	4b19      	ldr	r3, [pc, #100]	@ (801e868 <rmw_init_options_fini+0x84>)
 801e804:	6819      	ldr	r1, [r3, #0]
 801e806:	b331      	cbz	r1, 801e856 <rmw_init_options_fini+0x72>
 801e808:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801e80a:	e001      	b.n	801e810 <rmw_init_options_fini+0x2c>
 801e80c:	6849      	ldr	r1, [r1, #4]
 801e80e:	b311      	cbz	r1, 801e856 <rmw_init_options_fini+0x72>
 801e810:	688b      	ldr	r3, [r1, #8]
 801e812:	429a      	cmp	r2, r3
 801e814:	d1fa      	bne.n	801e80c <rmw_init_options_fini+0x28>
 801e816:	4814      	ldr	r0, [pc, #80]	@ (801e868 <rmw_init_options_fini+0x84>)
 801e818:	f7ff fecc 	bl	801e5b4 <put_memory>
 801e81c:	4668      	mov	r0, sp
 801e81e:	f7ff fca7 	bl	801e170 <rmw_get_zero_initialized_init_options>
 801e822:	46ee      	mov	lr, sp
 801e824:	46a4      	mov	ip, r4
 801e826:	2400      	movs	r4, #0
 801e828:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e82c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e830:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e834:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e838:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e83c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e840:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801e844:	e88c 0003 	stmia.w	ip, {r0, r1}
 801e848:	4620      	mov	r0, r4
 801e84a:	b00e      	add	sp, #56	@ 0x38
 801e84c:	bd10      	pop	{r4, pc}
 801e84e:	240b      	movs	r4, #11
 801e850:	4620      	mov	r0, r4
 801e852:	b00e      	add	sp, #56	@ 0x38
 801e854:	bd10      	pop	{r4, pc}
 801e856:	2401      	movs	r4, #1
 801e858:	4620      	mov	r0, r4
 801e85a:	b00e      	add	sp, #56	@ 0x38
 801e85c:	bd10      	pop	{r4, pc}
 801e85e:	240c      	movs	r4, #12
 801e860:	e7f2      	b.n	801e848 <rmw_init_options_fini+0x64>
 801e862:	bf00      	nop
 801e864:	08025848 	.word	0x08025848
 801e868:	240691e4 	.word	0x240691e4

0801e86c <rmw_init>:
 801e86c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e870:	b083      	sub	sp, #12
 801e872:	2800      	cmp	r0, #0
 801e874:	f000 80d3 	beq.w	801ea1e <rmw_init+0x1b2>
 801e878:	460e      	mov	r6, r1
 801e87a:	2900      	cmp	r1, #0
 801e87c:	f000 80cf 	beq.w	801ea1e <rmw_init+0x1b2>
 801e880:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801e882:	4605      	mov	r5, r0
 801e884:	2b00      	cmp	r3, #0
 801e886:	f000 80ca 	beq.w	801ea1e <rmw_init+0x1b2>
 801e88a:	4b78      	ldr	r3, [pc, #480]	@ (801ea6c <rmw_init+0x200>)
 801e88c:	6880      	ldr	r0, [r0, #8]
 801e88e:	681f      	ldr	r7, [r3, #0]
 801e890:	b128      	cbz	r0, 801e89e <rmw_init+0x32>
 801e892:	4639      	mov	r1, r7
 801e894:	f7e1 fd24 	bl	80002e0 <strcmp>
 801e898:	2800      	cmp	r0, #0
 801e89a:	f040 80ca 	bne.w	801ea32 <rmw_init+0x1c6>
 801e89e:	4c74      	ldr	r4, [pc, #464]	@ (801ea70 <rmw_init+0x204>)
 801e8a0:	f04f 0800 	mov.w	r8, #0
 801e8a4:	4973      	ldr	r1, [pc, #460]	@ (801ea74 <rmw_init+0x208>)
 801e8a6:	4874      	ldr	r0, [pc, #464]	@ (801ea78 <rmw_init+0x20c>)
 801e8a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801e8ac:	60b7      	str	r7, [r6, #8]
 801e8ae:	e9c6 2300 	strd	r2, r3, [r6]
 801e8b2:	68eb      	ldr	r3, [r5, #12]
 801e8b4:	2201      	movs	r2, #1
 801e8b6:	64b3      	str	r3, [r6, #72]	@ 0x48
 801e8b8:	f7f7 f8f8 	bl	8015aac <rmw_uxrce_init_session_memory>
 801e8bc:	4620      	mov	r0, r4
 801e8be:	2204      	movs	r2, #4
 801e8c0:	496e      	ldr	r1, [pc, #440]	@ (801ea7c <rmw_init+0x210>)
 801e8c2:	f7f7 f933 	bl	8015b2c <rmw_uxrce_init_static_input_buffer_memory>
 801e8c6:	486c      	ldr	r0, [pc, #432]	@ (801ea78 <rmw_init+0x20c>)
 801e8c8:	f884 800d 	strb.w	r8, [r4, #13]
 801e8cc:	f7ff fe62 	bl	801e594 <get_memory>
 801e8d0:	2800      	cmp	r0, #0
 801e8d2:	f000 80a9 	beq.w	801ea28 <rmw_init+0x1bc>
 801e8d6:	6884      	ldr	r4, [r0, #8]
 801e8d8:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 801e8da:	f104 0910 	add.w	r9, r4, #16
 801e8de:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 801e8e0:	f890 c010 	ldrb.w	ip, [r0, #16]
 801e8e4:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 801e8e8:	9101      	str	r1, [sp, #4]
 801e8ea:	4661      	mov	r1, ip
 801e8ec:	6a00      	ldr	r0, [r0, #32]
 801e8ee:	9000      	str	r0, [sp, #0]
 801e8f0:	4648      	mov	r0, r9
 801e8f2:	f7f8 fcbd 	bl	8017270 <uxr_set_custom_transport_callbacks>
 801e8f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801e8fa:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 801e8fe:	4960      	ldr	r1, [pc, #384]	@ (801ea80 <rmw_init+0x214>)
 801e900:	4860      	ldr	r0, [pc, #384]	@ (801ea84 <rmw_init+0x218>)
 801e902:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 801e906:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 801e90a:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 801e90e:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 801e912:	2201      	movs	r2, #1
 801e914:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 801e918:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 801e91c:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 801e920:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 801e924:	64f4      	str	r4, [r6, #76]	@ 0x4c
 801e926:	f7f7 f8a1 	bl	8015a6c <rmw_uxrce_init_node_memory>
 801e92a:	2205      	movs	r2, #5
 801e92c:	4956      	ldr	r1, [pc, #344]	@ (801ea88 <rmw_init+0x21c>)
 801e92e:	4857      	ldr	r0, [pc, #348]	@ (801ea8c <rmw_init+0x220>)
 801e930:	f7f7 f87c 	bl	8015a2c <rmw_uxrce_init_subscription_memory>
 801e934:	220a      	movs	r2, #10
 801e936:	4956      	ldr	r1, [pc, #344]	@ (801ea90 <rmw_init+0x224>)
 801e938:	4856      	ldr	r0, [pc, #344]	@ (801ea94 <rmw_init+0x228>)
 801e93a:	f7f7 f857 	bl	80159ec <rmw_uxrce_init_publisher_memory>
 801e93e:	2201      	movs	r2, #1
 801e940:	4955      	ldr	r1, [pc, #340]	@ (801ea98 <rmw_init+0x22c>)
 801e942:	4856      	ldr	r0, [pc, #344]	@ (801ea9c <rmw_init+0x230>)
 801e944:	f7f7 f812 	bl	801596c <rmw_uxrce_init_service_memory>
 801e948:	2201      	movs	r2, #1
 801e94a:	4955      	ldr	r1, [pc, #340]	@ (801eaa0 <rmw_init+0x234>)
 801e94c:	4855      	ldr	r0, [pc, #340]	@ (801eaa4 <rmw_init+0x238>)
 801e94e:	f7f7 f82d 	bl	80159ac <rmw_uxrce_init_client_memory>
 801e952:	220f      	movs	r2, #15
 801e954:	4954      	ldr	r1, [pc, #336]	@ (801eaa8 <rmw_init+0x23c>)
 801e956:	4855      	ldr	r0, [pc, #340]	@ (801eaac <rmw_init+0x240>)
 801e958:	f7f7 f8c8 	bl	8015aec <rmw_uxrce_init_topic_memory>
 801e95c:	2203      	movs	r2, #3
 801e95e:	4954      	ldr	r1, [pc, #336]	@ (801eab0 <rmw_init+0x244>)
 801e960:	4854      	ldr	r0, [pc, #336]	@ (801eab4 <rmw_init+0x248>)
 801e962:	f7f7 f903 	bl	8015b6c <rmw_uxrce_init_init_options_impl_memory>
 801e966:	2204      	movs	r2, #4
 801e968:	4953      	ldr	r1, [pc, #332]	@ (801eab8 <rmw_init+0x24c>)
 801e96a:	4854      	ldr	r0, [pc, #336]	@ (801eabc <rmw_init+0x250>)
 801e96c:	f7f7 f91e 	bl	8015bac <rmw_uxrce_init_wait_set_memory>
 801e970:	4953      	ldr	r1, [pc, #332]	@ (801eac0 <rmw_init+0x254>)
 801e972:	4854      	ldr	r0, [pc, #336]	@ (801eac4 <rmw_init+0x258>)
 801e974:	2204      	movs	r2, #4
 801e976:	f7f7 f939 	bl	8015bec <rmw_uxrce_init_guard_condition_memory>
 801e97a:	4642      	mov	r2, r8
 801e97c:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 801e97e:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801e980:	f7f6 ffbc 	bl	80158fc <rmw_uxrce_transport_init>
 801e984:	4607      	mov	r7, r0
 801e986:	2800      	cmp	r0, #0
 801e988:	d158      	bne.n	801ea3c <rmw_init+0x1d0>
 801e98a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801e98c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 801e990:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 801e994:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801e996:	4628      	mov	r0, r5
 801e998:	f7f8 fe6e 	bl	8017678 <uxr_init_session>
 801e99c:	4622      	mov	r2, r4
 801e99e:	494a      	ldr	r1, [pc, #296]	@ (801eac8 <rmw_init+0x25c>)
 801e9a0:	4628      	mov	r0, r5
 801e9a2:	f7f8 fe8d 	bl	80176c0 <uxr_set_topic_callback>
 801e9a6:	463a      	mov	r2, r7
 801e9a8:	4948      	ldr	r1, [pc, #288]	@ (801eacc <rmw_init+0x260>)
 801e9aa:	4628      	mov	r0, r5
 801e9ac:	f7f8 fe84 	bl	80176b8 <uxr_set_status_callback>
 801e9b0:	463a      	mov	r2, r7
 801e9b2:	4947      	ldr	r1, [pc, #284]	@ (801ead0 <rmw_init+0x264>)
 801e9b4:	4628      	mov	r0, r5
 801e9b6:	f7f8 fe87 	bl	80176c8 <uxr_set_request_callback>
 801e9ba:	463a      	mov	r2, r7
 801e9bc:	4945      	ldr	r1, [pc, #276]	@ (801ead4 <rmw_init+0x268>)
 801e9be:	4628      	mov	r0, r5
 801e9c0:	f7f8 fe86 	bl	80176d0 <uxr_set_reply_callback>
 801e9c4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801e9c8:	2304      	movs	r3, #4
 801e9ca:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 801e9ce:	0092      	lsls	r2, r2, #2
 801e9d0:	4628      	mov	r0, r5
 801e9d2:	f7f8 febd 	bl	8017750 <uxr_create_input_reliable_stream>
 801e9d6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801e9da:	2304      	movs	r3, #4
 801e9dc:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 801e9e0:	0092      	lsls	r2, r2, #2
 801e9e2:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801e9e6:	4628      	mov	r0, r5
 801e9e8:	f7f8 fe88 	bl	80176fc <uxr_create_output_reliable_stream>
 801e9ec:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 801e9f0:	4628      	mov	r0, r5
 801e9f2:	f7f8 fea7 	bl	8017744 <uxr_create_input_best_effort_stream>
 801e9f6:	f241 3194 	movw	r1, #5012	@ 0x1394
 801e9fa:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801e9fe:	4628      	mov	r0, r5
 801ea00:	4421      	add	r1, r4
 801ea02:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801ea06:	f7f8 fe67 	bl	80176d8 <uxr_create_output_best_effort_stream>
 801ea0a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801ea0e:	4628      	mov	r0, r5
 801ea10:	f7f9 fc70 	bl	80182f4 <uxr_create_session>
 801ea14:	b1f8      	cbz	r0, 801ea56 <rmw_init+0x1ea>
 801ea16:	4638      	mov	r0, r7
 801ea18:	b003      	add	sp, #12
 801ea1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ea1e:	270b      	movs	r7, #11
 801ea20:	4638      	mov	r0, r7
 801ea22:	b003      	add	sp, #12
 801ea24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ea28:	2701      	movs	r7, #1
 801ea2a:	4638      	mov	r0, r7
 801ea2c:	b003      	add	sp, #12
 801ea2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ea32:	270c      	movs	r7, #12
 801ea34:	4638      	mov	r0, r7
 801ea36:	b003      	add	sp, #12
 801ea38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ea3c:	4648      	mov	r0, r9
 801ea3e:	f7f8 fc55 	bl	80172ec <uxr_close_custom_transport>
 801ea42:	4621      	mov	r1, r4
 801ea44:	480c      	ldr	r0, [pc, #48]	@ (801ea78 <rmw_init+0x20c>)
 801ea46:	f7ff fdb5 	bl	801e5b4 <put_memory>
 801ea4a:	4638      	mov	r0, r7
 801ea4c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 801ea50:	b003      	add	sp, #12
 801ea52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ea56:	4648      	mov	r0, r9
 801ea58:	f7f8 fc48 	bl	80172ec <uxr_close_custom_transport>
 801ea5c:	4621      	mov	r1, r4
 801ea5e:	4806      	ldr	r0, [pc, #24]	@ (801ea78 <rmw_init+0x20c>)
 801ea60:	f7ff fda8 	bl	801e5b4 <put_memory>
 801ea64:	64f7      	str	r7, [r6, #76]	@ 0x4c
 801ea66:	2701      	movs	r7, #1
 801ea68:	e7d5      	b.n	801ea16 <rmw_init+0x1aa>
 801ea6a:	bf00      	nop
 801ea6c:	08025848 	.word	0x08025848
 801ea70:	24069234 	.word	0x24069234
 801ea74:	240654e0 	.word	0x240654e0
 801ea78:	24069224 	.word	0x24069224
 801ea7c:	24066a88 	.word	0x24066a88
 801ea80:	24064b04 	.word	0x24064b04
 801ea84:	240691f4 	.word	0x240691f4
 801ea88:	24068b88 	.word	0x24068b88
 801ea8c:	24069244 	.word	0x24069244
 801ea90:	24064ba8 	.word	0x24064ba8
 801ea94:	24069204 	.word	0x24069204
 801ea98:	24065418 	.word	0x24065418
 801ea9c:	24069214 	.word	0x24069214
 801eaa0:	24064938 	.word	0x24064938
 801eaa4:	24064928 	.word	0x24064928
 801eaa8:	24068fc0 	.word	0x24068fc0
 801eaac:	24069254 	.word	0x24069254
 801eab0:	24064a80 	.word	0x24064a80
 801eab4:	240691e4 	.word	0x240691e4
 801eab8:	24069164 	.word	0x24069164
 801eabc:	24069264 	.word	0x24069264
 801eac0:	24064a00 	.word	0x24064a00
 801eac4:	240691d4 	.word	0x240691d4
 801eac8:	08021511 	.word	0x08021511
 801eacc:	08021509 	.word	0x08021509
 801ead0:	080215a9 	.word	0x080215a9
 801ead4:	08021645 	.word	0x08021645

0801ead8 <rmw_context_fini>:
 801ead8:	4b17      	ldr	r3, [pc, #92]	@ (801eb38 <rmw_context_fini+0x60>)
 801eada:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 801eadc:	b570      	push	{r4, r5, r6, lr}
 801eade:	681c      	ldr	r4, [r3, #0]
 801eae0:	4605      	mov	r5, r0
 801eae2:	b334      	cbz	r4, 801eb32 <rmw_context_fini+0x5a>
 801eae4:	2600      	movs	r6, #0
 801eae6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801eaea:	6902      	ldr	r2, [r0, #16]
 801eaec:	428a      	cmp	r2, r1
 801eaee:	d018      	beq.n	801eb22 <rmw_context_fini+0x4a>
 801eaf0:	2c00      	cmp	r4, #0
 801eaf2:	d1f8      	bne.n	801eae6 <rmw_context_fini+0xe>
 801eaf4:	b189      	cbz	r1, 801eb1a <rmw_context_fini+0x42>
 801eaf6:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 801eafa:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 801eafe:	789b      	ldrb	r3, [r3, #2]
 801eb00:	2b01      	cmp	r3, #1
 801eb02:	bf14      	ite	ne
 801eb04:	210a      	movne	r1, #10
 801eb06:	2100      	moveq	r1, #0
 801eb08:	f7f9 fbcc 	bl	80182a4 <uxr_delete_session_retries>
 801eb0c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801eb0e:	f7f7 f88d 	bl	8015c2c <rmw_uxrce_fini_session_memory>
 801eb12:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801eb14:	3010      	adds	r0, #16
 801eb16:	f7f8 fbe9 	bl	80172ec <uxr_close_custom_transport>
 801eb1a:	2300      	movs	r3, #0
 801eb1c:	4630      	mov	r0, r6
 801eb1e:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801eb20:	bd70      	pop	{r4, r5, r6, pc}
 801eb22:	3018      	adds	r0, #24
 801eb24:	f000 f90e 	bl	801ed44 <rmw_destroy_node>
 801eb28:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801eb2a:	4606      	mov	r6, r0
 801eb2c:	2c00      	cmp	r4, #0
 801eb2e:	d1da      	bne.n	801eae6 <rmw_context_fini+0xe>
 801eb30:	e7e0      	b.n	801eaf4 <rmw_context_fini+0x1c>
 801eb32:	4626      	mov	r6, r4
 801eb34:	e7de      	b.n	801eaf4 <rmw_context_fini+0x1c>
 801eb36:	bf00      	nop
 801eb38:	240691f4 	.word	0x240691f4

0801eb3c <create_topic>:
 801eb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eb40:	4605      	mov	r5, r0
 801eb42:	b084      	sub	sp, #16
 801eb44:	4822      	ldr	r0, [pc, #136]	@ (801ebd0 <create_topic+0x94>)
 801eb46:	460f      	mov	r7, r1
 801eb48:	4616      	mov	r6, r2
 801eb4a:	f7ff fd23 	bl	801e594 <get_memory>
 801eb4e:	4604      	mov	r4, r0
 801eb50:	2800      	cmp	r0, #0
 801eb52:	d039      	beq.n	801ebc8 <create_topic+0x8c>
 801eb54:	692b      	ldr	r3, [r5, #16]
 801eb56:	2102      	movs	r1, #2
 801eb58:	6884      	ldr	r4, [r0, #8]
 801eb5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801eb5e:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 801ebd8 <create_topic+0x9c>
 801eb62:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801eb66:	1c42      	adds	r2, r0, #1
 801eb68:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801eb6c:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801eb70:	f7f8 fbc0 	bl	80172f4 <uxr_object_id>
 801eb74:	223c      	movs	r2, #60	@ 0x3c
 801eb76:	6120      	str	r0, [r4, #16]
 801eb78:	4641      	mov	r1, r8
 801eb7a:	4638      	mov	r0, r7
 801eb7c:	f7f7 fad4 	bl	8016128 <generate_topic_name>
 801eb80:	b1f0      	cbz	r0, 801ebc0 <create_topic+0x84>
 801eb82:	4f14      	ldr	r7, [pc, #80]	@ (801ebd4 <create_topic+0x98>)
 801eb84:	4630      	mov	r0, r6
 801eb86:	2264      	movs	r2, #100	@ 0x64
 801eb88:	4639      	mov	r1, r7
 801eb8a:	f7f7 fa9f 	bl	80160cc <generate_type_name>
 801eb8e:	b1b8      	cbz	r0, 801ebc0 <create_topic+0x84>
 801eb90:	6928      	ldr	r0, [r5, #16]
 801eb92:	2106      	movs	r1, #6
 801eb94:	696b      	ldr	r3, [r5, #20]
 801eb96:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801eb9a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801eb9e:	f8cd 8000 	str.w	r8, [sp]
 801eba2:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801eba6:	6811      	ldr	r1, [r2, #0]
 801eba8:	6922      	ldr	r2, [r4, #16]
 801ebaa:	f7f8 f927 	bl	8016dfc <uxr_buffer_create_topic_bin>
 801ebae:	4602      	mov	r2, r0
 801ebb0:	6928      	ldr	r0, [r5, #16]
 801ebb2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801ebb6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801ebba:	f7f7 f9bb 	bl	8015f34 <run_xrce_session>
 801ebbe:	b918      	cbnz	r0, 801ebc8 <create_topic+0x8c>
 801ebc0:	4620      	mov	r0, r4
 801ebc2:	2400      	movs	r4, #0
 801ebc4:	f7f7 f8a8 	bl	8015d18 <rmw_uxrce_fini_topic_memory>
 801ebc8:	4620      	mov	r0, r4
 801ebca:	b004      	add	sp, #16
 801ebcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ebd0:	24069254 	.word	0x24069254
 801ebd4:	240693b0 	.word	0x240693b0
 801ebd8:	24069374 	.word	0x24069374

0801ebdc <destroy_topic>:
 801ebdc:	b538      	push	{r3, r4, r5, lr}
 801ebde:	6985      	ldr	r5, [r0, #24]
 801ebe0:	b1dd      	cbz	r5, 801ec1a <destroy_topic+0x3e>
 801ebe2:	4604      	mov	r4, r0
 801ebe4:	6928      	ldr	r0, [r5, #16]
 801ebe6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801ebea:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ebee:	6922      	ldr	r2, [r4, #16]
 801ebf0:	6819      	ldr	r1, [r3, #0]
 801ebf2:	f7f8 f885 	bl	8016d00 <uxr_buffer_delete_entity>
 801ebf6:	4602      	mov	r2, r0
 801ebf8:	6928      	ldr	r0, [r5, #16]
 801ebfa:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801ebfe:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801ec02:	f7f7 f997 	bl	8015f34 <run_xrce_session>
 801ec06:	4603      	mov	r3, r0
 801ec08:	4620      	mov	r0, r4
 801ec0a:	2b00      	cmp	r3, #0
 801ec0c:	bf14      	ite	ne
 801ec0e:	2400      	movne	r4, #0
 801ec10:	2402      	moveq	r4, #2
 801ec12:	f7f7 f881 	bl	8015d18 <rmw_uxrce_fini_topic_memory>
 801ec16:	4620      	mov	r0, r4
 801ec18:	bd38      	pop	{r3, r4, r5, pc}
 801ec1a:	2401      	movs	r4, #1
 801ec1c:	4620      	mov	r0, r4
 801ec1e:	bd38      	pop	{r3, r4, r5, pc}

0801ec20 <create_node>:
 801ec20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ec24:	b083      	sub	sp, #12
 801ec26:	2b00      	cmp	r3, #0
 801ec28:	d064      	beq.n	801ecf4 <create_node+0xd4>
 801ec2a:	4606      	mov	r6, r0
 801ec2c:	4838      	ldr	r0, [pc, #224]	@ (801ed10 <create_node+0xf0>)
 801ec2e:	460f      	mov	r7, r1
 801ec30:	4690      	mov	r8, r2
 801ec32:	461d      	mov	r5, r3
 801ec34:	f7ff fcae 	bl	801e594 <get_memory>
 801ec38:	2800      	cmp	r0, #0
 801ec3a:	d05b      	beq.n	801ecf4 <create_node+0xd4>
 801ec3c:	6884      	ldr	r4, [r0, #8]
 801ec3e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801ec40:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 801ec44:	f104 0518 	add.w	r5, r4, #24
 801ec48:	6123      	str	r3, [r4, #16]
 801ec4a:	f7ff fd0b 	bl	801e664 <rmw_get_implementation_identifier>
 801ec4e:	f8c4 9020 	str.w	r9, [r4, #32]
 801ec52:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801ec56:	4630      	mov	r0, r6
 801ec58:	f7e1 fb4c 	bl	80002f4 <strlen>
 801ec5c:	1c42      	adds	r2, r0, #1
 801ec5e:	2a3c      	cmp	r2, #60	@ 0x3c
 801ec60:	d840      	bhi.n	801ece4 <create_node+0xc4>
 801ec62:	4648      	mov	r0, r9
 801ec64:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 801ec68:	4631      	mov	r1, r6
 801ec6a:	f003 fbd0 	bl	802240e <memcpy>
 801ec6e:	4638      	mov	r0, r7
 801ec70:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 801ec74:	f7e1 fb3e 	bl	80002f4 <strlen>
 801ec78:	1c42      	adds	r2, r0, #1
 801ec7a:	2a3c      	cmp	r2, #60	@ 0x3c
 801ec7c:	d832      	bhi.n	801ece4 <create_node+0xc4>
 801ec7e:	4639      	mov	r1, r7
 801ec80:	4648      	mov	r0, r9
 801ec82:	f003 fbc4 	bl	802240e <memcpy>
 801ec86:	6923      	ldr	r3, [r4, #16]
 801ec88:	2101      	movs	r1, #1
 801ec8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801ec8e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 801ec92:	1842      	adds	r2, r0, r1
 801ec94:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 801ec98:	f7f8 fb2c 	bl	80172f4 <uxr_object_id>
 801ec9c:	6160      	str	r0, [r4, #20]
 801ec9e:	783b      	ldrb	r3, [r7, #0]
 801eca0:	2b2f      	cmp	r3, #47	@ 0x2f
 801eca2:	d12c      	bne.n	801ecfe <create_node+0xde>
 801eca4:	787b      	ldrb	r3, [r7, #1]
 801eca6:	bb53      	cbnz	r3, 801ecfe <create_node+0xde>
 801eca8:	4633      	mov	r3, r6
 801ecaa:	4a1a      	ldr	r2, [pc, #104]	@ (801ed14 <create_node+0xf4>)
 801ecac:	213c      	movs	r1, #60	@ 0x3c
 801ecae:	481a      	ldr	r0, [pc, #104]	@ (801ed18 <create_node+0xf8>)
 801ecb0:	f003 f920 	bl	8021ef4 <sniprintf>
 801ecb4:	6920      	ldr	r0, [r4, #16]
 801ecb6:	2106      	movs	r1, #6
 801ecb8:	fa1f f388 	uxth.w	r3, r8
 801ecbc:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801ecc0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ecc4:	9101      	str	r1, [sp, #4]
 801ecc6:	4914      	ldr	r1, [pc, #80]	@ (801ed18 <create_node+0xf8>)
 801ecc8:	9100      	str	r1, [sp, #0]
 801ecca:	6811      	ldr	r1, [r2, #0]
 801eccc:	6962      	ldr	r2, [r4, #20]
 801ecce:	f7f8 f863 	bl	8016d98 <uxr_buffer_create_participant_bin>
 801ecd2:	4602      	mov	r2, r0
 801ecd4:	6920      	ldr	r0, [r4, #16]
 801ecd6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801ecda:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801ecde:	f7f7 f929 	bl	8015f34 <run_xrce_session>
 801ece2:	b918      	cbnz	r0, 801ecec <create_node+0xcc>
 801ece4:	4628      	mov	r0, r5
 801ece6:	2500      	movs	r5, #0
 801ece8:	f7f6 ffa6 	bl	8015c38 <rmw_uxrce_fini_node_memory>
 801ecec:	4628      	mov	r0, r5
 801ecee:	b003      	add	sp, #12
 801ecf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ecf4:	2500      	movs	r5, #0
 801ecf6:	4628      	mov	r0, r5
 801ecf8:	b003      	add	sp, #12
 801ecfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ecfe:	463b      	mov	r3, r7
 801ed00:	4a06      	ldr	r2, [pc, #24]	@ (801ed1c <create_node+0xfc>)
 801ed02:	213c      	movs	r1, #60	@ 0x3c
 801ed04:	9600      	str	r6, [sp, #0]
 801ed06:	4804      	ldr	r0, [pc, #16]	@ (801ed18 <create_node+0xf8>)
 801ed08:	f003 f8f4 	bl	8021ef4 <sniprintf>
 801ed0c:	e7d2      	b.n	801ecb4 <create_node+0x94>
 801ed0e:	bf00      	nop
 801ed10:	240691f4 	.word	0x240691f4
 801ed14:	080248cc 	.word	0x080248cc
 801ed18:	24069414 	.word	0x24069414
 801ed1c:	0802525c 	.word	0x0802525c

0801ed20 <rmw_create_node>:
 801ed20:	468c      	mov	ip, r1
 801ed22:	4611      	mov	r1, r2
 801ed24:	f1bc 0f00 	cmp.w	ip, #0
 801ed28:	d00a      	beq.n	801ed40 <rmw_create_node+0x20>
 801ed2a:	f89c 3000 	ldrb.w	r3, [ip]
 801ed2e:	b13b      	cbz	r3, 801ed40 <rmw_create_node+0x20>
 801ed30:	b132      	cbz	r2, 801ed40 <rmw_create_node+0x20>
 801ed32:	7813      	ldrb	r3, [r2, #0]
 801ed34:	b123      	cbz	r3, 801ed40 <rmw_create_node+0x20>
 801ed36:	4603      	mov	r3, r0
 801ed38:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 801ed3a:	4660      	mov	r0, ip
 801ed3c:	f7ff bf70 	b.w	801ec20 <create_node>
 801ed40:	2000      	movs	r0, #0
 801ed42:	4770      	bx	lr

0801ed44 <rmw_destroy_node>:
 801ed44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed46:	b328      	cbz	r0, 801ed94 <rmw_destroy_node+0x50>
 801ed48:	4607      	mov	r7, r0
 801ed4a:	6800      	ldr	r0, [r0, #0]
 801ed4c:	b120      	cbz	r0, 801ed58 <rmw_destroy_node+0x14>
 801ed4e:	4b37      	ldr	r3, [pc, #220]	@ (801ee2c <rmw_destroy_node+0xe8>)
 801ed50:	6819      	ldr	r1, [r3, #0]
 801ed52:	f7e1 fac5 	bl	80002e0 <strcmp>
 801ed56:	b9e8      	cbnz	r0, 801ed94 <rmw_destroy_node+0x50>
 801ed58:	687d      	ldr	r5, [r7, #4]
 801ed5a:	b1dd      	cbz	r5, 801ed94 <rmw_destroy_node+0x50>
 801ed5c:	4b34      	ldr	r3, [pc, #208]	@ (801ee30 <rmw_destroy_node+0xec>)
 801ed5e:	681c      	ldr	r4, [r3, #0]
 801ed60:	2c00      	cmp	r4, #0
 801ed62:	d060      	beq.n	801ee26 <rmw_destroy_node+0xe2>
 801ed64:	2600      	movs	r6, #0
 801ed66:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801ed6a:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801ed6e:	429d      	cmp	r5, r3
 801ed70:	d013      	beq.n	801ed9a <rmw_destroy_node+0x56>
 801ed72:	2c00      	cmp	r4, #0
 801ed74:	d1f7      	bne.n	801ed66 <rmw_destroy_node+0x22>
 801ed76:	4b2f      	ldr	r3, [pc, #188]	@ (801ee34 <rmw_destroy_node+0xf0>)
 801ed78:	681c      	ldr	r4, [r3, #0]
 801ed7a:	b1c4      	cbz	r4, 801edae <rmw_destroy_node+0x6a>
 801ed7c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801ed80:	6a0b      	ldr	r3, [r1, #32]
 801ed82:	429d      	cmp	r5, r3
 801ed84:	d1f9      	bne.n	801ed7a <rmw_destroy_node+0x36>
 801ed86:	317c      	adds	r1, #124	@ 0x7c
 801ed88:	4638      	mov	r0, r7
 801ed8a:	f000 fbff 	bl	801f58c <rmw_destroy_subscription>
 801ed8e:	2801      	cmp	r0, #1
 801ed90:	4606      	mov	r6, r0
 801ed92:	d1f2      	bne.n	801ed7a <rmw_destroy_node+0x36>
 801ed94:	2601      	movs	r6, #1
 801ed96:	4630      	mov	r0, r6
 801ed98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ed9a:	3184      	adds	r1, #132	@ 0x84
 801ed9c:	4638      	mov	r0, r7
 801ed9e:	f7f6 fd59 	bl	8015854 <rmw_destroy_publisher>
 801eda2:	2801      	cmp	r0, #1
 801eda4:	4606      	mov	r6, r0
 801eda6:	d0f5      	beq.n	801ed94 <rmw_destroy_node+0x50>
 801eda8:	2c00      	cmp	r4, #0
 801edaa:	d1dc      	bne.n	801ed66 <rmw_destroy_node+0x22>
 801edac:	e7e3      	b.n	801ed76 <rmw_destroy_node+0x32>
 801edae:	4b22      	ldr	r3, [pc, #136]	@ (801ee38 <rmw_destroy_node+0xf4>)
 801edb0:	681c      	ldr	r4, [r3, #0]
 801edb2:	b16c      	cbz	r4, 801edd0 <rmw_destroy_node+0x8c>
 801edb4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801edb8:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801edba:	429d      	cmp	r5, r3
 801edbc:	d1f9      	bne.n	801edb2 <rmw_destroy_node+0x6e>
 801edbe:	317c      	adds	r1, #124	@ 0x7c
 801edc0:	4638      	mov	r0, r7
 801edc2:	f000 fa6d 	bl	801f2a0 <rmw_destroy_service>
 801edc6:	2801      	cmp	r0, #1
 801edc8:	4606      	mov	r6, r0
 801edca:	d0e3      	beq.n	801ed94 <rmw_destroy_node+0x50>
 801edcc:	2c00      	cmp	r4, #0
 801edce:	d1f1      	bne.n	801edb4 <rmw_destroy_node+0x70>
 801edd0:	4b1a      	ldr	r3, [pc, #104]	@ (801ee3c <rmw_destroy_node+0xf8>)
 801edd2:	681c      	ldr	r4, [r3, #0]
 801edd4:	b16c      	cbz	r4, 801edf2 <rmw_destroy_node+0xae>
 801edd6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801edda:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801eddc:	429d      	cmp	r5, r3
 801edde:	d1f9      	bne.n	801edd4 <rmw_destroy_node+0x90>
 801ede0:	317c      	adds	r1, #124	@ 0x7c
 801ede2:	4638      	mov	r0, r7
 801ede4:	f7ff fbfa 	bl	801e5dc <rmw_destroy_client>
 801ede8:	2801      	cmp	r0, #1
 801edea:	4606      	mov	r6, r0
 801edec:	d0d2      	beq.n	801ed94 <rmw_destroy_node+0x50>
 801edee:	2c00      	cmp	r4, #0
 801edf0:	d1f1      	bne.n	801edd6 <rmw_destroy_node+0x92>
 801edf2:	6928      	ldr	r0, [r5, #16]
 801edf4:	696a      	ldr	r2, [r5, #20]
 801edf6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801edfa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801edfe:	6819      	ldr	r1, [r3, #0]
 801ee00:	f7f7 ff7e 	bl	8016d00 <uxr_buffer_delete_entity>
 801ee04:	4602      	mov	r2, r0
 801ee06:	6928      	ldr	r0, [r5, #16]
 801ee08:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801ee0c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801ee10:	f7f7 f890 	bl	8015f34 <run_xrce_session>
 801ee14:	4603      	mov	r3, r0
 801ee16:	4638      	mov	r0, r7
 801ee18:	2b00      	cmp	r3, #0
 801ee1a:	bf08      	it	eq
 801ee1c:	2602      	moveq	r6, #2
 801ee1e:	f7f6 ff0b 	bl	8015c38 <rmw_uxrce_fini_node_memory>
 801ee22:	4630      	mov	r0, r6
 801ee24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ee26:	4626      	mov	r6, r4
 801ee28:	e7a5      	b.n	801ed76 <rmw_destroy_node+0x32>
 801ee2a:	bf00      	nop
 801ee2c:	08025848 	.word	0x08025848
 801ee30:	24069204 	.word	0x24069204
 801ee34:	24069244 	.word	0x24069244
 801ee38:	24069214 	.word	0x24069214
 801ee3c:	24064928 	.word	0x24064928

0801ee40 <rmw_node_get_graph_guard_condition>:
 801ee40:	6843      	ldr	r3, [r0, #4]
 801ee42:	6918      	ldr	r0, [r3, #16]
 801ee44:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 801ee48:	4770      	bx	lr
 801ee4a:	bf00      	nop

0801ee4c <rmw_send_request>:
 801ee4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ee50:	4604      	mov	r4, r0
 801ee52:	6800      	ldr	r0, [r0, #0]
 801ee54:	b08b      	sub	sp, #44	@ 0x2c
 801ee56:	460e      	mov	r6, r1
 801ee58:	4615      	mov	r5, r2
 801ee5a:	b128      	cbz	r0, 801ee68 <rmw_send_request+0x1c>
 801ee5c:	4b21      	ldr	r3, [pc, #132]	@ (801eee4 <rmw_send_request+0x98>)
 801ee5e:	6819      	ldr	r1, [r3, #0]
 801ee60:	f7e1 fa3e 	bl	80002e0 <strcmp>
 801ee64:	2800      	cmp	r0, #0
 801ee66:	d139      	bne.n	801eedc <rmw_send_request+0x90>
 801ee68:	6864      	ldr	r4, [r4, #4]
 801ee6a:	2700      	movs	r7, #0
 801ee6c:	6963      	ldr	r3, [r4, #20]
 801ee6e:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801ee72:	689b      	ldr	r3, [r3, #8]
 801ee74:	4798      	blx	r3
 801ee76:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801ee7a:	4630      	mov	r0, r6
 801ee7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ee80:	4798      	blx	r3
 801ee82:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801ee86:	9000      	str	r0, [sp, #0]
 801ee88:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801ee8c:	6922      	ldr	r2, [r4, #16]
 801ee8e:	ab02      	add	r3, sp, #8
 801ee90:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801ee92:	f7fa fb37 	bl	8019504 <uxr_prepare_output_stream>
 801ee96:	e9c5 0700 	strd	r0, r7, [r5]
 801ee9a:	b198      	cbz	r0, 801eec4 <rmw_send_request+0x78>
 801ee9c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801eea0:	a902      	add	r1, sp, #8
 801eea2:	4630      	mov	r0, r6
 801eea4:	4798      	blx	r3
 801eea6:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801eeaa:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801eeae:	2b01      	cmp	r3, #1
 801eeb0:	d00c      	beq.n	801eecc <rmw_send_request+0x80>
 801eeb2:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801eeb4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801eeb8:	f7f9 f82a 	bl	8017f10 <uxr_run_session_until_confirm_delivery>
 801eebc:	4638      	mov	r0, r7
 801eebe:	b00b      	add	sp, #44	@ 0x2c
 801eec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eec4:	2001      	movs	r0, #1
 801eec6:	b00b      	add	sp, #44	@ 0x2c
 801eec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eecc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801eed0:	f7f8 fc64 	bl	801779c <uxr_flash_output_streams>
 801eed4:	4638      	mov	r0, r7
 801eed6:	b00b      	add	sp, #44	@ 0x2c
 801eed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eedc:	200c      	movs	r0, #12
 801eede:	b00b      	add	sp, #44	@ 0x2c
 801eee0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eee4:	08025848 	.word	0x08025848

0801eee8 <rmw_take_request>:
 801eee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801eeec:	4605      	mov	r5, r0
 801eeee:	6800      	ldr	r0, [r0, #0]
 801eef0:	b089      	sub	sp, #36	@ 0x24
 801eef2:	460c      	mov	r4, r1
 801eef4:	4690      	mov	r8, r2
 801eef6:	461e      	mov	r6, r3
 801eef8:	b128      	cbz	r0, 801ef06 <rmw_take_request+0x1e>
 801eefa:	4b28      	ldr	r3, [pc, #160]	@ (801ef9c <rmw_take_request+0xb4>)
 801eefc:	6819      	ldr	r1, [r3, #0]
 801eefe:	f7e1 f9ef 	bl	80002e0 <strcmp>
 801ef02:	2800      	cmp	r0, #0
 801ef04:	d146      	bne.n	801ef94 <rmw_take_request+0xac>
 801ef06:	b10e      	cbz	r6, 801ef0c <rmw_take_request+0x24>
 801ef08:	2300      	movs	r3, #0
 801ef0a:	7033      	strb	r3, [r6, #0]
 801ef0c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801ef10:	f7f6 ff92 	bl	8015e38 <rmw_uxrce_clean_expired_static_input_buffer>
 801ef14:	4648      	mov	r0, r9
 801ef16:	f7f6 ff65 	bl	8015de4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801ef1a:	4607      	mov	r7, r0
 801ef1c:	b3b0      	cbz	r0, 801ef8c <rmw_take_request+0xa4>
 801ef1e:	6885      	ldr	r5, [r0, #8]
 801ef20:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 801ef24:	f8d5 383c 	ldr.w	r3, [r5, #2108]	@ 0x83c
 801ef28:	e9c4 3208 	strd	r3, r2, [r4, #32]
 801ef2c:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801ef30:	7423      	strb	r3, [r4, #16]
 801ef32:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	@ 0x834
 801ef36:	f895 3836 	ldrb.w	r3, [r5, #2102]	@ 0x836
 801ef3a:	f8a4 2011 	strh.w	r2, [r4, #17]
 801ef3e:	74e3      	strb	r3, [r4, #19]
 801ef40:	f8d5 1828 	ldr.w	r1, [r5, #2088]	@ 0x828
 801ef44:	f8d5 282c 	ldr.w	r2, [r5, #2092]	@ 0x82c
 801ef48:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 801ef4c:	6161      	str	r1, [r4, #20]
 801ef4e:	61a2      	str	r2, [r4, #24]
 801ef50:	61e3      	str	r3, [r4, #28]
 801ef52:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801ef56:	689b      	ldr	r3, [r3, #8]
 801ef58:	4798      	blx	r3
 801ef5a:	6844      	ldr	r4, [r0, #4]
 801ef5c:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801ef60:	f105 0110 	add.w	r1, r5, #16
 801ef64:	4668      	mov	r0, sp
 801ef66:	f7f5 f88f 	bl	8014088 <ucdr_init_buffer>
 801ef6a:	4641      	mov	r1, r8
 801ef6c:	68e3      	ldr	r3, [r4, #12]
 801ef6e:	4668      	mov	r0, sp
 801ef70:	4798      	blx	r3
 801ef72:	4639      	mov	r1, r7
 801ef74:	4604      	mov	r4, r0
 801ef76:	480a      	ldr	r0, [pc, #40]	@ (801efa0 <rmw_take_request+0xb8>)
 801ef78:	f7ff fb1c 	bl	801e5b4 <put_memory>
 801ef7c:	b106      	cbz	r6, 801ef80 <rmw_take_request+0x98>
 801ef7e:	7034      	strb	r4, [r6, #0]
 801ef80:	f084 0001 	eor.w	r0, r4, #1
 801ef84:	b2c0      	uxtb	r0, r0
 801ef86:	b009      	add	sp, #36	@ 0x24
 801ef88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ef8c:	2001      	movs	r0, #1
 801ef8e:	b009      	add	sp, #36	@ 0x24
 801ef90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ef94:	200c      	movs	r0, #12
 801ef96:	b009      	add	sp, #36	@ 0x24
 801ef98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ef9c:	08025848 	.word	0x08025848
 801efa0:	24069234 	.word	0x24069234

0801efa4 <rmw_send_response>:
 801efa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801efa6:	4605      	mov	r5, r0
 801efa8:	6800      	ldr	r0, [r0, #0]
 801efaa:	b091      	sub	sp, #68	@ 0x44
 801efac:	460c      	mov	r4, r1
 801efae:	4616      	mov	r6, r2
 801efb0:	b128      	cbz	r0, 801efbe <rmw_send_response+0x1a>
 801efb2:	4b29      	ldr	r3, [pc, #164]	@ (801f058 <rmw_send_response+0xb4>)
 801efb4:	6819      	ldr	r1, [r3, #0]
 801efb6:	f7e1 f993 	bl	80002e0 <strcmp>
 801efba:	2800      	cmp	r0, #0
 801efbc:	d141      	bne.n	801f042 <rmw_send_response+0x9e>
 801efbe:	686d      	ldr	r5, [r5, #4]
 801efc0:	68a1      	ldr	r1, [r4, #8]
 801efc2:	6860      	ldr	r0, [r4, #4]
 801efc4:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801efc6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801efca:	9307      	str	r3, [sp, #28]
 801efcc:	4623      	mov	r3, r4
 801efce:	9206      	str	r2, [sp, #24]
 801efd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801efd4:	789b      	ldrb	r3, [r3, #2]
 801efd6:	f88d 2017 	strb.w	r2, [sp, #23]
 801efda:	f88d 3016 	strb.w	r3, [sp, #22]
 801efde:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801efe2:	68e2      	ldr	r2, [r4, #12]
 801efe4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801efe8:	ab02      	add	r3, sp, #8
 801efea:	696c      	ldr	r4, [r5, #20]
 801efec:	c307      	stmia	r3!, {r0, r1, r2}
 801efee:	68e3      	ldr	r3, [r4, #12]
 801eff0:	4798      	blx	r3
 801eff2:	6844      	ldr	r4, [r0, #4]
 801eff4:	4630      	mov	r0, r6
 801eff6:	6923      	ldr	r3, [r4, #16]
 801eff8:	4798      	blx	r3
 801effa:	f100 0318 	add.w	r3, r0, #24
 801effe:	6938      	ldr	r0, [r7, #16]
 801f000:	9300      	str	r3, [sp, #0]
 801f002:	ab08      	add	r3, sp, #32
 801f004:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f008:	692a      	ldr	r2, [r5, #16]
 801f00a:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801f00c:	f7fa fa7a 	bl	8019504 <uxr_prepare_output_stream>
 801f010:	b910      	cbnz	r0, 801f018 <rmw_send_response+0x74>
 801f012:	2001      	movs	r0, #1
 801f014:	b011      	add	sp, #68	@ 0x44
 801f016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f018:	a902      	add	r1, sp, #8
 801f01a:	a808      	add	r0, sp, #32
 801f01c:	f7fb fc02 	bl	801a824 <uxr_serialize_SampleIdentity>
 801f020:	68a3      	ldr	r3, [r4, #8]
 801f022:	a908      	add	r1, sp, #32
 801f024:	4630      	mov	r0, r6
 801f026:	4798      	blx	r3
 801f028:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 801f02c:	6938      	ldr	r0, [r7, #16]
 801f02e:	2b01      	cmp	r3, #1
 801f030:	d00a      	beq.n	801f048 <rmw_send_response+0xa4>
 801f032:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 801f034:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f038:	f7f8 ff6a 	bl	8017f10 <uxr_run_session_until_confirm_delivery>
 801f03c:	2000      	movs	r0, #0
 801f03e:	b011      	add	sp, #68	@ 0x44
 801f040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f042:	200c      	movs	r0, #12
 801f044:	b011      	add	sp, #68	@ 0x44
 801f046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f048:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f04c:	f7f8 fba6 	bl	801779c <uxr_flash_output_streams>
 801f050:	2000      	movs	r0, #0
 801f052:	b011      	add	sp, #68	@ 0x44
 801f054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f056:	bf00      	nop
 801f058:	08025848 	.word	0x08025848

0801f05c <rmw_take_response>:
 801f05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f060:	4604      	mov	r4, r0
 801f062:	6800      	ldr	r0, [r0, #0]
 801f064:	b088      	sub	sp, #32
 801f066:	460f      	mov	r7, r1
 801f068:	4690      	mov	r8, r2
 801f06a:	461d      	mov	r5, r3
 801f06c:	b120      	cbz	r0, 801f078 <rmw_take_response+0x1c>
 801f06e:	4b1d      	ldr	r3, [pc, #116]	@ (801f0e4 <rmw_take_response+0x88>)
 801f070:	6819      	ldr	r1, [r3, #0]
 801f072:	f7e1 f935 	bl	80002e0 <strcmp>
 801f076:	bb68      	cbnz	r0, 801f0d4 <rmw_take_response+0x78>
 801f078:	b10d      	cbz	r5, 801f07e <rmw_take_response+0x22>
 801f07a:	2300      	movs	r3, #0
 801f07c:	702b      	strb	r3, [r5, #0]
 801f07e:	6864      	ldr	r4, [r4, #4]
 801f080:	f7f6 feda 	bl	8015e38 <rmw_uxrce_clean_expired_static_input_buffer>
 801f084:	4620      	mov	r0, r4
 801f086:	f7f6 fead 	bl	8015de4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801f08a:	4606      	mov	r6, r0
 801f08c:	b330      	cbz	r0, 801f0dc <rmw_take_response+0x80>
 801f08e:	6963      	ldr	r3, [r4, #20]
 801f090:	6884      	ldr	r4, [r0, #8]
 801f092:	68db      	ldr	r3, [r3, #12]
 801f094:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 801f098:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801f09c:	e9c7 0108 	strd	r0, r1, [r7, #32]
 801f0a0:	4798      	blx	r3
 801f0a2:	6847      	ldr	r7, [r0, #4]
 801f0a4:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 801f0a8:	f104 0110 	add.w	r1, r4, #16
 801f0ac:	4668      	mov	r0, sp
 801f0ae:	f7f4 ffeb 	bl	8014088 <ucdr_init_buffer>
 801f0b2:	4641      	mov	r1, r8
 801f0b4:	68fb      	ldr	r3, [r7, #12]
 801f0b6:	4668      	mov	r0, sp
 801f0b8:	4798      	blx	r3
 801f0ba:	4631      	mov	r1, r6
 801f0bc:	4604      	mov	r4, r0
 801f0be:	480a      	ldr	r0, [pc, #40]	@ (801f0e8 <rmw_take_response+0x8c>)
 801f0c0:	f7ff fa78 	bl	801e5b4 <put_memory>
 801f0c4:	b105      	cbz	r5, 801f0c8 <rmw_take_response+0x6c>
 801f0c6:	702c      	strb	r4, [r5, #0]
 801f0c8:	f084 0001 	eor.w	r0, r4, #1
 801f0cc:	b2c0      	uxtb	r0, r0
 801f0ce:	b008      	add	sp, #32
 801f0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f0d4:	200c      	movs	r0, #12
 801f0d6:	b008      	add	sp, #32
 801f0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f0dc:	2001      	movs	r0, #1
 801f0de:	b008      	add	sp, #32
 801f0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f0e4:	08025848 	.word	0x08025848
 801f0e8:	24069234 	.word	0x24069234

0801f0ec <rmw_create_service>:
 801f0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0f0:	b091      	sub	sp, #68	@ 0x44
 801f0f2:	2900      	cmp	r1, #0
 801f0f4:	f000 80bb 	beq.w	801f26e <rmw_create_service+0x182>
 801f0f8:	4606      	mov	r6, r0
 801f0fa:	2800      	cmp	r0, #0
 801f0fc:	f000 80b7 	beq.w	801f26e <rmw_create_service+0x182>
 801f100:	4614      	mov	r4, r2
 801f102:	6800      	ldr	r0, [r0, #0]
 801f104:	4689      	mov	r9, r1
 801f106:	461d      	mov	r5, r3
 801f108:	f7f7 f826 	bl	8016158 <is_uxrce_rmw_identifier_valid>
 801f10c:	2c00      	cmp	r4, #0
 801f10e:	f000 80ae 	beq.w	801f26e <rmw_create_service+0x182>
 801f112:	f080 0001 	eor.w	r0, r0, #1
 801f116:	b2c0      	uxtb	r0, r0
 801f118:	2800      	cmp	r0, #0
 801f11a:	f040 80a8 	bne.w	801f26e <rmw_create_service+0x182>
 801f11e:	7823      	ldrb	r3, [r4, #0]
 801f120:	2b00      	cmp	r3, #0
 801f122:	f000 80a4 	beq.w	801f26e <rmw_create_service+0x182>
 801f126:	2d00      	cmp	r5, #0
 801f128:	f000 80a1 	beq.w	801f26e <rmw_create_service+0x182>
 801f12c:	4856      	ldr	r0, [pc, #344]	@ (801f288 <rmw_create_service+0x19c>)
 801f12e:	f8d6 8004 	ldr.w	r8, [r6, #4]
 801f132:	f7ff fa2f 	bl	801e594 <get_memory>
 801f136:	4606      	mov	r6, r0
 801f138:	2800      	cmp	r0, #0
 801f13a:	f000 8099 	beq.w	801f270 <rmw_create_service+0x184>
 801f13e:	6887      	ldr	r7, [r0, #8]
 801f140:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 801f144:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 801f148:	f7ff fa8c 	bl	801e664 <rmw_get_implementation_identifier>
 801f14c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801f14e:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 801f152:	4620      	mov	r0, r4
 801f154:	f7e1 f8ce 	bl	80002f4 <strlen>
 801f158:	1c42      	adds	r2, r0, #1
 801f15a:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 801f15e:	2a3c      	cmp	r2, #60	@ 0x3c
 801f160:	f200 808a 	bhi.w	801f278 <rmw_create_service+0x18c>
 801f164:	4621      	mov	r1, r4
 801f166:	4650      	mov	r0, sl
 801f168:	f003 f951 	bl	802240e <memcpy>
 801f16c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801f170:	4629      	mov	r1, r5
 801f172:	2250      	movs	r2, #80	@ 0x50
 801f174:	f107 0020 	add.w	r0, r7, #32
 801f178:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 801f17c:	677b      	str	r3, [r7, #116]	@ 0x74
 801f17e:	f003 f946 	bl	802240e <memcpy>
 801f182:	4648      	mov	r0, r9
 801f184:	4941      	ldr	r1, [pc, #260]	@ (801f28c <rmw_create_service+0x1a0>)
 801f186:	f7f7 f86f 	bl	8016268 <get_service_typesupport_handle>
 801f18a:	2800      	cmp	r0, #0
 801f18c:	d074      	beq.n	801f278 <rmw_create_service+0x18c>
 801f18e:	6843      	ldr	r3, [r0, #4]
 801f190:	617b      	str	r3, [r7, #20]
 801f192:	2b00      	cmp	r3, #0
 801f194:	d070      	beq.n	801f278 <rmw_create_service+0x18c>
 801f196:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801f19a:	2108      	movs	r1, #8
 801f19c:	f8df a0f4 	ldr.w	sl, [pc, #244]	@ 801f294 <rmw_create_service+0x1a8>
 801f1a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801f1a4:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 801f298 <rmw_create_service+0x1ac>
 801f1a8:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 801f1ac:	1c42      	adds	r2, r0, #1
 801f1ae:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 801f1b2:	f7f8 f89f 	bl	80172f4 <uxr_object_id>
 801f1b6:	2364      	movs	r3, #100	@ 0x64
 801f1b8:	6138      	str	r0, [r7, #16]
 801f1ba:	4652      	mov	r2, sl
 801f1bc:	4649      	mov	r1, r9
 801f1be:	6978      	ldr	r0, [r7, #20]
 801f1c0:	f7f6 ff1e 	bl	8016000 <generate_service_types>
 801f1c4:	2800      	cmp	r0, #0
 801f1c6:	d057      	beq.n	801f278 <rmw_create_service+0x18c>
 801f1c8:	f8df b0d0 	ldr.w	fp, [pc, #208]	@ 801f29c <rmw_create_service+0x1b0>
 801f1cc:	233c      	movs	r3, #60	@ 0x3c
 801f1ce:	4a30      	ldr	r2, [pc, #192]	@ (801f290 <rmw_create_service+0x1a4>)
 801f1d0:	4620      	mov	r0, r4
 801f1d2:	4659      	mov	r1, fp
 801f1d4:	f7f6 fee2 	bl	8015f9c <generate_service_topics>
 801f1d8:	2800      	cmp	r0, #0
 801f1da:	d04d      	beq.n	801f278 <rmw_create_service+0x18c>
 801f1dc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801f1e0:	a80c      	add	r0, sp, #48	@ 0x30
 801f1e2:	4629      	mov	r1, r5
 801f1e4:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 801f1e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801f1ec:	f7f6 febe 	bl	8015f6c <convert_qos_profile>
 801f1f0:	4a27      	ldr	r2, [pc, #156]	@ (801f290 <rmw_create_service+0x1a4>)
 801f1f2:	a80c      	add	r0, sp, #48	@ 0x30
 801f1f4:	9400      	str	r4, [sp, #0]
 801f1f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f1f8:	e9cd b203 	strd	fp, r2, [sp, #12]
 801f1fc:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 801f200:	c803      	ldmia	r0, {r0, r1}
 801f202:	9a08      	ldr	r2, [sp, #32]
 801f204:	9005      	str	r0, [sp, #20]
 801f206:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801f20a:	2306      	movs	r3, #6
 801f20c:	f8ad 1018 	strh.w	r1, [sp, #24]
 801f210:	9307      	str	r3, [sp, #28]
 801f212:	6811      	ldr	r1, [r2, #0]
 801f214:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801f218:	693a      	ldr	r2, [r7, #16]
 801f21a:	f7f7 ff73 	bl	8017104 <uxr_buffer_create_replier_bin>
 801f21e:	4602      	mov	r2, r0
 801f220:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801f224:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801f228:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801f22c:	f7f6 fe82 	bl	8015f34 <run_xrce_session>
 801f230:	b310      	cbz	r0, 801f278 <rmw_create_service+0x18c>
 801f232:	7a2b      	ldrb	r3, [r5, #8]
 801f234:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801f238:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801f23c:	2b02      	cmp	r3, #2
 801f23e:	920e      	str	r2, [sp, #56]	@ 0x38
 801f240:	f04f 0200 	mov.w	r2, #0
 801f244:	920f      	str	r2, [sp, #60]	@ 0x3c
 801f246:	bf0c      	ite	eq
 801f248:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 801f24c:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 801f250:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f254:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f256:	ab0e      	add	r3, sp, #56	@ 0x38
 801f258:	673a      	str	r2, [r7, #112]	@ 0x70
 801f25a:	f8d0 20e4 	ldr.w	r2, [r0, #228]	@ 0xe4
 801f25e:	9300      	str	r3, [sp, #0]
 801f260:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f262:	6811      	ldr	r1, [r2, #0]
 801f264:	693a      	ldr	r2, [r7, #16]
 801f266:	f001 fc6b 	bl	8020b40 <uxr_buffer_request_data>
 801f26a:	8338      	strh	r0, [r7, #24]
 801f26c:	e000      	b.n	801f270 <rmw_create_service+0x184>
 801f26e:	2600      	movs	r6, #0
 801f270:	4630      	mov	r0, r6
 801f272:	b011      	add	sp, #68	@ 0x44
 801f274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f278:	4630      	mov	r0, r6
 801f27a:	2600      	movs	r6, #0
 801f27c:	f7f6 fd20 	bl	8015cc0 <rmw_uxrce_fini_service_memory>
 801f280:	4630      	mov	r0, r6
 801f282:	b011      	add	sp, #68	@ 0x44
 801f284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f288:	24069214 	.word	0x24069214
 801f28c:	08023598 	.word	0x08023598
 801f290:	240694f0 	.word	0x240694f0
 801f294:	2406952c 	.word	0x2406952c
 801f298:	2406948c 	.word	0x2406948c
 801f29c:	24069450 	.word	0x24069450

0801f2a0 <rmw_destroy_service>:
 801f2a0:	b570      	push	{r4, r5, r6, lr}
 801f2a2:	b128      	cbz	r0, 801f2b0 <rmw_destroy_service+0x10>
 801f2a4:	4604      	mov	r4, r0
 801f2a6:	6800      	ldr	r0, [r0, #0]
 801f2a8:	460d      	mov	r5, r1
 801f2aa:	f7f6 ff55 	bl	8016158 <is_uxrce_rmw_identifier_valid>
 801f2ae:	b910      	cbnz	r0, 801f2b6 <rmw_destroy_service+0x16>
 801f2b0:	2401      	movs	r4, #1
 801f2b2:	4620      	mov	r0, r4
 801f2b4:	bd70      	pop	{r4, r5, r6, pc}
 801f2b6:	6863      	ldr	r3, [r4, #4]
 801f2b8:	2b00      	cmp	r3, #0
 801f2ba:	d0f9      	beq.n	801f2b0 <rmw_destroy_service+0x10>
 801f2bc:	2d00      	cmp	r5, #0
 801f2be:	d0f7      	beq.n	801f2b0 <rmw_destroy_service+0x10>
 801f2c0:	6828      	ldr	r0, [r5, #0]
 801f2c2:	f7f6 ff49 	bl	8016158 <is_uxrce_rmw_identifier_valid>
 801f2c6:	2800      	cmp	r0, #0
 801f2c8:	d0f2      	beq.n	801f2b0 <rmw_destroy_service+0x10>
 801f2ca:	686e      	ldr	r6, [r5, #4]
 801f2cc:	2e00      	cmp	r6, #0
 801f2ce:	d0ef      	beq.n	801f2b0 <rmw_destroy_service+0x10>
 801f2d0:	6864      	ldr	r4, [r4, #4]
 801f2d2:	6932      	ldr	r2, [r6, #16]
 801f2d4:	6920      	ldr	r0, [r4, #16]
 801f2d6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f2da:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f2de:	6819      	ldr	r1, [r3, #0]
 801f2e0:	f001 fc68 	bl	8020bb4 <uxr_buffer_cancel_data>
 801f2e4:	4602      	mov	r2, r0
 801f2e6:	6920      	ldr	r0, [r4, #16]
 801f2e8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801f2ec:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801f2f0:	f7f6 fe20 	bl	8015f34 <run_xrce_session>
 801f2f4:	6920      	ldr	r0, [r4, #16]
 801f2f6:	6932      	ldr	r2, [r6, #16]
 801f2f8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f2fc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f300:	6819      	ldr	r1, [r3, #0]
 801f302:	f7f7 fcfd 	bl	8016d00 <uxr_buffer_delete_entity>
 801f306:	4602      	mov	r2, r0
 801f308:	6920      	ldr	r0, [r4, #16]
 801f30a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801f30e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801f312:	f7f6 fe0f 	bl	8015f34 <run_xrce_session>
 801f316:	4603      	mov	r3, r0
 801f318:	4628      	mov	r0, r5
 801f31a:	2b00      	cmp	r3, #0
 801f31c:	bf14      	ite	ne
 801f31e:	2400      	movne	r4, #0
 801f320:	2402      	moveq	r4, #2
 801f322:	f7f6 fccd 	bl	8015cc0 <rmw_uxrce_fini_service_memory>
 801f326:	e7c4      	b.n	801f2b2 <rmw_destroy_service+0x12>

0801f328 <rmw_service_response_publisher_get_actual_qos>:
 801f328:	b181      	cbz	r1, 801f34c <rmw_service_response_publisher_get_actual_qos+0x24>
 801f32a:	4603      	mov	r3, r0
 801f32c:	b510      	push	{r4, lr}
 801f32e:	fab0 f480 	clz	r4, r0
 801f332:	0964      	lsrs	r4, r4, #5
 801f334:	b140      	cbz	r0, 801f348 <rmw_service_response_publisher_get_actual_qos+0x20>
 801f336:	685b      	ldr	r3, [r3, #4]
 801f338:	4608      	mov	r0, r1
 801f33a:	2250      	movs	r2, #80	@ 0x50
 801f33c:	f103 0120 	add.w	r1, r3, #32
 801f340:	f003 f865 	bl	802240e <memcpy>
 801f344:	4620      	mov	r0, r4
 801f346:	bd10      	pop	{r4, pc}
 801f348:	200b      	movs	r0, #11
 801f34a:	bd10      	pop	{r4, pc}
 801f34c:	200b      	movs	r0, #11
 801f34e:	4770      	bx	lr

0801f350 <rmw_service_request_subscription_get_actual_qos>:
 801f350:	b178      	cbz	r0, 801f372 <rmw_service_request_subscription_get_actual_qos+0x22>
 801f352:	b510      	push	{r4, lr}
 801f354:	fab1 f481 	clz	r4, r1
 801f358:	0964      	lsrs	r4, r4, #5
 801f35a:	b141      	cbz	r1, 801f36e <rmw_service_request_subscription_get_actual_qos+0x1e>
 801f35c:	6843      	ldr	r3, [r0, #4]
 801f35e:	2250      	movs	r2, #80	@ 0x50
 801f360:	4608      	mov	r0, r1
 801f362:	f103 0120 	add.w	r1, r3, #32
 801f366:	f003 f852 	bl	802240e <memcpy>
 801f36a:	4620      	mov	r0, r4
 801f36c:	bd10      	pop	{r4, pc}
 801f36e:	200b      	movs	r0, #11
 801f370:	bd10      	pop	{r4, pc}
 801f372:	200b      	movs	r0, #11
 801f374:	4770      	bx	lr
 801f376:	bf00      	nop

0801f378 <rmw_create_subscription>:
 801f378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f37c:	b08d      	sub	sp, #52	@ 0x34
 801f37e:	2900      	cmp	r1, #0
 801f380:	f000 80d8 	beq.w	801f534 <rmw_create_subscription+0x1bc>
 801f384:	4604      	mov	r4, r0
 801f386:	2800      	cmp	r0, #0
 801f388:	f000 80d4 	beq.w	801f534 <rmw_create_subscription+0x1bc>
 801f38c:	6800      	ldr	r0, [r0, #0]
 801f38e:	460e      	mov	r6, r1
 801f390:	4615      	mov	r5, r2
 801f392:	461f      	mov	r7, r3
 801f394:	f7f6 fee0 	bl	8016158 <is_uxrce_rmw_identifier_valid>
 801f398:	f080 0001 	eor.w	r0, r0, #1
 801f39c:	b2c0      	uxtb	r0, r0
 801f39e:	2800      	cmp	r0, #0
 801f3a0:	f040 80c8 	bne.w	801f534 <rmw_create_subscription+0x1bc>
 801f3a4:	2d00      	cmp	r5, #0
 801f3a6:	f000 80c5 	beq.w	801f534 <rmw_create_subscription+0x1bc>
 801f3aa:	782b      	ldrb	r3, [r5, #0]
 801f3ac:	2b00      	cmp	r3, #0
 801f3ae:	f000 80c1 	beq.w	801f534 <rmw_create_subscription+0x1bc>
 801f3b2:	2f00      	cmp	r7, #0
 801f3b4:	f000 80be 	beq.w	801f534 <rmw_create_subscription+0x1bc>
 801f3b8:	4867      	ldr	r0, [pc, #412]	@ (801f558 <rmw_create_subscription+0x1e0>)
 801f3ba:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801f3be:	f7ff f8e9 	bl	801e594 <get_memory>
 801f3c2:	4604      	mov	r4, r0
 801f3c4:	2800      	cmp	r0, #0
 801f3c6:	f000 80b6 	beq.w	801f536 <rmw_create_subscription+0x1be>
 801f3ca:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801f3ce:	f108 0a98 	add.w	sl, r8, #152	@ 0x98
 801f3d2:	f8c8 8080 	str.w	r8, [r8, #128]	@ 0x80
 801f3d6:	f7ff f945 	bl	801e664 <rmw_get_implementation_identifier>
 801f3da:	f8c8 007c 	str.w	r0, [r8, #124]	@ 0x7c
 801f3de:	f8c8 a084 	str.w	sl, [r8, #132]	@ 0x84
 801f3e2:	4628      	mov	r0, r5
 801f3e4:	f7e0 ff86 	bl	80002f4 <strlen>
 801f3e8:	3001      	adds	r0, #1
 801f3ea:	f108 047c 	add.w	r4, r8, #124	@ 0x7c
 801f3ee:	283c      	cmp	r0, #60	@ 0x3c
 801f3f0:	f200 80a5 	bhi.w	801f53e <rmw_create_subscription+0x1c6>
 801f3f4:	462b      	mov	r3, r5
 801f3f6:	4a59      	ldr	r2, [pc, #356]	@ (801f55c <rmw_create_subscription+0x1e4>)
 801f3f8:	213c      	movs	r1, #60	@ 0x3c
 801f3fa:	4650      	mov	r0, sl
 801f3fc:	f002 fd7a 	bl	8021ef4 <sniprintf>
 801f400:	4639      	mov	r1, r7
 801f402:	2250      	movs	r2, #80	@ 0x50
 801f404:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 801f408:	f8c8 9020 	str.w	r9, [r8, #32]
 801f40c:	f002 ffff 	bl	802240e <memcpy>
 801f410:	4630      	mov	r0, r6
 801f412:	4953      	ldr	r1, [pc, #332]	@ (801f560 <rmw_create_subscription+0x1e8>)
 801f414:	f7f6 ff1c 	bl	8016250 <get_message_typesupport_handle>
 801f418:	2800      	cmp	r0, #0
 801f41a:	f000 8090 	beq.w	801f53e <rmw_create_subscription+0x1c6>
 801f41e:	6842      	ldr	r2, [r0, #4]
 801f420:	f8c8 2018 	str.w	r2, [r8, #24]
 801f424:	2a00      	cmp	r2, #0
 801f426:	f000 808a 	beq.w	801f53e <rmw_create_subscription+0x1c6>
 801f42a:	4629      	mov	r1, r5
 801f42c:	463b      	mov	r3, r7
 801f42e:	4648      	mov	r0, r9
 801f430:	f7ff fb84 	bl	801eb3c <create_topic>
 801f434:	f8c8 001c 	str.w	r0, [r8, #28]
 801f438:	2800      	cmp	r0, #0
 801f43a:	f000 8085 	beq.w	801f548 <rmw_create_subscription+0x1d0>
 801f43e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f442:	2104      	movs	r1, #4
 801f444:	2506      	movs	r5, #6
 801f446:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801f44a:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 801f44e:	1c42      	adds	r2, r0, #1
 801f450:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 801f454:	f7f7 ff4e 	bl	80172f4 <uxr_object_id>
 801f458:	f8c8 0010 	str.w	r0, [r8, #16]
 801f45c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801f460:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 801f464:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f468:	9500      	str	r5, [sp, #0]
 801f46a:	6819      	ldr	r1, [r3, #0]
 801f46c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801f470:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801f474:	f7f7 fd28 	bl	8016ec8 <uxr_buffer_create_subscriber_bin>
 801f478:	4602      	mov	r2, r0
 801f47a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801f47e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801f482:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801f486:	f7f6 fd55 	bl	8015f34 <run_xrce_session>
 801f48a:	2800      	cmp	r0, #0
 801f48c:	d057      	beq.n	801f53e <rmw_create_subscription+0x1c6>
 801f48e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f492:	4629      	mov	r1, r5
 801f494:	ae08      	add	r6, sp, #32
 801f496:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801f49a:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 801f49e:	1c42      	adds	r2, r0, #1
 801f4a0:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 801f4a4:	f7f7 ff26 	bl	80172f4 <uxr_object_id>
 801f4a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801f4ac:	f8d8 301c 	ldr.w	r3, [r8, #28]
 801f4b0:	4639      	mov	r1, r7
 801f4b2:	f8c8 0014 	str.w	r0, [r8, #20]
 801f4b6:	4630      	mov	r0, r6
 801f4b8:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 801f4bc:	9305      	str	r3, [sp, #20]
 801f4be:	f7f6 fd55 	bl	8015f6c <convert_qos_profile>
 801f4c2:	9503      	str	r5, [sp, #12]
 801f4c4:	9b05      	ldr	r3, [sp, #20]
 801f4c6:	e896 0003 	ldmia.w	r6, {r0, r1}
 801f4ca:	9001      	str	r0, [sp, #4]
 801f4cc:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 801f4d0:	f8ad 1008 	strh.w	r1, [sp, #8]
 801f4d4:	691b      	ldr	r3, [r3, #16]
 801f4d6:	9300      	str	r3, [sp, #0]
 801f4d8:	f8db 1000 	ldr.w	r1, [fp]
 801f4dc:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 801f4e0:	f7f7 fd98 	bl	8017014 <uxr_buffer_create_datareader_bin>
 801f4e4:	4602      	mov	r2, r0
 801f4e6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801f4ea:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801f4ee:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801f4f2:	f7f6 fd1f 	bl	8015f34 <run_xrce_session>
 801f4f6:	b310      	cbz	r0, 801f53e <rmw_create_subscription+0x1c6>
 801f4f8:	7a3b      	ldrb	r3, [r7, #8]
 801f4fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801f4fe:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801f502:	2b02      	cmp	r3, #2
 801f504:	920a      	str	r2, [sp, #40]	@ 0x28
 801f506:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801f50a:	f04f 0200 	mov.w	r2, #0
 801f50e:	bf08      	it	eq
 801f510:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 801f514:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f518:	bf18      	it	ne
 801f51a:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	@ 0xd4
 801f51e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801f520:	9307      	str	r3, [sp, #28]
 801f522:	ab0a      	add	r3, sp, #40	@ 0x28
 801f524:	9300      	str	r3, [sp, #0]
 801f526:	9b07      	ldr	r3, [sp, #28]
 801f528:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801f52c:	6809      	ldr	r1, [r1, #0]
 801f52e:	f001 fb07 	bl	8020b40 <uxr_buffer_request_data>
 801f532:	e000      	b.n	801f536 <rmw_create_subscription+0x1be>
 801f534:	2400      	movs	r4, #0
 801f536:	4620      	mov	r0, r4
 801f538:	b00d      	add	sp, #52	@ 0x34
 801f53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f53e:	f8d8 001c 	ldr.w	r0, [r8, #28]
 801f542:	b108      	cbz	r0, 801f548 <rmw_create_subscription+0x1d0>
 801f544:	f7f6 fbe8 	bl	8015d18 <rmw_uxrce_fini_topic_memory>
 801f548:	4620      	mov	r0, r4
 801f54a:	2400      	movs	r4, #0
 801f54c:	f7f6 fba2 	bl	8015c94 <rmw_uxrce_fini_subscription_memory>
 801f550:	4620      	mov	r0, r4
 801f552:	b00d      	add	sp, #52	@ 0x34
 801f554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f558:	24069244 	.word	0x24069244
 801f55c:	080248cc 	.word	0x080248cc
 801f560:	08023598 	.word	0x08023598

0801f564 <rmw_subscription_get_actual_qos>:
 801f564:	b178      	cbz	r0, 801f586 <rmw_subscription_get_actual_qos+0x22>
 801f566:	b510      	push	{r4, lr}
 801f568:	fab1 f481 	clz	r4, r1
 801f56c:	0964      	lsrs	r4, r4, #5
 801f56e:	b141      	cbz	r1, 801f582 <rmw_subscription_get_actual_qos+0x1e>
 801f570:	6843      	ldr	r3, [r0, #4]
 801f572:	2250      	movs	r2, #80	@ 0x50
 801f574:	4608      	mov	r0, r1
 801f576:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 801f57a:	f002 ff48 	bl	802240e <memcpy>
 801f57e:	4620      	mov	r0, r4
 801f580:	bd10      	pop	{r4, pc}
 801f582:	200b      	movs	r0, #11
 801f584:	bd10      	pop	{r4, pc}
 801f586:	200b      	movs	r0, #11
 801f588:	4770      	bx	lr
 801f58a:	bf00      	nop

0801f58c <rmw_destroy_subscription>:
 801f58c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f590:	b128      	cbz	r0, 801f59e <rmw_destroy_subscription+0x12>
 801f592:	4604      	mov	r4, r0
 801f594:	6800      	ldr	r0, [r0, #0]
 801f596:	460d      	mov	r5, r1
 801f598:	f7f6 fdde 	bl	8016158 <is_uxrce_rmw_identifier_valid>
 801f59c:	b918      	cbnz	r0, 801f5a6 <rmw_destroy_subscription+0x1a>
 801f59e:	2401      	movs	r4, #1
 801f5a0:	4620      	mov	r0, r4
 801f5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f5a6:	6863      	ldr	r3, [r4, #4]
 801f5a8:	2b00      	cmp	r3, #0
 801f5aa:	d0f8      	beq.n	801f59e <rmw_destroy_subscription+0x12>
 801f5ac:	fab5 f485 	clz	r4, r5
 801f5b0:	0964      	lsrs	r4, r4, #5
 801f5b2:	2d00      	cmp	r5, #0
 801f5b4:	d0f3      	beq.n	801f59e <rmw_destroy_subscription+0x12>
 801f5b6:	6828      	ldr	r0, [r5, #0]
 801f5b8:	f7f6 fdce 	bl	8016158 <is_uxrce_rmw_identifier_valid>
 801f5bc:	2800      	cmp	r0, #0
 801f5be:	d0ee      	beq.n	801f59e <rmw_destroy_subscription+0x12>
 801f5c0:	686e      	ldr	r6, [r5, #4]
 801f5c2:	2e00      	cmp	r6, #0
 801f5c4:	d0eb      	beq.n	801f59e <rmw_destroy_subscription+0x12>
 801f5c6:	6a37      	ldr	r7, [r6, #32]
 801f5c8:	6972      	ldr	r2, [r6, #20]
 801f5ca:	6938      	ldr	r0, [r7, #16]
 801f5cc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f5d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f5d4:	6819      	ldr	r1, [r3, #0]
 801f5d6:	f001 faed 	bl	8020bb4 <uxr_buffer_cancel_data>
 801f5da:	4602      	mov	r2, r0
 801f5dc:	6938      	ldr	r0, [r7, #16]
 801f5de:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801f5e2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801f5e6:	f7f6 fca5 	bl	8015f34 <run_xrce_session>
 801f5ea:	69f0      	ldr	r0, [r6, #28]
 801f5ec:	f7ff faf6 	bl	801ebdc <destroy_topic>
 801f5f0:	6a33      	ldr	r3, [r6, #32]
 801f5f2:	6972      	ldr	r2, [r6, #20]
 801f5f4:	6918      	ldr	r0, [r3, #16]
 801f5f6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f5fa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f5fe:	6819      	ldr	r1, [r3, #0]
 801f600:	f7f7 fb7e 	bl	8016d00 <uxr_buffer_delete_entity>
 801f604:	6a33      	ldr	r3, [r6, #32]
 801f606:	4680      	mov	r8, r0
 801f608:	6932      	ldr	r2, [r6, #16]
 801f60a:	6918      	ldr	r0, [r3, #16]
 801f60c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f610:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f614:	6819      	ldr	r1, [r3, #0]
 801f616:	f7f7 fb73 	bl	8016d00 <uxr_buffer_delete_entity>
 801f61a:	4606      	mov	r6, r0
 801f61c:	6938      	ldr	r0, [r7, #16]
 801f61e:	4642      	mov	r2, r8
 801f620:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801f624:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801f628:	f7f6 fc84 	bl	8015f34 <run_xrce_session>
 801f62c:	693f      	ldr	r7, [r7, #16]
 801f62e:	4632      	mov	r2, r6
 801f630:	4606      	mov	r6, r0
 801f632:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801f636:	4638      	mov	r0, r7
 801f638:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 801f63c:	f7f6 fc7a 	bl	8015f34 <run_xrce_session>
 801f640:	b126      	cbz	r6, 801f64c <rmw_destroy_subscription+0xc0>
 801f642:	b118      	cbz	r0, 801f64c <rmw_destroy_subscription+0xc0>
 801f644:	4628      	mov	r0, r5
 801f646:	f7f6 fb25 	bl	8015c94 <rmw_uxrce_fini_subscription_memory>
 801f64a:	e7a9      	b.n	801f5a0 <rmw_destroy_subscription+0x14>
 801f64c:	2402      	movs	r4, #2
 801f64e:	e7f9      	b.n	801f644 <rmw_destroy_subscription+0xb8>

0801f650 <rmw_take_with_info>:
 801f650:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f652:	4604      	mov	r4, r0
 801f654:	6800      	ldr	r0, [r0, #0]
 801f656:	b089      	sub	sp, #36	@ 0x24
 801f658:	460f      	mov	r7, r1
 801f65a:	4615      	mov	r5, r2
 801f65c:	b128      	cbz	r0, 801f66a <rmw_take_with_info+0x1a>
 801f65e:	4b24      	ldr	r3, [pc, #144]	@ (801f6f0 <rmw_take_with_info+0xa0>)
 801f660:	6819      	ldr	r1, [r3, #0]
 801f662:	f7e0 fe3d 	bl	80002e0 <strcmp>
 801f666:	2800      	cmp	r0, #0
 801f668:	d13e      	bne.n	801f6e8 <rmw_take_with_info+0x98>
 801f66a:	b305      	cbz	r5, 801f6ae <rmw_take_with_info+0x5e>
 801f66c:	2300      	movs	r3, #0
 801f66e:	6864      	ldr	r4, [r4, #4]
 801f670:	702b      	strb	r3, [r5, #0]
 801f672:	f7f6 fbe1 	bl	8015e38 <rmw_uxrce_clean_expired_static_input_buffer>
 801f676:	4620      	mov	r0, r4
 801f678:	f7f6 fbb4 	bl	8015de4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801f67c:	4606      	mov	r6, r0
 801f67e:	b1f0      	cbz	r0, 801f6be <rmw_take_with_info+0x6e>
 801f680:	6881      	ldr	r1, [r0, #8]
 801f682:	4668      	mov	r0, sp
 801f684:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801f688:	3110      	adds	r1, #16
 801f68a:	f7f4 fcfd 	bl	8014088 <ucdr_init_buffer>
 801f68e:	69a3      	ldr	r3, [r4, #24]
 801f690:	4639      	mov	r1, r7
 801f692:	4668      	mov	r0, sp
 801f694:	68db      	ldr	r3, [r3, #12]
 801f696:	4798      	blx	r3
 801f698:	4604      	mov	r4, r0
 801f69a:	4631      	mov	r1, r6
 801f69c:	4815      	ldr	r0, [pc, #84]	@ (801f6f4 <rmw_take_with_info+0xa4>)
 801f69e:	f7fe ff89 	bl	801e5b4 <put_memory>
 801f6a2:	702c      	strb	r4, [r5, #0]
 801f6a4:	f084 0001 	eor.w	r0, r4, #1
 801f6a8:	b2c0      	uxtb	r0, r0
 801f6aa:	b009      	add	sp, #36	@ 0x24
 801f6ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f6ae:	6864      	ldr	r4, [r4, #4]
 801f6b0:	f7f6 fbc2 	bl	8015e38 <rmw_uxrce_clean_expired_static_input_buffer>
 801f6b4:	4620      	mov	r0, r4
 801f6b6:	f7f6 fb95 	bl	8015de4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801f6ba:	4605      	mov	r5, r0
 801f6bc:	b910      	cbnz	r0, 801f6c4 <rmw_take_with_info+0x74>
 801f6be:	2001      	movs	r0, #1
 801f6c0:	b009      	add	sp, #36	@ 0x24
 801f6c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f6c4:	68a9      	ldr	r1, [r5, #8]
 801f6c6:	4668      	mov	r0, sp
 801f6c8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801f6cc:	3110      	adds	r1, #16
 801f6ce:	f7f4 fcdb 	bl	8014088 <ucdr_init_buffer>
 801f6d2:	69a3      	ldr	r3, [r4, #24]
 801f6d4:	4639      	mov	r1, r7
 801f6d6:	4668      	mov	r0, sp
 801f6d8:	68db      	ldr	r3, [r3, #12]
 801f6da:	4798      	blx	r3
 801f6dc:	4629      	mov	r1, r5
 801f6de:	4604      	mov	r4, r0
 801f6e0:	4804      	ldr	r0, [pc, #16]	@ (801f6f4 <rmw_take_with_info+0xa4>)
 801f6e2:	f7fe ff67 	bl	801e5b4 <put_memory>
 801f6e6:	e7dd      	b.n	801f6a4 <rmw_take_with_info+0x54>
 801f6e8:	200c      	movs	r0, #12
 801f6ea:	b009      	add	sp, #36	@ 0x24
 801f6ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f6ee:	bf00      	nop
 801f6f0:	08025848 	.word	0x08025848
 801f6f4:	24069234 	.word	0x24069234

0801f6f8 <rmw_wait>:
 801f6f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f6fc:	4698      	mov	r8, r3
 801f6fe:	ea40 0301 	orr.w	r3, r0, r1
 801f702:	b089      	sub	sp, #36	@ 0x24
 801f704:	ea48 0303 	orr.w	r3, r8, r3
 801f708:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f70a:	4313      	orrs	r3, r2
 801f70c:	f000 8106 	beq.w	801f91c <rmw_wait+0x224>
 801f710:	4605      	mov	r5, r0
 801f712:	460e      	mov	r6, r1
 801f714:	4691      	mov	r9, r2
 801f716:	b16c      	cbz	r4, 801f734 <rmw_wait+0x3c>
 801f718:	4ba6      	ldr	r3, [pc, #664]	@ (801f9b4 <rmw_wait+0x2bc>)
 801f71a:	af04      	add	r7, sp, #16
 801f71c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f71e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801f722:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801f726:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801f72a:	f7fe fd55 	bl	801e1d8 <rmw_time_equal>
 801f72e:	2800      	cmp	r0, #0
 801f730:	f000 810b 	beq.w	801f94a <rmw_wait+0x252>
 801f734:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801f738:	f7f6 fb7e 	bl	8015e38 <rmw_uxrce_clean_expired_static_input_buffer>
 801f73c:	4b9e      	ldr	r3, [pc, #632]	@ (801f9b8 <rmw_wait+0x2c0>)
 801f73e:	681c      	ldr	r4, [r3, #0]
 801f740:	b14c      	cbz	r4, 801f756 <rmw_wait+0x5e>
 801f742:	4623      	mov	r3, r4
 801f744:	2100      	movs	r1, #0
 801f746:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801f74a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801f74e:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801f752:	2b00      	cmp	r3, #0
 801f754:	d1f7      	bne.n	801f746 <rmw_wait+0x4e>
 801f756:	f1b9 0f00 	cmp.w	r9, #0
 801f75a:	d011      	beq.n	801f780 <rmw_wait+0x88>
 801f75c:	f8d9 1000 	ldr.w	r1, [r9]
 801f760:	b171      	cbz	r1, 801f780 <rmw_wait+0x88>
 801f762:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801f766:	2300      	movs	r3, #0
 801f768:	2001      	movs	r0, #1
 801f76a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f76e:	3301      	adds	r3, #1
 801f770:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801f772:	4299      	cmp	r1, r3
 801f774:	6912      	ldr	r2, [r2, #16]
 801f776:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801f77a:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801f77e:	d1f4      	bne.n	801f76a <rmw_wait+0x72>
 801f780:	f1b8 0f00 	cmp.w	r8, #0
 801f784:	d011      	beq.n	801f7aa <rmw_wait+0xb2>
 801f786:	f8d8 1000 	ldr.w	r1, [r8]
 801f78a:	b171      	cbz	r1, 801f7aa <rmw_wait+0xb2>
 801f78c:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801f790:	2300      	movs	r3, #0
 801f792:	2001      	movs	r0, #1
 801f794:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f798:	3301      	adds	r3, #1
 801f79a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801f79c:	4299      	cmp	r1, r3
 801f79e:	6912      	ldr	r2, [r2, #16]
 801f7a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801f7a4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801f7a8:	d1f4      	bne.n	801f794 <rmw_wait+0x9c>
 801f7aa:	b185      	cbz	r5, 801f7ce <rmw_wait+0xd6>
 801f7ac:	6829      	ldr	r1, [r5, #0]
 801f7ae:	b171      	cbz	r1, 801f7ce <rmw_wait+0xd6>
 801f7b0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801f7b4:	2300      	movs	r3, #0
 801f7b6:	2001      	movs	r0, #1
 801f7b8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f7bc:	3301      	adds	r3, #1
 801f7be:	6a12      	ldr	r2, [r2, #32]
 801f7c0:	4299      	cmp	r1, r3
 801f7c2:	6912      	ldr	r2, [r2, #16]
 801f7c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801f7c8:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801f7cc:	d1f4      	bne.n	801f7b8 <rmw_wait+0xc0>
 801f7ce:	b344      	cbz	r4, 801f822 <rmw_wait+0x12a>
 801f7d0:	4622      	mov	r2, r4
 801f7d2:	2300      	movs	r3, #0
 801f7d4:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801f7d8:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801f7dc:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801f7e0:	440b      	add	r3, r1
 801f7e2:	b2db      	uxtb	r3, r3
 801f7e4:	2a00      	cmp	r2, #0
 801f7e6:	d1f5      	bne.n	801f7d4 <rmw_wait+0xdc>
 801f7e8:	2b00      	cmp	r3, #0
 801f7ea:	d05f      	beq.n	801f8ac <rmw_wait+0x1b4>
 801f7ec:	1c7a      	adds	r2, r7, #1
 801f7ee:	d00d      	beq.n	801f80c <rmw_wait+0x114>
 801f7f0:	ee07 7a90 	vmov	s15, r7
 801f7f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801f7f8:	ee07 3a90 	vmov	s15, r3
 801f7fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f800:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f804:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801f808:	ee17 7a90 	vmov	r7, s15
 801f80c:	68a0      	ldr	r0, [r4, #8]
 801f80e:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801f812:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801f816:	2b00      	cmp	r3, #0
 801f818:	f040 808d 	bne.w	801f936 <rmw_wait+0x23e>
 801f81c:	6864      	ldr	r4, [r4, #4]
 801f81e:	2c00      	cmp	r4, #0
 801f820:	d1f4      	bne.n	801f80c <rmw_wait+0x114>
 801f822:	f1b9 0f00 	cmp.w	r9, #0
 801f826:	f000 80a1 	beq.w	801f96c <rmw_wait+0x274>
 801f82a:	f8d9 7000 	ldr.w	r7, [r9]
 801f82e:	2f00      	cmp	r7, #0
 801f830:	f000 80a4 	beq.w	801f97c <rmw_wait+0x284>
 801f834:	2400      	movs	r4, #0
 801f836:	4627      	mov	r7, r4
 801f838:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801f83c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801f840:	f7f6 fad0 	bl	8015de4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801f844:	2800      	cmp	r0, #0
 801f846:	d03b      	beq.n	801f8c0 <rmw_wait+0x1c8>
 801f848:	3401      	adds	r4, #1
 801f84a:	f8d9 3000 	ldr.w	r3, [r9]
 801f84e:	2701      	movs	r7, #1
 801f850:	42a3      	cmp	r3, r4
 801f852:	d8f1      	bhi.n	801f838 <rmw_wait+0x140>
 801f854:	2701      	movs	r7, #1
 801f856:	f1b8 0f00 	cmp.w	r8, #0
 801f85a:	d010      	beq.n	801f87e <rmw_wait+0x186>
 801f85c:	f8d8 3000 	ldr.w	r3, [r8]
 801f860:	b16b      	cbz	r3, 801f87e <rmw_wait+0x186>
 801f862:	2400      	movs	r4, #0
 801f864:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801f868:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801f86c:	f7f6 faba 	bl	8015de4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801f870:	b370      	cbz	r0, 801f8d0 <rmw_wait+0x1d8>
 801f872:	3401      	adds	r4, #1
 801f874:	f8d8 3000 	ldr.w	r3, [r8]
 801f878:	2701      	movs	r7, #1
 801f87a:	42a3      	cmp	r3, r4
 801f87c:	d8f2      	bhi.n	801f864 <rmw_wait+0x16c>
 801f87e:	2d00      	cmp	r5, #0
 801f880:	d035      	beq.n	801f8ee <rmw_wait+0x1f6>
 801f882:	682b      	ldr	r3, [r5, #0]
 801f884:	b39b      	cbz	r3, 801f8ee <rmw_wait+0x1f6>
 801f886:	2400      	movs	r4, #0
 801f888:	686b      	ldr	r3, [r5, #4]
 801f88a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801f88e:	f7f6 faa9 	bl	8015de4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801f892:	b328      	cbz	r0, 801f8e0 <rmw_wait+0x1e8>
 801f894:	3401      	adds	r4, #1
 801f896:	682b      	ldr	r3, [r5, #0]
 801f898:	2701      	movs	r7, #1
 801f89a:	42a3      	cmp	r3, r4
 801f89c:	d8f4      	bhi.n	801f888 <rmw_wait+0x190>
 801f89e:	2e00      	cmp	r6, #0
 801f8a0:	d03c      	beq.n	801f91c <rmw_wait+0x224>
 801f8a2:	6834      	ldr	r4, [r6, #0]
 801f8a4:	2c00      	cmp	r4, #0
 801f8a6:	d039      	beq.n	801f91c <rmw_wait+0x224>
 801f8a8:	2701      	movs	r7, #1
 801f8aa:	e023      	b.n	801f8f4 <rmw_wait+0x1fc>
 801f8ac:	68a0      	ldr	r0, [r4, #8]
 801f8ae:	2100      	movs	r1, #0
 801f8b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f8b4:	f7f8 faf2 	bl	8017e9c <uxr_run_session_timeout>
 801f8b8:	6864      	ldr	r4, [r4, #4]
 801f8ba:	2c00      	cmp	r4, #0
 801f8bc:	d1f6      	bne.n	801f8ac <rmw_wait+0x1b4>
 801f8be:	e7b0      	b.n	801f822 <rmw_wait+0x12a>
 801f8c0:	e9d9 3200 	ldrd	r3, r2, [r9]
 801f8c4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801f8c8:	3401      	adds	r4, #1
 801f8ca:	42a3      	cmp	r3, r4
 801f8cc:	d8b4      	bhi.n	801f838 <rmw_wait+0x140>
 801f8ce:	e7c2      	b.n	801f856 <rmw_wait+0x15e>
 801f8d0:	e9d8 3200 	ldrd	r3, r2, [r8]
 801f8d4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801f8d8:	3401      	adds	r4, #1
 801f8da:	429c      	cmp	r4, r3
 801f8dc:	d3c2      	bcc.n	801f864 <rmw_wait+0x16c>
 801f8de:	e7ce      	b.n	801f87e <rmw_wait+0x186>
 801f8e0:	e9d5 3200 	ldrd	r3, r2, [r5]
 801f8e4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801f8e8:	3401      	adds	r4, #1
 801f8ea:	42a3      	cmp	r3, r4
 801f8ec:	d8cc      	bhi.n	801f888 <rmw_wait+0x190>
 801f8ee:	b1a6      	cbz	r6, 801f91a <rmw_wait+0x222>
 801f8f0:	6834      	ldr	r4, [r6, #0]
 801f8f2:	b194      	cbz	r4, 801f91a <rmw_wait+0x222>
 801f8f4:	2300      	movs	r3, #0
 801f8f6:	461d      	mov	r5, r3
 801f8f8:	e004      	b.n	801f904 <rmw_wait+0x20c>
 801f8fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801f8fe:	3301      	adds	r3, #1
 801f900:	42a3      	cmp	r3, r4
 801f902:	d00a      	beq.n	801f91a <rmw_wait+0x222>
 801f904:	6870      	ldr	r0, [r6, #4]
 801f906:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801f90a:	7c0a      	ldrb	r2, [r1, #16]
 801f90c:	2a00      	cmp	r2, #0
 801f90e:	d0f4      	beq.n	801f8fa <rmw_wait+0x202>
 801f910:	3301      	adds	r3, #1
 801f912:	4617      	mov	r7, r2
 801f914:	740d      	strb	r5, [r1, #16]
 801f916:	42a3      	cmp	r3, r4
 801f918:	d1f4      	bne.n	801f904 <rmw_wait+0x20c>
 801f91a:	b147      	cbz	r7, 801f92e <rmw_wait+0x236>
 801f91c:	2000      	movs	r0, #0
 801f91e:	b009      	add	sp, #36	@ 0x24
 801f920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f924:	b11e      	cbz	r6, 801f92e <rmw_wait+0x236>
 801f926:	6834      	ldr	r4, [r6, #0]
 801f928:	462f      	mov	r7, r5
 801f92a:	2c00      	cmp	r4, #0
 801f92c:	d1e2      	bne.n	801f8f4 <rmw_wait+0x1fc>
 801f92e:	2002      	movs	r0, #2
 801f930:	b009      	add	sp, #36	@ 0x24
 801f932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f936:	4639      	mov	r1, r7
 801f938:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f93c:	f7f8 fac8 	bl	8017ed0 <uxr_run_session_until_data>
 801f940:	6864      	ldr	r4, [r4, #4]
 801f942:	2c00      	cmp	r4, #0
 801f944:	f47f af62 	bne.w	801f80c <rmw_wait+0x114>
 801f948:	e76b      	b.n	801f822 <rmw_wait+0x12a>
 801f94a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801f94e:	f7fe fc99 	bl	801e284 <rmw_time_total_nsec>
 801f952:	2300      	movs	r3, #0
 801f954:	4a19      	ldr	r2, [pc, #100]	@ (801f9bc <rmw_wait+0x2c4>)
 801f956:	f7e0 fd7b 	bl	8000450 <__aeabi_uldivmod>
 801f95a:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801f95e:	4607      	mov	r7, r0
 801f960:	f171 0300 	sbcs.w	r3, r1, #0
 801f964:	bfa8      	it	ge
 801f966:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801f96a:	e6e5      	b.n	801f738 <rmw_wait+0x40>
 801f96c:	f1b8 0f00 	cmp.w	r8, #0
 801f970:	d00f      	beq.n	801f992 <rmw_wait+0x29a>
 801f972:	f8d8 3000 	ldr.w	r3, [r8]
 801f976:	b193      	cbz	r3, 801f99e <rmw_wait+0x2a6>
 801f978:	464f      	mov	r7, r9
 801f97a:	e772      	b.n	801f862 <rmw_wait+0x16a>
 801f97c:	f1b8 0f00 	cmp.w	r8, #0
 801f980:	d007      	beq.n	801f992 <rmw_wait+0x29a>
 801f982:	f8d8 3000 	ldr.w	r3, [r8]
 801f986:	2b00      	cmp	r3, #0
 801f988:	f47f af6b 	bne.w	801f862 <rmw_wait+0x16a>
 801f98c:	b155      	cbz	r5, 801f9a4 <rmw_wait+0x2ac>
 801f98e:	461f      	mov	r7, r3
 801f990:	e777      	b.n	801f882 <rmw_wait+0x18a>
 801f992:	2d00      	cmp	r5, #0
 801f994:	d0c6      	beq.n	801f924 <rmw_wait+0x22c>
 801f996:	682b      	ldr	r3, [r5, #0]
 801f998:	b143      	cbz	r3, 801f9ac <rmw_wait+0x2b4>
 801f99a:	4647      	mov	r7, r8
 801f99c:	e773      	b.n	801f886 <rmw_wait+0x18e>
 801f99e:	b10d      	cbz	r5, 801f9a4 <rmw_wait+0x2ac>
 801f9a0:	464f      	mov	r7, r9
 801f9a2:	e76e      	b.n	801f882 <rmw_wait+0x18a>
 801f9a4:	462f      	mov	r7, r5
 801f9a6:	2e00      	cmp	r6, #0
 801f9a8:	d1a2      	bne.n	801f8f0 <rmw_wait+0x1f8>
 801f9aa:	e7c0      	b.n	801f92e <rmw_wait+0x236>
 801f9ac:	4647      	mov	r7, r8
 801f9ae:	2e00      	cmp	r6, #0
 801f9b0:	d19e      	bne.n	801f8f0 <rmw_wait+0x1f8>
 801f9b2:	e7bc      	b.n	801f92e <rmw_wait+0x236>
 801f9b4:	08023350 	.word	0x08023350
 801f9b8:	24069224 	.word	0x24069224
 801f9bc:	000f4240 	.word	0x000f4240

0801f9c0 <rmw_create_wait_set>:
 801f9c0:	b508      	push	{r3, lr}
 801f9c2:	4803      	ldr	r0, [pc, #12]	@ (801f9d0 <rmw_create_wait_set+0x10>)
 801f9c4:	f7fe fde6 	bl	801e594 <get_memory>
 801f9c8:	b108      	cbz	r0, 801f9ce <rmw_create_wait_set+0xe>
 801f9ca:	6880      	ldr	r0, [r0, #8]
 801f9cc:	3010      	adds	r0, #16
 801f9ce:	bd08      	pop	{r3, pc}
 801f9d0:	24069264 	.word	0x24069264

0801f9d4 <rmw_destroy_wait_set>:
 801f9d4:	b508      	push	{r3, lr}
 801f9d6:	4b08      	ldr	r3, [pc, #32]	@ (801f9f8 <rmw_destroy_wait_set+0x24>)
 801f9d8:	6819      	ldr	r1, [r3, #0]
 801f9da:	b911      	cbnz	r1, 801f9e2 <rmw_destroy_wait_set+0xe>
 801f9dc:	e00a      	b.n	801f9f4 <rmw_destroy_wait_set+0x20>
 801f9de:	6849      	ldr	r1, [r1, #4]
 801f9e0:	b141      	cbz	r1, 801f9f4 <rmw_destroy_wait_set+0x20>
 801f9e2:	688b      	ldr	r3, [r1, #8]
 801f9e4:	3310      	adds	r3, #16
 801f9e6:	4298      	cmp	r0, r3
 801f9e8:	d1f9      	bne.n	801f9de <rmw_destroy_wait_set+0xa>
 801f9ea:	4803      	ldr	r0, [pc, #12]	@ (801f9f8 <rmw_destroy_wait_set+0x24>)
 801f9ec:	f7fe fde2 	bl	801e5b4 <put_memory>
 801f9f0:	2000      	movs	r0, #0
 801f9f2:	bd08      	pop	{r3, pc}
 801f9f4:	2001      	movs	r0, #1
 801f9f6:	bd08      	pop	{r3, pc}
 801f9f8:	24069264 	.word	0x24069264

0801f9fc <rosgraph_msgs__msg__Clock__init>:
 801f9fc:	b538      	push	{r3, r4, r5, lr}
 801f9fe:	4604      	mov	r4, r0
 801fa00:	b128      	cbz	r0, 801fa0e <rosgraph_msgs__msg__Clock__init+0x12>
 801fa02:	f7f7 f91f 	bl	8016c44 <builtin_interfaces__msg__Time__init>
 801fa06:	4605      	mov	r5, r0
 801fa08:	b120      	cbz	r0, 801fa14 <rosgraph_msgs__msg__Clock__init+0x18>
 801fa0a:	4628      	mov	r0, r5
 801fa0c:	bd38      	pop	{r3, r4, r5, pc}
 801fa0e:	4605      	mov	r5, r0
 801fa10:	4628      	mov	r0, r5
 801fa12:	bd38      	pop	{r3, r4, r5, pc}
 801fa14:	4620      	mov	r0, r4
 801fa16:	f7f7 f919 	bl	8016c4c <builtin_interfaces__msg__Time__fini>
 801fa1a:	4628      	mov	r0, r5
 801fa1c:	bd38      	pop	{r3, r4, r5, pc}
 801fa1e:	bf00      	nop

0801fa20 <rosgraph_msgs__msg__Clock__fini>:
 801fa20:	b108      	cbz	r0, 801fa26 <rosgraph_msgs__msg__Clock__fini+0x6>
 801fa22:	f7f7 b913 	b.w	8016c4c <builtin_interfaces__msg__Time__fini>
 801fa26:	4770      	bx	lr

0801fa28 <std_msgs__msg__Header__init>:
 801fa28:	b570      	push	{r4, r5, r6, lr}
 801fa2a:	4605      	mov	r5, r0
 801fa2c:	b1a8      	cbz	r0, 801fa5a <std_msgs__msg__Header__init+0x32>
 801fa2e:	f7f7 f909 	bl	8016c44 <builtin_interfaces__msg__Time__init>
 801fa32:	4604      	mov	r4, r0
 801fa34:	b140      	cbz	r0, 801fa48 <std_msgs__msg__Header__init+0x20>
 801fa36:	f105 0608 	add.w	r6, r5, #8
 801fa3a:	4630      	mov	r0, r6
 801fa3c:	f001 fe86 	bl	802174c <rosidl_runtime_c__String__init>
 801fa40:	4604      	mov	r4, r0
 801fa42:	b168      	cbz	r0, 801fa60 <std_msgs__msg__Header__init+0x38>
 801fa44:	4620      	mov	r0, r4
 801fa46:	bd70      	pop	{r4, r5, r6, pc}
 801fa48:	4628      	mov	r0, r5
 801fa4a:	f7f7 f8ff 	bl	8016c4c <builtin_interfaces__msg__Time__fini>
 801fa4e:	f105 0008 	add.w	r0, r5, #8
 801fa52:	f001 fe91 	bl	8021778 <rosidl_runtime_c__String__fini>
 801fa56:	4620      	mov	r0, r4
 801fa58:	bd70      	pop	{r4, r5, r6, pc}
 801fa5a:	4604      	mov	r4, r0
 801fa5c:	4620      	mov	r0, r4
 801fa5e:	bd70      	pop	{r4, r5, r6, pc}
 801fa60:	4628      	mov	r0, r5
 801fa62:	f7f7 f8f3 	bl	8016c4c <builtin_interfaces__msg__Time__fini>
 801fa66:	4630      	mov	r0, r6
 801fa68:	f001 fe86 	bl	8021778 <rosidl_runtime_c__String__fini>
 801fa6c:	e7ea      	b.n	801fa44 <std_msgs__msg__Header__init+0x1c>
 801fa6e:	bf00      	nop

0801fa70 <std_msgs__msg__Header__fini>:
 801fa70:	b148      	cbz	r0, 801fa86 <std_msgs__msg__Header__fini+0x16>
 801fa72:	b510      	push	{r4, lr}
 801fa74:	4604      	mov	r4, r0
 801fa76:	f7f7 f8e9 	bl	8016c4c <builtin_interfaces__msg__Time__fini>
 801fa7a:	f104 0008 	add.w	r0, r4, #8
 801fa7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fa82:	f001 be79 	b.w	8021778 <rosidl_runtime_c__String__fini>
 801fa86:	4770      	bx	lr

0801fa88 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>:
 801fa88:	b570      	push	{r4, r5, r6, lr}
 801fa8a:	4605      	mov	r5, r0
 801fa8c:	b1a8      	cbz	r0, 801faba <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x32>
 801fa8e:	f7ff ffcb 	bl	801fa28 <std_msgs__msg__Header__init>
 801fa92:	4604      	mov	r4, r0
 801fa94:	b140      	cbz	r0, 801faa8 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x20>
 801fa96:	f105 0618 	add.w	r6, r5, #24
 801fa9a:	4630      	mov	r0, r6
 801fa9c:	f001 feb4 	bl	8021808 <tier4_vehicle_msgs__msg__ActuationCommand__init>
 801faa0:	4604      	mov	r4, r0
 801faa2:	b168      	cbz	r0, 801fac0 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x38>
 801faa4:	4620      	mov	r0, r4
 801faa6:	bd70      	pop	{r4, r5, r6, pc}
 801faa8:	4628      	mov	r0, r5
 801faaa:	f7ff ffe1 	bl	801fa70 <std_msgs__msg__Header__fini>
 801faae:	f105 0018 	add.w	r0, r5, #24
 801fab2:	f001 fead 	bl	8021810 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801fab6:	4620      	mov	r0, r4
 801fab8:	bd70      	pop	{r4, r5, r6, pc}
 801faba:	4604      	mov	r4, r0
 801fabc:	4620      	mov	r0, r4
 801fabe:	bd70      	pop	{r4, r5, r6, pc}
 801fac0:	4628      	mov	r0, r5
 801fac2:	f7ff ffd5 	bl	801fa70 <std_msgs__msg__Header__fini>
 801fac6:	4630      	mov	r0, r6
 801fac8:	f001 fea2 	bl	8021810 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801facc:	e7ea      	b.n	801faa4 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x1c>
 801face:	bf00      	nop

0801fad0 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>:
 801fad0:	b148      	cbz	r0, 801fae6 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini+0x16>
 801fad2:	b510      	push	{r4, lr}
 801fad4:	4604      	mov	r4, r0
 801fad6:	f7ff ffcb 	bl	801fa70 <std_msgs__msg__Header__fini>
 801fada:	f104 0018 	add.w	r0, r4, #24
 801fade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fae2:	f001 be95 	b.w	8021810 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801fae6:	4770      	bx	lr

0801fae8 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>:
 801fae8:	b570      	push	{r4, r5, r6, lr}
 801faea:	4605      	mov	r5, r0
 801faec:	b1a8      	cbz	r0, 801fb1a <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x32>
 801faee:	f7ff ff9b 	bl	801fa28 <std_msgs__msg__Header__init>
 801faf2:	4604      	mov	r4, r0
 801faf4:	b140      	cbz	r0, 801fb08 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x20>
 801faf6:	f105 0618 	add.w	r6, r5, #24
 801fafa:	4630      	mov	r0, r6
 801fafc:	f001 fe8a 	bl	8021814 <tier4_vehicle_msgs__msg__ActuationStatus__init>
 801fb00:	4604      	mov	r4, r0
 801fb02:	b168      	cbz	r0, 801fb20 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x38>
 801fb04:	4620      	mov	r0, r4
 801fb06:	bd70      	pop	{r4, r5, r6, pc}
 801fb08:	4628      	mov	r0, r5
 801fb0a:	f7ff ffb1 	bl	801fa70 <std_msgs__msg__Header__fini>
 801fb0e:	f105 0018 	add.w	r0, r5, #24
 801fb12:	f001 fe83 	bl	802181c <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801fb16:	4620      	mov	r0, r4
 801fb18:	bd70      	pop	{r4, r5, r6, pc}
 801fb1a:	4604      	mov	r4, r0
 801fb1c:	4620      	mov	r0, r4
 801fb1e:	bd70      	pop	{r4, r5, r6, pc}
 801fb20:	4628      	mov	r0, r5
 801fb22:	f7ff ffa5 	bl	801fa70 <std_msgs__msg__Header__fini>
 801fb26:	4630      	mov	r0, r6
 801fb28:	f001 fe78 	bl	802181c <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801fb2c:	e7ea      	b.n	801fb04 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x1c>
 801fb2e:	bf00      	nop

0801fb30 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>:
 801fb30:	b148      	cbz	r0, 801fb46 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini+0x16>
 801fb32:	b510      	push	{r4, lr}
 801fb34:	4604      	mov	r4, r0
 801fb36:	f7ff ff9b 	bl	801fa70 <std_msgs__msg__Header__fini>
 801fb3a:	f104 0018 	add.w	r0, r4, #24
 801fb3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fb42:	f001 be6b 	b.w	802181c <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801fb46:	4770      	bx	lr

0801fb48 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>:
 801fb48:	b538      	push	{r3, r4, r5, lr}
 801fb4a:	4604      	mov	r4, r0
 801fb4c:	b128      	cbz	r0, 801fb5a <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x12>
 801fb4e:	f7f7 f879 	bl	8016c44 <builtin_interfaces__msg__Time__init>
 801fb52:	4605      	mov	r5, r0
 801fb54:	b120      	cbz	r0, 801fb60 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x18>
 801fb56:	4628      	mov	r0, r5
 801fb58:	bd38      	pop	{r3, r4, r5, pc}
 801fb5a:	4605      	mov	r5, r0
 801fb5c:	4628      	mov	r0, r5
 801fb5e:	bd38      	pop	{r3, r4, r5, pc}
 801fb60:	4620      	mov	r0, r4
 801fb62:	f7f7 f873 	bl	8016c4c <builtin_interfaces__msg__Time__fini>
 801fb66:	4628      	mov	r0, r5
 801fb68:	bd38      	pop	{r3, r4, r5, pc}
 801fb6a:	bf00      	nop

0801fb6c <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>:
 801fb6c:	b108      	cbz	r0, 801fb72 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini+0x6>
 801fb6e:	f7f7 b86d 	b.w	8016c4c <builtin_interfaces__msg__Time__fini>
 801fb72:	4770      	bx	lr

0801fb74 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>:
 801fb74:	b538      	push	{r3, r4, r5, lr}
 801fb76:	4604      	mov	r4, r0
 801fb78:	b128      	cbz	r0, 801fb86 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x12>
 801fb7a:	f7f7 f863 	bl	8016c44 <builtin_interfaces__msg__Time__init>
 801fb7e:	4605      	mov	r5, r0
 801fb80:	b120      	cbz	r0, 801fb8c <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x18>
 801fb82:	4628      	mov	r0, r5
 801fb84:	bd38      	pop	{r3, r4, r5, pc}
 801fb86:	4605      	mov	r5, r0
 801fb88:	4628      	mov	r0, r5
 801fb8a:	bd38      	pop	{r3, r4, r5, pc}
 801fb8c:	4620      	mov	r0, r4
 801fb8e:	f7f7 f85d 	bl	8016c4c <builtin_interfaces__msg__Time__fini>
 801fb92:	4628      	mov	r0, r5
 801fb94:	bd38      	pop	{r3, r4, r5, pc}
 801fb96:	bf00      	nop

0801fb98 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>:
 801fb98:	b108      	cbz	r0, 801fb9e <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini+0x6>
 801fb9a:	f7f7 b857 	b.w	8016c4c <builtin_interfaces__msg__Time__fini>
 801fb9e:	4770      	bx	lr

0801fba0 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_init_function>:
 801fba0:	f001 be32 	b.w	8021808 <tier4_vehicle_msgs__msg__ActuationCommand__init>

0801fba4 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_fini_function>:
 801fba4:	f001 be34 	b.w	8021810 <tier4_vehicle_msgs__msg__ActuationCommand__fini>

0801fba8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 801fba8:	4b04      	ldr	r3, [pc, #16]	@ (801fbbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801fbaa:	681a      	ldr	r2, [r3, #0]
 801fbac:	b10a      	cbz	r2, 801fbb2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0xa>
 801fbae:	4803      	ldr	r0, [pc, #12]	@ (801fbbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801fbb0:	4770      	bx	lr
 801fbb2:	4a03      	ldr	r2, [pc, #12]	@ (801fbc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x18>)
 801fbb4:	4801      	ldr	r0, [pc, #4]	@ (801fbbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801fbb6:	6812      	ldr	r2, [r2, #0]
 801fbb8:	601a      	str	r2, [r3, #0]
 801fbba:	4770      	bx	lr
 801fbbc:	24001194 	.word	0x24001194
 801fbc0:	24000d30 	.word	0x24000d30

0801fbc4 <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_init_function>:
 801fbc4:	f001 be26 	b.w	8021814 <tier4_vehicle_msgs__msg__ActuationStatus__init>

0801fbc8 <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_fini_function>:
 801fbc8:	f001 be28 	b.w	802181c <tier4_vehicle_msgs__msg__ActuationStatus__fini>

0801fbcc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 801fbcc:	4b04      	ldr	r3, [pc, #16]	@ (801fbe0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801fbce:	681a      	ldr	r2, [r3, #0]
 801fbd0:	b10a      	cbz	r2, 801fbd6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0xa>
 801fbd2:	4803      	ldr	r0, [pc, #12]	@ (801fbe0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801fbd4:	4770      	bx	lr
 801fbd6:	4a03      	ldr	r2, [pc, #12]	@ (801fbe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x18>)
 801fbd8:	4801      	ldr	r0, [pc, #4]	@ (801fbe0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801fbda:	6812      	ldr	r2, [r2, #0]
 801fbdc:	601a      	str	r2, [r3, #0]
 801fbde:	4770      	bx	lr
 801fbe0:	24001254 	.word	0x24001254
 801fbe4:	24000d30 	.word	0x24000d30

0801fbe8 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 801fbe8:	b1b8      	cbz	r0, 801fc1a <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand+0x32>
 801fbea:	b538      	push	{r3, r4, r5, lr}
 801fbec:	460d      	mov	r5, r1
 801fbee:	2108      	movs	r1, #8
 801fbf0:	4628      	mov	r0, r5
 801fbf2:	f7f4 fa4d 	bl	8014090 <ucdr_alignment>
 801fbf6:	f105 0308 	add.w	r3, r5, #8
 801fbfa:	2108      	movs	r1, #8
 801fbfc:	f1c5 0508 	rsb	r5, r5, #8
 801fc00:	181c      	adds	r4, r3, r0
 801fc02:	4620      	mov	r0, r4
 801fc04:	f7f4 fa44 	bl	8014090 <ucdr_alignment>
 801fc08:	2108      	movs	r1, #8
 801fc0a:	4408      	add	r0, r1
 801fc0c:	4404      	add	r4, r0
 801fc0e:	4620      	mov	r0, r4
 801fc10:	f7f4 fa3e 	bl	8014090 <ucdr_alignment>
 801fc14:	4428      	add	r0, r5
 801fc16:	4420      	add	r0, r4
 801fc18:	bd38      	pop	{r3, r4, r5, pc}
 801fc1a:	4770      	bx	lr

0801fc1c <_ActuationCommand__cdr_deserialize>:
 801fc1c:	b538      	push	{r3, r4, r5, lr}
 801fc1e:	460c      	mov	r4, r1
 801fc20:	b171      	cbz	r1, 801fc40 <_ActuationCommand__cdr_deserialize+0x24>
 801fc22:	4605      	mov	r5, r0
 801fc24:	f7f4 f916 	bl	8013e54 <ucdr_deserialize_double>
 801fc28:	f104 0108 	add.w	r1, r4, #8
 801fc2c:	4628      	mov	r0, r5
 801fc2e:	f7f4 f911 	bl	8013e54 <ucdr_deserialize_double>
 801fc32:	f104 0110 	add.w	r1, r4, #16
 801fc36:	4628      	mov	r0, r5
 801fc38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fc3c:	f7f4 b90a 	b.w	8013e54 <ucdr_deserialize_double>
 801fc40:	4608      	mov	r0, r1
 801fc42:	bd38      	pop	{r3, r4, r5, pc}

0801fc44 <_ActuationCommand__cdr_serialize>:
 801fc44:	b198      	cbz	r0, 801fc6e <_ActuationCommand__cdr_serialize+0x2a>
 801fc46:	b538      	push	{r3, r4, r5, lr}
 801fc48:	460d      	mov	r5, r1
 801fc4a:	4604      	mov	r4, r0
 801fc4c:	ed90 0b00 	vldr	d0, [r0]
 801fc50:	4608      	mov	r0, r1
 801fc52:	f7f4 f82f 	bl	8013cb4 <ucdr_serialize_double>
 801fc56:	4628      	mov	r0, r5
 801fc58:	ed94 0b02 	vldr	d0, [r4, #8]
 801fc5c:	f7f4 f82a 	bl	8013cb4 <ucdr_serialize_double>
 801fc60:	4628      	mov	r0, r5
 801fc62:	ed94 0b04 	vldr	d0, [r4, #16]
 801fc66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fc6a:	f7f4 b823 	b.w	8013cb4 <ucdr_serialize_double>
 801fc6e:	4770      	bx	lr

0801fc70 <_ActuationCommand__get_serialized_size>:
 801fc70:	b190      	cbz	r0, 801fc98 <_ActuationCommand__get_serialized_size+0x28>
 801fc72:	2108      	movs	r1, #8
 801fc74:	2000      	movs	r0, #0
 801fc76:	b510      	push	{r4, lr}
 801fc78:	f7f4 fa0a 	bl	8014090 <ucdr_alignment>
 801fc7c:	2108      	movs	r1, #8
 801fc7e:	1844      	adds	r4, r0, r1
 801fc80:	4620      	mov	r0, r4
 801fc82:	f7f4 fa05 	bl	8014090 <ucdr_alignment>
 801fc86:	2108      	movs	r1, #8
 801fc88:	4408      	add	r0, r1
 801fc8a:	4404      	add	r4, r0
 801fc8c:	4620      	mov	r0, r4
 801fc8e:	f7f4 f9ff 	bl	8014090 <ucdr_alignment>
 801fc92:	3008      	adds	r0, #8
 801fc94:	4420      	add	r0, r4
 801fc96:	bd10      	pop	{r4, pc}
 801fc98:	4770      	bx	lr
 801fc9a:	bf00      	nop

0801fc9c <_ActuationCommand__max_serialized_size>:
 801fc9c:	b538      	push	{r3, r4, r5, lr}
 801fc9e:	2108      	movs	r1, #8
 801fca0:	2000      	movs	r0, #0
 801fca2:	f7f4 f9f5 	bl	8014090 <ucdr_alignment>
 801fca6:	2108      	movs	r1, #8
 801fca8:	1845      	adds	r5, r0, r1
 801fcaa:	4628      	mov	r0, r5
 801fcac:	f7f4 f9f0 	bl	8014090 <ucdr_alignment>
 801fcb0:	2108      	movs	r1, #8
 801fcb2:	1844      	adds	r4, r0, r1
 801fcb4:	442c      	add	r4, r5
 801fcb6:	4620      	mov	r0, r4
 801fcb8:	f7f4 f9ea 	bl	8014090 <ucdr_alignment>
 801fcbc:	3008      	adds	r0, #8
 801fcbe:	4420      	add	r0, r4
 801fcc0:	bd38      	pop	{r3, r4, r5, pc}
 801fcc2:	bf00      	nop

0801fcc4 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 801fcc4:	b570      	push	{r4, r5, r6, lr}
 801fcc6:	460c      	mov	r4, r1
 801fcc8:	2301      	movs	r3, #1
 801fcca:	2108      	movs	r1, #8
 801fccc:	f104 0508 	add.w	r5, r4, #8
 801fcd0:	7003      	strb	r3, [r0, #0]
 801fcd2:	4620      	mov	r0, r4
 801fcd4:	f1c4 0408 	rsb	r4, r4, #8
 801fcd8:	f7f4 f9da 	bl	8014090 <ucdr_alignment>
 801fcdc:	1946      	adds	r6, r0, r5
 801fcde:	2108      	movs	r1, #8
 801fce0:	4630      	mov	r0, r6
 801fce2:	f7f4 f9d5 	bl	8014090 <ucdr_alignment>
 801fce6:	2108      	movs	r1, #8
 801fce8:	1845      	adds	r5, r0, r1
 801fcea:	4435      	add	r5, r6
 801fcec:	4628      	mov	r0, r5
 801fcee:	f7f4 f9cf 	bl	8014090 <ucdr_alignment>
 801fcf2:	4420      	add	r0, r4
 801fcf4:	4428      	add	r0, r5
 801fcf6:	bd70      	pop	{r4, r5, r6, pc}

0801fcf8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 801fcf8:	4800      	ldr	r0, [pc, #0]	@ (801fcfc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x4>)
 801fcfa:	4770      	bx	lr
 801fcfc:	24001260 	.word	0x24001260

0801fd00 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 801fd00:	b1b8      	cbz	r0, 801fd32 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus+0x32>
 801fd02:	b538      	push	{r3, r4, r5, lr}
 801fd04:	460d      	mov	r5, r1
 801fd06:	2108      	movs	r1, #8
 801fd08:	4628      	mov	r0, r5
 801fd0a:	f7f4 f9c1 	bl	8014090 <ucdr_alignment>
 801fd0e:	f105 0308 	add.w	r3, r5, #8
 801fd12:	2108      	movs	r1, #8
 801fd14:	f1c5 0508 	rsb	r5, r5, #8
 801fd18:	181c      	adds	r4, r3, r0
 801fd1a:	4620      	mov	r0, r4
 801fd1c:	f7f4 f9b8 	bl	8014090 <ucdr_alignment>
 801fd20:	2108      	movs	r1, #8
 801fd22:	4408      	add	r0, r1
 801fd24:	4404      	add	r4, r0
 801fd26:	4620      	mov	r0, r4
 801fd28:	f7f4 f9b2 	bl	8014090 <ucdr_alignment>
 801fd2c:	4428      	add	r0, r5
 801fd2e:	4420      	add	r0, r4
 801fd30:	bd38      	pop	{r3, r4, r5, pc}
 801fd32:	4770      	bx	lr

0801fd34 <_ActuationStatus__cdr_deserialize>:
 801fd34:	b538      	push	{r3, r4, r5, lr}
 801fd36:	460c      	mov	r4, r1
 801fd38:	b171      	cbz	r1, 801fd58 <_ActuationStatus__cdr_deserialize+0x24>
 801fd3a:	4605      	mov	r5, r0
 801fd3c:	f7f4 f88a 	bl	8013e54 <ucdr_deserialize_double>
 801fd40:	f104 0108 	add.w	r1, r4, #8
 801fd44:	4628      	mov	r0, r5
 801fd46:	f7f4 f885 	bl	8013e54 <ucdr_deserialize_double>
 801fd4a:	f104 0110 	add.w	r1, r4, #16
 801fd4e:	4628      	mov	r0, r5
 801fd50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fd54:	f7f4 b87e 	b.w	8013e54 <ucdr_deserialize_double>
 801fd58:	4608      	mov	r0, r1
 801fd5a:	bd38      	pop	{r3, r4, r5, pc}

0801fd5c <_ActuationStatus__cdr_serialize>:
 801fd5c:	b198      	cbz	r0, 801fd86 <_ActuationStatus__cdr_serialize+0x2a>
 801fd5e:	b538      	push	{r3, r4, r5, lr}
 801fd60:	460d      	mov	r5, r1
 801fd62:	4604      	mov	r4, r0
 801fd64:	ed90 0b00 	vldr	d0, [r0]
 801fd68:	4608      	mov	r0, r1
 801fd6a:	f7f3 ffa3 	bl	8013cb4 <ucdr_serialize_double>
 801fd6e:	4628      	mov	r0, r5
 801fd70:	ed94 0b02 	vldr	d0, [r4, #8]
 801fd74:	f7f3 ff9e 	bl	8013cb4 <ucdr_serialize_double>
 801fd78:	4628      	mov	r0, r5
 801fd7a:	ed94 0b04 	vldr	d0, [r4, #16]
 801fd7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fd82:	f7f3 bf97 	b.w	8013cb4 <ucdr_serialize_double>
 801fd86:	4770      	bx	lr

0801fd88 <_ActuationStatus__get_serialized_size>:
 801fd88:	b190      	cbz	r0, 801fdb0 <_ActuationStatus__get_serialized_size+0x28>
 801fd8a:	2108      	movs	r1, #8
 801fd8c:	2000      	movs	r0, #0
 801fd8e:	b510      	push	{r4, lr}
 801fd90:	f7f4 f97e 	bl	8014090 <ucdr_alignment>
 801fd94:	2108      	movs	r1, #8
 801fd96:	1844      	adds	r4, r0, r1
 801fd98:	4620      	mov	r0, r4
 801fd9a:	f7f4 f979 	bl	8014090 <ucdr_alignment>
 801fd9e:	2108      	movs	r1, #8
 801fda0:	4408      	add	r0, r1
 801fda2:	4404      	add	r4, r0
 801fda4:	4620      	mov	r0, r4
 801fda6:	f7f4 f973 	bl	8014090 <ucdr_alignment>
 801fdaa:	3008      	adds	r0, #8
 801fdac:	4420      	add	r0, r4
 801fdae:	bd10      	pop	{r4, pc}
 801fdb0:	4770      	bx	lr
 801fdb2:	bf00      	nop

0801fdb4 <_ActuationStatus__max_serialized_size>:
 801fdb4:	b538      	push	{r3, r4, r5, lr}
 801fdb6:	2108      	movs	r1, #8
 801fdb8:	2000      	movs	r0, #0
 801fdba:	f7f4 f969 	bl	8014090 <ucdr_alignment>
 801fdbe:	2108      	movs	r1, #8
 801fdc0:	1845      	adds	r5, r0, r1
 801fdc2:	4628      	mov	r0, r5
 801fdc4:	f7f4 f964 	bl	8014090 <ucdr_alignment>
 801fdc8:	2108      	movs	r1, #8
 801fdca:	1844      	adds	r4, r0, r1
 801fdcc:	442c      	add	r4, r5
 801fdce:	4620      	mov	r0, r4
 801fdd0:	f7f4 f95e 	bl	8014090 <ucdr_alignment>
 801fdd4:	3008      	adds	r0, #8
 801fdd6:	4420      	add	r0, r4
 801fdd8:	bd38      	pop	{r3, r4, r5, pc}
 801fdda:	bf00      	nop

0801fddc <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 801fddc:	b570      	push	{r4, r5, r6, lr}
 801fdde:	460c      	mov	r4, r1
 801fde0:	2301      	movs	r3, #1
 801fde2:	2108      	movs	r1, #8
 801fde4:	f104 0508 	add.w	r5, r4, #8
 801fde8:	7003      	strb	r3, [r0, #0]
 801fdea:	4620      	mov	r0, r4
 801fdec:	f1c4 0408 	rsb	r4, r4, #8
 801fdf0:	f7f4 f94e 	bl	8014090 <ucdr_alignment>
 801fdf4:	1946      	adds	r6, r0, r5
 801fdf6:	2108      	movs	r1, #8
 801fdf8:	4630      	mov	r0, r6
 801fdfa:	f7f4 f949 	bl	8014090 <ucdr_alignment>
 801fdfe:	2108      	movs	r1, #8
 801fe00:	1845      	adds	r5, r0, r1
 801fe02:	4435      	add	r5, r6
 801fe04:	4628      	mov	r0, r5
 801fe06:	f7f4 f943 	bl	8014090 <ucdr_alignment>
 801fe0a:	4420      	add	r0, r4
 801fe0c:	4428      	add	r0, r5
 801fe0e:	bd70      	pop	{r4, r5, r6, pc}

0801fe10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 801fe10:	4800      	ldr	r0, [pc, #0]	@ (801fe14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x4>)
 801fe12:	4770      	bx	lr
 801fe14:	24001288 	.word	0x24001288

0801fe18 <ucdr_serialize_endian_array_char>:
 801fe18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fe1c:	4619      	mov	r1, r3
 801fe1e:	461f      	mov	r7, r3
 801fe20:	4605      	mov	r5, r0
 801fe22:	4690      	mov	r8, r2
 801fe24:	f7f4 f8dc 	bl	8013fe0 <ucdr_check_buffer_available_for>
 801fe28:	b9e0      	cbnz	r0, 801fe64 <ucdr_serialize_endian_array_char+0x4c>
 801fe2a:	463e      	mov	r6, r7
 801fe2c:	e00b      	b.n	801fe46 <ucdr_serialize_endian_array_char+0x2e>
 801fe2e:	4441      	add	r1, r8
 801fe30:	68a8      	ldr	r0, [r5, #8]
 801fe32:	4622      	mov	r2, r4
 801fe34:	1b36      	subs	r6, r6, r4
 801fe36:	f002 faea 	bl	802240e <memcpy>
 801fe3a:	68ab      	ldr	r3, [r5, #8]
 801fe3c:	6928      	ldr	r0, [r5, #16]
 801fe3e:	4423      	add	r3, r4
 801fe40:	4420      	add	r0, r4
 801fe42:	60ab      	str	r3, [r5, #8]
 801fe44:	6128      	str	r0, [r5, #16]
 801fe46:	4631      	mov	r1, r6
 801fe48:	2201      	movs	r2, #1
 801fe4a:	4628      	mov	r0, r5
 801fe4c:	f7f4 f952 	bl	80140f4 <ucdr_check_final_buffer_behavior_array>
 801fe50:	1bb9      	subs	r1, r7, r6
 801fe52:	4604      	mov	r4, r0
 801fe54:	2800      	cmp	r0, #0
 801fe56:	d1ea      	bne.n	801fe2e <ucdr_serialize_endian_array_char+0x16>
 801fe58:	2301      	movs	r3, #1
 801fe5a:	7da8      	ldrb	r0, [r5, #22]
 801fe5c:	756b      	strb	r3, [r5, #21]
 801fe5e:	4058      	eors	r0, r3
 801fe60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fe64:	463a      	mov	r2, r7
 801fe66:	4641      	mov	r1, r8
 801fe68:	68a8      	ldr	r0, [r5, #8]
 801fe6a:	f002 fad0 	bl	802240e <memcpy>
 801fe6e:	68aa      	ldr	r2, [r5, #8]
 801fe70:	692b      	ldr	r3, [r5, #16]
 801fe72:	443a      	add	r2, r7
 801fe74:	443b      	add	r3, r7
 801fe76:	60aa      	str	r2, [r5, #8]
 801fe78:	612b      	str	r3, [r5, #16]
 801fe7a:	e7ed      	b.n	801fe58 <ucdr_serialize_endian_array_char+0x40>

0801fe7c <ucdr_deserialize_endian_array_char>:
 801fe7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fe80:	4619      	mov	r1, r3
 801fe82:	461f      	mov	r7, r3
 801fe84:	4605      	mov	r5, r0
 801fe86:	4690      	mov	r8, r2
 801fe88:	f7f4 f8aa 	bl	8013fe0 <ucdr_check_buffer_available_for>
 801fe8c:	b9e8      	cbnz	r0, 801feca <ucdr_deserialize_endian_array_char+0x4e>
 801fe8e:	463e      	mov	r6, r7
 801fe90:	e00c      	b.n	801feac <ucdr_deserialize_endian_array_char+0x30>
 801fe92:	eb08 0003 	add.w	r0, r8, r3
 801fe96:	68a9      	ldr	r1, [r5, #8]
 801fe98:	4622      	mov	r2, r4
 801fe9a:	1b36      	subs	r6, r6, r4
 801fe9c:	f002 fab7 	bl	802240e <memcpy>
 801fea0:	68ab      	ldr	r3, [r5, #8]
 801fea2:	6928      	ldr	r0, [r5, #16]
 801fea4:	4423      	add	r3, r4
 801fea6:	4420      	add	r0, r4
 801fea8:	60ab      	str	r3, [r5, #8]
 801feaa:	6128      	str	r0, [r5, #16]
 801feac:	4631      	mov	r1, r6
 801feae:	2201      	movs	r2, #1
 801feb0:	4628      	mov	r0, r5
 801feb2:	f7f4 f91f 	bl	80140f4 <ucdr_check_final_buffer_behavior_array>
 801feb6:	1bbb      	subs	r3, r7, r6
 801feb8:	4604      	mov	r4, r0
 801feba:	2800      	cmp	r0, #0
 801febc:	d1e9      	bne.n	801fe92 <ucdr_deserialize_endian_array_char+0x16>
 801febe:	2301      	movs	r3, #1
 801fec0:	7da8      	ldrb	r0, [r5, #22]
 801fec2:	756b      	strb	r3, [r5, #21]
 801fec4:	4058      	eors	r0, r3
 801fec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801feca:	463a      	mov	r2, r7
 801fecc:	68a9      	ldr	r1, [r5, #8]
 801fece:	4640      	mov	r0, r8
 801fed0:	f002 fa9d 	bl	802240e <memcpy>
 801fed4:	68aa      	ldr	r2, [r5, #8]
 801fed6:	692b      	ldr	r3, [r5, #16]
 801fed8:	443a      	add	r2, r7
 801feda:	443b      	add	r3, r7
 801fedc:	60aa      	str	r2, [r5, #8]
 801fede:	612b      	str	r3, [r5, #16]
 801fee0:	e7ed      	b.n	801febe <ucdr_deserialize_endian_array_char+0x42>
 801fee2:	bf00      	nop

0801fee4 <ucdr_serialize_array_uint8_t>:
 801fee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fee8:	4688      	mov	r8, r1
 801feea:	4611      	mov	r1, r2
 801feec:	4617      	mov	r7, r2
 801feee:	4605      	mov	r5, r0
 801fef0:	f7f4 f876 	bl	8013fe0 <ucdr_check_buffer_available_for>
 801fef4:	b9e0      	cbnz	r0, 801ff30 <ucdr_serialize_array_uint8_t+0x4c>
 801fef6:	463e      	mov	r6, r7
 801fef8:	e00b      	b.n	801ff12 <ucdr_serialize_array_uint8_t+0x2e>
 801fefa:	4441      	add	r1, r8
 801fefc:	68a8      	ldr	r0, [r5, #8]
 801fefe:	4622      	mov	r2, r4
 801ff00:	1b36      	subs	r6, r6, r4
 801ff02:	f002 fa84 	bl	802240e <memcpy>
 801ff06:	68ab      	ldr	r3, [r5, #8]
 801ff08:	6928      	ldr	r0, [r5, #16]
 801ff0a:	4423      	add	r3, r4
 801ff0c:	4420      	add	r0, r4
 801ff0e:	60ab      	str	r3, [r5, #8]
 801ff10:	6128      	str	r0, [r5, #16]
 801ff12:	4631      	mov	r1, r6
 801ff14:	2201      	movs	r2, #1
 801ff16:	4628      	mov	r0, r5
 801ff18:	f7f4 f8ec 	bl	80140f4 <ucdr_check_final_buffer_behavior_array>
 801ff1c:	1bb9      	subs	r1, r7, r6
 801ff1e:	4604      	mov	r4, r0
 801ff20:	2800      	cmp	r0, #0
 801ff22:	d1ea      	bne.n	801fefa <ucdr_serialize_array_uint8_t+0x16>
 801ff24:	2301      	movs	r3, #1
 801ff26:	7da8      	ldrb	r0, [r5, #22]
 801ff28:	756b      	strb	r3, [r5, #21]
 801ff2a:	4058      	eors	r0, r3
 801ff2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff30:	463a      	mov	r2, r7
 801ff32:	4641      	mov	r1, r8
 801ff34:	68a8      	ldr	r0, [r5, #8]
 801ff36:	f002 fa6a 	bl	802240e <memcpy>
 801ff3a:	68aa      	ldr	r2, [r5, #8]
 801ff3c:	692b      	ldr	r3, [r5, #16]
 801ff3e:	443a      	add	r2, r7
 801ff40:	443b      	add	r3, r7
 801ff42:	60aa      	str	r2, [r5, #8]
 801ff44:	612b      	str	r3, [r5, #16]
 801ff46:	e7ed      	b.n	801ff24 <ucdr_serialize_array_uint8_t+0x40>

0801ff48 <ucdr_serialize_endian_array_uint8_t>:
 801ff48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff4c:	4619      	mov	r1, r3
 801ff4e:	461f      	mov	r7, r3
 801ff50:	4605      	mov	r5, r0
 801ff52:	4690      	mov	r8, r2
 801ff54:	f7f4 f844 	bl	8013fe0 <ucdr_check_buffer_available_for>
 801ff58:	b9e0      	cbnz	r0, 801ff94 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801ff5a:	463e      	mov	r6, r7
 801ff5c:	e00b      	b.n	801ff76 <ucdr_serialize_endian_array_uint8_t+0x2e>
 801ff5e:	4441      	add	r1, r8
 801ff60:	68a8      	ldr	r0, [r5, #8]
 801ff62:	4622      	mov	r2, r4
 801ff64:	1b36      	subs	r6, r6, r4
 801ff66:	f002 fa52 	bl	802240e <memcpy>
 801ff6a:	68ab      	ldr	r3, [r5, #8]
 801ff6c:	6928      	ldr	r0, [r5, #16]
 801ff6e:	4423      	add	r3, r4
 801ff70:	4420      	add	r0, r4
 801ff72:	60ab      	str	r3, [r5, #8]
 801ff74:	6128      	str	r0, [r5, #16]
 801ff76:	4631      	mov	r1, r6
 801ff78:	2201      	movs	r2, #1
 801ff7a:	4628      	mov	r0, r5
 801ff7c:	f7f4 f8ba 	bl	80140f4 <ucdr_check_final_buffer_behavior_array>
 801ff80:	1bb9      	subs	r1, r7, r6
 801ff82:	4604      	mov	r4, r0
 801ff84:	2800      	cmp	r0, #0
 801ff86:	d1ea      	bne.n	801ff5e <ucdr_serialize_endian_array_uint8_t+0x16>
 801ff88:	2301      	movs	r3, #1
 801ff8a:	7da8      	ldrb	r0, [r5, #22]
 801ff8c:	756b      	strb	r3, [r5, #21]
 801ff8e:	4058      	eors	r0, r3
 801ff90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff94:	463a      	mov	r2, r7
 801ff96:	4641      	mov	r1, r8
 801ff98:	68a8      	ldr	r0, [r5, #8]
 801ff9a:	f002 fa38 	bl	802240e <memcpy>
 801ff9e:	68aa      	ldr	r2, [r5, #8]
 801ffa0:	692b      	ldr	r3, [r5, #16]
 801ffa2:	443a      	add	r2, r7
 801ffa4:	443b      	add	r3, r7
 801ffa6:	60aa      	str	r2, [r5, #8]
 801ffa8:	612b      	str	r3, [r5, #16]
 801ffaa:	e7ed      	b.n	801ff88 <ucdr_serialize_endian_array_uint8_t+0x40>

0801ffac <ucdr_deserialize_array_uint8_t>:
 801ffac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ffb0:	4688      	mov	r8, r1
 801ffb2:	4611      	mov	r1, r2
 801ffb4:	4617      	mov	r7, r2
 801ffb6:	4605      	mov	r5, r0
 801ffb8:	f7f4 f812 	bl	8013fe0 <ucdr_check_buffer_available_for>
 801ffbc:	b9e8      	cbnz	r0, 801fffa <ucdr_deserialize_array_uint8_t+0x4e>
 801ffbe:	463e      	mov	r6, r7
 801ffc0:	e00c      	b.n	801ffdc <ucdr_deserialize_array_uint8_t+0x30>
 801ffc2:	eb08 0003 	add.w	r0, r8, r3
 801ffc6:	68a9      	ldr	r1, [r5, #8]
 801ffc8:	4622      	mov	r2, r4
 801ffca:	1b36      	subs	r6, r6, r4
 801ffcc:	f002 fa1f 	bl	802240e <memcpy>
 801ffd0:	68ab      	ldr	r3, [r5, #8]
 801ffd2:	6928      	ldr	r0, [r5, #16]
 801ffd4:	4423      	add	r3, r4
 801ffd6:	4420      	add	r0, r4
 801ffd8:	60ab      	str	r3, [r5, #8]
 801ffda:	6128      	str	r0, [r5, #16]
 801ffdc:	4631      	mov	r1, r6
 801ffde:	2201      	movs	r2, #1
 801ffe0:	4628      	mov	r0, r5
 801ffe2:	f7f4 f887 	bl	80140f4 <ucdr_check_final_buffer_behavior_array>
 801ffe6:	1bbb      	subs	r3, r7, r6
 801ffe8:	4604      	mov	r4, r0
 801ffea:	2800      	cmp	r0, #0
 801ffec:	d1e9      	bne.n	801ffc2 <ucdr_deserialize_array_uint8_t+0x16>
 801ffee:	2301      	movs	r3, #1
 801fff0:	7da8      	ldrb	r0, [r5, #22]
 801fff2:	756b      	strb	r3, [r5, #21]
 801fff4:	4058      	eors	r0, r3
 801fff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fffa:	463a      	mov	r2, r7
 801fffc:	68a9      	ldr	r1, [r5, #8]
 801fffe:	4640      	mov	r0, r8
 8020000:	f002 fa05 	bl	802240e <memcpy>
 8020004:	68aa      	ldr	r2, [r5, #8]
 8020006:	692b      	ldr	r3, [r5, #16]
 8020008:	443a      	add	r2, r7
 802000a:	443b      	add	r3, r7
 802000c:	60aa      	str	r2, [r5, #8]
 802000e:	612b      	str	r3, [r5, #16]
 8020010:	e7ed      	b.n	801ffee <ucdr_deserialize_array_uint8_t+0x42>
 8020012:	bf00      	nop

08020014 <ucdr_deserialize_endian_array_uint8_t>:
 8020014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020018:	4619      	mov	r1, r3
 802001a:	461f      	mov	r7, r3
 802001c:	4605      	mov	r5, r0
 802001e:	4690      	mov	r8, r2
 8020020:	f7f3 ffde 	bl	8013fe0 <ucdr_check_buffer_available_for>
 8020024:	b9e8      	cbnz	r0, 8020062 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8020026:	463e      	mov	r6, r7
 8020028:	e00c      	b.n	8020044 <ucdr_deserialize_endian_array_uint8_t+0x30>
 802002a:	eb08 0003 	add.w	r0, r8, r3
 802002e:	68a9      	ldr	r1, [r5, #8]
 8020030:	4622      	mov	r2, r4
 8020032:	1b36      	subs	r6, r6, r4
 8020034:	f002 f9eb 	bl	802240e <memcpy>
 8020038:	68ab      	ldr	r3, [r5, #8]
 802003a:	6928      	ldr	r0, [r5, #16]
 802003c:	4423      	add	r3, r4
 802003e:	4420      	add	r0, r4
 8020040:	60ab      	str	r3, [r5, #8]
 8020042:	6128      	str	r0, [r5, #16]
 8020044:	4631      	mov	r1, r6
 8020046:	2201      	movs	r2, #1
 8020048:	4628      	mov	r0, r5
 802004a:	f7f4 f853 	bl	80140f4 <ucdr_check_final_buffer_behavior_array>
 802004e:	1bbb      	subs	r3, r7, r6
 8020050:	4604      	mov	r4, r0
 8020052:	2800      	cmp	r0, #0
 8020054:	d1e9      	bne.n	802002a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8020056:	2301      	movs	r3, #1
 8020058:	7da8      	ldrb	r0, [r5, #22]
 802005a:	756b      	strb	r3, [r5, #21]
 802005c:	4058      	eors	r0, r3
 802005e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020062:	463a      	mov	r2, r7
 8020064:	68a9      	ldr	r1, [r5, #8]
 8020066:	4640      	mov	r0, r8
 8020068:	f002 f9d1 	bl	802240e <memcpy>
 802006c:	68aa      	ldr	r2, [r5, #8]
 802006e:	692b      	ldr	r3, [r5, #16]
 8020070:	443a      	add	r2, r7
 8020072:	443b      	add	r3, r7
 8020074:	60aa      	str	r2, [r5, #8]
 8020076:	612b      	str	r3, [r5, #16]
 8020078:	e7ed      	b.n	8020056 <ucdr_deserialize_endian_array_uint8_t+0x42>
 802007a:	bf00      	nop

0802007c <ucdr_serialize_string>:
 802007c:	b510      	push	{r4, lr}
 802007e:	b082      	sub	sp, #8
 8020080:	4604      	mov	r4, r0
 8020082:	4608      	mov	r0, r1
 8020084:	9101      	str	r1, [sp, #4]
 8020086:	f7e0 f935 	bl	80002f4 <strlen>
 802008a:	4602      	mov	r2, r0
 802008c:	9901      	ldr	r1, [sp, #4]
 802008e:	4620      	mov	r0, r4
 8020090:	3201      	adds	r2, #1
 8020092:	b002      	add	sp, #8
 8020094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020098:	f7f6 bdda 	b.w	8016c50 <ucdr_serialize_sequence_char>

0802009c <ucdr_deserialize_string>:
 802009c:	b500      	push	{lr}
 802009e:	b083      	sub	sp, #12
 80200a0:	ab01      	add	r3, sp, #4
 80200a2:	f7f6 fde7 	bl	8016c74 <ucdr_deserialize_sequence_char>
 80200a6:	b003      	add	sp, #12
 80200a8:	f85d fb04 	ldr.w	pc, [sp], #4

080200ac <uxr_init_input_best_effort_stream>:
 80200ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80200b0:	8003      	strh	r3, [r0, #0]
 80200b2:	4770      	bx	lr

080200b4 <uxr_reset_input_best_effort_stream>:
 80200b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80200b8:	8003      	strh	r3, [r0, #0]
 80200ba:	4770      	bx	lr

080200bc <uxr_receive_best_effort_message>:
 80200bc:	b538      	push	{r3, r4, r5, lr}
 80200be:	4604      	mov	r4, r0
 80200c0:	8800      	ldrh	r0, [r0, #0]
 80200c2:	460d      	mov	r5, r1
 80200c4:	f000 fe74 	bl	8020db0 <uxr_seq_num_cmp>
 80200c8:	4603      	mov	r3, r0
 80200ca:	0fc0      	lsrs	r0, r0, #31
 80200cc:	2b00      	cmp	r3, #0
 80200ce:	bfb8      	it	lt
 80200d0:	8025      	strhlt	r5, [r4, #0]
 80200d2:	bd38      	pop	{r3, r4, r5, pc}

080200d4 <on_full_input_buffer>:
 80200d4:	b570      	push	{r4, r5, r6, lr}
 80200d6:	460c      	mov	r4, r1
 80200d8:	4605      	mov	r5, r0
 80200da:	8908      	ldrh	r0, [r1, #8]
 80200dc:	682b      	ldr	r3, [r5, #0]
 80200de:	7d26      	ldrb	r6, [r4, #20]
 80200e0:	e9d1 1200 	ldrd	r1, r2, [r1]
 80200e4:	fbb2 f2f0 	udiv	r2, r2, r0
 80200e8:	eba3 0c01 	sub.w	ip, r3, r1
 80200ec:	fbbc fcf2 	udiv	ip, ip, r2
 80200f0:	f10c 0c01 	add.w	ip, ip, #1
 80200f4:	fa1f f38c 	uxth.w	r3, ip
 80200f8:	fbb3 fcf0 	udiv	ip, r3, r0
 80200fc:	fb00 331c 	mls	r3, r0, ip, r3
 8020100:	b29b      	uxth	r3, r3
 8020102:	fb02 f303 	mul.w	r3, r2, r3
 8020106:	1d18      	adds	r0, r3, #4
 8020108:	4408      	add	r0, r1
 802010a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 802010e:	b116      	cbz	r6, 8020116 <on_full_input_buffer+0x42>
 8020110:	2600      	movs	r6, #0
 8020112:	f840 6c04 	str.w	r6, [r0, #-4]
 8020116:	2a03      	cmp	r2, #3
 8020118:	d801      	bhi.n	802011e <on_full_input_buffer+0x4a>
 802011a:	2001      	movs	r0, #1
 802011c:	bd70      	pop	{r4, r5, r6, pc}
 802011e:	3308      	adds	r3, #8
 8020120:	4628      	mov	r0, r5
 8020122:	3a04      	subs	r2, #4
 8020124:	4419      	add	r1, r3
 8020126:	692b      	ldr	r3, [r5, #16]
 8020128:	f7f3 ffa6 	bl	8014078 <ucdr_init_buffer_origin>
 802012c:	4628      	mov	r0, r5
 802012e:	4622      	mov	r2, r4
 8020130:	4902      	ldr	r1, [pc, #8]	@ (802013c <on_full_input_buffer+0x68>)
 8020132:	f7f3 ff7d 	bl	8014030 <ucdr_set_on_full_buffer_callback>
 8020136:	2000      	movs	r0, #0
 8020138:	bd70      	pop	{r4, r5, r6, pc}
 802013a:	bf00      	nop
 802013c:	080200d5 	.word	0x080200d5

08020140 <uxr_init_input_reliable_stream>:
 8020140:	b510      	push	{r4, lr}
 8020142:	e9c0 1200 	strd	r1, r2, [r0]
 8020146:	2400      	movs	r4, #0
 8020148:	9a02      	ldr	r2, [sp, #8]
 802014a:	8103      	strh	r3, [r0, #8]
 802014c:	6102      	str	r2, [r0, #16]
 802014e:	7504      	strb	r4, [r0, #20]
 8020150:	b1c3      	cbz	r3, 8020184 <uxr_init_input_reliable_stream+0x44>
 8020152:	600c      	str	r4, [r1, #0]
 8020154:	8901      	ldrh	r1, [r0, #8]
 8020156:	2901      	cmp	r1, #1
 8020158:	d914      	bls.n	8020184 <uxr_init_input_reliable_stream+0x44>
 802015a:	f04f 0c01 	mov.w	ip, #1
 802015e:	6843      	ldr	r3, [r0, #4]
 8020160:	f10c 0e01 	add.w	lr, ip, #1
 8020164:	fbbc f2f1 	udiv	r2, ip, r1
 8020168:	fbb3 f3f1 	udiv	r3, r3, r1
 802016c:	fb01 c212 	mls	r2, r1, r2, ip
 8020170:	fa1f fc8e 	uxth.w	ip, lr
 8020174:	b292      	uxth	r2, r2
 8020176:	fb02 f303 	mul.w	r3, r2, r3
 802017a:	6802      	ldr	r2, [r0, #0]
 802017c:	50d4      	str	r4, [r2, r3]
 802017e:	8901      	ldrh	r1, [r0, #8]
 8020180:	4561      	cmp	r1, ip
 8020182:	d8ec      	bhi.n	802015e <uxr_init_input_reliable_stream+0x1e>
 8020184:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020188:	60c3      	str	r3, [r0, #12]
 802018a:	bd10      	pop	{r4, pc}

0802018c <uxr_reset_input_reliable_stream>:
 802018c:	8901      	ldrh	r1, [r0, #8]
 802018e:	b1d9      	cbz	r1, 80201c8 <uxr_reset_input_reliable_stream+0x3c>
 8020190:	b510      	push	{r4, lr}
 8020192:	f04f 0e00 	mov.w	lr, #0
 8020196:	46f4      	mov	ip, lr
 8020198:	4674      	mov	r4, lr
 802019a:	6843      	ldr	r3, [r0, #4]
 802019c:	f10e 0e01 	add.w	lr, lr, #1
 80201a0:	fbbc f2f1 	udiv	r2, ip, r1
 80201a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80201a8:	fb01 c212 	mls	r2, r1, r2, ip
 80201ac:	fa1f fc8e 	uxth.w	ip, lr
 80201b0:	b292      	uxth	r2, r2
 80201b2:	fb02 f303 	mul.w	r3, r2, r3
 80201b6:	6802      	ldr	r2, [r0, #0]
 80201b8:	50d4      	str	r4, [r2, r3]
 80201ba:	8901      	ldrh	r1, [r0, #8]
 80201bc:	4561      	cmp	r1, ip
 80201be:	d8ec      	bhi.n	802019a <uxr_reset_input_reliable_stream+0xe>
 80201c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80201c4:	60c3      	str	r3, [r0, #12]
 80201c6:	bd10      	pop	{r4, pc}
 80201c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80201cc:	60c3      	str	r3, [r0, #12]
 80201ce:	4770      	bx	lr

080201d0 <uxr_receive_reliable_message>:
 80201d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80201d4:	4604      	mov	r4, r0
 80201d6:	460d      	mov	r5, r1
 80201d8:	8901      	ldrh	r1, [r0, #8]
 80201da:	4617      	mov	r7, r2
 80201dc:	8980      	ldrh	r0, [r0, #12]
 80201de:	4698      	mov	r8, r3
 80201e0:	f000 fdde 	bl	8020da0 <uxr_seq_num_add>
 80201e4:	4629      	mov	r1, r5
 80201e6:	4606      	mov	r6, r0
 80201e8:	89a0      	ldrh	r0, [r4, #12]
 80201ea:	f000 fde1 	bl	8020db0 <uxr_seq_num_cmp>
 80201ee:	2800      	cmp	r0, #0
 80201f0:	db0a      	blt.n	8020208 <uxr_receive_reliable_message+0x38>
 80201f2:	2600      	movs	r6, #0
 80201f4:	4629      	mov	r1, r5
 80201f6:	89e0      	ldrh	r0, [r4, #14]
 80201f8:	f000 fdda 	bl	8020db0 <uxr_seq_num_cmp>
 80201fc:	2800      	cmp	r0, #0
 80201fe:	da00      	bge.n	8020202 <uxr_receive_reliable_message+0x32>
 8020200:	81e5      	strh	r5, [r4, #14]
 8020202:	4630      	mov	r0, r6
 8020204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020208:	4630      	mov	r0, r6
 802020a:	4629      	mov	r1, r5
 802020c:	f000 fdd0 	bl	8020db0 <uxr_seq_num_cmp>
 8020210:	2800      	cmp	r0, #0
 8020212:	dbee      	blt.n	80201f2 <uxr_receive_reliable_message+0x22>
 8020214:	6923      	ldr	r3, [r4, #16]
 8020216:	4638      	mov	r0, r7
 8020218:	4798      	blx	r3
 802021a:	4681      	mov	r9, r0
 802021c:	2101      	movs	r1, #1
 802021e:	89a0      	ldrh	r0, [r4, #12]
 8020220:	f000 fdbe 	bl	8020da0 <uxr_seq_num_add>
 8020224:	f1b9 0f00 	cmp.w	r9, #0
 8020228:	bf08      	it	eq
 802022a:	4285      	cmpeq	r5, r0
 802022c:	bf0c      	ite	eq
 802022e:	2601      	moveq	r6, #1
 8020230:	2600      	movne	r6, #0
 8020232:	d104      	bne.n	802023e <uxr_receive_reliable_message+0x6e>
 8020234:	2300      	movs	r3, #0
 8020236:	9a08      	ldr	r2, [sp, #32]
 8020238:	81a0      	strh	r0, [r4, #12]
 802023a:	7013      	strb	r3, [r2, #0]
 802023c:	e7da      	b.n	80201f4 <uxr_receive_reliable_message+0x24>
 802023e:	8922      	ldrh	r2, [r4, #8]
 8020240:	6863      	ldr	r3, [r4, #4]
 8020242:	fbb5 f0f2 	udiv	r0, r5, r2
 8020246:	fbb3 f3f2 	udiv	r3, r3, r2
 802024a:	fb02 5010 	mls	r0, r2, r0, r5
 802024e:	b280      	uxth	r0, r0
 8020250:	fb03 f000 	mul.w	r0, r3, r0
 8020254:	6823      	ldr	r3, [r4, #0]
 8020256:	3004      	adds	r0, #4
 8020258:	4418      	add	r0, r3
 802025a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 802025e:	2b00      	cmp	r3, #0
 8020260:	d1c7      	bne.n	80201f2 <uxr_receive_reliable_message+0x22>
 8020262:	4639      	mov	r1, r7
 8020264:	4642      	mov	r2, r8
 8020266:	f002 f8d2 	bl	802240e <memcpy>
 802026a:	8921      	ldrh	r1, [r4, #8]
 802026c:	6863      	ldr	r3, [r4, #4]
 802026e:	fbb5 f2f1 	udiv	r2, r5, r1
 8020272:	fbb3 f3f1 	udiv	r3, r3, r1
 8020276:	fb01 5212 	mls	r2, r1, r2, r5
 802027a:	b292      	uxth	r2, r2
 802027c:	fb02 f303 	mul.w	r3, r2, r3
 8020280:	6822      	ldr	r2, [r4, #0]
 8020282:	f842 8003 	str.w	r8, [r2, r3]
 8020286:	2301      	movs	r3, #1
 8020288:	9a08      	ldr	r2, [sp, #32]
 802028a:	7013      	strb	r3, [r2, #0]
 802028c:	f1b9 0f00 	cmp.w	r9, #0
 8020290:	d0af      	beq.n	80201f2 <uxr_receive_reliable_message+0x22>
 8020292:	89a6      	ldrh	r6, [r4, #12]
 8020294:	2101      	movs	r1, #1
 8020296:	4630      	mov	r0, r6
 8020298:	f000 fd82 	bl	8020da0 <uxr_seq_num_add>
 802029c:	8921      	ldrh	r1, [r4, #8]
 802029e:	6863      	ldr	r3, [r4, #4]
 80202a0:	4606      	mov	r6, r0
 80202a2:	fbb0 f2f1 	udiv	r2, r0, r1
 80202a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80202aa:	fb01 0212 	mls	r2, r1, r2, r0
 80202ae:	6820      	ldr	r0, [r4, #0]
 80202b0:	b292      	uxth	r2, r2
 80202b2:	fb02 f303 	mul.w	r3, r2, r3
 80202b6:	3304      	adds	r3, #4
 80202b8:	4418      	add	r0, r3
 80202ba:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80202be:	2b00      	cmp	r3, #0
 80202c0:	d097      	beq.n	80201f2 <uxr_receive_reliable_message+0x22>
 80202c2:	6923      	ldr	r3, [r4, #16]
 80202c4:	4798      	blx	r3
 80202c6:	2802      	cmp	r0, #2
 80202c8:	d002      	beq.n	80202d0 <uxr_receive_reliable_message+0x100>
 80202ca:	2801      	cmp	r0, #1
 80202cc:	d0e2      	beq.n	8020294 <uxr_receive_reliable_message+0xc4>
 80202ce:	e790      	b.n	80201f2 <uxr_receive_reliable_message+0x22>
 80202d0:	2601      	movs	r6, #1
 80202d2:	e78f      	b.n	80201f4 <uxr_receive_reliable_message+0x24>

080202d4 <uxr_next_input_reliable_buffer_available>:
 80202d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80202d8:	4604      	mov	r4, r0
 80202da:	460f      	mov	r7, r1
 80202dc:	8980      	ldrh	r0, [r0, #12]
 80202de:	2101      	movs	r1, #1
 80202e0:	4690      	mov	r8, r2
 80202e2:	f000 fd5d 	bl	8020da0 <uxr_seq_num_add>
 80202e6:	8922      	ldrh	r2, [r4, #8]
 80202e8:	6866      	ldr	r6, [r4, #4]
 80202ea:	fbb0 f3f2 	udiv	r3, r0, r2
 80202ee:	fbb6 f6f2 	udiv	r6, r6, r2
 80202f2:	fb02 0313 	mls	r3, r2, r3, r0
 80202f6:	b29b      	uxth	r3, r3
 80202f8:	fb03 f606 	mul.w	r6, r3, r6
 80202fc:	6823      	ldr	r3, [r4, #0]
 80202fe:	3604      	adds	r6, #4
 8020300:	441e      	add	r6, r3
 8020302:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8020306:	f1b9 0f00 	cmp.w	r9, #0
 802030a:	d023      	beq.n	8020354 <uxr_next_input_reliable_buffer_available+0x80>
 802030c:	4605      	mov	r5, r0
 802030e:	6923      	ldr	r3, [r4, #16]
 8020310:	4630      	mov	r0, r6
 8020312:	4798      	blx	r3
 8020314:	4682      	mov	sl, r0
 8020316:	b300      	cbz	r0, 802035a <uxr_next_input_reliable_buffer_available+0x86>
 8020318:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 802031c:	2101      	movs	r1, #1
 802031e:	4650      	mov	r0, sl
 8020320:	f000 fd3e 	bl	8020da0 <uxr_seq_num_add>
 8020324:	8921      	ldrh	r1, [r4, #8]
 8020326:	4682      	mov	sl, r0
 8020328:	6863      	ldr	r3, [r4, #4]
 802032a:	6820      	ldr	r0, [r4, #0]
 802032c:	fbba f2f1 	udiv	r2, sl, r1
 8020330:	fbb3 f3f1 	udiv	r3, r3, r1
 8020334:	fb01 a212 	mls	r2, r1, r2, sl
 8020338:	b292      	uxth	r2, r2
 802033a:	fb02 f303 	mul.w	r3, r2, r3
 802033e:	3304      	adds	r3, #4
 8020340:	4418      	add	r0, r3
 8020342:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8020346:	b12b      	cbz	r3, 8020354 <uxr_next_input_reliable_buffer_available+0x80>
 8020348:	6923      	ldr	r3, [r4, #16]
 802034a:	4798      	blx	r3
 802034c:	2802      	cmp	r0, #2
 802034e:	d01b      	beq.n	8020388 <uxr_next_input_reliable_buffer_available+0xb4>
 8020350:	2801      	cmp	r0, #1
 8020352:	d0e3      	beq.n	802031c <uxr_next_input_reliable_buffer_available+0x48>
 8020354:	2000      	movs	r0, #0
 8020356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802035a:	464a      	mov	r2, r9
 802035c:	4631      	mov	r1, r6
 802035e:	4638      	mov	r0, r7
 8020360:	f7f3 fe92 	bl	8014088 <ucdr_init_buffer>
 8020364:	8921      	ldrh	r1, [r4, #8]
 8020366:	6863      	ldr	r3, [r4, #4]
 8020368:	2001      	movs	r0, #1
 802036a:	fbb5 f2f1 	udiv	r2, r5, r1
 802036e:	fbb3 f3f1 	udiv	r3, r3, r1
 8020372:	fb01 5212 	mls	r2, r1, r2, r5
 8020376:	b292      	uxth	r2, r2
 8020378:	fb02 f303 	mul.w	r3, r2, r3
 802037c:	6822      	ldr	r2, [r4, #0]
 802037e:	f842 a003 	str.w	sl, [r2, r3]
 8020382:	81a5      	strh	r5, [r4, #12]
 8020384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020388:	8920      	ldrh	r0, [r4, #8]
 802038a:	eb06 0108 	add.w	r1, r6, r8
 802038e:	6863      	ldr	r3, [r4, #4]
 8020390:	eba9 0208 	sub.w	r2, r9, r8
 8020394:	fbb5 f6f0 	udiv	r6, r5, r0
 8020398:	fbb3 f3f0 	udiv	r3, r3, r0
 802039c:	fb00 5516 	mls	r5, r0, r6, r5
 80203a0:	2000      	movs	r0, #0
 80203a2:	b2ad      	uxth	r5, r5
 80203a4:	fb03 f505 	mul.w	r5, r3, r5
 80203a8:	6823      	ldr	r3, [r4, #0]
 80203aa:	5158      	str	r0, [r3, r5]
 80203ac:	4638      	mov	r0, r7
 80203ae:	f7f3 fe6b 	bl	8014088 <ucdr_init_buffer>
 80203b2:	4638      	mov	r0, r7
 80203b4:	4622      	mov	r2, r4
 80203b6:	4903      	ldr	r1, [pc, #12]	@ (80203c4 <uxr_next_input_reliable_buffer_available+0xf0>)
 80203b8:	f7f3 fe3a 	bl	8014030 <ucdr_set_on_full_buffer_callback>
 80203bc:	2001      	movs	r0, #1
 80203be:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80203c2:	e7c8      	b.n	8020356 <uxr_next_input_reliable_buffer_available+0x82>
 80203c4:	080200d5 	.word	0x080200d5

080203c8 <uxr_process_heartbeat>:
 80203c8:	b538      	push	{r3, r4, r5, lr}
 80203ca:	4611      	mov	r1, r2
 80203cc:	4604      	mov	r4, r0
 80203ce:	89c0      	ldrh	r0, [r0, #14]
 80203d0:	4615      	mov	r5, r2
 80203d2:	f000 fced 	bl	8020db0 <uxr_seq_num_cmp>
 80203d6:	2800      	cmp	r0, #0
 80203d8:	bfb8      	it	lt
 80203da:	81e5      	strhlt	r5, [r4, #14]
 80203dc:	bd38      	pop	{r3, r4, r5, pc}
 80203de:	bf00      	nop

080203e0 <uxr_compute_acknack>:
 80203e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80203e4:	8903      	ldrh	r3, [r0, #8]
 80203e6:	4604      	mov	r4, r0
 80203e8:	460f      	mov	r7, r1
 80203ea:	8985      	ldrh	r5, [r0, #12]
 80203ec:	b1db      	cbz	r3, 8020426 <uxr_compute_acknack+0x46>
 80203ee:	4628      	mov	r0, r5
 80203f0:	2601      	movs	r6, #1
 80203f2:	e004      	b.n	80203fe <uxr_compute_acknack+0x1e>
 80203f4:	4566      	cmp	r6, ip
 80203f6:	f106 0601 	add.w	r6, r6, #1
 80203fa:	d214      	bcs.n	8020426 <uxr_compute_acknack+0x46>
 80203fc:	89a0      	ldrh	r0, [r4, #12]
 80203fe:	b2b1      	uxth	r1, r6
 8020400:	f000 fcce 	bl	8020da0 <uxr_seq_num_add>
 8020404:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8020408:	fbb0 f2fc 	udiv	r2, r0, ip
 802040c:	e9d4 1300 	ldrd	r1, r3, [r4]
 8020410:	fb0c 0212 	mls	r2, ip, r2, r0
 8020414:	fbb3 f3fc 	udiv	r3, r3, ip
 8020418:	b292      	uxth	r2, r2
 802041a:	fb02 f303 	mul.w	r3, r2, r3
 802041e:	58cb      	ldr	r3, [r1, r3]
 8020420:	2b00      	cmp	r3, #0
 8020422:	d1e7      	bne.n	80203f4 <uxr_compute_acknack+0x14>
 8020424:	4605      	mov	r5, r0
 8020426:	803d      	strh	r5, [r7, #0]
 8020428:	2101      	movs	r1, #1
 802042a:	89e6      	ldrh	r6, [r4, #14]
 802042c:	4628      	mov	r0, r5
 802042e:	f000 fcbb 	bl	8020da8 <uxr_seq_num_sub>
 8020432:	4601      	mov	r1, r0
 8020434:	4630      	mov	r0, r6
 8020436:	f000 fcb7 	bl	8020da8 <uxr_seq_num_sub>
 802043a:	4606      	mov	r6, r0
 802043c:	b328      	cbz	r0, 802048a <uxr_compute_acknack+0xaa>
 802043e:	f04f 0900 	mov.w	r9, #0
 8020442:	f04f 0801 	mov.w	r8, #1
 8020446:	464d      	mov	r5, r9
 8020448:	fa1f f189 	uxth.w	r1, r9
 802044c:	8838      	ldrh	r0, [r7, #0]
 802044e:	f000 fca7 	bl	8020da0 <uxr_seq_num_add>
 8020452:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8020456:	6861      	ldr	r1, [r4, #4]
 8020458:	fa08 fe09 	lsl.w	lr, r8, r9
 802045c:	6822      	ldr	r2, [r4, #0]
 802045e:	f109 0901 	add.w	r9, r9, #1
 8020462:	ea4e 0e05 	orr.w	lr, lr, r5
 8020466:	fbb0 f3fc 	udiv	r3, r0, ip
 802046a:	fbb1 f1fc 	udiv	r1, r1, ip
 802046e:	fb03 001c 	mls	r0, r3, ip, r0
 8020472:	b283      	uxth	r3, r0
 8020474:	fb01 f303 	mul.w	r3, r1, r3
 8020478:	58d3      	ldr	r3, [r2, r3]
 802047a:	b90b      	cbnz	r3, 8020480 <uxr_compute_acknack+0xa0>
 802047c:	fa1f f58e 	uxth.w	r5, lr
 8020480:	454e      	cmp	r6, r9
 8020482:	d1e1      	bne.n	8020448 <uxr_compute_acknack+0x68>
 8020484:	4628      	mov	r0, r5
 8020486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802048a:	4605      	mov	r5, r0
 802048c:	4628      	mov	r0, r5
 802048e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020492:	bf00      	nop

08020494 <uxr_init_output_best_effort_stream>:
 8020494:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8020498:	6001      	str	r1, [r0, #0]
 802049a:	7303      	strb	r3, [r0, #12]
 802049c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80204a0:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80204a4:	4770      	bx	lr
 80204a6:	bf00      	nop

080204a8 <uxr_reset_output_best_effort_stream>:
 80204a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80204ac:	7b03      	ldrb	r3, [r0, #12]
 80204ae:	81c2      	strh	r2, [r0, #14]
 80204b0:	6043      	str	r3, [r0, #4]
 80204b2:	4770      	bx	lr

080204b4 <uxr_prepare_best_effort_buffer_to_write>:
 80204b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80204b6:	4604      	mov	r4, r0
 80204b8:	b083      	sub	sp, #12
 80204ba:	6840      	ldr	r0, [r0, #4]
 80204bc:	460d      	mov	r5, r1
 80204be:	4616      	mov	r6, r2
 80204c0:	f7f8 ff5e 	bl	8019380 <uxr_submessage_padding>
 80204c4:	6863      	ldr	r3, [r4, #4]
 80204c6:	4418      	add	r0, r3
 80204c8:	68a3      	ldr	r3, [r4, #8]
 80204ca:	1942      	adds	r2, r0, r5
 80204cc:	4293      	cmp	r3, r2
 80204ce:	bf2c      	ite	cs
 80204d0:	2701      	movcs	r7, #1
 80204d2:	2700      	movcc	r7, #0
 80204d4:	d202      	bcs.n	80204dc <uxr_prepare_best_effort_buffer_to_write+0x28>
 80204d6:	4638      	mov	r0, r7
 80204d8:	b003      	add	sp, #12
 80204da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80204dc:	9000      	str	r0, [sp, #0]
 80204de:	2300      	movs	r3, #0
 80204e0:	4630      	mov	r0, r6
 80204e2:	6821      	ldr	r1, [r4, #0]
 80204e4:	f7f3 fdbe 	bl	8014064 <ucdr_init_buffer_origin_offset>
 80204e8:	6861      	ldr	r1, [r4, #4]
 80204ea:	4638      	mov	r0, r7
 80204ec:	4429      	add	r1, r5
 80204ee:	6061      	str	r1, [r4, #4]
 80204f0:	b003      	add	sp, #12
 80204f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080204f4 <uxr_prepare_best_effort_buffer_to_send>:
 80204f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80204f8:	4604      	mov	r4, r0
 80204fa:	461d      	mov	r5, r3
 80204fc:	6840      	ldr	r0, [r0, #4]
 80204fe:	7b23      	ldrb	r3, [r4, #12]
 8020500:	4298      	cmp	r0, r3
 8020502:	bf8c      	ite	hi
 8020504:	2601      	movhi	r6, #1
 8020506:	2600      	movls	r6, #0
 8020508:	d802      	bhi.n	8020510 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 802050a:	4630      	mov	r0, r6
 802050c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020510:	4688      	mov	r8, r1
 8020512:	89e0      	ldrh	r0, [r4, #14]
 8020514:	2101      	movs	r1, #1
 8020516:	4617      	mov	r7, r2
 8020518:	f000 fc42 	bl	8020da0 <uxr_seq_num_add>
 802051c:	6823      	ldr	r3, [r4, #0]
 802051e:	81e0      	strh	r0, [r4, #14]
 8020520:	8028      	strh	r0, [r5, #0]
 8020522:	4630      	mov	r0, r6
 8020524:	f8c8 3000 	str.w	r3, [r8]
 8020528:	6863      	ldr	r3, [r4, #4]
 802052a:	603b      	str	r3, [r7, #0]
 802052c:	7b23      	ldrb	r3, [r4, #12]
 802052e:	6063      	str	r3, [r4, #4]
 8020530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020534 <on_full_output_buffer>:
 8020534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020536:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 802053a:	460c      	mov	r4, r1
 802053c:	6803      	ldr	r3, [r0, #0]
 802053e:	4605      	mov	r5, r0
 8020540:	7b26      	ldrb	r6, [r4, #12]
 8020542:	e9d1 1200 	ldrd	r1, r2, [r1]
 8020546:	fbb2 f2fc 	udiv	r2, r2, ip
 802054a:	eba3 0e01 	sub.w	lr, r3, r1
 802054e:	6903      	ldr	r3, [r0, #16]
 8020550:	fbbe fef2 	udiv	lr, lr, r2
 8020554:	f10e 0e01 	add.w	lr, lr, #1
 8020558:	fa1f fe8e 	uxth.w	lr, lr
 802055c:	fbbe f7fc 	udiv	r7, lr, ip
 8020560:	fb0c ec17 	mls	ip, ip, r7, lr
 8020564:	fa1f fc8c 	uxth.w	ip, ip
 8020568:	fb02 fc0c 	mul.w	ip, r2, ip
 802056c:	f851 200c 	ldr.w	r2, [r1, ip]
 8020570:	44b4      	add	ip, r6
 8020572:	1b92      	subs	r2, r2, r6
 8020574:	f10c 0c08 	add.w	ip, ip, #8
 8020578:	3a04      	subs	r2, #4
 802057a:	4461      	add	r1, ip
 802057c:	f7f3 fd7c 	bl	8014078 <ucdr_init_buffer_origin>
 8020580:	4628      	mov	r0, r5
 8020582:	4622      	mov	r2, r4
 8020584:	4902      	ldr	r1, [pc, #8]	@ (8020590 <on_full_output_buffer+0x5c>)
 8020586:	f7f3 fd53 	bl	8014030 <ucdr_set_on_full_buffer_callback>
 802058a:	2000      	movs	r0, #0
 802058c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802058e:	bf00      	nop
 8020590:	08020535 	.word	0x08020535

08020594 <uxr_init_output_reliable_stream>:
 8020594:	b530      	push	{r4, r5, lr}
 8020596:	f89d 400c 	ldrb.w	r4, [sp, #12]
 802059a:	8103      	strh	r3, [r0, #8]
 802059c:	7304      	strb	r4, [r0, #12]
 802059e:	e9c0 1200 	strd	r1, r2, [r0]
 80205a2:	b1e3      	cbz	r3, 80205de <uxr_init_output_reliable_stream+0x4a>
 80205a4:	600c      	str	r4, [r1, #0]
 80205a6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80205aa:	f1bc 0f01 	cmp.w	ip, #1
 80205ae:	d916      	bls.n	80205de <uxr_init_output_reliable_stream+0x4a>
 80205b0:	f04f 0e01 	mov.w	lr, #1
 80205b4:	6843      	ldr	r3, [r0, #4]
 80205b6:	f10e 0501 	add.w	r5, lr, #1
 80205ba:	7b04      	ldrb	r4, [r0, #12]
 80205bc:	6801      	ldr	r1, [r0, #0]
 80205be:	fbbe f2fc 	udiv	r2, lr, ip
 80205c2:	fbb3 f3fc 	udiv	r3, r3, ip
 80205c6:	fb0c e212 	mls	r2, ip, r2, lr
 80205ca:	fa1f fe85 	uxth.w	lr, r5
 80205ce:	b292      	uxth	r2, r2
 80205d0:	fb02 f303 	mul.w	r3, r2, r3
 80205d4:	50cc      	str	r4, [r1, r3]
 80205d6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80205da:	45f4      	cmp	ip, lr
 80205dc:	d8ea      	bhi.n	80205b4 <uxr_init_output_reliable_stream+0x20>
 80205de:	4b07      	ldr	r3, [pc, #28]	@ (80205fc <uxr_init_output_reliable_stream+0x68>)
 80205e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80205e4:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80205e8:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 80205ec:	f8c0 300e 	str.w	r3, [r0, #14]
 80205f0:	2300      	movs	r3, #0
 80205f2:	8242      	strh	r2, [r0, #18]
 80205f4:	8403      	strh	r3, [r0, #32]
 80205f6:	e9c0 4506 	strd	r4, r5, [r0, #24]
 80205fa:	bd30      	pop	{r4, r5, pc}
 80205fc:	ffff0000 	.word	0xffff0000

08020600 <uxr_reset_output_reliable_stream>:
 8020600:	8901      	ldrh	r1, [r0, #8]
 8020602:	b510      	push	{r4, lr}
 8020604:	b1b1      	cbz	r1, 8020634 <uxr_reset_output_reliable_stream+0x34>
 8020606:	f04f 0e00 	mov.w	lr, #0
 802060a:	46f4      	mov	ip, lr
 802060c:	6843      	ldr	r3, [r0, #4]
 802060e:	f10e 0e01 	add.w	lr, lr, #1
 8020612:	7b04      	ldrb	r4, [r0, #12]
 8020614:	fbbc f2f1 	udiv	r2, ip, r1
 8020618:	fbb3 f3f1 	udiv	r3, r3, r1
 802061c:	fb01 c212 	mls	r2, r1, r2, ip
 8020620:	fa1f fc8e 	uxth.w	ip, lr
 8020624:	b292      	uxth	r2, r2
 8020626:	fb02 f303 	mul.w	r3, r2, r3
 802062a:	6802      	ldr	r2, [r0, #0]
 802062c:	50d4      	str	r4, [r2, r3]
 802062e:	8901      	ldrh	r1, [r0, #8]
 8020630:	4561      	cmp	r1, ip
 8020632:	d8eb      	bhi.n	802060c <uxr_reset_output_reliable_stream+0xc>
 8020634:	4b08      	ldr	r3, [pc, #32]	@ (8020658 <uxr_reset_output_reliable_stream+0x58>)
 8020636:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802063a:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8020650 <uxr_reset_output_reliable_stream+0x50>
 802063e:	f8c0 300e 	str.w	r3, [r0, #14]
 8020642:	2300      	movs	r3, #0
 8020644:	8242      	strh	r2, [r0, #18]
 8020646:	8403      	strh	r3, [r0, #32]
 8020648:	ed80 7b06 	vstr	d7, [r0, #24]
 802064c:	bd10      	pop	{r4, pc}
 802064e:	bf00      	nop
 8020650:	ffffffff 	.word	0xffffffff
 8020654:	7fffffff 	.word	0x7fffffff
 8020658:	ffff0000 	.word	0xffff0000

0802065c <uxr_prepare_reliable_buffer_to_write>:
 802065c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020660:	4604      	mov	r4, r0
 8020662:	b091      	sub	sp, #68	@ 0x44
 8020664:	8900      	ldrh	r0, [r0, #8]
 8020666:	468b      	mov	fp, r1
 8020668:	89e6      	ldrh	r6, [r4, #14]
 802066a:	9204      	str	r2, [sp, #16]
 802066c:	6865      	ldr	r5, [r4, #4]
 802066e:	6823      	ldr	r3, [r4, #0]
 8020670:	f894 900c 	ldrb.w	r9, [r4, #12]
 8020674:	fbb6 f2f0 	udiv	r2, r6, r0
 8020678:	fbb5 f5f0 	udiv	r5, r5, r0
 802067c:	fb00 6212 	mls	r2, r0, r2, r6
 8020680:	1f2f      	subs	r7, r5, #4
 8020682:	b292      	uxth	r2, r2
 8020684:	fb05 3202 	mla	r2, r5, r2, r3
 8020688:	1d11      	adds	r1, r2, #4
 802068a:	f8d2 8000 	ldr.w	r8, [r2]
 802068e:	9103      	str	r1, [sp, #12]
 8020690:	2800      	cmp	r0, #0
 8020692:	f000 814a 	beq.w	802092a <uxr_prepare_reliable_buffer_to_write+0x2ce>
 8020696:	f04f 0c00 	mov.w	ip, #0
 802069a:	46e2      	mov	sl, ip
 802069c:	4661      	mov	r1, ip
 802069e:	f10c 0c01 	add.w	ip, ip, #1
 80206a2:	fbb1 f2f0 	udiv	r2, r1, r0
 80206a6:	fb00 1212 	mls	r2, r0, r2, r1
 80206aa:	fa1f f18c 	uxth.w	r1, ip
 80206ae:	b292      	uxth	r2, r2
 80206b0:	fb05 f202 	mul.w	r2, r5, r2
 80206b4:	589a      	ldr	r2, [r3, r2]
 80206b6:	454a      	cmp	r2, r9
 80206b8:	d103      	bne.n	80206c2 <uxr_prepare_reliable_buffer_to_write+0x66>
 80206ba:	f10a 0a01 	add.w	sl, sl, #1
 80206be:	fa1f fa8a 	uxth.w	sl, sl
 80206c2:	4281      	cmp	r1, r0
 80206c4:	d3eb      	bcc.n	802069e <uxr_prepare_reliable_buffer_to_write+0x42>
 80206c6:	4640      	mov	r0, r8
 80206c8:	2104      	movs	r1, #4
 80206ca:	f8cd a014 	str.w	sl, [sp, #20]
 80206ce:	f7f3 fcdf 	bl	8014090 <ucdr_alignment>
 80206d2:	4480      	add	r8, r0
 80206d4:	eb08 020b 	add.w	r2, r8, fp
 80206d8:	42ba      	cmp	r2, r7
 80206da:	f240 80ca 	bls.w	8020872 <uxr_prepare_reliable_buffer_to_write+0x216>
 80206de:	7b22      	ldrb	r2, [r4, #12]
 80206e0:	445a      	add	r2, fp
 80206e2:	42ba      	cmp	r2, r7
 80206e4:	f240 80b2 	bls.w	802084c <uxr_prepare_reliable_buffer_to_write+0x1f0>
 80206e8:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80206ec:	b2bb      	uxth	r3, r7
 80206ee:	eba2 0209 	sub.w	r2, r2, r9
 80206f2:	441a      	add	r2, r3
 80206f4:	b292      	uxth	r2, r2
 80206f6:	fb0a f902 	mul.w	r9, sl, r2
 80206fa:	9205      	str	r2, [sp, #20]
 80206fc:	45d9      	cmp	r9, fp
 80206fe:	9206      	str	r2, [sp, #24]
 8020700:	f0c0 80b3 	bcc.w	802086a <uxr_prepare_reliable_buffer_to_write+0x20e>
 8020704:	f108 0204 	add.w	r2, r8, #4
 8020708:	42ba      	cmp	r2, r7
 802070a:	f080 80da 	bcs.w	80208c2 <uxr_prepare_reliable_buffer_to_write+0x266>
 802070e:	f1a3 0904 	sub.w	r9, r3, #4
 8020712:	9b05      	ldr	r3, [sp, #20]
 8020714:	eba9 0908 	sub.w	r9, r9, r8
 8020718:	fa1f f989 	uxth.w	r9, r9
 802071c:	ebab 0b09 	sub.w	fp, fp, r9
 8020720:	fbbb f2f3 	udiv	r2, fp, r3
 8020724:	fb03 b312 	mls	r3, r3, r2, fp
 8020728:	2b00      	cmp	r3, #0
 802072a:	f040 80c4 	bne.w	80208b6 <uxr_prepare_reliable_buffer_to_write+0x25a>
 802072e:	b293      	uxth	r3, r2
 8020730:	4553      	cmp	r3, sl
 8020732:	f200 809a 	bhi.w	802086a <uxr_prepare_reliable_buffer_to_write+0x20e>
 8020736:	2b00      	cmp	r3, #0
 8020738:	f000 80f9 	beq.w	802092e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 802073c:	f8cd 801c 	str.w	r8, [sp, #28]
 8020740:	f04f 0a00 	mov.w	sl, #0
 8020744:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8020748:	f10d 0b20 	add.w	fp, sp, #32
 802074c:	9505      	str	r5, [sp, #20]
 802074e:	461d      	mov	r5, r3
 8020750:	e000      	b.n	8020754 <uxr_prepare_reliable_buffer_to_write+0xf8>
 8020752:	46c1      	mov	r9, r8
 8020754:	8922      	ldrh	r2, [r4, #8]
 8020756:	4658      	mov	r0, fp
 8020758:	6863      	ldr	r3, [r4, #4]
 802075a:	f10a 0a01 	add.w	sl, sl, #1
 802075e:	fbb6 f1f2 	udiv	r1, r6, r2
 8020762:	fbb3 f3f2 	udiv	r3, r3, r2
 8020766:	fb02 6111 	mls	r1, r2, r1, r6
 802076a:	463a      	mov	r2, r7
 802076c:	b289      	uxth	r1, r1
 802076e:	fb03 f101 	mul.w	r1, r3, r1
 8020772:	6823      	ldr	r3, [r4, #0]
 8020774:	3104      	adds	r1, #4
 8020776:	4419      	add	r1, r3
 8020778:	2300      	movs	r3, #0
 802077a:	f851 cc04 	ldr.w	ip, [r1, #-4]
 802077e:	f8cd c000 	str.w	ip, [sp]
 8020782:	f7f3 fc6f 	bl	8014064 <ucdr_init_buffer_origin_offset>
 8020786:	464a      	mov	r2, r9
 8020788:	2300      	movs	r3, #0
 802078a:	210d      	movs	r1, #13
 802078c:	4658      	mov	r0, fp
 802078e:	f7f8 fdb7 	bl	8019300 <uxr_buffer_submessage_header>
 8020792:	8921      	ldrh	r1, [r4, #8]
 8020794:	6863      	ldr	r3, [r4, #4]
 8020796:	4630      	mov	r0, r6
 8020798:	fbb6 f2f1 	udiv	r2, r6, r1
 802079c:	fbb3 f3f1 	udiv	r3, r3, r1
 80207a0:	fb01 6212 	mls	r2, r1, r2, r6
 80207a4:	2101      	movs	r1, #1
 80207a6:	b292      	uxth	r2, r2
 80207a8:	fb02 f303 	mul.w	r3, r2, r3
 80207ac:	6822      	ldr	r2, [r4, #0]
 80207ae:	50d7      	str	r7, [r2, r3]
 80207b0:	f000 faf6 	bl	8020da0 <uxr_seq_num_add>
 80207b4:	4606      	mov	r6, r0
 80207b6:	fa1f f38a 	uxth.w	r3, sl
 80207ba:	429d      	cmp	r5, r3
 80207bc:	d8c9      	bhi.n	8020752 <uxr_prepare_reliable_buffer_to_write+0xf6>
 80207be:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80207c2:	9d05      	ldr	r5, [sp, #20]
 80207c4:	8920      	ldrh	r0, [r4, #8]
 80207c6:	463a      	mov	r2, r7
 80207c8:	6863      	ldr	r3, [r4, #4]
 80207ca:	fbb6 f1f0 	udiv	r1, r6, r0
 80207ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80207d2:	fb00 6111 	mls	r1, r0, r1, r6
 80207d6:	4658      	mov	r0, fp
 80207d8:	b289      	uxth	r1, r1
 80207da:	fb01 f303 	mul.w	r3, r1, r3
 80207de:	6821      	ldr	r1, [r4, #0]
 80207e0:	3304      	adds	r3, #4
 80207e2:	4419      	add	r1, r3
 80207e4:	2300      	movs	r3, #0
 80207e6:	f851 7c04 	ldr.w	r7, [r1, #-4]
 80207ea:	9700      	str	r7, [sp, #0]
 80207ec:	f7f3 fc3a 	bl	8014064 <ucdr_init_buffer_origin_offset>
 80207f0:	9f06      	ldr	r7, [sp, #24]
 80207f2:	4658      	mov	r0, fp
 80207f4:	2302      	movs	r3, #2
 80207f6:	b2ba      	uxth	r2, r7
 80207f8:	210d      	movs	r1, #13
 80207fa:	f7f8 fd81 	bl	8019300 <uxr_buffer_submessage_header>
 80207fe:	f108 0104 	add.w	r1, r8, #4
 8020802:	9b03      	ldr	r3, [sp, #12]
 8020804:	f1a5 0208 	sub.w	r2, r5, #8
 8020808:	8925      	ldrh	r5, [r4, #8]
 802080a:	440b      	add	r3, r1
 802080c:	eba2 0208 	sub.w	r2, r2, r8
 8020810:	fbb6 f0f5 	udiv	r0, r6, r5
 8020814:	4619      	mov	r1, r3
 8020816:	6863      	ldr	r3, [r4, #4]
 8020818:	fb05 6010 	mls	r0, r5, r0, r6
 802081c:	fbb3 f3f5 	udiv	r3, r3, r5
 8020820:	b280      	uxth	r0, r0
 8020822:	6825      	ldr	r5, [r4, #0]
 8020824:	fb00 f303 	mul.w	r3, r0, r3
 8020828:	7b20      	ldrb	r0, [r4, #12]
 802082a:	3004      	adds	r0, #4
 802082c:	4438      	add	r0, r7
 802082e:	50e8      	str	r0, [r5, r3]
 8020830:	9d04      	ldr	r5, [sp, #16]
 8020832:	4628      	mov	r0, r5
 8020834:	f7f3 fc28 	bl	8014088 <ucdr_init_buffer>
 8020838:	4628      	mov	r0, r5
 802083a:	4622      	mov	r2, r4
 802083c:	493d      	ldr	r1, [pc, #244]	@ (8020934 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 802083e:	f7f3 fbf7 	bl	8014030 <ucdr_set_on_full_buffer_callback>
 8020842:	2001      	movs	r0, #1
 8020844:	81e6      	strh	r6, [r4, #14]
 8020846:	b011      	add	sp, #68	@ 0x44
 8020848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802084c:	2101      	movs	r1, #1
 802084e:	89e0      	ldrh	r0, [r4, #14]
 8020850:	f000 faa6 	bl	8020da0 <uxr_seq_num_add>
 8020854:	4605      	mov	r5, r0
 8020856:	8921      	ldrh	r1, [r4, #8]
 8020858:	8a60      	ldrh	r0, [r4, #18]
 802085a:	f000 faa1 	bl	8020da0 <uxr_seq_num_add>
 802085e:	4601      	mov	r1, r0
 8020860:	4628      	mov	r0, r5
 8020862:	f000 faa5 	bl	8020db0 <uxr_seq_num_cmp>
 8020866:	2800      	cmp	r0, #0
 8020868:	dd44      	ble.n	80208f4 <uxr_prepare_reliable_buffer_to_write+0x298>
 802086a:	2000      	movs	r0, #0
 802086c:	b011      	add	sp, #68	@ 0x44
 802086e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020872:	8921      	ldrh	r1, [r4, #8]
 8020874:	8a60      	ldrh	r0, [r4, #18]
 8020876:	9205      	str	r2, [sp, #20]
 8020878:	f000 fa92 	bl	8020da0 <uxr_seq_num_add>
 802087c:	4601      	mov	r1, r0
 802087e:	4630      	mov	r0, r6
 8020880:	f000 fa96 	bl	8020db0 <uxr_seq_num_cmp>
 8020884:	2800      	cmp	r0, #0
 8020886:	9a05      	ldr	r2, [sp, #20]
 8020888:	dcef      	bgt.n	802086a <uxr_prepare_reliable_buffer_to_write+0x20e>
 802088a:	8925      	ldrh	r5, [r4, #8]
 802088c:	e9d4 7300 	ldrd	r7, r3, [r4]
 8020890:	fbb6 f4f5 	udiv	r4, r6, r5
 8020894:	fbb3 f3f5 	udiv	r3, r3, r5
 8020898:	fb05 6414 	mls	r4, r5, r4, r6
 802089c:	b2a4      	uxth	r4, r4
 802089e:	fb04 f303 	mul.w	r3, r4, r3
 80208a2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80208a6:	50fa      	str	r2, [r7, r3]
 80208a8:	2300      	movs	r3, #0
 80208aa:	f8cd 8000 	str.w	r8, [sp]
 80208ae:	f7f3 fbd9 	bl	8014064 <ucdr_init_buffer_origin_offset>
 80208b2:	2001      	movs	r0, #1
 80208b4:	e7da      	b.n	802086c <uxr_prepare_reliable_buffer_to_write+0x210>
 80208b6:	3201      	adds	r2, #1
 80208b8:	9306      	str	r3, [sp, #24]
 80208ba:	b293      	uxth	r3, r2
 80208bc:	4553      	cmp	r3, sl
 80208be:	d8d4      	bhi.n	802086a <uxr_prepare_reliable_buffer_to_write+0x20e>
 80208c0:	e739      	b.n	8020736 <uxr_prepare_reliable_buffer_to_write+0xda>
 80208c2:	4630      	mov	r0, r6
 80208c4:	2101      	movs	r1, #1
 80208c6:	9307      	str	r3, [sp, #28]
 80208c8:	f000 fa6a 	bl	8020da0 <uxr_seq_num_add>
 80208cc:	4606      	mov	r6, r0
 80208ce:	8920      	ldrh	r0, [r4, #8]
 80208d0:	6862      	ldr	r2, [r4, #4]
 80208d2:	fbb6 f1f0 	udiv	r1, r6, r0
 80208d6:	fbb2 f2f0 	udiv	r2, r2, r0
 80208da:	fb00 6111 	mls	r1, r0, r1, r6
 80208de:	b289      	uxth	r1, r1
 80208e0:	fb01 f202 	mul.w	r2, r1, r2
 80208e4:	6821      	ldr	r1, [r4, #0]
 80208e6:	3204      	adds	r2, #4
 80208e8:	188b      	adds	r3, r1, r2
 80208ea:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80208ee:	9303      	str	r3, [sp, #12]
 80208f0:	9b07      	ldr	r3, [sp, #28]
 80208f2:	e70c      	b.n	802070e <uxr_prepare_reliable_buffer_to_write+0xb2>
 80208f4:	8921      	ldrh	r1, [r4, #8]
 80208f6:	6863      	ldr	r3, [r4, #4]
 80208f8:	9804      	ldr	r0, [sp, #16]
 80208fa:	fbb5 f2f1 	udiv	r2, r5, r1
 80208fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8020902:	fb01 5212 	mls	r2, r1, r2, r5
 8020906:	6821      	ldr	r1, [r4, #0]
 8020908:	b292      	uxth	r2, r2
 802090a:	fb02 f303 	mul.w	r3, r2, r3
 802090e:	7b22      	ldrb	r2, [r4, #12]
 8020910:	3304      	adds	r3, #4
 8020912:	445a      	add	r2, fp
 8020914:	4419      	add	r1, r3
 8020916:	f841 2c04 	str.w	r2, [r1, #-4]
 802091a:	7b23      	ldrb	r3, [r4, #12]
 802091c:	9300      	str	r3, [sp, #0]
 802091e:	2300      	movs	r3, #0
 8020920:	f7f3 fba0 	bl	8014064 <ucdr_init_buffer_origin_offset>
 8020924:	2001      	movs	r0, #1
 8020926:	81e5      	strh	r5, [r4, #14]
 8020928:	e7a0      	b.n	802086c <uxr_prepare_reliable_buffer_to_write+0x210>
 802092a:	4682      	mov	sl, r0
 802092c:	e6cb      	b.n	80206c6 <uxr_prepare_reliable_buffer_to_write+0x6a>
 802092e:	f10d 0b20 	add.w	fp, sp, #32
 8020932:	e747      	b.n	80207c4 <uxr_prepare_reliable_buffer_to_write+0x168>
 8020934:	08020535 	.word	0x08020535

08020938 <uxr_prepare_next_reliable_buffer_to_send>:
 8020938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802093a:	4604      	mov	r4, r0
 802093c:	461d      	mov	r5, r3
 802093e:	460f      	mov	r7, r1
 8020940:	8a00      	ldrh	r0, [r0, #16]
 8020942:	2101      	movs	r1, #1
 8020944:	4616      	mov	r6, r2
 8020946:	f000 fa2b 	bl	8020da0 <uxr_seq_num_add>
 802094a:	8028      	strh	r0, [r5, #0]
 802094c:	8922      	ldrh	r2, [r4, #8]
 802094e:	6863      	ldr	r3, [r4, #4]
 8020950:	fbb0 f1f2 	udiv	r1, r0, r2
 8020954:	fbb3 f3f2 	udiv	r3, r3, r2
 8020958:	fb02 0c11 	mls	ip, r2, r1, r0
 802095c:	89e1      	ldrh	r1, [r4, #14]
 802095e:	fa1f fc8c 	uxth.w	ip, ip
 8020962:	fb0c fc03 	mul.w	ip, ip, r3
 8020966:	6823      	ldr	r3, [r4, #0]
 8020968:	f10c 0c04 	add.w	ip, ip, #4
 802096c:	4463      	add	r3, ip
 802096e:	603b      	str	r3, [r7, #0]
 8020970:	6823      	ldr	r3, [r4, #0]
 8020972:	449c      	add	ip, r3
 8020974:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8020978:	6033      	str	r3, [r6, #0]
 802097a:	f000 fa19 	bl	8020db0 <uxr_seq_num_cmp>
 802097e:	2800      	cmp	r0, #0
 8020980:	dd01      	ble.n	8020986 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8020982:	2000      	movs	r0, #0
 8020984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020986:	7b23      	ldrb	r3, [r4, #12]
 8020988:	6832      	ldr	r2, [r6, #0]
 802098a:	429a      	cmp	r2, r3
 802098c:	d9f9      	bls.n	8020982 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 802098e:	8a61      	ldrh	r1, [r4, #18]
 8020990:	8a20      	ldrh	r0, [r4, #16]
 8020992:	f000 fa09 	bl	8020da8 <uxr_seq_num_sub>
 8020996:	8923      	ldrh	r3, [r4, #8]
 8020998:	4283      	cmp	r3, r0
 802099a:	d0f2      	beq.n	8020982 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 802099c:	8828      	ldrh	r0, [r5, #0]
 802099e:	89e3      	ldrh	r3, [r4, #14]
 80209a0:	8220      	strh	r0, [r4, #16]
 80209a2:	4298      	cmp	r0, r3
 80209a4:	d001      	beq.n	80209aa <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80209a6:	2001      	movs	r0, #1
 80209a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80209aa:	2101      	movs	r1, #1
 80209ac:	f000 f9f8 	bl	8020da0 <uxr_seq_num_add>
 80209b0:	4603      	mov	r3, r0
 80209b2:	2001      	movs	r0, #1
 80209b4:	81e3      	strh	r3, [r4, #14]
 80209b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080209b8 <uxr_update_output_stream_heartbeat_timestamp>:
 80209b8:	b570      	push	{r4, r5, r6, lr}
 80209ba:	8a01      	ldrh	r1, [r0, #16]
 80209bc:	4604      	mov	r4, r0
 80209be:	8a40      	ldrh	r0, [r0, #18]
 80209c0:	4615      	mov	r5, r2
 80209c2:	461e      	mov	r6, r3
 80209c4:	f000 f9f4 	bl	8020db0 <uxr_seq_num_cmp>
 80209c8:	2800      	cmp	r0, #0
 80209ca:	db07      	blt.n	80209dc <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80209cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80209d0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80209d4:	2000      	movs	r0, #0
 80209d6:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80209da:	bd70      	pop	{r4, r5, r6, pc}
 80209dc:	f894 0020 	ldrb.w	r0, [r4, #32]
 80209e0:	b940      	cbnz	r0, 80209f4 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80209e2:	2301      	movs	r3, #1
 80209e4:	f884 3020 	strb.w	r3, [r4, #32]
 80209e8:	3564      	adds	r5, #100	@ 0x64
 80209ea:	f146 0600 	adc.w	r6, r6, #0
 80209ee:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80209f2:	bd70      	pop	{r4, r5, r6, pc}
 80209f4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80209f8:	4295      	cmp	r5, r2
 80209fa:	eb76 0303 	sbcs.w	r3, r6, r3
 80209fe:	db04      	blt.n	8020a0a <uxr_update_output_stream_heartbeat_timestamp+0x52>
 8020a00:	1c43      	adds	r3, r0, #1
 8020a02:	2001      	movs	r0, #1
 8020a04:	f884 3020 	strb.w	r3, [r4, #32]
 8020a08:	e7ee      	b.n	80209e8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8020a0a:	2000      	movs	r0, #0
 8020a0c:	e7ec      	b.n	80209e8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8020a0e:	bf00      	nop

08020a10 <uxr_begin_output_nack_buffer_it>:
 8020a10:	8a40      	ldrh	r0, [r0, #18]
 8020a12:	4770      	bx	lr

08020a14 <uxr_next_reliable_nack_buffer_to_send>:
 8020a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020a18:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 8020a1c:	b197      	cbz	r7, 8020a44 <uxr_next_reliable_nack_buffer_to_send+0x30>
 8020a1e:	4680      	mov	r8, r0
 8020a20:	460d      	mov	r5, r1
 8020a22:	4616      	mov	r6, r2
 8020a24:	461c      	mov	r4, r3
 8020a26:	8818      	ldrh	r0, [r3, #0]
 8020a28:	2101      	movs	r1, #1
 8020a2a:	f000 f9b9 	bl	8020da0 <uxr_seq_num_add>
 8020a2e:	8020      	strh	r0, [r4, #0]
 8020a30:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8020a34:	f000 f9bc 	bl	8020db0 <uxr_seq_num_cmp>
 8020a38:	2800      	cmp	r0, #0
 8020a3a:	dd06      	ble.n	8020a4a <uxr_next_reliable_nack_buffer_to_send+0x36>
 8020a3c:	2300      	movs	r3, #0
 8020a3e:	461f      	mov	r7, r3
 8020a40:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 8020a44:	4638      	mov	r0, r7
 8020a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020a4a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8020a4e:	8820      	ldrh	r0, [r4, #0]
 8020a50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8020a54:	fbb0 f3f2 	udiv	r3, r0, r2
 8020a58:	fbb1 fcf2 	udiv	ip, r1, r2
 8020a5c:	fb02 0313 	mls	r3, r2, r3, r0
 8020a60:	b29b      	uxth	r3, r3
 8020a62:	fb03 fc0c 	mul.w	ip, r3, ip
 8020a66:	f8d8 3000 	ldr.w	r3, [r8]
 8020a6a:	f10c 0c04 	add.w	ip, ip, #4
 8020a6e:	4463      	add	r3, ip
 8020a70:	602b      	str	r3, [r5, #0]
 8020a72:	f8d8 3000 	ldr.w	r3, [r8]
 8020a76:	4463      	add	r3, ip
 8020a78:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8020a7c:	6033      	str	r3, [r6, #0]
 8020a7e:	f898 200c 	ldrb.w	r2, [r8, #12]
 8020a82:	429a      	cmp	r2, r3
 8020a84:	d0d0      	beq.n	8020a28 <uxr_next_reliable_nack_buffer_to_send+0x14>
 8020a86:	e7dd      	b.n	8020a44 <uxr_next_reliable_nack_buffer_to_send+0x30>

08020a88 <uxr_process_acknack>:
 8020a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020a8a:	4604      	mov	r4, r0
 8020a8c:	460e      	mov	r6, r1
 8020a8e:	4610      	mov	r0, r2
 8020a90:	2101      	movs	r1, #1
 8020a92:	f000 f989 	bl	8020da8 <uxr_seq_num_sub>
 8020a96:	8a61      	ldrh	r1, [r4, #18]
 8020a98:	f000 f986 	bl	8020da8 <uxr_seq_num_sub>
 8020a9c:	b1c8      	cbz	r0, 8020ad2 <uxr_process_acknack+0x4a>
 8020a9e:	4605      	mov	r5, r0
 8020aa0:	2700      	movs	r7, #0
 8020aa2:	2101      	movs	r1, #1
 8020aa4:	8a60      	ldrh	r0, [r4, #18]
 8020aa6:	f000 f97b 	bl	8020da0 <uxr_seq_num_add>
 8020aaa:	8923      	ldrh	r3, [r4, #8]
 8020aac:	6862      	ldr	r2, [r4, #4]
 8020aae:	3701      	adds	r7, #1
 8020ab0:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8020ab4:	6821      	ldr	r1, [r4, #0]
 8020ab6:	42bd      	cmp	r5, r7
 8020ab8:	8260      	strh	r0, [r4, #18]
 8020aba:	fbb0 fef3 	udiv	lr, r0, r3
 8020abe:	fbb2 f2f3 	udiv	r2, r2, r3
 8020ac2:	fb03 031e 	mls	r3, r3, lr, r0
 8020ac6:	b29b      	uxth	r3, r3
 8020ac8:	fb02 f303 	mul.w	r3, r2, r3
 8020acc:	f841 c003 	str.w	ip, [r1, r3]
 8020ad0:	d1e7      	bne.n	8020aa2 <uxr_process_acknack+0x1a>
 8020ad2:	3e00      	subs	r6, #0
 8020ad4:	f04f 0300 	mov.w	r3, #0
 8020ad8:	bf18      	it	ne
 8020ada:	2601      	movne	r6, #1
 8020adc:	f884 3020 	strb.w	r3, [r4, #32]
 8020ae0:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8020ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020ae6:	bf00      	nop

08020ae8 <uxr_is_output_up_to_date>:
 8020ae8:	8a01      	ldrh	r1, [r0, #16]
 8020aea:	8a40      	ldrh	r0, [r0, #18]
 8020aec:	b508      	push	{r3, lr}
 8020aee:	f000 f95f 	bl	8020db0 <uxr_seq_num_cmp>
 8020af2:	fab0 f080 	clz	r0, r0
 8020af6:	0940      	lsrs	r0, r0, #5
 8020af8:	bd08      	pop	{r3, pc}
 8020afa:	bf00      	nop

08020afc <get_available_free_slots>:
 8020afc:	8901      	ldrh	r1, [r0, #8]
 8020afe:	b1e1      	cbz	r1, 8020b3a <get_available_free_slots+0x3e>
 8020b00:	6843      	ldr	r3, [r0, #4]
 8020b02:	f04f 0c00 	mov.w	ip, #0
 8020b06:	b530      	push	{r4, r5, lr}
 8020b08:	fbb3 fef1 	udiv	lr, r3, r1
 8020b0c:	6805      	ldr	r5, [r0, #0]
 8020b0e:	4662      	mov	r2, ip
 8020b10:	7b04      	ldrb	r4, [r0, #12]
 8020b12:	4660      	mov	r0, ip
 8020b14:	f10c 0c01 	add.w	ip, ip, #1
 8020b18:	fbb2 f3f1 	udiv	r3, r2, r1
 8020b1c:	fb01 2313 	mls	r3, r1, r3, r2
 8020b20:	fa1f f28c 	uxth.w	r2, ip
 8020b24:	b29b      	uxth	r3, r3
 8020b26:	fb0e f303 	mul.w	r3, lr, r3
 8020b2a:	58eb      	ldr	r3, [r5, r3]
 8020b2c:	429c      	cmp	r4, r3
 8020b2e:	d101      	bne.n	8020b34 <get_available_free_slots+0x38>
 8020b30:	3001      	adds	r0, #1
 8020b32:	b280      	uxth	r0, r0
 8020b34:	428a      	cmp	r2, r1
 8020b36:	d3ed      	bcc.n	8020b14 <get_available_free_slots+0x18>
 8020b38:	bd30      	pop	{r4, r5, pc}
 8020b3a:	4608      	mov	r0, r1
 8020b3c:	4770      	bx	lr
 8020b3e:	bf00      	nop

08020b40 <uxr_buffer_request_data>:
 8020b40:	b530      	push	{r4, r5, lr}
 8020b42:	b095      	sub	sp, #84	@ 0x54
 8020b44:	4604      	mov	r4, r0
 8020b46:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8020b48:	9303      	str	r3, [sp, #12]
 8020b4a:	2d00      	cmp	r5, #0
 8020b4c:	f88d 301c 	strb.w	r3, [sp, #28]
 8020b50:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8020b54:	f04f 0200 	mov.w	r2, #0
 8020b58:	bf14      	ite	ne
 8020b5a:	2101      	movne	r1, #1
 8020b5c:	4611      	moveq	r1, r2
 8020b5e:	f88d 201d 	strb.w	r2, [sp, #29]
 8020b62:	f88d 201e 	strb.w	r2, [sp, #30]
 8020b66:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8020b6a:	d021      	beq.n	8020bb0 <uxr_buffer_request_data+0x70>
 8020b6c:	686b      	ldr	r3, [r5, #4]
 8020b6e:	2210      	movs	r2, #16
 8020b70:	6829      	ldr	r1, [r5, #0]
 8020b72:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8020b76:	f8cd 1026 	str.w	r1, [sp, #38]	@ 0x26
 8020b7a:	2308      	movs	r3, #8
 8020b7c:	2100      	movs	r1, #0
 8020b7e:	4620      	mov	r0, r4
 8020b80:	e9cd 3100 	strd	r3, r1, [sp]
 8020b84:	ab0c      	add	r3, sp, #48	@ 0x30
 8020b86:	9905      	ldr	r1, [sp, #20]
 8020b88:	f7f7 fc92 	bl	80184b0 <uxr_prepare_stream_to_write_submessage>
 8020b8c:	b918      	cbnz	r0, 8020b96 <uxr_buffer_request_data+0x56>
 8020b8e:	4604      	mov	r4, r0
 8020b90:	4620      	mov	r0, r4
 8020b92:	b015      	add	sp, #84	@ 0x54
 8020b94:	bd30      	pop	{r4, r5, pc}
 8020b96:	9904      	ldr	r1, [sp, #16]
 8020b98:	aa06      	add	r2, sp, #24
 8020b9a:	4620      	mov	r0, r4
 8020b9c:	f7f7 fdc4 	bl	8018728 <uxr_init_base_object_request>
 8020ba0:	4604      	mov	r4, r0
 8020ba2:	a906      	add	r1, sp, #24
 8020ba4:	a80c      	add	r0, sp, #48	@ 0x30
 8020ba6:	f7f9 fd89 	bl	801a6bc <uxr_serialize_READ_DATA_Payload>
 8020baa:	4620      	mov	r0, r4
 8020bac:	b015      	add	sp, #84	@ 0x54
 8020bae:	bd30      	pop	{r4, r5, pc}
 8020bb0:	2208      	movs	r2, #8
 8020bb2:	e7e2      	b.n	8020b7a <uxr_buffer_request_data+0x3a>

08020bb4 <uxr_buffer_cancel_data>:
 8020bb4:	b510      	push	{r4, lr}
 8020bb6:	2300      	movs	r3, #0
 8020bb8:	b094      	sub	sp, #80	@ 0x50
 8020bba:	4604      	mov	r4, r0
 8020bbc:	9205      	str	r2, [sp, #20]
 8020bbe:	9301      	str	r3, [sp, #4]
 8020bc0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8020bc4:	f88d 301e 	strb.w	r3, [sp, #30]
 8020bc8:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8020bcc:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8020bd0:	2308      	movs	r3, #8
 8020bd2:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8020bd6:	2201      	movs	r2, #1
 8020bd8:	9300      	str	r3, [sp, #0]
 8020bda:	ab0c      	add	r3, sp, #48	@ 0x30
 8020bdc:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8020be0:	2210      	movs	r2, #16
 8020be2:	f7f7 fc65 	bl	80184b0 <uxr_prepare_stream_to_write_submessage>
 8020be6:	b918      	cbnz	r0, 8020bf0 <uxr_buffer_cancel_data+0x3c>
 8020be8:	4604      	mov	r4, r0
 8020bea:	4620      	mov	r0, r4
 8020bec:	b014      	add	sp, #80	@ 0x50
 8020bee:	bd10      	pop	{r4, pc}
 8020bf0:	9905      	ldr	r1, [sp, #20]
 8020bf2:	aa06      	add	r2, sp, #24
 8020bf4:	4620      	mov	r0, r4
 8020bf6:	f7f7 fd97 	bl	8018728 <uxr_init_base_object_request>
 8020bfa:	4604      	mov	r4, r0
 8020bfc:	a906      	add	r1, sp, #24
 8020bfe:	a80c      	add	r0, sp, #48	@ 0x30
 8020c00:	f7f9 fd5c 	bl	801a6bc <uxr_serialize_READ_DATA_Payload>
 8020c04:	4620      	mov	r0, r4
 8020c06:	b014      	add	sp, #80	@ 0x50
 8020c08:	bd10      	pop	{r4, pc}
 8020c0a:	bf00      	nop

08020c0c <read_submessage_format>:
 8020c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020c10:	b095      	sub	sp, #84	@ 0x54
 8020c12:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 8020c16:	b113      	cbz	r3, 8020c1e <read_submessage_format+0x12>
 8020c18:	b015      	add	sp, #84	@ 0x54
 8020c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020c1e:	4606      	mov	r6, r0
 8020c20:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8020c22:	460c      	mov	r4, r1
 8020c24:	4615      	mov	r5, r2
 8020c26:	9004      	str	r0, [sp, #16]
 8020c28:	4699      	mov	r9, r3
 8020c2a:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8020c2c:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8020c30:	9005      	str	r0, [sp, #20]
 8020c32:	a80c      	add	r0, sp, #48	@ 0x30
 8020c34:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8020c38:	1a52      	subs	r2, r2, r1
 8020c3a:	f7f3 fa25 	bl	8014088 <ucdr_init_buffer>
 8020c3e:	a80c      	add	r0, sp, #48	@ 0x30
 8020c40:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8020c44:	f7f3 f9f4 	bl	8014030 <ucdr_set_on_full_buffer_callback>
 8020c48:	69e2      	ldr	r2, [r4, #28]
 8020c4a:	b19a      	cbz	r2, 8020c74 <read_submessage_format+0x68>
 8020c4c:	f1b8 0f07 	cmp.w	r8, #7
 8020c50:	f882 9014 	strb.w	r9, [r2, #20]
 8020c54:	d040      	beq.n	8020cd8 <read_submessage_format+0xcc>
 8020c56:	f1b8 0f08 	cmp.w	r8, #8
 8020c5a:	d02e      	beq.n	8020cba <read_submessage_format+0xae>
 8020c5c:	f1b8 0f06 	cmp.w	r8, #6
 8020c60:	d011      	beq.n	8020c86 <read_submessage_format+0x7a>
 8020c62:	2301      	movs	r3, #1
 8020c64:	7513      	strb	r3, [r2, #20]
 8020c66:	4629      	mov	r1, r5
 8020c68:	4620      	mov	r0, r4
 8020c6a:	f7f3 fa61 	bl	8014130 <ucdr_advance_buffer>
 8020c6e:	b015      	add	sp, #84	@ 0x54
 8020c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020c74:	f1b8 0f07 	cmp.w	r8, #7
 8020c78:	d02e      	beq.n	8020cd8 <read_submessage_format+0xcc>
 8020c7a:	f1b8 0f08 	cmp.w	r8, #8
 8020c7e:	d01c      	beq.n	8020cba <read_submessage_format+0xae>
 8020c80:	f1b8 0f06 	cmp.w	r8, #6
 8020c84:	d1ef      	bne.n	8020c66 <read_submessage_format+0x5a>
 8020c86:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 8020c8a:	f1b8 0f00 	cmp.w	r8, #0
 8020c8e:	d011      	beq.n	8020cb4 <read_submessage_format+0xa8>
 8020c90:	ab0c      	add	r3, sp, #48	@ 0x30
 8020c92:	9501      	str	r5, [sp, #4]
 8020c94:	463a      	mov	r2, r7
 8020c96:	4630      	mov	r0, r6
 8020c98:	9300      	str	r3, [sp, #0]
 8020c9a:	2306      	movs	r3, #6
 8020c9c:	f88d 3016 	strb.w	r3, [sp, #22]
 8020ca0:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8020ca4:	9302      	str	r3, [sp, #8]
 8020ca6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8020caa:	47c0      	blx	r8
 8020cac:	2301      	movs	r3, #1
 8020cae:	69e2      	ldr	r2, [r4, #28]
 8020cb0:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8020cb4:	2a00      	cmp	r2, #0
 8020cb6:	d1d4      	bne.n	8020c62 <read_submessage_format+0x56>
 8020cb8:	e7d5      	b.n	8020c66 <read_submessage_format+0x5a>
 8020cba:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 8020cbe:	2b00      	cmp	r3, #0
 8020cc0:	d0f8      	beq.n	8020cb4 <read_submessage_format+0xa8>
 8020cc2:	a80c      	add	r0, sp, #48	@ 0x30
 8020cc4:	a906      	add	r1, sp, #24
 8020cc6:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8020cca:	f7f9 fdd1 	bl	801a870 <uxr_deserialize_SampleIdentity>
 8020cce:	b9a0      	cbnz	r0, 8020cfa <read_submessage_format+0xee>
 8020cd0:	69e2      	ldr	r2, [r4, #28]
 8020cd2:	2a00      	cmp	r2, #0
 8020cd4:	d1c5      	bne.n	8020c62 <read_submessage_format+0x56>
 8020cd6:	e7c6      	b.n	8020c66 <read_submessage_format+0x5a>
 8020cd8:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 8020cdc:	b13b      	cbz	r3, 8020cee <read_submessage_format+0xe2>
 8020cde:	a906      	add	r1, sp, #24
 8020ce0:	a80c      	add	r0, sp, #48	@ 0x30
 8020ce2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8020ce6:	f7f9 fa73 	bl	801a1d0 <uxr_deserialize_BaseObjectRequest>
 8020cea:	bb60      	cbnz	r0, 8020d46 <read_submessage_format+0x13a>
 8020cec:	69e2      	ldr	r2, [r4, #28]
 8020cee:	68a3      	ldr	r3, [r4, #8]
 8020cf0:	442b      	add	r3, r5
 8020cf2:	60a3      	str	r3, [r4, #8]
 8020cf4:	2a00      	cmp	r2, #0
 8020cf6:	d1b4      	bne.n	8020c62 <read_submessage_format+0x56>
 8020cf8:	e7b5      	b.n	8020c66 <read_submessage_format+0x5a>
 8020cfa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020cfc:	a80c      	add	r0, sp, #48	@ 0x30
 8020cfe:	eba8 0803 	sub.w	r8, r8, r3
 8020d02:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8020d06:	44a8      	add	r8, r5
 8020d08:	1a52      	subs	r2, r2, r1
 8020d0a:	f7f3 f9bd 	bl	8014088 <ucdr_init_buffer>
 8020d0e:	a80c      	add	r0, sp, #48	@ 0x30
 8020d10:	fa1f f888 	uxth.w	r8, r8
 8020d14:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8020d18:	f7f3 f98a 	bl	8014030 <ucdr_set_on_full_buffer_callback>
 8020d1c:	ab0c      	add	r3, sp, #48	@ 0x30
 8020d1e:	2108      	movs	r1, #8
 8020d20:	f8cd 8004 	str.w	r8, [sp, #4]
 8020d24:	9300      	str	r3, [sp, #0]
 8020d26:	463a      	mov	r2, r7
 8020d28:	f88d 1016 	strb.w	r1, [sp, #22]
 8020d2c:	ab06      	add	r3, sp, #24
 8020d2e:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 8020d32:	4630      	mov	r0, r6
 8020d34:	9102      	str	r1, [sp, #8]
 8020d36:	9905      	ldr	r1, [sp, #20]
 8020d38:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 8020d3c:	47b8      	blx	r7
 8020d3e:	2301      	movs	r3, #1
 8020d40:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8020d44:	e7c4      	b.n	8020cd0 <read_submessage_format+0xc4>
 8020d46:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8020d4a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020d4c:	a80c      	add	r0, sp, #48	@ 0x30
 8020d4e:	1a52      	subs	r2, r2, r1
 8020d50:	eba8 0803 	sub.w	r8, r8, r3
 8020d54:	f7f3 f998 	bl	8014088 <ucdr_init_buffer>
 8020d58:	a80c      	add	r0, sp, #48	@ 0x30
 8020d5a:	44a8      	add	r8, r5
 8020d5c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8020d60:	f7f3 f966 	bl	8014030 <ucdr_set_on_full_buffer_callback>
 8020d64:	ab0c      	add	r3, sp, #48	@ 0x30
 8020d66:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8020d6a:	fa1f f888 	uxth.w	r8, r8
 8020d6e:	9300      	str	r3, [sp, #0]
 8020d70:	463a      	mov	r2, r7
 8020d72:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8020d76:	4630      	mov	r0, r6
 8020d78:	f8cd 8004 	str.w	r8, [sp, #4]
 8020d7c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8020d80:	2107      	movs	r1, #7
 8020d82:	f88d 1016 	strb.w	r1, [sp, #22]
 8020d86:	b29b      	uxth	r3, r3
 8020d88:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 8020d8c:	9102      	str	r1, [sp, #8]
 8020d8e:	9905      	ldr	r1, [sp, #20]
 8020d90:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 8020d94:	47b8      	blx	r7
 8020d96:	2301      	movs	r3, #1
 8020d98:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8020d9c:	e7a6      	b.n	8020cec <read_submessage_format+0xe0>
 8020d9e:	bf00      	nop

08020da0 <uxr_seq_num_add>:
 8020da0:	4408      	add	r0, r1
 8020da2:	b280      	uxth	r0, r0
 8020da4:	4770      	bx	lr
 8020da6:	bf00      	nop

08020da8 <uxr_seq_num_sub>:
 8020da8:	1a40      	subs	r0, r0, r1
 8020daa:	b280      	uxth	r0, r0
 8020dac:	4770      	bx	lr
 8020dae:	bf00      	nop

08020db0 <uxr_seq_num_cmp>:
 8020db0:	4288      	cmp	r0, r1
 8020db2:	d011      	beq.n	8020dd8 <uxr_seq_num_cmp+0x28>
 8020db4:	d309      	bcc.n	8020dca <uxr_seq_num_cmp+0x1a>
 8020db6:	4288      	cmp	r0, r1
 8020db8:	d910      	bls.n	8020ddc <uxr_seq_num_cmp+0x2c>
 8020dba:	1a40      	subs	r0, r0, r1
 8020dbc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8020dc0:	bfd4      	ite	le
 8020dc2:	2001      	movle	r0, #1
 8020dc4:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8020dc8:	4770      	bx	lr
 8020dca:	1a0b      	subs	r3, r1, r0
 8020dcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8020dd0:	daf1      	bge.n	8020db6 <uxr_seq_num_cmp+0x6>
 8020dd2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020dd6:	4770      	bx	lr
 8020dd8:	2000      	movs	r0, #0
 8020dda:	4770      	bx	lr
 8020ddc:	2001      	movs	r0, #1
 8020dde:	4770      	bx	lr

08020de0 <rcl_get_default_domain_id>:
 8020de0:	b530      	push	{r4, r5, lr}
 8020de2:	2300      	movs	r3, #0
 8020de4:	b083      	sub	sp, #12
 8020de6:	9300      	str	r3, [sp, #0]
 8020de8:	b1d0      	cbz	r0, 8020e20 <rcl_get_default_domain_id+0x40>
 8020dea:	4604      	mov	r4, r0
 8020dec:	4669      	mov	r1, sp
 8020dee:	4815      	ldr	r0, [pc, #84]	@ (8020e44 <rcl_get_default_domain_id+0x64>)
 8020df0:	f7fc feda 	bl	801dba8 <rcutils_get_env>
 8020df4:	4602      	mov	r2, r0
 8020df6:	b110      	cbz	r0, 8020dfe <rcl_get_default_domain_id+0x1e>
 8020df8:	2001      	movs	r0, #1
 8020dfa:	b003      	add	sp, #12
 8020dfc:	bd30      	pop	{r4, r5, pc}
 8020dfe:	9b00      	ldr	r3, [sp, #0]
 8020e00:	b18b      	cbz	r3, 8020e26 <rcl_get_default_domain_id+0x46>
 8020e02:	7818      	ldrb	r0, [r3, #0]
 8020e04:	2800      	cmp	r0, #0
 8020e06:	d0f8      	beq.n	8020dfa <rcl_get_default_domain_id+0x1a>
 8020e08:	a901      	add	r1, sp, #4
 8020e0a:	4618      	mov	r0, r3
 8020e0c:	9201      	str	r2, [sp, #4]
 8020e0e:	f000 ff4b 	bl	8021ca8 <strtoul>
 8020e12:	4605      	mov	r5, r0
 8020e14:	b150      	cbz	r0, 8020e2c <rcl_get_default_domain_id+0x4c>
 8020e16:	1c43      	adds	r3, r0, #1
 8020e18:	d00d      	beq.n	8020e36 <rcl_get_default_domain_id+0x56>
 8020e1a:	2000      	movs	r0, #0
 8020e1c:	6025      	str	r5, [r4, #0]
 8020e1e:	e7ec      	b.n	8020dfa <rcl_get_default_domain_id+0x1a>
 8020e20:	200b      	movs	r0, #11
 8020e22:	b003      	add	sp, #12
 8020e24:	bd30      	pop	{r4, r5, pc}
 8020e26:	4618      	mov	r0, r3
 8020e28:	b003      	add	sp, #12
 8020e2a:	bd30      	pop	{r4, r5, pc}
 8020e2c:	9b01      	ldr	r3, [sp, #4]
 8020e2e:	781b      	ldrb	r3, [r3, #0]
 8020e30:	2b00      	cmp	r3, #0
 8020e32:	d0f2      	beq.n	8020e1a <rcl_get_default_domain_id+0x3a>
 8020e34:	e7e0      	b.n	8020df8 <rcl_get_default_domain_id+0x18>
 8020e36:	f001 fab5 	bl	80223a4 <__errno>
 8020e3a:	6803      	ldr	r3, [r0, #0]
 8020e3c:	2b22      	cmp	r3, #34	@ 0x22
 8020e3e:	d1ec      	bne.n	8020e1a <rcl_get_default_domain_id+0x3a>
 8020e40:	e7da      	b.n	8020df8 <rcl_get_default_domain_id+0x18>
 8020e42:	bf00      	nop
 8020e44:	080258fc 	.word	0x080258fc

08020e48 <rcl_expand_topic_name>:
 8020e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e4c:	b08d      	sub	sp, #52	@ 0x34
 8020e4e:	4698      	mov	r8, r3
 8020e50:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020e52:	9207      	str	r2, [sp, #28]
 8020e54:	2b00      	cmp	r3, #0
 8020e56:	bf18      	it	ne
 8020e58:	f1b8 0f00 	cmpne.w	r8, #0
 8020e5c:	bf0c      	ite	eq
 8020e5e:	2301      	moveq	r3, #1
 8020e60:	2300      	movne	r3, #0
 8020e62:	2a00      	cmp	r2, #0
 8020e64:	bf08      	it	eq
 8020e66:	f043 0301 	orreq.w	r3, r3, #1
 8020e6a:	2900      	cmp	r1, #0
 8020e6c:	bf08      	it	eq
 8020e6e:	f043 0301 	orreq.w	r3, r3, #1
 8020e72:	2b00      	cmp	r3, #0
 8020e74:	d13d      	bne.n	8020ef2 <rcl_expand_topic_name+0xaa>
 8020e76:	fab0 f280 	clz	r2, r0
 8020e7a:	4604      	mov	r4, r0
 8020e7c:	0952      	lsrs	r2, r2, #5
 8020e7e:	2800      	cmp	r0, #0
 8020e80:	d037      	beq.n	8020ef2 <rcl_expand_topic_name+0xaa>
 8020e82:	460f      	mov	r7, r1
 8020e84:	a90b      	add	r1, sp, #44	@ 0x2c
 8020e86:	f000 fa51 	bl	802132c <rcl_validate_topic_name>
 8020e8a:	4605      	mov	r5, r0
 8020e8c:	bb68      	cbnz	r0, 8020eea <rcl_expand_topic_name+0xa2>
 8020e8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020e90:	2b00      	cmp	r3, #0
 8020e92:	d137      	bne.n	8020f04 <rcl_expand_topic_name+0xbc>
 8020e94:	4602      	mov	r2, r0
 8020e96:	a90b      	add	r1, sp, #44	@ 0x2c
 8020e98:	4638      	mov	r0, r7
 8020e9a:	f7fd fb1b 	bl	801e4d4 <rmw_validate_node_name>
 8020e9e:	bb68      	cbnz	r0, 8020efc <rcl_expand_topic_name+0xb4>
 8020ea0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020ea2:	2b00      	cmp	r3, #0
 8020ea4:	d133      	bne.n	8020f0e <rcl_expand_topic_name+0xc6>
 8020ea6:	462a      	mov	r2, r5
 8020ea8:	a90b      	add	r1, sp, #44	@ 0x2c
 8020eaa:	9807      	ldr	r0, [sp, #28]
 8020eac:	f7fd faf4 	bl	801e498 <rmw_validate_namespace>
 8020eb0:	bb20      	cbnz	r0, 8020efc <rcl_expand_topic_name+0xb4>
 8020eb2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8020eb4:	2d00      	cmp	r5, #0
 8020eb6:	f040 80a2 	bne.w	8020ffe <rcl_expand_topic_name+0x1b6>
 8020eba:	217b      	movs	r1, #123	@ 0x7b
 8020ebc:	4620      	mov	r0, r4
 8020ebe:	f001 f98f 	bl	80221e0 <strchr>
 8020ec2:	7823      	ldrb	r3, [r4, #0]
 8020ec4:	4681      	mov	r9, r0
 8020ec6:	bb20      	cbnz	r0, 8020f12 <rcl_expand_topic_name+0xca>
 8020ec8:	2b2f      	cmp	r3, #47	@ 0x2f
 8020eca:	d122      	bne.n	8020f12 <rcl_expand_topic_name+0xca>
 8020ecc:	ab19      	add	r3, sp, #100	@ 0x64
 8020ece:	e893 0003 	ldmia.w	r3, {r0, r1}
 8020ed2:	ab16      	add	r3, sp, #88	@ 0x58
 8020ed4:	e88d 0003 	stmia.w	sp, {r0, r1}
 8020ed8:	4620      	mov	r0, r4
 8020eda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8020edc:	f7fc ffc6 	bl	801de6c <rcutils_strdup>
 8020ee0:	2800      	cmp	r0, #0
 8020ee2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020ee4:	bf08      	it	eq
 8020ee6:	250a      	moveq	r5, #10
 8020ee8:	6018      	str	r0, [r3, #0]
 8020eea:	4628      	mov	r0, r5
 8020eec:	b00d      	add	sp, #52	@ 0x34
 8020eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ef2:	250b      	movs	r5, #11
 8020ef4:	4628      	mov	r0, r5
 8020ef6:	b00d      	add	sp, #52	@ 0x34
 8020ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020efc:	f7f9 fd72 	bl	801a9e4 <rcl_convert_rmw_ret_to_rcl_ret>
 8020f00:	4605      	mov	r5, r0
 8020f02:	e7f2      	b.n	8020eea <rcl_expand_topic_name+0xa2>
 8020f04:	2567      	movs	r5, #103	@ 0x67
 8020f06:	4628      	mov	r0, r5
 8020f08:	b00d      	add	sp, #52	@ 0x34
 8020f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f0e:	25c9      	movs	r5, #201	@ 0xc9
 8020f10:	e7eb      	b.n	8020eea <rcl_expand_topic_name+0xa2>
 8020f12:	2b7e      	cmp	r3, #126	@ 0x7e
 8020f14:	d075      	beq.n	8021002 <rcl_expand_topic_name+0x1ba>
 8020f16:	f1b9 0f00 	cmp.w	r9, #0
 8020f1a:	f000 80c2 	beq.w	80210a2 <rcl_expand_topic_name+0x25a>
 8020f1e:	2300      	movs	r3, #0
 8020f20:	46a2      	mov	sl, r4
 8020f22:	461e      	mov	r6, r3
 8020f24:	9508      	str	r5, [sp, #32]
 8020f26:	4655      	mov	r5, sl
 8020f28:	9409      	str	r4, [sp, #36]	@ 0x24
 8020f2a:	46b2      	mov	sl, r6
 8020f2c:	464c      	mov	r4, r9
 8020f2e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8020f32:	2c00      	cmp	r4, #0
 8020f34:	f000 80ae 	beq.w	8021094 <rcl_expand_topic_name+0x24c>
 8020f38:	217d      	movs	r1, #125	@ 0x7d
 8020f3a:	4628      	mov	r0, r5
 8020f3c:	f001 f950 	bl	80221e0 <strchr>
 8020f40:	eba0 0904 	sub.w	r9, r0, r4
 8020f44:	4621      	mov	r1, r4
 8020f46:	4869      	ldr	r0, [pc, #420]	@ (80210ec <rcl_expand_topic_name+0x2a4>)
 8020f48:	f109 0601 	add.w	r6, r9, #1
 8020f4c:	4632      	mov	r2, r6
 8020f4e:	f001 f954 	bl	80221fa <strncmp>
 8020f52:	2800      	cmp	r0, #0
 8020f54:	d051      	beq.n	8020ffa <rcl_expand_topic_name+0x1b2>
 8020f56:	4632      	mov	r2, r6
 8020f58:	4621      	mov	r1, r4
 8020f5a:	4865      	ldr	r0, [pc, #404]	@ (80210f0 <rcl_expand_topic_name+0x2a8>)
 8020f5c:	f001 f94d 	bl	80221fa <strncmp>
 8020f60:	b128      	cbz	r0, 8020f6e <rcl_expand_topic_name+0x126>
 8020f62:	4632      	mov	r2, r6
 8020f64:	4621      	mov	r1, r4
 8020f66:	4863      	ldr	r0, [pc, #396]	@ (80210f4 <rcl_expand_topic_name+0x2ac>)
 8020f68:	f001 f947 	bl	80221fa <strncmp>
 8020f6c:	bb38      	cbnz	r0, 8020fbe <rcl_expand_topic_name+0x176>
 8020f6e:	46d9      	mov	r9, fp
 8020f70:	ab18      	add	r3, sp, #96	@ 0x60
 8020f72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8020f76:	ab16      	add	r3, sp, #88	@ 0x58
 8020f78:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8020f7c:	4620      	mov	r0, r4
 8020f7e:	4631      	mov	r1, r6
 8020f80:	cb0c      	ldmia	r3, {r2, r3}
 8020f82:	f7fc ff95 	bl	801deb0 <rcutils_strndup>
 8020f86:	4604      	mov	r4, r0
 8020f88:	2800      	cmp	r0, #0
 8020f8a:	f000 80a3 	beq.w	80210d4 <rcl_expand_topic_name+0x28c>
 8020f8e:	464a      	mov	r2, r9
 8020f90:	4628      	mov	r0, r5
 8020f92:	ab16      	add	r3, sp, #88	@ 0x58
 8020f94:	4621      	mov	r1, r4
 8020f96:	f7fc fe69 	bl	801dc6c <rcutils_repl_str>
 8020f9a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020f9c:	4605      	mov	r5, r0
 8020f9e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020fa0:	4620      	mov	r0, r4
 8020fa2:	4798      	blx	r3
 8020fa4:	4650      	mov	r0, sl
 8020fa6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020fa8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020faa:	4798      	blx	r3
 8020fac:	2d00      	cmp	r5, #0
 8020fae:	d06c      	beq.n	802108a <rcl_expand_topic_name+0x242>
 8020fb0:	217b      	movs	r1, #123	@ 0x7b
 8020fb2:	4628      	mov	r0, r5
 8020fb4:	f001 f914 	bl	80221e0 <strchr>
 8020fb8:	46aa      	mov	sl, r5
 8020fba:	4604      	mov	r4, r0
 8020fbc:	e7b9      	b.n	8020f32 <rcl_expand_topic_name+0xea>
 8020fbe:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8020fc2:	1c61      	adds	r1, r4, #1
 8020fc4:	4640      	mov	r0, r8
 8020fc6:	f7fd f88b 	bl	801e0e0 <rcutils_string_map_getn>
 8020fca:	4681      	mov	r9, r0
 8020fcc:	2800      	cmp	r0, #0
 8020fce:	d1cf      	bne.n	8020f70 <rcl_expand_topic_name+0x128>
 8020fd0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020fd2:	aa18      	add	r2, sp, #96	@ 0x60
 8020fd4:	2569      	movs	r5, #105	@ 0x69
 8020fd6:	6018      	str	r0, [r3, #0]
 8020fd8:	ab16      	add	r3, sp, #88	@ 0x58
 8020fda:	ca07      	ldmia	r2, {r0, r1, r2}
 8020fdc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8020fe0:	4631      	mov	r1, r6
 8020fe2:	4620      	mov	r0, r4
 8020fe4:	cb0c      	ldmia	r3, {r2, r3}
 8020fe6:	f7fc ff63 	bl	801deb0 <rcutils_strndup>
 8020fea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020fec:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020fee:	4798      	blx	r3
 8020ff0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020ff2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020ff4:	4650      	mov	r0, sl
 8020ff6:	4798      	blx	r3
 8020ff8:	e777      	b.n	8020eea <rcl_expand_topic_name+0xa2>
 8020ffa:	46b9      	mov	r9, r7
 8020ffc:	e7b8      	b.n	8020f70 <rcl_expand_topic_name+0x128>
 8020ffe:	25ca      	movs	r5, #202	@ 0xca
 8021000:	e773      	b.n	8020eea <rcl_expand_topic_name+0xa2>
 8021002:	9e07      	ldr	r6, [sp, #28]
 8021004:	4630      	mov	r0, r6
 8021006:	f7df f975 	bl	80002f4 <strlen>
 802100a:	4a3b      	ldr	r2, [pc, #236]	@ (80210f8 <rcl_expand_topic_name+0x2b0>)
 802100c:	4b3b      	ldr	r3, [pc, #236]	@ (80210fc <rcl_expand_topic_name+0x2b4>)
 802100e:	9603      	str	r6, [sp, #12]
 8021010:	2801      	cmp	r0, #1
 8021012:	bf18      	it	ne
 8021014:	4613      	movne	r3, r2
 8021016:	9704      	str	r7, [sp, #16]
 8021018:	9302      	str	r3, [sp, #8]
 802101a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802101c:	9300      	str	r3, [sp, #0]
 802101e:	1c63      	adds	r3, r4, #1
 8021020:	9305      	str	r3, [sp, #20]
 8021022:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8021026:	9301      	str	r3, [sp, #4]
 8021028:	ab16      	add	r3, sp, #88	@ 0x58
 802102a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802102c:	f7fc fde4 	bl	801dbf8 <rcutils_format_string_limit>
 8021030:	4606      	mov	r6, r0
 8021032:	b350      	cbz	r0, 802108a <rcl_expand_topic_name+0x242>
 8021034:	f1b9 0f00 	cmp.w	r9, #0
 8021038:	d005      	beq.n	8021046 <rcl_expand_topic_name+0x1fe>
 802103a:	217b      	movs	r1, #123	@ 0x7b
 802103c:	46b2      	mov	sl, r6
 802103e:	f001 f8cf 	bl	80221e0 <strchr>
 8021042:	4681      	mov	r9, r0
 8021044:	e76e      	b.n	8020f24 <rcl_expand_topic_name+0xdc>
 8021046:	7833      	ldrb	r3, [r6, #0]
 8021048:	2b2f      	cmp	r3, #47	@ 0x2f
 802104a:	d01b      	beq.n	8021084 <rcl_expand_topic_name+0x23c>
 802104c:	9c07      	ldr	r4, [sp, #28]
 802104e:	4620      	mov	r0, r4
 8021050:	f7df f950 	bl	80002f4 <strlen>
 8021054:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8021058:	4a29      	ldr	r2, [pc, #164]	@ (8021100 <rcl_expand_topic_name+0x2b8>)
 802105a:	9301      	str	r3, [sp, #4]
 802105c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802105e:	9604      	str	r6, [sp, #16]
 8021060:	9300      	str	r3, [sp, #0]
 8021062:	4b28      	ldr	r3, [pc, #160]	@ (8021104 <rcl_expand_topic_name+0x2bc>)
 8021064:	9403      	str	r4, [sp, #12]
 8021066:	2801      	cmp	r0, #1
 8021068:	bf18      	it	ne
 802106a:	4613      	movne	r3, r2
 802106c:	9302      	str	r3, [sp, #8]
 802106e:	ab16      	add	r3, sp, #88	@ 0x58
 8021070:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8021072:	f7fc fdc1 	bl	801dbf8 <rcutils_format_string_limit>
 8021076:	4603      	mov	r3, r0
 8021078:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 802107a:	4630      	mov	r0, r6
 802107c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802107e:	461e      	mov	r6, r3
 8021080:	4790      	blx	r2
 8021082:	b116      	cbz	r6, 802108a <rcl_expand_topic_name+0x242>
 8021084:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8021086:	601e      	str	r6, [r3, #0]
 8021088:	e72f      	b.n	8020eea <rcl_expand_topic_name+0xa2>
 802108a:	2300      	movs	r3, #0
 802108c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802108e:	250a      	movs	r5, #10
 8021090:	6013      	str	r3, [r2, #0]
 8021092:	e72a      	b.n	8020eea <rcl_expand_topic_name+0xa2>
 8021094:	4653      	mov	r3, sl
 8021096:	4656      	mov	r6, sl
 8021098:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 802109c:	2b00      	cmp	r3, #0
 802109e:	d1d2      	bne.n	8021046 <rcl_expand_topic_name+0x1fe>
 80210a0:	7823      	ldrb	r3, [r4, #0]
 80210a2:	2b2f      	cmp	r3, #47	@ 0x2f
 80210a4:	d01e      	beq.n	80210e4 <rcl_expand_topic_name+0x29c>
 80210a6:	9e07      	ldr	r6, [sp, #28]
 80210a8:	4630      	mov	r0, r6
 80210aa:	f7df f923 	bl	80002f4 <strlen>
 80210ae:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80210b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80210b4:	9603      	str	r6, [sp, #12]
 80210b6:	9404      	str	r4, [sp, #16]
 80210b8:	e9cd 2300 	strd	r2, r3, [sp]
 80210bc:	4a10      	ldr	r2, [pc, #64]	@ (8021100 <rcl_expand_topic_name+0x2b8>)
 80210be:	4b11      	ldr	r3, [pc, #68]	@ (8021104 <rcl_expand_topic_name+0x2bc>)
 80210c0:	2801      	cmp	r0, #1
 80210c2:	bf18      	it	ne
 80210c4:	4613      	movne	r3, r2
 80210c6:	9302      	str	r3, [sp, #8]
 80210c8:	ab16      	add	r3, sp, #88	@ 0x58
 80210ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80210cc:	f7fc fd94 	bl	801dbf8 <rcutils_format_string_limit>
 80210d0:	4606      	mov	r6, r0
 80210d2:	e7d6      	b.n	8021082 <rcl_expand_topic_name+0x23a>
 80210d4:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 80210d8:	4650      	mov	r0, sl
 80210da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80210dc:	6014      	str	r4, [r2, #0]
 80210de:	250a      	movs	r5, #10
 80210e0:	4798      	blx	r3
 80210e2:	e702      	b.n	8020eea <rcl_expand_topic_name+0xa2>
 80210e4:	2300      	movs	r3, #0
 80210e6:	461e      	mov	r6, r3
 80210e8:	e7cc      	b.n	8021084 <rcl_expand_topic_name+0x23c>
 80210ea:	bf00      	nop
 80210ec:	08025914 	.word	0x08025914
 80210f0:	0802591c 	.word	0x0802591c
 80210f4:	08025924 	.word	0x08025924
 80210f8:	0802590c 	.word	0x0802590c
 80210fc:	080248c8 	.word	0x080248c8
 8021100:	0802525c 	.word	0x0802525c
 8021104:	080248d8 	.word	0x080248d8

08021108 <rcl_get_default_topic_name_substitutions>:
 8021108:	2800      	cmp	r0, #0
 802110a:	bf0c      	ite	eq
 802110c:	200b      	moveq	r0, #11
 802110e:	2000      	movne	r0, #0
 8021110:	4770      	bx	lr
 8021112:	bf00      	nop

08021114 <rcl_get_zero_initialized_guard_condition>:
 8021114:	4a03      	ldr	r2, [pc, #12]	@ (8021124 <rcl_get_zero_initialized_guard_condition+0x10>)
 8021116:	4603      	mov	r3, r0
 8021118:	e892 0003 	ldmia.w	r2, {r0, r1}
 802111c:	e883 0003 	stmia.w	r3, {r0, r1}
 8021120:	4618      	mov	r0, r3
 8021122:	4770      	bx	lr
 8021124:	08025930 	.word	0x08025930

08021128 <rcl_guard_condition_init>:
 8021128:	b082      	sub	sp, #8
 802112a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802112c:	b087      	sub	sp, #28
 802112e:	4604      	mov	r4, r0
 8021130:	460d      	mov	r5, r1
 8021132:	f10d 0e30 	add.w	lr, sp, #48	@ 0x30
 8021136:	f10d 0c04 	add.w	ip, sp, #4
 802113a:	e9ce 2300 	strd	r2, r3, [lr]
 802113e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8021142:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021146:	f8de 3000 	ldr.w	r3, [lr]
 802114a:	a801      	add	r0, sp, #4
 802114c:	f8cc 3000 	str.w	r3, [ip]
 8021150:	f7f4 f93a 	bl	80153c8 <rcutils_allocator_is_valid>
 8021154:	b354      	cbz	r4, 80211ac <rcl_guard_condition_init+0x84>
 8021156:	f080 0301 	eor.w	r3, r0, #1
 802115a:	b2db      	uxtb	r3, r3
 802115c:	bb33      	cbnz	r3, 80211ac <rcl_guard_condition_init+0x84>
 802115e:	6866      	ldr	r6, [r4, #4]
 8021160:	b9ee      	cbnz	r6, 802119e <rcl_guard_condition_init+0x76>
 8021162:	b31d      	cbz	r5, 80211ac <rcl_guard_condition_init+0x84>
 8021164:	4628      	mov	r0, r5
 8021166:	f7f9 fc5b 	bl	801aa20 <rcl_context_is_valid>
 802116a:	b308      	cbz	r0, 80211b0 <rcl_guard_condition_init+0x88>
 802116c:	9b01      	ldr	r3, [sp, #4]
 802116e:	201c      	movs	r0, #28
 8021170:	9905      	ldr	r1, [sp, #20]
 8021172:	4798      	blx	r3
 8021174:	4607      	mov	r7, r0
 8021176:	6060      	str	r0, [r4, #4]
 8021178:	b310      	cbz	r0, 80211c0 <rcl_guard_condition_init+0x98>
 802117a:	6828      	ldr	r0, [r5, #0]
 802117c:	3028      	adds	r0, #40	@ 0x28
 802117e:	f000 faab 	bl	80216d8 <rmw_create_guard_condition>
 8021182:	6038      	str	r0, [r7, #0]
 8021184:	6860      	ldr	r0, [r4, #4]
 8021186:	6807      	ldr	r7, [r0, #0]
 8021188:	b1a7      	cbz	r7, 80211b4 <rcl_guard_condition_init+0x8c>
 802118a:	2301      	movs	r3, #1
 802118c:	ac01      	add	r4, sp, #4
 802118e:	f100 0708 	add.w	r7, r0, #8
 8021192:	7103      	strb	r3, [r0, #4]
 8021194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8021196:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8021198:	6823      	ldr	r3, [r4, #0]
 802119a:	603b      	str	r3, [r7, #0]
 802119c:	e000      	b.n	80211a0 <rcl_guard_condition_init+0x78>
 802119e:	2664      	movs	r6, #100	@ 0x64
 80211a0:	4630      	mov	r0, r6
 80211a2:	b007      	add	sp, #28
 80211a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80211a8:	b002      	add	sp, #8
 80211aa:	4770      	bx	lr
 80211ac:	260b      	movs	r6, #11
 80211ae:	e7f7      	b.n	80211a0 <rcl_guard_condition_init+0x78>
 80211b0:	2665      	movs	r6, #101	@ 0x65
 80211b2:	e7f5      	b.n	80211a0 <rcl_guard_condition_init+0x78>
 80211b4:	9b02      	ldr	r3, [sp, #8]
 80211b6:	2601      	movs	r6, #1
 80211b8:	9905      	ldr	r1, [sp, #20]
 80211ba:	4798      	blx	r3
 80211bc:	6067      	str	r7, [r4, #4]
 80211be:	e7ef      	b.n	80211a0 <rcl_guard_condition_init+0x78>
 80211c0:	260a      	movs	r6, #10
 80211c2:	e7ed      	b.n	80211a0 <rcl_guard_condition_init+0x78>

080211c4 <rcl_guard_condition_init_from_rmw>:
 80211c4:	b082      	sub	sp, #8
 80211c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80211ca:	b086      	sub	sp, #24
 80211cc:	4604      	mov	r4, r0
 80211ce:	460e      	mov	r6, r1
 80211d0:	4615      	mov	r5, r2
 80211d2:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80211d6:	f10d 0e04 	add.w	lr, sp, #4
 80211da:	f84c 3f04 	str.w	r3, [ip, #4]!
 80211de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80211e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80211e6:	f8dc 3000 	ldr.w	r3, [ip]
 80211ea:	a801      	add	r0, sp, #4
 80211ec:	f8ce 3000 	str.w	r3, [lr]
 80211f0:	f7f4 f8ea 	bl	80153c8 <rcutils_allocator_is_valid>
 80211f4:	f080 0301 	eor.w	r3, r0, #1
 80211f8:	b2db      	uxtb	r3, r3
 80211fa:	bb3b      	cbnz	r3, 802124c <rcl_guard_condition_init_from_rmw+0x88>
 80211fc:	b334      	cbz	r4, 802124c <rcl_guard_condition_init_from_rmw+0x88>
 80211fe:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8021202:	f1b8 0f00 	cmp.w	r8, #0
 8021206:	d11a      	bne.n	802123e <rcl_guard_condition_init_from_rmw+0x7a>
 8021208:	b305      	cbz	r5, 802124c <rcl_guard_condition_init_from_rmw+0x88>
 802120a:	4628      	mov	r0, r5
 802120c:	f7f9 fc08 	bl	801aa20 <rcl_context_is_valid>
 8021210:	b1f0      	cbz	r0, 8021250 <rcl_guard_condition_init_from_rmw+0x8c>
 8021212:	9b01      	ldr	r3, [sp, #4]
 8021214:	201c      	movs	r0, #28
 8021216:	9905      	ldr	r1, [sp, #20]
 8021218:	4798      	blx	r3
 802121a:	4607      	mov	r7, r0
 802121c:	6060      	str	r0, [r4, #4]
 802121e:	b320      	cbz	r0, 802126a <rcl_guard_condition_init_from_rmw+0xa6>
 8021220:	b1c6      	cbz	r6, 8021254 <rcl_guard_condition_init_from_rmw+0x90>
 8021222:	6006      	str	r6, [r0, #0]
 8021224:	f880 8004 	strb.w	r8, [r0, #4]
 8021228:	ac01      	add	r4, sp, #4
 802122a:	f107 0c08 	add.w	ip, r7, #8
 802122e:	2500      	movs	r5, #0
 8021230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8021232:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021236:	6823      	ldr	r3, [r4, #0]
 8021238:	f8cc 3000 	str.w	r3, [ip]
 802123c:	e000      	b.n	8021240 <rcl_guard_condition_init_from_rmw+0x7c>
 802123e:	2564      	movs	r5, #100	@ 0x64
 8021240:	4628      	mov	r0, r5
 8021242:	b006      	add	sp, #24
 8021244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021248:	b002      	add	sp, #8
 802124a:	4770      	bx	lr
 802124c:	250b      	movs	r5, #11
 802124e:	e7f7      	b.n	8021240 <rcl_guard_condition_init_from_rmw+0x7c>
 8021250:	2565      	movs	r5, #101	@ 0x65
 8021252:	e7f5      	b.n	8021240 <rcl_guard_condition_init_from_rmw+0x7c>
 8021254:	6828      	ldr	r0, [r5, #0]
 8021256:	3028      	adds	r0, #40	@ 0x28
 8021258:	f000 fa3e 	bl	80216d8 <rmw_create_guard_condition>
 802125c:	6038      	str	r0, [r7, #0]
 802125e:	6867      	ldr	r7, [r4, #4]
 8021260:	683e      	ldr	r6, [r7, #0]
 8021262:	b126      	cbz	r6, 802126e <rcl_guard_condition_init_from_rmw+0xaa>
 8021264:	2301      	movs	r3, #1
 8021266:	713b      	strb	r3, [r7, #4]
 8021268:	e7de      	b.n	8021228 <rcl_guard_condition_init_from_rmw+0x64>
 802126a:	250a      	movs	r5, #10
 802126c:	e7e8      	b.n	8021240 <rcl_guard_condition_init_from_rmw+0x7c>
 802126e:	9b02      	ldr	r3, [sp, #8]
 8021270:	4638      	mov	r0, r7
 8021272:	9905      	ldr	r1, [sp, #20]
 8021274:	2501      	movs	r5, #1
 8021276:	4798      	blx	r3
 8021278:	6066      	str	r6, [r4, #4]
 802127a:	e7e1      	b.n	8021240 <rcl_guard_condition_init_from_rmw+0x7c>

0802127c <rcl_guard_condition_fini>:
 802127c:	b570      	push	{r4, r5, r6, lr}
 802127e:	b082      	sub	sp, #8
 8021280:	b1f0      	cbz	r0, 80212c0 <rcl_guard_condition_fini+0x44>
 8021282:	6843      	ldr	r3, [r0, #4]
 8021284:	4604      	mov	r4, r0
 8021286:	b163      	cbz	r3, 80212a2 <rcl_guard_condition_fini+0x26>
 8021288:	6818      	ldr	r0, [r3, #0]
 802128a:	68de      	ldr	r6, [r3, #12]
 802128c:	6999      	ldr	r1, [r3, #24]
 802128e:	b160      	cbz	r0, 80212aa <rcl_guard_condition_fini+0x2e>
 8021290:	791d      	ldrb	r5, [r3, #4]
 8021292:	b965      	cbnz	r5, 80212ae <rcl_guard_condition_fini+0x32>
 8021294:	4618      	mov	r0, r3
 8021296:	47b0      	blx	r6
 8021298:	2300      	movs	r3, #0
 802129a:	4628      	mov	r0, r5
 802129c:	6063      	str	r3, [r4, #4]
 802129e:	b002      	add	sp, #8
 80212a0:	bd70      	pop	{r4, r5, r6, pc}
 80212a2:	461d      	mov	r5, r3
 80212a4:	4628      	mov	r0, r5
 80212a6:	b002      	add	sp, #8
 80212a8:	bd70      	pop	{r4, r5, r6, pc}
 80212aa:	4605      	mov	r5, r0
 80212ac:	e7f2      	b.n	8021294 <rcl_guard_condition_fini+0x18>
 80212ae:	9101      	str	r1, [sp, #4]
 80212b0:	f000 fa28 	bl	8021704 <rmw_destroy_guard_condition>
 80212b4:	1e05      	subs	r5, r0, #0
 80212b6:	6863      	ldr	r3, [r4, #4]
 80212b8:	9901      	ldr	r1, [sp, #4]
 80212ba:	bf18      	it	ne
 80212bc:	2501      	movne	r5, #1
 80212be:	e7e9      	b.n	8021294 <rcl_guard_condition_fini+0x18>
 80212c0:	250b      	movs	r5, #11
 80212c2:	4628      	mov	r0, r5
 80212c4:	b002      	add	sp, #8
 80212c6:	bd70      	pop	{r4, r5, r6, pc}

080212c8 <rcl_guard_condition_get_default_options>:
 80212c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80212ca:	b087      	sub	sp, #28
 80212cc:	4606      	mov	r6, r0
 80212ce:	4c0b      	ldr	r4, [pc, #44]	@ (80212fc <rcl_guard_condition_get_default_options+0x34>)
 80212d0:	4668      	mov	r0, sp
 80212d2:	f7f4 f86b 	bl	80153ac <rcutils_get_default_allocator>
 80212d6:	46ee      	mov	lr, sp
 80212d8:	46a4      	mov	ip, r4
 80212da:	4625      	mov	r5, r4
 80212dc:	4634      	mov	r4, r6
 80212de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80212e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80212e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80212e8:	f8de 7000 	ldr.w	r7, [lr]
 80212ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80212ee:	4630      	mov	r0, r6
 80212f0:	f8cc 7000 	str.w	r7, [ip]
 80212f4:	6027      	str	r7, [r4, #0]
 80212f6:	b007      	add	sp, #28
 80212f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80212fa:	bf00      	nop
 80212fc:	24069590 	.word	0x24069590

08021300 <rcl_trigger_guard_condition>:
 8021300:	b148      	cbz	r0, 8021316 <rcl_trigger_guard_condition+0x16>
 8021302:	b508      	push	{r3, lr}
 8021304:	6843      	ldr	r3, [r0, #4]
 8021306:	b143      	cbz	r3, 802131a <rcl_trigger_guard_condition+0x1a>
 8021308:	6818      	ldr	r0, [r3, #0]
 802130a:	f000 fa0f 	bl	802172c <rmw_trigger_guard_condition>
 802130e:	3800      	subs	r0, #0
 8021310:	bf18      	it	ne
 8021312:	2001      	movne	r0, #1
 8021314:	bd08      	pop	{r3, pc}
 8021316:	200b      	movs	r0, #11
 8021318:	4770      	bx	lr
 802131a:	200b      	movs	r0, #11
 802131c:	bd08      	pop	{r3, pc}
 802131e:	bf00      	nop

08021320 <rcl_guard_condition_get_rmw_handle>:
 8021320:	b110      	cbz	r0, 8021328 <rcl_guard_condition_get_rmw_handle+0x8>
 8021322:	6840      	ldr	r0, [r0, #4]
 8021324:	b100      	cbz	r0, 8021328 <rcl_guard_condition_get_rmw_handle+0x8>
 8021326:	6800      	ldr	r0, [r0, #0]
 8021328:	4770      	bx	lr
 802132a:	bf00      	nop

0802132c <rcl_validate_topic_name>:
 802132c:	2800      	cmp	r0, #0
 802132e:	f000 8089 	beq.w	8021444 <rcl_validate_topic_name+0x118>
 8021332:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021336:	460e      	mov	r6, r1
 8021338:	2900      	cmp	r1, #0
 802133a:	f000 8085 	beq.w	8021448 <rcl_validate_topic_name+0x11c>
 802133e:	4604      	mov	r4, r0
 8021340:	4617      	mov	r7, r2
 8021342:	f7de ffd7 	bl	80002f4 <strlen>
 8021346:	b1b0      	cbz	r0, 8021376 <rcl_validate_topic_name+0x4a>
 8021348:	f894 e000 	ldrb.w	lr, [r4]
 802134c:	f8df c160 	ldr.w	ip, [pc, #352]	@ 80214b0 <rcl_validate_topic_name+0x184>
 8021350:	f81c 300e 	ldrb.w	r3, [ip, lr]
 8021354:	f013 0304 	ands.w	r3, r3, #4
 8021358:	d139      	bne.n	80213ce <rcl_validate_topic_name+0xa2>
 802135a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 802135e:	f814 2008 	ldrb.w	r2, [r4, r8]
 8021362:	2a2f      	cmp	r2, #47	@ 0x2f
 8021364:	d10f      	bne.n	8021386 <rcl_validate_topic_name+0x5a>
 8021366:	2202      	movs	r2, #2
 8021368:	6032      	str	r2, [r6, #0]
 802136a:	b3a7      	cbz	r7, 80213d6 <rcl_validate_topic_name+0xaa>
 802136c:	4618      	mov	r0, r3
 802136e:	f8c7 8000 	str.w	r8, [r7]
 8021372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021376:	2301      	movs	r3, #1
 8021378:	6033      	str	r3, [r6, #0]
 802137a:	b367      	cbz	r7, 80213d6 <rcl_validate_topic_name+0xaa>
 802137c:	2300      	movs	r3, #0
 802137e:	4618      	mov	r0, r3
 8021380:	603b      	str	r3, [r7, #0]
 8021382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021386:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 802138a:	461d      	mov	r5, r3
 802138c:	4619      	mov	r1, r3
 802138e:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8021392:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 8021396:	f1b9 0f09 	cmp.w	r9, #9
 802139a:	d91f      	bls.n	80213dc <rcl_validate_topic_name+0xb0>
 802139c:	f022 0920 	bic.w	r9, r2, #32
 80213a0:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 80213a4:	f1b9 0f19 	cmp.w	r9, #25
 80213a8:	d918      	bls.n	80213dc <rcl_validate_topic_name+0xb0>
 80213aa:	2a5f      	cmp	r2, #95	@ 0x5f
 80213ac:	d024      	beq.n	80213f8 <rcl_validate_topic_name+0xcc>
 80213ae:	2a2f      	cmp	r2, #47	@ 0x2f
 80213b0:	d058      	beq.n	8021464 <rcl_validate_topic_name+0x138>
 80213b2:	2a7e      	cmp	r2, #126	@ 0x7e
 80213b4:	d04a      	beq.n	802144c <rcl_validate_topic_name+0x120>
 80213b6:	2a7b      	cmp	r2, #123	@ 0x7b
 80213b8:	d05b      	beq.n	8021472 <rcl_validate_topic_name+0x146>
 80213ba:	2a7d      	cmp	r2, #125	@ 0x7d
 80213bc:	d169      	bne.n	8021492 <rcl_validate_topic_name+0x166>
 80213be:	2d00      	cmp	r5, #0
 80213c0:	d15c      	bne.n	802147c <rcl_validate_topic_name+0x150>
 80213c2:	2305      	movs	r3, #5
 80213c4:	6033      	str	r3, [r6, #0]
 80213c6:	b137      	cbz	r7, 80213d6 <rcl_validate_topic_name+0xaa>
 80213c8:	2000      	movs	r0, #0
 80213ca:	6039      	str	r1, [r7, #0]
 80213cc:	e7d9      	b.n	8021382 <rcl_validate_topic_name+0x56>
 80213ce:	2304      	movs	r3, #4
 80213d0:	6033      	str	r3, [r6, #0]
 80213d2:	2f00      	cmp	r7, #0
 80213d4:	d1d2      	bne.n	802137c <rcl_validate_topic_name+0x50>
 80213d6:	2000      	movs	r0, #0
 80213d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80213dc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80213e0:	0752      	lsls	r2, r2, #29
 80213e2:	d509      	bpl.n	80213f8 <rcl_validate_topic_name+0xcc>
 80213e4:	2900      	cmp	r1, #0
 80213e6:	bf0c      	ite	eq
 80213e8:	2200      	moveq	r2, #0
 80213ea:	f005 0201 	andne.w	r2, r5, #1
 80213ee:	b11a      	cbz	r2, 80213f8 <rcl_validate_topic_name+0xcc>
 80213f0:	1e4d      	subs	r5, r1, #1
 80213f2:	429d      	cmp	r5, r3
 80213f4:	d031      	beq.n	802145a <rcl_validate_topic_name+0x12e>
 80213f6:	4615      	mov	r5, r2
 80213f8:	3101      	adds	r1, #1
 80213fa:	4288      	cmp	r0, r1
 80213fc:	d1c7      	bne.n	802138e <rcl_validate_topic_name+0x62>
 80213fe:	2d00      	cmp	r5, #0
 8021400:	d142      	bne.n	8021488 <rcl_validate_topic_name+0x15c>
 8021402:	4628      	mov	r0, r5
 8021404:	2301      	movs	r3, #1
 8021406:	e00c      	b.n	8021422 <rcl_validate_topic_name+0xf6>
 8021408:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 802140c:	d101      	bne.n	8021412 <rcl_validate_topic_name+0xe6>
 802140e:	2801      	cmp	r0, #1
 8021410:	d047      	beq.n	80214a2 <rcl_validate_topic_name+0x176>
 8021412:	1c5a      	adds	r2, r3, #1
 8021414:	428b      	cmp	r3, r1
 8021416:	f100 0001 	add.w	r0, r0, #1
 802141a:	f104 0401 	add.w	r4, r4, #1
 802141e:	4613      	mov	r3, r2
 8021420:	d22e      	bcs.n	8021480 <rcl_validate_topic_name+0x154>
 8021422:	4580      	cmp	r8, r0
 8021424:	d0f5      	beq.n	8021412 <rcl_validate_topic_name+0xe6>
 8021426:	7822      	ldrb	r2, [r4, #0]
 8021428:	2a2f      	cmp	r2, #47	@ 0x2f
 802142a:	d1ed      	bne.n	8021408 <rcl_validate_topic_name+0xdc>
 802142c:	7862      	ldrb	r2, [r4, #1]
 802142e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8021432:	0752      	lsls	r2, r2, #29
 8021434:	d5ed      	bpl.n	8021412 <rcl_validate_topic_name+0xe6>
 8021436:	2204      	movs	r2, #4
 8021438:	6032      	str	r2, [r6, #0]
 802143a:	2f00      	cmp	r7, #0
 802143c:	d0cb      	beq.n	80213d6 <rcl_validate_topic_name+0xaa>
 802143e:	2000      	movs	r0, #0
 8021440:	603b      	str	r3, [r7, #0]
 8021442:	e79e      	b.n	8021382 <rcl_validate_topic_name+0x56>
 8021444:	200b      	movs	r0, #11
 8021446:	4770      	bx	lr
 8021448:	200b      	movs	r0, #11
 802144a:	e79a      	b.n	8021382 <rcl_validate_topic_name+0x56>
 802144c:	2900      	cmp	r1, #0
 802144e:	d0d3      	beq.n	80213f8 <rcl_validate_topic_name+0xcc>
 8021450:	2306      	movs	r3, #6
 8021452:	6033      	str	r3, [r6, #0]
 8021454:	2f00      	cmp	r7, #0
 8021456:	d1b7      	bne.n	80213c8 <rcl_validate_topic_name+0x9c>
 8021458:	e7bd      	b.n	80213d6 <rcl_validate_topic_name+0xaa>
 802145a:	2309      	movs	r3, #9
 802145c:	6033      	str	r3, [r6, #0]
 802145e:	2f00      	cmp	r7, #0
 8021460:	d1b2      	bne.n	80213c8 <rcl_validate_topic_name+0x9c>
 8021462:	e7b8      	b.n	80213d6 <rcl_validate_topic_name+0xaa>
 8021464:	2d00      	cmp	r5, #0
 8021466:	d0c7      	beq.n	80213f8 <rcl_validate_topic_name+0xcc>
 8021468:	2308      	movs	r3, #8
 802146a:	6033      	str	r3, [r6, #0]
 802146c:	2f00      	cmp	r7, #0
 802146e:	d1ab      	bne.n	80213c8 <rcl_validate_topic_name+0x9c>
 8021470:	e7b1      	b.n	80213d6 <rcl_validate_topic_name+0xaa>
 8021472:	2d00      	cmp	r5, #0
 8021474:	d1f8      	bne.n	8021468 <rcl_validate_topic_name+0x13c>
 8021476:	460b      	mov	r3, r1
 8021478:	2501      	movs	r5, #1
 802147a:	e7bd      	b.n	80213f8 <rcl_validate_topic_name+0xcc>
 802147c:	2500      	movs	r5, #0
 802147e:	e7bb      	b.n	80213f8 <rcl_validate_topic_name+0xcc>
 8021480:	2300      	movs	r3, #0
 8021482:	4618      	mov	r0, r3
 8021484:	6033      	str	r3, [r6, #0]
 8021486:	e77c      	b.n	8021382 <rcl_validate_topic_name+0x56>
 8021488:	2205      	movs	r2, #5
 802148a:	6032      	str	r2, [r6, #0]
 802148c:	2f00      	cmp	r7, #0
 802148e:	d1d6      	bne.n	802143e <rcl_validate_topic_name+0x112>
 8021490:	e7a1      	b.n	80213d6 <rcl_validate_topic_name+0xaa>
 8021492:	2d00      	cmp	r5, #0
 8021494:	bf14      	ite	ne
 8021496:	2308      	movne	r3, #8
 8021498:	2303      	moveq	r3, #3
 802149a:	6033      	str	r3, [r6, #0]
 802149c:	2f00      	cmp	r7, #0
 802149e:	d193      	bne.n	80213c8 <rcl_validate_topic_name+0x9c>
 80214a0:	e799      	b.n	80213d6 <rcl_validate_topic_name+0xaa>
 80214a2:	2307      	movs	r3, #7
 80214a4:	6033      	str	r3, [r6, #0]
 80214a6:	2f00      	cmp	r7, #0
 80214a8:	d095      	beq.n	80213d6 <rcl_validate_topic_name+0xaa>
 80214aa:	2301      	movs	r3, #1
 80214ac:	e7c7      	b.n	802143e <rcl_validate_topic_name+0x112>
 80214ae:	bf00      	nop
 80214b0:	08025a9a 	.word	0x08025a9a

080214b4 <rcutils_string_array_fini>:
 80214b4:	b328      	cbz	r0, 8021502 <rcutils_string_array_fini+0x4e>
 80214b6:	b570      	push	{r4, r5, r6, lr}
 80214b8:	4604      	mov	r4, r0
 80214ba:	6840      	ldr	r0, [r0, #4]
 80214bc:	b1e0      	cbz	r0, 80214f8 <rcutils_string_array_fini+0x44>
 80214be:	f104 0008 	add.w	r0, r4, #8
 80214c2:	f7f3 ff81 	bl	80153c8 <rcutils_allocator_is_valid>
 80214c6:	b1c0      	cbz	r0, 80214fa <rcutils_string_array_fini+0x46>
 80214c8:	6823      	ldr	r3, [r4, #0]
 80214ca:	b1c3      	cbz	r3, 80214fe <rcutils_string_array_fini+0x4a>
 80214cc:	2500      	movs	r5, #0
 80214ce:	6860      	ldr	r0, [r4, #4]
 80214d0:	462e      	mov	r6, r5
 80214d2:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80214d6:	68e3      	ldr	r3, [r4, #12]
 80214d8:	69a1      	ldr	r1, [r4, #24]
 80214da:	4798      	blx	r3
 80214dc:	e9d4 3000 	ldrd	r3, r0, [r4]
 80214e0:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80214e4:	3501      	adds	r5, #1
 80214e6:	429d      	cmp	r5, r3
 80214e8:	d3f3      	bcc.n	80214d2 <rcutils_string_array_fini+0x1e>
 80214ea:	68e3      	ldr	r3, [r4, #12]
 80214ec:	69a1      	ldr	r1, [r4, #24]
 80214ee:	4798      	blx	r3
 80214f0:	2300      	movs	r3, #0
 80214f2:	4618      	mov	r0, r3
 80214f4:	e9c4 3300 	strd	r3, r3, [r4]
 80214f8:	bd70      	pop	{r4, r5, r6, pc}
 80214fa:	200b      	movs	r0, #11
 80214fc:	bd70      	pop	{r4, r5, r6, pc}
 80214fe:	6860      	ldr	r0, [r4, #4]
 8021500:	e7f3      	b.n	80214ea <rcutils_string_array_fini+0x36>
 8021502:	200b      	movs	r0, #11
 8021504:	4770      	bx	lr
 8021506:	bf00      	nop

08021508 <on_status>:
 8021508:	b082      	sub	sp, #8
 802150a:	b002      	add	sp, #8
 802150c:	4770      	bx	lr
 802150e:	bf00      	nop

08021510 <on_topic>:
 8021510:	4a23      	ldr	r2, [pc, #140]	@ (80215a0 <on_topic+0x90>)
 8021512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021516:	6812      	ldr	r2, [r2, #0]
 8021518:	b094      	sub	sp, #80	@ 0x50
 802151a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 802151c:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8021520:	9113      	str	r1, [sp, #76]	@ 0x4c
 8021522:	9312      	str	r3, [sp, #72]	@ 0x48
 8021524:	b3c2      	cbz	r2, 8021598 <on_topic+0x88>
 8021526:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 802152a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 802152e:	e001      	b.n	8021534 <on_topic+0x24>
 8021530:	6852      	ldr	r2, [r2, #4]
 8021532:	b38a      	cbz	r2, 8021598 <on_topic+0x88>
 8021534:	6894      	ldr	r4, [r2, #8]
 8021536:	8aa3      	ldrh	r3, [r4, #20]
 8021538:	428b      	cmp	r3, r1
 802153a:	d1f9      	bne.n	8021530 <on_topic+0x20>
 802153c:	7da3      	ldrb	r3, [r4, #22]
 802153e:	4283      	cmp	r3, r0
 8021540:	d1f6      	bne.n	8021530 <on_topic+0x20>
 8021542:	2248      	movs	r2, #72	@ 0x48
 8021544:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8021548:	4668      	mov	r0, sp
 802154a:	f000 ff60 	bl	802240e <memcpy>
 802154e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8021552:	4620      	mov	r0, r4
 8021554:	cb0c      	ldmia	r3, {r2, r3}
 8021556:	f7f4 fbeb 	bl	8015d30 <rmw_uxrce_get_static_input_buffer_for_entity>
 802155a:	4607      	mov	r7, r0
 802155c:	b1e0      	cbz	r0, 8021598 <on_topic+0x88>
 802155e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8021562:	462a      	mov	r2, r5
 8021564:	4630      	mov	r0, r6
 8021566:	f108 0110 	add.w	r1, r8, #16
 802156a:	f7fe fd1f 	bl	801ffac <ucdr_deserialize_array_uint8_t>
 802156e:	b930      	cbnz	r0, 802157e <on_topic+0x6e>
 8021570:	4639      	mov	r1, r7
 8021572:	480c      	ldr	r0, [pc, #48]	@ (80215a4 <on_topic+0x94>)
 8021574:	b014      	add	sp, #80	@ 0x50
 8021576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802157a:	f7fd b81b 	b.w	801e5b4 <put_memory>
 802157e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8021582:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 8021586:	f7f4 f9d1 	bl	801592c <rmw_uros_epoch_nanos>
 802158a:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 802158e:	2305      	movs	r3, #5
 8021590:	e942 0102 	strd	r0, r1, [r2, #-8]
 8021594:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8021598:	b014      	add	sp, #80	@ 0x50
 802159a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802159e:	bf00      	nop
 80215a0:	24069244 	.word	0x24069244
 80215a4:	24069234 	.word	0x24069234

080215a8 <on_request>:
 80215a8:	4824      	ldr	r0, [pc, #144]	@ (802163c <on_request+0x94>)
 80215aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80215ae:	6800      	ldr	r0, [r0, #0]
 80215b0:	b094      	sub	sp, #80	@ 0x50
 80215b2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80215b4:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 80215b8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80215ba:	2800      	cmp	r0, #0
 80215bc:	d03b      	beq.n	8021636 <on_request+0x8e>
 80215be:	461d      	mov	r5, r3
 80215c0:	e001      	b.n	80215c6 <on_request+0x1e>
 80215c2:	6840      	ldr	r0, [r0, #4]
 80215c4:	b3b8      	cbz	r0, 8021636 <on_request+0x8e>
 80215c6:	6884      	ldr	r4, [r0, #8]
 80215c8:	8b21      	ldrh	r1, [r4, #24]
 80215ca:	4291      	cmp	r1, r2
 80215cc:	d1f9      	bne.n	80215c2 <on_request+0x1a>
 80215ce:	2248      	movs	r2, #72	@ 0x48
 80215d0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80215d4:	4668      	mov	r0, sp
 80215d6:	f000 ff1a 	bl	802240e <memcpy>
 80215da:	f104 0320 	add.w	r3, r4, #32
 80215de:	4620      	mov	r0, r4
 80215e0:	cb0c      	ldmia	r3, {r2, r3}
 80215e2:	f7f4 fba5 	bl	8015d30 <rmw_uxrce_get_static_input_buffer_for_entity>
 80215e6:	4680      	mov	r8, r0
 80215e8:	b328      	cbz	r0, 8021636 <on_request+0x8e>
 80215ea:	4630      	mov	r0, r6
 80215ec:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80215f0:	463a      	mov	r2, r7
 80215f2:	f106 0110 	add.w	r1, r6, #16
 80215f6:	f7fe fcd9 	bl	801ffac <ucdr_deserialize_array_uint8_t>
 80215fa:	b930      	cbnz	r0, 802160a <on_request+0x62>
 80215fc:	4641      	mov	r1, r8
 80215fe:	4810      	ldr	r0, [pc, #64]	@ (8021640 <on_request+0x98>)
 8021600:	b014      	add	sp, #80	@ 0x50
 8021602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021606:	f7fc bfd5 	b.w	801e5b4 <put_memory>
 802160a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802160c:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 8021610:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 8021614:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 8021618:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802161c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8021620:	e88c 0003 	stmia.w	ip, {r0, r1}
 8021624:	f7f4 f982 	bl	801592c <rmw_uros_epoch_nanos>
 8021628:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 802162c:	2303      	movs	r3, #3
 802162e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8021632:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 8021636:	b014      	add	sp, #80	@ 0x50
 8021638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802163c:	24069214 	.word	0x24069214
 8021640:	24069234 	.word	0x24069234

08021644 <on_reply>:
 8021644:	4822      	ldr	r0, [pc, #136]	@ (80216d0 <on_reply+0x8c>)
 8021646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802164a:	6800      	ldr	r0, [r0, #0]
 802164c:	b094      	sub	sp, #80	@ 0x50
 802164e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8021650:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8021654:	9113      	str	r1, [sp, #76]	@ 0x4c
 8021656:	b3b8      	cbz	r0, 80216c8 <on_reply+0x84>
 8021658:	461d      	mov	r5, r3
 802165a:	e001      	b.n	8021660 <on_reply+0x1c>
 802165c:	6840      	ldr	r0, [r0, #4]
 802165e:	b398      	cbz	r0, 80216c8 <on_reply+0x84>
 8021660:	6884      	ldr	r4, [r0, #8]
 8021662:	8b21      	ldrh	r1, [r4, #24]
 8021664:	4291      	cmp	r1, r2
 8021666:	d1f9      	bne.n	802165c <on_reply+0x18>
 8021668:	2248      	movs	r2, #72	@ 0x48
 802166a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 802166e:	4668      	mov	r0, sp
 8021670:	f000 fecd 	bl	802240e <memcpy>
 8021674:	f104 0320 	add.w	r3, r4, #32
 8021678:	4620      	mov	r0, r4
 802167a:	cb0c      	ldmia	r3, {r2, r3}
 802167c:	f7f4 fb58 	bl	8015d30 <rmw_uxrce_get_static_input_buffer_for_entity>
 8021680:	4680      	mov	r8, r0
 8021682:	b308      	cbz	r0, 80216c8 <on_reply+0x84>
 8021684:	4630      	mov	r0, r6
 8021686:	f8d8 6008 	ldr.w	r6, [r8, #8]
 802168a:	463a      	mov	r2, r7
 802168c:	f106 0110 	add.w	r1, r6, #16
 8021690:	f7fe fc8c 	bl	801ffac <ucdr_deserialize_array_uint8_t>
 8021694:	b930      	cbnz	r0, 80216a4 <on_reply+0x60>
 8021696:	4641      	mov	r1, r8
 8021698:	480e      	ldr	r0, [pc, #56]	@ (80216d4 <on_reply+0x90>)
 802169a:	b014      	add	sp, #80	@ 0x50
 802169c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80216a0:	f7fc bf88 	b.w	801e5b4 <put_memory>
 80216a4:	2200      	movs	r2, #0
 80216a6:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 80216aa:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 80216ae:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 80216b2:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 80216b6:	f7f4 f939 	bl	801592c <rmw_uros_epoch_nanos>
 80216ba:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 80216be:	2304      	movs	r3, #4
 80216c0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80216c4:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 80216c8:	b014      	add	sp, #80	@ 0x50
 80216ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80216ce:	bf00      	nop
 80216d0:	24064928 	.word	0x24064928
 80216d4:	24069234 	.word	0x24069234

080216d8 <rmw_create_guard_condition>:
 80216d8:	b538      	push	{r3, r4, r5, lr}
 80216da:	4605      	mov	r5, r0
 80216dc:	4808      	ldr	r0, [pc, #32]	@ (8021700 <rmw_create_guard_condition+0x28>)
 80216de:	f7fc ff59 	bl	801e594 <get_memory>
 80216e2:	4603      	mov	r3, r0
 80216e4:	b148      	cbz	r0, 80216fa <rmw_create_guard_condition+0x22>
 80216e6:	6884      	ldr	r4, [r0, #8]
 80216e8:	2300      	movs	r3, #0
 80216ea:	61e5      	str	r5, [r4, #28]
 80216ec:	7423      	strb	r3, [r4, #16]
 80216ee:	f7fc ffb9 	bl	801e664 <rmw_get_implementation_identifier>
 80216f2:	f104 0314 	add.w	r3, r4, #20
 80216f6:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80216fa:	4618      	mov	r0, r3
 80216fc:	bd38      	pop	{r3, r4, r5, pc}
 80216fe:	bf00      	nop
 8021700:	240691d4 	.word	0x240691d4

08021704 <rmw_destroy_guard_condition>:
 8021704:	b508      	push	{r3, lr}
 8021706:	4b08      	ldr	r3, [pc, #32]	@ (8021728 <rmw_destroy_guard_condition+0x24>)
 8021708:	6819      	ldr	r1, [r3, #0]
 802170a:	b911      	cbnz	r1, 8021712 <rmw_destroy_guard_condition+0xe>
 802170c:	e00a      	b.n	8021724 <rmw_destroy_guard_condition+0x20>
 802170e:	6849      	ldr	r1, [r1, #4]
 8021710:	b141      	cbz	r1, 8021724 <rmw_destroy_guard_condition+0x20>
 8021712:	688b      	ldr	r3, [r1, #8]
 8021714:	3314      	adds	r3, #20
 8021716:	4298      	cmp	r0, r3
 8021718:	d1f9      	bne.n	802170e <rmw_destroy_guard_condition+0xa>
 802171a:	4803      	ldr	r0, [pc, #12]	@ (8021728 <rmw_destroy_guard_condition+0x24>)
 802171c:	f7fc ff4a 	bl	801e5b4 <put_memory>
 8021720:	2000      	movs	r0, #0
 8021722:	bd08      	pop	{r3, pc}
 8021724:	2001      	movs	r0, #1
 8021726:	bd08      	pop	{r3, pc}
 8021728:	240691d4 	.word	0x240691d4

0802172c <rmw_trigger_guard_condition>:
 802172c:	b160      	cbz	r0, 8021748 <rmw_trigger_guard_condition+0x1c>
 802172e:	b510      	push	{r4, lr}
 8021730:	4604      	mov	r4, r0
 8021732:	6800      	ldr	r0, [r0, #0]
 8021734:	f7f4 fd10 	bl	8016158 <is_uxrce_rmw_identifier_valid>
 8021738:	b908      	cbnz	r0, 802173e <rmw_trigger_guard_condition+0x12>
 802173a:	2001      	movs	r0, #1
 802173c:	bd10      	pop	{r4, pc}
 802173e:	6863      	ldr	r3, [r4, #4]
 8021740:	2201      	movs	r2, #1
 8021742:	2000      	movs	r0, #0
 8021744:	741a      	strb	r2, [r3, #16]
 8021746:	bd10      	pop	{r4, pc}
 8021748:	2001      	movs	r0, #1
 802174a:	4770      	bx	lr

0802174c <rosidl_runtime_c__String__init>:
 802174c:	b510      	push	{r4, lr}
 802174e:	4604      	mov	r4, r0
 8021750:	b086      	sub	sp, #24
 8021752:	b170      	cbz	r0, 8021772 <rosidl_runtime_c__String__init+0x26>
 8021754:	a801      	add	r0, sp, #4
 8021756:	f7f3 fe29 	bl	80153ac <rcutils_get_default_allocator>
 802175a:	9b01      	ldr	r3, [sp, #4]
 802175c:	9905      	ldr	r1, [sp, #20]
 802175e:	2001      	movs	r0, #1
 8021760:	4798      	blx	r3
 8021762:	6020      	str	r0, [r4, #0]
 8021764:	b128      	cbz	r0, 8021772 <rosidl_runtime_c__String__init+0x26>
 8021766:	2100      	movs	r1, #0
 8021768:	2201      	movs	r2, #1
 802176a:	7001      	strb	r1, [r0, #0]
 802176c:	4610      	mov	r0, r2
 802176e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8021772:	b006      	add	sp, #24
 8021774:	bd10      	pop	{r4, pc}
 8021776:	bf00      	nop

08021778 <rosidl_runtime_c__String__fini>:
 8021778:	b320      	cbz	r0, 80217c4 <rosidl_runtime_c__String__fini+0x4c>
 802177a:	6803      	ldr	r3, [r0, #0]
 802177c:	b510      	push	{r4, lr}
 802177e:	4604      	mov	r4, r0
 8021780:	b086      	sub	sp, #24
 8021782:	b173      	cbz	r3, 80217a2 <rosidl_runtime_c__String__fini+0x2a>
 8021784:	6883      	ldr	r3, [r0, #8]
 8021786:	b1f3      	cbz	r3, 80217c6 <rosidl_runtime_c__String__fini+0x4e>
 8021788:	a801      	add	r0, sp, #4
 802178a:	f7f3 fe0f 	bl	80153ac <rcutils_get_default_allocator>
 802178e:	9b02      	ldr	r3, [sp, #8]
 8021790:	9905      	ldr	r1, [sp, #20]
 8021792:	6820      	ldr	r0, [r4, #0]
 8021794:	4798      	blx	r3
 8021796:	2300      	movs	r3, #0
 8021798:	e9c4 3300 	strd	r3, r3, [r4]
 802179c:	60a3      	str	r3, [r4, #8]
 802179e:	b006      	add	sp, #24
 80217a0:	bd10      	pop	{r4, pc}
 80217a2:	6843      	ldr	r3, [r0, #4]
 80217a4:	b9db      	cbnz	r3, 80217de <rosidl_runtime_c__String__fini+0x66>
 80217a6:	6883      	ldr	r3, [r0, #8]
 80217a8:	2b00      	cmp	r3, #0
 80217aa:	d0f8      	beq.n	802179e <rosidl_runtime_c__String__fini+0x26>
 80217ac:	4b12      	ldr	r3, [pc, #72]	@ (80217f8 <rosidl_runtime_c__String__fini+0x80>)
 80217ae:	2251      	movs	r2, #81	@ 0x51
 80217b0:	2101      	movs	r1, #1
 80217b2:	4812      	ldr	r0, [pc, #72]	@ (80217fc <rosidl_runtime_c__String__fini+0x84>)
 80217b4:	681b      	ldr	r3, [r3, #0]
 80217b6:	68db      	ldr	r3, [r3, #12]
 80217b8:	f000 fb8e 	bl	8021ed8 <fwrite>
 80217bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80217c0:	f000 f84a 	bl	8021858 <exit>
 80217c4:	4770      	bx	lr
 80217c6:	4b0c      	ldr	r3, [pc, #48]	@ (80217f8 <rosidl_runtime_c__String__fini+0x80>)
 80217c8:	224c      	movs	r2, #76	@ 0x4c
 80217ca:	2101      	movs	r1, #1
 80217cc:	480c      	ldr	r0, [pc, #48]	@ (8021800 <rosidl_runtime_c__String__fini+0x88>)
 80217ce:	681b      	ldr	r3, [r3, #0]
 80217d0:	68db      	ldr	r3, [r3, #12]
 80217d2:	f000 fb81 	bl	8021ed8 <fwrite>
 80217d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80217da:	f000 f83d 	bl	8021858 <exit>
 80217de:	4b06      	ldr	r3, [pc, #24]	@ (80217f8 <rosidl_runtime_c__String__fini+0x80>)
 80217e0:	224e      	movs	r2, #78	@ 0x4e
 80217e2:	2101      	movs	r1, #1
 80217e4:	4807      	ldr	r0, [pc, #28]	@ (8021804 <rosidl_runtime_c__String__fini+0x8c>)
 80217e6:	681b      	ldr	r3, [r3, #0]
 80217e8:	68db      	ldr	r3, [r3, #12]
 80217ea:	f000 fb75 	bl	8021ed8 <fwrite>
 80217ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80217f2:	f000 f831 	bl	8021858 <exit>
 80217f6:	bf00      	nop
 80217f8:	240012bc 	.word	0x240012bc
 80217fc:	080259d8 	.word	0x080259d8
 8021800:	08025938 	.word	0x08025938
 8021804:	08025988 	.word	0x08025988

08021808 <tier4_vehicle_msgs__msg__ActuationCommand__init>:
 8021808:	3800      	subs	r0, #0
 802180a:	bf18      	it	ne
 802180c:	2001      	movne	r0, #1
 802180e:	4770      	bx	lr

08021810 <tier4_vehicle_msgs__msg__ActuationCommand__fini>:
 8021810:	4770      	bx	lr
 8021812:	bf00      	nop

08021814 <tier4_vehicle_msgs__msg__ActuationStatus__init>:
 8021814:	3800      	subs	r0, #0
 8021816:	bf18      	it	ne
 8021818:	2001      	movne	r0, #1
 802181a:	4770      	bx	lr

0802181c <tier4_vehicle_msgs__msg__ActuationStatus__fini>:
 802181c:	4770      	bx	lr
 802181e:	bf00      	nop

08021820 <calloc>:
 8021820:	4b02      	ldr	r3, [pc, #8]	@ (802182c <calloc+0xc>)
 8021822:	460a      	mov	r2, r1
 8021824:	4601      	mov	r1, r0
 8021826:	6818      	ldr	r0, [r3, #0]
 8021828:	f000 b802 	b.w	8021830 <_calloc_r>
 802182c:	240012bc 	.word	0x240012bc

08021830 <_calloc_r>:
 8021830:	b570      	push	{r4, r5, r6, lr}
 8021832:	fba1 5402 	umull	r5, r4, r1, r2
 8021836:	b93c      	cbnz	r4, 8021848 <_calloc_r+0x18>
 8021838:	4629      	mov	r1, r5
 802183a:	f000 f899 	bl	8021970 <_malloc_r>
 802183e:	4606      	mov	r6, r0
 8021840:	b928      	cbnz	r0, 802184e <_calloc_r+0x1e>
 8021842:	2600      	movs	r6, #0
 8021844:	4630      	mov	r0, r6
 8021846:	bd70      	pop	{r4, r5, r6, pc}
 8021848:	220c      	movs	r2, #12
 802184a:	6002      	str	r2, [r0, #0]
 802184c:	e7f9      	b.n	8021842 <_calloc_r+0x12>
 802184e:	462a      	mov	r2, r5
 8021850:	4621      	mov	r1, r4
 8021852:	f000 fcbd 	bl	80221d0 <memset>
 8021856:	e7f5      	b.n	8021844 <_calloc_r+0x14>

08021858 <exit>:
 8021858:	b508      	push	{r3, lr}
 802185a:	4b06      	ldr	r3, [pc, #24]	@ (8021874 <exit+0x1c>)
 802185c:	4604      	mov	r4, r0
 802185e:	b113      	cbz	r3, 8021866 <exit+0xe>
 8021860:	2100      	movs	r1, #0
 8021862:	f3af 8000 	nop.w
 8021866:	4b04      	ldr	r3, [pc, #16]	@ (8021878 <exit+0x20>)
 8021868:	681b      	ldr	r3, [r3, #0]
 802186a:	b103      	cbz	r3, 802186e <exit+0x16>
 802186c:	4798      	blx	r3
 802186e:	4620      	mov	r0, r4
 8021870:	f7e0 fe9a 	bl	80025a8 <_exit>
 8021874:	00000000 	.word	0x00000000
 8021878:	240696e4 	.word	0x240696e4

0802187c <getenv>:
 802187c:	b507      	push	{r0, r1, r2, lr}
 802187e:	4b04      	ldr	r3, [pc, #16]	@ (8021890 <getenv+0x14>)
 8021880:	4601      	mov	r1, r0
 8021882:	aa01      	add	r2, sp, #4
 8021884:	6818      	ldr	r0, [r3, #0]
 8021886:	f000 f805 	bl	8021894 <_findenv_r>
 802188a:	b003      	add	sp, #12
 802188c:	f85d fb04 	ldr.w	pc, [sp], #4
 8021890:	240012bc 	.word	0x240012bc

08021894 <_findenv_r>:
 8021894:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021898:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8021908 <_findenv_r+0x74>
 802189c:	4606      	mov	r6, r0
 802189e:	4689      	mov	r9, r1
 80218a0:	4617      	mov	r7, r2
 80218a2:	f000 fde1 	bl	8022468 <__env_lock>
 80218a6:	f8da 4000 	ldr.w	r4, [sl]
 80218aa:	b134      	cbz	r4, 80218ba <_findenv_r+0x26>
 80218ac:	464b      	mov	r3, r9
 80218ae:	4698      	mov	r8, r3
 80218b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80218b4:	b13a      	cbz	r2, 80218c6 <_findenv_r+0x32>
 80218b6:	2a3d      	cmp	r2, #61	@ 0x3d
 80218b8:	d1f9      	bne.n	80218ae <_findenv_r+0x1a>
 80218ba:	4630      	mov	r0, r6
 80218bc:	f000 fdda 	bl	8022474 <__env_unlock>
 80218c0:	2000      	movs	r0, #0
 80218c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80218c6:	eba8 0809 	sub.w	r8, r8, r9
 80218ca:	46a3      	mov	fp, r4
 80218cc:	f854 0b04 	ldr.w	r0, [r4], #4
 80218d0:	2800      	cmp	r0, #0
 80218d2:	d0f2      	beq.n	80218ba <_findenv_r+0x26>
 80218d4:	4642      	mov	r2, r8
 80218d6:	4649      	mov	r1, r9
 80218d8:	f000 fc8f 	bl	80221fa <strncmp>
 80218dc:	2800      	cmp	r0, #0
 80218de:	d1f4      	bne.n	80218ca <_findenv_r+0x36>
 80218e0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80218e4:	eb03 0508 	add.w	r5, r3, r8
 80218e8:	f813 3008 	ldrb.w	r3, [r3, r8]
 80218ec:	2b3d      	cmp	r3, #61	@ 0x3d
 80218ee:	d1ec      	bne.n	80218ca <_findenv_r+0x36>
 80218f0:	f8da 3000 	ldr.w	r3, [sl]
 80218f4:	ebab 0303 	sub.w	r3, fp, r3
 80218f8:	109b      	asrs	r3, r3, #2
 80218fa:	4630      	mov	r0, r6
 80218fc:	603b      	str	r3, [r7, #0]
 80218fe:	f000 fdb9 	bl	8022474 <__env_unlock>
 8021902:	1c68      	adds	r0, r5, #1
 8021904:	e7dd      	b.n	80218c2 <_findenv_r+0x2e>
 8021906:	bf00      	nop
 8021908:	24000000 	.word	0x24000000

0802190c <malloc>:
 802190c:	4b02      	ldr	r3, [pc, #8]	@ (8021918 <malloc+0xc>)
 802190e:	4601      	mov	r1, r0
 8021910:	6818      	ldr	r0, [r3, #0]
 8021912:	f000 b82d 	b.w	8021970 <_malloc_r>
 8021916:	bf00      	nop
 8021918:	240012bc 	.word	0x240012bc

0802191c <free>:
 802191c:	4b02      	ldr	r3, [pc, #8]	@ (8021928 <free+0xc>)
 802191e:	4601      	mov	r1, r0
 8021920:	6818      	ldr	r0, [r3, #0]
 8021922:	f000 bdad 	b.w	8022480 <_free_r>
 8021926:	bf00      	nop
 8021928:	240012bc 	.word	0x240012bc

0802192c <sbrk_aligned>:
 802192c:	b570      	push	{r4, r5, r6, lr}
 802192e:	4e0f      	ldr	r6, [pc, #60]	@ (802196c <sbrk_aligned+0x40>)
 8021930:	460c      	mov	r4, r1
 8021932:	6831      	ldr	r1, [r6, #0]
 8021934:	4605      	mov	r5, r0
 8021936:	b911      	cbnz	r1, 802193e <sbrk_aligned+0x12>
 8021938:	f000 fd12 	bl	8022360 <_sbrk_r>
 802193c:	6030      	str	r0, [r6, #0]
 802193e:	4621      	mov	r1, r4
 8021940:	4628      	mov	r0, r5
 8021942:	f000 fd0d 	bl	8022360 <_sbrk_r>
 8021946:	1c43      	adds	r3, r0, #1
 8021948:	d103      	bne.n	8021952 <sbrk_aligned+0x26>
 802194a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 802194e:	4620      	mov	r0, r4
 8021950:	bd70      	pop	{r4, r5, r6, pc}
 8021952:	1cc4      	adds	r4, r0, #3
 8021954:	f024 0403 	bic.w	r4, r4, #3
 8021958:	42a0      	cmp	r0, r4
 802195a:	d0f8      	beq.n	802194e <sbrk_aligned+0x22>
 802195c:	1a21      	subs	r1, r4, r0
 802195e:	4628      	mov	r0, r5
 8021960:	f000 fcfe 	bl	8022360 <_sbrk_r>
 8021964:	3001      	adds	r0, #1
 8021966:	d1f2      	bne.n	802194e <sbrk_aligned+0x22>
 8021968:	e7ef      	b.n	802194a <sbrk_aligned+0x1e>
 802196a:	bf00      	nop
 802196c:	240695a4 	.word	0x240695a4

08021970 <_malloc_r>:
 8021970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021974:	1ccd      	adds	r5, r1, #3
 8021976:	f025 0503 	bic.w	r5, r5, #3
 802197a:	3508      	adds	r5, #8
 802197c:	2d0c      	cmp	r5, #12
 802197e:	bf38      	it	cc
 8021980:	250c      	movcc	r5, #12
 8021982:	2d00      	cmp	r5, #0
 8021984:	4606      	mov	r6, r0
 8021986:	db01      	blt.n	802198c <_malloc_r+0x1c>
 8021988:	42a9      	cmp	r1, r5
 802198a:	d904      	bls.n	8021996 <_malloc_r+0x26>
 802198c:	230c      	movs	r3, #12
 802198e:	6033      	str	r3, [r6, #0]
 8021990:	2000      	movs	r0, #0
 8021992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021996:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8021a6c <_malloc_r+0xfc>
 802199a:	f000 f869 	bl	8021a70 <__malloc_lock>
 802199e:	f8d8 3000 	ldr.w	r3, [r8]
 80219a2:	461c      	mov	r4, r3
 80219a4:	bb44      	cbnz	r4, 80219f8 <_malloc_r+0x88>
 80219a6:	4629      	mov	r1, r5
 80219a8:	4630      	mov	r0, r6
 80219aa:	f7ff ffbf 	bl	802192c <sbrk_aligned>
 80219ae:	1c43      	adds	r3, r0, #1
 80219b0:	4604      	mov	r4, r0
 80219b2:	d158      	bne.n	8021a66 <_malloc_r+0xf6>
 80219b4:	f8d8 4000 	ldr.w	r4, [r8]
 80219b8:	4627      	mov	r7, r4
 80219ba:	2f00      	cmp	r7, #0
 80219bc:	d143      	bne.n	8021a46 <_malloc_r+0xd6>
 80219be:	2c00      	cmp	r4, #0
 80219c0:	d04b      	beq.n	8021a5a <_malloc_r+0xea>
 80219c2:	6823      	ldr	r3, [r4, #0]
 80219c4:	4639      	mov	r1, r7
 80219c6:	4630      	mov	r0, r6
 80219c8:	eb04 0903 	add.w	r9, r4, r3
 80219cc:	f000 fcc8 	bl	8022360 <_sbrk_r>
 80219d0:	4581      	cmp	r9, r0
 80219d2:	d142      	bne.n	8021a5a <_malloc_r+0xea>
 80219d4:	6821      	ldr	r1, [r4, #0]
 80219d6:	1a6d      	subs	r5, r5, r1
 80219d8:	4629      	mov	r1, r5
 80219da:	4630      	mov	r0, r6
 80219dc:	f7ff ffa6 	bl	802192c <sbrk_aligned>
 80219e0:	3001      	adds	r0, #1
 80219e2:	d03a      	beq.n	8021a5a <_malloc_r+0xea>
 80219e4:	6823      	ldr	r3, [r4, #0]
 80219e6:	442b      	add	r3, r5
 80219e8:	6023      	str	r3, [r4, #0]
 80219ea:	f8d8 3000 	ldr.w	r3, [r8]
 80219ee:	685a      	ldr	r2, [r3, #4]
 80219f0:	bb62      	cbnz	r2, 8021a4c <_malloc_r+0xdc>
 80219f2:	f8c8 7000 	str.w	r7, [r8]
 80219f6:	e00f      	b.n	8021a18 <_malloc_r+0xa8>
 80219f8:	6822      	ldr	r2, [r4, #0]
 80219fa:	1b52      	subs	r2, r2, r5
 80219fc:	d420      	bmi.n	8021a40 <_malloc_r+0xd0>
 80219fe:	2a0b      	cmp	r2, #11
 8021a00:	d917      	bls.n	8021a32 <_malloc_r+0xc2>
 8021a02:	1961      	adds	r1, r4, r5
 8021a04:	42a3      	cmp	r3, r4
 8021a06:	6025      	str	r5, [r4, #0]
 8021a08:	bf18      	it	ne
 8021a0a:	6059      	strne	r1, [r3, #4]
 8021a0c:	6863      	ldr	r3, [r4, #4]
 8021a0e:	bf08      	it	eq
 8021a10:	f8c8 1000 	streq.w	r1, [r8]
 8021a14:	5162      	str	r2, [r4, r5]
 8021a16:	604b      	str	r3, [r1, #4]
 8021a18:	4630      	mov	r0, r6
 8021a1a:	f000 f82f 	bl	8021a7c <__malloc_unlock>
 8021a1e:	f104 000b 	add.w	r0, r4, #11
 8021a22:	1d23      	adds	r3, r4, #4
 8021a24:	f020 0007 	bic.w	r0, r0, #7
 8021a28:	1ac2      	subs	r2, r0, r3
 8021a2a:	bf1c      	itt	ne
 8021a2c:	1a1b      	subne	r3, r3, r0
 8021a2e:	50a3      	strne	r3, [r4, r2]
 8021a30:	e7af      	b.n	8021992 <_malloc_r+0x22>
 8021a32:	6862      	ldr	r2, [r4, #4]
 8021a34:	42a3      	cmp	r3, r4
 8021a36:	bf0c      	ite	eq
 8021a38:	f8c8 2000 	streq.w	r2, [r8]
 8021a3c:	605a      	strne	r2, [r3, #4]
 8021a3e:	e7eb      	b.n	8021a18 <_malloc_r+0xa8>
 8021a40:	4623      	mov	r3, r4
 8021a42:	6864      	ldr	r4, [r4, #4]
 8021a44:	e7ae      	b.n	80219a4 <_malloc_r+0x34>
 8021a46:	463c      	mov	r4, r7
 8021a48:	687f      	ldr	r7, [r7, #4]
 8021a4a:	e7b6      	b.n	80219ba <_malloc_r+0x4a>
 8021a4c:	461a      	mov	r2, r3
 8021a4e:	685b      	ldr	r3, [r3, #4]
 8021a50:	42a3      	cmp	r3, r4
 8021a52:	d1fb      	bne.n	8021a4c <_malloc_r+0xdc>
 8021a54:	2300      	movs	r3, #0
 8021a56:	6053      	str	r3, [r2, #4]
 8021a58:	e7de      	b.n	8021a18 <_malloc_r+0xa8>
 8021a5a:	230c      	movs	r3, #12
 8021a5c:	6033      	str	r3, [r6, #0]
 8021a5e:	4630      	mov	r0, r6
 8021a60:	f000 f80c 	bl	8021a7c <__malloc_unlock>
 8021a64:	e794      	b.n	8021990 <_malloc_r+0x20>
 8021a66:	6005      	str	r5, [r0, #0]
 8021a68:	e7d6      	b.n	8021a18 <_malloc_r+0xa8>
 8021a6a:	bf00      	nop
 8021a6c:	240695a8 	.word	0x240695a8

08021a70 <__malloc_lock>:
 8021a70:	4801      	ldr	r0, [pc, #4]	@ (8021a78 <__malloc_lock+0x8>)
 8021a72:	f000 bcc2 	b.w	80223fa <__retarget_lock_acquire_recursive>
 8021a76:	bf00      	nop
 8021a78:	240696ed 	.word	0x240696ed

08021a7c <__malloc_unlock>:
 8021a7c:	4801      	ldr	r0, [pc, #4]	@ (8021a84 <__malloc_unlock+0x8>)
 8021a7e:	f000 bcbd 	b.w	80223fc <__retarget_lock_release_recursive>
 8021a82:	bf00      	nop
 8021a84:	240696ed 	.word	0x240696ed

08021a88 <srand>:
 8021a88:	b538      	push	{r3, r4, r5, lr}
 8021a8a:	4b10      	ldr	r3, [pc, #64]	@ (8021acc <srand+0x44>)
 8021a8c:	681d      	ldr	r5, [r3, #0]
 8021a8e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8021a90:	4604      	mov	r4, r0
 8021a92:	b9b3      	cbnz	r3, 8021ac2 <srand+0x3a>
 8021a94:	2018      	movs	r0, #24
 8021a96:	f7ff ff39 	bl	802190c <malloc>
 8021a9a:	4602      	mov	r2, r0
 8021a9c:	6328      	str	r0, [r5, #48]	@ 0x30
 8021a9e:	b920      	cbnz	r0, 8021aaa <srand+0x22>
 8021aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8021ad0 <srand+0x48>)
 8021aa2:	480c      	ldr	r0, [pc, #48]	@ (8021ad4 <srand+0x4c>)
 8021aa4:	2146      	movs	r1, #70	@ 0x46
 8021aa6:	f000 fcc1 	bl	802242c <__assert_func>
 8021aaa:	490b      	ldr	r1, [pc, #44]	@ (8021ad8 <srand+0x50>)
 8021aac:	4b0b      	ldr	r3, [pc, #44]	@ (8021adc <srand+0x54>)
 8021aae:	e9c0 1300 	strd	r1, r3, [r0]
 8021ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8021ae0 <srand+0x58>)
 8021ab4:	6083      	str	r3, [r0, #8]
 8021ab6:	230b      	movs	r3, #11
 8021ab8:	8183      	strh	r3, [r0, #12]
 8021aba:	2100      	movs	r1, #0
 8021abc:	2001      	movs	r0, #1
 8021abe:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8021ac2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8021ac4:	2200      	movs	r2, #0
 8021ac6:	611c      	str	r4, [r3, #16]
 8021ac8:	615a      	str	r2, [r3, #20]
 8021aca:	bd38      	pop	{r3, r4, r5, pc}
 8021acc:	240012bc 	.word	0x240012bc
 8021ad0:	08025a2a 	.word	0x08025a2a
 8021ad4:	08025a41 	.word	0x08025a41
 8021ad8:	abcd330e 	.word	0xabcd330e
 8021adc:	e66d1234 	.word	0xe66d1234
 8021ae0:	0005deec 	.word	0x0005deec

08021ae4 <rand>:
 8021ae4:	4b16      	ldr	r3, [pc, #88]	@ (8021b40 <rand+0x5c>)
 8021ae6:	b510      	push	{r4, lr}
 8021ae8:	681c      	ldr	r4, [r3, #0]
 8021aea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8021aec:	b9b3      	cbnz	r3, 8021b1c <rand+0x38>
 8021aee:	2018      	movs	r0, #24
 8021af0:	f7ff ff0c 	bl	802190c <malloc>
 8021af4:	4602      	mov	r2, r0
 8021af6:	6320      	str	r0, [r4, #48]	@ 0x30
 8021af8:	b920      	cbnz	r0, 8021b04 <rand+0x20>
 8021afa:	4b12      	ldr	r3, [pc, #72]	@ (8021b44 <rand+0x60>)
 8021afc:	4812      	ldr	r0, [pc, #72]	@ (8021b48 <rand+0x64>)
 8021afe:	2152      	movs	r1, #82	@ 0x52
 8021b00:	f000 fc94 	bl	802242c <__assert_func>
 8021b04:	4911      	ldr	r1, [pc, #68]	@ (8021b4c <rand+0x68>)
 8021b06:	4b12      	ldr	r3, [pc, #72]	@ (8021b50 <rand+0x6c>)
 8021b08:	e9c0 1300 	strd	r1, r3, [r0]
 8021b0c:	4b11      	ldr	r3, [pc, #68]	@ (8021b54 <rand+0x70>)
 8021b0e:	6083      	str	r3, [r0, #8]
 8021b10:	230b      	movs	r3, #11
 8021b12:	8183      	strh	r3, [r0, #12]
 8021b14:	2100      	movs	r1, #0
 8021b16:	2001      	movs	r0, #1
 8021b18:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8021b1c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8021b1e:	480e      	ldr	r0, [pc, #56]	@ (8021b58 <rand+0x74>)
 8021b20:	690b      	ldr	r3, [r1, #16]
 8021b22:	694c      	ldr	r4, [r1, #20]
 8021b24:	4a0d      	ldr	r2, [pc, #52]	@ (8021b5c <rand+0x78>)
 8021b26:	4358      	muls	r0, r3
 8021b28:	fb02 0004 	mla	r0, r2, r4, r0
 8021b2c:	fba3 3202 	umull	r3, r2, r3, r2
 8021b30:	3301      	adds	r3, #1
 8021b32:	eb40 0002 	adc.w	r0, r0, r2
 8021b36:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8021b3a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8021b3e:	bd10      	pop	{r4, pc}
 8021b40:	240012bc 	.word	0x240012bc
 8021b44:	08025a2a 	.word	0x08025a2a
 8021b48:	08025a41 	.word	0x08025a41
 8021b4c:	abcd330e 	.word	0xabcd330e
 8021b50:	e66d1234 	.word	0xe66d1234
 8021b54:	0005deec 	.word	0x0005deec
 8021b58:	5851f42d 	.word	0x5851f42d
 8021b5c:	4c957f2d 	.word	0x4c957f2d

08021b60 <realloc>:
 8021b60:	4b02      	ldr	r3, [pc, #8]	@ (8021b6c <realloc+0xc>)
 8021b62:	460a      	mov	r2, r1
 8021b64:	4601      	mov	r1, r0
 8021b66:	6818      	ldr	r0, [r3, #0]
 8021b68:	f000 b802 	b.w	8021b70 <_realloc_r>
 8021b6c:	240012bc 	.word	0x240012bc

08021b70 <_realloc_r>:
 8021b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021b74:	4680      	mov	r8, r0
 8021b76:	4615      	mov	r5, r2
 8021b78:	460c      	mov	r4, r1
 8021b7a:	b921      	cbnz	r1, 8021b86 <_realloc_r+0x16>
 8021b7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021b80:	4611      	mov	r1, r2
 8021b82:	f7ff bef5 	b.w	8021970 <_malloc_r>
 8021b86:	b92a      	cbnz	r2, 8021b94 <_realloc_r+0x24>
 8021b88:	f000 fc7a 	bl	8022480 <_free_r>
 8021b8c:	2400      	movs	r4, #0
 8021b8e:	4620      	mov	r0, r4
 8021b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021b94:	f000 fcbe 	bl	8022514 <_malloc_usable_size_r>
 8021b98:	4285      	cmp	r5, r0
 8021b9a:	4606      	mov	r6, r0
 8021b9c:	d802      	bhi.n	8021ba4 <_realloc_r+0x34>
 8021b9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8021ba2:	d8f4      	bhi.n	8021b8e <_realloc_r+0x1e>
 8021ba4:	4629      	mov	r1, r5
 8021ba6:	4640      	mov	r0, r8
 8021ba8:	f7ff fee2 	bl	8021970 <_malloc_r>
 8021bac:	4607      	mov	r7, r0
 8021bae:	2800      	cmp	r0, #0
 8021bb0:	d0ec      	beq.n	8021b8c <_realloc_r+0x1c>
 8021bb2:	42b5      	cmp	r5, r6
 8021bb4:	462a      	mov	r2, r5
 8021bb6:	4621      	mov	r1, r4
 8021bb8:	bf28      	it	cs
 8021bba:	4632      	movcs	r2, r6
 8021bbc:	f000 fc27 	bl	802240e <memcpy>
 8021bc0:	4621      	mov	r1, r4
 8021bc2:	4640      	mov	r0, r8
 8021bc4:	f000 fc5c 	bl	8022480 <_free_r>
 8021bc8:	463c      	mov	r4, r7
 8021bca:	e7e0      	b.n	8021b8e <_realloc_r+0x1e>

08021bcc <_strtoul_l.constprop.0>:
 8021bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021bd0:	4e34      	ldr	r6, [pc, #208]	@ (8021ca4 <_strtoul_l.constprop.0+0xd8>)
 8021bd2:	4686      	mov	lr, r0
 8021bd4:	460d      	mov	r5, r1
 8021bd6:	4628      	mov	r0, r5
 8021bd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021bdc:	5d37      	ldrb	r7, [r6, r4]
 8021bde:	f017 0708 	ands.w	r7, r7, #8
 8021be2:	d1f8      	bne.n	8021bd6 <_strtoul_l.constprop.0+0xa>
 8021be4:	2c2d      	cmp	r4, #45	@ 0x2d
 8021be6:	d12f      	bne.n	8021c48 <_strtoul_l.constprop.0+0x7c>
 8021be8:	782c      	ldrb	r4, [r5, #0]
 8021bea:	2701      	movs	r7, #1
 8021bec:	1c85      	adds	r5, r0, #2
 8021bee:	f033 0010 	bics.w	r0, r3, #16
 8021bf2:	d109      	bne.n	8021c08 <_strtoul_l.constprop.0+0x3c>
 8021bf4:	2c30      	cmp	r4, #48	@ 0x30
 8021bf6:	d12c      	bne.n	8021c52 <_strtoul_l.constprop.0+0x86>
 8021bf8:	7828      	ldrb	r0, [r5, #0]
 8021bfa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8021bfe:	2858      	cmp	r0, #88	@ 0x58
 8021c00:	d127      	bne.n	8021c52 <_strtoul_l.constprop.0+0x86>
 8021c02:	786c      	ldrb	r4, [r5, #1]
 8021c04:	2310      	movs	r3, #16
 8021c06:	3502      	adds	r5, #2
 8021c08:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8021c0c:	2600      	movs	r6, #0
 8021c0e:	fbb8 f8f3 	udiv	r8, r8, r3
 8021c12:	fb03 f908 	mul.w	r9, r3, r8
 8021c16:	ea6f 0909 	mvn.w	r9, r9
 8021c1a:	4630      	mov	r0, r6
 8021c1c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8021c20:	f1bc 0f09 	cmp.w	ip, #9
 8021c24:	d81c      	bhi.n	8021c60 <_strtoul_l.constprop.0+0x94>
 8021c26:	4664      	mov	r4, ip
 8021c28:	42a3      	cmp	r3, r4
 8021c2a:	dd2a      	ble.n	8021c82 <_strtoul_l.constprop.0+0xb6>
 8021c2c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8021c30:	d007      	beq.n	8021c42 <_strtoul_l.constprop.0+0x76>
 8021c32:	4580      	cmp	r8, r0
 8021c34:	d322      	bcc.n	8021c7c <_strtoul_l.constprop.0+0xb0>
 8021c36:	d101      	bne.n	8021c3c <_strtoul_l.constprop.0+0x70>
 8021c38:	45a1      	cmp	r9, r4
 8021c3a:	db1f      	blt.n	8021c7c <_strtoul_l.constprop.0+0xb0>
 8021c3c:	fb00 4003 	mla	r0, r0, r3, r4
 8021c40:	2601      	movs	r6, #1
 8021c42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021c46:	e7e9      	b.n	8021c1c <_strtoul_l.constprop.0+0x50>
 8021c48:	2c2b      	cmp	r4, #43	@ 0x2b
 8021c4a:	bf04      	itt	eq
 8021c4c:	782c      	ldrbeq	r4, [r5, #0]
 8021c4e:	1c85      	addeq	r5, r0, #2
 8021c50:	e7cd      	b.n	8021bee <_strtoul_l.constprop.0+0x22>
 8021c52:	2b00      	cmp	r3, #0
 8021c54:	d1d8      	bne.n	8021c08 <_strtoul_l.constprop.0+0x3c>
 8021c56:	2c30      	cmp	r4, #48	@ 0x30
 8021c58:	bf0c      	ite	eq
 8021c5a:	2308      	moveq	r3, #8
 8021c5c:	230a      	movne	r3, #10
 8021c5e:	e7d3      	b.n	8021c08 <_strtoul_l.constprop.0+0x3c>
 8021c60:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8021c64:	f1bc 0f19 	cmp.w	ip, #25
 8021c68:	d801      	bhi.n	8021c6e <_strtoul_l.constprop.0+0xa2>
 8021c6a:	3c37      	subs	r4, #55	@ 0x37
 8021c6c:	e7dc      	b.n	8021c28 <_strtoul_l.constprop.0+0x5c>
 8021c6e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8021c72:	f1bc 0f19 	cmp.w	ip, #25
 8021c76:	d804      	bhi.n	8021c82 <_strtoul_l.constprop.0+0xb6>
 8021c78:	3c57      	subs	r4, #87	@ 0x57
 8021c7a:	e7d5      	b.n	8021c28 <_strtoul_l.constprop.0+0x5c>
 8021c7c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8021c80:	e7df      	b.n	8021c42 <_strtoul_l.constprop.0+0x76>
 8021c82:	1c73      	adds	r3, r6, #1
 8021c84:	d106      	bne.n	8021c94 <_strtoul_l.constprop.0+0xc8>
 8021c86:	2322      	movs	r3, #34	@ 0x22
 8021c88:	f8ce 3000 	str.w	r3, [lr]
 8021c8c:	4630      	mov	r0, r6
 8021c8e:	b932      	cbnz	r2, 8021c9e <_strtoul_l.constprop.0+0xd2>
 8021c90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021c94:	b107      	cbz	r7, 8021c98 <_strtoul_l.constprop.0+0xcc>
 8021c96:	4240      	negs	r0, r0
 8021c98:	2a00      	cmp	r2, #0
 8021c9a:	d0f9      	beq.n	8021c90 <_strtoul_l.constprop.0+0xc4>
 8021c9c:	b106      	cbz	r6, 8021ca0 <_strtoul_l.constprop.0+0xd4>
 8021c9e:	1e69      	subs	r1, r5, #1
 8021ca0:	6011      	str	r1, [r2, #0]
 8021ca2:	e7f5      	b.n	8021c90 <_strtoul_l.constprop.0+0xc4>
 8021ca4:	08025a9a 	.word	0x08025a9a

08021ca8 <strtoul>:
 8021ca8:	4613      	mov	r3, r2
 8021caa:	460a      	mov	r2, r1
 8021cac:	4601      	mov	r1, r0
 8021cae:	4802      	ldr	r0, [pc, #8]	@ (8021cb8 <strtoul+0x10>)
 8021cb0:	6800      	ldr	r0, [r0, #0]
 8021cb2:	f7ff bf8b 	b.w	8021bcc <_strtoul_l.constprop.0>
 8021cb6:	bf00      	nop
 8021cb8:	240012bc 	.word	0x240012bc

08021cbc <std>:
 8021cbc:	2300      	movs	r3, #0
 8021cbe:	b510      	push	{r4, lr}
 8021cc0:	4604      	mov	r4, r0
 8021cc2:	e9c0 3300 	strd	r3, r3, [r0]
 8021cc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021cca:	6083      	str	r3, [r0, #8]
 8021ccc:	8181      	strh	r1, [r0, #12]
 8021cce:	6643      	str	r3, [r0, #100]	@ 0x64
 8021cd0:	81c2      	strh	r2, [r0, #14]
 8021cd2:	6183      	str	r3, [r0, #24]
 8021cd4:	4619      	mov	r1, r3
 8021cd6:	2208      	movs	r2, #8
 8021cd8:	305c      	adds	r0, #92	@ 0x5c
 8021cda:	f000 fa79 	bl	80221d0 <memset>
 8021cde:	4b0d      	ldr	r3, [pc, #52]	@ (8021d14 <std+0x58>)
 8021ce0:	6263      	str	r3, [r4, #36]	@ 0x24
 8021ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8021d18 <std+0x5c>)
 8021ce4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8021ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8021d1c <std+0x60>)
 8021ce8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8021cea:	4b0d      	ldr	r3, [pc, #52]	@ (8021d20 <std+0x64>)
 8021cec:	6323      	str	r3, [r4, #48]	@ 0x30
 8021cee:	4b0d      	ldr	r3, [pc, #52]	@ (8021d24 <std+0x68>)
 8021cf0:	6224      	str	r4, [r4, #32]
 8021cf2:	429c      	cmp	r4, r3
 8021cf4:	d006      	beq.n	8021d04 <std+0x48>
 8021cf6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8021cfa:	4294      	cmp	r4, r2
 8021cfc:	d002      	beq.n	8021d04 <std+0x48>
 8021cfe:	33d0      	adds	r3, #208	@ 0xd0
 8021d00:	429c      	cmp	r4, r3
 8021d02:	d105      	bne.n	8021d10 <std+0x54>
 8021d04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8021d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021d0c:	f000 bb74 	b.w	80223f8 <__retarget_lock_init_recursive>
 8021d10:	bd10      	pop	{r4, pc}
 8021d12:	bf00      	nop
 8021d14:	08021f5d 	.word	0x08021f5d
 8021d18:	08021f7f 	.word	0x08021f7f
 8021d1c:	08021fb7 	.word	0x08021fb7
 8021d20:	08021fdb 	.word	0x08021fdb
 8021d24:	240695ac 	.word	0x240695ac

08021d28 <stdio_exit_handler>:
 8021d28:	4a02      	ldr	r2, [pc, #8]	@ (8021d34 <stdio_exit_handler+0xc>)
 8021d2a:	4903      	ldr	r1, [pc, #12]	@ (8021d38 <stdio_exit_handler+0x10>)
 8021d2c:	4803      	ldr	r0, [pc, #12]	@ (8021d3c <stdio_exit_handler+0x14>)
 8021d2e:	f000 b869 	b.w	8021e04 <_fwalk_sglue>
 8021d32:	bf00      	nop
 8021d34:	240012b0 	.word	0x240012b0
 8021d38:	08022bf9 	.word	0x08022bf9
 8021d3c:	240012c0 	.word	0x240012c0

08021d40 <cleanup_stdio>:
 8021d40:	6841      	ldr	r1, [r0, #4]
 8021d42:	4b0c      	ldr	r3, [pc, #48]	@ (8021d74 <cleanup_stdio+0x34>)
 8021d44:	4299      	cmp	r1, r3
 8021d46:	b510      	push	{r4, lr}
 8021d48:	4604      	mov	r4, r0
 8021d4a:	d001      	beq.n	8021d50 <cleanup_stdio+0x10>
 8021d4c:	f000 ff54 	bl	8022bf8 <_fflush_r>
 8021d50:	68a1      	ldr	r1, [r4, #8]
 8021d52:	4b09      	ldr	r3, [pc, #36]	@ (8021d78 <cleanup_stdio+0x38>)
 8021d54:	4299      	cmp	r1, r3
 8021d56:	d002      	beq.n	8021d5e <cleanup_stdio+0x1e>
 8021d58:	4620      	mov	r0, r4
 8021d5a:	f000 ff4d 	bl	8022bf8 <_fflush_r>
 8021d5e:	68e1      	ldr	r1, [r4, #12]
 8021d60:	4b06      	ldr	r3, [pc, #24]	@ (8021d7c <cleanup_stdio+0x3c>)
 8021d62:	4299      	cmp	r1, r3
 8021d64:	d004      	beq.n	8021d70 <cleanup_stdio+0x30>
 8021d66:	4620      	mov	r0, r4
 8021d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021d6c:	f000 bf44 	b.w	8022bf8 <_fflush_r>
 8021d70:	bd10      	pop	{r4, pc}
 8021d72:	bf00      	nop
 8021d74:	240695ac 	.word	0x240695ac
 8021d78:	24069614 	.word	0x24069614
 8021d7c:	2406967c 	.word	0x2406967c

08021d80 <global_stdio_init.part.0>:
 8021d80:	b510      	push	{r4, lr}
 8021d82:	4b0b      	ldr	r3, [pc, #44]	@ (8021db0 <global_stdio_init.part.0+0x30>)
 8021d84:	4c0b      	ldr	r4, [pc, #44]	@ (8021db4 <global_stdio_init.part.0+0x34>)
 8021d86:	4a0c      	ldr	r2, [pc, #48]	@ (8021db8 <global_stdio_init.part.0+0x38>)
 8021d88:	601a      	str	r2, [r3, #0]
 8021d8a:	4620      	mov	r0, r4
 8021d8c:	2200      	movs	r2, #0
 8021d8e:	2104      	movs	r1, #4
 8021d90:	f7ff ff94 	bl	8021cbc <std>
 8021d94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8021d98:	2201      	movs	r2, #1
 8021d9a:	2109      	movs	r1, #9
 8021d9c:	f7ff ff8e 	bl	8021cbc <std>
 8021da0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8021da4:	2202      	movs	r2, #2
 8021da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021daa:	2112      	movs	r1, #18
 8021dac:	f7ff bf86 	b.w	8021cbc <std>
 8021db0:	240696e4 	.word	0x240696e4
 8021db4:	240695ac 	.word	0x240695ac
 8021db8:	08021d29 	.word	0x08021d29

08021dbc <__sfp_lock_acquire>:
 8021dbc:	4801      	ldr	r0, [pc, #4]	@ (8021dc4 <__sfp_lock_acquire+0x8>)
 8021dbe:	f000 bb1c 	b.w	80223fa <__retarget_lock_acquire_recursive>
 8021dc2:	bf00      	nop
 8021dc4:	240696ee 	.word	0x240696ee

08021dc8 <__sfp_lock_release>:
 8021dc8:	4801      	ldr	r0, [pc, #4]	@ (8021dd0 <__sfp_lock_release+0x8>)
 8021dca:	f000 bb17 	b.w	80223fc <__retarget_lock_release_recursive>
 8021dce:	bf00      	nop
 8021dd0:	240696ee 	.word	0x240696ee

08021dd4 <__sinit>:
 8021dd4:	b510      	push	{r4, lr}
 8021dd6:	4604      	mov	r4, r0
 8021dd8:	f7ff fff0 	bl	8021dbc <__sfp_lock_acquire>
 8021ddc:	6a23      	ldr	r3, [r4, #32]
 8021dde:	b11b      	cbz	r3, 8021de8 <__sinit+0x14>
 8021de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021de4:	f7ff bff0 	b.w	8021dc8 <__sfp_lock_release>
 8021de8:	4b04      	ldr	r3, [pc, #16]	@ (8021dfc <__sinit+0x28>)
 8021dea:	6223      	str	r3, [r4, #32]
 8021dec:	4b04      	ldr	r3, [pc, #16]	@ (8021e00 <__sinit+0x2c>)
 8021dee:	681b      	ldr	r3, [r3, #0]
 8021df0:	2b00      	cmp	r3, #0
 8021df2:	d1f5      	bne.n	8021de0 <__sinit+0xc>
 8021df4:	f7ff ffc4 	bl	8021d80 <global_stdio_init.part.0>
 8021df8:	e7f2      	b.n	8021de0 <__sinit+0xc>
 8021dfa:	bf00      	nop
 8021dfc:	08021d41 	.word	0x08021d41
 8021e00:	240696e4 	.word	0x240696e4

08021e04 <_fwalk_sglue>:
 8021e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021e08:	4607      	mov	r7, r0
 8021e0a:	4688      	mov	r8, r1
 8021e0c:	4614      	mov	r4, r2
 8021e0e:	2600      	movs	r6, #0
 8021e10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021e14:	f1b9 0901 	subs.w	r9, r9, #1
 8021e18:	d505      	bpl.n	8021e26 <_fwalk_sglue+0x22>
 8021e1a:	6824      	ldr	r4, [r4, #0]
 8021e1c:	2c00      	cmp	r4, #0
 8021e1e:	d1f7      	bne.n	8021e10 <_fwalk_sglue+0xc>
 8021e20:	4630      	mov	r0, r6
 8021e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021e26:	89ab      	ldrh	r3, [r5, #12]
 8021e28:	2b01      	cmp	r3, #1
 8021e2a:	d907      	bls.n	8021e3c <_fwalk_sglue+0x38>
 8021e2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021e30:	3301      	adds	r3, #1
 8021e32:	d003      	beq.n	8021e3c <_fwalk_sglue+0x38>
 8021e34:	4629      	mov	r1, r5
 8021e36:	4638      	mov	r0, r7
 8021e38:	47c0      	blx	r8
 8021e3a:	4306      	orrs	r6, r0
 8021e3c:	3568      	adds	r5, #104	@ 0x68
 8021e3e:	e7e9      	b.n	8021e14 <_fwalk_sglue+0x10>

08021e40 <_fwrite_r>:
 8021e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021e44:	9c08      	ldr	r4, [sp, #32]
 8021e46:	468a      	mov	sl, r1
 8021e48:	4690      	mov	r8, r2
 8021e4a:	fb02 f903 	mul.w	r9, r2, r3
 8021e4e:	4606      	mov	r6, r0
 8021e50:	b118      	cbz	r0, 8021e5a <_fwrite_r+0x1a>
 8021e52:	6a03      	ldr	r3, [r0, #32]
 8021e54:	b90b      	cbnz	r3, 8021e5a <_fwrite_r+0x1a>
 8021e56:	f7ff ffbd 	bl	8021dd4 <__sinit>
 8021e5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021e5c:	07dd      	lsls	r5, r3, #31
 8021e5e:	d405      	bmi.n	8021e6c <_fwrite_r+0x2c>
 8021e60:	89a3      	ldrh	r3, [r4, #12]
 8021e62:	0598      	lsls	r0, r3, #22
 8021e64:	d402      	bmi.n	8021e6c <_fwrite_r+0x2c>
 8021e66:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021e68:	f000 fac7 	bl	80223fa <__retarget_lock_acquire_recursive>
 8021e6c:	89a3      	ldrh	r3, [r4, #12]
 8021e6e:	0719      	lsls	r1, r3, #28
 8021e70:	d516      	bpl.n	8021ea0 <_fwrite_r+0x60>
 8021e72:	6923      	ldr	r3, [r4, #16]
 8021e74:	b1a3      	cbz	r3, 8021ea0 <_fwrite_r+0x60>
 8021e76:	2500      	movs	r5, #0
 8021e78:	454d      	cmp	r5, r9
 8021e7a:	d01f      	beq.n	8021ebc <_fwrite_r+0x7c>
 8021e7c:	68a7      	ldr	r7, [r4, #8]
 8021e7e:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8021e82:	3f01      	subs	r7, #1
 8021e84:	2f00      	cmp	r7, #0
 8021e86:	60a7      	str	r7, [r4, #8]
 8021e88:	da04      	bge.n	8021e94 <_fwrite_r+0x54>
 8021e8a:	69a3      	ldr	r3, [r4, #24]
 8021e8c:	429f      	cmp	r7, r3
 8021e8e:	db0f      	blt.n	8021eb0 <_fwrite_r+0x70>
 8021e90:	290a      	cmp	r1, #10
 8021e92:	d00d      	beq.n	8021eb0 <_fwrite_r+0x70>
 8021e94:	6823      	ldr	r3, [r4, #0]
 8021e96:	1c5a      	adds	r2, r3, #1
 8021e98:	6022      	str	r2, [r4, #0]
 8021e9a:	7019      	strb	r1, [r3, #0]
 8021e9c:	3501      	adds	r5, #1
 8021e9e:	e7eb      	b.n	8021e78 <_fwrite_r+0x38>
 8021ea0:	4621      	mov	r1, r4
 8021ea2:	4630      	mov	r0, r6
 8021ea4:	f000 f914 	bl	80220d0 <__swsetup_r>
 8021ea8:	2800      	cmp	r0, #0
 8021eaa:	d0e4      	beq.n	8021e76 <_fwrite_r+0x36>
 8021eac:	2500      	movs	r5, #0
 8021eae:	e005      	b.n	8021ebc <_fwrite_r+0x7c>
 8021eb0:	4622      	mov	r2, r4
 8021eb2:	4630      	mov	r0, r6
 8021eb4:	f000 f8ce 	bl	8022054 <__swbuf_r>
 8021eb8:	3001      	adds	r0, #1
 8021eba:	d1ef      	bne.n	8021e9c <_fwrite_r+0x5c>
 8021ebc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021ebe:	07da      	lsls	r2, r3, #31
 8021ec0:	d405      	bmi.n	8021ece <_fwrite_r+0x8e>
 8021ec2:	89a3      	ldrh	r3, [r4, #12]
 8021ec4:	059b      	lsls	r3, r3, #22
 8021ec6:	d402      	bmi.n	8021ece <_fwrite_r+0x8e>
 8021ec8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021eca:	f000 fa97 	bl	80223fc <__retarget_lock_release_recursive>
 8021ece:	fbb5 f0f8 	udiv	r0, r5, r8
 8021ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08021ed8 <fwrite>:
 8021ed8:	b507      	push	{r0, r1, r2, lr}
 8021eda:	9300      	str	r3, [sp, #0]
 8021edc:	4613      	mov	r3, r2
 8021ede:	460a      	mov	r2, r1
 8021ee0:	4601      	mov	r1, r0
 8021ee2:	4803      	ldr	r0, [pc, #12]	@ (8021ef0 <fwrite+0x18>)
 8021ee4:	6800      	ldr	r0, [r0, #0]
 8021ee6:	f7ff ffab 	bl	8021e40 <_fwrite_r>
 8021eea:	b003      	add	sp, #12
 8021eec:	f85d fb04 	ldr.w	pc, [sp], #4
 8021ef0:	240012bc 	.word	0x240012bc

08021ef4 <sniprintf>:
 8021ef4:	b40c      	push	{r2, r3}
 8021ef6:	b530      	push	{r4, r5, lr}
 8021ef8:	4b17      	ldr	r3, [pc, #92]	@ (8021f58 <sniprintf+0x64>)
 8021efa:	1e0c      	subs	r4, r1, #0
 8021efc:	681d      	ldr	r5, [r3, #0]
 8021efe:	b09d      	sub	sp, #116	@ 0x74
 8021f00:	da08      	bge.n	8021f14 <sniprintf+0x20>
 8021f02:	238b      	movs	r3, #139	@ 0x8b
 8021f04:	602b      	str	r3, [r5, #0]
 8021f06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021f0a:	b01d      	add	sp, #116	@ 0x74
 8021f0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021f10:	b002      	add	sp, #8
 8021f12:	4770      	bx	lr
 8021f14:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8021f18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8021f1c:	bf14      	ite	ne
 8021f1e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8021f22:	4623      	moveq	r3, r4
 8021f24:	9304      	str	r3, [sp, #16]
 8021f26:	9307      	str	r3, [sp, #28]
 8021f28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8021f2c:	9002      	str	r0, [sp, #8]
 8021f2e:	9006      	str	r0, [sp, #24]
 8021f30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8021f34:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8021f36:	ab21      	add	r3, sp, #132	@ 0x84
 8021f38:	a902      	add	r1, sp, #8
 8021f3a:	4628      	mov	r0, r5
 8021f3c:	9301      	str	r3, [sp, #4]
 8021f3e:	f000 fb4d 	bl	80225dc <_svfiprintf_r>
 8021f42:	1c43      	adds	r3, r0, #1
 8021f44:	bfbc      	itt	lt
 8021f46:	238b      	movlt	r3, #139	@ 0x8b
 8021f48:	602b      	strlt	r3, [r5, #0]
 8021f4a:	2c00      	cmp	r4, #0
 8021f4c:	d0dd      	beq.n	8021f0a <sniprintf+0x16>
 8021f4e:	9b02      	ldr	r3, [sp, #8]
 8021f50:	2200      	movs	r2, #0
 8021f52:	701a      	strb	r2, [r3, #0]
 8021f54:	e7d9      	b.n	8021f0a <sniprintf+0x16>
 8021f56:	bf00      	nop
 8021f58:	240012bc 	.word	0x240012bc

08021f5c <__sread>:
 8021f5c:	b510      	push	{r4, lr}
 8021f5e:	460c      	mov	r4, r1
 8021f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021f64:	f000 f9ea 	bl	802233c <_read_r>
 8021f68:	2800      	cmp	r0, #0
 8021f6a:	bfab      	itete	ge
 8021f6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8021f6e:	89a3      	ldrhlt	r3, [r4, #12]
 8021f70:	181b      	addge	r3, r3, r0
 8021f72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8021f76:	bfac      	ite	ge
 8021f78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8021f7a:	81a3      	strhlt	r3, [r4, #12]
 8021f7c:	bd10      	pop	{r4, pc}

08021f7e <__swrite>:
 8021f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021f82:	461f      	mov	r7, r3
 8021f84:	898b      	ldrh	r3, [r1, #12]
 8021f86:	05db      	lsls	r3, r3, #23
 8021f88:	4605      	mov	r5, r0
 8021f8a:	460c      	mov	r4, r1
 8021f8c:	4616      	mov	r6, r2
 8021f8e:	d505      	bpl.n	8021f9c <__swrite+0x1e>
 8021f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021f94:	2302      	movs	r3, #2
 8021f96:	2200      	movs	r2, #0
 8021f98:	f000 f9be 	bl	8022318 <_lseek_r>
 8021f9c:	89a3      	ldrh	r3, [r4, #12]
 8021f9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021fa2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8021fa6:	81a3      	strh	r3, [r4, #12]
 8021fa8:	4632      	mov	r2, r6
 8021faa:	463b      	mov	r3, r7
 8021fac:	4628      	mov	r0, r5
 8021fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021fb2:	f000 b9e5 	b.w	8022380 <_write_r>

08021fb6 <__sseek>:
 8021fb6:	b510      	push	{r4, lr}
 8021fb8:	460c      	mov	r4, r1
 8021fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021fbe:	f000 f9ab 	bl	8022318 <_lseek_r>
 8021fc2:	1c43      	adds	r3, r0, #1
 8021fc4:	89a3      	ldrh	r3, [r4, #12]
 8021fc6:	bf15      	itete	ne
 8021fc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8021fca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8021fce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8021fd2:	81a3      	strheq	r3, [r4, #12]
 8021fd4:	bf18      	it	ne
 8021fd6:	81a3      	strhne	r3, [r4, #12]
 8021fd8:	bd10      	pop	{r4, pc}

08021fda <__sclose>:
 8021fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021fde:	f000 b935 	b.w	802224c <_close_r>

08021fe2 <_vsniprintf_r>:
 8021fe2:	b530      	push	{r4, r5, lr}
 8021fe4:	4614      	mov	r4, r2
 8021fe6:	2c00      	cmp	r4, #0
 8021fe8:	b09b      	sub	sp, #108	@ 0x6c
 8021fea:	4605      	mov	r5, r0
 8021fec:	461a      	mov	r2, r3
 8021fee:	da05      	bge.n	8021ffc <_vsniprintf_r+0x1a>
 8021ff0:	238b      	movs	r3, #139	@ 0x8b
 8021ff2:	6003      	str	r3, [r0, #0]
 8021ff4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021ff8:	b01b      	add	sp, #108	@ 0x6c
 8021ffa:	bd30      	pop	{r4, r5, pc}
 8021ffc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8022000:	f8ad 300c 	strh.w	r3, [sp, #12]
 8022004:	bf14      	ite	ne
 8022006:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802200a:	4623      	moveq	r3, r4
 802200c:	9302      	str	r3, [sp, #8]
 802200e:	9305      	str	r3, [sp, #20]
 8022010:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8022014:	9100      	str	r1, [sp, #0]
 8022016:	9104      	str	r1, [sp, #16]
 8022018:	f8ad 300e 	strh.w	r3, [sp, #14]
 802201c:	4669      	mov	r1, sp
 802201e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022020:	f000 fadc 	bl	80225dc <_svfiprintf_r>
 8022024:	1c43      	adds	r3, r0, #1
 8022026:	bfbc      	itt	lt
 8022028:	238b      	movlt	r3, #139	@ 0x8b
 802202a:	602b      	strlt	r3, [r5, #0]
 802202c:	2c00      	cmp	r4, #0
 802202e:	d0e3      	beq.n	8021ff8 <_vsniprintf_r+0x16>
 8022030:	9b00      	ldr	r3, [sp, #0]
 8022032:	2200      	movs	r2, #0
 8022034:	701a      	strb	r2, [r3, #0]
 8022036:	e7df      	b.n	8021ff8 <_vsniprintf_r+0x16>

08022038 <vsniprintf>:
 8022038:	b507      	push	{r0, r1, r2, lr}
 802203a:	9300      	str	r3, [sp, #0]
 802203c:	4613      	mov	r3, r2
 802203e:	460a      	mov	r2, r1
 8022040:	4601      	mov	r1, r0
 8022042:	4803      	ldr	r0, [pc, #12]	@ (8022050 <vsniprintf+0x18>)
 8022044:	6800      	ldr	r0, [r0, #0]
 8022046:	f7ff ffcc 	bl	8021fe2 <_vsniprintf_r>
 802204a:	b003      	add	sp, #12
 802204c:	f85d fb04 	ldr.w	pc, [sp], #4
 8022050:	240012bc 	.word	0x240012bc

08022054 <__swbuf_r>:
 8022054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022056:	460e      	mov	r6, r1
 8022058:	4614      	mov	r4, r2
 802205a:	4605      	mov	r5, r0
 802205c:	b118      	cbz	r0, 8022066 <__swbuf_r+0x12>
 802205e:	6a03      	ldr	r3, [r0, #32]
 8022060:	b90b      	cbnz	r3, 8022066 <__swbuf_r+0x12>
 8022062:	f7ff feb7 	bl	8021dd4 <__sinit>
 8022066:	69a3      	ldr	r3, [r4, #24]
 8022068:	60a3      	str	r3, [r4, #8]
 802206a:	89a3      	ldrh	r3, [r4, #12]
 802206c:	071a      	lsls	r2, r3, #28
 802206e:	d501      	bpl.n	8022074 <__swbuf_r+0x20>
 8022070:	6923      	ldr	r3, [r4, #16]
 8022072:	b943      	cbnz	r3, 8022086 <__swbuf_r+0x32>
 8022074:	4621      	mov	r1, r4
 8022076:	4628      	mov	r0, r5
 8022078:	f000 f82a 	bl	80220d0 <__swsetup_r>
 802207c:	b118      	cbz	r0, 8022086 <__swbuf_r+0x32>
 802207e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8022082:	4638      	mov	r0, r7
 8022084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022086:	6823      	ldr	r3, [r4, #0]
 8022088:	6922      	ldr	r2, [r4, #16]
 802208a:	1a98      	subs	r0, r3, r2
 802208c:	6963      	ldr	r3, [r4, #20]
 802208e:	b2f6      	uxtb	r6, r6
 8022090:	4283      	cmp	r3, r0
 8022092:	4637      	mov	r7, r6
 8022094:	dc05      	bgt.n	80220a2 <__swbuf_r+0x4e>
 8022096:	4621      	mov	r1, r4
 8022098:	4628      	mov	r0, r5
 802209a:	f000 fdad 	bl	8022bf8 <_fflush_r>
 802209e:	2800      	cmp	r0, #0
 80220a0:	d1ed      	bne.n	802207e <__swbuf_r+0x2a>
 80220a2:	68a3      	ldr	r3, [r4, #8]
 80220a4:	3b01      	subs	r3, #1
 80220a6:	60a3      	str	r3, [r4, #8]
 80220a8:	6823      	ldr	r3, [r4, #0]
 80220aa:	1c5a      	adds	r2, r3, #1
 80220ac:	6022      	str	r2, [r4, #0]
 80220ae:	701e      	strb	r6, [r3, #0]
 80220b0:	6962      	ldr	r2, [r4, #20]
 80220b2:	1c43      	adds	r3, r0, #1
 80220b4:	429a      	cmp	r2, r3
 80220b6:	d004      	beq.n	80220c2 <__swbuf_r+0x6e>
 80220b8:	89a3      	ldrh	r3, [r4, #12]
 80220ba:	07db      	lsls	r3, r3, #31
 80220bc:	d5e1      	bpl.n	8022082 <__swbuf_r+0x2e>
 80220be:	2e0a      	cmp	r6, #10
 80220c0:	d1df      	bne.n	8022082 <__swbuf_r+0x2e>
 80220c2:	4621      	mov	r1, r4
 80220c4:	4628      	mov	r0, r5
 80220c6:	f000 fd97 	bl	8022bf8 <_fflush_r>
 80220ca:	2800      	cmp	r0, #0
 80220cc:	d0d9      	beq.n	8022082 <__swbuf_r+0x2e>
 80220ce:	e7d6      	b.n	802207e <__swbuf_r+0x2a>

080220d0 <__swsetup_r>:
 80220d0:	b538      	push	{r3, r4, r5, lr}
 80220d2:	4b29      	ldr	r3, [pc, #164]	@ (8022178 <__swsetup_r+0xa8>)
 80220d4:	4605      	mov	r5, r0
 80220d6:	6818      	ldr	r0, [r3, #0]
 80220d8:	460c      	mov	r4, r1
 80220da:	b118      	cbz	r0, 80220e4 <__swsetup_r+0x14>
 80220dc:	6a03      	ldr	r3, [r0, #32]
 80220de:	b90b      	cbnz	r3, 80220e4 <__swsetup_r+0x14>
 80220e0:	f7ff fe78 	bl	8021dd4 <__sinit>
 80220e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80220e8:	0719      	lsls	r1, r3, #28
 80220ea:	d422      	bmi.n	8022132 <__swsetup_r+0x62>
 80220ec:	06da      	lsls	r2, r3, #27
 80220ee:	d407      	bmi.n	8022100 <__swsetup_r+0x30>
 80220f0:	2209      	movs	r2, #9
 80220f2:	602a      	str	r2, [r5, #0]
 80220f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80220f8:	81a3      	strh	r3, [r4, #12]
 80220fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80220fe:	e033      	b.n	8022168 <__swsetup_r+0x98>
 8022100:	0758      	lsls	r0, r3, #29
 8022102:	d512      	bpl.n	802212a <__swsetup_r+0x5a>
 8022104:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022106:	b141      	cbz	r1, 802211a <__swsetup_r+0x4a>
 8022108:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802210c:	4299      	cmp	r1, r3
 802210e:	d002      	beq.n	8022116 <__swsetup_r+0x46>
 8022110:	4628      	mov	r0, r5
 8022112:	f000 f9b5 	bl	8022480 <_free_r>
 8022116:	2300      	movs	r3, #0
 8022118:	6363      	str	r3, [r4, #52]	@ 0x34
 802211a:	89a3      	ldrh	r3, [r4, #12]
 802211c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8022120:	81a3      	strh	r3, [r4, #12]
 8022122:	2300      	movs	r3, #0
 8022124:	6063      	str	r3, [r4, #4]
 8022126:	6923      	ldr	r3, [r4, #16]
 8022128:	6023      	str	r3, [r4, #0]
 802212a:	89a3      	ldrh	r3, [r4, #12]
 802212c:	f043 0308 	orr.w	r3, r3, #8
 8022130:	81a3      	strh	r3, [r4, #12]
 8022132:	6923      	ldr	r3, [r4, #16]
 8022134:	b94b      	cbnz	r3, 802214a <__swsetup_r+0x7a>
 8022136:	89a3      	ldrh	r3, [r4, #12]
 8022138:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802213c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8022140:	d003      	beq.n	802214a <__swsetup_r+0x7a>
 8022142:	4621      	mov	r1, r4
 8022144:	4628      	mov	r0, r5
 8022146:	f000 fdb7 	bl	8022cb8 <__smakebuf_r>
 802214a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802214e:	f013 0201 	ands.w	r2, r3, #1
 8022152:	d00a      	beq.n	802216a <__swsetup_r+0x9a>
 8022154:	2200      	movs	r2, #0
 8022156:	60a2      	str	r2, [r4, #8]
 8022158:	6962      	ldr	r2, [r4, #20]
 802215a:	4252      	negs	r2, r2
 802215c:	61a2      	str	r2, [r4, #24]
 802215e:	6922      	ldr	r2, [r4, #16]
 8022160:	b942      	cbnz	r2, 8022174 <__swsetup_r+0xa4>
 8022162:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8022166:	d1c5      	bne.n	80220f4 <__swsetup_r+0x24>
 8022168:	bd38      	pop	{r3, r4, r5, pc}
 802216a:	0799      	lsls	r1, r3, #30
 802216c:	bf58      	it	pl
 802216e:	6962      	ldrpl	r2, [r4, #20]
 8022170:	60a2      	str	r2, [r4, #8]
 8022172:	e7f4      	b.n	802215e <__swsetup_r+0x8e>
 8022174:	2000      	movs	r0, #0
 8022176:	e7f7      	b.n	8022168 <__swsetup_r+0x98>
 8022178:	240012bc 	.word	0x240012bc

0802217c <memcmp>:
 802217c:	b510      	push	{r4, lr}
 802217e:	3901      	subs	r1, #1
 8022180:	4402      	add	r2, r0
 8022182:	4290      	cmp	r0, r2
 8022184:	d101      	bne.n	802218a <memcmp+0xe>
 8022186:	2000      	movs	r0, #0
 8022188:	e005      	b.n	8022196 <memcmp+0x1a>
 802218a:	7803      	ldrb	r3, [r0, #0]
 802218c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022190:	42a3      	cmp	r3, r4
 8022192:	d001      	beq.n	8022198 <memcmp+0x1c>
 8022194:	1b18      	subs	r0, r3, r4
 8022196:	bd10      	pop	{r4, pc}
 8022198:	3001      	adds	r0, #1
 802219a:	e7f2      	b.n	8022182 <memcmp+0x6>

0802219c <memmove>:
 802219c:	4288      	cmp	r0, r1
 802219e:	b510      	push	{r4, lr}
 80221a0:	eb01 0402 	add.w	r4, r1, r2
 80221a4:	d902      	bls.n	80221ac <memmove+0x10>
 80221a6:	4284      	cmp	r4, r0
 80221a8:	4623      	mov	r3, r4
 80221aa:	d807      	bhi.n	80221bc <memmove+0x20>
 80221ac:	1e43      	subs	r3, r0, #1
 80221ae:	42a1      	cmp	r1, r4
 80221b0:	d008      	beq.n	80221c4 <memmove+0x28>
 80221b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80221b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80221ba:	e7f8      	b.n	80221ae <memmove+0x12>
 80221bc:	4402      	add	r2, r0
 80221be:	4601      	mov	r1, r0
 80221c0:	428a      	cmp	r2, r1
 80221c2:	d100      	bne.n	80221c6 <memmove+0x2a>
 80221c4:	bd10      	pop	{r4, pc}
 80221c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80221ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80221ce:	e7f7      	b.n	80221c0 <memmove+0x24>

080221d0 <memset>:
 80221d0:	4402      	add	r2, r0
 80221d2:	4603      	mov	r3, r0
 80221d4:	4293      	cmp	r3, r2
 80221d6:	d100      	bne.n	80221da <memset+0xa>
 80221d8:	4770      	bx	lr
 80221da:	f803 1b01 	strb.w	r1, [r3], #1
 80221de:	e7f9      	b.n	80221d4 <memset+0x4>

080221e0 <strchr>:
 80221e0:	b2c9      	uxtb	r1, r1
 80221e2:	4603      	mov	r3, r0
 80221e4:	4618      	mov	r0, r3
 80221e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80221ea:	b112      	cbz	r2, 80221f2 <strchr+0x12>
 80221ec:	428a      	cmp	r2, r1
 80221ee:	d1f9      	bne.n	80221e4 <strchr+0x4>
 80221f0:	4770      	bx	lr
 80221f2:	2900      	cmp	r1, #0
 80221f4:	bf18      	it	ne
 80221f6:	2000      	movne	r0, #0
 80221f8:	4770      	bx	lr

080221fa <strncmp>:
 80221fa:	b510      	push	{r4, lr}
 80221fc:	b16a      	cbz	r2, 802221a <strncmp+0x20>
 80221fe:	3901      	subs	r1, #1
 8022200:	1884      	adds	r4, r0, r2
 8022202:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022206:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802220a:	429a      	cmp	r2, r3
 802220c:	d103      	bne.n	8022216 <strncmp+0x1c>
 802220e:	42a0      	cmp	r0, r4
 8022210:	d001      	beq.n	8022216 <strncmp+0x1c>
 8022212:	2a00      	cmp	r2, #0
 8022214:	d1f5      	bne.n	8022202 <strncmp+0x8>
 8022216:	1ad0      	subs	r0, r2, r3
 8022218:	bd10      	pop	{r4, pc}
 802221a:	4610      	mov	r0, r2
 802221c:	e7fc      	b.n	8022218 <strncmp+0x1e>

0802221e <strstr>:
 802221e:	780a      	ldrb	r2, [r1, #0]
 8022220:	b570      	push	{r4, r5, r6, lr}
 8022222:	b96a      	cbnz	r2, 8022240 <strstr+0x22>
 8022224:	bd70      	pop	{r4, r5, r6, pc}
 8022226:	429a      	cmp	r2, r3
 8022228:	d109      	bne.n	802223e <strstr+0x20>
 802222a:	460c      	mov	r4, r1
 802222c:	4605      	mov	r5, r0
 802222e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8022232:	2b00      	cmp	r3, #0
 8022234:	d0f6      	beq.n	8022224 <strstr+0x6>
 8022236:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802223a:	429e      	cmp	r6, r3
 802223c:	d0f7      	beq.n	802222e <strstr+0x10>
 802223e:	3001      	adds	r0, #1
 8022240:	7803      	ldrb	r3, [r0, #0]
 8022242:	2b00      	cmp	r3, #0
 8022244:	d1ef      	bne.n	8022226 <strstr+0x8>
 8022246:	4618      	mov	r0, r3
 8022248:	e7ec      	b.n	8022224 <strstr+0x6>
	...

0802224c <_close_r>:
 802224c:	b538      	push	{r3, r4, r5, lr}
 802224e:	4d06      	ldr	r5, [pc, #24]	@ (8022268 <_close_r+0x1c>)
 8022250:	2300      	movs	r3, #0
 8022252:	4604      	mov	r4, r0
 8022254:	4608      	mov	r0, r1
 8022256:	602b      	str	r3, [r5, #0]
 8022258:	f7e0 f9ea 	bl	8002630 <_close>
 802225c:	1c43      	adds	r3, r0, #1
 802225e:	d102      	bne.n	8022266 <_close_r+0x1a>
 8022260:	682b      	ldr	r3, [r5, #0]
 8022262:	b103      	cbz	r3, 8022266 <_close_r+0x1a>
 8022264:	6023      	str	r3, [r4, #0]
 8022266:	bd38      	pop	{r3, r4, r5, pc}
 8022268:	240696e8 	.word	0x240696e8

0802226c <_reclaim_reent>:
 802226c:	4b29      	ldr	r3, [pc, #164]	@ (8022314 <_reclaim_reent+0xa8>)
 802226e:	681b      	ldr	r3, [r3, #0]
 8022270:	4283      	cmp	r3, r0
 8022272:	b570      	push	{r4, r5, r6, lr}
 8022274:	4604      	mov	r4, r0
 8022276:	d04b      	beq.n	8022310 <_reclaim_reent+0xa4>
 8022278:	69c3      	ldr	r3, [r0, #28]
 802227a:	b1ab      	cbz	r3, 80222a8 <_reclaim_reent+0x3c>
 802227c:	68db      	ldr	r3, [r3, #12]
 802227e:	b16b      	cbz	r3, 802229c <_reclaim_reent+0x30>
 8022280:	2500      	movs	r5, #0
 8022282:	69e3      	ldr	r3, [r4, #28]
 8022284:	68db      	ldr	r3, [r3, #12]
 8022286:	5959      	ldr	r1, [r3, r5]
 8022288:	2900      	cmp	r1, #0
 802228a:	d13b      	bne.n	8022304 <_reclaim_reent+0x98>
 802228c:	3504      	adds	r5, #4
 802228e:	2d80      	cmp	r5, #128	@ 0x80
 8022290:	d1f7      	bne.n	8022282 <_reclaim_reent+0x16>
 8022292:	69e3      	ldr	r3, [r4, #28]
 8022294:	4620      	mov	r0, r4
 8022296:	68d9      	ldr	r1, [r3, #12]
 8022298:	f000 f8f2 	bl	8022480 <_free_r>
 802229c:	69e3      	ldr	r3, [r4, #28]
 802229e:	6819      	ldr	r1, [r3, #0]
 80222a0:	b111      	cbz	r1, 80222a8 <_reclaim_reent+0x3c>
 80222a2:	4620      	mov	r0, r4
 80222a4:	f000 f8ec 	bl	8022480 <_free_r>
 80222a8:	6961      	ldr	r1, [r4, #20]
 80222aa:	b111      	cbz	r1, 80222b2 <_reclaim_reent+0x46>
 80222ac:	4620      	mov	r0, r4
 80222ae:	f000 f8e7 	bl	8022480 <_free_r>
 80222b2:	69e1      	ldr	r1, [r4, #28]
 80222b4:	b111      	cbz	r1, 80222bc <_reclaim_reent+0x50>
 80222b6:	4620      	mov	r0, r4
 80222b8:	f000 f8e2 	bl	8022480 <_free_r>
 80222bc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80222be:	b111      	cbz	r1, 80222c6 <_reclaim_reent+0x5a>
 80222c0:	4620      	mov	r0, r4
 80222c2:	f000 f8dd 	bl	8022480 <_free_r>
 80222c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80222c8:	b111      	cbz	r1, 80222d0 <_reclaim_reent+0x64>
 80222ca:	4620      	mov	r0, r4
 80222cc:	f000 f8d8 	bl	8022480 <_free_r>
 80222d0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80222d2:	b111      	cbz	r1, 80222da <_reclaim_reent+0x6e>
 80222d4:	4620      	mov	r0, r4
 80222d6:	f000 f8d3 	bl	8022480 <_free_r>
 80222da:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80222dc:	b111      	cbz	r1, 80222e4 <_reclaim_reent+0x78>
 80222de:	4620      	mov	r0, r4
 80222e0:	f000 f8ce 	bl	8022480 <_free_r>
 80222e4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80222e6:	b111      	cbz	r1, 80222ee <_reclaim_reent+0x82>
 80222e8:	4620      	mov	r0, r4
 80222ea:	f000 f8c9 	bl	8022480 <_free_r>
 80222ee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80222f0:	b111      	cbz	r1, 80222f8 <_reclaim_reent+0x8c>
 80222f2:	4620      	mov	r0, r4
 80222f4:	f000 f8c4 	bl	8022480 <_free_r>
 80222f8:	6a23      	ldr	r3, [r4, #32]
 80222fa:	b14b      	cbz	r3, 8022310 <_reclaim_reent+0xa4>
 80222fc:	4620      	mov	r0, r4
 80222fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022302:	4718      	bx	r3
 8022304:	680e      	ldr	r6, [r1, #0]
 8022306:	4620      	mov	r0, r4
 8022308:	f000 f8ba 	bl	8022480 <_free_r>
 802230c:	4631      	mov	r1, r6
 802230e:	e7bb      	b.n	8022288 <_reclaim_reent+0x1c>
 8022310:	bd70      	pop	{r4, r5, r6, pc}
 8022312:	bf00      	nop
 8022314:	240012bc 	.word	0x240012bc

08022318 <_lseek_r>:
 8022318:	b538      	push	{r3, r4, r5, lr}
 802231a:	4d07      	ldr	r5, [pc, #28]	@ (8022338 <_lseek_r+0x20>)
 802231c:	4604      	mov	r4, r0
 802231e:	4608      	mov	r0, r1
 8022320:	4611      	mov	r1, r2
 8022322:	2200      	movs	r2, #0
 8022324:	602a      	str	r2, [r5, #0]
 8022326:	461a      	mov	r2, r3
 8022328:	f7e0 f9a9 	bl	800267e <_lseek>
 802232c:	1c43      	adds	r3, r0, #1
 802232e:	d102      	bne.n	8022336 <_lseek_r+0x1e>
 8022330:	682b      	ldr	r3, [r5, #0]
 8022332:	b103      	cbz	r3, 8022336 <_lseek_r+0x1e>
 8022334:	6023      	str	r3, [r4, #0]
 8022336:	bd38      	pop	{r3, r4, r5, pc}
 8022338:	240696e8 	.word	0x240696e8

0802233c <_read_r>:
 802233c:	b538      	push	{r3, r4, r5, lr}
 802233e:	4d07      	ldr	r5, [pc, #28]	@ (802235c <_read_r+0x20>)
 8022340:	4604      	mov	r4, r0
 8022342:	4608      	mov	r0, r1
 8022344:	4611      	mov	r1, r2
 8022346:	2200      	movs	r2, #0
 8022348:	602a      	str	r2, [r5, #0]
 802234a:	461a      	mov	r2, r3
 802234c:	f7e0 f937 	bl	80025be <_read>
 8022350:	1c43      	adds	r3, r0, #1
 8022352:	d102      	bne.n	802235a <_read_r+0x1e>
 8022354:	682b      	ldr	r3, [r5, #0]
 8022356:	b103      	cbz	r3, 802235a <_read_r+0x1e>
 8022358:	6023      	str	r3, [r4, #0]
 802235a:	bd38      	pop	{r3, r4, r5, pc}
 802235c:	240696e8 	.word	0x240696e8

08022360 <_sbrk_r>:
 8022360:	b538      	push	{r3, r4, r5, lr}
 8022362:	4d06      	ldr	r5, [pc, #24]	@ (802237c <_sbrk_r+0x1c>)
 8022364:	2300      	movs	r3, #0
 8022366:	4604      	mov	r4, r0
 8022368:	4608      	mov	r0, r1
 802236a:	602b      	str	r3, [r5, #0]
 802236c:	f7e0 f994 	bl	8002698 <_sbrk>
 8022370:	1c43      	adds	r3, r0, #1
 8022372:	d102      	bne.n	802237a <_sbrk_r+0x1a>
 8022374:	682b      	ldr	r3, [r5, #0]
 8022376:	b103      	cbz	r3, 802237a <_sbrk_r+0x1a>
 8022378:	6023      	str	r3, [r4, #0]
 802237a:	bd38      	pop	{r3, r4, r5, pc}
 802237c:	240696e8 	.word	0x240696e8

08022380 <_write_r>:
 8022380:	b538      	push	{r3, r4, r5, lr}
 8022382:	4d07      	ldr	r5, [pc, #28]	@ (80223a0 <_write_r+0x20>)
 8022384:	4604      	mov	r4, r0
 8022386:	4608      	mov	r0, r1
 8022388:	4611      	mov	r1, r2
 802238a:	2200      	movs	r2, #0
 802238c:	602a      	str	r2, [r5, #0]
 802238e:	461a      	mov	r2, r3
 8022390:	f7e0 f932 	bl	80025f8 <_write>
 8022394:	1c43      	adds	r3, r0, #1
 8022396:	d102      	bne.n	802239e <_write_r+0x1e>
 8022398:	682b      	ldr	r3, [r5, #0]
 802239a:	b103      	cbz	r3, 802239e <_write_r+0x1e>
 802239c:	6023      	str	r3, [r4, #0]
 802239e:	bd38      	pop	{r3, r4, r5, pc}
 80223a0:	240696e8 	.word	0x240696e8

080223a4 <__errno>:
 80223a4:	4b01      	ldr	r3, [pc, #4]	@ (80223ac <__errno+0x8>)
 80223a6:	6818      	ldr	r0, [r3, #0]
 80223a8:	4770      	bx	lr
 80223aa:	bf00      	nop
 80223ac:	240012bc 	.word	0x240012bc

080223b0 <__libc_init_array>:
 80223b0:	b570      	push	{r4, r5, r6, lr}
 80223b2:	4d0d      	ldr	r5, [pc, #52]	@ (80223e8 <__libc_init_array+0x38>)
 80223b4:	4c0d      	ldr	r4, [pc, #52]	@ (80223ec <__libc_init_array+0x3c>)
 80223b6:	1b64      	subs	r4, r4, r5
 80223b8:	10a4      	asrs	r4, r4, #2
 80223ba:	2600      	movs	r6, #0
 80223bc:	42a6      	cmp	r6, r4
 80223be:	d109      	bne.n	80223d4 <__libc_init_array+0x24>
 80223c0:	4d0b      	ldr	r5, [pc, #44]	@ (80223f0 <__libc_init_array+0x40>)
 80223c2:	4c0c      	ldr	r4, [pc, #48]	@ (80223f4 <__libc_init_array+0x44>)
 80223c4:	f000 fe62 	bl	802308c <_init>
 80223c8:	1b64      	subs	r4, r4, r5
 80223ca:	10a4      	asrs	r4, r4, #2
 80223cc:	2600      	movs	r6, #0
 80223ce:	42a6      	cmp	r6, r4
 80223d0:	d105      	bne.n	80223de <__libc_init_array+0x2e>
 80223d2:	bd70      	pop	{r4, r5, r6, pc}
 80223d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80223d8:	4798      	blx	r3
 80223da:	3601      	adds	r6, #1
 80223dc:	e7ee      	b.n	80223bc <__libc_init_array+0xc>
 80223de:	f855 3b04 	ldr.w	r3, [r5], #4
 80223e2:	4798      	blx	r3
 80223e4:	3601      	adds	r6, #1
 80223e6:	e7f2      	b.n	80223ce <__libc_init_array+0x1e>
 80223e8:	08025c14 	.word	0x08025c14
 80223ec:	08025c14 	.word	0x08025c14
 80223f0:	08025c14 	.word	0x08025c14
 80223f4:	08025c58 	.word	0x08025c58

080223f8 <__retarget_lock_init_recursive>:
 80223f8:	4770      	bx	lr

080223fa <__retarget_lock_acquire_recursive>:
 80223fa:	4770      	bx	lr

080223fc <__retarget_lock_release_recursive>:
 80223fc:	4770      	bx	lr

080223fe <strcpy>:
 80223fe:	4603      	mov	r3, r0
 8022400:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022404:	f803 2b01 	strb.w	r2, [r3], #1
 8022408:	2a00      	cmp	r2, #0
 802240a:	d1f9      	bne.n	8022400 <strcpy+0x2>
 802240c:	4770      	bx	lr

0802240e <memcpy>:
 802240e:	440a      	add	r2, r1
 8022410:	4291      	cmp	r1, r2
 8022412:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8022416:	d100      	bne.n	802241a <memcpy+0xc>
 8022418:	4770      	bx	lr
 802241a:	b510      	push	{r4, lr}
 802241c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022420:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022424:	4291      	cmp	r1, r2
 8022426:	d1f9      	bne.n	802241c <memcpy+0xe>
 8022428:	bd10      	pop	{r4, pc}
	...

0802242c <__assert_func>:
 802242c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802242e:	4614      	mov	r4, r2
 8022430:	461a      	mov	r2, r3
 8022432:	4b09      	ldr	r3, [pc, #36]	@ (8022458 <__assert_func+0x2c>)
 8022434:	681b      	ldr	r3, [r3, #0]
 8022436:	4605      	mov	r5, r0
 8022438:	68d8      	ldr	r0, [r3, #12]
 802243a:	b954      	cbnz	r4, 8022452 <__assert_func+0x26>
 802243c:	4b07      	ldr	r3, [pc, #28]	@ (802245c <__assert_func+0x30>)
 802243e:	461c      	mov	r4, r3
 8022440:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022444:	9100      	str	r1, [sp, #0]
 8022446:	462b      	mov	r3, r5
 8022448:	4905      	ldr	r1, [pc, #20]	@ (8022460 <__assert_func+0x34>)
 802244a:	f000 fbfd 	bl	8022c48 <fiprintf>
 802244e:	f000 fc91 	bl	8022d74 <abort>
 8022452:	4b04      	ldr	r3, [pc, #16]	@ (8022464 <__assert_func+0x38>)
 8022454:	e7f4      	b.n	8022440 <__assert_func+0x14>
 8022456:	bf00      	nop
 8022458:	240012bc 	.word	0x240012bc
 802245c:	08025bd5 	.word	0x08025bd5
 8022460:	08025ba7 	.word	0x08025ba7
 8022464:	08025b9a 	.word	0x08025b9a

08022468 <__env_lock>:
 8022468:	4801      	ldr	r0, [pc, #4]	@ (8022470 <__env_lock+0x8>)
 802246a:	f7ff bfc6 	b.w	80223fa <__retarget_lock_acquire_recursive>
 802246e:	bf00      	nop
 8022470:	240696ec 	.word	0x240696ec

08022474 <__env_unlock>:
 8022474:	4801      	ldr	r0, [pc, #4]	@ (802247c <__env_unlock+0x8>)
 8022476:	f7ff bfc1 	b.w	80223fc <__retarget_lock_release_recursive>
 802247a:	bf00      	nop
 802247c:	240696ec 	.word	0x240696ec

08022480 <_free_r>:
 8022480:	b538      	push	{r3, r4, r5, lr}
 8022482:	4605      	mov	r5, r0
 8022484:	2900      	cmp	r1, #0
 8022486:	d041      	beq.n	802250c <_free_r+0x8c>
 8022488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802248c:	1f0c      	subs	r4, r1, #4
 802248e:	2b00      	cmp	r3, #0
 8022490:	bfb8      	it	lt
 8022492:	18e4      	addlt	r4, r4, r3
 8022494:	f7ff faec 	bl	8021a70 <__malloc_lock>
 8022498:	4a1d      	ldr	r2, [pc, #116]	@ (8022510 <_free_r+0x90>)
 802249a:	6813      	ldr	r3, [r2, #0]
 802249c:	b933      	cbnz	r3, 80224ac <_free_r+0x2c>
 802249e:	6063      	str	r3, [r4, #4]
 80224a0:	6014      	str	r4, [r2, #0]
 80224a2:	4628      	mov	r0, r5
 80224a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80224a8:	f7ff bae8 	b.w	8021a7c <__malloc_unlock>
 80224ac:	42a3      	cmp	r3, r4
 80224ae:	d908      	bls.n	80224c2 <_free_r+0x42>
 80224b0:	6820      	ldr	r0, [r4, #0]
 80224b2:	1821      	adds	r1, r4, r0
 80224b4:	428b      	cmp	r3, r1
 80224b6:	bf01      	itttt	eq
 80224b8:	6819      	ldreq	r1, [r3, #0]
 80224ba:	685b      	ldreq	r3, [r3, #4]
 80224bc:	1809      	addeq	r1, r1, r0
 80224be:	6021      	streq	r1, [r4, #0]
 80224c0:	e7ed      	b.n	802249e <_free_r+0x1e>
 80224c2:	461a      	mov	r2, r3
 80224c4:	685b      	ldr	r3, [r3, #4]
 80224c6:	b10b      	cbz	r3, 80224cc <_free_r+0x4c>
 80224c8:	42a3      	cmp	r3, r4
 80224ca:	d9fa      	bls.n	80224c2 <_free_r+0x42>
 80224cc:	6811      	ldr	r1, [r2, #0]
 80224ce:	1850      	adds	r0, r2, r1
 80224d0:	42a0      	cmp	r0, r4
 80224d2:	d10b      	bne.n	80224ec <_free_r+0x6c>
 80224d4:	6820      	ldr	r0, [r4, #0]
 80224d6:	4401      	add	r1, r0
 80224d8:	1850      	adds	r0, r2, r1
 80224da:	4283      	cmp	r3, r0
 80224dc:	6011      	str	r1, [r2, #0]
 80224de:	d1e0      	bne.n	80224a2 <_free_r+0x22>
 80224e0:	6818      	ldr	r0, [r3, #0]
 80224e2:	685b      	ldr	r3, [r3, #4]
 80224e4:	6053      	str	r3, [r2, #4]
 80224e6:	4408      	add	r0, r1
 80224e8:	6010      	str	r0, [r2, #0]
 80224ea:	e7da      	b.n	80224a2 <_free_r+0x22>
 80224ec:	d902      	bls.n	80224f4 <_free_r+0x74>
 80224ee:	230c      	movs	r3, #12
 80224f0:	602b      	str	r3, [r5, #0]
 80224f2:	e7d6      	b.n	80224a2 <_free_r+0x22>
 80224f4:	6820      	ldr	r0, [r4, #0]
 80224f6:	1821      	adds	r1, r4, r0
 80224f8:	428b      	cmp	r3, r1
 80224fa:	bf04      	itt	eq
 80224fc:	6819      	ldreq	r1, [r3, #0]
 80224fe:	685b      	ldreq	r3, [r3, #4]
 8022500:	6063      	str	r3, [r4, #4]
 8022502:	bf04      	itt	eq
 8022504:	1809      	addeq	r1, r1, r0
 8022506:	6021      	streq	r1, [r4, #0]
 8022508:	6054      	str	r4, [r2, #4]
 802250a:	e7ca      	b.n	80224a2 <_free_r+0x22>
 802250c:	bd38      	pop	{r3, r4, r5, pc}
 802250e:	bf00      	nop
 8022510:	240695a8 	.word	0x240695a8

08022514 <_malloc_usable_size_r>:
 8022514:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022518:	1f18      	subs	r0, r3, #4
 802251a:	2b00      	cmp	r3, #0
 802251c:	bfbc      	itt	lt
 802251e:	580b      	ldrlt	r3, [r1, r0]
 8022520:	18c0      	addlt	r0, r0, r3
 8022522:	4770      	bx	lr

08022524 <__ssputs_r>:
 8022524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022528:	688e      	ldr	r6, [r1, #8]
 802252a:	461f      	mov	r7, r3
 802252c:	42be      	cmp	r6, r7
 802252e:	680b      	ldr	r3, [r1, #0]
 8022530:	4682      	mov	sl, r0
 8022532:	460c      	mov	r4, r1
 8022534:	4690      	mov	r8, r2
 8022536:	d82d      	bhi.n	8022594 <__ssputs_r+0x70>
 8022538:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802253c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8022540:	d026      	beq.n	8022590 <__ssputs_r+0x6c>
 8022542:	6965      	ldr	r5, [r4, #20]
 8022544:	6909      	ldr	r1, [r1, #16]
 8022546:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802254a:	eba3 0901 	sub.w	r9, r3, r1
 802254e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022552:	1c7b      	adds	r3, r7, #1
 8022554:	444b      	add	r3, r9
 8022556:	106d      	asrs	r5, r5, #1
 8022558:	429d      	cmp	r5, r3
 802255a:	bf38      	it	cc
 802255c:	461d      	movcc	r5, r3
 802255e:	0553      	lsls	r3, r2, #21
 8022560:	d527      	bpl.n	80225b2 <__ssputs_r+0x8e>
 8022562:	4629      	mov	r1, r5
 8022564:	f7ff fa04 	bl	8021970 <_malloc_r>
 8022568:	4606      	mov	r6, r0
 802256a:	b360      	cbz	r0, 80225c6 <__ssputs_r+0xa2>
 802256c:	6921      	ldr	r1, [r4, #16]
 802256e:	464a      	mov	r2, r9
 8022570:	f7ff ff4d 	bl	802240e <memcpy>
 8022574:	89a3      	ldrh	r3, [r4, #12]
 8022576:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802257a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802257e:	81a3      	strh	r3, [r4, #12]
 8022580:	6126      	str	r6, [r4, #16]
 8022582:	6165      	str	r5, [r4, #20]
 8022584:	444e      	add	r6, r9
 8022586:	eba5 0509 	sub.w	r5, r5, r9
 802258a:	6026      	str	r6, [r4, #0]
 802258c:	60a5      	str	r5, [r4, #8]
 802258e:	463e      	mov	r6, r7
 8022590:	42be      	cmp	r6, r7
 8022592:	d900      	bls.n	8022596 <__ssputs_r+0x72>
 8022594:	463e      	mov	r6, r7
 8022596:	6820      	ldr	r0, [r4, #0]
 8022598:	4632      	mov	r2, r6
 802259a:	4641      	mov	r1, r8
 802259c:	f7ff fdfe 	bl	802219c <memmove>
 80225a0:	68a3      	ldr	r3, [r4, #8]
 80225a2:	1b9b      	subs	r3, r3, r6
 80225a4:	60a3      	str	r3, [r4, #8]
 80225a6:	6823      	ldr	r3, [r4, #0]
 80225a8:	4433      	add	r3, r6
 80225aa:	6023      	str	r3, [r4, #0]
 80225ac:	2000      	movs	r0, #0
 80225ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80225b2:	462a      	mov	r2, r5
 80225b4:	f7ff fadc 	bl	8021b70 <_realloc_r>
 80225b8:	4606      	mov	r6, r0
 80225ba:	2800      	cmp	r0, #0
 80225bc:	d1e0      	bne.n	8022580 <__ssputs_r+0x5c>
 80225be:	6921      	ldr	r1, [r4, #16]
 80225c0:	4650      	mov	r0, sl
 80225c2:	f7ff ff5d 	bl	8022480 <_free_r>
 80225c6:	230c      	movs	r3, #12
 80225c8:	f8ca 3000 	str.w	r3, [sl]
 80225cc:	89a3      	ldrh	r3, [r4, #12]
 80225ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80225d2:	81a3      	strh	r3, [r4, #12]
 80225d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80225d8:	e7e9      	b.n	80225ae <__ssputs_r+0x8a>
	...

080225dc <_svfiprintf_r>:
 80225dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225e0:	4698      	mov	r8, r3
 80225e2:	898b      	ldrh	r3, [r1, #12]
 80225e4:	061b      	lsls	r3, r3, #24
 80225e6:	b09d      	sub	sp, #116	@ 0x74
 80225e8:	4607      	mov	r7, r0
 80225ea:	460d      	mov	r5, r1
 80225ec:	4614      	mov	r4, r2
 80225ee:	d510      	bpl.n	8022612 <_svfiprintf_r+0x36>
 80225f0:	690b      	ldr	r3, [r1, #16]
 80225f2:	b973      	cbnz	r3, 8022612 <_svfiprintf_r+0x36>
 80225f4:	2140      	movs	r1, #64	@ 0x40
 80225f6:	f7ff f9bb 	bl	8021970 <_malloc_r>
 80225fa:	6028      	str	r0, [r5, #0]
 80225fc:	6128      	str	r0, [r5, #16]
 80225fe:	b930      	cbnz	r0, 802260e <_svfiprintf_r+0x32>
 8022600:	230c      	movs	r3, #12
 8022602:	603b      	str	r3, [r7, #0]
 8022604:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022608:	b01d      	add	sp, #116	@ 0x74
 802260a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802260e:	2340      	movs	r3, #64	@ 0x40
 8022610:	616b      	str	r3, [r5, #20]
 8022612:	2300      	movs	r3, #0
 8022614:	9309      	str	r3, [sp, #36]	@ 0x24
 8022616:	2320      	movs	r3, #32
 8022618:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802261c:	f8cd 800c 	str.w	r8, [sp, #12]
 8022620:	2330      	movs	r3, #48	@ 0x30
 8022622:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80227c0 <_svfiprintf_r+0x1e4>
 8022626:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802262a:	f04f 0901 	mov.w	r9, #1
 802262e:	4623      	mov	r3, r4
 8022630:	469a      	mov	sl, r3
 8022632:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022636:	b10a      	cbz	r2, 802263c <_svfiprintf_r+0x60>
 8022638:	2a25      	cmp	r2, #37	@ 0x25
 802263a:	d1f9      	bne.n	8022630 <_svfiprintf_r+0x54>
 802263c:	ebba 0b04 	subs.w	fp, sl, r4
 8022640:	d00b      	beq.n	802265a <_svfiprintf_r+0x7e>
 8022642:	465b      	mov	r3, fp
 8022644:	4622      	mov	r2, r4
 8022646:	4629      	mov	r1, r5
 8022648:	4638      	mov	r0, r7
 802264a:	f7ff ff6b 	bl	8022524 <__ssputs_r>
 802264e:	3001      	adds	r0, #1
 8022650:	f000 80a7 	beq.w	80227a2 <_svfiprintf_r+0x1c6>
 8022654:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022656:	445a      	add	r2, fp
 8022658:	9209      	str	r2, [sp, #36]	@ 0x24
 802265a:	f89a 3000 	ldrb.w	r3, [sl]
 802265e:	2b00      	cmp	r3, #0
 8022660:	f000 809f 	beq.w	80227a2 <_svfiprintf_r+0x1c6>
 8022664:	2300      	movs	r3, #0
 8022666:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802266a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802266e:	f10a 0a01 	add.w	sl, sl, #1
 8022672:	9304      	str	r3, [sp, #16]
 8022674:	9307      	str	r3, [sp, #28]
 8022676:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802267a:	931a      	str	r3, [sp, #104]	@ 0x68
 802267c:	4654      	mov	r4, sl
 802267e:	2205      	movs	r2, #5
 8022680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022684:	484e      	ldr	r0, [pc, #312]	@ (80227c0 <_svfiprintf_r+0x1e4>)
 8022686:	f7dd fe43 	bl	8000310 <memchr>
 802268a:	9a04      	ldr	r2, [sp, #16]
 802268c:	b9d8      	cbnz	r0, 80226c6 <_svfiprintf_r+0xea>
 802268e:	06d0      	lsls	r0, r2, #27
 8022690:	bf44      	itt	mi
 8022692:	2320      	movmi	r3, #32
 8022694:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022698:	0711      	lsls	r1, r2, #28
 802269a:	bf44      	itt	mi
 802269c:	232b      	movmi	r3, #43	@ 0x2b
 802269e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80226a2:	f89a 3000 	ldrb.w	r3, [sl]
 80226a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80226a8:	d015      	beq.n	80226d6 <_svfiprintf_r+0xfa>
 80226aa:	9a07      	ldr	r2, [sp, #28]
 80226ac:	4654      	mov	r4, sl
 80226ae:	2000      	movs	r0, #0
 80226b0:	f04f 0c0a 	mov.w	ip, #10
 80226b4:	4621      	mov	r1, r4
 80226b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80226ba:	3b30      	subs	r3, #48	@ 0x30
 80226bc:	2b09      	cmp	r3, #9
 80226be:	d94b      	bls.n	8022758 <_svfiprintf_r+0x17c>
 80226c0:	b1b0      	cbz	r0, 80226f0 <_svfiprintf_r+0x114>
 80226c2:	9207      	str	r2, [sp, #28]
 80226c4:	e014      	b.n	80226f0 <_svfiprintf_r+0x114>
 80226c6:	eba0 0308 	sub.w	r3, r0, r8
 80226ca:	fa09 f303 	lsl.w	r3, r9, r3
 80226ce:	4313      	orrs	r3, r2
 80226d0:	9304      	str	r3, [sp, #16]
 80226d2:	46a2      	mov	sl, r4
 80226d4:	e7d2      	b.n	802267c <_svfiprintf_r+0xa0>
 80226d6:	9b03      	ldr	r3, [sp, #12]
 80226d8:	1d19      	adds	r1, r3, #4
 80226da:	681b      	ldr	r3, [r3, #0]
 80226dc:	9103      	str	r1, [sp, #12]
 80226de:	2b00      	cmp	r3, #0
 80226e0:	bfbb      	ittet	lt
 80226e2:	425b      	neglt	r3, r3
 80226e4:	f042 0202 	orrlt.w	r2, r2, #2
 80226e8:	9307      	strge	r3, [sp, #28]
 80226ea:	9307      	strlt	r3, [sp, #28]
 80226ec:	bfb8      	it	lt
 80226ee:	9204      	strlt	r2, [sp, #16]
 80226f0:	7823      	ldrb	r3, [r4, #0]
 80226f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80226f4:	d10a      	bne.n	802270c <_svfiprintf_r+0x130>
 80226f6:	7863      	ldrb	r3, [r4, #1]
 80226f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80226fa:	d132      	bne.n	8022762 <_svfiprintf_r+0x186>
 80226fc:	9b03      	ldr	r3, [sp, #12]
 80226fe:	1d1a      	adds	r2, r3, #4
 8022700:	681b      	ldr	r3, [r3, #0]
 8022702:	9203      	str	r2, [sp, #12]
 8022704:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8022708:	3402      	adds	r4, #2
 802270a:	9305      	str	r3, [sp, #20]
 802270c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80227d0 <_svfiprintf_r+0x1f4>
 8022710:	7821      	ldrb	r1, [r4, #0]
 8022712:	2203      	movs	r2, #3
 8022714:	4650      	mov	r0, sl
 8022716:	f7dd fdfb 	bl	8000310 <memchr>
 802271a:	b138      	cbz	r0, 802272c <_svfiprintf_r+0x150>
 802271c:	9b04      	ldr	r3, [sp, #16]
 802271e:	eba0 000a 	sub.w	r0, r0, sl
 8022722:	2240      	movs	r2, #64	@ 0x40
 8022724:	4082      	lsls	r2, r0
 8022726:	4313      	orrs	r3, r2
 8022728:	3401      	adds	r4, #1
 802272a:	9304      	str	r3, [sp, #16]
 802272c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022730:	4824      	ldr	r0, [pc, #144]	@ (80227c4 <_svfiprintf_r+0x1e8>)
 8022732:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8022736:	2206      	movs	r2, #6
 8022738:	f7dd fdea 	bl	8000310 <memchr>
 802273c:	2800      	cmp	r0, #0
 802273e:	d036      	beq.n	80227ae <_svfiprintf_r+0x1d2>
 8022740:	4b21      	ldr	r3, [pc, #132]	@ (80227c8 <_svfiprintf_r+0x1ec>)
 8022742:	bb1b      	cbnz	r3, 802278c <_svfiprintf_r+0x1b0>
 8022744:	9b03      	ldr	r3, [sp, #12]
 8022746:	3307      	adds	r3, #7
 8022748:	f023 0307 	bic.w	r3, r3, #7
 802274c:	3308      	adds	r3, #8
 802274e:	9303      	str	r3, [sp, #12]
 8022750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022752:	4433      	add	r3, r6
 8022754:	9309      	str	r3, [sp, #36]	@ 0x24
 8022756:	e76a      	b.n	802262e <_svfiprintf_r+0x52>
 8022758:	fb0c 3202 	mla	r2, ip, r2, r3
 802275c:	460c      	mov	r4, r1
 802275e:	2001      	movs	r0, #1
 8022760:	e7a8      	b.n	80226b4 <_svfiprintf_r+0xd8>
 8022762:	2300      	movs	r3, #0
 8022764:	3401      	adds	r4, #1
 8022766:	9305      	str	r3, [sp, #20]
 8022768:	4619      	mov	r1, r3
 802276a:	f04f 0c0a 	mov.w	ip, #10
 802276e:	4620      	mov	r0, r4
 8022770:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022774:	3a30      	subs	r2, #48	@ 0x30
 8022776:	2a09      	cmp	r2, #9
 8022778:	d903      	bls.n	8022782 <_svfiprintf_r+0x1a6>
 802277a:	2b00      	cmp	r3, #0
 802277c:	d0c6      	beq.n	802270c <_svfiprintf_r+0x130>
 802277e:	9105      	str	r1, [sp, #20]
 8022780:	e7c4      	b.n	802270c <_svfiprintf_r+0x130>
 8022782:	fb0c 2101 	mla	r1, ip, r1, r2
 8022786:	4604      	mov	r4, r0
 8022788:	2301      	movs	r3, #1
 802278a:	e7f0      	b.n	802276e <_svfiprintf_r+0x192>
 802278c:	ab03      	add	r3, sp, #12
 802278e:	9300      	str	r3, [sp, #0]
 8022790:	462a      	mov	r2, r5
 8022792:	4b0e      	ldr	r3, [pc, #56]	@ (80227cc <_svfiprintf_r+0x1f0>)
 8022794:	a904      	add	r1, sp, #16
 8022796:	4638      	mov	r0, r7
 8022798:	f3af 8000 	nop.w
 802279c:	1c42      	adds	r2, r0, #1
 802279e:	4606      	mov	r6, r0
 80227a0:	d1d6      	bne.n	8022750 <_svfiprintf_r+0x174>
 80227a2:	89ab      	ldrh	r3, [r5, #12]
 80227a4:	065b      	lsls	r3, r3, #25
 80227a6:	f53f af2d 	bmi.w	8022604 <_svfiprintf_r+0x28>
 80227aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80227ac:	e72c      	b.n	8022608 <_svfiprintf_r+0x2c>
 80227ae:	ab03      	add	r3, sp, #12
 80227b0:	9300      	str	r3, [sp, #0]
 80227b2:	462a      	mov	r2, r5
 80227b4:	4b05      	ldr	r3, [pc, #20]	@ (80227cc <_svfiprintf_r+0x1f0>)
 80227b6:	a904      	add	r1, sp, #16
 80227b8:	4638      	mov	r0, r7
 80227ba:	f000 f879 	bl	80228b0 <_printf_i>
 80227be:	e7ed      	b.n	802279c <_svfiprintf_r+0x1c0>
 80227c0:	08025bd6 	.word	0x08025bd6
 80227c4:	08025be0 	.word	0x08025be0
 80227c8:	00000000 	.word	0x00000000
 80227cc:	08022525 	.word	0x08022525
 80227d0:	08025bdc 	.word	0x08025bdc

080227d4 <_printf_common>:
 80227d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80227d8:	4616      	mov	r6, r2
 80227da:	4698      	mov	r8, r3
 80227dc:	688a      	ldr	r2, [r1, #8]
 80227de:	690b      	ldr	r3, [r1, #16]
 80227e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80227e4:	4293      	cmp	r3, r2
 80227e6:	bfb8      	it	lt
 80227e8:	4613      	movlt	r3, r2
 80227ea:	6033      	str	r3, [r6, #0]
 80227ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80227f0:	4607      	mov	r7, r0
 80227f2:	460c      	mov	r4, r1
 80227f4:	b10a      	cbz	r2, 80227fa <_printf_common+0x26>
 80227f6:	3301      	adds	r3, #1
 80227f8:	6033      	str	r3, [r6, #0]
 80227fa:	6823      	ldr	r3, [r4, #0]
 80227fc:	0699      	lsls	r1, r3, #26
 80227fe:	bf42      	ittt	mi
 8022800:	6833      	ldrmi	r3, [r6, #0]
 8022802:	3302      	addmi	r3, #2
 8022804:	6033      	strmi	r3, [r6, #0]
 8022806:	6825      	ldr	r5, [r4, #0]
 8022808:	f015 0506 	ands.w	r5, r5, #6
 802280c:	d106      	bne.n	802281c <_printf_common+0x48>
 802280e:	f104 0a19 	add.w	sl, r4, #25
 8022812:	68e3      	ldr	r3, [r4, #12]
 8022814:	6832      	ldr	r2, [r6, #0]
 8022816:	1a9b      	subs	r3, r3, r2
 8022818:	42ab      	cmp	r3, r5
 802281a:	dc26      	bgt.n	802286a <_printf_common+0x96>
 802281c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8022820:	6822      	ldr	r2, [r4, #0]
 8022822:	3b00      	subs	r3, #0
 8022824:	bf18      	it	ne
 8022826:	2301      	movne	r3, #1
 8022828:	0692      	lsls	r2, r2, #26
 802282a:	d42b      	bmi.n	8022884 <_printf_common+0xb0>
 802282c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8022830:	4641      	mov	r1, r8
 8022832:	4638      	mov	r0, r7
 8022834:	47c8      	blx	r9
 8022836:	3001      	adds	r0, #1
 8022838:	d01e      	beq.n	8022878 <_printf_common+0xa4>
 802283a:	6823      	ldr	r3, [r4, #0]
 802283c:	6922      	ldr	r2, [r4, #16]
 802283e:	f003 0306 	and.w	r3, r3, #6
 8022842:	2b04      	cmp	r3, #4
 8022844:	bf02      	ittt	eq
 8022846:	68e5      	ldreq	r5, [r4, #12]
 8022848:	6833      	ldreq	r3, [r6, #0]
 802284a:	1aed      	subeq	r5, r5, r3
 802284c:	68a3      	ldr	r3, [r4, #8]
 802284e:	bf0c      	ite	eq
 8022850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022854:	2500      	movne	r5, #0
 8022856:	4293      	cmp	r3, r2
 8022858:	bfc4      	itt	gt
 802285a:	1a9b      	subgt	r3, r3, r2
 802285c:	18ed      	addgt	r5, r5, r3
 802285e:	2600      	movs	r6, #0
 8022860:	341a      	adds	r4, #26
 8022862:	42b5      	cmp	r5, r6
 8022864:	d11a      	bne.n	802289c <_printf_common+0xc8>
 8022866:	2000      	movs	r0, #0
 8022868:	e008      	b.n	802287c <_printf_common+0xa8>
 802286a:	2301      	movs	r3, #1
 802286c:	4652      	mov	r2, sl
 802286e:	4641      	mov	r1, r8
 8022870:	4638      	mov	r0, r7
 8022872:	47c8      	blx	r9
 8022874:	3001      	adds	r0, #1
 8022876:	d103      	bne.n	8022880 <_printf_common+0xac>
 8022878:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802287c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022880:	3501      	adds	r5, #1
 8022882:	e7c6      	b.n	8022812 <_printf_common+0x3e>
 8022884:	18e1      	adds	r1, r4, r3
 8022886:	1c5a      	adds	r2, r3, #1
 8022888:	2030      	movs	r0, #48	@ 0x30
 802288a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802288e:	4422      	add	r2, r4
 8022890:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8022894:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8022898:	3302      	adds	r3, #2
 802289a:	e7c7      	b.n	802282c <_printf_common+0x58>
 802289c:	2301      	movs	r3, #1
 802289e:	4622      	mov	r2, r4
 80228a0:	4641      	mov	r1, r8
 80228a2:	4638      	mov	r0, r7
 80228a4:	47c8      	blx	r9
 80228a6:	3001      	adds	r0, #1
 80228a8:	d0e6      	beq.n	8022878 <_printf_common+0xa4>
 80228aa:	3601      	adds	r6, #1
 80228ac:	e7d9      	b.n	8022862 <_printf_common+0x8e>
	...

080228b0 <_printf_i>:
 80228b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80228b4:	7e0f      	ldrb	r7, [r1, #24]
 80228b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80228b8:	2f78      	cmp	r7, #120	@ 0x78
 80228ba:	4691      	mov	r9, r2
 80228bc:	4680      	mov	r8, r0
 80228be:	460c      	mov	r4, r1
 80228c0:	469a      	mov	sl, r3
 80228c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80228c6:	d807      	bhi.n	80228d8 <_printf_i+0x28>
 80228c8:	2f62      	cmp	r7, #98	@ 0x62
 80228ca:	d80a      	bhi.n	80228e2 <_printf_i+0x32>
 80228cc:	2f00      	cmp	r7, #0
 80228ce:	f000 80d2 	beq.w	8022a76 <_printf_i+0x1c6>
 80228d2:	2f58      	cmp	r7, #88	@ 0x58
 80228d4:	f000 80b9 	beq.w	8022a4a <_printf_i+0x19a>
 80228d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80228dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80228e0:	e03a      	b.n	8022958 <_printf_i+0xa8>
 80228e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80228e6:	2b15      	cmp	r3, #21
 80228e8:	d8f6      	bhi.n	80228d8 <_printf_i+0x28>
 80228ea:	a101      	add	r1, pc, #4	@ (adr r1, 80228f0 <_printf_i+0x40>)
 80228ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80228f0:	08022949 	.word	0x08022949
 80228f4:	0802295d 	.word	0x0802295d
 80228f8:	080228d9 	.word	0x080228d9
 80228fc:	080228d9 	.word	0x080228d9
 8022900:	080228d9 	.word	0x080228d9
 8022904:	080228d9 	.word	0x080228d9
 8022908:	0802295d 	.word	0x0802295d
 802290c:	080228d9 	.word	0x080228d9
 8022910:	080228d9 	.word	0x080228d9
 8022914:	080228d9 	.word	0x080228d9
 8022918:	080228d9 	.word	0x080228d9
 802291c:	08022a5d 	.word	0x08022a5d
 8022920:	08022987 	.word	0x08022987
 8022924:	08022a17 	.word	0x08022a17
 8022928:	080228d9 	.word	0x080228d9
 802292c:	080228d9 	.word	0x080228d9
 8022930:	08022a7f 	.word	0x08022a7f
 8022934:	080228d9 	.word	0x080228d9
 8022938:	08022987 	.word	0x08022987
 802293c:	080228d9 	.word	0x080228d9
 8022940:	080228d9 	.word	0x080228d9
 8022944:	08022a1f 	.word	0x08022a1f
 8022948:	6833      	ldr	r3, [r6, #0]
 802294a:	1d1a      	adds	r2, r3, #4
 802294c:	681b      	ldr	r3, [r3, #0]
 802294e:	6032      	str	r2, [r6, #0]
 8022950:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022954:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8022958:	2301      	movs	r3, #1
 802295a:	e09d      	b.n	8022a98 <_printf_i+0x1e8>
 802295c:	6833      	ldr	r3, [r6, #0]
 802295e:	6820      	ldr	r0, [r4, #0]
 8022960:	1d19      	adds	r1, r3, #4
 8022962:	6031      	str	r1, [r6, #0]
 8022964:	0606      	lsls	r6, r0, #24
 8022966:	d501      	bpl.n	802296c <_printf_i+0xbc>
 8022968:	681d      	ldr	r5, [r3, #0]
 802296a:	e003      	b.n	8022974 <_printf_i+0xc4>
 802296c:	0645      	lsls	r5, r0, #25
 802296e:	d5fb      	bpl.n	8022968 <_printf_i+0xb8>
 8022970:	f9b3 5000 	ldrsh.w	r5, [r3]
 8022974:	2d00      	cmp	r5, #0
 8022976:	da03      	bge.n	8022980 <_printf_i+0xd0>
 8022978:	232d      	movs	r3, #45	@ 0x2d
 802297a:	426d      	negs	r5, r5
 802297c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022980:	4859      	ldr	r0, [pc, #356]	@ (8022ae8 <_printf_i+0x238>)
 8022982:	230a      	movs	r3, #10
 8022984:	e011      	b.n	80229aa <_printf_i+0xfa>
 8022986:	6821      	ldr	r1, [r4, #0]
 8022988:	6833      	ldr	r3, [r6, #0]
 802298a:	0608      	lsls	r0, r1, #24
 802298c:	f853 5b04 	ldr.w	r5, [r3], #4
 8022990:	d402      	bmi.n	8022998 <_printf_i+0xe8>
 8022992:	0649      	lsls	r1, r1, #25
 8022994:	bf48      	it	mi
 8022996:	b2ad      	uxthmi	r5, r5
 8022998:	2f6f      	cmp	r7, #111	@ 0x6f
 802299a:	4853      	ldr	r0, [pc, #332]	@ (8022ae8 <_printf_i+0x238>)
 802299c:	6033      	str	r3, [r6, #0]
 802299e:	bf14      	ite	ne
 80229a0:	230a      	movne	r3, #10
 80229a2:	2308      	moveq	r3, #8
 80229a4:	2100      	movs	r1, #0
 80229a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80229aa:	6866      	ldr	r6, [r4, #4]
 80229ac:	60a6      	str	r6, [r4, #8]
 80229ae:	2e00      	cmp	r6, #0
 80229b0:	bfa2      	ittt	ge
 80229b2:	6821      	ldrge	r1, [r4, #0]
 80229b4:	f021 0104 	bicge.w	r1, r1, #4
 80229b8:	6021      	strge	r1, [r4, #0]
 80229ba:	b90d      	cbnz	r5, 80229c0 <_printf_i+0x110>
 80229bc:	2e00      	cmp	r6, #0
 80229be:	d04b      	beq.n	8022a58 <_printf_i+0x1a8>
 80229c0:	4616      	mov	r6, r2
 80229c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80229c6:	fb03 5711 	mls	r7, r3, r1, r5
 80229ca:	5dc7      	ldrb	r7, [r0, r7]
 80229cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80229d0:	462f      	mov	r7, r5
 80229d2:	42bb      	cmp	r3, r7
 80229d4:	460d      	mov	r5, r1
 80229d6:	d9f4      	bls.n	80229c2 <_printf_i+0x112>
 80229d8:	2b08      	cmp	r3, #8
 80229da:	d10b      	bne.n	80229f4 <_printf_i+0x144>
 80229dc:	6823      	ldr	r3, [r4, #0]
 80229de:	07df      	lsls	r7, r3, #31
 80229e0:	d508      	bpl.n	80229f4 <_printf_i+0x144>
 80229e2:	6923      	ldr	r3, [r4, #16]
 80229e4:	6861      	ldr	r1, [r4, #4]
 80229e6:	4299      	cmp	r1, r3
 80229e8:	bfde      	ittt	le
 80229ea:	2330      	movle	r3, #48	@ 0x30
 80229ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80229f0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80229f4:	1b92      	subs	r2, r2, r6
 80229f6:	6122      	str	r2, [r4, #16]
 80229f8:	f8cd a000 	str.w	sl, [sp]
 80229fc:	464b      	mov	r3, r9
 80229fe:	aa03      	add	r2, sp, #12
 8022a00:	4621      	mov	r1, r4
 8022a02:	4640      	mov	r0, r8
 8022a04:	f7ff fee6 	bl	80227d4 <_printf_common>
 8022a08:	3001      	adds	r0, #1
 8022a0a:	d14a      	bne.n	8022aa2 <_printf_i+0x1f2>
 8022a0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022a10:	b004      	add	sp, #16
 8022a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022a16:	6823      	ldr	r3, [r4, #0]
 8022a18:	f043 0320 	orr.w	r3, r3, #32
 8022a1c:	6023      	str	r3, [r4, #0]
 8022a1e:	4833      	ldr	r0, [pc, #204]	@ (8022aec <_printf_i+0x23c>)
 8022a20:	2778      	movs	r7, #120	@ 0x78
 8022a22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8022a26:	6823      	ldr	r3, [r4, #0]
 8022a28:	6831      	ldr	r1, [r6, #0]
 8022a2a:	061f      	lsls	r7, r3, #24
 8022a2c:	f851 5b04 	ldr.w	r5, [r1], #4
 8022a30:	d402      	bmi.n	8022a38 <_printf_i+0x188>
 8022a32:	065f      	lsls	r7, r3, #25
 8022a34:	bf48      	it	mi
 8022a36:	b2ad      	uxthmi	r5, r5
 8022a38:	6031      	str	r1, [r6, #0]
 8022a3a:	07d9      	lsls	r1, r3, #31
 8022a3c:	bf44      	itt	mi
 8022a3e:	f043 0320 	orrmi.w	r3, r3, #32
 8022a42:	6023      	strmi	r3, [r4, #0]
 8022a44:	b11d      	cbz	r5, 8022a4e <_printf_i+0x19e>
 8022a46:	2310      	movs	r3, #16
 8022a48:	e7ac      	b.n	80229a4 <_printf_i+0xf4>
 8022a4a:	4827      	ldr	r0, [pc, #156]	@ (8022ae8 <_printf_i+0x238>)
 8022a4c:	e7e9      	b.n	8022a22 <_printf_i+0x172>
 8022a4e:	6823      	ldr	r3, [r4, #0]
 8022a50:	f023 0320 	bic.w	r3, r3, #32
 8022a54:	6023      	str	r3, [r4, #0]
 8022a56:	e7f6      	b.n	8022a46 <_printf_i+0x196>
 8022a58:	4616      	mov	r6, r2
 8022a5a:	e7bd      	b.n	80229d8 <_printf_i+0x128>
 8022a5c:	6833      	ldr	r3, [r6, #0]
 8022a5e:	6825      	ldr	r5, [r4, #0]
 8022a60:	6961      	ldr	r1, [r4, #20]
 8022a62:	1d18      	adds	r0, r3, #4
 8022a64:	6030      	str	r0, [r6, #0]
 8022a66:	062e      	lsls	r6, r5, #24
 8022a68:	681b      	ldr	r3, [r3, #0]
 8022a6a:	d501      	bpl.n	8022a70 <_printf_i+0x1c0>
 8022a6c:	6019      	str	r1, [r3, #0]
 8022a6e:	e002      	b.n	8022a76 <_printf_i+0x1c6>
 8022a70:	0668      	lsls	r0, r5, #25
 8022a72:	d5fb      	bpl.n	8022a6c <_printf_i+0x1bc>
 8022a74:	8019      	strh	r1, [r3, #0]
 8022a76:	2300      	movs	r3, #0
 8022a78:	6123      	str	r3, [r4, #16]
 8022a7a:	4616      	mov	r6, r2
 8022a7c:	e7bc      	b.n	80229f8 <_printf_i+0x148>
 8022a7e:	6833      	ldr	r3, [r6, #0]
 8022a80:	1d1a      	adds	r2, r3, #4
 8022a82:	6032      	str	r2, [r6, #0]
 8022a84:	681e      	ldr	r6, [r3, #0]
 8022a86:	6862      	ldr	r2, [r4, #4]
 8022a88:	2100      	movs	r1, #0
 8022a8a:	4630      	mov	r0, r6
 8022a8c:	f7dd fc40 	bl	8000310 <memchr>
 8022a90:	b108      	cbz	r0, 8022a96 <_printf_i+0x1e6>
 8022a92:	1b80      	subs	r0, r0, r6
 8022a94:	6060      	str	r0, [r4, #4]
 8022a96:	6863      	ldr	r3, [r4, #4]
 8022a98:	6123      	str	r3, [r4, #16]
 8022a9a:	2300      	movs	r3, #0
 8022a9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022aa0:	e7aa      	b.n	80229f8 <_printf_i+0x148>
 8022aa2:	6923      	ldr	r3, [r4, #16]
 8022aa4:	4632      	mov	r2, r6
 8022aa6:	4649      	mov	r1, r9
 8022aa8:	4640      	mov	r0, r8
 8022aaa:	47d0      	blx	sl
 8022aac:	3001      	adds	r0, #1
 8022aae:	d0ad      	beq.n	8022a0c <_printf_i+0x15c>
 8022ab0:	6823      	ldr	r3, [r4, #0]
 8022ab2:	079b      	lsls	r3, r3, #30
 8022ab4:	d413      	bmi.n	8022ade <_printf_i+0x22e>
 8022ab6:	68e0      	ldr	r0, [r4, #12]
 8022ab8:	9b03      	ldr	r3, [sp, #12]
 8022aba:	4298      	cmp	r0, r3
 8022abc:	bfb8      	it	lt
 8022abe:	4618      	movlt	r0, r3
 8022ac0:	e7a6      	b.n	8022a10 <_printf_i+0x160>
 8022ac2:	2301      	movs	r3, #1
 8022ac4:	4632      	mov	r2, r6
 8022ac6:	4649      	mov	r1, r9
 8022ac8:	4640      	mov	r0, r8
 8022aca:	47d0      	blx	sl
 8022acc:	3001      	adds	r0, #1
 8022ace:	d09d      	beq.n	8022a0c <_printf_i+0x15c>
 8022ad0:	3501      	adds	r5, #1
 8022ad2:	68e3      	ldr	r3, [r4, #12]
 8022ad4:	9903      	ldr	r1, [sp, #12]
 8022ad6:	1a5b      	subs	r3, r3, r1
 8022ad8:	42ab      	cmp	r3, r5
 8022ada:	dcf2      	bgt.n	8022ac2 <_printf_i+0x212>
 8022adc:	e7eb      	b.n	8022ab6 <_printf_i+0x206>
 8022ade:	2500      	movs	r5, #0
 8022ae0:	f104 0619 	add.w	r6, r4, #25
 8022ae4:	e7f5      	b.n	8022ad2 <_printf_i+0x222>
 8022ae6:	bf00      	nop
 8022ae8:	08025be7 	.word	0x08025be7
 8022aec:	08025bf8 	.word	0x08025bf8

08022af0 <__sflush_r>:
 8022af0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8022af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022af8:	0716      	lsls	r6, r2, #28
 8022afa:	4605      	mov	r5, r0
 8022afc:	460c      	mov	r4, r1
 8022afe:	d454      	bmi.n	8022baa <__sflush_r+0xba>
 8022b00:	684b      	ldr	r3, [r1, #4]
 8022b02:	2b00      	cmp	r3, #0
 8022b04:	dc02      	bgt.n	8022b0c <__sflush_r+0x1c>
 8022b06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8022b08:	2b00      	cmp	r3, #0
 8022b0a:	dd48      	ble.n	8022b9e <__sflush_r+0xae>
 8022b0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022b0e:	2e00      	cmp	r6, #0
 8022b10:	d045      	beq.n	8022b9e <__sflush_r+0xae>
 8022b12:	2300      	movs	r3, #0
 8022b14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8022b18:	682f      	ldr	r7, [r5, #0]
 8022b1a:	6a21      	ldr	r1, [r4, #32]
 8022b1c:	602b      	str	r3, [r5, #0]
 8022b1e:	d030      	beq.n	8022b82 <__sflush_r+0x92>
 8022b20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8022b22:	89a3      	ldrh	r3, [r4, #12]
 8022b24:	0759      	lsls	r1, r3, #29
 8022b26:	d505      	bpl.n	8022b34 <__sflush_r+0x44>
 8022b28:	6863      	ldr	r3, [r4, #4]
 8022b2a:	1ad2      	subs	r2, r2, r3
 8022b2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8022b2e:	b10b      	cbz	r3, 8022b34 <__sflush_r+0x44>
 8022b30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8022b32:	1ad2      	subs	r2, r2, r3
 8022b34:	2300      	movs	r3, #0
 8022b36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022b38:	6a21      	ldr	r1, [r4, #32]
 8022b3a:	4628      	mov	r0, r5
 8022b3c:	47b0      	blx	r6
 8022b3e:	1c43      	adds	r3, r0, #1
 8022b40:	89a3      	ldrh	r3, [r4, #12]
 8022b42:	d106      	bne.n	8022b52 <__sflush_r+0x62>
 8022b44:	6829      	ldr	r1, [r5, #0]
 8022b46:	291d      	cmp	r1, #29
 8022b48:	d82b      	bhi.n	8022ba2 <__sflush_r+0xb2>
 8022b4a:	4a2a      	ldr	r2, [pc, #168]	@ (8022bf4 <__sflush_r+0x104>)
 8022b4c:	410a      	asrs	r2, r1
 8022b4e:	07d6      	lsls	r6, r2, #31
 8022b50:	d427      	bmi.n	8022ba2 <__sflush_r+0xb2>
 8022b52:	2200      	movs	r2, #0
 8022b54:	6062      	str	r2, [r4, #4]
 8022b56:	04d9      	lsls	r1, r3, #19
 8022b58:	6922      	ldr	r2, [r4, #16]
 8022b5a:	6022      	str	r2, [r4, #0]
 8022b5c:	d504      	bpl.n	8022b68 <__sflush_r+0x78>
 8022b5e:	1c42      	adds	r2, r0, #1
 8022b60:	d101      	bne.n	8022b66 <__sflush_r+0x76>
 8022b62:	682b      	ldr	r3, [r5, #0]
 8022b64:	b903      	cbnz	r3, 8022b68 <__sflush_r+0x78>
 8022b66:	6560      	str	r0, [r4, #84]	@ 0x54
 8022b68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022b6a:	602f      	str	r7, [r5, #0]
 8022b6c:	b1b9      	cbz	r1, 8022b9e <__sflush_r+0xae>
 8022b6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022b72:	4299      	cmp	r1, r3
 8022b74:	d002      	beq.n	8022b7c <__sflush_r+0x8c>
 8022b76:	4628      	mov	r0, r5
 8022b78:	f7ff fc82 	bl	8022480 <_free_r>
 8022b7c:	2300      	movs	r3, #0
 8022b7e:	6363      	str	r3, [r4, #52]	@ 0x34
 8022b80:	e00d      	b.n	8022b9e <__sflush_r+0xae>
 8022b82:	2301      	movs	r3, #1
 8022b84:	4628      	mov	r0, r5
 8022b86:	47b0      	blx	r6
 8022b88:	4602      	mov	r2, r0
 8022b8a:	1c50      	adds	r0, r2, #1
 8022b8c:	d1c9      	bne.n	8022b22 <__sflush_r+0x32>
 8022b8e:	682b      	ldr	r3, [r5, #0]
 8022b90:	2b00      	cmp	r3, #0
 8022b92:	d0c6      	beq.n	8022b22 <__sflush_r+0x32>
 8022b94:	2b1d      	cmp	r3, #29
 8022b96:	d001      	beq.n	8022b9c <__sflush_r+0xac>
 8022b98:	2b16      	cmp	r3, #22
 8022b9a:	d11e      	bne.n	8022bda <__sflush_r+0xea>
 8022b9c:	602f      	str	r7, [r5, #0]
 8022b9e:	2000      	movs	r0, #0
 8022ba0:	e022      	b.n	8022be8 <__sflush_r+0xf8>
 8022ba2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022ba6:	b21b      	sxth	r3, r3
 8022ba8:	e01b      	b.n	8022be2 <__sflush_r+0xf2>
 8022baa:	690f      	ldr	r7, [r1, #16]
 8022bac:	2f00      	cmp	r7, #0
 8022bae:	d0f6      	beq.n	8022b9e <__sflush_r+0xae>
 8022bb0:	0793      	lsls	r3, r2, #30
 8022bb2:	680e      	ldr	r6, [r1, #0]
 8022bb4:	bf08      	it	eq
 8022bb6:	694b      	ldreq	r3, [r1, #20]
 8022bb8:	600f      	str	r7, [r1, #0]
 8022bba:	bf18      	it	ne
 8022bbc:	2300      	movne	r3, #0
 8022bbe:	eba6 0807 	sub.w	r8, r6, r7
 8022bc2:	608b      	str	r3, [r1, #8]
 8022bc4:	f1b8 0f00 	cmp.w	r8, #0
 8022bc8:	dde9      	ble.n	8022b9e <__sflush_r+0xae>
 8022bca:	6a21      	ldr	r1, [r4, #32]
 8022bcc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8022bce:	4643      	mov	r3, r8
 8022bd0:	463a      	mov	r2, r7
 8022bd2:	4628      	mov	r0, r5
 8022bd4:	47b0      	blx	r6
 8022bd6:	2800      	cmp	r0, #0
 8022bd8:	dc08      	bgt.n	8022bec <__sflush_r+0xfc>
 8022bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022bde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022be2:	81a3      	strh	r3, [r4, #12]
 8022be4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022bec:	4407      	add	r7, r0
 8022bee:	eba8 0800 	sub.w	r8, r8, r0
 8022bf2:	e7e7      	b.n	8022bc4 <__sflush_r+0xd4>
 8022bf4:	dfbffffe 	.word	0xdfbffffe

08022bf8 <_fflush_r>:
 8022bf8:	b538      	push	{r3, r4, r5, lr}
 8022bfa:	690b      	ldr	r3, [r1, #16]
 8022bfc:	4605      	mov	r5, r0
 8022bfe:	460c      	mov	r4, r1
 8022c00:	b913      	cbnz	r3, 8022c08 <_fflush_r+0x10>
 8022c02:	2500      	movs	r5, #0
 8022c04:	4628      	mov	r0, r5
 8022c06:	bd38      	pop	{r3, r4, r5, pc}
 8022c08:	b118      	cbz	r0, 8022c12 <_fflush_r+0x1a>
 8022c0a:	6a03      	ldr	r3, [r0, #32]
 8022c0c:	b90b      	cbnz	r3, 8022c12 <_fflush_r+0x1a>
 8022c0e:	f7ff f8e1 	bl	8021dd4 <__sinit>
 8022c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022c16:	2b00      	cmp	r3, #0
 8022c18:	d0f3      	beq.n	8022c02 <_fflush_r+0xa>
 8022c1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8022c1c:	07d0      	lsls	r0, r2, #31
 8022c1e:	d404      	bmi.n	8022c2a <_fflush_r+0x32>
 8022c20:	0599      	lsls	r1, r3, #22
 8022c22:	d402      	bmi.n	8022c2a <_fflush_r+0x32>
 8022c24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022c26:	f7ff fbe8 	bl	80223fa <__retarget_lock_acquire_recursive>
 8022c2a:	4628      	mov	r0, r5
 8022c2c:	4621      	mov	r1, r4
 8022c2e:	f7ff ff5f 	bl	8022af0 <__sflush_r>
 8022c32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022c34:	07da      	lsls	r2, r3, #31
 8022c36:	4605      	mov	r5, r0
 8022c38:	d4e4      	bmi.n	8022c04 <_fflush_r+0xc>
 8022c3a:	89a3      	ldrh	r3, [r4, #12]
 8022c3c:	059b      	lsls	r3, r3, #22
 8022c3e:	d4e1      	bmi.n	8022c04 <_fflush_r+0xc>
 8022c40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022c42:	f7ff fbdb 	bl	80223fc <__retarget_lock_release_recursive>
 8022c46:	e7dd      	b.n	8022c04 <_fflush_r+0xc>

08022c48 <fiprintf>:
 8022c48:	b40e      	push	{r1, r2, r3}
 8022c4a:	b503      	push	{r0, r1, lr}
 8022c4c:	4601      	mov	r1, r0
 8022c4e:	ab03      	add	r3, sp, #12
 8022c50:	4805      	ldr	r0, [pc, #20]	@ (8022c68 <fiprintf+0x20>)
 8022c52:	f853 2b04 	ldr.w	r2, [r3], #4
 8022c56:	6800      	ldr	r0, [r0, #0]
 8022c58:	9301      	str	r3, [sp, #4]
 8022c5a:	f000 f8bb 	bl	8022dd4 <_vfiprintf_r>
 8022c5e:	b002      	add	sp, #8
 8022c60:	f85d eb04 	ldr.w	lr, [sp], #4
 8022c64:	b003      	add	sp, #12
 8022c66:	4770      	bx	lr
 8022c68:	240012bc 	.word	0x240012bc

08022c6c <__swhatbuf_r>:
 8022c6c:	b570      	push	{r4, r5, r6, lr}
 8022c6e:	460c      	mov	r4, r1
 8022c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022c74:	2900      	cmp	r1, #0
 8022c76:	b096      	sub	sp, #88	@ 0x58
 8022c78:	4615      	mov	r5, r2
 8022c7a:	461e      	mov	r6, r3
 8022c7c:	da0d      	bge.n	8022c9a <__swhatbuf_r+0x2e>
 8022c7e:	89a3      	ldrh	r3, [r4, #12]
 8022c80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8022c84:	f04f 0100 	mov.w	r1, #0
 8022c88:	bf14      	ite	ne
 8022c8a:	2340      	movne	r3, #64	@ 0x40
 8022c8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8022c90:	2000      	movs	r0, #0
 8022c92:	6031      	str	r1, [r6, #0]
 8022c94:	602b      	str	r3, [r5, #0]
 8022c96:	b016      	add	sp, #88	@ 0x58
 8022c98:	bd70      	pop	{r4, r5, r6, pc}
 8022c9a:	466a      	mov	r2, sp
 8022c9c:	f000 f848 	bl	8022d30 <_fstat_r>
 8022ca0:	2800      	cmp	r0, #0
 8022ca2:	dbec      	blt.n	8022c7e <__swhatbuf_r+0x12>
 8022ca4:	9901      	ldr	r1, [sp, #4]
 8022ca6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8022caa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8022cae:	4259      	negs	r1, r3
 8022cb0:	4159      	adcs	r1, r3
 8022cb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8022cb6:	e7eb      	b.n	8022c90 <__swhatbuf_r+0x24>

08022cb8 <__smakebuf_r>:
 8022cb8:	898b      	ldrh	r3, [r1, #12]
 8022cba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022cbc:	079d      	lsls	r5, r3, #30
 8022cbe:	4606      	mov	r6, r0
 8022cc0:	460c      	mov	r4, r1
 8022cc2:	d507      	bpl.n	8022cd4 <__smakebuf_r+0x1c>
 8022cc4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8022cc8:	6023      	str	r3, [r4, #0]
 8022cca:	6123      	str	r3, [r4, #16]
 8022ccc:	2301      	movs	r3, #1
 8022cce:	6163      	str	r3, [r4, #20]
 8022cd0:	b003      	add	sp, #12
 8022cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022cd4:	ab01      	add	r3, sp, #4
 8022cd6:	466a      	mov	r2, sp
 8022cd8:	f7ff ffc8 	bl	8022c6c <__swhatbuf_r>
 8022cdc:	9f00      	ldr	r7, [sp, #0]
 8022cde:	4605      	mov	r5, r0
 8022ce0:	4639      	mov	r1, r7
 8022ce2:	4630      	mov	r0, r6
 8022ce4:	f7fe fe44 	bl	8021970 <_malloc_r>
 8022ce8:	b948      	cbnz	r0, 8022cfe <__smakebuf_r+0x46>
 8022cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022cee:	059a      	lsls	r2, r3, #22
 8022cf0:	d4ee      	bmi.n	8022cd0 <__smakebuf_r+0x18>
 8022cf2:	f023 0303 	bic.w	r3, r3, #3
 8022cf6:	f043 0302 	orr.w	r3, r3, #2
 8022cfa:	81a3      	strh	r3, [r4, #12]
 8022cfc:	e7e2      	b.n	8022cc4 <__smakebuf_r+0xc>
 8022cfe:	89a3      	ldrh	r3, [r4, #12]
 8022d00:	6020      	str	r0, [r4, #0]
 8022d02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8022d06:	81a3      	strh	r3, [r4, #12]
 8022d08:	9b01      	ldr	r3, [sp, #4]
 8022d0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8022d0e:	b15b      	cbz	r3, 8022d28 <__smakebuf_r+0x70>
 8022d10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022d14:	4630      	mov	r0, r6
 8022d16:	f000 f81d 	bl	8022d54 <_isatty_r>
 8022d1a:	b128      	cbz	r0, 8022d28 <__smakebuf_r+0x70>
 8022d1c:	89a3      	ldrh	r3, [r4, #12]
 8022d1e:	f023 0303 	bic.w	r3, r3, #3
 8022d22:	f043 0301 	orr.w	r3, r3, #1
 8022d26:	81a3      	strh	r3, [r4, #12]
 8022d28:	89a3      	ldrh	r3, [r4, #12]
 8022d2a:	431d      	orrs	r5, r3
 8022d2c:	81a5      	strh	r5, [r4, #12]
 8022d2e:	e7cf      	b.n	8022cd0 <__smakebuf_r+0x18>

08022d30 <_fstat_r>:
 8022d30:	b538      	push	{r3, r4, r5, lr}
 8022d32:	4d07      	ldr	r5, [pc, #28]	@ (8022d50 <_fstat_r+0x20>)
 8022d34:	2300      	movs	r3, #0
 8022d36:	4604      	mov	r4, r0
 8022d38:	4608      	mov	r0, r1
 8022d3a:	4611      	mov	r1, r2
 8022d3c:	602b      	str	r3, [r5, #0]
 8022d3e:	f7df fc83 	bl	8002648 <_fstat>
 8022d42:	1c43      	adds	r3, r0, #1
 8022d44:	d102      	bne.n	8022d4c <_fstat_r+0x1c>
 8022d46:	682b      	ldr	r3, [r5, #0]
 8022d48:	b103      	cbz	r3, 8022d4c <_fstat_r+0x1c>
 8022d4a:	6023      	str	r3, [r4, #0]
 8022d4c:	bd38      	pop	{r3, r4, r5, pc}
 8022d4e:	bf00      	nop
 8022d50:	240696e8 	.word	0x240696e8

08022d54 <_isatty_r>:
 8022d54:	b538      	push	{r3, r4, r5, lr}
 8022d56:	4d06      	ldr	r5, [pc, #24]	@ (8022d70 <_isatty_r+0x1c>)
 8022d58:	2300      	movs	r3, #0
 8022d5a:	4604      	mov	r4, r0
 8022d5c:	4608      	mov	r0, r1
 8022d5e:	602b      	str	r3, [r5, #0]
 8022d60:	f7df fc82 	bl	8002668 <_isatty>
 8022d64:	1c43      	adds	r3, r0, #1
 8022d66:	d102      	bne.n	8022d6e <_isatty_r+0x1a>
 8022d68:	682b      	ldr	r3, [r5, #0]
 8022d6a:	b103      	cbz	r3, 8022d6e <_isatty_r+0x1a>
 8022d6c:	6023      	str	r3, [r4, #0]
 8022d6e:	bd38      	pop	{r3, r4, r5, pc}
 8022d70:	240696e8 	.word	0x240696e8

08022d74 <abort>:
 8022d74:	b508      	push	{r3, lr}
 8022d76:	2006      	movs	r0, #6
 8022d78:	f000 f96c 	bl	8023054 <raise>
 8022d7c:	2001      	movs	r0, #1
 8022d7e:	f7df fc13 	bl	80025a8 <_exit>

08022d82 <__sfputc_r>:
 8022d82:	6893      	ldr	r3, [r2, #8]
 8022d84:	3b01      	subs	r3, #1
 8022d86:	2b00      	cmp	r3, #0
 8022d88:	b410      	push	{r4}
 8022d8a:	6093      	str	r3, [r2, #8]
 8022d8c:	da08      	bge.n	8022da0 <__sfputc_r+0x1e>
 8022d8e:	6994      	ldr	r4, [r2, #24]
 8022d90:	42a3      	cmp	r3, r4
 8022d92:	db01      	blt.n	8022d98 <__sfputc_r+0x16>
 8022d94:	290a      	cmp	r1, #10
 8022d96:	d103      	bne.n	8022da0 <__sfputc_r+0x1e>
 8022d98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022d9c:	f7ff b95a 	b.w	8022054 <__swbuf_r>
 8022da0:	6813      	ldr	r3, [r2, #0]
 8022da2:	1c58      	adds	r0, r3, #1
 8022da4:	6010      	str	r0, [r2, #0]
 8022da6:	7019      	strb	r1, [r3, #0]
 8022da8:	4608      	mov	r0, r1
 8022daa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022dae:	4770      	bx	lr

08022db0 <__sfputs_r>:
 8022db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022db2:	4606      	mov	r6, r0
 8022db4:	460f      	mov	r7, r1
 8022db6:	4614      	mov	r4, r2
 8022db8:	18d5      	adds	r5, r2, r3
 8022dba:	42ac      	cmp	r4, r5
 8022dbc:	d101      	bne.n	8022dc2 <__sfputs_r+0x12>
 8022dbe:	2000      	movs	r0, #0
 8022dc0:	e007      	b.n	8022dd2 <__sfputs_r+0x22>
 8022dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022dc6:	463a      	mov	r2, r7
 8022dc8:	4630      	mov	r0, r6
 8022dca:	f7ff ffda 	bl	8022d82 <__sfputc_r>
 8022dce:	1c43      	adds	r3, r0, #1
 8022dd0:	d1f3      	bne.n	8022dba <__sfputs_r+0xa>
 8022dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08022dd4 <_vfiprintf_r>:
 8022dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022dd8:	460d      	mov	r5, r1
 8022dda:	b09d      	sub	sp, #116	@ 0x74
 8022ddc:	4614      	mov	r4, r2
 8022dde:	4698      	mov	r8, r3
 8022de0:	4606      	mov	r6, r0
 8022de2:	b118      	cbz	r0, 8022dec <_vfiprintf_r+0x18>
 8022de4:	6a03      	ldr	r3, [r0, #32]
 8022de6:	b90b      	cbnz	r3, 8022dec <_vfiprintf_r+0x18>
 8022de8:	f7fe fff4 	bl	8021dd4 <__sinit>
 8022dec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022dee:	07d9      	lsls	r1, r3, #31
 8022df0:	d405      	bmi.n	8022dfe <_vfiprintf_r+0x2a>
 8022df2:	89ab      	ldrh	r3, [r5, #12]
 8022df4:	059a      	lsls	r2, r3, #22
 8022df6:	d402      	bmi.n	8022dfe <_vfiprintf_r+0x2a>
 8022df8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022dfa:	f7ff fafe 	bl	80223fa <__retarget_lock_acquire_recursive>
 8022dfe:	89ab      	ldrh	r3, [r5, #12]
 8022e00:	071b      	lsls	r3, r3, #28
 8022e02:	d501      	bpl.n	8022e08 <_vfiprintf_r+0x34>
 8022e04:	692b      	ldr	r3, [r5, #16]
 8022e06:	b99b      	cbnz	r3, 8022e30 <_vfiprintf_r+0x5c>
 8022e08:	4629      	mov	r1, r5
 8022e0a:	4630      	mov	r0, r6
 8022e0c:	f7ff f960 	bl	80220d0 <__swsetup_r>
 8022e10:	b170      	cbz	r0, 8022e30 <_vfiprintf_r+0x5c>
 8022e12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022e14:	07dc      	lsls	r4, r3, #31
 8022e16:	d504      	bpl.n	8022e22 <_vfiprintf_r+0x4e>
 8022e18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022e1c:	b01d      	add	sp, #116	@ 0x74
 8022e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e22:	89ab      	ldrh	r3, [r5, #12]
 8022e24:	0598      	lsls	r0, r3, #22
 8022e26:	d4f7      	bmi.n	8022e18 <_vfiprintf_r+0x44>
 8022e28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022e2a:	f7ff fae7 	bl	80223fc <__retarget_lock_release_recursive>
 8022e2e:	e7f3      	b.n	8022e18 <_vfiprintf_r+0x44>
 8022e30:	2300      	movs	r3, #0
 8022e32:	9309      	str	r3, [sp, #36]	@ 0x24
 8022e34:	2320      	movs	r3, #32
 8022e36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8022e3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8022e3e:	2330      	movs	r3, #48	@ 0x30
 8022e40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8022ff0 <_vfiprintf_r+0x21c>
 8022e44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8022e48:	f04f 0901 	mov.w	r9, #1
 8022e4c:	4623      	mov	r3, r4
 8022e4e:	469a      	mov	sl, r3
 8022e50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022e54:	b10a      	cbz	r2, 8022e5a <_vfiprintf_r+0x86>
 8022e56:	2a25      	cmp	r2, #37	@ 0x25
 8022e58:	d1f9      	bne.n	8022e4e <_vfiprintf_r+0x7a>
 8022e5a:	ebba 0b04 	subs.w	fp, sl, r4
 8022e5e:	d00b      	beq.n	8022e78 <_vfiprintf_r+0xa4>
 8022e60:	465b      	mov	r3, fp
 8022e62:	4622      	mov	r2, r4
 8022e64:	4629      	mov	r1, r5
 8022e66:	4630      	mov	r0, r6
 8022e68:	f7ff ffa2 	bl	8022db0 <__sfputs_r>
 8022e6c:	3001      	adds	r0, #1
 8022e6e:	f000 80a7 	beq.w	8022fc0 <_vfiprintf_r+0x1ec>
 8022e72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022e74:	445a      	add	r2, fp
 8022e76:	9209      	str	r2, [sp, #36]	@ 0x24
 8022e78:	f89a 3000 	ldrb.w	r3, [sl]
 8022e7c:	2b00      	cmp	r3, #0
 8022e7e:	f000 809f 	beq.w	8022fc0 <_vfiprintf_r+0x1ec>
 8022e82:	2300      	movs	r3, #0
 8022e84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8022e88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022e8c:	f10a 0a01 	add.w	sl, sl, #1
 8022e90:	9304      	str	r3, [sp, #16]
 8022e92:	9307      	str	r3, [sp, #28]
 8022e94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8022e98:	931a      	str	r3, [sp, #104]	@ 0x68
 8022e9a:	4654      	mov	r4, sl
 8022e9c:	2205      	movs	r2, #5
 8022e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022ea2:	4853      	ldr	r0, [pc, #332]	@ (8022ff0 <_vfiprintf_r+0x21c>)
 8022ea4:	f7dd fa34 	bl	8000310 <memchr>
 8022ea8:	9a04      	ldr	r2, [sp, #16]
 8022eaa:	b9d8      	cbnz	r0, 8022ee4 <_vfiprintf_r+0x110>
 8022eac:	06d1      	lsls	r1, r2, #27
 8022eae:	bf44      	itt	mi
 8022eb0:	2320      	movmi	r3, #32
 8022eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022eb6:	0713      	lsls	r3, r2, #28
 8022eb8:	bf44      	itt	mi
 8022eba:	232b      	movmi	r3, #43	@ 0x2b
 8022ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022ec0:	f89a 3000 	ldrb.w	r3, [sl]
 8022ec4:	2b2a      	cmp	r3, #42	@ 0x2a
 8022ec6:	d015      	beq.n	8022ef4 <_vfiprintf_r+0x120>
 8022ec8:	9a07      	ldr	r2, [sp, #28]
 8022eca:	4654      	mov	r4, sl
 8022ecc:	2000      	movs	r0, #0
 8022ece:	f04f 0c0a 	mov.w	ip, #10
 8022ed2:	4621      	mov	r1, r4
 8022ed4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022ed8:	3b30      	subs	r3, #48	@ 0x30
 8022eda:	2b09      	cmp	r3, #9
 8022edc:	d94b      	bls.n	8022f76 <_vfiprintf_r+0x1a2>
 8022ede:	b1b0      	cbz	r0, 8022f0e <_vfiprintf_r+0x13a>
 8022ee0:	9207      	str	r2, [sp, #28]
 8022ee2:	e014      	b.n	8022f0e <_vfiprintf_r+0x13a>
 8022ee4:	eba0 0308 	sub.w	r3, r0, r8
 8022ee8:	fa09 f303 	lsl.w	r3, r9, r3
 8022eec:	4313      	orrs	r3, r2
 8022eee:	9304      	str	r3, [sp, #16]
 8022ef0:	46a2      	mov	sl, r4
 8022ef2:	e7d2      	b.n	8022e9a <_vfiprintf_r+0xc6>
 8022ef4:	9b03      	ldr	r3, [sp, #12]
 8022ef6:	1d19      	adds	r1, r3, #4
 8022ef8:	681b      	ldr	r3, [r3, #0]
 8022efa:	9103      	str	r1, [sp, #12]
 8022efc:	2b00      	cmp	r3, #0
 8022efe:	bfbb      	ittet	lt
 8022f00:	425b      	neglt	r3, r3
 8022f02:	f042 0202 	orrlt.w	r2, r2, #2
 8022f06:	9307      	strge	r3, [sp, #28]
 8022f08:	9307      	strlt	r3, [sp, #28]
 8022f0a:	bfb8      	it	lt
 8022f0c:	9204      	strlt	r2, [sp, #16]
 8022f0e:	7823      	ldrb	r3, [r4, #0]
 8022f10:	2b2e      	cmp	r3, #46	@ 0x2e
 8022f12:	d10a      	bne.n	8022f2a <_vfiprintf_r+0x156>
 8022f14:	7863      	ldrb	r3, [r4, #1]
 8022f16:	2b2a      	cmp	r3, #42	@ 0x2a
 8022f18:	d132      	bne.n	8022f80 <_vfiprintf_r+0x1ac>
 8022f1a:	9b03      	ldr	r3, [sp, #12]
 8022f1c:	1d1a      	adds	r2, r3, #4
 8022f1e:	681b      	ldr	r3, [r3, #0]
 8022f20:	9203      	str	r2, [sp, #12]
 8022f22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8022f26:	3402      	adds	r4, #2
 8022f28:	9305      	str	r3, [sp, #20]
 8022f2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8023000 <_vfiprintf_r+0x22c>
 8022f2e:	7821      	ldrb	r1, [r4, #0]
 8022f30:	2203      	movs	r2, #3
 8022f32:	4650      	mov	r0, sl
 8022f34:	f7dd f9ec 	bl	8000310 <memchr>
 8022f38:	b138      	cbz	r0, 8022f4a <_vfiprintf_r+0x176>
 8022f3a:	9b04      	ldr	r3, [sp, #16]
 8022f3c:	eba0 000a 	sub.w	r0, r0, sl
 8022f40:	2240      	movs	r2, #64	@ 0x40
 8022f42:	4082      	lsls	r2, r0
 8022f44:	4313      	orrs	r3, r2
 8022f46:	3401      	adds	r4, #1
 8022f48:	9304      	str	r3, [sp, #16]
 8022f4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022f4e:	4829      	ldr	r0, [pc, #164]	@ (8022ff4 <_vfiprintf_r+0x220>)
 8022f50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8022f54:	2206      	movs	r2, #6
 8022f56:	f7dd f9db 	bl	8000310 <memchr>
 8022f5a:	2800      	cmp	r0, #0
 8022f5c:	d03f      	beq.n	8022fde <_vfiprintf_r+0x20a>
 8022f5e:	4b26      	ldr	r3, [pc, #152]	@ (8022ff8 <_vfiprintf_r+0x224>)
 8022f60:	bb1b      	cbnz	r3, 8022faa <_vfiprintf_r+0x1d6>
 8022f62:	9b03      	ldr	r3, [sp, #12]
 8022f64:	3307      	adds	r3, #7
 8022f66:	f023 0307 	bic.w	r3, r3, #7
 8022f6a:	3308      	adds	r3, #8
 8022f6c:	9303      	str	r3, [sp, #12]
 8022f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022f70:	443b      	add	r3, r7
 8022f72:	9309      	str	r3, [sp, #36]	@ 0x24
 8022f74:	e76a      	b.n	8022e4c <_vfiprintf_r+0x78>
 8022f76:	fb0c 3202 	mla	r2, ip, r2, r3
 8022f7a:	460c      	mov	r4, r1
 8022f7c:	2001      	movs	r0, #1
 8022f7e:	e7a8      	b.n	8022ed2 <_vfiprintf_r+0xfe>
 8022f80:	2300      	movs	r3, #0
 8022f82:	3401      	adds	r4, #1
 8022f84:	9305      	str	r3, [sp, #20]
 8022f86:	4619      	mov	r1, r3
 8022f88:	f04f 0c0a 	mov.w	ip, #10
 8022f8c:	4620      	mov	r0, r4
 8022f8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022f92:	3a30      	subs	r2, #48	@ 0x30
 8022f94:	2a09      	cmp	r2, #9
 8022f96:	d903      	bls.n	8022fa0 <_vfiprintf_r+0x1cc>
 8022f98:	2b00      	cmp	r3, #0
 8022f9a:	d0c6      	beq.n	8022f2a <_vfiprintf_r+0x156>
 8022f9c:	9105      	str	r1, [sp, #20]
 8022f9e:	e7c4      	b.n	8022f2a <_vfiprintf_r+0x156>
 8022fa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8022fa4:	4604      	mov	r4, r0
 8022fa6:	2301      	movs	r3, #1
 8022fa8:	e7f0      	b.n	8022f8c <_vfiprintf_r+0x1b8>
 8022faa:	ab03      	add	r3, sp, #12
 8022fac:	9300      	str	r3, [sp, #0]
 8022fae:	462a      	mov	r2, r5
 8022fb0:	4b12      	ldr	r3, [pc, #72]	@ (8022ffc <_vfiprintf_r+0x228>)
 8022fb2:	a904      	add	r1, sp, #16
 8022fb4:	4630      	mov	r0, r6
 8022fb6:	f3af 8000 	nop.w
 8022fba:	4607      	mov	r7, r0
 8022fbc:	1c78      	adds	r0, r7, #1
 8022fbe:	d1d6      	bne.n	8022f6e <_vfiprintf_r+0x19a>
 8022fc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022fc2:	07d9      	lsls	r1, r3, #31
 8022fc4:	d405      	bmi.n	8022fd2 <_vfiprintf_r+0x1fe>
 8022fc6:	89ab      	ldrh	r3, [r5, #12]
 8022fc8:	059a      	lsls	r2, r3, #22
 8022fca:	d402      	bmi.n	8022fd2 <_vfiprintf_r+0x1fe>
 8022fcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022fce:	f7ff fa15 	bl	80223fc <__retarget_lock_release_recursive>
 8022fd2:	89ab      	ldrh	r3, [r5, #12]
 8022fd4:	065b      	lsls	r3, r3, #25
 8022fd6:	f53f af1f 	bmi.w	8022e18 <_vfiprintf_r+0x44>
 8022fda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022fdc:	e71e      	b.n	8022e1c <_vfiprintf_r+0x48>
 8022fde:	ab03      	add	r3, sp, #12
 8022fe0:	9300      	str	r3, [sp, #0]
 8022fe2:	462a      	mov	r2, r5
 8022fe4:	4b05      	ldr	r3, [pc, #20]	@ (8022ffc <_vfiprintf_r+0x228>)
 8022fe6:	a904      	add	r1, sp, #16
 8022fe8:	4630      	mov	r0, r6
 8022fea:	f7ff fc61 	bl	80228b0 <_printf_i>
 8022fee:	e7e4      	b.n	8022fba <_vfiprintf_r+0x1e6>
 8022ff0:	08025bd6 	.word	0x08025bd6
 8022ff4:	08025be0 	.word	0x08025be0
 8022ff8:	00000000 	.word	0x00000000
 8022ffc:	08022db1 	.word	0x08022db1
 8023000:	08025bdc 	.word	0x08025bdc

08023004 <_raise_r>:
 8023004:	291f      	cmp	r1, #31
 8023006:	b538      	push	{r3, r4, r5, lr}
 8023008:	4605      	mov	r5, r0
 802300a:	460c      	mov	r4, r1
 802300c:	d904      	bls.n	8023018 <_raise_r+0x14>
 802300e:	2316      	movs	r3, #22
 8023010:	6003      	str	r3, [r0, #0]
 8023012:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023016:	bd38      	pop	{r3, r4, r5, pc}
 8023018:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802301a:	b112      	cbz	r2, 8023022 <_raise_r+0x1e>
 802301c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023020:	b94b      	cbnz	r3, 8023036 <_raise_r+0x32>
 8023022:	4628      	mov	r0, r5
 8023024:	f000 f830 	bl	8023088 <_getpid_r>
 8023028:	4622      	mov	r2, r4
 802302a:	4601      	mov	r1, r0
 802302c:	4628      	mov	r0, r5
 802302e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023032:	f000 b817 	b.w	8023064 <_kill_r>
 8023036:	2b01      	cmp	r3, #1
 8023038:	d00a      	beq.n	8023050 <_raise_r+0x4c>
 802303a:	1c59      	adds	r1, r3, #1
 802303c:	d103      	bne.n	8023046 <_raise_r+0x42>
 802303e:	2316      	movs	r3, #22
 8023040:	6003      	str	r3, [r0, #0]
 8023042:	2001      	movs	r0, #1
 8023044:	e7e7      	b.n	8023016 <_raise_r+0x12>
 8023046:	2100      	movs	r1, #0
 8023048:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802304c:	4620      	mov	r0, r4
 802304e:	4798      	blx	r3
 8023050:	2000      	movs	r0, #0
 8023052:	e7e0      	b.n	8023016 <_raise_r+0x12>

08023054 <raise>:
 8023054:	4b02      	ldr	r3, [pc, #8]	@ (8023060 <raise+0xc>)
 8023056:	4601      	mov	r1, r0
 8023058:	6818      	ldr	r0, [r3, #0]
 802305a:	f7ff bfd3 	b.w	8023004 <_raise_r>
 802305e:	bf00      	nop
 8023060:	240012bc 	.word	0x240012bc

08023064 <_kill_r>:
 8023064:	b538      	push	{r3, r4, r5, lr}
 8023066:	4d07      	ldr	r5, [pc, #28]	@ (8023084 <_kill_r+0x20>)
 8023068:	2300      	movs	r3, #0
 802306a:	4604      	mov	r4, r0
 802306c:	4608      	mov	r0, r1
 802306e:	4611      	mov	r1, r2
 8023070:	602b      	str	r3, [r5, #0]
 8023072:	f7df fa89 	bl	8002588 <_kill>
 8023076:	1c43      	adds	r3, r0, #1
 8023078:	d102      	bne.n	8023080 <_kill_r+0x1c>
 802307a:	682b      	ldr	r3, [r5, #0]
 802307c:	b103      	cbz	r3, 8023080 <_kill_r+0x1c>
 802307e:	6023      	str	r3, [r4, #0]
 8023080:	bd38      	pop	{r3, r4, r5, pc}
 8023082:	bf00      	nop
 8023084:	240696e8 	.word	0x240696e8

08023088 <_getpid_r>:
 8023088:	f7df ba76 	b.w	8002578 <_getpid>

0802308c <_init>:
 802308c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802308e:	bf00      	nop
 8023090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023092:	bc08      	pop	{r3}
 8023094:	469e      	mov	lr, r3
 8023096:	4770      	bx	lr

08023098 <_fini>:
 8023098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802309a:	bf00      	nop
 802309c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802309e:	bc08      	pop	{r3}
 80230a0:	469e      	mov	lr, r3
 80230a2:	4770      	bx	lr
