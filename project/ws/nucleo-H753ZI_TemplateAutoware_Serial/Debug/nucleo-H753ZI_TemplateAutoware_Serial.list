
nucleo-H753ZI_TemplateAutoware_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001dce8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000028c8  0801df88  0801df88  0001ef88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020850  08020850  00021850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000040  08020858  08020858  00021858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08020898  08020898  00021898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000013f0  24000000  0802089c  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00068100  240013f0  08021c8c  000233f0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240694f0  08021c8c  000234f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000233f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028264  00000000  00000000  0002341e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004fd8  00000000  00000000  0004b682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b40  00000000  00000000  00050660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000014f4  00000000  00000000  000521a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003fc56  00000000  00000000  00053694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002b617  00000000  00000000  000932ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017d465  00000000  00000000  000be901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000076  00000000  00000000  0023bd66  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007e94  00000000  00000000  0023bddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007f  00000000  00000000  00243c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240013f0 	.word	0x240013f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801df70 	.word	0x0801df70

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240013f4 	.word	0x240013f4
 80002dc:	0801df70 	.word	0x0801df70

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003ce:	f000 b9b5 	b.w	800073c <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000464:	f000 b96a 	b.w	800073c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	460c      	mov	r4, r1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d14e      	bne.n	800052a <__udivmoddi4+0xaa>
 800048c:	4694      	mov	ip, r2
 800048e:	458c      	cmp	ip, r1
 8000490:	4686      	mov	lr, r0
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	d962      	bls.n	800055e <__udivmoddi4+0xde>
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	4091      	lsls	r1, r2
 80004a0:	fa20 f303 	lsr.w	r3, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	4319      	orrs	r1, r3
 80004aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f f68c 	uxth.w	r6, ip
 80004b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004be:	fb07 1114 	mls	r1, r7, r4, r1
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb04 f106 	mul.w	r1, r4, r6
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004d6:	f080 8112 	bcs.w	80006fe <__udivmoddi4+0x27e>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 810f 	bls.w	80006fe <__udivmoddi4+0x27e>
 80004e0:	3c02      	subs	r4, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	fa1f f38e 	uxth.w	r3, lr
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1110 	mls	r1, r7, r0, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb00 f606 	mul.w	r6, r0, r6
 80004fa:	429e      	cmp	r6, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x94>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000506:	f080 80fc 	bcs.w	8000702 <__udivmoddi4+0x282>
 800050a:	429e      	cmp	r6, r3
 800050c:	f240 80f9 	bls.w	8000702 <__udivmoddi4+0x282>
 8000510:	4463      	add	r3, ip
 8000512:	3802      	subs	r0, #2
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800051a:	2100      	movs	r1, #0
 800051c:	b11d      	cbz	r5, 8000526 <__udivmoddi4+0xa6>
 800051e:	40d3      	lsrs	r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	e9c5 3200 	strd	r3, r2, [r5]
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d905      	bls.n	800053a <__udivmoddi4+0xba>
 800052e:	b10d      	cbz	r5, 8000534 <__udivmoddi4+0xb4>
 8000530:	e9c5 0100 	strd	r0, r1, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	4608      	mov	r0, r1
 8000538:	e7f5      	b.n	8000526 <__udivmoddi4+0xa6>
 800053a:	fab3 f183 	clz	r1, r3
 800053e:	2900      	cmp	r1, #0
 8000540:	d146      	bne.n	80005d0 <__udivmoddi4+0x150>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d302      	bcc.n	800054c <__udivmoddi4+0xcc>
 8000546:	4290      	cmp	r0, r2
 8000548:	f0c0 80f0 	bcc.w	800072c <__udivmoddi4+0x2ac>
 800054c:	1a86      	subs	r6, r0, r2
 800054e:	eb64 0303 	sbc.w	r3, r4, r3
 8000552:	2001      	movs	r0, #1
 8000554:	2d00      	cmp	r5, #0
 8000556:	d0e6      	beq.n	8000526 <__udivmoddi4+0xa6>
 8000558:	e9c5 6300 	strd	r6, r3, [r5]
 800055c:	e7e3      	b.n	8000526 <__udivmoddi4+0xa6>
 800055e:	2a00      	cmp	r2, #0
 8000560:	f040 8090 	bne.w	8000684 <__udivmoddi4+0x204>
 8000564:	eba1 040c 	sub.w	r4, r1, ip
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	2101      	movs	r1, #1
 8000572:	fbb4 f6f8 	udiv	r6, r4, r8
 8000576:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057a:	fb08 4416 	mls	r4, r8, r6, r4
 800057e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000582:	fb07 f006 	mul.w	r0, r7, r6
 8000586:	4298      	cmp	r0, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x11c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000592:	d202      	bcs.n	800059a <__udivmoddi4+0x11a>
 8000594:	4298      	cmp	r0, r3
 8000596:	f200 80cd 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 800059a:	4626      	mov	r6, r4
 800059c:	1a1c      	subs	r4, r3, r0
 800059e:	fa1f f38e 	uxth.w	r3, lr
 80005a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005a6:	fb08 4410 	mls	r4, r8, r0, r4
 80005aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005ae:	fb00 f707 	mul.w	r7, r0, r7
 80005b2:	429f      	cmp	r7, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x148>
 80005b6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005be:	d202      	bcs.n	80005c6 <__udivmoddi4+0x146>
 80005c0:	429f      	cmp	r7, r3
 80005c2:	f200 80b0 	bhi.w	8000726 <__udivmoddi4+0x2a6>
 80005c6:	4620      	mov	r0, r4
 80005c8:	1bdb      	subs	r3, r3, r7
 80005ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005ce:	e7a5      	b.n	800051c <__udivmoddi4+0x9c>
 80005d0:	f1c1 0620 	rsb	r6, r1, #32
 80005d4:	408b      	lsls	r3, r1
 80005d6:	fa22 f706 	lsr.w	r7, r2, r6
 80005da:	431f      	orrs	r7, r3
 80005dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e0:	fa04 f301 	lsl.w	r3, r4, r1
 80005e4:	ea43 030c 	orr.w	r3, r3, ip
 80005e8:	40f4      	lsrs	r4, r6
 80005ea:	fa00 f801 	lsl.w	r8, r0, r1
 80005ee:	0c38      	lsrs	r0, r7, #16
 80005f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005f4:	fbb4 fef0 	udiv	lr, r4, r0
 80005f8:	fa1f fc87 	uxth.w	ip, r7
 80005fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000600:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000604:	fb0e f90c 	mul.w	r9, lr, ip
 8000608:	45a1      	cmp	r9, r4
 800060a:	fa02 f201 	lsl.w	r2, r2, r1
 800060e:	d90a      	bls.n	8000626 <__udivmoddi4+0x1a6>
 8000610:	193c      	adds	r4, r7, r4
 8000612:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000616:	f080 8084 	bcs.w	8000722 <__udivmoddi4+0x2a2>
 800061a:	45a1      	cmp	r9, r4
 800061c:	f240 8081 	bls.w	8000722 <__udivmoddi4+0x2a2>
 8000620:	f1ae 0e02 	sub.w	lr, lr, #2
 8000624:	443c      	add	r4, r7
 8000626:	eba4 0409 	sub.w	r4, r4, r9
 800062a:	fa1f f983 	uxth.w	r9, r3
 800062e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000632:	fb00 4413 	mls	r4, r0, r3, r4
 8000636:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800063a:	fb03 fc0c 	mul.w	ip, r3, ip
 800063e:	45a4      	cmp	ip, r4
 8000640:	d907      	bls.n	8000652 <__udivmoddi4+0x1d2>
 8000642:	193c      	adds	r4, r7, r4
 8000644:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000648:	d267      	bcs.n	800071a <__udivmoddi4+0x29a>
 800064a:	45a4      	cmp	ip, r4
 800064c:	d965      	bls.n	800071a <__udivmoddi4+0x29a>
 800064e:	3b02      	subs	r3, #2
 8000650:	443c      	add	r4, r7
 8000652:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000656:	fba0 9302 	umull	r9, r3, r0, r2
 800065a:	eba4 040c 	sub.w	r4, r4, ip
 800065e:	429c      	cmp	r4, r3
 8000660:	46ce      	mov	lr, r9
 8000662:	469c      	mov	ip, r3
 8000664:	d351      	bcc.n	800070a <__udivmoddi4+0x28a>
 8000666:	d04e      	beq.n	8000706 <__udivmoddi4+0x286>
 8000668:	b155      	cbz	r5, 8000680 <__udivmoddi4+0x200>
 800066a:	ebb8 030e 	subs.w	r3, r8, lr
 800066e:	eb64 040c 	sbc.w	r4, r4, ip
 8000672:	fa04 f606 	lsl.w	r6, r4, r6
 8000676:	40cb      	lsrs	r3, r1
 8000678:	431e      	orrs	r6, r3
 800067a:	40cc      	lsrs	r4, r1
 800067c:	e9c5 6400 	strd	r6, r4, [r5]
 8000680:	2100      	movs	r1, #0
 8000682:	e750      	b.n	8000526 <__udivmoddi4+0xa6>
 8000684:	f1c2 0320 	rsb	r3, r2, #32
 8000688:	fa20 f103 	lsr.w	r1, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	fa24 f303 	lsr.w	r3, r4, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	430c      	orrs	r4, r1
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a0:	fa1f f78c 	uxth.w	r7, ip
 80006a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a8:	fb08 3110 	mls	r1, r8, r0, r3
 80006ac:	0c23      	lsrs	r3, r4, #16
 80006ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b2:	fb00 f107 	mul.w	r1, r0, r7
 80006b6:	4299      	cmp	r1, r3
 80006b8:	d908      	bls.n	80006cc <__udivmoddi4+0x24c>
 80006ba:	eb1c 0303 	adds.w	r3, ip, r3
 80006be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006c2:	d22c      	bcs.n	800071e <__udivmoddi4+0x29e>
 80006c4:	4299      	cmp	r1, r3
 80006c6:	d92a      	bls.n	800071e <__udivmoddi4+0x29e>
 80006c8:	3802      	subs	r0, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006d4:	fb08 3311 	mls	r3, r8, r1, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb01 f307 	mul.w	r3, r1, r7
 80006e0:	42a3      	cmp	r3, r4
 80006e2:	d908      	bls.n	80006f6 <__udivmoddi4+0x276>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006ec:	d213      	bcs.n	8000716 <__udivmoddi4+0x296>
 80006ee:	42a3      	cmp	r3, r4
 80006f0:	d911      	bls.n	8000716 <__udivmoddi4+0x296>
 80006f2:	3902      	subs	r1, #2
 80006f4:	4464      	add	r4, ip
 80006f6:	1ae4      	subs	r4, r4, r3
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e739      	b.n	8000572 <__udivmoddi4+0xf2>
 80006fe:	4604      	mov	r4, r0
 8000700:	e6f0      	b.n	80004e4 <__udivmoddi4+0x64>
 8000702:	4608      	mov	r0, r1
 8000704:	e706      	b.n	8000514 <__udivmoddi4+0x94>
 8000706:	45c8      	cmp	r8, r9
 8000708:	d2ae      	bcs.n	8000668 <__udivmoddi4+0x1e8>
 800070a:	ebb9 0e02 	subs.w	lr, r9, r2
 800070e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000712:	3801      	subs	r0, #1
 8000714:	e7a8      	b.n	8000668 <__udivmoddi4+0x1e8>
 8000716:	4631      	mov	r1, r6
 8000718:	e7ed      	b.n	80006f6 <__udivmoddi4+0x276>
 800071a:	4603      	mov	r3, r0
 800071c:	e799      	b.n	8000652 <__udivmoddi4+0x1d2>
 800071e:	4630      	mov	r0, r6
 8000720:	e7d4      	b.n	80006cc <__udivmoddi4+0x24c>
 8000722:	46d6      	mov	lr, sl
 8000724:	e77f      	b.n	8000626 <__udivmoddi4+0x1a6>
 8000726:	4463      	add	r3, ip
 8000728:	3802      	subs	r0, #2
 800072a:	e74d      	b.n	80005c8 <__udivmoddi4+0x148>
 800072c:	4606      	mov	r6, r0
 800072e:	4623      	mov	r3, r4
 8000730:	4608      	mov	r0, r1
 8000732:	e70f      	b.n	8000554 <__udivmoddi4+0xd4>
 8000734:	3e02      	subs	r6, #2
 8000736:	4463      	add	r3, ip
 8000738:	e730      	b.n	800059c <__udivmoddi4+0x11c>
 800073a:	bf00      	nop

0800073c <__aeabi_idiv0>:
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <control_cmd_callback>:

extern unsigned int xSubscribersRecieved;

// Subscriptors callbacks
void control_cmd_callback(const void * xMsgIn)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  const autoware_control_msgs__msg__Control * control_cmd_msg_ = (const autoware_control_msgs__msg__Control * )xMsgIn;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	60fb      	str	r3, [r7, #12]
  xSubscribersRecieved = xSubscribersRecieved | (0x1 << 0);
 800074c:	4b05      	ldr	r3, [pc, #20]	@ (8000764 <control_cmd_callback+0x24>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	4a03      	ldr	r2, [pc, #12]	@ (8000764 <control_cmd_callback+0x24>)
 8000756:	6013      	str	r3, [r2, #0]
}
 8000758:	bf00      	nop
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	24032974 	.word	0x24032974

08000768 <gear_cmd_callback>:

void gear_cmd_callback(const void * xMsgIn)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  const autoware_vehicle_msgs__msg__GearCommand * gear_cmd_msg_ = (const autoware_vehicle_msgs__msg__GearCommand * )xMsgIn;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	60fb      	str	r3, [r7, #12]
  xSubscribersRecieved = xSubscribersRecieved | (0x1 << 1);
 8000774:	4b05      	ldr	r3, [pc, #20]	@ (800078c <gear_cmd_callback+0x24>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	4a03      	ldr	r2, [pc, #12]	@ (800078c <gear_cmd_callback+0x24>)
 800077e:	6013      	str	r3, [r2, #0]
}
 8000780:	bf00      	nop
 8000782:	3714      	adds	r7, #20
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	24032974 	.word	0x24032974

08000790 <turn_indicators_cmd_callback>:

void turn_indicators_cmd_callback(const void * xMsgIn)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  const autoware_vehicle_msgs__msg__TurnIndicatorsCommand * turn_indicators_cmd_msg_ = (const autoware_vehicle_msgs__msg__TurnIndicatorsCommand * )xMsgIn;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	60fb      	str	r3, [r7, #12]
  xSubscribersRecieved = xSubscribersRecieved | (0x1 << 2);
 800079c:	4b05      	ldr	r3, [pc, #20]	@ (80007b4 <turn_indicators_cmd_callback+0x24>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	4a03      	ldr	r2, [pc, #12]	@ (80007b4 <turn_indicators_cmd_callback+0x24>)
 80007a6:	6013      	str	r3, [r2, #0]
}
 80007a8:	bf00      	nop
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	24032974 	.word	0x24032974

080007b8 <hazard_lights_cmd_callback>:

void hazard_lights_cmd_callback(const void * xMsgIn)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  const autoware_vehicle_msgs__msg__HazardLightsCommand * hazard_lights_cmd_msg_ = (const autoware_vehicle_msgs__msg__HazardLightsCommand * )xMsgIn;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	60fb      	str	r3, [r7, #12]
  xSubscribersRecieved = xSubscribersRecieved | (0x1 << 3);
 80007c4:	4b05      	ldr	r3, [pc, #20]	@ (80007dc <hazard_lights_cmd_callback+0x24>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	4a03      	ldr	r2, [pc, #12]	@ (80007dc <hazard_lights_cmd_callback+0x24>)
 80007ce:	6013      	str	r3, [r2, #0]
}
 80007d0:	bf00      	nop
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	24032974 	.word	0x24032974

080007e0 <actuation_cmd_callback>:

void actuation_cmd_callback(const void * xMsgIn)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  const tier4_vehicle_msgs__msg__ActuationCommandStamped * actuation_cmd_msg_ = (const tier4_vehicle_msgs__msg__ActuationCommandStamped * )xMsgIn;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	60fb      	str	r3, [r7, #12]
  xSubscribersRecieved = xSubscribersRecieved | (0x1 << 4);
 80007ec:	4b05      	ldr	r3, [pc, #20]	@ (8000804 <actuation_cmd_callback+0x24>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f043 0310 	orr.w	r3, r3, #16
 80007f4:	4a03      	ldr	r2, [pc, #12]	@ (8000804 <actuation_cmd_callback+0x24>)
 80007f6:	6013      	str	r3, [r2, #0]
}
 80007f8:	bf00      	nop
 80007fa:	3714      	adds	r7, #20
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	24032974 	.word	0x24032974

08000808 <emergency_callback>:

void emergency_callback(const void * xMsgIn)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  const tier4_vehicle_msgs__msg__VehicleEmergencyStamped * emergency_msg_ = (const tier4_vehicle_msgs__msg__VehicleEmergencyStamped * )xMsgIn;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	60fb      	str	r3, [r7, #12]
  xSubscribersRecieved = xSubscribersRecieved | (0x1 << 5);
 8000814:	4b05      	ldr	r3, [pc, #20]	@ (800082c <emergency_callback+0x24>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f043 0320 	orr.w	r3, r3, #32
 800081c:	4a03      	ldr	r2, [pc, #12]	@ (800082c <emergency_callback+0x24>)
 800081e:	6013      	str	r3, [r2, #0]
}
 8000820:	bf00      	nop
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	24032974 	.word	0x24032974

08000830 <control_mode_cmd_callback>:

void control_mode_cmd_callback(const void * xRequestMsg, void * xResponseMsg)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
  const autoware_vehicle_msgs__srv__ControlModeCommand_Request * control_mode_request_msg_ = (const autoware_vehicle_msgs__srv__ControlModeCommand_Request * )xRequestMsg;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	60fb      	str	r3, [r7, #12]

  //xResponseMsg = &control_mode_response_msg_;
}
 800083e:	bf00      	nop
 8000840:	3714      	adds	r7, #20
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
	...

0800084c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	@ 0x28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000858:	f00b f99a 	bl	800bb90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800085c:	4b5a      	ldr	r3, [pc, #360]	@ (80009c8 <pvPortMallocMicroROS+0x17c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d101      	bne.n	8000868 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000864:	f000 f986 	bl	8000b74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000868:	4b58      	ldr	r3, [pc, #352]	@ (80009cc <pvPortMallocMicroROS+0x180>)
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4013      	ands	r3, r2
 8000870:	2b00      	cmp	r3, #0
 8000872:	f040 8090 	bne.w	8000996 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d01e      	beq.n	80008ba <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800087c:	2208      	movs	r2, #8
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4413      	add	r3, r2
 8000882:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f003 0307 	and.w	r3, r3, #7
 800088a:	2b00      	cmp	r3, #0
 800088c:	d015      	beq.n	80008ba <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	f023 0307 	bic.w	r3, r3, #7
 8000894:	3308      	adds	r3, #8
 8000896:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d00b      	beq.n	80008ba <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80008a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008a6:	f383 8811 	msr	BASEPRI, r3
 80008aa:	f3bf 8f6f 	isb	sy
 80008ae:	f3bf 8f4f 	dsb	sy
 80008b2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80008b4:	bf00      	nop
 80008b6:	bf00      	nop
 80008b8:	e7fd      	b.n	80008b6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d06a      	beq.n	8000996 <pvPortMallocMicroROS+0x14a>
 80008c0:	4b43      	ldr	r3, [pc, #268]	@ (80009d0 <pvPortMallocMicroROS+0x184>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d865      	bhi.n	8000996 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80008ca:	4b42      	ldr	r3, [pc, #264]	@ (80009d4 <pvPortMallocMicroROS+0x188>)
 80008cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80008ce:	4b41      	ldr	r3, [pc, #260]	@ (80009d4 <pvPortMallocMicroROS+0x188>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80008d4:	e004      	b.n	80008e0 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80008d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80008da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80008e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d903      	bls.n	80008f2 <pvPortMallocMicroROS+0xa6>
 80008ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d1f1      	bne.n	80008d6 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80008f2:	4b35      	ldr	r3, [pc, #212]	@ (80009c8 <pvPortMallocMicroROS+0x17c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d04c      	beq.n	8000996 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80008fc:	6a3b      	ldr	r3, [r7, #32]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2208      	movs	r2, #8
 8000902:	4413      	add	r3, r2
 8000904:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	6a3b      	ldr	r3, [r7, #32]
 800090c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800090e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000910:	685a      	ldr	r2, [r3, #4]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	1ad2      	subs	r2, r2, r3
 8000916:	2308      	movs	r3, #8
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	429a      	cmp	r2, r3
 800091c:	d920      	bls.n	8000960 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800091e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4413      	add	r3, r2
 8000924:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000926:	69bb      	ldr	r3, [r7, #24]
 8000928:	f003 0307 	and.w	r3, r3, #7
 800092c:	2b00      	cmp	r3, #0
 800092e:	d00b      	beq.n	8000948 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000934:	f383 8811 	msr	BASEPRI, r3
 8000938:	f3bf 8f6f 	isb	sy
 800093c:	f3bf 8f4f 	dsb	sy
 8000940:	613b      	str	r3, [r7, #16]
}
 8000942:	bf00      	nop
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800094a:	685a      	ldr	r2, [r3, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	1ad2      	subs	r2, r2, r3
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800095a:	69b8      	ldr	r0, [r7, #24]
 800095c:	f000 f96e 	bl	8000c3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000960:	4b1b      	ldr	r3, [pc, #108]	@ (80009d0 <pvPortMallocMicroROS+0x184>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	4a19      	ldr	r2, [pc, #100]	@ (80009d0 <pvPortMallocMicroROS+0x184>)
 800096c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800096e:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <pvPortMallocMicroROS+0x184>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	4b19      	ldr	r3, [pc, #100]	@ (80009d8 <pvPortMallocMicroROS+0x18c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	429a      	cmp	r2, r3
 8000978:	d203      	bcs.n	8000982 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800097a:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <pvPortMallocMicroROS+0x184>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a16      	ldr	r2, [pc, #88]	@ (80009d8 <pvPortMallocMicroROS+0x18c>)
 8000980:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000984:	685a      	ldr	r2, [r3, #4]
 8000986:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <pvPortMallocMicroROS+0x180>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	431a      	orrs	r2, r3
 800098c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800098e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000996:	f00b f909 	bl	800bbac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	f003 0307 	and.w	r3, r3, #7
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d00b      	beq.n	80009bc <pvPortMallocMicroROS+0x170>
	__asm volatile
 80009a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009a8:	f383 8811 	msr	BASEPRI, r3
 80009ac:	f3bf 8f6f 	isb	sy
 80009b0:	f3bf 8f4f 	dsb	sy
 80009b4:	60fb      	str	r3, [r7, #12]
}
 80009b6:	bf00      	nop
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80009bc:	69fb      	ldr	r3, [r7, #28]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3728      	adds	r7, #40	@ 0x28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	24032154 	.word	0x24032154
 80009cc:	24032160 	.word	0x24032160
 80009d0:	24032158 	.word	0x24032158
 80009d4:	2403214c 	.word	0x2403214c
 80009d8:	2403215c 	.word	0x2403215c

080009dc <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d04a      	beq.n	8000a84 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80009ee:	2308      	movs	r3, #8
 80009f0:	425b      	negs	r3, r3
 80009f2:	697a      	ldr	r2, [r7, #20]
 80009f4:	4413      	add	r3, r2
 80009f6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	685a      	ldr	r2, [r3, #4]
 8000a00:	4b22      	ldr	r3, [pc, #136]	@ (8000a8c <vPortFreeMicroROS+0xb0>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4013      	ands	r3, r2
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d10b      	bne.n	8000a22 <vPortFreeMicroROS+0x46>
	__asm volatile
 8000a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a0e:	f383 8811 	msr	BASEPRI, r3
 8000a12:	f3bf 8f6f 	isb	sy
 8000a16:	f3bf 8f4f 	dsb	sy
 8000a1a:	60fb      	str	r3, [r7, #12]
}
 8000a1c:	bf00      	nop
 8000a1e:	bf00      	nop
 8000a20:	e7fd      	b.n	8000a1e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d00b      	beq.n	8000a42 <vPortFreeMicroROS+0x66>
	__asm volatile
 8000a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a2e:	f383 8811 	msr	BASEPRI, r3
 8000a32:	f3bf 8f6f 	isb	sy
 8000a36:	f3bf 8f4f 	dsb	sy
 8000a3a:	60bb      	str	r3, [r7, #8]
}
 8000a3c:	bf00      	nop
 8000a3e:	bf00      	nop
 8000a40:	e7fd      	b.n	8000a3e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	685a      	ldr	r2, [r3, #4]
 8000a46:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <vPortFreeMicroROS+0xb0>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d019      	beq.n	8000a84 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d115      	bne.n	8000a84 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	685a      	ldr	r2, [r3, #4]
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <vPortFreeMicroROS+0xb0>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	43db      	mvns	r3, r3
 8000a62:	401a      	ands	r2, r3
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000a68:	f00b f892 	bl	800bb90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	685a      	ldr	r2, [r3, #4]
 8000a70:	4b07      	ldr	r3, [pc, #28]	@ (8000a90 <vPortFreeMicroROS+0xb4>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4413      	add	r3, r2
 8000a76:	4a06      	ldr	r2, [pc, #24]	@ (8000a90 <vPortFreeMicroROS+0xb4>)
 8000a78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000a7a:	6938      	ldr	r0, [r7, #16]
 8000a7c:	f000 f8de 	bl	8000c3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000a80:	f00b f894 	bl	800bbac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000a84:	bf00      	nop
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	24032160 	.word	0x24032160
 8000a90:	24032158 	.word	0x24032158

08000a94 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000a94:	b480      	push	{r7}
 8000a96:	b087      	sub	sp, #28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000aa0:	2308      	movs	r3, #8
 8000aa2:	425b      	negs	r3, r3
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	685a      	ldr	r2, [r3, #4]
 8000ab2:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <getBlockSize+0x38>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60fb      	str	r3, [r7, #12]

	return count;
 8000abc:	68fb      	ldr	r3, [r7, #12]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	371c      	adds	r7, #28
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	24032160 	.word	0x24032160

08000ad0 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000ada:	f00b f859 	bl	800bb90 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000ade:	6838      	ldr	r0, [r7, #0]
 8000ae0:	f7ff feb4 	bl	800084c <pvPortMallocMicroROS>
 8000ae4:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d017      	beq.n	8000b1c <pvPortReallocMicroROS+0x4c>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d014      	beq.n	8000b1c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff ffce 	bl	8000a94 <getBlockSize>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2208      	movs	r2, #8
 8000afc:	1a9b      	subs	r3, r3, r2
 8000afe:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000b00:	683a      	ldr	r2, [r7, #0]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d201      	bcs.n	8000b0c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	68b8      	ldr	r0, [r7, #8]
 8000b12:	f01c fbee 	bl	801d2f2 <memcpy>

		vPortFreeMicroROS(pv);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff ff60 	bl	80009dc <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000b1c:	f00b f846 	bl	800bbac <xTaskResumeAll>

	return newmem;
 8000b20:	68bb      	ldr	r3, [r7, #8]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000b34:	f00b f82c 	bl	800bb90 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	fb02 f303 	mul.w	r3, r2, r3
 8000b40:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000b42:	6978      	ldr	r0, [r7, #20]
 8000b44:	f7ff fe82 	bl	800084c <pvPortMallocMicroROS>
 8000b48:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000b4e:	e004      	b.n	8000b5a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	613a      	str	r2, [r7, #16]
 8000b56:	2200      	movs	r2, #0
 8000b58:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	1e5a      	subs	r2, r3, #1
 8000b5e:	617a      	str	r2, [r7, #20]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d1f5      	bne.n	8000b50 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000b64:	f00b f822 	bl	800bbac <xTaskResumeAll>
  	return mem;
 8000b68:	68fb      	ldr	r3, [r7, #12]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000b7a:	4b29      	ldr	r3, [pc, #164]	@ (8000c20 <prvHeapInit+0xac>)
 8000b7c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000b7e:	4b29      	ldr	r3, [pc, #164]	@ (8000c24 <prvHeapInit+0xb0>)
 8000b80:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	f003 0307 	and.w	r3, r3, #7
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d00c      	beq.n	8000ba6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	3307      	adds	r3, #7
 8000b90:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	f023 0307 	bic.w	r3, r3, #7
 8000b98:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	4a20      	ldr	r2, [pc, #128]	@ (8000c24 <prvHeapInit+0xb0>)
 8000ba2:	4413      	add	r3, r2
 8000ba4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000baa:	4a1f      	ldr	r2, [pc, #124]	@ (8000c28 <prvHeapInit+0xb4>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c28 <prvHeapInit+0xb4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	68ba      	ldr	r2, [r7, #8]
 8000bba:	4413      	add	r3, r2
 8000bbc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000bbe:	2208      	movs	r2, #8
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	1a9b      	subs	r3, r3, r2
 8000bc4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	f023 0307 	bic.w	r3, r3, #7
 8000bcc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	4a16      	ldr	r2, [pc, #88]	@ (8000c2c <prvHeapInit+0xb8>)
 8000bd2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000bd4:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <prvHeapInit+0xb8>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000bdc:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <prvHeapInit+0xb8>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	1ad2      	subs	r2, r2, r3
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <prvHeapInit+0xb8>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8000c30 <prvHeapInit+0xbc>)
 8000c00:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	4a0b      	ldr	r2, [pc, #44]	@ (8000c34 <prvHeapInit+0xc0>)
 8000c08:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <prvHeapInit+0xc4>)
 8000c0c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000c10:	601a      	str	r2, [r3, #0]
}
 8000c12:	bf00      	nop
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	00030d40 	.word	0x00030d40
 8000c24:	2400140c 	.word	0x2400140c
 8000c28:	2403214c 	.word	0x2403214c
 8000c2c:	24032154 	.word	0x24032154
 8000c30:	2403215c 	.word	0x2403215c
 8000c34:	24032158 	.word	0x24032158
 8000c38:	24032160 	.word	0x24032160

08000c3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000c44:	4b28      	ldr	r3, [pc, #160]	@ (8000ce8 <prvInsertBlockIntoFreeList+0xac>)
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	e002      	b.n	8000c50 <prvInsertBlockIntoFreeList+0x14>
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d8f7      	bhi.n	8000c4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	4413      	add	r3, r2
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d108      	bne.n	8000c7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	685a      	ldr	r2, [r3, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	441a      	add	r2, r3
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	441a      	add	r2, r3
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d118      	bne.n	8000cc4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <prvInsertBlockIntoFreeList+0xb0>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d00d      	beq.n	8000cba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	441a      	add	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	e008      	b.n	8000ccc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <prvInsertBlockIntoFreeList+0xb0>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	e003      	b.n	8000ccc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000ccc:	68fa      	ldr	r2, [r7, #12]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d002      	beq.n	8000cda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000cda:	bf00      	nop
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	2403214c 	.word	0x2403214c
 8000cec:	24032154 	.word	0x24032154

08000cf0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cf6:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <MX_DMA_Init+0x4c>)
 8000cf8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cfc:	4a0f      	ldr	r2, [pc, #60]	@ (8000d3c <MX_DMA_Init+0x4c>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d06:	4b0d      	ldr	r3, [pc, #52]	@ (8000d3c <MX_DMA_Init+0x4c>)
 8000d08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2105      	movs	r1, #5
 8000d18:	200b      	movs	r0, #11
 8000d1a:	f001 fb35 	bl	8002388 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d1e:	200b      	movs	r0, #11
 8000d20:	f001 fb4c 	bl	80023bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2105      	movs	r1, #5
 8000d28:	200c      	movs	r0, #12
 8000d2a:	f001 fb2d 	bl	8002388 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d2e:	200c      	movs	r0, #12
 8000d30:	f001 fb44 	bl	80023bc <HAL_NVIC_EnableIRQ>

}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	58024400 	.word	0x58024400

08000d40 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000d4e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000d50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d54:	4904      	ldr	r1, [pc, #16]	@ (8000d68 <cubemx_transport_open+0x28>)
 8000d56:	68f8      	ldr	r0, [r7, #12]
 8000d58:	f007 fda0 	bl	800889c <HAL_UART_Receive_DMA>
    return true;
 8000d5c:	2301      	movs	r3, #1
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	24032164 	.word	0x24032164

08000d6c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000d7a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000d7c:	68f8      	ldr	r0, [r7, #12]
 8000d7e:	f007 fdd9 	bl	8008934 <HAL_UART_DMAStop>
    return true;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
 8000d98:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000da0:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000da8:	2b20      	cmp	r3, #32
 8000daa:	d11b      	bne.n	8000de4 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	461a      	mov	r2, r3
 8000db2:	68b9      	ldr	r1, [r7, #8]
 8000db4:	6978      	ldr	r0, [r7, #20]
 8000db6:	f007 fcf1 	bl	800879c <HAL_UART_Transmit_DMA>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000dbe:	e002      	b.n	8000dc6 <cubemx_transport_write+0x3a>
            osDelay(1);
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f009 fe83 	bl	800aacc <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000dc6:	7cfb      	ldrb	r3, [r7, #19]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d104      	bne.n	8000dd6 <cubemx_transport_write+0x4a>
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dd2:	2b20      	cmp	r3, #32
 8000dd4:	d1f4      	bne.n	8000dc0 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000dd6:	7cfb      	ldrb	r3, [r7, #19]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d101      	bne.n	8000de0 <cubemx_transport_write+0x54>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	e002      	b.n	8000de6 <cubemx_transport_write+0x5a>
 8000de0:	2300      	movs	r3, #0
 8000de2:	e000      	b.n	8000de6 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000de4:	2300      	movs	r3, #0
    }
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
 8000dfc:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000e04:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e0a:	b672      	cpsid	i
}
 8000e0c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a5a      	ldr	r2, [pc, #360]	@ (8000f80 <cubemx_transport_read+0x190>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d068      	beq.n	8000eee <cubemx_transport_read+0xfe>
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a57      	ldr	r2, [pc, #348]	@ (8000f84 <cubemx_transport_read+0x194>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d061      	beq.n	8000eee <cubemx_transport_read+0xfe>
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a55      	ldr	r2, [pc, #340]	@ (8000f88 <cubemx_transport_read+0x198>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d05a      	beq.n	8000eee <cubemx_transport_read+0xfe>
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a52      	ldr	r2, [pc, #328]	@ (8000f8c <cubemx_transport_read+0x19c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d053      	beq.n	8000eee <cubemx_transport_read+0xfe>
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a50      	ldr	r2, [pc, #320]	@ (8000f90 <cubemx_transport_read+0x1a0>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d04c      	beq.n	8000eee <cubemx_transport_read+0xfe>
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a4d      	ldr	r2, [pc, #308]	@ (8000f94 <cubemx_transport_read+0x1a4>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d045      	beq.n	8000eee <cubemx_transport_read+0xfe>
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a4b      	ldr	r2, [pc, #300]	@ (8000f98 <cubemx_transport_read+0x1a8>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d03e      	beq.n	8000eee <cubemx_transport_read+0xfe>
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a48      	ldr	r2, [pc, #288]	@ (8000f9c <cubemx_transport_read+0x1ac>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d037      	beq.n	8000eee <cubemx_transport_read+0xfe>
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a46      	ldr	r2, [pc, #280]	@ (8000fa0 <cubemx_transport_read+0x1b0>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d030      	beq.n	8000eee <cubemx_transport_read+0xfe>
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a43      	ldr	r2, [pc, #268]	@ (8000fa4 <cubemx_transport_read+0x1b4>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d029      	beq.n	8000eee <cubemx_transport_read+0xfe>
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a41      	ldr	r2, [pc, #260]	@ (8000fa8 <cubemx_transport_read+0x1b8>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d022      	beq.n	8000eee <cubemx_transport_read+0xfe>
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a3e      	ldr	r2, [pc, #248]	@ (8000fac <cubemx_transport_read+0x1bc>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d01b      	beq.n	8000eee <cubemx_transport_read+0xfe>
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a3c      	ldr	r2, [pc, #240]	@ (8000fb0 <cubemx_transport_read+0x1c0>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d014      	beq.n	8000eee <cubemx_transport_read+0xfe>
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a39      	ldr	r2, [pc, #228]	@ (8000fb4 <cubemx_transport_read+0x1c4>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d00d      	beq.n	8000eee <cubemx_transport_read+0xfe>
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a37      	ldr	r2, [pc, #220]	@ (8000fb8 <cubemx_transport_read+0x1c8>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d006      	beq.n	8000eee <cubemx_transport_read+0xfe>
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a34      	ldr	r2, [pc, #208]	@ (8000fbc <cubemx_transport_read+0x1cc>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d107      	bne.n	8000efe <cubemx_transport_read+0x10e>
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000efc:	e006      	b.n	8000f0c <cubemx_transport_read+0x11c>
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000f0c:	4a2c      	ldr	r2, [pc, #176]	@ (8000fc0 <cubemx_transport_read+0x1d0>)
 8000f0e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000f10:	b662      	cpsie	i
}
 8000f12:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	3301      	adds	r3, #1
 8000f18:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	f009 fdd6 	bl	800aacc <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000f20:	4b28      	ldr	r3, [pc, #160]	@ (8000fc4 <cubemx_transport_read+0x1d4>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b26      	ldr	r3, [pc, #152]	@ (8000fc0 <cubemx_transport_read+0x1d0>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d104      	bne.n	8000f36 <cubemx_transport_read+0x146>
 8000f2c:	69fa      	ldr	r2, [r7, #28]
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	f6ff af6a 	blt.w	8000e0a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000f3a:	e011      	b.n	8000f60 <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 8000f3c:	4b21      	ldr	r3, [pc, #132]	@ (8000fc4 <cubemx_transport_read+0x1d4>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	440b      	add	r3, r1
 8000f46:	4920      	ldr	r1, [pc, #128]	@ (8000fc8 <cubemx_transport_read+0x1d8>)
 8000f48:	5c8a      	ldrb	r2, [r1, r2]
 8000f4a:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc4 <cubemx_transport_read+0x1d4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	3301      	adds	r3, #1
 8000f52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f56:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc4 <cubemx_transport_read+0x1d4>)
 8000f58:	6013      	str	r3, [r2, #0]
        wrote++;
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000f60:	4b18      	ldr	r3, [pc, #96]	@ (8000fc4 <cubemx_transport_read+0x1d4>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b16      	ldr	r3, [pc, #88]	@ (8000fc0 <cubemx_transport_read+0x1d0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d003      	beq.n	8000f74 <cubemx_transport_read+0x184>
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d3e3      	bcc.n	8000f3c <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 8000f74:	69bb      	ldr	r3, [r7, #24]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3720      	adds	r7, #32
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40020010 	.word	0x40020010
 8000f84:	40020028 	.word	0x40020028
 8000f88:	40020040 	.word	0x40020040
 8000f8c:	40020058 	.word	0x40020058
 8000f90:	40020070 	.word	0x40020070
 8000f94:	40020088 	.word	0x40020088
 8000f98:	400200a0 	.word	0x400200a0
 8000f9c:	400200b8 	.word	0x400200b8
 8000fa0:	40020410 	.word	0x40020410
 8000fa4:	40020428 	.word	0x40020428
 8000fa8:	40020440 	.word	0x40020440
 8000fac:	40020458 	.word	0x40020458
 8000fb0:	40020470 	.word	0x40020470
 8000fb4:	40020488 	.word	0x40020488
 8000fb8:	400204a0 	.word	0x400204a0
 8000fbc:	400204b8 	.word	0x400204b8
 8000fc0:	24032968 	.word	0x24032968
 8000fc4:	24032964 	.word	0x24032964
 8000fc8:	24032164 	.word	0x24032164

08000fcc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskControle */
  TaskControleHandle = osThreadNew(StartTaskControle, NULL, &TaskControle_attributes);
 8000fd0:	4a08      	ldr	r2, [pc, #32]	@ (8000ff4 <MX_FREERTOS_Init+0x28>)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4808      	ldr	r0, [pc, #32]	@ (8000ff8 <MX_FREERTOS_Init+0x2c>)
 8000fd6:	f009 fce7 	bl	800a9a8 <osThreadNew>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a07      	ldr	r2, [pc, #28]	@ (8000ffc <MX_FREERTOS_Init+0x30>)
 8000fde:	6013      	str	r3, [r2, #0]

  /* creation of TaskMicroAutowa */
  TaskMicroAutowaHandle = osThreadNew(StartMicroAutoware, NULL, &TaskMicroAutowa_attributes);
 8000fe0:	4a07      	ldr	r2, [pc, #28]	@ (8001000 <MX_FREERTOS_Init+0x34>)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4807      	ldr	r0, [pc, #28]	@ (8001004 <MX_FREERTOS_Init+0x38>)
 8000fe6:	f009 fcdf 	bl	800a9a8 <osThreadNew>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a06      	ldr	r2, [pc, #24]	@ (8001008 <MX_FREERTOS_Init+0x3c>)
 8000fee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	0801e1f4 	.word	0x0801e1f4
 8000ff8:	08001e99 	.word	0x08001e99
 8000ffc:	2403296c 	.word	0x2403296c
 8001000:	0801e218 	.word	0x0801e218
 8001004:	08001439 	.word	0x08001439
 8001008:	24032970 	.word	0x24032970

0800100c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08c      	sub	sp, #48	@ 0x30
 8001010:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
 8001020:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001022:	4b8f      	ldr	r3, [pc, #572]	@ (8001260 <MX_GPIO_Init+0x254>)
 8001024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001028:	4a8d      	ldr	r2, [pc, #564]	@ (8001260 <MX_GPIO_Init+0x254>)
 800102a:	f043 0304 	orr.w	r3, r3, #4
 800102e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001032:	4b8b      	ldr	r3, [pc, #556]	@ (8001260 <MX_GPIO_Init+0x254>)
 8001034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	61bb      	str	r3, [r7, #24]
 800103e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001040:	4b87      	ldr	r3, [pc, #540]	@ (8001260 <MX_GPIO_Init+0x254>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001046:	4a86      	ldr	r2, [pc, #536]	@ (8001260 <MX_GPIO_Init+0x254>)
 8001048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800104c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001050:	4b83      	ldr	r3, [pc, #524]	@ (8001260 <MX_GPIO_Init+0x254>)
 8001052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	4b80      	ldr	r3, [pc, #512]	@ (8001260 <MX_GPIO_Init+0x254>)
 8001060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001064:	4a7e      	ldr	r2, [pc, #504]	@ (8001260 <MX_GPIO_Init+0x254>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800106e:	4b7c      	ldr	r3, [pc, #496]	@ (8001260 <MX_GPIO_Init+0x254>)
 8001070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107c:	4b78      	ldr	r3, [pc, #480]	@ (8001260 <MX_GPIO_Init+0x254>)
 800107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001082:	4a77      	ldr	r2, [pc, #476]	@ (8001260 <MX_GPIO_Init+0x254>)
 8001084:	f043 0302 	orr.w	r3, r3, #2
 8001088:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800108c:	4b74      	ldr	r3, [pc, #464]	@ (8001260 <MX_GPIO_Init+0x254>)
 800108e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800109a:	4b71      	ldr	r3, [pc, #452]	@ (8001260 <MX_GPIO_Init+0x254>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a0:	4a6f      	ldr	r2, [pc, #444]	@ (8001260 <MX_GPIO_Init+0x254>)
 80010a2:	f043 0308 	orr.w	r3, r3, #8
 80010a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010aa:	4b6d      	ldr	r3, [pc, #436]	@ (8001260 <MX_GPIO_Init+0x254>)
 80010ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b0:	f003 0308 	and.w	r3, r3, #8
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010b8:	4b69      	ldr	r3, [pc, #420]	@ (8001260 <MX_GPIO_Init+0x254>)
 80010ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010be:	4a68      	ldr	r2, [pc, #416]	@ (8001260 <MX_GPIO_Init+0x254>)
 80010c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010c8:	4b65      	ldr	r3, [pc, #404]	@ (8001260 <MX_GPIO_Init+0x254>)
 80010ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010d6:	4b62      	ldr	r3, [pc, #392]	@ (8001260 <MX_GPIO_Init+0x254>)
 80010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010dc:	4a60      	ldr	r2, [pc, #384]	@ (8001260 <MX_GPIO_Init+0x254>)
 80010de:	f043 0310 	orr.w	r3, r3, #16
 80010e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010e6:	4b5e      	ldr	r3, [pc, #376]	@ (8001260 <MX_GPIO_Init+0x254>)
 80010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ec:	f003 0310 	and.w	r3, r3, #16
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	f244 0101 	movw	r1, #16385	@ 0x4001
 80010fa:	485a      	ldr	r0, [pc, #360]	@ (8001264 <MX_GPIO_Init+0x258>)
 80010fc:	f004 f964 	bl	80053c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001106:	4858      	ldr	r0, [pc, #352]	@ (8001268 <MX_GPIO_Init+0x25c>)
 8001108:	f004 f95e 	bl	80053c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	2102      	movs	r1, #2
 8001110:	4856      	ldr	r0, [pc, #344]	@ (800126c <MX_GPIO_Init+0x260>)
 8001112:	f004 f959 	bl	80053c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001116:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800111a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111c:	2300      	movs	r3, #0
 800111e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	4619      	mov	r1, r3
 800112a:	4851      	ldr	r0, [pc, #324]	@ (8001270 <MX_GPIO_Init+0x264>)
 800112c:	f003 ff9c 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001130:	2332      	movs	r3, #50	@ 0x32
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001140:	230b      	movs	r3, #11
 8001142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4619      	mov	r1, r3
 800114a:	4849      	ldr	r0, [pc, #292]	@ (8001270 <MX_GPIO_Init+0x264>)
 800114c:	f003 ff8c 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001150:	2386      	movs	r3, #134	@ 0x86
 8001152:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001160:	230b      	movs	r3, #11
 8001162:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	4619      	mov	r1, r3
 800116a:	4842      	ldr	r0, [pc, #264]	@ (8001274 <MX_GPIO_Init+0x268>)
 800116c:	f003 ff7c 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001170:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	4619      	mov	r1, r3
 8001188:	4836      	ldr	r0, [pc, #216]	@ (8001264 <MX_GPIO_Init+0x258>)
 800118a:	f003 ff6d 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800118e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011a0:	230b      	movs	r3, #11
 80011a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	4619      	mov	r1, r3
 80011aa:	482e      	ldr	r0, [pc, #184]	@ (8001264 <MX_GPIO_Init+0x258>)
 80011ac:	f003 ff5c 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80011b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	4619      	mov	r1, r3
 80011c8:	4827      	ldr	r0, [pc, #156]	@ (8001268 <MX_GPIO_Init+0x25c>)
 80011ca:	f003 ff4d 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80011ce:	2380      	movs	r3, #128	@ 0x80
 80011d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	4619      	mov	r1, r3
 80011e2:	4825      	ldr	r0, [pc, #148]	@ (8001278 <MX_GPIO_Init+0x26c>)
 80011e4:	f003 ff40 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80011e8:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80011ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80011fa:	230a      	movs	r3, #10
 80011fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	4619      	mov	r1, r3
 8001204:	481b      	ldr	r0, [pc, #108]	@ (8001274 <MX_GPIO_Init+0x268>)
 8001206:	f003 ff2f 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800120a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800120e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800121c:	230b      	movs	r3, #11
 800121e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	4619      	mov	r1, r3
 8001226:	4814      	ldr	r0, [pc, #80]	@ (8001278 <MX_GPIO_Init+0x26c>)
 8001228:	f003 ff1e 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800122c:	2302      	movs	r3, #2
 800122e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001230:	2301      	movs	r3, #1
 8001232:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	4619      	mov	r1, r3
 8001242:	480a      	ldr	r0, [pc, #40]	@ (800126c <MX_GPIO_Init+0x260>)
 8001244:	f003 ff10 	bl	8005068 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 7, 0);
 8001248:	2200      	movs	r2, #0
 800124a:	2107      	movs	r1, #7
 800124c:	2017      	movs	r0, #23
 800124e:	f001 f89b 	bl	8002388 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001252:	2017      	movs	r0, #23
 8001254:	f001 f8b2 	bl	80023bc <HAL_NVIC_EnableIRQ>

}
 8001258:	bf00      	nop
 800125a:	3730      	adds	r7, #48	@ 0x30
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	58024400 	.word	0x58024400
 8001264:	58020400 	.word	0x58020400
 8001268:	58020c00 	.word	0x58020c00
 800126c:	58021000 	.word	0x58021000
 8001270:	58020800 	.word	0x58020800
 8001274:	58020000 	.word	0x58020000
 8001278:	58021800 	.word	0x58021800

0800127c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001280:	f000 ff62 	bl	8002148 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001284:	f000 f80e 	bl	80012a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001288:	f7ff fec0 	bl	800100c <MX_GPIO_Init>
  MX_DMA_Init();
 800128c:	f7ff fd30 	bl	8000cf0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001290:	f000 fe0c 	bl	8001eac <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001294:	f009 fb3e 	bl	800a914 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001298:	f7ff fe98 	bl	8000fcc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800129c:	f009 fb5e 	bl	800a95c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <main+0x24>

080012a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b09e      	sub	sp, #120	@ 0x78
 80012a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ae:	224c      	movs	r2, #76	@ 0x4c
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f01b fefe 	bl	801d0b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	2220      	movs	r2, #32
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f01b fef7 	bl	801d0b4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80012c6:	2002      	movs	r0, #2
 80012c8:	f004 f8bc 	bl	8005444 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012cc:	2300      	movs	r3, #0
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	4b49      	ldr	r3, [pc, #292]	@ (80013f8 <SystemClock_Config+0x154>)
 80012d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d4:	4a48      	ldr	r2, [pc, #288]	@ (80013f8 <SystemClock_Config+0x154>)
 80012d6:	f023 0301 	bic.w	r3, r3, #1
 80012da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80012dc:	4b46      	ldr	r3, [pc, #280]	@ (80013f8 <SystemClock_Config+0x154>)
 80012de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	4b45      	ldr	r3, [pc, #276]	@ (80013fc <SystemClock_Config+0x158>)
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	4a44      	ldr	r2, [pc, #272]	@ (80013fc <SystemClock_Config+0x158>)
 80012ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012f0:	6193      	str	r3, [r2, #24]
 80012f2:	4b42      	ldr	r3, [pc, #264]	@ (80013fc <SystemClock_Config+0x158>)
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012fe:	bf00      	nop
 8001300:	4b3e      	ldr	r3, [pc, #248]	@ (80013fc <SystemClock_Config+0x158>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001308:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800130c:	d1f8      	bne.n	8001300 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	4b3c      	ldr	r3, [pc, #240]	@ (8001400 <SystemClock_Config+0x15c>)
 8001310:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001314:	4a3a      	ldr	r2, [pc, #232]	@ (8001400 <SystemClock_Config+0x15c>)
 8001316:	f043 0302 	orr.w	r3, r3, #2
 800131a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800131e:	4b38      	ldr	r3, [pc, #224]	@ (8001400 <SystemClock_Config+0x15c>)
 8001320:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800132c:	2300      	movs	r3, #0
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	4b32      	ldr	r3, [pc, #200]	@ (80013fc <SystemClock_Config+0x158>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a31      	ldr	r2, [pc, #196]	@ (80013fc <SystemClock_Config+0x158>)
 8001336:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b2f      	ldr	r3, [pc, #188]	@ (80013fc <SystemClock_Config+0x158>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	4b2c      	ldr	r3, [pc, #176]	@ (80013f8 <SystemClock_Config+0x154>)
 8001348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800134a:	4a2b      	ldr	r2, [pc, #172]	@ (80013f8 <SystemClock_Config+0x154>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001352:	4b29      	ldr	r3, [pc, #164]	@ (80013f8 <SystemClock_Config+0x154>)
 8001354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800135e:	bf00      	nop
 8001360:	4b26      	ldr	r3, [pc, #152]	@ (80013fc <SystemClock_Config+0x158>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001368:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800136c:	d1f8      	bne.n	8001360 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 800136e:	2310      	movs	r3, #16
 8001370:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8001372:	2380      	movs	r3, #128	@ 0x80
 8001374:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8001376:	2320      	movs	r3, #32
 8001378:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800137a:	2302      	movs	r3, #2
 800137c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 800137e:	2301      	movs	r3, #1
 8001380:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001382:	2301      	movs	r3, #1
 8001384:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001386:	23f0      	movs	r3, #240	@ 0xf0
 8001388:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800138a:	2302      	movs	r3, #2
 800138c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800138e:	2304      	movs	r3, #4
 8001390:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001392:	2302      	movs	r3, #2
 8001394:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001396:	2308      	movs	r3, #8
 8001398:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800139a:	2300      	movs	r3, #0
 800139c:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013a6:	4618      	mov	r0, r3
 80013a8:	f004 f886 	bl	80054b8 <HAL_RCC_OscConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0x112>
  {
    Error_Handler();
 80013b2:	f000 f839 	bl	8001428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b6:	233f      	movs	r3, #63	@ 0x3f
 80013b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ba:	2303      	movs	r3, #3
 80013bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80013c2:	2308      	movs	r3, #8
 80013c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80013c6:	2340      	movs	r3, #64	@ 0x40
 80013c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80013ca:	2340      	movs	r3, #64	@ 0x40
 80013cc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80013ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013d2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013d4:	2340      	movs	r3, #64	@ 0x40
 80013d6:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	2104      	movs	r1, #4
 80013de:	4618      	mov	r0, r3
 80013e0:	f004 fcc4 	bl	8005d6c <HAL_RCC_ClockConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0x14a>
  {
    Error_Handler();
 80013ea:	f000 f81d 	bl	8001428 <Error_Handler>
  }
}
 80013ee:	bf00      	nop
 80013f0:	3778      	adds	r7, #120	@ 0x78
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	58000400 	.word	0x58000400
 80013fc:	58024800 	.word	0x58024800
 8001400:	58024400 	.word	0x58024400

08001404 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a04      	ldr	r2, [pc, #16]	@ (8001424 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d101      	bne.n	800141a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001416:	f000 fed3 	bl	80021c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40001000 	.word	0x40001000

08001428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800142c:	b672      	cpsid	i
}
 800142e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <Error_Handler+0x8>
 8001434:	0000      	movs	r0, r0
	...

08001438 <StartMicroAutoware>:
#include <microAutoware.h>

unsigned int xSubscribersRecieved = 0;

void StartMicroAutoware(void *argument)
{
 8001438:	b5b0      	push	{r4, r5, r7, lr}
 800143a:	f5ad 7d48 	sub.w	sp, sp, #800	@ 0x320
 800143e:	af02      	add	r7, sp, #8
 8001440:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001444:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8001448:	6018      	str	r0, [r3, #0]
  // Variables -- END

  // micro-ROS configuration

  // Setting transport layer
  rmw_uros_set_custom_transport(
 800144a:	4bad      	ldr	r3, [pc, #692]	@ (8001700 <StartMicroAutoware+0x2c8>)
 800144c:	9301      	str	r3, [sp, #4]
 800144e:	4bad      	ldr	r3, [pc, #692]	@ (8001704 <StartMicroAutoware+0x2cc>)
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	4bad      	ldr	r3, [pc, #692]	@ (8001708 <StartMicroAutoware+0x2d0>)
 8001454:	4aad      	ldr	r2, [pc, #692]	@ (800170c <StartMicroAutoware+0x2d4>)
 8001456:	49ae      	ldr	r1, [pc, #696]	@ (8001710 <StartMicroAutoware+0x2d8>)
 8001458:	2001      	movs	r0, #1
 800145a:	f00f fd75 	bl	8010f48 <rmw_uros_set_custom_transport>
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  // Setting memory allocation methods
  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800145e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001462:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001466:	4618      	mov	r0, r3
 8001468:	f00f fca8 	bl	8010dbc <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 800146c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001470:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001474:	4aa7      	ldr	r2, [pc, #668]	@ (8001714 <StartMicroAutoware+0x2dc>)
 8001476:	601a      	str	r2, [r3, #0]
  freeRTOS_allocator.deallocate = microros_deallocate;
 8001478:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800147c:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001480:	4aa5      	ldr	r2, [pc, #660]	@ (8001718 <StartMicroAutoware+0x2e0>)
 8001482:	605a      	str	r2, [r3, #4]
  freeRTOS_allocator.reallocate = microros_reallocate;
 8001484:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001488:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 800148c:	4aa3      	ldr	r2, [pc, #652]	@ (800171c <StartMicroAutoware+0x2e4>)
 800148e:	609a      	str	r2, [r3, #8]
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001490:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001494:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001498:	4aa1      	ldr	r2, [pc, #644]	@ (8001720 <StartMicroAutoware+0x2e8>)
 800149a:	60da      	str	r2, [r3, #12]

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 800149c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80014a0:	4618      	mov	r0, r3
 80014a2:	f00f fc99 	bl	8010dd8 <rcutils_set_default_allocator>
    //printf_("Error on default allocators (line %d)\n", __LINE__);
  }

  // micro-ROS app

  executor = rclc_executor_get_zero_initialized_executor();
 80014a6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80014aa:	f5a3 741c 	sub.w	r4, r3, #624	@ 0x270
 80014ae:	463b      	mov	r3, r7
 80014b0:	4618      	mov	r0, r3
 80014b2:	f00f f813 	bl	80104dc <rclc_executor_get_zero_initialized_executor>
 80014b6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80014ba:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 80014be:	4620      	mov	r0, r4
 80014c0:	4619      	mov	r1, r3
 80014c2:	2388      	movs	r3, #136	@ 0x88
 80014c4:	461a      	mov	r2, r3
 80014c6:	f01b ff14 	bl	801d2f2 <memcpy>

  allocator = rcl_get_default_allocator();
 80014ca:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80014ce:	f5a3 74f2 	sub.w	r4, r3, #484	@ 0x1e4
 80014d2:	463b      	mov	r3, r7
 80014d4:	4618      	mov	r0, r3
 80014d6:	f00f fc9d 	bl	8010e14 <rcutils_get_default_allocator>
 80014da:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80014de:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 80014e2:	461d      	mov	r5, r3
 80014e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e8:	682b      	ldr	r3, [r5, #0]
 80014ea:	6023      	str	r3, [r4, #0]

  //create init_options
  rclc_support_init(&support, 0, NULL, &allocator);
 80014ec:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80014f0:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 80014f4:	2200      	movs	r2, #0
 80014f6:	2100      	movs	r1, #0
 80014f8:	f00f fb1e 	bl	8010b38 <rclc_support_init>

  // create node
  rclc_node_init_default(&VehicleInterfaceNode, NODE_NAME, "", &support);
 80014fc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001500:	f507 70be 	add.w	r0, r7, #380	@ 0x17c
 8001504:	4a87      	ldr	r2, [pc, #540]	@ (8001724 <StartMicroAutoware+0x2ec>)
 8001506:	4988      	ldr	r1, [pc, #544]	@ (8001728 <StartMicroAutoware+0x2f0>)
 8001508:	f00f fb60 	bl	8010bcc <rclc_node_init_default>

  // create executor
  rclc_executor_init(&executor, &support.context, 1, &allocator);
 800150c:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001510:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8001514:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001518:	2201      	movs	r2, #1
 800151a:	f00e ffe9 	bl	80104f0 <rclc_executor_init>


  // create subscribers
  // TODO set QoS
  rclc_subscription_init_default(
 800151e:	f00b ffd5 	bl	800d4cc <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>
 8001522:	4602      	mov	r2, r0
 8001524:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001528:	f507 7045 	add.w	r0, r7, #788	@ 0x314
 800152c:	4b7f      	ldr	r3, [pc, #508]	@ (800172c <StartMicroAutoware+0x2f4>)
 800152e:	f00f fc03 	bl	8010d38 <rclc_subscription_init_default>
    		&control_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_control_msgs, msg, Control),
    		"/control/command/control_cmd");

  rclc_subscription_init_default(
 8001532:	f00c fae1 	bl	800daf8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>
 8001536:	4602      	mov	r2, r0
 8001538:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 800153c:	f507 7044 	add.w	r0, r7, #784	@ 0x310
 8001540:	4b7b      	ldr	r3, [pc, #492]	@ (8001730 <StartMicroAutoware+0x2f8>)
 8001542:	f00f fbf9 	bl	8010d38 <rclc_subscription_init_default>
    		&gear_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, GearCommand),
    		"/control/command/gear_cmd");

  rclc_subscription_init_default(
 8001546:	f00c fb4f 	bl	800dbe8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>
 800154a:	4602      	mov	r2, r0
 800154c:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001550:	f507 7043 	add.w	r0, r7, #780	@ 0x30c
 8001554:	4b77      	ldr	r3, [pc, #476]	@ (8001734 <StartMicroAutoware+0x2fc>)
 8001556:	f00f fbef 	bl	8010d38 <rclc_subscription_init_default>
    		&turn_indicators_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, TurnIndicatorsCommand),
    		"/control/command/turn_indicators_cmd");

  rclc_subscription_init_default(
 800155a:	f00c fafd 	bl	800db58 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>
 800155e:	4602      	mov	r2, r0
 8001560:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001564:	f507 7042 	add.w	r0, r7, #776	@ 0x308
 8001568:	4b73      	ldr	r3, [pc, #460]	@ (8001738 <StartMicroAutoware+0x300>)
 800156a:	f00f fbe5 	bl	8010d38 <rclc_subscription_init_default>
    		&hazard_lights_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, HazardLightsCommand ),
    		"/control/command/hazard_lights_cmd");

  rclc_subscription_init_default(
 800156e:	f00f fe25 	bl	80111bc <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>
 8001572:	4602      	mov	r2, r0
 8001574:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001578:	f507 7041 	add.w	r0, r7, #772	@ 0x304
 800157c:	4b6f      	ldr	r3, [pc, #444]	@ (800173c <StartMicroAutoware+0x304>)
 800157e:	f00f fbdb 	bl	8010d38 <rclc_subscription_init_default>
    		&actuation_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, ActuationCommandStamped),
    		"/control/command/actuation_cmd");

  rclc_subscription_init_default(
 8001582:	f00f fe63 	bl	801124c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>
 8001586:	4602      	mov	r2, r0
 8001588:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 800158c:	f507 7040 	add.w	r0, r7, #768	@ 0x300
 8001590:	4b6b      	ldr	r3, [pc, #428]	@ (8001740 <StartMicroAutoware+0x308>)
 8001592:	f00f fbd1 	bl	8010d38 <rclc_subscription_init_default>
    		ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, VehicleEmergencyStamped),
    		"/control/command/emergency_cmd");

  // create publishers
  // TODO set QoS
  rclc_publisher_init_default(
 8001596:	f00c fa97 	bl	800dac8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>
 800159a:	4602      	mov	r2, r0
 800159c:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80015a0:	f507 703f 	add.w	r0, r7, #764	@ 0x2fc
 80015a4:	4b67      	ldr	r3, [pc, #412]	@ (8001744 <StartMicroAutoware+0x30c>)
 80015a6:	f00f fb53 	bl	8010c50 <rclc_publisher_init_default>
		  	&control_mode_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, ControlModeReport),
			"/vehicle/status/control_mode");

  rclc_publisher_init_default(
 80015aa:	f00c fb4d 	bl	800dc48 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>
 80015ae:	4602      	mov	r2, r0
 80015b0:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80015b4:	f507 703e 	add.w	r0, r7, #760	@ 0x2f8
 80015b8:	4b63      	ldr	r3, [pc, #396]	@ (8001748 <StartMicroAutoware+0x310>)
 80015ba:	f00f fb49 	bl	8010c50 <rclc_publisher_init_default>
		  	&vehicle_twist_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, VelocityReport),
			"/vehicle/status/velocity_status");

  rclc_publisher_init_default(
 80015be:	f00c fafb 	bl	800dbb8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>
 80015c2:	4602      	mov	r2, r0
 80015c4:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80015c8:	f507 703d 	add.w	r0, r7, #756	@ 0x2f4
 80015cc:	4b5f      	ldr	r3, [pc, #380]	@ (800174c <StartMicroAutoware+0x314>)
 80015ce:	f00f fb3f 	bl	8010c50 <rclc_publisher_init_default>
			&steering_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, SteeringReport),
			"/vehicle/status/steering_status");

  rclc_publisher_init_default(
 80015d2:	f00c faa9 	bl	800db28 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>
 80015d6:	4602      	mov	r2, r0
 80015d8:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80015dc:	f507 703c 	add.w	r0, r7, #752	@ 0x2f0
 80015e0:	4b5b      	ldr	r3, [pc, #364]	@ (8001750 <StartMicroAutoware+0x318>)
 80015e2:	f00f fb35 	bl	8010c50 <rclc_publisher_init_default>
			&gear_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, GearReport),
			"/vehicle/status/gear_status");

  rclc_publisher_init_default(
 80015e6:	f00c fb17 	bl	800dc18 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>
 80015ea:	4602      	mov	r2, r0
 80015ec:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80015f0:	f507 703b 	add.w	r0, r7, #748	@ 0x2ec
 80015f4:	4b57      	ldr	r3, [pc, #348]	@ (8001754 <StartMicroAutoware+0x31c>)
 80015f6:	f00f fb2b 	bl	8010c50 <rclc_publisher_init_default>
			&turn_indicators_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, TurnIndicatorsReport),
			"/vehicle/status/turn_indicators_status");

  rclc_publisher_init_default(
 80015fa:	f00c fac5 	bl	800db88 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>
 80015fe:	4602      	mov	r2, r0
 8001600:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001604:	f507 703a 	add.w	r0, r7, #744	@ 0x2e8
 8001608:	4b53      	ldr	r3, [pc, #332]	@ (8001758 <StartMicroAutoware+0x320>)
 800160a:	f00f fb21 	bl	8010c50 <rclc_publisher_init_default>
			&hazard_lights_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, HazardLightsReport),
			"/vehicle/status/hazard_lights_status");

  rclc_publisher_init_default(
 800160e:	f00f fded 	bl	80111ec <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>
 8001612:	4602      	mov	r2, r0
 8001614:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001618:	f507 7039 	add.w	r0, r7, #740	@ 0x2e4
 800161c:	4b4f      	ldr	r3, [pc, #316]	@ (800175c <StartMicroAutoware+0x324>)
 800161e:	f00f fb17 	bl	8010c50 <rclc_publisher_init_default>
			&actuation_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, ActuationStatusStamped),
			"/vehicle/status/actuation_status");

  rclc_publisher_init_default(
 8001622:	f00f fdfb 	bl	801121c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>
 8001626:	4602      	mov	r2, r0
 8001628:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 800162c:	f507 7038 	add.w	r0, r7, #736	@ 0x2e0
 8001630:	4b4b      	ldr	r3, [pc, #300]	@ (8001760 <StartMicroAutoware+0x328>)
 8001632:	f00f fb0d 	bl	8010c50 <rclc_publisher_init_default>
			ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, SteeringWheelStatusStamped),
			"/vehicle/status/steering_wheel_status");

  // creating servers

  rclc_service_init_default(
 8001636:	f00c fa27 	bl	800da88 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>
 800163a:	4602      	mov	r2, r0
 800163c:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001640:	f507 7037 	add.w	r0, r7, #732	@ 0x2dc
 8001644:	4b47      	ldr	r3, [pc, #284]	@ (8001764 <StartMicroAutoware+0x32c>)
 8001646:	f00f fb3d 	bl	8010cc4 <rclc_service_init_default>
			ROSIDL_GET_SRV_TYPE_SUPPORT(autoware_vehicle_msgs, srv, ControlModeCommand),
			"/control/control_mode_request");


  // adding callbacks to executor
  rclc_executor_add_subscription(&executor, &control_cmd_sub_, &control_cmd_msg_, &control_cmd_callback, ON_NEW_DATA);
 800164a:	f507 7224 	add.w	r2, r7, #656	@ 0x290
 800164e:	f507 7145 	add.w	r1, r7, #788	@ 0x314
 8001652:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001656:	2300      	movs	r3, #0
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	4b43      	ldr	r3, [pc, #268]	@ (8001768 <StartMicroAutoware+0x330>)
 800165c:	f00e ffc4 	bl	80105e8 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &gear_cmd_sub_, &gear_cmd_msg_, &gear_cmd_callback, ON_NEW_DATA);
 8001660:	f507 7221 	add.w	r2, r7, #644	@ 0x284
 8001664:	f507 7144 	add.w	r1, r7, #784	@ 0x310
 8001668:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 800166c:	2300      	movs	r3, #0
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	4b3e      	ldr	r3, [pc, #248]	@ (800176c <StartMicroAutoware+0x334>)
 8001672:	f00e ffb9 	bl	80105e8 <rclc_executor_add_subscription>
  rclc_executor_add_service(&executor, &control_mode_server_, &control_mode_request_msg_, &control_mode_response_msg_, control_mode_cmd_callback);
 8001676:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 800167a:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800167e:	f507 7137 	add.w	r1, r7, #732	@ 0x2dc
 8001682:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001686:	4c3a      	ldr	r4, [pc, #232]	@ (8001770 <StartMicroAutoware+0x338>)
 8001688:	9400      	str	r4, [sp, #0]
 800168a:	f00e ffeb 	bl	8010664 <rclc_executor_add_service>

  rclc_executor_add_subscription(&executor, &turn_indicators_cmd_sub_, &turn_indicators_cmd_msg_, &turn_indicators_cmd_callback, ON_NEW_DATA);
 800168e:	f507 721e 	add.w	r2, r7, #632	@ 0x278
 8001692:	f507 7143 	add.w	r1, r7, #780	@ 0x30c
 8001696:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 800169a:	2300      	movs	r3, #0
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	4b35      	ldr	r3, [pc, #212]	@ (8001774 <StartMicroAutoware+0x33c>)
 80016a0:	f00e ffa2 	bl	80105e8 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &hazard_lights_cmd_sub_, &hazard_lights_cmd_msg_, &hazard_lights_cmd_callback, ON_NEW_DATA);
 80016a4:	f507 721b 	add.w	r2, r7, #620	@ 0x26c
 80016a8:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 80016ac:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 80016b0:	2300      	movs	r3, #0
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	4b30      	ldr	r3, [pc, #192]	@ (8001778 <StartMicroAutoware+0x340>)
 80016b6:	f00e ff97 	bl	80105e8 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &actuation_cmd_sub_, &actuation_cmd_msg_, &actuation_cmd_callback, ON_NEW_DATA);
 80016ba:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 80016be:	f507 7141 	add.w	r1, r7, #772	@ 0x304
 80016c2:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 80016c6:	2300      	movs	r3, #0
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	4b2c      	ldr	r3, [pc, #176]	@ (800177c <StartMicroAutoware+0x344>)
 80016cc:	f00e ff8c 	bl	80105e8 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &emergency_sub_, &emergency_msg_, &emergency_callback, ON_NEW_DATA);
 80016d0:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 80016d4:	f507 7140 	add.w	r1, r7, #768	@ 0x300
 80016d8:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 80016dc:	2300      	movs	r3, #0
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	4b27      	ldr	r3, [pc, #156]	@ (8001780 <StartMicroAutoware+0x348>)
 80016e2:	f00e ff81 	bl	80105e8 <rclc_executor_add_subscription>



  for (;;){

	  rclc_executor_spin_some(&executor, 1000 * (1000 * 1000)); // Spinning executor for 1s TODO set time in function of data rate.
 80016e6:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 80016ea:	a303      	add	r3, pc, #12	@ (adr r3, 80016f8 <StartMicroAutoware+0x2c0>)
 80016ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f0:	4608      	mov	r0, r1
 80016f2:	f00f f9e7 	bl	8010ac4 <rclc_executor_spin_some>
 80016f6:	e7f6      	b.n	80016e6 <StartMicroAutoware+0x2ae>
 80016f8:	3b9aca00 	.word	0x3b9aca00
 80016fc:	00000000 	.word	0x00000000
 8001700:	08000df1 	.word	0x08000df1
 8001704:	08000d8d 	.word	0x08000d8d
 8001708:	08000d6d 	.word	0x08000d6d
 800170c:	08000d41 	.word	0x08000d41
 8001710:	240329d4 	.word	0x240329d4
 8001714:	08001785 	.word	0x08001785
 8001718:	080017c9 	.word	0x080017c9
 800171c:	08001801 	.word	0x08001801
 8001720:	0800186d 	.word	0x0800186d
 8001724:	0801dfa8 	.word	0x0801dfa8
 8001728:	0801dfac 	.word	0x0801dfac
 800172c:	0801dfc0 	.word	0x0801dfc0
 8001730:	0801dfe0 	.word	0x0801dfe0
 8001734:	0801dffc 	.word	0x0801dffc
 8001738:	0801e024 	.word	0x0801e024
 800173c:	0801e048 	.word	0x0801e048
 8001740:	0801e068 	.word	0x0801e068
 8001744:	0801e088 	.word	0x0801e088
 8001748:	0801e0a8 	.word	0x0801e0a8
 800174c:	0801e0c8 	.word	0x0801e0c8
 8001750:	0801e0e8 	.word	0x0801e0e8
 8001754:	0801e104 	.word	0x0801e104
 8001758:	0801e12c 	.word	0x0801e12c
 800175c:	0801e154 	.word	0x0801e154
 8001760:	0801e178 	.word	0x0801e178
 8001764:	0801e1a0 	.word	0x0801e1a0
 8001768:	08000741 	.word	0x08000741
 800176c:	08000769 	.word	0x08000769
 8001770:	08000831 	.word	0x08000831
 8001774:	08000791 	.word	0x08000791
 8001778:	080007b9 	.word	0x080007b9
 800177c:	080007e1 	.word	0x080007e1
 8001780:	08000809 	.word	0x08000809

08001784 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800178e:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <microros_allocate+0x3c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4413      	add	r3, r2
 8001798:	461a      	mov	r2, r3
 800179a:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <microros_allocate+0x3c>)
 800179c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800179e:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <microros_allocate+0x40>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4413      	add	r3, r2
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <microros_allocate+0x40>)
 80017ac:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff f84c 	bl	800084c <pvPortMallocMicroROS>
 80017b4:	4603      	mov	r3, r0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	24032978 	.word	0x24032978
 80017c4:	2403297c 	.word	0x2403297c

080017c8 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00c      	beq.n	80017f2 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff f95b 	bl	8000a94 <getBlockSize>
 80017de:	4603      	mov	r3, r0
 80017e0:	4a06      	ldr	r2, [pc, #24]	@ (80017fc <microros_deallocate+0x34>)
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	461a      	mov	r2, r3
 80017e8:	4b04      	ldr	r3, [pc, #16]	@ (80017fc <microros_deallocate+0x34>)
 80017ea:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff f8f5 	bl	80009dc <vPortFreeMicroROS>
  }
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	2403297c 	.word	0x2403297c

08001800 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800180c:	4b15      	ldr	r3, [pc, #84]	@ (8001864 <microros_reallocate+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	4413      	add	r3, r2
 8001816:	461a      	mov	r2, r3
 8001818:	4b12      	ldr	r3, [pc, #72]	@ (8001864 <microros_reallocate+0x64>)
 800181a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800181c:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <microros_reallocate+0x68>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	4413      	add	r3, r2
 8001826:	461a      	mov	r2, r3
 8001828:	4b0f      	ldr	r3, [pc, #60]	@ (8001868 <microros_reallocate+0x68>)
 800182a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d104      	bne.n	800183c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001832:	68b8      	ldr	r0, [r7, #8]
 8001834:	f7ff f80a 	bl	800084c <pvPortMallocMicroROS>
 8001838:	4603      	mov	r3, r0
 800183a:	e00e      	b.n	800185a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f7ff f929 	bl	8000a94 <getBlockSize>
 8001842:	4603      	mov	r3, r0
 8001844:	4a08      	ldr	r2, [pc, #32]	@ (8001868 <microros_reallocate+0x68>)
 8001846:	6812      	ldr	r2, [r2, #0]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	461a      	mov	r2, r3
 800184c:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <microros_reallocate+0x68>)
 800184e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f7ff f93c 	bl	8000ad0 <pvPortReallocMicroROS>
 8001858:	4603      	mov	r3, r0
  }
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	24032978 	.word	0x24032978
 8001868:	2403297c 	.word	0x2403297c

0800186c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	fb02 f303 	mul.w	r3, r2, r3
 8001880:	4a0c      	ldr	r2, [pc, #48]	@ (80018b4 <microros_zero_allocate+0x48>)
 8001882:	6812      	ldr	r2, [r2, #0]
 8001884:	4413      	add	r3, r2
 8001886:	461a      	mov	r2, r3
 8001888:	4b0a      	ldr	r3, [pc, #40]	@ (80018b4 <microros_zero_allocate+0x48>)
 800188a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	fb02 f303 	mul.w	r3, r2, r3
 8001894:	4a08      	ldr	r2, [pc, #32]	@ (80018b8 <microros_zero_allocate+0x4c>)
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	4413      	add	r3, r2
 800189a:	461a      	mov	r2, r3
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <microros_zero_allocate+0x4c>)
 800189e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80018a0:	68b9      	ldr	r1, [r7, #8]
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f7ff f941 	bl	8000b2a <pvPortCallocMicroROS>
 80018a8:	4603      	mov	r3, r0
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	24032978 	.word	0x24032978
 80018b8:	2403297c 	.word	0x2403297c
 80018bc:	00000000 	.word	0x00000000

080018c0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80018c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018c4:	b086      	sub	sp, #24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80018d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018d6:	a320      	add	r3, pc, #128	@ (adr r3, 8001958 <UTILS_NanosecondsToTimespec+0x98>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7fe fd68 	bl	80003b0 <__aeabi_ldivmod>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80018ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018ee:	a31a      	add	r3, pc, #104	@ (adr r3, 8001958 <UTILS_NanosecondsToTimespec+0x98>)
 80018f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f4:	f7fe fd5c 	bl	80003b0 <__aeabi_ldivmod>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b00      	cmp	r3, #0
 8001902:	da20      	bge.n	8001946 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	4a11      	ldr	r2, [pc, #68]	@ (8001950 <UTILS_NanosecondsToTimespec+0x90>)
 800190a:	fb82 1203 	smull	r1, r2, r2, r3
 800190e:	1712      	asrs	r2, r2, #28
 8001910:	17db      	asrs	r3, r3, #31
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191e:	6979      	ldr	r1, [r7, #20]
 8001920:	17c8      	asrs	r0, r1, #31
 8001922:	460c      	mov	r4, r1
 8001924:	4605      	mov	r5, r0
 8001926:	ebb2 0804 	subs.w	r8, r2, r4
 800192a:	eb63 0905 	sbc.w	r9, r3, r5
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	4906      	ldr	r1, [pc, #24]	@ (8001954 <UTILS_NanosecondsToTimespec+0x94>)
 800193c:	fb01 f303 	mul.w	r3, r1, r3
 8001940:	441a      	add	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	609a      	str	r2, [r3, #8]
    }
}
 8001946:	bf00      	nop
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001950:	44b82fa1 	.word	0x44b82fa1
 8001954:	3b9aca00 	.word	0x3b9aca00
 8001958:	3b9aca00 	.word	0x3b9aca00
 800195c:	00000000 	.word	0x00000000

08001960 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001964:	b08e      	sub	sp, #56	@ 0x38
 8001966:	af00      	add	r7, sp, #0
 8001968:	6278      	str	r0, [r7, #36]	@ 0x24
 800196a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800196c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001970:	2300      	movs	r3, #0
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001982:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001986:	4618      	mov	r0, r3
 8001988:	f00a fb94 	bl	800c0b4 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800198c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800198e:	17da      	asrs	r2, r3, #31
 8001990:	61bb      	str	r3, [r7, #24]
 8001992:	61fa      	str	r2, [r7, #28]
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	69b9      	ldr	r1, [r7, #24]
 800199e:	000b      	movs	r3, r1
 80019a0:	2200      	movs	r2, #0
 80019a2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80019a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019a8:	2200      	movs	r2, #0
 80019aa:	461c      	mov	r4, r3
 80019ac:	4615      	mov	r5, r2
 80019ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80019b2:	1911      	adds	r1, r2, r4
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	416b      	adcs	r3, r5
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80019be:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80019c2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	f04f 0400 	mov.w	r4, #0
 80019ce:	f04f 0500 	mov.w	r5, #0
 80019d2:	015d      	lsls	r5, r3, #5
 80019d4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80019d8:	0154      	lsls	r4, r2, #5
 80019da:	4622      	mov	r2, r4
 80019dc:	462b      	mov	r3, r5
 80019de:	ebb2 0800 	subs.w	r8, r2, r0
 80019e2:	eb63 0901 	sbc.w	r9, r3, r1
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80019f2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80019f6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80019fa:	4690      	mov	r8, r2
 80019fc:	4699      	mov	r9, r3
 80019fe:	eb18 0a00 	adds.w	sl, r8, r0
 8001a02:	eb49 0b01 	adc.w	fp, r9, r1
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a12:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a16:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a1a:	ebb2 040a 	subs.w	r4, r2, sl
 8001a1e:	603c      	str	r4, [r7, #0]
 8001a20:	eb63 030b 	sbc.w	r3, r3, fp
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a2a:	4623      	mov	r3, r4
 8001a2c:	181b      	adds	r3, r3, r0
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	462b      	mov	r3, r5
 8001a32:	eb41 0303 	adc.w	r3, r1, r3
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	6a3a      	ldr	r2, [r7, #32]
 8001a3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a3e:	f7ff ff3f 	bl	80018c0 <UTILS_NanosecondsToTimespec>

    return 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	4618      	mov	r0, r3
 8001a46:	3738      	adds	r7, #56	@ 0x38
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a56:	4b0c      	ldr	r3, [pc, #48]	@ (8001a88 <HAL_MspInit+0x38>)
 8001a58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a88 <HAL_MspInit+0x38>)
 8001a5e:	f043 0302 	orr.w	r3, r3, #2
 8001a62:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a66:	4b08      	ldr	r3, [pc, #32]	@ (8001a88 <HAL_MspInit+0x38>)
 8001a68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a74:	2200      	movs	r2, #0
 8001a76:	210f      	movs	r1, #15
 8001a78:	f06f 0001 	mvn.w	r0, #1
 8001a7c:	f000 fc84 	bl	8002388 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	58024400 	.word	0x58024400

08001a8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b090      	sub	sp, #64	@ 0x40
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b0f      	cmp	r3, #15
 8001a98:	d827      	bhi.n	8001aea <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	2036      	movs	r0, #54	@ 0x36
 8001aa0:	f000 fc72 	bl	8002388 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001aa4:	2036      	movs	r0, #54	@ 0x36
 8001aa6:	f000 fc89 	bl	80023bc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001aaa:	4a29      	ldr	r2, [pc, #164]	@ (8001b50 <HAL_InitTick+0xc4>)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ab0:	4b28      	ldr	r3, [pc, #160]	@ (8001b54 <HAL_InitTick+0xc8>)
 8001ab2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ab6:	4a27      	ldr	r2, [pc, #156]	@ (8001b54 <HAL_InitTick+0xc8>)
 8001ab8:	f043 0310 	orr.w	r3, r3, #16
 8001abc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ac0:	4b24      	ldr	r3, [pc, #144]	@ (8001b54 <HAL_InitTick+0xc8>)
 8001ac2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ac6:	f003 0310 	and.w	r3, r3, #16
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ace:	f107 0210 	add.w	r2, r7, #16
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f004 fcd3 	bl	8006484 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d106      	bne.n	8001af6 <HAL_InitTick+0x6a>
 8001ae8:	e001      	b.n	8001aee <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e02b      	b.n	8001b46 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001aee:	f004 fc9d 	bl	800642c <HAL_RCC_GetPCLK1Freq>
 8001af2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001af4:	e004      	b.n	8001b00 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001af6:	f004 fc99 	bl	800642c <HAL_RCC_GetPCLK1Freq>
 8001afa:	4603      	mov	r3, r0
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b02:	4a15      	ldr	r2, [pc, #84]	@ (8001b58 <HAL_InitTick+0xcc>)
 8001b04:	fba2 2303 	umull	r2, r3, r2, r3
 8001b08:	0c9b      	lsrs	r3, r3, #18
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b0e:	4b13      	ldr	r3, [pc, #76]	@ (8001b5c <HAL_InitTick+0xd0>)
 8001b10:	4a13      	ldr	r2, [pc, #76]	@ (8001b60 <HAL_InitTick+0xd4>)
 8001b12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001b14:	4b11      	ldr	r3, [pc, #68]	@ (8001b5c <HAL_InitTick+0xd0>)
 8001b16:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b1a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b1c:	4a0f      	ldr	r2, [pc, #60]	@ (8001b5c <HAL_InitTick+0xd0>)
 8001b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b20:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001b22:	4b0e      	ldr	r3, [pc, #56]	@ (8001b5c <HAL_InitTick+0xd0>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b28:	4b0c      	ldr	r3, [pc, #48]	@ (8001b5c <HAL_InitTick+0xd0>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001b2e:	480b      	ldr	r0, [pc, #44]	@ (8001b5c <HAL_InitTick+0xd0>)
 8001b30:	f006 fb16 	bl	8008160 <HAL_TIM_Base_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d104      	bne.n	8001b44 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001b3a:	4808      	ldr	r0, [pc, #32]	@ (8001b5c <HAL_InitTick+0xd0>)
 8001b3c:	f006 fb72 	bl	8008224 <HAL_TIM_Base_Start_IT>
 8001b40:	4603      	mov	r3, r0
 8001b42:	e000      	b.n	8001b46 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3740      	adds	r7, #64	@ 0x40
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	2400000c 	.word	0x2400000c
 8001b54:	58024400 	.word	0x58024400
 8001b58:	431bde83 	.word	0x431bde83
 8001b5c:	24032980 	.word	0x24032980
 8001b60:	40001000 	.word	0x40001000

08001b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b68:	bf00      	nop
 8001b6a:	e7fd      	b.n	8001b68 <NMI_Handler+0x4>

08001b6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <HardFault_Handler+0x4>

08001b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <MemManage_Handler+0x4>

08001b7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <BusFault_Handler+0x4>

08001b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <UsageFault_Handler+0x4>

08001b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001ba0:	4802      	ldr	r0, [pc, #8]	@ (8001bac <DMA1_Stream0_IRQHandler+0x10>)
 8001ba2:	f001 ff43 	bl	8003a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	24032a68 	.word	0x24032a68

08001bb0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001bb4:	4802      	ldr	r0, [pc, #8]	@ (8001bc0 <DMA1_Stream1_IRQHandler+0x10>)
 8001bb6:	f001 ff39 	bl	8003a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	24032ae0 	.word	0x24032ae0

08001bc4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_OVCR_Pin);
 8001bc8:	2080      	movs	r0, #128	@ 0x80
 8001bca:	f003 fc16 	bl	80053fa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001bd8:	4802      	ldr	r0, [pc, #8]	@ (8001be4 <USART3_IRQHandler+0x10>)
 8001bda:	f006 ff41 	bl	8008a60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	240329d4 	.word	0x240329d4

08001be8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001bec:	4802      	ldr	r0, [pc, #8]	@ (8001bf8 <TIM6_DAC_IRQHandler+0x10>)
 8001bee:	f006 fb91 	bl	8008314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	24032980 	.word	0x24032980

08001bfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return 1;
 8001c00:	2301      	movs	r3, #1
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <_kill>:

int _kill(int pid, int sig)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c16:	f01b fb37 	bl	801d288 <__errno>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2216      	movs	r2, #22
 8001c1e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_exit>:

void _exit (int status)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff ffe7 	bl	8001c0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c3e:	bf00      	nop
 8001c40:	e7fd      	b.n	8001c3e <_exit+0x12>

08001c42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b086      	sub	sp, #24
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	60f8      	str	r0, [r7, #12]
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	e00a      	b.n	8001c6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c54:	f3af 8000 	nop.w
 8001c58:	4601      	mov	r1, r0
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	60ba      	str	r2, [r7, #8]
 8001c60:	b2ca      	uxtb	r2, r1
 8001c62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	3301      	adds	r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	dbf0      	blt.n	8001c54 <_read+0x12>
  }

  return len;
 8001c72:	687b      	ldr	r3, [r7, #4]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	e009      	b.n	8001ca2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	60ba      	str	r2, [r7, #8]
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	dbf1      	blt.n	8001c8e <_write+0x12>
  }
  return len;
 8001caa:	687b      	ldr	r3, [r7, #4]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <_close>:

int _close(int file)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cdc:	605a      	str	r2, [r3, #4]
  return 0;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <_isatty>:

int _isatty(int file)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cf4:	2301      	movs	r3, #1
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b085      	sub	sp, #20
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d24:	4a14      	ldr	r2, [pc, #80]	@ (8001d78 <_sbrk+0x5c>)
 8001d26:	4b15      	ldr	r3, [pc, #84]	@ (8001d7c <_sbrk+0x60>)
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d30:	4b13      	ldr	r3, [pc, #76]	@ (8001d80 <_sbrk+0x64>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d102      	bne.n	8001d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d38:	4b11      	ldr	r3, [pc, #68]	@ (8001d80 <_sbrk+0x64>)
 8001d3a:	4a12      	ldr	r2, [pc, #72]	@ (8001d84 <_sbrk+0x68>)
 8001d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d3e:	4b10      	ldr	r3, [pc, #64]	@ (8001d80 <_sbrk+0x64>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d207      	bcs.n	8001d5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d4c:	f01b fa9c 	bl	801d288 <__errno>
 8001d50:	4603      	mov	r3, r0
 8001d52:	220c      	movs	r2, #12
 8001d54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d5a:	e009      	b.n	8001d70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d5c:	4b08      	ldr	r3, [pc, #32]	@ (8001d80 <_sbrk+0x64>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d62:	4b07      	ldr	r3, [pc, #28]	@ (8001d80 <_sbrk+0x64>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	4a05      	ldr	r2, [pc, #20]	@ (8001d80 <_sbrk+0x64>)
 8001d6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	24080000 	.word	0x24080000
 8001d7c:	00000400 	.word	0x00000400
 8001d80:	240329d0 	.word	0x240329d0
 8001d84:	240694f0 	.word	0x240694f0

08001d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d8c:	4b37      	ldr	r3, [pc, #220]	@ (8001e6c <SystemInit+0xe4>)
 8001d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d92:	4a36      	ldr	r2, [pc, #216]	@ (8001e6c <SystemInit+0xe4>)
 8001d94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d9c:	4b34      	ldr	r3, [pc, #208]	@ (8001e70 <SystemInit+0xe8>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 030f 	and.w	r3, r3, #15
 8001da4:	2b06      	cmp	r3, #6
 8001da6:	d807      	bhi.n	8001db8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001da8:	4b31      	ldr	r3, [pc, #196]	@ (8001e70 <SystemInit+0xe8>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f023 030f 	bic.w	r3, r3, #15
 8001db0:	4a2f      	ldr	r2, [pc, #188]	@ (8001e70 <SystemInit+0xe8>)
 8001db2:	f043 0307 	orr.w	r3, r3, #7
 8001db6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001db8:	4b2e      	ldr	r3, [pc, #184]	@ (8001e74 <SystemInit+0xec>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a2d      	ldr	r2, [pc, #180]	@ (8001e74 <SystemInit+0xec>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8001e74 <SystemInit+0xec>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001dca:	4b2a      	ldr	r3, [pc, #168]	@ (8001e74 <SystemInit+0xec>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	4929      	ldr	r1, [pc, #164]	@ (8001e74 <SystemInit+0xec>)
 8001dd0:	4b29      	ldr	r3, [pc, #164]	@ (8001e78 <SystemInit+0xf0>)
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001dd6:	4b26      	ldr	r3, [pc, #152]	@ (8001e70 <SystemInit+0xe8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d007      	beq.n	8001df2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001de2:	4b23      	ldr	r3, [pc, #140]	@ (8001e70 <SystemInit+0xe8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 030f 	bic.w	r3, r3, #15
 8001dea:	4a21      	ldr	r2, [pc, #132]	@ (8001e70 <SystemInit+0xe8>)
 8001dec:	f043 0307 	orr.w	r3, r3, #7
 8001df0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001df2:	4b20      	ldr	r3, [pc, #128]	@ (8001e74 <SystemInit+0xec>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001df8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e74 <SystemInit+0xec>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8001e74 <SystemInit+0xec>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001e04:	4b1b      	ldr	r3, [pc, #108]	@ (8001e74 <SystemInit+0xec>)
 8001e06:	4a1d      	ldr	r2, [pc, #116]	@ (8001e7c <SystemInit+0xf4>)
 8001e08:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e74 <SystemInit+0xec>)
 8001e0c:	4a1c      	ldr	r2, [pc, #112]	@ (8001e80 <SystemInit+0xf8>)
 8001e0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001e10:	4b18      	ldr	r3, [pc, #96]	@ (8001e74 <SystemInit+0xec>)
 8001e12:	4a1c      	ldr	r2, [pc, #112]	@ (8001e84 <SystemInit+0xfc>)
 8001e14:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e16:	4b17      	ldr	r3, [pc, #92]	@ (8001e74 <SystemInit+0xec>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001e1c:	4b15      	ldr	r3, [pc, #84]	@ (8001e74 <SystemInit+0xec>)
 8001e1e:	4a19      	ldr	r2, [pc, #100]	@ (8001e84 <SystemInit+0xfc>)
 8001e20:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e22:	4b14      	ldr	r3, [pc, #80]	@ (8001e74 <SystemInit+0xec>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001e28:	4b12      	ldr	r3, [pc, #72]	@ (8001e74 <SystemInit+0xec>)
 8001e2a:	4a16      	ldr	r2, [pc, #88]	@ (8001e84 <SystemInit+0xfc>)
 8001e2c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e2e:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <SystemInit+0xec>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e34:	4b0f      	ldr	r3, [pc, #60]	@ (8001e74 <SystemInit+0xec>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a0e      	ldr	r2, [pc, #56]	@ (8001e74 <SystemInit+0xec>)
 8001e3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e40:	4b0c      	ldr	r3, [pc, #48]	@ (8001e74 <SystemInit+0xec>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001e46:	4b10      	ldr	r3, [pc, #64]	@ (8001e88 <SystemInit+0x100>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	4b10      	ldr	r3, [pc, #64]	@ (8001e8c <SystemInit+0x104>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e52:	d202      	bcs.n	8001e5a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001e54:	4b0e      	ldr	r3, [pc, #56]	@ (8001e90 <SystemInit+0x108>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e94 <SystemInit+0x10c>)
 8001e5c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001e60:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001e62:	bf00      	nop
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000ed00 	.word	0xe000ed00
 8001e70:	52002000 	.word	0x52002000
 8001e74:	58024400 	.word	0x58024400
 8001e78:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e7c:	02020200 	.word	0x02020200
 8001e80:	01ff0000 	.word	0x01ff0000
 8001e84:	01010280 	.word	0x01010280
 8001e88:	5c001000 	.word	0x5c001000
 8001e8c:	ffff0000 	.word	0xffff0000
 8001e90:	51008108 	.word	0x51008108
 8001e94:	52004000 	.word	0x52004000

08001e98 <StartTaskControle>:
#include <taskControle.h>

void StartTaskControle(void *argument)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001eb0:	4b22      	ldr	r3, [pc, #136]	@ (8001f3c <MX_USART3_UART_Init+0x90>)
 8001eb2:	4a23      	ldr	r2, [pc, #140]	@ (8001f40 <MX_USART3_UART_Init+0x94>)
 8001eb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8001eb6:	4b21      	ldr	r3, [pc, #132]	@ (8001f3c <MX_USART3_UART_Init+0x90>)
 8001eb8:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001ebc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8001f3c <MX_USART3_UART_Init+0x90>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f3c <MX_USART3_UART_Init+0x90>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001eca:	4b1c      	ldr	r3, [pc, #112]	@ (8001f3c <MX_USART3_UART_Init+0x90>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f3c <MX_USART3_UART_Init+0x90>)
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed6:	4b19      	ldr	r3, [pc, #100]	@ (8001f3c <MX_USART3_UART_Init+0x90>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001edc:	4b17      	ldr	r3, [pc, #92]	@ (8001f3c <MX_USART3_UART_Init+0x90>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ee2:	4b16      	ldr	r3, [pc, #88]	@ (8001f3c <MX_USART3_UART_Init+0x90>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ee8:	4b14      	ldr	r3, [pc, #80]	@ (8001f3c <MX_USART3_UART_Init+0x90>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eee:	4b13      	ldr	r3, [pc, #76]	@ (8001f3c <MX_USART3_UART_Init+0x90>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ef4:	4811      	ldr	r0, [pc, #68]	@ (8001f3c <MX_USART3_UART_Init+0x90>)
 8001ef6:	f006 fc01 	bl	80086fc <HAL_UART_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001f00:	f7ff fa92 	bl	8001428 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f04:	2100      	movs	r1, #0
 8001f06:	480d      	ldr	r0, [pc, #52]	@ (8001f3c <MX_USART3_UART_Init+0x90>)
 8001f08:	f008 fbf6 	bl	800a6f8 <HAL_UARTEx_SetTxFifoThreshold>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001f12:	f7ff fa89 	bl	8001428 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f16:	2100      	movs	r1, #0
 8001f18:	4808      	ldr	r0, [pc, #32]	@ (8001f3c <MX_USART3_UART_Init+0x90>)
 8001f1a:	f008 fc2b 	bl	800a774 <HAL_UARTEx_SetRxFifoThreshold>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001f24:	f7ff fa80 	bl	8001428 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f28:	4804      	ldr	r0, [pc, #16]	@ (8001f3c <MX_USART3_UART_Init+0x90>)
 8001f2a:	f008 fbac 	bl	800a686 <HAL_UARTEx_DisableFifoMode>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001f34:	f7ff fa78 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	240329d4 	.word	0x240329d4
 8001f40:	40004800 	.word	0x40004800

08001f44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b0ba      	sub	sp, #232	@ 0xe8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f5c:	f107 0310 	add.w	r3, r7, #16
 8001f60:	22c0      	movs	r2, #192	@ 0xc0
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f01b f8a5 	bl	801d0b4 <memset>
  if(uartHandle->Instance==USART3)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a5a      	ldr	r2, [pc, #360]	@ (80020d8 <HAL_UART_MspInit+0x194>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	f040 80ad 	bne.w	80020d0 <HAL_UART_MspInit+0x18c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f76:	f04f 0202 	mov.w	r2, #2
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f88:	f107 0310 	add.w	r3, r7, #16
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f004 fabb 	bl	8006508 <HAL_RCCEx_PeriphCLKConfig>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001f98:	f7ff fa46 	bl	8001428 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f9c:	4b4f      	ldr	r3, [pc, #316]	@ (80020dc <HAL_UART_MspInit+0x198>)
 8001f9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fa2:	4a4e      	ldr	r2, [pc, #312]	@ (80020dc <HAL_UART_MspInit+0x198>)
 8001fa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fa8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001fac:	4b4b      	ldr	r3, [pc, #300]	@ (80020dc <HAL_UART_MspInit+0x198>)
 8001fae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fba:	4b48      	ldr	r3, [pc, #288]	@ (80020dc <HAL_UART_MspInit+0x198>)
 8001fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fc0:	4a46      	ldr	r2, [pc, #280]	@ (80020dc <HAL_UART_MspInit+0x198>)
 8001fc2:	f043 0308 	orr.w	r3, r3, #8
 8001fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fca:	4b44      	ldr	r3, [pc, #272]	@ (80020dc <HAL_UART_MspInit+0x198>)
 8001fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001fd8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fdc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ff2:	2307      	movs	r3, #7
 8001ff4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ff8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4838      	ldr	r0, [pc, #224]	@ (80020e0 <HAL_UART_MspInit+0x19c>)
 8002000:	f003 f832 	bl	8005068 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8002004:	4b37      	ldr	r3, [pc, #220]	@ (80020e4 <HAL_UART_MspInit+0x1a0>)
 8002006:	4a38      	ldr	r2, [pc, #224]	@ (80020e8 <HAL_UART_MspInit+0x1a4>)
 8002008:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800200a:	4b36      	ldr	r3, [pc, #216]	@ (80020e4 <HAL_UART_MspInit+0x1a0>)
 800200c:	222d      	movs	r2, #45	@ 0x2d
 800200e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002010:	4b34      	ldr	r3, [pc, #208]	@ (80020e4 <HAL_UART_MspInit+0x1a0>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002016:	4b33      	ldr	r3, [pc, #204]	@ (80020e4 <HAL_UART_MspInit+0x1a0>)
 8002018:	2200      	movs	r2, #0
 800201a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800201c:	4b31      	ldr	r3, [pc, #196]	@ (80020e4 <HAL_UART_MspInit+0x1a0>)
 800201e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002022:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002024:	4b2f      	ldr	r3, [pc, #188]	@ (80020e4 <HAL_UART_MspInit+0x1a0>)
 8002026:	2200      	movs	r2, #0
 8002028:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800202a:	4b2e      	ldr	r3, [pc, #184]	@ (80020e4 <HAL_UART_MspInit+0x1a0>)
 800202c:	2200      	movs	r2, #0
 800202e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002030:	4b2c      	ldr	r3, [pc, #176]	@ (80020e4 <HAL_UART_MspInit+0x1a0>)
 8002032:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002036:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002038:	4b2a      	ldr	r3, [pc, #168]	@ (80020e4 <HAL_UART_MspInit+0x1a0>)
 800203a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800203e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002040:	4b28      	ldr	r3, [pc, #160]	@ (80020e4 <HAL_UART_MspInit+0x1a0>)
 8002042:	2200      	movs	r2, #0
 8002044:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002046:	4827      	ldr	r0, [pc, #156]	@ (80020e4 <HAL_UART_MspInit+0x1a0>)
 8002048:	f000 f9c6 	bl	80023d8 <HAL_DMA_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8002052:	f7ff f9e9 	bl	8001428 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a22      	ldr	r2, [pc, #136]	@ (80020e4 <HAL_UART_MspInit+0x1a0>)
 800205a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800205e:	4a21      	ldr	r2, [pc, #132]	@ (80020e4 <HAL_UART_MspInit+0x1a0>)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8002064:	4b21      	ldr	r3, [pc, #132]	@ (80020ec <HAL_UART_MspInit+0x1a8>)
 8002066:	4a22      	ldr	r2, [pc, #136]	@ (80020f0 <HAL_UART_MspInit+0x1ac>)
 8002068:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800206a:	4b20      	ldr	r3, [pc, #128]	@ (80020ec <HAL_UART_MspInit+0x1a8>)
 800206c:	222e      	movs	r2, #46	@ 0x2e
 800206e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002070:	4b1e      	ldr	r3, [pc, #120]	@ (80020ec <HAL_UART_MspInit+0x1a8>)
 8002072:	2240      	movs	r2, #64	@ 0x40
 8002074:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002076:	4b1d      	ldr	r3, [pc, #116]	@ (80020ec <HAL_UART_MspInit+0x1a8>)
 8002078:	2200      	movs	r2, #0
 800207a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800207c:	4b1b      	ldr	r3, [pc, #108]	@ (80020ec <HAL_UART_MspInit+0x1a8>)
 800207e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002082:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002084:	4b19      	ldr	r3, [pc, #100]	@ (80020ec <HAL_UART_MspInit+0x1a8>)
 8002086:	2200      	movs	r2, #0
 8002088:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800208a:	4b18      	ldr	r3, [pc, #96]	@ (80020ec <HAL_UART_MspInit+0x1a8>)
 800208c:	2200      	movs	r2, #0
 800208e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002090:	4b16      	ldr	r3, [pc, #88]	@ (80020ec <HAL_UART_MspInit+0x1a8>)
 8002092:	2200      	movs	r2, #0
 8002094:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002096:	4b15      	ldr	r3, [pc, #84]	@ (80020ec <HAL_UART_MspInit+0x1a8>)
 8002098:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800209c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800209e:	4b13      	ldr	r3, [pc, #76]	@ (80020ec <HAL_UART_MspInit+0x1a8>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80020a4:	4811      	ldr	r0, [pc, #68]	@ (80020ec <HAL_UART_MspInit+0x1a8>)
 80020a6:	f000 f997 	bl	80023d8 <HAL_DMA_Init>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 80020b0:	f7ff f9ba 	bl	8001428 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a0d      	ldr	r2, [pc, #52]	@ (80020ec <HAL_UART_MspInit+0x1a8>)
 80020b8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80020ba:	4a0c      	ldr	r2, [pc, #48]	@ (80020ec <HAL_UART_MspInit+0x1a8>)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2108      	movs	r1, #8
 80020c4:	2027      	movs	r0, #39	@ 0x27
 80020c6:	f000 f95f 	bl	8002388 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020ca:	2027      	movs	r0, #39	@ 0x27
 80020cc:	f000 f976 	bl	80023bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80020d0:	bf00      	nop
 80020d2:	37e8      	adds	r7, #232	@ 0xe8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40004800 	.word	0x40004800
 80020dc:	58024400 	.word	0x58024400
 80020e0:	58020c00 	.word	0x58020c00
 80020e4:	24032a68 	.word	0x24032a68
 80020e8:	40020010 	.word	0x40020010
 80020ec:	24032ae0 	.word	0x24032ae0
 80020f0:	40020028 	.word	0x40020028

080020f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80020f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800212c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020f8:	f7ff fe46 	bl	8001d88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020fc:	480c      	ldr	r0, [pc, #48]	@ (8002130 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020fe:	490d      	ldr	r1, [pc, #52]	@ (8002134 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002100:	4a0d      	ldr	r2, [pc, #52]	@ (8002138 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002104:	e002      	b.n	800210c <LoopCopyDataInit>

08002106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800210a:	3304      	adds	r3, #4

0800210c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800210c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800210e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002110:	d3f9      	bcc.n	8002106 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002112:	4a0a      	ldr	r2, [pc, #40]	@ (800213c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002114:	4c0a      	ldr	r4, [pc, #40]	@ (8002140 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002118:	e001      	b.n	800211e <LoopFillZerobss>

0800211a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800211a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800211c:	3204      	adds	r2, #4

0800211e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800211e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002120:	d3fb      	bcc.n	800211a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002122:	f01b f8b7 	bl	801d294 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002126:	f7ff f8a9 	bl	800127c <main>
  bx  lr
 800212a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800212c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002130:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002134:	240013f0 	.word	0x240013f0
  ldr r2, =_sidata
 8002138:	0802089c 	.word	0x0802089c
  ldr r2, =_sbss
 800213c:	240013f0 	.word	0x240013f0
  ldr r4, =_ebss
 8002140:	240694f0 	.word	0x240694f0

08002144 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002144:	e7fe      	b.n	8002144 <ADC3_IRQHandler>
	...

08002148 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800214e:	2003      	movs	r0, #3
 8002150:	f000 f90f 	bl	8002372 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002154:	f003 ffc0 	bl	80060d8 <HAL_RCC_GetSysClockFreq>
 8002158:	4602      	mov	r2, r0
 800215a:	4b15      	ldr	r3, [pc, #84]	@ (80021b0 <HAL_Init+0x68>)
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	0a1b      	lsrs	r3, r3, #8
 8002160:	f003 030f 	and.w	r3, r3, #15
 8002164:	4913      	ldr	r1, [pc, #76]	@ (80021b4 <HAL_Init+0x6c>)
 8002166:	5ccb      	ldrb	r3, [r1, r3]
 8002168:	f003 031f 	and.w	r3, r3, #31
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
 8002170:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002172:	4b0f      	ldr	r3, [pc, #60]	@ (80021b0 <HAL_Init+0x68>)
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	4a0e      	ldr	r2, [pc, #56]	@ (80021b4 <HAL_Init+0x6c>)
 800217c:	5cd3      	ldrb	r3, [r2, r3]
 800217e:	f003 031f 	and.w	r3, r3, #31
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	fa22 f303 	lsr.w	r3, r2, r3
 8002188:	4a0b      	ldr	r2, [pc, #44]	@ (80021b8 <HAL_Init+0x70>)
 800218a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800218c:	4a0b      	ldr	r2, [pc, #44]	@ (80021bc <HAL_Init+0x74>)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002192:	200f      	movs	r0, #15
 8002194:	f7ff fc7a 	bl	8001a8c <HAL_InitTick>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e002      	b.n	80021a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80021a2:	f7ff fc55 	bl	8001a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	58024400 	.word	0x58024400
 80021b4:	0801e23c 	.word	0x0801e23c
 80021b8:	24000008 	.word	0x24000008
 80021bc:	24000004 	.word	0x24000004

080021c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021c4:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <HAL_IncTick+0x20>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	461a      	mov	r2, r3
 80021ca:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <HAL_IncTick+0x24>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4413      	add	r3, r2
 80021d0:	4a04      	ldr	r2, [pc, #16]	@ (80021e4 <HAL_IncTick+0x24>)
 80021d2:	6013      	str	r3, [r2, #0]
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	24000010 	.word	0x24000010
 80021e4:	24032b58 	.word	0x24032b58

080021e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return uwTick;
 80021ec:	4b03      	ldr	r3, [pc, #12]	@ (80021fc <HAL_GetTick+0x14>)
 80021ee:	681b      	ldr	r3, [r3, #0]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	24032b58 	.word	0x24032b58

08002200 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002204:	4b03      	ldr	r3, [pc, #12]	@ (8002214 <HAL_GetREVID+0x14>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	0c1b      	lsrs	r3, r3, #16
}
 800220a:	4618      	mov	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	5c001000 	.word	0x5c001000

08002218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002228:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <__NVIC_SetPriorityGrouping+0x40>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002234:	4013      	ands	r3, r2
 8002236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002240:	4b06      	ldr	r3, [pc, #24]	@ (800225c <__NVIC_SetPriorityGrouping+0x44>)
 8002242:	4313      	orrs	r3, r2
 8002244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002246:	4a04      	ldr	r2, [pc, #16]	@ (8002258 <__NVIC_SetPriorityGrouping+0x40>)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	60d3      	str	r3, [r2, #12]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000ed00 	.word	0xe000ed00
 800225c:	05fa0000 	.word	0x05fa0000

08002260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002264:	4b04      	ldr	r3, [pc, #16]	@ (8002278 <__NVIC_GetPriorityGrouping+0x18>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	0a1b      	lsrs	r3, r3, #8
 800226a:	f003 0307 	and.w	r3, r3, #7
}
 800226e:	4618      	mov	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800228a:	2b00      	cmp	r3, #0
 800228c:	db0b      	blt.n	80022a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	f003 021f 	and.w	r2, r3, #31
 8002294:	4907      	ldr	r1, [pc, #28]	@ (80022b4 <__NVIC_EnableIRQ+0x38>)
 8002296:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	2001      	movs	r0, #1
 800229e:	fa00 f202 	lsl.w	r2, r0, r2
 80022a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	e000e100 	.word	0xe000e100

080022b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	6039      	str	r1, [r7, #0]
 80022c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	db0a      	blt.n	80022e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	490c      	ldr	r1, [pc, #48]	@ (8002304 <__NVIC_SetPriority+0x4c>)
 80022d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022d6:	0112      	lsls	r2, r2, #4
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	440b      	add	r3, r1
 80022dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e0:	e00a      	b.n	80022f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	4908      	ldr	r1, [pc, #32]	@ (8002308 <__NVIC_SetPriority+0x50>)
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	3b04      	subs	r3, #4
 80022f0:	0112      	lsls	r2, r2, #4
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	440b      	add	r3, r1
 80022f6:	761a      	strb	r2, [r3, #24]
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	e000e100 	.word	0xe000e100
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800230c:	b480      	push	{r7}
 800230e:	b089      	sub	sp, #36	@ 0x24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f1c3 0307 	rsb	r3, r3, #7
 8002326:	2b04      	cmp	r3, #4
 8002328:	bf28      	it	cs
 800232a:	2304      	movcs	r3, #4
 800232c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3304      	adds	r3, #4
 8002332:	2b06      	cmp	r3, #6
 8002334:	d902      	bls.n	800233c <NVIC_EncodePriority+0x30>
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	3b03      	subs	r3, #3
 800233a:	e000      	b.n	800233e <NVIC_EncodePriority+0x32>
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002340:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43da      	mvns	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	401a      	ands	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002354:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	fa01 f303 	lsl.w	r3, r1, r3
 800235e:	43d9      	mvns	r1, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002364:	4313      	orrs	r3, r2
         );
}
 8002366:	4618      	mov	r0, r3
 8002368:	3724      	adds	r7, #36	@ 0x24
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff ff4c 	bl	8002218 <__NVIC_SetPriorityGrouping>
}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
 8002394:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002396:	f7ff ff63 	bl	8002260 <__NVIC_GetPriorityGrouping>
 800239a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	68b9      	ldr	r1, [r7, #8]
 80023a0:	6978      	ldr	r0, [r7, #20]
 80023a2:	f7ff ffb3 	bl	800230c <NVIC_EncodePriority>
 80023a6:	4602      	mov	r2, r0
 80023a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023ac:	4611      	mov	r1, r2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff ff82 	bl	80022b8 <__NVIC_SetPriority>
}
 80023b4:	bf00      	nop
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff ff56 	bl	800227c <__NVIC_EnableIRQ>
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80023e0:	f7ff ff02 	bl	80021e8 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e316      	b.n	8002a1e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a66      	ldr	r2, [pc, #408]	@ (8002590 <HAL_DMA_Init+0x1b8>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d04a      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a65      	ldr	r2, [pc, #404]	@ (8002594 <HAL_DMA_Init+0x1bc>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d045      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a63      	ldr	r2, [pc, #396]	@ (8002598 <HAL_DMA_Init+0x1c0>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d040      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a62      	ldr	r2, [pc, #392]	@ (800259c <HAL_DMA_Init+0x1c4>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d03b      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a60      	ldr	r2, [pc, #384]	@ (80025a0 <HAL_DMA_Init+0x1c8>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d036      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a5f      	ldr	r2, [pc, #380]	@ (80025a4 <HAL_DMA_Init+0x1cc>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d031      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a5d      	ldr	r2, [pc, #372]	@ (80025a8 <HAL_DMA_Init+0x1d0>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d02c      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a5c      	ldr	r2, [pc, #368]	@ (80025ac <HAL_DMA_Init+0x1d4>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d027      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a5a      	ldr	r2, [pc, #360]	@ (80025b0 <HAL_DMA_Init+0x1d8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d022      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a59      	ldr	r2, [pc, #356]	@ (80025b4 <HAL_DMA_Init+0x1dc>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d01d      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a57      	ldr	r2, [pc, #348]	@ (80025b8 <HAL_DMA_Init+0x1e0>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d018      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a56      	ldr	r2, [pc, #344]	@ (80025bc <HAL_DMA_Init+0x1e4>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d013      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a54      	ldr	r2, [pc, #336]	@ (80025c0 <HAL_DMA_Init+0x1e8>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d00e      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a53      	ldr	r2, [pc, #332]	@ (80025c4 <HAL_DMA_Init+0x1ec>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d009      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a51      	ldr	r2, [pc, #324]	@ (80025c8 <HAL_DMA_Init+0x1f0>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d004      	beq.n	8002490 <HAL_DMA_Init+0xb8>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a50      	ldr	r2, [pc, #320]	@ (80025cc <HAL_DMA_Init+0x1f4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d101      	bne.n	8002494 <HAL_DMA_Init+0xbc>
 8002490:	2301      	movs	r3, #1
 8002492:	e000      	b.n	8002496 <HAL_DMA_Init+0xbe>
 8002494:	2300      	movs	r3, #0
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 813b 	beq.w	8002712 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a37      	ldr	r2, [pc, #220]	@ (8002590 <HAL_DMA_Init+0x1b8>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d04a      	beq.n	800254c <HAL_DMA_Init+0x174>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a36      	ldr	r2, [pc, #216]	@ (8002594 <HAL_DMA_Init+0x1bc>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d045      	beq.n	800254c <HAL_DMA_Init+0x174>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a34      	ldr	r2, [pc, #208]	@ (8002598 <HAL_DMA_Init+0x1c0>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d040      	beq.n	800254c <HAL_DMA_Init+0x174>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a33      	ldr	r2, [pc, #204]	@ (800259c <HAL_DMA_Init+0x1c4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d03b      	beq.n	800254c <HAL_DMA_Init+0x174>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a31      	ldr	r2, [pc, #196]	@ (80025a0 <HAL_DMA_Init+0x1c8>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d036      	beq.n	800254c <HAL_DMA_Init+0x174>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a30      	ldr	r2, [pc, #192]	@ (80025a4 <HAL_DMA_Init+0x1cc>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d031      	beq.n	800254c <HAL_DMA_Init+0x174>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a2e      	ldr	r2, [pc, #184]	@ (80025a8 <HAL_DMA_Init+0x1d0>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d02c      	beq.n	800254c <HAL_DMA_Init+0x174>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a2d      	ldr	r2, [pc, #180]	@ (80025ac <HAL_DMA_Init+0x1d4>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d027      	beq.n	800254c <HAL_DMA_Init+0x174>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a2b      	ldr	r2, [pc, #172]	@ (80025b0 <HAL_DMA_Init+0x1d8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d022      	beq.n	800254c <HAL_DMA_Init+0x174>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a2a      	ldr	r2, [pc, #168]	@ (80025b4 <HAL_DMA_Init+0x1dc>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d01d      	beq.n	800254c <HAL_DMA_Init+0x174>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a28      	ldr	r2, [pc, #160]	@ (80025b8 <HAL_DMA_Init+0x1e0>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d018      	beq.n	800254c <HAL_DMA_Init+0x174>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a27      	ldr	r2, [pc, #156]	@ (80025bc <HAL_DMA_Init+0x1e4>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d013      	beq.n	800254c <HAL_DMA_Init+0x174>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a25      	ldr	r2, [pc, #148]	@ (80025c0 <HAL_DMA_Init+0x1e8>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d00e      	beq.n	800254c <HAL_DMA_Init+0x174>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a24      	ldr	r2, [pc, #144]	@ (80025c4 <HAL_DMA_Init+0x1ec>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d009      	beq.n	800254c <HAL_DMA_Init+0x174>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a22      	ldr	r2, [pc, #136]	@ (80025c8 <HAL_DMA_Init+0x1f0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d004      	beq.n	800254c <HAL_DMA_Init+0x174>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a21      	ldr	r2, [pc, #132]	@ (80025cc <HAL_DMA_Init+0x1f4>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d108      	bne.n	800255e <HAL_DMA_Init+0x186>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0201 	bic.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	e007      	b.n	800256e <HAL_DMA_Init+0x196>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0201 	bic.w	r2, r2, #1
 800256c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800256e:	e02f      	b.n	80025d0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002570:	f7ff fe3a 	bl	80021e8 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b05      	cmp	r3, #5
 800257c:	d928      	bls.n	80025d0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2220      	movs	r2, #32
 8002582:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2203      	movs	r2, #3
 8002588:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e246      	b.n	8002a1e <HAL_DMA_Init+0x646>
 8002590:	40020010 	.word	0x40020010
 8002594:	40020028 	.word	0x40020028
 8002598:	40020040 	.word	0x40020040
 800259c:	40020058 	.word	0x40020058
 80025a0:	40020070 	.word	0x40020070
 80025a4:	40020088 	.word	0x40020088
 80025a8:	400200a0 	.word	0x400200a0
 80025ac:	400200b8 	.word	0x400200b8
 80025b0:	40020410 	.word	0x40020410
 80025b4:	40020428 	.word	0x40020428
 80025b8:	40020440 	.word	0x40020440
 80025bc:	40020458 	.word	0x40020458
 80025c0:	40020470 	.word	0x40020470
 80025c4:	40020488 	.word	0x40020488
 80025c8:	400204a0 	.word	0x400204a0
 80025cc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1c8      	bne.n	8002570 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4b83      	ldr	r3, [pc, #524]	@ (80027f8 <HAL_DMA_Init+0x420>)
 80025ea:	4013      	ands	r3, r2
 80025ec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80025f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002602:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800260e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	4313      	orrs	r3, r2
 800261a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002620:	2b04      	cmp	r3, #4
 8002622:	d107      	bne.n	8002634 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262c:	4313      	orrs	r3, r2
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4313      	orrs	r3, r2
 8002632:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002634:	4b71      	ldr	r3, [pc, #452]	@ (80027fc <HAL_DMA_Init+0x424>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b71      	ldr	r3, [pc, #452]	@ (8002800 <HAL_DMA_Init+0x428>)
 800263a:	4013      	ands	r3, r2
 800263c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002640:	d328      	bcc.n	8002694 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b28      	cmp	r3, #40	@ 0x28
 8002648:	d903      	bls.n	8002652 <HAL_DMA_Init+0x27a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002650:	d917      	bls.n	8002682 <HAL_DMA_Init+0x2aa>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b3e      	cmp	r3, #62	@ 0x3e
 8002658:	d903      	bls.n	8002662 <HAL_DMA_Init+0x28a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b42      	cmp	r3, #66	@ 0x42
 8002660:	d90f      	bls.n	8002682 <HAL_DMA_Init+0x2aa>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b46      	cmp	r3, #70	@ 0x46
 8002668:	d903      	bls.n	8002672 <HAL_DMA_Init+0x29a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b48      	cmp	r3, #72	@ 0x48
 8002670:	d907      	bls.n	8002682 <HAL_DMA_Init+0x2aa>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b4e      	cmp	r3, #78	@ 0x4e
 8002678:	d905      	bls.n	8002686 <HAL_DMA_Init+0x2ae>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b52      	cmp	r3, #82	@ 0x52
 8002680:	d801      	bhi.n	8002686 <HAL_DMA_Init+0x2ae>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <HAL_DMA_Init+0x2b0>
 8002686:	2300      	movs	r3, #0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002692:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f023 0307 	bic.w	r3, r3, #7
 80026aa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d117      	bne.n	80026ee <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00e      	beq.n	80026ee <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f002 fb3f 	bl	8004d54 <DMA_CheckFifoParam>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2240      	movs	r2, #64	@ 0x40
 80026e0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e197      	b.n	8002a1e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f002 fa7a 	bl	8004bf0 <DMA_CalcBaseAndBitshift>
 80026fc:	4603      	mov	r3, r0
 80026fe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002704:	f003 031f 	and.w	r3, r3, #31
 8002708:	223f      	movs	r2, #63	@ 0x3f
 800270a:	409a      	lsls	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	e0cd      	b.n	80028ae <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a3b      	ldr	r2, [pc, #236]	@ (8002804 <HAL_DMA_Init+0x42c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d022      	beq.n	8002762 <HAL_DMA_Init+0x38a>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a39      	ldr	r2, [pc, #228]	@ (8002808 <HAL_DMA_Init+0x430>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d01d      	beq.n	8002762 <HAL_DMA_Init+0x38a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a38      	ldr	r2, [pc, #224]	@ (800280c <HAL_DMA_Init+0x434>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d018      	beq.n	8002762 <HAL_DMA_Init+0x38a>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a36      	ldr	r2, [pc, #216]	@ (8002810 <HAL_DMA_Init+0x438>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d013      	beq.n	8002762 <HAL_DMA_Init+0x38a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a35      	ldr	r2, [pc, #212]	@ (8002814 <HAL_DMA_Init+0x43c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d00e      	beq.n	8002762 <HAL_DMA_Init+0x38a>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a33      	ldr	r2, [pc, #204]	@ (8002818 <HAL_DMA_Init+0x440>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d009      	beq.n	8002762 <HAL_DMA_Init+0x38a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a32      	ldr	r2, [pc, #200]	@ (800281c <HAL_DMA_Init+0x444>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d004      	beq.n	8002762 <HAL_DMA_Init+0x38a>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a30      	ldr	r2, [pc, #192]	@ (8002820 <HAL_DMA_Init+0x448>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d101      	bne.n	8002766 <HAL_DMA_Init+0x38e>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <HAL_DMA_Init+0x390>
 8002766:	2300      	movs	r3, #0
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 8097 	beq.w	800289c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a24      	ldr	r2, [pc, #144]	@ (8002804 <HAL_DMA_Init+0x42c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d021      	beq.n	80027bc <HAL_DMA_Init+0x3e4>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a22      	ldr	r2, [pc, #136]	@ (8002808 <HAL_DMA_Init+0x430>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d01c      	beq.n	80027bc <HAL_DMA_Init+0x3e4>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a21      	ldr	r2, [pc, #132]	@ (800280c <HAL_DMA_Init+0x434>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d017      	beq.n	80027bc <HAL_DMA_Init+0x3e4>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a1f      	ldr	r2, [pc, #124]	@ (8002810 <HAL_DMA_Init+0x438>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d012      	beq.n	80027bc <HAL_DMA_Init+0x3e4>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a1e      	ldr	r2, [pc, #120]	@ (8002814 <HAL_DMA_Init+0x43c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d00d      	beq.n	80027bc <HAL_DMA_Init+0x3e4>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002818 <HAL_DMA_Init+0x440>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d008      	beq.n	80027bc <HAL_DMA_Init+0x3e4>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a1b      	ldr	r2, [pc, #108]	@ (800281c <HAL_DMA_Init+0x444>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d003      	beq.n	80027bc <HAL_DMA_Init+0x3e4>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a19      	ldr	r2, [pc, #100]	@ (8002820 <HAL_DMA_Init+0x448>)
 80027ba:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	4b13      	ldr	r3, [pc, #76]	@ (8002824 <HAL_DMA_Init+0x44c>)
 80027d8:	4013      	ands	r3, r2
 80027da:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b40      	cmp	r3, #64	@ 0x40
 80027e2:	d021      	beq.n	8002828 <HAL_DMA_Init+0x450>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	2b80      	cmp	r3, #128	@ 0x80
 80027ea:	d102      	bne.n	80027f2 <HAL_DMA_Init+0x41a>
 80027ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80027f0:	e01b      	b.n	800282a <HAL_DMA_Init+0x452>
 80027f2:	2300      	movs	r3, #0
 80027f4:	e019      	b.n	800282a <HAL_DMA_Init+0x452>
 80027f6:	bf00      	nop
 80027f8:	fe10803f 	.word	0xfe10803f
 80027fc:	5c001000 	.word	0x5c001000
 8002800:	ffff0000 	.word	0xffff0000
 8002804:	58025408 	.word	0x58025408
 8002808:	5802541c 	.word	0x5802541c
 800280c:	58025430 	.word	0x58025430
 8002810:	58025444 	.word	0x58025444
 8002814:	58025458 	.word	0x58025458
 8002818:	5802546c 	.word	0x5802546c
 800281c:	58025480 	.word	0x58025480
 8002820:	58025494 	.word	0x58025494
 8002824:	fffe000f 	.word	0xfffe000f
 8002828:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	68d2      	ldr	r2, [r2, #12]
 800282e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002830:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002838:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002840:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002848:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002850:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002858:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	4313      	orrs	r3, r2
 800285e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	4b6e      	ldr	r3, [pc, #440]	@ (8002a28 <HAL_DMA_Init+0x650>)
 8002870:	4413      	add	r3, r2
 8002872:	4a6e      	ldr	r2, [pc, #440]	@ (8002a2c <HAL_DMA_Init+0x654>)
 8002874:	fba2 2303 	umull	r2, r3, r2, r3
 8002878:	091b      	lsrs	r3, r3, #4
 800287a:	009a      	lsls	r2, r3, #2
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f002 f9b5 	bl	8004bf0 <DMA_CalcBaseAndBitshift>
 8002886:	4603      	mov	r3, r0
 8002888:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	2201      	movs	r2, #1
 8002894:	409a      	lsls	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	e008      	b.n	80028ae <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2240      	movs	r2, #64	@ 0x40
 80028a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2203      	movs	r2, #3
 80028a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e0b7      	b.n	8002a1e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a5f      	ldr	r2, [pc, #380]	@ (8002a30 <HAL_DMA_Init+0x658>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d072      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a5d      	ldr	r2, [pc, #372]	@ (8002a34 <HAL_DMA_Init+0x65c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d06d      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a5c      	ldr	r2, [pc, #368]	@ (8002a38 <HAL_DMA_Init+0x660>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d068      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a5a      	ldr	r2, [pc, #360]	@ (8002a3c <HAL_DMA_Init+0x664>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d063      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a59      	ldr	r2, [pc, #356]	@ (8002a40 <HAL_DMA_Init+0x668>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d05e      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a57      	ldr	r2, [pc, #348]	@ (8002a44 <HAL_DMA_Init+0x66c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d059      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a56      	ldr	r2, [pc, #344]	@ (8002a48 <HAL_DMA_Init+0x670>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d054      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a54      	ldr	r2, [pc, #336]	@ (8002a4c <HAL_DMA_Init+0x674>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d04f      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a53      	ldr	r2, [pc, #332]	@ (8002a50 <HAL_DMA_Init+0x678>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d04a      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a51      	ldr	r2, [pc, #324]	@ (8002a54 <HAL_DMA_Init+0x67c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d045      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a50      	ldr	r2, [pc, #320]	@ (8002a58 <HAL_DMA_Init+0x680>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d040      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a4e      	ldr	r2, [pc, #312]	@ (8002a5c <HAL_DMA_Init+0x684>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d03b      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a4d      	ldr	r2, [pc, #308]	@ (8002a60 <HAL_DMA_Init+0x688>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d036      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a4b      	ldr	r2, [pc, #300]	@ (8002a64 <HAL_DMA_Init+0x68c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d031      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a4a      	ldr	r2, [pc, #296]	@ (8002a68 <HAL_DMA_Init+0x690>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d02c      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a48      	ldr	r2, [pc, #288]	@ (8002a6c <HAL_DMA_Init+0x694>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d027      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a47      	ldr	r2, [pc, #284]	@ (8002a70 <HAL_DMA_Init+0x698>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d022      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a45      	ldr	r2, [pc, #276]	@ (8002a74 <HAL_DMA_Init+0x69c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d01d      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a44      	ldr	r2, [pc, #272]	@ (8002a78 <HAL_DMA_Init+0x6a0>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d018      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a42      	ldr	r2, [pc, #264]	@ (8002a7c <HAL_DMA_Init+0x6a4>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d013      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a41      	ldr	r2, [pc, #260]	@ (8002a80 <HAL_DMA_Init+0x6a8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d00e      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a3f      	ldr	r2, [pc, #252]	@ (8002a84 <HAL_DMA_Init+0x6ac>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d009      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a3e      	ldr	r2, [pc, #248]	@ (8002a88 <HAL_DMA_Init+0x6b0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d004      	beq.n	800299e <HAL_DMA_Init+0x5c6>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a3c      	ldr	r2, [pc, #240]	@ (8002a8c <HAL_DMA_Init+0x6b4>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d101      	bne.n	80029a2 <HAL_DMA_Init+0x5ca>
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <HAL_DMA_Init+0x5cc>
 80029a2:	2300      	movs	r3, #0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d032      	beq.n	8002a0e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f002 fa4f 	bl	8004e4c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2b80      	cmp	r3, #128	@ 0x80
 80029b4:	d102      	bne.n	80029bc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80029d0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d010      	beq.n	80029fc <HAL_DMA_Init+0x624>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b08      	cmp	r3, #8
 80029e0:	d80c      	bhi.n	80029fc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f002 facc 	bl	8004f80 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	e008      	b.n	8002a0e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	a7fdabf8 	.word	0xa7fdabf8
 8002a2c:	cccccccd 	.word	0xcccccccd
 8002a30:	40020010 	.word	0x40020010
 8002a34:	40020028 	.word	0x40020028
 8002a38:	40020040 	.word	0x40020040
 8002a3c:	40020058 	.word	0x40020058
 8002a40:	40020070 	.word	0x40020070
 8002a44:	40020088 	.word	0x40020088
 8002a48:	400200a0 	.word	0x400200a0
 8002a4c:	400200b8 	.word	0x400200b8
 8002a50:	40020410 	.word	0x40020410
 8002a54:	40020428 	.word	0x40020428
 8002a58:	40020440 	.word	0x40020440
 8002a5c:	40020458 	.word	0x40020458
 8002a60:	40020470 	.word	0x40020470
 8002a64:	40020488 	.word	0x40020488
 8002a68:	400204a0 	.word	0x400204a0
 8002a6c:	400204b8 	.word	0x400204b8
 8002a70:	58025408 	.word	0x58025408
 8002a74:	5802541c 	.word	0x5802541c
 8002a78:	58025430 	.word	0x58025430
 8002a7c:	58025444 	.word	0x58025444
 8002a80:	58025458 	.word	0x58025458
 8002a84:	5802546c 	.word	0x5802546c
 8002a88:	58025480 	.word	0x58025480
 8002a8c:	58025494 	.word	0x58025494

08002a90 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
 8002a9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e226      	b.n	8002efa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d101      	bne.n	8002aba <HAL_DMA_Start_IT+0x2a>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e21f      	b.n	8002efa <HAL_DMA_Start_IT+0x46a>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	f040 820a 	bne.w	8002ee4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a68      	ldr	r2, [pc, #416]	@ (8002c84 <HAL_DMA_Start_IT+0x1f4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d04a      	beq.n	8002b7e <HAL_DMA_Start_IT+0xee>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a66      	ldr	r2, [pc, #408]	@ (8002c88 <HAL_DMA_Start_IT+0x1f8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d045      	beq.n	8002b7e <HAL_DMA_Start_IT+0xee>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a65      	ldr	r2, [pc, #404]	@ (8002c8c <HAL_DMA_Start_IT+0x1fc>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d040      	beq.n	8002b7e <HAL_DMA_Start_IT+0xee>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a63      	ldr	r2, [pc, #396]	@ (8002c90 <HAL_DMA_Start_IT+0x200>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d03b      	beq.n	8002b7e <HAL_DMA_Start_IT+0xee>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a62      	ldr	r2, [pc, #392]	@ (8002c94 <HAL_DMA_Start_IT+0x204>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d036      	beq.n	8002b7e <HAL_DMA_Start_IT+0xee>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a60      	ldr	r2, [pc, #384]	@ (8002c98 <HAL_DMA_Start_IT+0x208>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d031      	beq.n	8002b7e <HAL_DMA_Start_IT+0xee>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a5f      	ldr	r2, [pc, #380]	@ (8002c9c <HAL_DMA_Start_IT+0x20c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d02c      	beq.n	8002b7e <HAL_DMA_Start_IT+0xee>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a5d      	ldr	r2, [pc, #372]	@ (8002ca0 <HAL_DMA_Start_IT+0x210>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d027      	beq.n	8002b7e <HAL_DMA_Start_IT+0xee>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a5c      	ldr	r2, [pc, #368]	@ (8002ca4 <HAL_DMA_Start_IT+0x214>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d022      	beq.n	8002b7e <HAL_DMA_Start_IT+0xee>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a5a      	ldr	r2, [pc, #360]	@ (8002ca8 <HAL_DMA_Start_IT+0x218>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d01d      	beq.n	8002b7e <HAL_DMA_Start_IT+0xee>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a59      	ldr	r2, [pc, #356]	@ (8002cac <HAL_DMA_Start_IT+0x21c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d018      	beq.n	8002b7e <HAL_DMA_Start_IT+0xee>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a57      	ldr	r2, [pc, #348]	@ (8002cb0 <HAL_DMA_Start_IT+0x220>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d013      	beq.n	8002b7e <HAL_DMA_Start_IT+0xee>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a56      	ldr	r2, [pc, #344]	@ (8002cb4 <HAL_DMA_Start_IT+0x224>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d00e      	beq.n	8002b7e <HAL_DMA_Start_IT+0xee>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a54      	ldr	r2, [pc, #336]	@ (8002cb8 <HAL_DMA_Start_IT+0x228>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d009      	beq.n	8002b7e <HAL_DMA_Start_IT+0xee>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a53      	ldr	r2, [pc, #332]	@ (8002cbc <HAL_DMA_Start_IT+0x22c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d004      	beq.n	8002b7e <HAL_DMA_Start_IT+0xee>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a51      	ldr	r2, [pc, #324]	@ (8002cc0 <HAL_DMA_Start_IT+0x230>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d108      	bne.n	8002b90 <HAL_DMA_Start_IT+0x100>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0201 	bic.w	r2, r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	e007      	b.n	8002ba0 <HAL_DMA_Start_IT+0x110>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0201 	bic.w	r2, r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	68b9      	ldr	r1, [r7, #8]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f001 fe76 	bl	8004898 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a34      	ldr	r2, [pc, #208]	@ (8002c84 <HAL_DMA_Start_IT+0x1f4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d04a      	beq.n	8002c4c <HAL_DMA_Start_IT+0x1bc>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a33      	ldr	r2, [pc, #204]	@ (8002c88 <HAL_DMA_Start_IT+0x1f8>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d045      	beq.n	8002c4c <HAL_DMA_Start_IT+0x1bc>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a31      	ldr	r2, [pc, #196]	@ (8002c8c <HAL_DMA_Start_IT+0x1fc>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d040      	beq.n	8002c4c <HAL_DMA_Start_IT+0x1bc>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a30      	ldr	r2, [pc, #192]	@ (8002c90 <HAL_DMA_Start_IT+0x200>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d03b      	beq.n	8002c4c <HAL_DMA_Start_IT+0x1bc>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a2e      	ldr	r2, [pc, #184]	@ (8002c94 <HAL_DMA_Start_IT+0x204>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d036      	beq.n	8002c4c <HAL_DMA_Start_IT+0x1bc>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a2d      	ldr	r2, [pc, #180]	@ (8002c98 <HAL_DMA_Start_IT+0x208>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d031      	beq.n	8002c4c <HAL_DMA_Start_IT+0x1bc>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a2b      	ldr	r2, [pc, #172]	@ (8002c9c <HAL_DMA_Start_IT+0x20c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d02c      	beq.n	8002c4c <HAL_DMA_Start_IT+0x1bc>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a2a      	ldr	r2, [pc, #168]	@ (8002ca0 <HAL_DMA_Start_IT+0x210>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d027      	beq.n	8002c4c <HAL_DMA_Start_IT+0x1bc>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a28      	ldr	r2, [pc, #160]	@ (8002ca4 <HAL_DMA_Start_IT+0x214>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d022      	beq.n	8002c4c <HAL_DMA_Start_IT+0x1bc>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a27      	ldr	r2, [pc, #156]	@ (8002ca8 <HAL_DMA_Start_IT+0x218>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d01d      	beq.n	8002c4c <HAL_DMA_Start_IT+0x1bc>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a25      	ldr	r2, [pc, #148]	@ (8002cac <HAL_DMA_Start_IT+0x21c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d018      	beq.n	8002c4c <HAL_DMA_Start_IT+0x1bc>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a24      	ldr	r2, [pc, #144]	@ (8002cb0 <HAL_DMA_Start_IT+0x220>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d013      	beq.n	8002c4c <HAL_DMA_Start_IT+0x1bc>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a22      	ldr	r2, [pc, #136]	@ (8002cb4 <HAL_DMA_Start_IT+0x224>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d00e      	beq.n	8002c4c <HAL_DMA_Start_IT+0x1bc>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a21      	ldr	r2, [pc, #132]	@ (8002cb8 <HAL_DMA_Start_IT+0x228>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d009      	beq.n	8002c4c <HAL_DMA_Start_IT+0x1bc>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a1f      	ldr	r2, [pc, #124]	@ (8002cbc <HAL_DMA_Start_IT+0x22c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d004      	beq.n	8002c4c <HAL_DMA_Start_IT+0x1bc>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a1e      	ldr	r2, [pc, #120]	@ (8002cc0 <HAL_DMA_Start_IT+0x230>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d101      	bne.n	8002c50 <HAL_DMA_Start_IT+0x1c0>
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e000      	b.n	8002c52 <HAL_DMA_Start_IT+0x1c2>
 8002c50:	2300      	movs	r3, #0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d036      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f023 021e 	bic.w	r2, r3, #30
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0216 	orr.w	r2, r2, #22
 8002c68:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d03e      	beq.n	8002cf0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f042 0208 	orr.w	r2, r2, #8
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	e035      	b.n	8002cf0 <HAL_DMA_Start_IT+0x260>
 8002c84:	40020010 	.word	0x40020010
 8002c88:	40020028 	.word	0x40020028
 8002c8c:	40020040 	.word	0x40020040
 8002c90:	40020058 	.word	0x40020058
 8002c94:	40020070 	.word	0x40020070
 8002c98:	40020088 	.word	0x40020088
 8002c9c:	400200a0 	.word	0x400200a0
 8002ca0:	400200b8 	.word	0x400200b8
 8002ca4:	40020410 	.word	0x40020410
 8002ca8:	40020428 	.word	0x40020428
 8002cac:	40020440 	.word	0x40020440
 8002cb0:	40020458 	.word	0x40020458
 8002cb4:	40020470 	.word	0x40020470
 8002cb8:	40020488 	.word	0x40020488
 8002cbc:	400204a0 	.word	0x400204a0
 8002cc0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f023 020e 	bic.w	r2, r3, #14
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 020a 	orr.w	r2, r2, #10
 8002cd6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d007      	beq.n	8002cf0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0204 	orr.w	r2, r2, #4
 8002cee:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a83      	ldr	r2, [pc, #524]	@ (8002f04 <HAL_DMA_Start_IT+0x474>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d072      	beq.n	8002de0 <HAL_DMA_Start_IT+0x350>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a82      	ldr	r2, [pc, #520]	@ (8002f08 <HAL_DMA_Start_IT+0x478>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d06d      	beq.n	8002de0 <HAL_DMA_Start_IT+0x350>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a80      	ldr	r2, [pc, #512]	@ (8002f0c <HAL_DMA_Start_IT+0x47c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d068      	beq.n	8002de0 <HAL_DMA_Start_IT+0x350>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a7f      	ldr	r2, [pc, #508]	@ (8002f10 <HAL_DMA_Start_IT+0x480>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d063      	beq.n	8002de0 <HAL_DMA_Start_IT+0x350>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a7d      	ldr	r2, [pc, #500]	@ (8002f14 <HAL_DMA_Start_IT+0x484>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d05e      	beq.n	8002de0 <HAL_DMA_Start_IT+0x350>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a7c      	ldr	r2, [pc, #496]	@ (8002f18 <HAL_DMA_Start_IT+0x488>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d059      	beq.n	8002de0 <HAL_DMA_Start_IT+0x350>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a7a      	ldr	r2, [pc, #488]	@ (8002f1c <HAL_DMA_Start_IT+0x48c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d054      	beq.n	8002de0 <HAL_DMA_Start_IT+0x350>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a79      	ldr	r2, [pc, #484]	@ (8002f20 <HAL_DMA_Start_IT+0x490>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d04f      	beq.n	8002de0 <HAL_DMA_Start_IT+0x350>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a77      	ldr	r2, [pc, #476]	@ (8002f24 <HAL_DMA_Start_IT+0x494>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d04a      	beq.n	8002de0 <HAL_DMA_Start_IT+0x350>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a76      	ldr	r2, [pc, #472]	@ (8002f28 <HAL_DMA_Start_IT+0x498>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d045      	beq.n	8002de0 <HAL_DMA_Start_IT+0x350>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a74      	ldr	r2, [pc, #464]	@ (8002f2c <HAL_DMA_Start_IT+0x49c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d040      	beq.n	8002de0 <HAL_DMA_Start_IT+0x350>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a73      	ldr	r2, [pc, #460]	@ (8002f30 <HAL_DMA_Start_IT+0x4a0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d03b      	beq.n	8002de0 <HAL_DMA_Start_IT+0x350>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a71      	ldr	r2, [pc, #452]	@ (8002f34 <HAL_DMA_Start_IT+0x4a4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d036      	beq.n	8002de0 <HAL_DMA_Start_IT+0x350>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a70      	ldr	r2, [pc, #448]	@ (8002f38 <HAL_DMA_Start_IT+0x4a8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d031      	beq.n	8002de0 <HAL_DMA_Start_IT+0x350>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a6e      	ldr	r2, [pc, #440]	@ (8002f3c <HAL_DMA_Start_IT+0x4ac>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d02c      	beq.n	8002de0 <HAL_DMA_Start_IT+0x350>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a6d      	ldr	r2, [pc, #436]	@ (8002f40 <HAL_DMA_Start_IT+0x4b0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d027      	beq.n	8002de0 <HAL_DMA_Start_IT+0x350>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a6b      	ldr	r2, [pc, #428]	@ (8002f44 <HAL_DMA_Start_IT+0x4b4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d022      	beq.n	8002de0 <HAL_DMA_Start_IT+0x350>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a6a      	ldr	r2, [pc, #424]	@ (8002f48 <HAL_DMA_Start_IT+0x4b8>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d01d      	beq.n	8002de0 <HAL_DMA_Start_IT+0x350>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a68      	ldr	r2, [pc, #416]	@ (8002f4c <HAL_DMA_Start_IT+0x4bc>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d018      	beq.n	8002de0 <HAL_DMA_Start_IT+0x350>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a67      	ldr	r2, [pc, #412]	@ (8002f50 <HAL_DMA_Start_IT+0x4c0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d013      	beq.n	8002de0 <HAL_DMA_Start_IT+0x350>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a65      	ldr	r2, [pc, #404]	@ (8002f54 <HAL_DMA_Start_IT+0x4c4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00e      	beq.n	8002de0 <HAL_DMA_Start_IT+0x350>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a64      	ldr	r2, [pc, #400]	@ (8002f58 <HAL_DMA_Start_IT+0x4c8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d009      	beq.n	8002de0 <HAL_DMA_Start_IT+0x350>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a62      	ldr	r2, [pc, #392]	@ (8002f5c <HAL_DMA_Start_IT+0x4cc>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d004      	beq.n	8002de0 <HAL_DMA_Start_IT+0x350>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a61      	ldr	r2, [pc, #388]	@ (8002f60 <HAL_DMA_Start_IT+0x4d0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d101      	bne.n	8002de4 <HAL_DMA_Start_IT+0x354>
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <HAL_DMA_Start_IT+0x356>
 8002de4:	2300      	movs	r3, #0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d01a      	beq.n	8002e20 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d007      	beq.n	8002e08 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e06:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d007      	beq.n	8002e20 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e1e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a37      	ldr	r2, [pc, #220]	@ (8002f04 <HAL_DMA_Start_IT+0x474>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d04a      	beq.n	8002ec0 <HAL_DMA_Start_IT+0x430>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a36      	ldr	r2, [pc, #216]	@ (8002f08 <HAL_DMA_Start_IT+0x478>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d045      	beq.n	8002ec0 <HAL_DMA_Start_IT+0x430>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a34      	ldr	r2, [pc, #208]	@ (8002f0c <HAL_DMA_Start_IT+0x47c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d040      	beq.n	8002ec0 <HAL_DMA_Start_IT+0x430>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a33      	ldr	r2, [pc, #204]	@ (8002f10 <HAL_DMA_Start_IT+0x480>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d03b      	beq.n	8002ec0 <HAL_DMA_Start_IT+0x430>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a31      	ldr	r2, [pc, #196]	@ (8002f14 <HAL_DMA_Start_IT+0x484>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d036      	beq.n	8002ec0 <HAL_DMA_Start_IT+0x430>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a30      	ldr	r2, [pc, #192]	@ (8002f18 <HAL_DMA_Start_IT+0x488>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d031      	beq.n	8002ec0 <HAL_DMA_Start_IT+0x430>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a2e      	ldr	r2, [pc, #184]	@ (8002f1c <HAL_DMA_Start_IT+0x48c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d02c      	beq.n	8002ec0 <HAL_DMA_Start_IT+0x430>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a2d      	ldr	r2, [pc, #180]	@ (8002f20 <HAL_DMA_Start_IT+0x490>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d027      	beq.n	8002ec0 <HAL_DMA_Start_IT+0x430>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a2b      	ldr	r2, [pc, #172]	@ (8002f24 <HAL_DMA_Start_IT+0x494>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d022      	beq.n	8002ec0 <HAL_DMA_Start_IT+0x430>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a2a      	ldr	r2, [pc, #168]	@ (8002f28 <HAL_DMA_Start_IT+0x498>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d01d      	beq.n	8002ec0 <HAL_DMA_Start_IT+0x430>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a28      	ldr	r2, [pc, #160]	@ (8002f2c <HAL_DMA_Start_IT+0x49c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d018      	beq.n	8002ec0 <HAL_DMA_Start_IT+0x430>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a27      	ldr	r2, [pc, #156]	@ (8002f30 <HAL_DMA_Start_IT+0x4a0>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d013      	beq.n	8002ec0 <HAL_DMA_Start_IT+0x430>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a25      	ldr	r2, [pc, #148]	@ (8002f34 <HAL_DMA_Start_IT+0x4a4>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d00e      	beq.n	8002ec0 <HAL_DMA_Start_IT+0x430>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a24      	ldr	r2, [pc, #144]	@ (8002f38 <HAL_DMA_Start_IT+0x4a8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d009      	beq.n	8002ec0 <HAL_DMA_Start_IT+0x430>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a22      	ldr	r2, [pc, #136]	@ (8002f3c <HAL_DMA_Start_IT+0x4ac>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d004      	beq.n	8002ec0 <HAL_DMA_Start_IT+0x430>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a21      	ldr	r2, [pc, #132]	@ (8002f40 <HAL_DMA_Start_IT+0x4b0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d108      	bne.n	8002ed2 <HAL_DMA_Start_IT+0x442>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	e012      	b.n	8002ef8 <HAL_DMA_Start_IT+0x468>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0201 	orr.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	e009      	b.n	8002ef8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002eea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40020010 	.word	0x40020010
 8002f08:	40020028 	.word	0x40020028
 8002f0c:	40020040 	.word	0x40020040
 8002f10:	40020058 	.word	0x40020058
 8002f14:	40020070 	.word	0x40020070
 8002f18:	40020088 	.word	0x40020088
 8002f1c:	400200a0 	.word	0x400200a0
 8002f20:	400200b8 	.word	0x400200b8
 8002f24:	40020410 	.word	0x40020410
 8002f28:	40020428 	.word	0x40020428
 8002f2c:	40020440 	.word	0x40020440
 8002f30:	40020458 	.word	0x40020458
 8002f34:	40020470 	.word	0x40020470
 8002f38:	40020488 	.word	0x40020488
 8002f3c:	400204a0 	.word	0x400204a0
 8002f40:	400204b8 	.word	0x400204b8
 8002f44:	58025408 	.word	0x58025408
 8002f48:	5802541c 	.word	0x5802541c
 8002f4c:	58025430 	.word	0x58025430
 8002f50:	58025444 	.word	0x58025444
 8002f54:	58025458 	.word	0x58025458
 8002f58:	5802546c 	.word	0x5802546c
 8002f5c:	58025480 	.word	0x58025480
 8002f60:	58025494 	.word	0x58025494

08002f64 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002f6c:	f7ff f93c 	bl	80021e8 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e2dc      	b.n	8003536 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d008      	beq.n	8002f9a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2280      	movs	r2, #128	@ 0x80
 8002f8c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e2cd      	b.n	8003536 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a76      	ldr	r2, [pc, #472]	@ (8003178 <HAL_DMA_Abort+0x214>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d04a      	beq.n	800303a <HAL_DMA_Abort+0xd6>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a74      	ldr	r2, [pc, #464]	@ (800317c <HAL_DMA_Abort+0x218>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d045      	beq.n	800303a <HAL_DMA_Abort+0xd6>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a73      	ldr	r2, [pc, #460]	@ (8003180 <HAL_DMA_Abort+0x21c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d040      	beq.n	800303a <HAL_DMA_Abort+0xd6>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a71      	ldr	r2, [pc, #452]	@ (8003184 <HAL_DMA_Abort+0x220>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d03b      	beq.n	800303a <HAL_DMA_Abort+0xd6>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a70      	ldr	r2, [pc, #448]	@ (8003188 <HAL_DMA_Abort+0x224>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d036      	beq.n	800303a <HAL_DMA_Abort+0xd6>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a6e      	ldr	r2, [pc, #440]	@ (800318c <HAL_DMA_Abort+0x228>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d031      	beq.n	800303a <HAL_DMA_Abort+0xd6>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a6d      	ldr	r2, [pc, #436]	@ (8003190 <HAL_DMA_Abort+0x22c>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d02c      	beq.n	800303a <HAL_DMA_Abort+0xd6>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a6b      	ldr	r2, [pc, #428]	@ (8003194 <HAL_DMA_Abort+0x230>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d027      	beq.n	800303a <HAL_DMA_Abort+0xd6>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a6a      	ldr	r2, [pc, #424]	@ (8003198 <HAL_DMA_Abort+0x234>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d022      	beq.n	800303a <HAL_DMA_Abort+0xd6>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a68      	ldr	r2, [pc, #416]	@ (800319c <HAL_DMA_Abort+0x238>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d01d      	beq.n	800303a <HAL_DMA_Abort+0xd6>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a67      	ldr	r2, [pc, #412]	@ (80031a0 <HAL_DMA_Abort+0x23c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d018      	beq.n	800303a <HAL_DMA_Abort+0xd6>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a65      	ldr	r2, [pc, #404]	@ (80031a4 <HAL_DMA_Abort+0x240>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d013      	beq.n	800303a <HAL_DMA_Abort+0xd6>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a64      	ldr	r2, [pc, #400]	@ (80031a8 <HAL_DMA_Abort+0x244>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d00e      	beq.n	800303a <HAL_DMA_Abort+0xd6>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a62      	ldr	r2, [pc, #392]	@ (80031ac <HAL_DMA_Abort+0x248>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d009      	beq.n	800303a <HAL_DMA_Abort+0xd6>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a61      	ldr	r2, [pc, #388]	@ (80031b0 <HAL_DMA_Abort+0x24c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d004      	beq.n	800303a <HAL_DMA_Abort+0xd6>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a5f      	ldr	r2, [pc, #380]	@ (80031b4 <HAL_DMA_Abort+0x250>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d101      	bne.n	800303e <HAL_DMA_Abort+0xda>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <HAL_DMA_Abort+0xdc>
 800303e:	2300      	movs	r3, #0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d013      	beq.n	800306c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 021e 	bic.w	r2, r2, #30
 8003052:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695a      	ldr	r2, [r3, #20]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003062:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	e00a      	b.n	8003082 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 020e 	bic.w	r2, r2, #14
 800307a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a3c      	ldr	r2, [pc, #240]	@ (8003178 <HAL_DMA_Abort+0x214>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d072      	beq.n	8003172 <HAL_DMA_Abort+0x20e>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a3a      	ldr	r2, [pc, #232]	@ (800317c <HAL_DMA_Abort+0x218>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d06d      	beq.n	8003172 <HAL_DMA_Abort+0x20e>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a39      	ldr	r2, [pc, #228]	@ (8003180 <HAL_DMA_Abort+0x21c>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d068      	beq.n	8003172 <HAL_DMA_Abort+0x20e>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a37      	ldr	r2, [pc, #220]	@ (8003184 <HAL_DMA_Abort+0x220>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d063      	beq.n	8003172 <HAL_DMA_Abort+0x20e>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a36      	ldr	r2, [pc, #216]	@ (8003188 <HAL_DMA_Abort+0x224>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d05e      	beq.n	8003172 <HAL_DMA_Abort+0x20e>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a34      	ldr	r2, [pc, #208]	@ (800318c <HAL_DMA_Abort+0x228>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d059      	beq.n	8003172 <HAL_DMA_Abort+0x20e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a33      	ldr	r2, [pc, #204]	@ (8003190 <HAL_DMA_Abort+0x22c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d054      	beq.n	8003172 <HAL_DMA_Abort+0x20e>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a31      	ldr	r2, [pc, #196]	@ (8003194 <HAL_DMA_Abort+0x230>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d04f      	beq.n	8003172 <HAL_DMA_Abort+0x20e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a30      	ldr	r2, [pc, #192]	@ (8003198 <HAL_DMA_Abort+0x234>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d04a      	beq.n	8003172 <HAL_DMA_Abort+0x20e>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a2e      	ldr	r2, [pc, #184]	@ (800319c <HAL_DMA_Abort+0x238>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d045      	beq.n	8003172 <HAL_DMA_Abort+0x20e>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a2d      	ldr	r2, [pc, #180]	@ (80031a0 <HAL_DMA_Abort+0x23c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d040      	beq.n	8003172 <HAL_DMA_Abort+0x20e>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a2b      	ldr	r2, [pc, #172]	@ (80031a4 <HAL_DMA_Abort+0x240>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d03b      	beq.n	8003172 <HAL_DMA_Abort+0x20e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a2a      	ldr	r2, [pc, #168]	@ (80031a8 <HAL_DMA_Abort+0x244>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d036      	beq.n	8003172 <HAL_DMA_Abort+0x20e>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a28      	ldr	r2, [pc, #160]	@ (80031ac <HAL_DMA_Abort+0x248>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d031      	beq.n	8003172 <HAL_DMA_Abort+0x20e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a27      	ldr	r2, [pc, #156]	@ (80031b0 <HAL_DMA_Abort+0x24c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d02c      	beq.n	8003172 <HAL_DMA_Abort+0x20e>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a25      	ldr	r2, [pc, #148]	@ (80031b4 <HAL_DMA_Abort+0x250>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d027      	beq.n	8003172 <HAL_DMA_Abort+0x20e>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a24      	ldr	r2, [pc, #144]	@ (80031b8 <HAL_DMA_Abort+0x254>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d022      	beq.n	8003172 <HAL_DMA_Abort+0x20e>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a22      	ldr	r2, [pc, #136]	@ (80031bc <HAL_DMA_Abort+0x258>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d01d      	beq.n	8003172 <HAL_DMA_Abort+0x20e>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a21      	ldr	r2, [pc, #132]	@ (80031c0 <HAL_DMA_Abort+0x25c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d018      	beq.n	8003172 <HAL_DMA_Abort+0x20e>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a1f      	ldr	r2, [pc, #124]	@ (80031c4 <HAL_DMA_Abort+0x260>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d013      	beq.n	8003172 <HAL_DMA_Abort+0x20e>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a1e      	ldr	r2, [pc, #120]	@ (80031c8 <HAL_DMA_Abort+0x264>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d00e      	beq.n	8003172 <HAL_DMA_Abort+0x20e>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a1c      	ldr	r2, [pc, #112]	@ (80031cc <HAL_DMA_Abort+0x268>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d009      	beq.n	8003172 <HAL_DMA_Abort+0x20e>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a1b      	ldr	r2, [pc, #108]	@ (80031d0 <HAL_DMA_Abort+0x26c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d004      	beq.n	8003172 <HAL_DMA_Abort+0x20e>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a19      	ldr	r2, [pc, #100]	@ (80031d4 <HAL_DMA_Abort+0x270>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d132      	bne.n	80031d8 <HAL_DMA_Abort+0x274>
 8003172:	2301      	movs	r3, #1
 8003174:	e031      	b.n	80031da <HAL_DMA_Abort+0x276>
 8003176:	bf00      	nop
 8003178:	40020010 	.word	0x40020010
 800317c:	40020028 	.word	0x40020028
 8003180:	40020040 	.word	0x40020040
 8003184:	40020058 	.word	0x40020058
 8003188:	40020070 	.word	0x40020070
 800318c:	40020088 	.word	0x40020088
 8003190:	400200a0 	.word	0x400200a0
 8003194:	400200b8 	.word	0x400200b8
 8003198:	40020410 	.word	0x40020410
 800319c:	40020428 	.word	0x40020428
 80031a0:	40020440 	.word	0x40020440
 80031a4:	40020458 	.word	0x40020458
 80031a8:	40020470 	.word	0x40020470
 80031ac:	40020488 	.word	0x40020488
 80031b0:	400204a0 	.word	0x400204a0
 80031b4:	400204b8 	.word	0x400204b8
 80031b8:	58025408 	.word	0x58025408
 80031bc:	5802541c 	.word	0x5802541c
 80031c0:	58025430 	.word	0x58025430
 80031c4:	58025444 	.word	0x58025444
 80031c8:	58025458 	.word	0x58025458
 80031cc:	5802546c 	.word	0x5802546c
 80031d0:	58025480 	.word	0x58025480
 80031d4:	58025494 	.word	0x58025494
 80031d8:	2300      	movs	r3, #0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d007      	beq.n	80031ee <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a6d      	ldr	r2, [pc, #436]	@ (80033a8 <HAL_DMA_Abort+0x444>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d04a      	beq.n	800328e <HAL_DMA_Abort+0x32a>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a6b      	ldr	r2, [pc, #428]	@ (80033ac <HAL_DMA_Abort+0x448>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d045      	beq.n	800328e <HAL_DMA_Abort+0x32a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a6a      	ldr	r2, [pc, #424]	@ (80033b0 <HAL_DMA_Abort+0x44c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d040      	beq.n	800328e <HAL_DMA_Abort+0x32a>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a68      	ldr	r2, [pc, #416]	@ (80033b4 <HAL_DMA_Abort+0x450>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d03b      	beq.n	800328e <HAL_DMA_Abort+0x32a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a67      	ldr	r2, [pc, #412]	@ (80033b8 <HAL_DMA_Abort+0x454>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d036      	beq.n	800328e <HAL_DMA_Abort+0x32a>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a65      	ldr	r2, [pc, #404]	@ (80033bc <HAL_DMA_Abort+0x458>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d031      	beq.n	800328e <HAL_DMA_Abort+0x32a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a64      	ldr	r2, [pc, #400]	@ (80033c0 <HAL_DMA_Abort+0x45c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d02c      	beq.n	800328e <HAL_DMA_Abort+0x32a>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a62      	ldr	r2, [pc, #392]	@ (80033c4 <HAL_DMA_Abort+0x460>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d027      	beq.n	800328e <HAL_DMA_Abort+0x32a>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a61      	ldr	r2, [pc, #388]	@ (80033c8 <HAL_DMA_Abort+0x464>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d022      	beq.n	800328e <HAL_DMA_Abort+0x32a>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a5f      	ldr	r2, [pc, #380]	@ (80033cc <HAL_DMA_Abort+0x468>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d01d      	beq.n	800328e <HAL_DMA_Abort+0x32a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a5e      	ldr	r2, [pc, #376]	@ (80033d0 <HAL_DMA_Abort+0x46c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d018      	beq.n	800328e <HAL_DMA_Abort+0x32a>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a5c      	ldr	r2, [pc, #368]	@ (80033d4 <HAL_DMA_Abort+0x470>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d013      	beq.n	800328e <HAL_DMA_Abort+0x32a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a5b      	ldr	r2, [pc, #364]	@ (80033d8 <HAL_DMA_Abort+0x474>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d00e      	beq.n	800328e <HAL_DMA_Abort+0x32a>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a59      	ldr	r2, [pc, #356]	@ (80033dc <HAL_DMA_Abort+0x478>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d009      	beq.n	800328e <HAL_DMA_Abort+0x32a>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a58      	ldr	r2, [pc, #352]	@ (80033e0 <HAL_DMA_Abort+0x47c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d004      	beq.n	800328e <HAL_DMA_Abort+0x32a>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a56      	ldr	r2, [pc, #344]	@ (80033e4 <HAL_DMA_Abort+0x480>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d108      	bne.n	80032a0 <HAL_DMA_Abort+0x33c>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0201 	bic.w	r2, r2, #1
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	e007      	b.n	80032b0 <HAL_DMA_Abort+0x34c>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0201 	bic.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80032b0:	e013      	b.n	80032da <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032b2:	f7fe ff99 	bl	80021e8 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b05      	cmp	r3, #5
 80032be:	d90c      	bls.n	80032da <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2220      	movs	r2, #32
 80032c4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2203      	movs	r2, #3
 80032ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e12d      	b.n	8003536 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1e5      	bne.n	80032b2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a2f      	ldr	r2, [pc, #188]	@ (80033a8 <HAL_DMA_Abort+0x444>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d04a      	beq.n	8003386 <HAL_DMA_Abort+0x422>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a2d      	ldr	r2, [pc, #180]	@ (80033ac <HAL_DMA_Abort+0x448>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d045      	beq.n	8003386 <HAL_DMA_Abort+0x422>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a2c      	ldr	r2, [pc, #176]	@ (80033b0 <HAL_DMA_Abort+0x44c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d040      	beq.n	8003386 <HAL_DMA_Abort+0x422>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a2a      	ldr	r2, [pc, #168]	@ (80033b4 <HAL_DMA_Abort+0x450>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d03b      	beq.n	8003386 <HAL_DMA_Abort+0x422>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a29      	ldr	r2, [pc, #164]	@ (80033b8 <HAL_DMA_Abort+0x454>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d036      	beq.n	8003386 <HAL_DMA_Abort+0x422>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a27      	ldr	r2, [pc, #156]	@ (80033bc <HAL_DMA_Abort+0x458>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d031      	beq.n	8003386 <HAL_DMA_Abort+0x422>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a26      	ldr	r2, [pc, #152]	@ (80033c0 <HAL_DMA_Abort+0x45c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d02c      	beq.n	8003386 <HAL_DMA_Abort+0x422>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a24      	ldr	r2, [pc, #144]	@ (80033c4 <HAL_DMA_Abort+0x460>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d027      	beq.n	8003386 <HAL_DMA_Abort+0x422>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a23      	ldr	r2, [pc, #140]	@ (80033c8 <HAL_DMA_Abort+0x464>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d022      	beq.n	8003386 <HAL_DMA_Abort+0x422>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a21      	ldr	r2, [pc, #132]	@ (80033cc <HAL_DMA_Abort+0x468>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d01d      	beq.n	8003386 <HAL_DMA_Abort+0x422>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a20      	ldr	r2, [pc, #128]	@ (80033d0 <HAL_DMA_Abort+0x46c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d018      	beq.n	8003386 <HAL_DMA_Abort+0x422>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a1e      	ldr	r2, [pc, #120]	@ (80033d4 <HAL_DMA_Abort+0x470>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d013      	beq.n	8003386 <HAL_DMA_Abort+0x422>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a1d      	ldr	r2, [pc, #116]	@ (80033d8 <HAL_DMA_Abort+0x474>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00e      	beq.n	8003386 <HAL_DMA_Abort+0x422>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a1b      	ldr	r2, [pc, #108]	@ (80033dc <HAL_DMA_Abort+0x478>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d009      	beq.n	8003386 <HAL_DMA_Abort+0x422>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a1a      	ldr	r2, [pc, #104]	@ (80033e0 <HAL_DMA_Abort+0x47c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d004      	beq.n	8003386 <HAL_DMA_Abort+0x422>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a18      	ldr	r2, [pc, #96]	@ (80033e4 <HAL_DMA_Abort+0x480>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d101      	bne.n	800338a <HAL_DMA_Abort+0x426>
 8003386:	2301      	movs	r3, #1
 8003388:	e000      	b.n	800338c <HAL_DMA_Abort+0x428>
 800338a:	2300      	movs	r3, #0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d02b      	beq.n	80033e8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003394:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339a:	f003 031f 	and.w	r3, r3, #31
 800339e:	223f      	movs	r2, #63	@ 0x3f
 80033a0:	409a      	lsls	r2, r3
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	609a      	str	r2, [r3, #8]
 80033a6:	e02a      	b.n	80033fe <HAL_DMA_Abort+0x49a>
 80033a8:	40020010 	.word	0x40020010
 80033ac:	40020028 	.word	0x40020028
 80033b0:	40020040 	.word	0x40020040
 80033b4:	40020058 	.word	0x40020058
 80033b8:	40020070 	.word	0x40020070
 80033bc:	40020088 	.word	0x40020088
 80033c0:	400200a0 	.word	0x400200a0
 80033c4:	400200b8 	.word	0x400200b8
 80033c8:	40020410 	.word	0x40020410
 80033cc:	40020428 	.word	0x40020428
 80033d0:	40020440 	.word	0x40020440
 80033d4:	40020458 	.word	0x40020458
 80033d8:	40020470 	.word	0x40020470
 80033dc:	40020488 	.word	0x40020488
 80033e0:	400204a0 	.word	0x400204a0
 80033e4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ec:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f2:	f003 031f 	and.w	r3, r3, #31
 80033f6:	2201      	movs	r2, #1
 80033f8:	409a      	lsls	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a4f      	ldr	r2, [pc, #316]	@ (8003540 <HAL_DMA_Abort+0x5dc>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d072      	beq.n	80034ee <HAL_DMA_Abort+0x58a>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a4d      	ldr	r2, [pc, #308]	@ (8003544 <HAL_DMA_Abort+0x5e0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d06d      	beq.n	80034ee <HAL_DMA_Abort+0x58a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a4c      	ldr	r2, [pc, #304]	@ (8003548 <HAL_DMA_Abort+0x5e4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d068      	beq.n	80034ee <HAL_DMA_Abort+0x58a>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a4a      	ldr	r2, [pc, #296]	@ (800354c <HAL_DMA_Abort+0x5e8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d063      	beq.n	80034ee <HAL_DMA_Abort+0x58a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a49      	ldr	r2, [pc, #292]	@ (8003550 <HAL_DMA_Abort+0x5ec>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d05e      	beq.n	80034ee <HAL_DMA_Abort+0x58a>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a47      	ldr	r2, [pc, #284]	@ (8003554 <HAL_DMA_Abort+0x5f0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d059      	beq.n	80034ee <HAL_DMA_Abort+0x58a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a46      	ldr	r2, [pc, #280]	@ (8003558 <HAL_DMA_Abort+0x5f4>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d054      	beq.n	80034ee <HAL_DMA_Abort+0x58a>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a44      	ldr	r2, [pc, #272]	@ (800355c <HAL_DMA_Abort+0x5f8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d04f      	beq.n	80034ee <HAL_DMA_Abort+0x58a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a43      	ldr	r2, [pc, #268]	@ (8003560 <HAL_DMA_Abort+0x5fc>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d04a      	beq.n	80034ee <HAL_DMA_Abort+0x58a>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a41      	ldr	r2, [pc, #260]	@ (8003564 <HAL_DMA_Abort+0x600>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d045      	beq.n	80034ee <HAL_DMA_Abort+0x58a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a40      	ldr	r2, [pc, #256]	@ (8003568 <HAL_DMA_Abort+0x604>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d040      	beq.n	80034ee <HAL_DMA_Abort+0x58a>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a3e      	ldr	r2, [pc, #248]	@ (800356c <HAL_DMA_Abort+0x608>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d03b      	beq.n	80034ee <HAL_DMA_Abort+0x58a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a3d      	ldr	r2, [pc, #244]	@ (8003570 <HAL_DMA_Abort+0x60c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d036      	beq.n	80034ee <HAL_DMA_Abort+0x58a>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a3b      	ldr	r2, [pc, #236]	@ (8003574 <HAL_DMA_Abort+0x610>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d031      	beq.n	80034ee <HAL_DMA_Abort+0x58a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a3a      	ldr	r2, [pc, #232]	@ (8003578 <HAL_DMA_Abort+0x614>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d02c      	beq.n	80034ee <HAL_DMA_Abort+0x58a>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a38      	ldr	r2, [pc, #224]	@ (800357c <HAL_DMA_Abort+0x618>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d027      	beq.n	80034ee <HAL_DMA_Abort+0x58a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a37      	ldr	r2, [pc, #220]	@ (8003580 <HAL_DMA_Abort+0x61c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d022      	beq.n	80034ee <HAL_DMA_Abort+0x58a>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a35      	ldr	r2, [pc, #212]	@ (8003584 <HAL_DMA_Abort+0x620>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d01d      	beq.n	80034ee <HAL_DMA_Abort+0x58a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a34      	ldr	r2, [pc, #208]	@ (8003588 <HAL_DMA_Abort+0x624>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d018      	beq.n	80034ee <HAL_DMA_Abort+0x58a>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a32      	ldr	r2, [pc, #200]	@ (800358c <HAL_DMA_Abort+0x628>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <HAL_DMA_Abort+0x58a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a31      	ldr	r2, [pc, #196]	@ (8003590 <HAL_DMA_Abort+0x62c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d00e      	beq.n	80034ee <HAL_DMA_Abort+0x58a>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a2f      	ldr	r2, [pc, #188]	@ (8003594 <HAL_DMA_Abort+0x630>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d009      	beq.n	80034ee <HAL_DMA_Abort+0x58a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a2e      	ldr	r2, [pc, #184]	@ (8003598 <HAL_DMA_Abort+0x634>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d004      	beq.n	80034ee <HAL_DMA_Abort+0x58a>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a2c      	ldr	r2, [pc, #176]	@ (800359c <HAL_DMA_Abort+0x638>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d101      	bne.n	80034f2 <HAL_DMA_Abort+0x58e>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <HAL_DMA_Abort+0x590>
 80034f2:	2300      	movs	r3, #0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d015      	beq.n	8003524 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003500:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00c      	beq.n	8003524 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003514:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003518:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003522:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40020010 	.word	0x40020010
 8003544:	40020028 	.word	0x40020028
 8003548:	40020040 	.word	0x40020040
 800354c:	40020058 	.word	0x40020058
 8003550:	40020070 	.word	0x40020070
 8003554:	40020088 	.word	0x40020088
 8003558:	400200a0 	.word	0x400200a0
 800355c:	400200b8 	.word	0x400200b8
 8003560:	40020410 	.word	0x40020410
 8003564:	40020428 	.word	0x40020428
 8003568:	40020440 	.word	0x40020440
 800356c:	40020458 	.word	0x40020458
 8003570:	40020470 	.word	0x40020470
 8003574:	40020488 	.word	0x40020488
 8003578:	400204a0 	.word	0x400204a0
 800357c:	400204b8 	.word	0x400204b8
 8003580:	58025408 	.word	0x58025408
 8003584:	5802541c 	.word	0x5802541c
 8003588:	58025430 	.word	0x58025430
 800358c:	58025444 	.word	0x58025444
 8003590:	58025458 	.word	0x58025458
 8003594:	5802546c 	.word	0x5802546c
 8003598:	58025480 	.word	0x58025480
 800359c:	58025494 	.word	0x58025494

080035a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e237      	b.n	8003a22 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d004      	beq.n	80035c8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2280      	movs	r2, #128	@ 0x80
 80035c2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e22c      	b.n	8003a22 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a5c      	ldr	r2, [pc, #368]	@ (8003740 <HAL_DMA_Abort_IT+0x1a0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d04a      	beq.n	8003668 <HAL_DMA_Abort_IT+0xc8>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a5b      	ldr	r2, [pc, #364]	@ (8003744 <HAL_DMA_Abort_IT+0x1a4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d045      	beq.n	8003668 <HAL_DMA_Abort_IT+0xc8>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a59      	ldr	r2, [pc, #356]	@ (8003748 <HAL_DMA_Abort_IT+0x1a8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d040      	beq.n	8003668 <HAL_DMA_Abort_IT+0xc8>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a58      	ldr	r2, [pc, #352]	@ (800374c <HAL_DMA_Abort_IT+0x1ac>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d03b      	beq.n	8003668 <HAL_DMA_Abort_IT+0xc8>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a56      	ldr	r2, [pc, #344]	@ (8003750 <HAL_DMA_Abort_IT+0x1b0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d036      	beq.n	8003668 <HAL_DMA_Abort_IT+0xc8>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a55      	ldr	r2, [pc, #340]	@ (8003754 <HAL_DMA_Abort_IT+0x1b4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d031      	beq.n	8003668 <HAL_DMA_Abort_IT+0xc8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a53      	ldr	r2, [pc, #332]	@ (8003758 <HAL_DMA_Abort_IT+0x1b8>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d02c      	beq.n	8003668 <HAL_DMA_Abort_IT+0xc8>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a52      	ldr	r2, [pc, #328]	@ (800375c <HAL_DMA_Abort_IT+0x1bc>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d027      	beq.n	8003668 <HAL_DMA_Abort_IT+0xc8>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a50      	ldr	r2, [pc, #320]	@ (8003760 <HAL_DMA_Abort_IT+0x1c0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d022      	beq.n	8003668 <HAL_DMA_Abort_IT+0xc8>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a4f      	ldr	r2, [pc, #316]	@ (8003764 <HAL_DMA_Abort_IT+0x1c4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d01d      	beq.n	8003668 <HAL_DMA_Abort_IT+0xc8>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a4d      	ldr	r2, [pc, #308]	@ (8003768 <HAL_DMA_Abort_IT+0x1c8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d018      	beq.n	8003668 <HAL_DMA_Abort_IT+0xc8>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a4c      	ldr	r2, [pc, #304]	@ (800376c <HAL_DMA_Abort_IT+0x1cc>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d013      	beq.n	8003668 <HAL_DMA_Abort_IT+0xc8>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a4a      	ldr	r2, [pc, #296]	@ (8003770 <HAL_DMA_Abort_IT+0x1d0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00e      	beq.n	8003668 <HAL_DMA_Abort_IT+0xc8>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a49      	ldr	r2, [pc, #292]	@ (8003774 <HAL_DMA_Abort_IT+0x1d4>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d009      	beq.n	8003668 <HAL_DMA_Abort_IT+0xc8>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a47      	ldr	r2, [pc, #284]	@ (8003778 <HAL_DMA_Abort_IT+0x1d8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d004      	beq.n	8003668 <HAL_DMA_Abort_IT+0xc8>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a46      	ldr	r2, [pc, #280]	@ (800377c <HAL_DMA_Abort_IT+0x1dc>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d101      	bne.n	800366c <HAL_DMA_Abort_IT+0xcc>
 8003668:	2301      	movs	r3, #1
 800366a:	e000      	b.n	800366e <HAL_DMA_Abort_IT+0xce>
 800366c:	2300      	movs	r3, #0
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 8086 	beq.w	8003780 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2204      	movs	r2, #4
 8003678:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a2f      	ldr	r2, [pc, #188]	@ (8003740 <HAL_DMA_Abort_IT+0x1a0>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d04a      	beq.n	800371c <HAL_DMA_Abort_IT+0x17c>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a2e      	ldr	r2, [pc, #184]	@ (8003744 <HAL_DMA_Abort_IT+0x1a4>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d045      	beq.n	800371c <HAL_DMA_Abort_IT+0x17c>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a2c      	ldr	r2, [pc, #176]	@ (8003748 <HAL_DMA_Abort_IT+0x1a8>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d040      	beq.n	800371c <HAL_DMA_Abort_IT+0x17c>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a2b      	ldr	r2, [pc, #172]	@ (800374c <HAL_DMA_Abort_IT+0x1ac>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d03b      	beq.n	800371c <HAL_DMA_Abort_IT+0x17c>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a29      	ldr	r2, [pc, #164]	@ (8003750 <HAL_DMA_Abort_IT+0x1b0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d036      	beq.n	800371c <HAL_DMA_Abort_IT+0x17c>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a28      	ldr	r2, [pc, #160]	@ (8003754 <HAL_DMA_Abort_IT+0x1b4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d031      	beq.n	800371c <HAL_DMA_Abort_IT+0x17c>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a26      	ldr	r2, [pc, #152]	@ (8003758 <HAL_DMA_Abort_IT+0x1b8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d02c      	beq.n	800371c <HAL_DMA_Abort_IT+0x17c>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a25      	ldr	r2, [pc, #148]	@ (800375c <HAL_DMA_Abort_IT+0x1bc>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d027      	beq.n	800371c <HAL_DMA_Abort_IT+0x17c>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a23      	ldr	r2, [pc, #140]	@ (8003760 <HAL_DMA_Abort_IT+0x1c0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d022      	beq.n	800371c <HAL_DMA_Abort_IT+0x17c>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a22      	ldr	r2, [pc, #136]	@ (8003764 <HAL_DMA_Abort_IT+0x1c4>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d01d      	beq.n	800371c <HAL_DMA_Abort_IT+0x17c>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a20      	ldr	r2, [pc, #128]	@ (8003768 <HAL_DMA_Abort_IT+0x1c8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d018      	beq.n	800371c <HAL_DMA_Abort_IT+0x17c>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a1f      	ldr	r2, [pc, #124]	@ (800376c <HAL_DMA_Abort_IT+0x1cc>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d013      	beq.n	800371c <HAL_DMA_Abort_IT+0x17c>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003770 <HAL_DMA_Abort_IT+0x1d0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00e      	beq.n	800371c <HAL_DMA_Abort_IT+0x17c>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1c      	ldr	r2, [pc, #112]	@ (8003774 <HAL_DMA_Abort_IT+0x1d4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d009      	beq.n	800371c <HAL_DMA_Abort_IT+0x17c>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a1a      	ldr	r2, [pc, #104]	@ (8003778 <HAL_DMA_Abort_IT+0x1d8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d004      	beq.n	800371c <HAL_DMA_Abort_IT+0x17c>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a19      	ldr	r2, [pc, #100]	@ (800377c <HAL_DMA_Abort_IT+0x1dc>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d108      	bne.n	800372e <HAL_DMA_Abort_IT+0x18e>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0201 	bic.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	e178      	b.n	8003a20 <HAL_DMA_Abort_IT+0x480>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0201 	bic.w	r2, r2, #1
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	e16f      	b.n	8003a20 <HAL_DMA_Abort_IT+0x480>
 8003740:	40020010 	.word	0x40020010
 8003744:	40020028 	.word	0x40020028
 8003748:	40020040 	.word	0x40020040
 800374c:	40020058 	.word	0x40020058
 8003750:	40020070 	.word	0x40020070
 8003754:	40020088 	.word	0x40020088
 8003758:	400200a0 	.word	0x400200a0
 800375c:	400200b8 	.word	0x400200b8
 8003760:	40020410 	.word	0x40020410
 8003764:	40020428 	.word	0x40020428
 8003768:	40020440 	.word	0x40020440
 800376c:	40020458 	.word	0x40020458
 8003770:	40020470 	.word	0x40020470
 8003774:	40020488 	.word	0x40020488
 8003778:	400204a0 	.word	0x400204a0
 800377c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 020e 	bic.w	r2, r2, #14
 800378e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a6c      	ldr	r2, [pc, #432]	@ (8003948 <HAL_DMA_Abort_IT+0x3a8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d04a      	beq.n	8003830 <HAL_DMA_Abort_IT+0x290>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a6b      	ldr	r2, [pc, #428]	@ (800394c <HAL_DMA_Abort_IT+0x3ac>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d045      	beq.n	8003830 <HAL_DMA_Abort_IT+0x290>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a69      	ldr	r2, [pc, #420]	@ (8003950 <HAL_DMA_Abort_IT+0x3b0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d040      	beq.n	8003830 <HAL_DMA_Abort_IT+0x290>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a68      	ldr	r2, [pc, #416]	@ (8003954 <HAL_DMA_Abort_IT+0x3b4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d03b      	beq.n	8003830 <HAL_DMA_Abort_IT+0x290>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a66      	ldr	r2, [pc, #408]	@ (8003958 <HAL_DMA_Abort_IT+0x3b8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d036      	beq.n	8003830 <HAL_DMA_Abort_IT+0x290>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a65      	ldr	r2, [pc, #404]	@ (800395c <HAL_DMA_Abort_IT+0x3bc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d031      	beq.n	8003830 <HAL_DMA_Abort_IT+0x290>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a63      	ldr	r2, [pc, #396]	@ (8003960 <HAL_DMA_Abort_IT+0x3c0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d02c      	beq.n	8003830 <HAL_DMA_Abort_IT+0x290>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a62      	ldr	r2, [pc, #392]	@ (8003964 <HAL_DMA_Abort_IT+0x3c4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d027      	beq.n	8003830 <HAL_DMA_Abort_IT+0x290>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a60      	ldr	r2, [pc, #384]	@ (8003968 <HAL_DMA_Abort_IT+0x3c8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d022      	beq.n	8003830 <HAL_DMA_Abort_IT+0x290>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a5f      	ldr	r2, [pc, #380]	@ (800396c <HAL_DMA_Abort_IT+0x3cc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d01d      	beq.n	8003830 <HAL_DMA_Abort_IT+0x290>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a5d      	ldr	r2, [pc, #372]	@ (8003970 <HAL_DMA_Abort_IT+0x3d0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d018      	beq.n	8003830 <HAL_DMA_Abort_IT+0x290>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a5c      	ldr	r2, [pc, #368]	@ (8003974 <HAL_DMA_Abort_IT+0x3d4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d013      	beq.n	8003830 <HAL_DMA_Abort_IT+0x290>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a5a      	ldr	r2, [pc, #360]	@ (8003978 <HAL_DMA_Abort_IT+0x3d8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d00e      	beq.n	8003830 <HAL_DMA_Abort_IT+0x290>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a59      	ldr	r2, [pc, #356]	@ (800397c <HAL_DMA_Abort_IT+0x3dc>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d009      	beq.n	8003830 <HAL_DMA_Abort_IT+0x290>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a57      	ldr	r2, [pc, #348]	@ (8003980 <HAL_DMA_Abort_IT+0x3e0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d004      	beq.n	8003830 <HAL_DMA_Abort_IT+0x290>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a56      	ldr	r2, [pc, #344]	@ (8003984 <HAL_DMA_Abort_IT+0x3e4>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d108      	bne.n	8003842 <HAL_DMA_Abort_IT+0x2a2>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0201 	bic.w	r2, r2, #1
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	e007      	b.n	8003852 <HAL_DMA_Abort_IT+0x2b2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0201 	bic.w	r2, r2, #1
 8003850:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a3c      	ldr	r2, [pc, #240]	@ (8003948 <HAL_DMA_Abort_IT+0x3a8>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d072      	beq.n	8003942 <HAL_DMA_Abort_IT+0x3a2>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a3a      	ldr	r2, [pc, #232]	@ (800394c <HAL_DMA_Abort_IT+0x3ac>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d06d      	beq.n	8003942 <HAL_DMA_Abort_IT+0x3a2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a39      	ldr	r2, [pc, #228]	@ (8003950 <HAL_DMA_Abort_IT+0x3b0>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d068      	beq.n	8003942 <HAL_DMA_Abort_IT+0x3a2>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a37      	ldr	r2, [pc, #220]	@ (8003954 <HAL_DMA_Abort_IT+0x3b4>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d063      	beq.n	8003942 <HAL_DMA_Abort_IT+0x3a2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a36      	ldr	r2, [pc, #216]	@ (8003958 <HAL_DMA_Abort_IT+0x3b8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d05e      	beq.n	8003942 <HAL_DMA_Abort_IT+0x3a2>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a34      	ldr	r2, [pc, #208]	@ (800395c <HAL_DMA_Abort_IT+0x3bc>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d059      	beq.n	8003942 <HAL_DMA_Abort_IT+0x3a2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a33      	ldr	r2, [pc, #204]	@ (8003960 <HAL_DMA_Abort_IT+0x3c0>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d054      	beq.n	8003942 <HAL_DMA_Abort_IT+0x3a2>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a31      	ldr	r2, [pc, #196]	@ (8003964 <HAL_DMA_Abort_IT+0x3c4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d04f      	beq.n	8003942 <HAL_DMA_Abort_IT+0x3a2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a30      	ldr	r2, [pc, #192]	@ (8003968 <HAL_DMA_Abort_IT+0x3c8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d04a      	beq.n	8003942 <HAL_DMA_Abort_IT+0x3a2>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a2e      	ldr	r2, [pc, #184]	@ (800396c <HAL_DMA_Abort_IT+0x3cc>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d045      	beq.n	8003942 <HAL_DMA_Abort_IT+0x3a2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a2d      	ldr	r2, [pc, #180]	@ (8003970 <HAL_DMA_Abort_IT+0x3d0>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d040      	beq.n	8003942 <HAL_DMA_Abort_IT+0x3a2>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a2b      	ldr	r2, [pc, #172]	@ (8003974 <HAL_DMA_Abort_IT+0x3d4>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d03b      	beq.n	8003942 <HAL_DMA_Abort_IT+0x3a2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a2a      	ldr	r2, [pc, #168]	@ (8003978 <HAL_DMA_Abort_IT+0x3d8>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d036      	beq.n	8003942 <HAL_DMA_Abort_IT+0x3a2>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a28      	ldr	r2, [pc, #160]	@ (800397c <HAL_DMA_Abort_IT+0x3dc>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d031      	beq.n	8003942 <HAL_DMA_Abort_IT+0x3a2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a27      	ldr	r2, [pc, #156]	@ (8003980 <HAL_DMA_Abort_IT+0x3e0>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d02c      	beq.n	8003942 <HAL_DMA_Abort_IT+0x3a2>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a25      	ldr	r2, [pc, #148]	@ (8003984 <HAL_DMA_Abort_IT+0x3e4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d027      	beq.n	8003942 <HAL_DMA_Abort_IT+0x3a2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a24      	ldr	r2, [pc, #144]	@ (8003988 <HAL_DMA_Abort_IT+0x3e8>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d022      	beq.n	8003942 <HAL_DMA_Abort_IT+0x3a2>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a22      	ldr	r2, [pc, #136]	@ (800398c <HAL_DMA_Abort_IT+0x3ec>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d01d      	beq.n	8003942 <HAL_DMA_Abort_IT+0x3a2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a21      	ldr	r2, [pc, #132]	@ (8003990 <HAL_DMA_Abort_IT+0x3f0>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d018      	beq.n	8003942 <HAL_DMA_Abort_IT+0x3a2>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a1f      	ldr	r2, [pc, #124]	@ (8003994 <HAL_DMA_Abort_IT+0x3f4>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d013      	beq.n	8003942 <HAL_DMA_Abort_IT+0x3a2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a1e      	ldr	r2, [pc, #120]	@ (8003998 <HAL_DMA_Abort_IT+0x3f8>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d00e      	beq.n	8003942 <HAL_DMA_Abort_IT+0x3a2>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a1c      	ldr	r2, [pc, #112]	@ (800399c <HAL_DMA_Abort_IT+0x3fc>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d009      	beq.n	8003942 <HAL_DMA_Abort_IT+0x3a2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a1b      	ldr	r2, [pc, #108]	@ (80039a0 <HAL_DMA_Abort_IT+0x400>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d004      	beq.n	8003942 <HAL_DMA_Abort_IT+0x3a2>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a19      	ldr	r2, [pc, #100]	@ (80039a4 <HAL_DMA_Abort_IT+0x404>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d132      	bne.n	80039a8 <HAL_DMA_Abort_IT+0x408>
 8003942:	2301      	movs	r3, #1
 8003944:	e031      	b.n	80039aa <HAL_DMA_Abort_IT+0x40a>
 8003946:	bf00      	nop
 8003948:	40020010 	.word	0x40020010
 800394c:	40020028 	.word	0x40020028
 8003950:	40020040 	.word	0x40020040
 8003954:	40020058 	.word	0x40020058
 8003958:	40020070 	.word	0x40020070
 800395c:	40020088 	.word	0x40020088
 8003960:	400200a0 	.word	0x400200a0
 8003964:	400200b8 	.word	0x400200b8
 8003968:	40020410 	.word	0x40020410
 800396c:	40020428 	.word	0x40020428
 8003970:	40020440 	.word	0x40020440
 8003974:	40020458 	.word	0x40020458
 8003978:	40020470 	.word	0x40020470
 800397c:	40020488 	.word	0x40020488
 8003980:	400204a0 	.word	0x400204a0
 8003984:	400204b8 	.word	0x400204b8
 8003988:	58025408 	.word	0x58025408
 800398c:	5802541c 	.word	0x5802541c
 8003990:	58025430 	.word	0x58025430
 8003994:	58025444 	.word	0x58025444
 8003998:	58025458 	.word	0x58025458
 800399c:	5802546c 	.word	0x5802546c
 80039a0:	58025480 	.word	0x58025480
 80039a4:	58025494 	.word	0x58025494
 80039a8:	2300      	movs	r3, #0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d028      	beq.n	8003a00 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039bc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c8:	f003 031f 	and.w	r3, r3, #31
 80039cc:	2201      	movs	r2, #1
 80039ce:	409a      	lsls	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80039dc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00c      	beq.n	8003a00 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039f4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80039fe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop

08003a2c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08a      	sub	sp, #40	@ 0x28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a38:	4b67      	ldr	r3, [pc, #412]	@ (8003bd8 <HAL_DMA_IRQHandler+0x1ac>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a67      	ldr	r2, [pc, #412]	@ (8003bdc <HAL_DMA_IRQHandler+0x1b0>)
 8003a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a42:	0a9b      	lsrs	r3, r3, #10
 8003a44:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a4a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a50:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a5f      	ldr	r2, [pc, #380]	@ (8003be0 <HAL_DMA_IRQHandler+0x1b4>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d04a      	beq.n	8003afe <HAL_DMA_IRQHandler+0xd2>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a5d      	ldr	r2, [pc, #372]	@ (8003be4 <HAL_DMA_IRQHandler+0x1b8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d045      	beq.n	8003afe <HAL_DMA_IRQHandler+0xd2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a5c      	ldr	r2, [pc, #368]	@ (8003be8 <HAL_DMA_IRQHandler+0x1bc>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d040      	beq.n	8003afe <HAL_DMA_IRQHandler+0xd2>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a5a      	ldr	r2, [pc, #360]	@ (8003bec <HAL_DMA_IRQHandler+0x1c0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d03b      	beq.n	8003afe <HAL_DMA_IRQHandler+0xd2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a59      	ldr	r2, [pc, #356]	@ (8003bf0 <HAL_DMA_IRQHandler+0x1c4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d036      	beq.n	8003afe <HAL_DMA_IRQHandler+0xd2>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a57      	ldr	r2, [pc, #348]	@ (8003bf4 <HAL_DMA_IRQHandler+0x1c8>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d031      	beq.n	8003afe <HAL_DMA_IRQHandler+0xd2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a56      	ldr	r2, [pc, #344]	@ (8003bf8 <HAL_DMA_IRQHandler+0x1cc>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d02c      	beq.n	8003afe <HAL_DMA_IRQHandler+0xd2>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a54      	ldr	r2, [pc, #336]	@ (8003bfc <HAL_DMA_IRQHandler+0x1d0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d027      	beq.n	8003afe <HAL_DMA_IRQHandler+0xd2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a53      	ldr	r2, [pc, #332]	@ (8003c00 <HAL_DMA_IRQHandler+0x1d4>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d022      	beq.n	8003afe <HAL_DMA_IRQHandler+0xd2>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a51      	ldr	r2, [pc, #324]	@ (8003c04 <HAL_DMA_IRQHandler+0x1d8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01d      	beq.n	8003afe <HAL_DMA_IRQHandler+0xd2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a50      	ldr	r2, [pc, #320]	@ (8003c08 <HAL_DMA_IRQHandler+0x1dc>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d018      	beq.n	8003afe <HAL_DMA_IRQHandler+0xd2>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a4e      	ldr	r2, [pc, #312]	@ (8003c0c <HAL_DMA_IRQHandler+0x1e0>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d013      	beq.n	8003afe <HAL_DMA_IRQHandler+0xd2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a4d      	ldr	r2, [pc, #308]	@ (8003c10 <HAL_DMA_IRQHandler+0x1e4>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00e      	beq.n	8003afe <HAL_DMA_IRQHandler+0xd2>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a4b      	ldr	r2, [pc, #300]	@ (8003c14 <HAL_DMA_IRQHandler+0x1e8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d009      	beq.n	8003afe <HAL_DMA_IRQHandler+0xd2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a4a      	ldr	r2, [pc, #296]	@ (8003c18 <HAL_DMA_IRQHandler+0x1ec>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d004      	beq.n	8003afe <HAL_DMA_IRQHandler+0xd2>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a48      	ldr	r2, [pc, #288]	@ (8003c1c <HAL_DMA_IRQHandler+0x1f0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d101      	bne.n	8003b02 <HAL_DMA_IRQHandler+0xd6>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <HAL_DMA_IRQHandler+0xd8>
 8003b02:	2300      	movs	r3, #0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 842b 	beq.w	8004360 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b0e:	f003 031f 	and.w	r3, r3, #31
 8003b12:	2208      	movs	r2, #8
 8003b14:	409a      	lsls	r2, r3
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 80a2 	beq.w	8003c64 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a2e      	ldr	r2, [pc, #184]	@ (8003be0 <HAL_DMA_IRQHandler+0x1b4>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d04a      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x194>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a2d      	ldr	r2, [pc, #180]	@ (8003be4 <HAL_DMA_IRQHandler+0x1b8>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d045      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x194>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a2b      	ldr	r2, [pc, #172]	@ (8003be8 <HAL_DMA_IRQHandler+0x1bc>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d040      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x194>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a2a      	ldr	r2, [pc, #168]	@ (8003bec <HAL_DMA_IRQHandler+0x1c0>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d03b      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x194>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a28      	ldr	r2, [pc, #160]	@ (8003bf0 <HAL_DMA_IRQHandler+0x1c4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d036      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x194>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a27      	ldr	r2, [pc, #156]	@ (8003bf4 <HAL_DMA_IRQHandler+0x1c8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d031      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x194>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a25      	ldr	r2, [pc, #148]	@ (8003bf8 <HAL_DMA_IRQHandler+0x1cc>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d02c      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x194>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a24      	ldr	r2, [pc, #144]	@ (8003bfc <HAL_DMA_IRQHandler+0x1d0>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d027      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x194>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a22      	ldr	r2, [pc, #136]	@ (8003c00 <HAL_DMA_IRQHandler+0x1d4>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d022      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x194>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a21      	ldr	r2, [pc, #132]	@ (8003c04 <HAL_DMA_IRQHandler+0x1d8>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d01d      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x194>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a1f      	ldr	r2, [pc, #124]	@ (8003c08 <HAL_DMA_IRQHandler+0x1dc>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d018      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x194>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a1e      	ldr	r2, [pc, #120]	@ (8003c0c <HAL_DMA_IRQHandler+0x1e0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d013      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x194>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a1c      	ldr	r2, [pc, #112]	@ (8003c10 <HAL_DMA_IRQHandler+0x1e4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00e      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x194>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a1b      	ldr	r2, [pc, #108]	@ (8003c14 <HAL_DMA_IRQHandler+0x1e8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d009      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x194>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a19      	ldr	r2, [pc, #100]	@ (8003c18 <HAL_DMA_IRQHandler+0x1ec>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d004      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x194>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a18      	ldr	r2, [pc, #96]	@ (8003c1c <HAL_DMA_IRQHandler+0x1f0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d12f      	bne.n	8003c20 <HAL_DMA_IRQHandler+0x1f4>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	bf14      	ite	ne
 8003bce:	2301      	movne	r3, #1
 8003bd0:	2300      	moveq	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	e02e      	b.n	8003c34 <HAL_DMA_IRQHandler+0x208>
 8003bd6:	bf00      	nop
 8003bd8:	24000004 	.word	0x24000004
 8003bdc:	1b4e81b5 	.word	0x1b4e81b5
 8003be0:	40020010 	.word	0x40020010
 8003be4:	40020028 	.word	0x40020028
 8003be8:	40020040 	.word	0x40020040
 8003bec:	40020058 	.word	0x40020058
 8003bf0:	40020070 	.word	0x40020070
 8003bf4:	40020088 	.word	0x40020088
 8003bf8:	400200a0 	.word	0x400200a0
 8003bfc:	400200b8 	.word	0x400200b8
 8003c00:	40020410 	.word	0x40020410
 8003c04:	40020428 	.word	0x40020428
 8003c08:	40020440 	.word	0x40020440
 8003c0c:	40020458 	.word	0x40020458
 8003c10:	40020470 	.word	0x40020470
 8003c14:	40020488 	.word	0x40020488
 8003c18:	400204a0 	.word	0x400204a0
 8003c1c:	400204b8 	.word	0x400204b8
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	bf14      	ite	ne
 8003c2e:	2301      	movne	r3, #1
 8003c30:	2300      	moveq	r3, #0
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d015      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0204 	bic.w	r2, r2, #4
 8003c46:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	2208      	movs	r2, #8
 8003c52:	409a      	lsls	r2, r3
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c5c:	f043 0201 	orr.w	r2, r3, #1
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c68:	f003 031f 	and.w	r3, r3, #31
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d06e      	beq.n	8003d58 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a69      	ldr	r2, [pc, #420]	@ (8003e24 <HAL_DMA_IRQHandler+0x3f8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d04a      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x2ee>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a67      	ldr	r2, [pc, #412]	@ (8003e28 <HAL_DMA_IRQHandler+0x3fc>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d045      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x2ee>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a66      	ldr	r2, [pc, #408]	@ (8003e2c <HAL_DMA_IRQHandler+0x400>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d040      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x2ee>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a64      	ldr	r2, [pc, #400]	@ (8003e30 <HAL_DMA_IRQHandler+0x404>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d03b      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x2ee>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a63      	ldr	r2, [pc, #396]	@ (8003e34 <HAL_DMA_IRQHandler+0x408>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d036      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x2ee>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a61      	ldr	r2, [pc, #388]	@ (8003e38 <HAL_DMA_IRQHandler+0x40c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d031      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x2ee>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a60      	ldr	r2, [pc, #384]	@ (8003e3c <HAL_DMA_IRQHandler+0x410>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d02c      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x2ee>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a5e      	ldr	r2, [pc, #376]	@ (8003e40 <HAL_DMA_IRQHandler+0x414>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d027      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x2ee>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a5d      	ldr	r2, [pc, #372]	@ (8003e44 <HAL_DMA_IRQHandler+0x418>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d022      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x2ee>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a5b      	ldr	r2, [pc, #364]	@ (8003e48 <HAL_DMA_IRQHandler+0x41c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d01d      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x2ee>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a5a      	ldr	r2, [pc, #360]	@ (8003e4c <HAL_DMA_IRQHandler+0x420>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d018      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x2ee>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a58      	ldr	r2, [pc, #352]	@ (8003e50 <HAL_DMA_IRQHandler+0x424>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d013      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x2ee>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a57      	ldr	r2, [pc, #348]	@ (8003e54 <HAL_DMA_IRQHandler+0x428>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d00e      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x2ee>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a55      	ldr	r2, [pc, #340]	@ (8003e58 <HAL_DMA_IRQHandler+0x42c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d009      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x2ee>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a54      	ldr	r2, [pc, #336]	@ (8003e5c <HAL_DMA_IRQHandler+0x430>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d004      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x2ee>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a52      	ldr	r2, [pc, #328]	@ (8003e60 <HAL_DMA_IRQHandler+0x434>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d10a      	bne.n	8003d30 <HAL_DMA_IRQHandler+0x304>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	bf14      	ite	ne
 8003d28:	2301      	movne	r3, #1
 8003d2a:	2300      	moveq	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	e003      	b.n	8003d38 <HAL_DMA_IRQHandler+0x30c>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2300      	movs	r3, #0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00d      	beq.n	8003d58 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d40:	f003 031f 	and.w	r3, r3, #31
 8003d44:	2201      	movs	r2, #1
 8003d46:	409a      	lsls	r2, r3
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d50:	f043 0202 	orr.w	r2, r3, #2
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	2204      	movs	r2, #4
 8003d62:	409a      	lsls	r2, r3
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	4013      	ands	r3, r2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 808f 	beq.w	8003e8c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a2c      	ldr	r2, [pc, #176]	@ (8003e24 <HAL_DMA_IRQHandler+0x3f8>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d04a      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x3e2>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a2a      	ldr	r2, [pc, #168]	@ (8003e28 <HAL_DMA_IRQHandler+0x3fc>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d045      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x3e2>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a29      	ldr	r2, [pc, #164]	@ (8003e2c <HAL_DMA_IRQHandler+0x400>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d040      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x3e2>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a27      	ldr	r2, [pc, #156]	@ (8003e30 <HAL_DMA_IRQHandler+0x404>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d03b      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x3e2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a26      	ldr	r2, [pc, #152]	@ (8003e34 <HAL_DMA_IRQHandler+0x408>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d036      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x3e2>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a24      	ldr	r2, [pc, #144]	@ (8003e38 <HAL_DMA_IRQHandler+0x40c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d031      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x3e2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a23      	ldr	r2, [pc, #140]	@ (8003e3c <HAL_DMA_IRQHandler+0x410>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d02c      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x3e2>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a21      	ldr	r2, [pc, #132]	@ (8003e40 <HAL_DMA_IRQHandler+0x414>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d027      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x3e2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a20      	ldr	r2, [pc, #128]	@ (8003e44 <HAL_DMA_IRQHandler+0x418>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d022      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x3e2>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a1e      	ldr	r2, [pc, #120]	@ (8003e48 <HAL_DMA_IRQHandler+0x41c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d01d      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x3e2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a1d      	ldr	r2, [pc, #116]	@ (8003e4c <HAL_DMA_IRQHandler+0x420>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d018      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x3e2>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a1b      	ldr	r2, [pc, #108]	@ (8003e50 <HAL_DMA_IRQHandler+0x424>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d013      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x3e2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a1a      	ldr	r2, [pc, #104]	@ (8003e54 <HAL_DMA_IRQHandler+0x428>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d00e      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x3e2>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a18      	ldr	r2, [pc, #96]	@ (8003e58 <HAL_DMA_IRQHandler+0x42c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d009      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x3e2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a17      	ldr	r2, [pc, #92]	@ (8003e5c <HAL_DMA_IRQHandler+0x430>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d004      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x3e2>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a15      	ldr	r2, [pc, #84]	@ (8003e60 <HAL_DMA_IRQHandler+0x434>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d12a      	bne.n	8003e64 <HAL_DMA_IRQHandler+0x438>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	bf14      	ite	ne
 8003e1c:	2301      	movne	r3, #1
 8003e1e:	2300      	moveq	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	e023      	b.n	8003e6c <HAL_DMA_IRQHandler+0x440>
 8003e24:	40020010 	.word	0x40020010
 8003e28:	40020028 	.word	0x40020028
 8003e2c:	40020040 	.word	0x40020040
 8003e30:	40020058 	.word	0x40020058
 8003e34:	40020070 	.word	0x40020070
 8003e38:	40020088 	.word	0x40020088
 8003e3c:	400200a0 	.word	0x400200a0
 8003e40:	400200b8 	.word	0x400200b8
 8003e44:	40020410 	.word	0x40020410
 8003e48:	40020428 	.word	0x40020428
 8003e4c:	40020440 	.word	0x40020440
 8003e50:	40020458 	.word	0x40020458
 8003e54:	40020470 	.word	0x40020470
 8003e58:	40020488 	.word	0x40020488
 8003e5c:	400204a0 	.word	0x400204a0
 8003e60:	400204b8 	.word	0x400204b8
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00d      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e74:	f003 031f 	and.w	r3, r3, #31
 8003e78:	2204      	movs	r2, #4
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e84:	f043 0204 	orr.w	r2, r3, #4
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e90:	f003 031f 	and.w	r3, r3, #31
 8003e94:	2210      	movs	r2, #16
 8003e96:	409a      	lsls	r2, r3
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 80a6 	beq.w	8003fee <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a85      	ldr	r2, [pc, #532]	@ (80040bc <HAL_DMA_IRQHandler+0x690>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d04a      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x516>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a83      	ldr	r2, [pc, #524]	@ (80040c0 <HAL_DMA_IRQHandler+0x694>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d045      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x516>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a82      	ldr	r2, [pc, #520]	@ (80040c4 <HAL_DMA_IRQHandler+0x698>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d040      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x516>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a80      	ldr	r2, [pc, #512]	@ (80040c8 <HAL_DMA_IRQHandler+0x69c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d03b      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x516>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a7f      	ldr	r2, [pc, #508]	@ (80040cc <HAL_DMA_IRQHandler+0x6a0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d036      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x516>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a7d      	ldr	r2, [pc, #500]	@ (80040d0 <HAL_DMA_IRQHandler+0x6a4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d031      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x516>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a7c      	ldr	r2, [pc, #496]	@ (80040d4 <HAL_DMA_IRQHandler+0x6a8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d02c      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x516>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a7a      	ldr	r2, [pc, #488]	@ (80040d8 <HAL_DMA_IRQHandler+0x6ac>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d027      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x516>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a79      	ldr	r2, [pc, #484]	@ (80040dc <HAL_DMA_IRQHandler+0x6b0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d022      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x516>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a77      	ldr	r2, [pc, #476]	@ (80040e0 <HAL_DMA_IRQHandler+0x6b4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d01d      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x516>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a76      	ldr	r2, [pc, #472]	@ (80040e4 <HAL_DMA_IRQHandler+0x6b8>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d018      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x516>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a74      	ldr	r2, [pc, #464]	@ (80040e8 <HAL_DMA_IRQHandler+0x6bc>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d013      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x516>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a73      	ldr	r2, [pc, #460]	@ (80040ec <HAL_DMA_IRQHandler+0x6c0>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d00e      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x516>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a71      	ldr	r2, [pc, #452]	@ (80040f0 <HAL_DMA_IRQHandler+0x6c4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d009      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x516>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a70      	ldr	r2, [pc, #448]	@ (80040f4 <HAL_DMA_IRQHandler+0x6c8>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d004      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x516>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a6e      	ldr	r2, [pc, #440]	@ (80040f8 <HAL_DMA_IRQHandler+0x6cc>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d10a      	bne.n	8003f58 <HAL_DMA_IRQHandler+0x52c>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0308 	and.w	r3, r3, #8
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	bf14      	ite	ne
 8003f50:	2301      	movne	r3, #1
 8003f52:	2300      	moveq	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	e009      	b.n	8003f6c <HAL_DMA_IRQHandler+0x540>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	bf14      	ite	ne
 8003f66:	2301      	movne	r3, #1
 8003f68:	2300      	moveq	r3, #0
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d03e      	beq.n	8003fee <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f74:	f003 031f 	and.w	r3, r3, #31
 8003f78:	2210      	movs	r2, #16
 8003f7a:	409a      	lsls	r2, r3
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d018      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d108      	bne.n	8003fae <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d024      	beq.n	8003fee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	4798      	blx	r3
 8003fac:	e01f      	b.n	8003fee <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d01b      	beq.n	8003fee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	4798      	blx	r3
 8003fbe:	e016      	b.n	8003fee <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d107      	bne.n	8003fde <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0208 	bic.w	r2, r2, #8
 8003fdc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ff2:	f003 031f 	and.w	r3, r3, #31
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	409a      	lsls	r2, r3
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 8110 	beq.w	8004224 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a2c      	ldr	r2, [pc, #176]	@ (80040bc <HAL_DMA_IRQHandler+0x690>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d04a      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x678>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a2b      	ldr	r2, [pc, #172]	@ (80040c0 <HAL_DMA_IRQHandler+0x694>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d045      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x678>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a29      	ldr	r2, [pc, #164]	@ (80040c4 <HAL_DMA_IRQHandler+0x698>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d040      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x678>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a28      	ldr	r2, [pc, #160]	@ (80040c8 <HAL_DMA_IRQHandler+0x69c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d03b      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x678>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a26      	ldr	r2, [pc, #152]	@ (80040cc <HAL_DMA_IRQHandler+0x6a0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d036      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x678>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a25      	ldr	r2, [pc, #148]	@ (80040d0 <HAL_DMA_IRQHandler+0x6a4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d031      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x678>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a23      	ldr	r2, [pc, #140]	@ (80040d4 <HAL_DMA_IRQHandler+0x6a8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d02c      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x678>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a22      	ldr	r2, [pc, #136]	@ (80040d8 <HAL_DMA_IRQHandler+0x6ac>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d027      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x678>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a20      	ldr	r2, [pc, #128]	@ (80040dc <HAL_DMA_IRQHandler+0x6b0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d022      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x678>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a1f      	ldr	r2, [pc, #124]	@ (80040e0 <HAL_DMA_IRQHandler+0x6b4>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d01d      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x678>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a1d      	ldr	r2, [pc, #116]	@ (80040e4 <HAL_DMA_IRQHandler+0x6b8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d018      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x678>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a1c      	ldr	r2, [pc, #112]	@ (80040e8 <HAL_DMA_IRQHandler+0x6bc>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d013      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x678>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a1a      	ldr	r2, [pc, #104]	@ (80040ec <HAL_DMA_IRQHandler+0x6c0>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00e      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x678>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a19      	ldr	r2, [pc, #100]	@ (80040f0 <HAL_DMA_IRQHandler+0x6c4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d009      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x678>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a17      	ldr	r2, [pc, #92]	@ (80040f4 <HAL_DMA_IRQHandler+0x6c8>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d004      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x678>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a16      	ldr	r2, [pc, #88]	@ (80040f8 <HAL_DMA_IRQHandler+0x6cc>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d12b      	bne.n	80040fc <HAL_DMA_IRQHandler+0x6d0>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0310 	and.w	r3, r3, #16
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	bf14      	ite	ne
 80040b2:	2301      	movne	r3, #1
 80040b4:	2300      	moveq	r3, #0
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	e02a      	b.n	8004110 <HAL_DMA_IRQHandler+0x6e4>
 80040ba:	bf00      	nop
 80040bc:	40020010 	.word	0x40020010
 80040c0:	40020028 	.word	0x40020028
 80040c4:	40020040 	.word	0x40020040
 80040c8:	40020058 	.word	0x40020058
 80040cc:	40020070 	.word	0x40020070
 80040d0:	40020088 	.word	0x40020088
 80040d4:	400200a0 	.word	0x400200a0
 80040d8:	400200b8 	.word	0x400200b8
 80040dc:	40020410 	.word	0x40020410
 80040e0:	40020428 	.word	0x40020428
 80040e4:	40020440 	.word	0x40020440
 80040e8:	40020458 	.word	0x40020458
 80040ec:	40020470 	.word	0x40020470
 80040f0:	40020488 	.word	0x40020488
 80040f4:	400204a0 	.word	0x400204a0
 80040f8:	400204b8 	.word	0x400204b8
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	bf14      	ite	ne
 800410a:	2301      	movne	r3, #1
 800410c:	2300      	moveq	r3, #0
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 8087 	beq.w	8004224 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800411a:	f003 031f 	and.w	r3, r3, #31
 800411e:	2220      	movs	r2, #32
 8004120:	409a      	lsls	r2, r3
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b04      	cmp	r3, #4
 8004130:	d139      	bne.n	80041a6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0216 	bic.w	r2, r2, #22
 8004140:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	695a      	ldr	r2, [r3, #20]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004150:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004156:	2b00      	cmp	r3, #0
 8004158:	d103      	bne.n	8004162 <HAL_DMA_IRQHandler+0x736>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800415e:	2b00      	cmp	r3, #0
 8004160:	d007      	beq.n	8004172 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0208 	bic.w	r2, r2, #8
 8004170:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004176:	f003 031f 	and.w	r3, r3, #31
 800417a:	223f      	movs	r2, #63	@ 0x3f
 800417c:	409a      	lsls	r2, r3
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 834a 	beq.w	8004830 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	4798      	blx	r3
          }
          return;
 80041a4:	e344      	b.n	8004830 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d018      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d108      	bne.n	80041d4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d02c      	beq.n	8004224 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	4798      	blx	r3
 80041d2:	e027      	b.n	8004224 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d023      	beq.n	8004224 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	4798      	blx	r3
 80041e4:	e01e      	b.n	8004224 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10f      	bne.n	8004214 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0210 	bic.w	r2, r2, #16
 8004202:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 8306 	beq.w	800483a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 8088 	beq.w	800434c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2204      	movs	r2, #4
 8004240:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a7a      	ldr	r2, [pc, #488]	@ (8004434 <HAL_DMA_IRQHandler+0xa08>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d04a      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x8b8>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a79      	ldr	r2, [pc, #484]	@ (8004438 <HAL_DMA_IRQHandler+0xa0c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d045      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x8b8>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a77      	ldr	r2, [pc, #476]	@ (800443c <HAL_DMA_IRQHandler+0xa10>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d040      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x8b8>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a76      	ldr	r2, [pc, #472]	@ (8004440 <HAL_DMA_IRQHandler+0xa14>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d03b      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x8b8>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a74      	ldr	r2, [pc, #464]	@ (8004444 <HAL_DMA_IRQHandler+0xa18>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d036      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x8b8>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a73      	ldr	r2, [pc, #460]	@ (8004448 <HAL_DMA_IRQHandler+0xa1c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d031      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x8b8>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a71      	ldr	r2, [pc, #452]	@ (800444c <HAL_DMA_IRQHandler+0xa20>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d02c      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x8b8>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a70      	ldr	r2, [pc, #448]	@ (8004450 <HAL_DMA_IRQHandler+0xa24>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d027      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x8b8>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a6e      	ldr	r2, [pc, #440]	@ (8004454 <HAL_DMA_IRQHandler+0xa28>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d022      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x8b8>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a6d      	ldr	r2, [pc, #436]	@ (8004458 <HAL_DMA_IRQHandler+0xa2c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d01d      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x8b8>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a6b      	ldr	r2, [pc, #428]	@ (800445c <HAL_DMA_IRQHandler+0xa30>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d018      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x8b8>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a6a      	ldr	r2, [pc, #424]	@ (8004460 <HAL_DMA_IRQHandler+0xa34>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d013      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x8b8>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a68      	ldr	r2, [pc, #416]	@ (8004464 <HAL_DMA_IRQHandler+0xa38>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00e      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x8b8>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a67      	ldr	r2, [pc, #412]	@ (8004468 <HAL_DMA_IRQHandler+0xa3c>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d009      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x8b8>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a65      	ldr	r2, [pc, #404]	@ (800446c <HAL_DMA_IRQHandler+0xa40>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d004      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x8b8>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a64      	ldr	r2, [pc, #400]	@ (8004470 <HAL_DMA_IRQHandler+0xa44>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d108      	bne.n	80042f6 <HAL_DMA_IRQHandler+0x8ca>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 0201 	bic.w	r2, r2, #1
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	e007      	b.n	8004306 <HAL_DMA_IRQHandler+0x8da>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0201 	bic.w	r2, r2, #1
 8004304:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	3301      	adds	r3, #1
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800430e:	429a      	cmp	r2, r3
 8004310:	d307      	bcc.n	8004322 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1f2      	bne.n	8004306 <HAL_DMA_IRQHandler+0x8da>
 8004320:	e000      	b.n	8004324 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004322:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d004      	beq.n	800433c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2203      	movs	r2, #3
 8004336:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800433a:	e003      	b.n	8004344 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 8272 	beq.w	800483a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	4798      	blx	r3
 800435e:	e26c      	b.n	800483a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a43      	ldr	r2, [pc, #268]	@ (8004474 <HAL_DMA_IRQHandler+0xa48>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d022      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x984>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a42      	ldr	r2, [pc, #264]	@ (8004478 <HAL_DMA_IRQHandler+0xa4c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d01d      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x984>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a40      	ldr	r2, [pc, #256]	@ (800447c <HAL_DMA_IRQHandler+0xa50>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d018      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x984>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a3f      	ldr	r2, [pc, #252]	@ (8004480 <HAL_DMA_IRQHandler+0xa54>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d013      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x984>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a3d      	ldr	r2, [pc, #244]	@ (8004484 <HAL_DMA_IRQHandler+0xa58>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00e      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x984>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a3c      	ldr	r2, [pc, #240]	@ (8004488 <HAL_DMA_IRQHandler+0xa5c>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d009      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x984>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a3a      	ldr	r2, [pc, #232]	@ (800448c <HAL_DMA_IRQHandler+0xa60>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d004      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x984>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a39      	ldr	r2, [pc, #228]	@ (8004490 <HAL_DMA_IRQHandler+0xa64>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d101      	bne.n	80043b4 <HAL_DMA_IRQHandler+0x988>
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <HAL_DMA_IRQHandler+0x98a>
 80043b4:	2300      	movs	r3, #0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 823f 	beq.w	800483a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043c8:	f003 031f 	and.w	r3, r3, #31
 80043cc:	2204      	movs	r2, #4
 80043ce:	409a      	lsls	r2, r3
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	4013      	ands	r3, r2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 80cd 	beq.w	8004574 <HAL_DMA_IRQHandler+0xb48>
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 80c7 	beq.w	8004574 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ea:	f003 031f 	and.w	r3, r3, #31
 80043ee:	2204      	movs	r2, #4
 80043f0:	409a      	lsls	r2, r3
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d049      	beq.n	8004494 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d109      	bne.n	800441e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 8210 	beq.w	8004834 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800441c:	e20a      	b.n	8004834 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 8206 	beq.w	8004834 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004430:	e200      	b.n	8004834 <HAL_DMA_IRQHandler+0xe08>
 8004432:	bf00      	nop
 8004434:	40020010 	.word	0x40020010
 8004438:	40020028 	.word	0x40020028
 800443c:	40020040 	.word	0x40020040
 8004440:	40020058 	.word	0x40020058
 8004444:	40020070 	.word	0x40020070
 8004448:	40020088 	.word	0x40020088
 800444c:	400200a0 	.word	0x400200a0
 8004450:	400200b8 	.word	0x400200b8
 8004454:	40020410 	.word	0x40020410
 8004458:	40020428 	.word	0x40020428
 800445c:	40020440 	.word	0x40020440
 8004460:	40020458 	.word	0x40020458
 8004464:	40020470 	.word	0x40020470
 8004468:	40020488 	.word	0x40020488
 800446c:	400204a0 	.word	0x400204a0
 8004470:	400204b8 	.word	0x400204b8
 8004474:	58025408 	.word	0x58025408
 8004478:	5802541c 	.word	0x5802541c
 800447c:	58025430 	.word	0x58025430
 8004480:	58025444 	.word	0x58025444
 8004484:	58025458 	.word	0x58025458
 8004488:	5802546c 	.word	0x5802546c
 800448c:	58025480 	.word	0x58025480
 8004490:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	d160      	bne.n	8004560 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a7f      	ldr	r2, [pc, #508]	@ (80046a0 <HAL_DMA_IRQHandler+0xc74>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d04a      	beq.n	800453e <HAL_DMA_IRQHandler+0xb12>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a7d      	ldr	r2, [pc, #500]	@ (80046a4 <HAL_DMA_IRQHandler+0xc78>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d045      	beq.n	800453e <HAL_DMA_IRQHandler+0xb12>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a7c      	ldr	r2, [pc, #496]	@ (80046a8 <HAL_DMA_IRQHandler+0xc7c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d040      	beq.n	800453e <HAL_DMA_IRQHandler+0xb12>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a7a      	ldr	r2, [pc, #488]	@ (80046ac <HAL_DMA_IRQHandler+0xc80>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d03b      	beq.n	800453e <HAL_DMA_IRQHandler+0xb12>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a79      	ldr	r2, [pc, #484]	@ (80046b0 <HAL_DMA_IRQHandler+0xc84>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d036      	beq.n	800453e <HAL_DMA_IRQHandler+0xb12>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a77      	ldr	r2, [pc, #476]	@ (80046b4 <HAL_DMA_IRQHandler+0xc88>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d031      	beq.n	800453e <HAL_DMA_IRQHandler+0xb12>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a76      	ldr	r2, [pc, #472]	@ (80046b8 <HAL_DMA_IRQHandler+0xc8c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d02c      	beq.n	800453e <HAL_DMA_IRQHandler+0xb12>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a74      	ldr	r2, [pc, #464]	@ (80046bc <HAL_DMA_IRQHandler+0xc90>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d027      	beq.n	800453e <HAL_DMA_IRQHandler+0xb12>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a73      	ldr	r2, [pc, #460]	@ (80046c0 <HAL_DMA_IRQHandler+0xc94>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d022      	beq.n	800453e <HAL_DMA_IRQHandler+0xb12>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a71      	ldr	r2, [pc, #452]	@ (80046c4 <HAL_DMA_IRQHandler+0xc98>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d01d      	beq.n	800453e <HAL_DMA_IRQHandler+0xb12>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a70      	ldr	r2, [pc, #448]	@ (80046c8 <HAL_DMA_IRQHandler+0xc9c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d018      	beq.n	800453e <HAL_DMA_IRQHandler+0xb12>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a6e      	ldr	r2, [pc, #440]	@ (80046cc <HAL_DMA_IRQHandler+0xca0>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d013      	beq.n	800453e <HAL_DMA_IRQHandler+0xb12>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a6d      	ldr	r2, [pc, #436]	@ (80046d0 <HAL_DMA_IRQHandler+0xca4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d00e      	beq.n	800453e <HAL_DMA_IRQHandler+0xb12>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a6b      	ldr	r2, [pc, #428]	@ (80046d4 <HAL_DMA_IRQHandler+0xca8>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d009      	beq.n	800453e <HAL_DMA_IRQHandler+0xb12>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a6a      	ldr	r2, [pc, #424]	@ (80046d8 <HAL_DMA_IRQHandler+0xcac>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d004      	beq.n	800453e <HAL_DMA_IRQHandler+0xb12>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a68      	ldr	r2, [pc, #416]	@ (80046dc <HAL_DMA_IRQHandler+0xcb0>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d108      	bne.n	8004550 <HAL_DMA_IRQHandler+0xb24>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0208 	bic.w	r2, r2, #8
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	e007      	b.n	8004560 <HAL_DMA_IRQHandler+0xb34>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0204 	bic.w	r2, r2, #4
 800455e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 8165 	beq.w	8004834 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004572:	e15f      	b.n	8004834 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004578:	f003 031f 	and.w	r3, r3, #31
 800457c:	2202      	movs	r2, #2
 800457e:	409a      	lsls	r2, r3
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	4013      	ands	r3, r2
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 80c5 	beq.w	8004714 <HAL_DMA_IRQHandler+0xce8>
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 80bf 	beq.w	8004714 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800459a:	f003 031f 	and.w	r3, r3, #31
 800459e:	2202      	movs	r2, #2
 80045a0:	409a      	lsls	r2, r3
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d018      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d109      	bne.n	80045ce <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 813a 	beq.w	8004838 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045cc:	e134      	b.n	8004838 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 8130 	beq.w	8004838 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045e0:	e12a      	b.n	8004838 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f003 0320 	and.w	r3, r3, #32
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f040 8089 	bne.w	8004700 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a2b      	ldr	r2, [pc, #172]	@ (80046a0 <HAL_DMA_IRQHandler+0xc74>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d04a      	beq.n	800468e <HAL_DMA_IRQHandler+0xc62>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a29      	ldr	r2, [pc, #164]	@ (80046a4 <HAL_DMA_IRQHandler+0xc78>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d045      	beq.n	800468e <HAL_DMA_IRQHandler+0xc62>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a28      	ldr	r2, [pc, #160]	@ (80046a8 <HAL_DMA_IRQHandler+0xc7c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d040      	beq.n	800468e <HAL_DMA_IRQHandler+0xc62>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a26      	ldr	r2, [pc, #152]	@ (80046ac <HAL_DMA_IRQHandler+0xc80>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d03b      	beq.n	800468e <HAL_DMA_IRQHandler+0xc62>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a25      	ldr	r2, [pc, #148]	@ (80046b0 <HAL_DMA_IRQHandler+0xc84>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d036      	beq.n	800468e <HAL_DMA_IRQHandler+0xc62>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a23      	ldr	r2, [pc, #140]	@ (80046b4 <HAL_DMA_IRQHandler+0xc88>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d031      	beq.n	800468e <HAL_DMA_IRQHandler+0xc62>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a22      	ldr	r2, [pc, #136]	@ (80046b8 <HAL_DMA_IRQHandler+0xc8c>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d02c      	beq.n	800468e <HAL_DMA_IRQHandler+0xc62>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a20      	ldr	r2, [pc, #128]	@ (80046bc <HAL_DMA_IRQHandler+0xc90>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d027      	beq.n	800468e <HAL_DMA_IRQHandler+0xc62>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a1f      	ldr	r2, [pc, #124]	@ (80046c0 <HAL_DMA_IRQHandler+0xc94>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d022      	beq.n	800468e <HAL_DMA_IRQHandler+0xc62>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a1d      	ldr	r2, [pc, #116]	@ (80046c4 <HAL_DMA_IRQHandler+0xc98>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d01d      	beq.n	800468e <HAL_DMA_IRQHandler+0xc62>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a1c      	ldr	r2, [pc, #112]	@ (80046c8 <HAL_DMA_IRQHandler+0xc9c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d018      	beq.n	800468e <HAL_DMA_IRQHandler+0xc62>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a1a      	ldr	r2, [pc, #104]	@ (80046cc <HAL_DMA_IRQHandler+0xca0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d013      	beq.n	800468e <HAL_DMA_IRQHandler+0xc62>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a19      	ldr	r2, [pc, #100]	@ (80046d0 <HAL_DMA_IRQHandler+0xca4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d00e      	beq.n	800468e <HAL_DMA_IRQHandler+0xc62>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a17      	ldr	r2, [pc, #92]	@ (80046d4 <HAL_DMA_IRQHandler+0xca8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d009      	beq.n	800468e <HAL_DMA_IRQHandler+0xc62>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a16      	ldr	r2, [pc, #88]	@ (80046d8 <HAL_DMA_IRQHandler+0xcac>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d004      	beq.n	800468e <HAL_DMA_IRQHandler+0xc62>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a14      	ldr	r2, [pc, #80]	@ (80046dc <HAL_DMA_IRQHandler+0xcb0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d128      	bne.n	80046e0 <HAL_DMA_IRQHandler+0xcb4>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0214 	bic.w	r2, r2, #20
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	e027      	b.n	80046f0 <HAL_DMA_IRQHandler+0xcc4>
 80046a0:	40020010 	.word	0x40020010
 80046a4:	40020028 	.word	0x40020028
 80046a8:	40020040 	.word	0x40020040
 80046ac:	40020058 	.word	0x40020058
 80046b0:	40020070 	.word	0x40020070
 80046b4:	40020088 	.word	0x40020088
 80046b8:	400200a0 	.word	0x400200a0
 80046bc:	400200b8 	.word	0x400200b8
 80046c0:	40020410 	.word	0x40020410
 80046c4:	40020428 	.word	0x40020428
 80046c8:	40020440 	.word	0x40020440
 80046cc:	40020458 	.word	0x40020458
 80046d0:	40020470 	.word	0x40020470
 80046d4:	40020488 	.word	0x40020488
 80046d8:	400204a0 	.word	0x400204a0
 80046dc:	400204b8 	.word	0x400204b8
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 020a 	bic.w	r2, r2, #10
 80046ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 8097 	beq.w	8004838 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004712:	e091      	b.n	8004838 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004718:	f003 031f 	and.w	r3, r3, #31
 800471c:	2208      	movs	r2, #8
 800471e:	409a      	lsls	r2, r3
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	4013      	ands	r3, r2
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 8088 	beq.w	800483a <HAL_DMA_IRQHandler+0xe0e>
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 8082 	beq.w	800483a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a41      	ldr	r2, [pc, #260]	@ (8004840 <HAL_DMA_IRQHandler+0xe14>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d04a      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xdaa>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a3f      	ldr	r2, [pc, #252]	@ (8004844 <HAL_DMA_IRQHandler+0xe18>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d045      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xdaa>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a3e      	ldr	r2, [pc, #248]	@ (8004848 <HAL_DMA_IRQHandler+0xe1c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d040      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xdaa>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a3c      	ldr	r2, [pc, #240]	@ (800484c <HAL_DMA_IRQHandler+0xe20>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d03b      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xdaa>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a3b      	ldr	r2, [pc, #236]	@ (8004850 <HAL_DMA_IRQHandler+0xe24>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d036      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xdaa>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a39      	ldr	r2, [pc, #228]	@ (8004854 <HAL_DMA_IRQHandler+0xe28>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d031      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xdaa>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a38      	ldr	r2, [pc, #224]	@ (8004858 <HAL_DMA_IRQHandler+0xe2c>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d02c      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xdaa>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a36      	ldr	r2, [pc, #216]	@ (800485c <HAL_DMA_IRQHandler+0xe30>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d027      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xdaa>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a35      	ldr	r2, [pc, #212]	@ (8004860 <HAL_DMA_IRQHandler+0xe34>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d022      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xdaa>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a33      	ldr	r2, [pc, #204]	@ (8004864 <HAL_DMA_IRQHandler+0xe38>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d01d      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xdaa>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a32      	ldr	r2, [pc, #200]	@ (8004868 <HAL_DMA_IRQHandler+0xe3c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d018      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xdaa>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a30      	ldr	r2, [pc, #192]	@ (800486c <HAL_DMA_IRQHandler+0xe40>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d013      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xdaa>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a2f      	ldr	r2, [pc, #188]	@ (8004870 <HAL_DMA_IRQHandler+0xe44>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d00e      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xdaa>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a2d      	ldr	r2, [pc, #180]	@ (8004874 <HAL_DMA_IRQHandler+0xe48>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d009      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xdaa>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004878 <HAL_DMA_IRQHandler+0xe4c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d004      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xdaa>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a2a      	ldr	r2, [pc, #168]	@ (800487c <HAL_DMA_IRQHandler+0xe50>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d108      	bne.n	80047e8 <HAL_DMA_IRQHandler+0xdbc>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 021c 	bic.w	r2, r2, #28
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	e007      	b.n	80047f8 <HAL_DMA_IRQHandler+0xdcc>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 020e 	bic.w	r2, r2, #14
 80047f6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047fc:	f003 031f 	and.w	r3, r3, #31
 8004800:	2201      	movs	r2, #1
 8004802:	409a      	lsls	r2, r3
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004822:	2b00      	cmp	r3, #0
 8004824:	d009      	beq.n	800483a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	4798      	blx	r3
 800482e:	e004      	b.n	800483a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004830:	bf00      	nop
 8004832:	e002      	b.n	800483a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004834:	bf00      	nop
 8004836:	e000      	b.n	800483a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004838:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800483a:	3728      	adds	r7, #40	@ 0x28
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40020010 	.word	0x40020010
 8004844:	40020028 	.word	0x40020028
 8004848:	40020040 	.word	0x40020040
 800484c:	40020058 	.word	0x40020058
 8004850:	40020070 	.word	0x40020070
 8004854:	40020088 	.word	0x40020088
 8004858:	400200a0 	.word	0x400200a0
 800485c:	400200b8 	.word	0x400200b8
 8004860:	40020410 	.word	0x40020410
 8004864:	40020428 	.word	0x40020428
 8004868:	40020440 	.word	0x40020440
 800486c:	40020458 	.word	0x40020458
 8004870:	40020470 	.word	0x40020470
 8004874:	40020488 	.word	0x40020488
 8004878:	400204a0 	.word	0x400204a0
 800487c:	400204b8 	.word	0x400204b8

08004880 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800488c:	4618      	mov	r0, r3
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048aa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a7f      	ldr	r2, [pc, #508]	@ (8004ab4 <DMA_SetConfig+0x21c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d072      	beq.n	80049a2 <DMA_SetConfig+0x10a>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a7d      	ldr	r2, [pc, #500]	@ (8004ab8 <DMA_SetConfig+0x220>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d06d      	beq.n	80049a2 <DMA_SetConfig+0x10a>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a7c      	ldr	r2, [pc, #496]	@ (8004abc <DMA_SetConfig+0x224>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d068      	beq.n	80049a2 <DMA_SetConfig+0x10a>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a7a      	ldr	r2, [pc, #488]	@ (8004ac0 <DMA_SetConfig+0x228>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d063      	beq.n	80049a2 <DMA_SetConfig+0x10a>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a79      	ldr	r2, [pc, #484]	@ (8004ac4 <DMA_SetConfig+0x22c>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d05e      	beq.n	80049a2 <DMA_SetConfig+0x10a>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a77      	ldr	r2, [pc, #476]	@ (8004ac8 <DMA_SetConfig+0x230>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d059      	beq.n	80049a2 <DMA_SetConfig+0x10a>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a76      	ldr	r2, [pc, #472]	@ (8004acc <DMA_SetConfig+0x234>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d054      	beq.n	80049a2 <DMA_SetConfig+0x10a>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a74      	ldr	r2, [pc, #464]	@ (8004ad0 <DMA_SetConfig+0x238>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d04f      	beq.n	80049a2 <DMA_SetConfig+0x10a>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a73      	ldr	r2, [pc, #460]	@ (8004ad4 <DMA_SetConfig+0x23c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d04a      	beq.n	80049a2 <DMA_SetConfig+0x10a>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a71      	ldr	r2, [pc, #452]	@ (8004ad8 <DMA_SetConfig+0x240>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d045      	beq.n	80049a2 <DMA_SetConfig+0x10a>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a70      	ldr	r2, [pc, #448]	@ (8004adc <DMA_SetConfig+0x244>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d040      	beq.n	80049a2 <DMA_SetConfig+0x10a>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a6e      	ldr	r2, [pc, #440]	@ (8004ae0 <DMA_SetConfig+0x248>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d03b      	beq.n	80049a2 <DMA_SetConfig+0x10a>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a6d      	ldr	r2, [pc, #436]	@ (8004ae4 <DMA_SetConfig+0x24c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d036      	beq.n	80049a2 <DMA_SetConfig+0x10a>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a6b      	ldr	r2, [pc, #428]	@ (8004ae8 <DMA_SetConfig+0x250>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d031      	beq.n	80049a2 <DMA_SetConfig+0x10a>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a6a      	ldr	r2, [pc, #424]	@ (8004aec <DMA_SetConfig+0x254>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d02c      	beq.n	80049a2 <DMA_SetConfig+0x10a>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a68      	ldr	r2, [pc, #416]	@ (8004af0 <DMA_SetConfig+0x258>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d027      	beq.n	80049a2 <DMA_SetConfig+0x10a>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a67      	ldr	r2, [pc, #412]	@ (8004af4 <DMA_SetConfig+0x25c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d022      	beq.n	80049a2 <DMA_SetConfig+0x10a>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a65      	ldr	r2, [pc, #404]	@ (8004af8 <DMA_SetConfig+0x260>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d01d      	beq.n	80049a2 <DMA_SetConfig+0x10a>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a64      	ldr	r2, [pc, #400]	@ (8004afc <DMA_SetConfig+0x264>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d018      	beq.n	80049a2 <DMA_SetConfig+0x10a>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a62      	ldr	r2, [pc, #392]	@ (8004b00 <DMA_SetConfig+0x268>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d013      	beq.n	80049a2 <DMA_SetConfig+0x10a>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a61      	ldr	r2, [pc, #388]	@ (8004b04 <DMA_SetConfig+0x26c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00e      	beq.n	80049a2 <DMA_SetConfig+0x10a>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a5f      	ldr	r2, [pc, #380]	@ (8004b08 <DMA_SetConfig+0x270>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d009      	beq.n	80049a2 <DMA_SetConfig+0x10a>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a5e      	ldr	r2, [pc, #376]	@ (8004b0c <DMA_SetConfig+0x274>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d004      	beq.n	80049a2 <DMA_SetConfig+0x10a>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a5c      	ldr	r2, [pc, #368]	@ (8004b10 <DMA_SetConfig+0x278>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d101      	bne.n	80049a6 <DMA_SetConfig+0x10e>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <DMA_SetConfig+0x110>
 80049a6:	2300      	movs	r3, #0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00d      	beq.n	80049c8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80049b4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d004      	beq.n	80049c8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80049c6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a39      	ldr	r2, [pc, #228]	@ (8004ab4 <DMA_SetConfig+0x21c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d04a      	beq.n	8004a68 <DMA_SetConfig+0x1d0>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a38      	ldr	r2, [pc, #224]	@ (8004ab8 <DMA_SetConfig+0x220>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d045      	beq.n	8004a68 <DMA_SetConfig+0x1d0>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a36      	ldr	r2, [pc, #216]	@ (8004abc <DMA_SetConfig+0x224>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d040      	beq.n	8004a68 <DMA_SetConfig+0x1d0>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a35      	ldr	r2, [pc, #212]	@ (8004ac0 <DMA_SetConfig+0x228>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d03b      	beq.n	8004a68 <DMA_SetConfig+0x1d0>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a33      	ldr	r2, [pc, #204]	@ (8004ac4 <DMA_SetConfig+0x22c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d036      	beq.n	8004a68 <DMA_SetConfig+0x1d0>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a32      	ldr	r2, [pc, #200]	@ (8004ac8 <DMA_SetConfig+0x230>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d031      	beq.n	8004a68 <DMA_SetConfig+0x1d0>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a30      	ldr	r2, [pc, #192]	@ (8004acc <DMA_SetConfig+0x234>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d02c      	beq.n	8004a68 <DMA_SetConfig+0x1d0>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a2f      	ldr	r2, [pc, #188]	@ (8004ad0 <DMA_SetConfig+0x238>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d027      	beq.n	8004a68 <DMA_SetConfig+0x1d0>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a2d      	ldr	r2, [pc, #180]	@ (8004ad4 <DMA_SetConfig+0x23c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d022      	beq.n	8004a68 <DMA_SetConfig+0x1d0>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a2c      	ldr	r2, [pc, #176]	@ (8004ad8 <DMA_SetConfig+0x240>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d01d      	beq.n	8004a68 <DMA_SetConfig+0x1d0>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a2a      	ldr	r2, [pc, #168]	@ (8004adc <DMA_SetConfig+0x244>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d018      	beq.n	8004a68 <DMA_SetConfig+0x1d0>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a29      	ldr	r2, [pc, #164]	@ (8004ae0 <DMA_SetConfig+0x248>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d013      	beq.n	8004a68 <DMA_SetConfig+0x1d0>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a27      	ldr	r2, [pc, #156]	@ (8004ae4 <DMA_SetConfig+0x24c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d00e      	beq.n	8004a68 <DMA_SetConfig+0x1d0>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a26      	ldr	r2, [pc, #152]	@ (8004ae8 <DMA_SetConfig+0x250>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d009      	beq.n	8004a68 <DMA_SetConfig+0x1d0>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a24      	ldr	r2, [pc, #144]	@ (8004aec <DMA_SetConfig+0x254>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d004      	beq.n	8004a68 <DMA_SetConfig+0x1d0>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a23      	ldr	r2, [pc, #140]	@ (8004af0 <DMA_SetConfig+0x258>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d101      	bne.n	8004a6c <DMA_SetConfig+0x1d4>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e000      	b.n	8004a6e <DMA_SetConfig+0x1d6>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d059      	beq.n	8004b26 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a76:	f003 031f 	and.w	r3, r3, #31
 8004a7a:	223f      	movs	r2, #63	@ 0x3f
 8004a7c:	409a      	lsls	r2, r3
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a90:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2b40      	cmp	r3, #64	@ 0x40
 8004aa0:	d138      	bne.n	8004b14 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004ab2:	e086      	b.n	8004bc2 <DMA_SetConfig+0x32a>
 8004ab4:	40020010 	.word	0x40020010
 8004ab8:	40020028 	.word	0x40020028
 8004abc:	40020040 	.word	0x40020040
 8004ac0:	40020058 	.word	0x40020058
 8004ac4:	40020070 	.word	0x40020070
 8004ac8:	40020088 	.word	0x40020088
 8004acc:	400200a0 	.word	0x400200a0
 8004ad0:	400200b8 	.word	0x400200b8
 8004ad4:	40020410 	.word	0x40020410
 8004ad8:	40020428 	.word	0x40020428
 8004adc:	40020440 	.word	0x40020440
 8004ae0:	40020458 	.word	0x40020458
 8004ae4:	40020470 	.word	0x40020470
 8004ae8:	40020488 	.word	0x40020488
 8004aec:	400204a0 	.word	0x400204a0
 8004af0:	400204b8 	.word	0x400204b8
 8004af4:	58025408 	.word	0x58025408
 8004af8:	5802541c 	.word	0x5802541c
 8004afc:	58025430 	.word	0x58025430
 8004b00:	58025444 	.word	0x58025444
 8004b04:	58025458 	.word	0x58025458
 8004b08:	5802546c 	.word	0x5802546c
 8004b0c:	58025480 	.word	0x58025480
 8004b10:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	60da      	str	r2, [r3, #12]
}
 8004b24:	e04d      	b.n	8004bc2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a29      	ldr	r2, [pc, #164]	@ (8004bd0 <DMA_SetConfig+0x338>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d022      	beq.n	8004b76 <DMA_SetConfig+0x2de>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a27      	ldr	r2, [pc, #156]	@ (8004bd4 <DMA_SetConfig+0x33c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d01d      	beq.n	8004b76 <DMA_SetConfig+0x2de>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a26      	ldr	r2, [pc, #152]	@ (8004bd8 <DMA_SetConfig+0x340>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d018      	beq.n	8004b76 <DMA_SetConfig+0x2de>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a24      	ldr	r2, [pc, #144]	@ (8004bdc <DMA_SetConfig+0x344>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d013      	beq.n	8004b76 <DMA_SetConfig+0x2de>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a23      	ldr	r2, [pc, #140]	@ (8004be0 <DMA_SetConfig+0x348>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d00e      	beq.n	8004b76 <DMA_SetConfig+0x2de>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a21      	ldr	r2, [pc, #132]	@ (8004be4 <DMA_SetConfig+0x34c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d009      	beq.n	8004b76 <DMA_SetConfig+0x2de>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a20      	ldr	r2, [pc, #128]	@ (8004be8 <DMA_SetConfig+0x350>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d004      	beq.n	8004b76 <DMA_SetConfig+0x2de>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a1e      	ldr	r2, [pc, #120]	@ (8004bec <DMA_SetConfig+0x354>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d101      	bne.n	8004b7a <DMA_SetConfig+0x2e2>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <DMA_SetConfig+0x2e4>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d020      	beq.n	8004bc2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b84:	f003 031f 	and.w	r3, r3, #31
 8004b88:	2201      	movs	r2, #1
 8004b8a:	409a      	lsls	r2, r3
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	2b40      	cmp	r3, #64	@ 0x40
 8004b9e:	d108      	bne.n	8004bb2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	60da      	str	r2, [r3, #12]
}
 8004bb0:	e007      	b.n	8004bc2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	60da      	str	r2, [r3, #12]
}
 8004bc2:	bf00      	nop
 8004bc4:	371c      	adds	r7, #28
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	58025408 	.word	0x58025408
 8004bd4:	5802541c 	.word	0x5802541c
 8004bd8:	58025430 	.word	0x58025430
 8004bdc:	58025444 	.word	0x58025444
 8004be0:	58025458 	.word	0x58025458
 8004be4:	5802546c 	.word	0x5802546c
 8004be8:	58025480 	.word	0x58025480
 8004bec:	58025494 	.word	0x58025494

08004bf0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a42      	ldr	r2, [pc, #264]	@ (8004d08 <DMA_CalcBaseAndBitshift+0x118>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d04a      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a41      	ldr	r2, [pc, #260]	@ (8004d0c <DMA_CalcBaseAndBitshift+0x11c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d045      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a3f      	ldr	r2, [pc, #252]	@ (8004d10 <DMA_CalcBaseAndBitshift+0x120>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d040      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a3e      	ldr	r2, [pc, #248]	@ (8004d14 <DMA_CalcBaseAndBitshift+0x124>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d03b      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a3c      	ldr	r2, [pc, #240]	@ (8004d18 <DMA_CalcBaseAndBitshift+0x128>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d036      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a3b      	ldr	r2, [pc, #236]	@ (8004d1c <DMA_CalcBaseAndBitshift+0x12c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d031      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a39      	ldr	r2, [pc, #228]	@ (8004d20 <DMA_CalcBaseAndBitshift+0x130>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d02c      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a38      	ldr	r2, [pc, #224]	@ (8004d24 <DMA_CalcBaseAndBitshift+0x134>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d027      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a36      	ldr	r2, [pc, #216]	@ (8004d28 <DMA_CalcBaseAndBitshift+0x138>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d022      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a35      	ldr	r2, [pc, #212]	@ (8004d2c <DMA_CalcBaseAndBitshift+0x13c>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d01d      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a33      	ldr	r2, [pc, #204]	@ (8004d30 <DMA_CalcBaseAndBitshift+0x140>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d018      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a32      	ldr	r2, [pc, #200]	@ (8004d34 <DMA_CalcBaseAndBitshift+0x144>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d013      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a30      	ldr	r2, [pc, #192]	@ (8004d38 <DMA_CalcBaseAndBitshift+0x148>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00e      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a2f      	ldr	r2, [pc, #188]	@ (8004d3c <DMA_CalcBaseAndBitshift+0x14c>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d009      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a2d      	ldr	r2, [pc, #180]	@ (8004d40 <DMA_CalcBaseAndBitshift+0x150>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d004      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a2c      	ldr	r2, [pc, #176]	@ (8004d44 <DMA_CalcBaseAndBitshift+0x154>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d101      	bne.n	8004c9c <DMA_CalcBaseAndBitshift+0xac>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e000      	b.n	8004c9e <DMA_CalcBaseAndBitshift+0xae>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d024      	beq.n	8004cec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	3b10      	subs	r3, #16
 8004caa:	4a27      	ldr	r2, [pc, #156]	@ (8004d48 <DMA_CalcBaseAndBitshift+0x158>)
 8004cac:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb0:	091b      	lsrs	r3, r3, #4
 8004cb2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f003 0307 	and.w	r3, r3, #7
 8004cba:	4a24      	ldr	r2, [pc, #144]	@ (8004d4c <DMA_CalcBaseAndBitshift+0x15c>)
 8004cbc:	5cd3      	ldrb	r3, [r2, r3]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d908      	bls.n	8004cdc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8004d50 <DMA_CalcBaseAndBitshift+0x160>)
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	1d1a      	adds	r2, r3, #4
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	659a      	str	r2, [r3, #88]	@ 0x58
 8004cda:	e00d      	b.n	8004cf8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8004d50 <DMA_CalcBaseAndBitshift+0x160>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cea:	e005      	b.n	8004cf8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	40020010 	.word	0x40020010
 8004d0c:	40020028 	.word	0x40020028
 8004d10:	40020040 	.word	0x40020040
 8004d14:	40020058 	.word	0x40020058
 8004d18:	40020070 	.word	0x40020070
 8004d1c:	40020088 	.word	0x40020088
 8004d20:	400200a0 	.word	0x400200a0
 8004d24:	400200b8 	.word	0x400200b8
 8004d28:	40020410 	.word	0x40020410
 8004d2c:	40020428 	.word	0x40020428
 8004d30:	40020440 	.word	0x40020440
 8004d34:	40020458 	.word	0x40020458
 8004d38:	40020470 	.word	0x40020470
 8004d3c:	40020488 	.word	0x40020488
 8004d40:	400204a0 	.word	0x400204a0
 8004d44:	400204b8 	.word	0x400204b8
 8004d48:	aaaaaaab 	.word	0xaaaaaaab
 8004d4c:	0801e24c 	.word	0x0801e24c
 8004d50:	fffffc00 	.word	0xfffffc00

08004d54 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d120      	bne.n	8004daa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6c:	2b03      	cmp	r3, #3
 8004d6e:	d858      	bhi.n	8004e22 <DMA_CheckFifoParam+0xce>
 8004d70:	a201      	add	r2, pc, #4	@ (adr r2, 8004d78 <DMA_CheckFifoParam+0x24>)
 8004d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d76:	bf00      	nop
 8004d78:	08004d89 	.word	0x08004d89
 8004d7c:	08004d9b 	.word	0x08004d9b
 8004d80:	08004d89 	.word	0x08004d89
 8004d84:	08004e23 	.word	0x08004e23
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d048      	beq.n	8004e26 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d98:	e045      	b.n	8004e26 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004da2:	d142      	bne.n	8004e2a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004da8:	e03f      	b.n	8004e2a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004db2:	d123      	bne.n	8004dfc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db8:	2b03      	cmp	r3, #3
 8004dba:	d838      	bhi.n	8004e2e <DMA_CheckFifoParam+0xda>
 8004dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc4 <DMA_CheckFifoParam+0x70>)
 8004dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc2:	bf00      	nop
 8004dc4:	08004dd5 	.word	0x08004dd5
 8004dc8:	08004ddb 	.word	0x08004ddb
 8004dcc:	08004dd5 	.word	0x08004dd5
 8004dd0:	08004ded 	.word	0x08004ded
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	73fb      	strb	r3, [r7, #15]
        break;
 8004dd8:	e030      	b.n	8004e3c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dde:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d025      	beq.n	8004e32 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004dea:	e022      	b.n	8004e32 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004df4:	d11f      	bne.n	8004e36 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004dfa:	e01c      	b.n	8004e36 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d902      	bls.n	8004e0a <DMA_CheckFifoParam+0xb6>
 8004e04:	2b03      	cmp	r3, #3
 8004e06:	d003      	beq.n	8004e10 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004e08:	e018      	b.n	8004e3c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	73fb      	strb	r3, [r7, #15]
        break;
 8004e0e:	e015      	b.n	8004e3c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00e      	beq.n	8004e3a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	73fb      	strb	r3, [r7, #15]
    break;
 8004e20:	e00b      	b.n	8004e3a <DMA_CheckFifoParam+0xe6>
        break;
 8004e22:	bf00      	nop
 8004e24:	e00a      	b.n	8004e3c <DMA_CheckFifoParam+0xe8>
        break;
 8004e26:	bf00      	nop
 8004e28:	e008      	b.n	8004e3c <DMA_CheckFifoParam+0xe8>
        break;
 8004e2a:	bf00      	nop
 8004e2c:	e006      	b.n	8004e3c <DMA_CheckFifoParam+0xe8>
        break;
 8004e2e:	bf00      	nop
 8004e30:	e004      	b.n	8004e3c <DMA_CheckFifoParam+0xe8>
        break;
 8004e32:	bf00      	nop
 8004e34:	e002      	b.n	8004e3c <DMA_CheckFifoParam+0xe8>
        break;
 8004e36:	bf00      	nop
 8004e38:	e000      	b.n	8004e3c <DMA_CheckFifoParam+0xe8>
    break;
 8004e3a:	bf00      	nop
    }
  }

  return status;
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop

08004e4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a38      	ldr	r2, [pc, #224]	@ (8004f40 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d022      	beq.n	8004eaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a36      	ldr	r2, [pc, #216]	@ (8004f44 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d01d      	beq.n	8004eaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a35      	ldr	r2, [pc, #212]	@ (8004f48 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d018      	beq.n	8004eaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a33      	ldr	r2, [pc, #204]	@ (8004f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d013      	beq.n	8004eaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a32      	ldr	r2, [pc, #200]	@ (8004f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00e      	beq.n	8004eaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a30      	ldr	r2, [pc, #192]	@ (8004f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d009      	beq.n	8004eaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a2f      	ldr	r2, [pc, #188]	@ (8004f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d004      	beq.n	8004eaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a2d      	ldr	r2, [pc, #180]	@ (8004f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d101      	bne.n	8004eae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e000      	b.n	8004eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d01a      	beq.n	8004eea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	3b08      	subs	r3, #8
 8004ebc:	4a28      	ldr	r2, [pc, #160]	@ (8004f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec2:	091b      	lsrs	r3, r3, #4
 8004ec4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4b26      	ldr	r3, [pc, #152]	@ (8004f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004eca:	4413      	add	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	461a      	mov	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a24      	ldr	r2, [pc, #144]	@ (8004f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004ed8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f003 031f 	and.w	r3, r3, #31
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	409a      	lsls	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004ee8:	e024      	b.n	8004f34 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	3b10      	subs	r3, #16
 8004ef2:	4a1e      	ldr	r2, [pc, #120]	@ (8004f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef8:	091b      	lsrs	r3, r3, #4
 8004efa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4a1c      	ldr	r2, [pc, #112]	@ (8004f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d806      	bhi.n	8004f12 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	4a1b      	ldr	r2, [pc, #108]	@ (8004f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d902      	bls.n	8004f12 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	3308      	adds	r3, #8
 8004f10:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4b18      	ldr	r3, [pc, #96]	@ (8004f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004f16:	4413      	add	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a16      	ldr	r2, [pc, #88]	@ (8004f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004f24:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f003 031f 	and.w	r3, r3, #31
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	409a      	lsls	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f34:	bf00      	nop
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	58025408 	.word	0x58025408
 8004f44:	5802541c 	.word	0x5802541c
 8004f48:	58025430 	.word	0x58025430
 8004f4c:	58025444 	.word	0x58025444
 8004f50:	58025458 	.word	0x58025458
 8004f54:	5802546c 	.word	0x5802546c
 8004f58:	58025480 	.word	0x58025480
 8004f5c:	58025494 	.word	0x58025494
 8004f60:	cccccccd 	.word	0xcccccccd
 8004f64:	16009600 	.word	0x16009600
 8004f68:	58025880 	.word	0x58025880
 8004f6c:	aaaaaaab 	.word	0xaaaaaaab
 8004f70:	400204b8 	.word	0x400204b8
 8004f74:	4002040f 	.word	0x4002040f
 8004f78:	10008200 	.word	0x10008200
 8004f7c:	40020880 	.word	0x40020880

08004f80 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d04a      	beq.n	800502c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d847      	bhi.n	800502c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a25      	ldr	r2, [pc, #148]	@ (8005038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d022      	beq.n	8004fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a24      	ldr	r2, [pc, #144]	@ (800503c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d01d      	beq.n	8004fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a22      	ldr	r2, [pc, #136]	@ (8005040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d018      	beq.n	8004fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a21      	ldr	r2, [pc, #132]	@ (8005044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d013      	beq.n	8004fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a1f      	ldr	r2, [pc, #124]	@ (8005048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00e      	beq.n	8004fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800504c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d009      	beq.n	8004fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1c      	ldr	r2, [pc, #112]	@ (8005050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d004      	beq.n	8004fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8005054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d101      	bne.n	8004ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004fec:	2301      	movs	r3, #1
 8004fee:	e000      	b.n	8004ff2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	4b17      	ldr	r3, [pc, #92]	@ (8005058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004ffa:	4413      	add	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	461a      	mov	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a15      	ldr	r2, [pc, #84]	@ (800505c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005008:	671a      	str	r2, [r3, #112]	@ 0x70
 800500a:	e009      	b.n	8005020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	4b14      	ldr	r3, [pc, #80]	@ (8005060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	461a      	mov	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a11      	ldr	r2, [pc, #68]	@ (8005064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800501e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	3b01      	subs	r3, #1
 8005024:	2201      	movs	r2, #1
 8005026:	409a      	lsls	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800502c:	bf00      	nop
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	58025408 	.word	0x58025408
 800503c:	5802541c 	.word	0x5802541c
 8005040:	58025430 	.word	0x58025430
 8005044:	58025444 	.word	0x58025444
 8005048:	58025458 	.word	0x58025458
 800504c:	5802546c 	.word	0x5802546c
 8005050:	58025480 	.word	0x58025480
 8005054:	58025494 	.word	0x58025494
 8005058:	1600963f 	.word	0x1600963f
 800505c:	58025940 	.word	0x58025940
 8005060:	1000823f 	.word	0x1000823f
 8005064:	40020940 	.word	0x40020940

08005068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005068:	b480      	push	{r7}
 800506a:	b089      	sub	sp, #36	@ 0x24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005072:	2300      	movs	r3, #0
 8005074:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005076:	4b89      	ldr	r3, [pc, #548]	@ (800529c <HAL_GPIO_Init+0x234>)
 8005078:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800507a:	e194      	b.n	80053a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	2101      	movs	r1, #1
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	fa01 f303 	lsl.w	r3, r1, r3
 8005088:	4013      	ands	r3, r2
 800508a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 8186 	beq.w	80053a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f003 0303 	and.w	r3, r3, #3
 800509c:	2b01      	cmp	r3, #1
 800509e:	d005      	beq.n	80050ac <HAL_GPIO_Init+0x44>
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f003 0303 	and.w	r3, r3, #3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d130      	bne.n	800510e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	2203      	movs	r2, #3
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	43db      	mvns	r3, r3
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	4013      	ands	r3, r2
 80050c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	fa02 f303 	lsl.w	r3, r2, r3
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050e2:	2201      	movs	r2, #1
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ea:	43db      	mvns	r3, r3
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	4013      	ands	r3, r2
 80050f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	091b      	lsrs	r3, r3, #4
 80050f8:	f003 0201 	and.w	r2, r3, #1
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	4313      	orrs	r3, r2
 8005106:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	2b03      	cmp	r3, #3
 8005118:	d017      	beq.n	800514a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	2203      	movs	r2, #3
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	43db      	mvns	r3, r3
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	4013      	ands	r3, r2
 8005130:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	689a      	ldr	r2, [r3, #8]
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	fa02 f303 	lsl.w	r3, r2, r3
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	4313      	orrs	r3, r2
 8005142:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d123      	bne.n	800519e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	08da      	lsrs	r2, r3, #3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	3208      	adds	r2, #8
 800515e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	220f      	movs	r2, #15
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	43db      	mvns	r3, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	4013      	ands	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	691a      	ldr	r2, [r3, #16]
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	fa02 f303 	lsl.w	r3, r2, r3
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	4313      	orrs	r3, r2
 800518e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	08da      	lsrs	r2, r3, #3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3208      	adds	r2, #8
 8005198:	69b9      	ldr	r1, [r7, #24]
 800519a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	2203      	movs	r2, #3
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	43db      	mvns	r3, r3
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	4013      	ands	r3, r2
 80051b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f003 0203 	and.w	r2, r3, #3
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	fa02 f303 	lsl.w	r3, r2, r3
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 80e0 	beq.w	80053a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051e0:	4b2f      	ldr	r3, [pc, #188]	@ (80052a0 <HAL_GPIO_Init+0x238>)
 80051e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80051e6:	4a2e      	ldr	r2, [pc, #184]	@ (80052a0 <HAL_GPIO_Init+0x238>)
 80051e8:	f043 0302 	orr.w	r3, r3, #2
 80051ec:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80051f0:	4b2b      	ldr	r3, [pc, #172]	@ (80052a0 <HAL_GPIO_Init+0x238>)
 80051f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051fe:	4a29      	ldr	r2, [pc, #164]	@ (80052a4 <HAL_GPIO_Init+0x23c>)
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	089b      	lsrs	r3, r3, #2
 8005204:	3302      	adds	r3, #2
 8005206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800520a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	220f      	movs	r2, #15
 8005216:	fa02 f303 	lsl.w	r3, r2, r3
 800521a:	43db      	mvns	r3, r3
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	4013      	ands	r3, r2
 8005220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a20      	ldr	r2, [pc, #128]	@ (80052a8 <HAL_GPIO_Init+0x240>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d052      	beq.n	80052d0 <HAL_GPIO_Init+0x268>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a1f      	ldr	r2, [pc, #124]	@ (80052ac <HAL_GPIO_Init+0x244>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d031      	beq.n	8005296 <HAL_GPIO_Init+0x22e>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a1e      	ldr	r2, [pc, #120]	@ (80052b0 <HAL_GPIO_Init+0x248>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d02b      	beq.n	8005292 <HAL_GPIO_Init+0x22a>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a1d      	ldr	r2, [pc, #116]	@ (80052b4 <HAL_GPIO_Init+0x24c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d025      	beq.n	800528e <HAL_GPIO_Init+0x226>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a1c      	ldr	r2, [pc, #112]	@ (80052b8 <HAL_GPIO_Init+0x250>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d01f      	beq.n	800528a <HAL_GPIO_Init+0x222>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a1b      	ldr	r2, [pc, #108]	@ (80052bc <HAL_GPIO_Init+0x254>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d019      	beq.n	8005286 <HAL_GPIO_Init+0x21e>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a1a      	ldr	r2, [pc, #104]	@ (80052c0 <HAL_GPIO_Init+0x258>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d013      	beq.n	8005282 <HAL_GPIO_Init+0x21a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a19      	ldr	r2, [pc, #100]	@ (80052c4 <HAL_GPIO_Init+0x25c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d00d      	beq.n	800527e <HAL_GPIO_Init+0x216>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a18      	ldr	r2, [pc, #96]	@ (80052c8 <HAL_GPIO_Init+0x260>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d007      	beq.n	800527a <HAL_GPIO_Init+0x212>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a17      	ldr	r2, [pc, #92]	@ (80052cc <HAL_GPIO_Init+0x264>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d101      	bne.n	8005276 <HAL_GPIO_Init+0x20e>
 8005272:	2309      	movs	r3, #9
 8005274:	e02d      	b.n	80052d2 <HAL_GPIO_Init+0x26a>
 8005276:	230a      	movs	r3, #10
 8005278:	e02b      	b.n	80052d2 <HAL_GPIO_Init+0x26a>
 800527a:	2308      	movs	r3, #8
 800527c:	e029      	b.n	80052d2 <HAL_GPIO_Init+0x26a>
 800527e:	2307      	movs	r3, #7
 8005280:	e027      	b.n	80052d2 <HAL_GPIO_Init+0x26a>
 8005282:	2306      	movs	r3, #6
 8005284:	e025      	b.n	80052d2 <HAL_GPIO_Init+0x26a>
 8005286:	2305      	movs	r3, #5
 8005288:	e023      	b.n	80052d2 <HAL_GPIO_Init+0x26a>
 800528a:	2304      	movs	r3, #4
 800528c:	e021      	b.n	80052d2 <HAL_GPIO_Init+0x26a>
 800528e:	2303      	movs	r3, #3
 8005290:	e01f      	b.n	80052d2 <HAL_GPIO_Init+0x26a>
 8005292:	2302      	movs	r3, #2
 8005294:	e01d      	b.n	80052d2 <HAL_GPIO_Init+0x26a>
 8005296:	2301      	movs	r3, #1
 8005298:	e01b      	b.n	80052d2 <HAL_GPIO_Init+0x26a>
 800529a:	bf00      	nop
 800529c:	58000080 	.word	0x58000080
 80052a0:	58024400 	.word	0x58024400
 80052a4:	58000400 	.word	0x58000400
 80052a8:	58020000 	.word	0x58020000
 80052ac:	58020400 	.word	0x58020400
 80052b0:	58020800 	.word	0x58020800
 80052b4:	58020c00 	.word	0x58020c00
 80052b8:	58021000 	.word	0x58021000
 80052bc:	58021400 	.word	0x58021400
 80052c0:	58021800 	.word	0x58021800
 80052c4:	58021c00 	.word	0x58021c00
 80052c8:	58022000 	.word	0x58022000
 80052cc:	58022400 	.word	0x58022400
 80052d0:	2300      	movs	r3, #0
 80052d2:	69fa      	ldr	r2, [r7, #28]
 80052d4:	f002 0203 	and.w	r2, r2, #3
 80052d8:	0092      	lsls	r2, r2, #2
 80052da:	4093      	lsls	r3, r2
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	4313      	orrs	r3, r2
 80052e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052e2:	4938      	ldr	r1, [pc, #224]	@ (80053c4 <HAL_GPIO_Init+0x35c>)
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	089b      	lsrs	r3, r3, #2
 80052e8:	3302      	adds	r3, #2
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	43db      	mvns	r3, r3
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	4013      	ands	r3, r2
 8005300:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	4313      	orrs	r3, r2
 8005314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005316:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800531e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	43db      	mvns	r3, r3
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	4013      	ands	r3, r2
 800532e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005344:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	43db      	mvns	r3, r3
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	4013      	ands	r3, r2
 800535a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	4313      	orrs	r3, r2
 800536e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	43db      	mvns	r3, r3
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	4013      	ands	r3, r2
 8005384:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	4313      	orrs	r3, r2
 8005398:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	3301      	adds	r3, #1
 80053a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	fa22 f303 	lsr.w	r3, r2, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f47f ae63 	bne.w	800507c <HAL_GPIO_Init+0x14>
  }
}
 80053b6:	bf00      	nop
 80053b8:	bf00      	nop
 80053ba:	3724      	adds	r7, #36	@ 0x24
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	58000400 	.word	0x58000400

080053c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	460b      	mov	r3, r1
 80053d2:	807b      	strh	r3, [r7, #2]
 80053d4:	4613      	mov	r3, r2
 80053d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053d8:	787b      	ldrb	r3, [r7, #1]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053de:	887a      	ldrh	r2, [r7, #2]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80053e4:	e003      	b.n	80053ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80053e6:	887b      	ldrh	r3, [r7, #2]
 80053e8:	041a      	lsls	r2, r3, #16
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	619a      	str	r2, [r3, #24]
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b082      	sub	sp, #8
 80053fe:	af00      	add	r7, sp, #0
 8005400:	4603      	mov	r3, r0
 8005402:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005404:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005408:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800540c:	88fb      	ldrh	r3, [r7, #6]
 800540e:	4013      	ands	r3, r2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d008      	beq.n	8005426 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005414:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005418:	88fb      	ldrh	r3, [r7, #6]
 800541a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800541e:	88fb      	ldrh	r3, [r7, #6]
 8005420:	4618      	mov	r0, r3
 8005422:	f000 f804 	bl	800542e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005426:	bf00      	nop
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	4603      	mov	r3, r0
 8005436:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800544c:	4b19      	ldr	r3, [pc, #100]	@ (80054b4 <HAL_PWREx_ConfigSupply+0x70>)
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	2b04      	cmp	r3, #4
 8005456:	d00a      	beq.n	800546e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005458:	4b16      	ldr	r3, [pc, #88]	@ (80054b4 <HAL_PWREx_ConfigSupply+0x70>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	429a      	cmp	r2, r3
 8005464:	d001      	beq.n	800546a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e01f      	b.n	80054aa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800546a:	2300      	movs	r3, #0
 800546c:	e01d      	b.n	80054aa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800546e:	4b11      	ldr	r3, [pc, #68]	@ (80054b4 <HAL_PWREx_ConfigSupply+0x70>)
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f023 0207 	bic.w	r2, r3, #7
 8005476:	490f      	ldr	r1, [pc, #60]	@ (80054b4 <HAL_PWREx_ConfigSupply+0x70>)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4313      	orrs	r3, r2
 800547c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800547e:	f7fc feb3 	bl	80021e8 <HAL_GetTick>
 8005482:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005484:	e009      	b.n	800549a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005486:	f7fc feaf 	bl	80021e8 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005494:	d901      	bls.n	800549a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e007      	b.n	80054aa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800549a:	4b06      	ldr	r3, [pc, #24]	@ (80054b4 <HAL_PWREx_ConfigSupply+0x70>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054a6:	d1ee      	bne.n	8005486 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	58024800 	.word	0x58024800

080054b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08c      	sub	sp, #48	@ 0x30
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d102      	bne.n	80054cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	f000 bc48 	b.w	8005d5c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 8088 	beq.w	80055ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054da:	4b99      	ldr	r3, [pc, #612]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80054e4:	4b96      	ldr	r3, [pc, #600]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 80054e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80054ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ec:	2b10      	cmp	r3, #16
 80054ee:	d007      	beq.n	8005500 <HAL_RCC_OscConfig+0x48>
 80054f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054f2:	2b18      	cmp	r3, #24
 80054f4:	d111      	bne.n	800551a <HAL_RCC_OscConfig+0x62>
 80054f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f8:	f003 0303 	and.w	r3, r3, #3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d10c      	bne.n	800551a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005500:	4b8f      	ldr	r3, [pc, #572]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d06d      	beq.n	80055e8 <HAL_RCC_OscConfig+0x130>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d169      	bne.n	80055e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	f000 bc21 	b.w	8005d5c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005522:	d106      	bne.n	8005532 <HAL_RCC_OscConfig+0x7a>
 8005524:	4b86      	ldr	r3, [pc, #536]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a85      	ldr	r2, [pc, #532]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 800552a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	e02e      	b.n	8005590 <HAL_RCC_OscConfig+0xd8>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10c      	bne.n	8005554 <HAL_RCC_OscConfig+0x9c>
 800553a:	4b81      	ldr	r3, [pc, #516]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a80      	ldr	r2, [pc, #512]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005540:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005544:	6013      	str	r3, [r2, #0]
 8005546:	4b7e      	ldr	r3, [pc, #504]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a7d      	ldr	r2, [pc, #500]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 800554c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005550:	6013      	str	r3, [r2, #0]
 8005552:	e01d      	b.n	8005590 <HAL_RCC_OscConfig+0xd8>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800555c:	d10c      	bne.n	8005578 <HAL_RCC_OscConfig+0xc0>
 800555e:	4b78      	ldr	r3, [pc, #480]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a77      	ldr	r2, [pc, #476]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005564:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005568:	6013      	str	r3, [r2, #0]
 800556a:	4b75      	ldr	r3, [pc, #468]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a74      	ldr	r2, [pc, #464]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	e00b      	b.n	8005590 <HAL_RCC_OscConfig+0xd8>
 8005578:	4b71      	ldr	r3, [pc, #452]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a70      	ldr	r2, [pc, #448]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 800557e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005582:	6013      	str	r3, [r2, #0]
 8005584:	4b6e      	ldr	r3, [pc, #440]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a6d      	ldr	r2, [pc, #436]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 800558a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800558e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d013      	beq.n	80055c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005598:	f7fc fe26 	bl	80021e8 <HAL_GetTick>
 800559c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800559e:	e008      	b.n	80055b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055a0:	f7fc fe22 	bl	80021e8 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b64      	cmp	r3, #100	@ 0x64
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e3d4      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055b2:	4b63      	ldr	r3, [pc, #396]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0f0      	beq.n	80055a0 <HAL_RCC_OscConfig+0xe8>
 80055be:	e014      	b.n	80055ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c0:	f7fc fe12 	bl	80021e8 <HAL_GetTick>
 80055c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80055c6:	e008      	b.n	80055da <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055c8:	f7fc fe0e 	bl	80021e8 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b64      	cmp	r3, #100	@ 0x64
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e3c0      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80055da:	4b59      	ldr	r3, [pc, #356]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1f0      	bne.n	80055c8 <HAL_RCC_OscConfig+0x110>
 80055e6:	e000      	b.n	80055ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 80ca 	beq.w	800578c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055f8:	4b51      	ldr	r3, [pc, #324]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005600:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005602:	4b4f      	ldr	r3, [pc, #316]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005606:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d007      	beq.n	800561e <HAL_RCC_OscConfig+0x166>
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	2b18      	cmp	r3, #24
 8005612:	d156      	bne.n	80056c2 <HAL_RCC_OscConfig+0x20a>
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	f003 0303 	and.w	r3, r3, #3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d151      	bne.n	80056c2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800561e:	4b48      	ldr	r3, [pc, #288]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0304 	and.w	r3, r3, #4
 8005626:	2b00      	cmp	r3, #0
 8005628:	d005      	beq.n	8005636 <HAL_RCC_OscConfig+0x17e>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e392      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005636:	4b42      	ldr	r3, [pc, #264]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f023 0219 	bic.w	r2, r3, #25
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	493f      	ldr	r1, [pc, #252]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005644:	4313      	orrs	r3, r2
 8005646:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005648:	f7fc fdce 	bl	80021e8 <HAL_GetTick>
 800564c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800564e:	e008      	b.n	8005662 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005650:	f7fc fdca 	bl	80021e8 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e37c      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005662:	4b37      	ldr	r3, [pc, #220]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0304 	and.w	r3, r3, #4
 800566a:	2b00      	cmp	r3, #0
 800566c:	d0f0      	beq.n	8005650 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800566e:	f7fc fdc7 	bl	8002200 <HAL_GetREVID>
 8005672:	4603      	mov	r3, r0
 8005674:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005678:	4293      	cmp	r3, r2
 800567a:	d817      	bhi.n	80056ac <HAL_RCC_OscConfig+0x1f4>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	2b40      	cmp	r3, #64	@ 0x40
 8005682:	d108      	bne.n	8005696 <HAL_RCC_OscConfig+0x1de>
 8005684:	4b2e      	ldr	r3, [pc, #184]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800568c:	4a2c      	ldr	r2, [pc, #176]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 800568e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005692:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005694:	e07a      	b.n	800578c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005696:	4b2a      	ldr	r3, [pc, #168]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	031b      	lsls	r3, r3, #12
 80056a4:	4926      	ldr	r1, [pc, #152]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056aa:	e06f      	b.n	800578c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ac:	4b24      	ldr	r3, [pc, #144]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	061b      	lsls	r3, r3, #24
 80056ba:	4921      	ldr	r1, [pc, #132]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056c0:	e064      	b.n	800578c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d047      	beq.n	800575a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80056ca:	4b1d      	ldr	r3, [pc, #116]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f023 0219 	bic.w	r2, r3, #25
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	491a      	ldr	r1, [pc, #104]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056dc:	f7fc fd84 	bl	80021e8 <HAL_GetTick>
 80056e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056e2:	e008      	b.n	80056f6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056e4:	f7fc fd80 	bl	80021e8 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e332      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056f6:	4b12      	ldr	r3, [pc, #72]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0304 	and.w	r3, r3, #4
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0f0      	beq.n	80056e4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005702:	f7fc fd7d 	bl	8002200 <HAL_GetREVID>
 8005706:	4603      	mov	r3, r0
 8005708:	f241 0203 	movw	r2, #4099	@ 0x1003
 800570c:	4293      	cmp	r3, r2
 800570e:	d819      	bhi.n	8005744 <HAL_RCC_OscConfig+0x28c>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	2b40      	cmp	r3, #64	@ 0x40
 8005716:	d108      	bne.n	800572a <HAL_RCC_OscConfig+0x272>
 8005718:	4b09      	ldr	r3, [pc, #36]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005720:	4a07      	ldr	r2, [pc, #28]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005722:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005726:	6053      	str	r3, [r2, #4]
 8005728:	e030      	b.n	800578c <HAL_RCC_OscConfig+0x2d4>
 800572a:	4b05      	ldr	r3, [pc, #20]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	031b      	lsls	r3, r3, #12
 8005738:	4901      	ldr	r1, [pc, #4]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 800573a:	4313      	orrs	r3, r2
 800573c:	604b      	str	r3, [r1, #4]
 800573e:	e025      	b.n	800578c <HAL_RCC_OscConfig+0x2d4>
 8005740:	58024400 	.word	0x58024400
 8005744:	4b9a      	ldr	r3, [pc, #616]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	061b      	lsls	r3, r3, #24
 8005752:	4997      	ldr	r1, [pc, #604]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005754:	4313      	orrs	r3, r2
 8005756:	604b      	str	r3, [r1, #4]
 8005758:	e018      	b.n	800578c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800575a:	4b95      	ldr	r3, [pc, #596]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a94      	ldr	r2, [pc, #592]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005760:	f023 0301 	bic.w	r3, r3, #1
 8005764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005766:	f7fc fd3f 	bl	80021e8 <HAL_GetTick>
 800576a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800576c:	e008      	b.n	8005780 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800576e:	f7fc fd3b 	bl	80021e8 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e2ed      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005780:	4b8b      	ldr	r3, [pc, #556]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1f0      	bne.n	800576e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0310 	and.w	r3, r3, #16
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 80a9 	beq.w	80058ec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800579a:	4b85      	ldr	r3, [pc, #532]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80057a4:	4b82      	ldr	r3, [pc, #520]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 80057a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	d007      	beq.n	80057c0 <HAL_RCC_OscConfig+0x308>
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	2b18      	cmp	r3, #24
 80057b4:	d13a      	bne.n	800582c <HAL_RCC_OscConfig+0x374>
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f003 0303 	and.w	r3, r3, #3
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d135      	bne.n	800582c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80057c0:	4b7b      	ldr	r3, [pc, #492]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <HAL_RCC_OscConfig+0x320>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	2b80      	cmp	r3, #128	@ 0x80
 80057d2:	d001      	beq.n	80057d8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e2c1      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80057d8:	f7fc fd12 	bl	8002200 <HAL_GetREVID>
 80057dc:	4603      	mov	r3, r0
 80057de:	f241 0203 	movw	r2, #4099	@ 0x1003
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d817      	bhi.n	8005816 <HAL_RCC_OscConfig+0x35e>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	2b20      	cmp	r3, #32
 80057ec:	d108      	bne.n	8005800 <HAL_RCC_OscConfig+0x348>
 80057ee:	4b70      	ldr	r3, [pc, #448]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80057f6:	4a6e      	ldr	r2, [pc, #440]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 80057f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80057fc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80057fe:	e075      	b.n	80058ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005800:	4b6b      	ldr	r3, [pc, #428]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	069b      	lsls	r3, r3, #26
 800580e:	4968      	ldr	r1, [pc, #416]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005810:	4313      	orrs	r3, r2
 8005812:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005814:	e06a      	b.n	80058ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005816:	4b66      	ldr	r3, [pc, #408]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	061b      	lsls	r3, r3, #24
 8005824:	4962      	ldr	r1, [pc, #392]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005826:	4313      	orrs	r3, r2
 8005828:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800582a:	e05f      	b.n	80058ec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d042      	beq.n	80058ba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005834:	4b5e      	ldr	r3, [pc, #376]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a5d      	ldr	r2, [pc, #372]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 800583a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800583e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005840:	f7fc fcd2 	bl	80021e8 <HAL_GetTick>
 8005844:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005846:	e008      	b.n	800585a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005848:	f7fc fcce 	bl	80021e8 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b02      	cmp	r3, #2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e280      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800585a:	4b55      	ldr	r3, [pc, #340]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0f0      	beq.n	8005848 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005866:	f7fc fccb 	bl	8002200 <HAL_GetREVID>
 800586a:	4603      	mov	r3, r0
 800586c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005870:	4293      	cmp	r3, r2
 8005872:	d817      	bhi.n	80058a4 <HAL_RCC_OscConfig+0x3ec>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	2b20      	cmp	r3, #32
 800587a:	d108      	bne.n	800588e <HAL_RCC_OscConfig+0x3d6>
 800587c:	4b4c      	ldr	r3, [pc, #304]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005884:	4a4a      	ldr	r2, [pc, #296]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005886:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800588a:	6053      	str	r3, [r2, #4]
 800588c:	e02e      	b.n	80058ec <HAL_RCC_OscConfig+0x434>
 800588e:	4b48      	ldr	r3, [pc, #288]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	069b      	lsls	r3, r3, #26
 800589c:	4944      	ldr	r1, [pc, #272]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	604b      	str	r3, [r1, #4]
 80058a2:	e023      	b.n	80058ec <HAL_RCC_OscConfig+0x434>
 80058a4:	4b42      	ldr	r3, [pc, #264]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	061b      	lsls	r3, r3, #24
 80058b2:	493f      	ldr	r1, [pc, #252]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60cb      	str	r3, [r1, #12]
 80058b8:	e018      	b.n	80058ec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80058ba:	4b3d      	ldr	r3, [pc, #244]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a3c      	ldr	r2, [pc, #240]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 80058c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c6:	f7fc fc8f 	bl	80021e8 <HAL_GetTick>
 80058ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80058cc:	e008      	b.n	80058e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80058ce:	f7fc fc8b 	bl	80021e8 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d901      	bls.n	80058e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e23d      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80058e0:	4b33      	ldr	r3, [pc, #204]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1f0      	bne.n	80058ce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0308 	and.w	r3, r3, #8
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d036      	beq.n	8005966 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d019      	beq.n	8005934 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005900:	4b2b      	ldr	r3, [pc, #172]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005902:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005904:	4a2a      	ldr	r2, [pc, #168]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005906:	f043 0301 	orr.w	r3, r3, #1
 800590a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800590c:	f7fc fc6c 	bl	80021e8 <HAL_GetTick>
 8005910:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005912:	e008      	b.n	8005926 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005914:	f7fc fc68 	bl	80021e8 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	2b02      	cmp	r3, #2
 8005920:	d901      	bls.n	8005926 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e21a      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005926:	4b22      	ldr	r3, [pc, #136]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d0f0      	beq.n	8005914 <HAL_RCC_OscConfig+0x45c>
 8005932:	e018      	b.n	8005966 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005934:	4b1e      	ldr	r3, [pc, #120]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005938:	4a1d      	ldr	r2, [pc, #116]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 800593a:	f023 0301 	bic.w	r3, r3, #1
 800593e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005940:	f7fc fc52 	bl	80021e8 <HAL_GetTick>
 8005944:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005948:	f7fc fc4e 	bl	80021e8 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e200      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800595a:	4b15      	ldr	r3, [pc, #84]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 800595c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1f0      	bne.n	8005948 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0320 	and.w	r3, r3, #32
 800596e:	2b00      	cmp	r3, #0
 8005970:	d039      	beq.n	80059e6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d01c      	beq.n	80059b4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800597a:	4b0d      	ldr	r3, [pc, #52]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a0c      	ldr	r2, [pc, #48]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005980:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005984:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005986:	f7fc fc2f 	bl	80021e8 <HAL_GetTick>
 800598a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800598c:	e008      	b.n	80059a0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800598e:	f7fc fc2b 	bl	80021e8 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d901      	bls.n	80059a0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e1dd      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80059a0:	4b03      	ldr	r3, [pc, #12]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0f0      	beq.n	800598e <HAL_RCC_OscConfig+0x4d6>
 80059ac:	e01b      	b.n	80059e6 <HAL_RCC_OscConfig+0x52e>
 80059ae:	bf00      	nop
 80059b0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059b4:	4b9b      	ldr	r3, [pc, #620]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a9a      	ldr	r2, [pc, #616]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 80059ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80059c0:	f7fc fc12 	bl	80021e8 <HAL_GetTick>
 80059c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059c8:	f7fc fc0e 	bl	80021e8 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e1c0      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80059da:	4b92      	ldr	r3, [pc, #584]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1f0      	bne.n	80059c8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0304 	and.w	r3, r3, #4
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f000 8081 	beq.w	8005af6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80059f4:	4b8c      	ldr	r3, [pc, #560]	@ (8005c28 <HAL_RCC_OscConfig+0x770>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a8b      	ldr	r2, [pc, #556]	@ (8005c28 <HAL_RCC_OscConfig+0x770>)
 80059fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a00:	f7fc fbf2 	bl	80021e8 <HAL_GetTick>
 8005a04:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a06:	e008      	b.n	8005a1a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a08:	f7fc fbee 	bl	80021e8 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b64      	cmp	r3, #100	@ 0x64
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e1a0      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a1a:	4b83      	ldr	r3, [pc, #524]	@ (8005c28 <HAL_RCC_OscConfig+0x770>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d0f0      	beq.n	8005a08 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d106      	bne.n	8005a3c <HAL_RCC_OscConfig+0x584>
 8005a2e:	4b7d      	ldr	r3, [pc, #500]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a32:	4a7c      	ldr	r2, [pc, #496]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005a34:	f043 0301 	orr.w	r3, r3, #1
 8005a38:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a3a:	e02d      	b.n	8005a98 <HAL_RCC_OscConfig+0x5e0>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10c      	bne.n	8005a5e <HAL_RCC_OscConfig+0x5a6>
 8005a44:	4b77      	ldr	r3, [pc, #476]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a48:	4a76      	ldr	r2, [pc, #472]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005a4a:	f023 0301 	bic.w	r3, r3, #1
 8005a4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a50:	4b74      	ldr	r3, [pc, #464]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a54:	4a73      	ldr	r2, [pc, #460]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005a56:	f023 0304 	bic.w	r3, r3, #4
 8005a5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a5c:	e01c      	b.n	8005a98 <HAL_RCC_OscConfig+0x5e0>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	2b05      	cmp	r3, #5
 8005a64:	d10c      	bne.n	8005a80 <HAL_RCC_OscConfig+0x5c8>
 8005a66:	4b6f      	ldr	r3, [pc, #444]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a6a:	4a6e      	ldr	r2, [pc, #440]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005a6c:	f043 0304 	orr.w	r3, r3, #4
 8005a70:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a72:	4b6c      	ldr	r3, [pc, #432]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a76:	4a6b      	ldr	r2, [pc, #428]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005a78:	f043 0301 	orr.w	r3, r3, #1
 8005a7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a7e:	e00b      	b.n	8005a98 <HAL_RCC_OscConfig+0x5e0>
 8005a80:	4b68      	ldr	r3, [pc, #416]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a84:	4a67      	ldr	r2, [pc, #412]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005a86:	f023 0301 	bic.w	r3, r3, #1
 8005a8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a8c:	4b65      	ldr	r3, [pc, #404]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a90:	4a64      	ldr	r2, [pc, #400]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005a92:	f023 0304 	bic.w	r3, r3, #4
 8005a96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d015      	beq.n	8005acc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa0:	f7fc fba2 	bl	80021e8 <HAL_GetTick>
 8005aa4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005aa6:	e00a      	b.n	8005abe <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aa8:	f7fc fb9e 	bl	80021e8 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e14e      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005abe:	4b59      	ldr	r3, [pc, #356]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d0ee      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x5f0>
 8005aca:	e014      	b.n	8005af6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005acc:	f7fc fb8c 	bl	80021e8 <HAL_GetTick>
 8005ad0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ad2:	e00a      	b.n	8005aea <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ad4:	f7fc fb88 	bl	80021e8 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e138      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005aea:	4b4e      	ldr	r3, [pc, #312]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1ee      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 812d 	beq.w	8005d5a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005b00:	4b48      	ldr	r3, [pc, #288]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b08:	2b18      	cmp	r3, #24
 8005b0a:	f000 80bd 	beq.w	8005c88 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	f040 809e 	bne.w	8005c54 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b18:	4b42      	ldr	r3, [pc, #264]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a41      	ldr	r2, [pc, #260]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005b1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b24:	f7fc fb60 	bl	80021e8 <HAL_GetTick>
 8005b28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b2a:	e008      	b.n	8005b3e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b2c:	f7fc fb5c 	bl	80021e8 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d901      	bls.n	8005b3e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e10e      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b3e:	4b39      	ldr	r3, [pc, #228]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1f0      	bne.n	8005b2c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b4a:	4b36      	ldr	r3, [pc, #216]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005b4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b4e:	4b37      	ldr	r3, [pc, #220]	@ (8005c2c <HAL_RCC_OscConfig+0x774>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005b5a:	0112      	lsls	r2, r2, #4
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	4931      	ldr	r1, [pc, #196]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	628b      	str	r3, [r1, #40]	@ 0x28
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b72:	3b01      	subs	r3, #1
 8005b74:	025b      	lsls	r3, r3, #9
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	041b      	lsls	r3, r3, #16
 8005b82:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	061b      	lsls	r3, r3, #24
 8005b90:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005b94:	4923      	ldr	r1, [pc, #140]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005b9a:	4b22      	ldr	r3, [pc, #136]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b9e:	4a21      	ldr	r2, [pc, #132]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005ba0:	f023 0301 	bic.w	r3, r3, #1
 8005ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005ba8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005baa:	4b21      	ldr	r3, [pc, #132]	@ (8005c30 <HAL_RCC_OscConfig+0x778>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005bb2:	00d2      	lsls	r2, r2, #3
 8005bb4:	491b      	ldr	r1, [pc, #108]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005bba:	4b1a      	ldr	r3, [pc, #104]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bbe:	f023 020c 	bic.w	r2, r3, #12
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc6:	4917      	ldr	r1, [pc, #92]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005bcc:	4b15      	ldr	r3, [pc, #84]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd0:	f023 0202 	bic.w	r2, r3, #2
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bd8:	4912      	ldr	r1, [pc, #72]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005bde:	4b11      	ldr	r3, [pc, #68]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be2:	4a10      	ldr	r2, [pc, #64]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005be8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bea:	4b0e      	ldr	r3, [pc, #56]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bee:	4a0d      	ldr	r2, [pc, #52]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005bfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005c02:	4b08      	ldr	r3, [pc, #32]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c06:	4a07      	ldr	r2, [pc, #28]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005c08:	f043 0301 	orr.w	r3, r3, #1
 8005c0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c0e:	4b05      	ldr	r3, [pc, #20]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a04      	ldr	r2, [pc, #16]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005c14:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1a:	f7fc fae5 	bl	80021e8 <HAL_GetTick>
 8005c1e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c20:	e011      	b.n	8005c46 <HAL_RCC_OscConfig+0x78e>
 8005c22:	bf00      	nop
 8005c24:	58024400 	.word	0x58024400
 8005c28:	58024800 	.word	0x58024800
 8005c2c:	fffffc0c 	.word	0xfffffc0c
 8005c30:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c34:	f7fc fad8 	bl	80021e8 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e08a      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c46:	4b47      	ldr	r3, [pc, #284]	@ (8005d64 <HAL_RCC_OscConfig+0x8ac>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0f0      	beq.n	8005c34 <HAL_RCC_OscConfig+0x77c>
 8005c52:	e082      	b.n	8005d5a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c54:	4b43      	ldr	r3, [pc, #268]	@ (8005d64 <HAL_RCC_OscConfig+0x8ac>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a42      	ldr	r2, [pc, #264]	@ (8005d64 <HAL_RCC_OscConfig+0x8ac>)
 8005c5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c60:	f7fc fac2 	bl	80021e8 <HAL_GetTick>
 8005c64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c66:	e008      	b.n	8005c7a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c68:	f7fc fabe 	bl	80021e8 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d901      	bls.n	8005c7a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e070      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c7a:	4b3a      	ldr	r3, [pc, #232]	@ (8005d64 <HAL_RCC_OscConfig+0x8ac>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1f0      	bne.n	8005c68 <HAL_RCC_OscConfig+0x7b0>
 8005c86:	e068      	b.n	8005d5a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005c88:	4b36      	ldr	r3, [pc, #216]	@ (8005d64 <HAL_RCC_OscConfig+0x8ac>)
 8005c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c8c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005c8e:	4b35      	ldr	r3, [pc, #212]	@ (8005d64 <HAL_RCC_OscConfig+0x8ac>)
 8005c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c92:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d031      	beq.n	8005d00 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	f003 0203 	and.w	r2, r3, #3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d12a      	bne.n	8005d00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	091b      	lsrs	r3, r3, #4
 8005cae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d122      	bne.n	8005d00 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d11a      	bne.n	8005d00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	0a5b      	lsrs	r3, r3, #9
 8005cce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cd6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d111      	bne.n	8005d00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	0c1b      	lsrs	r3, r3, #16
 8005ce0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d108      	bne.n	8005d00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	0e1b      	lsrs	r3, r3, #24
 8005cf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cfa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d001      	beq.n	8005d04 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e02b      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005d04:	4b17      	ldr	r3, [pc, #92]	@ (8005d64 <HAL_RCC_OscConfig+0x8ac>)
 8005d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d08:	08db      	lsrs	r3, r3, #3
 8005d0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d0e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d01f      	beq.n	8005d5a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005d1a:	4b12      	ldr	r3, [pc, #72]	@ (8005d64 <HAL_RCC_OscConfig+0x8ac>)
 8005d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1e:	4a11      	ldr	r2, [pc, #68]	@ (8005d64 <HAL_RCC_OscConfig+0x8ac>)
 8005d20:	f023 0301 	bic.w	r3, r3, #1
 8005d24:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d26:	f7fc fa5f 	bl	80021e8 <HAL_GetTick>
 8005d2a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005d2c:	bf00      	nop
 8005d2e:	f7fc fa5b 	bl	80021e8 <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d0f9      	beq.n	8005d2e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8005d64 <HAL_RCC_OscConfig+0x8ac>)
 8005d3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d68 <HAL_RCC_OscConfig+0x8b0>)
 8005d40:	4013      	ands	r3, r2
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005d46:	00d2      	lsls	r2, r2, #3
 8005d48:	4906      	ldr	r1, [pc, #24]	@ (8005d64 <HAL_RCC_OscConfig+0x8ac>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005d4e:	4b05      	ldr	r3, [pc, #20]	@ (8005d64 <HAL_RCC_OscConfig+0x8ac>)
 8005d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d52:	4a04      	ldr	r2, [pc, #16]	@ (8005d64 <HAL_RCC_OscConfig+0x8ac>)
 8005d54:	f043 0301 	orr.w	r3, r3, #1
 8005d58:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3730      	adds	r7, #48	@ 0x30
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	58024400 	.word	0x58024400
 8005d68:	ffff0007 	.word	0xffff0007

08005d6c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d101      	bne.n	8005d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e19c      	b.n	80060ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d80:	4b8a      	ldr	r3, [pc, #552]	@ (8005fac <HAL_RCC_ClockConfig+0x240>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 030f 	and.w	r3, r3, #15
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d910      	bls.n	8005db0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d8e:	4b87      	ldr	r3, [pc, #540]	@ (8005fac <HAL_RCC_ClockConfig+0x240>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f023 020f 	bic.w	r2, r3, #15
 8005d96:	4985      	ldr	r1, [pc, #532]	@ (8005fac <HAL_RCC_ClockConfig+0x240>)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d9e:	4b83      	ldr	r3, [pc, #524]	@ (8005fac <HAL_RCC_ClockConfig+0x240>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 030f 	and.w	r3, r3, #15
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d001      	beq.n	8005db0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e184      	b.n	80060ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d010      	beq.n	8005dde <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	691a      	ldr	r2, [r3, #16]
 8005dc0:	4b7b      	ldr	r3, [pc, #492]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d908      	bls.n	8005dde <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005dcc:	4b78      	ldr	r3, [pc, #480]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	4975      	ldr	r1, [pc, #468]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0308 	and.w	r3, r3, #8
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d010      	beq.n	8005e0c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	695a      	ldr	r2, [r3, #20]
 8005dee:	4b70      	ldr	r3, [pc, #448]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d908      	bls.n	8005e0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005dfa:	4b6d      	ldr	r3, [pc, #436]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	496a      	ldr	r1, [pc, #424]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0310 	and.w	r3, r3, #16
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d010      	beq.n	8005e3a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	699a      	ldr	r2, [r3, #24]
 8005e1c:	4b64      	ldr	r3, [pc, #400]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d908      	bls.n	8005e3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e28:	4b61      	ldr	r3, [pc, #388]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	495e      	ldr	r1, [pc, #376]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0320 	and.w	r3, r3, #32
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d010      	beq.n	8005e68 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69da      	ldr	r2, [r3, #28]
 8005e4a:	4b59      	ldr	r3, [pc, #356]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d908      	bls.n	8005e68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005e56:	4b56      	ldr	r3, [pc, #344]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	4953      	ldr	r1, [pc, #332]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0302 	and.w	r3, r3, #2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d010      	beq.n	8005e96 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	68da      	ldr	r2, [r3, #12]
 8005e78:	4b4d      	ldr	r3, [pc, #308]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	f003 030f 	and.w	r3, r3, #15
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d908      	bls.n	8005e96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e84:	4b4a      	ldr	r3, [pc, #296]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	f023 020f 	bic.w	r2, r3, #15
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	4947      	ldr	r1, [pc, #284]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d055      	beq.n	8005f4e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005ea2:	4b43      	ldr	r3, [pc, #268]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	4940      	ldr	r1, [pc, #256]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d107      	bne.n	8005ecc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ebc:	4b3c      	ldr	r3, [pc, #240]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d121      	bne.n	8005f0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e0f6      	b.n	80060ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d107      	bne.n	8005ee4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ed4:	4b36      	ldr	r3, [pc, #216]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d115      	bne.n	8005f0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e0ea      	b.n	80060ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d107      	bne.n	8005efc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005eec:	4b30      	ldr	r3, [pc, #192]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d109      	bne.n	8005f0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e0de      	b.n	80060ba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005efc:	4b2c      	ldr	r3, [pc, #176]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0304 	and.w	r3, r3, #4
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e0d6      	b.n	80060ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f0c:	4b28      	ldr	r3, [pc, #160]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	f023 0207 	bic.w	r2, r3, #7
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	4925      	ldr	r1, [pc, #148]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f1e:	f7fc f963 	bl	80021e8 <HAL_GetTick>
 8005f22:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f24:	e00a      	b.n	8005f3c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f26:	f7fc f95f 	bl	80021e8 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d901      	bls.n	8005f3c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e0be      	b.n	80060ba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	00db      	lsls	r3, r3, #3
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d1eb      	bne.n	8005f26 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d010      	beq.n	8005f7c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68da      	ldr	r2, [r3, #12]
 8005f5e:	4b14      	ldr	r3, [pc, #80]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	f003 030f 	and.w	r3, r3, #15
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d208      	bcs.n	8005f7c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f6a:	4b11      	ldr	r3, [pc, #68]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	f023 020f 	bic.w	r2, r3, #15
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	490e      	ldr	r1, [pc, #56]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005fac <HAL_RCC_ClockConfig+0x240>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 030f 	and.w	r3, r3, #15
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d214      	bcs.n	8005fb4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f8a:	4b08      	ldr	r3, [pc, #32]	@ (8005fac <HAL_RCC_ClockConfig+0x240>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f023 020f 	bic.w	r2, r3, #15
 8005f92:	4906      	ldr	r1, [pc, #24]	@ (8005fac <HAL_RCC_ClockConfig+0x240>)
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f9a:	4b04      	ldr	r3, [pc, #16]	@ (8005fac <HAL_RCC_ClockConfig+0x240>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 030f 	and.w	r3, r3, #15
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d005      	beq.n	8005fb4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e086      	b.n	80060ba <HAL_RCC_ClockConfig+0x34e>
 8005fac:	52002000 	.word	0x52002000
 8005fb0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0304 	and.w	r3, r3, #4
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d010      	beq.n	8005fe2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	4b3f      	ldr	r3, [pc, #252]	@ (80060c4 <HAL_RCC_ClockConfig+0x358>)
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d208      	bcs.n	8005fe2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005fd0:	4b3c      	ldr	r3, [pc, #240]	@ (80060c4 <HAL_RCC_ClockConfig+0x358>)
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	4939      	ldr	r1, [pc, #228]	@ (80060c4 <HAL_RCC_ClockConfig+0x358>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0308 	and.w	r3, r3, #8
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d010      	beq.n	8006010 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	695a      	ldr	r2, [r3, #20]
 8005ff2:	4b34      	ldr	r3, [pc, #208]	@ (80060c4 <HAL_RCC_ClockConfig+0x358>)
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d208      	bcs.n	8006010 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ffe:	4b31      	ldr	r3, [pc, #196]	@ (80060c4 <HAL_RCC_ClockConfig+0x358>)
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	492e      	ldr	r1, [pc, #184]	@ (80060c4 <HAL_RCC_ClockConfig+0x358>)
 800600c:	4313      	orrs	r3, r2
 800600e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0310 	and.w	r3, r3, #16
 8006018:	2b00      	cmp	r3, #0
 800601a:	d010      	beq.n	800603e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	699a      	ldr	r2, [r3, #24]
 8006020:	4b28      	ldr	r3, [pc, #160]	@ (80060c4 <HAL_RCC_ClockConfig+0x358>)
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006028:	429a      	cmp	r2, r3
 800602a:	d208      	bcs.n	800603e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800602c:	4b25      	ldr	r3, [pc, #148]	@ (80060c4 <HAL_RCC_ClockConfig+0x358>)
 800602e:	69db      	ldr	r3, [r3, #28]
 8006030:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	4922      	ldr	r1, [pc, #136]	@ (80060c4 <HAL_RCC_ClockConfig+0x358>)
 800603a:	4313      	orrs	r3, r2
 800603c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0320 	and.w	r3, r3, #32
 8006046:	2b00      	cmp	r3, #0
 8006048:	d010      	beq.n	800606c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	69da      	ldr	r2, [r3, #28]
 800604e:	4b1d      	ldr	r3, [pc, #116]	@ (80060c4 <HAL_RCC_ClockConfig+0x358>)
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006056:	429a      	cmp	r2, r3
 8006058:	d208      	bcs.n	800606c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800605a:	4b1a      	ldr	r3, [pc, #104]	@ (80060c4 <HAL_RCC_ClockConfig+0x358>)
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	4917      	ldr	r1, [pc, #92]	@ (80060c4 <HAL_RCC_ClockConfig+0x358>)
 8006068:	4313      	orrs	r3, r2
 800606a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800606c:	f000 f834 	bl	80060d8 <HAL_RCC_GetSysClockFreq>
 8006070:	4602      	mov	r2, r0
 8006072:	4b14      	ldr	r3, [pc, #80]	@ (80060c4 <HAL_RCC_ClockConfig+0x358>)
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	0a1b      	lsrs	r3, r3, #8
 8006078:	f003 030f 	and.w	r3, r3, #15
 800607c:	4912      	ldr	r1, [pc, #72]	@ (80060c8 <HAL_RCC_ClockConfig+0x35c>)
 800607e:	5ccb      	ldrb	r3, [r1, r3]
 8006080:	f003 031f 	and.w	r3, r3, #31
 8006084:	fa22 f303 	lsr.w	r3, r2, r3
 8006088:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800608a:	4b0e      	ldr	r3, [pc, #56]	@ (80060c4 <HAL_RCC_ClockConfig+0x358>)
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	f003 030f 	and.w	r3, r3, #15
 8006092:	4a0d      	ldr	r2, [pc, #52]	@ (80060c8 <HAL_RCC_ClockConfig+0x35c>)
 8006094:	5cd3      	ldrb	r3, [r2, r3]
 8006096:	f003 031f 	and.w	r3, r3, #31
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	fa22 f303 	lsr.w	r3, r2, r3
 80060a0:	4a0a      	ldr	r2, [pc, #40]	@ (80060cc <HAL_RCC_ClockConfig+0x360>)
 80060a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80060a4:	4a0a      	ldr	r2, [pc, #40]	@ (80060d0 <HAL_RCC_ClockConfig+0x364>)
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80060aa:	4b0a      	ldr	r3, [pc, #40]	@ (80060d4 <HAL_RCC_ClockConfig+0x368>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fb fcec 	bl	8001a8c <HAL_InitTick>
 80060b4:	4603      	mov	r3, r0
 80060b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3718      	adds	r7, #24
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	58024400 	.word	0x58024400
 80060c8:	0801e23c 	.word	0x0801e23c
 80060cc:	24000008 	.word	0x24000008
 80060d0:	24000004 	.word	0x24000004
 80060d4:	2400000c 	.word	0x2400000c

080060d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060d8:	b480      	push	{r7}
 80060da:	b089      	sub	sp, #36	@ 0x24
 80060dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060de:	4bb3      	ldr	r3, [pc, #716]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060e6:	2b18      	cmp	r3, #24
 80060e8:	f200 8155 	bhi.w	8006396 <HAL_RCC_GetSysClockFreq+0x2be>
 80060ec:	a201      	add	r2, pc, #4	@ (adr r2, 80060f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80060ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f2:	bf00      	nop
 80060f4:	08006159 	.word	0x08006159
 80060f8:	08006397 	.word	0x08006397
 80060fc:	08006397 	.word	0x08006397
 8006100:	08006397 	.word	0x08006397
 8006104:	08006397 	.word	0x08006397
 8006108:	08006397 	.word	0x08006397
 800610c:	08006397 	.word	0x08006397
 8006110:	08006397 	.word	0x08006397
 8006114:	0800617f 	.word	0x0800617f
 8006118:	08006397 	.word	0x08006397
 800611c:	08006397 	.word	0x08006397
 8006120:	08006397 	.word	0x08006397
 8006124:	08006397 	.word	0x08006397
 8006128:	08006397 	.word	0x08006397
 800612c:	08006397 	.word	0x08006397
 8006130:	08006397 	.word	0x08006397
 8006134:	08006185 	.word	0x08006185
 8006138:	08006397 	.word	0x08006397
 800613c:	08006397 	.word	0x08006397
 8006140:	08006397 	.word	0x08006397
 8006144:	08006397 	.word	0x08006397
 8006148:	08006397 	.word	0x08006397
 800614c:	08006397 	.word	0x08006397
 8006150:	08006397 	.word	0x08006397
 8006154:	0800618b 	.word	0x0800618b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006158:	4b94      	ldr	r3, [pc, #592]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0320 	and.w	r3, r3, #32
 8006160:	2b00      	cmp	r3, #0
 8006162:	d009      	beq.n	8006178 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006164:	4b91      	ldr	r3, [pc, #580]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	08db      	lsrs	r3, r3, #3
 800616a:	f003 0303 	and.w	r3, r3, #3
 800616e:	4a90      	ldr	r2, [pc, #576]	@ (80063b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006170:	fa22 f303 	lsr.w	r3, r2, r3
 8006174:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006176:	e111      	b.n	800639c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006178:	4b8d      	ldr	r3, [pc, #564]	@ (80063b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800617a:	61bb      	str	r3, [r7, #24]
      break;
 800617c:	e10e      	b.n	800639c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800617e:	4b8d      	ldr	r3, [pc, #564]	@ (80063b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006180:	61bb      	str	r3, [r7, #24]
      break;
 8006182:	e10b      	b.n	800639c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006184:	4b8c      	ldr	r3, [pc, #560]	@ (80063b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006186:	61bb      	str	r3, [r7, #24]
      break;
 8006188:	e108      	b.n	800639c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800618a:	4b88      	ldr	r3, [pc, #544]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800618c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800618e:	f003 0303 	and.w	r3, r3, #3
 8006192:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006194:	4b85      	ldr	r3, [pc, #532]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006198:	091b      	lsrs	r3, r3, #4
 800619a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800619e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80061a0:	4b82      	ldr	r3, [pc, #520]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80061aa:	4b80      	ldr	r3, [pc, #512]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ae:	08db      	lsrs	r3, r3, #3
 80061b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	fb02 f303 	mul.w	r3, r2, r3
 80061ba:	ee07 3a90 	vmov	s15, r3
 80061be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 80e1 	beq.w	8006390 <HAL_RCC_GetSysClockFreq+0x2b8>
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	f000 8083 	beq.w	80062dc <HAL_RCC_GetSysClockFreq+0x204>
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2b02      	cmp	r3, #2
 80061da:	f200 80a1 	bhi.w	8006320 <HAL_RCC_GetSysClockFreq+0x248>
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d003      	beq.n	80061ec <HAL_RCC_GetSysClockFreq+0x114>
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d056      	beq.n	8006298 <HAL_RCC_GetSysClockFreq+0x1c0>
 80061ea:	e099      	b.n	8006320 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061ec:	4b6f      	ldr	r3, [pc, #444]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0320 	and.w	r3, r3, #32
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d02d      	beq.n	8006254 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061f8:	4b6c      	ldr	r3, [pc, #432]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	08db      	lsrs	r3, r3, #3
 80061fe:	f003 0303 	and.w	r3, r3, #3
 8006202:	4a6b      	ldr	r2, [pc, #428]	@ (80063b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006204:	fa22 f303 	lsr.w	r3, r2, r3
 8006208:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	ee07 3a90 	vmov	s15, r3
 8006210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	ee07 3a90 	vmov	s15, r3
 800621a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800621e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006222:	4b62      	ldr	r3, [pc, #392]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800622a:	ee07 3a90 	vmov	s15, r3
 800622e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006232:	ed97 6a02 	vldr	s12, [r7, #8]
 8006236:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80063bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800623a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800623e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800624a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800624e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006252:	e087      	b.n	8006364 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	ee07 3a90 	vmov	s15, r3
 800625a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800625e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80063c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006266:	4b51      	ldr	r3, [pc, #324]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800626a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800626e:	ee07 3a90 	vmov	s15, r3
 8006272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006276:	ed97 6a02 	vldr	s12, [r7, #8]
 800627a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80063bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800627e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800628a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800628e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006292:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006296:	e065      	b.n	8006364 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	ee07 3a90 	vmov	s15, r3
 800629e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80063c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80062a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062aa:	4b40      	ldr	r3, [pc, #256]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b2:	ee07 3a90 	vmov	s15, r3
 80062b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80062be:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80063bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80062c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80062da:	e043      	b.n	8006364 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	ee07 3a90 	vmov	s15, r3
 80062e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80063c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80062ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ee:	4b2f      	ldr	r3, [pc, #188]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062f6:	ee07 3a90 	vmov	s15, r3
 80062fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006302:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80063bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800630a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800630e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800631a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800631e:	e021      	b.n	8006364 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	ee07 3a90 	vmov	s15, r3
 8006326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800632a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80063c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800632e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006332:	4b1e      	ldr	r3, [pc, #120]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800633a:	ee07 3a90 	vmov	s15, r3
 800633e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006342:	ed97 6a02 	vldr	s12, [r7, #8]
 8006346:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80063bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800634a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800634e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006352:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800635a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800635e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006362:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006364:	4b11      	ldr	r3, [pc, #68]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006368:	0a5b      	lsrs	r3, r3, #9
 800636a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800636e:	3301      	adds	r3, #1
 8006370:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	ee07 3a90 	vmov	s15, r3
 8006378:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800637c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006388:	ee17 3a90 	vmov	r3, s15
 800638c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800638e:	e005      	b.n	800639c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006390:	2300      	movs	r3, #0
 8006392:	61bb      	str	r3, [r7, #24]
      break;
 8006394:	e002      	b.n	800639c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006396:	4b07      	ldr	r3, [pc, #28]	@ (80063b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006398:	61bb      	str	r3, [r7, #24]
      break;
 800639a:	bf00      	nop
  }

  return sysclockfreq;
 800639c:	69bb      	ldr	r3, [r7, #24]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3724      	adds	r7, #36	@ 0x24
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	58024400 	.word	0x58024400
 80063b0:	03d09000 	.word	0x03d09000
 80063b4:	003d0900 	.word	0x003d0900
 80063b8:	007a1200 	.word	0x007a1200
 80063bc:	46000000 	.word	0x46000000
 80063c0:	4c742400 	.word	0x4c742400
 80063c4:	4a742400 	.word	0x4a742400
 80063c8:	4af42400 	.word	0x4af42400

080063cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80063d2:	f7ff fe81 	bl	80060d8 <HAL_RCC_GetSysClockFreq>
 80063d6:	4602      	mov	r2, r0
 80063d8:	4b10      	ldr	r3, [pc, #64]	@ (800641c <HAL_RCC_GetHCLKFreq+0x50>)
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	0a1b      	lsrs	r3, r3, #8
 80063de:	f003 030f 	and.w	r3, r3, #15
 80063e2:	490f      	ldr	r1, [pc, #60]	@ (8006420 <HAL_RCC_GetHCLKFreq+0x54>)
 80063e4:	5ccb      	ldrb	r3, [r1, r3]
 80063e6:	f003 031f 	and.w	r3, r3, #31
 80063ea:	fa22 f303 	lsr.w	r3, r2, r3
 80063ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80063f0:	4b0a      	ldr	r3, [pc, #40]	@ (800641c <HAL_RCC_GetHCLKFreq+0x50>)
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	f003 030f 	and.w	r3, r3, #15
 80063f8:	4a09      	ldr	r2, [pc, #36]	@ (8006420 <HAL_RCC_GetHCLKFreq+0x54>)
 80063fa:	5cd3      	ldrb	r3, [r2, r3]
 80063fc:	f003 031f 	and.w	r3, r3, #31
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	fa22 f303 	lsr.w	r3, r2, r3
 8006406:	4a07      	ldr	r2, [pc, #28]	@ (8006424 <HAL_RCC_GetHCLKFreq+0x58>)
 8006408:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800640a:	4a07      	ldr	r2, [pc, #28]	@ (8006428 <HAL_RCC_GetHCLKFreq+0x5c>)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006410:	4b04      	ldr	r3, [pc, #16]	@ (8006424 <HAL_RCC_GetHCLKFreq+0x58>)
 8006412:	681b      	ldr	r3, [r3, #0]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	58024400 	.word	0x58024400
 8006420:	0801e23c 	.word	0x0801e23c
 8006424:	24000008 	.word	0x24000008
 8006428:	24000004 	.word	0x24000004

0800642c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006430:	f7ff ffcc 	bl	80063cc <HAL_RCC_GetHCLKFreq>
 8006434:	4602      	mov	r2, r0
 8006436:	4b06      	ldr	r3, [pc, #24]	@ (8006450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	091b      	lsrs	r3, r3, #4
 800643c:	f003 0307 	and.w	r3, r3, #7
 8006440:	4904      	ldr	r1, [pc, #16]	@ (8006454 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006442:	5ccb      	ldrb	r3, [r1, r3]
 8006444:	f003 031f 	and.w	r3, r3, #31
 8006448:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800644c:	4618      	mov	r0, r3
 800644e:	bd80      	pop	{r7, pc}
 8006450:	58024400 	.word	0x58024400
 8006454:	0801e23c 	.word	0x0801e23c

08006458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800645c:	f7ff ffb6 	bl	80063cc <HAL_RCC_GetHCLKFreq>
 8006460:	4602      	mov	r2, r0
 8006462:	4b06      	ldr	r3, [pc, #24]	@ (800647c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	0a1b      	lsrs	r3, r3, #8
 8006468:	f003 0307 	and.w	r3, r3, #7
 800646c:	4904      	ldr	r1, [pc, #16]	@ (8006480 <HAL_RCC_GetPCLK2Freq+0x28>)
 800646e:	5ccb      	ldrb	r3, [r1, r3]
 8006470:	f003 031f 	and.w	r3, r3, #31
 8006474:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006478:	4618      	mov	r0, r3
 800647a:	bd80      	pop	{r7, pc}
 800647c:	58024400 	.word	0x58024400
 8006480:	0801e23c 	.word	0x0801e23c

08006484 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	223f      	movs	r2, #63	@ 0x3f
 8006492:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006494:	4b1a      	ldr	r3, [pc, #104]	@ (8006500 <HAL_RCC_GetClockConfig+0x7c>)
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	f003 0207 	and.w	r2, r3, #7
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80064a0:	4b17      	ldr	r3, [pc, #92]	@ (8006500 <HAL_RCC_GetClockConfig+0x7c>)
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80064ac:	4b14      	ldr	r3, [pc, #80]	@ (8006500 <HAL_RCC_GetClockConfig+0x7c>)
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	f003 020f 	and.w	r2, r3, #15
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80064b8:	4b11      	ldr	r3, [pc, #68]	@ (8006500 <HAL_RCC_GetClockConfig+0x7c>)
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80064c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006500 <HAL_RCC_GetClockConfig+0x7c>)
 80064c6:	69db      	ldr	r3, [r3, #28]
 80064c8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80064d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006500 <HAL_RCC_GetClockConfig+0x7c>)
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80064dc:	4b08      	ldr	r3, [pc, #32]	@ (8006500 <HAL_RCC_GetClockConfig+0x7c>)
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80064e8:	4b06      	ldr	r3, [pc, #24]	@ (8006504 <HAL_RCC_GetClockConfig+0x80>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 020f 	and.w	r2, r3, #15
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	601a      	str	r2, [r3, #0]
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	58024400 	.word	0x58024400
 8006504:	52002000 	.word	0x52002000

08006508 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800650c:	b0ca      	sub	sp, #296	@ 0x128
 800650e:	af00      	add	r7, sp, #0
 8006510:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006514:	2300      	movs	r3, #0
 8006516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800651a:	2300      	movs	r3, #0
 800651c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006528:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800652c:	2500      	movs	r5, #0
 800652e:	ea54 0305 	orrs.w	r3, r4, r5
 8006532:	d049      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006538:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800653a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800653e:	d02f      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006540:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006544:	d828      	bhi.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006546:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800654a:	d01a      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800654c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006550:	d822      	bhi.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006556:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800655a:	d007      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800655c:	e01c      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800655e:	4bb8      	ldr	r3, [pc, #736]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006562:	4ab7      	ldr	r2, [pc, #732]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006564:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006568:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800656a:	e01a      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800656c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006570:	3308      	adds	r3, #8
 8006572:	2102      	movs	r1, #2
 8006574:	4618      	mov	r0, r3
 8006576:	f001 fc8f 	bl	8007e98 <RCCEx_PLL2_Config>
 800657a:	4603      	mov	r3, r0
 800657c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006580:	e00f      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006586:	3328      	adds	r3, #40	@ 0x28
 8006588:	2102      	movs	r1, #2
 800658a:	4618      	mov	r0, r3
 800658c:	f001 fd36 	bl	8007ffc <RCCEx_PLL3_Config>
 8006590:	4603      	mov	r3, r0
 8006592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006596:	e004      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800659e:	e000      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80065a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10a      	bne.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80065aa:	4ba5      	ldr	r3, [pc, #660]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80065b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065b8:	4aa1      	ldr	r2, [pc, #644]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065ba:	430b      	orrs	r3, r1
 80065bc:	6513      	str	r3, [r2, #80]	@ 0x50
 80065be:	e003      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80065c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80065d4:	f04f 0900 	mov.w	r9, #0
 80065d8:	ea58 0309 	orrs.w	r3, r8, r9
 80065dc:	d047      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80065de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065e4:	2b04      	cmp	r3, #4
 80065e6:	d82a      	bhi.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80065e8:	a201      	add	r2, pc, #4	@ (adr r2, 80065f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80065ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ee:	bf00      	nop
 80065f0:	08006605 	.word	0x08006605
 80065f4:	08006613 	.word	0x08006613
 80065f8:	08006629 	.word	0x08006629
 80065fc:	08006647 	.word	0x08006647
 8006600:	08006647 	.word	0x08006647
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006604:	4b8e      	ldr	r3, [pc, #568]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006608:	4a8d      	ldr	r2, [pc, #564]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800660a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800660e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006610:	e01a      	b.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006616:	3308      	adds	r3, #8
 8006618:	2100      	movs	r1, #0
 800661a:	4618      	mov	r0, r3
 800661c:	f001 fc3c 	bl	8007e98 <RCCEx_PLL2_Config>
 8006620:	4603      	mov	r3, r0
 8006622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006626:	e00f      	b.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800662c:	3328      	adds	r3, #40	@ 0x28
 800662e:	2100      	movs	r1, #0
 8006630:	4618      	mov	r0, r3
 8006632:	f001 fce3 	bl	8007ffc <RCCEx_PLL3_Config>
 8006636:	4603      	mov	r3, r0
 8006638:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800663c:	e004      	b.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006644:	e000      	b.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006646:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006648:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10a      	bne.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006650:	4b7b      	ldr	r3, [pc, #492]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006654:	f023 0107 	bic.w	r1, r3, #7
 8006658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800665c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800665e:	4a78      	ldr	r2, [pc, #480]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006660:	430b      	orrs	r3, r1
 8006662:	6513      	str	r3, [r2, #80]	@ 0x50
 8006664:	e003      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006666:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800666a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800666e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006676:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800667a:	f04f 0b00 	mov.w	fp, #0
 800667e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006682:	d04c      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800668a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800668e:	d030      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006690:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006694:	d829      	bhi.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006696:	2bc0      	cmp	r3, #192	@ 0xc0
 8006698:	d02d      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800669a:	2bc0      	cmp	r3, #192	@ 0xc0
 800669c:	d825      	bhi.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800669e:	2b80      	cmp	r3, #128	@ 0x80
 80066a0:	d018      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80066a2:	2b80      	cmp	r3, #128	@ 0x80
 80066a4:	d821      	bhi.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d002      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80066aa:	2b40      	cmp	r3, #64	@ 0x40
 80066ac:	d007      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80066ae:	e01c      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066b0:	4b63      	ldr	r3, [pc, #396]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b4:	4a62      	ldr	r2, [pc, #392]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80066bc:	e01c      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c2:	3308      	adds	r3, #8
 80066c4:	2100      	movs	r1, #0
 80066c6:	4618      	mov	r0, r3
 80066c8:	f001 fbe6 	bl	8007e98 <RCCEx_PLL2_Config>
 80066cc:	4603      	mov	r3, r0
 80066ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80066d2:	e011      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d8:	3328      	adds	r3, #40	@ 0x28
 80066da:	2100      	movs	r1, #0
 80066dc:	4618      	mov	r0, r3
 80066de:	f001 fc8d 	bl	8007ffc <RCCEx_PLL3_Config>
 80066e2:	4603      	mov	r3, r0
 80066e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80066e8:	e006      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066f0:	e002      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80066f2:	bf00      	nop
 80066f4:	e000      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80066f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10a      	bne.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006700:	4b4f      	ldr	r3, [pc, #316]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006704:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800670c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800670e:	4a4c      	ldr	r2, [pc, #304]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006710:	430b      	orrs	r3, r1
 8006712:	6513      	str	r3, [r2, #80]	@ 0x50
 8006714:	e003      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006716:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800671a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800671e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006726:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800672a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800672e:	2300      	movs	r3, #0
 8006730:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006734:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006738:	460b      	mov	r3, r1
 800673a:	4313      	orrs	r3, r2
 800673c:	d053      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800673e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006742:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006746:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800674a:	d035      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800674c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006750:	d82e      	bhi.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006752:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006756:	d031      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006758:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800675c:	d828      	bhi.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800675e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006762:	d01a      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006764:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006768:	d822      	bhi.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800676e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006772:	d007      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006774:	e01c      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006776:	4b32      	ldr	r3, [pc, #200]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800677a:	4a31      	ldr	r2, [pc, #196]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800677c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006780:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006782:	e01c      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006788:	3308      	adds	r3, #8
 800678a:	2100      	movs	r1, #0
 800678c:	4618      	mov	r0, r3
 800678e:	f001 fb83 	bl	8007e98 <RCCEx_PLL2_Config>
 8006792:	4603      	mov	r3, r0
 8006794:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006798:	e011      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800679a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800679e:	3328      	adds	r3, #40	@ 0x28
 80067a0:	2100      	movs	r1, #0
 80067a2:	4618      	mov	r0, r3
 80067a4:	f001 fc2a 	bl	8007ffc <RCCEx_PLL3_Config>
 80067a8:	4603      	mov	r3, r0
 80067aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067ae:	e006      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067b6:	e002      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80067b8:	bf00      	nop
 80067ba:	e000      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80067bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10b      	bne.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80067c6:	4b1e      	ldr	r3, [pc, #120]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067ca:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80067ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80067d6:	4a1a      	ldr	r2, [pc, #104]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067d8:	430b      	orrs	r3, r1
 80067da:	6593      	str	r3, [r2, #88]	@ 0x58
 80067dc:	e003      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80067e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ee:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80067f2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80067f6:	2300      	movs	r3, #0
 80067f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80067fc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006800:	460b      	mov	r3, r1
 8006802:	4313      	orrs	r3, r2
 8006804:	d056      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800680a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800680e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006812:	d038      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006814:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006818:	d831      	bhi.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800681a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800681e:	d034      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006820:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006824:	d82b      	bhi.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006826:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800682a:	d01d      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800682c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006830:	d825      	bhi.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006832:	2b00      	cmp	r3, #0
 8006834:	d006      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006836:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800683a:	d00a      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800683c:	e01f      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800683e:	bf00      	nop
 8006840:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006844:	4ba2      	ldr	r3, [pc, #648]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006848:	4aa1      	ldr	r2, [pc, #644]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800684a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800684e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006850:	e01c      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006856:	3308      	adds	r3, #8
 8006858:	2100      	movs	r1, #0
 800685a:	4618      	mov	r0, r3
 800685c:	f001 fb1c 	bl	8007e98 <RCCEx_PLL2_Config>
 8006860:	4603      	mov	r3, r0
 8006862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006866:	e011      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800686c:	3328      	adds	r3, #40	@ 0x28
 800686e:	2100      	movs	r1, #0
 8006870:	4618      	mov	r0, r3
 8006872:	f001 fbc3 	bl	8007ffc <RCCEx_PLL3_Config>
 8006876:	4603      	mov	r3, r0
 8006878:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800687c:	e006      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006884:	e002      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006886:	bf00      	nop
 8006888:	e000      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800688a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800688c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10b      	bne.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006894:	4b8e      	ldr	r3, [pc, #568]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006898:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800689c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80068a4:	4a8a      	ldr	r2, [pc, #552]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068a6:	430b      	orrs	r3, r1
 80068a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80068aa:	e003      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80068b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068bc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80068c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80068c4:	2300      	movs	r3, #0
 80068c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80068ca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80068ce:	460b      	mov	r3, r1
 80068d0:	4313      	orrs	r3, r2
 80068d2:	d03a      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80068d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068da:	2b30      	cmp	r3, #48	@ 0x30
 80068dc:	d01f      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80068de:	2b30      	cmp	r3, #48	@ 0x30
 80068e0:	d819      	bhi.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80068e2:	2b20      	cmp	r3, #32
 80068e4:	d00c      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80068e6:	2b20      	cmp	r3, #32
 80068e8:	d815      	bhi.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d019      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80068ee:	2b10      	cmp	r3, #16
 80068f0:	d111      	bne.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068f2:	4b77      	ldr	r3, [pc, #476]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f6:	4a76      	ldr	r2, [pc, #472]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80068fe:	e011      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006904:	3308      	adds	r3, #8
 8006906:	2102      	movs	r1, #2
 8006908:	4618      	mov	r0, r3
 800690a:	f001 fac5 	bl	8007e98 <RCCEx_PLL2_Config>
 800690e:	4603      	mov	r3, r0
 8006910:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006914:	e006      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800691c:	e002      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800691e:	bf00      	nop
 8006920:	e000      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006924:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10a      	bne.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800692c:	4b68      	ldr	r3, [pc, #416]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800692e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006930:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800693a:	4a65      	ldr	r2, [pc, #404]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800693c:	430b      	orrs	r3, r1
 800693e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006940:	e003      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006942:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006946:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800694a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800694e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006952:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006956:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800695a:	2300      	movs	r3, #0
 800695c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006960:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006964:	460b      	mov	r3, r1
 8006966:	4313      	orrs	r3, r2
 8006968:	d051      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800696a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800696e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006970:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006974:	d035      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006976:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800697a:	d82e      	bhi.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800697c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006980:	d031      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006982:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006986:	d828      	bhi.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006988:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800698c:	d01a      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800698e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006992:	d822      	bhi.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006994:	2b00      	cmp	r3, #0
 8006996:	d003      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006998:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800699c:	d007      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800699e:	e01c      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069a0:	4b4b      	ldr	r3, [pc, #300]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a4:	4a4a      	ldr	r2, [pc, #296]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80069ac:	e01c      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069b2:	3308      	adds	r3, #8
 80069b4:	2100      	movs	r1, #0
 80069b6:	4618      	mov	r0, r3
 80069b8:	f001 fa6e 	bl	8007e98 <RCCEx_PLL2_Config>
 80069bc:	4603      	mov	r3, r0
 80069be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80069c2:	e011      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80069c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c8:	3328      	adds	r3, #40	@ 0x28
 80069ca:	2100      	movs	r1, #0
 80069cc:	4618      	mov	r0, r3
 80069ce:	f001 fb15 	bl	8007ffc <RCCEx_PLL3_Config>
 80069d2:	4603      	mov	r3, r0
 80069d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80069d8:	e006      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069e0:	e002      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80069e2:	bf00      	nop
 80069e4:	e000      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80069e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10a      	bne.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80069f0:	4b37      	ldr	r3, [pc, #220]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069f4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80069f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069fe:	4a34      	ldr	r2, [pc, #208]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a00:	430b      	orrs	r3, r1
 8006a02:	6513      	str	r3, [r2, #80]	@ 0x50
 8006a04:	e003      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a16:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006a1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a1e:	2300      	movs	r3, #0
 8006a20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006a24:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006a28:	460b      	mov	r3, r1
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	d056      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a38:	d033      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006a3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a3e:	d82c      	bhi.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006a40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a44:	d02f      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006a46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a4a:	d826      	bhi.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006a4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006a50:	d02b      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006a52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006a56:	d820      	bhi.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006a58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a5c:	d012      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006a5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a62:	d81a      	bhi.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d022      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a6c:	d115      	bne.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a72:	3308      	adds	r3, #8
 8006a74:	2101      	movs	r1, #1
 8006a76:	4618      	mov	r0, r3
 8006a78:	f001 fa0e 	bl	8007e98 <RCCEx_PLL2_Config>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006a82:	e015      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a88:	3328      	adds	r3, #40	@ 0x28
 8006a8a:	2101      	movs	r1, #1
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f001 fab5 	bl	8007ffc <RCCEx_PLL3_Config>
 8006a92:	4603      	mov	r3, r0
 8006a94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006a98:	e00a      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006aa0:	e006      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006aa2:	bf00      	nop
 8006aa4:	e004      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006aa6:	bf00      	nop
 8006aa8:	e002      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006aaa:	bf00      	nop
 8006aac:	e000      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10d      	bne.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006ab8:	4b05      	ldr	r3, [pc, #20]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006abc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ac6:	4a02      	ldr	r2, [pc, #8]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ac8:	430b      	orrs	r3, r1
 8006aca:	6513      	str	r3, [r2, #80]	@ 0x50
 8006acc:	e006      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006ace:	bf00      	nop
 8006ad0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ad8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006aec:	2300      	movs	r3, #0
 8006aee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006af2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006af6:	460b      	mov	r3, r1
 8006af8:	4313      	orrs	r3, r2
 8006afa:	d055      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006b04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b08:	d033      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006b0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b0e:	d82c      	bhi.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b14:	d02f      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b1a:	d826      	bhi.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006b1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b20:	d02b      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006b22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b26:	d820      	bhi.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006b28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b2c:	d012      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006b2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b32:	d81a      	bhi.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d022      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006b38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b3c:	d115      	bne.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b42:	3308      	adds	r3, #8
 8006b44:	2101      	movs	r1, #1
 8006b46:	4618      	mov	r0, r3
 8006b48:	f001 f9a6 	bl	8007e98 <RCCEx_PLL2_Config>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006b52:	e015      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b58:	3328      	adds	r3, #40	@ 0x28
 8006b5a:	2101      	movs	r1, #1
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f001 fa4d 	bl	8007ffc <RCCEx_PLL3_Config>
 8006b62:	4603      	mov	r3, r0
 8006b64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006b68:	e00a      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b70:	e006      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006b72:	bf00      	nop
 8006b74:	e004      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006b76:	bf00      	nop
 8006b78:	e002      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006b7a:	bf00      	nop
 8006b7c:	e000      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d10b      	bne.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006b88:	4ba3      	ldr	r3, [pc, #652]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b8c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006b98:	4a9f      	ldr	r2, [pc, #636]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b9a:	430b      	orrs	r3, r1
 8006b9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b9e:	e003      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ba4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006bb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006bb8:	2300      	movs	r3, #0
 8006bba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006bbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	d037      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bd2:	d00e      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006bd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bd8:	d816      	bhi.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d018      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006bde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006be2:	d111      	bne.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006be4:	4b8c      	ldr	r3, [pc, #560]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be8:	4a8b      	ldr	r2, [pc, #556]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006bf0:	e00f      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf6:	3308      	adds	r3, #8
 8006bf8:	2101      	movs	r1, #1
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f001 f94c 	bl	8007e98 <RCCEx_PLL2_Config>
 8006c00:	4603      	mov	r3, r0
 8006c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006c06:	e004      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c0e:	e000      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006c10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10a      	bne.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c1a:	4b7f      	ldr	r3, [pc, #508]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c1e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c28:	4a7b      	ldr	r2, [pc, #492]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c2a:	430b      	orrs	r3, r1
 8006c2c:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c2e:	e003      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c40:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006c44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006c4e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006c52:	460b      	mov	r3, r1
 8006c54:	4313      	orrs	r3, r2
 8006c56:	d039      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c5e:	2b03      	cmp	r3, #3
 8006c60:	d81c      	bhi.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006c62:	a201      	add	r2, pc, #4	@ (adr r2, 8006c68 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c68:	08006ca5 	.word	0x08006ca5
 8006c6c:	08006c79 	.word	0x08006c79
 8006c70:	08006c87 	.word	0x08006c87
 8006c74:	08006ca5 	.word	0x08006ca5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c78:	4b67      	ldr	r3, [pc, #412]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7c:	4a66      	ldr	r2, [pc, #408]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006c84:	e00f      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c8a:	3308      	adds	r3, #8
 8006c8c:	2102      	movs	r1, #2
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f001 f902 	bl	8007e98 <RCCEx_PLL2_Config>
 8006c94:	4603      	mov	r3, r0
 8006c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006c9a:	e004      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ca2:	e000      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006ca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10a      	bne.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006cae:	4b5a      	ldr	r3, [pc, #360]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cb2:	f023 0103 	bic.w	r1, r3, #3
 8006cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cbc:	4a56      	ldr	r2, [pc, #344]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cbe:	430b      	orrs	r3, r1
 8006cc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006cc2:	e003      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006cd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006cdc:	2300      	movs	r3, #0
 8006cde:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006ce2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	f000 809f 	beq.w	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cee:	4b4b      	ldr	r3, [pc, #300]	@ (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a4a      	ldr	r2, [pc, #296]	@ (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cf8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006cfa:	f7fb fa75 	bl	80021e8 <HAL_GetTick>
 8006cfe:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d02:	e00b      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d04:	f7fb fa70 	bl	80021e8 <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	2b64      	cmp	r3, #100	@ 0x64
 8006d12:	d903      	bls.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d1a:	e005      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d1c:	4b3f      	ldr	r3, [pc, #252]	@ (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d0ed      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006d28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d179      	bne.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006d30:	4b39      	ldr	r3, [pc, #228]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d32:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006d3c:	4053      	eors	r3, r2
 8006d3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d015      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d46:	4b34      	ldr	r3, [pc, #208]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d4e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d52:	4b31      	ldr	r3, [pc, #196]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d56:	4a30      	ldr	r2, [pc, #192]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d5c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d5e:	4b2e      	ldr	r3, [pc, #184]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d62:	4a2d      	ldr	r2, [pc, #180]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d68:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006d6a:	4a2b      	ldr	r2, [pc, #172]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d70:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006d7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d7e:	d118      	bne.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d80:	f7fb fa32 	bl	80021e8 <HAL_GetTick>
 8006d84:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d88:	e00d      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d8a:	f7fb fa2d 	bl	80021e8 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006d94:	1ad2      	subs	r2, r2, r3
 8006d96:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d903      	bls.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006da4:	e005      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006da6:	4b1c      	ldr	r3, [pc, #112]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d0eb      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d129      	bne.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006dc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dca:	d10e      	bne.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006dcc:	4b12      	ldr	r3, [pc, #72]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006ddc:	091a      	lsrs	r2, r3, #4
 8006dde:	4b10      	ldr	r3, [pc, #64]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006de0:	4013      	ands	r3, r2
 8006de2:	4a0d      	ldr	r2, [pc, #52]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006de4:	430b      	orrs	r3, r1
 8006de6:	6113      	str	r3, [r2, #16]
 8006de8:	e005      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006dea:	4b0b      	ldr	r3, [pc, #44]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	4a0a      	ldr	r2, [pc, #40]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006df0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006df4:	6113      	str	r3, [r2, #16]
 8006df6:	4b08      	ldr	r3, [pc, #32]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006df8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e06:	4a04      	ldr	r2, [pc, #16]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e08:	430b      	orrs	r3, r1
 8006e0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e0c:	e00e      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006e16:	e009      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006e18:	58024400 	.word	0x58024400
 8006e1c:	58024800 	.word	0x58024800
 8006e20:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e34:	f002 0301 	and.w	r3, r2, #1
 8006e38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006e42:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	f000 8089 	beq.w	8006f60 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e54:	2b28      	cmp	r3, #40	@ 0x28
 8006e56:	d86b      	bhi.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006e58:	a201      	add	r2, pc, #4	@ (adr r2, 8006e60 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5e:	bf00      	nop
 8006e60:	08006f39 	.word	0x08006f39
 8006e64:	08006f31 	.word	0x08006f31
 8006e68:	08006f31 	.word	0x08006f31
 8006e6c:	08006f31 	.word	0x08006f31
 8006e70:	08006f31 	.word	0x08006f31
 8006e74:	08006f31 	.word	0x08006f31
 8006e78:	08006f31 	.word	0x08006f31
 8006e7c:	08006f31 	.word	0x08006f31
 8006e80:	08006f05 	.word	0x08006f05
 8006e84:	08006f31 	.word	0x08006f31
 8006e88:	08006f31 	.word	0x08006f31
 8006e8c:	08006f31 	.word	0x08006f31
 8006e90:	08006f31 	.word	0x08006f31
 8006e94:	08006f31 	.word	0x08006f31
 8006e98:	08006f31 	.word	0x08006f31
 8006e9c:	08006f31 	.word	0x08006f31
 8006ea0:	08006f1b 	.word	0x08006f1b
 8006ea4:	08006f31 	.word	0x08006f31
 8006ea8:	08006f31 	.word	0x08006f31
 8006eac:	08006f31 	.word	0x08006f31
 8006eb0:	08006f31 	.word	0x08006f31
 8006eb4:	08006f31 	.word	0x08006f31
 8006eb8:	08006f31 	.word	0x08006f31
 8006ebc:	08006f31 	.word	0x08006f31
 8006ec0:	08006f39 	.word	0x08006f39
 8006ec4:	08006f31 	.word	0x08006f31
 8006ec8:	08006f31 	.word	0x08006f31
 8006ecc:	08006f31 	.word	0x08006f31
 8006ed0:	08006f31 	.word	0x08006f31
 8006ed4:	08006f31 	.word	0x08006f31
 8006ed8:	08006f31 	.word	0x08006f31
 8006edc:	08006f31 	.word	0x08006f31
 8006ee0:	08006f39 	.word	0x08006f39
 8006ee4:	08006f31 	.word	0x08006f31
 8006ee8:	08006f31 	.word	0x08006f31
 8006eec:	08006f31 	.word	0x08006f31
 8006ef0:	08006f31 	.word	0x08006f31
 8006ef4:	08006f31 	.word	0x08006f31
 8006ef8:	08006f31 	.word	0x08006f31
 8006efc:	08006f31 	.word	0x08006f31
 8006f00:	08006f39 	.word	0x08006f39
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f08:	3308      	adds	r3, #8
 8006f0a:	2101      	movs	r1, #1
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 ffc3 	bl	8007e98 <RCCEx_PLL2_Config>
 8006f12:	4603      	mov	r3, r0
 8006f14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006f18:	e00f      	b.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f1e:	3328      	adds	r3, #40	@ 0x28
 8006f20:	2101      	movs	r1, #1
 8006f22:	4618      	mov	r0, r3
 8006f24:	f001 f86a 	bl	8007ffc <RCCEx_PLL3_Config>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006f2e:	e004      	b.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f36:	e000      	b.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10a      	bne.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006f42:	4bbf      	ldr	r3, [pc, #764]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f46:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f50:	4abb      	ldr	r2, [pc, #748]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f52:	430b      	orrs	r3, r1
 8006f54:	6553      	str	r3, [r2, #84]	@ 0x54
 8006f56:	e003      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f68:	f002 0302 	and.w	r3, r2, #2
 8006f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f70:	2300      	movs	r3, #0
 8006f72:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006f76:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	d041      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006f86:	2b05      	cmp	r3, #5
 8006f88:	d824      	bhi.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f90 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f90:	08006fdd 	.word	0x08006fdd
 8006f94:	08006fa9 	.word	0x08006fa9
 8006f98:	08006fbf 	.word	0x08006fbf
 8006f9c:	08006fdd 	.word	0x08006fdd
 8006fa0:	08006fdd 	.word	0x08006fdd
 8006fa4:	08006fdd 	.word	0x08006fdd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fac:	3308      	adds	r3, #8
 8006fae:	2101      	movs	r1, #1
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 ff71 	bl	8007e98 <RCCEx_PLL2_Config>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006fbc:	e00f      	b.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc2:	3328      	adds	r3, #40	@ 0x28
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f001 f818 	bl	8007ffc <RCCEx_PLL3_Config>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006fd2:	e004      	b.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fda:	e000      	b.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006fdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10a      	bne.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006fe6:	4b96      	ldr	r3, [pc, #600]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fea:	f023 0107 	bic.w	r1, r3, #7
 8006fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ff4:	4a92      	ldr	r2, [pc, #584]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ff6:	430b      	orrs	r3, r1
 8006ff8:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ffa:	e003      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ffc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007000:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700c:	f002 0304 	and.w	r3, r2, #4
 8007010:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007014:	2300      	movs	r3, #0
 8007016:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800701a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800701e:	460b      	mov	r3, r1
 8007020:	4313      	orrs	r3, r2
 8007022:	d044      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007028:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800702c:	2b05      	cmp	r3, #5
 800702e:	d825      	bhi.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007030:	a201      	add	r2, pc, #4	@ (adr r2, 8007038 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007036:	bf00      	nop
 8007038:	08007085 	.word	0x08007085
 800703c:	08007051 	.word	0x08007051
 8007040:	08007067 	.word	0x08007067
 8007044:	08007085 	.word	0x08007085
 8007048:	08007085 	.word	0x08007085
 800704c:	08007085 	.word	0x08007085
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007054:	3308      	adds	r3, #8
 8007056:	2101      	movs	r1, #1
 8007058:	4618      	mov	r0, r3
 800705a:	f000 ff1d 	bl	8007e98 <RCCEx_PLL2_Config>
 800705e:	4603      	mov	r3, r0
 8007060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007064:	e00f      	b.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800706a:	3328      	adds	r3, #40	@ 0x28
 800706c:	2101      	movs	r1, #1
 800706e:	4618      	mov	r0, r3
 8007070:	f000 ffc4 	bl	8007ffc <RCCEx_PLL3_Config>
 8007074:	4603      	mov	r3, r0
 8007076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800707a:	e004      	b.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007082:	e000      	b.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007084:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007086:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10b      	bne.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800708e:	4b6c      	ldr	r3, [pc, #432]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007092:	f023 0107 	bic.w	r1, r3, #7
 8007096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800709a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800709e:	4a68      	ldr	r2, [pc, #416]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80070a0:	430b      	orrs	r3, r1
 80070a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80070a4:	e003      	b.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80070ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b6:	f002 0320 	and.w	r3, r2, #32
 80070ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80070be:	2300      	movs	r3, #0
 80070c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80070c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80070c8:	460b      	mov	r3, r1
 80070ca:	4313      	orrs	r3, r2
 80070cc:	d055      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80070ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80070da:	d033      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80070dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80070e0:	d82c      	bhi.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80070e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070e6:	d02f      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80070e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070ec:	d826      	bhi.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80070ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80070f2:	d02b      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80070f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80070f8:	d820      	bhi.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80070fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070fe:	d012      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007100:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007104:	d81a      	bhi.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007106:	2b00      	cmp	r3, #0
 8007108:	d022      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800710a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800710e:	d115      	bne.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007114:	3308      	adds	r3, #8
 8007116:	2100      	movs	r1, #0
 8007118:	4618      	mov	r0, r3
 800711a:	f000 febd 	bl	8007e98 <RCCEx_PLL2_Config>
 800711e:	4603      	mov	r3, r0
 8007120:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007124:	e015      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800712a:	3328      	adds	r3, #40	@ 0x28
 800712c:	2102      	movs	r1, #2
 800712e:	4618      	mov	r0, r3
 8007130:	f000 ff64 	bl	8007ffc <RCCEx_PLL3_Config>
 8007134:	4603      	mov	r3, r0
 8007136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800713a:	e00a      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007142:	e006      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007144:	bf00      	nop
 8007146:	e004      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007148:	bf00      	nop
 800714a:	e002      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800714c:	bf00      	nop
 800714e:	e000      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007150:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007152:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10b      	bne.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800715a:	4b39      	ldr	r3, [pc, #228]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800715c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800715e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800716a:	4a35      	ldr	r2, [pc, #212]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800716c:	430b      	orrs	r3, r1
 800716e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007170:	e003      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007172:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007176:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800717a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800717e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007182:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007186:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800718a:	2300      	movs	r3, #0
 800718c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007190:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007194:	460b      	mov	r3, r1
 8007196:	4313      	orrs	r3, r2
 8007198:	d058      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800719a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800719e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80071a2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80071a6:	d033      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80071a8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80071ac:	d82c      	bhi.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80071ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071b2:	d02f      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80071b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071b8:	d826      	bhi.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80071ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071be:	d02b      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80071c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071c4:	d820      	bhi.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80071c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071ca:	d012      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80071cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071d0:	d81a      	bhi.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d022      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80071d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071da:	d115      	bne.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071e0:	3308      	adds	r3, #8
 80071e2:	2100      	movs	r1, #0
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 fe57 	bl	8007e98 <RCCEx_PLL2_Config>
 80071ea:	4603      	mov	r3, r0
 80071ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80071f0:	e015      	b.n	800721e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80071f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071f6:	3328      	adds	r3, #40	@ 0x28
 80071f8:	2102      	movs	r1, #2
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 fefe 	bl	8007ffc <RCCEx_PLL3_Config>
 8007200:	4603      	mov	r3, r0
 8007202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007206:	e00a      	b.n	800721e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800720e:	e006      	b.n	800721e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007210:	bf00      	nop
 8007212:	e004      	b.n	800721e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007214:	bf00      	nop
 8007216:	e002      	b.n	800721e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007218:	bf00      	nop
 800721a:	e000      	b.n	800721e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800721c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800721e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10e      	bne.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007226:	4b06      	ldr	r3, [pc, #24]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800722a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800722e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007232:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007236:	4a02      	ldr	r2, [pc, #8]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007238:	430b      	orrs	r3, r1
 800723a:	6593      	str	r3, [r2, #88]	@ 0x58
 800723c:	e006      	b.n	800724c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800723e:	bf00      	nop
 8007240:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007244:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007248:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800724c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007254:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007258:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800725c:	2300      	movs	r3, #0
 800725e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007262:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007266:	460b      	mov	r3, r1
 8007268:	4313      	orrs	r3, r2
 800726a:	d055      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800726c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007270:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007274:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007278:	d033      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800727a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800727e:	d82c      	bhi.n	80072da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007280:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007284:	d02f      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007286:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800728a:	d826      	bhi.n	80072da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800728c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007290:	d02b      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007292:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007296:	d820      	bhi.n	80072da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007298:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800729c:	d012      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800729e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072a2:	d81a      	bhi.n	80072da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d022      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80072a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072ac:	d115      	bne.n	80072da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b2:	3308      	adds	r3, #8
 80072b4:	2100      	movs	r1, #0
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 fdee 	bl	8007e98 <RCCEx_PLL2_Config>
 80072bc:	4603      	mov	r3, r0
 80072be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80072c2:	e015      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80072c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c8:	3328      	adds	r3, #40	@ 0x28
 80072ca:	2102      	movs	r1, #2
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 fe95 	bl	8007ffc <RCCEx_PLL3_Config>
 80072d2:	4603      	mov	r3, r0
 80072d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80072d8:	e00a      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072e0:	e006      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80072e2:	bf00      	nop
 80072e4:	e004      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80072e6:	bf00      	nop
 80072e8:	e002      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80072ea:	bf00      	nop
 80072ec:	e000      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80072ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10b      	bne.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80072f8:	4ba1      	ldr	r3, [pc, #644]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072fc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007304:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007308:	4a9d      	ldr	r2, [pc, #628]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800730a:	430b      	orrs	r3, r1
 800730c:	6593      	str	r3, [r2, #88]	@ 0x58
 800730e:	e003      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007310:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007314:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800731c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007320:	f002 0308 	and.w	r3, r2, #8
 8007324:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007328:	2300      	movs	r3, #0
 800732a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800732e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007332:	460b      	mov	r3, r1
 8007334:	4313      	orrs	r3, r2
 8007336:	d01e      	beq.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800733c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007340:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007344:	d10c      	bne.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800734a:	3328      	adds	r3, #40	@ 0x28
 800734c:	2102      	movs	r1, #2
 800734e:	4618      	mov	r0, r3
 8007350:	f000 fe54 	bl	8007ffc <RCCEx_PLL3_Config>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d002      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007360:	4b87      	ldr	r3, [pc, #540]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007364:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800736c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007370:	4a83      	ldr	r2, [pc, #524]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007372:	430b      	orrs	r3, r1
 8007374:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800737a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737e:	f002 0310 	and.w	r3, r2, #16
 8007382:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007386:	2300      	movs	r3, #0
 8007388:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800738c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007390:	460b      	mov	r3, r1
 8007392:	4313      	orrs	r3, r2
 8007394:	d01e      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800739a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800739e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073a2:	d10c      	bne.n	80073be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80073a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a8:	3328      	adds	r3, #40	@ 0x28
 80073aa:	2102      	movs	r1, #2
 80073ac:	4618      	mov	r0, r3
 80073ae:	f000 fe25 	bl	8007ffc <RCCEx_PLL3_Config>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d002      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073be:	4b70      	ldr	r3, [pc, #448]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80073c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073ce:	4a6c      	ldr	r2, [pc, #432]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073d0:	430b      	orrs	r3, r1
 80073d2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80073d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073dc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80073e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80073e4:	2300      	movs	r3, #0
 80073e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80073ea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80073ee:	460b      	mov	r3, r1
 80073f0:	4313      	orrs	r3, r2
 80073f2:	d03e      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80073f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80073fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007400:	d022      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007402:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007406:	d81b      	bhi.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007408:	2b00      	cmp	r3, #0
 800740a:	d003      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800740c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007410:	d00b      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007412:	e015      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007418:	3308      	adds	r3, #8
 800741a:	2100      	movs	r1, #0
 800741c:	4618      	mov	r0, r3
 800741e:	f000 fd3b 	bl	8007e98 <RCCEx_PLL2_Config>
 8007422:	4603      	mov	r3, r0
 8007424:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007428:	e00f      	b.n	800744a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800742a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800742e:	3328      	adds	r3, #40	@ 0x28
 8007430:	2102      	movs	r1, #2
 8007432:	4618      	mov	r0, r3
 8007434:	f000 fde2 	bl	8007ffc <RCCEx_PLL3_Config>
 8007438:	4603      	mov	r3, r0
 800743a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800743e:	e004      	b.n	800744a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007446:	e000      	b.n	800744a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800744a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800744e:	2b00      	cmp	r3, #0
 8007450:	d10b      	bne.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007452:	4b4b      	ldr	r3, [pc, #300]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007456:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800745a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800745e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007462:	4a47      	ldr	r2, [pc, #284]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007464:	430b      	orrs	r3, r1
 8007466:	6593      	str	r3, [r2, #88]	@ 0x58
 8007468:	e003      	b.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800746a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800746e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800747e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007480:	2300      	movs	r3, #0
 8007482:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007484:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007488:	460b      	mov	r3, r1
 800748a:	4313      	orrs	r3, r2
 800748c:	d03b      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800748e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007496:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800749a:	d01f      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800749c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074a0:	d818      	bhi.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80074a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074a6:	d003      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80074a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074ac:	d007      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80074ae:	e011      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074b0:	4b33      	ldr	r3, [pc, #204]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b4:	4a32      	ldr	r2, [pc, #200]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80074bc:	e00f      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074c2:	3328      	adds	r3, #40	@ 0x28
 80074c4:	2101      	movs	r1, #1
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 fd98 	bl	8007ffc <RCCEx_PLL3_Config>
 80074cc:	4603      	mov	r3, r0
 80074ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80074d2:	e004      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074da:	e000      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80074dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10b      	bne.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80074e6:	4b26      	ldr	r3, [pc, #152]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80074ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074f6:	4a22      	ldr	r2, [pc, #136]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074f8:	430b      	orrs	r3, r1
 80074fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80074fc:	e003      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007502:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800750a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007512:	673b      	str	r3, [r7, #112]	@ 0x70
 8007514:	2300      	movs	r3, #0
 8007516:	677b      	str	r3, [r7, #116]	@ 0x74
 8007518:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800751c:	460b      	mov	r3, r1
 800751e:	4313      	orrs	r3, r2
 8007520:	d034      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007528:	2b00      	cmp	r3, #0
 800752a:	d003      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800752c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007530:	d007      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007532:	e011      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007534:	4b12      	ldr	r3, [pc, #72]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007538:	4a11      	ldr	r2, [pc, #68]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800753a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800753e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007540:	e00e      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007546:	3308      	adds	r3, #8
 8007548:	2102      	movs	r1, #2
 800754a:	4618      	mov	r0, r3
 800754c:	f000 fca4 	bl	8007e98 <RCCEx_PLL2_Config>
 8007550:	4603      	mov	r3, r0
 8007552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007556:	e003      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800755e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007560:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10d      	bne.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007568:	4b05      	ldr	r3, [pc, #20]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800756a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800756c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007576:	4a02      	ldr	r2, [pc, #8]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007578:	430b      	orrs	r3, r1
 800757a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800757c:	e006      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800757e:	bf00      	nop
 8007580:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007584:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007588:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800758c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007594:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007598:	66bb      	str	r3, [r7, #104]	@ 0x68
 800759a:	2300      	movs	r3, #0
 800759c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800759e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80075a2:	460b      	mov	r3, r1
 80075a4:	4313      	orrs	r3, r2
 80075a6:	d00c      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80075a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ac:	3328      	adds	r3, #40	@ 0x28
 80075ae:	2102      	movs	r1, #2
 80075b0:	4618      	mov	r0, r3
 80075b2:	f000 fd23 	bl	8007ffc <RCCEx_PLL3_Config>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d002      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80075c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80075ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80075d0:	2300      	movs	r3, #0
 80075d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80075d4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80075d8:	460b      	mov	r3, r1
 80075da:	4313      	orrs	r3, r2
 80075dc:	d038      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80075de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075ea:	d018      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80075ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075f0:	d811      	bhi.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80075f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075f6:	d014      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80075f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075fc:	d80b      	bhi.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d011      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007602:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007606:	d106      	bne.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007608:	4bc3      	ldr	r3, [pc, #780]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800760a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760c:	4ac2      	ldr	r2, [pc, #776]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800760e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007612:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007614:	e008      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800761c:	e004      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800761e:	bf00      	nop
 8007620:	e002      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007622:	bf00      	nop
 8007624:	e000      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007626:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007628:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10b      	bne.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007630:	4bb9      	ldr	r3, [pc, #740]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007634:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800763c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007640:	4ab5      	ldr	r2, [pc, #724]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007642:	430b      	orrs	r3, r1
 8007644:	6553      	str	r3, [r2, #84]	@ 0x54
 8007646:	e003      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007648:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800764c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007658:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800765c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800765e:	2300      	movs	r3, #0
 8007660:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007662:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007666:	460b      	mov	r3, r1
 8007668:	4313      	orrs	r3, r2
 800766a:	d009      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800766c:	4baa      	ldr	r3, [pc, #680]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800766e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007670:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800767a:	4aa7      	ldr	r2, [pc, #668]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800767c:	430b      	orrs	r3, r1
 800767e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007688:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800768c:	653b      	str	r3, [r7, #80]	@ 0x50
 800768e:	2300      	movs	r3, #0
 8007690:	657b      	str	r3, [r7, #84]	@ 0x54
 8007692:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007696:	460b      	mov	r3, r1
 8007698:	4313      	orrs	r3, r2
 800769a:	d00a      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800769c:	4b9e      	ldr	r3, [pc, #632]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80076a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80076ac:	4a9a      	ldr	r2, [pc, #616]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076ae:	430b      	orrs	r3, r1
 80076b0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80076b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ba:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80076be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076c0:	2300      	movs	r3, #0
 80076c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076c4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80076c8:	460b      	mov	r3, r1
 80076ca:	4313      	orrs	r3, r2
 80076cc:	d009      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80076ce:	4b92      	ldr	r3, [pc, #584]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076d2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80076d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076dc:	4a8e      	ldr	r2, [pc, #568]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076de:	430b      	orrs	r3, r1
 80076e0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80076e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ea:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80076ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80076f0:	2300      	movs	r3, #0
 80076f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80076f4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80076f8:	460b      	mov	r3, r1
 80076fa:	4313      	orrs	r3, r2
 80076fc:	d00e      	beq.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80076fe:	4b86      	ldr	r3, [pc, #536]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	4a85      	ldr	r2, [pc, #532]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007704:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007708:	6113      	str	r3, [r2, #16]
 800770a:	4b83      	ldr	r3, [pc, #524]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800770c:	6919      	ldr	r1, [r3, #16]
 800770e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007712:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007716:	4a80      	ldr	r2, [pc, #512]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007718:	430b      	orrs	r3, r1
 800771a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800771c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007724:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007728:	63bb      	str	r3, [r7, #56]	@ 0x38
 800772a:	2300      	movs	r3, #0
 800772c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800772e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007732:	460b      	mov	r3, r1
 8007734:	4313      	orrs	r3, r2
 8007736:	d009      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007738:	4b77      	ldr	r3, [pc, #476]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800773a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800773c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007746:	4a74      	ldr	r2, [pc, #464]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007748:	430b      	orrs	r3, r1
 800774a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800774c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007754:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007758:	633b      	str	r3, [r7, #48]	@ 0x30
 800775a:	2300      	movs	r3, #0
 800775c:	637b      	str	r3, [r7, #52]	@ 0x34
 800775e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007762:	460b      	mov	r3, r1
 8007764:	4313      	orrs	r3, r2
 8007766:	d00a      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007768:	4b6b      	ldr	r3, [pc, #428]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800776a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800776c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007774:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007778:	4a67      	ldr	r2, [pc, #412]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800777a:	430b      	orrs	r3, r1
 800777c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800777e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007786:	2100      	movs	r1, #0
 8007788:	62b9      	str	r1, [r7, #40]	@ 0x28
 800778a:	f003 0301 	and.w	r3, r3, #1
 800778e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007790:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007794:	460b      	mov	r3, r1
 8007796:	4313      	orrs	r3, r2
 8007798:	d011      	beq.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800779a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800779e:	3308      	adds	r3, #8
 80077a0:	2100      	movs	r1, #0
 80077a2:	4618      	mov	r0, r3
 80077a4:	f000 fb78 	bl	8007e98 <RCCEx_PLL2_Config>
 80077a8:	4603      	mov	r3, r0
 80077aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80077ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d003      	beq.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80077be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c6:	2100      	movs	r1, #0
 80077c8:	6239      	str	r1, [r7, #32]
 80077ca:	f003 0302 	and.w	r3, r3, #2
 80077ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80077d0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80077d4:	460b      	mov	r3, r1
 80077d6:	4313      	orrs	r3, r2
 80077d8:	d011      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077de:	3308      	adds	r3, #8
 80077e0:	2101      	movs	r1, #1
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 fb58 	bl	8007e98 <RCCEx_PLL2_Config>
 80077e8:	4603      	mov	r3, r0
 80077ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80077ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d003      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80077fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007806:	2100      	movs	r1, #0
 8007808:	61b9      	str	r1, [r7, #24]
 800780a:	f003 0304 	and.w	r3, r3, #4
 800780e:	61fb      	str	r3, [r7, #28]
 8007810:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007814:	460b      	mov	r3, r1
 8007816:	4313      	orrs	r3, r2
 8007818:	d011      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800781a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800781e:	3308      	adds	r3, #8
 8007820:	2102      	movs	r1, #2
 8007822:	4618      	mov	r0, r3
 8007824:	f000 fb38 	bl	8007e98 <RCCEx_PLL2_Config>
 8007828:	4603      	mov	r3, r0
 800782a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800782e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800783a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800783e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007846:	2100      	movs	r1, #0
 8007848:	6139      	str	r1, [r7, #16]
 800784a:	f003 0308 	and.w	r3, r3, #8
 800784e:	617b      	str	r3, [r7, #20]
 8007850:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007854:	460b      	mov	r3, r1
 8007856:	4313      	orrs	r3, r2
 8007858:	d011      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800785a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800785e:	3328      	adds	r3, #40	@ 0x28
 8007860:	2100      	movs	r1, #0
 8007862:	4618      	mov	r0, r3
 8007864:	f000 fbca 	bl	8007ffc <RCCEx_PLL3_Config>
 8007868:	4603      	mov	r3, r0
 800786a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800786e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007872:	2b00      	cmp	r3, #0
 8007874:	d003      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800787a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800787e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007886:	2100      	movs	r1, #0
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	f003 0310 	and.w	r3, r3, #16
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007894:	460b      	mov	r3, r1
 8007896:	4313      	orrs	r3, r2
 8007898:	d011      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800789a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800789e:	3328      	adds	r3, #40	@ 0x28
 80078a0:	2101      	movs	r1, #1
 80078a2:	4618      	mov	r0, r3
 80078a4:	f000 fbaa 	bl	8007ffc <RCCEx_PLL3_Config>
 80078a8:	4603      	mov	r3, r0
 80078aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80078ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d003      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80078be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c6:	2100      	movs	r1, #0
 80078c8:	6039      	str	r1, [r7, #0]
 80078ca:	f003 0320 	and.w	r3, r3, #32
 80078ce:	607b      	str	r3, [r7, #4]
 80078d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80078d4:	460b      	mov	r3, r1
 80078d6:	4313      	orrs	r3, r2
 80078d8:	d011      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078de:	3328      	adds	r3, #40	@ 0x28
 80078e0:	2102      	movs	r1, #2
 80078e2:	4618      	mov	r0, r3
 80078e4:	f000 fb8a 	bl	8007ffc <RCCEx_PLL3_Config>
 80078e8:	4603      	mov	r3, r0
 80078ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80078ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80078fe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	e000      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
}
 800790c:	4618      	mov	r0, r3
 800790e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007912:	46bd      	mov	sp, r7
 8007914:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007918:	58024400 	.word	0x58024400

0800791c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007920:	f7fe fd54 	bl	80063cc <HAL_RCC_GetHCLKFreq>
 8007924:	4602      	mov	r2, r0
 8007926:	4b06      	ldr	r3, [pc, #24]	@ (8007940 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	091b      	lsrs	r3, r3, #4
 800792c:	f003 0307 	and.w	r3, r3, #7
 8007930:	4904      	ldr	r1, [pc, #16]	@ (8007944 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007932:	5ccb      	ldrb	r3, [r1, r3]
 8007934:	f003 031f 	and.w	r3, r3, #31
 8007938:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800793c:	4618      	mov	r0, r3
 800793e:	bd80      	pop	{r7, pc}
 8007940:	58024400 	.word	0x58024400
 8007944:	0801e23c 	.word	0x0801e23c

08007948 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007948:	b480      	push	{r7}
 800794a:	b089      	sub	sp, #36	@ 0x24
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007950:	4ba1      	ldr	r3, [pc, #644]	@ (8007bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007954:	f003 0303 	and.w	r3, r3, #3
 8007958:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800795a:	4b9f      	ldr	r3, [pc, #636]	@ (8007bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800795c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800795e:	0b1b      	lsrs	r3, r3, #12
 8007960:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007964:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007966:	4b9c      	ldr	r3, [pc, #624]	@ (8007bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800796a:	091b      	lsrs	r3, r3, #4
 800796c:	f003 0301 	and.w	r3, r3, #1
 8007970:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007972:	4b99      	ldr	r3, [pc, #612]	@ (8007bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007976:	08db      	lsrs	r3, r3, #3
 8007978:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	fb02 f303 	mul.w	r3, r2, r3
 8007982:	ee07 3a90 	vmov	s15, r3
 8007986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800798a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 8111 	beq.w	8007bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	2b02      	cmp	r3, #2
 800799a:	f000 8083 	beq.w	8007aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	f200 80a1 	bhi.w	8007ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d003      	beq.n	80079b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d056      	beq.n	8007a60 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80079b2:	e099      	b.n	8007ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079b4:	4b88      	ldr	r3, [pc, #544]	@ (8007bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 0320 	and.w	r3, r3, #32
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d02d      	beq.n	8007a1c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079c0:	4b85      	ldr	r3, [pc, #532]	@ (8007bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	08db      	lsrs	r3, r3, #3
 80079c6:	f003 0303 	and.w	r3, r3, #3
 80079ca:	4a84      	ldr	r2, [pc, #528]	@ (8007bdc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80079cc:	fa22 f303 	lsr.w	r3, r2, r3
 80079d0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	ee07 3a90 	vmov	s15, r3
 80079d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	ee07 3a90 	vmov	s15, r3
 80079e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ea:	4b7b      	ldr	r3, [pc, #492]	@ (8007bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079f2:	ee07 3a90 	vmov	s15, r3
 80079f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80079fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007be0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007a1a:	e087      	b.n	8007b2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	ee07 3a90 	vmov	s15, r3
 8007a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a26:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007be4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a2e:	4b6a      	ldr	r3, [pc, #424]	@ (8007bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a36:	ee07 3a90 	vmov	s15, r3
 8007a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a42:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007be0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a5e:	e065      	b.n	8007b2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	ee07 3a90 	vmov	s15, r3
 8007a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a6a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007be8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a72:	4b59      	ldr	r3, [pc, #356]	@ (8007bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a7a:	ee07 3a90 	vmov	s15, r3
 8007a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a86:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007be0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007aa2:	e043      	b.n	8007b2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	ee07 3a90 	vmov	s15, r3
 8007aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007bec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ab6:	4b48      	ldr	r3, [pc, #288]	@ (8007bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007abe:	ee07 3a90 	vmov	s15, r3
 8007ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007be0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ae2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ae6:	e021      	b.n	8007b2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	ee07 3a90 	vmov	s15, r3
 8007aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007af2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007be8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007afa:	4b37      	ldr	r3, [pc, #220]	@ (8007bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b02:	ee07 3a90 	vmov	s15, r3
 8007b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b0e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007be0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b2a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007b2c:	4b2a      	ldr	r3, [pc, #168]	@ (8007bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b30:	0a5b      	lsrs	r3, r3, #9
 8007b32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b36:	ee07 3a90 	vmov	s15, r3
 8007b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b46:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b52:	ee17 2a90 	vmov	r2, s15
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8007bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b5e:	0c1b      	lsrs	r3, r3, #16
 8007b60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b64:	ee07 3a90 	vmov	s15, r3
 8007b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b74:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b80:	ee17 2a90 	vmov	r2, s15
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007b88:	4b13      	ldr	r3, [pc, #76]	@ (8007bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b8c:	0e1b      	lsrs	r3, r3, #24
 8007b8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b92:	ee07 3a90 	vmov	s15, r3
 8007b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ba2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bae:	ee17 2a90 	vmov	r2, s15
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007bb6:	e008      	b.n	8007bca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	609a      	str	r2, [r3, #8]
}
 8007bca:	bf00      	nop
 8007bcc:	3724      	adds	r7, #36	@ 0x24
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	58024400 	.word	0x58024400
 8007bdc:	03d09000 	.word	0x03d09000
 8007be0:	46000000 	.word	0x46000000
 8007be4:	4c742400 	.word	0x4c742400
 8007be8:	4a742400 	.word	0x4a742400
 8007bec:	4af42400 	.word	0x4af42400

08007bf0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b089      	sub	sp, #36	@ 0x24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007bf8:	4ba1      	ldr	r3, [pc, #644]	@ (8007e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bfc:	f003 0303 	and.w	r3, r3, #3
 8007c00:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007c02:	4b9f      	ldr	r3, [pc, #636]	@ (8007e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c06:	0d1b      	lsrs	r3, r3, #20
 8007c08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c0c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007c0e:	4b9c      	ldr	r3, [pc, #624]	@ (8007e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c12:	0a1b      	lsrs	r3, r3, #8
 8007c14:	f003 0301 	and.w	r3, r3, #1
 8007c18:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007c1a:	4b99      	ldr	r3, [pc, #612]	@ (8007e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c1e:	08db      	lsrs	r3, r3, #3
 8007c20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	fb02 f303 	mul.w	r3, r2, r3
 8007c2a:	ee07 3a90 	vmov	s15, r3
 8007c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f000 8111 	beq.w	8007e60 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	f000 8083 	beq.w	8007d4c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	f200 80a1 	bhi.w	8007d90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d003      	beq.n	8007c5c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d056      	beq.n	8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007c5a:	e099      	b.n	8007d90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c5c:	4b88      	ldr	r3, [pc, #544]	@ (8007e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 0320 	and.w	r3, r3, #32
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d02d      	beq.n	8007cc4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c68:	4b85      	ldr	r3, [pc, #532]	@ (8007e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	08db      	lsrs	r3, r3, #3
 8007c6e:	f003 0303 	and.w	r3, r3, #3
 8007c72:	4a84      	ldr	r2, [pc, #528]	@ (8007e84 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007c74:	fa22 f303 	lsr.w	r3, r2, r3
 8007c78:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	ee07 3a90 	vmov	s15, r3
 8007c80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	ee07 3a90 	vmov	s15, r3
 8007c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c92:	4b7b      	ldr	r3, [pc, #492]	@ (8007e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c9a:	ee07 3a90 	vmov	s15, r3
 8007c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ca6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007e88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cbe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007cc2:	e087      	b.n	8007dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	ee07 3a90 	vmov	s15, r3
 8007cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007e8c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cd6:	4b6a      	ldr	r3, [pc, #424]	@ (8007e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cde:	ee07 3a90 	vmov	s15, r3
 8007ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007e88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d06:	e065      	b.n	8007dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	ee07 3a90 	vmov	s15, r3
 8007d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d12:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d1a:	4b59      	ldr	r3, [pc, #356]	@ (8007e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d22:	ee07 3a90 	vmov	s15, r3
 8007d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d2e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007e88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d4a:	e043      	b.n	8007dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	ee07 3a90 	vmov	s15, r3
 8007d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d56:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007e94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d5e:	4b48      	ldr	r3, [pc, #288]	@ (8007e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d66:	ee07 3a90 	vmov	s15, r3
 8007d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d72:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007e88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d8e:	e021      	b.n	8007dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	ee07 3a90 	vmov	s15, r3
 8007d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d9a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007da2:	4b37      	ldr	r3, [pc, #220]	@ (8007e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007daa:	ee07 3a90 	vmov	s15, r3
 8007dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007db2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007db6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007e88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dd2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8007e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dd8:	0a5b      	lsrs	r3, r3, #9
 8007dda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dde:	ee07 3a90 	vmov	s15, r3
 8007de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007de6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007dea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dee:	edd7 6a07 	vldr	s13, [r7, #28]
 8007df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dfa:	ee17 2a90 	vmov	r2, s15
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007e02:	4b1f      	ldr	r3, [pc, #124]	@ (8007e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e06:	0c1b      	lsrs	r3, r3, #16
 8007e08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e0c:	ee07 3a90 	vmov	s15, r3
 8007e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e28:	ee17 2a90 	vmov	r2, s15
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007e30:	4b13      	ldr	r3, [pc, #76]	@ (8007e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e34:	0e1b      	lsrs	r3, r3, #24
 8007e36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e3a:	ee07 3a90 	vmov	s15, r3
 8007e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e56:	ee17 2a90 	vmov	r2, s15
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007e5e:	e008      	b.n	8007e72 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	609a      	str	r2, [r3, #8]
}
 8007e72:	bf00      	nop
 8007e74:	3724      	adds	r7, #36	@ 0x24
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	58024400 	.word	0x58024400
 8007e84:	03d09000 	.word	0x03d09000
 8007e88:	46000000 	.word	0x46000000
 8007e8c:	4c742400 	.word	0x4c742400
 8007e90:	4a742400 	.word	0x4a742400
 8007e94:	4af42400 	.word	0x4af42400

08007e98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ea6:	4b53      	ldr	r3, [pc, #332]	@ (8007ff4 <RCCEx_PLL2_Config+0x15c>)
 8007ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eaa:	f003 0303 	and.w	r3, r3, #3
 8007eae:	2b03      	cmp	r3, #3
 8007eb0:	d101      	bne.n	8007eb6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e099      	b.n	8007fea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007eb6:	4b4f      	ldr	r3, [pc, #316]	@ (8007ff4 <RCCEx_PLL2_Config+0x15c>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a4e      	ldr	r2, [pc, #312]	@ (8007ff4 <RCCEx_PLL2_Config+0x15c>)
 8007ebc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007ec0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ec2:	f7fa f991 	bl	80021e8 <HAL_GetTick>
 8007ec6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ec8:	e008      	b.n	8007edc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007eca:	f7fa f98d 	bl	80021e8 <HAL_GetTick>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d901      	bls.n	8007edc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	e086      	b.n	8007fea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007edc:	4b45      	ldr	r3, [pc, #276]	@ (8007ff4 <RCCEx_PLL2_Config+0x15c>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d1f0      	bne.n	8007eca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007ee8:	4b42      	ldr	r3, [pc, #264]	@ (8007ff4 <RCCEx_PLL2_Config+0x15c>)
 8007eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	031b      	lsls	r3, r3, #12
 8007ef6:	493f      	ldr	r1, [pc, #252]	@ (8007ff4 <RCCEx_PLL2_Config+0x15c>)
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	628b      	str	r3, [r1, #40]	@ 0x28
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	3b01      	subs	r3, #1
 8007f02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	025b      	lsls	r3, r3, #9
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	431a      	orrs	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	3b01      	subs	r3, #1
 8007f18:	041b      	lsls	r3, r3, #16
 8007f1a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007f1e:	431a      	orrs	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	3b01      	subs	r3, #1
 8007f26:	061b      	lsls	r3, r3, #24
 8007f28:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007f2c:	4931      	ldr	r1, [pc, #196]	@ (8007ff4 <RCCEx_PLL2_Config+0x15c>)
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007f32:	4b30      	ldr	r3, [pc, #192]	@ (8007ff4 <RCCEx_PLL2_Config+0x15c>)
 8007f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f36:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	492d      	ldr	r1, [pc, #180]	@ (8007ff4 <RCCEx_PLL2_Config+0x15c>)
 8007f40:	4313      	orrs	r3, r2
 8007f42:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007f44:	4b2b      	ldr	r3, [pc, #172]	@ (8007ff4 <RCCEx_PLL2_Config+0x15c>)
 8007f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f48:	f023 0220 	bic.w	r2, r3, #32
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	4928      	ldr	r1, [pc, #160]	@ (8007ff4 <RCCEx_PLL2_Config+0x15c>)
 8007f52:	4313      	orrs	r3, r2
 8007f54:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007f56:	4b27      	ldr	r3, [pc, #156]	@ (8007ff4 <RCCEx_PLL2_Config+0x15c>)
 8007f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f5a:	4a26      	ldr	r2, [pc, #152]	@ (8007ff4 <RCCEx_PLL2_Config+0x15c>)
 8007f5c:	f023 0310 	bic.w	r3, r3, #16
 8007f60:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007f62:	4b24      	ldr	r3, [pc, #144]	@ (8007ff4 <RCCEx_PLL2_Config+0x15c>)
 8007f64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f66:	4b24      	ldr	r3, [pc, #144]	@ (8007ff8 <RCCEx_PLL2_Config+0x160>)
 8007f68:	4013      	ands	r3, r2
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	69d2      	ldr	r2, [r2, #28]
 8007f6e:	00d2      	lsls	r2, r2, #3
 8007f70:	4920      	ldr	r1, [pc, #128]	@ (8007ff4 <RCCEx_PLL2_Config+0x15c>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007f76:	4b1f      	ldr	r3, [pc, #124]	@ (8007ff4 <RCCEx_PLL2_Config+0x15c>)
 8007f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8007ff4 <RCCEx_PLL2_Config+0x15c>)
 8007f7c:	f043 0310 	orr.w	r3, r3, #16
 8007f80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d106      	bne.n	8007f96 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007f88:	4b1a      	ldr	r3, [pc, #104]	@ (8007ff4 <RCCEx_PLL2_Config+0x15c>)
 8007f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f8c:	4a19      	ldr	r2, [pc, #100]	@ (8007ff4 <RCCEx_PLL2_Config+0x15c>)
 8007f8e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f92:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007f94:	e00f      	b.n	8007fb6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d106      	bne.n	8007faa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007f9c:	4b15      	ldr	r3, [pc, #84]	@ (8007ff4 <RCCEx_PLL2_Config+0x15c>)
 8007f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa0:	4a14      	ldr	r2, [pc, #80]	@ (8007ff4 <RCCEx_PLL2_Config+0x15c>)
 8007fa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007fa6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007fa8:	e005      	b.n	8007fb6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007faa:	4b12      	ldr	r3, [pc, #72]	@ (8007ff4 <RCCEx_PLL2_Config+0x15c>)
 8007fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fae:	4a11      	ldr	r2, [pc, #68]	@ (8007ff4 <RCCEx_PLL2_Config+0x15c>)
 8007fb0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007fb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8007ff4 <RCCEx_PLL2_Config+0x15c>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a0e      	ldr	r2, [pc, #56]	@ (8007ff4 <RCCEx_PLL2_Config+0x15c>)
 8007fbc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007fc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fc2:	f7fa f911 	bl	80021e8 <HAL_GetTick>
 8007fc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007fc8:	e008      	b.n	8007fdc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007fca:	f7fa f90d 	bl	80021e8 <HAL_GetTick>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	d901      	bls.n	8007fdc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	e006      	b.n	8007fea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007fdc:	4b05      	ldr	r3, [pc, #20]	@ (8007ff4 <RCCEx_PLL2_Config+0x15c>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d0f0      	beq.n	8007fca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	58024400 	.word	0x58024400
 8007ff8:	ffff0007 	.word	0xffff0007

08007ffc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008006:	2300      	movs	r3, #0
 8008008:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800800a:	4b53      	ldr	r3, [pc, #332]	@ (8008158 <RCCEx_PLL3_Config+0x15c>)
 800800c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800800e:	f003 0303 	and.w	r3, r3, #3
 8008012:	2b03      	cmp	r3, #3
 8008014:	d101      	bne.n	800801a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e099      	b.n	800814e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800801a:	4b4f      	ldr	r3, [pc, #316]	@ (8008158 <RCCEx_PLL3_Config+0x15c>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a4e      	ldr	r2, [pc, #312]	@ (8008158 <RCCEx_PLL3_Config+0x15c>)
 8008020:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008024:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008026:	f7fa f8df 	bl	80021e8 <HAL_GetTick>
 800802a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800802c:	e008      	b.n	8008040 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800802e:	f7fa f8db 	bl	80021e8 <HAL_GetTick>
 8008032:	4602      	mov	r2, r0
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	1ad3      	subs	r3, r2, r3
 8008038:	2b02      	cmp	r3, #2
 800803a:	d901      	bls.n	8008040 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800803c:	2303      	movs	r3, #3
 800803e:	e086      	b.n	800814e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008040:	4b45      	ldr	r3, [pc, #276]	@ (8008158 <RCCEx_PLL3_Config+0x15c>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1f0      	bne.n	800802e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800804c:	4b42      	ldr	r3, [pc, #264]	@ (8008158 <RCCEx_PLL3_Config+0x15c>)
 800804e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008050:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	051b      	lsls	r3, r3, #20
 800805a:	493f      	ldr	r1, [pc, #252]	@ (8008158 <RCCEx_PLL3_Config+0x15c>)
 800805c:	4313      	orrs	r3, r2
 800805e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	3b01      	subs	r3, #1
 8008066:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	3b01      	subs	r3, #1
 8008070:	025b      	lsls	r3, r3, #9
 8008072:	b29b      	uxth	r3, r3
 8008074:	431a      	orrs	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	3b01      	subs	r3, #1
 800807c:	041b      	lsls	r3, r3, #16
 800807e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008082:	431a      	orrs	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	3b01      	subs	r3, #1
 800808a:	061b      	lsls	r3, r3, #24
 800808c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008090:	4931      	ldr	r1, [pc, #196]	@ (8008158 <RCCEx_PLL3_Config+0x15c>)
 8008092:	4313      	orrs	r3, r2
 8008094:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008096:	4b30      	ldr	r3, [pc, #192]	@ (8008158 <RCCEx_PLL3_Config+0x15c>)
 8008098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800809a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	695b      	ldr	r3, [r3, #20]
 80080a2:	492d      	ldr	r1, [pc, #180]	@ (8008158 <RCCEx_PLL3_Config+0x15c>)
 80080a4:	4313      	orrs	r3, r2
 80080a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80080a8:	4b2b      	ldr	r3, [pc, #172]	@ (8008158 <RCCEx_PLL3_Config+0x15c>)
 80080aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	4928      	ldr	r1, [pc, #160]	@ (8008158 <RCCEx_PLL3_Config+0x15c>)
 80080b6:	4313      	orrs	r3, r2
 80080b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80080ba:	4b27      	ldr	r3, [pc, #156]	@ (8008158 <RCCEx_PLL3_Config+0x15c>)
 80080bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080be:	4a26      	ldr	r2, [pc, #152]	@ (8008158 <RCCEx_PLL3_Config+0x15c>)
 80080c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80080c6:	4b24      	ldr	r3, [pc, #144]	@ (8008158 <RCCEx_PLL3_Config+0x15c>)
 80080c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080ca:	4b24      	ldr	r3, [pc, #144]	@ (800815c <RCCEx_PLL3_Config+0x160>)
 80080cc:	4013      	ands	r3, r2
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	69d2      	ldr	r2, [r2, #28]
 80080d2:	00d2      	lsls	r2, r2, #3
 80080d4:	4920      	ldr	r1, [pc, #128]	@ (8008158 <RCCEx_PLL3_Config+0x15c>)
 80080d6:	4313      	orrs	r3, r2
 80080d8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80080da:	4b1f      	ldr	r3, [pc, #124]	@ (8008158 <RCCEx_PLL3_Config+0x15c>)
 80080dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080de:	4a1e      	ldr	r2, [pc, #120]	@ (8008158 <RCCEx_PLL3_Config+0x15c>)
 80080e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d106      	bne.n	80080fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80080ec:	4b1a      	ldr	r3, [pc, #104]	@ (8008158 <RCCEx_PLL3_Config+0x15c>)
 80080ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080f0:	4a19      	ldr	r2, [pc, #100]	@ (8008158 <RCCEx_PLL3_Config+0x15c>)
 80080f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80080f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80080f8:	e00f      	b.n	800811a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d106      	bne.n	800810e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008100:	4b15      	ldr	r3, [pc, #84]	@ (8008158 <RCCEx_PLL3_Config+0x15c>)
 8008102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008104:	4a14      	ldr	r2, [pc, #80]	@ (8008158 <RCCEx_PLL3_Config+0x15c>)
 8008106:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800810a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800810c:	e005      	b.n	800811a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800810e:	4b12      	ldr	r3, [pc, #72]	@ (8008158 <RCCEx_PLL3_Config+0x15c>)
 8008110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008112:	4a11      	ldr	r2, [pc, #68]	@ (8008158 <RCCEx_PLL3_Config+0x15c>)
 8008114:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008118:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800811a:	4b0f      	ldr	r3, [pc, #60]	@ (8008158 <RCCEx_PLL3_Config+0x15c>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a0e      	ldr	r2, [pc, #56]	@ (8008158 <RCCEx_PLL3_Config+0x15c>)
 8008120:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008124:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008126:	f7fa f85f 	bl	80021e8 <HAL_GetTick>
 800812a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800812c:	e008      	b.n	8008140 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800812e:	f7fa f85b 	bl	80021e8 <HAL_GetTick>
 8008132:	4602      	mov	r2, r0
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	1ad3      	subs	r3, r2, r3
 8008138:	2b02      	cmp	r3, #2
 800813a:	d901      	bls.n	8008140 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800813c:	2303      	movs	r3, #3
 800813e:	e006      	b.n	800814e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008140:	4b05      	ldr	r3, [pc, #20]	@ (8008158 <RCCEx_PLL3_Config+0x15c>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d0f0      	beq.n	800812e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800814c:	7bfb      	ldrb	r3, [r7, #15]
}
 800814e:	4618      	mov	r0, r3
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	58024400 	.word	0x58024400
 800815c:	ffff0007 	.word	0xffff0007

08008160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d101      	bne.n	8008172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e049      	b.n	8008206 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008178:	b2db      	uxtb	r3, r3
 800817a:	2b00      	cmp	r3, #0
 800817c:	d106      	bne.n	800818c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f841 	bl	800820e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2202      	movs	r2, #2
 8008190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	3304      	adds	r3, #4
 800819c:	4619      	mov	r1, r3
 800819e:	4610      	mov	r0, r2
 80081a0:	f000 f9e8 	bl	8008574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800820e:	b480      	push	{r7}
 8008210:	b083      	sub	sp, #12
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008216:	bf00      	nop
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
	...

08008224 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008232:	b2db      	uxtb	r3, r3
 8008234:	2b01      	cmp	r3, #1
 8008236:	d001      	beq.n	800823c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	e054      	b.n	80082e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2202      	movs	r2, #2
 8008240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68da      	ldr	r2, [r3, #12]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f042 0201 	orr.w	r2, r2, #1
 8008252:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a26      	ldr	r2, [pc, #152]	@ (80082f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d022      	beq.n	80082a4 <HAL_TIM_Base_Start_IT+0x80>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008266:	d01d      	beq.n	80082a4 <HAL_TIM_Base_Start_IT+0x80>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a22      	ldr	r2, [pc, #136]	@ (80082f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d018      	beq.n	80082a4 <HAL_TIM_Base_Start_IT+0x80>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a21      	ldr	r2, [pc, #132]	@ (80082fc <HAL_TIM_Base_Start_IT+0xd8>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d013      	beq.n	80082a4 <HAL_TIM_Base_Start_IT+0x80>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a1f      	ldr	r2, [pc, #124]	@ (8008300 <HAL_TIM_Base_Start_IT+0xdc>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d00e      	beq.n	80082a4 <HAL_TIM_Base_Start_IT+0x80>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a1e      	ldr	r2, [pc, #120]	@ (8008304 <HAL_TIM_Base_Start_IT+0xe0>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d009      	beq.n	80082a4 <HAL_TIM_Base_Start_IT+0x80>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a1c      	ldr	r2, [pc, #112]	@ (8008308 <HAL_TIM_Base_Start_IT+0xe4>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d004      	beq.n	80082a4 <HAL_TIM_Base_Start_IT+0x80>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a1b      	ldr	r2, [pc, #108]	@ (800830c <HAL_TIM_Base_Start_IT+0xe8>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d115      	bne.n	80082d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	689a      	ldr	r2, [r3, #8]
 80082aa:	4b19      	ldr	r3, [pc, #100]	@ (8008310 <HAL_TIM_Base_Start_IT+0xec>)
 80082ac:	4013      	ands	r3, r2
 80082ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2b06      	cmp	r3, #6
 80082b4:	d015      	beq.n	80082e2 <HAL_TIM_Base_Start_IT+0xbe>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082bc:	d011      	beq.n	80082e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f042 0201 	orr.w	r2, r2, #1
 80082cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082ce:	e008      	b.n	80082e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f042 0201 	orr.w	r2, r2, #1
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	e000      	b.n	80082e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	40010000 	.word	0x40010000
 80082f8:	40000400 	.word	0x40000400
 80082fc:	40000800 	.word	0x40000800
 8008300:	40000c00 	.word	0x40000c00
 8008304:	40010400 	.word	0x40010400
 8008308:	40001800 	.word	0x40001800
 800830c:	40014000 	.word	0x40014000
 8008310:	00010007 	.word	0x00010007

08008314 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	f003 0302 	and.w	r3, r3, #2
 8008332:	2b00      	cmp	r3, #0
 8008334:	d020      	beq.n	8008378 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f003 0302 	and.w	r3, r3, #2
 800833c:	2b00      	cmp	r3, #0
 800833e:	d01b      	beq.n	8008378 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f06f 0202 	mvn.w	r2, #2
 8008348:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2201      	movs	r2, #1
 800834e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	f003 0303 	and.w	r3, r3, #3
 800835a:	2b00      	cmp	r3, #0
 800835c:	d003      	beq.n	8008366 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f8e9 	bl	8008536 <HAL_TIM_IC_CaptureCallback>
 8008364:	e005      	b.n	8008372 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f8db 	bl	8008522 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 f8ec 	bl	800854a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	f003 0304 	and.w	r3, r3, #4
 800837e:	2b00      	cmp	r3, #0
 8008380:	d020      	beq.n	80083c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f003 0304 	and.w	r3, r3, #4
 8008388:	2b00      	cmp	r3, #0
 800838a:	d01b      	beq.n	80083c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f06f 0204 	mvn.w	r2, #4
 8008394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2202      	movs	r2, #2
 800839a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d003      	beq.n	80083b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 f8c3 	bl	8008536 <HAL_TIM_IC_CaptureCallback>
 80083b0:	e005      	b.n	80083be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f8b5 	bl	8008522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 f8c6 	bl	800854a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	f003 0308 	and.w	r3, r3, #8
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d020      	beq.n	8008410 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f003 0308 	and.w	r3, r3, #8
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d01b      	beq.n	8008410 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f06f 0208 	mvn.w	r2, #8
 80083e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2204      	movs	r2, #4
 80083e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	69db      	ldr	r3, [r3, #28]
 80083ee:	f003 0303 	and.w	r3, r3, #3
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d003      	beq.n	80083fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f89d 	bl	8008536 <HAL_TIM_IC_CaptureCallback>
 80083fc:	e005      	b.n	800840a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f88f 	bl	8008522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f8a0 	bl	800854a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	f003 0310 	and.w	r3, r3, #16
 8008416:	2b00      	cmp	r3, #0
 8008418:	d020      	beq.n	800845c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f003 0310 	and.w	r3, r3, #16
 8008420:	2b00      	cmp	r3, #0
 8008422:	d01b      	beq.n	800845c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f06f 0210 	mvn.w	r2, #16
 800842c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2208      	movs	r2, #8
 8008432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	69db      	ldr	r3, [r3, #28]
 800843a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800843e:	2b00      	cmp	r3, #0
 8008440:	d003      	beq.n	800844a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f877 	bl	8008536 <HAL_TIM_IC_CaptureCallback>
 8008448:	e005      	b.n	8008456 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f869 	bl	8008522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 f87a 	bl	800854a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	f003 0301 	and.w	r3, r3, #1
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00c      	beq.n	8008480 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f003 0301 	and.w	r3, r3, #1
 800846c:	2b00      	cmp	r3, #0
 800846e:	d007      	beq.n	8008480 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f06f 0201 	mvn.w	r2, #1
 8008478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f7f8 ffc2 	bl	8001404 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008486:	2b00      	cmp	r3, #0
 8008488:	d104      	bne.n	8008494 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00c      	beq.n	80084ae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800849a:	2b00      	cmp	r3, #0
 800849c:	d007      	beq.n	80084ae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80084a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f913 	bl	80086d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00c      	beq.n	80084d2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d007      	beq.n	80084d2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80084ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f90b 	bl	80086e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00c      	beq.n	80084f6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d007      	beq.n	80084f6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80084ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f834 	bl	800855e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	f003 0320 	and.w	r3, r3, #32
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00c      	beq.n	800851a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f003 0320 	and.w	r3, r3, #32
 8008506:	2b00      	cmp	r3, #0
 8008508:	d007      	beq.n	800851a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f06f 0220 	mvn.w	r2, #32
 8008512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 f8d3 	bl	80086c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800851a:	bf00      	nop
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008522:	b480      	push	{r7}
 8008524:	b083      	sub	sp, #12
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800852a:	bf00      	nop
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr

08008536 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008536:	b480      	push	{r7}
 8008538:	b083      	sub	sp, #12
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800853e:	bf00      	nop
 8008540:	370c      	adds	r7, #12
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800854a:	b480      	push	{r7}
 800854c:	b083      	sub	sp, #12
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008552:	bf00      	nop
 8008554:	370c      	adds	r7, #12
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr

0800855e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800855e:	b480      	push	{r7}
 8008560:	b083      	sub	sp, #12
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008566:	bf00      	nop
 8008568:	370c      	adds	r7, #12
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
	...

08008574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a46      	ldr	r2, [pc, #280]	@ (80086a0 <TIM_Base_SetConfig+0x12c>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d013      	beq.n	80085b4 <TIM_Base_SetConfig+0x40>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008592:	d00f      	beq.n	80085b4 <TIM_Base_SetConfig+0x40>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a43      	ldr	r2, [pc, #268]	@ (80086a4 <TIM_Base_SetConfig+0x130>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d00b      	beq.n	80085b4 <TIM_Base_SetConfig+0x40>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a42      	ldr	r2, [pc, #264]	@ (80086a8 <TIM_Base_SetConfig+0x134>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d007      	beq.n	80085b4 <TIM_Base_SetConfig+0x40>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4a41      	ldr	r2, [pc, #260]	@ (80086ac <TIM_Base_SetConfig+0x138>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d003      	beq.n	80085b4 <TIM_Base_SetConfig+0x40>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a40      	ldr	r2, [pc, #256]	@ (80086b0 <TIM_Base_SetConfig+0x13c>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d108      	bne.n	80085c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a35      	ldr	r2, [pc, #212]	@ (80086a0 <TIM_Base_SetConfig+0x12c>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d01f      	beq.n	800860e <TIM_Base_SetConfig+0x9a>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085d4:	d01b      	beq.n	800860e <TIM_Base_SetConfig+0x9a>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a32      	ldr	r2, [pc, #200]	@ (80086a4 <TIM_Base_SetConfig+0x130>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d017      	beq.n	800860e <TIM_Base_SetConfig+0x9a>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a31      	ldr	r2, [pc, #196]	@ (80086a8 <TIM_Base_SetConfig+0x134>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d013      	beq.n	800860e <TIM_Base_SetConfig+0x9a>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a30      	ldr	r2, [pc, #192]	@ (80086ac <TIM_Base_SetConfig+0x138>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d00f      	beq.n	800860e <TIM_Base_SetConfig+0x9a>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a2f      	ldr	r2, [pc, #188]	@ (80086b0 <TIM_Base_SetConfig+0x13c>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d00b      	beq.n	800860e <TIM_Base_SetConfig+0x9a>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a2e      	ldr	r2, [pc, #184]	@ (80086b4 <TIM_Base_SetConfig+0x140>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d007      	beq.n	800860e <TIM_Base_SetConfig+0x9a>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4a2d      	ldr	r2, [pc, #180]	@ (80086b8 <TIM_Base_SetConfig+0x144>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d003      	beq.n	800860e <TIM_Base_SetConfig+0x9a>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a2c      	ldr	r2, [pc, #176]	@ (80086bc <TIM_Base_SetConfig+0x148>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d108      	bne.n	8008620 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	4313      	orrs	r3, r2
 800861e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	695b      	ldr	r3, [r3, #20]
 800862a:	4313      	orrs	r3, r2
 800862c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	68fa      	ldr	r2, [r7, #12]
 8008632:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	689a      	ldr	r2, [r3, #8]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a16      	ldr	r2, [pc, #88]	@ (80086a0 <TIM_Base_SetConfig+0x12c>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d00f      	beq.n	800866c <TIM_Base_SetConfig+0xf8>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a18      	ldr	r2, [pc, #96]	@ (80086b0 <TIM_Base_SetConfig+0x13c>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d00b      	beq.n	800866c <TIM_Base_SetConfig+0xf8>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a17      	ldr	r2, [pc, #92]	@ (80086b4 <TIM_Base_SetConfig+0x140>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d007      	beq.n	800866c <TIM_Base_SetConfig+0xf8>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a16      	ldr	r2, [pc, #88]	@ (80086b8 <TIM_Base_SetConfig+0x144>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d003      	beq.n	800866c <TIM_Base_SetConfig+0xf8>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a15      	ldr	r2, [pc, #84]	@ (80086bc <TIM_Base_SetConfig+0x148>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d103      	bne.n	8008674 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	691a      	ldr	r2, [r3, #16]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	f003 0301 	and.w	r3, r3, #1
 8008682:	2b01      	cmp	r3, #1
 8008684:	d105      	bne.n	8008692 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	f023 0201 	bic.w	r2, r3, #1
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	611a      	str	r2, [r3, #16]
  }
}
 8008692:	bf00      	nop
 8008694:	3714      	adds	r7, #20
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	40010000 	.word	0x40010000
 80086a4:	40000400 	.word	0x40000400
 80086a8:	40000800 	.word	0x40000800
 80086ac:	40000c00 	.word	0x40000c00
 80086b0:	40010400 	.word	0x40010400
 80086b4:	40014000 	.word	0x40014000
 80086b8:	40014400 	.word	0x40014400
 80086bc:	40014800 	.word	0x40014800

080086c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086c8:	bf00      	nop
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086dc:	bf00      	nop
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d101      	bne.n	800870e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	e042      	b.n	8008794 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008714:	2b00      	cmp	r3, #0
 8008716:	d106      	bne.n	8008726 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f7f9 fc0f 	bl	8001f44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2224      	movs	r2, #36	@ 0x24
 800872a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f022 0201 	bic.w	r2, r2, #1
 800873c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008742:	2b00      	cmp	r3, #0
 8008744:	d002      	beq.n	800874c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f001 faea 	bl	8009d20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fd7f 	bl	8009250 <UART_SetConfig>
 8008752:	4603      	mov	r3, r0
 8008754:	2b01      	cmp	r3, #1
 8008756:	d101      	bne.n	800875c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e01b      	b.n	8008794 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	685a      	ldr	r2, [r3, #4]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800876a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	689a      	ldr	r2, [r3, #8]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800877a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f042 0201 	orr.w	r2, r2, #1
 800878a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f001 fb69 	bl	8009e64 <UART_CheckIdleState>
 8008792:	4603      	mov	r3, r0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b08a      	sub	sp, #40	@ 0x28
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	4613      	mov	r3, r2
 80087a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087b0:	2b20      	cmp	r3, #32
 80087b2:	d167      	bne.n	8008884 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d002      	beq.n	80087c0 <HAL_UART_Transmit_DMA+0x24>
 80087ba:	88fb      	ldrh	r3, [r7, #6]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d101      	bne.n	80087c4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80087c0:	2301      	movs	r3, #1
 80087c2:	e060      	b.n	8008886 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	68ba      	ldr	r2, [r7, #8]
 80087c8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	88fa      	ldrh	r2, [r7, #6]
 80087ce:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	88fa      	ldrh	r2, [r7, #6]
 80087d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2221      	movs	r2, #33	@ 0x21
 80087e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d028      	beq.n	8008844 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80087f6:	4a26      	ldr	r2, [pc, #152]	@ (8008890 <HAL_UART_Transmit_DMA+0xf4>)
 80087f8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80087fe:	4a25      	ldr	r2, [pc, #148]	@ (8008894 <HAL_UART_Transmit_DMA+0xf8>)
 8008800:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008806:	4a24      	ldr	r2, [pc, #144]	@ (8008898 <HAL_UART_Transmit_DMA+0xfc>)
 8008808:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800880e:	2200      	movs	r2, #0
 8008810:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800881a:	4619      	mov	r1, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	3328      	adds	r3, #40	@ 0x28
 8008822:	461a      	mov	r2, r3
 8008824:	88fb      	ldrh	r3, [r7, #6]
 8008826:	f7fa f933 	bl	8002a90 <HAL_DMA_Start_IT>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d009      	beq.n	8008844 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2210      	movs	r2, #16
 8008834:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2220      	movs	r2, #32
 800883c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	e020      	b.n	8008886 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2240      	movs	r2, #64	@ 0x40
 800884a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	3308      	adds	r3, #8
 8008852:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	e853 3f00 	ldrex	r3, [r3]
 800885a:	613b      	str	r3, [r7, #16]
   return(result);
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008862:	627b      	str	r3, [r7, #36]	@ 0x24
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	3308      	adds	r3, #8
 800886a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800886c:	623a      	str	r2, [r7, #32]
 800886e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008870:	69f9      	ldr	r1, [r7, #28]
 8008872:	6a3a      	ldr	r2, [r7, #32]
 8008874:	e841 2300 	strex	r3, r2, [r1]
 8008878:	61bb      	str	r3, [r7, #24]
   return(result);
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1e5      	bne.n	800884c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008880:	2300      	movs	r3, #0
 8008882:	e000      	b.n	8008886 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008884:	2302      	movs	r3, #2
  }
}
 8008886:	4618      	mov	r0, r3
 8008888:	3728      	adds	r7, #40	@ 0x28
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	0800a331 	.word	0x0800a331
 8008894:	0800a3c7 	.word	0x0800a3c7
 8008898:	0800a549 	.word	0x0800a549

0800889c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b08a      	sub	sp, #40	@ 0x28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	4613      	mov	r3, r2
 80088a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088b0:	2b20      	cmp	r3, #32
 80088b2:	d137      	bne.n	8008924 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d002      	beq.n	80088c0 <HAL_UART_Receive_DMA+0x24>
 80088ba:	88fb      	ldrh	r3, [r7, #6]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d101      	bne.n	80088c4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e030      	b.n	8008926 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2200      	movs	r2, #0
 80088c8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a18      	ldr	r2, [pc, #96]	@ (8008930 <HAL_UART_Receive_DMA+0x94>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d01f      	beq.n	8008914 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d018      	beq.n	8008914 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	e853 3f00 	ldrex	r3, [r3]
 80088ee:	613b      	str	r3, [r7, #16]
   return(result);
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80088f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	461a      	mov	r2, r3
 80088fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008900:	623b      	str	r3, [r7, #32]
 8008902:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008904:	69f9      	ldr	r1, [r7, #28]
 8008906:	6a3a      	ldr	r2, [r7, #32]
 8008908:	e841 2300 	strex	r3, r2, [r1]
 800890c:	61bb      	str	r3, [r7, #24]
   return(result);
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1e6      	bne.n	80088e2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008914:	88fb      	ldrh	r3, [r7, #6]
 8008916:	461a      	mov	r2, r3
 8008918:	68b9      	ldr	r1, [r7, #8]
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f001 fbba 	bl	800a094 <UART_Start_Receive_DMA>
 8008920:	4603      	mov	r3, r0
 8008922:	e000      	b.n	8008926 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008924:	2302      	movs	r3, #2
  }
}
 8008926:	4618      	mov	r0, r3
 8008928:	3728      	adds	r7, #40	@ 0x28
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	58000c00 	.word	0x58000c00

08008934 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b090      	sub	sp, #64	@ 0x40
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008942:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800894a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008956:	2b80      	cmp	r3, #128	@ 0x80
 8008958:	d139      	bne.n	80089ce <HAL_UART_DMAStop+0x9a>
 800895a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800895c:	2b21      	cmp	r3, #33	@ 0x21
 800895e:	d136      	bne.n	80089ce <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	3308      	adds	r3, #8
 8008966:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008968:	6a3b      	ldr	r3, [r7, #32]
 800896a:	e853 3f00 	ldrex	r3, [r3]
 800896e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008976:	637b      	str	r3, [r7, #52]	@ 0x34
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	3308      	adds	r3, #8
 800897e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008980:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008982:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008984:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008986:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008988:	e841 2300 	strex	r3, r2, [r1]
 800898c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800898e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1e5      	bne.n	8008960 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008998:	2b00      	cmp	r3, #0
 800899a:	d015      	beq.n	80089c8 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7fa fadf 	bl	8002f64 <HAL_DMA_Abort>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00d      	beq.n	80089c8 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7fb ff65 	bl	8004880 <HAL_DMA_GetError>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b20      	cmp	r3, #32
 80089ba:	d105      	bne.n	80089c8 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2210      	movs	r2, #16
 80089c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e047      	b.n	8008a58 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f001 fc09 	bl	800a1e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089d8:	2b40      	cmp	r3, #64	@ 0x40
 80089da:	d13c      	bne.n	8008a56 <HAL_UART_DMAStop+0x122>
 80089dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089de:	2b22      	cmp	r3, #34	@ 0x22
 80089e0:	d139      	bne.n	8008a56 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	3308      	adds	r3, #8
 80089e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	e853 3f00 	ldrex	r3, [r3]
 80089f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	3308      	adds	r3, #8
 8008a00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a02:	61ba      	str	r2, [r7, #24]
 8008a04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a06:	6979      	ldr	r1, [r7, #20]
 8008a08:	69ba      	ldr	r2, [r7, #24]
 8008a0a:	e841 2300 	strex	r3, r2, [r1]
 8008a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1e5      	bne.n	80089e2 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d017      	beq.n	8008a50 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7fa fa9c 	bl	8002f64 <HAL_DMA_Abort>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00e      	beq.n	8008a50 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fb ff21 	bl	8004880 <HAL_DMA_GetError>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b20      	cmp	r3, #32
 8008a42:	d105      	bne.n	8008a50 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2210      	movs	r2, #16
 8008a48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	e003      	b.n	8008a58 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f001 fc07 	bl	800a264 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3740      	adds	r7, #64	@ 0x40
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b0ba      	sub	sp, #232	@ 0xe8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	69db      	ldr	r3, [r3, #28]
 8008a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008a86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008a8a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008a8e:	4013      	ands	r3, r2
 8008a90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008a94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d11b      	bne.n	8008ad4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aa0:	f003 0320 	and.w	r3, r3, #32
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d015      	beq.n	8008ad4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008aac:	f003 0320 	and.w	r3, r3, #32
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d105      	bne.n	8008ac0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ab8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d009      	beq.n	8008ad4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f000 8377 	beq.w	80091b8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	4798      	blx	r3
      }
      return;
 8008ad2:	e371      	b.n	80091b8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008ad4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 8123 	beq.w	8008d24 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008ade:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008ae2:	4b8d      	ldr	r3, [pc, #564]	@ (8008d18 <HAL_UART_IRQHandler+0x2b8>)
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d106      	bne.n	8008af8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008aea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008aee:	4b8b      	ldr	r3, [pc, #556]	@ (8008d1c <HAL_UART_IRQHandler+0x2bc>)
 8008af0:	4013      	ands	r3, r2
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f000 8116 	beq.w	8008d24 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008afc:	f003 0301 	and.w	r3, r3, #1
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d011      	beq.n	8008b28 <HAL_UART_IRQHandler+0xc8>
 8008b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00b      	beq.n	8008b28 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2201      	movs	r2, #1
 8008b16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b1e:	f043 0201 	orr.w	r2, r3, #1
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b2c:	f003 0302 	and.w	r3, r3, #2
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d011      	beq.n	8008b58 <HAL_UART_IRQHandler+0xf8>
 8008b34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b38:	f003 0301 	and.w	r3, r3, #1
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00b      	beq.n	8008b58 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2202      	movs	r2, #2
 8008b46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b4e:	f043 0204 	orr.w	r2, r3, #4
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b5c:	f003 0304 	and.w	r3, r3, #4
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d011      	beq.n	8008b88 <HAL_UART_IRQHandler+0x128>
 8008b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b68:	f003 0301 	and.w	r3, r3, #1
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00b      	beq.n	8008b88 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2204      	movs	r2, #4
 8008b76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b7e:	f043 0202 	orr.w	r2, r3, #2
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b8c:	f003 0308 	and.w	r3, r3, #8
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d017      	beq.n	8008bc4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b98:	f003 0320 	and.w	r3, r3, #32
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d105      	bne.n	8008bac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008ba0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008ba4:	4b5c      	ldr	r3, [pc, #368]	@ (8008d18 <HAL_UART_IRQHandler+0x2b8>)
 8008ba6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00b      	beq.n	8008bc4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2208      	movs	r2, #8
 8008bb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bba:	f043 0208 	orr.w	r2, r3, #8
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d012      	beq.n	8008bf6 <HAL_UART_IRQHandler+0x196>
 8008bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bd4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00c      	beq.n	8008bf6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008be4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bec:	f043 0220 	orr.w	r2, r3, #32
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f000 82dd 	beq.w	80091bc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c06:	f003 0320 	and.w	r3, r3, #32
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d013      	beq.n	8008c36 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c12:	f003 0320 	and.w	r3, r3, #32
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d105      	bne.n	8008c26 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d007      	beq.n	8008c36 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d003      	beq.n	8008c36 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c3c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c4a:	2b40      	cmp	r3, #64	@ 0x40
 8008c4c:	d005      	beq.n	8008c5a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c52:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d054      	beq.n	8008d04 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f001 fb02 	bl	800a264 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c6a:	2b40      	cmp	r3, #64	@ 0x40
 8008c6c:	d146      	bne.n	8008cfc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	3308      	adds	r3, #8
 8008c74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c7c:	e853 3f00 	ldrex	r3, [r3]
 8008c80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008c84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	3308      	adds	r3, #8
 8008c96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008c9a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008c9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008ca6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008caa:	e841 2300 	strex	r3, r2, [r1]
 8008cae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008cb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1d9      	bne.n	8008c6e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d017      	beq.n	8008cf4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cca:	4a15      	ldr	r2, [pc, #84]	@ (8008d20 <HAL_UART_IRQHandler+0x2c0>)
 8008ccc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7fa fc63 	bl	80035a0 <HAL_DMA_Abort_IT>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d019      	beq.n	8008d14 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008cee:	4610      	mov	r0, r2
 8008cf0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cf2:	e00f      	b.n	8008d14 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fa95 	bl	8009224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cfa:	e00b      	b.n	8008d14 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 fa91 	bl	8009224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d02:	e007      	b.n	8008d14 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 fa8d 	bl	8009224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008d12:	e253      	b.n	80091bc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d14:	bf00      	nop
    return;
 8008d16:	e251      	b.n	80091bc <HAL_UART_IRQHandler+0x75c>
 8008d18:	10000001 	.word	0x10000001
 8008d1c:	04000120 	.word	0x04000120
 8008d20:	0800a5c9 	.word	0x0800a5c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	f040 81e7 	bne.w	80090fc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d32:	f003 0310 	and.w	r3, r3, #16
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	f000 81e0 	beq.w	80090fc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d40:	f003 0310 	and.w	r3, r3, #16
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f000 81d9 	beq.w	80090fc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2210      	movs	r2, #16
 8008d50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d5c:	2b40      	cmp	r3, #64	@ 0x40
 8008d5e:	f040 8151 	bne.w	8009004 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a96      	ldr	r2, [pc, #600]	@ (8008fc4 <HAL_UART_IRQHandler+0x564>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d068      	beq.n	8008e42 <HAL_UART_IRQHandler+0x3e2>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a93      	ldr	r2, [pc, #588]	@ (8008fc8 <HAL_UART_IRQHandler+0x568>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d061      	beq.n	8008e42 <HAL_UART_IRQHandler+0x3e2>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a91      	ldr	r2, [pc, #580]	@ (8008fcc <HAL_UART_IRQHandler+0x56c>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d05a      	beq.n	8008e42 <HAL_UART_IRQHandler+0x3e2>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a8e      	ldr	r2, [pc, #568]	@ (8008fd0 <HAL_UART_IRQHandler+0x570>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d053      	beq.n	8008e42 <HAL_UART_IRQHandler+0x3e2>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a8c      	ldr	r2, [pc, #560]	@ (8008fd4 <HAL_UART_IRQHandler+0x574>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d04c      	beq.n	8008e42 <HAL_UART_IRQHandler+0x3e2>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a89      	ldr	r2, [pc, #548]	@ (8008fd8 <HAL_UART_IRQHandler+0x578>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d045      	beq.n	8008e42 <HAL_UART_IRQHandler+0x3e2>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a87      	ldr	r2, [pc, #540]	@ (8008fdc <HAL_UART_IRQHandler+0x57c>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d03e      	beq.n	8008e42 <HAL_UART_IRQHandler+0x3e2>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a84      	ldr	r2, [pc, #528]	@ (8008fe0 <HAL_UART_IRQHandler+0x580>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d037      	beq.n	8008e42 <HAL_UART_IRQHandler+0x3e2>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a82      	ldr	r2, [pc, #520]	@ (8008fe4 <HAL_UART_IRQHandler+0x584>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d030      	beq.n	8008e42 <HAL_UART_IRQHandler+0x3e2>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a7f      	ldr	r2, [pc, #508]	@ (8008fe8 <HAL_UART_IRQHandler+0x588>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d029      	beq.n	8008e42 <HAL_UART_IRQHandler+0x3e2>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a7d      	ldr	r2, [pc, #500]	@ (8008fec <HAL_UART_IRQHandler+0x58c>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d022      	beq.n	8008e42 <HAL_UART_IRQHandler+0x3e2>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a7a      	ldr	r2, [pc, #488]	@ (8008ff0 <HAL_UART_IRQHandler+0x590>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d01b      	beq.n	8008e42 <HAL_UART_IRQHandler+0x3e2>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a78      	ldr	r2, [pc, #480]	@ (8008ff4 <HAL_UART_IRQHandler+0x594>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d014      	beq.n	8008e42 <HAL_UART_IRQHandler+0x3e2>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a75      	ldr	r2, [pc, #468]	@ (8008ff8 <HAL_UART_IRQHandler+0x598>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d00d      	beq.n	8008e42 <HAL_UART_IRQHandler+0x3e2>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a73      	ldr	r2, [pc, #460]	@ (8008ffc <HAL_UART_IRQHandler+0x59c>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d006      	beq.n	8008e42 <HAL_UART_IRQHandler+0x3e2>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a70      	ldr	r2, [pc, #448]	@ (8009000 <HAL_UART_IRQHandler+0x5a0>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d106      	bne.n	8008e50 <HAL_UART_IRQHandler+0x3f0>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	e005      	b.n	8008e5c <HAL_UART_IRQHandler+0x3fc>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f000 81ab 	beq.w	80091c0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e74:	429a      	cmp	r2, r3
 8008e76:	f080 81a3 	bcs.w	80091c0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e8a:	69db      	ldr	r3, [r3, #28]
 8008e8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e90:	f000 8087 	beq.w	8008fa2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ea0:	e853 3f00 	ldrex	r3, [r3]
 8008ea4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008ea8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008eac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008eb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	461a      	mov	r2, r3
 8008eba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ebe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ec2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008eca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008ece:	e841 2300 	strex	r3, r2, [r1]
 8008ed2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008ed6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1da      	bne.n	8008e94 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	3308      	adds	r3, #8
 8008ee4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ee8:	e853 3f00 	ldrex	r3, [r3]
 8008eec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008eee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ef0:	f023 0301 	bic.w	r3, r3, #1
 8008ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	3308      	adds	r3, #8
 8008efe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008f02:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008f06:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f08:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008f0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008f0e:	e841 2300 	strex	r3, r2, [r1]
 8008f12:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008f14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1e1      	bne.n	8008ede <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	3308      	adds	r3, #8
 8008f20:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f24:	e853 3f00 	ldrex	r3, [r3]
 8008f28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008f2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	3308      	adds	r3, #8
 8008f3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008f3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008f40:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f42:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008f44:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008f46:	e841 2300 	strex	r3, r2, [r1]
 8008f4a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008f4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1e3      	bne.n	8008f1a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2220      	movs	r2, #32
 8008f56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f68:	e853 3f00 	ldrex	r3, [r3]
 8008f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008f6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f70:	f023 0310 	bic.w	r3, r3, #16
 8008f74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f84:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f8a:	e841 2300 	strex	r3, r2, [r1]
 8008f8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d1e4      	bne.n	8008f60 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7f9 ffe1 	bl	8002f64 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2202      	movs	r2, #2
 8008fa6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	4619      	mov	r1, r3
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 f93b 	bl	8009238 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008fc2:	e0fd      	b.n	80091c0 <HAL_UART_IRQHandler+0x760>
 8008fc4:	40020010 	.word	0x40020010
 8008fc8:	40020028 	.word	0x40020028
 8008fcc:	40020040 	.word	0x40020040
 8008fd0:	40020058 	.word	0x40020058
 8008fd4:	40020070 	.word	0x40020070
 8008fd8:	40020088 	.word	0x40020088
 8008fdc:	400200a0 	.word	0x400200a0
 8008fe0:	400200b8 	.word	0x400200b8
 8008fe4:	40020410 	.word	0x40020410
 8008fe8:	40020428 	.word	0x40020428
 8008fec:	40020440 	.word	0x40020440
 8008ff0:	40020458 	.word	0x40020458
 8008ff4:	40020470 	.word	0x40020470
 8008ff8:	40020488 	.word	0x40020488
 8008ffc:	400204a0 	.word	0x400204a0
 8009000:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009010:	b29b      	uxth	r3, r3
 8009012:	1ad3      	subs	r3, r2, r3
 8009014:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800901e:	b29b      	uxth	r3, r3
 8009020:	2b00      	cmp	r3, #0
 8009022:	f000 80cf 	beq.w	80091c4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009026:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800902a:	2b00      	cmp	r3, #0
 800902c:	f000 80ca 	beq.w	80091c4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009038:	e853 3f00 	ldrex	r3, [r3]
 800903c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800903e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009040:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009044:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	461a      	mov	r2, r3
 800904e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009052:	647b      	str	r3, [r7, #68]	@ 0x44
 8009054:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009056:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009058:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800905a:	e841 2300 	strex	r3, r2, [r1]
 800905e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1e4      	bne.n	8009030 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	3308      	adds	r3, #8
 800906c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009070:	e853 3f00 	ldrex	r3, [r3]
 8009074:	623b      	str	r3, [r7, #32]
   return(result);
 8009076:	6a3a      	ldr	r2, [r7, #32]
 8009078:	4b55      	ldr	r3, [pc, #340]	@ (80091d0 <HAL_UART_IRQHandler+0x770>)
 800907a:	4013      	ands	r3, r2
 800907c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	3308      	adds	r3, #8
 8009086:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800908a:	633a      	str	r2, [r7, #48]	@ 0x30
 800908c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009090:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009092:	e841 2300 	strex	r3, r2, [r1]
 8009096:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1e3      	bne.n	8009066 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2220      	movs	r2, #32
 80090a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	e853 3f00 	ldrex	r3, [r3]
 80090be:	60fb      	str	r3, [r7, #12]
   return(result);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f023 0310 	bic.w	r3, r3, #16
 80090c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	461a      	mov	r2, r3
 80090d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80090d4:	61fb      	str	r3, [r7, #28]
 80090d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d8:	69b9      	ldr	r1, [r7, #24]
 80090da:	69fa      	ldr	r2, [r7, #28]
 80090dc:	e841 2300 	strex	r3, r2, [r1]
 80090e0:	617b      	str	r3, [r7, #20]
   return(result);
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d1e4      	bne.n	80090b2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2202      	movs	r2, #2
 80090ec:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80090ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80090f2:	4619      	mov	r1, r3
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f89f 	bl	8009238 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090fa:	e063      	b.n	80091c4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80090fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009100:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00e      	beq.n	8009126 <HAL_UART_IRQHandler+0x6c6>
 8009108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800910c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009110:	2b00      	cmp	r3, #0
 8009112:	d008      	beq.n	8009126 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800911c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f001 fa93 	bl	800a64a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009124:	e051      	b.n	80091ca <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800912a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800912e:	2b00      	cmp	r3, #0
 8009130:	d014      	beq.n	800915c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800913a:	2b00      	cmp	r3, #0
 800913c:	d105      	bne.n	800914a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800913e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009142:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009146:	2b00      	cmp	r3, #0
 8009148:	d008      	beq.n	800915c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800914e:	2b00      	cmp	r3, #0
 8009150:	d03a      	beq.n	80091c8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	4798      	blx	r3
    }
    return;
 800915a:	e035      	b.n	80091c8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800915c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009164:	2b00      	cmp	r3, #0
 8009166:	d009      	beq.n	800917c <HAL_UART_IRQHandler+0x71c>
 8009168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800916c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009170:	2b00      	cmp	r3, #0
 8009172:	d003      	beq.n	800917c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f001 fa3d 	bl	800a5f4 <UART_EndTransmit_IT>
    return;
 800917a:	e026      	b.n	80091ca <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800917c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009180:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009184:	2b00      	cmp	r3, #0
 8009186:	d009      	beq.n	800919c <HAL_UART_IRQHandler+0x73c>
 8009188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800918c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009190:	2b00      	cmp	r3, #0
 8009192:	d003      	beq.n	800919c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f001 fa6c 	bl	800a672 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800919a:	e016      	b.n	80091ca <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800919c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d010      	beq.n	80091ca <HAL_UART_IRQHandler+0x76a>
 80091a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	da0c      	bge.n	80091ca <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f001 fa54 	bl	800a65e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091b6:	e008      	b.n	80091ca <HAL_UART_IRQHandler+0x76a>
      return;
 80091b8:	bf00      	nop
 80091ba:	e006      	b.n	80091ca <HAL_UART_IRQHandler+0x76a>
    return;
 80091bc:	bf00      	nop
 80091be:	e004      	b.n	80091ca <HAL_UART_IRQHandler+0x76a>
      return;
 80091c0:	bf00      	nop
 80091c2:	e002      	b.n	80091ca <HAL_UART_IRQHandler+0x76a>
      return;
 80091c4:	bf00      	nop
 80091c6:	e000      	b.n	80091ca <HAL_UART_IRQHandler+0x76a>
    return;
 80091c8:	bf00      	nop
  }
}
 80091ca:	37e8      	adds	r7, #232	@ 0xe8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	effffffe 	.word	0xeffffffe

080091d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80091dc:	bf00      	nop
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009218:	bf00      	nop
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800922c:	bf00      	nop
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	460b      	mov	r3, r1
 8009242:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009244:	bf00      	nop
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009254:	b092      	sub	sp, #72	@ 0x48
 8009256:	af00      	add	r7, sp, #0
 8009258:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800925a:	2300      	movs	r3, #0
 800925c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	689a      	ldr	r2, [r3, #8]
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	431a      	orrs	r2, r3
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	695b      	ldr	r3, [r3, #20]
 800926e:	431a      	orrs	r2, r3
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	69db      	ldr	r3, [r3, #28]
 8009274:	4313      	orrs	r3, r2
 8009276:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	4bbe      	ldr	r3, [pc, #760]	@ (8009578 <UART_SetConfig+0x328>)
 8009280:	4013      	ands	r3, r2
 8009282:	697a      	ldr	r2, [r7, #20]
 8009284:	6812      	ldr	r2, [r2, #0]
 8009286:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009288:	430b      	orrs	r3, r1
 800928a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	68da      	ldr	r2, [r3, #12]
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	430a      	orrs	r2, r1
 80092a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	699b      	ldr	r3, [r3, #24]
 80092a6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4ab3      	ldr	r2, [pc, #716]	@ (800957c <UART_SetConfig+0x32c>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d004      	beq.n	80092bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092b8:	4313      	orrs	r3, r2
 80092ba:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	689a      	ldr	r2, [r3, #8]
 80092c2:	4baf      	ldr	r3, [pc, #700]	@ (8009580 <UART_SetConfig+0x330>)
 80092c4:	4013      	ands	r3, r2
 80092c6:	697a      	ldr	r2, [r7, #20]
 80092c8:	6812      	ldr	r2, [r2, #0]
 80092ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80092cc:	430b      	orrs	r3, r1
 80092ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092d6:	f023 010f 	bic.w	r1, r3, #15
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	430a      	orrs	r2, r1
 80092e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4aa6      	ldr	r2, [pc, #664]	@ (8009584 <UART_SetConfig+0x334>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d177      	bne.n	80093e0 <UART_SetConfig+0x190>
 80092f0:	4ba5      	ldr	r3, [pc, #660]	@ (8009588 <UART_SetConfig+0x338>)
 80092f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80092f8:	2b28      	cmp	r3, #40	@ 0x28
 80092fa:	d86d      	bhi.n	80093d8 <UART_SetConfig+0x188>
 80092fc:	a201      	add	r2, pc, #4	@ (adr r2, 8009304 <UART_SetConfig+0xb4>)
 80092fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009302:	bf00      	nop
 8009304:	080093a9 	.word	0x080093a9
 8009308:	080093d9 	.word	0x080093d9
 800930c:	080093d9 	.word	0x080093d9
 8009310:	080093d9 	.word	0x080093d9
 8009314:	080093d9 	.word	0x080093d9
 8009318:	080093d9 	.word	0x080093d9
 800931c:	080093d9 	.word	0x080093d9
 8009320:	080093d9 	.word	0x080093d9
 8009324:	080093b1 	.word	0x080093b1
 8009328:	080093d9 	.word	0x080093d9
 800932c:	080093d9 	.word	0x080093d9
 8009330:	080093d9 	.word	0x080093d9
 8009334:	080093d9 	.word	0x080093d9
 8009338:	080093d9 	.word	0x080093d9
 800933c:	080093d9 	.word	0x080093d9
 8009340:	080093d9 	.word	0x080093d9
 8009344:	080093b9 	.word	0x080093b9
 8009348:	080093d9 	.word	0x080093d9
 800934c:	080093d9 	.word	0x080093d9
 8009350:	080093d9 	.word	0x080093d9
 8009354:	080093d9 	.word	0x080093d9
 8009358:	080093d9 	.word	0x080093d9
 800935c:	080093d9 	.word	0x080093d9
 8009360:	080093d9 	.word	0x080093d9
 8009364:	080093c1 	.word	0x080093c1
 8009368:	080093d9 	.word	0x080093d9
 800936c:	080093d9 	.word	0x080093d9
 8009370:	080093d9 	.word	0x080093d9
 8009374:	080093d9 	.word	0x080093d9
 8009378:	080093d9 	.word	0x080093d9
 800937c:	080093d9 	.word	0x080093d9
 8009380:	080093d9 	.word	0x080093d9
 8009384:	080093c9 	.word	0x080093c9
 8009388:	080093d9 	.word	0x080093d9
 800938c:	080093d9 	.word	0x080093d9
 8009390:	080093d9 	.word	0x080093d9
 8009394:	080093d9 	.word	0x080093d9
 8009398:	080093d9 	.word	0x080093d9
 800939c:	080093d9 	.word	0x080093d9
 80093a0:	080093d9 	.word	0x080093d9
 80093a4:	080093d1 	.word	0x080093d1
 80093a8:	2301      	movs	r3, #1
 80093aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ae:	e222      	b.n	80097f6 <UART_SetConfig+0x5a6>
 80093b0:	2304      	movs	r3, #4
 80093b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093b6:	e21e      	b.n	80097f6 <UART_SetConfig+0x5a6>
 80093b8:	2308      	movs	r3, #8
 80093ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093be:	e21a      	b.n	80097f6 <UART_SetConfig+0x5a6>
 80093c0:	2310      	movs	r3, #16
 80093c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093c6:	e216      	b.n	80097f6 <UART_SetConfig+0x5a6>
 80093c8:	2320      	movs	r3, #32
 80093ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ce:	e212      	b.n	80097f6 <UART_SetConfig+0x5a6>
 80093d0:	2340      	movs	r3, #64	@ 0x40
 80093d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093d6:	e20e      	b.n	80097f6 <UART_SetConfig+0x5a6>
 80093d8:	2380      	movs	r3, #128	@ 0x80
 80093da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093de:	e20a      	b.n	80097f6 <UART_SetConfig+0x5a6>
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a69      	ldr	r2, [pc, #420]	@ (800958c <UART_SetConfig+0x33c>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d130      	bne.n	800944c <UART_SetConfig+0x1fc>
 80093ea:	4b67      	ldr	r3, [pc, #412]	@ (8009588 <UART_SetConfig+0x338>)
 80093ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093ee:	f003 0307 	and.w	r3, r3, #7
 80093f2:	2b05      	cmp	r3, #5
 80093f4:	d826      	bhi.n	8009444 <UART_SetConfig+0x1f4>
 80093f6:	a201      	add	r2, pc, #4	@ (adr r2, 80093fc <UART_SetConfig+0x1ac>)
 80093f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fc:	08009415 	.word	0x08009415
 8009400:	0800941d 	.word	0x0800941d
 8009404:	08009425 	.word	0x08009425
 8009408:	0800942d 	.word	0x0800942d
 800940c:	08009435 	.word	0x08009435
 8009410:	0800943d 	.word	0x0800943d
 8009414:	2300      	movs	r3, #0
 8009416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800941a:	e1ec      	b.n	80097f6 <UART_SetConfig+0x5a6>
 800941c:	2304      	movs	r3, #4
 800941e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009422:	e1e8      	b.n	80097f6 <UART_SetConfig+0x5a6>
 8009424:	2308      	movs	r3, #8
 8009426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800942a:	e1e4      	b.n	80097f6 <UART_SetConfig+0x5a6>
 800942c:	2310      	movs	r3, #16
 800942e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009432:	e1e0      	b.n	80097f6 <UART_SetConfig+0x5a6>
 8009434:	2320      	movs	r3, #32
 8009436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800943a:	e1dc      	b.n	80097f6 <UART_SetConfig+0x5a6>
 800943c:	2340      	movs	r3, #64	@ 0x40
 800943e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009442:	e1d8      	b.n	80097f6 <UART_SetConfig+0x5a6>
 8009444:	2380      	movs	r3, #128	@ 0x80
 8009446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800944a:	e1d4      	b.n	80097f6 <UART_SetConfig+0x5a6>
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a4f      	ldr	r2, [pc, #316]	@ (8009590 <UART_SetConfig+0x340>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d130      	bne.n	80094b8 <UART_SetConfig+0x268>
 8009456:	4b4c      	ldr	r3, [pc, #304]	@ (8009588 <UART_SetConfig+0x338>)
 8009458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800945a:	f003 0307 	and.w	r3, r3, #7
 800945e:	2b05      	cmp	r3, #5
 8009460:	d826      	bhi.n	80094b0 <UART_SetConfig+0x260>
 8009462:	a201      	add	r2, pc, #4	@ (adr r2, 8009468 <UART_SetConfig+0x218>)
 8009464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009468:	08009481 	.word	0x08009481
 800946c:	08009489 	.word	0x08009489
 8009470:	08009491 	.word	0x08009491
 8009474:	08009499 	.word	0x08009499
 8009478:	080094a1 	.word	0x080094a1
 800947c:	080094a9 	.word	0x080094a9
 8009480:	2300      	movs	r3, #0
 8009482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009486:	e1b6      	b.n	80097f6 <UART_SetConfig+0x5a6>
 8009488:	2304      	movs	r3, #4
 800948a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800948e:	e1b2      	b.n	80097f6 <UART_SetConfig+0x5a6>
 8009490:	2308      	movs	r3, #8
 8009492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009496:	e1ae      	b.n	80097f6 <UART_SetConfig+0x5a6>
 8009498:	2310      	movs	r3, #16
 800949a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800949e:	e1aa      	b.n	80097f6 <UART_SetConfig+0x5a6>
 80094a0:	2320      	movs	r3, #32
 80094a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094a6:	e1a6      	b.n	80097f6 <UART_SetConfig+0x5a6>
 80094a8:	2340      	movs	r3, #64	@ 0x40
 80094aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ae:	e1a2      	b.n	80097f6 <UART_SetConfig+0x5a6>
 80094b0:	2380      	movs	r3, #128	@ 0x80
 80094b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094b6:	e19e      	b.n	80097f6 <UART_SetConfig+0x5a6>
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a35      	ldr	r2, [pc, #212]	@ (8009594 <UART_SetConfig+0x344>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d130      	bne.n	8009524 <UART_SetConfig+0x2d4>
 80094c2:	4b31      	ldr	r3, [pc, #196]	@ (8009588 <UART_SetConfig+0x338>)
 80094c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094c6:	f003 0307 	and.w	r3, r3, #7
 80094ca:	2b05      	cmp	r3, #5
 80094cc:	d826      	bhi.n	800951c <UART_SetConfig+0x2cc>
 80094ce:	a201      	add	r2, pc, #4	@ (adr r2, 80094d4 <UART_SetConfig+0x284>)
 80094d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d4:	080094ed 	.word	0x080094ed
 80094d8:	080094f5 	.word	0x080094f5
 80094dc:	080094fd 	.word	0x080094fd
 80094e0:	08009505 	.word	0x08009505
 80094e4:	0800950d 	.word	0x0800950d
 80094e8:	08009515 	.word	0x08009515
 80094ec:	2300      	movs	r3, #0
 80094ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094f2:	e180      	b.n	80097f6 <UART_SetConfig+0x5a6>
 80094f4:	2304      	movs	r3, #4
 80094f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094fa:	e17c      	b.n	80097f6 <UART_SetConfig+0x5a6>
 80094fc:	2308      	movs	r3, #8
 80094fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009502:	e178      	b.n	80097f6 <UART_SetConfig+0x5a6>
 8009504:	2310      	movs	r3, #16
 8009506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800950a:	e174      	b.n	80097f6 <UART_SetConfig+0x5a6>
 800950c:	2320      	movs	r3, #32
 800950e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009512:	e170      	b.n	80097f6 <UART_SetConfig+0x5a6>
 8009514:	2340      	movs	r3, #64	@ 0x40
 8009516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800951a:	e16c      	b.n	80097f6 <UART_SetConfig+0x5a6>
 800951c:	2380      	movs	r3, #128	@ 0x80
 800951e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009522:	e168      	b.n	80097f6 <UART_SetConfig+0x5a6>
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a1b      	ldr	r2, [pc, #108]	@ (8009598 <UART_SetConfig+0x348>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d142      	bne.n	80095b4 <UART_SetConfig+0x364>
 800952e:	4b16      	ldr	r3, [pc, #88]	@ (8009588 <UART_SetConfig+0x338>)
 8009530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009532:	f003 0307 	and.w	r3, r3, #7
 8009536:	2b05      	cmp	r3, #5
 8009538:	d838      	bhi.n	80095ac <UART_SetConfig+0x35c>
 800953a:	a201      	add	r2, pc, #4	@ (adr r2, 8009540 <UART_SetConfig+0x2f0>)
 800953c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009540:	08009559 	.word	0x08009559
 8009544:	08009561 	.word	0x08009561
 8009548:	08009569 	.word	0x08009569
 800954c:	08009571 	.word	0x08009571
 8009550:	0800959d 	.word	0x0800959d
 8009554:	080095a5 	.word	0x080095a5
 8009558:	2300      	movs	r3, #0
 800955a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800955e:	e14a      	b.n	80097f6 <UART_SetConfig+0x5a6>
 8009560:	2304      	movs	r3, #4
 8009562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009566:	e146      	b.n	80097f6 <UART_SetConfig+0x5a6>
 8009568:	2308      	movs	r3, #8
 800956a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800956e:	e142      	b.n	80097f6 <UART_SetConfig+0x5a6>
 8009570:	2310      	movs	r3, #16
 8009572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009576:	e13e      	b.n	80097f6 <UART_SetConfig+0x5a6>
 8009578:	cfff69f3 	.word	0xcfff69f3
 800957c:	58000c00 	.word	0x58000c00
 8009580:	11fff4ff 	.word	0x11fff4ff
 8009584:	40011000 	.word	0x40011000
 8009588:	58024400 	.word	0x58024400
 800958c:	40004400 	.word	0x40004400
 8009590:	40004800 	.word	0x40004800
 8009594:	40004c00 	.word	0x40004c00
 8009598:	40005000 	.word	0x40005000
 800959c:	2320      	movs	r3, #32
 800959e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095a2:	e128      	b.n	80097f6 <UART_SetConfig+0x5a6>
 80095a4:	2340      	movs	r3, #64	@ 0x40
 80095a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095aa:	e124      	b.n	80097f6 <UART_SetConfig+0x5a6>
 80095ac:	2380      	movs	r3, #128	@ 0x80
 80095ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095b2:	e120      	b.n	80097f6 <UART_SetConfig+0x5a6>
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4acb      	ldr	r2, [pc, #812]	@ (80098e8 <UART_SetConfig+0x698>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d176      	bne.n	80096ac <UART_SetConfig+0x45c>
 80095be:	4bcb      	ldr	r3, [pc, #812]	@ (80098ec <UART_SetConfig+0x69c>)
 80095c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80095c6:	2b28      	cmp	r3, #40	@ 0x28
 80095c8:	d86c      	bhi.n	80096a4 <UART_SetConfig+0x454>
 80095ca:	a201      	add	r2, pc, #4	@ (adr r2, 80095d0 <UART_SetConfig+0x380>)
 80095cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d0:	08009675 	.word	0x08009675
 80095d4:	080096a5 	.word	0x080096a5
 80095d8:	080096a5 	.word	0x080096a5
 80095dc:	080096a5 	.word	0x080096a5
 80095e0:	080096a5 	.word	0x080096a5
 80095e4:	080096a5 	.word	0x080096a5
 80095e8:	080096a5 	.word	0x080096a5
 80095ec:	080096a5 	.word	0x080096a5
 80095f0:	0800967d 	.word	0x0800967d
 80095f4:	080096a5 	.word	0x080096a5
 80095f8:	080096a5 	.word	0x080096a5
 80095fc:	080096a5 	.word	0x080096a5
 8009600:	080096a5 	.word	0x080096a5
 8009604:	080096a5 	.word	0x080096a5
 8009608:	080096a5 	.word	0x080096a5
 800960c:	080096a5 	.word	0x080096a5
 8009610:	08009685 	.word	0x08009685
 8009614:	080096a5 	.word	0x080096a5
 8009618:	080096a5 	.word	0x080096a5
 800961c:	080096a5 	.word	0x080096a5
 8009620:	080096a5 	.word	0x080096a5
 8009624:	080096a5 	.word	0x080096a5
 8009628:	080096a5 	.word	0x080096a5
 800962c:	080096a5 	.word	0x080096a5
 8009630:	0800968d 	.word	0x0800968d
 8009634:	080096a5 	.word	0x080096a5
 8009638:	080096a5 	.word	0x080096a5
 800963c:	080096a5 	.word	0x080096a5
 8009640:	080096a5 	.word	0x080096a5
 8009644:	080096a5 	.word	0x080096a5
 8009648:	080096a5 	.word	0x080096a5
 800964c:	080096a5 	.word	0x080096a5
 8009650:	08009695 	.word	0x08009695
 8009654:	080096a5 	.word	0x080096a5
 8009658:	080096a5 	.word	0x080096a5
 800965c:	080096a5 	.word	0x080096a5
 8009660:	080096a5 	.word	0x080096a5
 8009664:	080096a5 	.word	0x080096a5
 8009668:	080096a5 	.word	0x080096a5
 800966c:	080096a5 	.word	0x080096a5
 8009670:	0800969d 	.word	0x0800969d
 8009674:	2301      	movs	r3, #1
 8009676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800967a:	e0bc      	b.n	80097f6 <UART_SetConfig+0x5a6>
 800967c:	2304      	movs	r3, #4
 800967e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009682:	e0b8      	b.n	80097f6 <UART_SetConfig+0x5a6>
 8009684:	2308      	movs	r3, #8
 8009686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800968a:	e0b4      	b.n	80097f6 <UART_SetConfig+0x5a6>
 800968c:	2310      	movs	r3, #16
 800968e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009692:	e0b0      	b.n	80097f6 <UART_SetConfig+0x5a6>
 8009694:	2320      	movs	r3, #32
 8009696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800969a:	e0ac      	b.n	80097f6 <UART_SetConfig+0x5a6>
 800969c:	2340      	movs	r3, #64	@ 0x40
 800969e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096a2:	e0a8      	b.n	80097f6 <UART_SetConfig+0x5a6>
 80096a4:	2380      	movs	r3, #128	@ 0x80
 80096a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096aa:	e0a4      	b.n	80097f6 <UART_SetConfig+0x5a6>
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a8f      	ldr	r2, [pc, #572]	@ (80098f0 <UART_SetConfig+0x6a0>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d130      	bne.n	8009718 <UART_SetConfig+0x4c8>
 80096b6:	4b8d      	ldr	r3, [pc, #564]	@ (80098ec <UART_SetConfig+0x69c>)
 80096b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096ba:	f003 0307 	and.w	r3, r3, #7
 80096be:	2b05      	cmp	r3, #5
 80096c0:	d826      	bhi.n	8009710 <UART_SetConfig+0x4c0>
 80096c2:	a201      	add	r2, pc, #4	@ (adr r2, 80096c8 <UART_SetConfig+0x478>)
 80096c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c8:	080096e1 	.word	0x080096e1
 80096cc:	080096e9 	.word	0x080096e9
 80096d0:	080096f1 	.word	0x080096f1
 80096d4:	080096f9 	.word	0x080096f9
 80096d8:	08009701 	.word	0x08009701
 80096dc:	08009709 	.word	0x08009709
 80096e0:	2300      	movs	r3, #0
 80096e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096e6:	e086      	b.n	80097f6 <UART_SetConfig+0x5a6>
 80096e8:	2304      	movs	r3, #4
 80096ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ee:	e082      	b.n	80097f6 <UART_SetConfig+0x5a6>
 80096f0:	2308      	movs	r3, #8
 80096f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096f6:	e07e      	b.n	80097f6 <UART_SetConfig+0x5a6>
 80096f8:	2310      	movs	r3, #16
 80096fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096fe:	e07a      	b.n	80097f6 <UART_SetConfig+0x5a6>
 8009700:	2320      	movs	r3, #32
 8009702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009706:	e076      	b.n	80097f6 <UART_SetConfig+0x5a6>
 8009708:	2340      	movs	r3, #64	@ 0x40
 800970a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800970e:	e072      	b.n	80097f6 <UART_SetConfig+0x5a6>
 8009710:	2380      	movs	r3, #128	@ 0x80
 8009712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009716:	e06e      	b.n	80097f6 <UART_SetConfig+0x5a6>
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a75      	ldr	r2, [pc, #468]	@ (80098f4 <UART_SetConfig+0x6a4>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d130      	bne.n	8009784 <UART_SetConfig+0x534>
 8009722:	4b72      	ldr	r3, [pc, #456]	@ (80098ec <UART_SetConfig+0x69c>)
 8009724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009726:	f003 0307 	and.w	r3, r3, #7
 800972a:	2b05      	cmp	r3, #5
 800972c:	d826      	bhi.n	800977c <UART_SetConfig+0x52c>
 800972e:	a201      	add	r2, pc, #4	@ (adr r2, 8009734 <UART_SetConfig+0x4e4>)
 8009730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009734:	0800974d 	.word	0x0800974d
 8009738:	08009755 	.word	0x08009755
 800973c:	0800975d 	.word	0x0800975d
 8009740:	08009765 	.word	0x08009765
 8009744:	0800976d 	.word	0x0800976d
 8009748:	08009775 	.word	0x08009775
 800974c:	2300      	movs	r3, #0
 800974e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009752:	e050      	b.n	80097f6 <UART_SetConfig+0x5a6>
 8009754:	2304      	movs	r3, #4
 8009756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800975a:	e04c      	b.n	80097f6 <UART_SetConfig+0x5a6>
 800975c:	2308      	movs	r3, #8
 800975e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009762:	e048      	b.n	80097f6 <UART_SetConfig+0x5a6>
 8009764:	2310      	movs	r3, #16
 8009766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800976a:	e044      	b.n	80097f6 <UART_SetConfig+0x5a6>
 800976c:	2320      	movs	r3, #32
 800976e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009772:	e040      	b.n	80097f6 <UART_SetConfig+0x5a6>
 8009774:	2340      	movs	r3, #64	@ 0x40
 8009776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800977a:	e03c      	b.n	80097f6 <UART_SetConfig+0x5a6>
 800977c:	2380      	movs	r3, #128	@ 0x80
 800977e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009782:	e038      	b.n	80097f6 <UART_SetConfig+0x5a6>
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a5b      	ldr	r2, [pc, #364]	@ (80098f8 <UART_SetConfig+0x6a8>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d130      	bne.n	80097f0 <UART_SetConfig+0x5a0>
 800978e:	4b57      	ldr	r3, [pc, #348]	@ (80098ec <UART_SetConfig+0x69c>)
 8009790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009792:	f003 0307 	and.w	r3, r3, #7
 8009796:	2b05      	cmp	r3, #5
 8009798:	d826      	bhi.n	80097e8 <UART_SetConfig+0x598>
 800979a:	a201      	add	r2, pc, #4	@ (adr r2, 80097a0 <UART_SetConfig+0x550>)
 800979c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a0:	080097b9 	.word	0x080097b9
 80097a4:	080097c1 	.word	0x080097c1
 80097a8:	080097c9 	.word	0x080097c9
 80097ac:	080097d1 	.word	0x080097d1
 80097b0:	080097d9 	.word	0x080097d9
 80097b4:	080097e1 	.word	0x080097e1
 80097b8:	2302      	movs	r3, #2
 80097ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097be:	e01a      	b.n	80097f6 <UART_SetConfig+0x5a6>
 80097c0:	2304      	movs	r3, #4
 80097c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097c6:	e016      	b.n	80097f6 <UART_SetConfig+0x5a6>
 80097c8:	2308      	movs	r3, #8
 80097ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ce:	e012      	b.n	80097f6 <UART_SetConfig+0x5a6>
 80097d0:	2310      	movs	r3, #16
 80097d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097d6:	e00e      	b.n	80097f6 <UART_SetConfig+0x5a6>
 80097d8:	2320      	movs	r3, #32
 80097da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097de:	e00a      	b.n	80097f6 <UART_SetConfig+0x5a6>
 80097e0:	2340      	movs	r3, #64	@ 0x40
 80097e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097e6:	e006      	b.n	80097f6 <UART_SetConfig+0x5a6>
 80097e8:	2380      	movs	r3, #128	@ 0x80
 80097ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ee:	e002      	b.n	80097f6 <UART_SetConfig+0x5a6>
 80097f0:	2380      	movs	r3, #128	@ 0x80
 80097f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a3f      	ldr	r2, [pc, #252]	@ (80098f8 <UART_SetConfig+0x6a8>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	f040 80f8 	bne.w	80099f2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009802:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009806:	2b20      	cmp	r3, #32
 8009808:	dc46      	bgt.n	8009898 <UART_SetConfig+0x648>
 800980a:	2b02      	cmp	r3, #2
 800980c:	f2c0 8082 	blt.w	8009914 <UART_SetConfig+0x6c4>
 8009810:	3b02      	subs	r3, #2
 8009812:	2b1e      	cmp	r3, #30
 8009814:	d87e      	bhi.n	8009914 <UART_SetConfig+0x6c4>
 8009816:	a201      	add	r2, pc, #4	@ (adr r2, 800981c <UART_SetConfig+0x5cc>)
 8009818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800981c:	0800989f 	.word	0x0800989f
 8009820:	08009915 	.word	0x08009915
 8009824:	080098a7 	.word	0x080098a7
 8009828:	08009915 	.word	0x08009915
 800982c:	08009915 	.word	0x08009915
 8009830:	08009915 	.word	0x08009915
 8009834:	080098b7 	.word	0x080098b7
 8009838:	08009915 	.word	0x08009915
 800983c:	08009915 	.word	0x08009915
 8009840:	08009915 	.word	0x08009915
 8009844:	08009915 	.word	0x08009915
 8009848:	08009915 	.word	0x08009915
 800984c:	08009915 	.word	0x08009915
 8009850:	08009915 	.word	0x08009915
 8009854:	080098c7 	.word	0x080098c7
 8009858:	08009915 	.word	0x08009915
 800985c:	08009915 	.word	0x08009915
 8009860:	08009915 	.word	0x08009915
 8009864:	08009915 	.word	0x08009915
 8009868:	08009915 	.word	0x08009915
 800986c:	08009915 	.word	0x08009915
 8009870:	08009915 	.word	0x08009915
 8009874:	08009915 	.word	0x08009915
 8009878:	08009915 	.word	0x08009915
 800987c:	08009915 	.word	0x08009915
 8009880:	08009915 	.word	0x08009915
 8009884:	08009915 	.word	0x08009915
 8009888:	08009915 	.word	0x08009915
 800988c:	08009915 	.word	0x08009915
 8009890:	08009915 	.word	0x08009915
 8009894:	08009907 	.word	0x08009907
 8009898:	2b40      	cmp	r3, #64	@ 0x40
 800989a:	d037      	beq.n	800990c <UART_SetConfig+0x6bc>
 800989c:	e03a      	b.n	8009914 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800989e:	f7fe f83d 	bl	800791c <HAL_RCCEx_GetD3PCLK1Freq>
 80098a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098a4:	e03c      	b.n	8009920 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7fe f84c 	bl	8007948 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80098b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098b4:	e034      	b.n	8009920 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098b6:	f107 0318 	add.w	r3, r7, #24
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7fe f998 	bl	8007bf0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80098c0:	69fb      	ldr	r3, [r7, #28]
 80098c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098c4:	e02c      	b.n	8009920 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098c6:	4b09      	ldr	r3, [pc, #36]	@ (80098ec <UART_SetConfig+0x69c>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f003 0320 	and.w	r3, r3, #32
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d016      	beq.n	8009900 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80098d2:	4b06      	ldr	r3, [pc, #24]	@ (80098ec <UART_SetConfig+0x69c>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	08db      	lsrs	r3, r3, #3
 80098d8:	f003 0303 	and.w	r3, r3, #3
 80098dc:	4a07      	ldr	r2, [pc, #28]	@ (80098fc <UART_SetConfig+0x6ac>)
 80098de:	fa22 f303 	lsr.w	r3, r2, r3
 80098e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80098e4:	e01c      	b.n	8009920 <UART_SetConfig+0x6d0>
 80098e6:	bf00      	nop
 80098e8:	40011400 	.word	0x40011400
 80098ec:	58024400 	.word	0x58024400
 80098f0:	40007800 	.word	0x40007800
 80098f4:	40007c00 	.word	0x40007c00
 80098f8:	58000c00 	.word	0x58000c00
 80098fc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009900:	4b9d      	ldr	r3, [pc, #628]	@ (8009b78 <UART_SetConfig+0x928>)
 8009902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009904:	e00c      	b.n	8009920 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009906:	4b9d      	ldr	r3, [pc, #628]	@ (8009b7c <UART_SetConfig+0x92c>)
 8009908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800990a:	e009      	b.n	8009920 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800990c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009912:	e005      	b.n	8009920 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009914:	2300      	movs	r3, #0
 8009916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800991e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009922:	2b00      	cmp	r3, #0
 8009924:	f000 81de 	beq.w	8009ce4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800992c:	4a94      	ldr	r2, [pc, #592]	@ (8009b80 <UART_SetConfig+0x930>)
 800992e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009932:	461a      	mov	r2, r3
 8009934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009936:	fbb3 f3f2 	udiv	r3, r3, r2
 800993a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	685a      	ldr	r2, [r3, #4]
 8009940:	4613      	mov	r3, r2
 8009942:	005b      	lsls	r3, r3, #1
 8009944:	4413      	add	r3, r2
 8009946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009948:	429a      	cmp	r2, r3
 800994a:	d305      	bcc.n	8009958 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009952:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009954:	429a      	cmp	r2, r3
 8009956:	d903      	bls.n	8009960 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800995e:	e1c1      	b.n	8009ce4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009962:	2200      	movs	r2, #0
 8009964:	60bb      	str	r3, [r7, #8]
 8009966:	60fa      	str	r2, [r7, #12]
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800996c:	4a84      	ldr	r2, [pc, #528]	@ (8009b80 <UART_SetConfig+0x930>)
 800996e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009972:	b29b      	uxth	r3, r3
 8009974:	2200      	movs	r2, #0
 8009976:	603b      	str	r3, [r7, #0]
 8009978:	607a      	str	r2, [r7, #4]
 800997a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800997e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009982:	f7f6 fd65 	bl	8000450 <__aeabi_uldivmod>
 8009986:	4602      	mov	r2, r0
 8009988:	460b      	mov	r3, r1
 800998a:	4610      	mov	r0, r2
 800998c:	4619      	mov	r1, r3
 800998e:	f04f 0200 	mov.w	r2, #0
 8009992:	f04f 0300 	mov.w	r3, #0
 8009996:	020b      	lsls	r3, r1, #8
 8009998:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800999c:	0202      	lsls	r2, r0, #8
 800999e:	6979      	ldr	r1, [r7, #20]
 80099a0:	6849      	ldr	r1, [r1, #4]
 80099a2:	0849      	lsrs	r1, r1, #1
 80099a4:	2000      	movs	r0, #0
 80099a6:	460c      	mov	r4, r1
 80099a8:	4605      	mov	r5, r0
 80099aa:	eb12 0804 	adds.w	r8, r2, r4
 80099ae:	eb43 0905 	adc.w	r9, r3, r5
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	469a      	mov	sl, r3
 80099ba:	4693      	mov	fp, r2
 80099bc:	4652      	mov	r2, sl
 80099be:	465b      	mov	r3, fp
 80099c0:	4640      	mov	r0, r8
 80099c2:	4649      	mov	r1, r9
 80099c4:	f7f6 fd44 	bl	8000450 <__aeabi_uldivmod>
 80099c8:	4602      	mov	r2, r0
 80099ca:	460b      	mov	r3, r1
 80099cc:	4613      	mov	r3, r2
 80099ce:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80099d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80099d6:	d308      	bcc.n	80099ea <UART_SetConfig+0x79a>
 80099d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099de:	d204      	bcs.n	80099ea <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80099e6:	60da      	str	r2, [r3, #12]
 80099e8:	e17c      	b.n	8009ce4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80099f0:	e178      	b.n	8009ce4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	69db      	ldr	r3, [r3, #28]
 80099f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099fa:	f040 80c5 	bne.w	8009b88 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80099fe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009a02:	2b20      	cmp	r3, #32
 8009a04:	dc48      	bgt.n	8009a98 <UART_SetConfig+0x848>
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	db7b      	blt.n	8009b02 <UART_SetConfig+0x8b2>
 8009a0a:	2b20      	cmp	r3, #32
 8009a0c:	d879      	bhi.n	8009b02 <UART_SetConfig+0x8b2>
 8009a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a14 <UART_SetConfig+0x7c4>)
 8009a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a14:	08009a9f 	.word	0x08009a9f
 8009a18:	08009aa7 	.word	0x08009aa7
 8009a1c:	08009b03 	.word	0x08009b03
 8009a20:	08009b03 	.word	0x08009b03
 8009a24:	08009aaf 	.word	0x08009aaf
 8009a28:	08009b03 	.word	0x08009b03
 8009a2c:	08009b03 	.word	0x08009b03
 8009a30:	08009b03 	.word	0x08009b03
 8009a34:	08009abf 	.word	0x08009abf
 8009a38:	08009b03 	.word	0x08009b03
 8009a3c:	08009b03 	.word	0x08009b03
 8009a40:	08009b03 	.word	0x08009b03
 8009a44:	08009b03 	.word	0x08009b03
 8009a48:	08009b03 	.word	0x08009b03
 8009a4c:	08009b03 	.word	0x08009b03
 8009a50:	08009b03 	.word	0x08009b03
 8009a54:	08009acf 	.word	0x08009acf
 8009a58:	08009b03 	.word	0x08009b03
 8009a5c:	08009b03 	.word	0x08009b03
 8009a60:	08009b03 	.word	0x08009b03
 8009a64:	08009b03 	.word	0x08009b03
 8009a68:	08009b03 	.word	0x08009b03
 8009a6c:	08009b03 	.word	0x08009b03
 8009a70:	08009b03 	.word	0x08009b03
 8009a74:	08009b03 	.word	0x08009b03
 8009a78:	08009b03 	.word	0x08009b03
 8009a7c:	08009b03 	.word	0x08009b03
 8009a80:	08009b03 	.word	0x08009b03
 8009a84:	08009b03 	.word	0x08009b03
 8009a88:	08009b03 	.word	0x08009b03
 8009a8c:	08009b03 	.word	0x08009b03
 8009a90:	08009b03 	.word	0x08009b03
 8009a94:	08009af5 	.word	0x08009af5
 8009a98:	2b40      	cmp	r3, #64	@ 0x40
 8009a9a:	d02e      	beq.n	8009afa <UART_SetConfig+0x8aa>
 8009a9c:	e031      	b.n	8009b02 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a9e:	f7fc fcc5 	bl	800642c <HAL_RCC_GetPCLK1Freq>
 8009aa2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009aa4:	e033      	b.n	8009b0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009aa6:	f7fc fcd7 	bl	8006458 <HAL_RCC_GetPCLK2Freq>
 8009aaa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009aac:	e02f      	b.n	8009b0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009aae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7fd ff48 	bl	8007948 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009abc:	e027      	b.n	8009b0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009abe:	f107 0318 	add.w	r3, r7, #24
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fe f894 	bl	8007bf0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009acc:	e01f      	b.n	8009b0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ace:	4b2d      	ldr	r3, [pc, #180]	@ (8009b84 <UART_SetConfig+0x934>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f003 0320 	and.w	r3, r3, #32
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d009      	beq.n	8009aee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ada:	4b2a      	ldr	r3, [pc, #168]	@ (8009b84 <UART_SetConfig+0x934>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	08db      	lsrs	r3, r3, #3
 8009ae0:	f003 0303 	and.w	r3, r3, #3
 8009ae4:	4a24      	ldr	r2, [pc, #144]	@ (8009b78 <UART_SetConfig+0x928>)
 8009ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8009aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009aec:	e00f      	b.n	8009b0e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009aee:	4b22      	ldr	r3, [pc, #136]	@ (8009b78 <UART_SetConfig+0x928>)
 8009af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009af2:	e00c      	b.n	8009b0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009af4:	4b21      	ldr	r3, [pc, #132]	@ (8009b7c <UART_SetConfig+0x92c>)
 8009af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009af8:	e009      	b.n	8009b0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009afa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b00:	e005      	b.n	8009b0e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009b02:	2300      	movs	r3, #0
 8009b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009b0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f000 80e7 	beq.w	8009ce4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b1a:	4a19      	ldr	r2, [pc, #100]	@ (8009b80 <UART_SetConfig+0x930>)
 8009b1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b20:	461a      	mov	r2, r3
 8009b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b24:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b28:	005a      	lsls	r2, r3, #1
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	085b      	lsrs	r3, r3, #1
 8009b30:	441a      	add	r2, r3
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b3e:	2b0f      	cmp	r3, #15
 8009b40:	d916      	bls.n	8009b70 <UART_SetConfig+0x920>
 8009b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b48:	d212      	bcs.n	8009b70 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	f023 030f 	bic.w	r3, r3, #15
 8009b52:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b56:	085b      	lsrs	r3, r3, #1
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	f003 0307 	and.w	r3, r3, #7
 8009b5e:	b29a      	uxth	r2, r3
 8009b60:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009b62:	4313      	orrs	r3, r2
 8009b64:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009b6c:	60da      	str	r2, [r3, #12]
 8009b6e:	e0b9      	b.n	8009ce4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009b70:	2301      	movs	r3, #1
 8009b72:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009b76:	e0b5      	b.n	8009ce4 <UART_SetConfig+0xa94>
 8009b78:	03d09000 	.word	0x03d09000
 8009b7c:	003d0900 	.word	0x003d0900
 8009b80:	0801e254 	.word	0x0801e254
 8009b84:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b88:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009b8c:	2b20      	cmp	r3, #32
 8009b8e:	dc49      	bgt.n	8009c24 <UART_SetConfig+0x9d4>
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	db7c      	blt.n	8009c8e <UART_SetConfig+0xa3e>
 8009b94:	2b20      	cmp	r3, #32
 8009b96:	d87a      	bhi.n	8009c8e <UART_SetConfig+0xa3e>
 8009b98:	a201      	add	r2, pc, #4	@ (adr r2, 8009ba0 <UART_SetConfig+0x950>)
 8009b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9e:	bf00      	nop
 8009ba0:	08009c2b 	.word	0x08009c2b
 8009ba4:	08009c33 	.word	0x08009c33
 8009ba8:	08009c8f 	.word	0x08009c8f
 8009bac:	08009c8f 	.word	0x08009c8f
 8009bb0:	08009c3b 	.word	0x08009c3b
 8009bb4:	08009c8f 	.word	0x08009c8f
 8009bb8:	08009c8f 	.word	0x08009c8f
 8009bbc:	08009c8f 	.word	0x08009c8f
 8009bc0:	08009c4b 	.word	0x08009c4b
 8009bc4:	08009c8f 	.word	0x08009c8f
 8009bc8:	08009c8f 	.word	0x08009c8f
 8009bcc:	08009c8f 	.word	0x08009c8f
 8009bd0:	08009c8f 	.word	0x08009c8f
 8009bd4:	08009c8f 	.word	0x08009c8f
 8009bd8:	08009c8f 	.word	0x08009c8f
 8009bdc:	08009c8f 	.word	0x08009c8f
 8009be0:	08009c5b 	.word	0x08009c5b
 8009be4:	08009c8f 	.word	0x08009c8f
 8009be8:	08009c8f 	.word	0x08009c8f
 8009bec:	08009c8f 	.word	0x08009c8f
 8009bf0:	08009c8f 	.word	0x08009c8f
 8009bf4:	08009c8f 	.word	0x08009c8f
 8009bf8:	08009c8f 	.word	0x08009c8f
 8009bfc:	08009c8f 	.word	0x08009c8f
 8009c00:	08009c8f 	.word	0x08009c8f
 8009c04:	08009c8f 	.word	0x08009c8f
 8009c08:	08009c8f 	.word	0x08009c8f
 8009c0c:	08009c8f 	.word	0x08009c8f
 8009c10:	08009c8f 	.word	0x08009c8f
 8009c14:	08009c8f 	.word	0x08009c8f
 8009c18:	08009c8f 	.word	0x08009c8f
 8009c1c:	08009c8f 	.word	0x08009c8f
 8009c20:	08009c81 	.word	0x08009c81
 8009c24:	2b40      	cmp	r3, #64	@ 0x40
 8009c26:	d02e      	beq.n	8009c86 <UART_SetConfig+0xa36>
 8009c28:	e031      	b.n	8009c8e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c2a:	f7fc fbff 	bl	800642c <HAL_RCC_GetPCLK1Freq>
 8009c2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c30:	e033      	b.n	8009c9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c32:	f7fc fc11 	bl	8006458 <HAL_RCC_GetPCLK2Freq>
 8009c36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c38:	e02f      	b.n	8009c9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7fd fe82 	bl	8007948 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c48:	e027      	b.n	8009c9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c4a:	f107 0318 	add.w	r3, r7, #24
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7fd ffce 	bl	8007bf0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c58:	e01f      	b.n	8009c9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8009d10 <UART_SetConfig+0xac0>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f003 0320 	and.w	r3, r3, #32
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d009      	beq.n	8009c7a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c66:	4b2a      	ldr	r3, [pc, #168]	@ (8009d10 <UART_SetConfig+0xac0>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	08db      	lsrs	r3, r3, #3
 8009c6c:	f003 0303 	and.w	r3, r3, #3
 8009c70:	4a28      	ldr	r2, [pc, #160]	@ (8009d14 <UART_SetConfig+0xac4>)
 8009c72:	fa22 f303 	lsr.w	r3, r2, r3
 8009c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c78:	e00f      	b.n	8009c9a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009c7a:	4b26      	ldr	r3, [pc, #152]	@ (8009d14 <UART_SetConfig+0xac4>)
 8009c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c7e:	e00c      	b.n	8009c9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c80:	4b25      	ldr	r3, [pc, #148]	@ (8009d18 <UART_SetConfig+0xac8>)
 8009c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c84:	e009      	b.n	8009c9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c8c:	e005      	b.n	8009c9a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009c98:	bf00      	nop
    }

    if (pclk != 0U)
 8009c9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d021      	beq.n	8009ce4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8009d1c <UART_SetConfig+0xacc>)
 8009ca6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009caa:	461a      	mov	r2, r3
 8009cac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cae:	fbb3 f2f2 	udiv	r2, r3, r2
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	085b      	lsrs	r3, r3, #1
 8009cb8:	441a      	add	r2, r3
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cc6:	2b0f      	cmp	r3, #15
 8009cc8:	d909      	bls.n	8009cde <UART_SetConfig+0xa8e>
 8009cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cd0:	d205      	bcs.n	8009cde <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd4:	b29a      	uxth	r2, r3
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	60da      	str	r2, [r3, #12]
 8009cdc:	e002      	b.n	8009ce4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009d00:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3748      	adds	r7, #72	@ 0x48
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d0e:	bf00      	nop
 8009d10:	58024400 	.word	0x58024400
 8009d14:	03d09000 	.word	0x03d09000
 8009d18:	003d0900 	.word	0x003d0900
 8009d1c:	0801e254 	.word	0x0801e254

08009d20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d2c:	f003 0308 	and.w	r3, r3, #8
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d00a      	beq.n	8009d4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	430a      	orrs	r2, r1
 8009d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d4e:	f003 0301 	and.w	r3, r3, #1
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d00a      	beq.n	8009d6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	430a      	orrs	r2, r1
 8009d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d70:	f003 0302 	and.w	r3, r3, #2
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d00a      	beq.n	8009d8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	430a      	orrs	r2, r1
 8009d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d92:	f003 0304 	and.w	r3, r3, #4
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00a      	beq.n	8009db0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	430a      	orrs	r2, r1
 8009dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009db4:	f003 0310 	and.w	r3, r3, #16
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d00a      	beq.n	8009dd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	430a      	orrs	r2, r1
 8009dd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dd6:	f003 0320 	and.w	r3, r3, #32
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00a      	beq.n	8009df4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	430a      	orrs	r2, r1
 8009df2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d01a      	beq.n	8009e36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	430a      	orrs	r2, r1
 8009e14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e1e:	d10a      	bne.n	8009e36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	430a      	orrs	r2, r1
 8009e34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00a      	beq.n	8009e58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	430a      	orrs	r2, r1
 8009e56:	605a      	str	r2, [r3, #4]
  }
}
 8009e58:	bf00      	nop
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b098      	sub	sp, #96	@ 0x60
 8009e68:	af02      	add	r7, sp, #8
 8009e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e74:	f7f8 f9b8 	bl	80021e8 <HAL_GetTick>
 8009e78:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f003 0308 	and.w	r3, r3, #8
 8009e84:	2b08      	cmp	r3, #8
 8009e86:	d12f      	bne.n	8009ee8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009e8c:	9300      	str	r3, [sp, #0]
 8009e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e90:	2200      	movs	r2, #0
 8009e92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 f88e 	bl	8009fb8 <UART_WaitOnFlagUntilTimeout>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d022      	beq.n	8009ee8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eaa:	e853 3f00 	ldrex	r3, [r3]
 8009eae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009eb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ec0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ec2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ec6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ec8:	e841 2300 	strex	r3, r2, [r1]
 8009ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d1e6      	bne.n	8009ea2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2220      	movs	r2, #32
 8009ed8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ee4:	2303      	movs	r3, #3
 8009ee6:	e063      	b.n	8009fb0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f003 0304 	and.w	r3, r3, #4
 8009ef2:	2b04      	cmp	r3, #4
 8009ef4:	d149      	bne.n	8009f8a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ef6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009efa:	9300      	str	r3, [sp, #0]
 8009efc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009efe:	2200      	movs	r2, #0
 8009f00:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 f857 	bl	8009fb8 <UART_WaitOnFlagUntilTimeout>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d03c      	beq.n	8009f8a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f18:	e853 3f00 	ldrex	r3, [r3]
 8009f1c:	623b      	str	r3, [r7, #32]
   return(result);
 8009f1e:	6a3b      	ldr	r3, [r7, #32]
 8009f20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f30:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f36:	e841 2300 	strex	r3, r2, [r1]
 8009f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d1e6      	bne.n	8009f10 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	3308      	adds	r3, #8
 8009f48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	e853 3f00 	ldrex	r3, [r3]
 8009f50:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f023 0301 	bic.w	r3, r3, #1
 8009f58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	3308      	adds	r3, #8
 8009f60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f62:	61fa      	str	r2, [r7, #28]
 8009f64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f66:	69b9      	ldr	r1, [r7, #24]
 8009f68:	69fa      	ldr	r2, [r7, #28]
 8009f6a:	e841 2300 	strex	r3, r2, [r1]
 8009f6e:	617b      	str	r3, [r7, #20]
   return(result);
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d1e5      	bne.n	8009f42 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2220      	movs	r2, #32
 8009f7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2200      	movs	r2, #0
 8009f82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f86:	2303      	movs	r3, #3
 8009f88:	e012      	b.n	8009fb0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2220      	movs	r2, #32
 8009f8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2220      	movs	r2, #32
 8009f96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009fae:	2300      	movs	r3, #0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3758      	adds	r7, #88	@ 0x58
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	603b      	str	r3, [r7, #0]
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fc8:	e04f      	b.n	800a06a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009fd0:	d04b      	beq.n	800a06a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fd2:	f7f8 f909 	bl	80021e8 <HAL_GetTick>
 8009fd6:	4602      	mov	r2, r0
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	1ad3      	subs	r3, r2, r3
 8009fdc:	69ba      	ldr	r2, [r7, #24]
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d302      	bcc.n	8009fe8 <UART_WaitOnFlagUntilTimeout+0x30>
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d101      	bne.n	8009fec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009fe8:	2303      	movs	r3, #3
 8009fea:	e04e      	b.n	800a08a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 0304 	and.w	r3, r3, #4
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d037      	beq.n	800a06a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	2b80      	cmp	r3, #128	@ 0x80
 8009ffe:	d034      	beq.n	800a06a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	2b40      	cmp	r3, #64	@ 0x40
 800a004:	d031      	beq.n	800a06a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	69db      	ldr	r3, [r3, #28]
 800a00c:	f003 0308 	and.w	r3, r3, #8
 800a010:	2b08      	cmp	r3, #8
 800a012:	d110      	bne.n	800a036 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	2208      	movs	r2, #8
 800a01a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f000 f921 	bl	800a264 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2208      	movs	r2, #8
 800a026:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a032:	2301      	movs	r3, #1
 800a034:	e029      	b.n	800a08a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	69db      	ldr	r3, [r3, #28]
 800a03c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a040:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a044:	d111      	bne.n	800a06a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a04e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f000 f907 	bl	800a264 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2220      	movs	r2, #32
 800a05a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2200      	movs	r2, #0
 800a062:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a066:	2303      	movs	r3, #3
 800a068:	e00f      	b.n	800a08a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	69da      	ldr	r2, [r3, #28]
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	4013      	ands	r3, r2
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	429a      	cmp	r2, r3
 800a078:	bf0c      	ite	eq
 800a07a:	2301      	moveq	r3, #1
 800a07c:	2300      	movne	r3, #0
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	461a      	mov	r2, r3
 800a082:	79fb      	ldrb	r3, [r7, #7]
 800a084:	429a      	cmp	r2, r3
 800a086:	d0a0      	beq.n	8009fca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
	...

0800a094 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b096      	sub	sp, #88	@ 0x58
 800a098:	af00      	add	r7, sp, #0
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	60b9      	str	r1, [r7, #8]
 800a09e:	4613      	mov	r3, r2
 800a0a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	68ba      	ldr	r2, [r7, #8]
 800a0a6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	88fa      	ldrh	r2, [r7, #6]
 800a0ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2222      	movs	r2, #34	@ 0x22
 800a0bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d02d      	beq.n	800a126 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0d0:	4a40      	ldr	r2, [pc, #256]	@ (800a1d4 <UART_Start_Receive_DMA+0x140>)
 800a0d2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0da:	4a3f      	ldr	r2, [pc, #252]	@ (800a1d8 <UART_Start_Receive_DMA+0x144>)
 800a0dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0e4:	4a3d      	ldr	r2, [pc, #244]	@ (800a1dc <UART_Start_Receive_DMA+0x148>)
 800a0e6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	3324      	adds	r3, #36	@ 0x24
 800a0fe:	4619      	mov	r1, r3
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a104:	461a      	mov	r2, r3
 800a106:	88fb      	ldrh	r3, [r7, #6]
 800a108:	f7f8 fcc2 	bl	8002a90 <HAL_DMA_Start_IT>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d009      	beq.n	800a126 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2210      	movs	r2, #16
 800a116:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2220      	movs	r2, #32
 800a11e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a122:	2301      	movs	r3, #1
 800a124:	e051      	b.n	800a1ca <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	691b      	ldr	r3, [r3, #16]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d018      	beq.n	800a160 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a136:	e853 3f00 	ldrex	r3, [r3]
 800a13a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a13e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a142:	657b      	str	r3, [r7, #84]	@ 0x54
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	461a      	mov	r2, r3
 800a14a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a14c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a14e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a150:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a152:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a154:	e841 2300 	strex	r3, r2, [r1]
 800a158:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a15a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d1e6      	bne.n	800a12e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	3308      	adds	r3, #8
 800a166:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a16a:	e853 3f00 	ldrex	r3, [r3]
 800a16e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a172:	f043 0301 	orr.w	r3, r3, #1
 800a176:	653b      	str	r3, [r7, #80]	@ 0x50
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	3308      	adds	r3, #8
 800a17e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a180:	637a      	str	r2, [r7, #52]	@ 0x34
 800a182:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a184:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a186:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a188:	e841 2300 	strex	r3, r2, [r1]
 800a18c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a18e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a190:	2b00      	cmp	r3, #0
 800a192:	d1e5      	bne.n	800a160 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	3308      	adds	r3, #8
 800a19a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	e853 3f00 	ldrex	r3, [r3]
 800a1a2:	613b      	str	r3, [r7, #16]
   return(result);
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	3308      	adds	r3, #8
 800a1b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a1b4:	623a      	str	r2, [r7, #32]
 800a1b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b8:	69f9      	ldr	r1, [r7, #28]
 800a1ba:	6a3a      	ldr	r2, [r7, #32]
 800a1bc:	e841 2300 	strex	r3, r2, [r1]
 800a1c0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d1e5      	bne.n	800a194 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3758      	adds	r7, #88	@ 0x58
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	0800a3e3 	.word	0x0800a3e3
 800a1d8:	0800a50b 	.word	0x0800a50b
 800a1dc:	0800a549 	.word	0x0800a549

0800a1e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b08f      	sub	sp, #60	@ 0x3c
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ee:	6a3b      	ldr	r3, [r7, #32]
 800a1f0:	e853 3f00 	ldrex	r3, [r3]
 800a1f4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a1fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	461a      	mov	r2, r3
 800a204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a206:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a208:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a20c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a20e:	e841 2300 	strex	r3, r2, [r1]
 800a212:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a216:	2b00      	cmp	r3, #0
 800a218:	d1e6      	bne.n	800a1e8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	3308      	adds	r3, #8
 800a220:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	e853 3f00 	ldrex	r3, [r3]
 800a228:	60bb      	str	r3, [r7, #8]
   return(result);
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a230:	633b      	str	r3, [r7, #48]	@ 0x30
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	3308      	adds	r3, #8
 800a238:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a23a:	61ba      	str	r2, [r7, #24]
 800a23c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23e:	6979      	ldr	r1, [r7, #20]
 800a240:	69ba      	ldr	r2, [r7, #24]
 800a242:	e841 2300 	strex	r3, r2, [r1]
 800a246:	613b      	str	r3, [r7, #16]
   return(result);
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d1e5      	bne.n	800a21a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2220      	movs	r2, #32
 800a252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a256:	bf00      	nop
 800a258:	373c      	adds	r7, #60	@ 0x3c
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr
	...

0800a264 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a264:	b480      	push	{r7}
 800a266:	b095      	sub	sp, #84	@ 0x54
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a274:	e853 3f00 	ldrex	r3, [r3]
 800a278:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a280:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	461a      	mov	r2, r3
 800a288:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a28a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a28c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a28e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a290:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a292:	e841 2300 	strex	r3, r2, [r1]
 800a296:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d1e6      	bne.n	800a26c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	3308      	adds	r3, #8
 800a2a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a6:	6a3b      	ldr	r3, [r7, #32]
 800a2a8:	e853 3f00 	ldrex	r3, [r3]
 800a2ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2ae:	69fa      	ldr	r2, [r7, #28]
 800a2b0:	4b1e      	ldr	r3, [pc, #120]	@ (800a32c <UART_EndRxTransfer+0xc8>)
 800a2b2:	4013      	ands	r3, r2
 800a2b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	3308      	adds	r3, #8
 800a2bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a2c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2c6:	e841 2300 	strex	r3, r2, [r1]
 800a2ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d1e5      	bne.n	800a29e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2d6:	2b01      	cmp	r3, #1
 800a2d8:	d118      	bne.n	800a30c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	e853 3f00 	ldrex	r3, [r3]
 800a2e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	f023 0310 	bic.w	r3, r3, #16
 800a2ee:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2f8:	61bb      	str	r3, [r7, #24]
 800a2fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fc:	6979      	ldr	r1, [r7, #20]
 800a2fe:	69ba      	ldr	r2, [r7, #24]
 800a300:	e841 2300 	strex	r3, r2, [r1]
 800a304:	613b      	str	r3, [r7, #16]
   return(result);
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d1e6      	bne.n	800a2da <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2220      	movs	r2, #32
 800a310:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2200      	movs	r2, #0
 800a31e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a320:	bf00      	nop
 800a322:	3754      	adds	r7, #84	@ 0x54
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr
 800a32c:	effffffe 	.word	0xeffffffe

0800a330 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b090      	sub	sp, #64	@ 0x40
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a33c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	69db      	ldr	r3, [r3, #28]
 800a342:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a346:	d037      	beq.n	800a3b8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800a348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a34a:	2200      	movs	r2, #0
 800a34c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	3308      	adds	r3, #8
 800a356:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35a:	e853 3f00 	ldrex	r3, [r3]
 800a35e:	623b      	str	r3, [r7, #32]
   return(result);
 800a360:	6a3b      	ldr	r3, [r7, #32]
 800a362:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a366:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	3308      	adds	r3, #8
 800a36e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a370:	633a      	str	r2, [r7, #48]	@ 0x30
 800a372:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a374:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a376:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a378:	e841 2300 	strex	r3, r2, [r1]
 800a37c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a37e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a380:	2b00      	cmp	r3, #0
 800a382:	d1e5      	bne.n	800a350 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	e853 3f00 	ldrex	r3, [r3]
 800a390:	60fb      	str	r3, [r7, #12]
   return(result);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a398:	637b      	str	r3, [r7, #52]	@ 0x34
 800a39a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3a2:	61fb      	str	r3, [r7, #28]
 800a3a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a6:	69b9      	ldr	r1, [r7, #24]
 800a3a8:	69fa      	ldr	r2, [r7, #28]
 800a3aa:	e841 2300 	strex	r3, r2, [r1]
 800a3ae:	617b      	str	r3, [r7, #20]
   return(result);
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1e6      	bne.n	800a384 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3b6:	e002      	b.n	800a3be <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800a3b8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a3ba:	f7fe ff0b 	bl	80091d4 <HAL_UART_TxCpltCallback>
}
 800a3be:	bf00      	nop
 800a3c0:	3740      	adds	r7, #64	@ 0x40
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b084      	sub	sp, #16
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	f7fe ff07 	bl	80091e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3da:	bf00      	nop
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b09c      	sub	sp, #112	@ 0x70
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3ee:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	69db      	ldr	r3, [r3, #28]
 800a3f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3f8:	d071      	beq.n	800a4de <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a3fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a40a:	e853 3f00 	ldrex	r3, [r3]
 800a40e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a410:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a412:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a416:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a418:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	461a      	mov	r2, r3
 800a41e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a420:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a422:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a424:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a426:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a428:	e841 2300 	strex	r3, r2, [r1]
 800a42c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a42e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a430:	2b00      	cmp	r3, #0
 800a432:	d1e6      	bne.n	800a402 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a434:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	3308      	adds	r3, #8
 800a43a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a43e:	e853 3f00 	ldrex	r3, [r3]
 800a442:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a446:	f023 0301 	bic.w	r3, r3, #1
 800a44a:	667b      	str	r3, [r7, #100]	@ 0x64
 800a44c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	3308      	adds	r3, #8
 800a452:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a454:	647a      	str	r2, [r7, #68]	@ 0x44
 800a456:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a458:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a45a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a45c:	e841 2300 	strex	r3, r2, [r1]
 800a460:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a464:	2b00      	cmp	r3, #0
 800a466:	d1e5      	bne.n	800a434 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	3308      	adds	r3, #8
 800a46e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a472:	e853 3f00 	ldrex	r3, [r3]
 800a476:	623b      	str	r3, [r7, #32]
   return(result);
 800a478:	6a3b      	ldr	r3, [r7, #32]
 800a47a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a47e:	663b      	str	r3, [r7, #96]	@ 0x60
 800a480:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	3308      	adds	r3, #8
 800a486:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a488:	633a      	str	r2, [r7, #48]	@ 0x30
 800a48a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a48c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a48e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a490:	e841 2300 	strex	r3, r2, [r1]
 800a494:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d1e5      	bne.n	800a468 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a49c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a49e:	2220      	movs	r2, #32
 800a4a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d118      	bne.n	800a4de <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	e853 3f00 	ldrex	r3, [r3]
 800a4b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f023 0310 	bic.w	r3, r3, #16
 800a4c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a4c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a4ca:	61fb      	str	r3, [r7, #28]
 800a4cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ce:	69b9      	ldr	r1, [r7, #24]
 800a4d0:	69fa      	ldr	r2, [r7, #28]
 800a4d2:	e841 2300 	strex	r3, r2, [r1]
 800a4d6:	617b      	str	r3, [r7, #20]
   return(result);
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d1e6      	bne.n	800a4ac <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a4de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d107      	bne.n	800a4fc <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a4f6:	f7fe fe9f 	bl	8009238 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a4fa:	e002      	b.n	800a502 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a4fc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a4fe:	f7fe fe7d 	bl	80091fc <HAL_UART_RxCpltCallback>
}
 800a502:	bf00      	nop
 800a504:	3770      	adds	r7, #112	@ 0x70
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b084      	sub	sp, #16
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a516:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2201      	movs	r2, #1
 800a51c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a522:	2b01      	cmp	r3, #1
 800a524:	d109      	bne.n	800a53a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a52c:	085b      	lsrs	r3, r3, #1
 800a52e:	b29b      	uxth	r3, r3
 800a530:	4619      	mov	r1, r3
 800a532:	68f8      	ldr	r0, [r7, #12]
 800a534:	f7fe fe80 	bl	8009238 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a538:	e002      	b.n	800a540 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	f7fe fe68 	bl	8009210 <HAL_UART_RxHalfCpltCallback>
}
 800a540:	bf00      	nop
 800a542:	3710      	adds	r7, #16
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b086      	sub	sp, #24
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a554:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a55c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a564:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a570:	2b80      	cmp	r3, #128	@ 0x80
 800a572:	d109      	bne.n	800a588 <UART_DMAError+0x40>
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	2b21      	cmp	r3, #33	@ 0x21
 800a578:	d106      	bne.n	800a588 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a582:	6978      	ldr	r0, [r7, #20]
 800a584:	f7ff fe2c 	bl	800a1e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a592:	2b40      	cmp	r3, #64	@ 0x40
 800a594:	d109      	bne.n	800a5aa <UART_DMAError+0x62>
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2b22      	cmp	r3, #34	@ 0x22
 800a59a:	d106      	bne.n	800a5aa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a5a4:	6978      	ldr	r0, [r7, #20]
 800a5a6:	f7ff fe5d 	bl	800a264 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5b0:	f043 0210 	orr.w	r2, r3, #16
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a5ba:	6978      	ldr	r0, [r7, #20]
 800a5bc:	f7fe fe32 	bl	8009224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5c0:	bf00      	nop
 800a5c2:	3718      	adds	r7, #24
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a5e6:	68f8      	ldr	r0, [r7, #12]
 800a5e8:	f7fe fe1c 	bl	8009224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5ec:	bf00      	nop
 800a5ee:	3710      	adds	r7, #16
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b088      	sub	sp, #32
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	e853 3f00 	ldrex	r3, [r3]
 800a608:	60bb      	str	r3, [r7, #8]
   return(result);
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a610:	61fb      	str	r3, [r7, #28]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	461a      	mov	r2, r3
 800a618:	69fb      	ldr	r3, [r7, #28]
 800a61a:	61bb      	str	r3, [r7, #24]
 800a61c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a61e:	6979      	ldr	r1, [r7, #20]
 800a620:	69ba      	ldr	r2, [r7, #24]
 800a622:	e841 2300 	strex	r3, r2, [r1]
 800a626:	613b      	str	r3, [r7, #16]
   return(result);
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d1e6      	bne.n	800a5fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2220      	movs	r2, #32
 800a632:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f7fe fdc9 	bl	80091d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a642:	bf00      	nop
 800a644:	3720      	adds	r7, #32
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a64a:	b480      	push	{r7}
 800a64c:	b083      	sub	sp, #12
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a652:	bf00      	nop
 800a654:	370c      	adds	r7, #12
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr

0800a65e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a65e:	b480      	push	{r7}
 800a660:	b083      	sub	sp, #12
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a666:	bf00      	nop
 800a668:	370c      	adds	r7, #12
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr

0800a672 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a672:	b480      	push	{r7}
 800a674:	b083      	sub	sp, #12
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a67a:	bf00      	nop
 800a67c:	370c      	adds	r7, #12
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr

0800a686 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a686:	b480      	push	{r7}
 800a688:	b085      	sub	sp, #20
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a694:	2b01      	cmp	r3, #1
 800a696:	d101      	bne.n	800a69c <HAL_UARTEx_DisableFifoMode+0x16>
 800a698:	2302      	movs	r3, #2
 800a69a:	e027      	b.n	800a6ec <HAL_UARTEx_DisableFifoMode+0x66>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2224      	movs	r2, #36	@ 0x24
 800a6a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	681a      	ldr	r2, [r3, #0]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f022 0201 	bic.w	r2, r2, #1
 800a6c2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a6ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	68fa      	ldr	r2, [r7, #12]
 800a6d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2220      	movs	r2, #32
 800a6de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3714      	adds	r7, #20
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d101      	bne.n	800a710 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a70c:	2302      	movs	r3, #2
 800a70e:	e02d      	b.n	800a76c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2224      	movs	r2, #36	@ 0x24
 800a71c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f022 0201 	bic.w	r2, r2, #1
 800a736:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	683a      	ldr	r2, [r7, #0]
 800a748:	430a      	orrs	r2, r1
 800a74a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 f84f 	bl	800a7f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	68fa      	ldr	r2, [r7, #12]
 800a758:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2220      	movs	r2, #32
 800a75e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3710      	adds	r7, #16
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a784:	2b01      	cmp	r3, #1
 800a786:	d101      	bne.n	800a78c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a788:	2302      	movs	r3, #2
 800a78a:	e02d      	b.n	800a7e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2201      	movs	r2, #1
 800a790:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2224      	movs	r2, #36	@ 0x24
 800a798:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f022 0201 	bic.w	r2, r2, #1
 800a7b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	689b      	ldr	r3, [r3, #8]
 800a7ba:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	683a      	ldr	r2, [r7, #0]
 800a7c4:	430a      	orrs	r2, r1
 800a7c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 f811 	bl	800a7f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	68fa      	ldr	r2, [r7, #12]
 800a7d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2220      	movs	r2, #32
 800a7da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a7e6:	2300      	movs	r3, #0
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3710      	adds	r7, #16
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b085      	sub	sp, #20
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d108      	bne.n	800a812 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a810:	e031      	b.n	800a876 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a812:	2310      	movs	r3, #16
 800a814:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a816:	2310      	movs	r3, #16
 800a818:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	0e5b      	lsrs	r3, r3, #25
 800a822:	b2db      	uxtb	r3, r3
 800a824:	f003 0307 	and.w	r3, r3, #7
 800a828:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	0f5b      	lsrs	r3, r3, #29
 800a832:	b2db      	uxtb	r3, r3
 800a834:	f003 0307 	and.w	r3, r3, #7
 800a838:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a83a:	7bbb      	ldrb	r3, [r7, #14]
 800a83c:	7b3a      	ldrb	r2, [r7, #12]
 800a83e:	4911      	ldr	r1, [pc, #68]	@ (800a884 <UARTEx_SetNbDataToProcess+0x94>)
 800a840:	5c8a      	ldrb	r2, [r1, r2]
 800a842:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a846:	7b3a      	ldrb	r2, [r7, #12]
 800a848:	490f      	ldr	r1, [pc, #60]	@ (800a888 <UARTEx_SetNbDataToProcess+0x98>)
 800a84a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a84c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a850:	b29a      	uxth	r2, r3
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a858:	7bfb      	ldrb	r3, [r7, #15]
 800a85a:	7b7a      	ldrb	r2, [r7, #13]
 800a85c:	4909      	ldr	r1, [pc, #36]	@ (800a884 <UARTEx_SetNbDataToProcess+0x94>)
 800a85e:	5c8a      	ldrb	r2, [r1, r2]
 800a860:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a864:	7b7a      	ldrb	r2, [r7, #13]
 800a866:	4908      	ldr	r1, [pc, #32]	@ (800a888 <UARTEx_SetNbDataToProcess+0x98>)
 800a868:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a86a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a86e:	b29a      	uxth	r2, r3
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a876:	bf00      	nop
 800a878:	3714      	adds	r7, #20
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop
 800a884:	0801e26c 	.word	0x0801e26c
 800a888:	0801e274 	.word	0x0801e274

0800a88c <__NVIC_SetPriority>:
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	4603      	mov	r3, r0
 800a894:	6039      	str	r1, [r7, #0]
 800a896:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a898:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	db0a      	blt.n	800a8b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	b2da      	uxtb	r2, r3
 800a8a4:	490c      	ldr	r1, [pc, #48]	@ (800a8d8 <__NVIC_SetPriority+0x4c>)
 800a8a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a8aa:	0112      	lsls	r2, r2, #4
 800a8ac:	b2d2      	uxtb	r2, r2
 800a8ae:	440b      	add	r3, r1
 800a8b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a8b4:	e00a      	b.n	800a8cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	b2da      	uxtb	r2, r3
 800a8ba:	4908      	ldr	r1, [pc, #32]	@ (800a8dc <__NVIC_SetPriority+0x50>)
 800a8bc:	88fb      	ldrh	r3, [r7, #6]
 800a8be:	f003 030f 	and.w	r3, r3, #15
 800a8c2:	3b04      	subs	r3, #4
 800a8c4:	0112      	lsls	r2, r2, #4
 800a8c6:	b2d2      	uxtb	r2, r2
 800a8c8:	440b      	add	r3, r1
 800a8ca:	761a      	strb	r2, [r3, #24]
}
 800a8cc:	bf00      	nop
 800a8ce:	370c      	adds	r7, #12
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr
 800a8d8:	e000e100 	.word	0xe000e100
 800a8dc:	e000ed00 	.word	0xe000ed00

0800a8e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a8e4:	4b05      	ldr	r3, [pc, #20]	@ (800a8fc <SysTick_Handler+0x1c>)
 800a8e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a8e8:	f001 fd6e 	bl	800c3c8 <xTaskGetSchedulerState>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d001      	beq.n	800a8f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a8f2:	f002 fb69 	bl	800cfc8 <xPortSysTickHandler>
  }
}
 800a8f6:	bf00      	nop
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	e000e010 	.word	0xe000e010

0800a900 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a900:	b580      	push	{r7, lr}
 800a902:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a904:	2100      	movs	r1, #0
 800a906:	f06f 0004 	mvn.w	r0, #4
 800a90a:	f7ff ffbf 	bl	800a88c <__NVIC_SetPriority>
#endif
}
 800a90e:	bf00      	nop
 800a910:	bd80      	pop	{r7, pc}
	...

0800a914 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a91a:	f3ef 8305 	mrs	r3, IPSR
 800a91e:	603b      	str	r3, [r7, #0]
  return(result);
 800a920:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a922:	2b00      	cmp	r3, #0
 800a924:	d003      	beq.n	800a92e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a926:	f06f 0305 	mvn.w	r3, #5
 800a92a:	607b      	str	r3, [r7, #4]
 800a92c:	e00c      	b.n	800a948 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a92e:	4b0a      	ldr	r3, [pc, #40]	@ (800a958 <osKernelInitialize+0x44>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d105      	bne.n	800a942 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a936:	4b08      	ldr	r3, [pc, #32]	@ (800a958 <osKernelInitialize+0x44>)
 800a938:	2201      	movs	r2, #1
 800a93a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a93c:	2300      	movs	r3, #0
 800a93e:	607b      	str	r3, [r7, #4]
 800a940:	e002      	b.n	800a948 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a942:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a946:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a948:	687b      	ldr	r3, [r7, #4]
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	370c      	adds	r7, #12
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop
 800a958:	24032b5c 	.word	0x24032b5c

0800a95c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a962:	f3ef 8305 	mrs	r3, IPSR
 800a966:	603b      	str	r3, [r7, #0]
  return(result);
 800a968:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d003      	beq.n	800a976 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a96e:	f06f 0305 	mvn.w	r3, #5
 800a972:	607b      	str	r3, [r7, #4]
 800a974:	e010      	b.n	800a998 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a976:	4b0b      	ldr	r3, [pc, #44]	@ (800a9a4 <osKernelStart+0x48>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d109      	bne.n	800a992 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a97e:	f7ff ffbf 	bl	800a900 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a982:	4b08      	ldr	r3, [pc, #32]	@ (800a9a4 <osKernelStart+0x48>)
 800a984:	2202      	movs	r2, #2
 800a986:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a988:	f001 f892 	bl	800bab0 <vTaskStartScheduler>
      stat = osOK;
 800a98c:	2300      	movs	r3, #0
 800a98e:	607b      	str	r3, [r7, #4]
 800a990:	e002      	b.n	800a998 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a992:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a996:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a998:	687b      	ldr	r3, [r7, #4]
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3708      	adds	r7, #8
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	24032b5c 	.word	0x24032b5c

0800a9a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b08e      	sub	sp, #56	@ 0x38
 800a9ac:	af04      	add	r7, sp, #16
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9b8:	f3ef 8305 	mrs	r3, IPSR
 800a9bc:	617b      	str	r3, [r7, #20]
  return(result);
 800a9be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d17e      	bne.n	800aac2 <osThreadNew+0x11a>
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d07b      	beq.n	800aac2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a9ca:	2380      	movs	r3, #128	@ 0x80
 800a9cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a9ce:	2318      	movs	r3, #24
 800a9d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a9d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a9da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d045      	beq.n	800aa6e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d002      	beq.n	800a9f0 <osThreadNew+0x48>
        name = attr->name;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	699b      	ldr	r3, [r3, #24]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d002      	beq.n	800a9fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	699b      	ldr	r3, [r3, #24]
 800a9fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d008      	beq.n	800aa16 <osThreadNew+0x6e>
 800aa04:	69fb      	ldr	r3, [r7, #28]
 800aa06:	2b38      	cmp	r3, #56	@ 0x38
 800aa08:	d805      	bhi.n	800aa16 <osThreadNew+0x6e>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	f003 0301 	and.w	r3, r3, #1
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d001      	beq.n	800aa1a <osThreadNew+0x72>
        return (NULL);
 800aa16:	2300      	movs	r3, #0
 800aa18:	e054      	b.n	800aac4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	695b      	ldr	r3, [r3, #20]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d003      	beq.n	800aa2a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	695b      	ldr	r3, [r3, #20]
 800aa26:	089b      	lsrs	r3, r3, #2
 800aa28:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d00e      	beq.n	800aa50 <osThreadNew+0xa8>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	2ba7      	cmp	r3, #167	@ 0xa7
 800aa38:	d90a      	bls.n	800aa50 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d006      	beq.n	800aa50 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	695b      	ldr	r3, [r3, #20]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d002      	beq.n	800aa50 <osThreadNew+0xa8>
        mem = 1;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	61bb      	str	r3, [r7, #24]
 800aa4e:	e010      	b.n	800aa72 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d10c      	bne.n	800aa72 <osThreadNew+0xca>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d108      	bne.n	800aa72 <osThreadNew+0xca>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	691b      	ldr	r3, [r3, #16]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d104      	bne.n	800aa72 <osThreadNew+0xca>
          mem = 0;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	61bb      	str	r3, [r7, #24]
 800aa6c:	e001      	b.n	800aa72 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aa72:	69bb      	ldr	r3, [r7, #24]
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d110      	bne.n	800aa9a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aa80:	9202      	str	r2, [sp, #8]
 800aa82:	9301      	str	r3, [sp, #4]
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	9300      	str	r3, [sp, #0]
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	6a3a      	ldr	r2, [r7, #32]
 800aa8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aa8e:	68f8      	ldr	r0, [r7, #12]
 800aa90:	f000 fe1a 	bl	800b6c8 <xTaskCreateStatic>
 800aa94:	4603      	mov	r3, r0
 800aa96:	613b      	str	r3, [r7, #16]
 800aa98:	e013      	b.n	800aac2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800aa9a:	69bb      	ldr	r3, [r7, #24]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d110      	bne.n	800aac2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800aaa0:	6a3b      	ldr	r3, [r7, #32]
 800aaa2:	b29a      	uxth	r2, r3
 800aaa4:	f107 0310 	add.w	r3, r7, #16
 800aaa8:	9301      	str	r3, [sp, #4]
 800aaaa:	69fb      	ldr	r3, [r7, #28]
 800aaac:	9300      	str	r3, [sp, #0]
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aab2:	68f8      	ldr	r0, [r7, #12]
 800aab4:	f000 fe68 	bl	800b788 <xTaskCreate>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d001      	beq.n	800aac2 <osThreadNew+0x11a>
            hTask = NULL;
 800aabe:	2300      	movs	r3, #0
 800aac0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800aac2:	693b      	ldr	r3, [r7, #16]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3728      	adds	r7, #40	@ 0x28
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aad4:	f3ef 8305 	mrs	r3, IPSR
 800aad8:	60bb      	str	r3, [r7, #8]
  return(result);
 800aada:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d003      	beq.n	800aae8 <osDelay+0x1c>
    stat = osErrorISR;
 800aae0:	f06f 0305 	mvn.w	r3, #5
 800aae4:	60fb      	str	r3, [r7, #12]
 800aae6:	e007      	b.n	800aaf8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800aae8:	2300      	movs	r3, #0
 800aaea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d002      	beq.n	800aaf8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 ffa6 	bl	800ba44 <vTaskDelay>
    }
  }

  return (stat);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3710      	adds	r7, #16
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
	...

0800ab04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ab04:	b480      	push	{r7}
 800ab06:	b085      	sub	sp, #20
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	4a07      	ldr	r2, [pc, #28]	@ (800ab30 <vApplicationGetIdleTaskMemory+0x2c>)
 800ab14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	4a06      	ldr	r2, [pc, #24]	@ (800ab34 <vApplicationGetIdleTaskMemory+0x30>)
 800ab1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2280      	movs	r2, #128	@ 0x80
 800ab20:	601a      	str	r2, [r3, #0]
}
 800ab22:	bf00      	nop
 800ab24:	3714      	adds	r7, #20
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr
 800ab2e:	bf00      	nop
 800ab30:	24032b60 	.word	0x24032b60
 800ab34:	24032c08 	.word	0x24032c08

0800ab38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ab38:	b480      	push	{r7}
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	60b9      	str	r1, [r7, #8]
 800ab42:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	4a07      	ldr	r2, [pc, #28]	@ (800ab64 <vApplicationGetTimerTaskMemory+0x2c>)
 800ab48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	4a06      	ldr	r2, [pc, #24]	@ (800ab68 <vApplicationGetTimerTaskMemory+0x30>)
 800ab4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ab56:	601a      	str	r2, [r3, #0]
}
 800ab58:	bf00      	nop
 800ab5a:	3714      	adds	r7, #20
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr
 800ab64:	24032e08 	.word	0x24032e08
 800ab68:	24032eb0 	.word	0x24032eb0

0800ab6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b083      	sub	sp, #12
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f103 0208 	add.w	r2, r3, #8
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f103 0208 	add.w	r2, r3, #8
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f103 0208 	add.w	r2, r3, #8
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aba0:	bf00      	nop
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2200      	movs	r2, #0
 800abb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800abba:	bf00      	nop
 800abbc:	370c      	adds	r7, #12
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr

0800abc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800abc6:	b480      	push	{r7}
 800abc8:	b085      	sub	sp, #20
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
 800abce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	68fa      	ldr	r2, [r7, #12]
 800abda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	689a      	ldr	r2, [r3, #8]
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	683a      	ldr	r2, [r7, #0]
 800abea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	683a      	ldr	r2, [r7, #0]
 800abf0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	1c5a      	adds	r2, r3, #1
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	601a      	str	r2, [r3, #0]
}
 800ac02:	bf00      	nop
 800ac04:	3714      	adds	r7, #20
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr

0800ac0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac0e:	b480      	push	{r7}
 800ac10:	b085      	sub	sp, #20
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
 800ac16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac24:	d103      	bne.n	800ac2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	691b      	ldr	r3, [r3, #16]
 800ac2a:	60fb      	str	r3, [r7, #12]
 800ac2c:	e00c      	b.n	800ac48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	3308      	adds	r3, #8
 800ac32:	60fb      	str	r3, [r7, #12]
 800ac34:	e002      	b.n	800ac3c <vListInsert+0x2e>
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	60fb      	str	r3, [r7, #12]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	68ba      	ldr	r2, [r7, #8]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d2f6      	bcs.n	800ac36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	685a      	ldr	r2, [r3, #4]
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	683a      	ldr	r2, [r7, #0]
 800ac56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	68fa      	ldr	r2, [r7, #12]
 800ac5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	683a      	ldr	r2, [r7, #0]
 800ac62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	1c5a      	adds	r2, r3, #1
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	601a      	str	r2, [r3, #0]
}
 800ac74:	bf00      	nop
 800ac76:	3714      	adds	r7, #20
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ac80:	b480      	push	{r7}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	691b      	ldr	r3, [r3, #16]
 800ac8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	687a      	ldr	r2, [r7, #4]
 800ac94:	6892      	ldr	r2, [r2, #8]
 800ac96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	689b      	ldr	r3, [r3, #8]
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	6852      	ldr	r2, [r2, #4]
 800aca0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	687a      	ldr	r2, [r7, #4]
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d103      	bne.n	800acb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	689a      	ldr	r2, [r3, #8]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	1e5a      	subs	r2, r3, #1
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3714      	adds	r7, #20
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b084      	sub	sp, #16
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d10b      	bne.n	800ad00 <xQueueGenericReset+0x2c>
	__asm volatile
 800ace8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acec:	f383 8811 	msr	BASEPRI, r3
 800acf0:	f3bf 8f6f 	isb	sy
 800acf4:	f3bf 8f4f 	dsb	sy
 800acf8:	60bb      	str	r3, [r7, #8]
}
 800acfa:	bf00      	nop
 800acfc:	bf00      	nop
 800acfe:	e7fd      	b.n	800acfc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ad00:	f002 f8d2 	bl	800cea8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad0c:	68f9      	ldr	r1, [r7, #12]
 800ad0e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ad10:	fb01 f303 	mul.w	r3, r1, r3
 800ad14:	441a      	add	r2, r3
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad30:	3b01      	subs	r3, #1
 800ad32:	68f9      	ldr	r1, [r7, #12]
 800ad34:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ad36:	fb01 f303 	mul.w	r3, r1, r3
 800ad3a:	441a      	add	r2, r3
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	22ff      	movs	r2, #255	@ 0xff
 800ad44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	22ff      	movs	r2, #255	@ 0xff
 800ad4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d114      	bne.n	800ad80 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	691b      	ldr	r3, [r3, #16]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d01a      	beq.n	800ad94 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	3310      	adds	r3, #16
 800ad62:	4618      	mov	r0, r3
 800ad64:	f001 f942 	bl	800bfec <xTaskRemoveFromEventList>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d012      	beq.n	800ad94 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ad6e:	4b0d      	ldr	r3, [pc, #52]	@ (800ada4 <xQueueGenericReset+0xd0>)
 800ad70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad74:	601a      	str	r2, [r3, #0]
 800ad76:	f3bf 8f4f 	dsb	sy
 800ad7a:	f3bf 8f6f 	isb	sy
 800ad7e:	e009      	b.n	800ad94 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	3310      	adds	r3, #16
 800ad84:	4618      	mov	r0, r3
 800ad86:	f7ff fef1 	bl	800ab6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	3324      	adds	r3, #36	@ 0x24
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7ff feec 	bl	800ab6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ad94:	f002 f8ba 	bl	800cf0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ad98:	2301      	movs	r3, #1
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3710      	adds	r7, #16
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	e000ed04 	.word	0xe000ed04

0800ada8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b08e      	sub	sp, #56	@ 0x38
 800adac:	af02      	add	r7, sp, #8
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	607a      	str	r2, [r7, #4]
 800adb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d10b      	bne.n	800add4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800adbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adc0:	f383 8811 	msr	BASEPRI, r3
 800adc4:	f3bf 8f6f 	isb	sy
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800adce:	bf00      	nop
 800add0:	bf00      	nop
 800add2:	e7fd      	b.n	800add0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d10b      	bne.n	800adf2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800adda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adde:	f383 8811 	msr	BASEPRI, r3
 800ade2:	f3bf 8f6f 	isb	sy
 800ade6:	f3bf 8f4f 	dsb	sy
 800adea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800adec:	bf00      	nop
 800adee:	bf00      	nop
 800adf0:	e7fd      	b.n	800adee <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d002      	beq.n	800adfe <xQueueGenericCreateStatic+0x56>
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d001      	beq.n	800ae02 <xQueueGenericCreateStatic+0x5a>
 800adfe:	2301      	movs	r3, #1
 800ae00:	e000      	b.n	800ae04 <xQueueGenericCreateStatic+0x5c>
 800ae02:	2300      	movs	r3, #0
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d10b      	bne.n	800ae20 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ae08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae0c:	f383 8811 	msr	BASEPRI, r3
 800ae10:	f3bf 8f6f 	isb	sy
 800ae14:	f3bf 8f4f 	dsb	sy
 800ae18:	623b      	str	r3, [r7, #32]
}
 800ae1a:	bf00      	nop
 800ae1c:	bf00      	nop
 800ae1e:	e7fd      	b.n	800ae1c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d102      	bne.n	800ae2c <xQueueGenericCreateStatic+0x84>
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d101      	bne.n	800ae30 <xQueueGenericCreateStatic+0x88>
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	e000      	b.n	800ae32 <xQueueGenericCreateStatic+0x8a>
 800ae30:	2300      	movs	r3, #0
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d10b      	bne.n	800ae4e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ae36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae3a:	f383 8811 	msr	BASEPRI, r3
 800ae3e:	f3bf 8f6f 	isb	sy
 800ae42:	f3bf 8f4f 	dsb	sy
 800ae46:	61fb      	str	r3, [r7, #28]
}
 800ae48:	bf00      	nop
 800ae4a:	bf00      	nop
 800ae4c:	e7fd      	b.n	800ae4a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ae4e:	2350      	movs	r3, #80	@ 0x50
 800ae50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	2b50      	cmp	r3, #80	@ 0x50
 800ae56:	d00b      	beq.n	800ae70 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ae58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae5c:	f383 8811 	msr	BASEPRI, r3
 800ae60:	f3bf 8f6f 	isb	sy
 800ae64:	f3bf 8f4f 	dsb	sy
 800ae68:	61bb      	str	r3, [r7, #24]
}
 800ae6a:	bf00      	nop
 800ae6c:	bf00      	nop
 800ae6e:	e7fd      	b.n	800ae6c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ae70:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ae76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d00d      	beq.n	800ae98 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ae7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae7e:	2201      	movs	r2, #1
 800ae80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ae84:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ae88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae8a:	9300      	str	r3, [sp, #0]
 800ae8c:	4613      	mov	r3, r2
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	68b9      	ldr	r1, [r7, #8]
 800ae92:	68f8      	ldr	r0, [r7, #12]
 800ae94:	f000 f805 	bl	800aea2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ae98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3730      	adds	r7, #48	@ 0x30
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b084      	sub	sp, #16
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	60f8      	str	r0, [r7, #12]
 800aeaa:	60b9      	str	r1, [r7, #8]
 800aeac:	607a      	str	r2, [r7, #4]
 800aeae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d103      	bne.n	800aebe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	69ba      	ldr	r2, [r7, #24]
 800aeba:	601a      	str	r2, [r3, #0]
 800aebc:	e002      	b.n	800aec4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aebe:	69bb      	ldr	r3, [r7, #24]
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aec4:	69bb      	ldr	r3, [r7, #24]
 800aec6:	68fa      	ldr	r2, [r7, #12]
 800aec8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aeca:	69bb      	ldr	r3, [r7, #24]
 800aecc:	68ba      	ldr	r2, [r7, #8]
 800aece:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aed0:	2101      	movs	r1, #1
 800aed2:	69b8      	ldr	r0, [r7, #24]
 800aed4:	f7ff fefe 	bl	800acd4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800aed8:	69bb      	ldr	r3, [r7, #24]
 800aeda:	78fa      	ldrb	r2, [r7, #3]
 800aedc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aee0:	bf00      	nop
 800aee2:	3710      	adds	r7, #16
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b08e      	sub	sp, #56	@ 0x38
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	607a      	str	r2, [r7, #4]
 800aef4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aef6:	2300      	movs	r3, #0
 800aef8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800aefe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af00:	2b00      	cmp	r3, #0
 800af02:	d10b      	bne.n	800af1c <xQueueGenericSend+0x34>
	__asm volatile
 800af04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af08:	f383 8811 	msr	BASEPRI, r3
 800af0c:	f3bf 8f6f 	isb	sy
 800af10:	f3bf 8f4f 	dsb	sy
 800af14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800af16:	bf00      	nop
 800af18:	bf00      	nop
 800af1a:	e7fd      	b.n	800af18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d103      	bne.n	800af2a <xQueueGenericSend+0x42>
 800af22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af26:	2b00      	cmp	r3, #0
 800af28:	d101      	bne.n	800af2e <xQueueGenericSend+0x46>
 800af2a:	2301      	movs	r3, #1
 800af2c:	e000      	b.n	800af30 <xQueueGenericSend+0x48>
 800af2e:	2300      	movs	r3, #0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d10b      	bne.n	800af4c <xQueueGenericSend+0x64>
	__asm volatile
 800af34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af38:	f383 8811 	msr	BASEPRI, r3
 800af3c:	f3bf 8f6f 	isb	sy
 800af40:	f3bf 8f4f 	dsb	sy
 800af44:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800af46:	bf00      	nop
 800af48:	bf00      	nop
 800af4a:	e7fd      	b.n	800af48 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	2b02      	cmp	r3, #2
 800af50:	d103      	bne.n	800af5a <xQueueGenericSend+0x72>
 800af52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af56:	2b01      	cmp	r3, #1
 800af58:	d101      	bne.n	800af5e <xQueueGenericSend+0x76>
 800af5a:	2301      	movs	r3, #1
 800af5c:	e000      	b.n	800af60 <xQueueGenericSend+0x78>
 800af5e:	2300      	movs	r3, #0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d10b      	bne.n	800af7c <xQueueGenericSend+0x94>
	__asm volatile
 800af64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af68:	f383 8811 	msr	BASEPRI, r3
 800af6c:	f3bf 8f6f 	isb	sy
 800af70:	f3bf 8f4f 	dsb	sy
 800af74:	623b      	str	r3, [r7, #32]
}
 800af76:	bf00      	nop
 800af78:	bf00      	nop
 800af7a:	e7fd      	b.n	800af78 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af7c:	f001 fa24 	bl	800c3c8 <xTaskGetSchedulerState>
 800af80:	4603      	mov	r3, r0
 800af82:	2b00      	cmp	r3, #0
 800af84:	d102      	bne.n	800af8c <xQueueGenericSend+0xa4>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d101      	bne.n	800af90 <xQueueGenericSend+0xa8>
 800af8c:	2301      	movs	r3, #1
 800af8e:	e000      	b.n	800af92 <xQueueGenericSend+0xaa>
 800af90:	2300      	movs	r3, #0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d10b      	bne.n	800afae <xQueueGenericSend+0xc6>
	__asm volatile
 800af96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af9a:	f383 8811 	msr	BASEPRI, r3
 800af9e:	f3bf 8f6f 	isb	sy
 800afa2:	f3bf 8f4f 	dsb	sy
 800afa6:	61fb      	str	r3, [r7, #28]
}
 800afa8:	bf00      	nop
 800afaa:	bf00      	nop
 800afac:	e7fd      	b.n	800afaa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800afae:	f001 ff7b 	bl	800cea8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800afb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800afb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afba:	429a      	cmp	r2, r3
 800afbc:	d302      	bcc.n	800afc4 <xQueueGenericSend+0xdc>
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	2b02      	cmp	r3, #2
 800afc2:	d129      	bne.n	800b018 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800afc4:	683a      	ldr	r2, [r7, #0]
 800afc6:	68b9      	ldr	r1, [r7, #8]
 800afc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800afca:	f000 fa0f 	bl	800b3ec <prvCopyDataToQueue>
 800afce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d010      	beq.n	800affa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afda:	3324      	adds	r3, #36	@ 0x24
 800afdc:	4618      	mov	r0, r3
 800afde:	f001 f805 	bl	800bfec <xTaskRemoveFromEventList>
 800afe2:	4603      	mov	r3, r0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d013      	beq.n	800b010 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800afe8:	4b3f      	ldr	r3, [pc, #252]	@ (800b0e8 <xQueueGenericSend+0x200>)
 800afea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afee:	601a      	str	r2, [r3, #0]
 800aff0:	f3bf 8f4f 	dsb	sy
 800aff4:	f3bf 8f6f 	isb	sy
 800aff8:	e00a      	b.n	800b010 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800affa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800affc:	2b00      	cmp	r3, #0
 800affe:	d007      	beq.n	800b010 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b000:	4b39      	ldr	r3, [pc, #228]	@ (800b0e8 <xQueueGenericSend+0x200>)
 800b002:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b006:	601a      	str	r2, [r3, #0]
 800b008:	f3bf 8f4f 	dsb	sy
 800b00c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b010:	f001 ff7c 	bl	800cf0c <vPortExitCritical>
				return pdPASS;
 800b014:	2301      	movs	r3, #1
 800b016:	e063      	b.n	800b0e0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d103      	bne.n	800b026 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b01e:	f001 ff75 	bl	800cf0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b022:	2300      	movs	r3, #0
 800b024:	e05c      	b.n	800b0e0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d106      	bne.n	800b03a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b02c:	f107 0314 	add.w	r3, r7, #20
 800b030:	4618      	mov	r0, r3
 800b032:	f001 f867 	bl	800c104 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b036:	2301      	movs	r3, #1
 800b038:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b03a:	f001 ff67 	bl	800cf0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b03e:	f000 fda7 	bl	800bb90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b042:	f001 ff31 	bl	800cea8 <vPortEnterCritical>
 800b046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b048:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b04c:	b25b      	sxtb	r3, r3
 800b04e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b052:	d103      	bne.n	800b05c <xQueueGenericSend+0x174>
 800b054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b056:	2200      	movs	r2, #0
 800b058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b05e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b062:	b25b      	sxtb	r3, r3
 800b064:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b068:	d103      	bne.n	800b072 <xQueueGenericSend+0x18a>
 800b06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b06c:	2200      	movs	r2, #0
 800b06e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b072:	f001 ff4b 	bl	800cf0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b076:	1d3a      	adds	r2, r7, #4
 800b078:	f107 0314 	add.w	r3, r7, #20
 800b07c:	4611      	mov	r1, r2
 800b07e:	4618      	mov	r0, r3
 800b080:	f001 f856 	bl	800c130 <xTaskCheckForTimeOut>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d124      	bne.n	800b0d4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b08a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b08c:	f000 faa6 	bl	800b5dc <prvIsQueueFull>
 800b090:	4603      	mov	r3, r0
 800b092:	2b00      	cmp	r3, #0
 800b094:	d018      	beq.n	800b0c8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b098:	3310      	adds	r3, #16
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	4611      	mov	r1, r2
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f000 ff52 	bl	800bf48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b0a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b0a6:	f000 fa31 	bl	800b50c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b0aa:	f000 fd7f 	bl	800bbac <xTaskResumeAll>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f47f af7c 	bne.w	800afae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b0b6:	4b0c      	ldr	r3, [pc, #48]	@ (800b0e8 <xQueueGenericSend+0x200>)
 800b0b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0bc:	601a      	str	r2, [r3, #0]
 800b0be:	f3bf 8f4f 	dsb	sy
 800b0c2:	f3bf 8f6f 	isb	sy
 800b0c6:	e772      	b.n	800afae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b0c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b0ca:	f000 fa1f 	bl	800b50c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b0ce:	f000 fd6d 	bl	800bbac <xTaskResumeAll>
 800b0d2:	e76c      	b.n	800afae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b0d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b0d6:	f000 fa19 	bl	800b50c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b0da:	f000 fd67 	bl	800bbac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b0de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3738      	adds	r7, #56	@ 0x38
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	e000ed04 	.word	0xe000ed04

0800b0ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b090      	sub	sp, #64	@ 0x40
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	607a      	str	r2, [r7, #4]
 800b0f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b100:	2b00      	cmp	r3, #0
 800b102:	d10b      	bne.n	800b11c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b108:	f383 8811 	msr	BASEPRI, r3
 800b10c:	f3bf 8f6f 	isb	sy
 800b110:	f3bf 8f4f 	dsb	sy
 800b114:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b116:	bf00      	nop
 800b118:	bf00      	nop
 800b11a:	e7fd      	b.n	800b118 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d103      	bne.n	800b12a <xQueueGenericSendFromISR+0x3e>
 800b122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b126:	2b00      	cmp	r3, #0
 800b128:	d101      	bne.n	800b12e <xQueueGenericSendFromISR+0x42>
 800b12a:	2301      	movs	r3, #1
 800b12c:	e000      	b.n	800b130 <xQueueGenericSendFromISR+0x44>
 800b12e:	2300      	movs	r3, #0
 800b130:	2b00      	cmp	r3, #0
 800b132:	d10b      	bne.n	800b14c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b138:	f383 8811 	msr	BASEPRI, r3
 800b13c:	f3bf 8f6f 	isb	sy
 800b140:	f3bf 8f4f 	dsb	sy
 800b144:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b146:	bf00      	nop
 800b148:	bf00      	nop
 800b14a:	e7fd      	b.n	800b148 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	2b02      	cmp	r3, #2
 800b150:	d103      	bne.n	800b15a <xQueueGenericSendFromISR+0x6e>
 800b152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b156:	2b01      	cmp	r3, #1
 800b158:	d101      	bne.n	800b15e <xQueueGenericSendFromISR+0x72>
 800b15a:	2301      	movs	r3, #1
 800b15c:	e000      	b.n	800b160 <xQueueGenericSendFromISR+0x74>
 800b15e:	2300      	movs	r3, #0
 800b160:	2b00      	cmp	r3, #0
 800b162:	d10b      	bne.n	800b17c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b168:	f383 8811 	msr	BASEPRI, r3
 800b16c:	f3bf 8f6f 	isb	sy
 800b170:	f3bf 8f4f 	dsb	sy
 800b174:	623b      	str	r3, [r7, #32]
}
 800b176:	bf00      	nop
 800b178:	bf00      	nop
 800b17a:	e7fd      	b.n	800b178 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b17c:	f001 ff74 	bl	800d068 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b180:	f3ef 8211 	mrs	r2, BASEPRI
 800b184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b188:	f383 8811 	msr	BASEPRI, r3
 800b18c:	f3bf 8f6f 	isb	sy
 800b190:	f3bf 8f4f 	dsb	sy
 800b194:	61fa      	str	r2, [r7, #28]
 800b196:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b198:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b19a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b19c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b19e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d302      	bcc.n	800b1ae <xQueueGenericSendFromISR+0xc2>
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	2b02      	cmp	r3, #2
 800b1ac:	d12f      	bne.n	800b20e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b1b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b1be:	683a      	ldr	r2, [r7, #0]
 800b1c0:	68b9      	ldr	r1, [r7, #8]
 800b1c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b1c4:	f000 f912 	bl	800b3ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b1c8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b1cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b1d0:	d112      	bne.n	800b1f8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d016      	beq.n	800b208 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1dc:	3324      	adds	r3, #36	@ 0x24
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f000 ff04 	bl	800bfec <xTaskRemoveFromEventList>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d00e      	beq.n	800b208 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d00b      	beq.n	800b208 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	601a      	str	r2, [r3, #0]
 800b1f6:	e007      	b.n	800b208 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b1f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	b25a      	sxtb	r2, r3
 800b202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b204:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b208:	2301      	movs	r3, #1
 800b20a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b20c:	e001      	b.n	800b212 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b20e:	2300      	movs	r3, #0
 800b210:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b214:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b21c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b21e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b220:	4618      	mov	r0, r3
 800b222:	3740      	adds	r7, #64	@ 0x40
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b08c      	sub	sp, #48	@ 0x30
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	60f8      	str	r0, [r7, #12]
 800b230:	60b9      	str	r1, [r7, #8]
 800b232:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b234:	2300      	movs	r3, #0
 800b236:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b23c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d10b      	bne.n	800b25a <xQueueReceive+0x32>
	__asm volatile
 800b242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b246:	f383 8811 	msr	BASEPRI, r3
 800b24a:	f3bf 8f6f 	isb	sy
 800b24e:	f3bf 8f4f 	dsb	sy
 800b252:	623b      	str	r3, [r7, #32]
}
 800b254:	bf00      	nop
 800b256:	bf00      	nop
 800b258:	e7fd      	b.n	800b256 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d103      	bne.n	800b268 <xQueueReceive+0x40>
 800b260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b264:	2b00      	cmp	r3, #0
 800b266:	d101      	bne.n	800b26c <xQueueReceive+0x44>
 800b268:	2301      	movs	r3, #1
 800b26a:	e000      	b.n	800b26e <xQueueReceive+0x46>
 800b26c:	2300      	movs	r3, #0
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d10b      	bne.n	800b28a <xQueueReceive+0x62>
	__asm volatile
 800b272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b276:	f383 8811 	msr	BASEPRI, r3
 800b27a:	f3bf 8f6f 	isb	sy
 800b27e:	f3bf 8f4f 	dsb	sy
 800b282:	61fb      	str	r3, [r7, #28]
}
 800b284:	bf00      	nop
 800b286:	bf00      	nop
 800b288:	e7fd      	b.n	800b286 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b28a:	f001 f89d 	bl	800c3c8 <xTaskGetSchedulerState>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b00      	cmp	r3, #0
 800b292:	d102      	bne.n	800b29a <xQueueReceive+0x72>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d101      	bne.n	800b29e <xQueueReceive+0x76>
 800b29a:	2301      	movs	r3, #1
 800b29c:	e000      	b.n	800b2a0 <xQueueReceive+0x78>
 800b29e:	2300      	movs	r3, #0
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d10b      	bne.n	800b2bc <xQueueReceive+0x94>
	__asm volatile
 800b2a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a8:	f383 8811 	msr	BASEPRI, r3
 800b2ac:	f3bf 8f6f 	isb	sy
 800b2b0:	f3bf 8f4f 	dsb	sy
 800b2b4:	61bb      	str	r3, [r7, #24]
}
 800b2b6:	bf00      	nop
 800b2b8:	bf00      	nop
 800b2ba:	e7fd      	b.n	800b2b8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b2bc:	f001 fdf4 	bl	800cea8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d01f      	beq.n	800b30c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b2cc:	68b9      	ldr	r1, [r7, #8]
 800b2ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2d0:	f000 f8f6 	bl	800b4c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d6:	1e5a      	subs	r2, r3, #1
 800b2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2da:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2de:	691b      	ldr	r3, [r3, #16]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d00f      	beq.n	800b304 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2e6:	3310      	adds	r3, #16
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f000 fe7f 	bl	800bfec <xTaskRemoveFromEventList>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d007      	beq.n	800b304 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b2f4:	4b3c      	ldr	r3, [pc, #240]	@ (800b3e8 <xQueueReceive+0x1c0>)
 800b2f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2fa:	601a      	str	r2, [r3, #0]
 800b2fc:	f3bf 8f4f 	dsb	sy
 800b300:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b304:	f001 fe02 	bl	800cf0c <vPortExitCritical>
				return pdPASS;
 800b308:	2301      	movs	r3, #1
 800b30a:	e069      	b.n	800b3e0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d103      	bne.n	800b31a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b312:	f001 fdfb 	bl	800cf0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b316:	2300      	movs	r3, #0
 800b318:	e062      	b.n	800b3e0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b31a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d106      	bne.n	800b32e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b320:	f107 0310 	add.w	r3, r7, #16
 800b324:	4618      	mov	r0, r3
 800b326:	f000 feed 	bl	800c104 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b32a:	2301      	movs	r3, #1
 800b32c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b32e:	f001 fded 	bl	800cf0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b332:	f000 fc2d 	bl	800bb90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b336:	f001 fdb7 	bl	800cea8 <vPortEnterCritical>
 800b33a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b33c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b340:	b25b      	sxtb	r3, r3
 800b342:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b346:	d103      	bne.n	800b350 <xQueueReceive+0x128>
 800b348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b34a:	2200      	movs	r2, #0
 800b34c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b352:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b356:	b25b      	sxtb	r3, r3
 800b358:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b35c:	d103      	bne.n	800b366 <xQueueReceive+0x13e>
 800b35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b360:	2200      	movs	r2, #0
 800b362:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b366:	f001 fdd1 	bl	800cf0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b36a:	1d3a      	adds	r2, r7, #4
 800b36c:	f107 0310 	add.w	r3, r7, #16
 800b370:	4611      	mov	r1, r2
 800b372:	4618      	mov	r0, r3
 800b374:	f000 fedc 	bl	800c130 <xTaskCheckForTimeOut>
 800b378:	4603      	mov	r3, r0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d123      	bne.n	800b3c6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b37e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b380:	f000 f916 	bl	800b5b0 <prvIsQueueEmpty>
 800b384:	4603      	mov	r3, r0
 800b386:	2b00      	cmp	r3, #0
 800b388:	d017      	beq.n	800b3ba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b38c:	3324      	adds	r3, #36	@ 0x24
 800b38e:	687a      	ldr	r2, [r7, #4]
 800b390:	4611      	mov	r1, r2
 800b392:	4618      	mov	r0, r3
 800b394:	f000 fdd8 	bl	800bf48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b398:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b39a:	f000 f8b7 	bl	800b50c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b39e:	f000 fc05 	bl	800bbac <xTaskResumeAll>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d189      	bne.n	800b2bc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b3a8:	4b0f      	ldr	r3, [pc, #60]	@ (800b3e8 <xQueueReceive+0x1c0>)
 800b3aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3ae:	601a      	str	r2, [r3, #0]
 800b3b0:	f3bf 8f4f 	dsb	sy
 800b3b4:	f3bf 8f6f 	isb	sy
 800b3b8:	e780      	b.n	800b2bc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b3ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3bc:	f000 f8a6 	bl	800b50c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b3c0:	f000 fbf4 	bl	800bbac <xTaskResumeAll>
 800b3c4:	e77a      	b.n	800b2bc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b3c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3c8:	f000 f8a0 	bl	800b50c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b3cc:	f000 fbee 	bl	800bbac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3d2:	f000 f8ed 	bl	800b5b0 <prvIsQueueEmpty>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	f43f af6f 	beq.w	800b2bc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b3de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3730      	adds	r7, #48	@ 0x30
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	e000ed04 	.word	0xe000ed04

0800b3ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b086      	sub	sp, #24
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	60b9      	str	r1, [r7, #8]
 800b3f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b400:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b406:	2b00      	cmp	r3, #0
 800b408:	d10d      	bne.n	800b426 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d14d      	bne.n	800b4ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	4618      	mov	r0, r3
 800b418:	f000 fff4 	bl	800c404 <xTaskPriorityDisinherit>
 800b41c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2200      	movs	r2, #0
 800b422:	609a      	str	r2, [r3, #8]
 800b424:	e043      	b.n	800b4ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d119      	bne.n	800b460 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	6858      	ldr	r0, [r3, #4]
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b434:	461a      	mov	r2, r3
 800b436:	68b9      	ldr	r1, [r7, #8]
 800b438:	f011 ff5b 	bl	801d2f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	685a      	ldr	r2, [r3, #4]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b444:	441a      	add	r2, r3
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	685a      	ldr	r2, [r3, #4]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	689b      	ldr	r3, [r3, #8]
 800b452:	429a      	cmp	r2, r3
 800b454:	d32b      	bcc.n	800b4ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	605a      	str	r2, [r3, #4]
 800b45e:	e026      	b.n	800b4ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	68d8      	ldr	r0, [r3, #12]
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b468:	461a      	mov	r2, r3
 800b46a:	68b9      	ldr	r1, [r7, #8]
 800b46c:	f011 ff41 	bl	801d2f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	68da      	ldr	r2, [r3, #12]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b478:	425b      	negs	r3, r3
 800b47a:	441a      	add	r2, r3
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	68da      	ldr	r2, [r3, #12]
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d207      	bcs.n	800b49c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	689a      	ldr	r2, [r3, #8]
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b494:	425b      	negs	r3, r3
 800b496:	441a      	add	r2, r3
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	d105      	bne.n	800b4ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d002      	beq.n	800b4ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	3b01      	subs	r3, #1
 800b4ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	1c5a      	adds	r2, r3, #1
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b4b6:	697b      	ldr	r3, [r7, #20]
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3718      	adds	r7, #24
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d018      	beq.n	800b504 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	68da      	ldr	r2, [r3, #12]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4da:	441a      	add	r2, r3
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	68da      	ldr	r2, [r3, #12]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d303      	bcc.n	800b4f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681a      	ldr	r2, [r3, #0]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	68d9      	ldr	r1, [r3, #12]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	6838      	ldr	r0, [r7, #0]
 800b500:	f011 fef7 	bl	801d2f2 <memcpy>
	}
}
 800b504:	bf00      	nop
 800b506:	3708      	adds	r7, #8
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b514:	f001 fcc8 	bl	800cea8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b51e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b520:	e011      	b.n	800b546 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b526:	2b00      	cmp	r3, #0
 800b528:	d012      	beq.n	800b550 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	3324      	adds	r3, #36	@ 0x24
 800b52e:	4618      	mov	r0, r3
 800b530:	f000 fd5c 	bl	800bfec <xTaskRemoveFromEventList>
 800b534:	4603      	mov	r3, r0
 800b536:	2b00      	cmp	r3, #0
 800b538:	d001      	beq.n	800b53e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b53a:	f000 fe5d 	bl	800c1f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b53e:	7bfb      	ldrb	r3, [r7, #15]
 800b540:	3b01      	subs	r3, #1
 800b542:	b2db      	uxtb	r3, r3
 800b544:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	dce9      	bgt.n	800b522 <prvUnlockQueue+0x16>
 800b54e:	e000      	b.n	800b552 <prvUnlockQueue+0x46>
					break;
 800b550:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	22ff      	movs	r2, #255	@ 0xff
 800b556:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b55a:	f001 fcd7 	bl	800cf0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b55e:	f001 fca3 	bl	800cea8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b568:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b56a:	e011      	b.n	800b590 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	691b      	ldr	r3, [r3, #16]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d012      	beq.n	800b59a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	3310      	adds	r3, #16
 800b578:	4618      	mov	r0, r3
 800b57a:	f000 fd37 	bl	800bfec <xTaskRemoveFromEventList>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d001      	beq.n	800b588 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b584:	f000 fe38 	bl	800c1f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b588:	7bbb      	ldrb	r3, [r7, #14]
 800b58a:	3b01      	subs	r3, #1
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b594:	2b00      	cmp	r3, #0
 800b596:	dce9      	bgt.n	800b56c <prvUnlockQueue+0x60>
 800b598:	e000      	b.n	800b59c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b59a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	22ff      	movs	r2, #255	@ 0xff
 800b5a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b5a4:	f001 fcb2 	bl	800cf0c <vPortExitCritical>
}
 800b5a8:	bf00      	nop
 800b5aa:	3710      	adds	r7, #16
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b5b8:	f001 fc76 	bl	800cea8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d102      	bne.n	800b5ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	60fb      	str	r3, [r7, #12]
 800b5c8:	e001      	b.n	800b5ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b5ce:	f001 fc9d 	bl	800cf0c <vPortExitCritical>

	return xReturn;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3710      	adds	r7, #16
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b5e4:	f001 fc60 	bl	800cea8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d102      	bne.n	800b5fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	60fb      	str	r3, [r7, #12]
 800b5f8:	e001      	b.n	800b5fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b5fe:	f001 fc85 	bl	800cf0c <vPortExitCritical>

	return xReturn;
 800b602:	68fb      	ldr	r3, [r7, #12]
}
 800b604:	4618      	mov	r0, r3
 800b606:	3710      	adds	r7, #16
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b60c:	b480      	push	{r7}
 800b60e:	b085      	sub	sp, #20
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b616:	2300      	movs	r3, #0
 800b618:	60fb      	str	r3, [r7, #12]
 800b61a:	e014      	b.n	800b646 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b61c:	4a0f      	ldr	r2, [pc, #60]	@ (800b65c <vQueueAddToRegistry+0x50>)
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d10b      	bne.n	800b640 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b628:	490c      	ldr	r1, [pc, #48]	@ (800b65c <vQueueAddToRegistry+0x50>)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	683a      	ldr	r2, [r7, #0]
 800b62e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b632:	4a0a      	ldr	r2, [pc, #40]	@ (800b65c <vQueueAddToRegistry+0x50>)
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	00db      	lsls	r3, r3, #3
 800b638:	4413      	add	r3, r2
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b63e:	e006      	b.n	800b64e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	3301      	adds	r3, #1
 800b644:	60fb      	str	r3, [r7, #12]
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2b07      	cmp	r3, #7
 800b64a:	d9e7      	bls.n	800b61c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b64c:	bf00      	nop
 800b64e:	bf00      	nop
 800b650:	3714      	adds	r7, #20
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr
 800b65a:	bf00      	nop
 800b65c:	240332b0 	.word	0x240332b0

0800b660 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b660:	b580      	push	{r7, lr}
 800b662:	b086      	sub	sp, #24
 800b664:	af00      	add	r7, sp, #0
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	60b9      	str	r1, [r7, #8]
 800b66a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b670:	f001 fc1a 	bl	800cea8 <vPortEnterCritical>
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b67a:	b25b      	sxtb	r3, r3
 800b67c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b680:	d103      	bne.n	800b68a <vQueueWaitForMessageRestricted+0x2a>
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	2200      	movs	r2, #0
 800b686:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b690:	b25b      	sxtb	r3, r3
 800b692:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b696:	d103      	bne.n	800b6a0 <vQueueWaitForMessageRestricted+0x40>
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	2200      	movs	r2, #0
 800b69c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b6a0:	f001 fc34 	bl	800cf0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d106      	bne.n	800b6ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	3324      	adds	r3, #36	@ 0x24
 800b6b0:	687a      	ldr	r2, [r7, #4]
 800b6b2:	68b9      	ldr	r1, [r7, #8]
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f000 fc6d 	bl	800bf94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b6ba:	6978      	ldr	r0, [r7, #20]
 800b6bc:	f7ff ff26 	bl	800b50c <prvUnlockQueue>
	}
 800b6c0:	bf00      	nop
 800b6c2:	3718      	adds	r7, #24
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b08e      	sub	sp, #56	@ 0x38
 800b6cc:	af04      	add	r7, sp, #16
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	60b9      	str	r1, [r7, #8]
 800b6d2:	607a      	str	r2, [r7, #4]
 800b6d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b6d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d10b      	bne.n	800b6f4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b6dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e0:	f383 8811 	msr	BASEPRI, r3
 800b6e4:	f3bf 8f6f 	isb	sy
 800b6e8:	f3bf 8f4f 	dsb	sy
 800b6ec:	623b      	str	r3, [r7, #32]
}
 800b6ee:	bf00      	nop
 800b6f0:	bf00      	nop
 800b6f2:	e7fd      	b.n	800b6f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d10b      	bne.n	800b712 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b6fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6fe:	f383 8811 	msr	BASEPRI, r3
 800b702:	f3bf 8f6f 	isb	sy
 800b706:	f3bf 8f4f 	dsb	sy
 800b70a:	61fb      	str	r3, [r7, #28]
}
 800b70c:	bf00      	nop
 800b70e:	bf00      	nop
 800b710:	e7fd      	b.n	800b70e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b712:	23a8      	movs	r3, #168	@ 0xa8
 800b714:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	2ba8      	cmp	r3, #168	@ 0xa8
 800b71a:	d00b      	beq.n	800b734 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b71c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b720:	f383 8811 	msr	BASEPRI, r3
 800b724:	f3bf 8f6f 	isb	sy
 800b728:	f3bf 8f4f 	dsb	sy
 800b72c:	61bb      	str	r3, [r7, #24]
}
 800b72e:	bf00      	nop
 800b730:	bf00      	nop
 800b732:	e7fd      	b.n	800b730 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b734:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d01e      	beq.n	800b77a <xTaskCreateStatic+0xb2>
 800b73c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d01b      	beq.n	800b77a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b744:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b748:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b74a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b74e:	2202      	movs	r2, #2
 800b750:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b754:	2300      	movs	r3, #0
 800b756:	9303      	str	r3, [sp, #12]
 800b758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b75a:	9302      	str	r3, [sp, #8]
 800b75c:	f107 0314 	add.w	r3, r7, #20
 800b760:	9301      	str	r3, [sp, #4]
 800b762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b764:	9300      	str	r3, [sp, #0]
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	68b9      	ldr	r1, [r7, #8]
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f000 f851 	bl	800b814 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b772:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b774:	f000 f8f6 	bl	800b964 <prvAddNewTaskToReadyList>
 800b778:	e001      	b.n	800b77e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b77a:	2300      	movs	r3, #0
 800b77c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b77e:	697b      	ldr	r3, [r7, #20]
	}
 800b780:	4618      	mov	r0, r3
 800b782:	3728      	adds	r7, #40	@ 0x28
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b08c      	sub	sp, #48	@ 0x30
 800b78c:	af04      	add	r7, sp, #16
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	603b      	str	r3, [r7, #0]
 800b794:	4613      	mov	r3, r2
 800b796:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b798:	88fb      	ldrh	r3, [r7, #6]
 800b79a:	009b      	lsls	r3, r3, #2
 800b79c:	4618      	mov	r0, r3
 800b79e:	f001 fca5 	bl	800d0ec <pvPortMalloc>
 800b7a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d00e      	beq.n	800b7c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b7aa:	20a8      	movs	r0, #168	@ 0xa8
 800b7ac:	f001 fc9e 	bl	800d0ec <pvPortMalloc>
 800b7b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b7b2:	69fb      	ldr	r3, [r7, #28]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d003      	beq.n	800b7c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b7b8:	69fb      	ldr	r3, [r7, #28]
 800b7ba:	697a      	ldr	r2, [r7, #20]
 800b7bc:	631a      	str	r2, [r3, #48]	@ 0x30
 800b7be:	e005      	b.n	800b7cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b7c0:	6978      	ldr	r0, [r7, #20]
 800b7c2:	f001 fd61 	bl	800d288 <vPortFree>
 800b7c6:	e001      	b.n	800b7cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b7cc:	69fb      	ldr	r3, [r7, #28]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d017      	beq.n	800b802 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b7da:	88fa      	ldrh	r2, [r7, #6]
 800b7dc:	2300      	movs	r3, #0
 800b7de:	9303      	str	r3, [sp, #12]
 800b7e0:	69fb      	ldr	r3, [r7, #28]
 800b7e2:	9302      	str	r3, [sp, #8]
 800b7e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7e6:	9301      	str	r3, [sp, #4]
 800b7e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ea:	9300      	str	r3, [sp, #0]
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	68b9      	ldr	r1, [r7, #8]
 800b7f0:	68f8      	ldr	r0, [r7, #12]
 800b7f2:	f000 f80f 	bl	800b814 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b7f6:	69f8      	ldr	r0, [r7, #28]
 800b7f8:	f000 f8b4 	bl	800b964 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	61bb      	str	r3, [r7, #24]
 800b800:	e002      	b.n	800b808 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b802:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b806:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b808:	69bb      	ldr	r3, [r7, #24]
	}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3720      	adds	r7, #32
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
	...

0800b814 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b088      	sub	sp, #32
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	60b9      	str	r1, [r7, #8]
 800b81e:	607a      	str	r2, [r7, #4]
 800b820:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b824:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	009b      	lsls	r3, r3, #2
 800b82a:	461a      	mov	r2, r3
 800b82c:	21a5      	movs	r1, #165	@ 0xa5
 800b82e:	f011 fc41 	bl	801d0b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b834:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b836:	6879      	ldr	r1, [r7, #4]
 800b838:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b83c:	440b      	add	r3, r1
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	4413      	add	r3, r2
 800b842:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b844:	69bb      	ldr	r3, [r7, #24]
 800b846:	f023 0307 	bic.w	r3, r3, #7
 800b84a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	f003 0307 	and.w	r3, r3, #7
 800b852:	2b00      	cmp	r3, #0
 800b854:	d00b      	beq.n	800b86e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b85a:	f383 8811 	msr	BASEPRI, r3
 800b85e:	f3bf 8f6f 	isb	sy
 800b862:	f3bf 8f4f 	dsb	sy
 800b866:	617b      	str	r3, [r7, #20]
}
 800b868:	bf00      	nop
 800b86a:	bf00      	nop
 800b86c:	e7fd      	b.n	800b86a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d01f      	beq.n	800b8b4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b874:	2300      	movs	r3, #0
 800b876:	61fb      	str	r3, [r7, #28]
 800b878:	e012      	b.n	800b8a0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b87a:	68ba      	ldr	r2, [r7, #8]
 800b87c:	69fb      	ldr	r3, [r7, #28]
 800b87e:	4413      	add	r3, r2
 800b880:	7819      	ldrb	r1, [r3, #0]
 800b882:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b884:	69fb      	ldr	r3, [r7, #28]
 800b886:	4413      	add	r3, r2
 800b888:	3334      	adds	r3, #52	@ 0x34
 800b88a:	460a      	mov	r2, r1
 800b88c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b88e:	68ba      	ldr	r2, [r7, #8]
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	4413      	add	r3, r2
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d006      	beq.n	800b8a8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b89a:	69fb      	ldr	r3, [r7, #28]
 800b89c:	3301      	adds	r3, #1
 800b89e:	61fb      	str	r3, [r7, #28]
 800b8a0:	69fb      	ldr	r3, [r7, #28]
 800b8a2:	2b0f      	cmp	r3, #15
 800b8a4:	d9e9      	bls.n	800b87a <prvInitialiseNewTask+0x66>
 800b8a6:	e000      	b.n	800b8aa <prvInitialiseNewTask+0x96>
			{
				break;
 800b8a8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b8b2:	e003      	b.n	800b8bc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b8bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8be:	2b37      	cmp	r3, #55	@ 0x37
 800b8c0:	d901      	bls.n	800b8c6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b8c2:	2337      	movs	r3, #55	@ 0x37
 800b8c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b8ca:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b8cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b8d0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8da:	3304      	adds	r3, #4
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7ff f965 	bl	800abac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8e4:	3318      	adds	r3, #24
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7ff f960 	bl	800abac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b8ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b900:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b904:	2200      	movs	r2, #0
 800b906:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b90c:	2200      	movs	r2, #0
 800b90e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b914:	3354      	adds	r3, #84	@ 0x54
 800b916:	224c      	movs	r2, #76	@ 0x4c
 800b918:	2100      	movs	r1, #0
 800b91a:	4618      	mov	r0, r3
 800b91c:	f011 fbca 	bl	801d0b4 <memset>
 800b920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b922:	4a0d      	ldr	r2, [pc, #52]	@ (800b958 <prvInitialiseNewTask+0x144>)
 800b924:	659a      	str	r2, [r3, #88]	@ 0x58
 800b926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b928:	4a0c      	ldr	r2, [pc, #48]	@ (800b95c <prvInitialiseNewTask+0x148>)
 800b92a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b92c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b92e:	4a0c      	ldr	r2, [pc, #48]	@ (800b960 <prvInitialiseNewTask+0x14c>)
 800b930:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b932:	683a      	ldr	r2, [r7, #0]
 800b934:	68f9      	ldr	r1, [r7, #12]
 800b936:	69b8      	ldr	r0, [r7, #24]
 800b938:	f001 f982 	bl	800cc40 <pxPortInitialiseStack>
 800b93c:	4602      	mov	r2, r0
 800b93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b940:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b944:	2b00      	cmp	r3, #0
 800b946:	d002      	beq.n	800b94e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b94a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b94c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b94e:	bf00      	nop
 800b950:	3720      	adds	r7, #32
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	240693ac 	.word	0x240693ac
 800b95c:	24069414 	.word	0x24069414
 800b960:	2406947c 	.word	0x2406947c

0800b964 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b082      	sub	sp, #8
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b96c:	f001 fa9c 	bl	800cea8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b970:	4b2d      	ldr	r3, [pc, #180]	@ (800ba28 <prvAddNewTaskToReadyList+0xc4>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	3301      	adds	r3, #1
 800b976:	4a2c      	ldr	r2, [pc, #176]	@ (800ba28 <prvAddNewTaskToReadyList+0xc4>)
 800b978:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b97a:	4b2c      	ldr	r3, [pc, #176]	@ (800ba2c <prvAddNewTaskToReadyList+0xc8>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d109      	bne.n	800b996 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b982:	4a2a      	ldr	r2, [pc, #168]	@ (800ba2c <prvAddNewTaskToReadyList+0xc8>)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b988:	4b27      	ldr	r3, [pc, #156]	@ (800ba28 <prvAddNewTaskToReadyList+0xc4>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d110      	bne.n	800b9b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b990:	f000 fc56 	bl	800c240 <prvInitialiseTaskLists>
 800b994:	e00d      	b.n	800b9b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b996:	4b26      	ldr	r3, [pc, #152]	@ (800ba30 <prvAddNewTaskToReadyList+0xcc>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d109      	bne.n	800b9b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b99e:	4b23      	ldr	r3, [pc, #140]	@ (800ba2c <prvAddNewTaskToReadyList+0xc8>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d802      	bhi.n	800b9b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b9ac:	4a1f      	ldr	r2, [pc, #124]	@ (800ba2c <prvAddNewTaskToReadyList+0xc8>)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b9b2:	4b20      	ldr	r3, [pc, #128]	@ (800ba34 <prvAddNewTaskToReadyList+0xd0>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	4a1e      	ldr	r2, [pc, #120]	@ (800ba34 <prvAddNewTaskToReadyList+0xd0>)
 800b9ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b9bc:	4b1d      	ldr	r3, [pc, #116]	@ (800ba34 <prvAddNewTaskToReadyList+0xd0>)
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9c8:	4b1b      	ldr	r3, [pc, #108]	@ (800ba38 <prvAddNewTaskToReadyList+0xd4>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d903      	bls.n	800b9d8 <prvAddNewTaskToReadyList+0x74>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9d4:	4a18      	ldr	r2, [pc, #96]	@ (800ba38 <prvAddNewTaskToReadyList+0xd4>)
 800b9d6:	6013      	str	r3, [r2, #0]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9dc:	4613      	mov	r3, r2
 800b9de:	009b      	lsls	r3, r3, #2
 800b9e0:	4413      	add	r3, r2
 800b9e2:	009b      	lsls	r3, r3, #2
 800b9e4:	4a15      	ldr	r2, [pc, #84]	@ (800ba3c <prvAddNewTaskToReadyList+0xd8>)
 800b9e6:	441a      	add	r2, r3
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	3304      	adds	r3, #4
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	4610      	mov	r0, r2
 800b9f0:	f7ff f8e9 	bl	800abc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b9f4:	f001 fa8a 	bl	800cf0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b9f8:	4b0d      	ldr	r3, [pc, #52]	@ (800ba30 <prvAddNewTaskToReadyList+0xcc>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d00e      	beq.n	800ba1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ba00:	4b0a      	ldr	r3, [pc, #40]	@ (800ba2c <prvAddNewTaskToReadyList+0xc8>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d207      	bcs.n	800ba1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ba0e:	4b0c      	ldr	r3, [pc, #48]	@ (800ba40 <prvAddNewTaskToReadyList+0xdc>)
 800ba10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba14:	601a      	str	r2, [r3, #0]
 800ba16:	f3bf 8f4f 	dsb	sy
 800ba1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba1e:	bf00      	nop
 800ba20:	3708      	adds	r7, #8
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	240337c4 	.word	0x240337c4
 800ba2c:	240332f0 	.word	0x240332f0
 800ba30:	240337d0 	.word	0x240337d0
 800ba34:	240337e0 	.word	0x240337e0
 800ba38:	240337cc 	.word	0x240337cc
 800ba3c:	240332f4 	.word	0x240332f4
 800ba40:	e000ed04 	.word	0xe000ed04

0800ba44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d018      	beq.n	800ba88 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ba56:	4b14      	ldr	r3, [pc, #80]	@ (800baa8 <vTaskDelay+0x64>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d00b      	beq.n	800ba76 <vTaskDelay+0x32>
	__asm volatile
 800ba5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba62:	f383 8811 	msr	BASEPRI, r3
 800ba66:	f3bf 8f6f 	isb	sy
 800ba6a:	f3bf 8f4f 	dsb	sy
 800ba6e:	60bb      	str	r3, [r7, #8]
}
 800ba70:	bf00      	nop
 800ba72:	bf00      	nop
 800ba74:	e7fd      	b.n	800ba72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ba76:	f000 f88b 	bl	800bb90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ba7a:	2100      	movs	r1, #0
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f000 fd31 	bl	800c4e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ba82:	f000 f893 	bl	800bbac <xTaskResumeAll>
 800ba86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d107      	bne.n	800ba9e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ba8e:	4b07      	ldr	r3, [pc, #28]	@ (800baac <vTaskDelay+0x68>)
 800ba90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba94:	601a      	str	r2, [r3, #0]
 800ba96:	f3bf 8f4f 	dsb	sy
 800ba9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba9e:	bf00      	nop
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	240337ec 	.word	0x240337ec
 800baac:	e000ed04 	.word	0xe000ed04

0800bab0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b08a      	sub	sp, #40	@ 0x28
 800bab4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bab6:	2300      	movs	r3, #0
 800bab8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800baba:	2300      	movs	r3, #0
 800babc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800babe:	463a      	mov	r2, r7
 800bac0:	1d39      	adds	r1, r7, #4
 800bac2:	f107 0308 	add.w	r3, r7, #8
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7ff f81c 	bl	800ab04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bacc:	6839      	ldr	r1, [r7, #0]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	68ba      	ldr	r2, [r7, #8]
 800bad2:	9202      	str	r2, [sp, #8]
 800bad4:	9301      	str	r3, [sp, #4]
 800bad6:	2300      	movs	r3, #0
 800bad8:	9300      	str	r3, [sp, #0]
 800bada:	2300      	movs	r3, #0
 800badc:	460a      	mov	r2, r1
 800bade:	4924      	ldr	r1, [pc, #144]	@ (800bb70 <vTaskStartScheduler+0xc0>)
 800bae0:	4824      	ldr	r0, [pc, #144]	@ (800bb74 <vTaskStartScheduler+0xc4>)
 800bae2:	f7ff fdf1 	bl	800b6c8 <xTaskCreateStatic>
 800bae6:	4603      	mov	r3, r0
 800bae8:	4a23      	ldr	r2, [pc, #140]	@ (800bb78 <vTaskStartScheduler+0xc8>)
 800baea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800baec:	4b22      	ldr	r3, [pc, #136]	@ (800bb78 <vTaskStartScheduler+0xc8>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d002      	beq.n	800bafa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800baf4:	2301      	movs	r3, #1
 800baf6:	617b      	str	r3, [r7, #20]
 800baf8:	e001      	b.n	800bafe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bafa:	2300      	movs	r3, #0
 800bafc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d102      	bne.n	800bb0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bb04:	f000 fd42 	bl	800c58c <xTimerCreateTimerTask>
 800bb08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d11b      	bne.n	800bb48 <vTaskStartScheduler+0x98>
	__asm volatile
 800bb10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb14:	f383 8811 	msr	BASEPRI, r3
 800bb18:	f3bf 8f6f 	isb	sy
 800bb1c:	f3bf 8f4f 	dsb	sy
 800bb20:	613b      	str	r3, [r7, #16]
}
 800bb22:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bb24:	4b15      	ldr	r3, [pc, #84]	@ (800bb7c <vTaskStartScheduler+0xcc>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	3354      	adds	r3, #84	@ 0x54
 800bb2a:	4a15      	ldr	r2, [pc, #84]	@ (800bb80 <vTaskStartScheduler+0xd0>)
 800bb2c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bb2e:	4b15      	ldr	r3, [pc, #84]	@ (800bb84 <vTaskStartScheduler+0xd4>)
 800bb30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bb34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bb36:	4b14      	ldr	r3, [pc, #80]	@ (800bb88 <vTaskStartScheduler+0xd8>)
 800bb38:	2201      	movs	r2, #1
 800bb3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bb3c:	4b13      	ldr	r3, [pc, #76]	@ (800bb8c <vTaskStartScheduler+0xdc>)
 800bb3e:	2200      	movs	r2, #0
 800bb40:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bb42:	f001 f90d 	bl	800cd60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bb46:	e00f      	b.n	800bb68 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb4e:	d10b      	bne.n	800bb68 <vTaskStartScheduler+0xb8>
	__asm volatile
 800bb50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb54:	f383 8811 	msr	BASEPRI, r3
 800bb58:	f3bf 8f6f 	isb	sy
 800bb5c:	f3bf 8f4f 	dsb	sy
 800bb60:	60fb      	str	r3, [r7, #12]
}
 800bb62:	bf00      	nop
 800bb64:	bf00      	nop
 800bb66:	e7fd      	b.n	800bb64 <vTaskStartScheduler+0xb4>
}
 800bb68:	bf00      	nop
 800bb6a:	3718      	adds	r7, #24
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	0801e1c0 	.word	0x0801e1c0
 800bb74:	0800c211 	.word	0x0800c211
 800bb78:	240337e8 	.word	0x240337e8
 800bb7c:	240332f0 	.word	0x240332f0
 800bb80:	240013a0 	.word	0x240013a0
 800bb84:	240337e4 	.word	0x240337e4
 800bb88:	240337d0 	.word	0x240337d0
 800bb8c:	240337c8 	.word	0x240337c8

0800bb90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bb90:	b480      	push	{r7}
 800bb92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bb94:	4b04      	ldr	r3, [pc, #16]	@ (800bba8 <vTaskSuspendAll+0x18>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	4a03      	ldr	r2, [pc, #12]	@ (800bba8 <vTaskSuspendAll+0x18>)
 800bb9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bb9e:	bf00      	nop
 800bba0:	46bd      	mov	sp, r7
 800bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba6:	4770      	bx	lr
 800bba8:	240337ec 	.word	0x240337ec

0800bbac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bbba:	4b42      	ldr	r3, [pc, #264]	@ (800bcc4 <xTaskResumeAll+0x118>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d10b      	bne.n	800bbda <xTaskResumeAll+0x2e>
	__asm volatile
 800bbc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc6:	f383 8811 	msr	BASEPRI, r3
 800bbca:	f3bf 8f6f 	isb	sy
 800bbce:	f3bf 8f4f 	dsb	sy
 800bbd2:	603b      	str	r3, [r7, #0]
}
 800bbd4:	bf00      	nop
 800bbd6:	bf00      	nop
 800bbd8:	e7fd      	b.n	800bbd6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bbda:	f001 f965 	bl	800cea8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bbde:	4b39      	ldr	r3, [pc, #228]	@ (800bcc4 <xTaskResumeAll+0x118>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	3b01      	subs	r3, #1
 800bbe4:	4a37      	ldr	r2, [pc, #220]	@ (800bcc4 <xTaskResumeAll+0x118>)
 800bbe6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbe8:	4b36      	ldr	r3, [pc, #216]	@ (800bcc4 <xTaskResumeAll+0x118>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d162      	bne.n	800bcb6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bbf0:	4b35      	ldr	r3, [pc, #212]	@ (800bcc8 <xTaskResumeAll+0x11c>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d05e      	beq.n	800bcb6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bbf8:	e02f      	b.n	800bc5a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbfa:	4b34      	ldr	r3, [pc, #208]	@ (800bccc <xTaskResumeAll+0x120>)
 800bbfc:	68db      	ldr	r3, [r3, #12]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	3318      	adds	r3, #24
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7ff f83a 	bl	800ac80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	3304      	adds	r3, #4
 800bc10:	4618      	mov	r0, r3
 800bc12:	f7ff f835 	bl	800ac80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc1a:	4b2d      	ldr	r3, [pc, #180]	@ (800bcd0 <xTaskResumeAll+0x124>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d903      	bls.n	800bc2a <xTaskResumeAll+0x7e>
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc26:	4a2a      	ldr	r2, [pc, #168]	@ (800bcd0 <xTaskResumeAll+0x124>)
 800bc28:	6013      	str	r3, [r2, #0]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc2e:	4613      	mov	r3, r2
 800bc30:	009b      	lsls	r3, r3, #2
 800bc32:	4413      	add	r3, r2
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	4a27      	ldr	r2, [pc, #156]	@ (800bcd4 <xTaskResumeAll+0x128>)
 800bc38:	441a      	add	r2, r3
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	3304      	adds	r3, #4
 800bc3e:	4619      	mov	r1, r3
 800bc40:	4610      	mov	r0, r2
 800bc42:	f7fe ffc0 	bl	800abc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc4a:	4b23      	ldr	r3, [pc, #140]	@ (800bcd8 <xTaskResumeAll+0x12c>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d302      	bcc.n	800bc5a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800bc54:	4b21      	ldr	r3, [pc, #132]	@ (800bcdc <xTaskResumeAll+0x130>)
 800bc56:	2201      	movs	r2, #1
 800bc58:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc5a:	4b1c      	ldr	r3, [pc, #112]	@ (800bccc <xTaskResumeAll+0x120>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d1cb      	bne.n	800bbfa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d001      	beq.n	800bc6c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bc68:	f000 fb8e 	bl	800c388 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bc6c:	4b1c      	ldr	r3, [pc, #112]	@ (800bce0 <xTaskResumeAll+0x134>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d010      	beq.n	800bc9a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bc78:	f000 f846 	bl	800bd08 <xTaskIncrementTick>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d002      	beq.n	800bc88 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800bc82:	4b16      	ldr	r3, [pc, #88]	@ (800bcdc <xTaskResumeAll+0x130>)
 800bc84:	2201      	movs	r2, #1
 800bc86:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	3b01      	subs	r3, #1
 800bc8c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d1f1      	bne.n	800bc78 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800bc94:	4b12      	ldr	r3, [pc, #72]	@ (800bce0 <xTaskResumeAll+0x134>)
 800bc96:	2200      	movs	r2, #0
 800bc98:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bc9a:	4b10      	ldr	r3, [pc, #64]	@ (800bcdc <xTaskResumeAll+0x130>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d009      	beq.n	800bcb6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bca2:	2301      	movs	r3, #1
 800bca4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bca6:	4b0f      	ldr	r3, [pc, #60]	@ (800bce4 <xTaskResumeAll+0x138>)
 800bca8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcac:	601a      	str	r2, [r3, #0]
 800bcae:	f3bf 8f4f 	dsb	sy
 800bcb2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bcb6:	f001 f929 	bl	800cf0c <vPortExitCritical>

	return xAlreadyYielded;
 800bcba:	68bb      	ldr	r3, [r7, #8]
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3710      	adds	r7, #16
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}
 800bcc4:	240337ec 	.word	0x240337ec
 800bcc8:	240337c4 	.word	0x240337c4
 800bccc:	24033784 	.word	0x24033784
 800bcd0:	240337cc 	.word	0x240337cc
 800bcd4:	240332f4 	.word	0x240332f4
 800bcd8:	240332f0 	.word	0x240332f0
 800bcdc:	240337d8 	.word	0x240337d8
 800bce0:	240337d4 	.word	0x240337d4
 800bce4:	e000ed04 	.word	0xe000ed04

0800bce8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bcee:	4b05      	ldr	r3, [pc, #20]	@ (800bd04 <xTaskGetTickCount+0x1c>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bcf4:	687b      	ldr	r3, [r7, #4]
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	370c      	adds	r7, #12
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr
 800bd02:	bf00      	nop
 800bd04:	240337c8 	.word	0x240337c8

0800bd08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b086      	sub	sp, #24
 800bd0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd12:	4b4f      	ldr	r3, [pc, #316]	@ (800be50 <xTaskIncrementTick+0x148>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	f040 8090 	bne.w	800be3c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bd1c:	4b4d      	ldr	r3, [pc, #308]	@ (800be54 <xTaskIncrementTick+0x14c>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	3301      	adds	r3, #1
 800bd22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bd24:	4a4b      	ldr	r2, [pc, #300]	@ (800be54 <xTaskIncrementTick+0x14c>)
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d121      	bne.n	800bd74 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bd30:	4b49      	ldr	r3, [pc, #292]	@ (800be58 <xTaskIncrementTick+0x150>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00b      	beq.n	800bd52 <xTaskIncrementTick+0x4a>
	__asm volatile
 800bd3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd3e:	f383 8811 	msr	BASEPRI, r3
 800bd42:	f3bf 8f6f 	isb	sy
 800bd46:	f3bf 8f4f 	dsb	sy
 800bd4a:	603b      	str	r3, [r7, #0]
}
 800bd4c:	bf00      	nop
 800bd4e:	bf00      	nop
 800bd50:	e7fd      	b.n	800bd4e <xTaskIncrementTick+0x46>
 800bd52:	4b41      	ldr	r3, [pc, #260]	@ (800be58 <xTaskIncrementTick+0x150>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	60fb      	str	r3, [r7, #12]
 800bd58:	4b40      	ldr	r3, [pc, #256]	@ (800be5c <xTaskIncrementTick+0x154>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4a3e      	ldr	r2, [pc, #248]	@ (800be58 <xTaskIncrementTick+0x150>)
 800bd5e:	6013      	str	r3, [r2, #0]
 800bd60:	4a3e      	ldr	r2, [pc, #248]	@ (800be5c <xTaskIncrementTick+0x154>)
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	6013      	str	r3, [r2, #0]
 800bd66:	4b3e      	ldr	r3, [pc, #248]	@ (800be60 <xTaskIncrementTick+0x158>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	4a3c      	ldr	r2, [pc, #240]	@ (800be60 <xTaskIncrementTick+0x158>)
 800bd6e:	6013      	str	r3, [r2, #0]
 800bd70:	f000 fb0a 	bl	800c388 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bd74:	4b3b      	ldr	r3, [pc, #236]	@ (800be64 <xTaskIncrementTick+0x15c>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	693a      	ldr	r2, [r7, #16]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d349      	bcc.n	800be12 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd7e:	4b36      	ldr	r3, [pc, #216]	@ (800be58 <xTaskIncrementTick+0x150>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d104      	bne.n	800bd92 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd88:	4b36      	ldr	r3, [pc, #216]	@ (800be64 <xTaskIncrementTick+0x15c>)
 800bd8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bd8e:	601a      	str	r2, [r3, #0]
					break;
 800bd90:	e03f      	b.n	800be12 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd92:	4b31      	ldr	r3, [pc, #196]	@ (800be58 <xTaskIncrementTick+0x150>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bda2:	693a      	ldr	r2, [r7, #16]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d203      	bcs.n	800bdb2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bdaa:	4a2e      	ldr	r2, [pc, #184]	@ (800be64 <xTaskIncrementTick+0x15c>)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bdb0:	e02f      	b.n	800be12 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	3304      	adds	r3, #4
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7fe ff62 	bl	800ac80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d004      	beq.n	800bdce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	3318      	adds	r3, #24
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7fe ff59 	bl	800ac80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdd2:	4b25      	ldr	r3, [pc, #148]	@ (800be68 <xTaskIncrementTick+0x160>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d903      	bls.n	800bde2 <xTaskIncrementTick+0xda>
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdde:	4a22      	ldr	r2, [pc, #136]	@ (800be68 <xTaskIncrementTick+0x160>)
 800bde0:	6013      	str	r3, [r2, #0]
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bde6:	4613      	mov	r3, r2
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	4413      	add	r3, r2
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	4a1f      	ldr	r2, [pc, #124]	@ (800be6c <xTaskIncrementTick+0x164>)
 800bdf0:	441a      	add	r2, r3
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	3304      	adds	r3, #4
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	4610      	mov	r0, r2
 800bdfa:	f7fe fee4 	bl	800abc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be02:	4b1b      	ldr	r3, [pc, #108]	@ (800be70 <xTaskIncrementTick+0x168>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be08:	429a      	cmp	r2, r3
 800be0a:	d3b8      	bcc.n	800bd7e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800be0c:	2301      	movs	r3, #1
 800be0e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be10:	e7b5      	b.n	800bd7e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800be12:	4b17      	ldr	r3, [pc, #92]	@ (800be70 <xTaskIncrementTick+0x168>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be18:	4914      	ldr	r1, [pc, #80]	@ (800be6c <xTaskIncrementTick+0x164>)
 800be1a:	4613      	mov	r3, r2
 800be1c:	009b      	lsls	r3, r3, #2
 800be1e:	4413      	add	r3, r2
 800be20:	009b      	lsls	r3, r3, #2
 800be22:	440b      	add	r3, r1
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	2b01      	cmp	r3, #1
 800be28:	d901      	bls.n	800be2e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800be2a:	2301      	movs	r3, #1
 800be2c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800be2e:	4b11      	ldr	r3, [pc, #68]	@ (800be74 <xTaskIncrementTick+0x16c>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d007      	beq.n	800be46 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800be36:	2301      	movs	r3, #1
 800be38:	617b      	str	r3, [r7, #20]
 800be3a:	e004      	b.n	800be46 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800be3c:	4b0e      	ldr	r3, [pc, #56]	@ (800be78 <xTaskIncrementTick+0x170>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	3301      	adds	r3, #1
 800be42:	4a0d      	ldr	r2, [pc, #52]	@ (800be78 <xTaskIncrementTick+0x170>)
 800be44:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800be46:	697b      	ldr	r3, [r7, #20]
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3718      	adds	r7, #24
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}
 800be50:	240337ec 	.word	0x240337ec
 800be54:	240337c8 	.word	0x240337c8
 800be58:	2403377c 	.word	0x2403377c
 800be5c:	24033780 	.word	0x24033780
 800be60:	240337dc 	.word	0x240337dc
 800be64:	240337e4 	.word	0x240337e4
 800be68:	240337cc 	.word	0x240337cc
 800be6c:	240332f4 	.word	0x240332f4
 800be70:	240332f0 	.word	0x240332f0
 800be74:	240337d8 	.word	0x240337d8
 800be78:	240337d4 	.word	0x240337d4

0800be7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800be7c:	b480      	push	{r7}
 800be7e:	b085      	sub	sp, #20
 800be80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800be82:	4b2b      	ldr	r3, [pc, #172]	@ (800bf30 <vTaskSwitchContext+0xb4>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d003      	beq.n	800be92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800be8a:	4b2a      	ldr	r3, [pc, #168]	@ (800bf34 <vTaskSwitchContext+0xb8>)
 800be8c:	2201      	movs	r2, #1
 800be8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800be90:	e047      	b.n	800bf22 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800be92:	4b28      	ldr	r3, [pc, #160]	@ (800bf34 <vTaskSwitchContext+0xb8>)
 800be94:	2200      	movs	r2, #0
 800be96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be98:	4b27      	ldr	r3, [pc, #156]	@ (800bf38 <vTaskSwitchContext+0xbc>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	60fb      	str	r3, [r7, #12]
 800be9e:	e011      	b.n	800bec4 <vTaskSwitchContext+0x48>
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d10b      	bne.n	800bebe <vTaskSwitchContext+0x42>
	__asm volatile
 800bea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beaa:	f383 8811 	msr	BASEPRI, r3
 800beae:	f3bf 8f6f 	isb	sy
 800beb2:	f3bf 8f4f 	dsb	sy
 800beb6:	607b      	str	r3, [r7, #4]
}
 800beb8:	bf00      	nop
 800beba:	bf00      	nop
 800bebc:	e7fd      	b.n	800beba <vTaskSwitchContext+0x3e>
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	3b01      	subs	r3, #1
 800bec2:	60fb      	str	r3, [r7, #12]
 800bec4:	491d      	ldr	r1, [pc, #116]	@ (800bf3c <vTaskSwitchContext+0xc0>)
 800bec6:	68fa      	ldr	r2, [r7, #12]
 800bec8:	4613      	mov	r3, r2
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	4413      	add	r3, r2
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	440b      	add	r3, r1
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d0e3      	beq.n	800bea0 <vTaskSwitchContext+0x24>
 800bed8:	68fa      	ldr	r2, [r7, #12]
 800beda:	4613      	mov	r3, r2
 800bedc:	009b      	lsls	r3, r3, #2
 800bede:	4413      	add	r3, r2
 800bee0:	009b      	lsls	r3, r3, #2
 800bee2:	4a16      	ldr	r2, [pc, #88]	@ (800bf3c <vTaskSwitchContext+0xc0>)
 800bee4:	4413      	add	r3, r2
 800bee6:	60bb      	str	r3, [r7, #8]
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	685b      	ldr	r3, [r3, #4]
 800beec:	685a      	ldr	r2, [r3, #4]
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	605a      	str	r2, [r3, #4]
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	685a      	ldr	r2, [r3, #4]
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	3308      	adds	r3, #8
 800befa:	429a      	cmp	r2, r3
 800befc:	d104      	bne.n	800bf08 <vTaskSwitchContext+0x8c>
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	685a      	ldr	r2, [r3, #4]
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	605a      	str	r2, [r3, #4]
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	68db      	ldr	r3, [r3, #12]
 800bf0e:	4a0c      	ldr	r2, [pc, #48]	@ (800bf40 <vTaskSwitchContext+0xc4>)
 800bf10:	6013      	str	r3, [r2, #0]
 800bf12:	4a09      	ldr	r2, [pc, #36]	@ (800bf38 <vTaskSwitchContext+0xbc>)
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bf18:	4b09      	ldr	r3, [pc, #36]	@ (800bf40 <vTaskSwitchContext+0xc4>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	3354      	adds	r3, #84	@ 0x54
 800bf1e:	4a09      	ldr	r2, [pc, #36]	@ (800bf44 <vTaskSwitchContext+0xc8>)
 800bf20:	6013      	str	r3, [r2, #0]
}
 800bf22:	bf00      	nop
 800bf24:	3714      	adds	r7, #20
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr
 800bf2e:	bf00      	nop
 800bf30:	240337ec 	.word	0x240337ec
 800bf34:	240337d8 	.word	0x240337d8
 800bf38:	240337cc 	.word	0x240337cc
 800bf3c:	240332f4 	.word	0x240332f4
 800bf40:	240332f0 	.word	0x240332f0
 800bf44:	240013a0 	.word	0x240013a0

0800bf48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d10b      	bne.n	800bf70 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bf58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf5c:	f383 8811 	msr	BASEPRI, r3
 800bf60:	f3bf 8f6f 	isb	sy
 800bf64:	f3bf 8f4f 	dsb	sy
 800bf68:	60fb      	str	r3, [r7, #12]
}
 800bf6a:	bf00      	nop
 800bf6c:	bf00      	nop
 800bf6e:	e7fd      	b.n	800bf6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bf70:	4b07      	ldr	r3, [pc, #28]	@ (800bf90 <vTaskPlaceOnEventList+0x48>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	3318      	adds	r3, #24
 800bf76:	4619      	mov	r1, r3
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f7fe fe48 	bl	800ac0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bf7e:	2101      	movs	r1, #1
 800bf80:	6838      	ldr	r0, [r7, #0]
 800bf82:	f000 faaf 	bl	800c4e4 <prvAddCurrentTaskToDelayedList>
}
 800bf86:	bf00      	nop
 800bf88:	3710      	adds	r7, #16
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	240332f0 	.word	0x240332f0

0800bf94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b086      	sub	sp, #24
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d10b      	bne.n	800bfbe <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800bfa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfaa:	f383 8811 	msr	BASEPRI, r3
 800bfae:	f3bf 8f6f 	isb	sy
 800bfb2:	f3bf 8f4f 	dsb	sy
 800bfb6:	617b      	str	r3, [r7, #20]
}
 800bfb8:	bf00      	nop
 800bfba:	bf00      	nop
 800bfbc:	e7fd      	b.n	800bfba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bfbe:	4b0a      	ldr	r3, [pc, #40]	@ (800bfe8 <vTaskPlaceOnEventListRestricted+0x54>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	3318      	adds	r3, #24
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	68f8      	ldr	r0, [r7, #12]
 800bfc8:	f7fe fdfd 	bl	800abc6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d002      	beq.n	800bfd8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800bfd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bfd6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bfd8:	6879      	ldr	r1, [r7, #4]
 800bfda:	68b8      	ldr	r0, [r7, #8]
 800bfdc:	f000 fa82 	bl	800c4e4 <prvAddCurrentTaskToDelayedList>
	}
 800bfe0:	bf00      	nop
 800bfe2:	3718      	adds	r7, #24
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	240332f0 	.word	0x240332f0

0800bfec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b086      	sub	sp, #24
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	68db      	ldr	r3, [r3, #12]
 800bffa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d10b      	bne.n	800c01a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c006:	f383 8811 	msr	BASEPRI, r3
 800c00a:	f3bf 8f6f 	isb	sy
 800c00e:	f3bf 8f4f 	dsb	sy
 800c012:	60fb      	str	r3, [r7, #12]
}
 800c014:	bf00      	nop
 800c016:	bf00      	nop
 800c018:	e7fd      	b.n	800c016 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	3318      	adds	r3, #24
 800c01e:	4618      	mov	r0, r3
 800c020:	f7fe fe2e 	bl	800ac80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c024:	4b1d      	ldr	r3, [pc, #116]	@ (800c09c <xTaskRemoveFromEventList+0xb0>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d11d      	bne.n	800c068 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	3304      	adds	r3, #4
 800c030:	4618      	mov	r0, r3
 800c032:	f7fe fe25 	bl	800ac80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c03a:	4b19      	ldr	r3, [pc, #100]	@ (800c0a0 <xTaskRemoveFromEventList+0xb4>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	429a      	cmp	r2, r3
 800c040:	d903      	bls.n	800c04a <xTaskRemoveFromEventList+0x5e>
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c046:	4a16      	ldr	r2, [pc, #88]	@ (800c0a0 <xTaskRemoveFromEventList+0xb4>)
 800c048:	6013      	str	r3, [r2, #0]
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c04e:	4613      	mov	r3, r2
 800c050:	009b      	lsls	r3, r3, #2
 800c052:	4413      	add	r3, r2
 800c054:	009b      	lsls	r3, r3, #2
 800c056:	4a13      	ldr	r2, [pc, #76]	@ (800c0a4 <xTaskRemoveFromEventList+0xb8>)
 800c058:	441a      	add	r2, r3
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	3304      	adds	r3, #4
 800c05e:	4619      	mov	r1, r3
 800c060:	4610      	mov	r0, r2
 800c062:	f7fe fdb0 	bl	800abc6 <vListInsertEnd>
 800c066:	e005      	b.n	800c074 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	3318      	adds	r3, #24
 800c06c:	4619      	mov	r1, r3
 800c06e:	480e      	ldr	r0, [pc, #56]	@ (800c0a8 <xTaskRemoveFromEventList+0xbc>)
 800c070:	f7fe fda9 	bl	800abc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c078:	4b0c      	ldr	r3, [pc, #48]	@ (800c0ac <xTaskRemoveFromEventList+0xc0>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c07e:	429a      	cmp	r2, r3
 800c080:	d905      	bls.n	800c08e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c082:	2301      	movs	r3, #1
 800c084:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c086:	4b0a      	ldr	r3, [pc, #40]	@ (800c0b0 <xTaskRemoveFromEventList+0xc4>)
 800c088:	2201      	movs	r2, #1
 800c08a:	601a      	str	r2, [r3, #0]
 800c08c:	e001      	b.n	800c092 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c08e:	2300      	movs	r3, #0
 800c090:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c092:	697b      	ldr	r3, [r7, #20]
}
 800c094:	4618      	mov	r0, r3
 800c096:	3718      	adds	r7, #24
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}
 800c09c:	240337ec 	.word	0x240337ec
 800c0a0:	240337cc 	.word	0x240337cc
 800c0a4:	240332f4 	.word	0x240332f4
 800c0a8:	24033784 	.word	0x24033784
 800c0ac:	240332f0 	.word	0x240332f0
 800c0b0:	240337d8 	.word	0x240337d8

0800c0b4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b084      	sub	sp, #16
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d10b      	bne.n	800c0da <vTaskSetTimeOutState+0x26>
	__asm volatile
 800c0c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0c6:	f383 8811 	msr	BASEPRI, r3
 800c0ca:	f3bf 8f6f 	isb	sy
 800c0ce:	f3bf 8f4f 	dsb	sy
 800c0d2:	60fb      	str	r3, [r7, #12]
}
 800c0d4:	bf00      	nop
 800c0d6:	bf00      	nop
 800c0d8:	e7fd      	b.n	800c0d6 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800c0da:	f000 fee5 	bl	800cea8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c0de:	4b07      	ldr	r3, [pc, #28]	@ (800c0fc <vTaskSetTimeOutState+0x48>)
 800c0e0:	681a      	ldr	r2, [r3, #0]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800c0e6:	4b06      	ldr	r3, [pc, #24]	@ (800c100 <vTaskSetTimeOutState+0x4c>)
 800c0e8:	681a      	ldr	r2, [r3, #0]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800c0ee:	f000 ff0d 	bl	800cf0c <vPortExitCritical>
}
 800c0f2:	bf00      	nop
 800c0f4:	3710      	adds	r7, #16
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	bf00      	nop
 800c0fc:	240337dc 	.word	0x240337dc
 800c100:	240337c8 	.word	0x240337c8

0800c104 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c10c:	4b06      	ldr	r3, [pc, #24]	@ (800c128 <vTaskInternalSetTimeOutState+0x24>)
 800c10e:	681a      	ldr	r2, [r3, #0]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c114:	4b05      	ldr	r3, [pc, #20]	@ (800c12c <vTaskInternalSetTimeOutState+0x28>)
 800c116:	681a      	ldr	r2, [r3, #0]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	605a      	str	r2, [r3, #4]
}
 800c11c:	bf00      	nop
 800c11e:	370c      	adds	r7, #12
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr
 800c128:	240337dc 	.word	0x240337dc
 800c12c:	240337c8 	.word	0x240337c8

0800c130 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b088      	sub	sp, #32
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d10b      	bne.n	800c158 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c144:	f383 8811 	msr	BASEPRI, r3
 800c148:	f3bf 8f6f 	isb	sy
 800c14c:	f3bf 8f4f 	dsb	sy
 800c150:	613b      	str	r3, [r7, #16]
}
 800c152:	bf00      	nop
 800c154:	bf00      	nop
 800c156:	e7fd      	b.n	800c154 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d10b      	bne.n	800c176 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c162:	f383 8811 	msr	BASEPRI, r3
 800c166:	f3bf 8f6f 	isb	sy
 800c16a:	f3bf 8f4f 	dsb	sy
 800c16e:	60fb      	str	r3, [r7, #12]
}
 800c170:	bf00      	nop
 800c172:	bf00      	nop
 800c174:	e7fd      	b.n	800c172 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c176:	f000 fe97 	bl	800cea8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c17a:	4b1d      	ldr	r3, [pc, #116]	@ (800c1f0 <xTaskCheckForTimeOut+0xc0>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	69ba      	ldr	r2, [r7, #24]
 800c186:	1ad3      	subs	r3, r2, r3
 800c188:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c192:	d102      	bne.n	800c19a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c194:	2300      	movs	r3, #0
 800c196:	61fb      	str	r3, [r7, #28]
 800c198:	e023      	b.n	800c1e2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681a      	ldr	r2, [r3, #0]
 800c19e:	4b15      	ldr	r3, [pc, #84]	@ (800c1f4 <xTaskCheckForTimeOut+0xc4>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d007      	beq.n	800c1b6 <xTaskCheckForTimeOut+0x86>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	685b      	ldr	r3, [r3, #4]
 800c1aa:	69ba      	ldr	r2, [r7, #24]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d302      	bcc.n	800c1b6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	61fb      	str	r3, [r7, #28]
 800c1b4:	e015      	b.n	800c1e2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	697a      	ldr	r2, [r7, #20]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d20b      	bcs.n	800c1d8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	681a      	ldr	r2, [r3, #0]
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	1ad2      	subs	r2, r2, r3
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f7ff ff99 	bl	800c104 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	61fb      	str	r3, [r7, #28]
 800c1d6:	e004      	b.n	800c1e2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c1e2:	f000 fe93 	bl	800cf0c <vPortExitCritical>

	return xReturn;
 800c1e6:	69fb      	ldr	r3, [r7, #28]
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3720      	adds	r7, #32
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}
 800c1f0:	240337c8 	.word	0x240337c8
 800c1f4:	240337dc 	.word	0x240337dc

0800c1f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c1fc:	4b03      	ldr	r3, [pc, #12]	@ (800c20c <vTaskMissedYield+0x14>)
 800c1fe:	2201      	movs	r2, #1
 800c200:	601a      	str	r2, [r3, #0]
}
 800c202:	bf00      	nop
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr
 800c20c:	240337d8 	.word	0x240337d8

0800c210 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c218:	f000 f852 	bl	800c2c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c21c:	4b06      	ldr	r3, [pc, #24]	@ (800c238 <prvIdleTask+0x28>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	2b01      	cmp	r3, #1
 800c222:	d9f9      	bls.n	800c218 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c224:	4b05      	ldr	r3, [pc, #20]	@ (800c23c <prvIdleTask+0x2c>)
 800c226:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c22a:	601a      	str	r2, [r3, #0]
 800c22c:	f3bf 8f4f 	dsb	sy
 800c230:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c234:	e7f0      	b.n	800c218 <prvIdleTask+0x8>
 800c236:	bf00      	nop
 800c238:	240332f4 	.word	0x240332f4
 800c23c:	e000ed04 	.word	0xe000ed04

0800c240 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b082      	sub	sp, #8
 800c244:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c246:	2300      	movs	r3, #0
 800c248:	607b      	str	r3, [r7, #4]
 800c24a:	e00c      	b.n	800c266 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	4613      	mov	r3, r2
 800c250:	009b      	lsls	r3, r3, #2
 800c252:	4413      	add	r3, r2
 800c254:	009b      	lsls	r3, r3, #2
 800c256:	4a12      	ldr	r2, [pc, #72]	@ (800c2a0 <prvInitialiseTaskLists+0x60>)
 800c258:	4413      	add	r3, r2
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7fe fc86 	bl	800ab6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	3301      	adds	r3, #1
 800c264:	607b      	str	r3, [r7, #4]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2b37      	cmp	r3, #55	@ 0x37
 800c26a:	d9ef      	bls.n	800c24c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c26c:	480d      	ldr	r0, [pc, #52]	@ (800c2a4 <prvInitialiseTaskLists+0x64>)
 800c26e:	f7fe fc7d 	bl	800ab6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c272:	480d      	ldr	r0, [pc, #52]	@ (800c2a8 <prvInitialiseTaskLists+0x68>)
 800c274:	f7fe fc7a 	bl	800ab6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c278:	480c      	ldr	r0, [pc, #48]	@ (800c2ac <prvInitialiseTaskLists+0x6c>)
 800c27a:	f7fe fc77 	bl	800ab6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c27e:	480c      	ldr	r0, [pc, #48]	@ (800c2b0 <prvInitialiseTaskLists+0x70>)
 800c280:	f7fe fc74 	bl	800ab6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c284:	480b      	ldr	r0, [pc, #44]	@ (800c2b4 <prvInitialiseTaskLists+0x74>)
 800c286:	f7fe fc71 	bl	800ab6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c28a:	4b0b      	ldr	r3, [pc, #44]	@ (800c2b8 <prvInitialiseTaskLists+0x78>)
 800c28c:	4a05      	ldr	r2, [pc, #20]	@ (800c2a4 <prvInitialiseTaskLists+0x64>)
 800c28e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c290:	4b0a      	ldr	r3, [pc, #40]	@ (800c2bc <prvInitialiseTaskLists+0x7c>)
 800c292:	4a05      	ldr	r2, [pc, #20]	@ (800c2a8 <prvInitialiseTaskLists+0x68>)
 800c294:	601a      	str	r2, [r3, #0]
}
 800c296:	bf00      	nop
 800c298:	3708      	adds	r7, #8
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
 800c29e:	bf00      	nop
 800c2a0:	240332f4 	.word	0x240332f4
 800c2a4:	24033754 	.word	0x24033754
 800c2a8:	24033768 	.word	0x24033768
 800c2ac:	24033784 	.word	0x24033784
 800c2b0:	24033798 	.word	0x24033798
 800c2b4:	240337b0 	.word	0x240337b0
 800c2b8:	2403377c 	.word	0x2403377c
 800c2bc:	24033780 	.word	0x24033780

0800c2c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c2c6:	e019      	b.n	800c2fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c2c8:	f000 fdee 	bl	800cea8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2cc:	4b10      	ldr	r3, [pc, #64]	@ (800c310 <prvCheckTasksWaitingTermination+0x50>)
 800c2ce:	68db      	ldr	r3, [r3, #12]
 800c2d0:	68db      	ldr	r3, [r3, #12]
 800c2d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	3304      	adds	r3, #4
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f7fe fcd1 	bl	800ac80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c2de:	4b0d      	ldr	r3, [pc, #52]	@ (800c314 <prvCheckTasksWaitingTermination+0x54>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	3b01      	subs	r3, #1
 800c2e4:	4a0b      	ldr	r2, [pc, #44]	@ (800c314 <prvCheckTasksWaitingTermination+0x54>)
 800c2e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c2e8:	4b0b      	ldr	r3, [pc, #44]	@ (800c318 <prvCheckTasksWaitingTermination+0x58>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	3b01      	subs	r3, #1
 800c2ee:	4a0a      	ldr	r2, [pc, #40]	@ (800c318 <prvCheckTasksWaitingTermination+0x58>)
 800c2f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c2f2:	f000 fe0b 	bl	800cf0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 f810 	bl	800c31c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c2fc:	4b06      	ldr	r3, [pc, #24]	@ (800c318 <prvCheckTasksWaitingTermination+0x58>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d1e1      	bne.n	800c2c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c304:	bf00      	nop
 800c306:	bf00      	nop
 800c308:	3708      	adds	r7, #8
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	24033798 	.word	0x24033798
 800c314:	240337c4 	.word	0x240337c4
 800c318:	240337ac 	.word	0x240337ac

0800c31c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	3354      	adds	r3, #84	@ 0x54
 800c328:	4618      	mov	r0, r3
 800c32a:	f010 ff11 	bl	801d150 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c334:	2b00      	cmp	r3, #0
 800c336:	d108      	bne.n	800c34a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c33c:	4618      	mov	r0, r3
 800c33e:	f000 ffa3 	bl	800d288 <vPortFree>
				vPortFree( pxTCB );
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 ffa0 	bl	800d288 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c348:	e019      	b.n	800c37e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c350:	2b01      	cmp	r3, #1
 800c352:	d103      	bne.n	800c35c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f000 ff97 	bl	800d288 <vPortFree>
	}
 800c35a:	e010      	b.n	800c37e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c362:	2b02      	cmp	r3, #2
 800c364:	d00b      	beq.n	800c37e <prvDeleteTCB+0x62>
	__asm volatile
 800c366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c36a:	f383 8811 	msr	BASEPRI, r3
 800c36e:	f3bf 8f6f 	isb	sy
 800c372:	f3bf 8f4f 	dsb	sy
 800c376:	60fb      	str	r3, [r7, #12]
}
 800c378:	bf00      	nop
 800c37a:	bf00      	nop
 800c37c:	e7fd      	b.n	800c37a <prvDeleteTCB+0x5e>
	}
 800c37e:	bf00      	nop
 800c380:	3710      	adds	r7, #16
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
	...

0800c388 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c38e:	4b0c      	ldr	r3, [pc, #48]	@ (800c3c0 <prvResetNextTaskUnblockTime+0x38>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d104      	bne.n	800c3a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c398:	4b0a      	ldr	r3, [pc, #40]	@ (800c3c4 <prvResetNextTaskUnblockTime+0x3c>)
 800c39a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c39e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c3a0:	e008      	b.n	800c3b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3a2:	4b07      	ldr	r3, [pc, #28]	@ (800c3c0 <prvResetNextTaskUnblockTime+0x38>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	68db      	ldr	r3, [r3, #12]
 800c3a8:	68db      	ldr	r3, [r3, #12]
 800c3aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	4a04      	ldr	r2, [pc, #16]	@ (800c3c4 <prvResetNextTaskUnblockTime+0x3c>)
 800c3b2:	6013      	str	r3, [r2, #0]
}
 800c3b4:	bf00      	nop
 800c3b6:	370c      	adds	r7, #12
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr
 800c3c0:	2403377c 	.word	0x2403377c
 800c3c4:	240337e4 	.word	0x240337e4

0800c3c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b083      	sub	sp, #12
 800c3cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c3ce:	4b0b      	ldr	r3, [pc, #44]	@ (800c3fc <xTaskGetSchedulerState+0x34>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d102      	bne.n	800c3dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	607b      	str	r3, [r7, #4]
 800c3da:	e008      	b.n	800c3ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3dc:	4b08      	ldr	r3, [pc, #32]	@ (800c400 <xTaskGetSchedulerState+0x38>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d102      	bne.n	800c3ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c3e4:	2302      	movs	r3, #2
 800c3e6:	607b      	str	r3, [r7, #4]
 800c3e8:	e001      	b.n	800c3ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c3ee:	687b      	ldr	r3, [r7, #4]
	}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	370c      	adds	r7, #12
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr
 800c3fc:	240337d0 	.word	0x240337d0
 800c400:	240337ec 	.word	0x240337ec

0800c404 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c404:	b580      	push	{r7, lr}
 800c406:	b086      	sub	sp, #24
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c410:	2300      	movs	r3, #0
 800c412:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d058      	beq.n	800c4cc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c41a:	4b2f      	ldr	r3, [pc, #188]	@ (800c4d8 <xTaskPriorityDisinherit+0xd4>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	693a      	ldr	r2, [r7, #16]
 800c420:	429a      	cmp	r2, r3
 800c422:	d00b      	beq.n	800c43c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c428:	f383 8811 	msr	BASEPRI, r3
 800c42c:	f3bf 8f6f 	isb	sy
 800c430:	f3bf 8f4f 	dsb	sy
 800c434:	60fb      	str	r3, [r7, #12]
}
 800c436:	bf00      	nop
 800c438:	bf00      	nop
 800c43a:	e7fd      	b.n	800c438 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c440:	2b00      	cmp	r3, #0
 800c442:	d10b      	bne.n	800c45c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c448:	f383 8811 	msr	BASEPRI, r3
 800c44c:	f3bf 8f6f 	isb	sy
 800c450:	f3bf 8f4f 	dsb	sy
 800c454:	60bb      	str	r3, [r7, #8]
}
 800c456:	bf00      	nop
 800c458:	bf00      	nop
 800c45a:	e7fd      	b.n	800c458 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c460:	1e5a      	subs	r2, r3, #1
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c46e:	429a      	cmp	r2, r3
 800c470:	d02c      	beq.n	800c4cc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c476:	2b00      	cmp	r3, #0
 800c478:	d128      	bne.n	800c4cc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	3304      	adds	r3, #4
 800c47e:	4618      	mov	r0, r3
 800c480:	f7fe fbfe 	bl	800ac80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c490:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c49c:	4b0f      	ldr	r3, [pc, #60]	@ (800c4dc <xTaskPriorityDisinherit+0xd8>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d903      	bls.n	800c4ac <xTaskPriorityDisinherit+0xa8>
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4a8:	4a0c      	ldr	r2, [pc, #48]	@ (800c4dc <xTaskPriorityDisinherit+0xd8>)
 800c4aa:	6013      	str	r3, [r2, #0]
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4b0:	4613      	mov	r3, r2
 800c4b2:	009b      	lsls	r3, r3, #2
 800c4b4:	4413      	add	r3, r2
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	4a09      	ldr	r2, [pc, #36]	@ (800c4e0 <xTaskPriorityDisinherit+0xdc>)
 800c4ba:	441a      	add	r2, r3
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	3304      	adds	r3, #4
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	4610      	mov	r0, r2
 800c4c4:	f7fe fb7f 	bl	800abc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c4cc:	697b      	ldr	r3, [r7, #20]
	}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3718      	adds	r7, #24
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	240332f0 	.word	0x240332f0
 800c4dc:	240337cc 	.word	0x240337cc
 800c4e0:	240332f4 	.word	0x240332f4

0800c4e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b084      	sub	sp, #16
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c4ee:	4b21      	ldr	r3, [pc, #132]	@ (800c574 <prvAddCurrentTaskToDelayedList+0x90>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4f4:	4b20      	ldr	r3, [pc, #128]	@ (800c578 <prvAddCurrentTaskToDelayedList+0x94>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	3304      	adds	r3, #4
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f7fe fbc0 	bl	800ac80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c506:	d10a      	bne.n	800c51e <prvAddCurrentTaskToDelayedList+0x3a>
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d007      	beq.n	800c51e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c50e:	4b1a      	ldr	r3, [pc, #104]	@ (800c578 <prvAddCurrentTaskToDelayedList+0x94>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	3304      	adds	r3, #4
 800c514:	4619      	mov	r1, r3
 800c516:	4819      	ldr	r0, [pc, #100]	@ (800c57c <prvAddCurrentTaskToDelayedList+0x98>)
 800c518:	f7fe fb55 	bl	800abc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c51c:	e026      	b.n	800c56c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c51e:	68fa      	ldr	r2, [r7, #12]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	4413      	add	r3, r2
 800c524:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c526:	4b14      	ldr	r3, [pc, #80]	@ (800c578 <prvAddCurrentTaskToDelayedList+0x94>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	68ba      	ldr	r2, [r7, #8]
 800c52c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c52e:	68ba      	ldr	r2, [r7, #8]
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	429a      	cmp	r2, r3
 800c534:	d209      	bcs.n	800c54a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c536:	4b12      	ldr	r3, [pc, #72]	@ (800c580 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	4b0f      	ldr	r3, [pc, #60]	@ (800c578 <prvAddCurrentTaskToDelayedList+0x94>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	3304      	adds	r3, #4
 800c540:	4619      	mov	r1, r3
 800c542:	4610      	mov	r0, r2
 800c544:	f7fe fb63 	bl	800ac0e <vListInsert>
}
 800c548:	e010      	b.n	800c56c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c54a:	4b0e      	ldr	r3, [pc, #56]	@ (800c584 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c54c:	681a      	ldr	r2, [r3, #0]
 800c54e:	4b0a      	ldr	r3, [pc, #40]	@ (800c578 <prvAddCurrentTaskToDelayedList+0x94>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	3304      	adds	r3, #4
 800c554:	4619      	mov	r1, r3
 800c556:	4610      	mov	r0, r2
 800c558:	f7fe fb59 	bl	800ac0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c55c:	4b0a      	ldr	r3, [pc, #40]	@ (800c588 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	68ba      	ldr	r2, [r7, #8]
 800c562:	429a      	cmp	r2, r3
 800c564:	d202      	bcs.n	800c56c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c566:	4a08      	ldr	r2, [pc, #32]	@ (800c588 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	6013      	str	r3, [r2, #0]
}
 800c56c:	bf00      	nop
 800c56e:	3710      	adds	r7, #16
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}
 800c574:	240337c8 	.word	0x240337c8
 800c578:	240332f0 	.word	0x240332f0
 800c57c:	240337b0 	.word	0x240337b0
 800c580:	24033780 	.word	0x24033780
 800c584:	2403377c 	.word	0x2403377c
 800c588:	240337e4 	.word	0x240337e4

0800c58c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b08a      	sub	sp, #40	@ 0x28
 800c590:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c592:	2300      	movs	r3, #0
 800c594:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c596:	f000 fb13 	bl	800cbc0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c59a:	4b1d      	ldr	r3, [pc, #116]	@ (800c610 <xTimerCreateTimerTask+0x84>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d021      	beq.n	800c5e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c5aa:	1d3a      	adds	r2, r7, #4
 800c5ac:	f107 0108 	add.w	r1, r7, #8
 800c5b0:	f107 030c 	add.w	r3, r7, #12
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7fe fabf 	bl	800ab38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c5ba:	6879      	ldr	r1, [r7, #4]
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	68fa      	ldr	r2, [r7, #12]
 800c5c0:	9202      	str	r2, [sp, #8]
 800c5c2:	9301      	str	r3, [sp, #4]
 800c5c4:	2302      	movs	r3, #2
 800c5c6:	9300      	str	r3, [sp, #0]
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	460a      	mov	r2, r1
 800c5cc:	4911      	ldr	r1, [pc, #68]	@ (800c614 <xTimerCreateTimerTask+0x88>)
 800c5ce:	4812      	ldr	r0, [pc, #72]	@ (800c618 <xTimerCreateTimerTask+0x8c>)
 800c5d0:	f7ff f87a 	bl	800b6c8 <xTaskCreateStatic>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	4a11      	ldr	r2, [pc, #68]	@ (800c61c <xTimerCreateTimerTask+0x90>)
 800c5d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c5da:	4b10      	ldr	r3, [pc, #64]	@ (800c61c <xTimerCreateTimerTask+0x90>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d001      	beq.n	800c5e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d10b      	bne.n	800c604 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c5ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5f0:	f383 8811 	msr	BASEPRI, r3
 800c5f4:	f3bf 8f6f 	isb	sy
 800c5f8:	f3bf 8f4f 	dsb	sy
 800c5fc:	613b      	str	r3, [r7, #16]
}
 800c5fe:	bf00      	nop
 800c600:	bf00      	nop
 800c602:	e7fd      	b.n	800c600 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c604:	697b      	ldr	r3, [r7, #20]
}
 800c606:	4618      	mov	r0, r3
 800c608:	3718      	adds	r7, #24
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
 800c60e:	bf00      	nop
 800c610:	24033820 	.word	0x24033820
 800c614:	0801e1c8 	.word	0x0801e1c8
 800c618:	0800c759 	.word	0x0800c759
 800c61c:	24033824 	.word	0x24033824

0800c620 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b08a      	sub	sp, #40	@ 0x28
 800c624:	af00      	add	r7, sp, #0
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	60b9      	str	r1, [r7, #8]
 800c62a:	607a      	str	r2, [r7, #4]
 800c62c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c62e:	2300      	movs	r3, #0
 800c630:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d10b      	bne.n	800c650 <xTimerGenericCommand+0x30>
	__asm volatile
 800c638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c63c:	f383 8811 	msr	BASEPRI, r3
 800c640:	f3bf 8f6f 	isb	sy
 800c644:	f3bf 8f4f 	dsb	sy
 800c648:	623b      	str	r3, [r7, #32]
}
 800c64a:	bf00      	nop
 800c64c:	bf00      	nop
 800c64e:	e7fd      	b.n	800c64c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c650:	4b19      	ldr	r3, [pc, #100]	@ (800c6b8 <xTimerGenericCommand+0x98>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d02a      	beq.n	800c6ae <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	2b05      	cmp	r3, #5
 800c668:	dc18      	bgt.n	800c69c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c66a:	f7ff fead 	bl	800c3c8 <xTaskGetSchedulerState>
 800c66e:	4603      	mov	r3, r0
 800c670:	2b02      	cmp	r3, #2
 800c672:	d109      	bne.n	800c688 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c674:	4b10      	ldr	r3, [pc, #64]	@ (800c6b8 <xTimerGenericCommand+0x98>)
 800c676:	6818      	ldr	r0, [r3, #0]
 800c678:	f107 0110 	add.w	r1, r7, #16
 800c67c:	2300      	movs	r3, #0
 800c67e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c680:	f7fe fc32 	bl	800aee8 <xQueueGenericSend>
 800c684:	6278      	str	r0, [r7, #36]	@ 0x24
 800c686:	e012      	b.n	800c6ae <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c688:	4b0b      	ldr	r3, [pc, #44]	@ (800c6b8 <xTimerGenericCommand+0x98>)
 800c68a:	6818      	ldr	r0, [r3, #0]
 800c68c:	f107 0110 	add.w	r1, r7, #16
 800c690:	2300      	movs	r3, #0
 800c692:	2200      	movs	r2, #0
 800c694:	f7fe fc28 	bl	800aee8 <xQueueGenericSend>
 800c698:	6278      	str	r0, [r7, #36]	@ 0x24
 800c69a:	e008      	b.n	800c6ae <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c69c:	4b06      	ldr	r3, [pc, #24]	@ (800c6b8 <xTimerGenericCommand+0x98>)
 800c69e:	6818      	ldr	r0, [r3, #0]
 800c6a0:	f107 0110 	add.w	r1, r7, #16
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	683a      	ldr	r2, [r7, #0]
 800c6a8:	f7fe fd20 	bl	800b0ec <xQueueGenericSendFromISR>
 800c6ac:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3728      	adds	r7, #40	@ 0x28
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	24033820 	.word	0x24033820

0800c6bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b088      	sub	sp, #32
 800c6c0:	af02      	add	r7, sp, #8
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6c6:	4b23      	ldr	r3, [pc, #140]	@ (800c754 <prvProcessExpiredTimer+0x98>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	68db      	ldr	r3, [r3, #12]
 800c6cc:	68db      	ldr	r3, [r3, #12]
 800c6ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	3304      	adds	r3, #4
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f7fe fad3 	bl	800ac80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c6e0:	f003 0304 	and.w	r3, r3, #4
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d023      	beq.n	800c730 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	699a      	ldr	r2, [r3, #24]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	18d1      	adds	r1, r2, r3
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	683a      	ldr	r2, [r7, #0]
 800c6f4:	6978      	ldr	r0, [r7, #20]
 800c6f6:	f000 f8d5 	bl	800c8a4 <prvInsertTimerInActiveList>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d020      	beq.n	800c742 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c700:	2300      	movs	r3, #0
 800c702:	9300      	str	r3, [sp, #0]
 800c704:	2300      	movs	r3, #0
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	2100      	movs	r1, #0
 800c70a:	6978      	ldr	r0, [r7, #20]
 800c70c:	f7ff ff88 	bl	800c620 <xTimerGenericCommand>
 800c710:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d114      	bne.n	800c742 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c71c:	f383 8811 	msr	BASEPRI, r3
 800c720:	f3bf 8f6f 	isb	sy
 800c724:	f3bf 8f4f 	dsb	sy
 800c728:	60fb      	str	r3, [r7, #12]
}
 800c72a:	bf00      	nop
 800c72c:	bf00      	nop
 800c72e:	e7fd      	b.n	800c72c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c736:	f023 0301 	bic.w	r3, r3, #1
 800c73a:	b2da      	uxtb	r2, r3
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	6a1b      	ldr	r3, [r3, #32]
 800c746:	6978      	ldr	r0, [r7, #20]
 800c748:	4798      	blx	r3
}
 800c74a:	bf00      	nop
 800c74c:	3718      	adds	r7, #24
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
 800c752:	bf00      	nop
 800c754:	24033818 	.word	0x24033818

0800c758 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b084      	sub	sp, #16
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c760:	f107 0308 	add.w	r3, r7, #8
 800c764:	4618      	mov	r0, r3
 800c766:	f000 f859 	bl	800c81c <prvGetNextExpireTime>
 800c76a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	4619      	mov	r1, r3
 800c770:	68f8      	ldr	r0, [r7, #12]
 800c772:	f000 f805 	bl	800c780 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c776:	f000 f8d7 	bl	800c928 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c77a:	bf00      	nop
 800c77c:	e7f0      	b.n	800c760 <prvTimerTask+0x8>
	...

0800c780 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c78a:	f7ff fa01 	bl	800bb90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c78e:	f107 0308 	add.w	r3, r7, #8
 800c792:	4618      	mov	r0, r3
 800c794:	f000 f866 	bl	800c864 <prvSampleTimeNow>
 800c798:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d130      	bne.n	800c802 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d10a      	bne.n	800c7bc <prvProcessTimerOrBlockTask+0x3c>
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d806      	bhi.n	800c7bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c7ae:	f7ff f9fd 	bl	800bbac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c7b2:	68f9      	ldr	r1, [r7, #12]
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f7ff ff81 	bl	800c6bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c7ba:	e024      	b.n	800c806 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d008      	beq.n	800c7d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c7c2:	4b13      	ldr	r3, [pc, #76]	@ (800c810 <prvProcessTimerOrBlockTask+0x90>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d101      	bne.n	800c7d0 <prvProcessTimerOrBlockTask+0x50>
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	e000      	b.n	800c7d2 <prvProcessTimerOrBlockTask+0x52>
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c7d4:	4b0f      	ldr	r3, [pc, #60]	@ (800c814 <prvProcessTimerOrBlockTask+0x94>)
 800c7d6:	6818      	ldr	r0, [r3, #0]
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	1ad3      	subs	r3, r2, r3
 800c7de:	683a      	ldr	r2, [r7, #0]
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	f7fe ff3d 	bl	800b660 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c7e6:	f7ff f9e1 	bl	800bbac <xTaskResumeAll>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d10a      	bne.n	800c806 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c7f0:	4b09      	ldr	r3, [pc, #36]	@ (800c818 <prvProcessTimerOrBlockTask+0x98>)
 800c7f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7f6:	601a      	str	r2, [r3, #0]
 800c7f8:	f3bf 8f4f 	dsb	sy
 800c7fc:	f3bf 8f6f 	isb	sy
}
 800c800:	e001      	b.n	800c806 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c802:	f7ff f9d3 	bl	800bbac <xTaskResumeAll>
}
 800c806:	bf00      	nop
 800c808:	3710      	adds	r7, #16
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	2403381c 	.word	0x2403381c
 800c814:	24033820 	.word	0x24033820
 800c818:	e000ed04 	.word	0xe000ed04

0800c81c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c81c:	b480      	push	{r7}
 800c81e:	b085      	sub	sp, #20
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c824:	4b0e      	ldr	r3, [pc, #56]	@ (800c860 <prvGetNextExpireTime+0x44>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d101      	bne.n	800c832 <prvGetNextExpireTime+0x16>
 800c82e:	2201      	movs	r2, #1
 800c830:	e000      	b.n	800c834 <prvGetNextExpireTime+0x18>
 800c832:	2200      	movs	r2, #0
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d105      	bne.n	800c84c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c840:	4b07      	ldr	r3, [pc, #28]	@ (800c860 <prvGetNextExpireTime+0x44>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	68db      	ldr	r3, [r3, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	60fb      	str	r3, [r7, #12]
 800c84a:	e001      	b.n	800c850 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c84c:	2300      	movs	r3, #0
 800c84e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c850:	68fb      	ldr	r3, [r7, #12]
}
 800c852:	4618      	mov	r0, r3
 800c854:	3714      	adds	r7, #20
 800c856:	46bd      	mov	sp, r7
 800c858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85c:	4770      	bx	lr
 800c85e:	bf00      	nop
 800c860:	24033818 	.word	0x24033818

0800c864 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c86c:	f7ff fa3c 	bl	800bce8 <xTaskGetTickCount>
 800c870:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c872:	4b0b      	ldr	r3, [pc, #44]	@ (800c8a0 <prvSampleTimeNow+0x3c>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	68fa      	ldr	r2, [r7, #12]
 800c878:	429a      	cmp	r2, r3
 800c87a:	d205      	bcs.n	800c888 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c87c:	f000 f93a 	bl	800caf4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2201      	movs	r2, #1
 800c884:	601a      	str	r2, [r3, #0]
 800c886:	e002      	b.n	800c88e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2200      	movs	r2, #0
 800c88c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c88e:	4a04      	ldr	r2, [pc, #16]	@ (800c8a0 <prvSampleTimeNow+0x3c>)
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c894:	68fb      	ldr	r3, [r7, #12]
}
 800c896:	4618      	mov	r0, r3
 800c898:	3710      	adds	r7, #16
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	bf00      	nop
 800c8a0:	24033828 	.word	0x24033828

0800c8a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b086      	sub	sp, #24
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	60b9      	str	r1, [r7, #8]
 800c8ae:	607a      	str	r2, [r7, #4]
 800c8b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	68ba      	ldr	r2, [r7, #8]
 800c8ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	68fa      	ldr	r2, [r7, #12]
 800c8c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c8c2:	68ba      	ldr	r2, [r7, #8]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d812      	bhi.n	800c8f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8ca:	687a      	ldr	r2, [r7, #4]
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	1ad2      	subs	r2, r2, r3
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	699b      	ldr	r3, [r3, #24]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d302      	bcc.n	800c8de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c8d8:	2301      	movs	r3, #1
 800c8da:	617b      	str	r3, [r7, #20]
 800c8dc:	e01b      	b.n	800c916 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c8de:	4b10      	ldr	r3, [pc, #64]	@ (800c920 <prvInsertTimerInActiveList+0x7c>)
 800c8e0:	681a      	ldr	r2, [r3, #0]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	3304      	adds	r3, #4
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	4610      	mov	r0, r2
 800c8ea:	f7fe f990 	bl	800ac0e <vListInsert>
 800c8ee:	e012      	b.n	800c916 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d206      	bcs.n	800c906 <prvInsertTimerInActiveList+0x62>
 800c8f8:	68ba      	ldr	r2, [r7, #8]
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d302      	bcc.n	800c906 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c900:	2301      	movs	r3, #1
 800c902:	617b      	str	r3, [r7, #20]
 800c904:	e007      	b.n	800c916 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c906:	4b07      	ldr	r3, [pc, #28]	@ (800c924 <prvInsertTimerInActiveList+0x80>)
 800c908:	681a      	ldr	r2, [r3, #0]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	3304      	adds	r3, #4
 800c90e:	4619      	mov	r1, r3
 800c910:	4610      	mov	r0, r2
 800c912:	f7fe f97c 	bl	800ac0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c916:	697b      	ldr	r3, [r7, #20]
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3718      	adds	r7, #24
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}
 800c920:	2403381c 	.word	0x2403381c
 800c924:	24033818 	.word	0x24033818

0800c928 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b08e      	sub	sp, #56	@ 0x38
 800c92c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c92e:	e0ce      	b.n	800cace <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2b00      	cmp	r3, #0
 800c934:	da19      	bge.n	800c96a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c936:	1d3b      	adds	r3, r7, #4
 800c938:	3304      	adds	r3, #4
 800c93a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c93c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d10b      	bne.n	800c95a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c946:	f383 8811 	msr	BASEPRI, r3
 800c94a:	f3bf 8f6f 	isb	sy
 800c94e:	f3bf 8f4f 	dsb	sy
 800c952:	61fb      	str	r3, [r7, #28]
}
 800c954:	bf00      	nop
 800c956:	bf00      	nop
 800c958:	e7fd      	b.n	800c956 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c95a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c960:	6850      	ldr	r0, [r2, #4]
 800c962:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c964:	6892      	ldr	r2, [r2, #8]
 800c966:	4611      	mov	r1, r2
 800c968:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	f2c0 80ae 	blt.w	800cace <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c978:	695b      	ldr	r3, [r3, #20]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d004      	beq.n	800c988 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c97e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c980:	3304      	adds	r3, #4
 800c982:	4618      	mov	r0, r3
 800c984:	f7fe f97c 	bl	800ac80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c988:	463b      	mov	r3, r7
 800c98a:	4618      	mov	r0, r3
 800c98c:	f7ff ff6a 	bl	800c864 <prvSampleTimeNow>
 800c990:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2b09      	cmp	r3, #9
 800c996:	f200 8097 	bhi.w	800cac8 <prvProcessReceivedCommands+0x1a0>
 800c99a:	a201      	add	r2, pc, #4	@ (adr r2, 800c9a0 <prvProcessReceivedCommands+0x78>)
 800c99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9a0:	0800c9c9 	.word	0x0800c9c9
 800c9a4:	0800c9c9 	.word	0x0800c9c9
 800c9a8:	0800c9c9 	.word	0x0800c9c9
 800c9ac:	0800ca3f 	.word	0x0800ca3f
 800c9b0:	0800ca53 	.word	0x0800ca53
 800c9b4:	0800ca9f 	.word	0x0800ca9f
 800c9b8:	0800c9c9 	.word	0x0800c9c9
 800c9bc:	0800c9c9 	.word	0x0800c9c9
 800c9c0:	0800ca3f 	.word	0x0800ca3f
 800c9c4:	0800ca53 	.word	0x0800ca53
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c9c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c9ce:	f043 0301 	orr.w	r3, r3, #1
 800c9d2:	b2da      	uxtb	r2, r3
 800c9d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c9da:	68ba      	ldr	r2, [r7, #8]
 800c9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9de:	699b      	ldr	r3, [r3, #24]
 800c9e0:	18d1      	adds	r1, r2, r3
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c9e8:	f7ff ff5c 	bl	800c8a4 <prvInsertTimerInActiveList>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d06c      	beq.n	800cacc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9f4:	6a1b      	ldr	r3, [r3, #32]
 800c9f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c9f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c9fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca00:	f003 0304 	and.w	r3, r3, #4
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d061      	beq.n	800cacc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ca08:	68ba      	ldr	r2, [r7, #8]
 800ca0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca0c:	699b      	ldr	r3, [r3, #24]
 800ca0e:	441a      	add	r2, r3
 800ca10:	2300      	movs	r3, #0
 800ca12:	9300      	str	r3, [sp, #0]
 800ca14:	2300      	movs	r3, #0
 800ca16:	2100      	movs	r1, #0
 800ca18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca1a:	f7ff fe01 	bl	800c620 <xTimerGenericCommand>
 800ca1e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ca20:	6a3b      	ldr	r3, [r7, #32]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d152      	bne.n	800cacc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ca26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca2a:	f383 8811 	msr	BASEPRI, r3
 800ca2e:	f3bf 8f6f 	isb	sy
 800ca32:	f3bf 8f4f 	dsb	sy
 800ca36:	61bb      	str	r3, [r7, #24]
}
 800ca38:	bf00      	nop
 800ca3a:	bf00      	nop
 800ca3c:	e7fd      	b.n	800ca3a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca44:	f023 0301 	bic.w	r3, r3, #1
 800ca48:	b2da      	uxtb	r2, r3
 800ca4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ca50:	e03d      	b.n	800cace <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ca52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca58:	f043 0301 	orr.w	r3, r3, #1
 800ca5c:	b2da      	uxtb	r2, r3
 800ca5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca60:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ca64:	68ba      	ldr	r2, [r7, #8]
 800ca66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca68:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ca6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca6c:	699b      	ldr	r3, [r3, #24]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d10b      	bne.n	800ca8a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ca72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca76:	f383 8811 	msr	BASEPRI, r3
 800ca7a:	f3bf 8f6f 	isb	sy
 800ca7e:	f3bf 8f4f 	dsb	sy
 800ca82:	617b      	str	r3, [r7, #20]
}
 800ca84:	bf00      	nop
 800ca86:	bf00      	nop
 800ca88:	e7fd      	b.n	800ca86 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ca8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca8c:	699a      	ldr	r2, [r3, #24]
 800ca8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca90:	18d1      	adds	r1, r2, r3
 800ca92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca98:	f7ff ff04 	bl	800c8a4 <prvInsertTimerInActiveList>
					break;
 800ca9c:	e017      	b.n	800cace <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ca9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caa0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800caa4:	f003 0302 	and.w	r3, r3, #2
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d103      	bne.n	800cab4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800caac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800caae:	f000 fbeb 	bl	800d288 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cab2:	e00c      	b.n	800cace <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cab6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800caba:	f023 0301 	bic.w	r3, r3, #1
 800cabe:	b2da      	uxtb	r2, r3
 800cac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cac2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cac6:	e002      	b.n	800cace <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800cac8:	bf00      	nop
 800caca:	e000      	b.n	800cace <prvProcessReceivedCommands+0x1a6>
					break;
 800cacc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cace:	4b08      	ldr	r3, [pc, #32]	@ (800caf0 <prvProcessReceivedCommands+0x1c8>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	1d39      	adds	r1, r7, #4
 800cad4:	2200      	movs	r2, #0
 800cad6:	4618      	mov	r0, r3
 800cad8:	f7fe fba6 	bl	800b228 <xQueueReceive>
 800cadc:	4603      	mov	r3, r0
 800cade:	2b00      	cmp	r3, #0
 800cae0:	f47f af26 	bne.w	800c930 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cae4:	bf00      	nop
 800cae6:	bf00      	nop
 800cae8:	3730      	adds	r7, #48	@ 0x30
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop
 800caf0:	24033820 	.word	0x24033820

0800caf4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b088      	sub	sp, #32
 800caf8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cafa:	e049      	b.n	800cb90 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cafc:	4b2e      	ldr	r3, [pc, #184]	@ (800cbb8 <prvSwitchTimerLists+0xc4>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	68db      	ldr	r3, [r3, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb06:	4b2c      	ldr	r3, [pc, #176]	@ (800cbb8 <prvSwitchTimerLists+0xc4>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	68db      	ldr	r3, [r3, #12]
 800cb0c:	68db      	ldr	r3, [r3, #12]
 800cb0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	3304      	adds	r3, #4
 800cb14:	4618      	mov	r0, r3
 800cb16:	f7fe f8b3 	bl	800ac80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	6a1b      	ldr	r3, [r3, #32]
 800cb1e:	68f8      	ldr	r0, [r7, #12]
 800cb20:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb28:	f003 0304 	and.w	r3, r3, #4
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d02f      	beq.n	800cb90 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	699b      	ldr	r3, [r3, #24]
 800cb34:	693a      	ldr	r2, [r7, #16]
 800cb36:	4413      	add	r3, r2
 800cb38:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cb3a:	68ba      	ldr	r2, [r7, #8]
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d90e      	bls.n	800cb60 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	68ba      	ldr	r2, [r7, #8]
 800cb46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	68fa      	ldr	r2, [r7, #12]
 800cb4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cb4e:	4b1a      	ldr	r3, [pc, #104]	@ (800cbb8 <prvSwitchTimerLists+0xc4>)
 800cb50:	681a      	ldr	r2, [r3, #0]
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	3304      	adds	r3, #4
 800cb56:	4619      	mov	r1, r3
 800cb58:	4610      	mov	r0, r2
 800cb5a:	f7fe f858 	bl	800ac0e <vListInsert>
 800cb5e:	e017      	b.n	800cb90 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb60:	2300      	movs	r3, #0
 800cb62:	9300      	str	r3, [sp, #0]
 800cb64:	2300      	movs	r3, #0
 800cb66:	693a      	ldr	r2, [r7, #16]
 800cb68:	2100      	movs	r1, #0
 800cb6a:	68f8      	ldr	r0, [r7, #12]
 800cb6c:	f7ff fd58 	bl	800c620 <xTimerGenericCommand>
 800cb70:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d10b      	bne.n	800cb90 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cb78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb7c:	f383 8811 	msr	BASEPRI, r3
 800cb80:	f3bf 8f6f 	isb	sy
 800cb84:	f3bf 8f4f 	dsb	sy
 800cb88:	603b      	str	r3, [r7, #0]
}
 800cb8a:	bf00      	nop
 800cb8c:	bf00      	nop
 800cb8e:	e7fd      	b.n	800cb8c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cb90:	4b09      	ldr	r3, [pc, #36]	@ (800cbb8 <prvSwitchTimerLists+0xc4>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d1b0      	bne.n	800cafc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cb9a:	4b07      	ldr	r3, [pc, #28]	@ (800cbb8 <prvSwitchTimerLists+0xc4>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cba0:	4b06      	ldr	r3, [pc, #24]	@ (800cbbc <prvSwitchTimerLists+0xc8>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4a04      	ldr	r2, [pc, #16]	@ (800cbb8 <prvSwitchTimerLists+0xc4>)
 800cba6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cba8:	4a04      	ldr	r2, [pc, #16]	@ (800cbbc <prvSwitchTimerLists+0xc8>)
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	6013      	str	r3, [r2, #0]
}
 800cbae:	bf00      	nop
 800cbb0:	3718      	adds	r7, #24
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	24033818 	.word	0x24033818
 800cbbc:	2403381c 	.word	0x2403381c

0800cbc0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cbc6:	f000 f96f 	bl	800cea8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cbca:	4b15      	ldr	r3, [pc, #84]	@ (800cc20 <prvCheckForValidListAndQueue+0x60>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d120      	bne.n	800cc14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cbd2:	4814      	ldr	r0, [pc, #80]	@ (800cc24 <prvCheckForValidListAndQueue+0x64>)
 800cbd4:	f7fd ffca 	bl	800ab6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cbd8:	4813      	ldr	r0, [pc, #76]	@ (800cc28 <prvCheckForValidListAndQueue+0x68>)
 800cbda:	f7fd ffc7 	bl	800ab6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cbde:	4b13      	ldr	r3, [pc, #76]	@ (800cc2c <prvCheckForValidListAndQueue+0x6c>)
 800cbe0:	4a10      	ldr	r2, [pc, #64]	@ (800cc24 <prvCheckForValidListAndQueue+0x64>)
 800cbe2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cbe4:	4b12      	ldr	r3, [pc, #72]	@ (800cc30 <prvCheckForValidListAndQueue+0x70>)
 800cbe6:	4a10      	ldr	r2, [pc, #64]	@ (800cc28 <prvCheckForValidListAndQueue+0x68>)
 800cbe8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cbea:	2300      	movs	r3, #0
 800cbec:	9300      	str	r3, [sp, #0]
 800cbee:	4b11      	ldr	r3, [pc, #68]	@ (800cc34 <prvCheckForValidListAndQueue+0x74>)
 800cbf0:	4a11      	ldr	r2, [pc, #68]	@ (800cc38 <prvCheckForValidListAndQueue+0x78>)
 800cbf2:	2110      	movs	r1, #16
 800cbf4:	200a      	movs	r0, #10
 800cbf6:	f7fe f8d7 	bl	800ada8 <xQueueGenericCreateStatic>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	4a08      	ldr	r2, [pc, #32]	@ (800cc20 <prvCheckForValidListAndQueue+0x60>)
 800cbfe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cc00:	4b07      	ldr	r3, [pc, #28]	@ (800cc20 <prvCheckForValidListAndQueue+0x60>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d005      	beq.n	800cc14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cc08:	4b05      	ldr	r3, [pc, #20]	@ (800cc20 <prvCheckForValidListAndQueue+0x60>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	490b      	ldr	r1, [pc, #44]	@ (800cc3c <prvCheckForValidListAndQueue+0x7c>)
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f7fe fcfc 	bl	800b60c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc14:	f000 f97a 	bl	800cf0c <vPortExitCritical>
}
 800cc18:	bf00      	nop
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	24033820 	.word	0x24033820
 800cc24:	240337f0 	.word	0x240337f0
 800cc28:	24033804 	.word	0x24033804
 800cc2c:	24033818 	.word	0x24033818
 800cc30:	2403381c 	.word	0x2403381c
 800cc34:	240338cc 	.word	0x240338cc
 800cc38:	2403382c 	.word	0x2403382c
 800cc3c:	0801e1d0 	.word	0x0801e1d0

0800cc40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cc40:	b480      	push	{r7}
 800cc42:	b085      	sub	sp, #20
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	60f8      	str	r0, [r7, #12]
 800cc48:	60b9      	str	r1, [r7, #8]
 800cc4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	3b04      	subs	r3, #4
 800cc50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cc58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	3b04      	subs	r3, #4
 800cc5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	f023 0201 	bic.w	r2, r3, #1
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	3b04      	subs	r3, #4
 800cc6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cc70:	4a0c      	ldr	r2, [pc, #48]	@ (800cca4 <pxPortInitialiseStack+0x64>)
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	3b14      	subs	r3, #20
 800cc7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	3b04      	subs	r3, #4
 800cc86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	f06f 0202 	mvn.w	r2, #2
 800cc8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	3b20      	subs	r3, #32
 800cc94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cc96:	68fb      	ldr	r3, [r7, #12]
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3714      	adds	r7, #20
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr
 800cca4:	0800cca9 	.word	0x0800cca9

0800cca8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b085      	sub	sp, #20
 800ccac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ccb2:	4b13      	ldr	r3, [pc, #76]	@ (800cd00 <prvTaskExitError+0x58>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ccba:	d00b      	beq.n	800ccd4 <prvTaskExitError+0x2c>
	__asm volatile
 800ccbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc0:	f383 8811 	msr	BASEPRI, r3
 800ccc4:	f3bf 8f6f 	isb	sy
 800ccc8:	f3bf 8f4f 	dsb	sy
 800cccc:	60fb      	str	r3, [r7, #12]
}
 800ccce:	bf00      	nop
 800ccd0:	bf00      	nop
 800ccd2:	e7fd      	b.n	800ccd0 <prvTaskExitError+0x28>
	__asm volatile
 800ccd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccd8:	f383 8811 	msr	BASEPRI, r3
 800ccdc:	f3bf 8f6f 	isb	sy
 800cce0:	f3bf 8f4f 	dsb	sy
 800cce4:	60bb      	str	r3, [r7, #8]
}
 800cce6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cce8:	bf00      	nop
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d0fc      	beq.n	800ccea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ccf0:	bf00      	nop
 800ccf2:	bf00      	nop
 800ccf4:	3714      	adds	r7, #20
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr
 800ccfe:	bf00      	nop
 800cd00:	24000014 	.word	0x24000014
	...

0800cd10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cd10:	4b07      	ldr	r3, [pc, #28]	@ (800cd30 <pxCurrentTCBConst2>)
 800cd12:	6819      	ldr	r1, [r3, #0]
 800cd14:	6808      	ldr	r0, [r1, #0]
 800cd16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd1a:	f380 8809 	msr	PSP, r0
 800cd1e:	f3bf 8f6f 	isb	sy
 800cd22:	f04f 0000 	mov.w	r0, #0
 800cd26:	f380 8811 	msr	BASEPRI, r0
 800cd2a:	4770      	bx	lr
 800cd2c:	f3af 8000 	nop.w

0800cd30 <pxCurrentTCBConst2>:
 800cd30:	240332f0 	.word	0x240332f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cd34:	bf00      	nop
 800cd36:	bf00      	nop

0800cd38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cd38:	4808      	ldr	r0, [pc, #32]	@ (800cd5c <prvPortStartFirstTask+0x24>)
 800cd3a:	6800      	ldr	r0, [r0, #0]
 800cd3c:	6800      	ldr	r0, [r0, #0]
 800cd3e:	f380 8808 	msr	MSP, r0
 800cd42:	f04f 0000 	mov.w	r0, #0
 800cd46:	f380 8814 	msr	CONTROL, r0
 800cd4a:	b662      	cpsie	i
 800cd4c:	b661      	cpsie	f
 800cd4e:	f3bf 8f4f 	dsb	sy
 800cd52:	f3bf 8f6f 	isb	sy
 800cd56:	df00      	svc	0
 800cd58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cd5a:	bf00      	nop
 800cd5c:	e000ed08 	.word	0xe000ed08

0800cd60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b086      	sub	sp, #24
 800cd64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cd66:	4b47      	ldr	r3, [pc, #284]	@ (800ce84 <xPortStartScheduler+0x124>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4a47      	ldr	r2, [pc, #284]	@ (800ce88 <xPortStartScheduler+0x128>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d10b      	bne.n	800cd88 <xPortStartScheduler+0x28>
	__asm volatile
 800cd70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd74:	f383 8811 	msr	BASEPRI, r3
 800cd78:	f3bf 8f6f 	isb	sy
 800cd7c:	f3bf 8f4f 	dsb	sy
 800cd80:	613b      	str	r3, [r7, #16]
}
 800cd82:	bf00      	nop
 800cd84:	bf00      	nop
 800cd86:	e7fd      	b.n	800cd84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cd88:	4b3e      	ldr	r3, [pc, #248]	@ (800ce84 <xPortStartScheduler+0x124>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4a3f      	ldr	r2, [pc, #252]	@ (800ce8c <xPortStartScheduler+0x12c>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d10b      	bne.n	800cdaa <xPortStartScheduler+0x4a>
	__asm volatile
 800cd92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd96:	f383 8811 	msr	BASEPRI, r3
 800cd9a:	f3bf 8f6f 	isb	sy
 800cd9e:	f3bf 8f4f 	dsb	sy
 800cda2:	60fb      	str	r3, [r7, #12]
}
 800cda4:	bf00      	nop
 800cda6:	bf00      	nop
 800cda8:	e7fd      	b.n	800cda6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cdaa:	4b39      	ldr	r3, [pc, #228]	@ (800ce90 <xPortStartScheduler+0x130>)
 800cdac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	b2db      	uxtb	r3, r3
 800cdb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	22ff      	movs	r2, #255	@ 0xff
 800cdba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	b2db      	uxtb	r3, r3
 800cdc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cdc4:	78fb      	ldrb	r3, [r7, #3]
 800cdc6:	b2db      	uxtb	r3, r3
 800cdc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cdcc:	b2da      	uxtb	r2, r3
 800cdce:	4b31      	ldr	r3, [pc, #196]	@ (800ce94 <xPortStartScheduler+0x134>)
 800cdd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cdd2:	4b31      	ldr	r3, [pc, #196]	@ (800ce98 <xPortStartScheduler+0x138>)
 800cdd4:	2207      	movs	r2, #7
 800cdd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cdd8:	e009      	b.n	800cdee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800cdda:	4b2f      	ldr	r3, [pc, #188]	@ (800ce98 <xPortStartScheduler+0x138>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	3b01      	subs	r3, #1
 800cde0:	4a2d      	ldr	r2, [pc, #180]	@ (800ce98 <xPortStartScheduler+0x138>)
 800cde2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cde4:	78fb      	ldrb	r3, [r7, #3]
 800cde6:	b2db      	uxtb	r3, r3
 800cde8:	005b      	lsls	r3, r3, #1
 800cdea:	b2db      	uxtb	r3, r3
 800cdec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cdee:	78fb      	ldrb	r3, [r7, #3]
 800cdf0:	b2db      	uxtb	r3, r3
 800cdf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cdf6:	2b80      	cmp	r3, #128	@ 0x80
 800cdf8:	d0ef      	beq.n	800cdda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cdfa:	4b27      	ldr	r3, [pc, #156]	@ (800ce98 <xPortStartScheduler+0x138>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f1c3 0307 	rsb	r3, r3, #7
 800ce02:	2b04      	cmp	r3, #4
 800ce04:	d00b      	beq.n	800ce1e <xPortStartScheduler+0xbe>
	__asm volatile
 800ce06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce0a:	f383 8811 	msr	BASEPRI, r3
 800ce0e:	f3bf 8f6f 	isb	sy
 800ce12:	f3bf 8f4f 	dsb	sy
 800ce16:	60bb      	str	r3, [r7, #8]
}
 800ce18:	bf00      	nop
 800ce1a:	bf00      	nop
 800ce1c:	e7fd      	b.n	800ce1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ce1e:	4b1e      	ldr	r3, [pc, #120]	@ (800ce98 <xPortStartScheduler+0x138>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	021b      	lsls	r3, r3, #8
 800ce24:	4a1c      	ldr	r2, [pc, #112]	@ (800ce98 <xPortStartScheduler+0x138>)
 800ce26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ce28:	4b1b      	ldr	r3, [pc, #108]	@ (800ce98 <xPortStartScheduler+0x138>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ce30:	4a19      	ldr	r2, [pc, #100]	@ (800ce98 <xPortStartScheduler+0x138>)
 800ce32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	b2da      	uxtb	r2, r3
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ce3c:	4b17      	ldr	r3, [pc, #92]	@ (800ce9c <xPortStartScheduler+0x13c>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4a16      	ldr	r2, [pc, #88]	@ (800ce9c <xPortStartScheduler+0x13c>)
 800ce42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ce46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ce48:	4b14      	ldr	r3, [pc, #80]	@ (800ce9c <xPortStartScheduler+0x13c>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	4a13      	ldr	r2, [pc, #76]	@ (800ce9c <xPortStartScheduler+0x13c>)
 800ce4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ce52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ce54:	f000 f8da 	bl	800d00c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ce58:	4b11      	ldr	r3, [pc, #68]	@ (800cea0 <xPortStartScheduler+0x140>)
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ce5e:	f000 f8f9 	bl	800d054 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ce62:	4b10      	ldr	r3, [pc, #64]	@ (800cea4 <xPortStartScheduler+0x144>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	4a0f      	ldr	r2, [pc, #60]	@ (800cea4 <xPortStartScheduler+0x144>)
 800ce68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ce6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ce6e:	f7ff ff63 	bl	800cd38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ce72:	f7ff f803 	bl	800be7c <vTaskSwitchContext>
	prvTaskExitError();
 800ce76:	f7ff ff17 	bl	800cca8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ce7a:	2300      	movs	r3, #0
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3718      	adds	r7, #24
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}
 800ce84:	e000ed00 	.word	0xe000ed00
 800ce88:	410fc271 	.word	0x410fc271
 800ce8c:	410fc270 	.word	0x410fc270
 800ce90:	e000e400 	.word	0xe000e400
 800ce94:	2403391c 	.word	0x2403391c
 800ce98:	24033920 	.word	0x24033920
 800ce9c:	e000ed20 	.word	0xe000ed20
 800cea0:	24000014 	.word	0x24000014
 800cea4:	e000ef34 	.word	0xe000ef34

0800cea8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cea8:	b480      	push	{r7}
 800ceaa:	b083      	sub	sp, #12
 800ceac:	af00      	add	r7, sp, #0
	__asm volatile
 800ceae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceb2:	f383 8811 	msr	BASEPRI, r3
 800ceb6:	f3bf 8f6f 	isb	sy
 800ceba:	f3bf 8f4f 	dsb	sy
 800cebe:	607b      	str	r3, [r7, #4]
}
 800cec0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cec2:	4b10      	ldr	r3, [pc, #64]	@ (800cf04 <vPortEnterCritical+0x5c>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	3301      	adds	r3, #1
 800cec8:	4a0e      	ldr	r2, [pc, #56]	@ (800cf04 <vPortEnterCritical+0x5c>)
 800ceca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cecc:	4b0d      	ldr	r3, [pc, #52]	@ (800cf04 <vPortEnterCritical+0x5c>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	2b01      	cmp	r3, #1
 800ced2:	d110      	bne.n	800cef6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ced4:	4b0c      	ldr	r3, [pc, #48]	@ (800cf08 <vPortEnterCritical+0x60>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	b2db      	uxtb	r3, r3
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d00b      	beq.n	800cef6 <vPortEnterCritical+0x4e>
	__asm volatile
 800cede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cee2:	f383 8811 	msr	BASEPRI, r3
 800cee6:	f3bf 8f6f 	isb	sy
 800ceea:	f3bf 8f4f 	dsb	sy
 800ceee:	603b      	str	r3, [r7, #0]
}
 800cef0:	bf00      	nop
 800cef2:	bf00      	nop
 800cef4:	e7fd      	b.n	800cef2 <vPortEnterCritical+0x4a>
	}
}
 800cef6:	bf00      	nop
 800cef8:	370c      	adds	r7, #12
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop
 800cf04:	24000014 	.word	0x24000014
 800cf08:	e000ed04 	.word	0xe000ed04

0800cf0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b083      	sub	sp, #12
 800cf10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cf12:	4b12      	ldr	r3, [pc, #72]	@ (800cf5c <vPortExitCritical+0x50>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d10b      	bne.n	800cf32 <vPortExitCritical+0x26>
	__asm volatile
 800cf1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf1e:	f383 8811 	msr	BASEPRI, r3
 800cf22:	f3bf 8f6f 	isb	sy
 800cf26:	f3bf 8f4f 	dsb	sy
 800cf2a:	607b      	str	r3, [r7, #4]
}
 800cf2c:	bf00      	nop
 800cf2e:	bf00      	nop
 800cf30:	e7fd      	b.n	800cf2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cf32:	4b0a      	ldr	r3, [pc, #40]	@ (800cf5c <vPortExitCritical+0x50>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	3b01      	subs	r3, #1
 800cf38:	4a08      	ldr	r2, [pc, #32]	@ (800cf5c <vPortExitCritical+0x50>)
 800cf3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cf3c:	4b07      	ldr	r3, [pc, #28]	@ (800cf5c <vPortExitCritical+0x50>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d105      	bne.n	800cf50 <vPortExitCritical+0x44>
 800cf44:	2300      	movs	r3, #0
 800cf46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	f383 8811 	msr	BASEPRI, r3
}
 800cf4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cf50:	bf00      	nop
 800cf52:	370c      	adds	r7, #12
 800cf54:	46bd      	mov	sp, r7
 800cf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5a:	4770      	bx	lr
 800cf5c:	24000014 	.word	0x24000014

0800cf60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cf60:	f3ef 8009 	mrs	r0, PSP
 800cf64:	f3bf 8f6f 	isb	sy
 800cf68:	4b15      	ldr	r3, [pc, #84]	@ (800cfc0 <pxCurrentTCBConst>)
 800cf6a:	681a      	ldr	r2, [r3, #0]
 800cf6c:	f01e 0f10 	tst.w	lr, #16
 800cf70:	bf08      	it	eq
 800cf72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cf76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf7a:	6010      	str	r0, [r2, #0]
 800cf7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cf80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cf84:	f380 8811 	msr	BASEPRI, r0
 800cf88:	f3bf 8f4f 	dsb	sy
 800cf8c:	f3bf 8f6f 	isb	sy
 800cf90:	f7fe ff74 	bl	800be7c <vTaskSwitchContext>
 800cf94:	f04f 0000 	mov.w	r0, #0
 800cf98:	f380 8811 	msr	BASEPRI, r0
 800cf9c:	bc09      	pop	{r0, r3}
 800cf9e:	6819      	ldr	r1, [r3, #0]
 800cfa0:	6808      	ldr	r0, [r1, #0]
 800cfa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfa6:	f01e 0f10 	tst.w	lr, #16
 800cfaa:	bf08      	it	eq
 800cfac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cfb0:	f380 8809 	msr	PSP, r0
 800cfb4:	f3bf 8f6f 	isb	sy
 800cfb8:	4770      	bx	lr
 800cfba:	bf00      	nop
 800cfbc:	f3af 8000 	nop.w

0800cfc0 <pxCurrentTCBConst>:
 800cfc0:	240332f0 	.word	0x240332f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cfc4:	bf00      	nop
 800cfc6:	bf00      	nop

0800cfc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0
	__asm volatile
 800cfce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfd2:	f383 8811 	msr	BASEPRI, r3
 800cfd6:	f3bf 8f6f 	isb	sy
 800cfda:	f3bf 8f4f 	dsb	sy
 800cfde:	607b      	str	r3, [r7, #4]
}
 800cfe0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cfe2:	f7fe fe91 	bl	800bd08 <xTaskIncrementTick>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d003      	beq.n	800cff4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cfec:	4b06      	ldr	r3, [pc, #24]	@ (800d008 <xPortSysTickHandler+0x40>)
 800cfee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cff2:	601a      	str	r2, [r3, #0]
 800cff4:	2300      	movs	r3, #0
 800cff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	f383 8811 	msr	BASEPRI, r3
}
 800cffe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d000:	bf00      	nop
 800d002:	3708      	adds	r7, #8
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}
 800d008:	e000ed04 	.word	0xe000ed04

0800d00c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d00c:	b480      	push	{r7}
 800d00e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d010:	4b0b      	ldr	r3, [pc, #44]	@ (800d040 <vPortSetupTimerInterrupt+0x34>)
 800d012:	2200      	movs	r2, #0
 800d014:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d016:	4b0b      	ldr	r3, [pc, #44]	@ (800d044 <vPortSetupTimerInterrupt+0x38>)
 800d018:	2200      	movs	r2, #0
 800d01a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d01c:	4b0a      	ldr	r3, [pc, #40]	@ (800d048 <vPortSetupTimerInterrupt+0x3c>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4a0a      	ldr	r2, [pc, #40]	@ (800d04c <vPortSetupTimerInterrupt+0x40>)
 800d022:	fba2 2303 	umull	r2, r3, r2, r3
 800d026:	099b      	lsrs	r3, r3, #6
 800d028:	4a09      	ldr	r2, [pc, #36]	@ (800d050 <vPortSetupTimerInterrupt+0x44>)
 800d02a:	3b01      	subs	r3, #1
 800d02c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d02e:	4b04      	ldr	r3, [pc, #16]	@ (800d040 <vPortSetupTimerInterrupt+0x34>)
 800d030:	2207      	movs	r2, #7
 800d032:	601a      	str	r2, [r3, #0]
}
 800d034:	bf00      	nop
 800d036:	46bd      	mov	sp, r7
 800d038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03c:	4770      	bx	lr
 800d03e:	bf00      	nop
 800d040:	e000e010 	.word	0xe000e010
 800d044:	e000e018 	.word	0xe000e018
 800d048:	24000004 	.word	0x24000004
 800d04c:	10624dd3 	.word	0x10624dd3
 800d050:	e000e014 	.word	0xe000e014

0800d054 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d054:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d064 <vPortEnableVFP+0x10>
 800d058:	6801      	ldr	r1, [r0, #0]
 800d05a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d05e:	6001      	str	r1, [r0, #0]
 800d060:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d062:	bf00      	nop
 800d064:	e000ed88 	.word	0xe000ed88

0800d068 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d068:	b480      	push	{r7}
 800d06a:	b085      	sub	sp, #20
 800d06c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d06e:	f3ef 8305 	mrs	r3, IPSR
 800d072:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	2b0f      	cmp	r3, #15
 800d078:	d915      	bls.n	800d0a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d07a:	4a18      	ldr	r2, [pc, #96]	@ (800d0dc <vPortValidateInterruptPriority+0x74>)
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	4413      	add	r3, r2
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d084:	4b16      	ldr	r3, [pc, #88]	@ (800d0e0 <vPortValidateInterruptPriority+0x78>)
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	7afa      	ldrb	r2, [r7, #11]
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d20b      	bcs.n	800d0a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d092:	f383 8811 	msr	BASEPRI, r3
 800d096:	f3bf 8f6f 	isb	sy
 800d09a:	f3bf 8f4f 	dsb	sy
 800d09e:	607b      	str	r3, [r7, #4]
}
 800d0a0:	bf00      	nop
 800d0a2:	bf00      	nop
 800d0a4:	e7fd      	b.n	800d0a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d0a6:	4b0f      	ldr	r3, [pc, #60]	@ (800d0e4 <vPortValidateInterruptPriority+0x7c>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d0ae:	4b0e      	ldr	r3, [pc, #56]	@ (800d0e8 <vPortValidateInterruptPriority+0x80>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d90b      	bls.n	800d0ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0ba:	f383 8811 	msr	BASEPRI, r3
 800d0be:	f3bf 8f6f 	isb	sy
 800d0c2:	f3bf 8f4f 	dsb	sy
 800d0c6:	603b      	str	r3, [r7, #0]
}
 800d0c8:	bf00      	nop
 800d0ca:	bf00      	nop
 800d0cc:	e7fd      	b.n	800d0ca <vPortValidateInterruptPriority+0x62>
	}
 800d0ce:	bf00      	nop
 800d0d0:	3714      	adds	r7, #20
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d8:	4770      	bx	lr
 800d0da:	bf00      	nop
 800d0dc:	e000e3f0 	.word	0xe000e3f0
 800d0e0:	2403391c 	.word	0x2403391c
 800d0e4:	e000ed0c 	.word	0xe000ed0c
 800d0e8:	24033920 	.word	0x24033920

0800d0ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b08a      	sub	sp, #40	@ 0x28
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d0f8:	f7fe fd4a 	bl	800bb90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d0fc:	4b5c      	ldr	r3, [pc, #368]	@ (800d270 <pvPortMalloc+0x184>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d101      	bne.n	800d108 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d104:	f000 f924 	bl	800d350 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d108:	4b5a      	ldr	r3, [pc, #360]	@ (800d274 <pvPortMalloc+0x188>)
 800d10a:	681a      	ldr	r2, [r3, #0]
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	4013      	ands	r3, r2
 800d110:	2b00      	cmp	r3, #0
 800d112:	f040 8095 	bne.w	800d240 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d01e      	beq.n	800d15a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d11c:	2208      	movs	r2, #8
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	4413      	add	r3, r2
 800d122:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f003 0307 	and.w	r3, r3, #7
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d015      	beq.n	800d15a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f023 0307 	bic.w	r3, r3, #7
 800d134:	3308      	adds	r3, #8
 800d136:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f003 0307 	and.w	r3, r3, #7
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d00b      	beq.n	800d15a <pvPortMalloc+0x6e>
	__asm volatile
 800d142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d146:	f383 8811 	msr	BASEPRI, r3
 800d14a:	f3bf 8f6f 	isb	sy
 800d14e:	f3bf 8f4f 	dsb	sy
 800d152:	617b      	str	r3, [r7, #20]
}
 800d154:	bf00      	nop
 800d156:	bf00      	nop
 800d158:	e7fd      	b.n	800d156 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d06f      	beq.n	800d240 <pvPortMalloc+0x154>
 800d160:	4b45      	ldr	r3, [pc, #276]	@ (800d278 <pvPortMalloc+0x18c>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	687a      	ldr	r2, [r7, #4]
 800d166:	429a      	cmp	r2, r3
 800d168:	d86a      	bhi.n	800d240 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d16a:	4b44      	ldr	r3, [pc, #272]	@ (800d27c <pvPortMalloc+0x190>)
 800d16c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d16e:	4b43      	ldr	r3, [pc, #268]	@ (800d27c <pvPortMalloc+0x190>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d174:	e004      	b.n	800d180 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d178:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	687a      	ldr	r2, [r7, #4]
 800d186:	429a      	cmp	r2, r3
 800d188:	d903      	bls.n	800d192 <pvPortMalloc+0xa6>
 800d18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d1f1      	bne.n	800d176 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d192:	4b37      	ldr	r3, [pc, #220]	@ (800d270 <pvPortMalloc+0x184>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d198:	429a      	cmp	r2, r3
 800d19a:	d051      	beq.n	800d240 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d19c:	6a3b      	ldr	r3, [r7, #32]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	2208      	movs	r2, #8
 800d1a2:	4413      	add	r3, r2
 800d1a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1a8:	681a      	ldr	r2, [r3, #0]
 800d1aa:	6a3b      	ldr	r3, [r7, #32]
 800d1ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1b0:	685a      	ldr	r2, [r3, #4]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	1ad2      	subs	r2, r2, r3
 800d1b6:	2308      	movs	r3, #8
 800d1b8:	005b      	lsls	r3, r3, #1
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d920      	bls.n	800d200 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d1be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	4413      	add	r3, r2
 800d1c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d1c6:	69bb      	ldr	r3, [r7, #24]
 800d1c8:	f003 0307 	and.w	r3, r3, #7
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d00b      	beq.n	800d1e8 <pvPortMalloc+0xfc>
	__asm volatile
 800d1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1d4:	f383 8811 	msr	BASEPRI, r3
 800d1d8:	f3bf 8f6f 	isb	sy
 800d1dc:	f3bf 8f4f 	dsb	sy
 800d1e0:	613b      	str	r3, [r7, #16]
}
 800d1e2:	bf00      	nop
 800d1e4:	bf00      	nop
 800d1e6:	e7fd      	b.n	800d1e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ea:	685a      	ldr	r2, [r3, #4]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	1ad2      	subs	r2, r2, r3
 800d1f0:	69bb      	ldr	r3, [r7, #24]
 800d1f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1f6:	687a      	ldr	r2, [r7, #4]
 800d1f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d1fa:	69b8      	ldr	r0, [r7, #24]
 800d1fc:	f000 f90c 	bl	800d418 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d200:	4b1d      	ldr	r3, [pc, #116]	@ (800d278 <pvPortMalloc+0x18c>)
 800d202:	681a      	ldr	r2, [r3, #0]
 800d204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d206:	685b      	ldr	r3, [r3, #4]
 800d208:	1ad3      	subs	r3, r2, r3
 800d20a:	4a1b      	ldr	r2, [pc, #108]	@ (800d278 <pvPortMalloc+0x18c>)
 800d20c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d20e:	4b1a      	ldr	r3, [pc, #104]	@ (800d278 <pvPortMalloc+0x18c>)
 800d210:	681a      	ldr	r2, [r3, #0]
 800d212:	4b1b      	ldr	r3, [pc, #108]	@ (800d280 <pvPortMalloc+0x194>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	429a      	cmp	r2, r3
 800d218:	d203      	bcs.n	800d222 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d21a:	4b17      	ldr	r3, [pc, #92]	@ (800d278 <pvPortMalloc+0x18c>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	4a18      	ldr	r2, [pc, #96]	@ (800d280 <pvPortMalloc+0x194>)
 800d220:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d224:	685a      	ldr	r2, [r3, #4]
 800d226:	4b13      	ldr	r3, [pc, #76]	@ (800d274 <pvPortMalloc+0x188>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	431a      	orrs	r2, r3
 800d22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d22e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d232:	2200      	movs	r2, #0
 800d234:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d236:	4b13      	ldr	r3, [pc, #76]	@ (800d284 <pvPortMalloc+0x198>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	3301      	adds	r3, #1
 800d23c:	4a11      	ldr	r2, [pc, #68]	@ (800d284 <pvPortMalloc+0x198>)
 800d23e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d240:	f7fe fcb4 	bl	800bbac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d244:	69fb      	ldr	r3, [r7, #28]
 800d246:	f003 0307 	and.w	r3, r3, #7
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d00b      	beq.n	800d266 <pvPortMalloc+0x17a>
	__asm volatile
 800d24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d252:	f383 8811 	msr	BASEPRI, r3
 800d256:	f3bf 8f6f 	isb	sy
 800d25a:	f3bf 8f4f 	dsb	sy
 800d25e:	60fb      	str	r3, [r7, #12]
}
 800d260:	bf00      	nop
 800d262:	bf00      	nop
 800d264:	e7fd      	b.n	800d262 <pvPortMalloc+0x176>
	return pvReturn;
 800d266:	69fb      	ldr	r3, [r7, #28]
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3728      	adds	r7, #40	@ 0x28
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}
 800d270:	2406466c 	.word	0x2406466c
 800d274:	24064680 	.word	0x24064680
 800d278:	24064670 	.word	0x24064670
 800d27c:	24064664 	.word	0x24064664
 800d280:	24064674 	.word	0x24064674
 800d284:	24064678 	.word	0x24064678

0800d288 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b086      	sub	sp, #24
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d04f      	beq.n	800d33a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d29a:	2308      	movs	r3, #8
 800d29c:	425b      	negs	r3, r3
 800d29e:	697a      	ldr	r2, [r7, #20]
 800d2a0:	4413      	add	r3, r2
 800d2a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	685a      	ldr	r2, [r3, #4]
 800d2ac:	4b25      	ldr	r3, [pc, #148]	@ (800d344 <vPortFree+0xbc>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4013      	ands	r3, r2
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d10b      	bne.n	800d2ce <vPortFree+0x46>
	__asm volatile
 800d2b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2ba:	f383 8811 	msr	BASEPRI, r3
 800d2be:	f3bf 8f6f 	isb	sy
 800d2c2:	f3bf 8f4f 	dsb	sy
 800d2c6:	60fb      	str	r3, [r7, #12]
}
 800d2c8:	bf00      	nop
 800d2ca:	bf00      	nop
 800d2cc:	e7fd      	b.n	800d2ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d00b      	beq.n	800d2ee <vPortFree+0x66>
	__asm volatile
 800d2d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2da:	f383 8811 	msr	BASEPRI, r3
 800d2de:	f3bf 8f6f 	isb	sy
 800d2e2:	f3bf 8f4f 	dsb	sy
 800d2e6:	60bb      	str	r3, [r7, #8]
}
 800d2e8:	bf00      	nop
 800d2ea:	bf00      	nop
 800d2ec:	e7fd      	b.n	800d2ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	685a      	ldr	r2, [r3, #4]
 800d2f2:	4b14      	ldr	r3, [pc, #80]	@ (800d344 <vPortFree+0xbc>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4013      	ands	r3, r2
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d01e      	beq.n	800d33a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d11a      	bne.n	800d33a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	685a      	ldr	r2, [r3, #4]
 800d308:	4b0e      	ldr	r3, [pc, #56]	@ (800d344 <vPortFree+0xbc>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	43db      	mvns	r3, r3
 800d30e:	401a      	ands	r2, r3
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d314:	f7fe fc3c 	bl	800bb90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	685a      	ldr	r2, [r3, #4]
 800d31c:	4b0a      	ldr	r3, [pc, #40]	@ (800d348 <vPortFree+0xc0>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	4413      	add	r3, r2
 800d322:	4a09      	ldr	r2, [pc, #36]	@ (800d348 <vPortFree+0xc0>)
 800d324:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d326:	6938      	ldr	r0, [r7, #16]
 800d328:	f000 f876 	bl	800d418 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d32c:	4b07      	ldr	r3, [pc, #28]	@ (800d34c <vPortFree+0xc4>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	3301      	adds	r3, #1
 800d332:	4a06      	ldr	r2, [pc, #24]	@ (800d34c <vPortFree+0xc4>)
 800d334:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d336:	f7fe fc39 	bl	800bbac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d33a:	bf00      	nop
 800d33c:	3718      	adds	r7, #24
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
 800d342:	bf00      	nop
 800d344:	24064680 	.word	0x24064680
 800d348:	24064670 	.word	0x24064670
 800d34c:	2406467c 	.word	0x2406467c

0800d350 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d350:	b480      	push	{r7}
 800d352:	b085      	sub	sp, #20
 800d354:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d356:	4b29      	ldr	r3, [pc, #164]	@ (800d3fc <prvHeapInit+0xac>)
 800d358:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d35a:	4b29      	ldr	r3, [pc, #164]	@ (800d400 <prvHeapInit+0xb0>)
 800d35c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	f003 0307 	and.w	r3, r3, #7
 800d364:	2b00      	cmp	r3, #0
 800d366:	d00c      	beq.n	800d382 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	3307      	adds	r3, #7
 800d36c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f023 0307 	bic.w	r3, r3, #7
 800d374:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d376:	68ba      	ldr	r2, [r7, #8]
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	1ad3      	subs	r3, r2, r3
 800d37c:	4a20      	ldr	r2, [pc, #128]	@ (800d400 <prvHeapInit+0xb0>)
 800d37e:	4413      	add	r3, r2
 800d380:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d386:	4a1f      	ldr	r2, [pc, #124]	@ (800d404 <prvHeapInit+0xb4>)
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d38c:	4b1d      	ldr	r3, [pc, #116]	@ (800d404 <prvHeapInit+0xb4>)
 800d38e:	2200      	movs	r2, #0
 800d390:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	68ba      	ldr	r2, [r7, #8]
 800d396:	4413      	add	r3, r2
 800d398:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d39a:	2208      	movs	r2, #8
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	1a9b      	subs	r3, r3, r2
 800d3a0:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	f023 0307 	bic.w	r3, r3, #7
 800d3a8:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	4a16      	ldr	r2, [pc, #88]	@ (800d408 <prvHeapInit+0xb8>)
 800d3ae:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d3b0:	4b15      	ldr	r3, [pc, #84]	@ (800d408 <prvHeapInit+0xb8>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d3b8:	4b13      	ldr	r3, [pc, #76]	@ (800d408 <prvHeapInit+0xb8>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	68fa      	ldr	r2, [r7, #12]
 800d3c8:	1ad2      	subs	r2, r2, r3
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d3ce:	4b0e      	ldr	r3, [pc, #56]	@ (800d408 <prvHeapInit+0xb8>)
 800d3d0:	681a      	ldr	r2, [r3, #0]
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	685b      	ldr	r3, [r3, #4]
 800d3da:	4a0c      	ldr	r2, [pc, #48]	@ (800d40c <prvHeapInit+0xbc>)
 800d3dc:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	685b      	ldr	r3, [r3, #4]
 800d3e2:	4a0b      	ldr	r2, [pc, #44]	@ (800d410 <prvHeapInit+0xc0>)
 800d3e4:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d3e6:	4b0b      	ldr	r3, [pc, #44]	@ (800d414 <prvHeapInit+0xc4>)
 800d3e8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d3ec:	601a      	str	r2, [r3, #0]
}
 800d3ee:	bf00      	nop
 800d3f0:	3714      	adds	r7, #20
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f8:	4770      	bx	lr
 800d3fa:	bf00      	nop
 800d3fc:	00030d40 	.word	0x00030d40
 800d400:	24033924 	.word	0x24033924
 800d404:	24064664 	.word	0x24064664
 800d408:	2406466c 	.word	0x2406466c
 800d40c:	24064674 	.word	0x24064674
 800d410:	24064670 	.word	0x24064670
 800d414:	24064680 	.word	0x24064680

0800d418 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d418:	b480      	push	{r7}
 800d41a:	b085      	sub	sp, #20
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d420:	4b28      	ldr	r3, [pc, #160]	@ (800d4c4 <prvInsertBlockIntoFreeList+0xac>)
 800d422:	60fb      	str	r3, [r7, #12]
 800d424:	e002      	b.n	800d42c <prvInsertBlockIntoFreeList+0x14>
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	60fb      	str	r3, [r7, #12]
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	687a      	ldr	r2, [r7, #4]
 800d432:	429a      	cmp	r2, r3
 800d434:	d8f7      	bhi.n	800d426 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	685b      	ldr	r3, [r3, #4]
 800d43e:	68ba      	ldr	r2, [r7, #8]
 800d440:	4413      	add	r3, r2
 800d442:	687a      	ldr	r2, [r7, #4]
 800d444:	429a      	cmp	r2, r3
 800d446:	d108      	bne.n	800d45a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	685a      	ldr	r2, [r3, #4]
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	685b      	ldr	r3, [r3, #4]
 800d450:	441a      	add	r2, r3
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	685b      	ldr	r3, [r3, #4]
 800d462:	68ba      	ldr	r2, [r7, #8]
 800d464:	441a      	add	r2, r3
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d118      	bne.n	800d4a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681a      	ldr	r2, [r3, #0]
 800d472:	4b15      	ldr	r3, [pc, #84]	@ (800d4c8 <prvInsertBlockIntoFreeList+0xb0>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	429a      	cmp	r2, r3
 800d478:	d00d      	beq.n	800d496 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	685a      	ldr	r2, [r3, #4]
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	441a      	add	r2, r3
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	681a      	ldr	r2, [r3, #0]
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	601a      	str	r2, [r3, #0]
 800d494:	e008      	b.n	800d4a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d496:	4b0c      	ldr	r3, [pc, #48]	@ (800d4c8 <prvInsertBlockIntoFreeList+0xb0>)
 800d498:	681a      	ldr	r2, [r3, #0]
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	601a      	str	r2, [r3, #0]
 800d49e:	e003      	b.n	800d4a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681a      	ldr	r2, [r3, #0]
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d4a8:	68fa      	ldr	r2, [r7, #12]
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d002      	beq.n	800d4b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	687a      	ldr	r2, [r7, #4]
 800d4b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d4b6:	bf00      	nop
 800d4b8:	3714      	adds	r7, #20
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c0:	4770      	bx	lr
 800d4c2:	bf00      	nop
 800d4c4:	24064664 	.word	0x24064664
 800d4c8:	2406466c 	.word	0x2406466c

0800d4cc <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 800d4cc:	4b04      	ldr	r3, [pc, #16]	@ (800d4e0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x14>)
 800d4ce:	681a      	ldr	r2, [r3, #0]
 800d4d0:	b10a      	cbz	r2, 800d4d6 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0xa>
 800d4d2:	4803      	ldr	r0, [pc, #12]	@ (800d4e0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x14>)
 800d4d4:	4770      	bx	lr
 800d4d6:	4a03      	ldr	r2, [pc, #12]	@ (800d4e4 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x18>)
 800d4d8:	4801      	ldr	r0, [pc, #4]	@ (800d4e0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x14>)
 800d4da:	6812      	ldr	r2, [r2, #0]
 800d4dc:	601a      	str	r2, [r3, #0]
 800d4de:	4770      	bx	lr
 800d4e0:	24000020 	.word	0x24000020
 800d4e4:	24000e10 	.word	0x24000e10

0800d4e8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 800d4e8:	4a02      	ldr	r2, [pc, #8]	@ (800d4f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0xc>)
 800d4ea:	4b03      	ldr	r3, [pc, #12]	@ (800d4f8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x10>)
 800d4ec:	6812      	ldr	r2, [r2, #0]
 800d4ee:	601a      	str	r2, [r3, #0]
 800d4f0:	4770      	bx	lr
 800d4f2:	bf00      	nop
 800d4f4:	24000e10 	.word	0x24000e10
 800d4f8:	24000020 	.word	0x24000020

0800d4fc <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_init_function>:
 800d4fc:	f004 b8be 	b.w	801167c <autoware_control_msgs__msg__Control__init>

0800d500 <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_fini_function>:
 800d500:	f004 b912 	b.w	8011728 <autoware_control_msgs__msg__Control__fini>

0800d504 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 800d504:	b510      	push	{r4, lr}
 800d506:	4c0c      	ldr	r4, [pc, #48]	@ (800d538 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x34>)
 800d508:	f001 f91e 	bl	800e748 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d50c:	60e0      	str	r0, [r4, #12]
 800d50e:	f001 f91b 	bl	800e748 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d512:	64a0      	str	r0, [r4, #72]	@ 0x48
 800d514:	f000 f81a 	bl	800d54c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 800d518:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800d51c:	f000 f832 	bl	800d584 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 800d520:	4b06      	ldr	r3, [pc, #24]	@ (800d53c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 800d522:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800d526:	681a      	ldr	r2, [r3, #0]
 800d528:	b10a      	cbz	r2, 800d52e <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x2a>
 800d52a:	4804      	ldr	r0, [pc, #16]	@ (800d53c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 800d52c:	bd10      	pop	{r4, pc}
 800d52e:	4a04      	ldr	r2, [pc, #16]	@ (800d540 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x3c>)
 800d530:	4802      	ldr	r0, [pc, #8]	@ (800d53c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 800d532:	6812      	ldr	r2, [r2, #0]
 800d534:	601a      	str	r2, [r3, #0]
 800d536:	bd10      	pop	{r4, pc}
 800d538:	2400002c 	.word	0x2400002c
 800d53c:	2400011c 	.word	0x2400011c
 800d540:	24000e14 	.word	0x24000e14

0800d544 <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_init_function>:
 800d544:	f004 b904 	b.w	8011750 <autoware_control_msgs__msg__Lateral__init>

0800d548 <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_fini_function>:
 800d548:	f004 b926 	b.w	8011798 <autoware_control_msgs__msg__Lateral__fini>

0800d54c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 800d54c:	b510      	push	{r4, lr}
 800d54e:	4c08      	ldr	r4, [pc, #32]	@ (800d570 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x24>)
 800d550:	f001 f8fa 	bl	800e748 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d554:	60e0      	str	r0, [r4, #12]
 800d556:	f001 f8f7 	bl	800e748 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d55a:	4b06      	ldr	r3, [pc, #24]	@ (800d574 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 800d55c:	64a0      	str	r0, [r4, #72]	@ 0x48
 800d55e:	681a      	ldr	r2, [r3, #0]
 800d560:	b10a      	cbz	r2, 800d566 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x1a>
 800d562:	4804      	ldr	r0, [pc, #16]	@ (800d574 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 800d564:	bd10      	pop	{r4, pc}
 800d566:	4a04      	ldr	r2, [pc, #16]	@ (800d578 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x2c>)
 800d568:	4802      	ldr	r0, [pc, #8]	@ (800d574 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 800d56a:	6812      	ldr	r2, [r2, #0]
 800d56c:	601a      	str	r2, [r3, #0]
 800d56e:	bd10      	pop	{r4, pc}
 800d570:	24000128 	.word	0x24000128
 800d574:	24000254 	.word	0x24000254
 800d578:	24000e14 	.word	0x24000e14

0800d57c <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_init_function>:
 800d57c:	f004 b918 	b.w	80117b0 <autoware_control_msgs__msg__Longitudinal__init>

0800d580 <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_fini_function>:
 800d580:	f004 b93a 	b.w	80117f8 <autoware_control_msgs__msg__Longitudinal__fini>

0800d584 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 800d584:	b510      	push	{r4, lr}
 800d586:	4c08      	ldr	r4, [pc, #32]	@ (800d5a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x24>)
 800d588:	f001 f8de 	bl	800e748 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d58c:	60e0      	str	r0, [r4, #12]
 800d58e:	f001 f8db 	bl	800e748 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d592:	4b06      	ldr	r3, [pc, #24]	@ (800d5ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 800d594:	64a0      	str	r0, [r4, #72]	@ 0x48
 800d596:	681a      	ldr	r2, [r3, #0]
 800d598:	b10a      	cbz	r2, 800d59e <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x1a>
 800d59a:	4804      	ldr	r0, [pc, #16]	@ (800d5ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 800d59c:	bd10      	pop	{r4, pc}
 800d59e:	4a04      	ldr	r2, [pc, #16]	@ (800d5b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x2c>)
 800d5a0:	4802      	ldr	r0, [pc, #8]	@ (800d5ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 800d5a2:	6812      	ldr	r2, [r2, #0]
 800d5a4:	601a      	str	r2, [r3, #0]
 800d5a6:	bd10      	pop	{r4, pc}
 800d5a8:	24000260 	.word	0x24000260
 800d5ac:	24000404 	.word	0x24000404
 800d5b0:	24000e14 	.word	0x24000e14

0800d5b4 <get_serialized_size_autoware_control_msgs__msg__Control>:
 800d5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5b6:	4604      	mov	r4, r0
 800d5b8:	b1c8      	cbz	r0, 800d5ee <get_serialized_size_autoware_control_msgs__msg__Control+0x3a>
 800d5ba:	460f      	mov	r7, r1
 800d5bc:	f001 f8d2 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 800d5c0:	4606      	mov	r6, r0
 800d5c2:	f104 0008 	add.w	r0, r4, #8
 800d5c6:	443e      	add	r6, r7
 800d5c8:	4631      	mov	r1, r6
 800d5ca:	f001 f8cb 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 800d5ce:	4605      	mov	r5, r0
 800d5d0:	f104 0010 	add.w	r0, r4, #16
 800d5d4:	4435      	add	r5, r6
 800d5d6:	4629      	mov	r1, r5
 800d5d8:	f000 f8a2 	bl	800d720 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 800d5dc:	4601      	mov	r1, r0
 800d5de:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800d5e2:	440d      	add	r5, r1
 800d5e4:	4629      	mov	r1, r5
 800d5e6:	f000 f9a7 	bl	800d938 <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 800d5ea:	1bc0      	subs	r0, r0, r7
 800d5ec:	4428      	add	r0, r5
 800d5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d5f0 <_Control__cdr_deserialize>:
 800d5f0:	b570      	push	{r4, r5, r6, lr}
 800d5f2:	460c      	mov	r4, r1
 800d5f4:	b329      	cbz	r1, 800d642 <_Control__cdr_deserialize+0x52>
 800d5f6:	4605      	mov	r5, r0
 800d5f8:	f001 f918 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	4621      	mov	r1, r4
 800d600:	4628      	mov	r0, r5
 800d602:	685b      	ldr	r3, [r3, #4]
 800d604:	68db      	ldr	r3, [r3, #12]
 800d606:	4798      	blx	r3
 800d608:	f001 f910 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d60c:	4603      	mov	r3, r0
 800d60e:	f104 0108 	add.w	r1, r4, #8
 800d612:	4628      	mov	r0, r5
 800d614:	685b      	ldr	r3, [r3, #4]
 800d616:	68db      	ldr	r3, [r3, #12]
 800d618:	4798      	blx	r3
 800d61a:	f000 f95b 	bl	800d8d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 800d61e:	4603      	mov	r3, r0
 800d620:	f104 0110 	add.w	r1, r4, #16
 800d624:	4628      	mov	r0, r5
 800d626:	685b      	ldr	r3, [r3, #4]
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	4798      	blx	r3
 800d62c:	f000 fa28 	bl	800da80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 800d630:	4603      	mov	r3, r0
 800d632:	f104 012c 	add.w	r1, r4, #44	@ 0x2c
 800d636:	4628      	mov	r0, r5
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d63e:	68db      	ldr	r3, [r3, #12]
 800d640:	4718      	bx	r3
 800d642:	4608      	mov	r0, r1
 800d644:	bd70      	pop	{r4, r5, r6, pc}
 800d646:	bf00      	nop

0800d648 <_Control__cdr_serialize>:
 800d648:	b338      	cbz	r0, 800d69a <_Control__cdr_serialize+0x52>
 800d64a:	b570      	push	{r4, r5, r6, lr}
 800d64c:	4604      	mov	r4, r0
 800d64e:	460d      	mov	r5, r1
 800d650:	f001 f8ec 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d654:	4603      	mov	r3, r0
 800d656:	4629      	mov	r1, r5
 800d658:	4620      	mov	r0, r4
 800d65a:	685b      	ldr	r3, [r3, #4]
 800d65c:	689b      	ldr	r3, [r3, #8]
 800d65e:	4798      	blx	r3
 800d660:	f001 f8e4 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d664:	4603      	mov	r3, r0
 800d666:	4629      	mov	r1, r5
 800d668:	f104 0008 	add.w	r0, r4, #8
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	689b      	ldr	r3, [r3, #8]
 800d670:	4798      	blx	r3
 800d672:	f000 f92f 	bl	800d8d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 800d676:	4603      	mov	r3, r0
 800d678:	4629      	mov	r1, r5
 800d67a:	f104 0010 	add.w	r0, r4, #16
 800d67e:	685b      	ldr	r3, [r3, #4]
 800d680:	689b      	ldr	r3, [r3, #8]
 800d682:	4798      	blx	r3
 800d684:	f000 f9fc 	bl	800da80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 800d688:	4603      	mov	r3, r0
 800d68a:	4629      	mov	r1, r5
 800d68c:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d696:	689b      	ldr	r3, [r3, #8]
 800d698:	4718      	bx	r3
 800d69a:	4770      	bx	lr

0800d69c <_Control__get_serialized_size>:
 800d69c:	b538      	push	{r3, r4, r5, lr}
 800d69e:	4604      	mov	r4, r0
 800d6a0:	b1b8      	cbz	r0, 800d6d2 <_Control__get_serialized_size+0x36>
 800d6a2:	2100      	movs	r1, #0
 800d6a4:	f001 f85e 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 800d6a8:	4605      	mov	r5, r0
 800d6aa:	f104 0008 	add.w	r0, r4, #8
 800d6ae:	4629      	mov	r1, r5
 800d6b0:	f001 f858 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 800d6b4:	4601      	mov	r1, r0
 800d6b6:	f104 0010 	add.w	r0, r4, #16
 800d6ba:	440d      	add	r5, r1
 800d6bc:	4629      	mov	r1, r5
 800d6be:	f000 f82f 	bl	800d720 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 800d6c2:	4601      	mov	r1, r0
 800d6c4:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800d6c8:	440d      	add	r5, r1
 800d6ca:	4629      	mov	r1, r5
 800d6cc:	f000 f934 	bl	800d938 <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 800d6d0:	4428      	add	r0, r5
 800d6d2:	bd38      	pop	{r3, r4, r5, pc}

0800d6d4 <_Control__max_serialized_size>:
 800d6d4:	b530      	push	{r4, r5, lr}
 800d6d6:	b083      	sub	sp, #12
 800d6d8:	2301      	movs	r3, #1
 800d6da:	2100      	movs	r1, #0
 800d6dc:	f10d 0007 	add.w	r0, sp, #7
 800d6e0:	f88d 3007 	strb.w	r3, [sp, #7]
 800d6e4:	f001 f88e 	bl	800e804 <max_serialized_size_builtin_interfaces__msg__Time>
 800d6e8:	4604      	mov	r4, r0
 800d6ea:	f10d 0007 	add.w	r0, sp, #7
 800d6ee:	4621      	mov	r1, r4
 800d6f0:	f001 f888 	bl	800e804 <max_serialized_size_builtin_interfaces__msg__Time>
 800d6f4:	4605      	mov	r5, r0
 800d6f6:	f10d 0007 	add.w	r0, sp, #7
 800d6fa:	4425      	add	r5, r4
 800d6fc:	4629      	mov	r1, r5
 800d6fe:	f000 f8c7 	bl	800d890 <max_serialized_size_autoware_control_msgs__msg__Lateral>
 800d702:	4604      	mov	r4, r0
 800d704:	f10d 0007 	add.w	r0, sp, #7
 800d708:	442c      	add	r4, r5
 800d70a:	4621      	mov	r1, r4
 800d70c:	f000 f980 	bl	800da10 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 800d710:	4420      	add	r0, r4
 800d712:	b003      	add	sp, #12
 800d714:	bd30      	pop	{r4, r5, pc}
 800d716:	bf00      	nop

0800d718 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 800d718:	4800      	ldr	r0, [pc, #0]	@ (800d71c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x4>)
 800d71a:	4770      	bx	lr
 800d71c:	24000410 	.word	0x24000410

0800d720 <get_serialized_size_autoware_control_msgs__msg__Lateral>:
 800d720:	b5b0      	push	{r4, r5, r7, lr}
 800d722:	4604      	mov	r4, r0
 800d724:	b1f0      	cbz	r0, 800d764 <get_serialized_size_autoware_control_msgs__msg__Lateral+0x44>
 800d726:	460d      	mov	r5, r1
 800d728:	f001 f81c 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 800d72c:	4607      	mov	r7, r0
 800d72e:	f104 0008 	add.w	r0, r4, #8
 800d732:	442f      	add	r7, r5
 800d734:	f1c5 0501 	rsb	r5, r5, #1
 800d738:	4639      	mov	r1, r7
 800d73a:	f001 f813 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 800d73e:	4407      	add	r7, r0
 800d740:	2104      	movs	r1, #4
 800d742:	4638      	mov	r0, r7
 800d744:	f002 fb12 	bl	800fd6c <ucdr_alignment>
 800d748:	2104      	movs	r1, #4
 800d74a:	1844      	adds	r4, r0, r1
 800d74c:	443c      	add	r4, r7
 800d74e:	4620      	mov	r0, r4
 800d750:	f002 fb0c 	bl	800fd6c <ucdr_alignment>
 800d754:	3004      	adds	r0, #4
 800d756:	2101      	movs	r1, #1
 800d758:	4404      	add	r4, r0
 800d75a:	4620      	mov	r0, r4
 800d75c:	f002 fb06 	bl	800fd6c <ucdr_alignment>
 800d760:	4428      	add	r0, r5
 800d762:	4420      	add	r0, r4
 800d764:	bdb0      	pop	{r4, r5, r7, pc}
 800d766:	bf00      	nop

0800d768 <_Lateral__cdr_deserialize>:
 800d768:	b538      	push	{r3, r4, r5, lr}
 800d76a:	460c      	mov	r4, r1
 800d76c:	b311      	cbz	r1, 800d7b4 <_Lateral__cdr_deserialize+0x4c>
 800d76e:	4605      	mov	r5, r0
 800d770:	f001 f85c 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d774:	4603      	mov	r3, r0
 800d776:	4621      	mov	r1, r4
 800d778:	4628      	mov	r0, r5
 800d77a:	685b      	ldr	r3, [r3, #4]
 800d77c:	68db      	ldr	r3, [r3, #12]
 800d77e:	4798      	blx	r3
 800d780:	f001 f854 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d784:	4603      	mov	r3, r0
 800d786:	f104 0108 	add.w	r1, r4, #8
 800d78a:	4628      	mov	r0, r5
 800d78c:	685b      	ldr	r3, [r3, #4]
 800d78e:	68db      	ldr	r3, [r3, #12]
 800d790:	4798      	blx	r3
 800d792:	f104 0110 	add.w	r1, r4, #16
 800d796:	4628      	mov	r0, r5
 800d798:	f002 f86a 	bl	800f870 <ucdr_deserialize_float>
 800d79c:	f104 0114 	add.w	r1, r4, #20
 800d7a0:	4628      	mov	r0, r5
 800d7a2:	f002 f865 	bl	800f870 <ucdr_deserialize_float>
 800d7a6:	f104 0118 	add.w	r1, r4, #24
 800d7aa:	4628      	mov	r0, r5
 800d7ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7b0:	f001 b856 	b.w	800e860 <ucdr_deserialize_bool>
 800d7b4:	4608      	mov	r0, r1
 800d7b6:	bd38      	pop	{r3, r4, r5, pc}

0800d7b8 <_Lateral__cdr_serialize>:
 800d7b8:	b318      	cbz	r0, 800d802 <_Lateral__cdr_serialize+0x4a>
 800d7ba:	b538      	push	{r3, r4, r5, lr}
 800d7bc:	4604      	mov	r4, r0
 800d7be:	460d      	mov	r5, r1
 800d7c0:	f001 f834 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	4629      	mov	r1, r5
 800d7c8:	4620      	mov	r0, r4
 800d7ca:	685b      	ldr	r3, [r3, #4]
 800d7cc:	689b      	ldr	r3, [r3, #8]
 800d7ce:	4798      	blx	r3
 800d7d0:	f001 f82c 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	4629      	mov	r1, r5
 800d7d8:	f104 0008 	add.w	r0, r4, #8
 800d7dc:	685b      	ldr	r3, [r3, #4]
 800d7de:	689b      	ldr	r3, [r3, #8]
 800d7e0:	4798      	blx	r3
 800d7e2:	ed94 0a04 	vldr	s0, [r4, #16]
 800d7e6:	4628      	mov	r0, r5
 800d7e8:	f001 ffaa 	bl	800f740 <ucdr_serialize_float>
 800d7ec:	ed94 0a05 	vldr	s0, [r4, #20]
 800d7f0:	4628      	mov	r0, r5
 800d7f2:	f001 ffa5 	bl	800f740 <ucdr_serialize_float>
 800d7f6:	7e21      	ldrb	r1, [r4, #24]
 800d7f8:	4628      	mov	r0, r5
 800d7fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7fe:	f001 b819 	b.w	800e834 <ucdr_serialize_bool>
 800d802:	4770      	bx	lr

0800d804 <_Lateral__get_serialized_size>:
 800d804:	b538      	push	{r3, r4, r5, lr}
 800d806:	4604      	mov	r4, r0
 800d808:	b1d8      	cbz	r0, 800d842 <_Lateral__get_serialized_size+0x3e>
 800d80a:	2100      	movs	r1, #0
 800d80c:	f000 ffaa 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 800d810:	4605      	mov	r5, r0
 800d812:	f104 0008 	add.w	r0, r4, #8
 800d816:	4629      	mov	r1, r5
 800d818:	f000 ffa4 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 800d81c:	4405      	add	r5, r0
 800d81e:	2104      	movs	r1, #4
 800d820:	4628      	mov	r0, r5
 800d822:	f002 faa3 	bl	800fd6c <ucdr_alignment>
 800d826:	2104      	movs	r1, #4
 800d828:	4408      	add	r0, r1
 800d82a:	1944      	adds	r4, r0, r5
 800d82c:	4620      	mov	r0, r4
 800d82e:	f002 fa9d 	bl	800fd6c <ucdr_alignment>
 800d832:	3004      	adds	r0, #4
 800d834:	2101      	movs	r1, #1
 800d836:	4404      	add	r4, r0
 800d838:	4620      	mov	r0, r4
 800d83a:	f002 fa97 	bl	800fd6c <ucdr_alignment>
 800d83e:	3001      	adds	r0, #1
 800d840:	4420      	add	r0, r4
 800d842:	bd38      	pop	{r3, r4, r5, pc}

0800d844 <_Lateral__max_serialized_size>:
 800d844:	b530      	push	{r4, r5, lr}
 800d846:	b083      	sub	sp, #12
 800d848:	2501      	movs	r5, #1
 800d84a:	2100      	movs	r1, #0
 800d84c:	f10d 0007 	add.w	r0, sp, #7
 800d850:	f88d 5007 	strb.w	r5, [sp, #7]
 800d854:	f000 ffd6 	bl	800e804 <max_serialized_size_builtin_interfaces__msg__Time>
 800d858:	4604      	mov	r4, r0
 800d85a:	f10d 0007 	add.w	r0, sp, #7
 800d85e:	4621      	mov	r1, r4
 800d860:	f000 ffd0 	bl	800e804 <max_serialized_size_builtin_interfaces__msg__Time>
 800d864:	4404      	add	r4, r0
 800d866:	2104      	movs	r1, #4
 800d868:	4620      	mov	r0, r4
 800d86a:	f002 fa7f 	bl	800fd6c <ucdr_alignment>
 800d86e:	2104      	movs	r1, #4
 800d870:	4408      	add	r0, r1
 800d872:	4404      	add	r4, r0
 800d874:	4620      	mov	r0, r4
 800d876:	f002 fa79 	bl	800fd6c <ucdr_alignment>
 800d87a:	3004      	adds	r0, #4
 800d87c:	4629      	mov	r1, r5
 800d87e:	4404      	add	r4, r0
 800d880:	4620      	mov	r0, r4
 800d882:	f002 fa73 	bl	800fd6c <ucdr_alignment>
 800d886:	4428      	add	r0, r5
 800d888:	4420      	add	r0, r4
 800d88a:	b003      	add	sp, #12
 800d88c:	bd30      	pop	{r4, r5, pc}
 800d88e:	bf00      	nop

0800d890 <max_serialized_size_autoware_control_msgs__msg__Lateral>:
 800d890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d892:	2701      	movs	r7, #1
 800d894:	460c      	mov	r4, r1
 800d896:	4606      	mov	r6, r0
 800d898:	7007      	strb	r7, [r0, #0]
 800d89a:	f000 ffb3 	bl	800e804 <max_serialized_size_builtin_interfaces__msg__Time>
 800d89e:	4605      	mov	r5, r0
 800d8a0:	4630      	mov	r0, r6
 800d8a2:	4425      	add	r5, r4
 800d8a4:	1b3c      	subs	r4, r7, r4
 800d8a6:	4629      	mov	r1, r5
 800d8a8:	f000 ffac 	bl	800e804 <max_serialized_size_builtin_interfaces__msg__Time>
 800d8ac:	4405      	add	r5, r0
 800d8ae:	2104      	movs	r1, #4
 800d8b0:	4628      	mov	r0, r5
 800d8b2:	f002 fa5b 	bl	800fd6c <ucdr_alignment>
 800d8b6:	2104      	movs	r1, #4
 800d8b8:	4408      	add	r0, r1
 800d8ba:	4405      	add	r5, r0
 800d8bc:	4628      	mov	r0, r5
 800d8be:	f002 fa55 	bl	800fd6c <ucdr_alignment>
 800d8c2:	3004      	adds	r0, #4
 800d8c4:	4639      	mov	r1, r7
 800d8c6:	4405      	add	r5, r0
 800d8c8:	4628      	mov	r0, r5
 800d8ca:	f002 fa4f 	bl	800fd6c <ucdr_alignment>
 800d8ce:	4420      	add	r0, r4
 800d8d0:	4428      	add	r0, r5
 800d8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d8d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 800d8d4:	4800      	ldr	r0, [pc, #0]	@ (800d8d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x4>)
 800d8d6:	4770      	bx	lr
 800d8d8:	24000438 	.word	0x24000438

0800d8dc <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>:
 800d8dc:	b570      	push	{r4, r5, r6, lr}
 800d8de:	460c      	mov	r4, r1
 800d8e0:	4606      	mov	r6, r0
 800d8e2:	f000 ff3f 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 800d8e6:	4605      	mov	r5, r0
 800d8e8:	f106 0008 	add.w	r0, r6, #8
 800d8ec:	4425      	add	r5, r4
 800d8ee:	f1c4 0401 	rsb	r4, r4, #1
 800d8f2:	4629      	mov	r1, r5
 800d8f4:	f000 ff36 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 800d8f8:	4405      	add	r5, r0
 800d8fa:	2104      	movs	r1, #4
 800d8fc:	4628      	mov	r0, r5
 800d8fe:	f002 fa35 	bl	800fd6c <ucdr_alignment>
 800d902:	2104      	movs	r1, #4
 800d904:	4408      	add	r0, r1
 800d906:	4405      	add	r5, r0
 800d908:	4628      	mov	r0, r5
 800d90a:	f002 fa2f 	bl	800fd6c <ucdr_alignment>
 800d90e:	2104      	movs	r1, #4
 800d910:	4408      	add	r0, r1
 800d912:	1946      	adds	r6, r0, r5
 800d914:	4630      	mov	r0, r6
 800d916:	f002 fa29 	bl	800fd6c <ucdr_alignment>
 800d91a:	1d05      	adds	r5, r0, #4
 800d91c:	2101      	movs	r1, #1
 800d91e:	4435      	add	r5, r6
 800d920:	4628      	mov	r0, r5
 800d922:	f002 fa23 	bl	800fd6c <ucdr_alignment>
 800d926:	2101      	movs	r1, #1
 800d928:	4408      	add	r0, r1
 800d92a:	4405      	add	r5, r0
 800d92c:	4628      	mov	r0, r5
 800d92e:	f002 fa1d 	bl	800fd6c <ucdr_alignment>
 800d932:	4420      	add	r0, r4
 800d934:	4428      	add	r0, r5
 800d936:	bd70      	pop	{r4, r5, r6, pc}

0800d938 <get_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 800d938:	b108      	cbz	r0, 800d93e <get_serialized_size_autoware_control_msgs__msg__Longitudinal+0x6>
 800d93a:	f7ff bfcf 	b.w	800d8dc <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 800d93e:	4770      	bx	lr

0800d940 <_Longitudinal__get_serialized_size>:
 800d940:	b110      	cbz	r0, 800d948 <_Longitudinal__get_serialized_size+0x8>
 800d942:	2100      	movs	r1, #0
 800d944:	f7ff bfca 	b.w	800d8dc <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 800d948:	4770      	bx	lr
 800d94a:	bf00      	nop

0800d94c <_Longitudinal__cdr_deserialize>:
 800d94c:	b538      	push	{r3, r4, r5, lr}
 800d94e:	460c      	mov	r4, r1
 800d950:	b361      	cbz	r1, 800d9ac <_Longitudinal__cdr_deserialize+0x60>
 800d952:	4605      	mov	r5, r0
 800d954:	f000 ff6a 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d958:	4603      	mov	r3, r0
 800d95a:	4621      	mov	r1, r4
 800d95c:	4628      	mov	r0, r5
 800d95e:	685b      	ldr	r3, [r3, #4]
 800d960:	68db      	ldr	r3, [r3, #12]
 800d962:	4798      	blx	r3
 800d964:	f000 ff62 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d968:	4603      	mov	r3, r0
 800d96a:	f104 0108 	add.w	r1, r4, #8
 800d96e:	4628      	mov	r0, r5
 800d970:	685b      	ldr	r3, [r3, #4]
 800d972:	68db      	ldr	r3, [r3, #12]
 800d974:	4798      	blx	r3
 800d976:	f104 0110 	add.w	r1, r4, #16
 800d97a:	4628      	mov	r0, r5
 800d97c:	f001 ff78 	bl	800f870 <ucdr_deserialize_float>
 800d980:	f104 0114 	add.w	r1, r4, #20
 800d984:	4628      	mov	r0, r5
 800d986:	f001 ff73 	bl	800f870 <ucdr_deserialize_float>
 800d98a:	f104 0118 	add.w	r1, r4, #24
 800d98e:	4628      	mov	r0, r5
 800d990:	f001 ff6e 	bl	800f870 <ucdr_deserialize_float>
 800d994:	f104 011c 	add.w	r1, r4, #28
 800d998:	4628      	mov	r0, r5
 800d99a:	f000 ff61 	bl	800e860 <ucdr_deserialize_bool>
 800d99e:	f104 011d 	add.w	r1, r4, #29
 800d9a2:	4628      	mov	r0, r5
 800d9a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9a8:	f000 bf5a 	b.w	800e860 <ucdr_deserialize_bool>
 800d9ac:	4608      	mov	r0, r1
 800d9ae:	bd38      	pop	{r3, r4, r5, pc}

0800d9b0 <_Longitudinal__cdr_serialize>:
 800d9b0:	b360      	cbz	r0, 800da0c <_Longitudinal__cdr_serialize+0x5c>
 800d9b2:	b538      	push	{r3, r4, r5, lr}
 800d9b4:	4604      	mov	r4, r0
 800d9b6:	460d      	mov	r5, r1
 800d9b8:	f000 ff38 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	4629      	mov	r1, r5
 800d9c0:	4620      	mov	r0, r4
 800d9c2:	685b      	ldr	r3, [r3, #4]
 800d9c4:	689b      	ldr	r3, [r3, #8]
 800d9c6:	4798      	blx	r3
 800d9c8:	f000 ff30 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	4629      	mov	r1, r5
 800d9d0:	f104 0008 	add.w	r0, r4, #8
 800d9d4:	685b      	ldr	r3, [r3, #4]
 800d9d6:	689b      	ldr	r3, [r3, #8]
 800d9d8:	4798      	blx	r3
 800d9da:	ed94 0a04 	vldr	s0, [r4, #16]
 800d9de:	4628      	mov	r0, r5
 800d9e0:	f001 feae 	bl	800f740 <ucdr_serialize_float>
 800d9e4:	ed94 0a05 	vldr	s0, [r4, #20]
 800d9e8:	4628      	mov	r0, r5
 800d9ea:	f001 fea9 	bl	800f740 <ucdr_serialize_float>
 800d9ee:	ed94 0a06 	vldr	s0, [r4, #24]
 800d9f2:	4628      	mov	r0, r5
 800d9f4:	f001 fea4 	bl	800f740 <ucdr_serialize_float>
 800d9f8:	7f21      	ldrb	r1, [r4, #28]
 800d9fa:	4628      	mov	r0, r5
 800d9fc:	f000 ff1a 	bl	800e834 <ucdr_serialize_bool>
 800da00:	7f61      	ldrb	r1, [r4, #29]
 800da02:	4628      	mov	r0, r5
 800da04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da08:	f000 bf14 	b.w	800e834 <ucdr_serialize_bool>
 800da0c:	4770      	bx	lr
 800da0e:	bf00      	nop

0800da10 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 800da10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da12:	2701      	movs	r7, #1
 800da14:	460c      	mov	r4, r1
 800da16:	4606      	mov	r6, r0
 800da18:	7007      	strb	r7, [r0, #0]
 800da1a:	f000 fef3 	bl	800e804 <max_serialized_size_builtin_interfaces__msg__Time>
 800da1e:	4605      	mov	r5, r0
 800da20:	4630      	mov	r0, r6
 800da22:	4425      	add	r5, r4
 800da24:	1b3c      	subs	r4, r7, r4
 800da26:	4629      	mov	r1, r5
 800da28:	f000 feec 	bl	800e804 <max_serialized_size_builtin_interfaces__msg__Time>
 800da2c:	4405      	add	r5, r0
 800da2e:	2104      	movs	r1, #4
 800da30:	4628      	mov	r0, r5
 800da32:	f002 f99b 	bl	800fd6c <ucdr_alignment>
 800da36:	2104      	movs	r1, #4
 800da38:	4408      	add	r0, r1
 800da3a:	4405      	add	r5, r0
 800da3c:	4628      	mov	r0, r5
 800da3e:	f002 f995 	bl	800fd6c <ucdr_alignment>
 800da42:	2104      	movs	r1, #4
 800da44:	4408      	add	r0, r1
 800da46:	1946      	adds	r6, r0, r5
 800da48:	4630      	mov	r0, r6
 800da4a:	f002 f98f 	bl	800fd6c <ucdr_alignment>
 800da4e:	1d05      	adds	r5, r0, #4
 800da50:	4639      	mov	r1, r7
 800da52:	4435      	add	r5, r6
 800da54:	4628      	mov	r0, r5
 800da56:	f002 f989 	bl	800fd6c <ucdr_alignment>
 800da5a:	4438      	add	r0, r7
 800da5c:	4639      	mov	r1, r7
 800da5e:	4405      	add	r5, r0
 800da60:	4628      	mov	r0, r5
 800da62:	f002 f983 	bl	800fd6c <ucdr_alignment>
 800da66:	4420      	add	r0, r4
 800da68:	4428      	add	r0, r5
 800da6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800da6c <_Longitudinal__max_serialized_size>:
 800da6c:	b500      	push	{lr}
 800da6e:	b083      	sub	sp, #12
 800da70:	2100      	movs	r1, #0
 800da72:	f10d 0007 	add.w	r0, sp, #7
 800da76:	f7ff ffcb 	bl	800da10 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 800da7a:	b003      	add	sp, #12
 800da7c:	f85d fb04 	ldr.w	pc, [sp], #4

0800da80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 800da80:	4800      	ldr	r0, [pc, #0]	@ (800da84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x4>)
 800da82:	4770      	bx	lr
 800da84:	24000460 	.word	0x24000460

0800da88 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 800da88:	4b04      	ldr	r3, [pc, #16]	@ (800da9c <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x14>)
 800da8a:	681a      	ldr	r2, [r3, #0]
 800da8c:	b10a      	cbz	r2, 800da92 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0xa>
 800da8e:	4803      	ldr	r0, [pc, #12]	@ (800da9c <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x14>)
 800da90:	4770      	bx	lr
 800da92:	4a03      	ldr	r2, [pc, #12]	@ (800daa0 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x18>)
 800da94:	4801      	ldr	r0, [pc, #4]	@ (800da9c <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x14>)
 800da96:	6812      	ldr	r2, [r2, #0]
 800da98:	601a      	str	r2, [r3, #0]
 800da9a:	4770      	bx	lr
 800da9c:	24000490 	.word	0x24000490
 800daa0:	24000e10 	.word	0x24000e10

0800daa4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 800daa4:	4b04      	ldr	r3, [pc, #16]	@ (800dab8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x14>)
 800daa6:	4805      	ldr	r0, [pc, #20]	@ (800dabc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x18>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	4905      	ldr	r1, [pc, #20]	@ (800dac0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>)
 800daac:	4a05      	ldr	r2, [pc, #20]	@ (800dac4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 800daae:	6003      	str	r3, [r0, #0]
 800dab0:	600b      	str	r3, [r1, #0]
 800dab2:	6013      	str	r3, [r2, #0]
 800dab4:	4770      	bx	lr
 800dab6:	bf00      	nop
 800dab8:	24000e10 	.word	0x24000e10
 800dabc:	240004ac 	.word	0x240004ac
 800dac0:	240004b8 	.word	0x240004b8
 800dac4:	24000490 	.word	0x24000490

0800dac8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 800dac8:	4b04      	ldr	r3, [pc, #16]	@ (800dadc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>)
 800daca:	681a      	ldr	r2, [r3, #0]
 800dacc:	b10a      	cbz	r2, 800dad2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0xa>
 800dace:	4803      	ldr	r0, [pc, #12]	@ (800dadc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>)
 800dad0:	4770      	bx	lr
 800dad2:	4a03      	ldr	r2, [pc, #12]	@ (800dae0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x18>)
 800dad4:	4801      	ldr	r0, [pc, #4]	@ (800dadc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>)
 800dad6:	6812      	ldr	r2, [r2, #0]
 800dad8:	601a      	str	r2, [r3, #0]
 800dada:	4770      	bx	lr
 800dadc:	240004cc 	.word	0x240004cc
 800dae0:	24000e10 	.word	0x24000e10

0800dae4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 800dae4:	4a02      	ldr	r2, [pc, #8]	@ (800daf0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0xc>)
 800dae6:	4b03      	ldr	r3, [pc, #12]	@ (800daf4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x10>)
 800dae8:	6812      	ldr	r2, [r2, #0]
 800daea:	601a      	str	r2, [r3, #0]
 800daec:	4770      	bx	lr
 800daee:	bf00      	nop
 800daf0:	24000e10 	.word	0x24000e10
 800daf4:	240004cc 	.word	0x240004cc

0800daf8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 800daf8:	4b04      	ldr	r3, [pc, #16]	@ (800db0c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>)
 800dafa:	681a      	ldr	r2, [r3, #0]
 800dafc:	b10a      	cbz	r2, 800db02 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0xa>
 800dafe:	4803      	ldr	r0, [pc, #12]	@ (800db0c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>)
 800db00:	4770      	bx	lr
 800db02:	4a03      	ldr	r2, [pc, #12]	@ (800db10 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x18>)
 800db04:	4801      	ldr	r0, [pc, #4]	@ (800db0c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>)
 800db06:	6812      	ldr	r2, [r2, #0]
 800db08:	601a      	str	r2, [r3, #0]
 800db0a:	4770      	bx	lr
 800db0c:	240004e0 	.word	0x240004e0
 800db10:	24000e10 	.word	0x24000e10

0800db14 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 800db14:	4a02      	ldr	r2, [pc, #8]	@ (800db20 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0xc>)
 800db16:	4b03      	ldr	r3, [pc, #12]	@ (800db24 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x10>)
 800db18:	6812      	ldr	r2, [r2, #0]
 800db1a:	601a      	str	r2, [r3, #0]
 800db1c:	4770      	bx	lr
 800db1e:	bf00      	nop
 800db20:	24000e10 	.word	0x24000e10
 800db24:	240004e0 	.word	0x240004e0

0800db28 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 800db28:	4b04      	ldr	r3, [pc, #16]	@ (800db3c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>)
 800db2a:	681a      	ldr	r2, [r3, #0]
 800db2c:	b10a      	cbz	r2, 800db32 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0xa>
 800db2e:	4803      	ldr	r0, [pc, #12]	@ (800db3c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>)
 800db30:	4770      	bx	lr
 800db32:	4a03      	ldr	r2, [pc, #12]	@ (800db40 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x18>)
 800db34:	4801      	ldr	r0, [pc, #4]	@ (800db3c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>)
 800db36:	6812      	ldr	r2, [r2, #0]
 800db38:	601a      	str	r2, [r3, #0]
 800db3a:	4770      	bx	lr
 800db3c:	240004f4 	.word	0x240004f4
 800db40:	24000e10 	.word	0x24000e10

0800db44 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 800db44:	4a02      	ldr	r2, [pc, #8]	@ (800db50 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0xc>)
 800db46:	4b03      	ldr	r3, [pc, #12]	@ (800db54 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x10>)
 800db48:	6812      	ldr	r2, [r2, #0]
 800db4a:	601a      	str	r2, [r3, #0]
 800db4c:	4770      	bx	lr
 800db4e:	bf00      	nop
 800db50:	24000e10 	.word	0x24000e10
 800db54:	240004f4 	.word	0x240004f4

0800db58 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 800db58:	4b04      	ldr	r3, [pc, #16]	@ (800db6c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 800db5a:	681a      	ldr	r2, [r3, #0]
 800db5c:	b10a      	cbz	r2, 800db62 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0xa>
 800db5e:	4803      	ldr	r0, [pc, #12]	@ (800db6c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 800db60:	4770      	bx	lr
 800db62:	4a03      	ldr	r2, [pc, #12]	@ (800db70 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x18>)
 800db64:	4801      	ldr	r0, [pc, #4]	@ (800db6c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 800db66:	6812      	ldr	r2, [r2, #0]
 800db68:	601a      	str	r2, [r3, #0]
 800db6a:	4770      	bx	lr
 800db6c:	24000508 	.word	0x24000508
 800db70:	24000e10 	.word	0x24000e10

0800db74 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 800db74:	4a02      	ldr	r2, [pc, #8]	@ (800db80 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0xc>)
 800db76:	4b03      	ldr	r3, [pc, #12]	@ (800db84 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x10>)
 800db78:	6812      	ldr	r2, [r2, #0]
 800db7a:	601a      	str	r2, [r3, #0]
 800db7c:	4770      	bx	lr
 800db7e:	bf00      	nop
 800db80:	24000e10 	.word	0x24000e10
 800db84:	24000508 	.word	0x24000508

0800db88 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 800db88:	4b04      	ldr	r3, [pc, #16]	@ (800db9c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>)
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	b10a      	cbz	r2, 800db92 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0xa>
 800db8e:	4803      	ldr	r0, [pc, #12]	@ (800db9c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>)
 800db90:	4770      	bx	lr
 800db92:	4a03      	ldr	r2, [pc, #12]	@ (800dba0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x18>)
 800db94:	4801      	ldr	r0, [pc, #4]	@ (800db9c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>)
 800db96:	6812      	ldr	r2, [r2, #0]
 800db98:	601a      	str	r2, [r3, #0]
 800db9a:	4770      	bx	lr
 800db9c:	2400051c 	.word	0x2400051c
 800dba0:	24000e10 	.word	0x24000e10

0800dba4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 800dba4:	4a02      	ldr	r2, [pc, #8]	@ (800dbb0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0xc>)
 800dba6:	4b03      	ldr	r3, [pc, #12]	@ (800dbb4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x10>)
 800dba8:	6812      	ldr	r2, [r2, #0]
 800dbaa:	601a      	str	r2, [r3, #0]
 800dbac:	4770      	bx	lr
 800dbae:	bf00      	nop
 800dbb0:	24000e10 	.word	0x24000e10
 800dbb4:	2400051c 	.word	0x2400051c

0800dbb8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 800dbb8:	4b04      	ldr	r3, [pc, #16]	@ (800dbcc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>)
 800dbba:	681a      	ldr	r2, [r3, #0]
 800dbbc:	b10a      	cbz	r2, 800dbc2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0xa>
 800dbbe:	4803      	ldr	r0, [pc, #12]	@ (800dbcc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>)
 800dbc0:	4770      	bx	lr
 800dbc2:	4a03      	ldr	r2, [pc, #12]	@ (800dbd0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x18>)
 800dbc4:	4801      	ldr	r0, [pc, #4]	@ (800dbcc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>)
 800dbc6:	6812      	ldr	r2, [r2, #0]
 800dbc8:	601a      	str	r2, [r3, #0]
 800dbca:	4770      	bx	lr
 800dbcc:	24000530 	.word	0x24000530
 800dbd0:	24000e10 	.word	0x24000e10

0800dbd4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 800dbd4:	4a02      	ldr	r2, [pc, #8]	@ (800dbe0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0xc>)
 800dbd6:	4b03      	ldr	r3, [pc, #12]	@ (800dbe4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x10>)
 800dbd8:	6812      	ldr	r2, [r2, #0]
 800dbda:	601a      	str	r2, [r3, #0]
 800dbdc:	4770      	bx	lr
 800dbde:	bf00      	nop
 800dbe0:	24000e10 	.word	0x24000e10
 800dbe4:	24000530 	.word	0x24000530

0800dbe8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 800dbe8:	4b04      	ldr	r3, [pc, #16]	@ (800dbfc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 800dbea:	681a      	ldr	r2, [r3, #0]
 800dbec:	b10a      	cbz	r2, 800dbf2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0xa>
 800dbee:	4803      	ldr	r0, [pc, #12]	@ (800dbfc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 800dbf0:	4770      	bx	lr
 800dbf2:	4a03      	ldr	r2, [pc, #12]	@ (800dc00 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x18>)
 800dbf4:	4801      	ldr	r0, [pc, #4]	@ (800dbfc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 800dbf6:	6812      	ldr	r2, [r2, #0]
 800dbf8:	601a      	str	r2, [r3, #0]
 800dbfa:	4770      	bx	lr
 800dbfc:	24000544 	.word	0x24000544
 800dc00:	24000e10 	.word	0x24000e10

0800dc04 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 800dc04:	4a02      	ldr	r2, [pc, #8]	@ (800dc10 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0xc>)
 800dc06:	4b03      	ldr	r3, [pc, #12]	@ (800dc14 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x10>)
 800dc08:	6812      	ldr	r2, [r2, #0]
 800dc0a:	601a      	str	r2, [r3, #0]
 800dc0c:	4770      	bx	lr
 800dc0e:	bf00      	nop
 800dc10:	24000e10 	.word	0x24000e10
 800dc14:	24000544 	.word	0x24000544

0800dc18 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 800dc18:	4b04      	ldr	r3, [pc, #16]	@ (800dc2c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 800dc1a:	681a      	ldr	r2, [r3, #0]
 800dc1c:	b10a      	cbz	r2, 800dc22 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0xa>
 800dc1e:	4803      	ldr	r0, [pc, #12]	@ (800dc2c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 800dc20:	4770      	bx	lr
 800dc22:	4a03      	ldr	r2, [pc, #12]	@ (800dc30 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x18>)
 800dc24:	4801      	ldr	r0, [pc, #4]	@ (800dc2c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 800dc26:	6812      	ldr	r2, [r2, #0]
 800dc28:	601a      	str	r2, [r3, #0]
 800dc2a:	4770      	bx	lr
 800dc2c:	24000558 	.word	0x24000558
 800dc30:	24000e10 	.word	0x24000e10

0800dc34 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 800dc34:	4a02      	ldr	r2, [pc, #8]	@ (800dc40 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0xc>)
 800dc36:	4b03      	ldr	r3, [pc, #12]	@ (800dc44 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x10>)
 800dc38:	6812      	ldr	r2, [r2, #0]
 800dc3a:	601a      	str	r2, [r3, #0]
 800dc3c:	4770      	bx	lr
 800dc3e:	bf00      	nop
 800dc40:	24000e10 	.word	0x24000e10
 800dc44:	24000558 	.word	0x24000558

0800dc48 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 800dc48:	4b04      	ldr	r3, [pc, #16]	@ (800dc5c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>)
 800dc4a:	681a      	ldr	r2, [r3, #0]
 800dc4c:	b10a      	cbz	r2, 800dc52 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0xa>
 800dc4e:	4803      	ldr	r0, [pc, #12]	@ (800dc5c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>)
 800dc50:	4770      	bx	lr
 800dc52:	4a03      	ldr	r2, [pc, #12]	@ (800dc60 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x18>)
 800dc54:	4801      	ldr	r0, [pc, #4]	@ (800dc5c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>)
 800dc56:	6812      	ldr	r2, [r2, #0]
 800dc58:	601a      	str	r2, [r3, #0]
 800dc5a:	4770      	bx	lr
 800dc5c:	2400056c 	.word	0x2400056c
 800dc60:	24000e10 	.word	0x24000e10

0800dc64 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 800dc64:	4a02      	ldr	r2, [pc, #8]	@ (800dc70 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0xc>)
 800dc66:	4b03      	ldr	r3, [pc, #12]	@ (800dc74 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x10>)
 800dc68:	6812      	ldr	r2, [r2, #0]
 800dc6a:	601a      	str	r2, [r3, #0]
 800dc6c:	4770      	bx	lr
 800dc6e:	bf00      	nop
 800dc70:	24000e10 	.word	0x24000e10
 800dc74:	2400056c 	.word	0x2400056c

0800dc78 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_init_function>:
 800dc78:	f003 bdca 	b.w	8011810 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init>

0800dc7c <autoware_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_fini_function>:
 800dc7c:	f003 bdda 	b.w	8011834 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini>

0800dc80 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_init_function>:
 800dc80:	f003 bddc 	b.w	801183c <autoware_vehicle_msgs__srv__ControlModeCommand_Response__init>

0800dc84 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_fini_function>:
 800dc84:	f003 bdde 	b.w	8011844 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__fini>

0800dc88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 800dc88:	b508      	push	{r3, lr}
 800dc8a:	f000 fd5d 	bl	800e748 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800dc8e:	4b06      	ldr	r3, [pc, #24]	@ (800dca8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 800dc90:	4906      	ldr	r1, [pc, #24]	@ (800dcac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x24>)
 800dc92:	681a      	ldr	r2, [r3, #0]
 800dc94:	60c8      	str	r0, [r1, #12]
 800dc96:	b10a      	cbz	r2, 800dc9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x14>
 800dc98:	4803      	ldr	r0, [pc, #12]	@ (800dca8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 800dc9a:	bd08      	pop	{r3, pc}
 800dc9c:	4a04      	ldr	r2, [pc, #16]	@ (800dcb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x28>)
 800dc9e:	4802      	ldr	r0, [pc, #8]	@ (800dca8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 800dca0:	6812      	ldr	r2, [r2, #0]
 800dca2:	601a      	str	r2, [r3, #0]
 800dca4:	bd08      	pop	{r3, pc}
 800dca6:	bf00      	nop
 800dca8:	240005f0 	.word	0x240005f0
 800dcac:	24000578 	.word	0x24000578
 800dcb0:	24000e14 	.word	0x24000e14

0800dcb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 800dcb4:	4b04      	ldr	r3, [pc, #16]	@ (800dcc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 800dcb6:	681a      	ldr	r2, [r3, #0]
 800dcb8:	b10a      	cbz	r2, 800dcbe <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0xa>
 800dcba:	4803      	ldr	r0, [pc, #12]	@ (800dcc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 800dcbc:	4770      	bx	lr
 800dcbe:	4a03      	ldr	r2, [pc, #12]	@ (800dccc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x18>)
 800dcc0:	4801      	ldr	r0, [pc, #4]	@ (800dcc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 800dcc2:	6812      	ldr	r2, [r2, #0]
 800dcc4:	601a      	str	r2, [r3, #0]
 800dcc6:	4770      	bx	lr
 800dcc8:	24000638 	.word	0x24000638
 800dccc:	24000e14 	.word	0x24000e14

0800dcd0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 800dcd0:	4b16      	ldr	r3, [pc, #88]	@ (800dd2c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 800dcd2:	681a      	ldr	r2, [r3, #0]
 800dcd4:	b510      	push	{r4, lr}
 800dcd6:	b132      	cbz	r2, 800dce6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x16>
 800dcd8:	685c      	ldr	r4, [r3, #4]
 800dcda:	68a3      	ldr	r3, [r4, #8]
 800dcdc:	b153      	cbz	r3, 800dcf4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x24>
 800dcde:	68e3      	ldr	r3, [r4, #12]
 800dce0:	b1a3      	cbz	r3, 800dd0c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x3c>
 800dce2:	4812      	ldr	r0, [pc, #72]	@ (800dd2c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 800dce4:	bd10      	pop	{r4, pc}
 800dce6:	4a12      	ldr	r2, [pc, #72]	@ (800dd30 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 800dce8:	685c      	ldr	r4, [r3, #4]
 800dcea:	6812      	ldr	r2, [r2, #0]
 800dcec:	601a      	str	r2, [r3, #0]
 800dcee:	68a3      	ldr	r3, [r4, #8]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d1f4      	bne.n	800dcde <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0xe>
 800dcf4:	f000 fd28 	bl	800e748 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800dcf8:	4b0e      	ldr	r3, [pc, #56]	@ (800dd34 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x64>)
 800dcfa:	490f      	ldr	r1, [pc, #60]	@ (800dd38 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x68>)
 800dcfc:	681a      	ldr	r2, [r3, #0]
 800dcfe:	60c8      	str	r0, [r1, #12]
 800dd00:	b17a      	cbz	r2, 800dd22 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x52>
 800dd02:	685b      	ldr	r3, [r3, #4]
 800dd04:	60a3      	str	r3, [r4, #8]
 800dd06:	68e3      	ldr	r3, [r4, #12]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d1ea      	bne.n	800dce2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x12>
 800dd0c:	4b0b      	ldr	r3, [pc, #44]	@ (800dd3c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x6c>)
 800dd0e:	681a      	ldr	r2, [r3, #0]
 800dd10:	b11a      	cbz	r2, 800dd1a <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x4a>
 800dd12:	685b      	ldr	r3, [r3, #4]
 800dd14:	4805      	ldr	r0, [pc, #20]	@ (800dd2c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 800dd16:	60e3      	str	r3, [r4, #12]
 800dd18:	bd10      	pop	{r4, pc}
 800dd1a:	4a05      	ldr	r2, [pc, #20]	@ (800dd30 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 800dd1c:	6812      	ldr	r2, [r2, #0]
 800dd1e:	601a      	str	r2, [r3, #0]
 800dd20:	e7f7      	b.n	800dd12 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x42>
 800dd22:	4a03      	ldr	r2, [pc, #12]	@ (800dd30 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 800dd24:	6812      	ldr	r2, [r2, #0]
 800dd26:	601a      	str	r2, [r3, #0]
 800dd28:	e7eb      	b.n	800dd02 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x32>
 800dd2a:	bf00      	nop
 800dd2c:	24000654 	.word	0x24000654
 800dd30:	24000e14 	.word	0x24000e14
 800dd34:	240005f0 	.word	0x240005f0
 800dd38:	24000578 	.word	0x24000578
 800dd3c:	24000638 	.word	0x24000638

0800dd40 <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_init_function>:
 800dd40:	f003 bd82 	b.w	8011848 <autoware_vehicle_msgs__msg__ControlModeReport__init>

0800dd44 <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_fini_function>:
 800dd44:	f003 bd92 	b.w	801186c <autoware_vehicle_msgs__msg__ControlModeReport__fini>

0800dd48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 800dd48:	b508      	push	{r3, lr}
 800dd4a:	f000 fcfd 	bl	800e748 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800dd4e:	4b06      	ldr	r3, [pc, #24]	@ (800dd68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 800dd50:	4906      	ldr	r1, [pc, #24]	@ (800dd6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x24>)
 800dd52:	681a      	ldr	r2, [r3, #0]
 800dd54:	60c8      	str	r0, [r1, #12]
 800dd56:	b10a      	cbz	r2, 800dd5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>
 800dd58:	4803      	ldr	r0, [pc, #12]	@ (800dd68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 800dd5a:	bd08      	pop	{r3, pc}
 800dd5c:	4a04      	ldr	r2, [pc, #16]	@ (800dd70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x28>)
 800dd5e:	4802      	ldr	r0, [pc, #8]	@ (800dd68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 800dd60:	6812      	ldr	r2, [r2, #0]
 800dd62:	601a      	str	r2, [r3, #0]
 800dd64:	bd08      	pop	{r3, pc}
 800dd66:	bf00      	nop
 800dd68:	240006d8 	.word	0x240006d8
 800dd6c:	24000660 	.word	0x24000660
 800dd70:	24000e14 	.word	0x24000e14

0800dd74 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_init_function>:
 800dd74:	f003 bd7e 	b.w	8011874 <autoware_vehicle_msgs__msg__GearCommand__init>

0800dd78 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_fini_function>:
 800dd78:	f003 bd8e 	b.w	8011898 <autoware_vehicle_msgs__msg__GearCommand__fini>

0800dd7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 800dd7c:	b508      	push	{r3, lr}
 800dd7e:	f000 fce3 	bl	800e748 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800dd82:	4b06      	ldr	r3, [pc, #24]	@ (800dd9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 800dd84:	4906      	ldr	r1, [pc, #24]	@ (800dda0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x24>)
 800dd86:	681a      	ldr	r2, [r3, #0]
 800dd88:	60c8      	str	r0, [r1, #12]
 800dd8a:	b10a      	cbz	r2, 800dd90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>
 800dd8c:	4803      	ldr	r0, [pc, #12]	@ (800dd9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 800dd8e:	bd08      	pop	{r3, pc}
 800dd90:	4a04      	ldr	r2, [pc, #16]	@ (800dda4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x28>)
 800dd92:	4802      	ldr	r0, [pc, #8]	@ (800dd9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 800dd94:	6812      	ldr	r2, [r2, #0]
 800dd96:	601a      	str	r2, [r3, #0]
 800dd98:	bd08      	pop	{r3, pc}
 800dd9a:	bf00      	nop
 800dd9c:	2400075c 	.word	0x2400075c
 800dda0:	240006e4 	.word	0x240006e4
 800dda4:	24000e14 	.word	0x24000e14

0800dda8 <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_init_function>:
 800dda8:	f003 bd7a 	b.w	80118a0 <autoware_vehicle_msgs__msg__GearReport__init>

0800ddac <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_fini_function>:
 800ddac:	f003 bd8a 	b.w	80118c4 <autoware_vehicle_msgs__msg__GearReport__fini>

0800ddb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 800ddb0:	b508      	push	{r3, lr}
 800ddb2:	f000 fcc9 	bl	800e748 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ddb6:	4b06      	ldr	r3, [pc, #24]	@ (800ddd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 800ddb8:	4906      	ldr	r1, [pc, #24]	@ (800ddd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x24>)
 800ddba:	681a      	ldr	r2, [r3, #0]
 800ddbc:	60c8      	str	r0, [r1, #12]
 800ddbe:	b10a      	cbz	r2, 800ddc4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>
 800ddc0:	4803      	ldr	r0, [pc, #12]	@ (800ddd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 800ddc2:	bd08      	pop	{r3, pc}
 800ddc4:	4a04      	ldr	r2, [pc, #16]	@ (800ddd8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x28>)
 800ddc6:	4802      	ldr	r0, [pc, #8]	@ (800ddd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 800ddc8:	6812      	ldr	r2, [r2, #0]
 800ddca:	601a      	str	r2, [r3, #0]
 800ddcc:	bd08      	pop	{r3, pc}
 800ddce:	bf00      	nop
 800ddd0:	240007e0 	.word	0x240007e0
 800ddd4:	24000768 	.word	0x24000768
 800ddd8:	24000e14 	.word	0x24000e14

0800dddc <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_init_function>:
 800dddc:	f003 bd76 	b.w	80118cc <autoware_vehicle_msgs__msg__HazardLightsCommand__init>

0800dde0 <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_fini_function>:
 800dde0:	f003 bd86 	b.w	80118f0 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>

0800dde4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 800dde4:	b508      	push	{r3, lr}
 800dde6:	f000 fcaf 	bl	800e748 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ddea:	4b06      	ldr	r3, [pc, #24]	@ (800de04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 800ddec:	4906      	ldr	r1, [pc, #24]	@ (800de08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x24>)
 800ddee:	681a      	ldr	r2, [r3, #0]
 800ddf0:	60c8      	str	r0, [r1, #12]
 800ddf2:	b10a      	cbz	r2, 800ddf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>
 800ddf4:	4803      	ldr	r0, [pc, #12]	@ (800de04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 800ddf6:	bd08      	pop	{r3, pc}
 800ddf8:	4a04      	ldr	r2, [pc, #16]	@ (800de0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x28>)
 800ddfa:	4802      	ldr	r0, [pc, #8]	@ (800de04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 800ddfc:	6812      	ldr	r2, [r2, #0]
 800ddfe:	601a      	str	r2, [r3, #0]
 800de00:	bd08      	pop	{r3, pc}
 800de02:	bf00      	nop
 800de04:	24000864 	.word	0x24000864
 800de08:	240007ec 	.word	0x240007ec
 800de0c:	24000e14 	.word	0x24000e14

0800de10 <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_init_function>:
 800de10:	f003 bd72 	b.w	80118f8 <autoware_vehicle_msgs__msg__HazardLightsReport__init>

0800de14 <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_fini_function>:
 800de14:	f003 bd82 	b.w	801191c <autoware_vehicle_msgs__msg__HazardLightsReport__fini>

0800de18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 800de18:	b508      	push	{r3, lr}
 800de1a:	f000 fc95 	bl	800e748 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800de1e:	4b06      	ldr	r3, [pc, #24]	@ (800de38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 800de20:	4906      	ldr	r1, [pc, #24]	@ (800de3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x24>)
 800de22:	681a      	ldr	r2, [r3, #0]
 800de24:	60c8      	str	r0, [r1, #12]
 800de26:	b10a      	cbz	r2, 800de2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>
 800de28:	4803      	ldr	r0, [pc, #12]	@ (800de38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 800de2a:	bd08      	pop	{r3, pc}
 800de2c:	4a04      	ldr	r2, [pc, #16]	@ (800de40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x28>)
 800de2e:	4802      	ldr	r0, [pc, #8]	@ (800de38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 800de30:	6812      	ldr	r2, [r2, #0]
 800de32:	601a      	str	r2, [r3, #0]
 800de34:	bd08      	pop	{r3, pc}
 800de36:	bf00      	nop
 800de38:	240008e8 	.word	0x240008e8
 800de3c:	24000870 	.word	0x24000870
 800de40:	24000e14 	.word	0x24000e14

0800de44 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_init_function>:
 800de44:	f003 bd6e 	b.w	8011924 <autoware_vehicle_msgs__msg__SteeringReport__init>

0800de48 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_fini_function>:
 800de48:	f003 bd7e 	b.w	8011948 <autoware_vehicle_msgs__msg__SteeringReport__fini>

0800de4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 800de4c:	b508      	push	{r3, lr}
 800de4e:	f000 fc7b 	bl	800e748 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800de52:	4b06      	ldr	r3, [pc, #24]	@ (800de6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 800de54:	4906      	ldr	r1, [pc, #24]	@ (800de70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x24>)
 800de56:	681a      	ldr	r2, [r3, #0]
 800de58:	60c8      	str	r0, [r1, #12]
 800de5a:	b10a      	cbz	r2, 800de60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>
 800de5c:	4803      	ldr	r0, [pc, #12]	@ (800de6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 800de5e:	bd08      	pop	{r3, pc}
 800de60:	4a04      	ldr	r2, [pc, #16]	@ (800de74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x28>)
 800de62:	4802      	ldr	r0, [pc, #8]	@ (800de6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 800de64:	6812      	ldr	r2, [r2, #0]
 800de66:	601a      	str	r2, [r3, #0]
 800de68:	bd08      	pop	{r3, pc}
 800de6a:	bf00      	nop
 800de6c:	2400096c 	.word	0x2400096c
 800de70:	240008f4 	.word	0x240008f4
 800de74:	24000e14 	.word	0x24000e14

0800de78 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_init_function>:
 800de78:	f003 bd6a 	b.w	8011950 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>

0800de7c <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_fini_function>:
 800de7c:	f003 bd7a 	b.w	8011974 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>

0800de80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 800de80:	b508      	push	{r3, lr}
 800de82:	f000 fc61 	bl	800e748 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800de86:	4b06      	ldr	r3, [pc, #24]	@ (800dea0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 800de88:	4906      	ldr	r1, [pc, #24]	@ (800dea4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x24>)
 800de8a:	681a      	ldr	r2, [r3, #0]
 800de8c:	60c8      	str	r0, [r1, #12]
 800de8e:	b10a      	cbz	r2, 800de94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>
 800de90:	4803      	ldr	r0, [pc, #12]	@ (800dea0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 800de92:	bd08      	pop	{r3, pc}
 800de94:	4a04      	ldr	r2, [pc, #16]	@ (800dea8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x28>)
 800de96:	4802      	ldr	r0, [pc, #8]	@ (800dea0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 800de98:	6812      	ldr	r2, [r2, #0]
 800de9a:	601a      	str	r2, [r3, #0]
 800de9c:	bd08      	pop	{r3, pc}
 800de9e:	bf00      	nop
 800dea0:	240009f0 	.word	0x240009f0
 800dea4:	24000978 	.word	0x24000978
 800dea8:	24000e14 	.word	0x24000e14

0800deac <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_init_function>:
 800deac:	f003 bd66 	b.w	801197c <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>

0800deb0 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_fini_function>:
 800deb0:	f003 bd76 	b.w	80119a0 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>

0800deb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 800deb4:	b508      	push	{r3, lr}
 800deb6:	f000 fc47 	bl	800e748 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800deba:	4b06      	ldr	r3, [pc, #24]	@ (800ded4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 800debc:	4906      	ldr	r1, [pc, #24]	@ (800ded8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x24>)
 800debe:	681a      	ldr	r2, [r3, #0]
 800dec0:	60c8      	str	r0, [r1, #12]
 800dec2:	b10a      	cbz	r2, 800dec8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>
 800dec4:	4803      	ldr	r0, [pc, #12]	@ (800ded4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 800dec6:	bd08      	pop	{r3, pc}
 800dec8:	4a04      	ldr	r2, [pc, #16]	@ (800dedc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x28>)
 800deca:	4802      	ldr	r0, [pc, #8]	@ (800ded4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 800decc:	6812      	ldr	r2, [r2, #0]
 800dece:	601a      	str	r2, [r3, #0]
 800ded0:	bd08      	pop	{r3, pc}
 800ded2:	bf00      	nop
 800ded4:	24000a74 	.word	0x24000a74
 800ded8:	240009fc 	.word	0x240009fc
 800dedc:	24000e14 	.word	0x24000e14

0800dee0 <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_init_function>:
 800dee0:	f003 bd62 	b.w	80119a8 <autoware_vehicle_msgs__msg__VelocityReport__init>

0800dee4 <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_fini_function>:
 800dee4:	f003 bd72 	b.w	80119cc <autoware_vehicle_msgs__msg__VelocityReport__fini>

0800dee8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 800dee8:	b508      	push	{r3, lr}
 800deea:	f003 f8bb 	bl	8011064 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800deee:	4b06      	ldr	r3, [pc, #24]	@ (800df08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 800def0:	4906      	ldr	r1, [pc, #24]	@ (800df0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x24>)
 800def2:	681a      	ldr	r2, [r3, #0]
 800def4:	60c8      	str	r0, [r1, #12]
 800def6:	b10a      	cbz	r2, 800defc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>
 800def8:	4803      	ldr	r0, [pc, #12]	@ (800df08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 800defa:	bd08      	pop	{r3, pc}
 800defc:	4a04      	ldr	r2, [pc, #16]	@ (800df10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x28>)
 800defe:	4802      	ldr	r0, [pc, #8]	@ (800df08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 800df00:	6812      	ldr	r2, [r2, #0]
 800df02:	601a      	str	r2, [r3, #0]
 800df04:	bd08      	pop	{r3, pc}
 800df06:	bf00      	nop
 800df08:	24000b70 	.word	0x24000b70
 800df0c:	24000a80 	.word	0x24000a80
 800df10:	24000e14 	.word	0x24000e14

0800df14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 800df14:	4800      	ldr	r0, [pc, #0]	@ (800df18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x4>)
 800df16:	4770      	bx	lr
 800df18:	24000b98 	.word	0x24000b98

0800df1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 800df1c:	4800      	ldr	r0, [pc, #0]	@ (800df20 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x4>)
 800df1e:	4770      	bx	lr
 800df20:	24000ba4 	.word	0x24000ba4

0800df24 <_ControlModeCommand_Response__max_serialized_size>:
 800df24:	2101      	movs	r1, #1
 800df26:	2000      	movs	r0, #0
 800df28:	b508      	push	{r3, lr}
 800df2a:	f001 ff1f 	bl	800fd6c <ucdr_alignment>
 800df2e:	3001      	adds	r0, #1
 800df30:	bd08      	pop	{r3, pc}
 800df32:	bf00      	nop

0800df34 <_ControlModeCommand_Response__cdr_deserialize>:
 800df34:	b109      	cbz	r1, 800df3a <_ControlModeCommand_Response__cdr_deserialize+0x6>
 800df36:	f000 bc93 	b.w	800e860 <ucdr_deserialize_bool>
 800df3a:	4608      	mov	r0, r1
 800df3c:	4770      	bx	lr
 800df3e:	bf00      	nop

0800df40 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 800df40:	b538      	push	{r3, r4, r5, lr}
 800df42:	b158      	cbz	r0, 800df5c <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>
 800df44:	460d      	mov	r5, r1
 800df46:	f000 fc0d 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 800df4a:	2101      	movs	r1, #1
 800df4c:	182c      	adds	r4, r5, r0
 800df4e:	f1c5 0501 	rsb	r5, r5, #1
 800df52:	4620      	mov	r0, r4
 800df54:	f001 ff0a 	bl	800fd6c <ucdr_alignment>
 800df58:	4428      	add	r0, r5
 800df5a:	4420      	add	r0, r4
 800df5c:	bd38      	pop	{r3, r4, r5, pc}
 800df5e:	bf00      	nop

0800df60 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 800df60:	b138      	cbz	r0, 800df72 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x12>
 800df62:	b508      	push	{r3, lr}
 800df64:	460b      	mov	r3, r1
 800df66:	2101      	movs	r1, #1
 800df68:	4618      	mov	r0, r3
 800df6a:	f001 feff 	bl	800fd6c <ucdr_alignment>
 800df6e:	3001      	adds	r0, #1
 800df70:	bd08      	pop	{r3, pc}
 800df72:	4770      	bx	lr

0800df74 <_ControlModeCommand_Request__cdr_deserialize>:
 800df74:	b538      	push	{r3, r4, r5, lr}
 800df76:	460c      	mov	r4, r1
 800df78:	b179      	cbz	r1, 800df9a <_ControlModeCommand_Request__cdr_deserialize+0x26>
 800df7a:	4605      	mov	r5, r0
 800df7c:	f000 fc56 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800df80:	4603      	mov	r3, r0
 800df82:	4621      	mov	r1, r4
 800df84:	4628      	mov	r0, r5
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	68db      	ldr	r3, [r3, #12]
 800df8a:	4798      	blx	r3
 800df8c:	f104 0108 	add.w	r1, r4, #8
 800df90:	4628      	mov	r0, r5
 800df92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df96:	f000 bc91 	b.w	800e8bc <ucdr_deserialize_uint8_t>
 800df9a:	4608      	mov	r0, r1
 800df9c:	bd38      	pop	{r3, r4, r5, pc}
 800df9e:	bf00      	nop

0800dfa0 <_ControlModeCommand_Request__cdr_serialize>:
 800dfa0:	b180      	cbz	r0, 800dfc4 <_ControlModeCommand_Request__cdr_serialize+0x24>
 800dfa2:	b538      	push	{r3, r4, r5, lr}
 800dfa4:	4604      	mov	r4, r0
 800dfa6:	460d      	mov	r5, r1
 800dfa8:	f000 fc40 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800dfac:	4603      	mov	r3, r0
 800dfae:	4629      	mov	r1, r5
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	689b      	ldr	r3, [r3, #8]
 800dfb6:	4798      	blx	r3
 800dfb8:	7a21      	ldrb	r1, [r4, #8]
 800dfba:	4628      	mov	r0, r5
 800dfbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dfc0:	f000 bc66 	b.w	800e890 <ucdr_serialize_uint8_t>
 800dfc4:	4770      	bx	lr
 800dfc6:	bf00      	nop

0800dfc8 <_ControlModeCommand_Response__cdr_serialize>:
 800dfc8:	460a      	mov	r2, r1
 800dfca:	b118      	cbz	r0, 800dfd4 <_ControlModeCommand_Response__cdr_serialize+0xc>
 800dfcc:	7801      	ldrb	r1, [r0, #0]
 800dfce:	4610      	mov	r0, r2
 800dfd0:	f000 bc30 	b.w	800e834 <ucdr_serialize_bool>
 800dfd4:	4770      	bx	lr
 800dfd6:	bf00      	nop

0800dfd8 <_ControlModeCommand_Response__get_serialized_size>:
 800dfd8:	b130      	cbz	r0, 800dfe8 <_ControlModeCommand_Response__get_serialized_size+0x10>
 800dfda:	2101      	movs	r1, #1
 800dfdc:	2000      	movs	r0, #0
 800dfde:	b508      	push	{r3, lr}
 800dfe0:	f001 fec4 	bl	800fd6c <ucdr_alignment>
 800dfe4:	3001      	adds	r0, #1
 800dfe6:	bd08      	pop	{r3, pc}
 800dfe8:	4770      	bx	lr
 800dfea:	bf00      	nop

0800dfec <_ControlModeCommand_Request__get_serialized_size>:
 800dfec:	b150      	cbz	r0, 800e004 <_ControlModeCommand_Request__get_serialized_size+0x18>
 800dfee:	2100      	movs	r1, #0
 800dff0:	b510      	push	{r4, lr}
 800dff2:	f000 fbb7 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 800dff6:	4604      	mov	r4, r0
 800dff8:	2101      	movs	r1, #1
 800dffa:	f001 feb7 	bl	800fd6c <ucdr_alignment>
 800dffe:	4420      	add	r0, r4
 800e000:	3001      	adds	r0, #1
 800e002:	bd10      	pop	{r4, pc}
 800e004:	4770      	bx	lr
 800e006:	bf00      	nop

0800e008 <_ControlModeCommand_Request__max_serialized_size>:
 800e008:	b510      	push	{r4, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	2401      	movs	r4, #1
 800e00e:	2100      	movs	r1, #0
 800e010:	f10d 0007 	add.w	r0, sp, #7
 800e014:	f88d 4007 	strb.w	r4, [sp, #7]
 800e018:	f000 fbf4 	bl	800e804 <max_serialized_size_builtin_interfaces__msg__Time>
 800e01c:	4621      	mov	r1, r4
 800e01e:	4604      	mov	r4, r0
 800e020:	f001 fea4 	bl	800fd6c <ucdr_alignment>
 800e024:	4420      	add	r0, r4
 800e026:	3001      	adds	r0, #1
 800e028:	b002      	add	sp, #8
 800e02a:	bd10      	pop	{r4, pc}

0800e02c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 800e02c:	4800      	ldr	r0, [pc, #0]	@ (800e030 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x4>)
 800e02e:	4770      	bx	lr
 800e030:	24000b8c 	.word	0x24000b8c

0800e034 <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport>:
 800e034:	b538      	push	{r3, r4, r5, lr}
 800e036:	b158      	cbz	r0, 800e050 <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport+0x1c>
 800e038:	460d      	mov	r5, r1
 800e03a:	f000 fb93 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 800e03e:	2101      	movs	r1, #1
 800e040:	182c      	adds	r4, r5, r0
 800e042:	f1c5 0501 	rsb	r5, r5, #1
 800e046:	4620      	mov	r0, r4
 800e048:	f001 fe90 	bl	800fd6c <ucdr_alignment>
 800e04c:	4428      	add	r0, r5
 800e04e:	4420      	add	r0, r4
 800e050:	bd38      	pop	{r3, r4, r5, pc}
 800e052:	bf00      	nop

0800e054 <_ControlModeReport__cdr_deserialize>:
 800e054:	b538      	push	{r3, r4, r5, lr}
 800e056:	460c      	mov	r4, r1
 800e058:	b179      	cbz	r1, 800e07a <_ControlModeReport__cdr_deserialize+0x26>
 800e05a:	4605      	mov	r5, r0
 800e05c:	f000 fbe6 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e060:	4603      	mov	r3, r0
 800e062:	4621      	mov	r1, r4
 800e064:	4628      	mov	r0, r5
 800e066:	685b      	ldr	r3, [r3, #4]
 800e068:	68db      	ldr	r3, [r3, #12]
 800e06a:	4798      	blx	r3
 800e06c:	f104 0108 	add.w	r1, r4, #8
 800e070:	4628      	mov	r0, r5
 800e072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e076:	f000 bc21 	b.w	800e8bc <ucdr_deserialize_uint8_t>
 800e07a:	4608      	mov	r0, r1
 800e07c:	bd38      	pop	{r3, r4, r5, pc}
 800e07e:	bf00      	nop

0800e080 <_ControlModeReport__cdr_serialize>:
 800e080:	b180      	cbz	r0, 800e0a4 <_ControlModeReport__cdr_serialize+0x24>
 800e082:	b538      	push	{r3, r4, r5, lr}
 800e084:	4604      	mov	r4, r0
 800e086:	460d      	mov	r5, r1
 800e088:	f000 fbd0 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e08c:	4603      	mov	r3, r0
 800e08e:	4629      	mov	r1, r5
 800e090:	4620      	mov	r0, r4
 800e092:	685b      	ldr	r3, [r3, #4]
 800e094:	689b      	ldr	r3, [r3, #8]
 800e096:	4798      	blx	r3
 800e098:	7a21      	ldrb	r1, [r4, #8]
 800e09a:	4628      	mov	r0, r5
 800e09c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0a0:	f000 bbf6 	b.w	800e890 <ucdr_serialize_uint8_t>
 800e0a4:	4770      	bx	lr
 800e0a6:	bf00      	nop

0800e0a8 <_ControlModeReport__get_serialized_size>:
 800e0a8:	b150      	cbz	r0, 800e0c0 <_ControlModeReport__get_serialized_size+0x18>
 800e0aa:	2100      	movs	r1, #0
 800e0ac:	b510      	push	{r4, lr}
 800e0ae:	f000 fb59 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 800e0b2:	4604      	mov	r4, r0
 800e0b4:	2101      	movs	r1, #1
 800e0b6:	f001 fe59 	bl	800fd6c <ucdr_alignment>
 800e0ba:	4420      	add	r0, r4
 800e0bc:	3001      	adds	r0, #1
 800e0be:	bd10      	pop	{r4, pc}
 800e0c0:	4770      	bx	lr
 800e0c2:	bf00      	nop

0800e0c4 <_ControlModeReport__max_serialized_size>:
 800e0c4:	b510      	push	{r4, lr}
 800e0c6:	b082      	sub	sp, #8
 800e0c8:	2401      	movs	r4, #1
 800e0ca:	2100      	movs	r1, #0
 800e0cc:	f10d 0007 	add.w	r0, sp, #7
 800e0d0:	f88d 4007 	strb.w	r4, [sp, #7]
 800e0d4:	f000 fb96 	bl	800e804 <max_serialized_size_builtin_interfaces__msg__Time>
 800e0d8:	4621      	mov	r1, r4
 800e0da:	4604      	mov	r4, r0
 800e0dc:	f001 fe46 	bl	800fd6c <ucdr_alignment>
 800e0e0:	4420      	add	r0, r4
 800e0e2:	3001      	adds	r0, #1
 800e0e4:	b002      	add	sp, #8
 800e0e6:	bd10      	pop	{r4, pc}

0800e0e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 800e0e8:	4800      	ldr	r0, [pc, #0]	@ (800e0ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x4>)
 800e0ea:	4770      	bx	lr
 800e0ec:	24000be8 	.word	0x24000be8

0800e0f0 <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand>:
 800e0f0:	b538      	push	{r3, r4, r5, lr}
 800e0f2:	b158      	cbz	r0, 800e10c <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand+0x1c>
 800e0f4:	460d      	mov	r5, r1
 800e0f6:	f000 fb35 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 800e0fa:	2101      	movs	r1, #1
 800e0fc:	182c      	adds	r4, r5, r0
 800e0fe:	f1c5 0501 	rsb	r5, r5, #1
 800e102:	4620      	mov	r0, r4
 800e104:	f001 fe32 	bl	800fd6c <ucdr_alignment>
 800e108:	4428      	add	r0, r5
 800e10a:	4420      	add	r0, r4
 800e10c:	bd38      	pop	{r3, r4, r5, pc}
 800e10e:	bf00      	nop

0800e110 <_GearCommand__cdr_deserialize>:
 800e110:	b538      	push	{r3, r4, r5, lr}
 800e112:	460c      	mov	r4, r1
 800e114:	b179      	cbz	r1, 800e136 <_GearCommand__cdr_deserialize+0x26>
 800e116:	4605      	mov	r5, r0
 800e118:	f000 fb88 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e11c:	4603      	mov	r3, r0
 800e11e:	4621      	mov	r1, r4
 800e120:	4628      	mov	r0, r5
 800e122:	685b      	ldr	r3, [r3, #4]
 800e124:	68db      	ldr	r3, [r3, #12]
 800e126:	4798      	blx	r3
 800e128:	f104 0108 	add.w	r1, r4, #8
 800e12c:	4628      	mov	r0, r5
 800e12e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e132:	f000 bbc3 	b.w	800e8bc <ucdr_deserialize_uint8_t>
 800e136:	4608      	mov	r0, r1
 800e138:	bd38      	pop	{r3, r4, r5, pc}
 800e13a:	bf00      	nop

0800e13c <_GearCommand__cdr_serialize>:
 800e13c:	b180      	cbz	r0, 800e160 <_GearCommand__cdr_serialize+0x24>
 800e13e:	b538      	push	{r3, r4, r5, lr}
 800e140:	4604      	mov	r4, r0
 800e142:	460d      	mov	r5, r1
 800e144:	f000 fb72 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e148:	4603      	mov	r3, r0
 800e14a:	4629      	mov	r1, r5
 800e14c:	4620      	mov	r0, r4
 800e14e:	685b      	ldr	r3, [r3, #4]
 800e150:	689b      	ldr	r3, [r3, #8]
 800e152:	4798      	blx	r3
 800e154:	7a21      	ldrb	r1, [r4, #8]
 800e156:	4628      	mov	r0, r5
 800e158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e15c:	f000 bb98 	b.w	800e890 <ucdr_serialize_uint8_t>
 800e160:	4770      	bx	lr
 800e162:	bf00      	nop

0800e164 <_GearCommand__get_serialized_size>:
 800e164:	b150      	cbz	r0, 800e17c <_GearCommand__get_serialized_size+0x18>
 800e166:	2100      	movs	r1, #0
 800e168:	b510      	push	{r4, lr}
 800e16a:	f000 fafb 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 800e16e:	4604      	mov	r4, r0
 800e170:	2101      	movs	r1, #1
 800e172:	f001 fdfb 	bl	800fd6c <ucdr_alignment>
 800e176:	4420      	add	r0, r4
 800e178:	3001      	adds	r0, #1
 800e17a:	bd10      	pop	{r4, pc}
 800e17c:	4770      	bx	lr
 800e17e:	bf00      	nop

0800e180 <_GearCommand__max_serialized_size>:
 800e180:	b510      	push	{r4, lr}
 800e182:	b082      	sub	sp, #8
 800e184:	2401      	movs	r4, #1
 800e186:	2100      	movs	r1, #0
 800e188:	f10d 0007 	add.w	r0, sp, #7
 800e18c:	f88d 4007 	strb.w	r4, [sp, #7]
 800e190:	f000 fb38 	bl	800e804 <max_serialized_size_builtin_interfaces__msg__Time>
 800e194:	4621      	mov	r1, r4
 800e196:	4604      	mov	r4, r0
 800e198:	f001 fde8 	bl	800fd6c <ucdr_alignment>
 800e19c:	4420      	add	r0, r4
 800e19e:	3001      	adds	r0, #1
 800e1a0:	b002      	add	sp, #8
 800e1a2:	bd10      	pop	{r4, pc}

0800e1a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 800e1a4:	4800      	ldr	r0, [pc, #0]	@ (800e1a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x4>)
 800e1a6:	4770      	bx	lr
 800e1a8:	24000c10 	.word	0x24000c10

0800e1ac <get_serialized_size_autoware_vehicle_msgs__msg__GearReport>:
 800e1ac:	b538      	push	{r3, r4, r5, lr}
 800e1ae:	b158      	cbz	r0, 800e1c8 <get_serialized_size_autoware_vehicle_msgs__msg__GearReport+0x1c>
 800e1b0:	460d      	mov	r5, r1
 800e1b2:	f000 fad7 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 800e1b6:	2101      	movs	r1, #1
 800e1b8:	182c      	adds	r4, r5, r0
 800e1ba:	f1c5 0501 	rsb	r5, r5, #1
 800e1be:	4620      	mov	r0, r4
 800e1c0:	f001 fdd4 	bl	800fd6c <ucdr_alignment>
 800e1c4:	4428      	add	r0, r5
 800e1c6:	4420      	add	r0, r4
 800e1c8:	bd38      	pop	{r3, r4, r5, pc}
 800e1ca:	bf00      	nop

0800e1cc <_GearReport__cdr_deserialize>:
 800e1cc:	b538      	push	{r3, r4, r5, lr}
 800e1ce:	460c      	mov	r4, r1
 800e1d0:	b179      	cbz	r1, 800e1f2 <_GearReport__cdr_deserialize+0x26>
 800e1d2:	4605      	mov	r5, r0
 800e1d4:	f000 fb2a 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	4621      	mov	r1, r4
 800e1dc:	4628      	mov	r0, r5
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	68db      	ldr	r3, [r3, #12]
 800e1e2:	4798      	blx	r3
 800e1e4:	f104 0108 	add.w	r1, r4, #8
 800e1e8:	4628      	mov	r0, r5
 800e1ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1ee:	f000 bb65 	b.w	800e8bc <ucdr_deserialize_uint8_t>
 800e1f2:	4608      	mov	r0, r1
 800e1f4:	bd38      	pop	{r3, r4, r5, pc}
 800e1f6:	bf00      	nop

0800e1f8 <_GearReport__cdr_serialize>:
 800e1f8:	b180      	cbz	r0, 800e21c <_GearReport__cdr_serialize+0x24>
 800e1fa:	b538      	push	{r3, r4, r5, lr}
 800e1fc:	4604      	mov	r4, r0
 800e1fe:	460d      	mov	r5, r1
 800e200:	f000 fb14 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e204:	4603      	mov	r3, r0
 800e206:	4629      	mov	r1, r5
 800e208:	4620      	mov	r0, r4
 800e20a:	685b      	ldr	r3, [r3, #4]
 800e20c:	689b      	ldr	r3, [r3, #8]
 800e20e:	4798      	blx	r3
 800e210:	7a21      	ldrb	r1, [r4, #8]
 800e212:	4628      	mov	r0, r5
 800e214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e218:	f000 bb3a 	b.w	800e890 <ucdr_serialize_uint8_t>
 800e21c:	4770      	bx	lr
 800e21e:	bf00      	nop

0800e220 <_GearReport__get_serialized_size>:
 800e220:	b150      	cbz	r0, 800e238 <_GearReport__get_serialized_size+0x18>
 800e222:	2100      	movs	r1, #0
 800e224:	b510      	push	{r4, lr}
 800e226:	f000 fa9d 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 800e22a:	4604      	mov	r4, r0
 800e22c:	2101      	movs	r1, #1
 800e22e:	f001 fd9d 	bl	800fd6c <ucdr_alignment>
 800e232:	4420      	add	r0, r4
 800e234:	3001      	adds	r0, #1
 800e236:	bd10      	pop	{r4, pc}
 800e238:	4770      	bx	lr
 800e23a:	bf00      	nop

0800e23c <_GearReport__max_serialized_size>:
 800e23c:	b510      	push	{r4, lr}
 800e23e:	b082      	sub	sp, #8
 800e240:	2401      	movs	r4, #1
 800e242:	2100      	movs	r1, #0
 800e244:	f10d 0007 	add.w	r0, sp, #7
 800e248:	f88d 4007 	strb.w	r4, [sp, #7]
 800e24c:	f000 fada 	bl	800e804 <max_serialized_size_builtin_interfaces__msg__Time>
 800e250:	4621      	mov	r1, r4
 800e252:	4604      	mov	r4, r0
 800e254:	f001 fd8a 	bl	800fd6c <ucdr_alignment>
 800e258:	4420      	add	r0, r4
 800e25a:	3001      	adds	r0, #1
 800e25c:	b002      	add	sp, #8
 800e25e:	bd10      	pop	{r4, pc}

0800e260 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 800e260:	4800      	ldr	r0, [pc, #0]	@ (800e264 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x4>)
 800e262:	4770      	bx	lr
 800e264:	24000c38 	.word	0x24000c38

0800e268 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand>:
 800e268:	b538      	push	{r3, r4, r5, lr}
 800e26a:	b158      	cbz	r0, 800e284 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand+0x1c>
 800e26c:	460d      	mov	r5, r1
 800e26e:	f000 fa79 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 800e272:	2101      	movs	r1, #1
 800e274:	182c      	adds	r4, r5, r0
 800e276:	f1c5 0501 	rsb	r5, r5, #1
 800e27a:	4620      	mov	r0, r4
 800e27c:	f001 fd76 	bl	800fd6c <ucdr_alignment>
 800e280:	4428      	add	r0, r5
 800e282:	4420      	add	r0, r4
 800e284:	bd38      	pop	{r3, r4, r5, pc}
 800e286:	bf00      	nop

0800e288 <_HazardLightsCommand__cdr_deserialize>:
 800e288:	b538      	push	{r3, r4, r5, lr}
 800e28a:	460c      	mov	r4, r1
 800e28c:	b179      	cbz	r1, 800e2ae <_HazardLightsCommand__cdr_deserialize+0x26>
 800e28e:	4605      	mov	r5, r0
 800e290:	f000 facc 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e294:	4603      	mov	r3, r0
 800e296:	4621      	mov	r1, r4
 800e298:	4628      	mov	r0, r5
 800e29a:	685b      	ldr	r3, [r3, #4]
 800e29c:	68db      	ldr	r3, [r3, #12]
 800e29e:	4798      	blx	r3
 800e2a0:	f104 0108 	add.w	r1, r4, #8
 800e2a4:	4628      	mov	r0, r5
 800e2a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2aa:	f000 bb07 	b.w	800e8bc <ucdr_deserialize_uint8_t>
 800e2ae:	4608      	mov	r0, r1
 800e2b0:	bd38      	pop	{r3, r4, r5, pc}
 800e2b2:	bf00      	nop

0800e2b4 <_HazardLightsCommand__cdr_serialize>:
 800e2b4:	b180      	cbz	r0, 800e2d8 <_HazardLightsCommand__cdr_serialize+0x24>
 800e2b6:	b538      	push	{r3, r4, r5, lr}
 800e2b8:	4604      	mov	r4, r0
 800e2ba:	460d      	mov	r5, r1
 800e2bc:	f000 fab6 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	4629      	mov	r1, r5
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	685b      	ldr	r3, [r3, #4]
 800e2c8:	689b      	ldr	r3, [r3, #8]
 800e2ca:	4798      	blx	r3
 800e2cc:	7a21      	ldrb	r1, [r4, #8]
 800e2ce:	4628      	mov	r0, r5
 800e2d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2d4:	f000 badc 	b.w	800e890 <ucdr_serialize_uint8_t>
 800e2d8:	4770      	bx	lr
 800e2da:	bf00      	nop

0800e2dc <_HazardLightsCommand__get_serialized_size>:
 800e2dc:	b150      	cbz	r0, 800e2f4 <_HazardLightsCommand__get_serialized_size+0x18>
 800e2de:	2100      	movs	r1, #0
 800e2e0:	b510      	push	{r4, lr}
 800e2e2:	f000 fa3f 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	2101      	movs	r1, #1
 800e2ea:	f001 fd3f 	bl	800fd6c <ucdr_alignment>
 800e2ee:	4420      	add	r0, r4
 800e2f0:	3001      	adds	r0, #1
 800e2f2:	bd10      	pop	{r4, pc}
 800e2f4:	4770      	bx	lr
 800e2f6:	bf00      	nop

0800e2f8 <_HazardLightsCommand__max_serialized_size>:
 800e2f8:	b510      	push	{r4, lr}
 800e2fa:	b082      	sub	sp, #8
 800e2fc:	2401      	movs	r4, #1
 800e2fe:	2100      	movs	r1, #0
 800e300:	f10d 0007 	add.w	r0, sp, #7
 800e304:	f88d 4007 	strb.w	r4, [sp, #7]
 800e308:	f000 fa7c 	bl	800e804 <max_serialized_size_builtin_interfaces__msg__Time>
 800e30c:	4621      	mov	r1, r4
 800e30e:	4604      	mov	r4, r0
 800e310:	f001 fd2c 	bl	800fd6c <ucdr_alignment>
 800e314:	4420      	add	r0, r4
 800e316:	3001      	adds	r0, #1
 800e318:	b002      	add	sp, #8
 800e31a:	bd10      	pop	{r4, pc}

0800e31c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 800e31c:	4800      	ldr	r0, [pc, #0]	@ (800e320 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x4>)
 800e31e:	4770      	bx	lr
 800e320:	24000c60 	.word	0x24000c60

0800e324 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport>:
 800e324:	b538      	push	{r3, r4, r5, lr}
 800e326:	b158      	cbz	r0, 800e340 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport+0x1c>
 800e328:	460d      	mov	r5, r1
 800e32a:	f000 fa1b 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 800e32e:	2101      	movs	r1, #1
 800e330:	182c      	adds	r4, r5, r0
 800e332:	f1c5 0501 	rsb	r5, r5, #1
 800e336:	4620      	mov	r0, r4
 800e338:	f001 fd18 	bl	800fd6c <ucdr_alignment>
 800e33c:	4428      	add	r0, r5
 800e33e:	4420      	add	r0, r4
 800e340:	bd38      	pop	{r3, r4, r5, pc}
 800e342:	bf00      	nop

0800e344 <_HazardLightsReport__cdr_deserialize>:
 800e344:	b538      	push	{r3, r4, r5, lr}
 800e346:	460c      	mov	r4, r1
 800e348:	b179      	cbz	r1, 800e36a <_HazardLightsReport__cdr_deserialize+0x26>
 800e34a:	4605      	mov	r5, r0
 800e34c:	f000 fa6e 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e350:	4603      	mov	r3, r0
 800e352:	4621      	mov	r1, r4
 800e354:	4628      	mov	r0, r5
 800e356:	685b      	ldr	r3, [r3, #4]
 800e358:	68db      	ldr	r3, [r3, #12]
 800e35a:	4798      	blx	r3
 800e35c:	f104 0108 	add.w	r1, r4, #8
 800e360:	4628      	mov	r0, r5
 800e362:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e366:	f000 baa9 	b.w	800e8bc <ucdr_deserialize_uint8_t>
 800e36a:	4608      	mov	r0, r1
 800e36c:	bd38      	pop	{r3, r4, r5, pc}
 800e36e:	bf00      	nop

0800e370 <_HazardLightsReport__cdr_serialize>:
 800e370:	b180      	cbz	r0, 800e394 <_HazardLightsReport__cdr_serialize+0x24>
 800e372:	b538      	push	{r3, r4, r5, lr}
 800e374:	4604      	mov	r4, r0
 800e376:	460d      	mov	r5, r1
 800e378:	f000 fa58 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e37c:	4603      	mov	r3, r0
 800e37e:	4629      	mov	r1, r5
 800e380:	4620      	mov	r0, r4
 800e382:	685b      	ldr	r3, [r3, #4]
 800e384:	689b      	ldr	r3, [r3, #8]
 800e386:	4798      	blx	r3
 800e388:	7a21      	ldrb	r1, [r4, #8]
 800e38a:	4628      	mov	r0, r5
 800e38c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e390:	f000 ba7e 	b.w	800e890 <ucdr_serialize_uint8_t>
 800e394:	4770      	bx	lr
 800e396:	bf00      	nop

0800e398 <_HazardLightsReport__get_serialized_size>:
 800e398:	b150      	cbz	r0, 800e3b0 <_HazardLightsReport__get_serialized_size+0x18>
 800e39a:	2100      	movs	r1, #0
 800e39c:	b510      	push	{r4, lr}
 800e39e:	f000 f9e1 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 800e3a2:	4604      	mov	r4, r0
 800e3a4:	2101      	movs	r1, #1
 800e3a6:	f001 fce1 	bl	800fd6c <ucdr_alignment>
 800e3aa:	4420      	add	r0, r4
 800e3ac:	3001      	adds	r0, #1
 800e3ae:	bd10      	pop	{r4, pc}
 800e3b0:	4770      	bx	lr
 800e3b2:	bf00      	nop

0800e3b4 <_HazardLightsReport__max_serialized_size>:
 800e3b4:	b510      	push	{r4, lr}
 800e3b6:	b082      	sub	sp, #8
 800e3b8:	2401      	movs	r4, #1
 800e3ba:	2100      	movs	r1, #0
 800e3bc:	f10d 0007 	add.w	r0, sp, #7
 800e3c0:	f88d 4007 	strb.w	r4, [sp, #7]
 800e3c4:	f000 fa1e 	bl	800e804 <max_serialized_size_builtin_interfaces__msg__Time>
 800e3c8:	4621      	mov	r1, r4
 800e3ca:	4604      	mov	r4, r0
 800e3cc:	f001 fcce 	bl	800fd6c <ucdr_alignment>
 800e3d0:	4420      	add	r0, r4
 800e3d2:	3001      	adds	r0, #1
 800e3d4:	b002      	add	sp, #8
 800e3d6:	bd10      	pop	{r4, pc}

0800e3d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 800e3d8:	4800      	ldr	r0, [pc, #0]	@ (800e3dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x4>)
 800e3da:	4770      	bx	lr
 800e3dc:	24000c88 	.word	0x24000c88

0800e3e0 <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport>:
 800e3e0:	b538      	push	{r3, r4, r5, lr}
 800e3e2:	b158      	cbz	r0, 800e3fc <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport+0x1c>
 800e3e4:	460d      	mov	r5, r1
 800e3e6:	f000 f9bd 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 800e3ea:	2104      	movs	r1, #4
 800e3ec:	182c      	adds	r4, r5, r0
 800e3ee:	f1c5 0504 	rsb	r5, r5, #4
 800e3f2:	4620      	mov	r0, r4
 800e3f4:	f001 fcba 	bl	800fd6c <ucdr_alignment>
 800e3f8:	4428      	add	r0, r5
 800e3fa:	4420      	add	r0, r4
 800e3fc:	bd38      	pop	{r3, r4, r5, pc}
 800e3fe:	bf00      	nop

0800e400 <_SteeringReport__cdr_deserialize>:
 800e400:	b538      	push	{r3, r4, r5, lr}
 800e402:	460c      	mov	r4, r1
 800e404:	b179      	cbz	r1, 800e426 <_SteeringReport__cdr_deserialize+0x26>
 800e406:	4605      	mov	r5, r0
 800e408:	f000 fa10 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e40c:	4603      	mov	r3, r0
 800e40e:	4621      	mov	r1, r4
 800e410:	4628      	mov	r0, r5
 800e412:	685b      	ldr	r3, [r3, #4]
 800e414:	68db      	ldr	r3, [r3, #12]
 800e416:	4798      	blx	r3
 800e418:	f104 0108 	add.w	r1, r4, #8
 800e41c:	4628      	mov	r0, r5
 800e41e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e422:	f001 ba25 	b.w	800f870 <ucdr_deserialize_float>
 800e426:	4608      	mov	r0, r1
 800e428:	bd38      	pop	{r3, r4, r5, pc}
 800e42a:	bf00      	nop

0800e42c <_SteeringReport__cdr_serialize>:
 800e42c:	b188      	cbz	r0, 800e452 <_SteeringReport__cdr_serialize+0x26>
 800e42e:	b538      	push	{r3, r4, r5, lr}
 800e430:	4604      	mov	r4, r0
 800e432:	460d      	mov	r5, r1
 800e434:	f000 f9fa 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e438:	4603      	mov	r3, r0
 800e43a:	4629      	mov	r1, r5
 800e43c:	4620      	mov	r0, r4
 800e43e:	685b      	ldr	r3, [r3, #4]
 800e440:	689b      	ldr	r3, [r3, #8]
 800e442:	4798      	blx	r3
 800e444:	ed94 0a02 	vldr	s0, [r4, #8]
 800e448:	4628      	mov	r0, r5
 800e44a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e44e:	f001 b977 	b.w	800f740 <ucdr_serialize_float>
 800e452:	4770      	bx	lr

0800e454 <_SteeringReport__get_serialized_size>:
 800e454:	b150      	cbz	r0, 800e46c <_SteeringReport__get_serialized_size+0x18>
 800e456:	2100      	movs	r1, #0
 800e458:	b510      	push	{r4, lr}
 800e45a:	f000 f983 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 800e45e:	4604      	mov	r4, r0
 800e460:	2104      	movs	r1, #4
 800e462:	f001 fc83 	bl	800fd6c <ucdr_alignment>
 800e466:	4420      	add	r0, r4
 800e468:	3004      	adds	r0, #4
 800e46a:	bd10      	pop	{r4, pc}
 800e46c:	4770      	bx	lr
 800e46e:	bf00      	nop

0800e470 <_SteeringReport__max_serialized_size>:
 800e470:	b510      	push	{r4, lr}
 800e472:	b082      	sub	sp, #8
 800e474:	2301      	movs	r3, #1
 800e476:	2100      	movs	r1, #0
 800e478:	f10d 0007 	add.w	r0, sp, #7
 800e47c:	f88d 3007 	strb.w	r3, [sp, #7]
 800e480:	f000 f9c0 	bl	800e804 <max_serialized_size_builtin_interfaces__msg__Time>
 800e484:	4604      	mov	r4, r0
 800e486:	2104      	movs	r1, #4
 800e488:	f001 fc70 	bl	800fd6c <ucdr_alignment>
 800e48c:	4420      	add	r0, r4
 800e48e:	3004      	adds	r0, #4
 800e490:	b002      	add	sp, #8
 800e492:	bd10      	pop	{r4, pc}

0800e494 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 800e494:	4800      	ldr	r0, [pc, #0]	@ (800e498 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x4>)
 800e496:	4770      	bx	lr
 800e498:	24000cb0 	.word	0x24000cb0

0800e49c <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 800e49c:	b538      	push	{r3, r4, r5, lr}
 800e49e:	b158      	cbz	r0, 800e4b8 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x1c>
 800e4a0:	460d      	mov	r5, r1
 800e4a2:	f000 f95f 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 800e4a6:	2101      	movs	r1, #1
 800e4a8:	182c      	adds	r4, r5, r0
 800e4aa:	f1c5 0501 	rsb	r5, r5, #1
 800e4ae:	4620      	mov	r0, r4
 800e4b0:	f001 fc5c 	bl	800fd6c <ucdr_alignment>
 800e4b4:	4428      	add	r0, r5
 800e4b6:	4420      	add	r0, r4
 800e4b8:	bd38      	pop	{r3, r4, r5, pc}
 800e4ba:	bf00      	nop

0800e4bc <_TurnIndicatorsCommand__cdr_deserialize>:
 800e4bc:	b538      	push	{r3, r4, r5, lr}
 800e4be:	460c      	mov	r4, r1
 800e4c0:	b179      	cbz	r1, 800e4e2 <_TurnIndicatorsCommand__cdr_deserialize+0x26>
 800e4c2:	4605      	mov	r5, r0
 800e4c4:	f000 f9b2 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	4621      	mov	r1, r4
 800e4cc:	4628      	mov	r0, r5
 800e4ce:	685b      	ldr	r3, [r3, #4]
 800e4d0:	68db      	ldr	r3, [r3, #12]
 800e4d2:	4798      	blx	r3
 800e4d4:	f104 0108 	add.w	r1, r4, #8
 800e4d8:	4628      	mov	r0, r5
 800e4da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4de:	f000 b9ed 	b.w	800e8bc <ucdr_deserialize_uint8_t>
 800e4e2:	4608      	mov	r0, r1
 800e4e4:	bd38      	pop	{r3, r4, r5, pc}
 800e4e6:	bf00      	nop

0800e4e8 <_TurnIndicatorsCommand__cdr_serialize>:
 800e4e8:	b180      	cbz	r0, 800e50c <_TurnIndicatorsCommand__cdr_serialize+0x24>
 800e4ea:	b538      	push	{r3, r4, r5, lr}
 800e4ec:	4604      	mov	r4, r0
 800e4ee:	460d      	mov	r5, r1
 800e4f0:	f000 f99c 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	4629      	mov	r1, r5
 800e4f8:	4620      	mov	r0, r4
 800e4fa:	685b      	ldr	r3, [r3, #4]
 800e4fc:	689b      	ldr	r3, [r3, #8]
 800e4fe:	4798      	blx	r3
 800e500:	7a21      	ldrb	r1, [r4, #8]
 800e502:	4628      	mov	r0, r5
 800e504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e508:	f000 b9c2 	b.w	800e890 <ucdr_serialize_uint8_t>
 800e50c:	4770      	bx	lr
 800e50e:	bf00      	nop

0800e510 <_TurnIndicatorsCommand__get_serialized_size>:
 800e510:	b150      	cbz	r0, 800e528 <_TurnIndicatorsCommand__get_serialized_size+0x18>
 800e512:	2100      	movs	r1, #0
 800e514:	b510      	push	{r4, lr}
 800e516:	f000 f925 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 800e51a:	4604      	mov	r4, r0
 800e51c:	2101      	movs	r1, #1
 800e51e:	f001 fc25 	bl	800fd6c <ucdr_alignment>
 800e522:	4420      	add	r0, r4
 800e524:	3001      	adds	r0, #1
 800e526:	bd10      	pop	{r4, pc}
 800e528:	4770      	bx	lr
 800e52a:	bf00      	nop

0800e52c <_TurnIndicatorsCommand__max_serialized_size>:
 800e52c:	b510      	push	{r4, lr}
 800e52e:	b082      	sub	sp, #8
 800e530:	2401      	movs	r4, #1
 800e532:	2100      	movs	r1, #0
 800e534:	f10d 0007 	add.w	r0, sp, #7
 800e538:	f88d 4007 	strb.w	r4, [sp, #7]
 800e53c:	f000 f962 	bl	800e804 <max_serialized_size_builtin_interfaces__msg__Time>
 800e540:	4621      	mov	r1, r4
 800e542:	4604      	mov	r4, r0
 800e544:	f001 fc12 	bl	800fd6c <ucdr_alignment>
 800e548:	4420      	add	r0, r4
 800e54a:	3001      	adds	r0, #1
 800e54c:	b002      	add	sp, #8
 800e54e:	bd10      	pop	{r4, pc}

0800e550 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 800e550:	4800      	ldr	r0, [pc, #0]	@ (800e554 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x4>)
 800e552:	4770      	bx	lr
 800e554:	24000cd8 	.word	0x24000cd8

0800e558 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 800e558:	b538      	push	{r3, r4, r5, lr}
 800e55a:	b158      	cbz	r0, 800e574 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x1c>
 800e55c:	460d      	mov	r5, r1
 800e55e:	f000 f901 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 800e562:	2101      	movs	r1, #1
 800e564:	182c      	adds	r4, r5, r0
 800e566:	f1c5 0501 	rsb	r5, r5, #1
 800e56a:	4620      	mov	r0, r4
 800e56c:	f001 fbfe 	bl	800fd6c <ucdr_alignment>
 800e570:	4428      	add	r0, r5
 800e572:	4420      	add	r0, r4
 800e574:	bd38      	pop	{r3, r4, r5, pc}
 800e576:	bf00      	nop

0800e578 <_TurnIndicatorsReport__cdr_deserialize>:
 800e578:	b538      	push	{r3, r4, r5, lr}
 800e57a:	460c      	mov	r4, r1
 800e57c:	b179      	cbz	r1, 800e59e <_TurnIndicatorsReport__cdr_deserialize+0x26>
 800e57e:	4605      	mov	r5, r0
 800e580:	f000 f954 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e584:	4603      	mov	r3, r0
 800e586:	4621      	mov	r1, r4
 800e588:	4628      	mov	r0, r5
 800e58a:	685b      	ldr	r3, [r3, #4]
 800e58c:	68db      	ldr	r3, [r3, #12]
 800e58e:	4798      	blx	r3
 800e590:	f104 0108 	add.w	r1, r4, #8
 800e594:	4628      	mov	r0, r5
 800e596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e59a:	f000 b98f 	b.w	800e8bc <ucdr_deserialize_uint8_t>
 800e59e:	4608      	mov	r0, r1
 800e5a0:	bd38      	pop	{r3, r4, r5, pc}
 800e5a2:	bf00      	nop

0800e5a4 <_TurnIndicatorsReport__cdr_serialize>:
 800e5a4:	b180      	cbz	r0, 800e5c8 <_TurnIndicatorsReport__cdr_serialize+0x24>
 800e5a6:	b538      	push	{r3, r4, r5, lr}
 800e5a8:	4604      	mov	r4, r0
 800e5aa:	460d      	mov	r5, r1
 800e5ac:	f000 f93e 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	4629      	mov	r1, r5
 800e5b4:	4620      	mov	r0, r4
 800e5b6:	685b      	ldr	r3, [r3, #4]
 800e5b8:	689b      	ldr	r3, [r3, #8]
 800e5ba:	4798      	blx	r3
 800e5bc:	7a21      	ldrb	r1, [r4, #8]
 800e5be:	4628      	mov	r0, r5
 800e5c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5c4:	f000 b964 	b.w	800e890 <ucdr_serialize_uint8_t>
 800e5c8:	4770      	bx	lr
 800e5ca:	bf00      	nop

0800e5cc <_TurnIndicatorsReport__get_serialized_size>:
 800e5cc:	b150      	cbz	r0, 800e5e4 <_TurnIndicatorsReport__get_serialized_size+0x18>
 800e5ce:	2100      	movs	r1, #0
 800e5d0:	b510      	push	{r4, lr}
 800e5d2:	f000 f8c7 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 800e5d6:	4604      	mov	r4, r0
 800e5d8:	2101      	movs	r1, #1
 800e5da:	f001 fbc7 	bl	800fd6c <ucdr_alignment>
 800e5de:	4420      	add	r0, r4
 800e5e0:	3001      	adds	r0, #1
 800e5e2:	bd10      	pop	{r4, pc}
 800e5e4:	4770      	bx	lr
 800e5e6:	bf00      	nop

0800e5e8 <_TurnIndicatorsReport__max_serialized_size>:
 800e5e8:	b510      	push	{r4, lr}
 800e5ea:	b082      	sub	sp, #8
 800e5ec:	2401      	movs	r4, #1
 800e5ee:	2100      	movs	r1, #0
 800e5f0:	f10d 0007 	add.w	r0, sp, #7
 800e5f4:	f88d 4007 	strb.w	r4, [sp, #7]
 800e5f8:	f000 f904 	bl	800e804 <max_serialized_size_builtin_interfaces__msg__Time>
 800e5fc:	4621      	mov	r1, r4
 800e5fe:	4604      	mov	r4, r0
 800e600:	f001 fbb4 	bl	800fd6c <ucdr_alignment>
 800e604:	4420      	add	r0, r4
 800e606:	3001      	adds	r0, #1
 800e608:	b002      	add	sp, #8
 800e60a:	bd10      	pop	{r4, pc}

0800e60c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 800e60c:	4800      	ldr	r0, [pc, #0]	@ (800e610 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x4>)
 800e60e:	4770      	bx	lr
 800e610:	24000d00 	.word	0x24000d00

0800e614 <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport>:
 800e614:	b1c8      	cbz	r0, 800e64a <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport+0x36>
 800e616:	b570      	push	{r4, r5, r6, lr}
 800e618:	460d      	mov	r5, r1
 800e61a:	f002 fd47 	bl	80110ac <get_serialized_size_std_msgs__msg__Header>
 800e61e:	2104      	movs	r1, #4
 800e620:	182e      	adds	r6, r5, r0
 800e622:	f1c5 0504 	rsb	r5, r5, #4
 800e626:	4630      	mov	r0, r6
 800e628:	f001 fba0 	bl	800fd6c <ucdr_alignment>
 800e62c:	2104      	movs	r1, #4
 800e62e:	1844      	adds	r4, r0, r1
 800e630:	4434      	add	r4, r6
 800e632:	4620      	mov	r0, r4
 800e634:	f001 fb9a 	bl	800fd6c <ucdr_alignment>
 800e638:	2104      	movs	r1, #4
 800e63a:	4408      	add	r0, r1
 800e63c:	4404      	add	r4, r0
 800e63e:	4620      	mov	r0, r4
 800e640:	f001 fb94 	bl	800fd6c <ucdr_alignment>
 800e644:	4428      	add	r0, r5
 800e646:	4420      	add	r0, r4
 800e648:	bd70      	pop	{r4, r5, r6, pc}
 800e64a:	4770      	bx	lr

0800e64c <_VelocityReport__cdr_deserialize>:
 800e64c:	b538      	push	{r3, r4, r5, lr}
 800e64e:	460c      	mov	r4, r1
 800e650:	b1c9      	cbz	r1, 800e686 <_VelocityReport__cdr_deserialize+0x3a>
 800e652:	4605      	mov	r5, r0
 800e654:	f002 fdae 	bl	80111b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e658:	4603      	mov	r3, r0
 800e65a:	4621      	mov	r1, r4
 800e65c:	4628      	mov	r0, r5
 800e65e:	685b      	ldr	r3, [r3, #4]
 800e660:	68db      	ldr	r3, [r3, #12]
 800e662:	4798      	blx	r3
 800e664:	f104 0114 	add.w	r1, r4, #20
 800e668:	4628      	mov	r0, r5
 800e66a:	f001 f901 	bl	800f870 <ucdr_deserialize_float>
 800e66e:	f104 0118 	add.w	r1, r4, #24
 800e672:	4628      	mov	r0, r5
 800e674:	f001 f8fc 	bl	800f870 <ucdr_deserialize_float>
 800e678:	f104 011c 	add.w	r1, r4, #28
 800e67c:	4628      	mov	r0, r5
 800e67e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e682:	f001 b8f5 	b.w	800f870 <ucdr_deserialize_float>
 800e686:	4608      	mov	r0, r1
 800e688:	bd38      	pop	{r3, r4, r5, pc}
 800e68a:	bf00      	nop

0800e68c <_VelocityReport__cdr_serialize>:
 800e68c:	b1d8      	cbz	r0, 800e6c6 <_VelocityReport__cdr_serialize+0x3a>
 800e68e:	b538      	push	{r3, r4, r5, lr}
 800e690:	4604      	mov	r4, r0
 800e692:	460d      	mov	r5, r1
 800e694:	f002 fd8e 	bl	80111b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e698:	4603      	mov	r3, r0
 800e69a:	4629      	mov	r1, r5
 800e69c:	4620      	mov	r0, r4
 800e69e:	685b      	ldr	r3, [r3, #4]
 800e6a0:	689b      	ldr	r3, [r3, #8]
 800e6a2:	4798      	blx	r3
 800e6a4:	ed94 0a05 	vldr	s0, [r4, #20]
 800e6a8:	4628      	mov	r0, r5
 800e6aa:	f001 f849 	bl	800f740 <ucdr_serialize_float>
 800e6ae:	ed94 0a06 	vldr	s0, [r4, #24]
 800e6b2:	4628      	mov	r0, r5
 800e6b4:	f001 f844 	bl	800f740 <ucdr_serialize_float>
 800e6b8:	ed94 0a07 	vldr	s0, [r4, #28]
 800e6bc:	4628      	mov	r0, r5
 800e6be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6c2:	f001 b83d 	b.w	800f740 <ucdr_serialize_float>
 800e6c6:	4770      	bx	lr

0800e6c8 <_VelocityReport__get_serialized_size>:
 800e6c8:	b1b0      	cbz	r0, 800e6f8 <_VelocityReport__get_serialized_size+0x30>
 800e6ca:	2100      	movs	r1, #0
 800e6cc:	b510      	push	{r4, lr}
 800e6ce:	f002 fced 	bl	80110ac <get_serialized_size_std_msgs__msg__Header>
 800e6d2:	4604      	mov	r4, r0
 800e6d4:	2104      	movs	r1, #4
 800e6d6:	f001 fb49 	bl	800fd6c <ucdr_alignment>
 800e6da:	2104      	movs	r1, #4
 800e6dc:	4420      	add	r0, r4
 800e6de:	1844      	adds	r4, r0, r1
 800e6e0:	4620      	mov	r0, r4
 800e6e2:	f001 fb43 	bl	800fd6c <ucdr_alignment>
 800e6e6:	2104      	movs	r1, #4
 800e6e8:	4408      	add	r0, r1
 800e6ea:	4404      	add	r4, r0
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	f001 fb3d 	bl	800fd6c <ucdr_alignment>
 800e6f2:	3004      	adds	r0, #4
 800e6f4:	4420      	add	r0, r4
 800e6f6:	bd10      	pop	{r4, pc}
 800e6f8:	4770      	bx	lr
 800e6fa:	bf00      	nop

0800e6fc <_VelocityReport__max_serialized_size>:
 800e6fc:	b510      	push	{r4, lr}
 800e6fe:	b082      	sub	sp, #8
 800e700:	2301      	movs	r3, #1
 800e702:	2100      	movs	r1, #0
 800e704:	f10d 0007 	add.w	r0, sp, #7
 800e708:	f88d 3007 	strb.w	r3, [sp, #7]
 800e70c:	f002 fd48 	bl	80111a0 <max_serialized_size_std_msgs__msg__Header>
 800e710:	4604      	mov	r4, r0
 800e712:	2104      	movs	r1, #4
 800e714:	f001 fb2a 	bl	800fd6c <ucdr_alignment>
 800e718:	2104      	movs	r1, #4
 800e71a:	4420      	add	r0, r4
 800e71c:	1844      	adds	r4, r0, r1
 800e71e:	4620      	mov	r0, r4
 800e720:	f001 fb24 	bl	800fd6c <ucdr_alignment>
 800e724:	2104      	movs	r1, #4
 800e726:	4408      	add	r0, r1
 800e728:	4404      	add	r4, r0
 800e72a:	4620      	mov	r0, r4
 800e72c:	f001 fb1e 	bl	800fd6c <ucdr_alignment>
 800e730:	3004      	adds	r0, #4
 800e732:	4420      	add	r0, r4
 800e734:	b002      	add	sp, #8
 800e736:	bd10      	pop	{r4, pc}

0800e738 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 800e738:	4800      	ldr	r0, [pc, #0]	@ (800e73c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x4>)
 800e73a:	4770      	bx	lr
 800e73c:	24000d28 	.word	0x24000d28

0800e740 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800e740:	f003 b948 	b.w	80119d4 <builtin_interfaces__msg__Time__init>

0800e744 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800e744:	f003 b94a 	b.w	80119dc <builtin_interfaces__msg__Time__fini>

0800e748 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800e748:	4b04      	ldr	r3, [pc, #16]	@ (800e75c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800e74a:	681a      	ldr	r2, [r3, #0]
 800e74c:	b10a      	cbz	r2, 800e752 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800e74e:	4803      	ldr	r0, [pc, #12]	@ (800e75c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800e750:	4770      	bx	lr
 800e752:	4a03      	ldr	r2, [pc, #12]	@ (800e760 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800e754:	4801      	ldr	r0, [pc, #4]	@ (800e75c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800e756:	6812      	ldr	r2, [r2, #0]
 800e758:	601a      	str	r2, [r3, #0]
 800e75a:	4770      	bx	lr
 800e75c:	24000dc8 	.word	0x24000dc8
 800e760:	24000e14 	.word	0x24000e14

0800e764 <get_serialized_size_builtin_interfaces__msg__Time>:
 800e764:	b180      	cbz	r0, 800e788 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800e766:	b538      	push	{r3, r4, r5, lr}
 800e768:	460d      	mov	r5, r1
 800e76a:	2104      	movs	r1, #4
 800e76c:	4628      	mov	r0, r5
 800e76e:	f001 fafd 	bl	800fd6c <ucdr_alignment>
 800e772:	1d2b      	adds	r3, r5, #4
 800e774:	f1c5 0504 	rsb	r5, r5, #4
 800e778:	2104      	movs	r1, #4
 800e77a:	181c      	adds	r4, r3, r0
 800e77c:	4620      	mov	r0, r4
 800e77e:	f001 faf5 	bl	800fd6c <ucdr_alignment>
 800e782:	4428      	add	r0, r5
 800e784:	4420      	add	r0, r4
 800e786:	bd38      	pop	{r3, r4, r5, pc}
 800e788:	4770      	bx	lr
 800e78a:	bf00      	nop

0800e78c <_Time__cdr_deserialize>:
 800e78c:	b538      	push	{r3, r4, r5, lr}
 800e78e:	460c      	mov	r4, r1
 800e790:	b141      	cbz	r1, 800e7a4 <_Time__cdr_deserialize+0x18>
 800e792:	4605      	mov	r5, r0
 800e794:	f000 ff44 	bl	800f620 <ucdr_deserialize_int32_t>
 800e798:	1d21      	adds	r1, r4, #4
 800e79a:	4628      	mov	r0, r5
 800e79c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7a0:	f000 bbbc 	b.w	800ef1c <ucdr_deserialize_uint32_t>
 800e7a4:	4608      	mov	r0, r1
 800e7a6:	bd38      	pop	{r3, r4, r5, pc}

0800e7a8 <_Time__cdr_serialize>:
 800e7a8:	b160      	cbz	r0, 800e7c4 <_Time__cdr_serialize+0x1c>
 800e7aa:	b538      	push	{r3, r4, r5, lr}
 800e7ac:	460d      	mov	r5, r1
 800e7ae:	4604      	mov	r4, r0
 800e7b0:	6801      	ldr	r1, [r0, #0]
 800e7b2:	4628      	mov	r0, r5
 800e7b4:	f000 fe9c 	bl	800f4f0 <ucdr_serialize_int32_t>
 800e7b8:	6861      	ldr	r1, [r4, #4]
 800e7ba:	4628      	mov	r0, r5
 800e7bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7c0:	f000 ba7c 	b.w	800ecbc <ucdr_serialize_uint32_t>
 800e7c4:	4770      	bx	lr
 800e7c6:	bf00      	nop

0800e7c8 <_Time__get_serialized_size>:
 800e7c8:	b160      	cbz	r0, 800e7e4 <_Time__get_serialized_size+0x1c>
 800e7ca:	2104      	movs	r1, #4
 800e7cc:	2000      	movs	r0, #0
 800e7ce:	b510      	push	{r4, lr}
 800e7d0:	f001 facc 	bl	800fd6c <ucdr_alignment>
 800e7d4:	2104      	movs	r1, #4
 800e7d6:	1844      	adds	r4, r0, r1
 800e7d8:	4620      	mov	r0, r4
 800e7da:	f001 fac7 	bl	800fd6c <ucdr_alignment>
 800e7de:	3004      	adds	r0, #4
 800e7e0:	4420      	add	r0, r4
 800e7e2:	bd10      	pop	{r4, pc}
 800e7e4:	4770      	bx	lr
 800e7e6:	bf00      	nop

0800e7e8 <_Time__max_serialized_size>:
 800e7e8:	b510      	push	{r4, lr}
 800e7ea:	2104      	movs	r1, #4
 800e7ec:	2000      	movs	r0, #0
 800e7ee:	f001 fabd 	bl	800fd6c <ucdr_alignment>
 800e7f2:	2104      	movs	r1, #4
 800e7f4:	1844      	adds	r4, r0, r1
 800e7f6:	4620      	mov	r0, r4
 800e7f8:	f001 fab8 	bl	800fd6c <ucdr_alignment>
 800e7fc:	3004      	adds	r0, #4
 800e7fe:	4420      	add	r0, r4
 800e800:	bd10      	pop	{r4, pc}
 800e802:	bf00      	nop

0800e804 <max_serialized_size_builtin_interfaces__msg__Time>:
 800e804:	b538      	push	{r3, r4, r5, lr}
 800e806:	460c      	mov	r4, r1
 800e808:	2301      	movs	r3, #1
 800e80a:	2104      	movs	r1, #4
 800e80c:	1d25      	adds	r5, r4, #4
 800e80e:	7003      	strb	r3, [r0, #0]
 800e810:	4620      	mov	r0, r4
 800e812:	f1c4 0404 	rsb	r4, r4, #4
 800e816:	f001 faa9 	bl	800fd6c <ucdr_alignment>
 800e81a:	4405      	add	r5, r0
 800e81c:	2104      	movs	r1, #4
 800e81e:	4628      	mov	r0, r5
 800e820:	f001 faa4 	bl	800fd6c <ucdr_alignment>
 800e824:	4420      	add	r0, r4
 800e826:	4428      	add	r0, r5
 800e828:	bd38      	pop	{r3, r4, r5, pc}
 800e82a:	bf00      	nop

0800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800e82c:	4800      	ldr	r0, [pc, #0]	@ (800e830 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800e82e:	4770      	bx	lr
 800e830:	24000dd4 	.word	0x24000dd4

0800e834 <ucdr_serialize_bool>:
 800e834:	b538      	push	{r3, r4, r5, lr}
 800e836:	460d      	mov	r5, r1
 800e838:	2101      	movs	r1, #1
 800e83a:	4604      	mov	r4, r0
 800e83c:	f001 fa4a 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800e840:	b148      	cbz	r0, 800e856 <ucdr_serialize_bool+0x22>
 800e842:	68a3      	ldr	r3, [r4, #8]
 800e844:	2101      	movs	r1, #1
 800e846:	701d      	strb	r5, [r3, #0]
 800e848:	68a2      	ldr	r2, [r4, #8]
 800e84a:	6923      	ldr	r3, [r4, #16]
 800e84c:	440a      	add	r2, r1
 800e84e:	7561      	strb	r1, [r4, #21]
 800e850:	440b      	add	r3, r1
 800e852:	60a2      	str	r2, [r4, #8]
 800e854:	6123      	str	r3, [r4, #16]
 800e856:	7da0      	ldrb	r0, [r4, #22]
 800e858:	f080 0001 	eor.w	r0, r0, #1
 800e85c:	bd38      	pop	{r3, r4, r5, pc}
 800e85e:	bf00      	nop

0800e860 <ucdr_deserialize_bool>:
 800e860:	b538      	push	{r3, r4, r5, lr}
 800e862:	460d      	mov	r5, r1
 800e864:	2101      	movs	r1, #1
 800e866:	4604      	mov	r4, r0
 800e868:	f001 fa34 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800e86c:	b160      	cbz	r0, 800e888 <ucdr_deserialize_bool+0x28>
 800e86e:	68a2      	ldr	r2, [r4, #8]
 800e870:	2101      	movs	r1, #1
 800e872:	6923      	ldr	r3, [r4, #16]
 800e874:	f812 0b01 	ldrb.w	r0, [r2], #1
 800e878:	440b      	add	r3, r1
 800e87a:	3800      	subs	r0, #0
 800e87c:	bf18      	it	ne
 800e87e:	2001      	movne	r0, #1
 800e880:	7028      	strb	r0, [r5, #0]
 800e882:	60a2      	str	r2, [r4, #8]
 800e884:	6123      	str	r3, [r4, #16]
 800e886:	7561      	strb	r1, [r4, #21]
 800e888:	7da0      	ldrb	r0, [r4, #22]
 800e88a:	f080 0001 	eor.w	r0, r0, #1
 800e88e:	bd38      	pop	{r3, r4, r5, pc}

0800e890 <ucdr_serialize_uint8_t>:
 800e890:	b538      	push	{r3, r4, r5, lr}
 800e892:	460d      	mov	r5, r1
 800e894:	2101      	movs	r1, #1
 800e896:	4604      	mov	r4, r0
 800e898:	f001 fa1c 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800e89c:	b148      	cbz	r0, 800e8b2 <ucdr_serialize_uint8_t+0x22>
 800e89e:	68a3      	ldr	r3, [r4, #8]
 800e8a0:	2101      	movs	r1, #1
 800e8a2:	701d      	strb	r5, [r3, #0]
 800e8a4:	68a2      	ldr	r2, [r4, #8]
 800e8a6:	6923      	ldr	r3, [r4, #16]
 800e8a8:	440a      	add	r2, r1
 800e8aa:	7561      	strb	r1, [r4, #21]
 800e8ac:	440b      	add	r3, r1
 800e8ae:	60a2      	str	r2, [r4, #8]
 800e8b0:	6123      	str	r3, [r4, #16]
 800e8b2:	7da0      	ldrb	r0, [r4, #22]
 800e8b4:	f080 0001 	eor.w	r0, r0, #1
 800e8b8:	bd38      	pop	{r3, r4, r5, pc}
 800e8ba:	bf00      	nop

0800e8bc <ucdr_deserialize_uint8_t>:
 800e8bc:	b538      	push	{r3, r4, r5, lr}
 800e8be:	460d      	mov	r5, r1
 800e8c0:	2101      	movs	r1, #1
 800e8c2:	4604      	mov	r4, r0
 800e8c4:	f001 fa06 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800e8c8:	b150      	cbz	r0, 800e8e0 <ucdr_deserialize_uint8_t+0x24>
 800e8ca:	68a3      	ldr	r3, [r4, #8]
 800e8cc:	2101      	movs	r1, #1
 800e8ce:	781b      	ldrb	r3, [r3, #0]
 800e8d0:	702b      	strb	r3, [r5, #0]
 800e8d2:	68a2      	ldr	r2, [r4, #8]
 800e8d4:	6923      	ldr	r3, [r4, #16]
 800e8d6:	440a      	add	r2, r1
 800e8d8:	7561      	strb	r1, [r4, #21]
 800e8da:	440b      	add	r3, r1
 800e8dc:	60a2      	str	r2, [r4, #8]
 800e8de:	6123      	str	r3, [r4, #16]
 800e8e0:	7da0      	ldrb	r0, [r4, #22]
 800e8e2:	f080 0001 	eor.w	r0, r0, #1
 800e8e6:	bd38      	pop	{r3, r4, r5, pc}

0800e8e8 <ucdr_serialize_uint16_t>:
 800e8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8ec:	460b      	mov	r3, r1
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	4604      	mov	r4, r0
 800e8f2:	2102      	movs	r1, #2
 800e8f4:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e8f8:	f001 fa40 	bl	800fd7c <ucdr_buffer_alignment>
 800e8fc:	4601      	mov	r1, r0
 800e8fe:	4620      	mov	r0, r4
 800e900:	7d67      	ldrb	r7, [r4, #21]
 800e902:	f001 fa83 	bl	800fe0c <ucdr_advance_buffer>
 800e906:	2102      	movs	r1, #2
 800e908:	4620      	mov	r0, r4
 800e90a:	f001 f9d7 	bl	800fcbc <ucdr_check_buffer_available_for>
 800e90e:	bb78      	cbnz	r0, 800e970 <ucdr_serialize_uint16_t+0x88>
 800e910:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e914:	42ab      	cmp	r3, r5
 800e916:	d926      	bls.n	800e966 <ucdr_serialize_uint16_t+0x7e>
 800e918:	1b5e      	subs	r6, r3, r5
 800e91a:	60a3      	str	r3, [r4, #8]
 800e91c:	6923      	ldr	r3, [r4, #16]
 800e91e:	4620      	mov	r0, r4
 800e920:	f1c6 0802 	rsb	r8, r6, #2
 800e924:	4433      	add	r3, r6
 800e926:	4641      	mov	r1, r8
 800e928:	6123      	str	r3, [r4, #16]
 800e92a:	f001 f9d3 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800e92e:	2800      	cmp	r0, #0
 800e930:	d03b      	beq.n	800e9aa <ucdr_serialize_uint16_t+0xc2>
 800e932:	7d23      	ldrb	r3, [r4, #20]
 800e934:	2b01      	cmp	r3, #1
 800e936:	d04a      	beq.n	800e9ce <ucdr_serialize_uint16_t+0xe6>
 800e938:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e93c:	702b      	strb	r3, [r5, #0]
 800e93e:	2e00      	cmp	r6, #0
 800e940:	d040      	beq.n	800e9c4 <ucdr_serialize_uint16_t+0xdc>
 800e942:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e946:	706b      	strb	r3, [r5, #1]
 800e948:	6923      	ldr	r3, [r4, #16]
 800e94a:	2102      	movs	r1, #2
 800e94c:	68a2      	ldr	r2, [r4, #8]
 800e94e:	3302      	adds	r3, #2
 800e950:	7da0      	ldrb	r0, [r4, #22]
 800e952:	4442      	add	r2, r8
 800e954:	7561      	strb	r1, [r4, #21]
 800e956:	1b9e      	subs	r6, r3, r6
 800e958:	f080 0001 	eor.w	r0, r0, #1
 800e95c:	60a2      	str	r2, [r4, #8]
 800e95e:	6126      	str	r6, [r4, #16]
 800e960:	b002      	add	sp, #8
 800e962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e966:	2102      	movs	r1, #2
 800e968:	4620      	mov	r0, r4
 800e96a:	f001 f9b3 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800e96e:	b190      	cbz	r0, 800e996 <ucdr_serialize_uint16_t+0xae>
 800e970:	7d23      	ldrb	r3, [r4, #20]
 800e972:	2b01      	cmp	r3, #1
 800e974:	68a3      	ldr	r3, [r4, #8]
 800e976:	d014      	beq.n	800e9a2 <ucdr_serialize_uint16_t+0xba>
 800e978:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e97c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e980:	7019      	strb	r1, [r3, #0]
 800e982:	68a3      	ldr	r3, [r4, #8]
 800e984:	705a      	strb	r2, [r3, #1]
 800e986:	2102      	movs	r1, #2
 800e988:	68a2      	ldr	r2, [r4, #8]
 800e98a:	6923      	ldr	r3, [r4, #16]
 800e98c:	440a      	add	r2, r1
 800e98e:	7561      	strb	r1, [r4, #21]
 800e990:	440b      	add	r3, r1
 800e992:	60a2      	str	r2, [r4, #8]
 800e994:	6123      	str	r3, [r4, #16]
 800e996:	7da0      	ldrb	r0, [r4, #22]
 800e998:	f080 0001 	eor.w	r0, r0, #1
 800e99c:	b002      	add	sp, #8
 800e99e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9a2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e9a6:	801a      	strh	r2, [r3, #0]
 800e9a8:	e7ed      	b.n	800e986 <ucdr_serialize_uint16_t+0x9e>
 800e9aa:	68a2      	ldr	r2, [r4, #8]
 800e9ac:	6923      	ldr	r3, [r4, #16]
 800e9ae:	7da0      	ldrb	r0, [r4, #22]
 800e9b0:	1b92      	subs	r2, r2, r6
 800e9b2:	1b9b      	subs	r3, r3, r6
 800e9b4:	7567      	strb	r7, [r4, #21]
 800e9b6:	f080 0001 	eor.w	r0, r0, #1
 800e9ba:	60a2      	str	r2, [r4, #8]
 800e9bc:	6123      	str	r3, [r4, #16]
 800e9be:	b002      	add	sp, #8
 800e9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9c4:	68a3      	ldr	r3, [r4, #8]
 800e9c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e9ca:	701a      	strb	r2, [r3, #0]
 800e9cc:	e7bc      	b.n	800e948 <ucdr_serialize_uint16_t+0x60>
 800e9ce:	4628      	mov	r0, r5
 800e9d0:	f10d 0506 	add.w	r5, sp, #6
 800e9d4:	4632      	mov	r2, r6
 800e9d6:	4629      	mov	r1, r5
 800e9d8:	f00e fc8b 	bl	801d2f2 <memcpy>
 800e9dc:	4642      	mov	r2, r8
 800e9de:	19a9      	adds	r1, r5, r6
 800e9e0:	68a0      	ldr	r0, [r4, #8]
 800e9e2:	f00e fc86 	bl	801d2f2 <memcpy>
 800e9e6:	e7af      	b.n	800e948 <ucdr_serialize_uint16_t+0x60>

0800e9e8 <ucdr_serialize_endian_uint16_t>:
 800e9e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e9ec:	4604      	mov	r4, r0
 800e9ee:	b083      	sub	sp, #12
 800e9f0:	460d      	mov	r5, r1
 800e9f2:	2102      	movs	r1, #2
 800e9f4:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e9f8:	f001 f9c0 	bl	800fd7c <ucdr_buffer_alignment>
 800e9fc:	4601      	mov	r1, r0
 800e9fe:	4620      	mov	r0, r4
 800ea00:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ea04:	f001 fa02 	bl	800fe0c <ucdr_advance_buffer>
 800ea08:	2102      	movs	r1, #2
 800ea0a:	4620      	mov	r0, r4
 800ea0c:	f001 f956 	bl	800fcbc <ucdr_check_buffer_available_for>
 800ea10:	bb70      	cbnz	r0, 800ea70 <ucdr_serialize_endian_uint16_t+0x88>
 800ea12:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ea16:	42be      	cmp	r6, r7
 800ea18:	d925      	bls.n	800ea66 <ucdr_serialize_endian_uint16_t+0x7e>
 800ea1a:	6923      	ldr	r3, [r4, #16]
 800ea1c:	4620      	mov	r0, r4
 800ea1e:	60a6      	str	r6, [r4, #8]
 800ea20:	1bf6      	subs	r6, r6, r7
 800ea22:	4433      	add	r3, r6
 800ea24:	f1c6 0902 	rsb	r9, r6, #2
 800ea28:	6123      	str	r3, [r4, #16]
 800ea2a:	4649      	mov	r1, r9
 800ea2c:	f001 f952 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800ea30:	2800      	cmp	r0, #0
 800ea32:	d039      	beq.n	800eaa8 <ucdr_serialize_endian_uint16_t+0xc0>
 800ea34:	2d01      	cmp	r5, #1
 800ea36:	d04a      	beq.n	800eace <ucdr_serialize_endian_uint16_t+0xe6>
 800ea38:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ea3c:	703b      	strb	r3, [r7, #0]
 800ea3e:	2e00      	cmp	r6, #0
 800ea40:	d040      	beq.n	800eac4 <ucdr_serialize_endian_uint16_t+0xdc>
 800ea42:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ea46:	707b      	strb	r3, [r7, #1]
 800ea48:	6923      	ldr	r3, [r4, #16]
 800ea4a:	2102      	movs	r1, #2
 800ea4c:	68a2      	ldr	r2, [r4, #8]
 800ea4e:	7da0      	ldrb	r0, [r4, #22]
 800ea50:	3302      	adds	r3, #2
 800ea52:	444a      	add	r2, r9
 800ea54:	7561      	strb	r1, [r4, #21]
 800ea56:	1b9b      	subs	r3, r3, r6
 800ea58:	f080 0001 	eor.w	r0, r0, #1
 800ea5c:	60a2      	str	r2, [r4, #8]
 800ea5e:	6123      	str	r3, [r4, #16]
 800ea60:	b003      	add	sp, #12
 800ea62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea66:	2102      	movs	r1, #2
 800ea68:	4620      	mov	r0, r4
 800ea6a:	f001 f933 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800ea6e:	b188      	cbz	r0, 800ea94 <ucdr_serialize_endian_uint16_t+0xac>
 800ea70:	2d01      	cmp	r5, #1
 800ea72:	68a3      	ldr	r3, [r4, #8]
 800ea74:	d014      	beq.n	800eaa0 <ucdr_serialize_endian_uint16_t+0xb8>
 800ea76:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ea7a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ea7e:	7019      	strb	r1, [r3, #0]
 800ea80:	68a3      	ldr	r3, [r4, #8]
 800ea82:	705a      	strb	r2, [r3, #1]
 800ea84:	2102      	movs	r1, #2
 800ea86:	68a2      	ldr	r2, [r4, #8]
 800ea88:	6923      	ldr	r3, [r4, #16]
 800ea8a:	440a      	add	r2, r1
 800ea8c:	7561      	strb	r1, [r4, #21]
 800ea8e:	440b      	add	r3, r1
 800ea90:	60a2      	str	r2, [r4, #8]
 800ea92:	6123      	str	r3, [r4, #16]
 800ea94:	7da0      	ldrb	r0, [r4, #22]
 800ea96:	f080 0001 	eor.w	r0, r0, #1
 800ea9a:	b003      	add	sp, #12
 800ea9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eaa0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800eaa4:	801a      	strh	r2, [r3, #0]
 800eaa6:	e7ed      	b.n	800ea84 <ucdr_serialize_endian_uint16_t+0x9c>
 800eaa8:	68a2      	ldr	r2, [r4, #8]
 800eaaa:	6923      	ldr	r3, [r4, #16]
 800eaac:	7da0      	ldrb	r0, [r4, #22]
 800eaae:	1b92      	subs	r2, r2, r6
 800eab0:	1b9b      	subs	r3, r3, r6
 800eab2:	f884 8015 	strb.w	r8, [r4, #21]
 800eab6:	f080 0001 	eor.w	r0, r0, #1
 800eaba:	60a2      	str	r2, [r4, #8]
 800eabc:	6123      	str	r3, [r4, #16]
 800eabe:	b003      	add	sp, #12
 800eac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eac4:	68a3      	ldr	r3, [r4, #8]
 800eac6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eaca:	701a      	strb	r2, [r3, #0]
 800eacc:	e7bc      	b.n	800ea48 <ucdr_serialize_endian_uint16_t+0x60>
 800eace:	f10d 0506 	add.w	r5, sp, #6
 800ead2:	4632      	mov	r2, r6
 800ead4:	4638      	mov	r0, r7
 800ead6:	4629      	mov	r1, r5
 800ead8:	f00e fc0b 	bl	801d2f2 <memcpy>
 800eadc:	464a      	mov	r2, r9
 800eade:	19a9      	adds	r1, r5, r6
 800eae0:	68a0      	ldr	r0, [r4, #8]
 800eae2:	f00e fc06 	bl	801d2f2 <memcpy>
 800eae6:	e7af      	b.n	800ea48 <ucdr_serialize_endian_uint16_t+0x60>

0800eae8 <ucdr_deserialize_uint16_t>:
 800eae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eaec:	4604      	mov	r4, r0
 800eaee:	460d      	mov	r5, r1
 800eaf0:	2102      	movs	r1, #2
 800eaf2:	f001 f943 	bl	800fd7c <ucdr_buffer_alignment>
 800eaf6:	4601      	mov	r1, r0
 800eaf8:	4620      	mov	r0, r4
 800eafa:	f894 8015 	ldrb.w	r8, [r4, #21]
 800eafe:	f001 f985 	bl	800fe0c <ucdr_advance_buffer>
 800eb02:	2102      	movs	r1, #2
 800eb04:	4620      	mov	r0, r4
 800eb06:	f001 f8d9 	bl	800fcbc <ucdr_check_buffer_available_for>
 800eb0a:	bb60      	cbnz	r0, 800eb66 <ucdr_deserialize_uint16_t+0x7e>
 800eb0c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800eb10:	42be      	cmp	r6, r7
 800eb12:	d923      	bls.n	800eb5c <ucdr_deserialize_uint16_t+0x74>
 800eb14:	6923      	ldr	r3, [r4, #16]
 800eb16:	4620      	mov	r0, r4
 800eb18:	60a6      	str	r6, [r4, #8]
 800eb1a:	1bf6      	subs	r6, r6, r7
 800eb1c:	4433      	add	r3, r6
 800eb1e:	f1c6 0902 	rsb	r9, r6, #2
 800eb22:	6123      	str	r3, [r4, #16]
 800eb24:	4649      	mov	r1, r9
 800eb26:	f001 f8d5 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800eb2a:	2800      	cmp	r0, #0
 800eb2c:	d034      	beq.n	800eb98 <ucdr_deserialize_uint16_t+0xb0>
 800eb2e:	7d23      	ldrb	r3, [r4, #20]
 800eb30:	2b01      	cmp	r3, #1
 800eb32:	d042      	beq.n	800ebba <ucdr_deserialize_uint16_t+0xd2>
 800eb34:	787b      	ldrb	r3, [r7, #1]
 800eb36:	702b      	strb	r3, [r5, #0]
 800eb38:	2e00      	cmp	r6, #0
 800eb3a:	d03a      	beq.n	800ebb2 <ucdr_deserialize_uint16_t+0xca>
 800eb3c:	783b      	ldrb	r3, [r7, #0]
 800eb3e:	706b      	strb	r3, [r5, #1]
 800eb40:	6923      	ldr	r3, [r4, #16]
 800eb42:	2102      	movs	r1, #2
 800eb44:	68a2      	ldr	r2, [r4, #8]
 800eb46:	3302      	adds	r3, #2
 800eb48:	7da0      	ldrb	r0, [r4, #22]
 800eb4a:	444a      	add	r2, r9
 800eb4c:	7561      	strb	r1, [r4, #21]
 800eb4e:	1b9b      	subs	r3, r3, r6
 800eb50:	f080 0001 	eor.w	r0, r0, #1
 800eb54:	60a2      	str	r2, [r4, #8]
 800eb56:	6123      	str	r3, [r4, #16]
 800eb58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb5c:	2102      	movs	r1, #2
 800eb5e:	4620      	mov	r0, r4
 800eb60:	f001 f8b8 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800eb64:	b180      	cbz	r0, 800eb88 <ucdr_deserialize_uint16_t+0xa0>
 800eb66:	7d23      	ldrb	r3, [r4, #20]
 800eb68:	2b01      	cmp	r3, #1
 800eb6a:	68a3      	ldr	r3, [r4, #8]
 800eb6c:	d011      	beq.n	800eb92 <ucdr_deserialize_uint16_t+0xaa>
 800eb6e:	785b      	ldrb	r3, [r3, #1]
 800eb70:	702b      	strb	r3, [r5, #0]
 800eb72:	68a3      	ldr	r3, [r4, #8]
 800eb74:	781b      	ldrb	r3, [r3, #0]
 800eb76:	706b      	strb	r3, [r5, #1]
 800eb78:	2102      	movs	r1, #2
 800eb7a:	68a2      	ldr	r2, [r4, #8]
 800eb7c:	6923      	ldr	r3, [r4, #16]
 800eb7e:	440a      	add	r2, r1
 800eb80:	7561      	strb	r1, [r4, #21]
 800eb82:	440b      	add	r3, r1
 800eb84:	60a2      	str	r2, [r4, #8]
 800eb86:	6123      	str	r3, [r4, #16]
 800eb88:	7da0      	ldrb	r0, [r4, #22]
 800eb8a:	f080 0001 	eor.w	r0, r0, #1
 800eb8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb92:	881b      	ldrh	r3, [r3, #0]
 800eb94:	802b      	strh	r3, [r5, #0]
 800eb96:	e7ef      	b.n	800eb78 <ucdr_deserialize_uint16_t+0x90>
 800eb98:	68a2      	ldr	r2, [r4, #8]
 800eb9a:	6923      	ldr	r3, [r4, #16]
 800eb9c:	1b92      	subs	r2, r2, r6
 800eb9e:	7da0      	ldrb	r0, [r4, #22]
 800eba0:	1b9b      	subs	r3, r3, r6
 800eba2:	f884 8015 	strb.w	r8, [r4, #21]
 800eba6:	f080 0001 	eor.w	r0, r0, #1
 800ebaa:	60a2      	str	r2, [r4, #8]
 800ebac:	6123      	str	r3, [r4, #16]
 800ebae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebb2:	68a3      	ldr	r3, [r4, #8]
 800ebb4:	781b      	ldrb	r3, [r3, #0]
 800ebb6:	706b      	strb	r3, [r5, #1]
 800ebb8:	e7c2      	b.n	800eb40 <ucdr_deserialize_uint16_t+0x58>
 800ebba:	4639      	mov	r1, r7
 800ebbc:	4632      	mov	r2, r6
 800ebbe:	4628      	mov	r0, r5
 800ebc0:	f00e fb97 	bl	801d2f2 <memcpy>
 800ebc4:	464a      	mov	r2, r9
 800ebc6:	19a8      	adds	r0, r5, r6
 800ebc8:	68a1      	ldr	r1, [r4, #8]
 800ebca:	f00e fb92 	bl	801d2f2 <memcpy>
 800ebce:	e7b7      	b.n	800eb40 <ucdr_deserialize_uint16_t+0x58>

0800ebd0 <ucdr_deserialize_endian_uint16_t>:
 800ebd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebd4:	4604      	mov	r4, r0
 800ebd6:	460e      	mov	r6, r1
 800ebd8:	2102      	movs	r1, #2
 800ebda:	4615      	mov	r5, r2
 800ebdc:	f001 f8ce 	bl	800fd7c <ucdr_buffer_alignment>
 800ebe0:	4601      	mov	r1, r0
 800ebe2:	4620      	mov	r0, r4
 800ebe4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ebe8:	f001 f910 	bl	800fe0c <ucdr_advance_buffer>
 800ebec:	2102      	movs	r1, #2
 800ebee:	4620      	mov	r0, r4
 800ebf0:	f001 f864 	bl	800fcbc <ucdr_check_buffer_available_for>
 800ebf4:	bb70      	cbnz	r0, 800ec54 <ucdr_deserialize_endian_uint16_t+0x84>
 800ebf6:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800ebfa:	454f      	cmp	r7, r9
 800ebfc:	d925      	bls.n	800ec4a <ucdr_deserialize_endian_uint16_t+0x7a>
 800ebfe:	6923      	ldr	r3, [r4, #16]
 800ec00:	4620      	mov	r0, r4
 800ec02:	60a7      	str	r7, [r4, #8]
 800ec04:	eba7 0709 	sub.w	r7, r7, r9
 800ec08:	443b      	add	r3, r7
 800ec0a:	f1c7 0a02 	rsb	sl, r7, #2
 800ec0e:	6123      	str	r3, [r4, #16]
 800ec10:	4651      	mov	r1, sl
 800ec12:	f001 f85f 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800ec16:	2800      	cmp	r0, #0
 800ec18:	d034      	beq.n	800ec84 <ucdr_deserialize_endian_uint16_t+0xb4>
 800ec1a:	2e01      	cmp	r6, #1
 800ec1c:	d043      	beq.n	800eca6 <ucdr_deserialize_endian_uint16_t+0xd6>
 800ec1e:	f899 3001 	ldrb.w	r3, [r9, #1]
 800ec22:	702b      	strb	r3, [r5, #0]
 800ec24:	2f00      	cmp	r7, #0
 800ec26:	d03a      	beq.n	800ec9e <ucdr_deserialize_endian_uint16_t+0xce>
 800ec28:	f899 3000 	ldrb.w	r3, [r9]
 800ec2c:	706b      	strb	r3, [r5, #1]
 800ec2e:	6923      	ldr	r3, [r4, #16]
 800ec30:	2102      	movs	r1, #2
 800ec32:	68a2      	ldr	r2, [r4, #8]
 800ec34:	3302      	adds	r3, #2
 800ec36:	7da0      	ldrb	r0, [r4, #22]
 800ec38:	4452      	add	r2, sl
 800ec3a:	7561      	strb	r1, [r4, #21]
 800ec3c:	1bdb      	subs	r3, r3, r7
 800ec3e:	f080 0001 	eor.w	r0, r0, #1
 800ec42:	60a2      	str	r2, [r4, #8]
 800ec44:	6123      	str	r3, [r4, #16]
 800ec46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec4a:	2102      	movs	r1, #2
 800ec4c:	4620      	mov	r0, r4
 800ec4e:	f001 f841 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800ec52:	b178      	cbz	r0, 800ec74 <ucdr_deserialize_endian_uint16_t+0xa4>
 800ec54:	2e01      	cmp	r6, #1
 800ec56:	68a3      	ldr	r3, [r4, #8]
 800ec58:	d011      	beq.n	800ec7e <ucdr_deserialize_endian_uint16_t+0xae>
 800ec5a:	785b      	ldrb	r3, [r3, #1]
 800ec5c:	702b      	strb	r3, [r5, #0]
 800ec5e:	68a3      	ldr	r3, [r4, #8]
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	706b      	strb	r3, [r5, #1]
 800ec64:	2102      	movs	r1, #2
 800ec66:	68a2      	ldr	r2, [r4, #8]
 800ec68:	6923      	ldr	r3, [r4, #16]
 800ec6a:	440a      	add	r2, r1
 800ec6c:	7561      	strb	r1, [r4, #21]
 800ec6e:	440b      	add	r3, r1
 800ec70:	60a2      	str	r2, [r4, #8]
 800ec72:	6123      	str	r3, [r4, #16]
 800ec74:	7da0      	ldrb	r0, [r4, #22]
 800ec76:	f080 0001 	eor.w	r0, r0, #1
 800ec7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec7e:	881b      	ldrh	r3, [r3, #0]
 800ec80:	802b      	strh	r3, [r5, #0]
 800ec82:	e7ef      	b.n	800ec64 <ucdr_deserialize_endian_uint16_t+0x94>
 800ec84:	68a2      	ldr	r2, [r4, #8]
 800ec86:	6923      	ldr	r3, [r4, #16]
 800ec88:	1bd2      	subs	r2, r2, r7
 800ec8a:	7da0      	ldrb	r0, [r4, #22]
 800ec8c:	1bdb      	subs	r3, r3, r7
 800ec8e:	f884 8015 	strb.w	r8, [r4, #21]
 800ec92:	f080 0001 	eor.w	r0, r0, #1
 800ec96:	60a2      	str	r2, [r4, #8]
 800ec98:	6123      	str	r3, [r4, #16]
 800ec9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec9e:	68a3      	ldr	r3, [r4, #8]
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	706b      	strb	r3, [r5, #1]
 800eca4:	e7c3      	b.n	800ec2e <ucdr_deserialize_endian_uint16_t+0x5e>
 800eca6:	4649      	mov	r1, r9
 800eca8:	463a      	mov	r2, r7
 800ecaa:	4628      	mov	r0, r5
 800ecac:	f00e fb21 	bl	801d2f2 <memcpy>
 800ecb0:	4652      	mov	r2, sl
 800ecb2:	19e8      	adds	r0, r5, r7
 800ecb4:	68a1      	ldr	r1, [r4, #8]
 800ecb6:	f00e fb1c 	bl	801d2f2 <memcpy>
 800ecba:	e7b8      	b.n	800ec2e <ucdr_deserialize_endian_uint16_t+0x5e>

0800ecbc <ucdr_serialize_uint32_t>:
 800ecbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecc0:	b082      	sub	sp, #8
 800ecc2:	4604      	mov	r4, r0
 800ecc4:	9101      	str	r1, [sp, #4]
 800ecc6:	2104      	movs	r1, #4
 800ecc8:	f001 f858 	bl	800fd7c <ucdr_buffer_alignment>
 800eccc:	4601      	mov	r1, r0
 800ecce:	4620      	mov	r0, r4
 800ecd0:	7d67      	ldrb	r7, [r4, #21]
 800ecd2:	f001 f89b 	bl	800fe0c <ucdr_advance_buffer>
 800ecd6:	2104      	movs	r1, #4
 800ecd8:	4620      	mov	r0, r4
 800ecda:	f000 ffef 	bl	800fcbc <ucdr_check_buffer_available_for>
 800ecde:	2800      	cmp	r0, #0
 800ece0:	d139      	bne.n	800ed56 <ucdr_serialize_uint32_t+0x9a>
 800ece2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ece6:	42ab      	cmp	r3, r5
 800ece8:	d930      	bls.n	800ed4c <ucdr_serialize_uint32_t+0x90>
 800ecea:	1b5e      	subs	r6, r3, r5
 800ecec:	60a3      	str	r3, [r4, #8]
 800ecee:	6923      	ldr	r3, [r4, #16]
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	f1c6 0804 	rsb	r8, r6, #4
 800ecf6:	4433      	add	r3, r6
 800ecf8:	4641      	mov	r1, r8
 800ecfa:	6123      	str	r3, [r4, #16]
 800ecfc:	f000 ffea 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800ed00:	2800      	cmp	r0, #0
 800ed02:	d04c      	beq.n	800ed9e <ucdr_serialize_uint32_t+0xe2>
 800ed04:	7d23      	ldrb	r3, [r4, #20]
 800ed06:	2b01      	cmp	r3, #1
 800ed08:	d063      	beq.n	800edd2 <ucdr_serialize_uint32_t+0x116>
 800ed0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ed0e:	702b      	strb	r3, [r5, #0]
 800ed10:	2e00      	cmp	r6, #0
 800ed12:	d051      	beq.n	800edb8 <ucdr_serialize_uint32_t+0xfc>
 800ed14:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ed18:	2e01      	cmp	r6, #1
 800ed1a:	706b      	strb	r3, [r5, #1]
 800ed1c:	d050      	beq.n	800edc0 <ucdr_serialize_uint32_t+0x104>
 800ed1e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ed22:	2e02      	cmp	r6, #2
 800ed24:	70ab      	strb	r3, [r5, #2]
 800ed26:	d04f      	beq.n	800edc8 <ucdr_serialize_uint32_t+0x10c>
 800ed28:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ed2c:	70eb      	strb	r3, [r5, #3]
 800ed2e:	6923      	ldr	r3, [r4, #16]
 800ed30:	2104      	movs	r1, #4
 800ed32:	68a2      	ldr	r2, [r4, #8]
 800ed34:	3304      	adds	r3, #4
 800ed36:	7da0      	ldrb	r0, [r4, #22]
 800ed38:	4442      	add	r2, r8
 800ed3a:	7561      	strb	r1, [r4, #21]
 800ed3c:	1b9e      	subs	r6, r3, r6
 800ed3e:	f080 0001 	eor.w	r0, r0, #1
 800ed42:	60a2      	str	r2, [r4, #8]
 800ed44:	6126      	str	r6, [r4, #16]
 800ed46:	b002      	add	sp, #8
 800ed48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed4c:	2104      	movs	r1, #4
 800ed4e:	4620      	mov	r0, r4
 800ed50:	f000 ffc0 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800ed54:	b1d0      	cbz	r0, 800ed8c <ucdr_serialize_uint32_t+0xd0>
 800ed56:	7d23      	ldrb	r3, [r4, #20]
 800ed58:	2b01      	cmp	r3, #1
 800ed5a:	68a3      	ldr	r3, [r4, #8]
 800ed5c:	d01c      	beq.n	800ed98 <ucdr_serialize_uint32_t+0xdc>
 800ed5e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ed62:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ed66:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800ed6a:	7018      	strb	r0, [r3, #0]
 800ed6c:	68a3      	ldr	r3, [r4, #8]
 800ed6e:	705a      	strb	r2, [r3, #1]
 800ed70:	68a3      	ldr	r3, [r4, #8]
 800ed72:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ed76:	7099      	strb	r1, [r3, #2]
 800ed78:	68a3      	ldr	r3, [r4, #8]
 800ed7a:	70da      	strb	r2, [r3, #3]
 800ed7c:	2104      	movs	r1, #4
 800ed7e:	68a2      	ldr	r2, [r4, #8]
 800ed80:	6923      	ldr	r3, [r4, #16]
 800ed82:	440a      	add	r2, r1
 800ed84:	7561      	strb	r1, [r4, #21]
 800ed86:	440b      	add	r3, r1
 800ed88:	60a2      	str	r2, [r4, #8]
 800ed8a:	6123      	str	r3, [r4, #16]
 800ed8c:	7da0      	ldrb	r0, [r4, #22]
 800ed8e:	f080 0001 	eor.w	r0, r0, #1
 800ed92:	b002      	add	sp, #8
 800ed94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed98:	9a01      	ldr	r2, [sp, #4]
 800ed9a:	601a      	str	r2, [r3, #0]
 800ed9c:	e7ee      	b.n	800ed7c <ucdr_serialize_uint32_t+0xc0>
 800ed9e:	68a2      	ldr	r2, [r4, #8]
 800eda0:	6923      	ldr	r3, [r4, #16]
 800eda2:	7da0      	ldrb	r0, [r4, #22]
 800eda4:	1b92      	subs	r2, r2, r6
 800eda6:	1b9b      	subs	r3, r3, r6
 800eda8:	7567      	strb	r7, [r4, #21]
 800edaa:	f080 0001 	eor.w	r0, r0, #1
 800edae:	60a2      	str	r2, [r4, #8]
 800edb0:	6123      	str	r3, [r4, #16]
 800edb2:	b002      	add	sp, #8
 800edb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edb8:	68a3      	ldr	r3, [r4, #8]
 800edba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800edbe:	701a      	strb	r2, [r3, #0]
 800edc0:	68a3      	ldr	r3, [r4, #8]
 800edc2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800edc6:	701a      	strb	r2, [r3, #0]
 800edc8:	68a3      	ldr	r3, [r4, #8]
 800edca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800edce:	701a      	strb	r2, [r3, #0]
 800edd0:	e7ad      	b.n	800ed2e <ucdr_serialize_uint32_t+0x72>
 800edd2:	4628      	mov	r0, r5
 800edd4:	ad01      	add	r5, sp, #4
 800edd6:	4632      	mov	r2, r6
 800edd8:	4629      	mov	r1, r5
 800edda:	f00e fa8a 	bl	801d2f2 <memcpy>
 800edde:	4642      	mov	r2, r8
 800ede0:	19a9      	adds	r1, r5, r6
 800ede2:	68a0      	ldr	r0, [r4, #8]
 800ede4:	f00e fa85 	bl	801d2f2 <memcpy>
 800ede8:	e7a1      	b.n	800ed2e <ucdr_serialize_uint32_t+0x72>
 800edea:	bf00      	nop

0800edec <ucdr_serialize_endian_uint32_t>:
 800edec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800edf0:	4604      	mov	r4, r0
 800edf2:	b083      	sub	sp, #12
 800edf4:	460d      	mov	r5, r1
 800edf6:	2104      	movs	r1, #4
 800edf8:	9201      	str	r2, [sp, #4]
 800edfa:	f000 ffbf 	bl	800fd7c <ucdr_buffer_alignment>
 800edfe:	4601      	mov	r1, r0
 800ee00:	4620      	mov	r0, r4
 800ee02:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ee06:	f001 f801 	bl	800fe0c <ucdr_advance_buffer>
 800ee0a:	2104      	movs	r1, #4
 800ee0c:	4620      	mov	r0, r4
 800ee0e:	f000 ff55 	bl	800fcbc <ucdr_check_buffer_available_for>
 800ee12:	2800      	cmp	r0, #0
 800ee14:	d138      	bne.n	800ee88 <ucdr_serialize_endian_uint32_t+0x9c>
 800ee16:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ee1a:	42b7      	cmp	r7, r6
 800ee1c:	d92f      	bls.n	800ee7e <ucdr_serialize_endian_uint32_t+0x92>
 800ee1e:	6923      	ldr	r3, [r4, #16]
 800ee20:	4620      	mov	r0, r4
 800ee22:	60a7      	str	r7, [r4, #8]
 800ee24:	1bbf      	subs	r7, r7, r6
 800ee26:	443b      	add	r3, r7
 800ee28:	f1c7 0904 	rsb	r9, r7, #4
 800ee2c:	6123      	str	r3, [r4, #16]
 800ee2e:	4649      	mov	r1, r9
 800ee30:	f000 ff50 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800ee34:	2800      	cmp	r0, #0
 800ee36:	d04a      	beq.n	800eece <ucdr_serialize_endian_uint32_t+0xe2>
 800ee38:	2d01      	cmp	r5, #1
 800ee3a:	d063      	beq.n	800ef04 <ucdr_serialize_endian_uint32_t+0x118>
 800ee3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ee40:	7033      	strb	r3, [r6, #0]
 800ee42:	2f00      	cmp	r7, #0
 800ee44:	d051      	beq.n	800eeea <ucdr_serialize_endian_uint32_t+0xfe>
 800ee46:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ee4a:	2f01      	cmp	r7, #1
 800ee4c:	7073      	strb	r3, [r6, #1]
 800ee4e:	d050      	beq.n	800eef2 <ucdr_serialize_endian_uint32_t+0x106>
 800ee50:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ee54:	2f02      	cmp	r7, #2
 800ee56:	70b3      	strb	r3, [r6, #2]
 800ee58:	d04f      	beq.n	800eefa <ucdr_serialize_endian_uint32_t+0x10e>
 800ee5a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ee5e:	70f3      	strb	r3, [r6, #3]
 800ee60:	6923      	ldr	r3, [r4, #16]
 800ee62:	2104      	movs	r1, #4
 800ee64:	68a2      	ldr	r2, [r4, #8]
 800ee66:	7da0      	ldrb	r0, [r4, #22]
 800ee68:	3304      	adds	r3, #4
 800ee6a:	444a      	add	r2, r9
 800ee6c:	7561      	strb	r1, [r4, #21]
 800ee6e:	1bdb      	subs	r3, r3, r7
 800ee70:	f080 0001 	eor.w	r0, r0, #1
 800ee74:	60a2      	str	r2, [r4, #8]
 800ee76:	6123      	str	r3, [r4, #16]
 800ee78:	b003      	add	sp, #12
 800ee7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee7e:	2104      	movs	r1, #4
 800ee80:	4620      	mov	r0, r4
 800ee82:	f000 ff27 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800ee86:	b1c8      	cbz	r0, 800eebc <ucdr_serialize_endian_uint32_t+0xd0>
 800ee88:	2d01      	cmp	r5, #1
 800ee8a:	68a3      	ldr	r3, [r4, #8]
 800ee8c:	d01c      	beq.n	800eec8 <ucdr_serialize_endian_uint32_t+0xdc>
 800ee8e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ee92:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ee96:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800ee9a:	7018      	strb	r0, [r3, #0]
 800ee9c:	68a3      	ldr	r3, [r4, #8]
 800ee9e:	705a      	strb	r2, [r3, #1]
 800eea0:	68a3      	ldr	r3, [r4, #8]
 800eea2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800eea6:	7099      	strb	r1, [r3, #2]
 800eea8:	68a3      	ldr	r3, [r4, #8]
 800eeaa:	70da      	strb	r2, [r3, #3]
 800eeac:	2104      	movs	r1, #4
 800eeae:	68a2      	ldr	r2, [r4, #8]
 800eeb0:	6923      	ldr	r3, [r4, #16]
 800eeb2:	440a      	add	r2, r1
 800eeb4:	7561      	strb	r1, [r4, #21]
 800eeb6:	440b      	add	r3, r1
 800eeb8:	60a2      	str	r2, [r4, #8]
 800eeba:	6123      	str	r3, [r4, #16]
 800eebc:	7da0      	ldrb	r0, [r4, #22]
 800eebe:	f080 0001 	eor.w	r0, r0, #1
 800eec2:	b003      	add	sp, #12
 800eec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eec8:	9a01      	ldr	r2, [sp, #4]
 800eeca:	601a      	str	r2, [r3, #0]
 800eecc:	e7ee      	b.n	800eeac <ucdr_serialize_endian_uint32_t+0xc0>
 800eece:	68a2      	ldr	r2, [r4, #8]
 800eed0:	6923      	ldr	r3, [r4, #16]
 800eed2:	7da0      	ldrb	r0, [r4, #22]
 800eed4:	1bd2      	subs	r2, r2, r7
 800eed6:	1bdb      	subs	r3, r3, r7
 800eed8:	f884 8015 	strb.w	r8, [r4, #21]
 800eedc:	f080 0001 	eor.w	r0, r0, #1
 800eee0:	60a2      	str	r2, [r4, #8]
 800eee2:	6123      	str	r3, [r4, #16]
 800eee4:	b003      	add	sp, #12
 800eee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eeea:	68a3      	ldr	r3, [r4, #8]
 800eeec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eef0:	701a      	strb	r2, [r3, #0]
 800eef2:	68a3      	ldr	r3, [r4, #8]
 800eef4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800eef8:	701a      	strb	r2, [r3, #0]
 800eefa:	68a3      	ldr	r3, [r4, #8]
 800eefc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ef00:	701a      	strb	r2, [r3, #0]
 800ef02:	e7ad      	b.n	800ee60 <ucdr_serialize_endian_uint32_t+0x74>
 800ef04:	ad01      	add	r5, sp, #4
 800ef06:	463a      	mov	r2, r7
 800ef08:	4630      	mov	r0, r6
 800ef0a:	4629      	mov	r1, r5
 800ef0c:	f00e f9f1 	bl	801d2f2 <memcpy>
 800ef10:	464a      	mov	r2, r9
 800ef12:	19e9      	adds	r1, r5, r7
 800ef14:	68a0      	ldr	r0, [r4, #8]
 800ef16:	f00e f9ec 	bl	801d2f2 <memcpy>
 800ef1a:	e7a1      	b.n	800ee60 <ucdr_serialize_endian_uint32_t+0x74>

0800ef1c <ucdr_deserialize_uint32_t>:
 800ef1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef20:	4604      	mov	r4, r0
 800ef22:	460d      	mov	r5, r1
 800ef24:	2104      	movs	r1, #4
 800ef26:	f000 ff29 	bl	800fd7c <ucdr_buffer_alignment>
 800ef2a:	4601      	mov	r1, r0
 800ef2c:	4620      	mov	r0, r4
 800ef2e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ef32:	f000 ff6b 	bl	800fe0c <ucdr_advance_buffer>
 800ef36:	2104      	movs	r1, #4
 800ef38:	4620      	mov	r0, r4
 800ef3a:	f000 febf 	bl	800fcbc <ucdr_check_buffer_available_for>
 800ef3e:	2800      	cmp	r0, #0
 800ef40:	d138      	bne.n	800efb4 <ucdr_deserialize_uint32_t+0x98>
 800ef42:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ef46:	42b7      	cmp	r7, r6
 800ef48:	d92f      	bls.n	800efaa <ucdr_deserialize_uint32_t+0x8e>
 800ef4a:	6923      	ldr	r3, [r4, #16]
 800ef4c:	4620      	mov	r0, r4
 800ef4e:	60a7      	str	r7, [r4, #8]
 800ef50:	1bbf      	subs	r7, r7, r6
 800ef52:	443b      	add	r3, r7
 800ef54:	f1c7 0904 	rsb	r9, r7, #4
 800ef58:	6123      	str	r3, [r4, #16]
 800ef5a:	4649      	mov	r1, r9
 800ef5c:	f000 feba 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800ef60:	2800      	cmp	r0, #0
 800ef62:	d046      	beq.n	800eff2 <ucdr_deserialize_uint32_t+0xd6>
 800ef64:	7d23      	ldrb	r3, [r4, #20]
 800ef66:	2b01      	cmp	r3, #1
 800ef68:	d05c      	beq.n	800f024 <ucdr_deserialize_uint32_t+0x108>
 800ef6a:	78f3      	ldrb	r3, [r6, #3]
 800ef6c:	702b      	strb	r3, [r5, #0]
 800ef6e:	2f00      	cmp	r7, #0
 800ef70:	d04c      	beq.n	800f00c <ucdr_deserialize_uint32_t+0xf0>
 800ef72:	78b3      	ldrb	r3, [r6, #2]
 800ef74:	2f01      	cmp	r7, #1
 800ef76:	706b      	strb	r3, [r5, #1]
 800ef78:	f105 0302 	add.w	r3, r5, #2
 800ef7c:	d04a      	beq.n	800f014 <ucdr_deserialize_uint32_t+0xf8>
 800ef7e:	7873      	ldrb	r3, [r6, #1]
 800ef80:	2f02      	cmp	r7, #2
 800ef82:	70ab      	strb	r3, [r5, #2]
 800ef84:	f105 0303 	add.w	r3, r5, #3
 800ef88:	d048      	beq.n	800f01c <ucdr_deserialize_uint32_t+0x100>
 800ef8a:	7833      	ldrb	r3, [r6, #0]
 800ef8c:	70eb      	strb	r3, [r5, #3]
 800ef8e:	6923      	ldr	r3, [r4, #16]
 800ef90:	2104      	movs	r1, #4
 800ef92:	68a2      	ldr	r2, [r4, #8]
 800ef94:	3304      	adds	r3, #4
 800ef96:	7da0      	ldrb	r0, [r4, #22]
 800ef98:	444a      	add	r2, r9
 800ef9a:	7561      	strb	r1, [r4, #21]
 800ef9c:	1bdb      	subs	r3, r3, r7
 800ef9e:	f080 0001 	eor.w	r0, r0, #1
 800efa2:	60a2      	str	r2, [r4, #8]
 800efa4:	6123      	str	r3, [r4, #16]
 800efa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efaa:	2104      	movs	r1, #4
 800efac:	4620      	mov	r0, r4
 800efae:	f000 fe91 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800efb2:	b1b0      	cbz	r0, 800efe2 <ucdr_deserialize_uint32_t+0xc6>
 800efb4:	7d23      	ldrb	r3, [r4, #20]
 800efb6:	2b01      	cmp	r3, #1
 800efb8:	68a3      	ldr	r3, [r4, #8]
 800efba:	d017      	beq.n	800efec <ucdr_deserialize_uint32_t+0xd0>
 800efbc:	78db      	ldrb	r3, [r3, #3]
 800efbe:	702b      	strb	r3, [r5, #0]
 800efc0:	68a3      	ldr	r3, [r4, #8]
 800efc2:	789b      	ldrb	r3, [r3, #2]
 800efc4:	706b      	strb	r3, [r5, #1]
 800efc6:	68a3      	ldr	r3, [r4, #8]
 800efc8:	785b      	ldrb	r3, [r3, #1]
 800efca:	70ab      	strb	r3, [r5, #2]
 800efcc:	68a3      	ldr	r3, [r4, #8]
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	70eb      	strb	r3, [r5, #3]
 800efd2:	2104      	movs	r1, #4
 800efd4:	68a2      	ldr	r2, [r4, #8]
 800efd6:	6923      	ldr	r3, [r4, #16]
 800efd8:	440a      	add	r2, r1
 800efda:	7561      	strb	r1, [r4, #21]
 800efdc:	440b      	add	r3, r1
 800efde:	60a2      	str	r2, [r4, #8]
 800efe0:	6123      	str	r3, [r4, #16]
 800efe2:	7da0      	ldrb	r0, [r4, #22]
 800efe4:	f080 0001 	eor.w	r0, r0, #1
 800efe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	602b      	str	r3, [r5, #0]
 800eff0:	e7ef      	b.n	800efd2 <ucdr_deserialize_uint32_t+0xb6>
 800eff2:	68a2      	ldr	r2, [r4, #8]
 800eff4:	6923      	ldr	r3, [r4, #16]
 800eff6:	1bd2      	subs	r2, r2, r7
 800eff8:	7da0      	ldrb	r0, [r4, #22]
 800effa:	1bdb      	subs	r3, r3, r7
 800effc:	f884 8015 	strb.w	r8, [r4, #21]
 800f000:	f080 0001 	eor.w	r0, r0, #1
 800f004:	60a2      	str	r2, [r4, #8]
 800f006:	6123      	str	r3, [r4, #16]
 800f008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f00c:	68a3      	ldr	r3, [r4, #8]
 800f00e:	789b      	ldrb	r3, [r3, #2]
 800f010:	706b      	strb	r3, [r5, #1]
 800f012:	1cab      	adds	r3, r5, #2
 800f014:	68a2      	ldr	r2, [r4, #8]
 800f016:	7852      	ldrb	r2, [r2, #1]
 800f018:	f803 2b01 	strb.w	r2, [r3], #1
 800f01c:	68a2      	ldr	r2, [r4, #8]
 800f01e:	7812      	ldrb	r2, [r2, #0]
 800f020:	701a      	strb	r2, [r3, #0]
 800f022:	e7b4      	b.n	800ef8e <ucdr_deserialize_uint32_t+0x72>
 800f024:	4631      	mov	r1, r6
 800f026:	463a      	mov	r2, r7
 800f028:	4628      	mov	r0, r5
 800f02a:	f00e f962 	bl	801d2f2 <memcpy>
 800f02e:	464a      	mov	r2, r9
 800f030:	19e8      	adds	r0, r5, r7
 800f032:	68a1      	ldr	r1, [r4, #8]
 800f034:	f00e f95d 	bl	801d2f2 <memcpy>
 800f038:	e7a9      	b.n	800ef8e <ucdr_deserialize_uint32_t+0x72>
 800f03a:	bf00      	nop

0800f03c <ucdr_deserialize_endian_uint32_t>:
 800f03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f040:	4604      	mov	r4, r0
 800f042:	460e      	mov	r6, r1
 800f044:	2104      	movs	r1, #4
 800f046:	4615      	mov	r5, r2
 800f048:	f000 fe98 	bl	800fd7c <ucdr_buffer_alignment>
 800f04c:	4601      	mov	r1, r0
 800f04e:	4620      	mov	r0, r4
 800f050:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f054:	f000 feda 	bl	800fe0c <ucdr_advance_buffer>
 800f058:	2104      	movs	r1, #4
 800f05a:	4620      	mov	r0, r4
 800f05c:	f000 fe2e 	bl	800fcbc <ucdr_check_buffer_available_for>
 800f060:	2800      	cmp	r0, #0
 800f062:	d13c      	bne.n	800f0de <ucdr_deserialize_endian_uint32_t+0xa2>
 800f064:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f068:	42bb      	cmp	r3, r7
 800f06a:	d933      	bls.n	800f0d4 <ucdr_deserialize_endian_uint32_t+0x98>
 800f06c:	eba3 0907 	sub.w	r9, r3, r7
 800f070:	60a3      	str	r3, [r4, #8]
 800f072:	6923      	ldr	r3, [r4, #16]
 800f074:	4620      	mov	r0, r4
 800f076:	f1c9 0a04 	rsb	sl, r9, #4
 800f07a:	444b      	add	r3, r9
 800f07c:	4651      	mov	r1, sl
 800f07e:	6123      	str	r3, [r4, #16]
 800f080:	f000 fe28 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800f084:	2800      	cmp	r0, #0
 800f086:	d048      	beq.n	800f11a <ucdr_deserialize_endian_uint32_t+0xde>
 800f088:	2e01      	cmp	r6, #1
 800f08a:	d061      	beq.n	800f150 <ucdr_deserialize_endian_uint32_t+0x114>
 800f08c:	78fb      	ldrb	r3, [r7, #3]
 800f08e:	702b      	strb	r3, [r5, #0]
 800f090:	f1b9 0f00 	cmp.w	r9, #0
 800f094:	d050      	beq.n	800f138 <ucdr_deserialize_endian_uint32_t+0xfc>
 800f096:	78bb      	ldrb	r3, [r7, #2]
 800f098:	f1b9 0f01 	cmp.w	r9, #1
 800f09c:	706b      	strb	r3, [r5, #1]
 800f09e:	f105 0302 	add.w	r3, r5, #2
 800f0a2:	d04d      	beq.n	800f140 <ucdr_deserialize_endian_uint32_t+0x104>
 800f0a4:	787b      	ldrb	r3, [r7, #1]
 800f0a6:	f1b9 0f02 	cmp.w	r9, #2
 800f0aa:	70ab      	strb	r3, [r5, #2]
 800f0ac:	f105 0303 	add.w	r3, r5, #3
 800f0b0:	d04a      	beq.n	800f148 <ucdr_deserialize_endian_uint32_t+0x10c>
 800f0b2:	783b      	ldrb	r3, [r7, #0]
 800f0b4:	70eb      	strb	r3, [r5, #3]
 800f0b6:	6923      	ldr	r3, [r4, #16]
 800f0b8:	2104      	movs	r1, #4
 800f0ba:	68a2      	ldr	r2, [r4, #8]
 800f0bc:	3304      	adds	r3, #4
 800f0be:	7da0      	ldrb	r0, [r4, #22]
 800f0c0:	4452      	add	r2, sl
 800f0c2:	7561      	strb	r1, [r4, #21]
 800f0c4:	eba3 0309 	sub.w	r3, r3, r9
 800f0c8:	f080 0001 	eor.w	r0, r0, #1
 800f0cc:	60a2      	str	r2, [r4, #8]
 800f0ce:	6123      	str	r3, [r4, #16]
 800f0d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0d4:	2104      	movs	r1, #4
 800f0d6:	4620      	mov	r0, r4
 800f0d8:	f000 fdfc 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800f0dc:	b1a8      	cbz	r0, 800f10a <ucdr_deserialize_endian_uint32_t+0xce>
 800f0de:	2e01      	cmp	r6, #1
 800f0e0:	68a3      	ldr	r3, [r4, #8]
 800f0e2:	d017      	beq.n	800f114 <ucdr_deserialize_endian_uint32_t+0xd8>
 800f0e4:	78db      	ldrb	r3, [r3, #3]
 800f0e6:	702b      	strb	r3, [r5, #0]
 800f0e8:	68a3      	ldr	r3, [r4, #8]
 800f0ea:	789b      	ldrb	r3, [r3, #2]
 800f0ec:	706b      	strb	r3, [r5, #1]
 800f0ee:	68a3      	ldr	r3, [r4, #8]
 800f0f0:	785b      	ldrb	r3, [r3, #1]
 800f0f2:	70ab      	strb	r3, [r5, #2]
 800f0f4:	68a3      	ldr	r3, [r4, #8]
 800f0f6:	781b      	ldrb	r3, [r3, #0]
 800f0f8:	70eb      	strb	r3, [r5, #3]
 800f0fa:	2104      	movs	r1, #4
 800f0fc:	68a2      	ldr	r2, [r4, #8]
 800f0fe:	6923      	ldr	r3, [r4, #16]
 800f100:	440a      	add	r2, r1
 800f102:	7561      	strb	r1, [r4, #21]
 800f104:	440b      	add	r3, r1
 800f106:	60a2      	str	r2, [r4, #8]
 800f108:	6123      	str	r3, [r4, #16]
 800f10a:	7da0      	ldrb	r0, [r4, #22]
 800f10c:	f080 0001 	eor.w	r0, r0, #1
 800f110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	602b      	str	r3, [r5, #0]
 800f118:	e7ef      	b.n	800f0fa <ucdr_deserialize_endian_uint32_t+0xbe>
 800f11a:	68a2      	ldr	r2, [r4, #8]
 800f11c:	6923      	ldr	r3, [r4, #16]
 800f11e:	eba2 0209 	sub.w	r2, r2, r9
 800f122:	7da0      	ldrb	r0, [r4, #22]
 800f124:	eba3 0309 	sub.w	r3, r3, r9
 800f128:	f884 8015 	strb.w	r8, [r4, #21]
 800f12c:	f080 0001 	eor.w	r0, r0, #1
 800f130:	60a2      	str	r2, [r4, #8]
 800f132:	6123      	str	r3, [r4, #16]
 800f134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f138:	68a3      	ldr	r3, [r4, #8]
 800f13a:	789b      	ldrb	r3, [r3, #2]
 800f13c:	706b      	strb	r3, [r5, #1]
 800f13e:	1cab      	adds	r3, r5, #2
 800f140:	68a2      	ldr	r2, [r4, #8]
 800f142:	7852      	ldrb	r2, [r2, #1]
 800f144:	f803 2b01 	strb.w	r2, [r3], #1
 800f148:	68a2      	ldr	r2, [r4, #8]
 800f14a:	7812      	ldrb	r2, [r2, #0]
 800f14c:	701a      	strb	r2, [r3, #0]
 800f14e:	e7b2      	b.n	800f0b6 <ucdr_deserialize_endian_uint32_t+0x7a>
 800f150:	4639      	mov	r1, r7
 800f152:	464a      	mov	r2, r9
 800f154:	4628      	mov	r0, r5
 800f156:	f00e f8cc 	bl	801d2f2 <memcpy>
 800f15a:	4652      	mov	r2, sl
 800f15c:	eb05 0009 	add.w	r0, r5, r9
 800f160:	68a1      	ldr	r1, [r4, #8]
 800f162:	f00e f8c6 	bl	801d2f2 <memcpy>
 800f166:	e7a6      	b.n	800f0b6 <ucdr_deserialize_endian_uint32_t+0x7a>

0800f168 <ucdr_serialize_uint64_t>:
 800f168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f16c:	4604      	mov	r4, r0
 800f16e:	b082      	sub	sp, #8
 800f170:	2108      	movs	r1, #8
 800f172:	e9cd 2300 	strd	r2, r3, [sp]
 800f176:	f000 fe01 	bl	800fd7c <ucdr_buffer_alignment>
 800f17a:	4601      	mov	r1, r0
 800f17c:	4620      	mov	r0, r4
 800f17e:	7d67      	ldrb	r7, [r4, #21]
 800f180:	f000 fe44 	bl	800fe0c <ucdr_advance_buffer>
 800f184:	2108      	movs	r1, #8
 800f186:	4620      	mov	r0, r4
 800f188:	f000 fd98 	bl	800fcbc <ucdr_check_buffer_available_for>
 800f18c:	2800      	cmp	r0, #0
 800f18e:	d14e      	bne.n	800f22e <ucdr_serialize_uint64_t+0xc6>
 800f190:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f194:	42ab      	cmp	r3, r5
 800f196:	d945      	bls.n	800f224 <ucdr_serialize_uint64_t+0xbc>
 800f198:	1b5e      	subs	r6, r3, r5
 800f19a:	60a3      	str	r3, [r4, #8]
 800f19c:	6923      	ldr	r3, [r4, #16]
 800f19e:	4620      	mov	r0, r4
 800f1a0:	f1c6 0808 	rsb	r8, r6, #8
 800f1a4:	4433      	add	r3, r6
 800f1a6:	4641      	mov	r1, r8
 800f1a8:	6123      	str	r3, [r4, #16]
 800f1aa:	f000 fd93 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800f1ae:	2800      	cmp	r0, #0
 800f1b0:	d074      	beq.n	800f29c <ucdr_serialize_uint64_t+0x134>
 800f1b2:	7d23      	ldrb	r3, [r4, #20]
 800f1b4:	2b01      	cmp	r3, #1
 800f1b6:	f000 809b 	beq.w	800f2f0 <ucdr_serialize_uint64_t+0x188>
 800f1ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f1be:	702b      	strb	r3, [r5, #0]
 800f1c0:	2e00      	cmp	r6, #0
 800f1c2:	d078      	beq.n	800f2b6 <ucdr_serialize_uint64_t+0x14e>
 800f1c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f1c8:	2e01      	cmp	r6, #1
 800f1ca:	706b      	strb	r3, [r5, #1]
 800f1cc:	d077      	beq.n	800f2be <ucdr_serialize_uint64_t+0x156>
 800f1ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f1d2:	2e02      	cmp	r6, #2
 800f1d4:	70ab      	strb	r3, [r5, #2]
 800f1d6:	d076      	beq.n	800f2c6 <ucdr_serialize_uint64_t+0x15e>
 800f1d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f1dc:	2e03      	cmp	r6, #3
 800f1de:	70eb      	strb	r3, [r5, #3]
 800f1e0:	d075      	beq.n	800f2ce <ucdr_serialize_uint64_t+0x166>
 800f1e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f1e6:	2e04      	cmp	r6, #4
 800f1e8:	712b      	strb	r3, [r5, #4]
 800f1ea:	d074      	beq.n	800f2d6 <ucdr_serialize_uint64_t+0x16e>
 800f1ec:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f1f0:	2e05      	cmp	r6, #5
 800f1f2:	716b      	strb	r3, [r5, #5]
 800f1f4:	d073      	beq.n	800f2de <ucdr_serialize_uint64_t+0x176>
 800f1f6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f1fa:	2e06      	cmp	r6, #6
 800f1fc:	71ab      	strb	r3, [r5, #6]
 800f1fe:	d072      	beq.n	800f2e6 <ucdr_serialize_uint64_t+0x17e>
 800f200:	f89d 3000 	ldrb.w	r3, [sp]
 800f204:	71eb      	strb	r3, [r5, #7]
 800f206:	6923      	ldr	r3, [r4, #16]
 800f208:	2108      	movs	r1, #8
 800f20a:	68a2      	ldr	r2, [r4, #8]
 800f20c:	3308      	adds	r3, #8
 800f20e:	7da0      	ldrb	r0, [r4, #22]
 800f210:	4442      	add	r2, r8
 800f212:	7561      	strb	r1, [r4, #21]
 800f214:	1b9e      	subs	r6, r3, r6
 800f216:	f080 0001 	eor.w	r0, r0, #1
 800f21a:	60a2      	str	r2, [r4, #8]
 800f21c:	6126      	str	r6, [r4, #16]
 800f21e:	b002      	add	sp, #8
 800f220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f224:	2108      	movs	r1, #8
 800f226:	4620      	mov	r0, r4
 800f228:	f000 fd54 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800f22c:	b350      	cbz	r0, 800f284 <ucdr_serialize_uint64_t+0x11c>
 800f22e:	7d23      	ldrb	r3, [r4, #20]
 800f230:	2b01      	cmp	r3, #1
 800f232:	d02d      	beq.n	800f290 <ucdr_serialize_uint64_t+0x128>
 800f234:	68a3      	ldr	r3, [r4, #8]
 800f236:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f23a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f23e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f242:	7018      	strb	r0, [r3, #0]
 800f244:	68a3      	ldr	r3, [r4, #8]
 800f246:	705a      	strb	r2, [r3, #1]
 800f248:	68a3      	ldr	r3, [r4, #8]
 800f24a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f24e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800f252:	7099      	strb	r1, [r3, #2]
 800f254:	68a3      	ldr	r3, [r4, #8]
 800f256:	70da      	strb	r2, [r3, #3]
 800f258:	68a3      	ldr	r3, [r4, #8]
 800f25a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f25e:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800f262:	7118      	strb	r0, [r3, #4]
 800f264:	68a3      	ldr	r3, [r4, #8]
 800f266:	715a      	strb	r2, [r3, #5]
 800f268:	68a3      	ldr	r3, [r4, #8]
 800f26a:	f89d 2000 	ldrb.w	r2, [sp]
 800f26e:	7199      	strb	r1, [r3, #6]
 800f270:	68a3      	ldr	r3, [r4, #8]
 800f272:	71da      	strb	r2, [r3, #7]
 800f274:	2108      	movs	r1, #8
 800f276:	68a2      	ldr	r2, [r4, #8]
 800f278:	6923      	ldr	r3, [r4, #16]
 800f27a:	440a      	add	r2, r1
 800f27c:	7561      	strb	r1, [r4, #21]
 800f27e:	440b      	add	r3, r1
 800f280:	60a2      	str	r2, [r4, #8]
 800f282:	6123      	str	r3, [r4, #16]
 800f284:	7da0      	ldrb	r0, [r4, #22]
 800f286:	f080 0001 	eor.w	r0, r0, #1
 800f28a:	b002      	add	sp, #8
 800f28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f290:	466b      	mov	r3, sp
 800f292:	68a2      	ldr	r2, [r4, #8]
 800f294:	cb03      	ldmia	r3!, {r0, r1}
 800f296:	6010      	str	r0, [r2, #0]
 800f298:	6051      	str	r1, [r2, #4]
 800f29a:	e7eb      	b.n	800f274 <ucdr_serialize_uint64_t+0x10c>
 800f29c:	68a2      	ldr	r2, [r4, #8]
 800f29e:	6923      	ldr	r3, [r4, #16]
 800f2a0:	7da0      	ldrb	r0, [r4, #22]
 800f2a2:	1b92      	subs	r2, r2, r6
 800f2a4:	1b9b      	subs	r3, r3, r6
 800f2a6:	7567      	strb	r7, [r4, #21]
 800f2a8:	f080 0001 	eor.w	r0, r0, #1
 800f2ac:	60a2      	str	r2, [r4, #8]
 800f2ae:	6123      	str	r3, [r4, #16]
 800f2b0:	b002      	add	sp, #8
 800f2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2b6:	68a3      	ldr	r3, [r4, #8]
 800f2b8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f2bc:	701a      	strb	r2, [r3, #0]
 800f2be:	68a3      	ldr	r3, [r4, #8]
 800f2c0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f2c4:	701a      	strb	r2, [r3, #0]
 800f2c6:	68a3      	ldr	r3, [r4, #8]
 800f2c8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f2cc:	701a      	strb	r2, [r3, #0]
 800f2ce:	68a3      	ldr	r3, [r4, #8]
 800f2d0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f2d4:	701a      	strb	r2, [r3, #0]
 800f2d6:	68a3      	ldr	r3, [r4, #8]
 800f2d8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f2dc:	701a      	strb	r2, [r3, #0]
 800f2de:	68a3      	ldr	r3, [r4, #8]
 800f2e0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f2e4:	701a      	strb	r2, [r3, #0]
 800f2e6:	68a3      	ldr	r3, [r4, #8]
 800f2e8:	f89d 2000 	ldrb.w	r2, [sp]
 800f2ec:	701a      	strb	r2, [r3, #0]
 800f2ee:	e78a      	b.n	800f206 <ucdr_serialize_uint64_t+0x9e>
 800f2f0:	4628      	mov	r0, r5
 800f2f2:	466d      	mov	r5, sp
 800f2f4:	4632      	mov	r2, r6
 800f2f6:	4629      	mov	r1, r5
 800f2f8:	f00d fffb 	bl	801d2f2 <memcpy>
 800f2fc:	4642      	mov	r2, r8
 800f2fe:	19a9      	adds	r1, r5, r6
 800f300:	68a0      	ldr	r0, [r4, #8]
 800f302:	f00d fff6 	bl	801d2f2 <memcpy>
 800f306:	e77e      	b.n	800f206 <ucdr_serialize_uint64_t+0x9e>

0800f308 <ucdr_serialize_int16_t>:
 800f308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f30c:	460b      	mov	r3, r1
 800f30e:	b082      	sub	sp, #8
 800f310:	4604      	mov	r4, r0
 800f312:	2102      	movs	r1, #2
 800f314:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f318:	f000 fd30 	bl	800fd7c <ucdr_buffer_alignment>
 800f31c:	4601      	mov	r1, r0
 800f31e:	4620      	mov	r0, r4
 800f320:	7d67      	ldrb	r7, [r4, #21]
 800f322:	f000 fd73 	bl	800fe0c <ucdr_advance_buffer>
 800f326:	2102      	movs	r1, #2
 800f328:	4620      	mov	r0, r4
 800f32a:	f000 fcc7 	bl	800fcbc <ucdr_check_buffer_available_for>
 800f32e:	bb78      	cbnz	r0, 800f390 <ucdr_serialize_int16_t+0x88>
 800f330:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f334:	42ab      	cmp	r3, r5
 800f336:	d926      	bls.n	800f386 <ucdr_serialize_int16_t+0x7e>
 800f338:	1b5e      	subs	r6, r3, r5
 800f33a:	60a3      	str	r3, [r4, #8]
 800f33c:	6923      	ldr	r3, [r4, #16]
 800f33e:	4620      	mov	r0, r4
 800f340:	f1c6 0802 	rsb	r8, r6, #2
 800f344:	4433      	add	r3, r6
 800f346:	4641      	mov	r1, r8
 800f348:	6123      	str	r3, [r4, #16]
 800f34a:	f000 fcc3 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800f34e:	2800      	cmp	r0, #0
 800f350:	d03b      	beq.n	800f3ca <ucdr_serialize_int16_t+0xc2>
 800f352:	7d23      	ldrb	r3, [r4, #20]
 800f354:	2b01      	cmp	r3, #1
 800f356:	d04a      	beq.n	800f3ee <ucdr_serialize_int16_t+0xe6>
 800f358:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f35c:	702b      	strb	r3, [r5, #0]
 800f35e:	2e00      	cmp	r6, #0
 800f360:	d040      	beq.n	800f3e4 <ucdr_serialize_int16_t+0xdc>
 800f362:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f366:	706b      	strb	r3, [r5, #1]
 800f368:	6923      	ldr	r3, [r4, #16]
 800f36a:	2102      	movs	r1, #2
 800f36c:	68a2      	ldr	r2, [r4, #8]
 800f36e:	3302      	adds	r3, #2
 800f370:	7da0      	ldrb	r0, [r4, #22]
 800f372:	4442      	add	r2, r8
 800f374:	7561      	strb	r1, [r4, #21]
 800f376:	1b9e      	subs	r6, r3, r6
 800f378:	f080 0001 	eor.w	r0, r0, #1
 800f37c:	60a2      	str	r2, [r4, #8]
 800f37e:	6126      	str	r6, [r4, #16]
 800f380:	b002      	add	sp, #8
 800f382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f386:	2102      	movs	r1, #2
 800f388:	4620      	mov	r0, r4
 800f38a:	f000 fca3 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800f38e:	b190      	cbz	r0, 800f3b6 <ucdr_serialize_int16_t+0xae>
 800f390:	7d23      	ldrb	r3, [r4, #20]
 800f392:	2b01      	cmp	r3, #1
 800f394:	68a3      	ldr	r3, [r4, #8]
 800f396:	d014      	beq.n	800f3c2 <ucdr_serialize_int16_t+0xba>
 800f398:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f39c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f3a0:	7019      	strb	r1, [r3, #0]
 800f3a2:	68a3      	ldr	r3, [r4, #8]
 800f3a4:	705a      	strb	r2, [r3, #1]
 800f3a6:	2102      	movs	r1, #2
 800f3a8:	68a2      	ldr	r2, [r4, #8]
 800f3aa:	6923      	ldr	r3, [r4, #16]
 800f3ac:	440a      	add	r2, r1
 800f3ae:	7561      	strb	r1, [r4, #21]
 800f3b0:	440b      	add	r3, r1
 800f3b2:	60a2      	str	r2, [r4, #8]
 800f3b4:	6123      	str	r3, [r4, #16]
 800f3b6:	7da0      	ldrb	r0, [r4, #22]
 800f3b8:	f080 0001 	eor.w	r0, r0, #1
 800f3bc:	b002      	add	sp, #8
 800f3be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3c2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f3c6:	801a      	strh	r2, [r3, #0]
 800f3c8:	e7ed      	b.n	800f3a6 <ucdr_serialize_int16_t+0x9e>
 800f3ca:	68a2      	ldr	r2, [r4, #8]
 800f3cc:	6923      	ldr	r3, [r4, #16]
 800f3ce:	7da0      	ldrb	r0, [r4, #22]
 800f3d0:	1b92      	subs	r2, r2, r6
 800f3d2:	1b9b      	subs	r3, r3, r6
 800f3d4:	7567      	strb	r7, [r4, #21]
 800f3d6:	f080 0001 	eor.w	r0, r0, #1
 800f3da:	60a2      	str	r2, [r4, #8]
 800f3dc:	6123      	str	r3, [r4, #16]
 800f3de:	b002      	add	sp, #8
 800f3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3e4:	68a3      	ldr	r3, [r4, #8]
 800f3e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f3ea:	701a      	strb	r2, [r3, #0]
 800f3ec:	e7bc      	b.n	800f368 <ucdr_serialize_int16_t+0x60>
 800f3ee:	4628      	mov	r0, r5
 800f3f0:	f10d 0506 	add.w	r5, sp, #6
 800f3f4:	4632      	mov	r2, r6
 800f3f6:	4629      	mov	r1, r5
 800f3f8:	f00d ff7b 	bl	801d2f2 <memcpy>
 800f3fc:	4642      	mov	r2, r8
 800f3fe:	19a9      	adds	r1, r5, r6
 800f400:	68a0      	ldr	r0, [r4, #8]
 800f402:	f00d ff76 	bl	801d2f2 <memcpy>
 800f406:	e7af      	b.n	800f368 <ucdr_serialize_int16_t+0x60>

0800f408 <ucdr_deserialize_int16_t>:
 800f408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f40c:	4604      	mov	r4, r0
 800f40e:	460d      	mov	r5, r1
 800f410:	2102      	movs	r1, #2
 800f412:	f000 fcb3 	bl	800fd7c <ucdr_buffer_alignment>
 800f416:	4601      	mov	r1, r0
 800f418:	4620      	mov	r0, r4
 800f41a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f41e:	f000 fcf5 	bl	800fe0c <ucdr_advance_buffer>
 800f422:	2102      	movs	r1, #2
 800f424:	4620      	mov	r0, r4
 800f426:	f000 fc49 	bl	800fcbc <ucdr_check_buffer_available_for>
 800f42a:	bb60      	cbnz	r0, 800f486 <ucdr_deserialize_int16_t+0x7e>
 800f42c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f430:	42be      	cmp	r6, r7
 800f432:	d923      	bls.n	800f47c <ucdr_deserialize_int16_t+0x74>
 800f434:	6923      	ldr	r3, [r4, #16]
 800f436:	4620      	mov	r0, r4
 800f438:	60a6      	str	r6, [r4, #8]
 800f43a:	1bf6      	subs	r6, r6, r7
 800f43c:	4433      	add	r3, r6
 800f43e:	f1c6 0902 	rsb	r9, r6, #2
 800f442:	6123      	str	r3, [r4, #16]
 800f444:	4649      	mov	r1, r9
 800f446:	f000 fc45 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800f44a:	2800      	cmp	r0, #0
 800f44c:	d034      	beq.n	800f4b8 <ucdr_deserialize_int16_t+0xb0>
 800f44e:	7d23      	ldrb	r3, [r4, #20]
 800f450:	2b01      	cmp	r3, #1
 800f452:	d042      	beq.n	800f4da <ucdr_deserialize_int16_t+0xd2>
 800f454:	787b      	ldrb	r3, [r7, #1]
 800f456:	702b      	strb	r3, [r5, #0]
 800f458:	2e00      	cmp	r6, #0
 800f45a:	d03a      	beq.n	800f4d2 <ucdr_deserialize_int16_t+0xca>
 800f45c:	783b      	ldrb	r3, [r7, #0]
 800f45e:	706b      	strb	r3, [r5, #1]
 800f460:	6923      	ldr	r3, [r4, #16]
 800f462:	2102      	movs	r1, #2
 800f464:	68a2      	ldr	r2, [r4, #8]
 800f466:	3302      	adds	r3, #2
 800f468:	7da0      	ldrb	r0, [r4, #22]
 800f46a:	444a      	add	r2, r9
 800f46c:	7561      	strb	r1, [r4, #21]
 800f46e:	1b9b      	subs	r3, r3, r6
 800f470:	f080 0001 	eor.w	r0, r0, #1
 800f474:	60a2      	str	r2, [r4, #8]
 800f476:	6123      	str	r3, [r4, #16]
 800f478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f47c:	2102      	movs	r1, #2
 800f47e:	4620      	mov	r0, r4
 800f480:	f000 fc28 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800f484:	b180      	cbz	r0, 800f4a8 <ucdr_deserialize_int16_t+0xa0>
 800f486:	7d23      	ldrb	r3, [r4, #20]
 800f488:	2b01      	cmp	r3, #1
 800f48a:	68a3      	ldr	r3, [r4, #8]
 800f48c:	d011      	beq.n	800f4b2 <ucdr_deserialize_int16_t+0xaa>
 800f48e:	785b      	ldrb	r3, [r3, #1]
 800f490:	702b      	strb	r3, [r5, #0]
 800f492:	68a3      	ldr	r3, [r4, #8]
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	706b      	strb	r3, [r5, #1]
 800f498:	2102      	movs	r1, #2
 800f49a:	68a2      	ldr	r2, [r4, #8]
 800f49c:	6923      	ldr	r3, [r4, #16]
 800f49e:	440a      	add	r2, r1
 800f4a0:	7561      	strb	r1, [r4, #21]
 800f4a2:	440b      	add	r3, r1
 800f4a4:	60a2      	str	r2, [r4, #8]
 800f4a6:	6123      	str	r3, [r4, #16]
 800f4a8:	7da0      	ldrb	r0, [r4, #22]
 800f4aa:	f080 0001 	eor.w	r0, r0, #1
 800f4ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4b2:	881b      	ldrh	r3, [r3, #0]
 800f4b4:	802b      	strh	r3, [r5, #0]
 800f4b6:	e7ef      	b.n	800f498 <ucdr_deserialize_int16_t+0x90>
 800f4b8:	68a2      	ldr	r2, [r4, #8]
 800f4ba:	6923      	ldr	r3, [r4, #16]
 800f4bc:	1b92      	subs	r2, r2, r6
 800f4be:	7da0      	ldrb	r0, [r4, #22]
 800f4c0:	1b9b      	subs	r3, r3, r6
 800f4c2:	f884 8015 	strb.w	r8, [r4, #21]
 800f4c6:	f080 0001 	eor.w	r0, r0, #1
 800f4ca:	60a2      	str	r2, [r4, #8]
 800f4cc:	6123      	str	r3, [r4, #16]
 800f4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4d2:	68a3      	ldr	r3, [r4, #8]
 800f4d4:	781b      	ldrb	r3, [r3, #0]
 800f4d6:	706b      	strb	r3, [r5, #1]
 800f4d8:	e7c2      	b.n	800f460 <ucdr_deserialize_int16_t+0x58>
 800f4da:	4639      	mov	r1, r7
 800f4dc:	4632      	mov	r2, r6
 800f4de:	4628      	mov	r0, r5
 800f4e0:	f00d ff07 	bl	801d2f2 <memcpy>
 800f4e4:	464a      	mov	r2, r9
 800f4e6:	19a8      	adds	r0, r5, r6
 800f4e8:	68a1      	ldr	r1, [r4, #8]
 800f4ea:	f00d ff02 	bl	801d2f2 <memcpy>
 800f4ee:	e7b7      	b.n	800f460 <ucdr_deserialize_int16_t+0x58>

0800f4f0 <ucdr_serialize_int32_t>:
 800f4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4f4:	b082      	sub	sp, #8
 800f4f6:	4604      	mov	r4, r0
 800f4f8:	9101      	str	r1, [sp, #4]
 800f4fa:	2104      	movs	r1, #4
 800f4fc:	f000 fc3e 	bl	800fd7c <ucdr_buffer_alignment>
 800f500:	4601      	mov	r1, r0
 800f502:	4620      	mov	r0, r4
 800f504:	7d67      	ldrb	r7, [r4, #21]
 800f506:	f000 fc81 	bl	800fe0c <ucdr_advance_buffer>
 800f50a:	2104      	movs	r1, #4
 800f50c:	4620      	mov	r0, r4
 800f50e:	f000 fbd5 	bl	800fcbc <ucdr_check_buffer_available_for>
 800f512:	2800      	cmp	r0, #0
 800f514:	d139      	bne.n	800f58a <ucdr_serialize_int32_t+0x9a>
 800f516:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f51a:	42ab      	cmp	r3, r5
 800f51c:	d930      	bls.n	800f580 <ucdr_serialize_int32_t+0x90>
 800f51e:	1b5e      	subs	r6, r3, r5
 800f520:	60a3      	str	r3, [r4, #8]
 800f522:	6923      	ldr	r3, [r4, #16]
 800f524:	4620      	mov	r0, r4
 800f526:	f1c6 0804 	rsb	r8, r6, #4
 800f52a:	4433      	add	r3, r6
 800f52c:	4641      	mov	r1, r8
 800f52e:	6123      	str	r3, [r4, #16]
 800f530:	f000 fbd0 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800f534:	2800      	cmp	r0, #0
 800f536:	d04c      	beq.n	800f5d2 <ucdr_serialize_int32_t+0xe2>
 800f538:	7d23      	ldrb	r3, [r4, #20]
 800f53a:	2b01      	cmp	r3, #1
 800f53c:	d063      	beq.n	800f606 <ucdr_serialize_int32_t+0x116>
 800f53e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f542:	702b      	strb	r3, [r5, #0]
 800f544:	2e00      	cmp	r6, #0
 800f546:	d051      	beq.n	800f5ec <ucdr_serialize_int32_t+0xfc>
 800f548:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f54c:	2e01      	cmp	r6, #1
 800f54e:	706b      	strb	r3, [r5, #1]
 800f550:	d050      	beq.n	800f5f4 <ucdr_serialize_int32_t+0x104>
 800f552:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f556:	2e02      	cmp	r6, #2
 800f558:	70ab      	strb	r3, [r5, #2]
 800f55a:	d04f      	beq.n	800f5fc <ucdr_serialize_int32_t+0x10c>
 800f55c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f560:	70eb      	strb	r3, [r5, #3]
 800f562:	6923      	ldr	r3, [r4, #16]
 800f564:	2104      	movs	r1, #4
 800f566:	68a2      	ldr	r2, [r4, #8]
 800f568:	3304      	adds	r3, #4
 800f56a:	7da0      	ldrb	r0, [r4, #22]
 800f56c:	4442      	add	r2, r8
 800f56e:	7561      	strb	r1, [r4, #21]
 800f570:	1b9e      	subs	r6, r3, r6
 800f572:	f080 0001 	eor.w	r0, r0, #1
 800f576:	60a2      	str	r2, [r4, #8]
 800f578:	6126      	str	r6, [r4, #16]
 800f57a:	b002      	add	sp, #8
 800f57c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f580:	2104      	movs	r1, #4
 800f582:	4620      	mov	r0, r4
 800f584:	f000 fba6 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800f588:	b1d0      	cbz	r0, 800f5c0 <ucdr_serialize_int32_t+0xd0>
 800f58a:	7d23      	ldrb	r3, [r4, #20]
 800f58c:	2b01      	cmp	r3, #1
 800f58e:	68a3      	ldr	r3, [r4, #8]
 800f590:	d01c      	beq.n	800f5cc <ucdr_serialize_int32_t+0xdc>
 800f592:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f596:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f59a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f59e:	7018      	strb	r0, [r3, #0]
 800f5a0:	68a3      	ldr	r3, [r4, #8]
 800f5a2:	705a      	strb	r2, [r3, #1]
 800f5a4:	68a3      	ldr	r3, [r4, #8]
 800f5a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f5aa:	7099      	strb	r1, [r3, #2]
 800f5ac:	68a3      	ldr	r3, [r4, #8]
 800f5ae:	70da      	strb	r2, [r3, #3]
 800f5b0:	2104      	movs	r1, #4
 800f5b2:	68a2      	ldr	r2, [r4, #8]
 800f5b4:	6923      	ldr	r3, [r4, #16]
 800f5b6:	440a      	add	r2, r1
 800f5b8:	7561      	strb	r1, [r4, #21]
 800f5ba:	440b      	add	r3, r1
 800f5bc:	60a2      	str	r2, [r4, #8]
 800f5be:	6123      	str	r3, [r4, #16]
 800f5c0:	7da0      	ldrb	r0, [r4, #22]
 800f5c2:	f080 0001 	eor.w	r0, r0, #1
 800f5c6:	b002      	add	sp, #8
 800f5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5cc:	9a01      	ldr	r2, [sp, #4]
 800f5ce:	601a      	str	r2, [r3, #0]
 800f5d0:	e7ee      	b.n	800f5b0 <ucdr_serialize_int32_t+0xc0>
 800f5d2:	68a2      	ldr	r2, [r4, #8]
 800f5d4:	6923      	ldr	r3, [r4, #16]
 800f5d6:	7da0      	ldrb	r0, [r4, #22]
 800f5d8:	1b92      	subs	r2, r2, r6
 800f5da:	1b9b      	subs	r3, r3, r6
 800f5dc:	7567      	strb	r7, [r4, #21]
 800f5de:	f080 0001 	eor.w	r0, r0, #1
 800f5e2:	60a2      	str	r2, [r4, #8]
 800f5e4:	6123      	str	r3, [r4, #16]
 800f5e6:	b002      	add	sp, #8
 800f5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5ec:	68a3      	ldr	r3, [r4, #8]
 800f5ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f5f2:	701a      	strb	r2, [r3, #0]
 800f5f4:	68a3      	ldr	r3, [r4, #8]
 800f5f6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f5fa:	701a      	strb	r2, [r3, #0]
 800f5fc:	68a3      	ldr	r3, [r4, #8]
 800f5fe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f602:	701a      	strb	r2, [r3, #0]
 800f604:	e7ad      	b.n	800f562 <ucdr_serialize_int32_t+0x72>
 800f606:	4628      	mov	r0, r5
 800f608:	ad01      	add	r5, sp, #4
 800f60a:	4632      	mov	r2, r6
 800f60c:	4629      	mov	r1, r5
 800f60e:	f00d fe70 	bl	801d2f2 <memcpy>
 800f612:	4642      	mov	r2, r8
 800f614:	19a9      	adds	r1, r5, r6
 800f616:	68a0      	ldr	r0, [r4, #8]
 800f618:	f00d fe6b 	bl	801d2f2 <memcpy>
 800f61c:	e7a1      	b.n	800f562 <ucdr_serialize_int32_t+0x72>
 800f61e:	bf00      	nop

0800f620 <ucdr_deserialize_int32_t>:
 800f620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f624:	4604      	mov	r4, r0
 800f626:	460d      	mov	r5, r1
 800f628:	2104      	movs	r1, #4
 800f62a:	f000 fba7 	bl	800fd7c <ucdr_buffer_alignment>
 800f62e:	4601      	mov	r1, r0
 800f630:	4620      	mov	r0, r4
 800f632:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f636:	f000 fbe9 	bl	800fe0c <ucdr_advance_buffer>
 800f63a:	2104      	movs	r1, #4
 800f63c:	4620      	mov	r0, r4
 800f63e:	f000 fb3d 	bl	800fcbc <ucdr_check_buffer_available_for>
 800f642:	2800      	cmp	r0, #0
 800f644:	d138      	bne.n	800f6b8 <ucdr_deserialize_int32_t+0x98>
 800f646:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f64a:	42b7      	cmp	r7, r6
 800f64c:	d92f      	bls.n	800f6ae <ucdr_deserialize_int32_t+0x8e>
 800f64e:	6923      	ldr	r3, [r4, #16]
 800f650:	4620      	mov	r0, r4
 800f652:	60a7      	str	r7, [r4, #8]
 800f654:	1bbf      	subs	r7, r7, r6
 800f656:	443b      	add	r3, r7
 800f658:	f1c7 0904 	rsb	r9, r7, #4
 800f65c:	6123      	str	r3, [r4, #16]
 800f65e:	4649      	mov	r1, r9
 800f660:	f000 fb38 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800f664:	2800      	cmp	r0, #0
 800f666:	d046      	beq.n	800f6f6 <ucdr_deserialize_int32_t+0xd6>
 800f668:	7d23      	ldrb	r3, [r4, #20]
 800f66a:	2b01      	cmp	r3, #1
 800f66c:	d05c      	beq.n	800f728 <ucdr_deserialize_int32_t+0x108>
 800f66e:	78f3      	ldrb	r3, [r6, #3]
 800f670:	702b      	strb	r3, [r5, #0]
 800f672:	2f00      	cmp	r7, #0
 800f674:	d04c      	beq.n	800f710 <ucdr_deserialize_int32_t+0xf0>
 800f676:	78b3      	ldrb	r3, [r6, #2]
 800f678:	2f01      	cmp	r7, #1
 800f67a:	706b      	strb	r3, [r5, #1]
 800f67c:	f105 0302 	add.w	r3, r5, #2
 800f680:	d04a      	beq.n	800f718 <ucdr_deserialize_int32_t+0xf8>
 800f682:	7873      	ldrb	r3, [r6, #1]
 800f684:	2f02      	cmp	r7, #2
 800f686:	70ab      	strb	r3, [r5, #2]
 800f688:	f105 0303 	add.w	r3, r5, #3
 800f68c:	d048      	beq.n	800f720 <ucdr_deserialize_int32_t+0x100>
 800f68e:	7833      	ldrb	r3, [r6, #0]
 800f690:	70eb      	strb	r3, [r5, #3]
 800f692:	6923      	ldr	r3, [r4, #16]
 800f694:	2104      	movs	r1, #4
 800f696:	68a2      	ldr	r2, [r4, #8]
 800f698:	3304      	adds	r3, #4
 800f69a:	7da0      	ldrb	r0, [r4, #22]
 800f69c:	444a      	add	r2, r9
 800f69e:	7561      	strb	r1, [r4, #21]
 800f6a0:	1bdb      	subs	r3, r3, r7
 800f6a2:	f080 0001 	eor.w	r0, r0, #1
 800f6a6:	60a2      	str	r2, [r4, #8]
 800f6a8:	6123      	str	r3, [r4, #16]
 800f6aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6ae:	2104      	movs	r1, #4
 800f6b0:	4620      	mov	r0, r4
 800f6b2:	f000 fb0f 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800f6b6:	b1b0      	cbz	r0, 800f6e6 <ucdr_deserialize_int32_t+0xc6>
 800f6b8:	7d23      	ldrb	r3, [r4, #20]
 800f6ba:	2b01      	cmp	r3, #1
 800f6bc:	68a3      	ldr	r3, [r4, #8]
 800f6be:	d017      	beq.n	800f6f0 <ucdr_deserialize_int32_t+0xd0>
 800f6c0:	78db      	ldrb	r3, [r3, #3]
 800f6c2:	702b      	strb	r3, [r5, #0]
 800f6c4:	68a3      	ldr	r3, [r4, #8]
 800f6c6:	789b      	ldrb	r3, [r3, #2]
 800f6c8:	706b      	strb	r3, [r5, #1]
 800f6ca:	68a3      	ldr	r3, [r4, #8]
 800f6cc:	785b      	ldrb	r3, [r3, #1]
 800f6ce:	70ab      	strb	r3, [r5, #2]
 800f6d0:	68a3      	ldr	r3, [r4, #8]
 800f6d2:	781b      	ldrb	r3, [r3, #0]
 800f6d4:	70eb      	strb	r3, [r5, #3]
 800f6d6:	2104      	movs	r1, #4
 800f6d8:	68a2      	ldr	r2, [r4, #8]
 800f6da:	6923      	ldr	r3, [r4, #16]
 800f6dc:	440a      	add	r2, r1
 800f6de:	7561      	strb	r1, [r4, #21]
 800f6e0:	440b      	add	r3, r1
 800f6e2:	60a2      	str	r2, [r4, #8]
 800f6e4:	6123      	str	r3, [r4, #16]
 800f6e6:	7da0      	ldrb	r0, [r4, #22]
 800f6e8:	f080 0001 	eor.w	r0, r0, #1
 800f6ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	602b      	str	r3, [r5, #0]
 800f6f4:	e7ef      	b.n	800f6d6 <ucdr_deserialize_int32_t+0xb6>
 800f6f6:	68a2      	ldr	r2, [r4, #8]
 800f6f8:	6923      	ldr	r3, [r4, #16]
 800f6fa:	1bd2      	subs	r2, r2, r7
 800f6fc:	7da0      	ldrb	r0, [r4, #22]
 800f6fe:	1bdb      	subs	r3, r3, r7
 800f700:	f884 8015 	strb.w	r8, [r4, #21]
 800f704:	f080 0001 	eor.w	r0, r0, #1
 800f708:	60a2      	str	r2, [r4, #8]
 800f70a:	6123      	str	r3, [r4, #16]
 800f70c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f710:	68a3      	ldr	r3, [r4, #8]
 800f712:	789b      	ldrb	r3, [r3, #2]
 800f714:	706b      	strb	r3, [r5, #1]
 800f716:	1cab      	adds	r3, r5, #2
 800f718:	68a2      	ldr	r2, [r4, #8]
 800f71a:	7852      	ldrb	r2, [r2, #1]
 800f71c:	f803 2b01 	strb.w	r2, [r3], #1
 800f720:	68a2      	ldr	r2, [r4, #8]
 800f722:	7812      	ldrb	r2, [r2, #0]
 800f724:	701a      	strb	r2, [r3, #0]
 800f726:	e7b4      	b.n	800f692 <ucdr_deserialize_int32_t+0x72>
 800f728:	4631      	mov	r1, r6
 800f72a:	463a      	mov	r2, r7
 800f72c:	4628      	mov	r0, r5
 800f72e:	f00d fde0 	bl	801d2f2 <memcpy>
 800f732:	464a      	mov	r2, r9
 800f734:	19e8      	adds	r0, r5, r7
 800f736:	68a1      	ldr	r1, [r4, #8]
 800f738:	f00d fddb 	bl	801d2f2 <memcpy>
 800f73c:	e7a9      	b.n	800f692 <ucdr_deserialize_int32_t+0x72>
 800f73e:	bf00      	nop

0800f740 <ucdr_serialize_float>:
 800f740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f744:	4604      	mov	r4, r0
 800f746:	b082      	sub	sp, #8
 800f748:	2104      	movs	r1, #4
 800f74a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f74e:	f000 fb15 	bl	800fd7c <ucdr_buffer_alignment>
 800f752:	4601      	mov	r1, r0
 800f754:	4620      	mov	r0, r4
 800f756:	7d67      	ldrb	r7, [r4, #21]
 800f758:	f000 fb58 	bl	800fe0c <ucdr_advance_buffer>
 800f75c:	2104      	movs	r1, #4
 800f75e:	4620      	mov	r0, r4
 800f760:	f000 faac 	bl	800fcbc <ucdr_check_buffer_available_for>
 800f764:	2800      	cmp	r0, #0
 800f766:	d139      	bne.n	800f7dc <ucdr_serialize_float+0x9c>
 800f768:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f76c:	42ab      	cmp	r3, r5
 800f76e:	d930      	bls.n	800f7d2 <ucdr_serialize_float+0x92>
 800f770:	1b5e      	subs	r6, r3, r5
 800f772:	60a3      	str	r3, [r4, #8]
 800f774:	6923      	ldr	r3, [r4, #16]
 800f776:	4620      	mov	r0, r4
 800f778:	f1c6 0804 	rsb	r8, r6, #4
 800f77c:	4433      	add	r3, r6
 800f77e:	4641      	mov	r1, r8
 800f780:	6123      	str	r3, [r4, #16]
 800f782:	f000 faa7 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800f786:	2800      	cmp	r0, #0
 800f788:	d04c      	beq.n	800f824 <ucdr_serialize_float+0xe4>
 800f78a:	7d23      	ldrb	r3, [r4, #20]
 800f78c:	2b01      	cmp	r3, #1
 800f78e:	d063      	beq.n	800f858 <ucdr_serialize_float+0x118>
 800f790:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f794:	702b      	strb	r3, [r5, #0]
 800f796:	2e00      	cmp	r6, #0
 800f798:	d051      	beq.n	800f83e <ucdr_serialize_float+0xfe>
 800f79a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f79e:	2e01      	cmp	r6, #1
 800f7a0:	706b      	strb	r3, [r5, #1]
 800f7a2:	d050      	beq.n	800f846 <ucdr_serialize_float+0x106>
 800f7a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f7a8:	2e02      	cmp	r6, #2
 800f7aa:	70ab      	strb	r3, [r5, #2]
 800f7ac:	d04f      	beq.n	800f84e <ucdr_serialize_float+0x10e>
 800f7ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f7b2:	70eb      	strb	r3, [r5, #3]
 800f7b4:	6923      	ldr	r3, [r4, #16]
 800f7b6:	2104      	movs	r1, #4
 800f7b8:	68a2      	ldr	r2, [r4, #8]
 800f7ba:	3304      	adds	r3, #4
 800f7bc:	7da0      	ldrb	r0, [r4, #22]
 800f7be:	4442      	add	r2, r8
 800f7c0:	7561      	strb	r1, [r4, #21]
 800f7c2:	1b9e      	subs	r6, r3, r6
 800f7c4:	f080 0001 	eor.w	r0, r0, #1
 800f7c8:	60a2      	str	r2, [r4, #8]
 800f7ca:	6126      	str	r6, [r4, #16]
 800f7cc:	b002      	add	sp, #8
 800f7ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7d2:	2104      	movs	r1, #4
 800f7d4:	4620      	mov	r0, r4
 800f7d6:	f000 fa7d 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800f7da:	b1d0      	cbz	r0, 800f812 <ucdr_serialize_float+0xd2>
 800f7dc:	7d23      	ldrb	r3, [r4, #20]
 800f7de:	2b01      	cmp	r3, #1
 800f7e0:	68a3      	ldr	r3, [r4, #8]
 800f7e2:	d01c      	beq.n	800f81e <ucdr_serialize_float+0xde>
 800f7e4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f7e8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f7ec:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f7f0:	7018      	strb	r0, [r3, #0]
 800f7f2:	68a3      	ldr	r3, [r4, #8]
 800f7f4:	705a      	strb	r2, [r3, #1]
 800f7f6:	68a3      	ldr	r3, [r4, #8]
 800f7f8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f7fc:	7099      	strb	r1, [r3, #2]
 800f7fe:	68a3      	ldr	r3, [r4, #8]
 800f800:	70da      	strb	r2, [r3, #3]
 800f802:	2104      	movs	r1, #4
 800f804:	68a2      	ldr	r2, [r4, #8]
 800f806:	6923      	ldr	r3, [r4, #16]
 800f808:	440a      	add	r2, r1
 800f80a:	7561      	strb	r1, [r4, #21]
 800f80c:	440b      	add	r3, r1
 800f80e:	60a2      	str	r2, [r4, #8]
 800f810:	6123      	str	r3, [r4, #16]
 800f812:	7da0      	ldrb	r0, [r4, #22]
 800f814:	f080 0001 	eor.w	r0, r0, #1
 800f818:	b002      	add	sp, #8
 800f81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f81e:	9a01      	ldr	r2, [sp, #4]
 800f820:	601a      	str	r2, [r3, #0]
 800f822:	e7ee      	b.n	800f802 <ucdr_serialize_float+0xc2>
 800f824:	68a2      	ldr	r2, [r4, #8]
 800f826:	6923      	ldr	r3, [r4, #16]
 800f828:	7da0      	ldrb	r0, [r4, #22]
 800f82a:	1b92      	subs	r2, r2, r6
 800f82c:	1b9b      	subs	r3, r3, r6
 800f82e:	7567      	strb	r7, [r4, #21]
 800f830:	f080 0001 	eor.w	r0, r0, #1
 800f834:	60a2      	str	r2, [r4, #8]
 800f836:	6123      	str	r3, [r4, #16]
 800f838:	b002      	add	sp, #8
 800f83a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f83e:	68a3      	ldr	r3, [r4, #8]
 800f840:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f844:	701a      	strb	r2, [r3, #0]
 800f846:	68a3      	ldr	r3, [r4, #8]
 800f848:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f84c:	701a      	strb	r2, [r3, #0]
 800f84e:	68a3      	ldr	r3, [r4, #8]
 800f850:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f854:	701a      	strb	r2, [r3, #0]
 800f856:	e7ad      	b.n	800f7b4 <ucdr_serialize_float+0x74>
 800f858:	4628      	mov	r0, r5
 800f85a:	ad01      	add	r5, sp, #4
 800f85c:	4632      	mov	r2, r6
 800f85e:	4629      	mov	r1, r5
 800f860:	f00d fd47 	bl	801d2f2 <memcpy>
 800f864:	4642      	mov	r2, r8
 800f866:	19a9      	adds	r1, r5, r6
 800f868:	68a0      	ldr	r0, [r4, #8]
 800f86a:	f00d fd42 	bl	801d2f2 <memcpy>
 800f86e:	e7a1      	b.n	800f7b4 <ucdr_serialize_float+0x74>

0800f870 <ucdr_deserialize_float>:
 800f870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f874:	4604      	mov	r4, r0
 800f876:	460d      	mov	r5, r1
 800f878:	2104      	movs	r1, #4
 800f87a:	f000 fa7f 	bl	800fd7c <ucdr_buffer_alignment>
 800f87e:	4601      	mov	r1, r0
 800f880:	4620      	mov	r0, r4
 800f882:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f886:	f000 fac1 	bl	800fe0c <ucdr_advance_buffer>
 800f88a:	2104      	movs	r1, #4
 800f88c:	4620      	mov	r0, r4
 800f88e:	f000 fa15 	bl	800fcbc <ucdr_check_buffer_available_for>
 800f892:	2800      	cmp	r0, #0
 800f894:	d138      	bne.n	800f908 <ucdr_deserialize_float+0x98>
 800f896:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f89a:	42b7      	cmp	r7, r6
 800f89c:	d92f      	bls.n	800f8fe <ucdr_deserialize_float+0x8e>
 800f89e:	6923      	ldr	r3, [r4, #16]
 800f8a0:	4620      	mov	r0, r4
 800f8a2:	60a7      	str	r7, [r4, #8]
 800f8a4:	1bbf      	subs	r7, r7, r6
 800f8a6:	443b      	add	r3, r7
 800f8a8:	f1c7 0904 	rsb	r9, r7, #4
 800f8ac:	6123      	str	r3, [r4, #16]
 800f8ae:	4649      	mov	r1, r9
 800f8b0:	f000 fa10 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800f8b4:	2800      	cmp	r0, #0
 800f8b6:	d046      	beq.n	800f946 <ucdr_deserialize_float+0xd6>
 800f8b8:	7d23      	ldrb	r3, [r4, #20]
 800f8ba:	2b01      	cmp	r3, #1
 800f8bc:	d05c      	beq.n	800f978 <ucdr_deserialize_float+0x108>
 800f8be:	78f3      	ldrb	r3, [r6, #3]
 800f8c0:	702b      	strb	r3, [r5, #0]
 800f8c2:	2f00      	cmp	r7, #0
 800f8c4:	d04c      	beq.n	800f960 <ucdr_deserialize_float+0xf0>
 800f8c6:	78b3      	ldrb	r3, [r6, #2]
 800f8c8:	2f01      	cmp	r7, #1
 800f8ca:	706b      	strb	r3, [r5, #1]
 800f8cc:	f105 0302 	add.w	r3, r5, #2
 800f8d0:	d04a      	beq.n	800f968 <ucdr_deserialize_float+0xf8>
 800f8d2:	7873      	ldrb	r3, [r6, #1]
 800f8d4:	2f02      	cmp	r7, #2
 800f8d6:	70ab      	strb	r3, [r5, #2]
 800f8d8:	f105 0303 	add.w	r3, r5, #3
 800f8dc:	d048      	beq.n	800f970 <ucdr_deserialize_float+0x100>
 800f8de:	7833      	ldrb	r3, [r6, #0]
 800f8e0:	70eb      	strb	r3, [r5, #3]
 800f8e2:	6923      	ldr	r3, [r4, #16]
 800f8e4:	2104      	movs	r1, #4
 800f8e6:	68a2      	ldr	r2, [r4, #8]
 800f8e8:	3304      	adds	r3, #4
 800f8ea:	7da0      	ldrb	r0, [r4, #22]
 800f8ec:	444a      	add	r2, r9
 800f8ee:	7561      	strb	r1, [r4, #21]
 800f8f0:	1bdb      	subs	r3, r3, r7
 800f8f2:	f080 0001 	eor.w	r0, r0, #1
 800f8f6:	60a2      	str	r2, [r4, #8]
 800f8f8:	6123      	str	r3, [r4, #16]
 800f8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8fe:	2104      	movs	r1, #4
 800f900:	4620      	mov	r0, r4
 800f902:	f000 f9e7 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800f906:	b1b0      	cbz	r0, 800f936 <ucdr_deserialize_float+0xc6>
 800f908:	7d23      	ldrb	r3, [r4, #20]
 800f90a:	2b01      	cmp	r3, #1
 800f90c:	68a3      	ldr	r3, [r4, #8]
 800f90e:	d017      	beq.n	800f940 <ucdr_deserialize_float+0xd0>
 800f910:	78db      	ldrb	r3, [r3, #3]
 800f912:	702b      	strb	r3, [r5, #0]
 800f914:	68a3      	ldr	r3, [r4, #8]
 800f916:	789b      	ldrb	r3, [r3, #2]
 800f918:	706b      	strb	r3, [r5, #1]
 800f91a:	68a3      	ldr	r3, [r4, #8]
 800f91c:	785b      	ldrb	r3, [r3, #1]
 800f91e:	70ab      	strb	r3, [r5, #2]
 800f920:	68a3      	ldr	r3, [r4, #8]
 800f922:	781b      	ldrb	r3, [r3, #0]
 800f924:	70eb      	strb	r3, [r5, #3]
 800f926:	2104      	movs	r1, #4
 800f928:	68a2      	ldr	r2, [r4, #8]
 800f92a:	6923      	ldr	r3, [r4, #16]
 800f92c:	440a      	add	r2, r1
 800f92e:	7561      	strb	r1, [r4, #21]
 800f930:	440b      	add	r3, r1
 800f932:	60a2      	str	r2, [r4, #8]
 800f934:	6123      	str	r3, [r4, #16]
 800f936:	7da0      	ldrb	r0, [r4, #22]
 800f938:	f080 0001 	eor.w	r0, r0, #1
 800f93c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	602b      	str	r3, [r5, #0]
 800f944:	e7ef      	b.n	800f926 <ucdr_deserialize_float+0xb6>
 800f946:	68a2      	ldr	r2, [r4, #8]
 800f948:	6923      	ldr	r3, [r4, #16]
 800f94a:	1bd2      	subs	r2, r2, r7
 800f94c:	7da0      	ldrb	r0, [r4, #22]
 800f94e:	1bdb      	subs	r3, r3, r7
 800f950:	f884 8015 	strb.w	r8, [r4, #21]
 800f954:	f080 0001 	eor.w	r0, r0, #1
 800f958:	60a2      	str	r2, [r4, #8]
 800f95a:	6123      	str	r3, [r4, #16]
 800f95c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f960:	68a3      	ldr	r3, [r4, #8]
 800f962:	789b      	ldrb	r3, [r3, #2]
 800f964:	706b      	strb	r3, [r5, #1]
 800f966:	1cab      	adds	r3, r5, #2
 800f968:	68a2      	ldr	r2, [r4, #8]
 800f96a:	7852      	ldrb	r2, [r2, #1]
 800f96c:	f803 2b01 	strb.w	r2, [r3], #1
 800f970:	68a2      	ldr	r2, [r4, #8]
 800f972:	7812      	ldrb	r2, [r2, #0]
 800f974:	701a      	strb	r2, [r3, #0]
 800f976:	e7b4      	b.n	800f8e2 <ucdr_deserialize_float+0x72>
 800f978:	4631      	mov	r1, r6
 800f97a:	463a      	mov	r2, r7
 800f97c:	4628      	mov	r0, r5
 800f97e:	f00d fcb8 	bl	801d2f2 <memcpy>
 800f982:	464a      	mov	r2, r9
 800f984:	19e8      	adds	r0, r5, r7
 800f986:	68a1      	ldr	r1, [r4, #8]
 800f988:	f00d fcb3 	bl	801d2f2 <memcpy>
 800f98c:	e7a9      	b.n	800f8e2 <ucdr_deserialize_float+0x72>
 800f98e:	bf00      	nop

0800f990 <ucdr_serialize_double>:
 800f990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f994:	4604      	mov	r4, r0
 800f996:	b082      	sub	sp, #8
 800f998:	2108      	movs	r1, #8
 800f99a:	ed8d 0b00 	vstr	d0, [sp]
 800f99e:	f000 f9ed 	bl	800fd7c <ucdr_buffer_alignment>
 800f9a2:	4601      	mov	r1, r0
 800f9a4:	4620      	mov	r0, r4
 800f9a6:	7d67      	ldrb	r7, [r4, #21]
 800f9a8:	f000 fa30 	bl	800fe0c <ucdr_advance_buffer>
 800f9ac:	2108      	movs	r1, #8
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	f000 f984 	bl	800fcbc <ucdr_check_buffer_available_for>
 800f9b4:	2800      	cmp	r0, #0
 800f9b6:	d14e      	bne.n	800fa56 <ucdr_serialize_double+0xc6>
 800f9b8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f9bc:	42ab      	cmp	r3, r5
 800f9be:	d945      	bls.n	800fa4c <ucdr_serialize_double+0xbc>
 800f9c0:	1b5e      	subs	r6, r3, r5
 800f9c2:	60a3      	str	r3, [r4, #8]
 800f9c4:	6923      	ldr	r3, [r4, #16]
 800f9c6:	4620      	mov	r0, r4
 800f9c8:	f1c6 0808 	rsb	r8, r6, #8
 800f9cc:	4433      	add	r3, r6
 800f9ce:	4641      	mov	r1, r8
 800f9d0:	6123      	str	r3, [r4, #16]
 800f9d2:	f000 f97f 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800f9d6:	2800      	cmp	r0, #0
 800f9d8:	d074      	beq.n	800fac4 <ucdr_serialize_double+0x134>
 800f9da:	7d23      	ldrb	r3, [r4, #20]
 800f9dc:	2b01      	cmp	r3, #1
 800f9de:	f000 809b 	beq.w	800fb18 <ucdr_serialize_double+0x188>
 800f9e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f9e6:	702b      	strb	r3, [r5, #0]
 800f9e8:	2e00      	cmp	r6, #0
 800f9ea:	d078      	beq.n	800fade <ucdr_serialize_double+0x14e>
 800f9ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f9f0:	2e01      	cmp	r6, #1
 800f9f2:	706b      	strb	r3, [r5, #1]
 800f9f4:	d077      	beq.n	800fae6 <ucdr_serialize_double+0x156>
 800f9f6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f9fa:	2e02      	cmp	r6, #2
 800f9fc:	70ab      	strb	r3, [r5, #2]
 800f9fe:	d076      	beq.n	800faee <ucdr_serialize_double+0x15e>
 800fa00:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fa04:	2e03      	cmp	r6, #3
 800fa06:	70eb      	strb	r3, [r5, #3]
 800fa08:	d075      	beq.n	800faf6 <ucdr_serialize_double+0x166>
 800fa0a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fa0e:	2e04      	cmp	r6, #4
 800fa10:	712b      	strb	r3, [r5, #4]
 800fa12:	d074      	beq.n	800fafe <ucdr_serialize_double+0x16e>
 800fa14:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800fa18:	2e05      	cmp	r6, #5
 800fa1a:	716b      	strb	r3, [r5, #5]
 800fa1c:	d073      	beq.n	800fb06 <ucdr_serialize_double+0x176>
 800fa1e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800fa22:	2e06      	cmp	r6, #6
 800fa24:	71ab      	strb	r3, [r5, #6]
 800fa26:	d072      	beq.n	800fb0e <ucdr_serialize_double+0x17e>
 800fa28:	f89d 3000 	ldrb.w	r3, [sp]
 800fa2c:	71eb      	strb	r3, [r5, #7]
 800fa2e:	6923      	ldr	r3, [r4, #16]
 800fa30:	2108      	movs	r1, #8
 800fa32:	68a2      	ldr	r2, [r4, #8]
 800fa34:	3308      	adds	r3, #8
 800fa36:	7da0      	ldrb	r0, [r4, #22]
 800fa38:	4442      	add	r2, r8
 800fa3a:	7561      	strb	r1, [r4, #21]
 800fa3c:	1b9e      	subs	r6, r3, r6
 800fa3e:	f080 0001 	eor.w	r0, r0, #1
 800fa42:	60a2      	str	r2, [r4, #8]
 800fa44:	6126      	str	r6, [r4, #16]
 800fa46:	b002      	add	sp, #8
 800fa48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa4c:	2108      	movs	r1, #8
 800fa4e:	4620      	mov	r0, r4
 800fa50:	f000 f940 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800fa54:	b350      	cbz	r0, 800faac <ucdr_serialize_double+0x11c>
 800fa56:	7d23      	ldrb	r3, [r4, #20]
 800fa58:	2b01      	cmp	r3, #1
 800fa5a:	d02d      	beq.n	800fab8 <ucdr_serialize_double+0x128>
 800fa5c:	68a3      	ldr	r3, [r4, #8]
 800fa5e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800fa62:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fa66:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800fa6a:	7018      	strb	r0, [r3, #0]
 800fa6c:	68a3      	ldr	r3, [r4, #8]
 800fa6e:	705a      	strb	r2, [r3, #1]
 800fa70:	68a3      	ldr	r3, [r4, #8]
 800fa72:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fa76:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800fa7a:	7099      	strb	r1, [r3, #2]
 800fa7c:	68a3      	ldr	r3, [r4, #8]
 800fa7e:	70da      	strb	r2, [r3, #3]
 800fa80:	68a3      	ldr	r3, [r4, #8]
 800fa82:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fa86:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800fa8a:	7118      	strb	r0, [r3, #4]
 800fa8c:	68a3      	ldr	r3, [r4, #8]
 800fa8e:	715a      	strb	r2, [r3, #5]
 800fa90:	68a3      	ldr	r3, [r4, #8]
 800fa92:	f89d 2000 	ldrb.w	r2, [sp]
 800fa96:	7199      	strb	r1, [r3, #6]
 800fa98:	68a3      	ldr	r3, [r4, #8]
 800fa9a:	71da      	strb	r2, [r3, #7]
 800fa9c:	2108      	movs	r1, #8
 800fa9e:	68a2      	ldr	r2, [r4, #8]
 800faa0:	6923      	ldr	r3, [r4, #16]
 800faa2:	440a      	add	r2, r1
 800faa4:	7561      	strb	r1, [r4, #21]
 800faa6:	440b      	add	r3, r1
 800faa8:	60a2      	str	r2, [r4, #8]
 800faaa:	6123      	str	r3, [r4, #16]
 800faac:	7da0      	ldrb	r0, [r4, #22]
 800faae:	f080 0001 	eor.w	r0, r0, #1
 800fab2:	b002      	add	sp, #8
 800fab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fab8:	466b      	mov	r3, sp
 800faba:	68a2      	ldr	r2, [r4, #8]
 800fabc:	cb03      	ldmia	r3!, {r0, r1}
 800fabe:	6010      	str	r0, [r2, #0]
 800fac0:	6051      	str	r1, [r2, #4]
 800fac2:	e7eb      	b.n	800fa9c <ucdr_serialize_double+0x10c>
 800fac4:	68a2      	ldr	r2, [r4, #8]
 800fac6:	6923      	ldr	r3, [r4, #16]
 800fac8:	7da0      	ldrb	r0, [r4, #22]
 800faca:	1b92      	subs	r2, r2, r6
 800facc:	1b9b      	subs	r3, r3, r6
 800face:	7567      	strb	r7, [r4, #21]
 800fad0:	f080 0001 	eor.w	r0, r0, #1
 800fad4:	60a2      	str	r2, [r4, #8]
 800fad6:	6123      	str	r3, [r4, #16]
 800fad8:	b002      	add	sp, #8
 800fada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fade:	68a3      	ldr	r3, [r4, #8]
 800fae0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fae4:	701a      	strb	r2, [r3, #0]
 800fae6:	68a3      	ldr	r3, [r4, #8]
 800fae8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800faec:	701a      	strb	r2, [r3, #0]
 800faee:	68a3      	ldr	r3, [r4, #8]
 800faf0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800faf4:	701a      	strb	r2, [r3, #0]
 800faf6:	68a3      	ldr	r3, [r4, #8]
 800faf8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fafc:	701a      	strb	r2, [r3, #0]
 800fafe:	68a3      	ldr	r3, [r4, #8]
 800fb00:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fb04:	701a      	strb	r2, [r3, #0]
 800fb06:	68a3      	ldr	r3, [r4, #8]
 800fb08:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fb0c:	701a      	strb	r2, [r3, #0]
 800fb0e:	68a3      	ldr	r3, [r4, #8]
 800fb10:	f89d 2000 	ldrb.w	r2, [sp]
 800fb14:	701a      	strb	r2, [r3, #0]
 800fb16:	e78a      	b.n	800fa2e <ucdr_serialize_double+0x9e>
 800fb18:	4628      	mov	r0, r5
 800fb1a:	466d      	mov	r5, sp
 800fb1c:	4632      	mov	r2, r6
 800fb1e:	4629      	mov	r1, r5
 800fb20:	f00d fbe7 	bl	801d2f2 <memcpy>
 800fb24:	4642      	mov	r2, r8
 800fb26:	19a9      	adds	r1, r5, r6
 800fb28:	68a0      	ldr	r0, [r4, #8]
 800fb2a:	f00d fbe2 	bl	801d2f2 <memcpy>
 800fb2e:	e77e      	b.n	800fa2e <ucdr_serialize_double+0x9e>

0800fb30 <ucdr_deserialize_double>:
 800fb30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb34:	4604      	mov	r4, r0
 800fb36:	460d      	mov	r5, r1
 800fb38:	2108      	movs	r1, #8
 800fb3a:	f000 f91f 	bl	800fd7c <ucdr_buffer_alignment>
 800fb3e:	4601      	mov	r1, r0
 800fb40:	4620      	mov	r0, r4
 800fb42:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fb46:	f000 f961 	bl	800fe0c <ucdr_advance_buffer>
 800fb4a:	2108      	movs	r1, #8
 800fb4c:	4620      	mov	r0, r4
 800fb4e:	f000 f8b5 	bl	800fcbc <ucdr_check_buffer_available_for>
 800fb52:	2800      	cmp	r0, #0
 800fb54:	d151      	bne.n	800fbfa <ucdr_deserialize_double+0xca>
 800fb56:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800fb5a:	42be      	cmp	r6, r7
 800fb5c:	d948      	bls.n	800fbf0 <ucdr_deserialize_double+0xc0>
 800fb5e:	6923      	ldr	r3, [r4, #16]
 800fb60:	4620      	mov	r0, r4
 800fb62:	60a6      	str	r6, [r4, #8]
 800fb64:	1bf6      	subs	r6, r6, r7
 800fb66:	4433      	add	r3, r6
 800fb68:	f1c6 0908 	rsb	r9, r6, #8
 800fb6c:	6123      	str	r3, [r4, #16]
 800fb6e:	4649      	mov	r1, r9
 800fb70:	f000 f8b0 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800fb74:	2800      	cmp	r0, #0
 800fb76:	d06d      	beq.n	800fc54 <ucdr_deserialize_double+0x124>
 800fb78:	7d23      	ldrb	r3, [r4, #20]
 800fb7a:	2b01      	cmp	r3, #1
 800fb7c:	f000 8093 	beq.w	800fca6 <ucdr_deserialize_double+0x176>
 800fb80:	79fb      	ldrb	r3, [r7, #7]
 800fb82:	702b      	strb	r3, [r5, #0]
 800fb84:	2e00      	cmp	r6, #0
 800fb86:	d072      	beq.n	800fc6e <ucdr_deserialize_double+0x13e>
 800fb88:	79bb      	ldrb	r3, [r7, #6]
 800fb8a:	2e01      	cmp	r6, #1
 800fb8c:	706b      	strb	r3, [r5, #1]
 800fb8e:	f105 0302 	add.w	r3, r5, #2
 800fb92:	d070      	beq.n	800fc76 <ucdr_deserialize_double+0x146>
 800fb94:	797b      	ldrb	r3, [r7, #5]
 800fb96:	2e02      	cmp	r6, #2
 800fb98:	70ab      	strb	r3, [r5, #2]
 800fb9a:	f105 0303 	add.w	r3, r5, #3
 800fb9e:	d06e      	beq.n	800fc7e <ucdr_deserialize_double+0x14e>
 800fba0:	793b      	ldrb	r3, [r7, #4]
 800fba2:	2e03      	cmp	r6, #3
 800fba4:	70eb      	strb	r3, [r5, #3]
 800fba6:	f105 0304 	add.w	r3, r5, #4
 800fbaa:	d06c      	beq.n	800fc86 <ucdr_deserialize_double+0x156>
 800fbac:	78fb      	ldrb	r3, [r7, #3]
 800fbae:	2e04      	cmp	r6, #4
 800fbb0:	712b      	strb	r3, [r5, #4]
 800fbb2:	f105 0305 	add.w	r3, r5, #5
 800fbb6:	d06a      	beq.n	800fc8e <ucdr_deserialize_double+0x15e>
 800fbb8:	78bb      	ldrb	r3, [r7, #2]
 800fbba:	2e05      	cmp	r6, #5
 800fbbc:	716b      	strb	r3, [r5, #5]
 800fbbe:	f105 0306 	add.w	r3, r5, #6
 800fbc2:	d068      	beq.n	800fc96 <ucdr_deserialize_double+0x166>
 800fbc4:	787b      	ldrb	r3, [r7, #1]
 800fbc6:	2e06      	cmp	r6, #6
 800fbc8:	71ab      	strb	r3, [r5, #6]
 800fbca:	f105 0307 	add.w	r3, r5, #7
 800fbce:	d066      	beq.n	800fc9e <ucdr_deserialize_double+0x16e>
 800fbd0:	783b      	ldrb	r3, [r7, #0]
 800fbd2:	71eb      	strb	r3, [r5, #7]
 800fbd4:	6923      	ldr	r3, [r4, #16]
 800fbd6:	2108      	movs	r1, #8
 800fbd8:	68a2      	ldr	r2, [r4, #8]
 800fbda:	3308      	adds	r3, #8
 800fbdc:	7da0      	ldrb	r0, [r4, #22]
 800fbde:	444a      	add	r2, r9
 800fbe0:	7561      	strb	r1, [r4, #21]
 800fbe2:	1b9e      	subs	r6, r3, r6
 800fbe4:	f080 0001 	eor.w	r0, r0, #1
 800fbe8:	60a2      	str	r2, [r4, #8]
 800fbea:	6126      	str	r6, [r4, #16]
 800fbec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbf0:	2108      	movs	r1, #8
 800fbf2:	4620      	mov	r0, r4
 800fbf4:	f000 f86e 	bl	800fcd4 <ucdr_check_final_buffer_behavior>
 800fbf8:	b310      	cbz	r0, 800fc40 <ucdr_deserialize_double+0x110>
 800fbfa:	7d23      	ldrb	r3, [r4, #20]
 800fbfc:	2b01      	cmp	r3, #1
 800fbfe:	68a3      	ldr	r3, [r4, #8]
 800fc00:	d023      	beq.n	800fc4a <ucdr_deserialize_double+0x11a>
 800fc02:	79db      	ldrb	r3, [r3, #7]
 800fc04:	702b      	strb	r3, [r5, #0]
 800fc06:	68a3      	ldr	r3, [r4, #8]
 800fc08:	799b      	ldrb	r3, [r3, #6]
 800fc0a:	706b      	strb	r3, [r5, #1]
 800fc0c:	68a3      	ldr	r3, [r4, #8]
 800fc0e:	795b      	ldrb	r3, [r3, #5]
 800fc10:	70ab      	strb	r3, [r5, #2]
 800fc12:	68a3      	ldr	r3, [r4, #8]
 800fc14:	791b      	ldrb	r3, [r3, #4]
 800fc16:	70eb      	strb	r3, [r5, #3]
 800fc18:	68a3      	ldr	r3, [r4, #8]
 800fc1a:	78db      	ldrb	r3, [r3, #3]
 800fc1c:	712b      	strb	r3, [r5, #4]
 800fc1e:	68a3      	ldr	r3, [r4, #8]
 800fc20:	789b      	ldrb	r3, [r3, #2]
 800fc22:	716b      	strb	r3, [r5, #5]
 800fc24:	68a3      	ldr	r3, [r4, #8]
 800fc26:	785b      	ldrb	r3, [r3, #1]
 800fc28:	71ab      	strb	r3, [r5, #6]
 800fc2a:	68a3      	ldr	r3, [r4, #8]
 800fc2c:	781b      	ldrb	r3, [r3, #0]
 800fc2e:	71eb      	strb	r3, [r5, #7]
 800fc30:	2108      	movs	r1, #8
 800fc32:	68a2      	ldr	r2, [r4, #8]
 800fc34:	6923      	ldr	r3, [r4, #16]
 800fc36:	440a      	add	r2, r1
 800fc38:	7561      	strb	r1, [r4, #21]
 800fc3a:	440b      	add	r3, r1
 800fc3c:	60a2      	str	r2, [r4, #8]
 800fc3e:	6123      	str	r3, [r4, #16]
 800fc40:	7da0      	ldrb	r0, [r4, #22]
 800fc42:	f080 0001 	eor.w	r0, r0, #1
 800fc46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc4a:	681a      	ldr	r2, [r3, #0]
 800fc4c:	685b      	ldr	r3, [r3, #4]
 800fc4e:	602a      	str	r2, [r5, #0]
 800fc50:	606b      	str	r3, [r5, #4]
 800fc52:	e7ed      	b.n	800fc30 <ucdr_deserialize_double+0x100>
 800fc54:	68a2      	ldr	r2, [r4, #8]
 800fc56:	6923      	ldr	r3, [r4, #16]
 800fc58:	1b92      	subs	r2, r2, r6
 800fc5a:	7da0      	ldrb	r0, [r4, #22]
 800fc5c:	1b9b      	subs	r3, r3, r6
 800fc5e:	f884 8015 	strb.w	r8, [r4, #21]
 800fc62:	f080 0001 	eor.w	r0, r0, #1
 800fc66:	60a2      	str	r2, [r4, #8]
 800fc68:	6123      	str	r3, [r4, #16]
 800fc6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc6e:	68a3      	ldr	r3, [r4, #8]
 800fc70:	799b      	ldrb	r3, [r3, #6]
 800fc72:	706b      	strb	r3, [r5, #1]
 800fc74:	1cab      	adds	r3, r5, #2
 800fc76:	68a2      	ldr	r2, [r4, #8]
 800fc78:	7952      	ldrb	r2, [r2, #5]
 800fc7a:	f803 2b01 	strb.w	r2, [r3], #1
 800fc7e:	68a2      	ldr	r2, [r4, #8]
 800fc80:	7912      	ldrb	r2, [r2, #4]
 800fc82:	f803 2b01 	strb.w	r2, [r3], #1
 800fc86:	68a2      	ldr	r2, [r4, #8]
 800fc88:	78d2      	ldrb	r2, [r2, #3]
 800fc8a:	f803 2b01 	strb.w	r2, [r3], #1
 800fc8e:	68a2      	ldr	r2, [r4, #8]
 800fc90:	7892      	ldrb	r2, [r2, #2]
 800fc92:	f803 2b01 	strb.w	r2, [r3], #1
 800fc96:	68a2      	ldr	r2, [r4, #8]
 800fc98:	7852      	ldrb	r2, [r2, #1]
 800fc9a:	f803 2b01 	strb.w	r2, [r3], #1
 800fc9e:	68a2      	ldr	r2, [r4, #8]
 800fca0:	7812      	ldrb	r2, [r2, #0]
 800fca2:	701a      	strb	r2, [r3, #0]
 800fca4:	e796      	b.n	800fbd4 <ucdr_deserialize_double+0xa4>
 800fca6:	4639      	mov	r1, r7
 800fca8:	4632      	mov	r2, r6
 800fcaa:	4628      	mov	r0, r5
 800fcac:	f00d fb21 	bl	801d2f2 <memcpy>
 800fcb0:	464a      	mov	r2, r9
 800fcb2:	19a8      	adds	r0, r5, r6
 800fcb4:	68a1      	ldr	r1, [r4, #8]
 800fcb6:	f00d fb1c 	bl	801d2f2 <memcpy>
 800fcba:	e78b      	b.n	800fbd4 <ucdr_deserialize_double+0xa4>

0800fcbc <ucdr_check_buffer_available_for>:
 800fcbc:	7d83      	ldrb	r3, [r0, #22]
 800fcbe:	b93b      	cbnz	r3, 800fcd0 <ucdr_check_buffer_available_for+0x14>
 800fcc0:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800fcc4:	4419      	add	r1, r3
 800fcc6:	4288      	cmp	r0, r1
 800fcc8:	bf34      	ite	cc
 800fcca:	2000      	movcc	r0, #0
 800fccc:	2001      	movcs	r0, #1
 800fcce:	4770      	bx	lr
 800fcd0:	2000      	movs	r0, #0
 800fcd2:	4770      	bx	lr

0800fcd4 <ucdr_check_final_buffer_behavior>:
 800fcd4:	7d83      	ldrb	r3, [r0, #22]
 800fcd6:	b943      	cbnz	r3, 800fcea <ucdr_check_final_buffer_behavior+0x16>
 800fcd8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800fcdc:	b510      	push	{r4, lr}
 800fcde:	4291      	cmp	r1, r2
 800fce0:	4604      	mov	r4, r0
 800fce2:	d205      	bcs.n	800fcf0 <ucdr_check_final_buffer_behavior+0x1c>
 800fce4:	2301      	movs	r3, #1
 800fce6:	4618      	mov	r0, r3
 800fce8:	bd10      	pop	{r4, pc}
 800fcea:	2300      	movs	r3, #0
 800fcec:	4618      	mov	r0, r3
 800fcee:	4770      	bx	lr
 800fcf0:	6982      	ldr	r2, [r0, #24]
 800fcf2:	b13a      	cbz	r2, 800fd04 <ucdr_check_final_buffer_behavior+0x30>
 800fcf4:	69c1      	ldr	r1, [r0, #28]
 800fcf6:	4790      	blx	r2
 800fcf8:	f080 0301 	eor.w	r3, r0, #1
 800fcfc:	75a0      	strb	r0, [r4, #22]
 800fcfe:	b2db      	uxtb	r3, r3
 800fd00:	4618      	mov	r0, r3
 800fd02:	bd10      	pop	{r4, pc}
 800fd04:	2001      	movs	r0, #1
 800fd06:	75a0      	strb	r0, [r4, #22]
 800fd08:	e7fa      	b.n	800fd00 <ucdr_check_final_buffer_behavior+0x2c>
 800fd0a:	bf00      	nop

0800fd0c <ucdr_set_on_full_buffer_callback>:
 800fd0c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800fd10:	4770      	bx	lr
 800fd12:	bf00      	nop

0800fd14 <ucdr_init_buffer_origin_offset_endian>:
 800fd14:	b410      	push	{r4}
 800fd16:	9c01      	ldr	r4, [sp, #4]
 800fd18:	440a      	add	r2, r1
 800fd1a:	6001      	str	r1, [r0, #0]
 800fd1c:	6042      	str	r2, [r0, #4]
 800fd1e:	190a      	adds	r2, r1, r4
 800fd20:	441c      	add	r4, r3
 800fd22:	6082      	str	r2, [r0, #8]
 800fd24:	2200      	movs	r2, #0
 800fd26:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800fd2a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800fd2e:	7542      	strb	r2, [r0, #21]
 800fd30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd34:	7582      	strb	r2, [r0, #22]
 800fd36:	7503      	strb	r3, [r0, #20]
 800fd38:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800fd3c:	4770      	bx	lr
 800fd3e:	bf00      	nop

0800fd40 <ucdr_init_buffer_origin_offset>:
 800fd40:	b510      	push	{r4, lr}
 800fd42:	b082      	sub	sp, #8
 800fd44:	9c04      	ldr	r4, [sp, #16]
 800fd46:	9400      	str	r4, [sp, #0]
 800fd48:	2401      	movs	r4, #1
 800fd4a:	9401      	str	r4, [sp, #4]
 800fd4c:	f7ff ffe2 	bl	800fd14 <ucdr_init_buffer_origin_offset_endian>
 800fd50:	b002      	add	sp, #8
 800fd52:	bd10      	pop	{r4, pc}

0800fd54 <ucdr_init_buffer_origin>:
 800fd54:	b510      	push	{r4, lr}
 800fd56:	2400      	movs	r4, #0
 800fd58:	b082      	sub	sp, #8
 800fd5a:	9400      	str	r4, [sp, #0]
 800fd5c:	f7ff fff0 	bl	800fd40 <ucdr_init_buffer_origin_offset>
 800fd60:	b002      	add	sp, #8
 800fd62:	bd10      	pop	{r4, pc}

0800fd64 <ucdr_init_buffer>:
 800fd64:	2300      	movs	r3, #0
 800fd66:	f7ff bff5 	b.w	800fd54 <ucdr_init_buffer_origin>
 800fd6a:	bf00      	nop

0800fd6c <ucdr_alignment>:
 800fd6c:	fbb0 f2f1 	udiv	r2, r0, r1
 800fd70:	fb02 0011 	mls	r0, r2, r1, r0
 800fd74:	1e4b      	subs	r3, r1, #1
 800fd76:	1a08      	subs	r0, r1, r0
 800fd78:	4018      	ands	r0, r3
 800fd7a:	4770      	bx	lr

0800fd7c <ucdr_buffer_alignment>:
 800fd7c:	7d43      	ldrb	r3, [r0, #21]
 800fd7e:	428b      	cmp	r3, r1
 800fd80:	d209      	bcs.n	800fd96 <ucdr_buffer_alignment+0x1a>
 800fd82:	6903      	ldr	r3, [r0, #16]
 800fd84:	1e4a      	subs	r2, r1, #1
 800fd86:	fbb3 f0f1 	udiv	r0, r3, r1
 800fd8a:	fb01 3010 	mls	r0, r1, r0, r3
 800fd8e:	1a09      	subs	r1, r1, r0
 800fd90:	ea01 0002 	and.w	r0, r1, r2
 800fd94:	4770      	bx	lr
 800fd96:	2000      	movs	r0, #0
 800fd98:	4770      	bx	lr
 800fd9a:	bf00      	nop

0800fd9c <ucdr_align_to>:
 800fd9c:	b538      	push	{r3, r4, r5, lr}
 800fd9e:	4604      	mov	r4, r0
 800fda0:	460d      	mov	r5, r1
 800fda2:	f7ff ffeb 	bl	800fd7c <ucdr_buffer_alignment>
 800fda6:	68a3      	ldr	r3, [r4, #8]
 800fda8:	7565      	strb	r5, [r4, #21]
 800fdaa:	181a      	adds	r2, r3, r0
 800fdac:	6923      	ldr	r3, [r4, #16]
 800fdae:	4418      	add	r0, r3
 800fdb0:	6863      	ldr	r3, [r4, #4]
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	6120      	str	r0, [r4, #16]
 800fdb6:	bf28      	it	cs
 800fdb8:	4613      	movcs	r3, r2
 800fdba:	60a3      	str	r3, [r4, #8]
 800fdbc:	bd38      	pop	{r3, r4, r5, pc}
 800fdbe:	bf00      	nop

0800fdc0 <ucdr_buffer_length>:
 800fdc0:	6882      	ldr	r2, [r0, #8]
 800fdc2:	6800      	ldr	r0, [r0, #0]
 800fdc4:	1a10      	subs	r0, r2, r0
 800fdc6:	4770      	bx	lr

0800fdc8 <ucdr_buffer_remaining>:
 800fdc8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800fdcc:	1a10      	subs	r0, r2, r0
 800fdce:	4770      	bx	lr

0800fdd0 <ucdr_check_final_buffer_behavior_array>:
 800fdd0:	b538      	push	{r3, r4, r5, lr}
 800fdd2:	7d83      	ldrb	r3, [r0, #22]
 800fdd4:	b9a3      	cbnz	r3, 800fe00 <ucdr_check_final_buffer_behavior_array+0x30>
 800fdd6:	4604      	mov	r4, r0
 800fdd8:	460d      	mov	r5, r1
 800fdda:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800fdde:	429a      	cmp	r2, r3
 800fde0:	d300      	bcc.n	800fde4 <ucdr_check_final_buffer_behavior_array+0x14>
 800fde2:	b931      	cbnz	r1, 800fdf2 <ucdr_check_final_buffer_behavior_array+0x22>
 800fde4:	4620      	mov	r0, r4
 800fde6:	f7ff ffef 	bl	800fdc8 <ucdr_buffer_remaining>
 800fdea:	42a8      	cmp	r0, r5
 800fdec:	bf28      	it	cs
 800fdee:	4628      	movcs	r0, r5
 800fdf0:	bd38      	pop	{r3, r4, r5, pc}
 800fdf2:	6983      	ldr	r3, [r0, #24]
 800fdf4:	b133      	cbz	r3, 800fe04 <ucdr_check_final_buffer_behavior_array+0x34>
 800fdf6:	69c1      	ldr	r1, [r0, #28]
 800fdf8:	4798      	blx	r3
 800fdfa:	75a0      	strb	r0, [r4, #22]
 800fdfc:	2800      	cmp	r0, #0
 800fdfe:	d0f1      	beq.n	800fde4 <ucdr_check_final_buffer_behavior_array+0x14>
 800fe00:	2000      	movs	r0, #0
 800fe02:	bd38      	pop	{r3, r4, r5, pc}
 800fe04:	2301      	movs	r3, #1
 800fe06:	7583      	strb	r3, [r0, #22]
 800fe08:	e7fa      	b.n	800fe00 <ucdr_check_final_buffer_behavior_array+0x30>
 800fe0a:	bf00      	nop

0800fe0c <ucdr_advance_buffer>:
 800fe0c:	b538      	push	{r3, r4, r5, lr}
 800fe0e:	4604      	mov	r4, r0
 800fe10:	460d      	mov	r5, r1
 800fe12:	f7ff ff53 	bl	800fcbc <ucdr_check_buffer_available_for>
 800fe16:	b178      	cbz	r0, 800fe38 <ucdr_advance_buffer+0x2c>
 800fe18:	6923      	ldr	r3, [r4, #16]
 800fe1a:	68a2      	ldr	r2, [r4, #8]
 800fe1c:	442b      	add	r3, r5
 800fe1e:	442a      	add	r2, r5
 800fe20:	6123      	str	r3, [r4, #16]
 800fe22:	2301      	movs	r3, #1
 800fe24:	60a2      	str	r2, [r4, #8]
 800fe26:	7563      	strb	r3, [r4, #21]
 800fe28:	bd38      	pop	{r3, r4, r5, pc}
 800fe2a:	68a2      	ldr	r2, [r4, #8]
 800fe2c:	1a2d      	subs	r5, r5, r0
 800fe2e:	6923      	ldr	r3, [r4, #16]
 800fe30:	4402      	add	r2, r0
 800fe32:	4418      	add	r0, r3
 800fe34:	60a2      	str	r2, [r4, #8]
 800fe36:	6120      	str	r0, [r4, #16]
 800fe38:	4629      	mov	r1, r5
 800fe3a:	2201      	movs	r2, #1
 800fe3c:	4620      	mov	r0, r4
 800fe3e:	f7ff ffc7 	bl	800fdd0 <ucdr_check_final_buffer_behavior_array>
 800fe42:	2800      	cmp	r0, #0
 800fe44:	d1f1      	bne.n	800fe2a <ucdr_advance_buffer+0x1e>
 800fe46:	2301      	movs	r3, #1
 800fe48:	7563      	strb	r3, [r4, #21]
 800fe4a:	bd38      	pop	{r3, r4, r5, pc}

0800fe4c <_rclc_check_for_new_data>:
 800fe4c:	2800      	cmp	r0, #0
 800fe4e:	d046      	beq.n	800fede <_rclc_check_for_new_data+0x92>
 800fe50:	4603      	mov	r3, r0
 800fe52:	b530      	push	{r4, r5, lr}
 800fe54:	7802      	ldrb	r2, [r0, #0]
 800fe56:	b085      	sub	sp, #20
 800fe58:	2a0a      	cmp	r2, #10
 800fe5a:	d842      	bhi.n	800fee2 <_rclc_check_for_new_data+0x96>
 800fe5c:	e8df f002 	tbb	[pc, r2]
 800fe60:	14181212 	.word	0x14181212
 800fe64:	06060614 	.word	0x06060614
 800fe68:	2e1a      	.short	0x2e1a
 800fe6a:	16          	.byte	0x16
 800fe6b:	00          	.byte	0x00
 800fe6c:	6a0a      	ldr	r2, [r1, #32]
 800fe6e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800fe70:	2000      	movs	r0, #0
 800fe72:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800fe76:	1a12      	subs	r2, r2, r0
 800fe78:	bf18      	it	ne
 800fe7a:	2201      	movne	r2, #1
 800fe7c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800fe80:	b005      	add	sp, #20
 800fe82:	bd30      	pop	{r4, r5, pc}
 800fe84:	680a      	ldr	r2, [r1, #0]
 800fe86:	e7f2      	b.n	800fe6e <_rclc_check_for_new_data+0x22>
 800fe88:	698a      	ldr	r2, [r1, #24]
 800fe8a:	e7f0      	b.n	800fe6e <_rclc_check_for_new_data+0x22>
 800fe8c:	688a      	ldr	r2, [r1, #8]
 800fe8e:	e7ee      	b.n	800fe6e <_rclc_check_for_new_data+0x22>
 800fe90:	690a      	ldr	r2, [r1, #16]
 800fe92:	e7ec      	b.n	800fe6e <_rclc_check_for_new_data+0x22>
 800fe94:	685c      	ldr	r4, [r3, #4]
 800fe96:	4608      	mov	r0, r1
 800fe98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fe9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fea0:	f104 0542 	add.w	r5, r4, #66	@ 0x42
 800fea4:	f104 0110 	add.w	r1, r4, #16
 800fea8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800feac:	9500      	str	r5, [sp, #0]
 800feae:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800feb2:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800feb6:	f004 f987 	bl	80141c8 <rcl_action_client_wait_set_get_entities_ready>
 800feba:	e7e1      	b.n	800fe80 <_rclc_check_for_new_data+0x34>
 800febc:	685c      	ldr	r4, [r3, #4]
 800febe:	4608      	mov	r0, r1
 800fec0:	f104 0222 	add.w	r2, r4, #34	@ 0x22
 800fec4:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 800fec8:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800fecc:	e9cd 2100 	strd	r2, r1, [sp]
 800fed0:	f104 0220 	add.w	r2, r4, #32
 800fed4:	f104 0110 	add.w	r1, r4, #16
 800fed8:	f004 fb90 	bl	80145fc <rcl_action_server_wait_set_get_entities_ready>
 800fedc:	e7d0      	b.n	800fe80 <_rclc_check_for_new_data+0x34>
 800fede:	200b      	movs	r0, #11
 800fee0:	4770      	bx	lr
 800fee2:	2001      	movs	r0, #1
 800fee4:	e7cc      	b.n	800fe80 <_rclc_check_for_new_data+0x34>
 800fee6:	bf00      	nop

0800fee8 <_rclc_take_new_data>:
 800fee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800feea:	b09b      	sub	sp, #108	@ 0x6c
 800feec:	2800      	cmp	r0, #0
 800feee:	f000 8088 	beq.w	8010002 <_rclc_take_new_data+0x11a>
 800fef2:	7803      	ldrb	r3, [r0, #0]
 800fef4:	4604      	mov	r4, r0
 800fef6:	2b0a      	cmp	r3, #10
 800fef8:	f200 8167 	bhi.w	80101ca <_rclc_take_new_data+0x2e2>
 800fefc:	e8df f003 	tbb	[pc, r3]
 800ff00:	44152d2d 	.word	0x44152d2d
 800ff04:	19191944 	.word	0x19191944
 800ff08:	065a      	.short	0x065a
 800ff0a:	15          	.byte	0x15
 800ff0b:	00          	.byte	0x00
 800ff0c:	6840      	ldr	r0, [r0, #4]
 800ff0e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	f040 80b2 	bne.w	801007c <_rclc_take_new_data+0x194>
 800ff18:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	f040 80e4 	bne.w	80100ea <_rclc_take_new_data+0x202>
 800ff22:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d16f      	bne.n	801000a <_rclc_take_new_data+0x122>
 800ff2a:	2500      	movs	r5, #0
 800ff2c:	4628      	mov	r0, r5
 800ff2e:	b01b      	add	sp, #108	@ 0x6c
 800ff30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff32:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800ff34:	6a0b      	ldr	r3, [r1, #32]
 800ff36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d0f5      	beq.n	800ff2a <_rclc_take_new_data+0x42>
 800ff3e:	6882      	ldr	r2, [r0, #8]
 800ff40:	f100 0110 	add.w	r1, r0, #16
 800ff44:	6840      	ldr	r0, [r0, #4]
 800ff46:	f002 fdfd 	bl	8012b44 <rcl_take_request>
 800ff4a:	4605      	mov	r5, r0
 800ff4c:	2800      	cmp	r0, #0
 800ff4e:	d0ec      	beq.n	800ff2a <_rclc_take_new_data+0x42>
 800ff50:	f240 2359 	movw	r3, #601	@ 0x259
 800ff54:	4298      	cmp	r0, r3
 800ff56:	d013      	beq.n	800ff80 <_rclc_take_new_data+0x98>
 800ff58:	e029      	b.n	800ffae <_rclc_take_new_data+0xc6>
 800ff5a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800ff5c:	680b      	ldr	r3, [r1, #0]
 800ff5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d0e1      	beq.n	800ff2a <_rclc_take_new_data+0x42>
 800ff66:	2300      	movs	r3, #0
 800ff68:	aa0a      	add	r2, sp, #40	@ 0x28
 800ff6a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800ff6e:	f002 ff2d 	bl	8012dcc <rcl_take>
 800ff72:	4605      	mov	r5, r0
 800ff74:	2800      	cmp	r0, #0
 800ff76:	d0d9      	beq.n	800ff2c <_rclc_take_new_data+0x44>
 800ff78:	f240 1391 	movw	r3, #401	@ 0x191
 800ff7c:	4298      	cmp	r0, r3
 800ff7e:	d116      	bne.n	800ffae <_rclc_take_new_data+0xc6>
 800ff80:	2300      	movs	r3, #0
 800ff82:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800ff86:	e7d1      	b.n	800ff2c <_rclc_take_new_data+0x44>
 800ff88:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800ff8a:	698b      	ldr	r3, [r1, #24]
 800ff8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d0ca      	beq.n	800ff2a <_rclc_take_new_data+0x42>
 800ff94:	6882      	ldr	r2, [r0, #8]
 800ff96:	f100 0110 	add.w	r1, r0, #16
 800ff9a:	6840      	ldr	r0, [r0, #4]
 800ff9c:	f001 fdb8 	bl	8011b10 <rcl_take_response>
 800ffa0:	4605      	mov	r5, r0
 800ffa2:	2800      	cmp	r0, #0
 800ffa4:	d0c1      	beq.n	800ff2a <_rclc_take_new_data+0x42>
 800ffa6:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800ffaa:	4298      	cmp	r0, r3
 800ffac:	d0be      	beq.n	800ff2c <_rclc_take_new_data+0x44>
 800ffae:	f000 ff63 	bl	8010e78 <rcutils_reset_error>
 800ffb2:	e7bb      	b.n	800ff2c <_rclc_take_new_data+0x44>
 800ffb4:	6840      	ldr	r0, [r0, #4]
 800ffb6:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d17d      	bne.n	80100ba <_rclc_take_new_data+0x1d2>
 800ffbe:	69c3      	ldr	r3, [r0, #28]
 800ffc0:	b11b      	cbz	r3, 800ffca <_rclc_take_new_data+0xe2>
 800ffc2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d144      	bne.n	8010054 <_rclc_take_new_data+0x16c>
 800ffca:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	f040 80ac 	bne.w	801012c <_rclc_take_new_data+0x244>
 800ffd4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d0a6      	beq.n	800ff2a <_rclc_take_new_data+0x42>
 800ffdc:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800ffde:	a90a      	add	r1, sp, #40	@ 0x28
 800ffe0:	3010      	adds	r0, #16
 800ffe2:	f003 ffc9 	bl	8013f78 <rcl_action_take_result_response>
 800ffe6:	4605      	mov	r5, r0
 800ffe8:	2800      	cmp	r0, #0
 800ffea:	d1e0      	bne.n	800ffae <_rclc_take_new_data+0xc6>
 800ffec:	6860      	ldr	r0, [r4, #4]
 800ffee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fff2:	f004 fc33 	bl	801485c <rclc_action_find_handle_by_result_request_sequence_number>
 800fff6:	2800      	cmp	r0, #0
 800fff8:	d098      	beq.n	800ff2c <_rclc_take_new_data+0x44>
 800fffa:	2301      	movs	r3, #1
 800fffc:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 8010000:	e794      	b.n	800ff2c <_rclc_take_new_data+0x44>
 8010002:	250b      	movs	r5, #11
 8010004:	4628      	mov	r0, r5
 8010006:	b01b      	add	sp, #108	@ 0x6c
 8010008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801000a:	ae04      	add	r6, sp, #16
 801000c:	3010      	adds	r0, #16
 801000e:	aa0a      	add	r2, sp, #40	@ 0x28
 8010010:	4631      	mov	r1, r6
 8010012:	f004 fa27 	bl	8014464 <rcl_action_take_cancel_request>
 8010016:	4605      	mov	r5, r0
 8010018:	2800      	cmp	r0, #0
 801001a:	d1c8      	bne.n	800ffae <_rclc_take_new_data+0xc6>
 801001c:	a90a      	add	r1, sp, #40	@ 0x28
 801001e:	6860      	ldr	r0, [r4, #4]
 8010020:	f004 fbdc 	bl	80147dc <rclc_action_find_goal_handle_by_uuid>
 8010024:	4607      	mov	r7, r0
 8010026:	2800      	cmp	r0, #0
 8010028:	f000 80bb 	beq.w	80101a2 <_rclc_take_new_data+0x2ba>
 801002c:	2101      	movs	r1, #1
 801002e:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8010032:	f004 fb5d 	bl	80146f0 <rcl_action_transition_goal_state>
 8010036:	2803      	cmp	r0, #3
 8010038:	4684      	mov	ip, r0
 801003a:	f040 80a7 	bne.w	801018c <_rclc_take_new_data+0x2a4>
 801003e:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8010042:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010044:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010046:	e896 0003 	ldmia.w	r6, {r0, r1}
 801004a:	e884 0003 	stmia.w	r4, {r0, r1}
 801004e:	f887 c008 	strb.w	ip, [r7, #8]
 8010052:	e76b      	b.n	800ff2c <_rclc_take_new_data+0x44>
 8010054:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8010056:	3010      	adds	r0, #16
 8010058:	f004 f80e 	bl	8014078 <rcl_action_take_feedback>
 801005c:	4605      	mov	r5, r0
 801005e:	2800      	cmp	r0, #0
 8010060:	d1a5      	bne.n	800ffae <_rclc_take_new_data+0xc6>
 8010062:	6860      	ldr	r0, [r4, #4]
 8010064:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8010066:	f004 fbb9 	bl	80147dc <rclc_action_find_goal_handle_by_uuid>
 801006a:	4603      	mov	r3, r0
 801006c:	2800      	cmp	r0, #0
 801006e:	f000 80a3 	beq.w	80101b8 <_rclc_take_new_data+0x2d0>
 8010072:	2201      	movs	r2, #1
 8010074:	6860      	ldr	r0, [r4, #4]
 8010076:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 801007a:	e7a6      	b.n	800ffca <_rclc_take_new_data+0xe2>
 801007c:	f004 fb88 	bl	8014790 <rclc_action_take_goal_handle>
 8010080:	4606      	mov	r6, r0
 8010082:	6860      	ldr	r0, [r4, #4]
 8010084:	2e00      	cmp	r6, #0
 8010086:	f43f af47 	beq.w	800ff18 <_rclc_take_new_data+0x30>
 801008a:	6070      	str	r0, [r6, #4]
 801008c:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 8010090:	69f2      	ldr	r2, [r6, #28]
 8010092:	3010      	adds	r0, #16
 8010094:	f004 f92e 	bl	80142f4 <rcl_action_take_goal_request>
 8010098:	4605      	mov	r5, r0
 801009a:	2800      	cmp	r0, #0
 801009c:	f040 808e 	bne.w	80101bc <_rclc_take_new_data+0x2d4>
 80100a0:	69f7      	ldr	r7, [r6, #28]
 80100a2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80100a4:	7235      	strb	r5, [r6, #8]
 80100a6:	f8c6 0009 	str.w	r0, [r6, #9]
 80100aa:	f8c6 100d 	str.w	r1, [r6, #13]
 80100ae:	6860      	ldr	r0, [r4, #4]
 80100b0:	f8c6 2011 	str.w	r2, [r6, #17]
 80100b4:	f8c6 3015 	str.w	r3, [r6, #21]
 80100b8:	e72e      	b.n	800ff18 <_rclc_take_new_data+0x30>
 80100ba:	aa04      	add	r2, sp, #16
 80100bc:	a90a      	add	r1, sp, #40	@ 0x28
 80100be:	3010      	adds	r0, #16
 80100c0:	f003 fee2 	bl	8013e88 <rcl_action_take_goal_response>
 80100c4:	4605      	mov	r5, r0
 80100c6:	2800      	cmp	r0, #0
 80100c8:	f47f af71 	bne.w	800ffae <_rclc_take_new_data+0xc6>
 80100cc:	6860      	ldr	r0, [r4, #4]
 80100ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80100d2:	f004 fbb1 	bl	8014838 <rclc_action_find_handle_by_goal_request_sequence_number>
 80100d6:	b130      	cbz	r0, 80100e6 <_rclc_take_new_data+0x1fe>
 80100d8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80100dc:	2201      	movs	r2, #1
 80100de:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 80100e2:	f880 2020 	strb.w	r2, [r0, #32]
 80100e6:	6860      	ldr	r0, [r4, #4]
 80100e8:	e769      	b.n	800ffbe <_rclc_take_new_data+0xd6>
 80100ea:	3010      	adds	r0, #16
 80100ec:	aa04      	add	r2, sp, #16
 80100ee:	a90a      	add	r1, sp, #40	@ 0x28
 80100f0:	f004 f978 	bl	80143e4 <rcl_action_take_result_request>
 80100f4:	4605      	mov	r5, r0
 80100f6:	2800      	cmp	r0, #0
 80100f8:	f47f af59 	bne.w	800ffae <_rclc_take_new_data+0xc6>
 80100fc:	a904      	add	r1, sp, #16
 80100fe:	6860      	ldr	r0, [r4, #4]
 8010100:	f004 fb6c 	bl	80147dc <rclc_action_find_goal_handle_by_uuid>
 8010104:	4607      	mov	r7, r0
 8010106:	b160      	cbz	r0, 8010122 <_rclc_take_new_data+0x23a>
 8010108:	ad0a      	add	r5, sp, #40	@ 0x28
 801010a:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 801010e:	f04f 0c02 	mov.w	ip, #2
 8010112:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010114:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010116:	e895 0003 	ldmia.w	r5, {r0, r1}
 801011a:	e886 0003 	stmia.w	r6, {r0, r1}
 801011e:	f887 c008 	strb.w	ip, [r7, #8]
 8010122:	6860      	ldr	r0, [r4, #4]
 8010124:	2300      	movs	r3, #0
 8010126:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 801012a:	e6fa      	b.n	800ff22 <_rclc_take_new_data+0x3a>
 801012c:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8010130:	a90a      	add	r1, sp, #40	@ 0x28
 8010132:	3010      	adds	r0, #16
 8010134:	f003 ff60 	bl	8013ff8 <rcl_action_take_cancel_response>
 8010138:	4605      	mov	r5, r0
 801013a:	2800      	cmp	r0, #0
 801013c:	f47f af37 	bne.w	800ffae <_rclc_take_new_data+0xc6>
 8010140:	6860      	ldr	r0, [r4, #4]
 8010142:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010146:	f004 fb9b 	bl	8014880 <rclc_action_find_handle_by_cancel_request_sequence_number>
 801014a:	4606      	mov	r6, r0
 801014c:	6860      	ldr	r0, [r4, #4]
 801014e:	2e00      	cmp	r6, #0
 8010150:	f43f af40 	beq.w	800ffd4 <_rclc_take_new_data+0xec>
 8010154:	2701      	movs	r7, #1
 8010156:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8010158:	84b7      	strh	r7, [r6, #36]	@ 0x24
 801015a:	2b00      	cmp	r3, #0
 801015c:	f43f af3a 	beq.w	800ffd4 <_rclc_take_new_data+0xec>
 8010160:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8010162:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8010166:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801016a:	f004 fb37 	bl	80147dc <rclc_action_find_goal_handle_by_uuid>
 801016e:	b138      	cbz	r0, 8010180 <_rclc_take_new_data+0x298>
 8010170:	6860      	ldr	r0, [r4, #4]
 8010172:	3501      	adds	r5, #1
 8010174:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8010178:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801017a:	42ab      	cmp	r3, r5
 801017c:	d8f0      	bhi.n	8010160 <_rclc_take_new_data+0x278>
 801017e:	e729      	b.n	800ffd4 <_rclc_take_new_data+0xec>
 8010180:	6860      	ldr	r0, [r4, #4]
 8010182:	3501      	adds	r5, #1
 8010184:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8010186:	42ab      	cmp	r3, r5
 8010188:	d8ea      	bhi.n	8010160 <_rclc_take_new_data+0x278>
 801018a:	e723      	b.n	800ffd4 <_rclc_take_new_data+0xec>
 801018c:	ab06      	add	r3, sp, #24
 801018e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010190:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010194:	2103      	movs	r1, #3
 8010196:	6860      	ldr	r0, [r4, #4]
 8010198:	e896 000c 	ldmia.w	r6, {r2, r3}
 801019c:	f004 fbe4 	bl	8014968 <rclc_action_server_goal_cancel_reject>
 80101a0:	e6c4      	b.n	800ff2c <_rclc_take_new_data+0x44>
 80101a2:	ab06      	add	r3, sp, #24
 80101a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80101a6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80101aa:	2102      	movs	r1, #2
 80101ac:	6860      	ldr	r0, [r4, #4]
 80101ae:	e896 000c 	ldmia.w	r6, {r2, r3}
 80101b2:	f004 fbd9 	bl	8014968 <rclc_action_server_goal_cancel_reject>
 80101b6:	e6b9      	b.n	800ff2c <_rclc_take_new_data+0x44>
 80101b8:	6860      	ldr	r0, [r4, #4]
 80101ba:	e706      	b.n	800ffca <_rclc_take_new_data+0xe2>
 80101bc:	4631      	mov	r1, r6
 80101be:	6860      	ldr	r0, [r4, #4]
 80101c0:	f004 faf6 	bl	80147b0 <rclc_action_remove_used_goal_handle>
 80101c4:	f000 fe58 	bl	8010e78 <rcutils_reset_error>
 80101c8:	e6b0      	b.n	800ff2c <_rclc_take_new_data+0x44>
 80101ca:	2501      	movs	r5, #1
 80101cc:	e6ae      	b.n	800ff2c <_rclc_take_new_data+0x44>
 80101ce:	bf00      	nop

080101d0 <_rclc_execute.part.0>:
 80101d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101d2:	7803      	ldrb	r3, [r0, #0]
 80101d4:	b085      	sub	sp, #20
 80101d6:	4604      	mov	r4, r0
 80101d8:	2b0a      	cmp	r3, #10
 80101da:	f200 8139 	bhi.w	8010450 <_rclc_execute.part.0+0x280>
 80101de:	e8df f003 	tbb	[pc, r3]
 80101e2:	4268      	.short	0x4268
 80101e4:	06a75b4d 	.word	0x06a75b4d
 80101e8:	721d0606 	.word	0x721d0606
 80101ec:	62          	.byte	0x62
 80101ed:	00          	.byte	0x00
 80101ee:	2b06      	cmp	r3, #6
 80101f0:	f000 8126 	beq.w	8010440 <_rclc_execute.part.0+0x270>
 80101f4:	2b07      	cmp	r3, #7
 80101f6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80101f8:	f040 811c 	bne.w	8010434 <_rclc_execute.part.0+0x264>
 80101fc:	f104 0510 	add.w	r5, r4, #16
 8010200:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 8010204:	6880      	ldr	r0, [r0, #8]
 8010206:	4798      	blx	r3
 8010208:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801020a:	4629      	mov	r1, r5
 801020c:	6860      	ldr	r0, [r4, #4]
 801020e:	f002 fcd9 	bl	8012bc4 <rcl_send_response>
 8010212:	4604      	mov	r4, r0
 8010214:	b378      	cbz	r0, 8010276 <_rclc_execute.part.0+0xa6>
 8010216:	f000 fe2f 	bl	8010e78 <rcutils_reset_error>
 801021a:	e02c      	b.n	8010276 <_rclc_execute.part.0+0xa6>
 801021c:	6840      	ldr	r0, [r0, #4]
 801021e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8010222:	2b00      	cmp	r3, #0
 8010224:	f000 808e 	beq.w	8010344 <_rclc_execute.part.0+0x174>
 8010228:	2600      	movs	r6, #0
 801022a:	2701      	movs	r7, #1
 801022c:	e004      	b.n	8010238 <_rclc_execute.part.0+0x68>
 801022e:	f004 fa89 	bl	8014744 <rclc_action_send_result_request>
 8010232:	b998      	cbnz	r0, 801025c <_rclc_execute.part.0+0x8c>
 8010234:	722f      	strb	r7, [r5, #8]
 8010236:	6860      	ldr	r0, [r4, #4]
 8010238:	f004 fb34 	bl	80148a4 <rclc_action_find_first_handle_with_goal_response>
 801023c:	4605      	mov	r5, r0
 801023e:	2800      	cmp	r0, #0
 8010240:	d07f      	beq.n	8010342 <_rclc_execute.part.0+0x172>
 8010242:	6863      	ldr	r3, [r4, #4]
 8010244:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010246:	699b      	ldr	r3, [r3, #24]
 8010248:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 801024c:	f885 6020 	strb.w	r6, [r5, #32]
 8010250:	4798      	blx	r3
 8010252:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8010256:	4628      	mov	r0, r5
 8010258:	2b00      	cmp	r3, #0
 801025a:	d1e8      	bne.n	801022e <_rclc_execute.part.0+0x5e>
 801025c:	6860      	ldr	r0, [r4, #4]
 801025e:	4629      	mov	r1, r5
 8010260:	f004 faa6 	bl	80147b0 <rclc_action_remove_used_goal_handle>
 8010264:	e7e7      	b.n	8010236 <_rclc_execute.part.0+0x66>
 8010266:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 801026a:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 801026e:	b100      	cbz	r0, 8010272 <_rclc_execute.part.0+0xa2>
 8010270:	68a0      	ldr	r0, [r4, #8]
 8010272:	2400      	movs	r4, #0
 8010274:	4798      	blx	r3
 8010276:	4620      	mov	r0, r4
 8010278:	b005      	add	sp, #20
 801027a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801027c:	6840      	ldr	r0, [r0, #4]
 801027e:	f002 feb9 	bl	8012ff4 <rcl_timer_call>
 8010282:	f240 3321 	movw	r3, #801	@ 0x321
 8010286:	4604      	mov	r4, r0
 8010288:	4298      	cmp	r0, r3
 801028a:	d001      	beq.n	8010290 <_rclc_execute.part.0+0xc0>
 801028c:	2800      	cmp	r0, #0
 801028e:	d1c2      	bne.n	8010216 <_rclc_execute.part.0+0x46>
 8010290:	2400      	movs	r4, #0
 8010292:	4620      	mov	r0, r4
 8010294:	b005      	add	sp, #20
 8010296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010298:	2400      	movs	r4, #0
 801029a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801029c:	6880      	ldr	r0, [r0, #8]
 801029e:	4798      	blx	r3
 80102a0:	4620      	mov	r0, r4
 80102a2:	b005      	add	sp, #20
 80102a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102a6:	2400      	movs	r4, #0
 80102a8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80102aa:	4798      	blx	r3
 80102ac:	4620      	mov	r0, r4
 80102ae:	b005      	add	sp, #20
 80102b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102b2:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 80102b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80102b8:	b100      	cbz	r0, 80102bc <_rclc_execute.part.0+0xec>
 80102ba:	68a0      	ldr	r0, [r4, #8]
 80102bc:	2400      	movs	r4, #0
 80102be:	4798      	blx	r3
 80102c0:	4620      	mov	r0, r4
 80102c2:	b005      	add	sp, #20
 80102c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102c6:	6840      	ldr	r0, [r0, #4]
 80102c8:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80102cc:	bb3b      	cbnz	r3, 801031e <_rclc_execute.part.0+0x14e>
 80102ce:	f890 3020 	ldrb.w	r3, [r0, #32]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d07d      	beq.n	80103d2 <_rclc_execute.part.0+0x202>
 80102d6:	f640 0634 	movw	r6, #2100	@ 0x834
 80102da:	2701      	movs	r7, #1
 80102dc:	e007      	b.n	80102ee <_rclc_execute.part.0+0x11e>
 80102de:	4628      	mov	r0, r5
 80102e0:	f004 faf8 	bl	80148d4 <rclc_action_server_response_goal_request>
 80102e4:	4629      	mov	r1, r5
 80102e6:	6860      	ldr	r0, [r4, #4]
 80102e8:	f004 fa62 	bl	80147b0 <rclc_action_remove_used_goal_handle>
 80102ec:	6860      	ldr	r0, [r4, #4]
 80102ee:	2100      	movs	r1, #0
 80102f0:	f004 fa8a 	bl	8014808 <rclc_action_find_first_handle_by_status>
 80102f4:	4605      	mov	r5, r0
 80102f6:	2800      	cmp	r0, #0
 80102f8:	d068      	beq.n	80103cc <_rclc_execute.part.0+0x1fc>
 80102fa:	6863      	ldr	r3, [r4, #4]
 80102fc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80102fe:	699b      	ldr	r3, [r3, #24]
 8010300:	4798      	blx	r3
 8010302:	42b0      	cmp	r0, r6
 8010304:	f04f 0100 	mov.w	r1, #0
 8010308:	d1e9      	bne.n	80102de <_rclc_execute.part.0+0x10e>
 801030a:	2101      	movs	r1, #1
 801030c:	4628      	mov	r0, r5
 801030e:	f004 fae1 	bl	80148d4 <rclc_action_server_response_goal_request>
 8010312:	722f      	strb	r7, [r5, #8]
 8010314:	e7ea      	b.n	80102ec <_rclc_execute.part.0+0x11c>
 8010316:	6848      	ldr	r0, [r1, #4]
 8010318:	f004 fa4a 	bl	80147b0 <rclc_action_remove_used_goal_handle>
 801031c:	6860      	ldr	r0, [r4, #4]
 801031e:	f004 fa7f 	bl	8014820 <rclc_action_find_first_terminated_handle>
 8010322:	4601      	mov	r1, r0
 8010324:	2800      	cmp	r0, #0
 8010326:	d1f6      	bne.n	8010316 <_rclc_execute.part.0+0x146>
 8010328:	6860      	ldr	r0, [r4, #4]
 801032a:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 801032e:	e7ce      	b.n	80102ce <_rclc_execute.part.0+0xfe>
 8010330:	2400      	movs	r4, #0
 8010332:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010334:	f100 0110 	add.w	r1, r0, #16
 8010338:	6880      	ldr	r0, [r0, #8]
 801033a:	4798      	blx	r3
 801033c:	4620      	mov	r0, r4
 801033e:	b005      	add	sp, #20
 8010340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010342:	6860      	ldr	r0, [r4, #4]
 8010344:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010348:	b18b      	cbz	r3, 801036e <_rclc_execute.part.0+0x19e>
 801034a:	68c5      	ldr	r5, [r0, #12]
 801034c:	b32d      	cbz	r5, 801039a <_rclc_execute.part.0+0x1ca>
 801034e:	2600      	movs	r6, #0
 8010350:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8010354:	b143      	cbz	r3, 8010368 <_rclc_execute.part.0+0x198>
 8010356:	69c3      	ldr	r3, [r0, #28]
 8010358:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 801035c:	b123      	cbz	r3, 8010368 <_rclc_execute.part.0+0x198>
 801035e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8010360:	4628      	mov	r0, r5
 8010362:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010364:	4798      	blx	r3
 8010366:	6860      	ldr	r0, [r4, #4]
 8010368:	682d      	ldr	r5, [r5, #0]
 801036a:	2d00      	cmp	r5, #0
 801036c:	d1f0      	bne.n	8010350 <_rclc_execute.part.0+0x180>
 801036e:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8010372:	b193      	cbz	r3, 801039a <_rclc_execute.part.0+0x1ca>
 8010374:	68c5      	ldr	r5, [r0, #12]
 8010376:	b185      	cbz	r5, 801039a <_rclc_execute.part.0+0x1ca>
 8010378:	2600      	movs	r6, #0
 801037a:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 801037e:	b14b      	cbz	r3, 8010394 <_rclc_execute.part.0+0x1c4>
 8010380:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010382:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8010386:	b12b      	cbz	r3, 8010394 <_rclc_execute.part.0+0x1c4>
 8010388:	4628      	mov	r0, r5
 801038a:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 801038e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010390:	4798      	blx	r3
 8010392:	6860      	ldr	r0, [r4, #4]
 8010394:	682d      	ldr	r5, [r5, #0]
 8010396:	2d00      	cmp	r5, #0
 8010398:	d1ef      	bne.n	801037a <_rclc_execute.part.0+0x1aa>
 801039a:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 801039e:	2b00      	cmp	r3, #0
 80103a0:	f43f af76 	beq.w	8010290 <_rclc_execute.part.0+0xc0>
 80103a4:	2700      	movs	r7, #0
 80103a6:	e00b      	b.n	80103c0 <_rclc_execute.part.0+0x1f0>
 80103a8:	6863      	ldr	r3, [r4, #4]
 80103aa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80103ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80103ae:	6a1e      	ldr	r6, [r3, #32]
 80103b0:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 80103b4:	47b0      	blx	r6
 80103b6:	6860      	ldr	r0, [r4, #4]
 80103b8:	4629      	mov	r1, r5
 80103ba:	f004 f9f9 	bl	80147b0 <rclc_action_remove_used_goal_handle>
 80103be:	6860      	ldr	r0, [r4, #4]
 80103c0:	f004 fa7c 	bl	80148bc <rclc_action_find_first_handle_with_result_response>
 80103c4:	4605      	mov	r5, r0
 80103c6:	2800      	cmp	r0, #0
 80103c8:	d1ee      	bne.n	80103a8 <_rclc_execute.part.0+0x1d8>
 80103ca:	e761      	b.n	8010290 <_rclc_execute.part.0+0xc0>
 80103cc:	6860      	ldr	r0, [r4, #4]
 80103ce:	f880 5020 	strb.w	r5, [r0, #32]
 80103d2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	f43f af5a 	beq.w	8010290 <_rclc_execute.part.0+0xc0>
 80103dc:	68c5      	ldr	r5, [r0, #12]
 80103de:	b1b5      	cbz	r5, 801040e <_rclc_execute.part.0+0x23e>
 80103e0:	2602      	movs	r6, #2
 80103e2:	e001      	b.n	80103e8 <_rclc_execute.part.0+0x218>
 80103e4:	682d      	ldr	r5, [r5, #0]
 80103e6:	b195      	cbz	r5, 801040e <_rclc_execute.part.0+0x23e>
 80103e8:	f995 3008 	ldrsb.w	r3, [r5, #8]
 80103ec:	2b03      	cmp	r3, #3
 80103ee:	d1f9      	bne.n	80103e4 <_rclc_execute.part.0+0x214>
 80103f0:	69c3      	ldr	r3, [r0, #28]
 80103f2:	4628      	mov	r0, r5
 80103f4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80103f6:	4798      	blx	r3
 80103f8:	4603      	mov	r3, r0
 80103fa:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 80103fe:	4628      	mov	r0, r5
 8010400:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8010404:	b143      	cbz	r3, 8010418 <_rclc_execute.part.0+0x248>
 8010406:	f004 fa83 	bl	8014910 <rclc_action_server_goal_cancel_accept>
 801040a:	6860      	ldr	r0, [r4, #4]
 801040c:	e7ea      	b.n	80103e4 <_rclc_execute.part.0+0x214>
 801040e:	2300      	movs	r3, #0
 8010410:	461c      	mov	r4, r3
 8010412:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8010416:	e72e      	b.n	8010276 <_rclc_execute.part.0+0xa6>
 8010418:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801041a:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 801041e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010422:	2101      	movs	r1, #1
 8010424:	6860      	ldr	r0, [r4, #4]
 8010426:	e9d7 2300 	ldrd	r2, r3, [r7]
 801042a:	f004 fa9d 	bl	8014968 <rclc_action_server_goal_cancel_reject>
 801042e:	722e      	strb	r6, [r5, #8]
 8010430:	6860      	ldr	r0, [r4, #4]
 8010432:	e7d7      	b.n	80103e4 <_rclc_execute.part.0+0x214>
 8010434:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8010436:	f104 0510 	add.w	r5, r4, #16
 801043a:	6880      	ldr	r0, [r0, #8]
 801043c:	4798      	blx	r3
 801043e:	e6e3      	b.n	8010208 <_rclc_execute.part.0+0x38>
 8010440:	f100 0510 	add.w	r5, r0, #16
 8010444:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010446:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8010448:	4629      	mov	r1, r5
 801044a:	6880      	ldr	r0, [r0, #8]
 801044c:	4798      	blx	r3
 801044e:	e6db      	b.n	8010208 <_rclc_execute.part.0+0x38>
 8010450:	2401      	movs	r4, #1
 8010452:	e710      	b.n	8010276 <_rclc_execute.part.0+0xa6>

08010454 <rclc_executor_trigger_any>:
 8010454:	2800      	cmp	r0, #0
 8010456:	d03d      	beq.n	80104d4 <rclc_executor_trigger_any+0x80>
 8010458:	2900      	cmp	r1, #0
 801045a:	d03c      	beq.n	80104d6 <rclc_executor_trigger_any+0x82>
 801045c:	4603      	mov	r3, r0
 801045e:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8010462:	2200      	movs	r2, #0
 8010464:	2800      	cmp	r0, #0
 8010466:	d035      	beq.n	80104d4 <rclc_executor_trigger_any+0x80>
 8010468:	b430      	push	{r4, r5}
 801046a:	f893 c000 	ldrb.w	ip, [r3]
 801046e:	f1bc 0f08 	cmp.w	ip, #8
 8010472:	d11d      	bne.n	80104b0 <rclc_executor_trigger_any+0x5c>
 8010474:	685c      	ldr	r4, [r3, #4]
 8010476:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8010478:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 801047c:	d105      	bne.n	801048a <rclc_executor_trigger_any+0x36>
 801047e:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8010482:	b910      	cbnz	r0, 801048a <rclc_executor_trigger_any+0x36>
 8010484:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8010488:	b128      	cbz	r0, 8010496 <rclc_executor_trigger_any+0x42>
 801048a:	bc30      	pop	{r4, r5}
 801048c:	4770      	bx	lr
 801048e:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8010492:	2800      	cmp	r0, #0
 8010494:	d1f9      	bne.n	801048a <rclc_executor_trigger_any+0x36>
 8010496:	3201      	adds	r2, #1
 8010498:	3340      	adds	r3, #64	@ 0x40
 801049a:	4291      	cmp	r1, r2
 801049c:	d017      	beq.n	80104ce <rclc_executor_trigger_any+0x7a>
 801049e:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 80104a2:	2800      	cmp	r0, #0
 80104a4:	d0f1      	beq.n	801048a <rclc_executor_trigger_any+0x36>
 80104a6:	f893 c000 	ldrb.w	ip, [r3]
 80104aa:	f1bc 0f08 	cmp.w	ip, #8
 80104ae:	d0e1      	beq.n	8010474 <rclc_executor_trigger_any+0x20>
 80104b0:	f1bc 0f09 	cmp.w	ip, #9
 80104b4:	d1eb      	bne.n	801048e <rclc_executor_trigger_any+0x3a>
 80104b6:	685c      	ldr	r4, [r3, #4]
 80104b8:	6a25      	ldr	r5, [r4, #32]
 80104ba:	2d00      	cmp	r5, #0
 80104bc:	d1e5      	bne.n	801048a <rclc_executor_trigger_any+0x36>
 80104be:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 80104c2:	2800      	cmp	r0, #0
 80104c4:	d1e1      	bne.n	801048a <rclc_executor_trigger_any+0x36>
 80104c6:	3201      	adds	r2, #1
 80104c8:	3340      	adds	r3, #64	@ 0x40
 80104ca:	4291      	cmp	r1, r2
 80104cc:	d1e7      	bne.n	801049e <rclc_executor_trigger_any+0x4a>
 80104ce:	2000      	movs	r0, #0
 80104d0:	bc30      	pop	{r4, r5}
 80104d2:	4770      	bx	lr
 80104d4:	4770      	bx	lr
 80104d6:	4608      	mov	r0, r1
 80104d8:	4770      	bx	lr
 80104da:	bf00      	nop

080104dc <rclc_executor_get_zero_initialized_executor>:
 80104dc:	b510      	push	{r4, lr}
 80104de:	4604      	mov	r4, r0
 80104e0:	2288      	movs	r2, #136	@ 0x88
 80104e2:	4902      	ldr	r1, [pc, #8]	@ (80104ec <rclc_executor_get_zero_initialized_executor+0x10>)
 80104e4:	f00c ff05 	bl	801d2f2 <memcpy>
 80104e8:	4620      	mov	r0, r4
 80104ea:	bd10      	pop	{r4, pc}
 80104ec:	0801f458 	.word	0x0801f458

080104f0 <rclc_executor_init>:
 80104f0:	2900      	cmp	r1, #0
 80104f2:	d06a      	beq.n	80105ca <rclc_executor_init+0xda>
 80104f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104f8:	4605      	mov	r5, r0
 80104fa:	b0b0      	sub	sp, #192	@ 0xc0
 80104fc:	2800      	cmp	r0, #0
 80104fe:	d05c      	beq.n	80105ba <rclc_executor_init+0xca>
 8010500:	4616      	mov	r6, r2
 8010502:	4618      	mov	r0, r3
 8010504:	4688      	mov	r8, r1
 8010506:	461f      	mov	r7, r3
 8010508:	f000 fc92 	bl	8010e30 <rcutils_allocator_is_valid>
 801050c:	2e00      	cmp	r6, #0
 801050e:	d054      	beq.n	80105ba <rclc_executor_init+0xca>
 8010510:	f080 0401 	eor.w	r4, r0, #1
 8010514:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8010518:	d14f      	bne.n	80105ba <rclc_executor_init+0xca>
 801051a:	2288      	movs	r2, #136	@ 0x88
 801051c:	4930      	ldr	r1, [pc, #192]	@ (80105e0 <rclc_executor_init+0xf0>)
 801051e:	a80e      	add	r0, sp, #56	@ 0x38
 8010520:	f00c fee7 	bl	801d2f2 <memcpy>
 8010524:	a90e      	add	r1, sp, #56	@ 0x38
 8010526:	2288      	movs	r2, #136	@ 0x88
 8010528:	4628      	mov	r0, r5
 801052a:	f00c fee2 	bl	801d2f2 <memcpy>
 801052e:	4668      	mov	r0, sp
 8010530:	f8c5 8000 	str.w	r8, [r5]
 8010534:	60ae      	str	r6, [r5, #8]
 8010536:	f002 fed3 	bl	80132e0 <rcl_get_zero_initialized_wait_set>
 801053a:	46ec      	mov	ip, sp
 801053c:	f105 0e14 	add.w	lr, r5, #20
 8010540:	f8d7 8000 	ldr.w	r8, [r7]
 8010544:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010548:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801054c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010550:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010554:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010558:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 80105d8 <rclc_executor_init+0xe8>
 801055c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010560:	f8dc 3000 	ldr.w	r3, [ip]
 8010564:	01b0      	lsls	r0, r6, #6
 8010566:	6939      	ldr	r1, [r7, #16]
 8010568:	f8ce 3000 	str.w	r3, [lr]
 801056c:	612f      	str	r7, [r5, #16]
 801056e:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8010572:	47c0      	blx	r8
 8010574:	6068      	str	r0, [r5, #4]
 8010576:	b908      	cbnz	r0, 801057c <rclc_executor_init+0x8c>
 8010578:	e029      	b.n	80105ce <rclc_executor_init+0xde>
 801057a:	6868      	ldr	r0, [r5, #4]
 801057c:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8010580:	3401      	adds	r4, #1
 8010582:	4631      	mov	r1, r6
 8010584:	f000 fac0 	bl	8010b08 <rclc_executor_handle_init>
 8010588:	42a6      	cmp	r6, r4
 801058a:	d8f6      	bhi.n	801057a <rclc_executor_init+0x8a>
 801058c:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8010590:	f000 faae 	bl	8010af0 <rclc_executor_handle_counters_zero_init>
 8010594:	4a13      	ldr	r2, [pc, #76]	@ (80105e4 <rclc_executor_init+0xf4>)
 8010596:	2300      	movs	r3, #0
 8010598:	6868      	ldr	r0, [r5, #4]
 801059a:	e9c5 231e 	strd	r2, r3, [r5, #120]	@ 0x78
 801059e:	b168      	cbz	r0, 80105bc <rclc_executor_init+0xcc>
 80105a0:	68ab      	ldr	r3, [r5, #8]
 80105a2:	b173      	cbz	r3, 80105c2 <rclc_executor_init+0xd2>
 80105a4:	692a      	ldr	r2, [r5, #16]
 80105a6:	fab2 f382 	clz	r3, r2
 80105aa:	095b      	lsrs	r3, r3, #5
 80105ac:	b14a      	cbz	r2, 80105c2 <rclc_executor_init+0xd2>
 80105ae:	4618      	mov	r0, r3
 80105b0:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
 80105b4:	b030      	add	sp, #192	@ 0xc0
 80105b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105ba:	200b      	movs	r0, #11
 80105bc:	b030      	add	sp, #192	@ 0xc0
 80105be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105c2:	2000      	movs	r0, #0
 80105c4:	b030      	add	sp, #192	@ 0xc0
 80105c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105ca:	200b      	movs	r0, #11
 80105cc:	4770      	bx	lr
 80105ce:	200a      	movs	r0, #10
 80105d0:	e7f4      	b.n	80105bc <rclc_executor_init+0xcc>
 80105d2:	bf00      	nop
 80105d4:	f3af 8000 	nop.w
 80105d8:	3b9aca00 	.word	0x3b9aca00
 80105dc:	00000000 	.word	0x00000000
 80105e0:	0801f458 	.word	0x0801f458
 80105e4:	08010455 	.word	0x08010455

080105e8 <rclc_executor_add_subscription>:
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	bf18      	it	ne
 80105ec:	2a00      	cmpne	r2, #0
 80105ee:	b570      	push	{r4, r5, r6, lr}
 80105f0:	4604      	mov	r4, r0
 80105f2:	bf0c      	ite	eq
 80105f4:	2001      	moveq	r0, #1
 80105f6:	2000      	movne	r0, #0
 80105f8:	f89d c010 	ldrb.w	ip, [sp, #16]
 80105fc:	2900      	cmp	r1, #0
 80105fe:	bf08      	it	eq
 8010600:	f040 0001 	orreq.w	r0, r0, #1
 8010604:	bb28      	cbnz	r0, 8010652 <rclc_executor_add_subscription+0x6a>
 8010606:	fab4 f584 	clz	r5, r4
 801060a:	096d      	lsrs	r5, r5, #5
 801060c:	b30c      	cbz	r4, 8010652 <rclc_executor_add_subscription+0x6a>
 801060e:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 8010612:	4286      	cmp	r6, r0
 8010614:	d301      	bcc.n	801061a <rclc_executor_add_subscription+0x32>
 8010616:	2001      	movs	r0, #1
 8010618:	bd70      	pop	{r4, r5, r6, pc}
 801061a:	6860      	ldr	r0, [r4, #4]
 801061c:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 8010620:	f800 500e 	strb.w	r5, [r0, lr]
 8010624:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8010628:	3601      	adds	r6, #1
 801062a:	6303      	str	r3, [r0, #48]	@ 0x30
 801062c:	2301      	movs	r3, #1
 801062e:	62c5      	str	r5, [r0, #44]	@ 0x2c
 8010630:	f104 0514 	add.w	r5, r4, #20
 8010634:	f880 c001 	strb.w	ip, [r0, #1]
 8010638:	8703      	strh	r3, [r0, #56]	@ 0x38
 801063a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 801063e:	4628      	mov	r0, r5
 8010640:	60e6      	str	r6, [r4, #12]
 8010642:	f002 fe61 	bl	8013308 <rcl_wait_set_is_valid>
 8010646:	b930      	cbnz	r0, 8010656 <rclc_executor_add_subscription+0x6e>
 8010648:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 801064a:	2000      	movs	r0, #0
 801064c:	3301      	adds	r3, #1
 801064e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8010650:	bd70      	pop	{r4, r5, r6, pc}
 8010652:	200b      	movs	r0, #11
 8010654:	bd70      	pop	{r4, r5, r6, pc}
 8010656:	4628      	mov	r0, r5
 8010658:	f002 fe5c 	bl	8013314 <rcl_wait_set_fini>
 801065c:	2800      	cmp	r0, #0
 801065e:	d0f3      	beq.n	8010648 <rclc_executor_add_subscription+0x60>
 8010660:	bd70      	pop	{r4, r5, r6, pc}
 8010662:	bf00      	nop

08010664 <rclc_executor_add_service>:
 8010664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010666:	9d06      	ldr	r5, [sp, #24]
 8010668:	4604      	mov	r4, r0
 801066a:	2b00      	cmp	r3, #0
 801066c:	bf18      	it	ne
 801066e:	2d00      	cmpne	r5, #0
 8010670:	bf0c      	ite	eq
 8010672:	2001      	moveq	r0, #1
 8010674:	2000      	movne	r0, #0
 8010676:	2a00      	cmp	r2, #0
 8010678:	bf08      	it	eq
 801067a:	f040 0001 	orreq.w	r0, r0, #1
 801067e:	2900      	cmp	r1, #0
 8010680:	bf08      	it	eq
 8010682:	f040 0001 	orreq.w	r0, r0, #1
 8010686:	bb40      	cbnz	r0, 80106da <rclc_executor_add_service+0x76>
 8010688:	fab4 f684 	clz	r6, r4
 801068c:	0976      	lsrs	r6, r6, #5
 801068e:	b324      	cbz	r4, 80106da <rclc_executor_add_service+0x76>
 8010690:	e9d4 7002 	ldrd	r7, r0, [r4, #8]
 8010694:	42b8      	cmp	r0, r7
 8010696:	d301      	bcc.n	801069c <rclc_executor_add_service+0x38>
 8010698:	2001      	movs	r0, #1
 801069a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801069c:	6867      	ldr	r7, [r4, #4]
 801069e:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 80106a2:	f100 0c01 	add.w	ip, r0, #1
 80106a6:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 80106aa:	6283      	str	r3, [r0, #40]	@ 0x28
 80106ac:	2305      	movs	r3, #5
 80106ae:	6305      	str	r5, [r0, #48]	@ 0x30
 80106b0:	f104 0514 	add.w	r5, r4, #20
 80106b4:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80106b8:	f827 300e 	strh.w	r3, [r7, lr]
 80106bc:	2301      	movs	r3, #1
 80106be:	62c6      	str	r6, [r0, #44]	@ 0x2c
 80106c0:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80106c4:	4628      	mov	r0, r5
 80106c6:	f8c4 c00c 	str.w	ip, [r4, #12]
 80106ca:	f002 fe1d 	bl	8013308 <rcl_wait_set_is_valid>
 80106ce:	b930      	cbnz	r0, 80106de <rclc_executor_add_service+0x7a>
 80106d0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80106d2:	2000      	movs	r0, #0
 80106d4:	3301      	adds	r3, #1
 80106d6:	6563      	str	r3, [r4, #84]	@ 0x54
 80106d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106da:	200b      	movs	r0, #11
 80106dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106de:	4628      	mov	r0, r5
 80106e0:	f002 fe18 	bl	8013314 <rcl_wait_set_fini>
 80106e4:	2800      	cmp	r0, #0
 80106e6:	d0f3      	beq.n	80106d0 <rclc_executor_add_service+0x6c>
 80106e8:	e7d7      	b.n	801069a <rclc_executor_add_service+0x36>
 80106ea:	bf00      	nop

080106ec <rclc_executor_prepare>:
 80106ec:	2800      	cmp	r0, #0
 80106ee:	d044      	beq.n	801077a <rclc_executor_prepare+0x8e>
 80106f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106f2:	f100 0514 	add.w	r5, r0, #20
 80106f6:	b09b      	sub	sp, #108	@ 0x6c
 80106f8:	4604      	mov	r4, r0
 80106fa:	4628      	mov	r0, r5
 80106fc:	f002 fe04 	bl	8013308 <rcl_wait_set_is_valid>
 8010700:	b110      	cbz	r0, 8010708 <rclc_executor_prepare+0x1c>
 8010702:	2000      	movs	r0, #0
 8010704:	b01b      	add	sp, #108	@ 0x6c
 8010706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010708:	4628      	mov	r0, r5
 801070a:	f002 fe03 	bl	8013314 <rcl_wait_set_fini>
 801070e:	2800      	cmp	r0, #0
 8010710:	d130      	bne.n	8010774 <rclc_executor_prepare+0x88>
 8010712:	a80c      	add	r0, sp, #48	@ 0x30
 8010714:	ae04      	add	r6, sp, #16
 8010716:	f002 fde3 	bl	80132e0 <rcl_get_zero_initialized_wait_set>
 801071a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801071e:	46ae      	mov	lr, r5
 8010720:	6927      	ldr	r7, [r4, #16]
 8010722:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010726:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801072a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801072e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010732:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010736:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801073a:	f8dc 3000 	ldr.w	r3, [ip]
 801073e:	f8ce 3000 	str.w	r3, [lr]
 8010742:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010744:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	4628      	mov	r0, r5
 801074a:	6822      	ldr	r2, [r4, #0]
 801074c:	6033      	str	r3, [r6, #0]
 801074e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010750:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8010752:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8010756:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 801075a:	e9cd 2100 	strd	r2, r1, [sp]
 801075e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8010760:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010762:	f003 f8d7 	bl	8013914 <rcl_wait_set_init>
 8010766:	2800      	cmp	r0, #0
 8010768:	d0cc      	beq.n	8010704 <rclc_executor_prepare+0x18>
 801076a:	900b      	str	r0, [sp, #44]	@ 0x2c
 801076c:	f000 fb84 	bl	8010e78 <rcutils_reset_error>
 8010770:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8010772:	e7c7      	b.n	8010704 <rclc_executor_prepare+0x18>
 8010774:	f000 fb80 	bl	8010e78 <rcutils_reset_error>
 8010778:	e7cb      	b.n	8010712 <rclc_executor_prepare+0x26>
 801077a:	200b      	movs	r0, #11
 801077c:	4770      	bx	lr
 801077e:	bf00      	nop

08010780 <rclc_executor_spin_some.part.0>:
 8010780:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010784:	4605      	mov	r5, r0
 8010786:	4691      	mov	r9, r2
 8010788:	4698      	mov	r8, r3
 801078a:	f7ff ffaf 	bl	80106ec <rclc_executor_prepare>
 801078e:	f105 0614 	add.w	r6, r5, #20
 8010792:	4630      	mov	r0, r6
 8010794:	f002 fe8a 	bl	80134ac <rcl_wait_set_clear>
 8010798:	4607      	mov	r7, r0
 801079a:	2800      	cmp	r0, #0
 801079c:	f040 80a8 	bne.w	80108f0 <rclc_executor_spin_some.part.0+0x170>
 80107a0:	68ab      	ldr	r3, [r5, #8]
 80107a2:	b30b      	cbz	r3, 80107e8 <rclc_executor_spin_some.part.0+0x68>
 80107a4:	4604      	mov	r4, r0
 80107a6:	6869      	ldr	r1, [r5, #4]
 80107a8:	01a2      	lsls	r2, r4, #6
 80107aa:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 80107ae:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 80107b2:	b1cb      	cbz	r3, 80107e8 <rclc_executor_spin_some.part.0+0x68>
 80107b4:	5c8b      	ldrb	r3, [r1, r2]
 80107b6:	2b0a      	cmp	r3, #10
 80107b8:	f200 80de 	bhi.w	8010978 <rclc_executor_spin_some.part.0+0x1f8>
 80107bc:	e8df f003 	tbb	[pc, r3]
 80107c0:	8da99d9d 	.word	0x8da99d9d
 80107c4:	0606068d 	.word	0x0606068d
 80107c8:	c1ce      	.short	0xc1ce
 80107ca:	b5          	.byte	0xb5
 80107cb:	00          	.byte	0x00
 80107cc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80107d0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80107d4:	4630      	mov	r0, r6
 80107d6:	f003 f9b9 	bl	8013b4c <rcl_wait_set_add_service>
 80107da:	2800      	cmp	r0, #0
 80107dc:	f040 8087 	bne.w	80108ee <rclc_executor_spin_some.part.0+0x16e>
 80107e0:	3401      	adds	r4, #1
 80107e2:	68ab      	ldr	r3, [r5, #8]
 80107e4:	429c      	cmp	r4, r3
 80107e6:	d3de      	bcc.n	80107a6 <rclc_executor_spin_some.part.0+0x26>
 80107e8:	4643      	mov	r3, r8
 80107ea:	464a      	mov	r2, r9
 80107ec:	4630      	mov	r0, r6
 80107ee:	f003 f9db 	bl	8013ba8 <rcl_wait>
 80107f2:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	f000 80c6 	beq.w	8010988 <rclc_executor_spin_some.part.0+0x208>
 80107fc:	2b01      	cmp	r3, #1
 80107fe:	f040 80bb 	bne.w	8010978 <rclc_executor_spin_some.part.0+0x1f8>
 8010802:	68ab      	ldr	r3, [r5, #8]
 8010804:	2b00      	cmp	r3, #0
 8010806:	f000 8159 	beq.w	8010abc <rclc_executor_spin_some.part.0+0x33c>
 801080a:	2400      	movs	r4, #0
 801080c:	f240 1991 	movw	r9, #401	@ 0x191
 8010810:	46a0      	mov	r8, r4
 8010812:	e00a      	b.n	801082a <rclc_executor_spin_some.part.0+0xaa>
 8010814:	f7ff fb1a 	bl	800fe4c <_rclc_check_for_new_data>
 8010818:	4604      	mov	r4, r0
 801081a:	b110      	cbz	r0, 8010822 <rclc_executor_spin_some.part.0+0xa2>
 801081c:	4548      	cmp	r0, r9
 801081e:	f040 80b1 	bne.w	8010984 <rclc_executor_spin_some.part.0+0x204>
 8010822:	68ab      	ldr	r3, [r5, #8]
 8010824:	4598      	cmp	r8, r3
 8010826:	f080 8126 	bcs.w	8010a76 <rclc_executor_spin_some.part.0+0x2f6>
 801082a:	686a      	ldr	r2, [r5, #4]
 801082c:	4631      	mov	r1, r6
 801082e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8010832:	f108 0801 	add.w	r8, r8, #1
 8010836:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 801083a:	f1bc 0f00 	cmp.w	ip, #0
 801083e:	d1e9      	bne.n	8010814 <rclc_executor_spin_some.part.0+0x94>
 8010840:	4619      	mov	r1, r3
 8010842:	4610      	mov	r0, r2
 8010844:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8010848:	4798      	blx	r3
 801084a:	2800      	cmp	r0, #0
 801084c:	f000 809a 	beq.w	8010984 <rclc_executor_spin_some.part.0+0x204>
 8010850:	68ab      	ldr	r3, [r5, #8]
 8010852:	2b00      	cmp	r3, #0
 8010854:	f000 8096 	beq.w	8010984 <rclc_executor_spin_some.part.0+0x204>
 8010858:	f04f 0800 	mov.w	r8, #0
 801085c:	f240 1991 	movw	r9, #401	@ 0x191
 8010860:	e009      	b.n	8010876 <rclc_executor_spin_some.part.0+0xf6>
 8010862:	f7ff fb41 	bl	800fee8 <_rclc_take_new_data>
 8010866:	4604      	mov	r4, r0
 8010868:	b110      	cbz	r0, 8010870 <rclc_executor_spin_some.part.0+0xf0>
 801086a:	4548      	cmp	r0, r9
 801086c:	f040 808a 	bne.w	8010984 <rclc_executor_spin_some.part.0+0x204>
 8010870:	68ab      	ldr	r3, [r5, #8]
 8010872:	4598      	cmp	r8, r3
 8010874:	d209      	bcs.n	801088a <rclc_executor_spin_some.part.0+0x10a>
 8010876:	6868      	ldr	r0, [r5, #4]
 8010878:	4631      	mov	r1, r6
 801087a:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 801087e:	f108 0801 	add.w	r8, r8, #1
 8010882:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8010886:	2a00      	cmp	r2, #0
 8010888:	d1eb      	bne.n	8010862 <rclc_executor_spin_some.part.0+0xe2>
 801088a:	2b00      	cmp	r3, #0
 801088c:	d07a      	beq.n	8010984 <rclc_executor_spin_some.part.0+0x204>
 801088e:	2600      	movs	r6, #0
 8010890:	e00e      	b.n	80108b0 <rclc_executor_spin_some.part.0+0x130>
 8010892:	f812 200c 	ldrb.w	r2, [r2, ip]
 8010896:	2a08      	cmp	r2, #8
 8010898:	f000 80fc 	beq.w	8010a94 <rclc_executor_spin_some.part.0+0x314>
 801089c:	2a09      	cmp	r2, #9
 801089e:	f000 80ee 	beq.w	8010a7e <rclc_executor_spin_some.part.0+0x2fe>
 80108a2:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 80108a6:	b98a      	cbnz	r2, 80108cc <rclc_executor_spin_some.part.0+0x14c>
 80108a8:	3601      	adds	r6, #1
 80108aa:	429e      	cmp	r6, r3
 80108ac:	d267      	bcs.n	801097e <rclc_executor_spin_some.part.0+0x1fe>
 80108ae:	2400      	movs	r4, #0
 80108b0:	686a      	ldr	r2, [r5, #4]
 80108b2:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 80108b6:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 80108ba:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 80108be:	2900      	cmp	r1, #0
 80108c0:	d060      	beq.n	8010984 <rclc_executor_spin_some.part.0+0x204>
 80108c2:	7841      	ldrb	r1, [r0, #1]
 80108c4:	2900      	cmp	r1, #0
 80108c6:	d0e4      	beq.n	8010892 <rclc_executor_spin_some.part.0+0x112>
 80108c8:	2901      	cmp	r1, #1
 80108ca:	d1ed      	bne.n	80108a8 <rclc_executor_spin_some.part.0+0x128>
 80108cc:	f7ff fc80 	bl	80101d0 <_rclc_execute.part.0>
 80108d0:	2800      	cmp	r0, #0
 80108d2:	f040 80b5 	bne.w	8010a40 <rclc_executor_spin_some.part.0+0x2c0>
 80108d6:	68ab      	ldr	r3, [r5, #8]
 80108d8:	e7e6      	b.n	80108a8 <rclc_executor_spin_some.part.0+0x128>
 80108da:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80108de:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80108e2:	4630      	mov	r0, r6
 80108e4:	f003 f906 	bl	8013af4 <rcl_wait_set_add_client>
 80108e8:	2800      	cmp	r0, #0
 80108ea:	f43f af79 	beq.w	80107e0 <rclc_executor_spin_some.part.0+0x60>
 80108ee:	4607      	mov	r7, r0
 80108f0:	f000 fac2 	bl	8010e78 <rcutils_reset_error>
 80108f4:	4638      	mov	r0, r7
 80108f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108fa:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80108fe:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010902:	4630      	mov	r0, r6
 8010904:	f002 fda6 	bl	8013454 <rcl_wait_set_add_subscription>
 8010908:	2800      	cmp	r0, #0
 801090a:	f43f af69 	beq.w	80107e0 <rclc_executor_spin_some.part.0+0x60>
 801090e:	4607      	mov	r7, r0
 8010910:	e7ee      	b.n	80108f0 <rclc_executor_spin_some.part.0+0x170>
 8010912:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010916:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801091a:	4630      	mov	r0, r6
 801091c:	f003 f8ba 	bl	8013a94 <rcl_wait_set_add_timer>
 8010920:	2800      	cmp	r0, #0
 8010922:	f43f af5d 	beq.w	80107e0 <rclc_executor_spin_some.part.0+0x60>
 8010926:	4607      	mov	r7, r0
 8010928:	e7e2      	b.n	80108f0 <rclc_executor_spin_some.part.0+0x170>
 801092a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801092e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010932:	4630      	mov	r0, r6
 8010934:	f003 f882 	bl	8013a3c <rcl_wait_set_add_guard_condition>
 8010938:	2800      	cmp	r0, #0
 801093a:	f43f af51 	beq.w	80107e0 <rclc_executor_spin_some.part.0+0x60>
 801093e:	4607      	mov	r7, r0
 8010940:	e7d6      	b.n	80108f0 <rclc_executor_spin_some.part.0+0x170>
 8010942:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010946:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801094a:	4630      	mov	r0, r6
 801094c:	3110      	adds	r1, #16
 801094e:	f003 fe01 	bl	8014554 <rcl_action_wait_set_add_action_server>
 8010952:	2800      	cmp	r0, #0
 8010954:	f43f af44 	beq.w	80107e0 <rclc_executor_spin_some.part.0+0x60>
 8010958:	4607      	mov	r7, r0
 801095a:	e7c9      	b.n	80108f0 <rclc_executor_spin_some.part.0+0x170>
 801095c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010960:	2300      	movs	r3, #0
 8010962:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010966:	4630      	mov	r0, r6
 8010968:	3110      	adds	r1, #16
 801096a:	f003 fbc9 	bl	8014100 <rcl_action_wait_set_add_action_client>
 801096e:	2800      	cmp	r0, #0
 8010970:	f43f af36 	beq.w	80107e0 <rclc_executor_spin_some.part.0+0x60>
 8010974:	4607      	mov	r7, r0
 8010976:	e7bb      	b.n	80108f0 <rclc_executor_spin_some.part.0+0x170>
 8010978:	2701      	movs	r7, #1
 801097a:	f000 fa7d 	bl	8010e78 <rcutils_reset_error>
 801097e:	4638      	mov	r0, r7
 8010980:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010984:	4627      	mov	r7, r4
 8010986:	e7fa      	b.n	801097e <rclc_executor_spin_some.part.0+0x1fe>
 8010988:	68ab      	ldr	r3, [r5, #8]
 801098a:	2b00      	cmp	r3, #0
 801098c:	f000 8093 	beq.w	8010ab6 <rclc_executor_spin_some.part.0+0x336>
 8010990:	2400      	movs	r4, #0
 8010992:	f240 1991 	movw	r9, #401	@ 0x191
 8010996:	46a0      	mov	r8, r4
 8010998:	e008      	b.n	80109ac <rclc_executor_spin_some.part.0+0x22c>
 801099a:	f7ff fa57 	bl	800fe4c <_rclc_check_for_new_data>
 801099e:	4604      	mov	r4, r0
 80109a0:	b108      	cbz	r0, 80109a6 <rclc_executor_spin_some.part.0+0x226>
 80109a2:	4548      	cmp	r0, r9
 80109a4:	d1ee      	bne.n	8010984 <rclc_executor_spin_some.part.0+0x204>
 80109a6:	68ab      	ldr	r3, [r5, #8]
 80109a8:	4598      	cmp	r8, r3
 80109aa:	d266      	bcs.n	8010a7a <rclc_executor_spin_some.part.0+0x2fa>
 80109ac:	686a      	ldr	r2, [r5, #4]
 80109ae:	4631      	mov	r1, r6
 80109b0:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 80109b4:	f108 0801 	add.w	r8, r8, #1
 80109b8:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 80109bc:	f1bc 0f00 	cmp.w	ip, #0
 80109c0:	d1eb      	bne.n	801099a <rclc_executor_spin_some.part.0+0x21a>
 80109c2:	4619      	mov	r1, r3
 80109c4:	4610      	mov	r0, r2
 80109c6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 80109ca:	4798      	blx	r3
 80109cc:	2800      	cmp	r0, #0
 80109ce:	d0d9      	beq.n	8010984 <rclc_executor_spin_some.part.0+0x204>
 80109d0:	68ab      	ldr	r3, [r5, #8]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d0d6      	beq.n	8010984 <rclc_executor_spin_some.part.0+0x204>
 80109d6:	f04f 0a00 	mov.w	sl, #0
 80109da:	f240 1891 	movw	r8, #401	@ 0x191
 80109de:	f240 2959 	movw	r9, #601	@ 0x259
 80109e2:	e00e      	b.n	8010a02 <rclc_executor_spin_some.part.0+0x282>
 80109e4:	f813 300b 	ldrb.w	r3, [r3, fp]
 80109e8:	2b08      	cmp	r3, #8
 80109ea:	d034      	beq.n	8010a56 <rclc_executor_spin_some.part.0+0x2d6>
 80109ec:	2b09      	cmp	r3, #9
 80109ee:	d029      	beq.n	8010a44 <rclc_executor_spin_some.part.0+0x2c4>
 80109f0:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 80109f4:	bb03      	cbnz	r3, 8010a38 <rclc_executor_spin_some.part.0+0x2b8>
 80109f6:	f10a 0a01 	add.w	sl, sl, #1
 80109fa:	68ab      	ldr	r3, [r5, #8]
 80109fc:	459a      	cmp	sl, r3
 80109fe:	d2be      	bcs.n	801097e <rclc_executor_spin_some.part.0+0x1fe>
 8010a00:	2400      	movs	r4, #0
 8010a02:	6868      	ldr	r0, [r5, #4]
 8010a04:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8010a08:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 8010a0c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d0b7      	beq.n	8010984 <rclc_executor_spin_some.part.0+0x204>
 8010a14:	4631      	mov	r1, r6
 8010a16:	f7ff fa67 	bl	800fee8 <_rclc_take_new_data>
 8010a1a:	2800      	cmp	r0, #0
 8010a1c:	bf18      	it	ne
 8010a1e:	4540      	cmpne	r0, r8
 8010a20:	d001      	beq.n	8010a26 <rclc_executor_spin_some.part.0+0x2a6>
 8010a22:	4548      	cmp	r0, r9
 8010a24:	d10c      	bne.n	8010a40 <rclc_executor_spin_some.part.0+0x2c0>
 8010a26:	686b      	ldr	r3, [r5, #4]
 8010a28:	eb13 000b 	adds.w	r0, r3, fp
 8010a2c:	d021      	beq.n	8010a72 <rclc_executor_spin_some.part.0+0x2f2>
 8010a2e:	7842      	ldrb	r2, [r0, #1]
 8010a30:	2a00      	cmp	r2, #0
 8010a32:	d0d7      	beq.n	80109e4 <rclc_executor_spin_some.part.0+0x264>
 8010a34:	2a01      	cmp	r2, #1
 8010a36:	d1de      	bne.n	80109f6 <rclc_executor_spin_some.part.0+0x276>
 8010a38:	f7ff fbca 	bl	80101d0 <_rclc_execute.part.0>
 8010a3c:	2800      	cmp	r0, #0
 8010a3e:	d0da      	beq.n	80109f6 <rclc_executor_spin_some.part.0+0x276>
 8010a40:	4607      	mov	r7, r0
 8010a42:	e79c      	b.n	801097e <rclc_executor_spin_some.part.0+0x1fe>
 8010a44:	6843      	ldr	r3, [r0, #4]
 8010a46:	6a1a      	ldr	r2, [r3, #32]
 8010a48:	2a00      	cmp	r2, #0
 8010a4a:	d1f5      	bne.n	8010a38 <rclc_executor_spin_some.part.0+0x2b8>
 8010a4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d0d0      	beq.n	80109f6 <rclc_executor_spin_some.part.0+0x276>
 8010a54:	e7f0      	b.n	8010a38 <rclc_executor_spin_some.part.0+0x2b8>
 8010a56:	6843      	ldr	r3, [r0, #4]
 8010a58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010a5a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8010a5e:	d1eb      	bne.n	8010a38 <rclc_executor_spin_some.part.0+0x2b8>
 8010a60:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8010a64:	2a00      	cmp	r2, #0
 8010a66:	d1e7      	bne.n	8010a38 <rclc_executor_spin_some.part.0+0x2b8>
 8010a68:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d0c2      	beq.n	80109f6 <rclc_executor_spin_some.part.0+0x276>
 8010a70:	e7e2      	b.n	8010a38 <rclc_executor_spin_some.part.0+0x2b8>
 8010a72:	270b      	movs	r7, #11
 8010a74:	e783      	b.n	801097e <rclc_executor_spin_some.part.0+0x1fe>
 8010a76:	686a      	ldr	r2, [r5, #4]
 8010a78:	e6e2      	b.n	8010840 <rclc_executor_spin_some.part.0+0xc0>
 8010a7a:	686a      	ldr	r2, [r5, #4]
 8010a7c:	e7a1      	b.n	80109c2 <rclc_executor_spin_some.part.0+0x242>
 8010a7e:	6842      	ldr	r2, [r0, #4]
 8010a80:	6a11      	ldr	r1, [r2, #32]
 8010a82:	2900      	cmp	r1, #0
 8010a84:	f47f af22 	bne.w	80108cc <rclc_executor_spin_some.part.0+0x14c>
 8010a88:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8010a8c:	2a00      	cmp	r2, #0
 8010a8e:	f43f af0b 	beq.w	80108a8 <rclc_executor_spin_some.part.0+0x128>
 8010a92:	e71b      	b.n	80108cc <rclc_executor_spin_some.part.0+0x14c>
 8010a94:	6842      	ldr	r2, [r0, #4]
 8010a96:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8010a98:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 8010a9c:	f47f af16 	bne.w	80108cc <rclc_executor_spin_some.part.0+0x14c>
 8010aa0:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 8010aa4:	2900      	cmp	r1, #0
 8010aa6:	f47f af11 	bne.w	80108cc <rclc_executor_spin_some.part.0+0x14c>
 8010aaa:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8010aae:	2a00      	cmp	r2, #0
 8010ab0:	f43f aefa 	beq.w	80108a8 <rclc_executor_spin_some.part.0+0x128>
 8010ab4:	e70a      	b.n	80108cc <rclc_executor_spin_some.part.0+0x14c>
 8010ab6:	686a      	ldr	r2, [r5, #4]
 8010ab8:	461c      	mov	r4, r3
 8010aba:	e782      	b.n	80109c2 <rclc_executor_spin_some.part.0+0x242>
 8010abc:	686a      	ldr	r2, [r5, #4]
 8010abe:	461c      	mov	r4, r3
 8010ac0:	e6be      	b.n	8010840 <rclc_executor_spin_some.part.0+0xc0>
 8010ac2:	bf00      	nop

08010ac4 <rclc_executor_spin_some>:
 8010ac4:	b190      	cbz	r0, 8010aec <rclc_executor_spin_some+0x28>
 8010ac6:	b570      	push	{r4, r5, r6, lr}
 8010ac8:	4604      	mov	r4, r0
 8010aca:	6800      	ldr	r0, [r0, #0]
 8010acc:	4616      	mov	r6, r2
 8010ace:	461d      	mov	r5, r3
 8010ad0:	f001 f87a 	bl	8011bc8 <rcl_context_is_valid>
 8010ad4:	b130      	cbz	r0, 8010ae4 <rclc_executor_spin_some+0x20>
 8010ad6:	4632      	mov	r2, r6
 8010ad8:	462b      	mov	r3, r5
 8010ada:	4620      	mov	r0, r4
 8010adc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010ae0:	f7ff be4e 	b.w	8010780 <rclc_executor_spin_some.part.0>
 8010ae4:	f000 f9c8 	bl	8010e78 <rcutils_reset_error>
 8010ae8:	2001      	movs	r0, #1
 8010aea:	bd70      	pop	{r4, r5, r6, pc}
 8010aec:	200b      	movs	r0, #11
 8010aee:	4770      	bx	lr

08010af0 <rclc_executor_handle_counters_zero_init>:
 8010af0:	b130      	cbz	r0, 8010b00 <rclc_executor_handle_counters_zero_init+0x10>
 8010af2:	2220      	movs	r2, #32
 8010af4:	2100      	movs	r1, #0
 8010af6:	b508      	push	{r3, lr}
 8010af8:	f00c fadc 	bl	801d0b4 <memset>
 8010afc:	2000      	movs	r0, #0
 8010afe:	bd08      	pop	{r3, pc}
 8010b00:	200b      	movs	r0, #11
 8010b02:	4770      	bx	lr
 8010b04:	0000      	movs	r0, r0
	...

08010b08 <rclc_executor_handle_init>:
 8010b08:	4603      	mov	r3, r0
 8010b0a:	b178      	cbz	r0, 8010b2c <rclc_executor_handle_init+0x24>
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	f04f 0c0b 	mov.w	ip, #11
 8010b12:	6341      	str	r1, [r0, #52]	@ 0x34
 8010b14:	4610      	mov	r0, r2
 8010b16:	f8a3 c000 	strh.w	ip, [r3]
 8010b1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8010b1c:	871a      	strh	r2, [r3, #56]	@ 0x38
 8010b1e:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 8010b30 <rclc_executor_handle_init+0x28>
 8010b22:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8010b26:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 8010b2a:	4770      	bx	lr
 8010b2c:	200b      	movs	r0, #11
 8010b2e:	4770      	bx	lr
	...

08010b38 <rclc_support_init>:
 8010b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b3c:	b086      	sub	sp, #24
 8010b3e:	b3bb      	cbz	r3, 8010bb0 <rclc_support_init+0x78>
 8010b40:	4606      	mov	r6, r0
 8010b42:	b3a8      	cbz	r0, 8010bb0 <rclc_support_init+0x78>
 8010b44:	461c      	mov	r4, r3
 8010b46:	460f      	mov	r7, r1
 8010b48:	4690      	mov	r8, r2
 8010b4a:	f001 f9a9 	bl	8011ea0 <rcl_get_zero_initialized_init_options>
 8010b4e:	f104 050c 	add.w	r5, r4, #12
 8010b52:	9005      	str	r0, [sp, #20]
 8010b54:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010b58:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010b5c:	a805      	add	r0, sp, #20
 8010b5e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010b62:	f001 f99f 	bl	8011ea4 <rcl_init_options_init>
 8010b66:	4605      	mov	r5, r0
 8010b68:	b9e0      	cbnz	r0, 8010ba4 <rclc_support_init+0x6c>
 8010b6a:	ad02      	add	r5, sp, #8
 8010b6c:	4628      	mov	r0, r5
 8010b6e:	f001 f821 	bl	8011bb4 <rcl_get_zero_initialized_context>
 8010b72:	4633      	mov	r3, r6
 8010b74:	aa05      	add	r2, sp, #20
 8010b76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010b7a:	e886 0003 	stmia.w	r6, {r0, r1}
 8010b7e:	4641      	mov	r1, r8
 8010b80:	4638      	mov	r0, r7
 8010b82:	f001 f887 	bl	8011c94 <rcl_init>
 8010b86:	4605      	mov	r5, r0
 8010b88:	b9b8      	cbnz	r0, 8010bba <rclc_support_init+0x82>
 8010b8a:	4622      	mov	r2, r4
 8010b8c:	f106 010c 	add.w	r1, r6, #12
 8010b90:	2003      	movs	r0, #3
 8010b92:	60b4      	str	r4, [r6, #8]
 8010b94:	f002 f99a 	bl	8012ecc <rcl_clock_init>
 8010b98:	4605      	mov	r5, r0
 8010b9a:	b970      	cbnz	r0, 8010bba <rclc_support_init+0x82>
 8010b9c:	a805      	add	r0, sp, #20
 8010b9e:	f001 f9e7 	bl	8011f70 <rcl_init_options_fini>
 8010ba2:	b108      	cbz	r0, 8010ba8 <rclc_support_init+0x70>
 8010ba4:	f000 f968 	bl	8010e78 <rcutils_reset_error>
 8010ba8:	4628      	mov	r0, r5
 8010baa:	b006      	add	sp, #24
 8010bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bb0:	250b      	movs	r5, #11
 8010bb2:	4628      	mov	r0, r5
 8010bb4:	b006      	add	sp, #24
 8010bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bba:	f000 f95d 	bl	8010e78 <rcutils_reset_error>
 8010bbe:	a805      	add	r0, sp, #20
 8010bc0:	f001 f9d6 	bl	8011f70 <rcl_init_options_fini>
 8010bc4:	2800      	cmp	r0, #0
 8010bc6:	d0ef      	beq.n	8010ba8 <rclc_support_init+0x70>
 8010bc8:	e7ec      	b.n	8010ba4 <rclc_support_init+0x6c>
 8010bca:	bf00      	nop

08010bcc <rclc_node_init_default>:
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	bf18      	it	ne
 8010bd0:	2a00      	cmpne	r2, #0
 8010bd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010bd6:	4616      	mov	r6, r2
 8010bd8:	bf0c      	ite	eq
 8010bda:	2201      	moveq	r2, #1
 8010bdc:	2200      	movne	r2, #0
 8010bde:	b0a1      	sub	sp, #132	@ 0x84
 8010be0:	2900      	cmp	r1, #0
 8010be2:	bf08      	it	eq
 8010be4:	f042 0201 	orreq.w	r2, r2, #1
 8010be8:	bb22      	cbnz	r2, 8010c34 <rclc_node_init_default+0x68>
 8010bea:	4604      	mov	r4, r0
 8010bec:	b310      	cbz	r0, 8010c34 <rclc_node_init_default+0x68>
 8010bee:	f10d 0810 	add.w	r8, sp, #16
 8010bf2:	461f      	mov	r7, r3
 8010bf4:	460d      	mov	r5, r1
 8010bf6:	f10d 0918 	add.w	r9, sp, #24
 8010bfa:	4640      	mov	r0, r8
 8010bfc:	f001 fa72 	bl	80120e4 <rcl_get_zero_initialized_node>
 8010c00:	e898 0003 	ldmia.w	r8, {r0, r1}
 8010c04:	e884 0003 	stmia.w	r4, {r0, r1}
 8010c08:	4648      	mov	r0, r9
 8010c0a:	f001 fbe5 	bl	80123d8 <rcl_node_get_default_options>
 8010c0e:	4640      	mov	r0, r8
 8010c10:	f001 fa68 	bl	80120e4 <rcl_get_zero_initialized_node>
 8010c14:	f8cd 9000 	str.w	r9, [sp]
 8010c18:	463b      	mov	r3, r7
 8010c1a:	4632      	mov	r2, r6
 8010c1c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8010c20:	e884 0003 	stmia.w	r4, {r0, r1}
 8010c24:	4629      	mov	r1, r5
 8010c26:	4620      	mov	r0, r4
 8010c28:	f001 fa66 	bl	80120f8 <rcl_node_init>
 8010c2c:	b930      	cbnz	r0, 8010c3c <rclc_node_init_default+0x70>
 8010c2e:	b021      	add	sp, #132	@ 0x84
 8010c30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c34:	200b      	movs	r0, #11
 8010c36:	b021      	add	sp, #132	@ 0x84
 8010c38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c3c:	9003      	str	r0, [sp, #12]
 8010c3e:	f000 f91b 	bl	8010e78 <rcutils_reset_error>
 8010c42:	f000 f919 	bl	8010e78 <rcutils_reset_error>
 8010c46:	9803      	ldr	r0, [sp, #12]
 8010c48:	b021      	add	sp, #132	@ 0x84
 8010c4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c4e:	bf00      	nop

08010c50 <rclc_publisher_init_default>:
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	bf18      	it	ne
 8010c54:	2a00      	cmpne	r2, #0
 8010c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c5a:	4616      	mov	r6, r2
 8010c5c:	bf0c      	ite	eq
 8010c5e:	2201      	moveq	r2, #1
 8010c60:	2200      	movne	r2, #0
 8010c62:	b0a0      	sub	sp, #128	@ 0x80
 8010c64:	2900      	cmp	r1, #0
 8010c66:	bf08      	it	eq
 8010c68:	f042 0201 	orreq.w	r2, r2, #1
 8010c6c:	bb1a      	cbnz	r2, 8010cb6 <rclc_publisher_init_default+0x66>
 8010c6e:	4604      	mov	r4, r0
 8010c70:	b308      	cbz	r0, 8010cb6 <rclc_publisher_init_default+0x66>
 8010c72:	f10d 0810 	add.w	r8, sp, #16
 8010c76:	461f      	mov	r7, r3
 8010c78:	460d      	mov	r5, r1
 8010c7a:	f001 fcb3 	bl	80125e4 <rcl_get_zero_initialized_publisher>
 8010c7e:	6020      	str	r0, [r4, #0]
 8010c80:	4640      	mov	r0, r8
 8010c82:	f001 fd4f 	bl	8012724 <rcl_publisher_get_default_options>
 8010c86:	2250      	movs	r2, #80	@ 0x50
 8010c88:	490d      	ldr	r1, [pc, #52]	@ (8010cc0 <rclc_publisher_init_default+0x70>)
 8010c8a:	4640      	mov	r0, r8
 8010c8c:	f00c fb31 	bl	801d2f2 <memcpy>
 8010c90:	463b      	mov	r3, r7
 8010c92:	4632      	mov	r2, r6
 8010c94:	4629      	mov	r1, r5
 8010c96:	4620      	mov	r0, r4
 8010c98:	f8cd 8000 	str.w	r8, [sp]
 8010c9c:	f001 fca8 	bl	80125f0 <rcl_publisher_init>
 8010ca0:	b910      	cbnz	r0, 8010ca8 <rclc_publisher_init_default+0x58>
 8010ca2:	b020      	add	sp, #128	@ 0x80
 8010ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ca8:	9003      	str	r0, [sp, #12]
 8010caa:	f000 f8e5 	bl	8010e78 <rcutils_reset_error>
 8010cae:	9803      	ldr	r0, [sp, #12]
 8010cb0:	b020      	add	sp, #128	@ 0x80
 8010cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cb6:	200b      	movs	r0, #11
 8010cb8:	b020      	add	sp, #128	@ 0x80
 8010cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cbe:	bf00      	nop
 8010cc0:	0801f4e0 	.word	0x0801f4e0

08010cc4 <rclc_service_init_default>:
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	bf18      	it	ne
 8010cc8:	2a00      	cmpne	r2, #0
 8010cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cce:	4616      	mov	r6, r2
 8010cd0:	bf0c      	ite	eq
 8010cd2:	2201      	moveq	r2, #1
 8010cd4:	2200      	movne	r2, #0
 8010cd6:	b09e      	sub	sp, #120	@ 0x78
 8010cd8:	2900      	cmp	r1, #0
 8010cda:	bf08      	it	eq
 8010cdc:	f042 0201 	orreq.w	r2, r2, #1
 8010ce0:	bb1a      	cbnz	r2, 8010d2a <rclc_service_init_default+0x66>
 8010ce2:	4604      	mov	r4, r0
 8010ce4:	b308      	cbz	r0, 8010d2a <rclc_service_init_default+0x66>
 8010ce6:	f10d 0810 	add.w	r8, sp, #16
 8010cea:	461f      	mov	r7, r3
 8010cec:	460d      	mov	r5, r1
 8010cee:	f001 fe67 	bl	80129c0 <rcl_get_zero_initialized_service>
 8010cf2:	6020      	str	r0, [r4, #0]
 8010cf4:	4640      	mov	r0, r8
 8010cf6:	f001 fefb 	bl	8012af0 <rcl_service_get_default_options>
 8010cfa:	2250      	movs	r2, #80	@ 0x50
 8010cfc:	490d      	ldr	r1, [pc, #52]	@ (8010d34 <rclc_service_init_default+0x70>)
 8010cfe:	4640      	mov	r0, r8
 8010d00:	f00c faf7 	bl	801d2f2 <memcpy>
 8010d04:	463b      	mov	r3, r7
 8010d06:	4632      	mov	r2, r6
 8010d08:	4629      	mov	r1, r5
 8010d0a:	4620      	mov	r0, r4
 8010d0c:	f8cd 8000 	str.w	r8, [sp]
 8010d10:	f001 fe5c 	bl	80129cc <rcl_service_init>
 8010d14:	b910      	cbnz	r0, 8010d1c <rclc_service_init_default+0x58>
 8010d16:	b01e      	add	sp, #120	@ 0x78
 8010d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d1c:	9003      	str	r0, [sp, #12]
 8010d1e:	f000 f8ab 	bl	8010e78 <rcutils_reset_error>
 8010d22:	9803      	ldr	r0, [sp, #12]
 8010d24:	b01e      	add	sp, #120	@ 0x78
 8010d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d2a:	200b      	movs	r0, #11
 8010d2c:	b01e      	add	sp, #120	@ 0x78
 8010d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d32:	bf00      	nop
 8010d34:	0801f530 	.word	0x0801f530

08010d38 <rclc_subscription_init_default>:
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	bf18      	it	ne
 8010d3c:	2a00      	cmpne	r2, #0
 8010d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d42:	4616      	mov	r6, r2
 8010d44:	bf0c      	ite	eq
 8010d46:	2201      	moveq	r2, #1
 8010d48:	2200      	movne	r2, #0
 8010d4a:	b0a0      	sub	sp, #128	@ 0x80
 8010d4c:	2900      	cmp	r1, #0
 8010d4e:	bf08      	it	eq
 8010d50:	f042 0201 	orreq.w	r2, r2, #1
 8010d54:	bb1a      	cbnz	r2, 8010d9e <rclc_subscription_init_default+0x66>
 8010d56:	4604      	mov	r4, r0
 8010d58:	b308      	cbz	r0, 8010d9e <rclc_subscription_init_default+0x66>
 8010d5a:	f10d 0810 	add.w	r8, sp, #16
 8010d5e:	461f      	mov	r7, r3
 8010d60:	460d      	mov	r5, r1
 8010d62:	f001 ff51 	bl	8012c08 <rcl_get_zero_initialized_subscription>
 8010d66:	6020      	str	r0, [r4, #0]
 8010d68:	4640      	mov	r0, r8
 8010d6a:	f002 f801 	bl	8012d70 <rcl_subscription_get_default_options>
 8010d6e:	2250      	movs	r2, #80	@ 0x50
 8010d70:	490d      	ldr	r1, [pc, #52]	@ (8010da8 <rclc_subscription_init_default+0x70>)
 8010d72:	4640      	mov	r0, r8
 8010d74:	f00c fabd 	bl	801d2f2 <memcpy>
 8010d78:	463b      	mov	r3, r7
 8010d7a:	4632      	mov	r2, r6
 8010d7c:	4629      	mov	r1, r5
 8010d7e:	4620      	mov	r0, r4
 8010d80:	f8cd 8000 	str.w	r8, [sp]
 8010d84:	f001 ff46 	bl	8012c14 <rcl_subscription_init>
 8010d88:	b910      	cbnz	r0, 8010d90 <rclc_subscription_init_default+0x58>
 8010d8a:	b020      	add	sp, #128	@ 0x80
 8010d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d90:	9003      	str	r0, [sp, #12]
 8010d92:	f000 f871 	bl	8010e78 <rcutils_reset_error>
 8010d96:	9803      	ldr	r0, [sp, #12]
 8010d98:	b020      	add	sp, #128	@ 0x80
 8010d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d9e:	200b      	movs	r0, #11
 8010da0:	b020      	add	sp, #128	@ 0x80
 8010da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010da6:	bf00      	nop
 8010da8:	0801f580 	.word	0x0801f580

08010dac <__default_zero_allocate>:
 8010dac:	f00b bcaa 	b.w	801c704 <calloc>

08010db0 <__default_reallocate>:
 8010db0:	f00b be48 	b.w	801ca44 <realloc>

08010db4 <__default_deallocate>:
 8010db4:	f00b bd24 	b.w	801c800 <free>

08010db8 <__default_allocate>:
 8010db8:	f00b bd1a 	b.w	801c7f0 <malloc>

08010dbc <rcutils_get_zero_initialized_allocator>:
 8010dbc:	b510      	push	{r4, lr}
 8010dbe:	4c05      	ldr	r4, [pc, #20]	@ (8010dd4 <rcutils_get_zero_initialized_allocator+0x18>)
 8010dc0:	4686      	mov	lr, r0
 8010dc2:	4684      	mov	ip, r0
 8010dc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010dc6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010dca:	6823      	ldr	r3, [r4, #0]
 8010dcc:	4670      	mov	r0, lr
 8010dce:	f8cc 3000 	str.w	r3, [ip]
 8010dd2:	bd10      	pop	{r4, pc}
 8010dd4:	0801f5d0 	.word	0x0801f5d0

08010dd8 <rcutils_set_default_allocator>:
 8010dd8:	b1a8      	cbz	r0, 8010e06 <rcutils_set_default_allocator+0x2e>
 8010dda:	6802      	ldr	r2, [r0, #0]
 8010ddc:	b1a2      	cbz	r2, 8010e08 <rcutils_set_default_allocator+0x30>
 8010dde:	6841      	ldr	r1, [r0, #4]
 8010de0:	b1a1      	cbz	r1, 8010e0c <rcutils_set_default_allocator+0x34>
 8010de2:	b410      	push	{r4}
 8010de4:	68c4      	ldr	r4, [r0, #12]
 8010de6:	b164      	cbz	r4, 8010e02 <rcutils_set_default_allocator+0x2a>
 8010de8:	6880      	ldr	r0, [r0, #8]
 8010dea:	b138      	cbz	r0, 8010dfc <rcutils_set_default_allocator+0x24>
 8010dec:	4b08      	ldr	r3, [pc, #32]	@ (8010e10 <rcutils_set_default_allocator+0x38>)
 8010dee:	601a      	str	r2, [r3, #0]
 8010df0:	2200      	movs	r2, #0
 8010df2:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8010df6:	2001      	movs	r0, #1
 8010df8:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8010dfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e00:	4770      	bx	lr
 8010e02:	4620      	mov	r0, r4
 8010e04:	e7fa      	b.n	8010dfc <rcutils_set_default_allocator+0x24>
 8010e06:	4770      	bx	lr
 8010e08:	4610      	mov	r0, r2
 8010e0a:	4770      	bx	lr
 8010e0c:	4608      	mov	r0, r1
 8010e0e:	4770      	bx	lr
 8010e10:	24000dfc 	.word	0x24000dfc

08010e14 <rcutils_get_default_allocator>:
 8010e14:	b510      	push	{r4, lr}
 8010e16:	4c05      	ldr	r4, [pc, #20]	@ (8010e2c <rcutils_get_default_allocator+0x18>)
 8010e18:	4686      	mov	lr, r0
 8010e1a:	4684      	mov	ip, r0
 8010e1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010e1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010e22:	6823      	ldr	r3, [r4, #0]
 8010e24:	4670      	mov	r0, lr
 8010e26:	f8cc 3000 	str.w	r3, [ip]
 8010e2a:	bd10      	pop	{r4, pc}
 8010e2c:	24000dfc 	.word	0x24000dfc

08010e30 <rcutils_allocator_is_valid>:
 8010e30:	b158      	cbz	r0, 8010e4a <rcutils_allocator_is_valid+0x1a>
 8010e32:	6803      	ldr	r3, [r0, #0]
 8010e34:	b143      	cbz	r3, 8010e48 <rcutils_allocator_is_valid+0x18>
 8010e36:	6843      	ldr	r3, [r0, #4]
 8010e38:	b133      	cbz	r3, 8010e48 <rcutils_allocator_is_valid+0x18>
 8010e3a:	68c3      	ldr	r3, [r0, #12]
 8010e3c:	b123      	cbz	r3, 8010e48 <rcutils_allocator_is_valid+0x18>
 8010e3e:	6880      	ldr	r0, [r0, #8]
 8010e40:	3800      	subs	r0, #0
 8010e42:	bf18      	it	ne
 8010e44:	2001      	movne	r0, #1
 8010e46:	4770      	bx	lr
 8010e48:	4618      	mov	r0, r3
 8010e4a:	4770      	bx	lr

08010e4c <rcutils_get_error_string>:
 8010e4c:	4b06      	ldr	r3, [pc, #24]	@ (8010e68 <rcutils_get_error_string+0x1c>)
 8010e4e:	781b      	ldrb	r3, [r3, #0]
 8010e50:	b13b      	cbz	r3, 8010e62 <rcutils_get_error_string+0x16>
 8010e52:	4b06      	ldr	r3, [pc, #24]	@ (8010e6c <rcutils_get_error_string+0x20>)
 8010e54:	781a      	ldrb	r2, [r3, #0]
 8010e56:	b90a      	cbnz	r2, 8010e5c <rcutils_get_error_string+0x10>
 8010e58:	2201      	movs	r2, #1
 8010e5a:	701a      	strb	r2, [r3, #0]
 8010e5c:	4b04      	ldr	r3, [pc, #16]	@ (8010e70 <rcutils_get_error_string+0x24>)
 8010e5e:	7818      	ldrb	r0, [r3, #0]
 8010e60:	4770      	bx	lr
 8010e62:	4b04      	ldr	r3, [pc, #16]	@ (8010e74 <rcutils_get_error_string+0x28>)
 8010e64:	7818      	ldrb	r0, [r3, #0]
 8010e66:	4770      	bx	lr
 8010e68:	24064684 	.word	0x24064684
 8010e6c:	24064699 	.word	0x24064699
 8010e70:	24064698 	.word	0x24064698
 8010e74:	0801f5e4 	.word	0x0801f5e4

08010e78 <rcutils_reset_error>:
 8010e78:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8010e98 <rcutils_reset_error+0x20>
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	4a08      	ldr	r2, [pc, #32]	@ (8010ea0 <rcutils_reset_error+0x28>)
 8010e80:	4808      	ldr	r0, [pc, #32]	@ (8010ea4 <rcutils_reset_error+0x2c>)
 8010e82:	8013      	strh	r3, [r2, #0]
 8010e84:	4908      	ldr	r1, [pc, #32]	@ (8010ea8 <rcutils_reset_error+0x30>)
 8010e86:	7003      	strb	r3, [r0, #0]
 8010e88:	700b      	strb	r3, [r1, #0]
 8010e8a:	ed82 7b02 	vstr	d7, [r2, #8]
 8010e8e:	4a07      	ldr	r2, [pc, #28]	@ (8010eac <rcutils_reset_error+0x34>)
 8010e90:	7013      	strb	r3, [r2, #0]
 8010e92:	4770      	bx	lr
 8010e94:	f3af 8000 	nop.w
	...
 8010ea0:	24064688 	.word	0x24064688
 8010ea4:	24064699 	.word	0x24064699
 8010ea8:	24064698 	.word	0x24064698
 8010eac:	24064684 	.word	0x24064684

08010eb0 <rcutils_system_time_now>:
 8010eb0:	b300      	cbz	r0, 8010ef4 <rcutils_system_time_now+0x44>
 8010eb2:	b570      	push	{r4, r5, r6, lr}
 8010eb4:	b084      	sub	sp, #16
 8010eb6:	4604      	mov	r4, r0
 8010eb8:	2001      	movs	r0, #1
 8010eba:	4669      	mov	r1, sp
 8010ebc:	f7f0 fd50 	bl	8001960 <clock_gettime>
 8010ec0:	e9dd 3100 	ldrd	r3, r1, [sp]
 8010ec4:	2900      	cmp	r1, #0
 8010ec6:	db12      	blt.n	8010eee <rcutils_system_time_now+0x3e>
 8010ec8:	ea53 0201 	orrs.w	r2, r3, r1
 8010ecc:	9d02      	ldr	r5, [sp, #8]
 8010ece:	d101      	bne.n	8010ed4 <rcutils_system_time_now+0x24>
 8010ed0:	2d00      	cmp	r5, #0
 8010ed2:	db0c      	blt.n	8010eee <rcutils_system_time_now+0x3e>
 8010ed4:	4e08      	ldr	r6, [pc, #32]	@ (8010ef8 <rcutils_system_time_now+0x48>)
 8010ed6:	2000      	movs	r0, #0
 8010ed8:	fba3 3206 	umull	r3, r2, r3, r6
 8010edc:	195b      	adds	r3, r3, r5
 8010ede:	fb06 2201 	mla	r2, r6, r1, r2
 8010ee2:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8010ee6:	e9c4 3200 	strd	r3, r2, [r4]
 8010eea:	b004      	add	sp, #16
 8010eec:	bd70      	pop	{r4, r5, r6, pc}
 8010eee:	2002      	movs	r0, #2
 8010ef0:	b004      	add	sp, #16
 8010ef2:	bd70      	pop	{r4, r5, r6, pc}
 8010ef4:	200b      	movs	r0, #11
 8010ef6:	4770      	bx	lr
 8010ef8:	3b9aca00 	.word	0x3b9aca00

08010efc <rcutils_steady_time_now>:
 8010efc:	b300      	cbz	r0, 8010f40 <rcutils_steady_time_now+0x44>
 8010efe:	b570      	push	{r4, r5, r6, lr}
 8010f00:	b084      	sub	sp, #16
 8010f02:	4604      	mov	r4, r0
 8010f04:	2000      	movs	r0, #0
 8010f06:	4669      	mov	r1, sp
 8010f08:	f7f0 fd2a 	bl	8001960 <clock_gettime>
 8010f0c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8010f10:	2900      	cmp	r1, #0
 8010f12:	db12      	blt.n	8010f3a <rcutils_steady_time_now+0x3e>
 8010f14:	ea53 0201 	orrs.w	r2, r3, r1
 8010f18:	9d02      	ldr	r5, [sp, #8]
 8010f1a:	d101      	bne.n	8010f20 <rcutils_steady_time_now+0x24>
 8010f1c:	2d00      	cmp	r5, #0
 8010f1e:	db0c      	blt.n	8010f3a <rcutils_steady_time_now+0x3e>
 8010f20:	4e08      	ldr	r6, [pc, #32]	@ (8010f44 <rcutils_steady_time_now+0x48>)
 8010f22:	2000      	movs	r0, #0
 8010f24:	fba3 3206 	umull	r3, r2, r3, r6
 8010f28:	195b      	adds	r3, r3, r5
 8010f2a:	fb06 2201 	mla	r2, r6, r1, r2
 8010f2e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8010f32:	e9c4 3200 	strd	r3, r2, [r4]
 8010f36:	b004      	add	sp, #16
 8010f38:	bd70      	pop	{r4, r5, r6, pc}
 8010f3a:	2002      	movs	r0, #2
 8010f3c:	b004      	add	sp, #16
 8010f3e:	bd70      	pop	{r4, r5, r6, pc}
 8010f40:	200b      	movs	r0, #11
 8010f42:	4770      	bx	lr
 8010f44:	3b9aca00 	.word	0x3b9aca00

08010f48 <rmw_uros_set_custom_transport>:
 8010f48:	b470      	push	{r4, r5, r6}
 8010f4a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8010f4e:	b162      	cbz	r2, 8010f6a <rmw_uros_set_custom_transport+0x22>
 8010f50:	b15b      	cbz	r3, 8010f6a <rmw_uros_set_custom_transport+0x22>
 8010f52:	b155      	cbz	r5, 8010f6a <rmw_uros_set_custom_transport+0x22>
 8010f54:	b14e      	cbz	r6, 8010f6a <rmw_uros_set_custom_transport+0x22>
 8010f56:	4c06      	ldr	r4, [pc, #24]	@ (8010f70 <rmw_uros_set_custom_transport+0x28>)
 8010f58:	7020      	strb	r0, [r4, #0]
 8010f5a:	2000      	movs	r0, #0
 8010f5c:	6166      	str	r6, [r4, #20]
 8010f5e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8010f62:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010f66:	bc70      	pop	{r4, r5, r6}
 8010f68:	4770      	bx	lr
 8010f6a:	200b      	movs	r0, #11
 8010f6c:	bc70      	pop	{r4, r5, r6}
 8010f6e:	4770      	bx	lr
 8010f70:	2406469c 	.word	0x2406469c

08010f74 <get_message_typesupport_handle>:
 8010f74:	6883      	ldr	r3, [r0, #8]
 8010f76:	4718      	bx	r3

08010f78 <get_message_typesupport_handle_function>:
 8010f78:	b510      	push	{r4, lr}
 8010f7a:	4604      	mov	r4, r0
 8010f7c:	6800      	ldr	r0, [r0, #0]
 8010f7e:	f7ef f9af 	bl	80002e0 <strcmp>
 8010f82:	2800      	cmp	r0, #0
 8010f84:	bf0c      	ite	eq
 8010f86:	4620      	moveq	r0, r4
 8010f88:	2000      	movne	r0, #0
 8010f8a:	bd10      	pop	{r4, pc}

08010f8c <get_service_typesupport_handle>:
 8010f8c:	6883      	ldr	r3, [r0, #8]
 8010f8e:	4718      	bx	r3

08010f90 <get_service_typesupport_handle_function>:
 8010f90:	b510      	push	{r4, lr}
 8010f92:	4604      	mov	r4, r0
 8010f94:	6800      	ldr	r0, [r0, #0]
 8010f96:	f7ef f9a3 	bl	80002e0 <strcmp>
 8010f9a:	2800      	cmp	r0, #0
 8010f9c:	bf0c      	ite	eq
 8010f9e:	4620      	moveq	r0, r4
 8010fa0:	2000      	movne	r0, #0
 8010fa2:	bd10      	pop	{r4, pc}

08010fa4 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8010fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fa8:	6805      	ldr	r5, [r0, #0]
 8010faa:	4604      	mov	r4, r0
 8010fac:	460e      	mov	r6, r1
 8010fae:	4628      	mov	r0, r5
 8010fb0:	f7ef f996 	bl	80002e0 <strcmp>
 8010fb4:	b1c8      	cbz	r0, 8010fea <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8010fb6:	4b11      	ldr	r3, [pc, #68]	@ (8010ffc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	429d      	cmp	r5, r3
 8010fbc:	d112      	bne.n	8010fe4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8010fbe:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8010fc2:	f8d8 4000 	ldr.w	r4, [r8]
 8010fc6:	b16c      	cbz	r4, 8010fe4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8010fc8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8010fcc:	2700      	movs	r7, #0
 8010fce:	3d04      	subs	r5, #4
 8010fd0:	4631      	mov	r1, r6
 8010fd2:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8010fd6:	f7ef f983 	bl	80002e0 <strcmp>
 8010fda:	00bb      	lsls	r3, r7, #2
 8010fdc:	b140      	cbz	r0, 8010ff0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8010fde:	3701      	adds	r7, #1
 8010fe0:	42bc      	cmp	r4, r7
 8010fe2:	d1f5      	bne.n	8010fd0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8010fe4:	2000      	movs	r0, #0
 8010fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fea:	4620      	mov	r0, r4
 8010fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ff0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010ff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ff8:	58d3      	ldr	r3, [r2, r3]
 8010ffa:	4718      	bx	r3
 8010ffc:	24000e10 	.word	0x24000e10

08011000 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 8011000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011004:	6805      	ldr	r5, [r0, #0]
 8011006:	4604      	mov	r4, r0
 8011008:	460e      	mov	r6, r1
 801100a:	4628      	mov	r0, r5
 801100c:	f7ef f968 	bl	80002e0 <strcmp>
 8011010:	b1c8      	cbz	r0, 8011046 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 8011012:	4b11      	ldr	r3, [pc, #68]	@ (8011058 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	429d      	cmp	r5, r3
 8011018:	d112      	bne.n	8011040 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 801101a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801101e:	f8d8 4000 	ldr.w	r4, [r8]
 8011022:	b16c      	cbz	r4, 8011040 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8011024:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011028:	2700      	movs	r7, #0
 801102a:	3d04      	subs	r5, #4
 801102c:	4631      	mov	r1, r6
 801102e:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8011032:	f7ef f955 	bl	80002e0 <strcmp>
 8011036:	00bb      	lsls	r3, r7, #2
 8011038:	b140      	cbz	r0, 801104c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 801103a:	3701      	adds	r7, #1
 801103c:	42bc      	cmp	r4, r7
 801103e:	d1f5      	bne.n	801102c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 8011040:	2000      	movs	r0, #0
 8011042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011046:	4620      	mov	r0, r4
 8011048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801104c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011054:	58d3      	ldr	r3, [r2, r3]
 8011056:	4718      	bx	r3
 8011058:	24000e10 	.word	0x24000e10

0801105c <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 801105c:	f006 b8be 	b.w	80171dc <std_msgs__msg__Header__init>

08011060 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 8011060:	f006 b8e0 	b.w	8017224 <std_msgs__msg__Header__fini>

08011064 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8011064:	b508      	push	{r3, lr}
 8011066:	f7fd fb6f 	bl	800e748 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801106a:	4b06      	ldr	r3, [pc, #24]	@ (8011084 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 801106c:	4906      	ldr	r1, [pc, #24]	@ (8011088 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 801106e:	681a      	ldr	r2, [r3, #0]
 8011070:	60c8      	str	r0, [r1, #12]
 8011072:	b10a      	cbz	r2, 8011078 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 8011074:	4803      	ldr	r0, [pc, #12]	@ (8011084 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8011076:	bd08      	pop	{r3, pc}
 8011078:	4a04      	ldr	r2, [pc, #16]	@ (801108c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 801107a:	4802      	ldr	r0, [pc, #8]	@ (8011084 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 801107c:	6812      	ldr	r2, [r2, #0]
 801107e:	601a      	str	r2, [r3, #0]
 8011080:	bd08      	pop	{r3, pc}
 8011082:	bf00      	nop
 8011084:	24000e90 	.word	0x24000e90
 8011088:	24000e18 	.word	0x24000e18
 801108c:	24000e14 	.word	0x24000e14

08011090 <_Header__max_serialized_size>:
 8011090:	b500      	push	{lr}
 8011092:	b083      	sub	sp, #12
 8011094:	2301      	movs	r3, #1
 8011096:	2100      	movs	r1, #0
 8011098:	f10d 0007 	add.w	r0, sp, #7
 801109c:	f88d 3007 	strb.w	r3, [sp, #7]
 80110a0:	f7fd fbb0 	bl	800e804 <max_serialized_size_builtin_interfaces__msg__Time>
 80110a4:	b003      	add	sp, #12
 80110a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80110aa:	bf00      	nop

080110ac <get_serialized_size_std_msgs__msg__Header>:
 80110ac:	b570      	push	{r4, r5, r6, lr}
 80110ae:	4605      	mov	r5, r0
 80110b0:	b168      	cbz	r0, 80110ce <get_serialized_size_std_msgs__msg__Header+0x22>
 80110b2:	460c      	mov	r4, r1
 80110b4:	f7fd fb56 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 80110b8:	2104      	movs	r1, #4
 80110ba:	1826      	adds	r6, r4, r0
 80110bc:	f1c4 0405 	rsb	r4, r4, #5
 80110c0:	4630      	mov	r0, r6
 80110c2:	f7fe fe53 	bl	800fd6c <ucdr_alignment>
 80110c6:	68e9      	ldr	r1, [r5, #12]
 80110c8:	440c      	add	r4, r1
 80110ca:	4404      	add	r4, r0
 80110cc:	19a0      	adds	r0, r4, r6
 80110ce:	bd70      	pop	{r4, r5, r6, pc}

080110d0 <_Header__cdr_deserialize>:
 80110d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110d2:	460c      	mov	r4, r1
 80110d4:	b083      	sub	sp, #12
 80110d6:	b1e9      	cbz	r1, 8011114 <_Header__cdr_deserialize+0x44>
 80110d8:	4606      	mov	r6, r0
 80110da:	f7fd fba7 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80110de:	4603      	mov	r3, r0
 80110e0:	4621      	mov	r1, r4
 80110e2:	4630      	mov	r0, r6
 80110e4:	685b      	ldr	r3, [r3, #4]
 80110e6:	68db      	ldr	r3, [r3, #12]
 80110e8:	4798      	blx	r3
 80110ea:	6927      	ldr	r7, [r4, #16]
 80110ec:	ab01      	add	r3, sp, #4
 80110ee:	68a1      	ldr	r1, [r4, #8]
 80110f0:	463a      	mov	r2, r7
 80110f2:	4630      	mov	r0, r6
 80110f4:	f000 fc86 	bl	8011a04 <ucdr_deserialize_sequence_char>
 80110f8:	9b01      	ldr	r3, [sp, #4]
 80110fa:	4605      	mov	r5, r0
 80110fc:	b920      	cbnz	r0, 8011108 <_Header__cdr_deserialize+0x38>
 80110fe:	429f      	cmp	r7, r3
 8011100:	d30c      	bcc.n	801111c <_Header__cdr_deserialize+0x4c>
 8011102:	4628      	mov	r0, r5
 8011104:	b003      	add	sp, #12
 8011106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011108:	b103      	cbz	r3, 801110c <_Header__cdr_deserialize+0x3c>
 801110a:	3b01      	subs	r3, #1
 801110c:	4628      	mov	r0, r5
 801110e:	60e3      	str	r3, [r4, #12]
 8011110:	b003      	add	sp, #12
 8011112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011114:	460d      	mov	r5, r1
 8011116:	4628      	mov	r0, r5
 8011118:	b003      	add	sp, #12
 801111a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801111c:	2101      	movs	r1, #1
 801111e:	4630      	mov	r0, r6
 8011120:	75b5      	strb	r5, [r6, #22]
 8011122:	7571      	strb	r1, [r6, #21]
 8011124:	60e5      	str	r5, [r4, #12]
 8011126:	f7fe fe39 	bl	800fd9c <ucdr_align_to>
 801112a:	4630      	mov	r0, r6
 801112c:	9901      	ldr	r1, [sp, #4]
 801112e:	f7fe fe6d 	bl	800fe0c <ucdr_advance_buffer>
 8011132:	4628      	mov	r0, r5
 8011134:	b003      	add	sp, #12
 8011136:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011138 <_Header__cdr_serialize>:
 8011138:	b308      	cbz	r0, 801117e <_Header__cdr_serialize+0x46>
 801113a:	b570      	push	{r4, r5, r6, lr}
 801113c:	4604      	mov	r4, r0
 801113e:	460d      	mov	r5, r1
 8011140:	f7fd fb74 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011144:	4603      	mov	r3, r0
 8011146:	4629      	mov	r1, r5
 8011148:	4620      	mov	r0, r4
 801114a:	685b      	ldr	r3, [r3, #4]
 801114c:	689b      	ldr	r3, [r3, #8]
 801114e:	4798      	blx	r3
 8011150:	68a6      	ldr	r6, [r4, #8]
 8011152:	b15e      	cbz	r6, 801116c <_Header__cdr_serialize+0x34>
 8011154:	4630      	mov	r0, r6
 8011156:	f7ef f8cd 	bl	80002f4 <strlen>
 801115a:	4603      	mov	r3, r0
 801115c:	1c42      	adds	r2, r0, #1
 801115e:	4631      	mov	r1, r6
 8011160:	4628      	mov	r0, r5
 8011162:	60e3      	str	r3, [r4, #12]
 8011164:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011168:	f000 bc3a 	b.w	80119e0 <ucdr_serialize_sequence_char>
 801116c:	4633      	mov	r3, r6
 801116e:	4632      	mov	r2, r6
 8011170:	4631      	mov	r1, r6
 8011172:	4628      	mov	r0, r5
 8011174:	60e3      	str	r3, [r4, #12]
 8011176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801117a:	f000 bc31 	b.w	80119e0 <ucdr_serialize_sequence_char>
 801117e:	4770      	bx	lr

08011180 <_Header__get_serialized_size>:
 8011180:	b538      	push	{r3, r4, r5, lr}
 8011182:	4604      	mov	r4, r0
 8011184:	b150      	cbz	r0, 801119c <_Header__get_serialized_size+0x1c>
 8011186:	2100      	movs	r1, #0
 8011188:	f7fd faec 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 801118c:	2104      	movs	r1, #4
 801118e:	4605      	mov	r5, r0
 8011190:	f7fe fdec 	bl	800fd6c <ucdr_alignment>
 8011194:	68e2      	ldr	r2, [r4, #12]
 8011196:	3205      	adds	r2, #5
 8011198:	1953      	adds	r3, r2, r5
 801119a:	4418      	add	r0, r3
 801119c:	bd38      	pop	{r3, r4, r5, pc}
 801119e:	bf00      	nop

080111a0 <max_serialized_size_std_msgs__msg__Header>:
 80111a0:	2301      	movs	r3, #1
 80111a2:	b510      	push	{r4, lr}
 80111a4:	7003      	strb	r3, [r0, #0]
 80111a6:	4604      	mov	r4, r0
 80111a8:	f7fd fb2c 	bl	800e804 <max_serialized_size_builtin_interfaces__msg__Time>
 80111ac:	2300      	movs	r3, #0
 80111ae:	7023      	strb	r3, [r4, #0]
 80111b0:	bd10      	pop	{r4, pc}
 80111b2:	bf00      	nop

080111b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 80111b4:	4800      	ldr	r0, [pc, #0]	@ (80111b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 80111b6:	4770      	bx	lr
 80111b8:	24000e9c 	.word	0x24000e9c

080111bc <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 80111bc:	4b04      	ldr	r3, [pc, #16]	@ (80111d0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 80111be:	681a      	ldr	r2, [r3, #0]
 80111c0:	b10a      	cbz	r2, 80111c6 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xa>
 80111c2:	4803      	ldr	r0, [pc, #12]	@ (80111d0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 80111c4:	4770      	bx	lr
 80111c6:	4a03      	ldr	r2, [pc, #12]	@ (80111d4 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x18>)
 80111c8:	4801      	ldr	r0, [pc, #4]	@ (80111d0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 80111ca:	6812      	ldr	r2, [r2, #0]
 80111cc:	601a      	str	r2, [r3, #0]
 80111ce:	4770      	bx	lr
 80111d0:	24000ecc 	.word	0x24000ecc
 80111d4:	24000e10 	.word	0x24000e10

080111d8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 80111d8:	4a02      	ldr	r2, [pc, #8]	@ (80111e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xc>)
 80111da:	4b03      	ldr	r3, [pc, #12]	@ (80111e8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x10>)
 80111dc:	6812      	ldr	r2, [r2, #0]
 80111de:	601a      	str	r2, [r3, #0]
 80111e0:	4770      	bx	lr
 80111e2:	bf00      	nop
 80111e4:	24000e10 	.word	0x24000e10
 80111e8:	24000ecc 	.word	0x24000ecc

080111ec <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80111ec:	4b04      	ldr	r3, [pc, #16]	@ (8011200 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 80111ee:	681a      	ldr	r2, [r3, #0]
 80111f0:	b10a      	cbz	r2, 80111f6 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xa>
 80111f2:	4803      	ldr	r0, [pc, #12]	@ (8011200 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 80111f4:	4770      	bx	lr
 80111f6:	4a03      	ldr	r2, [pc, #12]	@ (8011204 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x18>)
 80111f8:	4801      	ldr	r0, [pc, #4]	@ (8011200 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 80111fa:	6812      	ldr	r2, [r2, #0]
 80111fc:	601a      	str	r2, [r3, #0]
 80111fe:	4770      	bx	lr
 8011200:	24000ee0 	.word	0x24000ee0
 8011204:	24000e10 	.word	0x24000e10

08011208 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8011208:	4a02      	ldr	r2, [pc, #8]	@ (8011214 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xc>)
 801120a:	4b03      	ldr	r3, [pc, #12]	@ (8011218 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x10>)
 801120c:	6812      	ldr	r2, [r2, #0]
 801120e:	601a      	str	r2, [r3, #0]
 8011210:	4770      	bx	lr
 8011212:	bf00      	nop
 8011214:	24000e10 	.word	0x24000e10
 8011218:	24000ee0 	.word	0x24000ee0

0801121c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 801121c:	4b04      	ldr	r3, [pc, #16]	@ (8011230 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 801121e:	681a      	ldr	r2, [r3, #0]
 8011220:	b10a      	cbz	r2, 8011226 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xa>
 8011222:	4803      	ldr	r0, [pc, #12]	@ (8011230 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 8011224:	4770      	bx	lr
 8011226:	4a03      	ldr	r2, [pc, #12]	@ (8011234 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x18>)
 8011228:	4801      	ldr	r0, [pc, #4]	@ (8011230 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 801122a:	6812      	ldr	r2, [r2, #0]
 801122c:	601a      	str	r2, [r3, #0]
 801122e:	4770      	bx	lr
 8011230:	24000ef4 	.word	0x24000ef4
 8011234:	24000e10 	.word	0x24000e10

08011238 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8011238:	4a02      	ldr	r2, [pc, #8]	@ (8011244 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xc>)
 801123a:	4b03      	ldr	r3, [pc, #12]	@ (8011248 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x10>)
 801123c:	6812      	ldr	r2, [r2, #0]
 801123e:	601a      	str	r2, [r3, #0]
 8011240:	4770      	bx	lr
 8011242:	bf00      	nop
 8011244:	24000e10 	.word	0x24000e10
 8011248:	24000ef4 	.word	0x24000ef4

0801124c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 801124c:	4b04      	ldr	r3, [pc, #16]	@ (8011260 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 801124e:	681a      	ldr	r2, [r3, #0]
 8011250:	b10a      	cbz	r2, 8011256 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xa>
 8011252:	4803      	ldr	r0, [pc, #12]	@ (8011260 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 8011254:	4770      	bx	lr
 8011256:	4a03      	ldr	r2, [pc, #12]	@ (8011264 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x18>)
 8011258:	4801      	ldr	r0, [pc, #4]	@ (8011260 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 801125a:	6812      	ldr	r2, [r2, #0]
 801125c:	601a      	str	r2, [r3, #0]
 801125e:	4770      	bx	lr
 8011260:	24000f08 	.word	0x24000f08
 8011264:	24000e10 	.word	0x24000e10

08011268 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8011268:	4a02      	ldr	r2, [pc, #8]	@ (8011274 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xc>)
 801126a:	4b03      	ldr	r3, [pc, #12]	@ (8011278 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x10>)
 801126c:	6812      	ldr	r2, [r2, #0]
 801126e:	601a      	str	r2, [r3, #0]
 8011270:	4770      	bx	lr
 8011272:	bf00      	nop
 8011274:	24000e10 	.word	0x24000e10
 8011278:	24000f08 	.word	0x24000f08

0801127c <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_init_function>:
 801127c:	f005 bfde 	b.w	801723c <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>

08011280 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_fini_function>:
 8011280:	f006 b800 	b.w	8017284 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>

08011284 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8011284:	b510      	push	{r4, lr}
 8011286:	4c08      	ldr	r4, [pc, #32]	@ (80112a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x24>)
 8011288:	f7ff feec 	bl	8011064 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 801128c:	60e0      	str	r0, [r4, #12]
 801128e:	f006 f865 	bl	801735c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8011292:	4b06      	ldr	r3, [pc, #24]	@ (80112ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8011294:	64a0      	str	r0, [r4, #72]	@ 0x48
 8011296:	681a      	ldr	r2, [r3, #0]
 8011298:	b10a      	cbz	r2, 801129e <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1a>
 801129a:	4804      	ldr	r0, [pc, #16]	@ (80112ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 801129c:	bd10      	pop	{r4, pc}
 801129e:	4a04      	ldr	r2, [pc, #16]	@ (80112b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x2c>)
 80112a0:	4802      	ldr	r0, [pc, #8]	@ (80112ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 80112a2:	6812      	ldr	r2, [r2, #0]
 80112a4:	601a      	str	r2, [r3, #0]
 80112a6:	bd10      	pop	{r4, pc}
 80112a8:	24000f14 	.word	0x24000f14
 80112ac:	24000f8c 	.word	0x24000f8c
 80112b0:	24000e14 	.word	0x24000e14

080112b4 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_init_function>:
 80112b4:	f005 bff2 	b.w	801729c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>

080112b8 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_fini_function>:
 80112b8:	f006 b814 	b.w	80172e4 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>

080112bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80112bc:	b510      	push	{r4, lr}
 80112be:	4c08      	ldr	r4, [pc, #32]	@ (80112e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x24>)
 80112c0:	f7ff fed0 	bl	8011064 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 80112c4:	60e0      	str	r0, [r4, #12]
 80112c6:	f006 f85b 	bl	8017380 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 80112ca:	4b06      	ldr	r3, [pc, #24]	@ (80112e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 80112cc:	64a0      	str	r0, [r4, #72]	@ 0x48
 80112ce:	681a      	ldr	r2, [r3, #0]
 80112d0:	b10a      	cbz	r2, 80112d6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1a>
 80112d2:	4804      	ldr	r0, [pc, #16]	@ (80112e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 80112d4:	bd10      	pop	{r4, pc}
 80112d6:	4a04      	ldr	r2, [pc, #16]	@ (80112e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x2c>)
 80112d8:	4802      	ldr	r0, [pc, #8]	@ (80112e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 80112da:	6812      	ldr	r2, [r2, #0]
 80112dc:	601a      	str	r2, [r3, #0]
 80112de:	bd10      	pop	{r4, pc}
 80112e0:	24000f98 	.word	0x24000f98
 80112e4:	24001010 	.word	0x24001010
 80112e8:	24000e14 	.word	0x24000e14

080112ec <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_init_function>:
 80112ec:	f006 b806 	b.w	80172fc <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>

080112f0 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_fini_function>:
 80112f0:	f006 b816 	b.w	8017320 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>

080112f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80112f4:	b508      	push	{r3, lr}
 80112f6:	f7fd fa27 	bl	800e748 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80112fa:	4b06      	ldr	r3, [pc, #24]	@ (8011314 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 80112fc:	4906      	ldr	r1, [pc, #24]	@ (8011318 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x24>)
 80112fe:	681a      	ldr	r2, [r3, #0]
 8011300:	60c8      	str	r0, [r1, #12]
 8011302:	b10a      	cbz	r2, 8011308 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>
 8011304:	4803      	ldr	r0, [pc, #12]	@ (8011314 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8011306:	bd08      	pop	{r3, pc}
 8011308:	4a04      	ldr	r2, [pc, #16]	@ (801131c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x28>)
 801130a:	4802      	ldr	r0, [pc, #8]	@ (8011314 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 801130c:	6812      	ldr	r2, [r2, #0]
 801130e:	601a      	str	r2, [r3, #0]
 8011310:	bd08      	pop	{r3, pc}
 8011312:	bf00      	nop
 8011314:	24001094 	.word	0x24001094
 8011318:	2400101c 	.word	0x2400101c
 801131c:	24000e14 	.word	0x24000e14

08011320 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_init_function>:
 8011320:	f006 b802 	b.w	8017328 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>

08011324 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_fini_function>:
 8011324:	f006 b812 	b.w	801734c <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>

08011328 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8011328:	b508      	push	{r3, lr}
 801132a:	f7fd fa0d 	bl	800e748 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801132e:	4b06      	ldr	r3, [pc, #24]	@ (8011348 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8011330:	4906      	ldr	r1, [pc, #24]	@ (801134c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x24>)
 8011332:	681a      	ldr	r2, [r3, #0]
 8011334:	60c8      	str	r0, [r1, #12]
 8011336:	b10a      	cbz	r2, 801133c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>
 8011338:	4803      	ldr	r0, [pc, #12]	@ (8011348 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 801133a:	bd08      	pop	{r3, pc}
 801133c:	4a04      	ldr	r2, [pc, #16]	@ (8011350 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x28>)
 801133e:	4802      	ldr	r0, [pc, #8]	@ (8011348 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8011340:	6812      	ldr	r2, [r2, #0]
 8011342:	601a      	str	r2, [r3, #0]
 8011344:	bd08      	pop	{r3, pc}
 8011346:	bf00      	nop
 8011348:	24001118 	.word	0x24001118
 801134c:	240010a0 	.word	0x240010a0
 8011350:	24000e14 	.word	0x24000e14

08011354 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8011354:	b538      	push	{r3, r4, r5, lr}
 8011356:	4604      	mov	r4, r0
 8011358:	b150      	cbz	r0, 8011370 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1c>
 801135a:	460d      	mov	r5, r1
 801135c:	f7ff fea6 	bl	80110ac <get_serialized_size_std_msgs__msg__Header>
 8011360:	4603      	mov	r3, r0
 8011362:	f104 0018 	add.w	r0, r4, #24
 8011366:	461c      	mov	r4, r3
 8011368:	18e9      	adds	r1, r5, r3
 801136a:	f006 f817 	bl	801739c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 801136e:	4420      	add	r0, r4
 8011370:	bd38      	pop	{r3, r4, r5, pc}
 8011372:	bf00      	nop

08011374 <_ActuationCommandStamped__cdr_deserialize>:
 8011374:	b570      	push	{r4, r5, r6, lr}
 8011376:	460c      	mov	r4, r1
 8011378:	b199      	cbz	r1, 80113a2 <_ActuationCommandStamped__cdr_deserialize+0x2e>
 801137a:	4605      	mov	r5, r0
 801137c:	f7ff ff1a 	bl	80111b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011380:	4603      	mov	r3, r0
 8011382:	4621      	mov	r1, r4
 8011384:	4628      	mov	r0, r5
 8011386:	685b      	ldr	r3, [r3, #4]
 8011388:	68db      	ldr	r3, [r3, #12]
 801138a:	4798      	blx	r3
 801138c:	f006 f88e 	bl	80174ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8011390:	4603      	mov	r3, r0
 8011392:	f104 0118 	add.w	r1, r4, #24
 8011396:	4628      	mov	r0, r5
 8011398:	685b      	ldr	r3, [r3, #4]
 801139a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801139e:	68db      	ldr	r3, [r3, #12]
 80113a0:	4718      	bx	r3
 80113a2:	4608      	mov	r0, r1
 80113a4:	bd70      	pop	{r4, r5, r6, pc}
 80113a6:	bf00      	nop

080113a8 <_ActuationCommandStamped__cdr_serialize>:
 80113a8:	b510      	push	{r4, lr}
 80113aa:	b082      	sub	sp, #8
 80113ac:	9101      	str	r1, [sp, #4]
 80113ae:	b1a0      	cbz	r0, 80113da <_ActuationCommandStamped__cdr_serialize+0x32>
 80113b0:	4604      	mov	r4, r0
 80113b2:	f7ff feff 	bl	80111b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80113b6:	4603      	mov	r3, r0
 80113b8:	9901      	ldr	r1, [sp, #4]
 80113ba:	4620      	mov	r0, r4
 80113bc:	685b      	ldr	r3, [r3, #4]
 80113be:	689b      	ldr	r3, [r3, #8]
 80113c0:	4798      	blx	r3
 80113c2:	f006 f873 	bl	80174ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 80113c6:	4603      	mov	r3, r0
 80113c8:	9901      	ldr	r1, [sp, #4]
 80113ca:	f104 0018 	add.w	r0, r4, #24
 80113ce:	685b      	ldr	r3, [r3, #4]
 80113d0:	689b      	ldr	r3, [r3, #8]
 80113d2:	b002      	add	sp, #8
 80113d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113d8:	4718      	bx	r3
 80113da:	b002      	add	sp, #8
 80113dc:	bd10      	pop	{r4, pc}
 80113de:	bf00      	nop

080113e0 <_ActuationCommandStamped__get_serialized_size>:
 80113e0:	b510      	push	{r4, lr}
 80113e2:	4604      	mov	r4, r0
 80113e4:	b148      	cbz	r0, 80113fa <_ActuationCommandStamped__get_serialized_size+0x1a>
 80113e6:	2100      	movs	r1, #0
 80113e8:	f7ff fe60 	bl	80110ac <get_serialized_size_std_msgs__msg__Header>
 80113ec:	4601      	mov	r1, r0
 80113ee:	f104 0018 	add.w	r0, r4, #24
 80113f2:	460c      	mov	r4, r1
 80113f4:	f005 ffd2 	bl	801739c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 80113f8:	4420      	add	r0, r4
 80113fa:	bd10      	pop	{r4, pc}

080113fc <_ActuationCommandStamped__max_serialized_size>:
 80113fc:	b510      	push	{r4, lr}
 80113fe:	b082      	sub	sp, #8
 8011400:	2301      	movs	r3, #1
 8011402:	2100      	movs	r1, #0
 8011404:	f10d 0007 	add.w	r0, sp, #7
 8011408:	f88d 3007 	strb.w	r3, [sp, #7]
 801140c:	f7ff fec8 	bl	80111a0 <max_serialized_size_std_msgs__msg__Header>
 8011410:	4604      	mov	r4, r0
 8011412:	f10d 0007 	add.w	r0, sp, #7
 8011416:	4621      	mov	r1, r4
 8011418:	f006 f82e 	bl	8017478 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 801141c:	4420      	add	r0, r4
 801141e:	b002      	add	sp, #8
 8011420:	bd10      	pop	{r4, pc}
 8011422:	bf00      	nop

08011424 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8011424:	4800      	ldr	r0, [pc, #0]	@ (8011428 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x4>)
 8011426:	4770      	bx	lr
 8011428:	24001124 	.word	0x24001124

0801142c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 801142c:	b538      	push	{r3, r4, r5, lr}
 801142e:	4604      	mov	r4, r0
 8011430:	b150      	cbz	r0, 8011448 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1c>
 8011432:	460d      	mov	r5, r1
 8011434:	f7ff fe3a 	bl	80110ac <get_serialized_size_std_msgs__msg__Header>
 8011438:	4603      	mov	r3, r0
 801143a:	f104 0018 	add.w	r0, r4, #24
 801143e:	461c      	mov	r4, r3
 8011440:	18e9      	adds	r1, r5, r3
 8011442:	f006 f837 	bl	80174b4 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8011446:	4420      	add	r0, r4
 8011448:	bd38      	pop	{r3, r4, r5, pc}
 801144a:	bf00      	nop

0801144c <_ActuationStatusStamped__cdr_deserialize>:
 801144c:	b570      	push	{r4, r5, r6, lr}
 801144e:	460c      	mov	r4, r1
 8011450:	b199      	cbz	r1, 801147a <_ActuationStatusStamped__cdr_deserialize+0x2e>
 8011452:	4605      	mov	r5, r0
 8011454:	f7ff feae 	bl	80111b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011458:	4603      	mov	r3, r0
 801145a:	4621      	mov	r1, r4
 801145c:	4628      	mov	r0, r5
 801145e:	685b      	ldr	r3, [r3, #4]
 8011460:	68db      	ldr	r3, [r3, #12]
 8011462:	4798      	blx	r3
 8011464:	f006 f8ae 	bl	80175c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8011468:	4603      	mov	r3, r0
 801146a:	f104 0118 	add.w	r1, r4, #24
 801146e:	4628      	mov	r0, r5
 8011470:	685b      	ldr	r3, [r3, #4]
 8011472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011476:	68db      	ldr	r3, [r3, #12]
 8011478:	4718      	bx	r3
 801147a:	4608      	mov	r0, r1
 801147c:	bd70      	pop	{r4, r5, r6, pc}
 801147e:	bf00      	nop

08011480 <_ActuationStatusStamped__cdr_serialize>:
 8011480:	b510      	push	{r4, lr}
 8011482:	b082      	sub	sp, #8
 8011484:	9101      	str	r1, [sp, #4]
 8011486:	b1a0      	cbz	r0, 80114b2 <_ActuationStatusStamped__cdr_serialize+0x32>
 8011488:	4604      	mov	r4, r0
 801148a:	f7ff fe93 	bl	80111b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801148e:	4603      	mov	r3, r0
 8011490:	9901      	ldr	r1, [sp, #4]
 8011492:	4620      	mov	r0, r4
 8011494:	685b      	ldr	r3, [r3, #4]
 8011496:	689b      	ldr	r3, [r3, #8]
 8011498:	4798      	blx	r3
 801149a:	f006 f893 	bl	80175c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 801149e:	4603      	mov	r3, r0
 80114a0:	9901      	ldr	r1, [sp, #4]
 80114a2:	f104 0018 	add.w	r0, r4, #24
 80114a6:	685b      	ldr	r3, [r3, #4]
 80114a8:	689b      	ldr	r3, [r3, #8]
 80114aa:	b002      	add	sp, #8
 80114ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114b0:	4718      	bx	r3
 80114b2:	b002      	add	sp, #8
 80114b4:	bd10      	pop	{r4, pc}
 80114b6:	bf00      	nop

080114b8 <_ActuationStatusStamped__get_serialized_size>:
 80114b8:	b510      	push	{r4, lr}
 80114ba:	4604      	mov	r4, r0
 80114bc:	b148      	cbz	r0, 80114d2 <_ActuationStatusStamped__get_serialized_size+0x1a>
 80114be:	2100      	movs	r1, #0
 80114c0:	f7ff fdf4 	bl	80110ac <get_serialized_size_std_msgs__msg__Header>
 80114c4:	4601      	mov	r1, r0
 80114c6:	f104 0018 	add.w	r0, r4, #24
 80114ca:	460c      	mov	r4, r1
 80114cc:	f005 fff2 	bl	80174b4 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 80114d0:	4420      	add	r0, r4
 80114d2:	bd10      	pop	{r4, pc}

080114d4 <_ActuationStatusStamped__max_serialized_size>:
 80114d4:	b510      	push	{r4, lr}
 80114d6:	b082      	sub	sp, #8
 80114d8:	2301      	movs	r3, #1
 80114da:	2100      	movs	r1, #0
 80114dc:	f10d 0007 	add.w	r0, sp, #7
 80114e0:	f88d 3007 	strb.w	r3, [sp, #7]
 80114e4:	f7ff fe5c 	bl	80111a0 <max_serialized_size_std_msgs__msg__Header>
 80114e8:	4604      	mov	r4, r0
 80114ea:	f10d 0007 	add.w	r0, sp, #7
 80114ee:	4621      	mov	r1, r4
 80114f0:	f006 f84e 	bl	8017590 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 80114f4:	4420      	add	r0, r4
 80114f6:	b002      	add	sp, #8
 80114f8:	bd10      	pop	{r4, pc}
 80114fa:	bf00      	nop

080114fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80114fc:	4800      	ldr	r0, [pc, #0]	@ (8011500 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x4>)
 80114fe:	4770      	bx	lr
 8011500:	2400114c 	.word	0x2400114c

08011504 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8011504:	b538      	push	{r3, r4, r5, lr}
 8011506:	b158      	cbz	r0, 8011520 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x1c>
 8011508:	460d      	mov	r5, r1
 801150a:	f7fd f92b 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 801150e:	2104      	movs	r1, #4
 8011510:	182c      	adds	r4, r5, r0
 8011512:	f1c5 0504 	rsb	r5, r5, #4
 8011516:	4620      	mov	r0, r4
 8011518:	f7fe fc28 	bl	800fd6c <ucdr_alignment>
 801151c:	4428      	add	r0, r5
 801151e:	4420      	add	r0, r4
 8011520:	bd38      	pop	{r3, r4, r5, pc}
 8011522:	bf00      	nop

08011524 <_SteeringWheelStatusStamped__cdr_deserialize>:
 8011524:	b538      	push	{r3, r4, r5, lr}
 8011526:	460c      	mov	r4, r1
 8011528:	b179      	cbz	r1, 801154a <_SteeringWheelStatusStamped__cdr_deserialize+0x26>
 801152a:	4605      	mov	r5, r0
 801152c:	f7fd f97e 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011530:	4603      	mov	r3, r0
 8011532:	4621      	mov	r1, r4
 8011534:	4628      	mov	r0, r5
 8011536:	685b      	ldr	r3, [r3, #4]
 8011538:	68db      	ldr	r3, [r3, #12]
 801153a:	4798      	blx	r3
 801153c:	f104 0108 	add.w	r1, r4, #8
 8011540:	4628      	mov	r0, r5
 8011542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011546:	f7fe b993 	b.w	800f870 <ucdr_deserialize_float>
 801154a:	4608      	mov	r0, r1
 801154c:	bd38      	pop	{r3, r4, r5, pc}
 801154e:	bf00      	nop

08011550 <_SteeringWheelStatusStamped__cdr_serialize>:
 8011550:	b188      	cbz	r0, 8011576 <_SteeringWheelStatusStamped__cdr_serialize+0x26>
 8011552:	b538      	push	{r3, r4, r5, lr}
 8011554:	4604      	mov	r4, r0
 8011556:	460d      	mov	r5, r1
 8011558:	f7fd f968 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801155c:	4603      	mov	r3, r0
 801155e:	4629      	mov	r1, r5
 8011560:	4620      	mov	r0, r4
 8011562:	685b      	ldr	r3, [r3, #4]
 8011564:	689b      	ldr	r3, [r3, #8]
 8011566:	4798      	blx	r3
 8011568:	ed94 0a02 	vldr	s0, [r4, #8]
 801156c:	4628      	mov	r0, r5
 801156e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011572:	f7fe b8e5 	b.w	800f740 <ucdr_serialize_float>
 8011576:	4770      	bx	lr

08011578 <_SteeringWheelStatusStamped__get_serialized_size>:
 8011578:	b150      	cbz	r0, 8011590 <_SteeringWheelStatusStamped__get_serialized_size+0x18>
 801157a:	2100      	movs	r1, #0
 801157c:	b510      	push	{r4, lr}
 801157e:	f7fd f8f1 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 8011582:	4604      	mov	r4, r0
 8011584:	2104      	movs	r1, #4
 8011586:	f7fe fbf1 	bl	800fd6c <ucdr_alignment>
 801158a:	4420      	add	r0, r4
 801158c:	3004      	adds	r0, #4
 801158e:	bd10      	pop	{r4, pc}
 8011590:	4770      	bx	lr
 8011592:	bf00      	nop

08011594 <_SteeringWheelStatusStamped__max_serialized_size>:
 8011594:	b510      	push	{r4, lr}
 8011596:	b082      	sub	sp, #8
 8011598:	2301      	movs	r3, #1
 801159a:	2100      	movs	r1, #0
 801159c:	f10d 0007 	add.w	r0, sp, #7
 80115a0:	f88d 3007 	strb.w	r3, [sp, #7]
 80115a4:	f7fd f92e 	bl	800e804 <max_serialized_size_builtin_interfaces__msg__Time>
 80115a8:	4604      	mov	r4, r0
 80115aa:	2104      	movs	r1, #4
 80115ac:	f7fe fbde 	bl	800fd6c <ucdr_alignment>
 80115b0:	4420      	add	r0, r4
 80115b2:	3004      	adds	r0, #4
 80115b4:	b002      	add	sp, #8
 80115b6:	bd10      	pop	{r4, pc}

080115b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80115b8:	4800      	ldr	r0, [pc, #0]	@ (80115bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x4>)
 80115ba:	4770      	bx	lr
 80115bc:	24001174 	.word	0x24001174

080115c0 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 80115c0:	b538      	push	{r3, r4, r5, lr}
 80115c2:	b158      	cbz	r0, 80115dc <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x1c>
 80115c4:	460d      	mov	r5, r1
 80115c6:	f7fd f8cd 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 80115ca:	2101      	movs	r1, #1
 80115cc:	182c      	adds	r4, r5, r0
 80115ce:	f1c5 0501 	rsb	r5, r5, #1
 80115d2:	4620      	mov	r0, r4
 80115d4:	f7fe fbca 	bl	800fd6c <ucdr_alignment>
 80115d8:	4428      	add	r0, r5
 80115da:	4420      	add	r0, r4
 80115dc:	bd38      	pop	{r3, r4, r5, pc}
 80115de:	bf00      	nop

080115e0 <_VehicleEmergencyStamped__cdr_deserialize>:
 80115e0:	b538      	push	{r3, r4, r5, lr}
 80115e2:	460c      	mov	r4, r1
 80115e4:	b179      	cbz	r1, 8011606 <_VehicleEmergencyStamped__cdr_deserialize+0x26>
 80115e6:	4605      	mov	r5, r0
 80115e8:	f7fd f920 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80115ec:	4603      	mov	r3, r0
 80115ee:	4621      	mov	r1, r4
 80115f0:	4628      	mov	r0, r5
 80115f2:	685b      	ldr	r3, [r3, #4]
 80115f4:	68db      	ldr	r3, [r3, #12]
 80115f6:	4798      	blx	r3
 80115f8:	f104 0108 	add.w	r1, r4, #8
 80115fc:	4628      	mov	r0, r5
 80115fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011602:	f7fd b92d 	b.w	800e860 <ucdr_deserialize_bool>
 8011606:	4608      	mov	r0, r1
 8011608:	bd38      	pop	{r3, r4, r5, pc}
 801160a:	bf00      	nop

0801160c <_VehicleEmergencyStamped__cdr_serialize>:
 801160c:	b180      	cbz	r0, 8011630 <_VehicleEmergencyStamped__cdr_serialize+0x24>
 801160e:	b538      	push	{r3, r4, r5, lr}
 8011610:	4604      	mov	r4, r0
 8011612:	460d      	mov	r5, r1
 8011614:	f7fd f90a 	bl	800e82c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011618:	4603      	mov	r3, r0
 801161a:	4629      	mov	r1, r5
 801161c:	4620      	mov	r0, r4
 801161e:	685b      	ldr	r3, [r3, #4]
 8011620:	689b      	ldr	r3, [r3, #8]
 8011622:	4798      	blx	r3
 8011624:	7a21      	ldrb	r1, [r4, #8]
 8011626:	4628      	mov	r0, r5
 8011628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801162c:	f7fd b902 	b.w	800e834 <ucdr_serialize_bool>
 8011630:	4770      	bx	lr
 8011632:	bf00      	nop

08011634 <_VehicleEmergencyStamped__get_serialized_size>:
 8011634:	b150      	cbz	r0, 801164c <_VehicleEmergencyStamped__get_serialized_size+0x18>
 8011636:	2100      	movs	r1, #0
 8011638:	b510      	push	{r4, lr}
 801163a:	f7fd f893 	bl	800e764 <get_serialized_size_builtin_interfaces__msg__Time>
 801163e:	4604      	mov	r4, r0
 8011640:	2101      	movs	r1, #1
 8011642:	f7fe fb93 	bl	800fd6c <ucdr_alignment>
 8011646:	4420      	add	r0, r4
 8011648:	3001      	adds	r0, #1
 801164a:	bd10      	pop	{r4, pc}
 801164c:	4770      	bx	lr
 801164e:	bf00      	nop

08011650 <_VehicleEmergencyStamped__max_serialized_size>:
 8011650:	b510      	push	{r4, lr}
 8011652:	b082      	sub	sp, #8
 8011654:	2401      	movs	r4, #1
 8011656:	2100      	movs	r1, #0
 8011658:	f10d 0007 	add.w	r0, sp, #7
 801165c:	f88d 4007 	strb.w	r4, [sp, #7]
 8011660:	f7fd f8d0 	bl	800e804 <max_serialized_size_builtin_interfaces__msg__Time>
 8011664:	4621      	mov	r1, r4
 8011666:	4604      	mov	r4, r0
 8011668:	f7fe fb80 	bl	800fd6c <ucdr_alignment>
 801166c:	4420      	add	r0, r4
 801166e:	3001      	adds	r0, #1
 8011670:	b002      	add	sp, #8
 8011672:	bd10      	pop	{r4, pc}

08011674 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8011674:	4800      	ldr	r0, [pc, #0]	@ (8011678 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x4>)
 8011676:	4770      	bx	lr
 8011678:	2400119c 	.word	0x2400119c

0801167c <autoware_control_msgs__msg__Control__init>:
 801167c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011680:	4605      	mov	r5, r0
 8011682:	b3c0      	cbz	r0, 80116f6 <autoware_control_msgs__msg__Control__init+0x7a>
 8011684:	f000 f9a6 	bl	80119d4 <builtin_interfaces__msg__Time__init>
 8011688:	4604      	mov	r4, r0
 801168a:	b310      	cbz	r0, 80116d2 <autoware_control_msgs__msg__Control__init+0x56>
 801168c:	f105 0608 	add.w	r6, r5, #8
 8011690:	4630      	mov	r0, r6
 8011692:	f000 f99f 	bl	80119d4 <builtin_interfaces__msg__Time__init>
 8011696:	4604      	mov	r4, r0
 8011698:	2800      	cmp	r0, #0
 801169a:	d040      	beq.n	801171e <autoware_control_msgs__msg__Control__init+0xa2>
 801169c:	f105 0710 	add.w	r7, r5, #16
 80116a0:	4638      	mov	r0, r7
 80116a2:	f000 f855 	bl	8011750 <autoware_control_msgs__msg__Lateral__init>
 80116a6:	4604      	mov	r4, r0
 80116a8:	b348      	cbz	r0, 80116fe <autoware_control_msgs__msg__Control__init+0x82>
 80116aa:	f105 082c 	add.w	r8, r5, #44	@ 0x2c
 80116ae:	4640      	mov	r0, r8
 80116b0:	f000 f87e 	bl	80117b0 <autoware_control_msgs__msg__Longitudinal__init>
 80116b4:	4604      	mov	r4, r0
 80116b6:	b9d8      	cbnz	r0, 80116f0 <autoware_control_msgs__msg__Control__init+0x74>
 80116b8:	4628      	mov	r0, r5
 80116ba:	f000 f98f 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 80116be:	4630      	mov	r0, r6
 80116c0:	f000 f98c 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 80116c4:	4638      	mov	r0, r7
 80116c6:	f000 f867 	bl	8011798 <autoware_control_msgs__msg__Lateral__fini>
 80116ca:	4640      	mov	r0, r8
 80116cc:	f000 f894 	bl	80117f8 <autoware_control_msgs__msg__Longitudinal__fini>
 80116d0:	e00e      	b.n	80116f0 <autoware_control_msgs__msg__Control__init+0x74>
 80116d2:	4628      	mov	r0, r5
 80116d4:	f000 f982 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 80116d8:	f105 0008 	add.w	r0, r5, #8
 80116dc:	f000 f97e 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 80116e0:	f105 0010 	add.w	r0, r5, #16
 80116e4:	f000 f858 	bl	8011798 <autoware_control_msgs__msg__Lateral__fini>
 80116e8:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 80116ec:	f000 f884 	bl	80117f8 <autoware_control_msgs__msg__Longitudinal__fini>
 80116f0:	4620      	mov	r0, r4
 80116f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116f6:	4604      	mov	r4, r0
 80116f8:	4620      	mov	r0, r4
 80116fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116fe:	4628      	mov	r0, r5
 8011700:	f000 f96c 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 8011704:	4630      	mov	r0, r6
 8011706:	f000 f969 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 801170a:	4638      	mov	r0, r7
 801170c:	f000 f844 	bl	8011798 <autoware_control_msgs__msg__Lateral__fini>
 8011710:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8011714:	f000 f870 	bl	80117f8 <autoware_control_msgs__msg__Longitudinal__fini>
 8011718:	4620      	mov	r0, r4
 801171a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801171e:	4628      	mov	r0, r5
 8011720:	f000 f95c 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 8011724:	4630      	mov	r0, r6
 8011726:	e7d9      	b.n	80116dc <autoware_control_msgs__msg__Control__init+0x60>

08011728 <autoware_control_msgs__msg__Control__fini>:
 8011728:	b188      	cbz	r0, 801174e <autoware_control_msgs__msg__Control__fini+0x26>
 801172a:	b510      	push	{r4, lr}
 801172c:	4604      	mov	r4, r0
 801172e:	f000 f955 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 8011732:	f104 0008 	add.w	r0, r4, #8
 8011736:	f000 f951 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 801173a:	f104 0010 	add.w	r0, r4, #16
 801173e:	f000 f82b 	bl	8011798 <autoware_control_msgs__msg__Lateral__fini>
 8011742:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8011746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801174a:	f000 b855 	b.w	80117f8 <autoware_control_msgs__msg__Longitudinal__fini>
 801174e:	4770      	bx	lr

08011750 <autoware_control_msgs__msg__Lateral__init>:
 8011750:	b570      	push	{r4, r5, r6, lr}
 8011752:	4605      	mov	r5, r0
 8011754:	b1a8      	cbz	r0, 8011782 <autoware_control_msgs__msg__Lateral__init+0x32>
 8011756:	f000 f93d 	bl	80119d4 <builtin_interfaces__msg__Time__init>
 801175a:	4604      	mov	r4, r0
 801175c:	b140      	cbz	r0, 8011770 <autoware_control_msgs__msg__Lateral__init+0x20>
 801175e:	f105 0608 	add.w	r6, r5, #8
 8011762:	4630      	mov	r0, r6
 8011764:	f000 f936 	bl	80119d4 <builtin_interfaces__msg__Time__init>
 8011768:	4604      	mov	r4, r0
 801176a:	b168      	cbz	r0, 8011788 <autoware_control_msgs__msg__Lateral__init+0x38>
 801176c:	4620      	mov	r0, r4
 801176e:	bd70      	pop	{r4, r5, r6, pc}
 8011770:	4628      	mov	r0, r5
 8011772:	f000 f933 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 8011776:	f105 0008 	add.w	r0, r5, #8
 801177a:	f000 f92f 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 801177e:	4620      	mov	r0, r4
 8011780:	bd70      	pop	{r4, r5, r6, pc}
 8011782:	4604      	mov	r4, r0
 8011784:	4620      	mov	r0, r4
 8011786:	bd70      	pop	{r4, r5, r6, pc}
 8011788:	4628      	mov	r0, r5
 801178a:	f000 f927 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 801178e:	4630      	mov	r0, r6
 8011790:	f000 f924 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 8011794:	e7ea      	b.n	801176c <autoware_control_msgs__msg__Lateral__init+0x1c>
 8011796:	bf00      	nop

08011798 <autoware_control_msgs__msg__Lateral__fini>:
 8011798:	b148      	cbz	r0, 80117ae <autoware_control_msgs__msg__Lateral__fini+0x16>
 801179a:	b510      	push	{r4, lr}
 801179c:	4604      	mov	r4, r0
 801179e:	f000 f91d 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 80117a2:	f104 0008 	add.w	r0, r4, #8
 80117a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117aa:	f000 b917 	b.w	80119dc <builtin_interfaces__msg__Time__fini>
 80117ae:	4770      	bx	lr

080117b0 <autoware_control_msgs__msg__Longitudinal__init>:
 80117b0:	b570      	push	{r4, r5, r6, lr}
 80117b2:	4605      	mov	r5, r0
 80117b4:	b1a8      	cbz	r0, 80117e2 <autoware_control_msgs__msg__Longitudinal__init+0x32>
 80117b6:	f000 f90d 	bl	80119d4 <builtin_interfaces__msg__Time__init>
 80117ba:	4604      	mov	r4, r0
 80117bc:	b140      	cbz	r0, 80117d0 <autoware_control_msgs__msg__Longitudinal__init+0x20>
 80117be:	f105 0608 	add.w	r6, r5, #8
 80117c2:	4630      	mov	r0, r6
 80117c4:	f000 f906 	bl	80119d4 <builtin_interfaces__msg__Time__init>
 80117c8:	4604      	mov	r4, r0
 80117ca:	b168      	cbz	r0, 80117e8 <autoware_control_msgs__msg__Longitudinal__init+0x38>
 80117cc:	4620      	mov	r0, r4
 80117ce:	bd70      	pop	{r4, r5, r6, pc}
 80117d0:	4628      	mov	r0, r5
 80117d2:	f000 f903 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 80117d6:	f105 0008 	add.w	r0, r5, #8
 80117da:	f000 f8ff 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 80117de:	4620      	mov	r0, r4
 80117e0:	bd70      	pop	{r4, r5, r6, pc}
 80117e2:	4604      	mov	r4, r0
 80117e4:	4620      	mov	r0, r4
 80117e6:	bd70      	pop	{r4, r5, r6, pc}
 80117e8:	4628      	mov	r0, r5
 80117ea:	f000 f8f7 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 80117ee:	4630      	mov	r0, r6
 80117f0:	f000 f8f4 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 80117f4:	e7ea      	b.n	80117cc <autoware_control_msgs__msg__Longitudinal__init+0x1c>
 80117f6:	bf00      	nop

080117f8 <autoware_control_msgs__msg__Longitudinal__fini>:
 80117f8:	b148      	cbz	r0, 801180e <autoware_control_msgs__msg__Longitudinal__fini+0x16>
 80117fa:	b510      	push	{r4, lr}
 80117fc:	4604      	mov	r4, r0
 80117fe:	f000 f8ed 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 8011802:	f104 0008 	add.w	r0, r4, #8
 8011806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801180a:	f000 b8e7 	b.w	80119dc <builtin_interfaces__msg__Time__fini>
 801180e:	4770      	bx	lr

08011810 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init>:
 8011810:	b538      	push	{r3, r4, r5, lr}
 8011812:	4604      	mov	r4, r0
 8011814:	b128      	cbz	r0, 8011822 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init+0x12>
 8011816:	f000 f8dd 	bl	80119d4 <builtin_interfaces__msg__Time__init>
 801181a:	4605      	mov	r5, r0
 801181c:	b120      	cbz	r0, 8011828 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init+0x18>
 801181e:	4628      	mov	r0, r5
 8011820:	bd38      	pop	{r3, r4, r5, pc}
 8011822:	4605      	mov	r5, r0
 8011824:	4628      	mov	r0, r5
 8011826:	bd38      	pop	{r3, r4, r5, pc}
 8011828:	4620      	mov	r0, r4
 801182a:	f000 f8d7 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 801182e:	4628      	mov	r0, r5
 8011830:	bd38      	pop	{r3, r4, r5, pc}
 8011832:	bf00      	nop

08011834 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini>:
 8011834:	b108      	cbz	r0, 801183a <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini+0x6>
 8011836:	f000 b8d1 	b.w	80119dc <builtin_interfaces__msg__Time__fini>
 801183a:	4770      	bx	lr

0801183c <autoware_vehicle_msgs__srv__ControlModeCommand_Response__init>:
 801183c:	3800      	subs	r0, #0
 801183e:	bf18      	it	ne
 8011840:	2001      	movne	r0, #1
 8011842:	4770      	bx	lr

08011844 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__fini>:
 8011844:	4770      	bx	lr
 8011846:	bf00      	nop

08011848 <autoware_vehicle_msgs__msg__ControlModeReport__init>:
 8011848:	b538      	push	{r3, r4, r5, lr}
 801184a:	4604      	mov	r4, r0
 801184c:	b128      	cbz	r0, 801185a <autoware_vehicle_msgs__msg__ControlModeReport__init+0x12>
 801184e:	f000 f8c1 	bl	80119d4 <builtin_interfaces__msg__Time__init>
 8011852:	4605      	mov	r5, r0
 8011854:	b120      	cbz	r0, 8011860 <autoware_vehicle_msgs__msg__ControlModeReport__init+0x18>
 8011856:	4628      	mov	r0, r5
 8011858:	bd38      	pop	{r3, r4, r5, pc}
 801185a:	4605      	mov	r5, r0
 801185c:	4628      	mov	r0, r5
 801185e:	bd38      	pop	{r3, r4, r5, pc}
 8011860:	4620      	mov	r0, r4
 8011862:	f000 f8bb 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 8011866:	4628      	mov	r0, r5
 8011868:	bd38      	pop	{r3, r4, r5, pc}
 801186a:	bf00      	nop

0801186c <autoware_vehicle_msgs__msg__ControlModeReport__fini>:
 801186c:	b108      	cbz	r0, 8011872 <autoware_vehicle_msgs__msg__ControlModeReport__fini+0x6>
 801186e:	f000 b8b5 	b.w	80119dc <builtin_interfaces__msg__Time__fini>
 8011872:	4770      	bx	lr

08011874 <autoware_vehicle_msgs__msg__GearCommand__init>:
 8011874:	b538      	push	{r3, r4, r5, lr}
 8011876:	4604      	mov	r4, r0
 8011878:	b128      	cbz	r0, 8011886 <autoware_vehicle_msgs__msg__GearCommand__init+0x12>
 801187a:	f000 f8ab 	bl	80119d4 <builtin_interfaces__msg__Time__init>
 801187e:	4605      	mov	r5, r0
 8011880:	b120      	cbz	r0, 801188c <autoware_vehicle_msgs__msg__GearCommand__init+0x18>
 8011882:	4628      	mov	r0, r5
 8011884:	bd38      	pop	{r3, r4, r5, pc}
 8011886:	4605      	mov	r5, r0
 8011888:	4628      	mov	r0, r5
 801188a:	bd38      	pop	{r3, r4, r5, pc}
 801188c:	4620      	mov	r0, r4
 801188e:	f000 f8a5 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 8011892:	4628      	mov	r0, r5
 8011894:	bd38      	pop	{r3, r4, r5, pc}
 8011896:	bf00      	nop

08011898 <autoware_vehicle_msgs__msg__GearCommand__fini>:
 8011898:	b108      	cbz	r0, 801189e <autoware_vehicle_msgs__msg__GearCommand__fini+0x6>
 801189a:	f000 b89f 	b.w	80119dc <builtin_interfaces__msg__Time__fini>
 801189e:	4770      	bx	lr

080118a0 <autoware_vehicle_msgs__msg__GearReport__init>:
 80118a0:	b538      	push	{r3, r4, r5, lr}
 80118a2:	4604      	mov	r4, r0
 80118a4:	b128      	cbz	r0, 80118b2 <autoware_vehicle_msgs__msg__GearReport__init+0x12>
 80118a6:	f000 f895 	bl	80119d4 <builtin_interfaces__msg__Time__init>
 80118aa:	4605      	mov	r5, r0
 80118ac:	b120      	cbz	r0, 80118b8 <autoware_vehicle_msgs__msg__GearReport__init+0x18>
 80118ae:	4628      	mov	r0, r5
 80118b0:	bd38      	pop	{r3, r4, r5, pc}
 80118b2:	4605      	mov	r5, r0
 80118b4:	4628      	mov	r0, r5
 80118b6:	bd38      	pop	{r3, r4, r5, pc}
 80118b8:	4620      	mov	r0, r4
 80118ba:	f000 f88f 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 80118be:	4628      	mov	r0, r5
 80118c0:	bd38      	pop	{r3, r4, r5, pc}
 80118c2:	bf00      	nop

080118c4 <autoware_vehicle_msgs__msg__GearReport__fini>:
 80118c4:	b108      	cbz	r0, 80118ca <autoware_vehicle_msgs__msg__GearReport__fini+0x6>
 80118c6:	f000 b889 	b.w	80119dc <builtin_interfaces__msg__Time__fini>
 80118ca:	4770      	bx	lr

080118cc <autoware_vehicle_msgs__msg__HazardLightsCommand__init>:
 80118cc:	b538      	push	{r3, r4, r5, lr}
 80118ce:	4604      	mov	r4, r0
 80118d0:	b128      	cbz	r0, 80118de <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x12>
 80118d2:	f000 f87f 	bl	80119d4 <builtin_interfaces__msg__Time__init>
 80118d6:	4605      	mov	r5, r0
 80118d8:	b120      	cbz	r0, 80118e4 <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x18>
 80118da:	4628      	mov	r0, r5
 80118dc:	bd38      	pop	{r3, r4, r5, pc}
 80118de:	4605      	mov	r5, r0
 80118e0:	4628      	mov	r0, r5
 80118e2:	bd38      	pop	{r3, r4, r5, pc}
 80118e4:	4620      	mov	r0, r4
 80118e6:	f000 f879 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 80118ea:	4628      	mov	r0, r5
 80118ec:	bd38      	pop	{r3, r4, r5, pc}
 80118ee:	bf00      	nop

080118f0 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>:
 80118f0:	b108      	cbz	r0, 80118f6 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini+0x6>
 80118f2:	f000 b873 	b.w	80119dc <builtin_interfaces__msg__Time__fini>
 80118f6:	4770      	bx	lr

080118f8 <autoware_vehicle_msgs__msg__HazardLightsReport__init>:
 80118f8:	b538      	push	{r3, r4, r5, lr}
 80118fa:	4604      	mov	r4, r0
 80118fc:	b128      	cbz	r0, 801190a <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x12>
 80118fe:	f000 f869 	bl	80119d4 <builtin_interfaces__msg__Time__init>
 8011902:	4605      	mov	r5, r0
 8011904:	b120      	cbz	r0, 8011910 <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x18>
 8011906:	4628      	mov	r0, r5
 8011908:	bd38      	pop	{r3, r4, r5, pc}
 801190a:	4605      	mov	r5, r0
 801190c:	4628      	mov	r0, r5
 801190e:	bd38      	pop	{r3, r4, r5, pc}
 8011910:	4620      	mov	r0, r4
 8011912:	f000 f863 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 8011916:	4628      	mov	r0, r5
 8011918:	bd38      	pop	{r3, r4, r5, pc}
 801191a:	bf00      	nop

0801191c <autoware_vehicle_msgs__msg__HazardLightsReport__fini>:
 801191c:	b108      	cbz	r0, 8011922 <autoware_vehicle_msgs__msg__HazardLightsReport__fini+0x6>
 801191e:	f000 b85d 	b.w	80119dc <builtin_interfaces__msg__Time__fini>
 8011922:	4770      	bx	lr

08011924 <autoware_vehicle_msgs__msg__SteeringReport__init>:
 8011924:	b538      	push	{r3, r4, r5, lr}
 8011926:	4604      	mov	r4, r0
 8011928:	b128      	cbz	r0, 8011936 <autoware_vehicle_msgs__msg__SteeringReport__init+0x12>
 801192a:	f000 f853 	bl	80119d4 <builtin_interfaces__msg__Time__init>
 801192e:	4605      	mov	r5, r0
 8011930:	b120      	cbz	r0, 801193c <autoware_vehicle_msgs__msg__SteeringReport__init+0x18>
 8011932:	4628      	mov	r0, r5
 8011934:	bd38      	pop	{r3, r4, r5, pc}
 8011936:	4605      	mov	r5, r0
 8011938:	4628      	mov	r0, r5
 801193a:	bd38      	pop	{r3, r4, r5, pc}
 801193c:	4620      	mov	r0, r4
 801193e:	f000 f84d 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 8011942:	4628      	mov	r0, r5
 8011944:	bd38      	pop	{r3, r4, r5, pc}
 8011946:	bf00      	nop

08011948 <autoware_vehicle_msgs__msg__SteeringReport__fini>:
 8011948:	b108      	cbz	r0, 801194e <autoware_vehicle_msgs__msg__SteeringReport__fini+0x6>
 801194a:	f000 b847 	b.w	80119dc <builtin_interfaces__msg__Time__fini>
 801194e:	4770      	bx	lr

08011950 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>:
 8011950:	b538      	push	{r3, r4, r5, lr}
 8011952:	4604      	mov	r4, r0
 8011954:	b128      	cbz	r0, 8011962 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x12>
 8011956:	f000 f83d 	bl	80119d4 <builtin_interfaces__msg__Time__init>
 801195a:	4605      	mov	r5, r0
 801195c:	b120      	cbz	r0, 8011968 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x18>
 801195e:	4628      	mov	r0, r5
 8011960:	bd38      	pop	{r3, r4, r5, pc}
 8011962:	4605      	mov	r5, r0
 8011964:	4628      	mov	r0, r5
 8011966:	bd38      	pop	{r3, r4, r5, pc}
 8011968:	4620      	mov	r0, r4
 801196a:	f000 f837 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 801196e:	4628      	mov	r0, r5
 8011970:	bd38      	pop	{r3, r4, r5, pc}
 8011972:	bf00      	nop

08011974 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>:
 8011974:	b108      	cbz	r0, 801197a <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini+0x6>
 8011976:	f000 b831 	b.w	80119dc <builtin_interfaces__msg__Time__fini>
 801197a:	4770      	bx	lr

0801197c <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>:
 801197c:	b538      	push	{r3, r4, r5, lr}
 801197e:	4604      	mov	r4, r0
 8011980:	b128      	cbz	r0, 801198e <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x12>
 8011982:	f000 f827 	bl	80119d4 <builtin_interfaces__msg__Time__init>
 8011986:	4605      	mov	r5, r0
 8011988:	b120      	cbz	r0, 8011994 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x18>
 801198a:	4628      	mov	r0, r5
 801198c:	bd38      	pop	{r3, r4, r5, pc}
 801198e:	4605      	mov	r5, r0
 8011990:	4628      	mov	r0, r5
 8011992:	bd38      	pop	{r3, r4, r5, pc}
 8011994:	4620      	mov	r0, r4
 8011996:	f000 f821 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 801199a:	4628      	mov	r0, r5
 801199c:	bd38      	pop	{r3, r4, r5, pc}
 801199e:	bf00      	nop

080119a0 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>:
 80119a0:	b108      	cbz	r0, 80119a6 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini+0x6>
 80119a2:	f000 b81b 	b.w	80119dc <builtin_interfaces__msg__Time__fini>
 80119a6:	4770      	bx	lr

080119a8 <autoware_vehicle_msgs__msg__VelocityReport__init>:
 80119a8:	b538      	push	{r3, r4, r5, lr}
 80119aa:	4604      	mov	r4, r0
 80119ac:	b128      	cbz	r0, 80119ba <autoware_vehicle_msgs__msg__VelocityReport__init+0x12>
 80119ae:	f005 fc15 	bl	80171dc <std_msgs__msg__Header__init>
 80119b2:	4605      	mov	r5, r0
 80119b4:	b120      	cbz	r0, 80119c0 <autoware_vehicle_msgs__msg__VelocityReport__init+0x18>
 80119b6:	4628      	mov	r0, r5
 80119b8:	bd38      	pop	{r3, r4, r5, pc}
 80119ba:	4605      	mov	r5, r0
 80119bc:	4628      	mov	r0, r5
 80119be:	bd38      	pop	{r3, r4, r5, pc}
 80119c0:	4620      	mov	r0, r4
 80119c2:	f005 fc2f 	bl	8017224 <std_msgs__msg__Header__fini>
 80119c6:	4628      	mov	r0, r5
 80119c8:	bd38      	pop	{r3, r4, r5, pc}
 80119ca:	bf00      	nop

080119cc <autoware_vehicle_msgs__msg__VelocityReport__fini>:
 80119cc:	b108      	cbz	r0, 80119d2 <autoware_vehicle_msgs__msg__VelocityReport__fini+0x6>
 80119ce:	f005 bc29 	b.w	8017224 <std_msgs__msg__Header__fini>
 80119d2:	4770      	bx	lr

080119d4 <builtin_interfaces__msg__Time__init>:
 80119d4:	3800      	subs	r0, #0
 80119d6:	bf18      	it	ne
 80119d8:	2001      	movne	r0, #1
 80119da:	4770      	bx	lr

080119dc <builtin_interfaces__msg__Time__fini>:
 80119dc:	4770      	bx	lr
 80119de:	bf00      	nop

080119e0 <ucdr_serialize_sequence_char>:
 80119e0:	b570      	push	{r4, r5, r6, lr}
 80119e2:	4615      	mov	r5, r2
 80119e4:	460e      	mov	r6, r1
 80119e6:	7d01      	ldrb	r1, [r0, #20]
 80119e8:	4604      	mov	r4, r0
 80119ea:	f7fd f9ff 	bl	800edec <ucdr_serialize_endian_uint32_t>
 80119ee:	b90d      	cbnz	r5, 80119f4 <ucdr_serialize_sequence_char+0x14>
 80119f0:	2001      	movs	r0, #1
 80119f2:	bd70      	pop	{r4, r5, r6, pc}
 80119f4:	462b      	mov	r3, r5
 80119f6:	4632      	mov	r2, r6
 80119f8:	7d21      	ldrb	r1, [r4, #20]
 80119fa:	4620      	mov	r0, r4
 80119fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a00:	f005 bde4 	b.w	80175cc <ucdr_serialize_endian_array_char>

08011a04 <ucdr_deserialize_sequence_char>:
 8011a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a08:	461d      	mov	r5, r3
 8011a0a:	4616      	mov	r6, r2
 8011a0c:	460f      	mov	r7, r1
 8011a0e:	461a      	mov	r2, r3
 8011a10:	7d01      	ldrb	r1, [r0, #20]
 8011a12:	4604      	mov	r4, r0
 8011a14:	f7fd fb12 	bl	800f03c <ucdr_deserialize_endian_uint32_t>
 8011a18:	682b      	ldr	r3, [r5, #0]
 8011a1a:	429e      	cmp	r6, r3
 8011a1c:	d201      	bcs.n	8011a22 <ucdr_deserialize_sequence_char+0x1e>
 8011a1e:	2201      	movs	r2, #1
 8011a20:	75a2      	strb	r2, [r4, #22]
 8011a22:	b913      	cbnz	r3, 8011a2a <ucdr_deserialize_sequence_char+0x26>
 8011a24:	2001      	movs	r0, #1
 8011a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a2a:	463a      	mov	r2, r7
 8011a2c:	7d21      	ldrb	r1, [r4, #20]
 8011a2e:	4620      	mov	r0, r4
 8011a30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a34:	f005 bdfc 	b.w	8017630 <ucdr_deserialize_endian_array_char>

08011a38 <ucdr_serialize_sequence_uint8_t>:
 8011a38:	b570      	push	{r4, r5, r6, lr}
 8011a3a:	4615      	mov	r5, r2
 8011a3c:	460e      	mov	r6, r1
 8011a3e:	7d01      	ldrb	r1, [r0, #20]
 8011a40:	4604      	mov	r4, r0
 8011a42:	f7fd f9d3 	bl	800edec <ucdr_serialize_endian_uint32_t>
 8011a46:	b90d      	cbnz	r5, 8011a4c <ucdr_serialize_sequence_uint8_t+0x14>
 8011a48:	2001      	movs	r0, #1
 8011a4a:	bd70      	pop	{r4, r5, r6, pc}
 8011a4c:	462b      	mov	r3, r5
 8011a4e:	4632      	mov	r2, r6
 8011a50:	7d21      	ldrb	r1, [r4, #20]
 8011a52:	4620      	mov	r0, r4
 8011a54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a58:	f005 be50 	b.w	80176fc <ucdr_serialize_endian_array_uint8_t>

08011a5c <ucdr_deserialize_sequence_uint8_t>:
 8011a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a60:	461d      	mov	r5, r3
 8011a62:	4616      	mov	r6, r2
 8011a64:	460f      	mov	r7, r1
 8011a66:	461a      	mov	r2, r3
 8011a68:	7d01      	ldrb	r1, [r0, #20]
 8011a6a:	4604      	mov	r4, r0
 8011a6c:	f7fd fae6 	bl	800f03c <ucdr_deserialize_endian_uint32_t>
 8011a70:	682b      	ldr	r3, [r5, #0]
 8011a72:	429e      	cmp	r6, r3
 8011a74:	d201      	bcs.n	8011a7a <ucdr_deserialize_sequence_uint8_t+0x1e>
 8011a76:	2201      	movs	r2, #1
 8011a78:	75a2      	strb	r2, [r4, #22]
 8011a7a:	b913      	cbnz	r3, 8011a82 <ucdr_deserialize_sequence_uint8_t+0x26>
 8011a7c:	2001      	movs	r0, #1
 8011a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a82:	463a      	mov	r2, r7
 8011a84:	7d21      	ldrb	r1, [r4, #20]
 8011a86:	4620      	mov	r0, r4
 8011a88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a8c:	f005 be9c 	b.w	80177c8 <ucdr_deserialize_endian_array_uint8_t>

08011a90 <rcl_client_get_rmw_handle>:
 8011a90:	b118      	cbz	r0, 8011a9a <rcl_client_get_rmw_handle+0xa>
 8011a92:	6800      	ldr	r0, [r0, #0]
 8011a94:	b108      	cbz	r0, 8011a9a <rcl_client_get_rmw_handle+0xa>
 8011a96:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011a9a:	4770      	bx	lr

08011a9c <rcl_send_request>:
 8011a9c:	b570      	push	{r4, r5, r6, lr}
 8011a9e:	b082      	sub	sp, #8
 8011aa0:	b1f8      	cbz	r0, 8011ae2 <rcl_send_request+0x46>
 8011aa2:	4604      	mov	r4, r0
 8011aa4:	6800      	ldr	r0, [r0, #0]
 8011aa6:	b1e0      	cbz	r0, 8011ae2 <rcl_send_request+0x46>
 8011aa8:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8011aac:	b1cb      	cbz	r3, 8011ae2 <rcl_send_request+0x46>
 8011aae:	460e      	mov	r6, r1
 8011ab0:	b1e1      	cbz	r1, 8011aec <rcl_send_request+0x50>
 8011ab2:	4615      	mov	r5, r2
 8011ab4:	b1d2      	cbz	r2, 8011aec <rcl_send_request+0x50>
 8011ab6:	2105      	movs	r1, #5
 8011ab8:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8011abc:	f002 ff74 	bl	80149a8 <__atomic_load_8>
 8011ac0:	4602      	mov	r2, r0
 8011ac2:	460b      	mov	r3, r1
 8011ac4:	4631      	mov	r1, r6
 8011ac6:	e9c5 2300 	strd	r2, r3, [r5]
 8011aca:	6823      	ldr	r3, [r4, #0]
 8011acc:	462a      	mov	r2, r5
 8011ace:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011ad2:	f004 f991 	bl	8015df8 <rmw_send_request>
 8011ad6:	4606      	mov	r6, r0
 8011ad8:	b160      	cbz	r0, 8011af4 <rcl_send_request+0x58>
 8011ada:	2601      	movs	r6, #1
 8011adc:	4630      	mov	r0, r6
 8011ade:	b002      	add	sp, #8
 8011ae0:	bd70      	pop	{r4, r5, r6, pc}
 8011ae2:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8011ae6:	4630      	mov	r0, r6
 8011ae8:	b002      	add	sp, #8
 8011aea:	bd70      	pop	{r4, r5, r6, pc}
 8011aec:	260b      	movs	r6, #11
 8011aee:	4630      	mov	r0, r6
 8011af0:	b002      	add	sp, #8
 8011af2:	bd70      	pop	{r4, r5, r6, pc}
 8011af4:	6820      	ldr	r0, [r4, #0]
 8011af6:	2105      	movs	r1, #5
 8011af8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011afc:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8011b00:	9100      	str	r1, [sp, #0]
 8011b02:	f002 ffbd 	bl	8014a80 <__atomic_exchange_8>
 8011b06:	4630      	mov	r0, r6
 8011b08:	b002      	add	sp, #8
 8011b0a:	bd70      	pop	{r4, r5, r6, pc}
 8011b0c:	0000      	movs	r0, r0
	...

08011b10 <rcl_take_response>:
 8011b10:	b570      	push	{r4, r5, r6, lr}
 8011b12:	468e      	mov	lr, r1
 8011b14:	b08c      	sub	sp, #48	@ 0x30
 8011b16:	460c      	mov	r4, r1
 8011b18:	4616      	mov	r6, r2
 8011b1a:	f10d 0c18 	add.w	ip, sp, #24
 8011b1e:	4605      	mov	r5, r0
 8011b20:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011b24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011b28:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011b2c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011b30:	b35d      	cbz	r5, 8011b8a <rcl_take_response+0x7a>
 8011b32:	682b      	ldr	r3, [r5, #0]
 8011b34:	b34b      	cbz	r3, 8011b8a <rcl_take_response+0x7a>
 8011b36:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011b3a:	b330      	cbz	r0, 8011b8a <rcl_take_response+0x7a>
 8011b3c:	b346      	cbz	r6, 8011b90 <rcl_take_response+0x80>
 8011b3e:	2300      	movs	r3, #0
 8011b40:	4632      	mov	r2, r6
 8011b42:	a902      	add	r1, sp, #8
 8011b44:	f88d 3007 	strb.w	r3, [sp, #7]
 8011b48:	f10d 0307 	add.w	r3, sp, #7
 8011b4c:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8011b98 <rcl_take_response+0x88>
 8011b50:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011b54:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011b58:	f004 fa56 	bl	8016008 <rmw_take_response>
 8011b5c:	4605      	mov	r5, r0
 8011b5e:	b9c8      	cbnz	r0, 8011b94 <rcl_take_response+0x84>
 8011b60:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011b64:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8011b68:	2a00      	cmp	r2, #0
 8011b6a:	bf08      	it	eq
 8011b6c:	461d      	moveq	r5, r3
 8011b6e:	f10d 0e18 	add.w	lr, sp, #24
 8011b72:	46a4      	mov	ip, r4
 8011b74:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011b78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011b7c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011b80:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011b84:	4628      	mov	r0, r5
 8011b86:	b00c      	add	sp, #48	@ 0x30
 8011b88:	bd70      	pop	{r4, r5, r6, pc}
 8011b8a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8011b8e:	e7ee      	b.n	8011b6e <rcl_take_response+0x5e>
 8011b90:	250b      	movs	r5, #11
 8011b92:	e7ec      	b.n	8011b6e <rcl_take_response+0x5e>
 8011b94:	2501      	movs	r5, #1
 8011b96:	e7ea      	b.n	8011b6e <rcl_take_response+0x5e>
	...

08011ba0 <rcl_client_is_valid>:
 8011ba0:	b130      	cbz	r0, 8011bb0 <rcl_client_is_valid+0x10>
 8011ba2:	6800      	ldr	r0, [r0, #0]
 8011ba4:	b120      	cbz	r0, 8011bb0 <rcl_client_is_valid+0x10>
 8011ba6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011baa:	3800      	subs	r0, #0
 8011bac:	bf18      	it	ne
 8011bae:	2001      	movne	r0, #1
 8011bb0:	4770      	bx	lr
 8011bb2:	bf00      	nop

08011bb4 <rcl_get_zero_initialized_context>:
 8011bb4:	4a03      	ldr	r2, [pc, #12]	@ (8011bc4 <rcl_get_zero_initialized_context+0x10>)
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011bbc:	e883 0003 	stmia.w	r3, {r0, r1}
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	4770      	bx	lr
 8011bc4:	0801fbe0 	.word	0x0801fbe0

08011bc8 <rcl_context_is_valid>:
 8011bc8:	b118      	cbz	r0, 8011bd2 <rcl_context_is_valid+0xa>
 8011bca:	6840      	ldr	r0, [r0, #4]
 8011bcc:	3800      	subs	r0, #0
 8011bce:	bf18      	it	ne
 8011bd0:	2001      	movne	r0, #1
 8011bd2:	4770      	bx	lr

08011bd4 <__cleanup_context>:
 8011bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bd8:	4606      	mov	r6, r0
 8011bda:	2300      	movs	r3, #0
 8011bdc:	6800      	ldr	r0, [r0, #0]
 8011bde:	6073      	str	r3, [r6, #4]
 8011be0:	2800      	cmp	r0, #0
 8011be2:	d049      	beq.n	8011c78 <__cleanup_context+0xa4>
 8011be4:	6947      	ldr	r7, [r0, #20]
 8011be6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8011bea:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8011bee:	b137      	cbz	r7, 8011bfe <__cleanup_context+0x2a>
 8011bf0:	3014      	adds	r0, #20
 8011bf2:	f000 f9bd 	bl	8011f70 <rcl_init_options_fini>
 8011bf6:	4607      	mov	r7, r0
 8011bf8:	2800      	cmp	r0, #0
 8011bfa:	d144      	bne.n	8011c86 <__cleanup_context+0xb2>
 8011bfc:	6830      	ldr	r0, [r6, #0]
 8011bfe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011c00:	b143      	cbz	r3, 8011c14 <__cleanup_context+0x40>
 8011c02:	3028      	adds	r0, #40	@ 0x28
 8011c04:	f003 fe64 	bl	80158d0 <rmw_context_fini>
 8011c08:	b118      	cbz	r0, 8011c12 <__cleanup_context+0x3e>
 8011c0a:	2f00      	cmp	r7, #0
 8011c0c:	d03e      	beq.n	8011c8c <__cleanup_context+0xb8>
 8011c0e:	f7ff f933 	bl	8010e78 <rcutils_reset_error>
 8011c12:	6830      	ldr	r0, [r6, #0]
 8011c14:	6a03      	ldr	r3, [r0, #32]
 8011c16:	b1db      	cbz	r3, 8011c50 <__cleanup_context+0x7c>
 8011c18:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8011c1c:	2a01      	cmp	r2, #1
 8011c1e:	f17c 0100 	sbcs.w	r1, ip, #0
 8011c22:	db11      	blt.n	8011c48 <__cleanup_context+0x74>
 8011c24:	2400      	movs	r4, #0
 8011c26:	4625      	mov	r5, r4
 8011c28:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011c2c:	4649      	mov	r1, r9
 8011c2e:	b1b8      	cbz	r0, 8011c60 <__cleanup_context+0x8c>
 8011c30:	47c0      	blx	r8
 8011c32:	6833      	ldr	r3, [r6, #0]
 8011c34:	3401      	adds	r4, #1
 8011c36:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8011c3a:	f145 0500 	adc.w	r5, r5, #0
 8011c3e:	6a1b      	ldr	r3, [r3, #32]
 8011c40:	4294      	cmp	r4, r2
 8011c42:	eb75 010c 	sbcs.w	r1, r5, ip
 8011c46:	dbef      	blt.n	8011c28 <__cleanup_context+0x54>
 8011c48:	4618      	mov	r0, r3
 8011c4a:	4649      	mov	r1, r9
 8011c4c:	47c0      	blx	r8
 8011c4e:	6830      	ldr	r0, [r6, #0]
 8011c50:	4649      	mov	r1, r9
 8011c52:	47c0      	blx	r8
 8011c54:	2300      	movs	r3, #0
 8011c56:	4638      	mov	r0, r7
 8011c58:	e9c6 3300 	strd	r3, r3, [r6]
 8011c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c60:	3401      	adds	r4, #1
 8011c62:	f145 0500 	adc.w	r5, r5, #0
 8011c66:	4294      	cmp	r4, r2
 8011c68:	eb75 010c 	sbcs.w	r1, r5, ip
 8011c6c:	dbdc      	blt.n	8011c28 <__cleanup_context+0x54>
 8011c6e:	4618      	mov	r0, r3
 8011c70:	4649      	mov	r1, r9
 8011c72:	47c0      	blx	r8
 8011c74:	6830      	ldr	r0, [r6, #0]
 8011c76:	e7eb      	b.n	8011c50 <__cleanup_context+0x7c>
 8011c78:	4607      	mov	r7, r0
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	4638      	mov	r0, r7
 8011c7e:	e9c6 3300 	strd	r3, r3, [r6]
 8011c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c86:	f7ff f8f7 	bl	8010e78 <rcutils_reset_error>
 8011c8a:	e7b7      	b.n	8011bfc <__cleanup_context+0x28>
 8011c8c:	f009 f9e6 	bl	801b05c <rcl_convert_rmw_ret_to_rcl_ret>
 8011c90:	4607      	mov	r7, r0
 8011c92:	e7bc      	b.n	8011c0e <__cleanup_context+0x3a>

08011c94 <rcl_init>:
 8011c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c98:	1e05      	subs	r5, r0, #0
 8011c9a:	b09e      	sub	sp, #120	@ 0x78
 8011c9c:	460e      	mov	r6, r1
 8011c9e:	4690      	mov	r8, r2
 8011ca0:	461f      	mov	r7, r3
 8011ca2:	f340 809f 	ble.w	8011de4 <rcl_init+0x150>
 8011ca6:	2900      	cmp	r1, #0
 8011ca8:	f000 809f 	beq.w	8011dea <rcl_init+0x156>
 8011cac:	f1a1 0e04 	sub.w	lr, r1, #4
 8011cb0:	f04f 0c00 	mov.w	ip, #0
 8011cb4:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8011cb8:	f10c 0c01 	add.w	ip, ip, #1
 8011cbc:	2c00      	cmp	r4, #0
 8011cbe:	f000 8094 	beq.w	8011dea <rcl_init+0x156>
 8011cc2:	4565      	cmp	r5, ip
 8011cc4:	d1f6      	bne.n	8011cb4 <rcl_init+0x20>
 8011cc6:	f1b8 0f00 	cmp.w	r8, #0
 8011cca:	f000 808e 	beq.w	8011dea <rcl_init+0x156>
 8011cce:	f8d8 4000 	ldr.w	r4, [r8]
 8011cd2:	2c00      	cmp	r4, #0
 8011cd4:	f000 8089 	beq.w	8011dea <rcl_init+0x156>
 8011cd8:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8011cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011cde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011ce2:	6823      	ldr	r3, [r4, #0]
 8011ce4:	a819      	add	r0, sp, #100	@ 0x64
 8011ce6:	f8cc 3000 	str.w	r3, [ip]
 8011cea:	f7ff f8a1 	bl	8010e30 <rcutils_allocator_is_valid>
 8011cee:	f080 0001 	eor.w	r0, r0, #1
 8011cf2:	b2c0      	uxtb	r0, r0
 8011cf4:	2800      	cmp	r0, #0
 8011cf6:	d178      	bne.n	8011dea <rcl_init+0x156>
 8011cf8:	2f00      	cmp	r7, #0
 8011cfa:	d076      	beq.n	8011dea <rcl_init+0x156>
 8011cfc:	683b      	ldr	r3, [r7, #0]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d178      	bne.n	8011df4 <rcl_init+0x160>
 8011d02:	2178      	movs	r1, #120	@ 0x78
 8011d04:	2001      	movs	r0, #1
 8011d06:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8011d0a:	4798      	blx	r3
 8011d0c:	4604      	mov	r4, r0
 8011d0e:	6038      	str	r0, [r7, #0]
 8011d10:	2800      	cmp	r0, #0
 8011d12:	f000 80b6 	beq.w	8011e82 <rcl_init+0x1ee>
 8011d16:	a802      	add	r0, sp, #8
 8011d18:	f003 f9ba 	bl	8015090 <rmw_get_zero_initialized_context>
 8011d1c:	a902      	add	r1, sp, #8
 8011d1e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8011d22:	2250      	movs	r2, #80	@ 0x50
 8011d24:	f00b fae5 	bl	801d2f2 <memcpy>
 8011d28:	ac19      	add	r4, sp, #100	@ 0x64
 8011d2a:	f8d7 e000 	ldr.w	lr, [r7]
 8011d2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011d30:	46f4      	mov	ip, lr
 8011d32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011d36:	6823      	ldr	r3, [r4, #0]
 8011d38:	f10e 0114 	add.w	r1, lr, #20
 8011d3c:	4640      	mov	r0, r8
 8011d3e:	f8cc 3000 	str.w	r3, [ip]
 8011d42:	f000 f93f 	bl	8011fc4 <rcl_init_options_copy>
 8011d46:	4604      	mov	r4, r0
 8011d48:	2800      	cmp	r0, #0
 8011d4a:	d144      	bne.n	8011dd6 <rcl_init+0x142>
 8011d4c:	f8d7 9000 	ldr.w	r9, [r7]
 8011d50:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8011d54:	f8c9 0020 	str.w	r0, [r9, #32]
 8011d58:	f8c9 5018 	str.w	r5, [r9, #24]
 8011d5c:	f8c9 801c 	str.w	r8, [r9, #28]
 8011d60:	2d00      	cmp	r5, #0
 8011d62:	d04e      	beq.n	8011e02 <rcl_init+0x16e>
 8011d64:	2e00      	cmp	r6, #0
 8011d66:	d04c      	beq.n	8011e02 <rcl_init+0x16e>
 8011d68:	2104      	movs	r1, #4
 8011d6a:	4628      	mov	r0, r5
 8011d6c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8011d70:	4798      	blx	r3
 8011d72:	f8c9 0020 	str.w	r0, [r9, #32]
 8011d76:	f8d7 9000 	ldr.w	r9, [r7]
 8011d7a:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8011d7e:	46ca      	mov	sl, r9
 8011d80:	b343      	cbz	r3, 8011dd4 <rcl_init+0x140>
 8011d82:	2d01      	cmp	r5, #1
 8011d84:	f178 0300 	sbcs.w	r3, r8, #0
 8011d88:	db3b      	blt.n	8011e02 <rcl_init+0x16e>
 8011d8a:	2400      	movs	r4, #0
 8011d8c:	3e04      	subs	r6, #4
 8011d8e:	46a1      	mov	r9, r4
 8011d90:	e00b      	b.n	8011daa <rcl_init+0x116>
 8011d92:	6831      	ldr	r1, [r6, #0]
 8011d94:	f00b faad 	bl	801d2f2 <memcpy>
 8011d98:	3401      	adds	r4, #1
 8011d9a:	f149 0900 	adc.w	r9, r9, #0
 8011d9e:	45c8      	cmp	r8, r9
 8011da0:	bf08      	it	eq
 8011da2:	42a5      	cmpeq	r5, r4
 8011da4:	d02b      	beq.n	8011dfe <rcl_init+0x16a>
 8011da6:	f8d7 a000 	ldr.w	sl, [r7]
 8011daa:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8011dae:	f7ee faa1 	bl	80002f4 <strlen>
 8011db2:	1c42      	adds	r2, r0, #1
 8011db4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011db6:	4610      	mov	r0, r2
 8011db8:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8011dba:	f8da a020 	ldr.w	sl, [sl, #32]
 8011dbe:	9201      	str	r2, [sp, #4]
 8011dc0:	4798      	blx	r3
 8011dc2:	683b      	ldr	r3, [r7, #0]
 8011dc4:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8011dc8:	6a1b      	ldr	r3, [r3, #32]
 8011dca:	9a01      	ldr	r2, [sp, #4]
 8011dcc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011dd0:	2800      	cmp	r0, #0
 8011dd2:	d1de      	bne.n	8011d92 <rcl_init+0xfe>
 8011dd4:	240a      	movs	r4, #10
 8011dd6:	4638      	mov	r0, r7
 8011dd8:	f7ff fefc 	bl	8011bd4 <__cleanup_context>
 8011ddc:	4620      	mov	r0, r4
 8011dde:	b01e      	add	sp, #120	@ 0x78
 8011de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011de4:	2900      	cmp	r1, #0
 8011de6:	f43f af6e 	beq.w	8011cc6 <rcl_init+0x32>
 8011dea:	240b      	movs	r4, #11
 8011dec:	4620      	mov	r0, r4
 8011dee:	b01e      	add	sp, #120	@ 0x78
 8011df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011df4:	2464      	movs	r4, #100	@ 0x64
 8011df6:	4620      	mov	r0, r4
 8011df8:	b01e      	add	sp, #120	@ 0x78
 8011dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011dfe:	f8d7 9000 	ldr.w	r9, [r7]
 8011e02:	4926      	ldr	r1, [pc, #152]	@ (8011e9c <rcl_init+0x208>)
 8011e04:	680b      	ldr	r3, [r1, #0]
 8011e06:	3301      	adds	r3, #1
 8011e08:	d036      	beq.n	8011e78 <rcl_init+0x1e4>
 8011e0a:	461a      	mov	r2, r3
 8011e0c:	2400      	movs	r4, #0
 8011e0e:	600b      	str	r3, [r1, #0]
 8011e10:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8011e14:	607b      	str	r3, [r7, #4]
 8011e16:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011e18:	3301      	adds	r3, #1
 8011e1a:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8011e1e:	d034      	beq.n	8011e8a <rcl_init+0x1f6>
 8011e20:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8011e24:	b93b      	cbnz	r3, 8011e36 <rcl_init+0x1a2>
 8011e26:	3030      	adds	r0, #48	@ 0x30
 8011e28:	f000 f93a 	bl	80120a0 <rcl_get_localhost_only>
 8011e2c:	4604      	mov	r4, r0
 8011e2e:	2800      	cmp	r0, #0
 8011e30:	d1d1      	bne.n	8011dd6 <rcl_init+0x142>
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	6958      	ldr	r0, [r3, #20]
 8011e36:	aa18      	add	r2, sp, #96	@ 0x60
 8011e38:	a917      	add	r1, sp, #92	@ 0x5c
 8011e3a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8011e3c:	f001 fa3e 	bl	80132bc <rcl_validate_enclave_name>
 8011e40:	4604      	mov	r4, r0
 8011e42:	2800      	cmp	r0, #0
 8011e44:	d1c7      	bne.n	8011dd6 <rcl_init+0x142>
 8011e46:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011e48:	b9eb      	cbnz	r3, 8011e86 <rcl_init+0x1f2>
 8011e4a:	6839      	ldr	r1, [r7, #0]
 8011e4c:	694b      	ldr	r3, [r1, #20]
 8011e4e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8011e52:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8011e54:	f000 fd62 	bl	801291c <rcl_get_security_options_from_environment>
 8011e58:	4604      	mov	r4, r0
 8011e5a:	2800      	cmp	r0, #0
 8011e5c:	d1bb      	bne.n	8011dd6 <rcl_init+0x142>
 8011e5e:	6839      	ldr	r1, [r7, #0]
 8011e60:	6948      	ldr	r0, [r1, #20]
 8011e62:	3128      	adds	r1, #40	@ 0x28
 8011e64:	3018      	adds	r0, #24
 8011e66:	f003 fbfd 	bl	8015664 <rmw_init>
 8011e6a:	4604      	mov	r4, r0
 8011e6c:	2800      	cmp	r0, #0
 8011e6e:	d0bd      	beq.n	8011dec <rcl_init+0x158>
 8011e70:	f009 f8f4 	bl	801b05c <rcl_convert_rmw_ret_to_rcl_ret>
 8011e74:	4604      	mov	r4, r0
 8011e76:	e7ae      	b.n	8011dd6 <rcl_init+0x142>
 8011e78:	2201      	movs	r2, #1
 8011e7a:	461c      	mov	r4, r3
 8011e7c:	600a      	str	r2, [r1, #0]
 8011e7e:	4613      	mov	r3, r2
 8011e80:	e7c6      	b.n	8011e10 <rcl_init+0x17c>
 8011e82:	240a      	movs	r4, #10
 8011e84:	e7b2      	b.n	8011dec <rcl_init+0x158>
 8011e86:	2401      	movs	r4, #1
 8011e88:	e7a5      	b.n	8011dd6 <rcl_init+0x142>
 8011e8a:	3024      	adds	r0, #36	@ 0x24
 8011e8c:	f009 f8fa 	bl	801b084 <rcl_get_default_domain_id>
 8011e90:	4604      	mov	r4, r0
 8011e92:	2800      	cmp	r0, #0
 8011e94:	d19f      	bne.n	8011dd6 <rcl_init+0x142>
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	6958      	ldr	r0, [r3, #20]
 8011e9a:	e7c1      	b.n	8011e20 <rcl_init+0x18c>
 8011e9c:	240646b8 	.word	0x240646b8

08011ea0 <rcl_get_zero_initialized_init_options>:
 8011ea0:	2000      	movs	r0, #0
 8011ea2:	4770      	bx	lr

08011ea4 <rcl_init_options_init>:
 8011ea4:	b084      	sub	sp, #16
 8011ea6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ea8:	b097      	sub	sp, #92	@ 0x5c
 8011eaa:	ae1d      	add	r6, sp, #116	@ 0x74
 8011eac:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8011eb0:	2800      	cmp	r0, #0
 8011eb2:	d058      	beq.n	8011f66 <rcl_init_options_init+0xc2>
 8011eb4:	6803      	ldr	r3, [r0, #0]
 8011eb6:	4605      	mov	r5, r0
 8011eb8:	b133      	cbz	r3, 8011ec8 <rcl_init_options_init+0x24>
 8011eba:	2464      	movs	r4, #100	@ 0x64
 8011ebc:	4620      	mov	r0, r4
 8011ebe:	b017      	add	sp, #92	@ 0x5c
 8011ec0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011ec4:	b004      	add	sp, #16
 8011ec6:	4770      	bx	lr
 8011ec8:	4630      	mov	r0, r6
 8011eca:	f7fe ffb1 	bl	8010e30 <rcutils_allocator_is_valid>
 8011ece:	2800      	cmp	r0, #0
 8011ed0:	d049      	beq.n	8011f66 <rcl_init_options_init+0xc2>
 8011ed2:	46b4      	mov	ip, r6
 8011ed4:	ac11      	add	r4, sp, #68	@ 0x44
 8011ed6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011edc:	f8dc 3000 	ldr.w	r3, [ip]
 8011ee0:	2050      	movs	r0, #80	@ 0x50
 8011ee2:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8011ee4:	6023      	str	r3, [r4, #0]
 8011ee6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011ee8:	4798      	blx	r3
 8011eea:	4604      	mov	r4, r0
 8011eec:	6028      	str	r0, [r5, #0]
 8011eee:	2800      	cmp	r0, #0
 8011ef0:	d03b      	beq.n	8011f6a <rcl_init_options_init+0xc6>
 8011ef2:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8011ef6:	4686      	mov	lr, r0
 8011ef8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011efc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011f00:	f8dc 3000 	ldr.w	r3, [ip]
 8011f04:	a802      	add	r0, sp, #8
 8011f06:	f8ce 3000 	str.w	r3, [lr]
 8011f0a:	f003 f8d5 	bl	80150b8 <rmw_get_zero_initialized_init_options>
 8011f0e:	f10d 0e08 	add.w	lr, sp, #8
 8011f12:	f104 0c18 	add.w	ip, r4, #24
 8011f16:	682f      	ldr	r7, [r5, #0]
 8011f18:	ac20      	add	r4, sp, #128	@ 0x80
 8011f1a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011f1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011f22:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011f26:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011f2a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011f2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011f32:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011f36:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011f3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8011f3e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011f42:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8011f46:	f107 0018 	add.w	r0, r7, #24
 8011f4a:	f003 fa8d 	bl	8015468 <rmw_init_options_init>
 8011f4e:	4604      	mov	r4, r0
 8011f50:	2800      	cmp	r0, #0
 8011f52:	d0b3      	beq.n	8011ebc <rcl_init_options_init+0x18>
 8011f54:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8011f56:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8011f58:	6828      	ldr	r0, [r5, #0]
 8011f5a:	4798      	blx	r3
 8011f5c:	4620      	mov	r0, r4
 8011f5e:	f009 f87d 	bl	801b05c <rcl_convert_rmw_ret_to_rcl_ret>
 8011f62:	4604      	mov	r4, r0
 8011f64:	e7aa      	b.n	8011ebc <rcl_init_options_init+0x18>
 8011f66:	240b      	movs	r4, #11
 8011f68:	e7a8      	b.n	8011ebc <rcl_init_options_init+0x18>
 8011f6a:	240a      	movs	r4, #10
 8011f6c:	e7a6      	b.n	8011ebc <rcl_init_options_init+0x18>
 8011f6e:	bf00      	nop

08011f70 <rcl_init_options_fini>:
 8011f70:	b530      	push	{r4, r5, lr}
 8011f72:	b087      	sub	sp, #28
 8011f74:	b1f0      	cbz	r0, 8011fb4 <rcl_init_options_fini+0x44>
 8011f76:	6803      	ldr	r3, [r0, #0]
 8011f78:	4604      	mov	r4, r0
 8011f7a:	b1db      	cbz	r3, 8011fb4 <rcl_init_options_fini+0x44>
 8011f7c:	469c      	mov	ip, r3
 8011f7e:	f10d 0e04 	add.w	lr, sp, #4
 8011f82:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011f86:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011f8a:	f8dc 3000 	ldr.w	r3, [ip]
 8011f8e:	a801      	add	r0, sp, #4
 8011f90:	f8ce 3000 	str.w	r3, [lr]
 8011f94:	f7fe ff4c 	bl	8010e30 <rcutils_allocator_is_valid>
 8011f98:	b160      	cbz	r0, 8011fb4 <rcl_init_options_fini+0x44>
 8011f9a:	6820      	ldr	r0, [r4, #0]
 8011f9c:	3018      	adds	r0, #24
 8011f9e:	f003 fb1d 	bl	80155dc <rmw_init_options_fini>
 8011fa2:	4605      	mov	r5, r0
 8011fa4:	b950      	cbnz	r0, 8011fbc <rcl_init_options_fini+0x4c>
 8011fa6:	6820      	ldr	r0, [r4, #0]
 8011fa8:	9b02      	ldr	r3, [sp, #8]
 8011faa:	9905      	ldr	r1, [sp, #20]
 8011fac:	4798      	blx	r3
 8011fae:	4628      	mov	r0, r5
 8011fb0:	b007      	add	sp, #28
 8011fb2:	bd30      	pop	{r4, r5, pc}
 8011fb4:	250b      	movs	r5, #11
 8011fb6:	4628      	mov	r0, r5
 8011fb8:	b007      	add	sp, #28
 8011fba:	bd30      	pop	{r4, r5, pc}
 8011fbc:	f009 f84e 	bl	801b05c <rcl_convert_rmw_ret_to_rcl_ret>
 8011fc0:	4605      	mov	r5, r0
 8011fc2:	e7f8      	b.n	8011fb6 <rcl_init_options_fini+0x46>

08011fc4 <rcl_init_options_copy>:
 8011fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fc8:	b094      	sub	sp, #80	@ 0x50
 8011fca:	2800      	cmp	r0, #0
 8011fcc:	d05b      	beq.n	8012086 <rcl_init_options_copy+0xc2>
 8011fce:	4604      	mov	r4, r0
 8011fd0:	6800      	ldr	r0, [r0, #0]
 8011fd2:	2800      	cmp	r0, #0
 8011fd4:	d057      	beq.n	8012086 <rcl_init_options_copy+0xc2>
 8011fd6:	460e      	mov	r6, r1
 8011fd8:	f7fe ff2a 	bl	8010e30 <rcutils_allocator_is_valid>
 8011fdc:	2e00      	cmp	r6, #0
 8011fde:	d052      	beq.n	8012086 <rcl_init_options_copy+0xc2>
 8011fe0:	f080 0001 	eor.w	r0, r0, #1
 8011fe4:	b2c0      	uxtb	r0, r0
 8011fe6:	2800      	cmp	r0, #0
 8011fe8:	d14d      	bne.n	8012086 <rcl_init_options_copy+0xc2>
 8011fea:	6833      	ldr	r3, [r6, #0]
 8011fec:	b123      	cbz	r3, 8011ff8 <rcl_init_options_copy+0x34>
 8011fee:	2464      	movs	r4, #100	@ 0x64
 8011ff0:	4620      	mov	r0, r4
 8011ff2:	b014      	add	sp, #80	@ 0x50
 8011ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ff8:	6827      	ldr	r7, [r4, #0]
 8011ffa:	ad0f      	add	r5, sp, #60	@ 0x3c
 8011ffc:	46bc      	mov	ip, r7
 8011ffe:	f8d7 8000 	ldr.w	r8, [r7]
 8012002:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012006:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012008:	f8dc 3000 	ldr.w	r3, [ip]
 801200c:	2050      	movs	r0, #80	@ 0x50
 801200e:	4619      	mov	r1, r3
 8012010:	602b      	str	r3, [r5, #0]
 8012012:	47c0      	blx	r8
 8012014:	4605      	mov	r5, r0
 8012016:	6030      	str	r0, [r6, #0]
 8012018:	b3d0      	cbz	r0, 8012090 <rcl_init_options_copy+0xcc>
 801201a:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 801201e:	4686      	mov	lr, r0
 8012020:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012024:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012028:	f8dc 3000 	ldr.w	r3, [ip]
 801202c:	4668      	mov	r0, sp
 801202e:	f8ce 3000 	str.w	r3, [lr]
 8012032:	f003 f841 	bl	80150b8 <rmw_get_zero_initialized_init_options>
 8012036:	46ee      	mov	lr, sp
 8012038:	f105 0c18 	add.w	ip, r5, #24
 801203c:	6824      	ldr	r4, [r4, #0]
 801203e:	6835      	ldr	r5, [r6, #0]
 8012040:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012044:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012048:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801204c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012050:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012054:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012058:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801205c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012060:	f104 0018 	add.w	r0, r4, #24
 8012064:	f105 0118 	add.w	r1, r5, #24
 8012068:	f003 fa66 	bl	8015538 <rmw_init_options_copy>
 801206c:	4604      	mov	r4, r0
 801206e:	2800      	cmp	r0, #0
 8012070:	d0be      	beq.n	8011ff0 <rcl_init_options_copy+0x2c>
 8012072:	f7fe feeb 	bl	8010e4c <rcutils_get_error_string>
 8012076:	f7fe feff 	bl	8010e78 <rcutils_reset_error>
 801207a:	4630      	mov	r0, r6
 801207c:	f7ff ff78 	bl	8011f70 <rcl_init_options_fini>
 8012080:	b140      	cbz	r0, 8012094 <rcl_init_options_copy+0xd0>
 8012082:	4604      	mov	r4, r0
 8012084:	e7b4      	b.n	8011ff0 <rcl_init_options_copy+0x2c>
 8012086:	240b      	movs	r4, #11
 8012088:	4620      	mov	r0, r4
 801208a:	b014      	add	sp, #80	@ 0x50
 801208c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012090:	240a      	movs	r4, #10
 8012092:	e7ad      	b.n	8011ff0 <rcl_init_options_copy+0x2c>
 8012094:	4620      	mov	r0, r4
 8012096:	b014      	add	sp, #80	@ 0x50
 8012098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801209c:	f008 bfde 	b.w	801b05c <rcl_convert_rmw_ret_to_rcl_ret>

080120a0 <rcl_get_localhost_only>:
 80120a0:	b510      	push	{r4, lr}
 80120a2:	2300      	movs	r3, #0
 80120a4:	b082      	sub	sp, #8
 80120a6:	9301      	str	r3, [sp, #4]
 80120a8:	b1b8      	cbz	r0, 80120da <rcl_get_localhost_only+0x3a>
 80120aa:	4604      	mov	r4, r0
 80120ac:	a901      	add	r1, sp, #4
 80120ae:	480c      	ldr	r0, [pc, #48]	@ (80120e0 <rcl_get_localhost_only+0x40>)
 80120b0:	f002 fd1e 	bl	8014af0 <rcutils_get_env>
 80120b4:	b110      	cbz	r0, 80120bc <rcl_get_localhost_only+0x1c>
 80120b6:	2001      	movs	r0, #1
 80120b8:	b002      	add	sp, #8
 80120ba:	bd10      	pop	{r4, pc}
 80120bc:	9b01      	ldr	r3, [sp, #4]
 80120be:	b113      	cbz	r3, 80120c6 <rcl_get_localhost_only+0x26>
 80120c0:	781a      	ldrb	r2, [r3, #0]
 80120c2:	2a31      	cmp	r2, #49	@ 0x31
 80120c4:	d004      	beq.n	80120d0 <rcl_get_localhost_only+0x30>
 80120c6:	2302      	movs	r3, #2
 80120c8:	2000      	movs	r0, #0
 80120ca:	7023      	strb	r3, [r4, #0]
 80120cc:	b002      	add	sp, #8
 80120ce:	bd10      	pop	{r4, pc}
 80120d0:	785b      	ldrb	r3, [r3, #1]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d1f7      	bne.n	80120c6 <rcl_get_localhost_only+0x26>
 80120d6:	2301      	movs	r3, #1
 80120d8:	e7f6      	b.n	80120c8 <rcl_get_localhost_only+0x28>
 80120da:	200b      	movs	r0, #11
 80120dc:	b002      	add	sp, #8
 80120de:	bd10      	pop	{r4, pc}
 80120e0:	0801fbe8 	.word	0x0801fbe8

080120e4 <rcl_get_zero_initialized_node>:
 80120e4:	4a03      	ldr	r2, [pc, #12]	@ (80120f4 <rcl_get_zero_initialized_node+0x10>)
 80120e6:	4603      	mov	r3, r0
 80120e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80120ec:	e883 0003 	stmia.w	r3, {r0, r1}
 80120f0:	4618      	mov	r0, r3
 80120f2:	4770      	bx	lr
 80120f4:	0801fc18 	.word	0x0801fc18

080120f8 <rcl_node_init>:
 80120f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120fc:	b0a9      	sub	sp, #164	@ 0xa4
 80120fe:	4604      	mov	r4, r0
 8012100:	460e      	mov	r6, r1
 8012102:	4615      	mov	r5, r2
 8012104:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8012108:	a823      	add	r0, sp, #140	@ 0x8c
 801210a:	461f      	mov	r7, r3
 801210c:	f009 f9e0 	bl	801b4d0 <rcl_guard_condition_get_default_options>
 8012110:	f1b8 0f00 	cmp.w	r8, #0
 8012114:	f000 80f3 	beq.w	80122fe <rcl_node_init+0x206>
 8012118:	4640      	mov	r0, r8
 801211a:	f7fe fe89 	bl	8010e30 <rcutils_allocator_is_valid>
 801211e:	2d00      	cmp	r5, #0
 8012120:	bf18      	it	ne
 8012122:	2c00      	cmpne	r4, #0
 8012124:	f080 0001 	eor.w	r0, r0, #1
 8012128:	bf0c      	ite	eq
 801212a:	f04f 0c01 	moveq.w	ip, #1
 801212e:	f04f 0c00 	movne.w	ip, #0
 8012132:	2e00      	cmp	r6, #0
 8012134:	bf08      	it	eq
 8012136:	f04c 0c01 	orreq.w	ip, ip, #1
 801213a:	ea4c 0c00 	orr.w	ip, ip, r0
 801213e:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 8012142:	f040 80dc 	bne.w	80122fe <rcl_node_init+0x206>
 8012146:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801214a:	f1ba 0f00 	cmp.w	sl, #0
 801214e:	f040 80fc 	bne.w	801234a <rcl_node_init+0x252>
 8012152:	2f00      	cmp	r7, #0
 8012154:	f000 80d3 	beq.w	80122fe <rcl_node_init+0x206>
 8012158:	4638      	mov	r0, r7
 801215a:	f7ff fd35 	bl	8011bc8 <rcl_context_is_valid>
 801215e:	4683      	mov	fp, r0
 8012160:	2800      	cmp	r0, #0
 8012162:	f000 80d2 	beq.w	801230a <rcl_node_init+0x212>
 8012166:	4652      	mov	r2, sl
 8012168:	4630      	mov	r0, r6
 801216a:	a922      	add	r1, sp, #136	@ 0x88
 801216c:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 8012170:	f003 f8d0 	bl	8015314 <rmw_validate_node_name>
 8012174:	4682      	mov	sl, r0
 8012176:	2800      	cmp	r0, #0
 8012178:	f040 80c3 	bne.w	8012302 <rcl_node_init+0x20a>
 801217c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801217e:	2800      	cmp	r0, #0
 8012180:	f040 80f1 	bne.w	8012366 <rcl_node_init+0x26e>
 8012184:	4628      	mov	r0, r5
 8012186:	f7ee f8b5 	bl	80002f4 <strlen>
 801218a:	2800      	cmp	r0, #0
 801218c:	f040 80c0 	bne.w	8012310 <rcl_node_init+0x218>
 8012190:	4d79      	ldr	r5, [pc, #484]	@ (8012378 <rcl_node_init+0x280>)
 8012192:	a922      	add	r1, sp, #136	@ 0x88
 8012194:	2200      	movs	r2, #0
 8012196:	4628      	mov	r0, r5
 8012198:	f003 f89e 	bl	80152d8 <rmw_validate_namespace>
 801219c:	4682      	mov	sl, r0
 801219e:	2800      	cmp	r0, #0
 80121a0:	f040 80af 	bne.w	8012302 <rcl_node_init+0x20a>
 80121a4:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80121a6:	2800      	cmp	r0, #0
 80121a8:	f040 80d5 	bne.w	8012356 <rcl_node_init+0x25e>
 80121ac:	f8d8 3000 	ldr.w	r3, [r8]
 80121b0:	2078      	movs	r0, #120	@ 0x78
 80121b2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80121b6:	4798      	blx	r3
 80121b8:	4682      	mov	sl, r0
 80121ba:	6060      	str	r0, [r4, #4]
 80121bc:	2800      	cmp	r0, #0
 80121be:	f000 80cf 	beq.w	8012360 <rcl_node_init+0x268>
 80121c2:	2200      	movs	r2, #0
 80121c4:	2300      	movs	r3, #0
 80121c6:	a808      	add	r0, sp, #32
 80121c8:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 80121cc:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 80121d0:	f000 f902 	bl	80123d8 <rcl_node_get_default_options>
 80121d4:	a908      	add	r1, sp, #32
 80121d6:	4650      	mov	r0, sl
 80121d8:	2268      	movs	r2, #104	@ 0x68
 80121da:	f00b f88a 	bl	801d2f2 <memcpy>
 80121de:	6861      	ldr	r1, [r4, #4]
 80121e0:	4640      	mov	r0, r8
 80121e2:	6027      	str	r7, [r4, #0]
 80121e4:	f000 f906 	bl	80123f4 <rcl_node_options_copy>
 80121e8:	2800      	cmp	r0, #0
 80121ea:	d158      	bne.n	801229e <rcl_node_init+0x1a6>
 80121ec:	4628      	mov	r0, r5
 80121ee:	f7ee f881 	bl	80002f4 <strlen>
 80121f2:	4428      	add	r0, r5
 80121f4:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80121f8:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80121fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80121fe:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012202:	9300      	str	r3, [sp, #0]
 8012204:	bf0c      	ite	eq
 8012206:	4b5d      	ldreq	r3, [pc, #372]	@ (801237c <rcl_node_init+0x284>)
 8012208:	4b5d      	ldrne	r3, [pc, #372]	@ (8012380 <rcl_node_init+0x288>)
 801220a:	9302      	str	r3, [sp, #8]
 801220c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012210:	9301      	str	r3, [sp, #4]
 8012212:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8012216:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801221a:	f002 fc91 	bl	8014b40 <rcutils_format_string_limit>
 801221e:	6823      	ldr	r3, [r4, #0]
 8012220:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 8012224:	4631      	mov	r1, r6
 8012226:	6818      	ldr	r0, [r3, #0]
 8012228:	462a      	mov	r2, r5
 801222a:	6866      	ldr	r6, [r4, #4]
 801222c:	3028      	adds	r0, #40	@ 0x28
 801222e:	f003 fc01 	bl	8015a34 <rmw_create_node>
 8012232:	6863      	ldr	r3, [r4, #4]
 8012234:	66b0      	str	r0, [r6, #104]	@ 0x68
 8012236:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8012238:	2800      	cmp	r0, #0
 801223a:	d032      	beq.n	80122a2 <rcl_node_init+0x1aa>
 801223c:	f003 fc8a 	bl	8015b54 <rmw_node_get_graph_guard_condition>
 8012240:	4682      	mov	sl, r0
 8012242:	b360      	cbz	r0, 801229e <rcl_node_init+0x1a6>
 8012244:	f8d8 3000 	ldr.w	r3, [r8]
 8012248:	2008      	movs	r0, #8
 801224a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801224e:	6866      	ldr	r6, [r4, #4]
 8012250:	4798      	blx	r3
 8012252:	6863      	ldr	r3, [r4, #4]
 8012254:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8012256:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 801225a:	f1bb 0f00 	cmp.w	fp, #0
 801225e:	d020      	beq.n	80122a2 <rcl_node_init+0x1aa>
 8012260:	a806      	add	r0, sp, #24
 8012262:	ae23      	add	r6, sp, #140	@ 0x8c
 8012264:	f009 f8a8 	bl	801b3b8 <rcl_get_zero_initialized_guard_condition>
 8012268:	a806      	add	r0, sp, #24
 801226a:	6863      	ldr	r3, [r4, #4]
 801226c:	46c4      	mov	ip, r8
 801226e:	c803      	ldmia	r0, {r0, r1}
 8012270:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8012274:	e88b 0003 	stmia.w	fp, {r0, r1}
 8012278:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801227c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801227e:	f8dc 3000 	ldr.w	r3, [ip]
 8012282:	6033      	str	r3, [r6, #0]
 8012284:	ab28      	add	r3, sp, #160	@ 0xa0
 8012286:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801228a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801228e:	4651      	mov	r1, sl
 8012290:	463a      	mov	r2, r7
 8012292:	4670      	mov	r0, lr
 8012294:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012296:	f009 f899 	bl	801b3cc <rcl_guard_condition_init_from_rmw>
 801229a:	4682      	mov	sl, r0
 801229c:	b328      	cbz	r0, 80122ea <rcl_node_init+0x1f2>
 801229e:	6863      	ldr	r3, [r4, #4]
 80122a0:	b1f3      	cbz	r3, 80122e0 <rcl_node_init+0x1e8>
 80122a2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80122a4:	b128      	cbz	r0, 80122b2 <rcl_node_init+0x1ba>
 80122a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80122aa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80122ae:	4798      	blx	r3
 80122b0:	6863      	ldr	r3, [r4, #4]
 80122b2:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80122b4:	b110      	cbz	r0, 80122bc <rcl_node_init+0x1c4>
 80122b6:	f003 fbcf 	bl	8015a58 <rmw_destroy_node>
 80122ba:	6863      	ldr	r3, [r4, #4]
 80122bc:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80122be:	b148      	cbz	r0, 80122d4 <rcl_node_init+0x1dc>
 80122c0:	f009 f8e0 	bl	801b484 <rcl_guard_condition_fini>
 80122c4:	6863      	ldr	r3, [r4, #4]
 80122c6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80122ca:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80122cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80122d0:	4798      	blx	r3
 80122d2:	6863      	ldr	r3, [r4, #4]
 80122d4:	4618      	mov	r0, r3
 80122d6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80122da:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80122de:	4798      	blx	r3
 80122e0:	2300      	movs	r3, #0
 80122e2:	f04f 0a01 	mov.w	sl, #1
 80122e6:	e9c4 3300 	strd	r3, r3, [r4]
 80122ea:	f1b9 0f00 	cmp.w	r9, #0
 80122ee:	d008      	beq.n	8012302 <rcl_node_init+0x20a>
 80122f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80122f4:	4628      	mov	r0, r5
 80122f6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80122fa:	4798      	blx	r3
 80122fc:	e001      	b.n	8012302 <rcl_node_init+0x20a>
 80122fe:	f04f 0a0b 	mov.w	sl, #11
 8012302:	4650      	mov	r0, sl
 8012304:	b029      	add	sp, #164	@ 0xa4
 8012306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801230a:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 801230e:	e7f8      	b.n	8012302 <rcl_node_init+0x20a>
 8012310:	782b      	ldrb	r3, [r5, #0]
 8012312:	2b2f      	cmp	r3, #47	@ 0x2f
 8012314:	f43f af3d 	beq.w	8012192 <rcl_node_init+0x9a>
 8012318:	9503      	str	r5, [sp, #12]
 801231a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801231e:	9300      	str	r3, [sp, #0]
 8012320:	4b18      	ldr	r3, [pc, #96]	@ (8012384 <rcl_node_init+0x28c>)
 8012322:	9302      	str	r3, [sp, #8]
 8012324:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012328:	9301      	str	r3, [sp, #4]
 801232a:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801232e:	f002 fc07 	bl	8014b40 <rcutils_format_string_limit>
 8012332:	4605      	mov	r5, r0
 8012334:	b1e0      	cbz	r0, 8012370 <rcl_node_init+0x278>
 8012336:	2200      	movs	r2, #0
 8012338:	a922      	add	r1, sp, #136	@ 0x88
 801233a:	9222      	str	r2, [sp, #136]	@ 0x88
 801233c:	f002 ffcc 	bl	80152d8 <rmw_validate_namespace>
 8012340:	4682      	mov	sl, r0
 8012342:	2800      	cmp	r0, #0
 8012344:	d1d4      	bne.n	80122f0 <rcl_node_init+0x1f8>
 8012346:	46d9      	mov	r9, fp
 8012348:	e72c      	b.n	80121a4 <rcl_node_init+0xac>
 801234a:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 801234e:	4650      	mov	r0, sl
 8012350:	b029      	add	sp, #164	@ 0xa4
 8012352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012356:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 801235a:	f002 ffcf 	bl	80152fc <rmw_namespace_validation_result_string>
 801235e:	e7c4      	b.n	80122ea <rcl_node_init+0x1f2>
 8012360:	f04f 0a0a 	mov.w	sl, #10
 8012364:	e7c1      	b.n	80122ea <rcl_node_init+0x1f2>
 8012366:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 801236a:	f003 f827 	bl	80153bc <rmw_node_name_validation_result_string>
 801236e:	e7c8      	b.n	8012302 <rcl_node_init+0x20a>
 8012370:	f04f 0a0a 	mov.w	sl, #10
 8012374:	e7c5      	b.n	8012302 <rcl_node_init+0x20a>
 8012376:	bf00      	nop
 8012378:	0801fc00 	.word	0x0801fc00
 801237c:	0801fc08 	.word	0x0801fc08
 8012380:	0801fc10 	.word	0x0801fc10
 8012384:	0801fc04 	.word	0x0801fc04

08012388 <rcl_node_is_valid>:
 8012388:	b130      	cbz	r0, 8012398 <rcl_node_is_valid+0x10>
 801238a:	6843      	ldr	r3, [r0, #4]
 801238c:	b123      	cbz	r3, 8012398 <rcl_node_is_valid+0x10>
 801238e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012390:	b113      	cbz	r3, 8012398 <rcl_node_is_valid+0x10>
 8012392:	6800      	ldr	r0, [r0, #0]
 8012394:	f7ff bc18 	b.w	8011bc8 <rcl_context_is_valid>
 8012398:	2000      	movs	r0, #0
 801239a:	4770      	bx	lr

0801239c <rcl_node_get_name>:
 801239c:	b120      	cbz	r0, 80123a8 <rcl_node_get_name+0xc>
 801239e:	6840      	ldr	r0, [r0, #4]
 80123a0:	b110      	cbz	r0, 80123a8 <rcl_node_get_name+0xc>
 80123a2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80123a4:	b100      	cbz	r0, 80123a8 <rcl_node_get_name+0xc>
 80123a6:	6880      	ldr	r0, [r0, #8]
 80123a8:	4770      	bx	lr
 80123aa:	bf00      	nop

080123ac <rcl_node_get_namespace>:
 80123ac:	b120      	cbz	r0, 80123b8 <rcl_node_get_namespace+0xc>
 80123ae:	6840      	ldr	r0, [r0, #4]
 80123b0:	b110      	cbz	r0, 80123b8 <rcl_node_get_namespace+0xc>
 80123b2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80123b4:	b100      	cbz	r0, 80123b8 <rcl_node_get_namespace+0xc>
 80123b6:	68c0      	ldr	r0, [r0, #12]
 80123b8:	4770      	bx	lr
 80123ba:	bf00      	nop

080123bc <rcl_node_get_options>:
 80123bc:	b128      	cbz	r0, 80123ca <rcl_node_get_options+0xe>
 80123be:	6840      	ldr	r0, [r0, #4]
 80123c0:	b118      	cbz	r0, 80123ca <rcl_node_get_options+0xe>
 80123c2:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	bf08      	it	eq
 80123c8:	2000      	moveq	r0, #0
 80123ca:	4770      	bx	lr

080123cc <rcl_node_get_rmw_handle>:
 80123cc:	b110      	cbz	r0, 80123d4 <rcl_node_get_rmw_handle+0x8>
 80123ce:	6840      	ldr	r0, [r0, #4]
 80123d0:	b100      	cbz	r0, 80123d4 <rcl_node_get_rmw_handle+0x8>
 80123d2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80123d4:	4770      	bx	lr
 80123d6:	bf00      	nop

080123d8 <rcl_node_get_default_options>:
 80123d8:	b510      	push	{r4, lr}
 80123da:	4604      	mov	r4, r0
 80123dc:	2268      	movs	r2, #104	@ 0x68
 80123de:	2100      	movs	r1, #0
 80123e0:	f00a fe68 	bl	801d0b4 <memset>
 80123e4:	4620      	mov	r0, r4
 80123e6:	f7fe fd15 	bl	8010e14 <rcutils_get_default_allocator>
 80123ea:	2301      	movs	r3, #1
 80123ec:	4620      	mov	r0, r4
 80123ee:	7523      	strb	r3, [r4, #20]
 80123f0:	bd10      	pop	{r4, pc}
 80123f2:	bf00      	nop

080123f4 <rcl_node_options_copy>:
 80123f4:	2800      	cmp	r0, #0
 80123f6:	bf18      	it	ne
 80123f8:	4288      	cmpne	r0, r1
 80123fa:	d01b      	beq.n	8012434 <rcl_node_options_copy+0x40>
 80123fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123fe:	fab1 f681 	clz	r6, r1
 8012402:	460c      	mov	r4, r1
 8012404:	0976      	lsrs	r6, r6, #5
 8012406:	b199      	cbz	r1, 8012430 <rcl_node_options_copy+0x3c>
 8012408:	4605      	mov	r5, r0
 801240a:	8a87      	ldrh	r7, [r0, #20]
 801240c:	4684      	mov	ip, r0
 801240e:	468e      	mov	lr, r1
 8012410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012412:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012416:	682b      	ldr	r3, [r5, #0]
 8012418:	2250      	movs	r2, #80	@ 0x50
 801241a:	f10c 0118 	add.w	r1, ip, #24
 801241e:	f104 0018 	add.w	r0, r4, #24
 8012422:	f8ce 3000 	str.w	r3, [lr]
 8012426:	82a7      	strh	r7, [r4, #20]
 8012428:	f00a ff63 	bl	801d2f2 <memcpy>
 801242c:	4630      	mov	r0, r6
 801242e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012430:	200b      	movs	r0, #11
 8012432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012434:	200b      	movs	r0, #11
 8012436:	4770      	bx	lr

08012438 <rcl_node_resolve_name>:
 8012438:	b082      	sub	sp, #8
 801243a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801243e:	b091      	sub	sp, #68	@ 0x44
 8012440:	ac1a      	add	r4, sp, #104	@ 0x68
 8012442:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8012446:	e884 000c 	stmia.w	r4, {r2, r3}
 801244a:	2800      	cmp	r0, #0
 801244c:	d03d      	beq.n	80124ca <rcl_node_resolve_name+0x92>
 801244e:	460c      	mov	r4, r1
 8012450:	4605      	mov	r5, r0
 8012452:	f7ff ffb3 	bl	80123bc <rcl_node_get_options>
 8012456:	2800      	cmp	r0, #0
 8012458:	d03a      	beq.n	80124d0 <rcl_node_resolve_name+0x98>
 801245a:	4628      	mov	r0, r5
 801245c:	f7ff ff9e 	bl	801239c <rcl_node_get_name>
 8012460:	4606      	mov	r6, r0
 8012462:	4628      	mov	r0, r5
 8012464:	ad0b      	add	r5, sp, #44	@ 0x2c
 8012466:	f7ff ffa1 	bl	80123ac <rcl_node_get_namespace>
 801246a:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 801246e:	4607      	mov	r7, r0
 8012470:	46ac      	mov	ip, r5
 8012472:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012476:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801247a:	f8de 3000 	ldr.w	r3, [lr]
 801247e:	f8cc 3000 	str.w	r3, [ip]
 8012482:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012484:	b30b      	cbz	r3, 80124ca <rcl_node_resolve_name+0x92>
 8012486:	4689      	mov	r9, r1
 8012488:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 801248c:	f002 fcd0 	bl	8014e30 <rcutils_get_zero_initialized_string_map>
 8012490:	ab10      	add	r3, sp, #64	@ 0x40
 8012492:	9008      	str	r0, [sp, #32]
 8012494:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8012498:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801249c:	2100      	movs	r1, #0
 801249e:	a808      	add	r0, sp, #32
 80124a0:	e895 000c 	ldmia.w	r5, {r2, r3}
 80124a4:	f002 fd3a 	bl	8014f1c <rcutils_string_map_init>
 80124a8:	4683      	mov	fp, r0
 80124aa:	b1a0      	cbz	r0, 80124d6 <rcl_node_resolve_name+0x9e>
 80124ac:	f7fe fcce 	bl	8010e4c <rcutils_get_error_string>
 80124b0:	f7fe fce2 	bl	8010e78 <rcutils_reset_error>
 80124b4:	f1bb 0f0a 	cmp.w	fp, #10
 80124b8:	bf18      	it	ne
 80124ba:	f04f 0b01 	movne.w	fp, #1
 80124be:	4658      	mov	r0, fp
 80124c0:	b011      	add	sp, #68	@ 0x44
 80124c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124c6:	b002      	add	sp, #8
 80124c8:	4770      	bx	lr
 80124ca:	f04f 0b0b 	mov.w	fp, #11
 80124ce:	e7f6      	b.n	80124be <rcl_node_resolve_name+0x86>
 80124d0:	f04f 0b01 	mov.w	fp, #1
 80124d4:	e7f3      	b.n	80124be <rcl_node_resolve_name+0x86>
 80124d6:	9009      	str	r0, [sp, #36]	@ 0x24
 80124d8:	9007      	str	r0, [sp, #28]
 80124da:	a808      	add	r0, sp, #32
 80124dc:	f008 ff66 	bl	801b3ac <rcl_get_default_topic_name_substitutions>
 80124e0:	4683      	mov	fp, r0
 80124e2:	b180      	cbz	r0, 8012506 <rcl_node_resolve_name+0xce>
 80124e4:	280a      	cmp	r0, #10
 80124e6:	a808      	add	r0, sp, #32
 80124e8:	bf18      	it	ne
 80124ea:	f04f 0b01 	movne.w	fp, #1
 80124ee:	f002 fd55 	bl	8014f9c <rcutils_string_map_fini>
 80124f2:	4604      	mov	r4, r0
 80124f4:	2800      	cmp	r0, #0
 80124f6:	d15b      	bne.n	80125b0 <rcl_node_resolve_name+0x178>
 80124f8:	4651      	mov	r1, sl
 80124fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80124fc:	47c8      	blx	r9
 80124fe:	4651      	mov	r1, sl
 8012500:	4620      	mov	r0, r4
 8012502:	47c8      	blx	r9
 8012504:	e7db      	b.n	80124be <rcl_node_resolve_name+0x86>
 8012506:	ab09      	add	r3, sp, #36	@ 0x24
 8012508:	46ec      	mov	ip, sp
 801250a:	9305      	str	r3, [sp, #20]
 801250c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801250e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012512:	682b      	ldr	r3, [r5, #0]
 8012514:	463a      	mov	r2, r7
 8012516:	4631      	mov	r1, r6
 8012518:	4620      	mov	r0, r4
 801251a:	f8cc 3000 	str.w	r3, [ip]
 801251e:	ab08      	add	r3, sp, #32
 8012520:	f008 fde4 	bl	801b0ec <rcl_expand_topic_name>
 8012524:	4683      	mov	fp, r0
 8012526:	b9d8      	cbnz	r0, 8012560 <rcl_node_resolve_name+0x128>
 8012528:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801252a:	4602      	mov	r2, r0
 801252c:	9009      	str	r0, [sp, #36]	@ 0x24
 801252e:	a90a      	add	r1, sp, #40	@ 0x28
 8012530:	4620      	mov	r0, r4
 8012532:	f002 fe01 	bl	8015138 <rmw_validate_full_topic_name>
 8012536:	bb50      	cbnz	r0, 801258e <rcl_node_resolve_name+0x156>
 8012538:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801253a:	2d00      	cmp	r5, #0
 801253c:	d140      	bne.n	80125c0 <rcl_node_resolve_name+0x188>
 801253e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012540:	a808      	add	r0, sp, #32
 8012542:	601c      	str	r4, [r3, #0]
 8012544:	f002 fd2a 	bl	8014f9c <rcutils_string_map_fini>
 8012548:	4683      	mov	fp, r0
 801254a:	2800      	cmp	r0, #0
 801254c:	d043      	beq.n	80125d6 <rcl_node_resolve_name+0x19e>
 801254e:	f7fe fc7d 	bl	8010e4c <rcutils_get_error_string>
 8012552:	46a8      	mov	r8, r5
 8012554:	f04f 0b01 	mov.w	fp, #1
 8012558:	462c      	mov	r4, r5
 801255a:	f7fe fc8d 	bl	8010e78 <rcutils_reset_error>
 801255e:	e00a      	b.n	8012576 <rcl_node_resolve_name+0x13e>
 8012560:	2867      	cmp	r0, #103	@ 0x67
 8012562:	bf14      	ite	ne
 8012564:	f04f 0800 	movne.w	r8, #0
 8012568:	f008 0801 	andeq.w	r8, r8, #1
 801256c:	9c07      	ldr	r4, [sp, #28]
 801256e:	a808      	add	r0, sp, #32
 8012570:	f002 fd14 	bl	8014f9c <rcutils_string_map_fini>
 8012574:	bb50      	cbnz	r0, 80125cc <rcl_node_resolve_name+0x194>
 8012576:	4651      	mov	r1, sl
 8012578:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801257a:	47c8      	blx	r9
 801257c:	4651      	mov	r1, sl
 801257e:	4620      	mov	r0, r4
 8012580:	47c8      	blx	r9
 8012582:	f1b8 0f00 	cmp.w	r8, #0
 8012586:	bf18      	it	ne
 8012588:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 801258c:	e797      	b.n	80124be <rcl_node_resolve_name+0x86>
 801258e:	f7fe fc5d 	bl	8010e4c <rcutils_get_error_string>
 8012592:	f7fe fc71 	bl	8010e78 <rcutils_reset_error>
 8012596:	a808      	add	r0, sp, #32
 8012598:	f002 fd00 	bl	8014f9c <rcutils_string_map_fini>
 801259c:	b998      	cbnz	r0, 80125c6 <rcl_node_resolve_name+0x18e>
 801259e:	4651      	mov	r1, sl
 80125a0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80125a2:	47c8      	blx	r9
 80125a4:	4651      	mov	r1, sl
 80125a6:	4620      	mov	r0, r4
 80125a8:	f04f 0b01 	mov.w	fp, #1
 80125ac:	47c8      	blx	r9
 80125ae:	e786      	b.n	80124be <rcl_node_resolve_name+0x86>
 80125b0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80125b4:	f7fe fc4a 	bl	8010e4c <rcutils_get_error_string>
 80125b8:	f7fe fc5e 	bl	8010e78 <rcutils_reset_error>
 80125bc:	4644      	mov	r4, r8
 80125be:	e7da      	b.n	8012576 <rcl_node_resolve_name+0x13e>
 80125c0:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 80125c4:	e7d3      	b.n	801256e <rcl_node_resolve_name+0x136>
 80125c6:	46d8      	mov	r8, fp
 80125c8:	f04f 0b01 	mov.w	fp, #1
 80125cc:	f7fe fc3e 	bl	8010e4c <rcutils_get_error_string>
 80125d0:	f7fe fc52 	bl	8010e78 <rcutils_reset_error>
 80125d4:	e7cf      	b.n	8012576 <rcl_node_resolve_name+0x13e>
 80125d6:	4651      	mov	r1, sl
 80125d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80125da:	47c8      	blx	r9
 80125dc:	4651      	mov	r1, sl
 80125de:	4658      	mov	r0, fp
 80125e0:	47c8      	blx	r9
 80125e2:	e76c      	b.n	80124be <rcl_node_resolve_name+0x86>

080125e4 <rcl_get_zero_initialized_publisher>:
 80125e4:	4b01      	ldr	r3, [pc, #4]	@ (80125ec <rcl_get_zero_initialized_publisher+0x8>)
 80125e6:	6818      	ldr	r0, [r3, #0]
 80125e8:	4770      	bx	lr
 80125ea:	bf00      	nop
 80125ec:	0801fc20 	.word	0x0801fc20

080125f0 <rcl_publisher_init>:
 80125f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125f4:	b088      	sub	sp, #32
 80125f6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80125f8:	2e00      	cmp	r6, #0
 80125fa:	d06b      	beq.n	80126d4 <rcl_publisher_init+0xe4>
 80125fc:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 8012600:	4605      	mov	r5, r0
 8012602:	460f      	mov	r7, r1
 8012604:	4690      	mov	r8, r2
 8012606:	4650      	mov	r0, sl
 8012608:	4699      	mov	r9, r3
 801260a:	f7fe fc11 	bl	8010e30 <rcutils_allocator_is_valid>
 801260e:	f080 0401 	eor.w	r4, r0, #1
 8012612:	b2e4      	uxtb	r4, r4
 8012614:	2c00      	cmp	r4, #0
 8012616:	d15d      	bne.n	80126d4 <rcl_publisher_init+0xe4>
 8012618:	2d00      	cmp	r5, #0
 801261a:	d05b      	beq.n	80126d4 <rcl_publisher_init+0xe4>
 801261c:	682b      	ldr	r3, [r5, #0]
 801261e:	b123      	cbz	r3, 801262a <rcl_publisher_init+0x3a>
 8012620:	2464      	movs	r4, #100	@ 0x64
 8012622:	4620      	mov	r0, r4
 8012624:	b008      	add	sp, #32
 8012626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801262a:	4638      	mov	r0, r7
 801262c:	f7ff feac 	bl	8012388 <rcl_node_is_valid>
 8012630:	2800      	cmp	r0, #0
 8012632:	d054      	beq.n	80126de <rcl_publisher_init+0xee>
 8012634:	f1b8 0f00 	cmp.w	r8, #0
 8012638:	d04c      	beq.n	80126d4 <rcl_publisher_init+0xe4>
 801263a:	fab9 f389 	clz	r3, r9
 801263e:	095b      	lsrs	r3, r3, #5
 8012640:	f1b9 0f00 	cmp.w	r9, #0
 8012644:	d046      	beq.n	80126d4 <rcl_publisher_init+0xe4>
 8012646:	aa07      	add	r2, sp, #28
 8012648:	9307      	str	r3, [sp, #28]
 801264a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801264e:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8012652:	9205      	str	r2, [sp, #20]
 8012654:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012658:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801265c:	4649      	mov	r1, r9
 801265e:	4638      	mov	r0, r7
 8012660:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8012664:	f7ff fee8 	bl	8012438 <rcl_node_resolve_name>
 8012668:	2800      	cmp	r0, #0
 801266a:	d14f      	bne.n	801270c <rcl_publisher_init+0x11c>
 801266c:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 801266e:	20c8      	movs	r0, #200	@ 0xc8
 8012670:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8012672:	4798      	blx	r3
 8012674:	6028      	str	r0, [r5, #0]
 8012676:	2800      	cmp	r0, #0
 8012678:	d050      	beq.n	801271c <rcl_publisher_init+0x12c>
 801267a:	4638      	mov	r0, r7
 801267c:	f7ff fea6 	bl	80123cc <rcl_node_get_rmw_handle>
 8012680:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8012684:	4641      	mov	r1, r8
 8012686:	9a07      	ldr	r2, [sp, #28]
 8012688:	9300      	str	r3, [sp, #0]
 801268a:	4633      	mov	r3, r6
 801268c:	682c      	ldr	r4, [r5, #0]
 801268e:	f003 fa67 	bl	8015b60 <rmw_create_publisher>
 8012692:	682b      	ldr	r3, [r5, #0]
 8012694:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 8012698:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 801269c:	b370      	cbz	r0, 80126fc <rcl_publisher_init+0x10c>
 801269e:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 80126a2:	f003 fb41 	bl	8015d28 <rmw_publisher_get_actual_qos>
 80126a6:	682b      	ldr	r3, [r5, #0]
 80126a8:	4604      	mov	r4, r0
 80126aa:	b9d0      	cbnz	r0, 80126e2 <rcl_publisher_init+0xf2>
 80126ac:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 80126b0:	4631      	mov	r1, r6
 80126b2:	4618      	mov	r0, r3
 80126b4:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 80126b8:	2270      	movs	r2, #112	@ 0x70
 80126ba:	f00a fe1a 	bl	801d2f2 <memcpy>
 80126be:	683a      	ldr	r2, [r7, #0]
 80126c0:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 80126c4:	9807      	ldr	r0, [sp, #28]
 80126c6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80126c8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80126ca:	4798      	blx	r3
 80126cc:	4620      	mov	r0, r4
 80126ce:	b008      	add	sp, #32
 80126d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126d4:	240b      	movs	r4, #11
 80126d6:	4620      	mov	r0, r4
 80126d8:	b008      	add	sp, #32
 80126da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126de:	24c8      	movs	r4, #200	@ 0xc8
 80126e0:	e79f      	b.n	8012622 <rcl_publisher_init+0x32>
 80126e2:	b1cb      	cbz	r3, 8012718 <rcl_publisher_init+0x128>
 80126e4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80126e8:	b142      	cbz	r2, 80126fc <rcl_publisher_init+0x10c>
 80126ea:	4638      	mov	r0, r7
 80126ec:	f7ff fe6e 	bl	80123cc <rcl_node_get_rmw_handle>
 80126f0:	682b      	ldr	r3, [r5, #0]
 80126f2:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 80126f6:	f003 fb2b 	bl	8015d50 <rmw_destroy_publisher>
 80126fa:	682b      	ldr	r3, [r5, #0]
 80126fc:	4618      	mov	r0, r3
 80126fe:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 8012700:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8012702:	2401      	movs	r4, #1
 8012704:	4790      	blx	r2
 8012706:	2300      	movs	r3, #0
 8012708:	602b      	str	r3, [r5, #0]
 801270a:	e7db      	b.n	80126c4 <rcl_publisher_init+0xd4>
 801270c:	2867      	cmp	r0, #103	@ 0x67
 801270e:	d007      	beq.n	8012720 <rcl_publisher_init+0x130>
 8012710:	2869      	cmp	r0, #105	@ 0x69
 8012712:	d005      	beq.n	8012720 <rcl_publisher_init+0x130>
 8012714:	280a      	cmp	r0, #10
 8012716:	d001      	beq.n	801271c <rcl_publisher_init+0x12c>
 8012718:	2401      	movs	r4, #1
 801271a:	e7d3      	b.n	80126c4 <rcl_publisher_init+0xd4>
 801271c:	240a      	movs	r4, #10
 801271e:	e7d1      	b.n	80126c4 <rcl_publisher_init+0xd4>
 8012720:	2467      	movs	r4, #103	@ 0x67
 8012722:	e7cf      	b.n	80126c4 <rcl_publisher_init+0xd4>

08012724 <rcl_publisher_get_default_options>:
 8012724:	b570      	push	{r4, r5, r6, lr}
 8012726:	4d14      	ldr	r5, [pc, #80]	@ (8012778 <rcl_publisher_get_default_options+0x54>)
 8012728:	b088      	sub	sp, #32
 801272a:	4604      	mov	r4, r0
 801272c:	2250      	movs	r2, #80	@ 0x50
 801272e:	4913      	ldr	r1, [pc, #76]	@ (801277c <rcl_publisher_get_default_options+0x58>)
 8012730:	4628      	mov	r0, r5
 8012732:	f00a fdde 	bl	801d2f2 <memcpy>
 8012736:	a802      	add	r0, sp, #8
 8012738:	f7fe fb6c 	bl	8010e14 <rcutils_get_default_allocator>
 801273c:	f10d 0c08 	add.w	ip, sp, #8
 8012740:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8012744:	466e      	mov	r6, sp
 8012746:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801274a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801274e:	f8dc 3000 	ldr.w	r3, [ip]
 8012752:	4630      	mov	r0, r6
 8012754:	f8ce 3000 	str.w	r3, [lr]
 8012758:	f002 fcbe 	bl	80150d8 <rmw_get_default_publisher_options>
 801275c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8012760:	2270      	movs	r2, #112	@ 0x70
 8012762:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012766:	e883 0003 	stmia.w	r3, {r0, r1}
 801276a:	4629      	mov	r1, r5
 801276c:	4620      	mov	r0, r4
 801276e:	f00a fdc0 	bl	801d2f2 <memcpy>
 8012772:	4620      	mov	r0, r4
 8012774:	b008      	add	sp, #32
 8012776:	bd70      	pop	{r4, r5, r6, pc}
 8012778:	240646c0 	.word	0x240646c0
 801277c:	0801fc28 	.word	0x0801fc28

08012780 <rcl_publisher_is_valid>:
 8012780:	b1a0      	cbz	r0, 80127ac <rcl_publisher_is_valid+0x2c>
 8012782:	6803      	ldr	r3, [r0, #0]
 8012784:	b510      	push	{r4, lr}
 8012786:	4604      	mov	r4, r0
 8012788:	b173      	cbz	r3, 80127a8 <rcl_publisher_is_valid+0x28>
 801278a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 801278e:	b15a      	cbz	r2, 80127a8 <rcl_publisher_is_valid+0x28>
 8012790:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8012794:	f7ff fa18 	bl	8011bc8 <rcl_context_is_valid>
 8012798:	b130      	cbz	r0, 80127a8 <rcl_publisher_is_valid+0x28>
 801279a:	6823      	ldr	r3, [r4, #0]
 801279c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80127a0:	3800      	subs	r0, #0
 80127a2:	bf18      	it	ne
 80127a4:	2001      	movne	r0, #1
 80127a6:	bd10      	pop	{r4, pc}
 80127a8:	2000      	movs	r0, #0
 80127aa:	bd10      	pop	{r4, pc}
 80127ac:	2000      	movs	r0, #0
 80127ae:	4770      	bx	lr

080127b0 <rcl_publisher_is_valid_except_context>:
 80127b0:	b130      	cbz	r0, 80127c0 <rcl_publisher_is_valid_except_context+0x10>
 80127b2:	6800      	ldr	r0, [r0, #0]
 80127b4:	b120      	cbz	r0, 80127c0 <rcl_publisher_is_valid_except_context+0x10>
 80127b6:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 80127ba:	3800      	subs	r0, #0
 80127bc:	bf18      	it	ne
 80127be:	2001      	movne	r0, #1
 80127c0:	4770      	bx	lr
 80127c2:	bf00      	nop

080127c4 <exact_match_lookup>:
 80127c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127c6:	f102 0708 	add.w	r7, r2, #8
 80127ca:	460b      	mov	r3, r1
 80127cc:	b085      	sub	sp, #20
 80127ce:	4614      	mov	r4, r2
 80127d0:	4606      	mov	r6, r0
 80127d2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80127d6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80127da:	4618      	mov	r0, r3
 80127dc:	4919      	ldr	r1, [pc, #100]	@ (8012844 <exact_match_lookup+0x80>)
 80127de:	e894 000c 	ldmia.w	r4, {r2, r3}
 80127e2:	f002 f99f 	bl	8014b24 <rcutils_join_path>
 80127e6:	7833      	ldrb	r3, [r6, #0]
 80127e8:	4605      	mov	r5, r0
 80127ea:	2b2f      	cmp	r3, #47	@ 0x2f
 80127ec:	d023      	beq.n	8012836 <exact_match_lookup+0x72>
 80127ee:	f104 030c 	add.w	r3, r4, #12
 80127f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80127f6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80127fa:	1c70      	adds	r0, r6, #1
 80127fc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012800:	f002 f996 	bl	8014b30 <rcutils_to_native_path>
 8012804:	4606      	mov	r6, r0
 8012806:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801280a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801280e:	4631      	mov	r1, r6
 8012810:	4628      	mov	r0, r5
 8012812:	e894 000c 	ldmia.w	r4, {r2, r3}
 8012816:	f002 f985 	bl	8014b24 <rcutils_join_path>
 801281a:	4603      	mov	r3, r0
 801281c:	4630      	mov	r0, r6
 801281e:	6862      	ldr	r2, [r4, #4]
 8012820:	461e      	mov	r6, r3
 8012822:	6921      	ldr	r1, [r4, #16]
 8012824:	4790      	blx	r2
 8012826:	4628      	mov	r0, r5
 8012828:	4635      	mov	r5, r6
 801282a:	6863      	ldr	r3, [r4, #4]
 801282c:	6921      	ldr	r1, [r4, #16]
 801282e:	4798      	blx	r3
 8012830:	4628      	mov	r0, r5
 8012832:	b005      	add	sp, #20
 8012834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012836:	7873      	ldrb	r3, [r6, #1]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d1d8      	bne.n	80127ee <exact_match_lookup+0x2a>
 801283c:	4628      	mov	r0, r5
 801283e:	b005      	add	sp, #20
 8012840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012842:	bf00      	nop
 8012844:	0801fcb4 	.word	0x0801fcb4

08012848 <rcl_get_secure_root>:
 8012848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801284c:	b085      	sub	sp, #20
 801284e:	b168      	cbz	r0, 801286c <rcl_get_secure_root+0x24>
 8012850:	4607      	mov	r7, r0
 8012852:	4608      	mov	r0, r1
 8012854:	460c      	mov	r4, r1
 8012856:	f7fe faeb 	bl	8010e30 <rcutils_allocator_is_valid>
 801285a:	b138      	cbz	r0, 801286c <rcl_get_secure_root+0x24>
 801285c:	2300      	movs	r3, #0
 801285e:	482d      	ldr	r0, [pc, #180]	@ (8012914 <rcl_get_secure_root+0xcc>)
 8012860:	a903      	add	r1, sp, #12
 8012862:	9303      	str	r3, [sp, #12]
 8012864:	f002 f944 	bl	8014af0 <rcutils_get_env>
 8012868:	4605      	mov	r5, r0
 801286a:	b120      	cbz	r0, 8012876 <rcl_get_secure_root+0x2e>
 801286c:	2500      	movs	r5, #0
 801286e:	4628      	mov	r0, r5
 8012870:	b005      	add	sp, #20
 8012872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012876:	9b03      	ldr	r3, [sp, #12]
 8012878:	781a      	ldrb	r2, [r3, #0]
 801287a:	2a00      	cmp	r2, #0
 801287c:	d0f6      	beq.n	801286c <rcl_get_secure_root+0x24>
 801287e:	f104 090c 	add.w	r9, r4, #12
 8012882:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012886:	e88d 0003 	stmia.w	sp, {r0, r1}
 801288a:	4618      	mov	r0, r3
 801288c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012890:	f002 fa90 	bl	8014db4 <rcutils_strdup>
 8012894:	4680      	mov	r8, r0
 8012896:	2800      	cmp	r0, #0
 8012898:	d0e8      	beq.n	801286c <rcl_get_secure_root+0x24>
 801289a:	a903      	add	r1, sp, #12
 801289c:	481e      	ldr	r0, [pc, #120]	@ (8012918 <rcl_get_secure_root+0xd0>)
 801289e:	9503      	str	r5, [sp, #12]
 80128a0:	f002 f926 	bl	8014af0 <rcutils_get_env>
 80128a4:	b160      	cbz	r0, 80128c0 <rcl_get_secure_root+0x78>
 80128a6:	2600      	movs	r6, #0
 80128a8:	4630      	mov	r0, r6
 80128aa:	6863      	ldr	r3, [r4, #4]
 80128ac:	6921      	ldr	r1, [r4, #16]
 80128ae:	4798      	blx	r3
 80128b0:	4640      	mov	r0, r8
 80128b2:	6863      	ldr	r3, [r4, #4]
 80128b4:	6921      	ldr	r1, [r4, #16]
 80128b6:	4798      	blx	r3
 80128b8:	4628      	mov	r0, r5
 80128ba:	b005      	add	sp, #20
 80128bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128c0:	9b03      	ldr	r3, [sp, #12]
 80128c2:	781e      	ldrb	r6, [r3, #0]
 80128c4:	b1f6      	cbz	r6, 8012904 <rcl_get_secure_root+0xbc>
 80128c6:	e899 0003 	ldmia.w	r9, {r0, r1}
 80128ca:	e88d 0003 	stmia.w	sp, {r0, r1}
 80128ce:	4618      	mov	r0, r3
 80128d0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80128d4:	f002 fa6e 	bl	8014db4 <rcutils_strdup>
 80128d8:	4606      	mov	r6, r0
 80128da:	2800      	cmp	r0, #0
 80128dc:	d0e3      	beq.n	80128a6 <rcl_get_secure_root+0x5e>
 80128de:	4622      	mov	r2, r4
 80128e0:	4641      	mov	r1, r8
 80128e2:	f7ff ff6f 	bl	80127c4 <exact_match_lookup>
 80128e6:	4605      	mov	r5, r0
 80128e8:	2d00      	cmp	r5, #0
 80128ea:	d0dd      	beq.n	80128a8 <rcl_get_secure_root+0x60>
 80128ec:	4628      	mov	r0, r5
 80128ee:	f002 f917 	bl	8014b20 <rcutils_is_directory>
 80128f2:	4603      	mov	r3, r0
 80128f4:	2800      	cmp	r0, #0
 80128f6:	d1d7      	bne.n	80128a8 <rcl_get_secure_root+0x60>
 80128f8:	4628      	mov	r0, r5
 80128fa:	6921      	ldr	r1, [r4, #16]
 80128fc:	461d      	mov	r5, r3
 80128fe:	6863      	ldr	r3, [r4, #4]
 8012900:	4798      	blx	r3
 8012902:	e7d1      	b.n	80128a8 <rcl_get_secure_root+0x60>
 8012904:	4622      	mov	r2, r4
 8012906:	4638      	mov	r0, r7
 8012908:	4641      	mov	r1, r8
 801290a:	f7ff ff5b 	bl	80127c4 <exact_match_lookup>
 801290e:	4605      	mov	r5, r0
 8012910:	e7ea      	b.n	80128e8 <rcl_get_secure_root+0xa0>
 8012912:	bf00      	nop
 8012914:	0801fcc0 	.word	0x0801fcc0
 8012918:	0801fcd8 	.word	0x0801fcd8

0801291c <rcl_get_security_options_from_environment>:
 801291c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012920:	b082      	sub	sp, #8
 8012922:	2300      	movs	r3, #0
 8012924:	4606      	mov	r6, r0
 8012926:	460f      	mov	r7, r1
 8012928:	4821      	ldr	r0, [pc, #132]	@ (80129b0 <rcl_get_security_options_from_environment+0x94>)
 801292a:	a901      	add	r1, sp, #4
 801292c:	4690      	mov	r8, r2
 801292e:	9301      	str	r3, [sp, #4]
 8012930:	f002 f8de 	bl	8014af0 <rcutils_get_env>
 8012934:	b120      	cbz	r0, 8012940 <rcl_get_security_options_from_environment+0x24>
 8012936:	2501      	movs	r5, #1
 8012938:	4628      	mov	r0, r5
 801293a:	b002      	add	sp, #8
 801293c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012940:	4604      	mov	r4, r0
 8012942:	491c      	ldr	r1, [pc, #112]	@ (80129b4 <rcl_get_security_options_from_environment+0x98>)
 8012944:	9801      	ldr	r0, [sp, #4]
 8012946:	f7ed fccb 	bl	80002e0 <strcmp>
 801294a:	4605      	mov	r5, r0
 801294c:	b9f0      	cbnz	r0, 801298c <rcl_get_security_options_from_environment+0x70>
 801294e:	9001      	str	r0, [sp, #4]
 8012950:	f1b8 0f00 	cmp.w	r8, #0
 8012954:	d021      	beq.n	801299a <rcl_get_security_options_from_environment+0x7e>
 8012956:	a901      	add	r1, sp, #4
 8012958:	4817      	ldr	r0, [pc, #92]	@ (80129b8 <rcl_get_security_options_from_environment+0x9c>)
 801295a:	f002 f8c9 	bl	8014af0 <rcutils_get_env>
 801295e:	2800      	cmp	r0, #0
 8012960:	d1e9      	bne.n	8012936 <rcl_get_security_options_from_environment+0x1a>
 8012962:	4916      	ldr	r1, [pc, #88]	@ (80129bc <rcl_get_security_options_from_environment+0xa0>)
 8012964:	9801      	ldr	r0, [sp, #4]
 8012966:	f7ed fcbb 	bl	80002e0 <strcmp>
 801296a:	4603      	mov	r3, r0
 801296c:	4639      	mov	r1, r7
 801296e:	4630      	mov	r0, r6
 8012970:	fab3 f383 	clz	r3, r3
 8012974:	095b      	lsrs	r3, r3, #5
 8012976:	f888 3000 	strb.w	r3, [r8]
 801297a:	f7ff ff65 	bl	8012848 <rcl_get_secure_root>
 801297e:	b170      	cbz	r0, 801299e <rcl_get_security_options_from_environment+0x82>
 8012980:	f8c8 0004 	str.w	r0, [r8, #4]
 8012984:	4628      	mov	r0, r5
 8012986:	b002      	add	sp, #8
 8012988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801298c:	4625      	mov	r5, r4
 801298e:	f888 4000 	strb.w	r4, [r8]
 8012992:	4628      	mov	r0, r5
 8012994:	b002      	add	sp, #8
 8012996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801299a:	250b      	movs	r5, #11
 801299c:	e7cc      	b.n	8012938 <rcl_get_security_options_from_environment+0x1c>
 801299e:	f898 5000 	ldrb.w	r5, [r8]
 80129a2:	f1a5 0501 	sub.w	r5, r5, #1
 80129a6:	fab5 f585 	clz	r5, r5
 80129aa:	096d      	lsrs	r5, r5, #5
 80129ac:	e7c4      	b.n	8012938 <rcl_get_security_options_from_environment+0x1c>
 80129ae:	bf00      	nop
 80129b0:	0801fc78 	.word	0x0801fc78
 80129b4:	0801fc8c 	.word	0x0801fc8c
 80129b8:	0801fc94 	.word	0x0801fc94
 80129bc:	0801fcac 	.word	0x0801fcac

080129c0 <rcl_get_zero_initialized_service>:
 80129c0:	4b01      	ldr	r3, [pc, #4]	@ (80129c8 <rcl_get_zero_initialized_service+0x8>)
 80129c2:	6818      	ldr	r0, [r3, #0]
 80129c4:	4770      	bx	lr
 80129c6:	bf00      	nop
 80129c8:	0801fcf8 	.word	0x0801fcf8

080129cc <rcl_service_init>:
 80129cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129d0:	b088      	sub	sp, #32
 80129d2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80129d4:	b1ff      	cbz	r7, 8012a16 <rcl_service_init+0x4a>
 80129d6:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 80129da:	4605      	mov	r5, r0
 80129dc:	460e      	mov	r6, r1
 80129de:	4691      	mov	r9, r2
 80129e0:	4650      	mov	r0, sl
 80129e2:	4698      	mov	r8, r3
 80129e4:	f7fe fa24 	bl	8010e30 <rcutils_allocator_is_valid>
 80129e8:	f080 0401 	eor.w	r4, r0, #1
 80129ec:	b2e4      	uxtb	r4, r4
 80129ee:	b994      	cbnz	r4, 8012a16 <rcl_service_init+0x4a>
 80129f0:	b18d      	cbz	r5, 8012a16 <rcl_service_init+0x4a>
 80129f2:	4630      	mov	r0, r6
 80129f4:	f7ff fcc8 	bl	8012388 <rcl_node_is_valid>
 80129f8:	2800      	cmp	r0, #0
 80129fa:	d05d      	beq.n	8012ab8 <rcl_service_init+0xec>
 80129fc:	f1b8 0f00 	cmp.w	r8, #0
 8012a00:	d009      	beq.n	8012a16 <rcl_service_init+0x4a>
 8012a02:	f1b9 0f00 	cmp.w	r9, #0
 8012a06:	d006      	beq.n	8012a16 <rcl_service_init+0x4a>
 8012a08:	682b      	ldr	r3, [r5, #0]
 8012a0a:	b14b      	cbz	r3, 8012a20 <rcl_service_init+0x54>
 8012a0c:	2464      	movs	r4, #100	@ 0x64
 8012a0e:	4620      	mov	r0, r4
 8012a10:	b008      	add	sp, #32
 8012a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a16:	240b      	movs	r4, #11
 8012a18:	4620      	mov	r0, r4
 8012a1a:	b008      	add	sp, #32
 8012a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a20:	aa07      	add	r2, sp, #28
 8012a22:	9304      	str	r3, [sp, #16]
 8012a24:	9307      	str	r3, [sp, #28]
 8012a26:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8012a2a:	9205      	str	r2, [sp, #20]
 8012a2c:	2201      	movs	r2, #1
 8012a2e:	9203      	str	r2, [sp, #12]
 8012a30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012a34:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012a38:	4641      	mov	r1, r8
 8012a3a:	4630      	mov	r0, r6
 8012a3c:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8012a40:	f7ff fcfa 	bl	8012438 <rcl_node_resolve_name>
 8012a44:	2800      	cmp	r0, #0
 8012a46:	d146      	bne.n	8012ad6 <rcl_service_init+0x10a>
 8012a48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012a4a:	f44f 7088 	mov.w	r0, #272	@ 0x110
 8012a4e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8012a50:	4798      	blx	r3
 8012a52:	6028      	str	r0, [r5, #0]
 8012a54:	2800      	cmp	r0, #0
 8012a56:	d046      	beq.n	8012ae6 <rcl_service_init+0x11a>
 8012a58:	4630      	mov	r0, r6
 8012a5a:	f7ff fcb7 	bl	80123cc <rcl_node_get_rmw_handle>
 8012a5e:	463b      	mov	r3, r7
 8012a60:	4649      	mov	r1, r9
 8012a62:	9a07      	ldr	r2, [sp, #28]
 8012a64:	682c      	ldr	r4, [r5, #0]
 8012a66:	f003 fb17 	bl	8016098 <rmw_create_service>
 8012a6a:	682b      	ldr	r3, [r5, #0]
 8012a6c:	f8c4 0108 	str.w	r0, [r4, #264]	@ 0x108
 8012a70:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012a74:	b338      	cbz	r0, 8012ac6 <rcl_service_init+0xfa>
 8012a76:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8012a7a:	f003 fc3f 	bl	80162fc <rmw_service_request_subscription_get_actual_qos>
 8012a7e:	bb00      	cbnz	r0, 8012ac2 <rcl_service_init+0xf6>
 8012a80:	682b      	ldr	r3, [r5, #0]
 8012a82:	f103 01b8 	add.w	r1, r3, #184	@ 0xb8
 8012a86:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012a8a:	f003 fc23 	bl	80162d4 <rmw_service_response_publisher_get_actual_qos>
 8012a8e:	4604      	mov	r4, r0
 8012a90:	b9b8      	cbnz	r0, 8012ac2 <rcl_service_init+0xf6>
 8012a92:	6828      	ldr	r0, [r5, #0]
 8012a94:	2268      	movs	r2, #104	@ 0x68
 8012a96:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8012a9a:	4639      	mov	r1, r7
 8012a9c:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 8012aa0:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 8012aa4:	f00a fc25 	bl	801d2f2 <memcpy>
 8012aa8:	9807      	ldr	r0, [sp, #28]
 8012aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012aac:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8012aae:	4798      	blx	r3
 8012ab0:	4620      	mov	r0, r4
 8012ab2:	b008      	add	sp, #32
 8012ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ab8:	24c8      	movs	r4, #200	@ 0xc8
 8012aba:	4620      	mov	r0, r4
 8012abc:	b008      	add	sp, #32
 8012abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ac2:	682b      	ldr	r3, [r5, #0]
 8012ac4:	b16b      	cbz	r3, 8012ae2 <rcl_service_init+0x116>
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012aca:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8012acc:	2401      	movs	r4, #1
 8012ace:	4790      	blx	r2
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	602b      	str	r3, [r5, #0]
 8012ad4:	e7e8      	b.n	8012aa8 <rcl_service_init+0xdc>
 8012ad6:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 8012ada:	2b01      	cmp	r3, #1
 8012adc:	d905      	bls.n	8012aea <rcl_service_init+0x11e>
 8012ade:	280a      	cmp	r0, #10
 8012ae0:	d001      	beq.n	8012ae6 <rcl_service_init+0x11a>
 8012ae2:	2401      	movs	r4, #1
 8012ae4:	e7e0      	b.n	8012aa8 <rcl_service_init+0xdc>
 8012ae6:	240a      	movs	r4, #10
 8012ae8:	e7de      	b.n	8012aa8 <rcl_service_init+0xdc>
 8012aea:	2468      	movs	r4, #104	@ 0x68
 8012aec:	e7dc      	b.n	8012aa8 <rcl_service_init+0xdc>
 8012aee:	bf00      	nop

08012af0 <rcl_service_get_default_options>:
 8012af0:	b530      	push	{r4, r5, lr}
 8012af2:	4d0f      	ldr	r5, [pc, #60]	@ (8012b30 <rcl_service_get_default_options+0x40>)
 8012af4:	b087      	sub	sp, #28
 8012af6:	4604      	mov	r4, r0
 8012af8:	2250      	movs	r2, #80	@ 0x50
 8012afa:	490e      	ldr	r1, [pc, #56]	@ (8012b34 <rcl_service_get_default_options+0x44>)
 8012afc:	4628      	mov	r0, r5
 8012afe:	f00a fbf8 	bl	801d2f2 <memcpy>
 8012b02:	4668      	mov	r0, sp
 8012b04:	f7fe f986 	bl	8010e14 <rcutils_get_default_allocator>
 8012b08:	46ec      	mov	ip, sp
 8012b0a:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8012b0e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012b12:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012b16:	f8dc 3000 	ldr.w	r3, [ip]
 8012b1a:	2268      	movs	r2, #104	@ 0x68
 8012b1c:	4629      	mov	r1, r5
 8012b1e:	4620      	mov	r0, r4
 8012b20:	f8ce 3000 	str.w	r3, [lr]
 8012b24:	f00a fbe5 	bl	801d2f2 <memcpy>
 8012b28:	4620      	mov	r0, r4
 8012b2a:	b007      	add	sp, #28
 8012b2c:	bd30      	pop	{r4, r5, pc}
 8012b2e:	bf00      	nop
 8012b30:	24064730 	.word	0x24064730
 8012b34:	0801fd00 	.word	0x0801fd00

08012b38 <rcl_service_get_rmw_handle>:
 8012b38:	b118      	cbz	r0, 8012b42 <rcl_service_get_rmw_handle+0xa>
 8012b3a:	6800      	ldr	r0, [r0, #0]
 8012b3c:	b108      	cbz	r0, 8012b42 <rcl_service_get_rmw_handle+0xa>
 8012b3e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012b42:	4770      	bx	lr

08012b44 <rcl_take_request>:
 8012b44:	b570      	push	{r4, r5, r6, lr}
 8012b46:	468e      	mov	lr, r1
 8012b48:	b08c      	sub	sp, #48	@ 0x30
 8012b4a:	460c      	mov	r4, r1
 8012b4c:	4616      	mov	r6, r2
 8012b4e:	f10d 0c18 	add.w	ip, sp, #24
 8012b52:	4605      	mov	r5, r0
 8012b54:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012b58:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012b5c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012b60:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012b64:	b30d      	cbz	r5, 8012baa <rcl_take_request+0x66>
 8012b66:	682b      	ldr	r3, [r5, #0]
 8012b68:	b1fb      	cbz	r3, 8012baa <rcl_take_request+0x66>
 8012b6a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012b6e:	b1e0      	cbz	r0, 8012baa <rcl_take_request+0x66>
 8012b70:	b336      	cbz	r6, 8012bc0 <rcl_take_request+0x7c>
 8012b72:	2300      	movs	r3, #0
 8012b74:	4632      	mov	r2, r6
 8012b76:	a902      	add	r1, sp, #8
 8012b78:	f88d 3007 	strb.w	r3, [sp, #7]
 8012b7c:	f10d 0307 	add.w	r3, sp, #7
 8012b80:	f003 f988 	bl	8015e94 <rmw_take_request>
 8012b84:	4605      	mov	r5, r0
 8012b86:	b198      	cbz	r0, 8012bb0 <rcl_take_request+0x6c>
 8012b88:	280a      	cmp	r0, #10
 8012b8a:	bf18      	it	ne
 8012b8c:	2501      	movne	r5, #1
 8012b8e:	f10d 0e18 	add.w	lr, sp, #24
 8012b92:	46a4      	mov	ip, r4
 8012b94:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012b98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012b9c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012ba0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012ba4:	4628      	mov	r0, r5
 8012ba6:	b00c      	add	sp, #48	@ 0x30
 8012ba8:	bd70      	pop	{r4, r5, r6, pc}
 8012baa:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8012bae:	e7ee      	b.n	8012b8e <rcl_take_request+0x4a>
 8012bb0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012bb4:	f240 2359 	movw	r3, #601	@ 0x259
 8012bb8:	2a00      	cmp	r2, #0
 8012bba:	bf08      	it	eq
 8012bbc:	461d      	moveq	r5, r3
 8012bbe:	e7e6      	b.n	8012b8e <rcl_take_request+0x4a>
 8012bc0:	250b      	movs	r5, #11
 8012bc2:	e7e4      	b.n	8012b8e <rcl_take_request+0x4a>

08012bc4 <rcl_send_response>:
 8012bc4:	b170      	cbz	r0, 8012be4 <rcl_send_response+0x20>
 8012bc6:	6800      	ldr	r0, [r0, #0]
 8012bc8:	b160      	cbz	r0, 8012be4 <rcl_send_response+0x20>
 8012bca:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012bce:	b148      	cbz	r0, 8012be4 <rcl_send_response+0x20>
 8012bd0:	b169      	cbz	r1, 8012bee <rcl_send_response+0x2a>
 8012bd2:	b510      	push	{r4, lr}
 8012bd4:	b14a      	cbz	r2, 8012bea <rcl_send_response+0x26>
 8012bd6:	f003 f9bb 	bl	8015f50 <rmw_send_response>
 8012bda:	b110      	cbz	r0, 8012be2 <rcl_send_response+0x1e>
 8012bdc:	2802      	cmp	r0, #2
 8012bde:	bf18      	it	ne
 8012be0:	2001      	movne	r0, #1
 8012be2:	bd10      	pop	{r4, pc}
 8012be4:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8012be8:	4770      	bx	lr
 8012bea:	200b      	movs	r0, #11
 8012bec:	bd10      	pop	{r4, pc}
 8012bee:	200b      	movs	r0, #11
 8012bf0:	4770      	bx	lr
 8012bf2:	bf00      	nop

08012bf4 <rcl_service_is_valid>:
 8012bf4:	b130      	cbz	r0, 8012c04 <rcl_service_is_valid+0x10>
 8012bf6:	6800      	ldr	r0, [r0, #0]
 8012bf8:	b120      	cbz	r0, 8012c04 <rcl_service_is_valid+0x10>
 8012bfa:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012bfe:	3800      	subs	r0, #0
 8012c00:	bf18      	it	ne
 8012c02:	2001      	movne	r0, #1
 8012c04:	4770      	bx	lr
 8012c06:	bf00      	nop

08012c08 <rcl_get_zero_initialized_subscription>:
 8012c08:	4b01      	ldr	r3, [pc, #4]	@ (8012c10 <rcl_get_zero_initialized_subscription+0x8>)
 8012c0a:	6818      	ldr	r0, [r3, #0]
 8012c0c:	4770      	bx	lr
 8012c0e:	bf00      	nop
 8012c10:	0801fd50 	.word	0x0801fd50

08012c14 <rcl_subscription_init>:
 8012c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c18:	b088      	sub	sp, #32
 8012c1a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8012c1c:	b1ff      	cbz	r7, 8012c5e <rcl_subscription_init+0x4a>
 8012c1e:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 8012c22:	4605      	mov	r5, r0
 8012c24:	460e      	mov	r6, r1
 8012c26:	4691      	mov	r9, r2
 8012c28:	4650      	mov	r0, sl
 8012c2a:	4698      	mov	r8, r3
 8012c2c:	f7fe f900 	bl	8010e30 <rcutils_allocator_is_valid>
 8012c30:	f080 0401 	eor.w	r4, r0, #1
 8012c34:	b2e4      	uxtb	r4, r4
 8012c36:	b994      	cbnz	r4, 8012c5e <rcl_subscription_init+0x4a>
 8012c38:	b18d      	cbz	r5, 8012c5e <rcl_subscription_init+0x4a>
 8012c3a:	4630      	mov	r0, r6
 8012c3c:	f7ff fba4 	bl	8012388 <rcl_node_is_valid>
 8012c40:	2800      	cmp	r0, #0
 8012c42:	d055      	beq.n	8012cf0 <rcl_subscription_init+0xdc>
 8012c44:	f1b9 0f00 	cmp.w	r9, #0
 8012c48:	d009      	beq.n	8012c5e <rcl_subscription_init+0x4a>
 8012c4a:	f1b8 0f00 	cmp.w	r8, #0
 8012c4e:	d006      	beq.n	8012c5e <rcl_subscription_init+0x4a>
 8012c50:	682b      	ldr	r3, [r5, #0]
 8012c52:	b14b      	cbz	r3, 8012c68 <rcl_subscription_init+0x54>
 8012c54:	2464      	movs	r4, #100	@ 0x64
 8012c56:	4620      	mov	r0, r4
 8012c58:	b008      	add	sp, #32
 8012c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c5e:	240b      	movs	r4, #11
 8012c60:	4620      	mov	r0, r4
 8012c62:	b008      	add	sp, #32
 8012c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c68:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8012c6c:	aa07      	add	r2, sp, #28
 8012c6e:	9307      	str	r3, [sp, #28]
 8012c70:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8012c74:	9205      	str	r2, [sp, #20]
 8012c76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012c7a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012c7e:	4641      	mov	r1, r8
 8012c80:	4630      	mov	r0, r6
 8012c82:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8012c86:	f7ff fbd7 	bl	8012438 <rcl_node_resolve_name>
 8012c8a:	2800      	cmp	r0, #0
 8012c8c:	d15f      	bne.n	8012d4e <rcl_subscription_init+0x13a>
 8012c8e:	21c8      	movs	r1, #200	@ 0xc8
 8012c90:	2001      	movs	r0, #1
 8012c92:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	@ 0x5c
 8012c96:	4798      	blx	r3
 8012c98:	6028      	str	r0, [r5, #0]
 8012c9a:	2800      	cmp	r0, #0
 8012c9c:	d05f      	beq.n	8012d5e <rcl_subscription_init+0x14a>
 8012c9e:	4630      	mov	r0, r6
 8012ca0:	f7ff fb94 	bl	80123cc <rcl_node_get_rmw_handle>
 8012ca4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8012ca8:	4649      	mov	r1, r9
 8012caa:	9a07      	ldr	r2, [sp, #28]
 8012cac:	9300      	str	r3, [sp, #0]
 8012cae:	463b      	mov	r3, r7
 8012cb0:	682c      	ldr	r4, [r5, #0]
 8012cb2:	f003 fb37 	bl	8016324 <rmw_create_subscription>
 8012cb6:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 8012cba:	682c      	ldr	r4, [r5, #0]
 8012cbc:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8012cc0:	b348      	cbz	r0, 8012d16 <rcl_subscription_init+0x102>
 8012cc2:	f104 0170 	add.w	r1, r4, #112	@ 0x70
 8012cc6:	f003 fc23 	bl	8016510 <rmw_subscription_get_actual_qos>
 8012cca:	4604      	mov	r4, r0
 8012ccc:	b9a8      	cbnz	r0, 8012cfa <rcl_subscription_init+0xe6>
 8012cce:	6828      	ldr	r0, [r5, #0]
 8012cd0:	2270      	movs	r2, #112	@ 0x70
 8012cd2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8012cd6:	4639      	mov	r1, r7
 8012cd8:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8012cdc:	f00a fb09 	bl	801d2f2 <memcpy>
 8012ce0:	9807      	ldr	r0, [sp, #28]
 8012ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ce4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8012ce6:	4798      	blx	r3
 8012ce8:	4620      	mov	r0, r4
 8012cea:	b008      	add	sp, #32
 8012cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cf0:	24c8      	movs	r4, #200	@ 0xc8
 8012cf2:	4620      	mov	r0, r4
 8012cf4:	b008      	add	sp, #32
 8012cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cfa:	682c      	ldr	r4, [r5, #0]
 8012cfc:	b36c      	cbz	r4, 8012d5a <rcl_subscription_init+0x146>
 8012cfe:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 8012d02:	b14b      	cbz	r3, 8012d18 <rcl_subscription_init+0x104>
 8012d04:	4630      	mov	r0, r6
 8012d06:	f7ff fb61 	bl	80123cc <rcl_node_get_rmw_handle>
 8012d0a:	682b      	ldr	r3, [r5, #0]
 8012d0c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8012d10:	f003 fc12 	bl	8016538 <rmw_destroy_subscription>
 8012d14:	682c      	ldr	r4, [r5, #0]
 8012d16:	b194      	cbz	r4, 8012d3e <rcl_subscription_init+0x12a>
 8012d18:	f104 0650 	add.w	r6, r4, #80	@ 0x50
 8012d1c:	4630      	mov	r0, r6
 8012d1e:	f7fe f887 	bl	8010e30 <rcutils_allocator_is_valid>
 8012d22:	b158      	cbz	r0, 8012d3c <rcl_subscription_init+0x128>
 8012d24:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8012d26:	b148      	cbz	r0, 8012d3c <rcl_subscription_init+0x128>
 8012d28:	4631      	mov	r1, r6
 8012d2a:	f002 f9dd 	bl	80150e8 <rmw_subscription_content_filter_options_fini>
 8012d2e:	4606      	mov	r6, r0
 8012d30:	b9c8      	cbnz	r0, 8012d66 <rcl_subscription_init+0x152>
 8012d32:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8012d34:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8012d36:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8012d38:	4798      	blx	r3
 8012d3a:	66e6      	str	r6, [r4, #108]	@ 0x6c
 8012d3c:	682c      	ldr	r4, [r5, #0]
 8012d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d40:	4620      	mov	r0, r4
 8012d42:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8012d44:	2401      	movs	r4, #1
 8012d46:	4798      	blx	r3
 8012d48:	2300      	movs	r3, #0
 8012d4a:	602b      	str	r3, [r5, #0]
 8012d4c:	e7c8      	b.n	8012ce0 <rcl_subscription_init+0xcc>
 8012d4e:	2867      	cmp	r0, #103	@ 0x67
 8012d50:	d007      	beq.n	8012d62 <rcl_subscription_init+0x14e>
 8012d52:	2869      	cmp	r0, #105	@ 0x69
 8012d54:	d005      	beq.n	8012d62 <rcl_subscription_init+0x14e>
 8012d56:	280a      	cmp	r0, #10
 8012d58:	d001      	beq.n	8012d5e <rcl_subscription_init+0x14a>
 8012d5a:	2401      	movs	r4, #1
 8012d5c:	e7c0      	b.n	8012ce0 <rcl_subscription_init+0xcc>
 8012d5e:	240a      	movs	r4, #10
 8012d60:	e7be      	b.n	8012ce0 <rcl_subscription_init+0xcc>
 8012d62:	2467      	movs	r4, #103	@ 0x67
 8012d64:	e7bc      	b.n	8012ce0 <rcl_subscription_init+0xcc>
 8012d66:	f008 f979 	bl	801b05c <rcl_convert_rmw_ret_to_rcl_ret>
 8012d6a:	682c      	ldr	r4, [r5, #0]
 8012d6c:	e7e7      	b.n	8012d3e <rcl_subscription_init+0x12a>
 8012d6e:	bf00      	nop

08012d70 <rcl_subscription_get_default_options>:
 8012d70:	b570      	push	{r4, r5, r6, lr}
 8012d72:	4d14      	ldr	r5, [pc, #80]	@ (8012dc4 <rcl_subscription_get_default_options+0x54>)
 8012d74:	b08a      	sub	sp, #40	@ 0x28
 8012d76:	4604      	mov	r4, r0
 8012d78:	2250      	movs	r2, #80	@ 0x50
 8012d7a:	4913      	ldr	r1, [pc, #76]	@ (8012dc8 <rcl_subscription_get_default_options+0x58>)
 8012d7c:	4628      	mov	r0, r5
 8012d7e:	f00a fab8 	bl	801d2f2 <memcpy>
 8012d82:	a804      	add	r0, sp, #16
 8012d84:	f7fe f846 	bl	8010e14 <rcutils_get_default_allocator>
 8012d88:	f10d 0c10 	add.w	ip, sp, #16
 8012d8c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8012d90:	466e      	mov	r6, sp
 8012d92:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012d96:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012d9a:	f8dc 3000 	ldr.w	r3, [ip]
 8012d9e:	4630      	mov	r0, r6
 8012da0:	f8ce 3000 	str.w	r3, [lr]
 8012da4:	f002 f9ba 	bl	801511c <rmw_get_default_subscription_options>
 8012da8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8012dac:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8012db0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012db4:	2270      	movs	r2, #112	@ 0x70
 8012db6:	4629      	mov	r1, r5
 8012db8:	4620      	mov	r0, r4
 8012dba:	f00a fa9a 	bl	801d2f2 <memcpy>
 8012dbe:	4620      	mov	r0, r4
 8012dc0:	b00a      	add	sp, #40	@ 0x28
 8012dc2:	bd70      	pop	{r4, r5, r6, pc}
 8012dc4:	24064798 	.word	0x24064798
 8012dc8:	0801fd58 	.word	0x0801fd58

08012dcc <rcl_take>:
 8012dcc:	2800      	cmp	r0, #0
 8012dce:	d049      	beq.n	8012e64 <rcl_take+0x98>
 8012dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dd4:	4615      	mov	r5, r2
 8012dd6:	6802      	ldr	r2, [r0, #0]
 8012dd8:	b0a4      	sub	sp, #144	@ 0x90
 8012dda:	4604      	mov	r4, r0
 8012ddc:	2a00      	cmp	r2, #0
 8012dde:	d039      	beq.n	8012e54 <rcl_take+0x88>
 8012de0:	461f      	mov	r7, r3
 8012de2:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8012de6:	b3ab      	cbz	r3, 8012e54 <rcl_take+0x88>
 8012de8:	460e      	mov	r6, r1
 8012dea:	2900      	cmp	r1, #0
 8012dec:	d038      	beq.n	8012e60 <rcl_take+0x94>
 8012dee:	2d00      	cmp	r5, #0
 8012df0:	d03c      	beq.n	8012e6c <rcl_take+0xa0>
 8012df2:	a802      	add	r0, sp, #8
 8012df4:	f04f 0800 	mov.w	r8, #0
 8012df8:	f002 f996 	bl	8015128 <rmw_get_zero_initialized_message_info>
 8012dfc:	f10d 0c08 	add.w	ip, sp, #8
 8012e00:	46ae      	mov	lr, r5
 8012e02:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012e06:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012e0a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012e0e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012e12:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012e16:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012e1a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8012e1e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8012e22:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8012e26:	462b      	mov	r3, r5
 8012e28:	6820      	ldr	r0, [r4, #0]
 8012e2a:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8012e2e:	4631      	mov	r1, r6
 8012e30:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8012e34:	9700      	str	r7, [sp, #0]
 8012e36:	f003 fbe1 	bl	80165fc <rmw_take_with_info>
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	b9c0      	cbnz	r0, 8012e70 <rcl_take+0xa4>
 8012e3e:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8012e42:	f240 1291 	movw	r2, #401	@ 0x191
 8012e46:	2900      	cmp	r1, #0
 8012e48:	bf08      	it	eq
 8012e4a:	4613      	moveq	r3, r2
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	b024      	add	sp, #144	@ 0x90
 8012e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e54:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8012e58:	4618      	mov	r0, r3
 8012e5a:	b024      	add	sp, #144	@ 0x90
 8012e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e60:	230b      	movs	r3, #11
 8012e62:	e7f3      	b.n	8012e4c <rcl_take+0x80>
 8012e64:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8012e68:	4618      	mov	r0, r3
 8012e6a:	4770      	bx	lr
 8012e6c:	ad14      	add	r5, sp, #80	@ 0x50
 8012e6e:	e7c0      	b.n	8012df2 <rcl_take+0x26>
 8012e70:	f008 f8f4 	bl	801b05c <rcl_convert_rmw_ret_to_rcl_ret>
 8012e74:	4603      	mov	r3, r0
 8012e76:	e7e9      	b.n	8012e4c <rcl_take+0x80>

08012e78 <rcl_subscription_get_rmw_handle>:
 8012e78:	b118      	cbz	r0, 8012e82 <rcl_subscription_get_rmw_handle+0xa>
 8012e7a:	6800      	ldr	r0, [r0, #0]
 8012e7c:	b108      	cbz	r0, 8012e82 <rcl_subscription_get_rmw_handle+0xa>
 8012e7e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8012e82:	4770      	bx	lr

08012e84 <rcl_subscription_is_valid>:
 8012e84:	b130      	cbz	r0, 8012e94 <rcl_subscription_is_valid+0x10>
 8012e86:	6800      	ldr	r0, [r0, #0]
 8012e88:	b120      	cbz	r0, 8012e94 <rcl_subscription_is_valid+0x10>
 8012e8a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8012e8e:	3800      	subs	r0, #0
 8012e90:	bf18      	it	ne
 8012e92:	2001      	movne	r0, #1
 8012e94:	4770      	bx	lr
 8012e96:	bf00      	nop

08012e98 <rcl_get_system_time>:
 8012e98:	4608      	mov	r0, r1
 8012e9a:	f7fe b809 	b.w	8010eb0 <rcutils_system_time_now>
 8012e9e:	bf00      	nop

08012ea0 <rcl_get_steady_time>:
 8012ea0:	4608      	mov	r0, r1
 8012ea2:	f7fe b82b 	b.w	8010efc <rcutils_steady_time_now>
 8012ea6:	bf00      	nop

08012ea8 <rcl_get_ros_time>:
 8012ea8:	7a03      	ldrb	r3, [r0, #8]
 8012eaa:	b510      	push	{r4, lr}
 8012eac:	460c      	mov	r4, r1
 8012eae:	b143      	cbz	r3, 8012ec2 <rcl_get_ros_time+0x1a>
 8012eb0:	2105      	movs	r1, #5
 8012eb2:	f001 fd79 	bl	80149a8 <__atomic_load_8>
 8012eb6:	4602      	mov	r2, r0
 8012eb8:	460b      	mov	r3, r1
 8012eba:	2000      	movs	r0, #0
 8012ebc:	e9c4 2300 	strd	r2, r3, [r4]
 8012ec0:	bd10      	pop	{r4, pc}
 8012ec2:	4608      	mov	r0, r1
 8012ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ec8:	f7fd bff2 	b.w	8010eb0 <rcutils_system_time_now>

08012ecc <rcl_clock_init>:
 8012ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ece:	4605      	mov	r5, r0
 8012ed0:	4610      	mov	r0, r2
 8012ed2:	4614      	mov	r4, r2
 8012ed4:	460e      	mov	r6, r1
 8012ed6:	f7fd ffab 	bl	8010e30 <rcutils_allocator_is_valid>
 8012eda:	b128      	cbz	r0, 8012ee8 <rcl_clock_init+0x1c>
 8012edc:	2d03      	cmp	r5, #3
 8012ede:	d803      	bhi.n	8012ee8 <rcl_clock_init+0x1c>
 8012ee0:	e8df f005 	tbb	[pc, r5]
 8012ee4:	0659301f 	.word	0x0659301f
 8012ee8:	f04f 0c0b 	mov.w	ip, #11
 8012eec:	4660      	mov	r0, ip
 8012eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ef0:	2c00      	cmp	r4, #0
 8012ef2:	d0f9      	beq.n	8012ee8 <rcl_clock_init+0x1c>
 8012ef4:	fab6 f386 	clz	r3, r6
 8012ef8:	095b      	lsrs	r3, r3, #5
 8012efa:	2e00      	cmp	r6, #0
 8012efc:	d0f4      	beq.n	8012ee8 <rcl_clock_init+0x1c>
 8012efe:	6133      	str	r3, [r6, #16]
 8012f00:	469c      	mov	ip, r3
 8012f02:	f106 0514 	add.w	r5, r6, #20
 8012f06:	4f32      	ldr	r7, [pc, #200]	@ (8012fd0 <rcl_clock_init+0x104>)
 8012f08:	f04f 0e03 	mov.w	lr, #3
 8012f0c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012f10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012f12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012f14:	6823      	ldr	r3, [r4, #0]
 8012f16:	4660      	mov	r0, ip
 8012f18:	602b      	str	r3, [r5, #0]
 8012f1a:	60f7      	str	r7, [r6, #12]
 8012f1c:	f886 e000 	strb.w	lr, [r6]
 8012f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f22:	2e00      	cmp	r6, #0
 8012f24:	d0e0      	beq.n	8012ee8 <rcl_clock_init+0x1c>
 8012f26:	2300      	movs	r3, #0
 8012f28:	f106 0514 	add.w	r5, r6, #20
 8012f2c:	7033      	strb	r3, [r6, #0]
 8012f2e:	469c      	mov	ip, r3
 8012f30:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012f34:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8012f38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012f3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012f3c:	6823      	ldr	r3, [r4, #0]
 8012f3e:	4660      	mov	r0, ip
 8012f40:	602b      	str	r3, [r5, #0]
 8012f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f44:	2c00      	cmp	r4, #0
 8012f46:	d0cf      	beq.n	8012ee8 <rcl_clock_init+0x1c>
 8012f48:	fab6 f586 	clz	r5, r6
 8012f4c:	096d      	lsrs	r5, r5, #5
 8012f4e:	2e00      	cmp	r6, #0
 8012f50:	d0ca      	beq.n	8012ee8 <rcl_clock_init+0x1c>
 8012f52:	46a6      	mov	lr, r4
 8012f54:	7035      	strb	r5, [r6, #0]
 8012f56:	f106 0c14 	add.w	ip, r6, #20
 8012f5a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012f5e:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8012f62:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8012f66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012f6a:	f8de 3000 	ldr.w	r3, [lr]
 8012f6e:	2010      	movs	r0, #16
 8012f70:	f8cc 3000 	str.w	r3, [ip]
 8012f74:	6823      	ldr	r3, [r4, #0]
 8012f76:	6921      	ldr	r1, [r4, #16]
 8012f78:	4798      	blx	r3
 8012f7a:	6130      	str	r0, [r6, #16]
 8012f7c:	b320      	cbz	r0, 8012fc8 <rcl_clock_init+0xfc>
 8012f7e:	2200      	movs	r2, #0
 8012f80:	2300      	movs	r3, #0
 8012f82:	46ac      	mov	ip, r5
 8012f84:	7205      	strb	r5, [r0, #8]
 8012f86:	e9c0 2300 	strd	r2, r3, [r0]
 8012f8a:	4a12      	ldr	r2, [pc, #72]	@ (8012fd4 <rcl_clock_init+0x108>)
 8012f8c:	2301      	movs	r3, #1
 8012f8e:	4660      	mov	r0, ip
 8012f90:	60f2      	str	r2, [r6, #12]
 8012f92:	7033      	strb	r3, [r6, #0]
 8012f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f96:	2c00      	cmp	r4, #0
 8012f98:	d0a6      	beq.n	8012ee8 <rcl_clock_init+0x1c>
 8012f9a:	fab6 f386 	clz	r3, r6
 8012f9e:	095b      	lsrs	r3, r3, #5
 8012fa0:	2e00      	cmp	r6, #0
 8012fa2:	d0a1      	beq.n	8012ee8 <rcl_clock_init+0x1c>
 8012fa4:	6133      	str	r3, [r6, #16]
 8012fa6:	469c      	mov	ip, r3
 8012fa8:	f106 0514 	add.w	r5, r6, #20
 8012fac:	f8df e028 	ldr.w	lr, [pc, #40]	@ 8012fd8 <rcl_clock_init+0x10c>
 8012fb0:	2702      	movs	r7, #2
 8012fb2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012fb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012fb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012fba:	6823      	ldr	r3, [r4, #0]
 8012fbc:	4660      	mov	r0, ip
 8012fbe:	602b      	str	r3, [r5, #0]
 8012fc0:	f8c6 e00c 	str.w	lr, [r6, #12]
 8012fc4:	7037      	strb	r7, [r6, #0]
 8012fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fc8:	f04f 0c0a 	mov.w	ip, #10
 8012fcc:	e78e      	b.n	8012eec <rcl_clock_init+0x20>
 8012fce:	bf00      	nop
 8012fd0:	08012ea1 	.word	0x08012ea1
 8012fd4:	08012ea9 	.word	0x08012ea9
 8012fd8:	08012e99 	.word	0x08012e99

08012fdc <rcl_clock_get_now>:
 8012fdc:	b140      	cbz	r0, 8012ff0 <rcl_clock_get_now+0x14>
 8012fde:	b139      	cbz	r1, 8012ff0 <rcl_clock_get_now+0x14>
 8012fe0:	7803      	ldrb	r3, [r0, #0]
 8012fe2:	b11b      	cbz	r3, 8012fec <rcl_clock_get_now+0x10>
 8012fe4:	68c3      	ldr	r3, [r0, #12]
 8012fe6:	b10b      	cbz	r3, 8012fec <rcl_clock_get_now+0x10>
 8012fe8:	6900      	ldr	r0, [r0, #16]
 8012fea:	4718      	bx	r3
 8012fec:	2001      	movs	r0, #1
 8012fee:	4770      	bx	lr
 8012ff0:	200b      	movs	r0, #11
 8012ff2:	4770      	bx	lr

08012ff4 <rcl_timer_call>:
 8012ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ff8:	b087      	sub	sp, #28
 8012ffa:	2800      	cmp	r0, #0
 8012ffc:	d06c      	beq.n	80130d8 <rcl_timer_call+0xe4>
 8012ffe:	6803      	ldr	r3, [r0, #0]
 8013000:	4604      	mov	r4, r0
 8013002:	2b00      	cmp	r3, #0
 8013004:	d062      	beq.n	80130cc <rcl_timer_call+0xd8>
 8013006:	f3bf 8f5b 	dmb	ish
 801300a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801300e:	f3bf 8f5b 	dmb	ish
 8013012:	2b00      	cmp	r3, #0
 8013014:	d14f      	bne.n	80130b6 <rcl_timer_call+0xc2>
 8013016:	6803      	ldr	r3, [r0, #0]
 8013018:	a904      	add	r1, sp, #16
 801301a:	6818      	ldr	r0, [r3, #0]
 801301c:	f7ff ffde 	bl	8012fdc <rcl_clock_get_now>
 8013020:	4605      	mov	r5, r0
 8013022:	2800      	cmp	r0, #0
 8013024:	d149      	bne.n	80130ba <rcl_timer_call+0xc6>
 8013026:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801302a:	2b00      	cmp	r3, #0
 801302c:	db49      	blt.n	80130c2 <rcl_timer_call+0xce>
 801302e:	2605      	movs	r6, #5
 8013030:	6820      	ldr	r0, [r4, #0]
 8013032:	9600      	str	r6, [sp, #0]
 8013034:	3020      	adds	r0, #32
 8013036:	f001 fd23 	bl	8014a80 <__atomic_exchange_8>
 801303a:	6823      	ldr	r3, [r4, #0]
 801303c:	4680      	mov	r8, r0
 801303e:	f3bf 8f5b 	dmb	ish
 8013042:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8013046:	f3bf 8f5b 	dmb	ish
 801304a:	6820      	ldr	r0, [r4, #0]
 801304c:	4689      	mov	r9, r1
 801304e:	4631      	mov	r1, r6
 8013050:	3028      	adds	r0, #40	@ 0x28
 8013052:	f001 fca9 	bl	80149a8 <__atomic_load_8>
 8013056:	460f      	mov	r7, r1
 8013058:	4631      	mov	r1, r6
 801305a:	4606      	mov	r6, r0
 801305c:	6820      	ldr	r0, [r4, #0]
 801305e:	3018      	adds	r0, #24
 8013060:	f001 fca2 	bl	80149a8 <__atomic_load_8>
 8013064:	4602      	mov	r2, r0
 8013066:	9804      	ldr	r0, [sp, #16]
 8013068:	460b      	mov	r3, r1
 801306a:	18b6      	adds	r6, r6, r2
 801306c:	f8dd c014 	ldr.w	ip, [sp, #20]
 8013070:	4692      	mov	sl, r2
 8013072:	eb47 0701 	adc.w	r7, r7, r1
 8013076:	4286      	cmp	r6, r0
 8013078:	eb77 010c 	sbcs.w	r1, r7, ip
 801307c:	da04      	bge.n	8013088 <rcl_timer_call+0x94>
 801307e:	ea53 0102 	orrs.w	r1, r3, r2
 8013082:	d12e      	bne.n	80130e2 <rcl_timer_call+0xee>
 8013084:	4606      	mov	r6, r0
 8013086:	4667      	mov	r7, ip
 8013088:	6820      	ldr	r0, [r4, #0]
 801308a:	2105      	movs	r1, #5
 801308c:	4632      	mov	r2, r6
 801308e:	463b      	mov	r3, r7
 8013090:	3028      	adds	r0, #40	@ 0x28
 8013092:	9100      	str	r1, [sp, #0]
 8013094:	f001 fcbe 	bl	8014a14 <__atomic_store_8>
 8013098:	f1bb 0f00 	cmp.w	fp, #0
 801309c:	d00d      	beq.n	80130ba <rcl_timer_call+0xc6>
 801309e:	9a04      	ldr	r2, [sp, #16]
 80130a0:	4620      	mov	r0, r4
 80130a2:	9b05      	ldr	r3, [sp, #20]
 80130a4:	ebb2 0208 	subs.w	r2, r2, r8
 80130a8:	eb63 0309 	sbc.w	r3, r3, r9
 80130ac:	47d8      	blx	fp
 80130ae:	4628      	mov	r0, r5
 80130b0:	b007      	add	sp, #28
 80130b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130b6:	f240 3521 	movw	r5, #801	@ 0x321
 80130ba:	4628      	mov	r0, r5
 80130bc:	b007      	add	sp, #28
 80130be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130c2:	2501      	movs	r5, #1
 80130c4:	4628      	mov	r0, r5
 80130c6:	b007      	add	sp, #28
 80130c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130cc:	f44f 7548 	mov.w	r5, #800	@ 0x320
 80130d0:	4628      	mov	r0, r5
 80130d2:	b007      	add	sp, #28
 80130d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130d8:	250b      	movs	r5, #11
 80130da:	4628      	mov	r0, r5
 80130dc:	b007      	add	sp, #28
 80130de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130e2:	1b80      	subs	r0, r0, r6
 80130e4:	eb6c 0107 	sbc.w	r1, ip, r7
 80130e8:	3801      	subs	r0, #1
 80130ea:	f161 0100 	sbc.w	r1, r1, #0
 80130ee:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80130f2:	f7ed f95d 	bl	80003b0 <__aeabi_ldivmod>
 80130f6:	9b02      	ldr	r3, [sp, #8]
 80130f8:	3001      	adds	r0, #1
 80130fa:	f141 0100 	adc.w	r1, r1, #0
 80130fe:	fb00 f303 	mul.w	r3, r0, r3
 8013102:	fb01 330a 	mla	r3, r1, sl, r3
 8013106:	fba0 0a0a 	umull	r0, sl, r0, sl
 801310a:	1986      	adds	r6, r0, r6
 801310c:	4453      	add	r3, sl
 801310e:	eb43 0707 	adc.w	r7, r3, r7
 8013112:	e7b9      	b.n	8013088 <rcl_timer_call+0x94>

08013114 <rcl_timer_is_ready>:
 8013114:	b570      	push	{r4, r5, r6, lr}
 8013116:	b082      	sub	sp, #8
 8013118:	b380      	cbz	r0, 801317c <rcl_timer_is_ready+0x68>
 801311a:	6803      	ldr	r3, [r0, #0]
 801311c:	4604      	mov	r4, r0
 801311e:	b38b      	cbz	r3, 8013184 <rcl_timer_is_ready+0x70>
 8013120:	460d      	mov	r5, r1
 8013122:	b359      	cbz	r1, 801317c <rcl_timer_is_ready+0x68>
 8013124:	f3bf 8f5b 	dmb	ish
 8013128:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801312c:	f3bf 8f5b 	dmb	ish
 8013130:	b953      	cbnz	r3, 8013148 <rcl_timer_is_ready+0x34>
 8013132:	6803      	ldr	r3, [r0, #0]
 8013134:	4669      	mov	r1, sp
 8013136:	6818      	ldr	r0, [r3, #0]
 8013138:	f7ff ff50 	bl	8012fdc <rcl_clock_get_now>
 801313c:	4606      	mov	r6, r0
 801313e:	b148      	cbz	r0, 8013154 <rcl_timer_is_ready+0x40>
 8013140:	f240 3321 	movw	r3, #801	@ 0x321
 8013144:	4298      	cmp	r0, r3
 8013146:	d102      	bne.n	801314e <rcl_timer_is_ready+0x3a>
 8013148:	2300      	movs	r3, #0
 801314a:	461e      	mov	r6, r3
 801314c:	702b      	strb	r3, [r5, #0]
 801314e:	4630      	mov	r0, r6
 8013150:	b002      	add	sp, #8
 8013152:	bd70      	pop	{r4, r5, r6, pc}
 8013154:	6820      	ldr	r0, [r4, #0]
 8013156:	2105      	movs	r1, #5
 8013158:	3028      	adds	r0, #40	@ 0x28
 801315a:	f001 fc25 	bl	80149a8 <__atomic_load_8>
 801315e:	9b00      	ldr	r3, [sp, #0]
 8013160:	1ac0      	subs	r0, r0, r3
 8013162:	9b01      	ldr	r3, [sp, #4]
 8013164:	eb61 0103 	sbc.w	r1, r1, r3
 8013168:	2801      	cmp	r0, #1
 801316a:	4630      	mov	r0, r6
 801316c:	f171 0300 	sbcs.w	r3, r1, #0
 8013170:	bfb4      	ite	lt
 8013172:	2301      	movlt	r3, #1
 8013174:	2300      	movge	r3, #0
 8013176:	702b      	strb	r3, [r5, #0]
 8013178:	b002      	add	sp, #8
 801317a:	bd70      	pop	{r4, r5, r6, pc}
 801317c:	260b      	movs	r6, #11
 801317e:	4630      	mov	r0, r6
 8013180:	b002      	add	sp, #8
 8013182:	bd70      	pop	{r4, r5, r6, pc}
 8013184:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8013188:	e7e1      	b.n	801314e <rcl_timer_is_ready+0x3a>
 801318a:	bf00      	nop

0801318c <rcl_timer_get_time_until_next_call>:
 801318c:	b570      	push	{r4, r5, r6, lr}
 801318e:	b082      	sub	sp, #8
 8013190:	b330      	cbz	r0, 80131e0 <rcl_timer_get_time_until_next_call+0x54>
 8013192:	6803      	ldr	r3, [r0, #0]
 8013194:	4604      	mov	r4, r0
 8013196:	b33b      	cbz	r3, 80131e8 <rcl_timer_get_time_until_next_call+0x5c>
 8013198:	460d      	mov	r5, r1
 801319a:	b309      	cbz	r1, 80131e0 <rcl_timer_get_time_until_next_call+0x54>
 801319c:	f3bf 8f5b 	dmb	ish
 80131a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80131a4:	f3bf 8f5b 	dmb	ish
 80131a8:	b9ab      	cbnz	r3, 80131d6 <rcl_timer_get_time_until_next_call+0x4a>
 80131aa:	6803      	ldr	r3, [r0, #0]
 80131ac:	4669      	mov	r1, sp
 80131ae:	6818      	ldr	r0, [r3, #0]
 80131b0:	f7ff ff14 	bl	8012fdc <rcl_clock_get_now>
 80131b4:	4606      	mov	r6, r0
 80131b6:	b958      	cbnz	r0, 80131d0 <rcl_timer_get_time_until_next_call+0x44>
 80131b8:	6820      	ldr	r0, [r4, #0]
 80131ba:	2105      	movs	r1, #5
 80131bc:	3028      	adds	r0, #40	@ 0x28
 80131be:	f001 fbf3 	bl	80149a8 <__atomic_load_8>
 80131c2:	9b00      	ldr	r3, [sp, #0]
 80131c4:	1ac0      	subs	r0, r0, r3
 80131c6:	9b01      	ldr	r3, [sp, #4]
 80131c8:	eb61 0103 	sbc.w	r1, r1, r3
 80131cc:	6028      	str	r0, [r5, #0]
 80131ce:	6069      	str	r1, [r5, #4]
 80131d0:	4630      	mov	r0, r6
 80131d2:	b002      	add	sp, #8
 80131d4:	bd70      	pop	{r4, r5, r6, pc}
 80131d6:	f240 3621 	movw	r6, #801	@ 0x321
 80131da:	4630      	mov	r0, r6
 80131dc:	b002      	add	sp, #8
 80131de:	bd70      	pop	{r4, r5, r6, pc}
 80131e0:	260b      	movs	r6, #11
 80131e2:	4630      	mov	r0, r6
 80131e4:	b002      	add	sp, #8
 80131e6:	bd70      	pop	{r4, r5, r6, pc}
 80131e8:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80131ec:	e7f0      	b.n	80131d0 <rcl_timer_get_time_until_next_call+0x44>
 80131ee:	bf00      	nop

080131f0 <rcl_timer_get_guard_condition>:
 80131f0:	b130      	cbz	r0, 8013200 <rcl_timer_get_guard_condition+0x10>
 80131f2:	6800      	ldr	r0, [r0, #0]
 80131f4:	b120      	cbz	r0, 8013200 <rcl_timer_get_guard_condition+0x10>
 80131f6:	68c3      	ldr	r3, [r0, #12]
 80131f8:	b10b      	cbz	r3, 80131fe <rcl_timer_get_guard_condition+0xe>
 80131fa:	3008      	adds	r0, #8
 80131fc:	4770      	bx	lr
 80131fe:	4618      	mov	r0, r3
 8013200:	4770      	bx	lr
 8013202:	bf00      	nop

08013204 <rcl_validate_enclave_name_with_size>:
 8013204:	2800      	cmp	r0, #0
 8013206:	d049      	beq.n	801329c <rcl_validate_enclave_name_with_size+0x98>
 8013208:	b570      	push	{r4, r5, r6, lr}
 801320a:	4615      	mov	r5, r2
 801320c:	b0c2      	sub	sp, #264	@ 0x108
 801320e:	b19a      	cbz	r2, 8013238 <rcl_validate_enclave_name_with_size+0x34>
 8013210:	461e      	mov	r6, r3
 8013212:	466a      	mov	r2, sp
 8013214:	ab01      	add	r3, sp, #4
 8013216:	460c      	mov	r4, r1
 8013218:	f002 f80a 	bl	8015230 <rmw_validate_namespace_with_size>
 801321c:	4684      	mov	ip, r0
 801321e:	b9b8      	cbnz	r0, 8013250 <rcl_validate_enclave_name_with_size+0x4c>
 8013220:	9900      	ldr	r1, [sp, #0]
 8013222:	b171      	cbz	r1, 8013242 <rcl_validate_enclave_name_with_size+0x3e>
 8013224:	2907      	cmp	r1, #7
 8013226:	d019      	beq.n	801325c <rcl_validate_enclave_name_with_size+0x58>
 8013228:	1e4b      	subs	r3, r1, #1
 801322a:	2b05      	cmp	r3, #5
 801322c:	d83a      	bhi.n	80132a4 <rcl_validate_enclave_name_with_size+0xa0>
 801322e:	e8df f003 	tbb	[pc, r3]
 8013232:	2926      	.short	0x2926
 8013234:	1d322f2c 	.word	0x1d322f2c
 8013238:	f04f 0c0b 	mov.w	ip, #11
 801323c:	4660      	mov	r0, ip
 801323e:	b042      	add	sp, #264	@ 0x108
 8013240:	bd70      	pop	{r4, r5, r6, pc}
 8013242:	2907      	cmp	r1, #7
 8013244:	d00a      	beq.n	801325c <rcl_validate_enclave_name_with_size+0x58>
 8013246:	2300      	movs	r3, #0
 8013248:	4660      	mov	r0, ip
 801324a:	602b      	str	r3, [r5, #0]
 801324c:	b042      	add	sp, #264	@ 0x108
 801324e:	bd70      	pop	{r4, r5, r6, pc}
 8013250:	f007 ff04 	bl	801b05c <rcl_convert_rmw_ret_to_rcl_ret>
 8013254:	4684      	mov	ip, r0
 8013256:	4660      	mov	r0, ip
 8013258:	b042      	add	sp, #264	@ 0x108
 801325a:	bd70      	pop	{r4, r5, r6, pc}
 801325c:	2cff      	cmp	r4, #255	@ 0xff
 801325e:	d9f2      	bls.n	8013246 <rcl_validate_enclave_name_with_size+0x42>
 8013260:	6029      	str	r1, [r5, #0]
 8013262:	2e00      	cmp	r6, #0
 8013264:	d0ea      	beq.n	801323c <rcl_validate_enclave_name_with_size+0x38>
 8013266:	23fe      	movs	r3, #254	@ 0xfe
 8013268:	6033      	str	r3, [r6, #0]
 801326a:	e7e7      	b.n	801323c <rcl_validate_enclave_name_with_size+0x38>
 801326c:	2306      	movs	r3, #6
 801326e:	602b      	str	r3, [r5, #0]
 8013270:	2e00      	cmp	r6, #0
 8013272:	d0e3      	beq.n	801323c <rcl_validate_enclave_name_with_size+0x38>
 8013274:	9b01      	ldr	r3, [sp, #4]
 8013276:	4660      	mov	r0, ip
 8013278:	6033      	str	r3, [r6, #0]
 801327a:	b042      	add	sp, #264	@ 0x108
 801327c:	bd70      	pop	{r4, r5, r6, pc}
 801327e:	2301      	movs	r3, #1
 8013280:	602b      	str	r3, [r5, #0]
 8013282:	e7f5      	b.n	8013270 <rcl_validate_enclave_name_with_size+0x6c>
 8013284:	2302      	movs	r3, #2
 8013286:	602b      	str	r3, [r5, #0]
 8013288:	e7f2      	b.n	8013270 <rcl_validate_enclave_name_with_size+0x6c>
 801328a:	2303      	movs	r3, #3
 801328c:	602b      	str	r3, [r5, #0]
 801328e:	e7ef      	b.n	8013270 <rcl_validate_enclave_name_with_size+0x6c>
 8013290:	2304      	movs	r3, #4
 8013292:	602b      	str	r3, [r5, #0]
 8013294:	e7ec      	b.n	8013270 <rcl_validate_enclave_name_with_size+0x6c>
 8013296:	2305      	movs	r3, #5
 8013298:	602b      	str	r3, [r5, #0]
 801329a:	e7e9      	b.n	8013270 <rcl_validate_enclave_name_with_size+0x6c>
 801329c:	f04f 0c0b 	mov.w	ip, #11
 80132a0:	4660      	mov	r0, ip
 80132a2:	4770      	bx	lr
 80132a4:	460b      	mov	r3, r1
 80132a6:	4a04      	ldr	r2, [pc, #16]	@ (80132b8 <rcl_validate_enclave_name_with_size+0xb4>)
 80132a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80132ac:	a802      	add	r0, sp, #8
 80132ae:	f001 fd33 	bl	8014d18 <rcutils_snprintf>
 80132b2:	f04f 0c01 	mov.w	ip, #1
 80132b6:	e7c1      	b.n	801323c <rcl_validate_enclave_name_with_size+0x38>
 80132b8:	0801fda8 	.word	0x0801fda8

080132bc <rcl_validate_enclave_name>:
 80132bc:	b168      	cbz	r0, 80132da <rcl_validate_enclave_name+0x1e>
 80132be:	b570      	push	{r4, r5, r6, lr}
 80132c0:	460d      	mov	r5, r1
 80132c2:	4616      	mov	r6, r2
 80132c4:	4604      	mov	r4, r0
 80132c6:	f7ed f815 	bl	80002f4 <strlen>
 80132ca:	4633      	mov	r3, r6
 80132cc:	4601      	mov	r1, r0
 80132ce:	462a      	mov	r2, r5
 80132d0:	4620      	mov	r0, r4
 80132d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132d6:	f7ff bf95 	b.w	8013204 <rcl_validate_enclave_name_with_size>
 80132da:	200b      	movs	r0, #11
 80132dc:	4770      	bx	lr
 80132de:	bf00      	nop

080132e0 <rcl_get_zero_initialized_wait_set>:
 80132e0:	b510      	push	{r4, lr}
 80132e2:	4c08      	ldr	r4, [pc, #32]	@ (8013304 <rcl_get_zero_initialized_wait_set+0x24>)
 80132e4:	4686      	mov	lr, r0
 80132e6:	4684      	mov	ip, r0
 80132e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80132ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80132ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80132f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80132f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80132f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80132fa:	6823      	ldr	r3, [r4, #0]
 80132fc:	4670      	mov	r0, lr
 80132fe:	f8cc 3000 	str.w	r3, [ip]
 8013302:	bd10      	pop	{r4, pc}
 8013304:	0801fe08 	.word	0x0801fe08

08013308 <rcl_wait_set_is_valid>:
 8013308:	b118      	cbz	r0, 8013312 <rcl_wait_set_is_valid+0xa>
 801330a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801330c:	3800      	subs	r0, #0
 801330e:	bf18      	it	ne
 8013310:	2001      	movne	r0, #1
 8013312:	4770      	bx	lr

08013314 <rcl_wait_set_fini>:
 8013314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013318:	b082      	sub	sp, #8
 801331a:	2800      	cmp	r0, #0
 801331c:	f000 8095 	beq.w	801344a <rcl_wait_set_fini+0x136>
 8013320:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8013322:	4604      	mov	r4, r0
 8013324:	2e00      	cmp	r6, #0
 8013326:	f000 808c 	beq.w	8013442 <rcl_wait_set_fini+0x12e>
 801332a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801332c:	f003 fb40 	bl	80169b0 <rmw_destroy_wait_set>
 8013330:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013332:	1e06      	subs	r6, r0, #0
 8013334:	bf18      	it	ne
 8013336:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801333a:	2d00      	cmp	r5, #0
 801333c:	f000 8081 	beq.w	8013442 <rcl_wait_set_fini+0x12e>
 8013340:	2700      	movs	r7, #0
 8013342:	6820      	ldr	r0, [r4, #0]
 8013344:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8013348:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801334a:	6067      	str	r7, [r4, #4]
 801334c:	602f      	str	r7, [r5, #0]
 801334e:	b120      	cbz	r0, 801335a <rcl_wait_set_fini+0x46>
 8013350:	9101      	str	r1, [sp, #4]
 8013352:	47c0      	blx	r8
 8013354:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013356:	9901      	ldr	r1, [sp, #4]
 8013358:	6027      	str	r7, [r4, #0]
 801335a:	68a8      	ldr	r0, [r5, #8]
 801335c:	b120      	cbz	r0, 8013368 <rcl_wait_set_fini+0x54>
 801335e:	47c0      	blx	r8
 8013360:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013362:	2300      	movs	r3, #0
 8013364:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8013368:	f04f 0800 	mov.w	r8, #0
 801336c:	68a0      	ldr	r0, [r4, #8]
 801336e:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8013370:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013372:	f8c4 800c 	str.w	r8, [r4, #12]
 8013376:	f8c5 800c 	str.w	r8, [r5, #12]
 801337a:	b128      	cbz	r0, 8013388 <rcl_wait_set_fini+0x74>
 801337c:	47b8      	blx	r7
 801337e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013380:	f8c4 8008 	str.w	r8, [r4, #8]
 8013384:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8013386:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013388:	f04f 0800 	mov.w	r8, #0
 801338c:	6968      	ldr	r0, [r5, #20]
 801338e:	f8c5 8010 	str.w	r8, [r5, #16]
 8013392:	b128      	cbz	r0, 80133a0 <rcl_wait_set_fini+0x8c>
 8013394:	47b8      	blx	r7
 8013396:	f8c5 8014 	str.w	r8, [r5, #20]
 801339a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801339c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801339e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80133a0:	f04f 0800 	mov.w	r8, #0
 80133a4:	6920      	ldr	r0, [r4, #16]
 80133a6:	f8c4 8014 	str.w	r8, [r4, #20]
 80133aa:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80133ae:	b128      	cbz	r0, 80133bc <rcl_wait_set_fini+0xa8>
 80133b0:	47b8      	blx	r7
 80133b2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80133b4:	f8c4 8010 	str.w	r8, [r4, #16]
 80133b8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80133ba:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80133bc:	f04f 0800 	mov.w	r8, #0
 80133c0:	69a0      	ldr	r0, [r4, #24]
 80133c2:	f8c4 801c 	str.w	r8, [r4, #28]
 80133c6:	f8c5 8018 	str.w	r8, [r5, #24]
 80133ca:	b128      	cbz	r0, 80133d8 <rcl_wait_set_fini+0xc4>
 80133cc:	9101      	str	r1, [sp, #4]
 80133ce:	47b8      	blx	r7
 80133d0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80133d2:	9901      	ldr	r1, [sp, #4]
 80133d4:	f8c4 8018 	str.w	r8, [r4, #24]
 80133d8:	6a28      	ldr	r0, [r5, #32]
 80133da:	b120      	cbz	r0, 80133e6 <rcl_wait_set_fini+0xd2>
 80133dc:	47b8      	blx	r7
 80133de:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80133e0:	2300      	movs	r3, #0
 80133e2:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80133e6:	2700      	movs	r7, #0
 80133e8:	6a20      	ldr	r0, [r4, #32]
 80133ea:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80133ee:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80133f0:	6267      	str	r7, [r4, #36]	@ 0x24
 80133f2:	626f      	str	r7, [r5, #36]	@ 0x24
 80133f4:	b120      	cbz	r0, 8013400 <rcl_wait_set_fini+0xec>
 80133f6:	9101      	str	r1, [sp, #4]
 80133f8:	47c0      	blx	r8
 80133fa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80133fc:	9901      	ldr	r1, [sp, #4]
 80133fe:	6227      	str	r7, [r4, #32]
 8013400:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8013402:	b120      	cbz	r0, 801340e <rcl_wait_set_fini+0xfa>
 8013404:	47c0      	blx	r8
 8013406:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013408:	2300      	movs	r3, #0
 801340a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801340e:	2700      	movs	r7, #0
 8013410:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013412:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8013416:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013418:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801341a:	632f      	str	r7, [r5, #48]	@ 0x30
 801341c:	b120      	cbz	r0, 8013428 <rcl_wait_set_fini+0x114>
 801341e:	9101      	str	r1, [sp, #4]
 8013420:	47c0      	blx	r8
 8013422:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013424:	9901      	ldr	r1, [sp, #4]
 8013426:	62a7      	str	r7, [r4, #40]	@ 0x28
 8013428:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801342a:	b120      	cbz	r0, 8013436 <rcl_wait_set_fini+0x122>
 801342c:	47c0      	blx	r8
 801342e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013430:	2300      	movs	r3, #0
 8013432:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8013436:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8013438:	4628      	mov	r0, r5
 801343a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801343c:	4798      	blx	r3
 801343e:	2300      	movs	r3, #0
 8013440:	6323      	str	r3, [r4, #48]	@ 0x30
 8013442:	4630      	mov	r0, r6
 8013444:	b002      	add	sp, #8
 8013446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801344a:	260b      	movs	r6, #11
 801344c:	4630      	mov	r0, r6
 801344e:	b002      	add	sp, #8
 8013450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013454 <rcl_wait_set_add_subscription>:
 8013454:	b318      	cbz	r0, 801349e <rcl_wait_set_add_subscription+0x4a>
 8013456:	b538      	push	{r3, r4, r5, lr}
 8013458:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801345a:	4604      	mov	r4, r0
 801345c:	b30b      	cbz	r3, 80134a2 <rcl_wait_set_add_subscription+0x4e>
 801345e:	b319      	cbz	r1, 80134a8 <rcl_wait_set_add_subscription+0x54>
 8013460:	681d      	ldr	r5, [r3, #0]
 8013462:	6840      	ldr	r0, [r0, #4]
 8013464:	4285      	cmp	r5, r0
 8013466:	d217      	bcs.n	8013498 <rcl_wait_set_add_subscription+0x44>
 8013468:	1c68      	adds	r0, r5, #1
 801346a:	6018      	str	r0, [r3, #0]
 801346c:	6823      	ldr	r3, [r4, #0]
 801346e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8013472:	b102      	cbz	r2, 8013476 <rcl_wait_set_add_subscription+0x22>
 8013474:	6015      	str	r5, [r2, #0]
 8013476:	4608      	mov	r0, r1
 8013478:	f7ff fcfe 	bl	8012e78 <rcl_subscription_get_rmw_handle>
 801347c:	b150      	cbz	r0, 8013494 <rcl_wait_set_add_subscription+0x40>
 801347e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013480:	6842      	ldr	r2, [r0, #4]
 8013482:	2000      	movs	r0, #0
 8013484:	689b      	ldr	r3, [r3, #8]
 8013486:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801348a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801348c:	6853      	ldr	r3, [r2, #4]
 801348e:	3301      	adds	r3, #1
 8013490:	6053      	str	r3, [r2, #4]
 8013492:	bd38      	pop	{r3, r4, r5, pc}
 8013494:	2001      	movs	r0, #1
 8013496:	bd38      	pop	{r3, r4, r5, pc}
 8013498:	f240 3086 	movw	r0, #902	@ 0x386
 801349c:	bd38      	pop	{r3, r4, r5, pc}
 801349e:	200b      	movs	r0, #11
 80134a0:	4770      	bx	lr
 80134a2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80134a6:	bd38      	pop	{r3, r4, r5, pc}
 80134a8:	200b      	movs	r0, #11
 80134aa:	bd38      	pop	{r3, r4, r5, pc}

080134ac <rcl_wait_set_clear>:
 80134ac:	2800      	cmp	r0, #0
 80134ae:	d074      	beq.n	801359a <rcl_wait_set_clear+0xee>
 80134b0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80134b2:	b510      	push	{r4, lr}
 80134b4:	4604      	mov	r4, r0
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d071      	beq.n	801359e <rcl_wait_set_clear+0xf2>
 80134ba:	6800      	ldr	r0, [r0, #0]
 80134bc:	b138      	cbz	r0, 80134ce <rcl_wait_set_clear+0x22>
 80134be:	6862      	ldr	r2, [r4, #4]
 80134c0:	2100      	movs	r1, #0
 80134c2:	0092      	lsls	r2, r2, #2
 80134c4:	f009 fdf6 	bl	801d0b4 <memset>
 80134c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80134ca:	2200      	movs	r2, #0
 80134cc:	601a      	str	r2, [r3, #0]
 80134ce:	68a0      	ldr	r0, [r4, #8]
 80134d0:	b138      	cbz	r0, 80134e2 <rcl_wait_set_clear+0x36>
 80134d2:	68e2      	ldr	r2, [r4, #12]
 80134d4:	2100      	movs	r1, #0
 80134d6:	0092      	lsls	r2, r2, #2
 80134d8:	f009 fdec 	bl	801d0b4 <memset>
 80134dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80134de:	2200      	movs	r2, #0
 80134e0:	60da      	str	r2, [r3, #12]
 80134e2:	69a0      	ldr	r0, [r4, #24]
 80134e4:	b138      	cbz	r0, 80134f6 <rcl_wait_set_clear+0x4a>
 80134e6:	69e2      	ldr	r2, [r4, #28]
 80134e8:	2100      	movs	r1, #0
 80134ea:	0092      	lsls	r2, r2, #2
 80134ec:	f009 fde2 	bl	801d0b4 <memset>
 80134f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80134f2:	2200      	movs	r2, #0
 80134f4:	619a      	str	r2, [r3, #24]
 80134f6:	6a20      	ldr	r0, [r4, #32]
 80134f8:	b138      	cbz	r0, 801350a <rcl_wait_set_clear+0x5e>
 80134fa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80134fc:	2100      	movs	r1, #0
 80134fe:	0092      	lsls	r2, r2, #2
 8013500:	f009 fdd8 	bl	801d0b4 <memset>
 8013504:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013506:	2200      	movs	r2, #0
 8013508:	625a      	str	r2, [r3, #36]	@ 0x24
 801350a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801350c:	b138      	cbz	r0, 801351e <rcl_wait_set_clear+0x72>
 801350e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013510:	2100      	movs	r1, #0
 8013512:	0092      	lsls	r2, r2, #2
 8013514:	f009 fdce 	bl	801d0b4 <memset>
 8013518:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801351a:	2200      	movs	r2, #0
 801351c:	631a      	str	r2, [r3, #48]	@ 0x30
 801351e:	6920      	ldr	r0, [r4, #16]
 8013520:	b138      	cbz	r0, 8013532 <rcl_wait_set_clear+0x86>
 8013522:	6962      	ldr	r2, [r4, #20]
 8013524:	2100      	movs	r1, #0
 8013526:	0092      	lsls	r2, r2, #2
 8013528:	f009 fdc4 	bl	801d0b4 <memset>
 801352c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801352e:	2200      	movs	r2, #0
 8013530:	641a      	str	r2, [r3, #64]	@ 0x40
 8013532:	6898      	ldr	r0, [r3, #8]
 8013534:	b138      	cbz	r0, 8013546 <rcl_wait_set_clear+0x9a>
 8013536:	685a      	ldr	r2, [r3, #4]
 8013538:	2100      	movs	r1, #0
 801353a:	0092      	lsls	r2, r2, #2
 801353c:	f009 fdba 	bl	801d0b4 <memset>
 8013540:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013542:	2200      	movs	r2, #0
 8013544:	605a      	str	r2, [r3, #4]
 8013546:	6958      	ldr	r0, [r3, #20]
 8013548:	b138      	cbz	r0, 801355a <rcl_wait_set_clear+0xae>
 801354a:	691a      	ldr	r2, [r3, #16]
 801354c:	2100      	movs	r1, #0
 801354e:	0092      	lsls	r2, r2, #2
 8013550:	f009 fdb0 	bl	801d0b4 <memset>
 8013554:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013556:	2200      	movs	r2, #0
 8013558:	611a      	str	r2, [r3, #16]
 801355a:	6a18      	ldr	r0, [r3, #32]
 801355c:	b138      	cbz	r0, 801356e <rcl_wait_set_clear+0xc2>
 801355e:	69da      	ldr	r2, [r3, #28]
 8013560:	2100      	movs	r1, #0
 8013562:	0092      	lsls	r2, r2, #2
 8013564:	f009 fda6 	bl	801d0b4 <memset>
 8013568:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801356a:	2200      	movs	r2, #0
 801356c:	61da      	str	r2, [r3, #28]
 801356e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8013570:	b138      	cbz	r0, 8013582 <rcl_wait_set_clear+0xd6>
 8013572:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013574:	2100      	movs	r1, #0
 8013576:	0092      	lsls	r2, r2, #2
 8013578:	f009 fd9c 	bl	801d0b4 <memset>
 801357c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801357e:	2200      	movs	r2, #0
 8013580:	629a      	str	r2, [r3, #40]	@ 0x28
 8013582:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8013584:	b140      	cbz	r0, 8013598 <rcl_wait_set_clear+0xec>
 8013586:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013588:	2100      	movs	r1, #0
 801358a:	0092      	lsls	r2, r2, #2
 801358c:	f009 fd92 	bl	801d0b4 <memset>
 8013590:	2300      	movs	r3, #0
 8013592:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013594:	4618      	mov	r0, r3
 8013596:	6353      	str	r3, [r2, #52]	@ 0x34
 8013598:	bd10      	pop	{r4, pc}
 801359a:	200b      	movs	r0, #11
 801359c:	4770      	bx	lr
 801359e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80135a2:	bd10      	pop	{r4, pc}

080135a4 <rcl_wait_set_resize>:
 80135a4:	2800      	cmp	r0, #0
 80135a6:	f000 8180 	beq.w	80138aa <rcl_wait_set_resize+0x306>
 80135aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135ae:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80135b0:	b083      	sub	sp, #12
 80135b2:	4605      	mov	r5, r0
 80135b4:	2c00      	cmp	r4, #0
 80135b6:	f000 817a 	beq.w	80138ae <rcl_wait_set_resize+0x30a>
 80135ba:	f04f 0900 	mov.w	r9, #0
 80135be:	461f      	mov	r7, r3
 80135c0:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80135c4:	4688      	mov	r8, r1
 80135c6:	4616      	mov	r6, r2
 80135c8:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 80135cc:	f8c0 9004 	str.w	r9, [r0, #4]
 80135d0:	f8c4 9000 	str.w	r9, [r4]
 80135d4:	2900      	cmp	r1, #0
 80135d6:	f000 80bf 	beq.w	8013758 <rcl_wait_set_resize+0x1b4>
 80135da:	008c      	lsls	r4, r1, #2
 80135dc:	4652      	mov	r2, sl
 80135de:	6800      	ldr	r0, [r0, #0]
 80135e0:	4621      	mov	r1, r4
 80135e2:	9301      	str	r3, [sp, #4]
 80135e4:	4798      	blx	r3
 80135e6:	9b01      	ldr	r3, [sp, #4]
 80135e8:	6028      	str	r0, [r5, #0]
 80135ea:	2800      	cmp	r0, #0
 80135ec:	f000 80f6 	beq.w	80137dc <rcl_wait_set_resize+0x238>
 80135f0:	4622      	mov	r2, r4
 80135f2:	4649      	mov	r1, r9
 80135f4:	9301      	str	r3, [sp, #4]
 80135f6:	f009 fd5d 	bl	801d0b4 <memset>
 80135fa:	f8c5 8004 	str.w	r8, [r5, #4]
 80135fe:	4652      	mov	r2, sl
 8013600:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8013604:	4621      	mov	r1, r4
 8013606:	9b01      	ldr	r3, [sp, #4]
 8013608:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801360c:	f8c8 9004 	str.w	r9, [r8, #4]
 8013610:	4798      	blx	r3
 8013612:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013614:	f8c8 0008 	str.w	r0, [r8, #8]
 8013618:	689b      	ldr	r3, [r3, #8]
 801361a:	2b00      	cmp	r3, #0
 801361c:	f000 814a 	beq.w	80138b4 <rcl_wait_set_resize+0x310>
 8013620:	4622      	mov	r2, r4
 8013622:	4649      	mov	r1, r9
 8013624:	4618      	mov	r0, r3
 8013626:	f009 fd45 	bl	801d0b4 <memset>
 801362a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801362c:	f04f 0800 	mov.w	r8, #0
 8013630:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013634:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8013638:	f8c5 800c 	str.w	r8, [r5, #12]
 801363c:	f8c4 800c 	str.w	r8, [r4, #12]
 8013640:	2e00      	cmp	r6, #0
 8013642:	f040 809b 	bne.w	801377c <rcl_wait_set_resize+0x1d8>
 8013646:	68a8      	ldr	r0, [r5, #8]
 8013648:	b128      	cbz	r0, 8013656 <rcl_wait_set_resize+0xb2>
 801364a:	4649      	mov	r1, r9
 801364c:	4790      	blx	r2
 801364e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013650:	60ae      	str	r6, [r5, #8]
 8013652:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013656:	f04f 0800 	mov.w	r8, #0
 801365a:	19f6      	adds	r6, r6, r7
 801365c:	f8c4 8010 	str.w	r8, [r4, #16]
 8013660:	f040 80a2 	bne.w	80137a8 <rcl_wait_set_resize+0x204>
 8013664:	6960      	ldr	r0, [r4, #20]
 8013666:	b130      	cbz	r0, 8013676 <rcl_wait_set_resize+0xd2>
 8013668:	4649      	mov	r1, r9
 801366a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801366c:	4798      	blx	r3
 801366e:	6166      	str	r6, [r4, #20]
 8013670:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013672:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013676:	2600      	movs	r6, #0
 8013678:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801367c:	616e      	str	r6, [r5, #20]
 801367e:	6426      	str	r6, [r4, #64]	@ 0x40
 8013680:	2f00      	cmp	r7, #0
 8013682:	f040 80af 	bne.w	80137e4 <rcl_wait_set_resize+0x240>
 8013686:	6928      	ldr	r0, [r5, #16]
 8013688:	b138      	cbz	r0, 801369a <rcl_wait_set_resize+0xf6>
 801368a:	4649      	mov	r1, r9
 801368c:	47d0      	blx	sl
 801368e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013690:	612f      	str	r7, [r5, #16]
 8013692:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013696:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801369a:	2600      	movs	r6, #0
 801369c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801369e:	61ee      	str	r6, [r5, #28]
 80136a0:	61a6      	str	r6, [r4, #24]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	f040 8093 	bne.w	80137ce <rcl_wait_set_resize+0x22a>
 80136a8:	69a8      	ldr	r0, [r5, #24]
 80136aa:	b120      	cbz	r0, 80136b6 <rcl_wait_set_resize+0x112>
 80136ac:	4649      	mov	r1, r9
 80136ae:	47d0      	blx	sl
 80136b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80136b2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80136b4:	61ab      	str	r3, [r5, #24]
 80136b6:	6a20      	ldr	r0, [r4, #32]
 80136b8:	b128      	cbz	r0, 80136c6 <rcl_wait_set_resize+0x122>
 80136ba:	4649      	mov	r1, r9
 80136bc:	47d0      	blx	sl
 80136be:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80136c0:	2300      	movs	r3, #0
 80136c2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80136c6:	2600      	movs	r6, #0
 80136c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80136ca:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80136cc:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80136d0:	626e      	str	r6, [r5, #36]	@ 0x24
 80136d2:	6266      	str	r6, [r4, #36]	@ 0x24
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	f000 8098 	beq.w	801380a <rcl_wait_set_resize+0x266>
 80136da:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80136de:	463a      	mov	r2, r7
 80136e0:	6a28      	ldr	r0, [r5, #32]
 80136e2:	4651      	mov	r1, sl
 80136e4:	47c8      	blx	r9
 80136e6:	6228      	str	r0, [r5, #32]
 80136e8:	2800      	cmp	r0, #0
 80136ea:	d077      	beq.n	80137dc <rcl_wait_set_resize+0x238>
 80136ec:	4652      	mov	r2, sl
 80136ee:	4631      	mov	r1, r6
 80136f0:	f009 fce0 	bl	801d0b4 <memset>
 80136f4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80136f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80136f8:	463a      	mov	r2, r7
 80136fa:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80136fc:	4651      	mov	r1, sl
 80136fe:	626b      	str	r3, [r5, #36]	@ 0x24
 8013700:	62a6      	str	r6, [r4, #40]	@ 0x28
 8013702:	47c8      	blx	r9
 8013704:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013706:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8013708:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801370a:	2c00      	cmp	r4, #0
 801370c:	f000 80f2 	beq.w	80138f4 <rcl_wait_set_resize+0x350>
 8013710:	4620      	mov	r0, r4
 8013712:	4652      	mov	r2, sl
 8013714:	4631      	mov	r1, r6
 8013716:	f009 fccd 	bl	801d0b4 <memset>
 801371a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801371c:	2600      	movs	r6, #0
 801371e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013720:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013722:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8013726:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8013728:	6326      	str	r6, [r4, #48]	@ 0x30
 801372a:	2b00      	cmp	r3, #0
 801372c:	f040 8097 	bne.w	801385e <rcl_wait_set_resize+0x2ba>
 8013730:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013732:	b120      	cbz	r0, 801373e <rcl_wait_set_resize+0x19a>
 8013734:	4639      	mov	r1, r7
 8013736:	47c0      	blx	r8
 8013738:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801373a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801373c:	62ab      	str	r3, [r5, #40]	@ 0x28
 801373e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8013740:	2800      	cmp	r0, #0
 8013742:	d04c      	beq.n	80137de <rcl_wait_set_resize+0x23a>
 8013744:	4639      	mov	r1, r7
 8013746:	47c0      	blx	r8
 8013748:	2300      	movs	r3, #0
 801374a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801374c:	4618      	mov	r0, r3
 801374e:	e9c2 330d 	strd	r3, r3, [r2, #52]	@ 0x34
 8013752:	b003      	add	sp, #12
 8013754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013758:	6800      	ldr	r0, [r0, #0]
 801375a:	b120      	cbz	r0, 8013766 <rcl_wait_set_resize+0x1c2>
 801375c:	4651      	mov	r1, sl
 801375e:	47d8      	blx	fp
 8013760:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013762:	f8c5 8000 	str.w	r8, [r5]
 8013766:	68a0      	ldr	r0, [r4, #8]
 8013768:	2800      	cmp	r0, #0
 801376a:	f43f af5f 	beq.w	801362c <rcl_wait_set_resize+0x88>
 801376e:	4651      	mov	r1, sl
 8013770:	47d8      	blx	fp
 8013772:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013774:	2300      	movs	r3, #0
 8013776:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801377a:	e757      	b.n	801362c <rcl_wait_set_resize+0x88>
 801377c:	00b4      	lsls	r4, r6, #2
 801377e:	464a      	mov	r2, r9
 8013780:	68a8      	ldr	r0, [r5, #8]
 8013782:	4621      	mov	r1, r4
 8013784:	4798      	blx	r3
 8013786:	60a8      	str	r0, [r5, #8]
 8013788:	b340      	cbz	r0, 80137dc <rcl_wait_set_resize+0x238>
 801378a:	4622      	mov	r2, r4
 801378c:	4641      	mov	r1, r8
 801378e:	f009 fc91 	bl	801d0b4 <memset>
 8013792:	f04f 0800 	mov.w	r8, #0
 8013796:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013798:	60ee      	str	r6, [r5, #12]
 801379a:	19f6      	adds	r6, r6, r7
 801379c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80137a0:	f8c4 8010 	str.w	r8, [r4, #16]
 80137a4:	f43f af5e 	beq.w	8013664 <rcl_wait_set_resize+0xc0>
 80137a8:	00b6      	lsls	r6, r6, #2
 80137aa:	464a      	mov	r2, r9
 80137ac:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80137ae:	6960      	ldr	r0, [r4, #20]
 80137b0:	4631      	mov	r1, r6
 80137b2:	4798      	blx	r3
 80137b4:	4681      	mov	r9, r0
 80137b6:	6160      	str	r0, [r4, #20]
 80137b8:	2800      	cmp	r0, #0
 80137ba:	f000 8084 	beq.w	80138c6 <rcl_wait_set_resize+0x322>
 80137be:	4632      	mov	r2, r6
 80137c0:	4641      	mov	r1, r8
 80137c2:	f009 fc77 	bl	801d0b4 <memset>
 80137c6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80137c8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80137cc:	e753      	b.n	8013676 <rcl_wait_set_resize+0xd2>
 80137ce:	009c      	lsls	r4, r3, #2
 80137d0:	464a      	mov	r2, r9
 80137d2:	69a8      	ldr	r0, [r5, #24]
 80137d4:	4621      	mov	r1, r4
 80137d6:	47c0      	blx	r8
 80137d8:	61a8      	str	r0, [r5, #24]
 80137da:	bb40      	cbnz	r0, 801382e <rcl_wait_set_resize+0x28a>
 80137dc:	200a      	movs	r0, #10
 80137de:	b003      	add	sp, #12
 80137e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137e4:	00bc      	lsls	r4, r7, #2
 80137e6:	464a      	mov	r2, r9
 80137e8:	6928      	ldr	r0, [r5, #16]
 80137ea:	4621      	mov	r1, r4
 80137ec:	47c0      	blx	r8
 80137ee:	6128      	str	r0, [r5, #16]
 80137f0:	2800      	cmp	r0, #0
 80137f2:	d0f3      	beq.n	80137dc <rcl_wait_set_resize+0x238>
 80137f4:	4622      	mov	r2, r4
 80137f6:	4631      	mov	r1, r6
 80137f8:	f009 fc5c 	bl	801d0b4 <memset>
 80137fc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80137fe:	616f      	str	r7, [r5, #20]
 8013800:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013804:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8013808:	e747      	b.n	801369a <rcl_wait_set_resize+0xf6>
 801380a:	6a28      	ldr	r0, [r5, #32]
 801380c:	b120      	cbz	r0, 8013818 <rcl_wait_set_resize+0x274>
 801380e:	4639      	mov	r1, r7
 8013810:	47c0      	blx	r8
 8013812:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013814:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013816:	622b      	str	r3, [r5, #32]
 8013818:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801381a:	2800      	cmp	r0, #0
 801381c:	f43f af7e 	beq.w	801371c <rcl_wait_set_resize+0x178>
 8013820:	4639      	mov	r1, r7
 8013822:	47c0      	blx	r8
 8013824:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013826:	2300      	movs	r3, #0
 8013828:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801382c:	e776      	b.n	801371c <rcl_wait_set_resize+0x178>
 801382e:	4622      	mov	r2, r4
 8013830:	4631      	mov	r1, r6
 8013832:	f009 fc3f 	bl	801d0b4 <memset>
 8013836:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8013838:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801383a:	464a      	mov	r2, r9
 801383c:	6a38      	ldr	r0, [r7, #32]
 801383e:	4621      	mov	r1, r4
 8013840:	61eb      	str	r3, [r5, #28]
 8013842:	61fe      	str	r6, [r7, #28]
 8013844:	47c0      	blx	r8
 8013846:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013848:	6238      	str	r0, [r7, #32]
 801384a:	6a1f      	ldr	r7, [r3, #32]
 801384c:	2f00      	cmp	r7, #0
 801384e:	d04a      	beq.n	80138e6 <rcl_wait_set_resize+0x342>
 8013850:	4622      	mov	r2, r4
 8013852:	4631      	mov	r1, r6
 8013854:	4638      	mov	r0, r7
 8013856:	f009 fc2d 	bl	801d0b4 <memset>
 801385a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801385c:	e733      	b.n	80136c6 <rcl_wait_set_resize+0x122>
 801385e:	009c      	lsls	r4, r3, #2
 8013860:	463a      	mov	r2, r7
 8013862:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013864:	4621      	mov	r1, r4
 8013866:	47c8      	blx	r9
 8013868:	62a8      	str	r0, [r5, #40]	@ 0x28
 801386a:	2800      	cmp	r0, #0
 801386c:	d0b6      	beq.n	80137dc <rcl_wait_set_resize+0x238>
 801386e:	4622      	mov	r2, r4
 8013870:	4631      	mov	r1, r6
 8013872:	f009 fc1f 	bl	801d0b4 <memset>
 8013876:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801387a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801387c:	463a      	mov	r2, r7
 801387e:	4621      	mov	r1, r4
 8013880:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8013884:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8013886:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801388a:	47c8      	blx	r9
 801388c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801388e:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8013892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013894:	2b00      	cmp	r3, #0
 8013896:	d034      	beq.n	8013902 <rcl_wait_set_resize+0x35e>
 8013898:	4622      	mov	r2, r4
 801389a:	4631      	mov	r1, r6
 801389c:	4618      	mov	r0, r3
 801389e:	f009 fc09 	bl	801d0b4 <memset>
 80138a2:	4630      	mov	r0, r6
 80138a4:	b003      	add	sp, #12
 80138a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138aa:	200b      	movs	r0, #11
 80138ac:	4770      	bx	lr
 80138ae:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80138b2:	e794      	b.n	80137de <rcl_wait_set_resize+0x23a>
 80138b4:	6828      	ldr	r0, [r5, #0]
 80138b6:	4651      	mov	r1, sl
 80138b8:	9301      	str	r3, [sp, #4]
 80138ba:	47d8      	blx	fp
 80138bc:	9b01      	ldr	r3, [sp, #4]
 80138be:	200a      	movs	r0, #10
 80138c0:	e9c5 3300 	strd	r3, r3, [r5]
 80138c4:	e78b      	b.n	80137de <rcl_wait_set_resize+0x23a>
 80138c6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80138c8:	68a8      	ldr	r0, [r5, #8]
 80138ca:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80138cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80138ce:	4798      	blx	r3
 80138d0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80138d2:	6928      	ldr	r0, [r5, #16]
 80138d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80138d6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80138d8:	e9c5 9902 	strd	r9, r9, [r5, #8]
 80138dc:	4790      	blx	r2
 80138de:	200a      	movs	r0, #10
 80138e0:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80138e4:	e77b      	b.n	80137de <rcl_wait_set_resize+0x23a>
 80138e6:	69a8      	ldr	r0, [r5, #24]
 80138e8:	4649      	mov	r1, r9
 80138ea:	47d0      	blx	sl
 80138ec:	200a      	movs	r0, #10
 80138ee:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80138f2:	e774      	b.n	80137de <rcl_wait_set_resize+0x23a>
 80138f4:	6a28      	ldr	r0, [r5, #32]
 80138f6:	4639      	mov	r1, r7
 80138f8:	47c0      	blx	r8
 80138fa:	200a      	movs	r0, #10
 80138fc:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8013900:	e76d      	b.n	80137de <rcl_wait_set_resize+0x23a>
 8013902:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013904:	4639      	mov	r1, r7
 8013906:	9301      	str	r3, [sp, #4]
 8013908:	47c0      	blx	r8
 801390a:	9b01      	ldr	r3, [sp, #4]
 801390c:	200a      	movs	r0, #10
 801390e:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8013912:	e764      	b.n	80137de <rcl_wait_set_resize+0x23a>

08013914 <rcl_wait_set_init>:
 8013914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013918:	b085      	sub	sp, #20
 801391a:	4605      	mov	r5, r0
 801391c:	460e      	mov	r6, r1
 801391e:	4617      	mov	r7, r2
 8013920:	a812      	add	r0, sp, #72	@ 0x48
 8013922:	4698      	mov	r8, r3
 8013924:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 8013928:	f7fd fa82 	bl	8010e30 <rcutils_allocator_is_valid>
 801392c:	2d00      	cmp	r5, #0
 801392e:	d072      	beq.n	8013a16 <rcl_wait_set_init+0x102>
 8013930:	f080 0001 	eor.w	r0, r0, #1
 8013934:	b2c0      	uxtb	r0, r0
 8013936:	2800      	cmp	r0, #0
 8013938:	d16d      	bne.n	8013a16 <rcl_wait_set_init+0x102>
 801393a:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801393e:	f1ba 0f00 	cmp.w	sl, #0
 8013942:	d004      	beq.n	801394e <rcl_wait_set_init+0x3a>
 8013944:	2464      	movs	r4, #100	@ 0x64
 8013946:	4620      	mov	r0, r4
 8013948:	b005      	add	sp, #20
 801394a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801394e:	f1b9 0f00 	cmp.w	r9, #0
 8013952:	d060      	beq.n	8013a16 <rcl_wait_set_init+0x102>
 8013954:	4648      	mov	r0, r9
 8013956:	f7fe f937 	bl	8011bc8 <rcl_context_is_valid>
 801395a:	2800      	cmp	r0, #0
 801395c:	d068      	beq.n	8013a30 <rcl_wait_set_init+0x11c>
 801395e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013960:	205c      	movs	r0, #92	@ 0x5c
 8013962:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8013964:	4798      	blx	r3
 8013966:	6328      	str	r0, [r5, #48]	@ 0x30
 8013968:	2800      	cmp	r0, #0
 801396a:	d063      	beq.n	8013a34 <rcl_wait_set_init+0x120>
 801396c:	225c      	movs	r2, #92	@ 0x5c
 801396e:	4651      	mov	r1, sl
 8013970:	f009 fba0 	bl	801d0b4 <memset>
 8013974:	ac12      	add	r4, sp, #72	@ 0x48
 8013976:	f8d5 b030 	ldr.w	fp, [r5, #48]	@ 0x30
 801397a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801397e:	f10b 0c48 	add.w	ip, fp, #72	@ 0x48
 8013982:	f8cb 9044 	str.w	r9, [fp, #68]	@ 0x44
 8013986:	eb03 0e02 	add.w	lr, r3, r2
 801398a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801398c:	f8d9 9000 	ldr.w	r9, [r9]
 8013990:	449e      	add	lr, r3
 8013992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013994:	e9cb aa01 	strd	sl, sl, [fp, #4]
 8013998:	e9cb aa04 	strd	sl, sl, [fp, #16]
 801399c:	e9cb aa07 	strd	sl, sl, [fp, #28]
 80139a0:	e9cb aa0a 	strd	sl, sl, [fp, #40]	@ 0x28
 80139a4:	e9cb aa0d 	strd	sl, sl, [fp, #52]	@ 0x34
 80139a8:	44be      	add	lr, r7
 80139aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80139ae:	6823      	ldr	r3, [r4, #0]
 80139b0:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 80139b4:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 80139b8:	f8cc 3000 	str.w	r3, [ip]
 80139bc:	f002 ffee 	bl	801699c <rmw_create_wait_set>
 80139c0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80139c2:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 80139c6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80139c8:	b350      	cbz	r0, 8013a20 <rcl_wait_set_init+0x10c>
 80139ca:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80139cc:	4643      	mov	r3, r8
 80139ce:	463a      	mov	r2, r7
 80139d0:	4631      	mov	r1, r6
 80139d2:	9402      	str	r4, [sp, #8]
 80139d4:	4628      	mov	r0, r5
 80139d6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80139d8:	9401      	str	r4, [sp, #4]
 80139da:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80139dc:	9400      	str	r4, [sp, #0]
 80139de:	f7ff fde1 	bl	80135a4 <rcl_wait_set_resize>
 80139e2:	4604      	mov	r4, r0
 80139e4:	2800      	cmp	r0, #0
 80139e6:	d0ae      	beq.n	8013946 <rcl_wait_set_init+0x32>
 80139e8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80139ea:	bb2b      	cbnz	r3, 8013a38 <rcl_wait_set_init+0x124>
 80139ec:	2600      	movs	r6, #0
 80139ee:	4628      	mov	r0, r5
 80139f0:	4633      	mov	r3, r6
 80139f2:	4632      	mov	r2, r6
 80139f4:	4631      	mov	r1, r6
 80139f6:	9600      	str	r6, [sp, #0]
 80139f8:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80139fc:	f7ff fdd2 	bl	80135a4 <rcl_wait_set_resize>
 8013a00:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8013a02:	2800      	cmp	r0, #0
 8013a04:	d09f      	beq.n	8013946 <rcl_wait_set_init+0x32>
 8013a06:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8013a08:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8013a0a:	4798      	blx	r3
 8013a0c:	4620      	mov	r0, r4
 8013a0e:	632e      	str	r6, [r5, #48]	@ 0x30
 8013a10:	b005      	add	sp, #20
 8013a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a16:	240b      	movs	r4, #11
 8013a18:	4620      	mov	r0, r4
 8013a1a:	b005      	add	sp, #20
 8013a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a20:	2401      	movs	r4, #1
 8013a22:	f002 ffc5 	bl	80169b0 <rmw_destroy_wait_set>
 8013a26:	2800      	cmp	r0, #0
 8013a28:	bf18      	it	ne
 8013a2a:	f44f 7461 	movne.w	r4, #900	@ 0x384
 8013a2e:	e7dd      	b.n	80139ec <rcl_wait_set_init+0xd8>
 8013a30:	2465      	movs	r4, #101	@ 0x65
 8013a32:	e788      	b.n	8013946 <rcl_wait_set_init+0x32>
 8013a34:	240a      	movs	r4, #10
 8013a36:	e786      	b.n	8013946 <rcl_wait_set_init+0x32>
 8013a38:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8013a3a:	e7f2      	b.n	8013a22 <rcl_wait_set_init+0x10e>

08013a3c <rcl_wait_set_add_guard_condition>:
 8013a3c:	b318      	cbz	r0, 8013a86 <rcl_wait_set_add_guard_condition+0x4a>
 8013a3e:	b538      	push	{r3, r4, r5, lr}
 8013a40:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013a42:	4604      	mov	r4, r0
 8013a44:	b30b      	cbz	r3, 8013a8a <rcl_wait_set_add_guard_condition+0x4e>
 8013a46:	b319      	cbz	r1, 8013a90 <rcl_wait_set_add_guard_condition+0x54>
 8013a48:	68dd      	ldr	r5, [r3, #12]
 8013a4a:	68c0      	ldr	r0, [r0, #12]
 8013a4c:	4285      	cmp	r5, r0
 8013a4e:	d217      	bcs.n	8013a80 <rcl_wait_set_add_guard_condition+0x44>
 8013a50:	1c68      	adds	r0, r5, #1
 8013a52:	60d8      	str	r0, [r3, #12]
 8013a54:	68a3      	ldr	r3, [r4, #8]
 8013a56:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8013a5a:	b102      	cbz	r2, 8013a5e <rcl_wait_set_add_guard_condition+0x22>
 8013a5c:	6015      	str	r5, [r2, #0]
 8013a5e:	4608      	mov	r0, r1
 8013a60:	f007 fd52 	bl	801b508 <rcl_guard_condition_get_rmw_handle>
 8013a64:	b150      	cbz	r0, 8013a7c <rcl_wait_set_add_guard_condition+0x40>
 8013a66:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013a68:	6842      	ldr	r2, [r0, #4]
 8013a6a:	2000      	movs	r0, #0
 8013a6c:	695b      	ldr	r3, [r3, #20]
 8013a6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013a72:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013a74:	6913      	ldr	r3, [r2, #16]
 8013a76:	3301      	adds	r3, #1
 8013a78:	6113      	str	r3, [r2, #16]
 8013a7a:	bd38      	pop	{r3, r4, r5, pc}
 8013a7c:	2001      	movs	r0, #1
 8013a7e:	bd38      	pop	{r3, r4, r5, pc}
 8013a80:	f240 3086 	movw	r0, #902	@ 0x386
 8013a84:	bd38      	pop	{r3, r4, r5, pc}
 8013a86:	200b      	movs	r0, #11
 8013a88:	4770      	bx	lr
 8013a8a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013a8e:	bd38      	pop	{r3, r4, r5, pc}
 8013a90:	200b      	movs	r0, #11
 8013a92:	bd38      	pop	{r3, r4, r5, pc}

08013a94 <rcl_wait_set_add_timer>:
 8013a94:	b328      	cbz	r0, 8013ae2 <rcl_wait_set_add_timer+0x4e>
 8013a96:	b538      	push	{r3, r4, r5, lr}
 8013a98:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013a9a:	4604      	mov	r4, r0
 8013a9c:	b31b      	cbz	r3, 8013ae6 <rcl_wait_set_add_timer+0x52>
 8013a9e:	b329      	cbz	r1, 8013aec <rcl_wait_set_add_timer+0x58>
 8013aa0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8013aa2:	6965      	ldr	r5, [r4, #20]
 8013aa4:	42a8      	cmp	r0, r5
 8013aa6:	d219      	bcs.n	8013adc <rcl_wait_set_add_timer+0x48>
 8013aa8:	1c45      	adds	r5, r0, #1
 8013aaa:	641d      	str	r5, [r3, #64]	@ 0x40
 8013aac:	6923      	ldr	r3, [r4, #16]
 8013aae:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8013ab2:	b102      	cbz	r2, 8013ab6 <rcl_wait_set_add_timer+0x22>
 8013ab4:	6010      	str	r0, [r2, #0]
 8013ab6:	4608      	mov	r0, r1
 8013ab8:	f7ff fb9a 	bl	80131f0 <rcl_timer_get_guard_condition>
 8013abc:	b168      	cbz	r0, 8013ada <rcl_wait_set_add_timer+0x46>
 8013abe:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013ac0:	68e3      	ldr	r3, [r4, #12]
 8013ac2:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8013ac4:	3b01      	subs	r3, #1
 8013ac6:	441d      	add	r5, r3
 8013ac8:	f007 fd1e 	bl	801b508 <rcl_guard_condition_get_rmw_handle>
 8013acc:	b180      	cbz	r0, 8013af0 <rcl_wait_set_add_timer+0x5c>
 8013ace:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013ad0:	6842      	ldr	r2, [r0, #4]
 8013ad2:	2000      	movs	r0, #0
 8013ad4:	695b      	ldr	r3, [r3, #20]
 8013ad6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013ada:	bd38      	pop	{r3, r4, r5, pc}
 8013adc:	f240 3086 	movw	r0, #902	@ 0x386
 8013ae0:	bd38      	pop	{r3, r4, r5, pc}
 8013ae2:	200b      	movs	r0, #11
 8013ae4:	4770      	bx	lr
 8013ae6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013aea:	bd38      	pop	{r3, r4, r5, pc}
 8013aec:	200b      	movs	r0, #11
 8013aee:	bd38      	pop	{r3, r4, r5, pc}
 8013af0:	2001      	movs	r0, #1
 8013af2:	bd38      	pop	{r3, r4, r5, pc}

08013af4 <rcl_wait_set_add_client>:
 8013af4:	b318      	cbz	r0, 8013b3e <rcl_wait_set_add_client+0x4a>
 8013af6:	b538      	push	{r3, r4, r5, lr}
 8013af8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013afa:	4604      	mov	r4, r0
 8013afc:	b30b      	cbz	r3, 8013b42 <rcl_wait_set_add_client+0x4e>
 8013afe:	b319      	cbz	r1, 8013b48 <rcl_wait_set_add_client+0x54>
 8013b00:	699d      	ldr	r5, [r3, #24]
 8013b02:	69c0      	ldr	r0, [r0, #28]
 8013b04:	4285      	cmp	r5, r0
 8013b06:	d217      	bcs.n	8013b38 <rcl_wait_set_add_client+0x44>
 8013b08:	1c68      	adds	r0, r5, #1
 8013b0a:	6198      	str	r0, [r3, #24]
 8013b0c:	69a3      	ldr	r3, [r4, #24]
 8013b0e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8013b12:	b102      	cbz	r2, 8013b16 <rcl_wait_set_add_client+0x22>
 8013b14:	6015      	str	r5, [r2, #0]
 8013b16:	4608      	mov	r0, r1
 8013b18:	f7fd ffba 	bl	8011a90 <rcl_client_get_rmw_handle>
 8013b1c:	b150      	cbz	r0, 8013b34 <rcl_wait_set_add_client+0x40>
 8013b1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013b20:	6842      	ldr	r2, [r0, #4]
 8013b22:	2000      	movs	r0, #0
 8013b24:	6a1b      	ldr	r3, [r3, #32]
 8013b26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013b2a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013b2c:	69d3      	ldr	r3, [r2, #28]
 8013b2e:	3301      	adds	r3, #1
 8013b30:	61d3      	str	r3, [r2, #28]
 8013b32:	bd38      	pop	{r3, r4, r5, pc}
 8013b34:	2001      	movs	r0, #1
 8013b36:	bd38      	pop	{r3, r4, r5, pc}
 8013b38:	f240 3086 	movw	r0, #902	@ 0x386
 8013b3c:	bd38      	pop	{r3, r4, r5, pc}
 8013b3e:	200b      	movs	r0, #11
 8013b40:	4770      	bx	lr
 8013b42:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013b46:	bd38      	pop	{r3, r4, r5, pc}
 8013b48:	200b      	movs	r0, #11
 8013b4a:	bd38      	pop	{r3, r4, r5, pc}

08013b4c <rcl_wait_set_add_service>:
 8013b4c:	b318      	cbz	r0, 8013b96 <rcl_wait_set_add_service+0x4a>
 8013b4e:	b538      	push	{r3, r4, r5, lr}
 8013b50:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013b52:	4604      	mov	r4, r0
 8013b54:	b30b      	cbz	r3, 8013b9a <rcl_wait_set_add_service+0x4e>
 8013b56:	b319      	cbz	r1, 8013ba0 <rcl_wait_set_add_service+0x54>
 8013b58:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8013b5a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8013b5c:	4285      	cmp	r5, r0
 8013b5e:	d217      	bcs.n	8013b90 <rcl_wait_set_add_service+0x44>
 8013b60:	1c68      	adds	r0, r5, #1
 8013b62:	6258      	str	r0, [r3, #36]	@ 0x24
 8013b64:	6a23      	ldr	r3, [r4, #32]
 8013b66:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8013b6a:	b102      	cbz	r2, 8013b6e <rcl_wait_set_add_service+0x22>
 8013b6c:	6015      	str	r5, [r2, #0]
 8013b6e:	4608      	mov	r0, r1
 8013b70:	f7fe ffe2 	bl	8012b38 <rcl_service_get_rmw_handle>
 8013b74:	b150      	cbz	r0, 8013b8c <rcl_wait_set_add_service+0x40>
 8013b76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013b78:	6842      	ldr	r2, [r0, #4]
 8013b7a:	2000      	movs	r0, #0
 8013b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013b82:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013b84:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8013b86:	3301      	adds	r3, #1
 8013b88:	6293      	str	r3, [r2, #40]	@ 0x28
 8013b8a:	bd38      	pop	{r3, r4, r5, pc}
 8013b8c:	2001      	movs	r0, #1
 8013b8e:	bd38      	pop	{r3, r4, r5, pc}
 8013b90:	f240 3086 	movw	r0, #902	@ 0x386
 8013b94:	bd38      	pop	{r3, r4, r5, pc}
 8013b96:	200b      	movs	r0, #11
 8013b98:	4770      	bx	lr
 8013b9a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013b9e:	bd38      	pop	{r3, r4, r5, pc}
 8013ba0:	200b      	movs	r0, #11
 8013ba2:	bd38      	pop	{r3, r4, r5, pc}
 8013ba4:	0000      	movs	r0, r0
	...

08013ba8 <rcl_wait>:
 8013ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bac:	ed2d 8b02 	vpush	{d8}
 8013bb0:	b08d      	sub	sp, #52	@ 0x34
 8013bb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013bb6:	2800      	cmp	r0, #0
 8013bb8:	f000 814f 	beq.w	8013e5a <rcl_wait+0x2b2>
 8013bbc:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8013bbe:	4605      	mov	r5, r0
 8013bc0:	2e00      	cmp	r6, #0
 8013bc2:	f000 811a 	beq.w	8013dfa <rcl_wait+0x252>
 8013bc6:	6843      	ldr	r3, [r0, #4]
 8013bc8:	b983      	cbnz	r3, 8013bec <rcl_wait+0x44>
 8013bca:	68eb      	ldr	r3, [r5, #12]
 8013bcc:	b973      	cbnz	r3, 8013bec <rcl_wait+0x44>
 8013bce:	696b      	ldr	r3, [r5, #20]
 8013bd0:	b963      	cbnz	r3, 8013bec <rcl_wait+0x44>
 8013bd2:	69eb      	ldr	r3, [r5, #28]
 8013bd4:	b953      	cbnz	r3, 8013bec <rcl_wait+0x44>
 8013bd6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8013bd8:	b943      	cbnz	r3, 8013bec <rcl_wait+0x44>
 8013bda:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8013bdc:	b933      	cbnz	r3, 8013bec <rcl_wait+0x44>
 8013bde:	f240 3085 	movw	r0, #901	@ 0x385
 8013be2:	b00d      	add	sp, #52	@ 0x34
 8013be4:	ecbd 8b02 	vpop	{d8}
 8013be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bec:	9b04      	ldr	r3, [sp, #16]
 8013bee:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8013bf0:	2b01      	cmp	r3, #1
 8013bf2:	9b05      	ldr	r3, [sp, #20]
 8013bf4:	f173 0300 	sbcs.w	r3, r3, #0
 8013bf8:	f2c0 80f8 	blt.w	8013dec <rcl_wait+0x244>
 8013bfc:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8013c00:	2a00      	cmp	r2, #0
 8013c02:	f000 810f 	beq.w	8013e24 <rcl_wait+0x27c>
 8013c06:	2400      	movs	r4, #0
 8013c08:	4613      	mov	r3, r2
 8013c0a:	f240 3921 	movw	r9, #801	@ 0x321
 8013c0e:	4632      	mov	r2, r6
 8013c10:	46a2      	mov	sl, r4
 8013c12:	46a3      	mov	fp, r4
 8013c14:	ed9f 8b98 	vldr	d8, [pc, #608]	@ 8013e78 <rcl_wait+0x2d0>
 8013c18:	e014      	b.n	8013c44 <rcl_wait+0x9c>
 8013c1a:	2800      	cmp	r0, #0
 8013c1c:	d1e1      	bne.n	8013be2 <rcl_wait+0x3a>
 8013c1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013c22:	4542      	cmp	r2, r8
 8013c24:	eb73 0107 	sbcs.w	r1, r3, r7
 8013c28:	da03      	bge.n	8013c32 <rcl_wait+0x8a>
 8013c2a:	4690      	mov	r8, r2
 8013c2c:	461f      	mov	r7, r3
 8013c2e:	f04f 0b01 	mov.w	fp, #1
 8013c32:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8013c34:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013c36:	3401      	adds	r4, #1
 8013c38:	f14a 0a00 	adc.w	sl, sl, #0
 8013c3c:	429c      	cmp	r4, r3
 8013c3e:	f17a 0100 	sbcs.w	r1, sl, #0
 8013c42:	d228      	bcs.n	8013c96 <rcl_wait+0xee>
 8013c44:	6928      	ldr	r0, [r5, #16]
 8013c46:	a908      	add	r1, sp, #32
 8013c48:	00a6      	lsls	r6, r4, #2
 8013c4a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013c4e:	2800      	cmp	r0, #0
 8013c50:	d0f1      	beq.n	8013c36 <rcl_wait+0x8e>
 8013c52:	68eb      	ldr	r3, [r5, #12]
 8013c54:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8013c58:	4423      	add	r3, r4
 8013c5a:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8013c5e:	f1be 0f00 	cmp.w	lr, #0
 8013c62:	d006      	beq.n	8013c72 <rcl_wait+0xca>
 8013c64:	6913      	ldr	r3, [r2, #16]
 8013c66:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8013c6a:	3301      	adds	r3, #1
 8013c6c:	6113      	str	r3, [r2, #16]
 8013c6e:	692b      	ldr	r3, [r5, #16]
 8013c70:	5998      	ldr	r0, [r3, r6]
 8013c72:	ed8d 8b08 	vstr	d8, [sp, #32]
 8013c76:	f7ff fa89 	bl	801318c <rcl_timer_get_time_until_next_call>
 8013c7a:	4548      	cmp	r0, r9
 8013c7c:	d1cd      	bne.n	8013c1a <rcl_wait+0x72>
 8013c7e:	692b      	ldr	r3, [r5, #16]
 8013c80:	2200      	movs	r2, #0
 8013c82:	3401      	adds	r4, #1
 8013c84:	519a      	str	r2, [r3, r6]
 8013c86:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8013c88:	f14a 0a00 	adc.w	sl, sl, #0
 8013c8c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013c8e:	429c      	cmp	r4, r3
 8013c90:	f17a 0100 	sbcs.w	r1, sl, #0
 8013c94:	d3d6      	bcc.n	8013c44 <rcl_wait+0x9c>
 8013c96:	4659      	mov	r1, fp
 8013c98:	4616      	mov	r6, r2
 8013c9a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013c9e:	4313      	orrs	r3, r2
 8013ca0:	f040 80b4 	bne.w	8013e0c <rcl_wait+0x264>
 8013ca4:	2300      	movs	r3, #0
 8013ca6:	2200      	movs	r2, #0
 8013ca8:	460c      	mov	r4, r1
 8013caa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013cae:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8013cb2:	ab08      	add	r3, sp, #32
 8013cb4:	9302      	str	r3, [sp, #8]
 8013cb6:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8013cba:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8013cbc:	f106 0110 	add.w	r1, r6, #16
 8013cc0:	9300      	str	r3, [sp, #0]
 8013cc2:	1d30      	adds	r0, r6, #4
 8013cc4:	f106 031c 	add.w	r3, r6, #28
 8013cc8:	9201      	str	r2, [sp, #4]
 8013cca:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8013cce:	f002 fd01 	bl	80166d4 <rmw_wait>
 8013cd2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013cd4:	4680      	mov	r8, r0
 8013cd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013cd8:	b1e2      	cbz	r2, 8013d14 <rcl_wait+0x16c>
 8013cda:	f04f 0900 	mov.w	r9, #0
 8013cde:	464f      	mov	r7, r9
 8013ce0:	692a      	ldr	r2, [r5, #16]
 8013ce2:	f10d 011f 	add.w	r1, sp, #31
 8013ce6:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8013cea:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8013cee:	b160      	cbz	r0, 8013d0a <rcl_wait+0x162>
 8013cf0:	f88d 701f 	strb.w	r7, [sp, #31]
 8013cf4:	f7ff fa0e 	bl	8013114 <rcl_timer_is_ready>
 8013cf8:	2800      	cmp	r0, #0
 8013cfa:	f47f af72 	bne.w	8013be2 <rcl_wait+0x3a>
 8013cfe:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013d02:	b90b      	cbnz	r3, 8013d08 <rcl_wait+0x160>
 8013d04:	692a      	ldr	r2, [r5, #16]
 8013d06:	5193      	str	r3, [r2, r6]
 8013d08:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013d0a:	f109 0901 	add.w	r9, r9, #1
 8013d0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013d10:	454a      	cmp	r2, r9
 8013d12:	d8e5      	bhi.n	8013ce0 <rcl_wait+0x138>
 8013d14:	f038 0002 	bics.w	r0, r8, #2
 8013d18:	d176      	bne.n	8013e08 <rcl_wait+0x260>
 8013d1a:	686f      	ldr	r7, [r5, #4]
 8013d1c:	b17f      	cbz	r7, 8013d3e <rcl_wait+0x196>
 8013d1e:	4602      	mov	r2, r0
 8013d20:	e002      	b.n	8013d28 <rcl_wait+0x180>
 8013d22:	3201      	adds	r2, #1
 8013d24:	42ba      	cmp	r2, r7
 8013d26:	d00a      	beq.n	8013d3e <rcl_wait+0x196>
 8013d28:	6899      	ldr	r1, [r3, #8]
 8013d2a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013d2e:	2900      	cmp	r1, #0
 8013d30:	d1f7      	bne.n	8013d22 <rcl_wait+0x17a>
 8013d32:	682e      	ldr	r6, [r5, #0]
 8013d34:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8013d38:	3201      	adds	r2, #1
 8013d3a:	42ba      	cmp	r2, r7
 8013d3c:	d1f4      	bne.n	8013d28 <rcl_wait+0x180>
 8013d3e:	68ef      	ldr	r7, [r5, #12]
 8013d40:	b17f      	cbz	r7, 8013d62 <rcl_wait+0x1ba>
 8013d42:	2200      	movs	r2, #0
 8013d44:	e002      	b.n	8013d4c <rcl_wait+0x1a4>
 8013d46:	3201      	adds	r2, #1
 8013d48:	42ba      	cmp	r2, r7
 8013d4a:	d00a      	beq.n	8013d62 <rcl_wait+0x1ba>
 8013d4c:	6959      	ldr	r1, [r3, #20]
 8013d4e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013d52:	2900      	cmp	r1, #0
 8013d54:	d1f7      	bne.n	8013d46 <rcl_wait+0x19e>
 8013d56:	68ae      	ldr	r6, [r5, #8]
 8013d58:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8013d5c:	3201      	adds	r2, #1
 8013d5e:	42ba      	cmp	r2, r7
 8013d60:	d1f4      	bne.n	8013d4c <rcl_wait+0x1a4>
 8013d62:	69ef      	ldr	r7, [r5, #28]
 8013d64:	b17f      	cbz	r7, 8013d86 <rcl_wait+0x1de>
 8013d66:	2200      	movs	r2, #0
 8013d68:	e002      	b.n	8013d70 <rcl_wait+0x1c8>
 8013d6a:	3201      	adds	r2, #1
 8013d6c:	42ba      	cmp	r2, r7
 8013d6e:	d00a      	beq.n	8013d86 <rcl_wait+0x1de>
 8013d70:	6a19      	ldr	r1, [r3, #32]
 8013d72:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013d76:	2900      	cmp	r1, #0
 8013d78:	d1f7      	bne.n	8013d6a <rcl_wait+0x1c2>
 8013d7a:	69ae      	ldr	r6, [r5, #24]
 8013d7c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8013d80:	3201      	adds	r2, #1
 8013d82:	42ba      	cmp	r2, r7
 8013d84:	d1f4      	bne.n	8013d70 <rcl_wait+0x1c8>
 8013d86:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 8013d88:	b17f      	cbz	r7, 8013daa <rcl_wait+0x202>
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	e002      	b.n	8013d94 <rcl_wait+0x1ec>
 8013d8e:	3201      	adds	r2, #1
 8013d90:	42ba      	cmp	r2, r7
 8013d92:	d00a      	beq.n	8013daa <rcl_wait+0x202>
 8013d94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8013d96:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013d9a:	2900      	cmp	r1, #0
 8013d9c:	d1f7      	bne.n	8013d8e <rcl_wait+0x1e6>
 8013d9e:	6a2e      	ldr	r6, [r5, #32]
 8013da0:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8013da4:	3201      	adds	r2, #1
 8013da6:	42ba      	cmp	r2, r7
 8013da8:	d1f4      	bne.n	8013d94 <rcl_wait+0x1ec>
 8013daa:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 8013dac:	b17f      	cbz	r7, 8013dce <rcl_wait+0x226>
 8013dae:	2200      	movs	r2, #0
 8013db0:	e002      	b.n	8013db8 <rcl_wait+0x210>
 8013db2:	3201      	adds	r2, #1
 8013db4:	42ba      	cmp	r2, r7
 8013db6:	d00a      	beq.n	8013dce <rcl_wait+0x226>
 8013db8:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8013dba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013dbe:	2900      	cmp	r1, #0
 8013dc0:	d1f7      	bne.n	8013db2 <rcl_wait+0x20a>
 8013dc2:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 8013dc4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8013dc8:	3201      	adds	r2, #1
 8013dca:	42ba      	cmp	r2, r7
 8013dcc:	d1f4      	bne.n	8013db8 <rcl_wait+0x210>
 8013dce:	f1b8 0f02 	cmp.w	r8, #2
 8013dd2:	f47f af06 	bne.w	8013be2 <rcl_wait+0x3a>
 8013dd6:	f084 0301 	eor.w	r3, r4, #1
 8013dda:	b2db      	uxtb	r3, r3
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	bf18      	it	ne
 8013de0:	2002      	movne	r0, #2
 8013de2:	b00d      	add	sp, #52	@ 0x34
 8013de4:	ecbd 8b02 	vpop	{d8}
 8013de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dec:	2a00      	cmp	r2, #0
 8013dee:	d03a      	beq.n	8013e66 <rcl_wait+0x2be>
 8013df0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8013df4:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8013df8:	e705      	b.n	8013c06 <rcl_wait+0x5e>
 8013dfa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013dfe:	b00d      	add	sp, #52	@ 0x34
 8013e00:	ecbd 8b02 	vpop	{d8}
 8013e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e08:	2001      	movs	r0, #1
 8013e0a:	e6ea      	b.n	8013be2 <rcl_wait+0x3a>
 8013e0c:	9b04      	ldr	r3, [sp, #16]
 8013e0e:	460c      	mov	r4, r1
 8013e10:	2b01      	cmp	r3, #1
 8013e12:	9b05      	ldr	r3, [sp, #20]
 8013e14:	f173 0300 	sbcs.w	r3, r3, #0
 8013e18:	bfa8      	it	ge
 8013e1a:	f044 0401 	orrge.w	r4, r4, #1
 8013e1e:	b914      	cbnz	r4, 8013e26 <rcl_wait+0x27e>
 8013e20:	4623      	mov	r3, r4
 8013e22:	e747      	b.n	8013cb4 <rcl_wait+0x10c>
 8013e24:	4611      	mov	r1, r2
 8013e26:	2f00      	cmp	r7, #0
 8013e28:	da02      	bge.n	8013e30 <rcl_wait+0x288>
 8013e2a:	f04f 0800 	mov.w	r8, #0
 8013e2e:	4647      	mov	r7, r8
 8013e30:	460c      	mov	r4, r1
 8013e32:	4640      	mov	r0, r8
 8013e34:	4639      	mov	r1, r7
 8013e36:	a312      	add	r3, pc, #72	@ (adr r3, 8013e80 <rcl_wait+0x2d8>)
 8013e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e3c:	f7ec fab8 	bl	80003b0 <__aeabi_ldivmod>
 8013e40:	a30f      	add	r3, pc, #60	@ (adr r3, 8013e80 <rcl_wait+0x2d8>)
 8013e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013e4a:	4640      	mov	r0, r8
 8013e4c:	4639      	mov	r1, r7
 8013e4e:	f7ec faaf 	bl	80003b0 <__aeabi_ldivmod>
 8013e52:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8013e56:	ab08      	add	r3, sp, #32
 8013e58:	e72c      	b.n	8013cb4 <rcl_wait+0x10c>
 8013e5a:	200b      	movs	r0, #11
 8013e5c:	b00d      	add	sp, #52	@ 0x34
 8013e5e:	ecbd 8b02 	vpop	{d8}
 8013e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e66:	4611      	mov	r1, r2
 8013e68:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8013e6c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8013e70:	e713      	b.n	8013c9a <rcl_wait+0xf2>
 8013e72:	bf00      	nop
 8013e74:	f3af 8000 	nop.w
 8013e78:	ffffffff 	.word	0xffffffff
 8013e7c:	7fffffff 	.word	0x7fffffff
 8013e80:	3b9aca00 	.word	0x3b9aca00
 8013e84:	00000000 	.word	0x00000000

08013e88 <rcl_action_take_goal_response>:
 8013e88:	2800      	cmp	r0, #0
 8013e8a:	d039      	beq.n	8013f00 <rcl_action_take_goal_response+0x78>
 8013e8c:	b570      	push	{r4, r5, r6, lr}
 8013e8e:	4604      	mov	r4, r0
 8013e90:	6800      	ldr	r0, [r0, #0]
 8013e92:	b380      	cbz	r0, 8013ef6 <rcl_action_take_goal_response+0x6e>
 8013e94:	460e      	mov	r6, r1
 8013e96:	4615      	mov	r5, r2
 8013e98:	f7fd fe82 	bl	8011ba0 <rcl_client_is_valid>
 8013e9c:	b330      	cbz	r0, 8013eec <rcl_action_take_goal_response+0x64>
 8013e9e:	6820      	ldr	r0, [r4, #0]
 8013ea0:	3004      	adds	r0, #4
 8013ea2:	f7fd fe7d 	bl	8011ba0 <rcl_client_is_valid>
 8013ea6:	b308      	cbz	r0, 8013eec <rcl_action_take_goal_response+0x64>
 8013ea8:	6820      	ldr	r0, [r4, #0]
 8013eaa:	3008      	adds	r0, #8
 8013eac:	f7fd fe78 	bl	8011ba0 <rcl_client_is_valid>
 8013eb0:	b1e0      	cbz	r0, 8013eec <rcl_action_take_goal_response+0x64>
 8013eb2:	6820      	ldr	r0, [r4, #0]
 8013eb4:	300c      	adds	r0, #12
 8013eb6:	f7fe ffe5 	bl	8012e84 <rcl_subscription_is_valid>
 8013eba:	b1b8      	cbz	r0, 8013eec <rcl_action_take_goal_response+0x64>
 8013ebc:	6820      	ldr	r0, [r4, #0]
 8013ebe:	3010      	adds	r0, #16
 8013ec0:	f7fe ffe0 	bl	8012e84 <rcl_subscription_is_valid>
 8013ec4:	b190      	cbz	r0, 8013eec <rcl_action_take_goal_response+0x64>
 8013ec6:	b1cd      	cbz	r5, 8013efc <rcl_action_take_goal_response+0x74>
 8013ec8:	b1c6      	cbz	r6, 8013efc <rcl_action_take_goal_response+0x74>
 8013eca:	462a      	mov	r2, r5
 8013ecc:	4631      	mov	r1, r6
 8013ece:	6820      	ldr	r0, [r4, #0]
 8013ed0:	f7fd fe1e 	bl	8011b10 <rcl_take_response>
 8013ed4:	b148      	cbz	r0, 8013eea <rcl_action_take_goal_response+0x62>
 8013ed6:	280a      	cmp	r0, #10
 8013ed8:	d007      	beq.n	8013eea <rcl_action_take_goal_response+0x62>
 8013eda:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013ede:	f640 0337 	movw	r3, #2103	@ 0x837
 8013ee2:	4290      	cmp	r0, r2
 8013ee4:	bf0c      	ite	eq
 8013ee6:	4618      	moveq	r0, r3
 8013ee8:	2001      	movne	r0, #1
 8013eea:	bd70      	pop	{r4, r5, r6, pc}
 8013eec:	f7fc ffc4 	bl	8010e78 <rcutils_reset_error>
 8013ef0:	f640 0036 	movw	r0, #2102	@ 0x836
 8013ef4:	bd70      	pop	{r4, r5, r6, pc}
 8013ef6:	f640 0036 	movw	r0, #2102	@ 0x836
 8013efa:	bd70      	pop	{r4, r5, r6, pc}
 8013efc:	200b      	movs	r0, #11
 8013efe:	bd70      	pop	{r4, r5, r6, pc}
 8013f00:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f04:	4770      	bx	lr
 8013f06:	bf00      	nop

08013f08 <rcl_action_send_result_request>:
 8013f08:	b390      	cbz	r0, 8013f70 <rcl_action_send_result_request+0x68>
 8013f0a:	b570      	push	{r4, r5, r6, lr}
 8013f0c:	4604      	mov	r4, r0
 8013f0e:	6800      	ldr	r0, [r0, #0]
 8013f10:	b348      	cbz	r0, 8013f66 <rcl_action_send_result_request+0x5e>
 8013f12:	460e      	mov	r6, r1
 8013f14:	4615      	mov	r5, r2
 8013f16:	f7fd fe43 	bl	8011ba0 <rcl_client_is_valid>
 8013f1a:	b1f8      	cbz	r0, 8013f5c <rcl_action_send_result_request+0x54>
 8013f1c:	6820      	ldr	r0, [r4, #0]
 8013f1e:	3004      	adds	r0, #4
 8013f20:	f7fd fe3e 	bl	8011ba0 <rcl_client_is_valid>
 8013f24:	b1d0      	cbz	r0, 8013f5c <rcl_action_send_result_request+0x54>
 8013f26:	6820      	ldr	r0, [r4, #0]
 8013f28:	3008      	adds	r0, #8
 8013f2a:	f7fd fe39 	bl	8011ba0 <rcl_client_is_valid>
 8013f2e:	b1a8      	cbz	r0, 8013f5c <rcl_action_send_result_request+0x54>
 8013f30:	6820      	ldr	r0, [r4, #0]
 8013f32:	300c      	adds	r0, #12
 8013f34:	f7fe ffa6 	bl	8012e84 <rcl_subscription_is_valid>
 8013f38:	b180      	cbz	r0, 8013f5c <rcl_action_send_result_request+0x54>
 8013f3a:	6820      	ldr	r0, [r4, #0]
 8013f3c:	3010      	adds	r0, #16
 8013f3e:	f7fe ffa1 	bl	8012e84 <rcl_subscription_is_valid>
 8013f42:	b158      	cbz	r0, 8013f5c <rcl_action_send_result_request+0x54>
 8013f44:	b195      	cbz	r5, 8013f6c <rcl_action_send_result_request+0x64>
 8013f46:	b18e      	cbz	r6, 8013f6c <rcl_action_send_result_request+0x64>
 8013f48:	6820      	ldr	r0, [r4, #0]
 8013f4a:	462a      	mov	r2, r5
 8013f4c:	4631      	mov	r1, r6
 8013f4e:	3008      	adds	r0, #8
 8013f50:	f7fd fda4 	bl	8011a9c <rcl_send_request>
 8013f54:	3800      	subs	r0, #0
 8013f56:	bf18      	it	ne
 8013f58:	2001      	movne	r0, #1
 8013f5a:	bd70      	pop	{r4, r5, r6, pc}
 8013f5c:	f7fc ff8c 	bl	8010e78 <rcutils_reset_error>
 8013f60:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f64:	bd70      	pop	{r4, r5, r6, pc}
 8013f66:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f6a:	bd70      	pop	{r4, r5, r6, pc}
 8013f6c:	200b      	movs	r0, #11
 8013f6e:	bd70      	pop	{r4, r5, r6, pc}
 8013f70:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f74:	4770      	bx	lr
 8013f76:	bf00      	nop

08013f78 <rcl_action_take_result_response>:
 8013f78:	2800      	cmp	r0, #0
 8013f7a:	d03a      	beq.n	8013ff2 <rcl_action_take_result_response+0x7a>
 8013f7c:	b570      	push	{r4, r5, r6, lr}
 8013f7e:	4604      	mov	r4, r0
 8013f80:	6800      	ldr	r0, [r0, #0]
 8013f82:	b388      	cbz	r0, 8013fe8 <rcl_action_take_result_response+0x70>
 8013f84:	460e      	mov	r6, r1
 8013f86:	4615      	mov	r5, r2
 8013f88:	f7fd fe0a 	bl	8011ba0 <rcl_client_is_valid>
 8013f8c:	b338      	cbz	r0, 8013fde <rcl_action_take_result_response+0x66>
 8013f8e:	6820      	ldr	r0, [r4, #0]
 8013f90:	3004      	adds	r0, #4
 8013f92:	f7fd fe05 	bl	8011ba0 <rcl_client_is_valid>
 8013f96:	b310      	cbz	r0, 8013fde <rcl_action_take_result_response+0x66>
 8013f98:	6820      	ldr	r0, [r4, #0]
 8013f9a:	3008      	adds	r0, #8
 8013f9c:	f7fd fe00 	bl	8011ba0 <rcl_client_is_valid>
 8013fa0:	b1e8      	cbz	r0, 8013fde <rcl_action_take_result_response+0x66>
 8013fa2:	6820      	ldr	r0, [r4, #0]
 8013fa4:	300c      	adds	r0, #12
 8013fa6:	f7fe ff6d 	bl	8012e84 <rcl_subscription_is_valid>
 8013faa:	b1c0      	cbz	r0, 8013fde <rcl_action_take_result_response+0x66>
 8013fac:	6820      	ldr	r0, [r4, #0]
 8013fae:	3010      	adds	r0, #16
 8013fb0:	f7fe ff68 	bl	8012e84 <rcl_subscription_is_valid>
 8013fb4:	b198      	cbz	r0, 8013fde <rcl_action_take_result_response+0x66>
 8013fb6:	b1d5      	cbz	r5, 8013fee <rcl_action_take_result_response+0x76>
 8013fb8:	b1ce      	cbz	r6, 8013fee <rcl_action_take_result_response+0x76>
 8013fba:	6820      	ldr	r0, [r4, #0]
 8013fbc:	462a      	mov	r2, r5
 8013fbe:	4631      	mov	r1, r6
 8013fc0:	3008      	adds	r0, #8
 8013fc2:	f7fd fda5 	bl	8011b10 <rcl_take_response>
 8013fc6:	b148      	cbz	r0, 8013fdc <rcl_action_take_result_response+0x64>
 8013fc8:	280a      	cmp	r0, #10
 8013fca:	d007      	beq.n	8013fdc <rcl_action_take_result_response+0x64>
 8013fcc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013fd0:	f640 0337 	movw	r3, #2103	@ 0x837
 8013fd4:	4290      	cmp	r0, r2
 8013fd6:	bf0c      	ite	eq
 8013fd8:	4618      	moveq	r0, r3
 8013fda:	2001      	movne	r0, #1
 8013fdc:	bd70      	pop	{r4, r5, r6, pc}
 8013fde:	f7fc ff4b 	bl	8010e78 <rcutils_reset_error>
 8013fe2:	f640 0036 	movw	r0, #2102	@ 0x836
 8013fe6:	bd70      	pop	{r4, r5, r6, pc}
 8013fe8:	f640 0036 	movw	r0, #2102	@ 0x836
 8013fec:	bd70      	pop	{r4, r5, r6, pc}
 8013fee:	200b      	movs	r0, #11
 8013ff0:	bd70      	pop	{r4, r5, r6, pc}
 8013ff2:	f640 0036 	movw	r0, #2102	@ 0x836
 8013ff6:	4770      	bx	lr

08013ff8 <rcl_action_take_cancel_response>:
 8013ff8:	2800      	cmp	r0, #0
 8013ffa:	d03a      	beq.n	8014072 <rcl_action_take_cancel_response+0x7a>
 8013ffc:	b570      	push	{r4, r5, r6, lr}
 8013ffe:	4604      	mov	r4, r0
 8014000:	6800      	ldr	r0, [r0, #0]
 8014002:	b388      	cbz	r0, 8014068 <rcl_action_take_cancel_response+0x70>
 8014004:	460e      	mov	r6, r1
 8014006:	4615      	mov	r5, r2
 8014008:	f7fd fdca 	bl	8011ba0 <rcl_client_is_valid>
 801400c:	b338      	cbz	r0, 801405e <rcl_action_take_cancel_response+0x66>
 801400e:	6820      	ldr	r0, [r4, #0]
 8014010:	3004      	adds	r0, #4
 8014012:	f7fd fdc5 	bl	8011ba0 <rcl_client_is_valid>
 8014016:	b310      	cbz	r0, 801405e <rcl_action_take_cancel_response+0x66>
 8014018:	6820      	ldr	r0, [r4, #0]
 801401a:	3008      	adds	r0, #8
 801401c:	f7fd fdc0 	bl	8011ba0 <rcl_client_is_valid>
 8014020:	b1e8      	cbz	r0, 801405e <rcl_action_take_cancel_response+0x66>
 8014022:	6820      	ldr	r0, [r4, #0]
 8014024:	300c      	adds	r0, #12
 8014026:	f7fe ff2d 	bl	8012e84 <rcl_subscription_is_valid>
 801402a:	b1c0      	cbz	r0, 801405e <rcl_action_take_cancel_response+0x66>
 801402c:	6820      	ldr	r0, [r4, #0]
 801402e:	3010      	adds	r0, #16
 8014030:	f7fe ff28 	bl	8012e84 <rcl_subscription_is_valid>
 8014034:	b198      	cbz	r0, 801405e <rcl_action_take_cancel_response+0x66>
 8014036:	b1d5      	cbz	r5, 801406e <rcl_action_take_cancel_response+0x76>
 8014038:	b1ce      	cbz	r6, 801406e <rcl_action_take_cancel_response+0x76>
 801403a:	6820      	ldr	r0, [r4, #0]
 801403c:	462a      	mov	r2, r5
 801403e:	4631      	mov	r1, r6
 8014040:	3004      	adds	r0, #4
 8014042:	f7fd fd65 	bl	8011b10 <rcl_take_response>
 8014046:	b148      	cbz	r0, 801405c <rcl_action_take_cancel_response+0x64>
 8014048:	280a      	cmp	r0, #10
 801404a:	d007      	beq.n	801405c <rcl_action_take_cancel_response+0x64>
 801404c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014050:	f640 0337 	movw	r3, #2103	@ 0x837
 8014054:	4290      	cmp	r0, r2
 8014056:	bf0c      	ite	eq
 8014058:	4618      	moveq	r0, r3
 801405a:	2001      	movne	r0, #1
 801405c:	bd70      	pop	{r4, r5, r6, pc}
 801405e:	f7fc ff0b 	bl	8010e78 <rcutils_reset_error>
 8014062:	f640 0036 	movw	r0, #2102	@ 0x836
 8014066:	bd70      	pop	{r4, r5, r6, pc}
 8014068:	f640 0036 	movw	r0, #2102	@ 0x836
 801406c:	bd70      	pop	{r4, r5, r6, pc}
 801406e:	200b      	movs	r0, #11
 8014070:	bd70      	pop	{r4, r5, r6, pc}
 8014072:	f640 0036 	movw	r0, #2102	@ 0x836
 8014076:	4770      	bx	lr

08014078 <rcl_action_take_feedback>:
 8014078:	2800      	cmp	r0, #0
 801407a:	d038      	beq.n	80140ee <rcl_action_take_feedback+0x76>
 801407c:	b530      	push	{r4, r5, lr}
 801407e:	4604      	mov	r4, r0
 8014080:	6800      	ldr	r0, [r0, #0]
 8014082:	b091      	sub	sp, #68	@ 0x44
 8014084:	b378      	cbz	r0, 80140e6 <rcl_action_take_feedback+0x6e>
 8014086:	460d      	mov	r5, r1
 8014088:	f7fd fd8a 	bl	8011ba0 <rcl_client_is_valid>
 801408c:	b328      	cbz	r0, 80140da <rcl_action_take_feedback+0x62>
 801408e:	6820      	ldr	r0, [r4, #0]
 8014090:	3004      	adds	r0, #4
 8014092:	f7fd fd85 	bl	8011ba0 <rcl_client_is_valid>
 8014096:	b300      	cbz	r0, 80140da <rcl_action_take_feedback+0x62>
 8014098:	6820      	ldr	r0, [r4, #0]
 801409a:	3008      	adds	r0, #8
 801409c:	f7fd fd80 	bl	8011ba0 <rcl_client_is_valid>
 80140a0:	b1d8      	cbz	r0, 80140da <rcl_action_take_feedback+0x62>
 80140a2:	6820      	ldr	r0, [r4, #0]
 80140a4:	300c      	adds	r0, #12
 80140a6:	f7fe feed 	bl	8012e84 <rcl_subscription_is_valid>
 80140aa:	b1b0      	cbz	r0, 80140da <rcl_action_take_feedback+0x62>
 80140ac:	6820      	ldr	r0, [r4, #0]
 80140ae:	3010      	adds	r0, #16
 80140b0:	f7fe fee8 	bl	8012e84 <rcl_subscription_is_valid>
 80140b4:	b188      	cbz	r0, 80140da <rcl_action_take_feedback+0x62>
 80140b6:	b1ed      	cbz	r5, 80140f4 <rcl_action_take_feedback+0x7c>
 80140b8:	6820      	ldr	r0, [r4, #0]
 80140ba:	2300      	movs	r3, #0
 80140bc:	466a      	mov	r2, sp
 80140be:	4629      	mov	r1, r5
 80140c0:	300c      	adds	r0, #12
 80140c2:	f7fe fe83 	bl	8012dcc <rcl_take>
 80140c6:	b160      	cbz	r0, 80140e2 <rcl_action_take_feedback+0x6a>
 80140c8:	f240 1391 	movw	r3, #401	@ 0x191
 80140cc:	4298      	cmp	r0, r3
 80140ce:	d014      	beq.n	80140fa <rcl_action_take_feedback+0x82>
 80140d0:	280a      	cmp	r0, #10
 80140d2:	bf18      	it	ne
 80140d4:	2001      	movne	r0, #1
 80140d6:	b011      	add	sp, #68	@ 0x44
 80140d8:	bd30      	pop	{r4, r5, pc}
 80140da:	f7fc fecd 	bl	8010e78 <rcutils_reset_error>
 80140de:	f640 0036 	movw	r0, #2102	@ 0x836
 80140e2:	b011      	add	sp, #68	@ 0x44
 80140e4:	bd30      	pop	{r4, r5, pc}
 80140e6:	f640 0036 	movw	r0, #2102	@ 0x836
 80140ea:	b011      	add	sp, #68	@ 0x44
 80140ec:	bd30      	pop	{r4, r5, pc}
 80140ee:	f640 0036 	movw	r0, #2102	@ 0x836
 80140f2:	4770      	bx	lr
 80140f4:	200b      	movs	r0, #11
 80140f6:	b011      	add	sp, #68	@ 0x44
 80140f8:	bd30      	pop	{r4, r5, pc}
 80140fa:	f640 0037 	movw	r0, #2103	@ 0x837
 80140fe:	e7f0      	b.n	80140e2 <rcl_action_take_feedback+0x6a>

08014100 <rcl_action_wait_set_add_action_client>:
 8014100:	2800      	cmp	r0, #0
 8014102:	d048      	beq.n	8014196 <rcl_action_wait_set_add_action_client+0x96>
 8014104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014106:	460c      	mov	r4, r1
 8014108:	2900      	cmp	r1, #0
 801410a:	d03c      	beq.n	8014186 <rcl_action_wait_set_add_action_client+0x86>
 801410c:	4605      	mov	r5, r0
 801410e:	6808      	ldr	r0, [r1, #0]
 8014110:	2800      	cmp	r0, #0
 8014112:	d038      	beq.n	8014186 <rcl_action_wait_set_add_action_client+0x86>
 8014114:	4617      	mov	r7, r2
 8014116:	461e      	mov	r6, r3
 8014118:	f7fd fd42 	bl	8011ba0 <rcl_client_is_valid>
 801411c:	b3b0      	cbz	r0, 801418c <rcl_action_wait_set_add_action_client+0x8c>
 801411e:	6820      	ldr	r0, [r4, #0]
 8014120:	3004      	adds	r0, #4
 8014122:	f7fd fd3d 	bl	8011ba0 <rcl_client_is_valid>
 8014126:	b388      	cbz	r0, 801418c <rcl_action_wait_set_add_action_client+0x8c>
 8014128:	6820      	ldr	r0, [r4, #0]
 801412a:	3008      	adds	r0, #8
 801412c:	f7fd fd38 	bl	8011ba0 <rcl_client_is_valid>
 8014130:	b360      	cbz	r0, 801418c <rcl_action_wait_set_add_action_client+0x8c>
 8014132:	6820      	ldr	r0, [r4, #0]
 8014134:	300c      	adds	r0, #12
 8014136:	f7fe fea5 	bl	8012e84 <rcl_subscription_is_valid>
 801413a:	b338      	cbz	r0, 801418c <rcl_action_wait_set_add_action_client+0x8c>
 801413c:	6820      	ldr	r0, [r4, #0]
 801413e:	3010      	adds	r0, #16
 8014140:	f7fe fea0 	bl	8012e84 <rcl_subscription_is_valid>
 8014144:	b310      	cbz	r0, 801418c <rcl_action_wait_set_add_action_client+0x8c>
 8014146:	6821      	ldr	r1, [r4, #0]
 8014148:	4628      	mov	r0, r5
 801414a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801414e:	f7ff fcd1 	bl	8013af4 <rcl_wait_set_add_client>
 8014152:	b9b8      	cbnz	r0, 8014184 <rcl_action_wait_set_add_action_client+0x84>
 8014154:	6821      	ldr	r1, [r4, #0]
 8014156:	4628      	mov	r0, r5
 8014158:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801415c:	3104      	adds	r1, #4
 801415e:	f7ff fcc9 	bl	8013af4 <rcl_wait_set_add_client>
 8014162:	b978      	cbnz	r0, 8014184 <rcl_action_wait_set_add_action_client+0x84>
 8014164:	6821      	ldr	r1, [r4, #0]
 8014166:	4628      	mov	r0, r5
 8014168:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801416c:	3108      	adds	r1, #8
 801416e:	f7ff fcc1 	bl	8013af4 <rcl_wait_set_add_client>
 8014172:	b938      	cbnz	r0, 8014184 <rcl_action_wait_set_add_action_client+0x84>
 8014174:	6821      	ldr	r1, [r4, #0]
 8014176:	4628      	mov	r0, r5
 8014178:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801417c:	310c      	adds	r1, #12
 801417e:	f7ff f969 	bl	8013454 <rcl_wait_set_add_subscription>
 8014182:	b158      	cbz	r0, 801419c <rcl_action_wait_set_add_action_client+0x9c>
 8014184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014186:	f640 0036 	movw	r0, #2102	@ 0x836
 801418a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801418c:	f7fc fe74 	bl	8010e78 <rcutils_reset_error>
 8014190:	f640 0036 	movw	r0, #2102	@ 0x836
 8014194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014196:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801419a:	4770      	bx	lr
 801419c:	6821      	ldr	r1, [r4, #0]
 801419e:	4628      	mov	r0, r5
 80141a0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80141a4:	3110      	adds	r1, #16
 80141a6:	f7ff f955 	bl	8013454 <rcl_wait_set_add_subscription>
 80141aa:	2800      	cmp	r0, #0
 80141ac:	d1ea      	bne.n	8014184 <rcl_action_wait_set_add_action_client+0x84>
 80141ae:	b11f      	cbz	r7, 80141b8 <rcl_action_wait_set_add_action_client+0xb8>
 80141b0:	6823      	ldr	r3, [r4, #0]
 80141b2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80141b6:	603b      	str	r3, [r7, #0]
 80141b8:	2e00      	cmp	r6, #0
 80141ba:	d0e3      	beq.n	8014184 <rcl_action_wait_set_add_action_client+0x84>
 80141bc:	6823      	ldr	r3, [r4, #0]
 80141be:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80141c2:	6033      	str	r3, [r6, #0]
 80141c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141c6:	bf00      	nop

080141c8 <rcl_action_client_wait_set_get_entities_ready>:
 80141c8:	2800      	cmp	r0, #0
 80141ca:	d050      	beq.n	801426e <rcl_action_client_wait_set_get_entities_ready+0xa6>
 80141cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80141d0:	460c      	mov	r4, r1
 80141d2:	2900      	cmp	r1, #0
 80141d4:	d03e      	beq.n	8014254 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80141d6:	4605      	mov	r5, r0
 80141d8:	6808      	ldr	r0, [r1, #0]
 80141da:	2800      	cmp	r0, #0
 80141dc:	d03a      	beq.n	8014254 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80141de:	4616      	mov	r6, r2
 80141e0:	461f      	mov	r7, r3
 80141e2:	f7fd fcdd 	bl	8011ba0 <rcl_client_is_valid>
 80141e6:	2800      	cmp	r0, #0
 80141e8:	d038      	beq.n	801425c <rcl_action_client_wait_set_get_entities_ready+0x94>
 80141ea:	6820      	ldr	r0, [r4, #0]
 80141ec:	3004      	adds	r0, #4
 80141ee:	f7fd fcd7 	bl	8011ba0 <rcl_client_is_valid>
 80141f2:	2800      	cmp	r0, #0
 80141f4:	d032      	beq.n	801425c <rcl_action_client_wait_set_get_entities_ready+0x94>
 80141f6:	6820      	ldr	r0, [r4, #0]
 80141f8:	3008      	adds	r0, #8
 80141fa:	f7fd fcd1 	bl	8011ba0 <rcl_client_is_valid>
 80141fe:	b368      	cbz	r0, 801425c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8014200:	6820      	ldr	r0, [r4, #0]
 8014202:	300c      	adds	r0, #12
 8014204:	f7fe fe3e 	bl	8012e84 <rcl_subscription_is_valid>
 8014208:	b340      	cbz	r0, 801425c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801420a:	6820      	ldr	r0, [r4, #0]
 801420c:	3010      	adds	r0, #16
 801420e:	f7fe fe39 	bl	8012e84 <rcl_subscription_is_valid>
 8014212:	b318      	cbz	r0, 801425c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8014214:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
 8014218:	2a00      	cmp	r2, #0
 801421a:	bf18      	it	ne
 801421c:	2b00      	cmpne	r3, #0
 801421e:	9b08      	ldr	r3, [sp, #32]
 8014220:	bf0c      	ite	eq
 8014222:	2101      	moveq	r1, #1
 8014224:	2100      	movne	r1, #0
 8014226:	2b00      	cmp	r3, #0
 8014228:	bf08      	it	eq
 801422a:	f041 0101 	orreq.w	r1, r1, #1
 801422e:	2f00      	cmp	r7, #0
 8014230:	bf08      	it	eq
 8014232:	f041 0101 	orreq.w	r1, r1, #1
 8014236:	b9b9      	cbnz	r1, 8014268 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8014238:	b1b6      	cbz	r6, 8014268 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801423a:	6823      	ldr	r3, [r4, #0]
 801423c:	686c      	ldr	r4, [r5, #4]
 801423e:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	@ 0x1d0
 8014242:	428a      	cmp	r2, r1
 8014244:	4610      	mov	r0, r2
 8014246:	bf38      	it	cc
 8014248:	4608      	movcc	r0, r1
 801424a:	4284      	cmp	r4, r0
 801424c:	d812      	bhi.n	8014274 <rcl_action_client_wait_set_get_entities_ready+0xac>
 801424e:	2001      	movs	r0, #1
 8014250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014254:	f640 0036 	movw	r0, #2102	@ 0x836
 8014258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801425c:	f7fc fe0c 	bl	8010e78 <rcutils_reset_error>
 8014260:	f640 0036 	movw	r0, #2102	@ 0x836
 8014264:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014268:	200b      	movs	r0, #11
 801426a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801426e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014272:	4770      	bx	lr
 8014274:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	@ 0x1c4
 8014278:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	@ 0x1cc
 801427c:	45f0      	cmp	r8, lr
 801427e:	4640      	mov	r0, r8
 8014280:	69ec      	ldr	r4, [r5, #28]
 8014282:	bf38      	it	cc
 8014284:	4670      	movcc	r0, lr
 8014286:	4560      	cmp	r0, ip
 8014288:	bf38      	it	cc
 801428a:	4660      	movcc	r0, ip
 801428c:	4284      	cmp	r4, r0
 801428e:	d9de      	bls.n	801424e <rcl_action_client_wait_set_get_entities_ready+0x86>
 8014290:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8014294:	682d      	ldr	r5, [r5, #0]
 8014296:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 801429a:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 801429e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80142a2:	1a18      	subs	r0, r3, r0
 80142a4:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 80142a8:	f103 0c0c 	add.w	ip, r3, #12
 80142ac:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 80142b0:	fab0 f080 	clz	r0, r0
 80142b4:	eba5 050c 	sub.w	r5, r5, ip
 80142b8:	0940      	lsrs	r0, r0, #5
 80142ba:	fab5 f585 	clz	r5, r5
 80142be:	096d      	lsrs	r5, r5, #5
 80142c0:	7035      	strb	r5, [r6, #0]
 80142c2:	f103 0510 	add.w	r5, r3, #16
 80142c6:	1b64      	subs	r4, r4, r5
 80142c8:	9d08      	ldr	r5, [sp, #32]
 80142ca:	fab4 f484 	clz	r4, r4
 80142ce:	0964      	lsrs	r4, r4, #5
 80142d0:	703c      	strb	r4, [r7, #0]
 80142d2:	1d1c      	adds	r4, r3, #4
 80142d4:	3308      	adds	r3, #8
 80142d6:	7028      	strb	r0, [r5, #0]
 80142d8:	1b09      	subs	r1, r1, r4
 80142da:	2000      	movs	r0, #0
 80142dc:	1ad3      	subs	r3, r2, r3
 80142de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80142e0:	fab1 f181 	clz	r1, r1
 80142e4:	fab3 f383 	clz	r3, r3
 80142e8:	0949      	lsrs	r1, r1, #5
 80142ea:	095b      	lsrs	r3, r3, #5
 80142ec:	7011      	strb	r1, [r2, #0]
 80142ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80142f0:	7013      	strb	r3, [r2, #0]
 80142f2:	e7b1      	b.n	8014258 <rcl_action_client_wait_set_get_entities_ready+0x90>

080142f4 <rcl_action_take_goal_request>:
 80142f4:	2800      	cmp	r0, #0
 80142f6:	d039      	beq.n	801436c <rcl_action_take_goal_request+0x78>
 80142f8:	b570      	push	{r4, r5, r6, lr}
 80142fa:	4604      	mov	r4, r0
 80142fc:	6800      	ldr	r0, [r0, #0]
 80142fe:	b380      	cbz	r0, 8014362 <rcl_action_take_goal_request+0x6e>
 8014300:	460e      	mov	r6, r1
 8014302:	4615      	mov	r5, r2
 8014304:	f7fe fc76 	bl	8012bf4 <rcl_service_is_valid>
 8014308:	b330      	cbz	r0, 8014358 <rcl_action_take_goal_request+0x64>
 801430a:	6820      	ldr	r0, [r4, #0]
 801430c:	3004      	adds	r0, #4
 801430e:	f7fe fc71 	bl	8012bf4 <rcl_service_is_valid>
 8014312:	b308      	cbz	r0, 8014358 <rcl_action_take_goal_request+0x64>
 8014314:	6820      	ldr	r0, [r4, #0]
 8014316:	3008      	adds	r0, #8
 8014318:	f7fe fc6c 	bl	8012bf4 <rcl_service_is_valid>
 801431c:	b1e0      	cbz	r0, 8014358 <rcl_action_take_goal_request+0x64>
 801431e:	6820      	ldr	r0, [r4, #0]
 8014320:	300c      	adds	r0, #12
 8014322:	f7fe fa2d 	bl	8012780 <rcl_publisher_is_valid>
 8014326:	b1b8      	cbz	r0, 8014358 <rcl_action_take_goal_request+0x64>
 8014328:	6820      	ldr	r0, [r4, #0]
 801432a:	3010      	adds	r0, #16
 801432c:	f7fe fa28 	bl	8012780 <rcl_publisher_is_valid>
 8014330:	b190      	cbz	r0, 8014358 <rcl_action_take_goal_request+0x64>
 8014332:	b1cd      	cbz	r5, 8014368 <rcl_action_take_goal_request+0x74>
 8014334:	b1c6      	cbz	r6, 8014368 <rcl_action_take_goal_request+0x74>
 8014336:	462a      	mov	r2, r5
 8014338:	4631      	mov	r1, r6
 801433a:	6820      	ldr	r0, [r4, #0]
 801433c:	f7fe fc02 	bl	8012b44 <rcl_take_request>
 8014340:	b148      	cbz	r0, 8014356 <rcl_action_take_goal_request+0x62>
 8014342:	280a      	cmp	r0, #10
 8014344:	d007      	beq.n	8014356 <rcl_action_take_goal_request+0x62>
 8014346:	f240 2259 	movw	r2, #601	@ 0x259
 801434a:	f640 0399 	movw	r3, #2201	@ 0x899
 801434e:	4290      	cmp	r0, r2
 8014350:	bf0c      	ite	eq
 8014352:	4618      	moveq	r0, r3
 8014354:	2001      	movne	r0, #1
 8014356:	bd70      	pop	{r4, r5, r6, pc}
 8014358:	f7fc fd8e 	bl	8010e78 <rcutils_reset_error>
 801435c:	f640 0098 	movw	r0, #2200	@ 0x898
 8014360:	bd70      	pop	{r4, r5, r6, pc}
 8014362:	f640 0098 	movw	r0, #2200	@ 0x898
 8014366:	bd70      	pop	{r4, r5, r6, pc}
 8014368:	200b      	movs	r0, #11
 801436a:	bd70      	pop	{r4, r5, r6, pc}
 801436c:	f640 0098 	movw	r0, #2200	@ 0x898
 8014370:	4770      	bx	lr
 8014372:	bf00      	nop

08014374 <rcl_action_send_goal_response>:
 8014374:	b390      	cbz	r0, 80143dc <rcl_action_send_goal_response+0x68>
 8014376:	b570      	push	{r4, r5, r6, lr}
 8014378:	4604      	mov	r4, r0
 801437a:	6800      	ldr	r0, [r0, #0]
 801437c:	b348      	cbz	r0, 80143d2 <rcl_action_send_goal_response+0x5e>
 801437e:	460e      	mov	r6, r1
 8014380:	4615      	mov	r5, r2
 8014382:	f7fe fc37 	bl	8012bf4 <rcl_service_is_valid>
 8014386:	b1f8      	cbz	r0, 80143c8 <rcl_action_send_goal_response+0x54>
 8014388:	6820      	ldr	r0, [r4, #0]
 801438a:	3004      	adds	r0, #4
 801438c:	f7fe fc32 	bl	8012bf4 <rcl_service_is_valid>
 8014390:	b1d0      	cbz	r0, 80143c8 <rcl_action_send_goal_response+0x54>
 8014392:	6820      	ldr	r0, [r4, #0]
 8014394:	3008      	adds	r0, #8
 8014396:	f7fe fc2d 	bl	8012bf4 <rcl_service_is_valid>
 801439a:	b1a8      	cbz	r0, 80143c8 <rcl_action_send_goal_response+0x54>
 801439c:	6820      	ldr	r0, [r4, #0]
 801439e:	300c      	adds	r0, #12
 80143a0:	f7fe f9ee 	bl	8012780 <rcl_publisher_is_valid>
 80143a4:	b180      	cbz	r0, 80143c8 <rcl_action_send_goal_response+0x54>
 80143a6:	6820      	ldr	r0, [r4, #0]
 80143a8:	3010      	adds	r0, #16
 80143aa:	f7fe f9e9 	bl	8012780 <rcl_publisher_is_valid>
 80143ae:	b158      	cbz	r0, 80143c8 <rcl_action_send_goal_response+0x54>
 80143b0:	b195      	cbz	r5, 80143d8 <rcl_action_send_goal_response+0x64>
 80143b2:	b18e      	cbz	r6, 80143d8 <rcl_action_send_goal_response+0x64>
 80143b4:	462a      	mov	r2, r5
 80143b6:	4631      	mov	r1, r6
 80143b8:	6820      	ldr	r0, [r4, #0]
 80143ba:	f7fe fc03 	bl	8012bc4 <rcl_send_response>
 80143be:	b110      	cbz	r0, 80143c6 <rcl_action_send_goal_response+0x52>
 80143c0:	2802      	cmp	r0, #2
 80143c2:	bf18      	it	ne
 80143c4:	2001      	movne	r0, #1
 80143c6:	bd70      	pop	{r4, r5, r6, pc}
 80143c8:	f7fc fd56 	bl	8010e78 <rcutils_reset_error>
 80143cc:	f640 0098 	movw	r0, #2200	@ 0x898
 80143d0:	bd70      	pop	{r4, r5, r6, pc}
 80143d2:	f640 0098 	movw	r0, #2200	@ 0x898
 80143d6:	bd70      	pop	{r4, r5, r6, pc}
 80143d8:	200b      	movs	r0, #11
 80143da:	bd70      	pop	{r4, r5, r6, pc}
 80143dc:	f640 0098 	movw	r0, #2200	@ 0x898
 80143e0:	4770      	bx	lr
 80143e2:	bf00      	nop

080143e4 <rcl_action_take_result_request>:
 80143e4:	2800      	cmp	r0, #0
 80143e6:	d03a      	beq.n	801445e <rcl_action_take_result_request+0x7a>
 80143e8:	b570      	push	{r4, r5, r6, lr}
 80143ea:	4604      	mov	r4, r0
 80143ec:	6800      	ldr	r0, [r0, #0]
 80143ee:	b388      	cbz	r0, 8014454 <rcl_action_take_result_request+0x70>
 80143f0:	460e      	mov	r6, r1
 80143f2:	4615      	mov	r5, r2
 80143f4:	f7fe fbfe 	bl	8012bf4 <rcl_service_is_valid>
 80143f8:	b338      	cbz	r0, 801444a <rcl_action_take_result_request+0x66>
 80143fa:	6820      	ldr	r0, [r4, #0]
 80143fc:	3004      	adds	r0, #4
 80143fe:	f7fe fbf9 	bl	8012bf4 <rcl_service_is_valid>
 8014402:	b310      	cbz	r0, 801444a <rcl_action_take_result_request+0x66>
 8014404:	6820      	ldr	r0, [r4, #0]
 8014406:	3008      	adds	r0, #8
 8014408:	f7fe fbf4 	bl	8012bf4 <rcl_service_is_valid>
 801440c:	b1e8      	cbz	r0, 801444a <rcl_action_take_result_request+0x66>
 801440e:	6820      	ldr	r0, [r4, #0]
 8014410:	300c      	adds	r0, #12
 8014412:	f7fe f9b5 	bl	8012780 <rcl_publisher_is_valid>
 8014416:	b1c0      	cbz	r0, 801444a <rcl_action_take_result_request+0x66>
 8014418:	6820      	ldr	r0, [r4, #0]
 801441a:	3010      	adds	r0, #16
 801441c:	f7fe f9b0 	bl	8012780 <rcl_publisher_is_valid>
 8014420:	b198      	cbz	r0, 801444a <rcl_action_take_result_request+0x66>
 8014422:	b1d5      	cbz	r5, 801445a <rcl_action_take_result_request+0x76>
 8014424:	b1ce      	cbz	r6, 801445a <rcl_action_take_result_request+0x76>
 8014426:	6820      	ldr	r0, [r4, #0]
 8014428:	462a      	mov	r2, r5
 801442a:	4631      	mov	r1, r6
 801442c:	3008      	adds	r0, #8
 801442e:	f7fe fb89 	bl	8012b44 <rcl_take_request>
 8014432:	b148      	cbz	r0, 8014448 <rcl_action_take_result_request+0x64>
 8014434:	280a      	cmp	r0, #10
 8014436:	d007      	beq.n	8014448 <rcl_action_take_result_request+0x64>
 8014438:	f240 2259 	movw	r2, #601	@ 0x259
 801443c:	f640 0399 	movw	r3, #2201	@ 0x899
 8014440:	4290      	cmp	r0, r2
 8014442:	bf0c      	ite	eq
 8014444:	4618      	moveq	r0, r3
 8014446:	2001      	movne	r0, #1
 8014448:	bd70      	pop	{r4, r5, r6, pc}
 801444a:	f7fc fd15 	bl	8010e78 <rcutils_reset_error>
 801444e:	f640 0098 	movw	r0, #2200	@ 0x898
 8014452:	bd70      	pop	{r4, r5, r6, pc}
 8014454:	f640 0098 	movw	r0, #2200	@ 0x898
 8014458:	bd70      	pop	{r4, r5, r6, pc}
 801445a:	200b      	movs	r0, #11
 801445c:	bd70      	pop	{r4, r5, r6, pc}
 801445e:	f640 0098 	movw	r0, #2200	@ 0x898
 8014462:	4770      	bx	lr

08014464 <rcl_action_take_cancel_request>:
 8014464:	2800      	cmp	r0, #0
 8014466:	d03a      	beq.n	80144de <rcl_action_take_cancel_request+0x7a>
 8014468:	b570      	push	{r4, r5, r6, lr}
 801446a:	4604      	mov	r4, r0
 801446c:	6800      	ldr	r0, [r0, #0]
 801446e:	b388      	cbz	r0, 80144d4 <rcl_action_take_cancel_request+0x70>
 8014470:	460e      	mov	r6, r1
 8014472:	4615      	mov	r5, r2
 8014474:	f7fe fbbe 	bl	8012bf4 <rcl_service_is_valid>
 8014478:	b338      	cbz	r0, 80144ca <rcl_action_take_cancel_request+0x66>
 801447a:	6820      	ldr	r0, [r4, #0]
 801447c:	3004      	adds	r0, #4
 801447e:	f7fe fbb9 	bl	8012bf4 <rcl_service_is_valid>
 8014482:	b310      	cbz	r0, 80144ca <rcl_action_take_cancel_request+0x66>
 8014484:	6820      	ldr	r0, [r4, #0]
 8014486:	3008      	adds	r0, #8
 8014488:	f7fe fbb4 	bl	8012bf4 <rcl_service_is_valid>
 801448c:	b1e8      	cbz	r0, 80144ca <rcl_action_take_cancel_request+0x66>
 801448e:	6820      	ldr	r0, [r4, #0]
 8014490:	300c      	adds	r0, #12
 8014492:	f7fe f975 	bl	8012780 <rcl_publisher_is_valid>
 8014496:	b1c0      	cbz	r0, 80144ca <rcl_action_take_cancel_request+0x66>
 8014498:	6820      	ldr	r0, [r4, #0]
 801449a:	3010      	adds	r0, #16
 801449c:	f7fe f970 	bl	8012780 <rcl_publisher_is_valid>
 80144a0:	b198      	cbz	r0, 80144ca <rcl_action_take_cancel_request+0x66>
 80144a2:	b1d5      	cbz	r5, 80144da <rcl_action_take_cancel_request+0x76>
 80144a4:	b1ce      	cbz	r6, 80144da <rcl_action_take_cancel_request+0x76>
 80144a6:	6820      	ldr	r0, [r4, #0]
 80144a8:	462a      	mov	r2, r5
 80144aa:	4631      	mov	r1, r6
 80144ac:	3004      	adds	r0, #4
 80144ae:	f7fe fb49 	bl	8012b44 <rcl_take_request>
 80144b2:	b148      	cbz	r0, 80144c8 <rcl_action_take_cancel_request+0x64>
 80144b4:	280a      	cmp	r0, #10
 80144b6:	d007      	beq.n	80144c8 <rcl_action_take_cancel_request+0x64>
 80144b8:	f240 2259 	movw	r2, #601	@ 0x259
 80144bc:	f640 0399 	movw	r3, #2201	@ 0x899
 80144c0:	4290      	cmp	r0, r2
 80144c2:	bf0c      	ite	eq
 80144c4:	4618      	moveq	r0, r3
 80144c6:	2001      	movne	r0, #1
 80144c8:	bd70      	pop	{r4, r5, r6, pc}
 80144ca:	f7fc fcd5 	bl	8010e78 <rcutils_reset_error>
 80144ce:	f640 0098 	movw	r0, #2200	@ 0x898
 80144d2:	bd70      	pop	{r4, r5, r6, pc}
 80144d4:	f640 0098 	movw	r0, #2200	@ 0x898
 80144d8:	bd70      	pop	{r4, r5, r6, pc}
 80144da:	200b      	movs	r0, #11
 80144dc:	bd70      	pop	{r4, r5, r6, pc}
 80144de:	f640 0098 	movw	r0, #2200	@ 0x898
 80144e2:	4770      	bx	lr

080144e4 <rcl_action_send_cancel_response>:
 80144e4:	b398      	cbz	r0, 801454e <rcl_action_send_cancel_response+0x6a>
 80144e6:	b570      	push	{r4, r5, r6, lr}
 80144e8:	4604      	mov	r4, r0
 80144ea:	6800      	ldr	r0, [r0, #0]
 80144ec:	b350      	cbz	r0, 8014544 <rcl_action_send_cancel_response+0x60>
 80144ee:	460e      	mov	r6, r1
 80144f0:	4615      	mov	r5, r2
 80144f2:	f7fe fb7f 	bl	8012bf4 <rcl_service_is_valid>
 80144f6:	b300      	cbz	r0, 801453a <rcl_action_send_cancel_response+0x56>
 80144f8:	6820      	ldr	r0, [r4, #0]
 80144fa:	3004      	adds	r0, #4
 80144fc:	f7fe fb7a 	bl	8012bf4 <rcl_service_is_valid>
 8014500:	b1d8      	cbz	r0, 801453a <rcl_action_send_cancel_response+0x56>
 8014502:	6820      	ldr	r0, [r4, #0]
 8014504:	3008      	adds	r0, #8
 8014506:	f7fe fb75 	bl	8012bf4 <rcl_service_is_valid>
 801450a:	b1b0      	cbz	r0, 801453a <rcl_action_send_cancel_response+0x56>
 801450c:	6820      	ldr	r0, [r4, #0]
 801450e:	300c      	adds	r0, #12
 8014510:	f7fe f936 	bl	8012780 <rcl_publisher_is_valid>
 8014514:	b188      	cbz	r0, 801453a <rcl_action_send_cancel_response+0x56>
 8014516:	6820      	ldr	r0, [r4, #0]
 8014518:	3010      	adds	r0, #16
 801451a:	f7fe f931 	bl	8012780 <rcl_publisher_is_valid>
 801451e:	b160      	cbz	r0, 801453a <rcl_action_send_cancel_response+0x56>
 8014520:	b19d      	cbz	r5, 801454a <rcl_action_send_cancel_response+0x66>
 8014522:	b196      	cbz	r6, 801454a <rcl_action_send_cancel_response+0x66>
 8014524:	6820      	ldr	r0, [r4, #0]
 8014526:	462a      	mov	r2, r5
 8014528:	4631      	mov	r1, r6
 801452a:	3004      	adds	r0, #4
 801452c:	f7fe fb4a 	bl	8012bc4 <rcl_send_response>
 8014530:	b110      	cbz	r0, 8014538 <rcl_action_send_cancel_response+0x54>
 8014532:	2802      	cmp	r0, #2
 8014534:	bf18      	it	ne
 8014536:	2001      	movne	r0, #1
 8014538:	bd70      	pop	{r4, r5, r6, pc}
 801453a:	f7fc fc9d 	bl	8010e78 <rcutils_reset_error>
 801453e:	f640 0098 	movw	r0, #2200	@ 0x898
 8014542:	bd70      	pop	{r4, r5, r6, pc}
 8014544:	f640 0098 	movw	r0, #2200	@ 0x898
 8014548:	bd70      	pop	{r4, r5, r6, pc}
 801454a:	200b      	movs	r0, #11
 801454c:	bd70      	pop	{r4, r5, r6, pc}
 801454e:	f640 0098 	movw	r0, #2200	@ 0x898
 8014552:	4770      	bx	lr

08014554 <rcl_action_wait_set_add_action_server>:
 8014554:	2800      	cmp	r0, #0
 8014556:	d04d      	beq.n	80145f4 <rcl_action_wait_set_add_action_server+0xa0>
 8014558:	b570      	push	{r4, r5, r6, lr}
 801455a:	460c      	mov	r4, r1
 801455c:	b159      	cbz	r1, 8014576 <rcl_action_wait_set_add_action_server+0x22>
 801455e:	4605      	mov	r5, r0
 8014560:	6808      	ldr	r0, [r1, #0]
 8014562:	b140      	cbz	r0, 8014576 <rcl_action_wait_set_add_action_server+0x22>
 8014564:	4616      	mov	r6, r2
 8014566:	f7fe fb45 	bl	8012bf4 <rcl_service_is_valid>
 801456a:	b120      	cbz	r0, 8014576 <rcl_action_wait_set_add_action_server+0x22>
 801456c:	6820      	ldr	r0, [r4, #0]
 801456e:	3004      	adds	r0, #4
 8014570:	f7fe fb40 	bl	8012bf4 <rcl_service_is_valid>
 8014574:	b910      	cbnz	r0, 801457c <rcl_action_wait_set_add_action_server+0x28>
 8014576:	f640 0098 	movw	r0, #2200	@ 0x898
 801457a:	bd70      	pop	{r4, r5, r6, pc}
 801457c:	6820      	ldr	r0, [r4, #0]
 801457e:	3008      	adds	r0, #8
 8014580:	f7fe fb38 	bl	8012bf4 <rcl_service_is_valid>
 8014584:	2800      	cmp	r0, #0
 8014586:	d0f6      	beq.n	8014576 <rcl_action_wait_set_add_action_server+0x22>
 8014588:	6820      	ldr	r0, [r4, #0]
 801458a:	300c      	adds	r0, #12
 801458c:	f7fe f910 	bl	80127b0 <rcl_publisher_is_valid_except_context>
 8014590:	2800      	cmp	r0, #0
 8014592:	d0f0      	beq.n	8014576 <rcl_action_wait_set_add_action_server+0x22>
 8014594:	6820      	ldr	r0, [r4, #0]
 8014596:	3010      	adds	r0, #16
 8014598:	f7fe f90a 	bl	80127b0 <rcl_publisher_is_valid_except_context>
 801459c:	2800      	cmp	r0, #0
 801459e:	d0ea      	beq.n	8014576 <rcl_action_wait_set_add_action_server+0x22>
 80145a0:	6821      	ldr	r1, [r4, #0]
 80145a2:	4628      	mov	r0, r5
 80145a4:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80145a8:	f7ff fad0 	bl	8013b4c <rcl_wait_set_add_service>
 80145ac:	2800      	cmp	r0, #0
 80145ae:	d1e4      	bne.n	801457a <rcl_action_wait_set_add_action_server+0x26>
 80145b0:	6821      	ldr	r1, [r4, #0]
 80145b2:	4628      	mov	r0, r5
 80145b4:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80145b8:	3104      	adds	r1, #4
 80145ba:	f7ff fac7 	bl	8013b4c <rcl_wait_set_add_service>
 80145be:	2800      	cmp	r0, #0
 80145c0:	d1db      	bne.n	801457a <rcl_action_wait_set_add_action_server+0x26>
 80145c2:	6821      	ldr	r1, [r4, #0]
 80145c4:	4628      	mov	r0, r5
 80145c6:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80145ca:	3108      	adds	r1, #8
 80145cc:	f7ff fabe 	bl	8013b4c <rcl_wait_set_add_service>
 80145d0:	2800      	cmp	r0, #0
 80145d2:	d1d2      	bne.n	801457a <rcl_action_wait_set_add_action_server+0x26>
 80145d4:	6821      	ldr	r1, [r4, #0]
 80145d6:	4628      	mov	r0, r5
 80145d8:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80145dc:	3114      	adds	r1, #20
 80145de:	f7ff fa59 	bl	8013a94 <rcl_wait_set_add_timer>
 80145e2:	2800      	cmp	r0, #0
 80145e4:	d1c9      	bne.n	801457a <rcl_action_wait_set_add_action_server+0x26>
 80145e6:	2e00      	cmp	r6, #0
 80145e8:	d0c7      	beq.n	801457a <rcl_action_wait_set_add_action_server+0x26>
 80145ea:	6823      	ldr	r3, [r4, #0]
 80145ec:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80145f0:	6033      	str	r3, [r6, #0]
 80145f2:	bd70      	pop	{r4, r5, r6, pc}
 80145f4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80145f8:	4770      	bx	lr
 80145fa:	bf00      	nop

080145fc <rcl_action_server_wait_set_get_entities_ready>:
 80145fc:	2800      	cmp	r0, #0
 80145fe:	d067      	beq.n	80146d0 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 8014600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014604:	460c      	mov	r4, r1
 8014606:	b161      	cbz	r1, 8014622 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8014608:	4605      	mov	r5, r0
 801460a:	6808      	ldr	r0, [r1, #0]
 801460c:	b148      	cbz	r0, 8014622 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801460e:	4616      	mov	r6, r2
 8014610:	4698      	mov	r8, r3
 8014612:	f7fe faef 	bl	8012bf4 <rcl_service_is_valid>
 8014616:	b120      	cbz	r0, 8014622 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8014618:	6820      	ldr	r0, [r4, #0]
 801461a:	3004      	adds	r0, #4
 801461c:	f7fe faea 	bl	8012bf4 <rcl_service_is_valid>
 8014620:	b918      	cbnz	r0, 801462a <rcl_action_server_wait_set_get_entities_ready+0x2e>
 8014622:	f640 0098 	movw	r0, #2200	@ 0x898
 8014626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801462a:	6820      	ldr	r0, [r4, #0]
 801462c:	3008      	adds	r0, #8
 801462e:	f7fe fae1 	bl	8012bf4 <rcl_service_is_valid>
 8014632:	2800      	cmp	r0, #0
 8014634:	d0f5      	beq.n	8014622 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8014636:	6820      	ldr	r0, [r4, #0]
 8014638:	300c      	adds	r0, #12
 801463a:	f7fe f8b9 	bl	80127b0 <rcl_publisher_is_valid_except_context>
 801463e:	2800      	cmp	r0, #0
 8014640:	d0ef      	beq.n	8014622 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8014642:	6820      	ldr	r0, [r4, #0]
 8014644:	3010      	adds	r0, #16
 8014646:	f7fe f8b3 	bl	80127b0 <rcl_publisher_is_valid_except_context>
 801464a:	2800      	cmp	r0, #0
 801464c:	d0e9      	beq.n	8014622 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801464e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014652:	2a00      	cmp	r2, #0
 8014654:	bf18      	it	ne
 8014656:	2b00      	cmpne	r3, #0
 8014658:	bf0c      	ite	eq
 801465a:	2101      	moveq	r1, #1
 801465c:	2100      	movne	r1, #0
 801465e:	f1b8 0f00 	cmp.w	r8, #0
 8014662:	bf08      	it	eq
 8014664:	f041 0101 	orreq.w	r1, r1, #1
 8014668:	bba9      	cbnz	r1, 80146d6 <rcl_action_server_wait_set_get_entities_ready+0xda>
 801466a:	b3a6      	cbz	r6, 80146d6 <rcl_action_server_wait_set_get_entities_ready+0xda>
 801466c:	6821      	ldr	r1, [r4, #0]
 801466e:	2000      	movs	r0, #0
 8014670:	692c      	ldr	r4, [r5, #16]
 8014672:	f8d1 21e8 	ldr.w	r2, [r1, #488]	@ 0x1e8
 8014676:	6a2f      	ldr	r7, [r5, #32]
 8014678:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801467c:	f8d1 41dc 	ldr.w	r4, [r1, #476]	@ 0x1dc
 8014680:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8014684:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 8014688:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 801468c:	1a64      	subs	r4, r4, r1
 801468e:	f8d1 31e4 	ldr.w	r3, [r1, #484]	@ 0x1e4
 8014692:	fab4 f484 	clz	r4, r4
 8014696:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801469a:	0964      	lsrs	r4, r4, #5
 801469c:	7034      	strb	r4, [r6, #0]
 801469e:	1d0c      	adds	r4, r1, #4
 80146a0:	1b2c      	subs	r4, r5, r4
 80146a2:	fab4 f484 	clz	r4, r4
 80146a6:	0964      	lsrs	r4, r4, #5
 80146a8:	f888 4000 	strb.w	r4, [r8]
 80146ac:	f101 0408 	add.w	r4, r1, #8
 80146b0:	1b1b      	subs	r3, r3, r4
 80146b2:	9c06      	ldr	r4, [sp, #24]
 80146b4:	fab3 f383 	clz	r3, r3
 80146b8:	095b      	lsrs	r3, r3, #5
 80146ba:	7023      	strb	r3, [r4, #0]
 80146bc:	f101 0314 	add.w	r3, r1, #20
 80146c0:	1ad3      	subs	r3, r2, r3
 80146c2:	9a07      	ldr	r2, [sp, #28]
 80146c4:	fab3 f383 	clz	r3, r3
 80146c8:	095b      	lsrs	r3, r3, #5
 80146ca:	7013      	strb	r3, [r2, #0]
 80146cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146d0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80146d4:	4770      	bx	lr
 80146d6:	200b      	movs	r0, #11
 80146d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080146dc <_execute_event_handler>:
 80146dc:	2002      	movs	r0, #2
 80146de:	4770      	bx	lr

080146e0 <_cancel_goal_event_handler>:
 80146e0:	2003      	movs	r0, #3
 80146e2:	4770      	bx	lr

080146e4 <_succeed_event_handler>:
 80146e4:	2004      	movs	r0, #4
 80146e6:	4770      	bx	lr

080146e8 <_abort_event_handler>:
 80146e8:	2006      	movs	r0, #6
 80146ea:	4770      	bx	lr

080146ec <_canceled_event_handler>:
 80146ec:	2005      	movs	r0, #5
 80146ee:	4770      	bx	lr

080146f0 <rcl_action_transition_goal_state>:
 80146f0:	b2c2      	uxtb	r2, r0
 80146f2:	2a06      	cmp	r2, #6
 80146f4:	d810      	bhi.n	8014718 <rcl_action_transition_goal_state+0x28>
 80146f6:	2904      	cmp	r1, #4
 80146f8:	d80e      	bhi.n	8014718 <rcl_action_transition_goal_state+0x28>
 80146fa:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80146fe:	b410      	push	{r4}
 8014700:	1853      	adds	r3, r2, r1
 8014702:	4c06      	ldr	r4, [pc, #24]	@ (801471c <rcl_action_transition_goal_state+0x2c>)
 8014704:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8014708:	b113      	cbz	r3, 8014710 <rcl_action_transition_goal_state+0x20>
 801470a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801470e:	4718      	bx	r3
 8014710:	2000      	movs	r0, #0
 8014712:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014716:	4770      	bx	lr
 8014718:	2000      	movs	r0, #0
 801471a:	4770      	bx	lr
 801471c:	0801fe3c 	.word	0x0801fe3c

08014720 <rcl_action_get_zero_initialized_cancel_response>:
 8014720:	b510      	push	{r4, lr}
 8014722:	4c07      	ldr	r4, [pc, #28]	@ (8014740 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8014724:	4686      	mov	lr, r0
 8014726:	4684      	mov	ip, r0
 8014728:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801472a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801472e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014730:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014734:	6823      	ldr	r3, [r4, #0]
 8014736:	4670      	mov	r0, lr
 8014738:	f8cc 3000 	str.w	r3, [ip]
 801473c:	bd10      	pop	{r4, pc}
 801473e:	bf00      	nop
 8014740:	0801fec8 	.word	0x0801fec8

08014744 <rclc_action_send_result_request>:
 8014744:	b1d0      	cbz	r0, 801477c <rclc_action_send_result_request+0x38>
 8014746:	4684      	mov	ip, r0
 8014748:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801474c:	b500      	push	{lr}
 801474e:	b087      	sub	sp, #28
 8014750:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8014754:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8014758:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801475c:	f10d 0e08 	add.w	lr, sp, #8
 8014760:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014764:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8014768:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801476c:	a902      	add	r1, sp, #8
 801476e:	3010      	adds	r0, #16
 8014770:	f7ff fbca 	bl	8013f08 <rcl_action_send_result_request>
 8014774:	b920      	cbnz	r0, 8014780 <rclc_action_send_result_request+0x3c>
 8014776:	b007      	add	sp, #28
 8014778:	f85d fb04 	ldr.w	pc, [sp], #4
 801477c:	200b      	movs	r0, #11
 801477e:	4770      	bx	lr
 8014780:	9001      	str	r0, [sp, #4]
 8014782:	f7fc fb79 	bl	8010e78 <rcutils_reset_error>
 8014786:	9801      	ldr	r0, [sp, #4]
 8014788:	b007      	add	sp, #28
 801478a:	f85d fb04 	ldr.w	pc, [sp], #4
 801478e:	bf00      	nop

08014790 <rclc_action_take_goal_handle>:
 8014790:	b160      	cbz	r0, 80147ac <rclc_action_take_goal_handle+0x1c>
 8014792:	6883      	ldr	r3, [r0, #8]
 8014794:	b143      	cbz	r3, 80147a8 <rclc_action_take_goal_handle+0x18>
 8014796:	6819      	ldr	r1, [r3, #0]
 8014798:	2200      	movs	r2, #0
 801479a:	6081      	str	r1, [r0, #8]
 801479c:	721a      	strb	r2, [r3, #8]
 801479e:	68c1      	ldr	r1, [r0, #12]
 80147a0:	621a      	str	r2, [r3, #32]
 80147a2:	849a      	strh	r2, [r3, #36]	@ 0x24
 80147a4:	6019      	str	r1, [r3, #0]
 80147a6:	60c3      	str	r3, [r0, #12]
 80147a8:	4618      	mov	r0, r3
 80147aa:	4770      	bx	lr
 80147ac:	4603      	mov	r3, r0
 80147ae:	e7fb      	b.n	80147a8 <rclc_action_take_goal_handle+0x18>

080147b0 <rclc_action_remove_used_goal_handle>:
 80147b0:	b180      	cbz	r0, 80147d4 <rclc_action_remove_used_goal_handle+0x24>
 80147b2:	b179      	cbz	r1, 80147d4 <rclc_action_remove_used_goal_handle+0x24>
 80147b4:	68c3      	ldr	r3, [r0, #12]
 80147b6:	4299      	cmp	r1, r3
 80147b8:	d00d      	beq.n	80147d6 <rclc_action_remove_used_goal_handle+0x26>
 80147ba:	b12b      	cbz	r3, 80147c8 <rclc_action_remove_used_goal_handle+0x18>
 80147bc:	681a      	ldr	r2, [r3, #0]
 80147be:	4291      	cmp	r1, r2
 80147c0:	d003      	beq.n	80147ca <rclc_action_remove_used_goal_handle+0x1a>
 80147c2:	4613      	mov	r3, r2
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d1f9      	bne.n	80147bc <rclc_action_remove_used_goal_handle+0xc>
 80147c8:	4770      	bx	lr
 80147ca:	680a      	ldr	r2, [r1, #0]
 80147cc:	601a      	str	r2, [r3, #0]
 80147ce:	6883      	ldr	r3, [r0, #8]
 80147d0:	600b      	str	r3, [r1, #0]
 80147d2:	6081      	str	r1, [r0, #8]
 80147d4:	4770      	bx	lr
 80147d6:	680b      	ldr	r3, [r1, #0]
 80147d8:	60c3      	str	r3, [r0, #12]
 80147da:	e7f8      	b.n	80147ce <rclc_action_remove_used_goal_handle+0x1e>

080147dc <rclc_action_find_goal_handle_by_uuid>:
 80147dc:	b538      	push	{r3, r4, r5, lr}
 80147de:	b181      	cbz	r1, 8014802 <rclc_action_find_goal_handle_by_uuid+0x26>
 80147e0:	b178      	cbz	r0, 8014802 <rclc_action_find_goal_handle_by_uuid+0x26>
 80147e2:	68c4      	ldr	r4, [r0, #12]
 80147e4:	460d      	mov	r5, r1
 80147e6:	b914      	cbnz	r4, 80147ee <rclc_action_find_goal_handle_by_uuid+0x12>
 80147e8:	e009      	b.n	80147fe <rclc_action_find_goal_handle_by_uuid+0x22>
 80147ea:	6824      	ldr	r4, [r4, #0]
 80147ec:	b13c      	cbz	r4, 80147fe <rclc_action_find_goal_handle_by_uuid+0x22>
 80147ee:	f104 0009 	add.w	r0, r4, #9
 80147f2:	2210      	movs	r2, #16
 80147f4:	4629      	mov	r1, r5
 80147f6:	f008 fc33 	bl	801d060 <memcmp>
 80147fa:	2800      	cmp	r0, #0
 80147fc:	d1f5      	bne.n	80147ea <rclc_action_find_goal_handle_by_uuid+0xe>
 80147fe:	4620      	mov	r0, r4
 8014800:	bd38      	pop	{r3, r4, r5, pc}
 8014802:	2400      	movs	r4, #0
 8014804:	4620      	mov	r0, r4
 8014806:	bd38      	pop	{r3, r4, r5, pc}

08014808 <rclc_action_find_first_handle_by_status>:
 8014808:	b140      	cbz	r0, 801481c <rclc_action_find_first_handle_by_status+0x14>
 801480a:	68c0      	ldr	r0, [r0, #12]
 801480c:	b910      	cbnz	r0, 8014814 <rclc_action_find_first_handle_by_status+0xc>
 801480e:	e005      	b.n	801481c <rclc_action_find_first_handle_by_status+0x14>
 8014810:	6800      	ldr	r0, [r0, #0]
 8014812:	b118      	cbz	r0, 801481c <rclc_action_find_first_handle_by_status+0x14>
 8014814:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8014818:	428b      	cmp	r3, r1
 801481a:	d1f9      	bne.n	8014810 <rclc_action_find_first_handle_by_status+0x8>
 801481c:	4770      	bx	lr
 801481e:	bf00      	nop

08014820 <rclc_action_find_first_terminated_handle>:
 8014820:	b140      	cbz	r0, 8014834 <rclc_action_find_first_terminated_handle+0x14>
 8014822:	68c0      	ldr	r0, [r0, #12]
 8014824:	b910      	cbnz	r0, 801482c <rclc_action_find_first_terminated_handle+0xc>
 8014826:	e005      	b.n	8014834 <rclc_action_find_first_terminated_handle+0x14>
 8014828:	6800      	ldr	r0, [r0, #0]
 801482a:	b118      	cbz	r0, 8014834 <rclc_action_find_first_terminated_handle+0x14>
 801482c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8014830:	2b03      	cmp	r3, #3
 8014832:	ddf9      	ble.n	8014828 <rclc_action_find_first_terminated_handle+0x8>
 8014834:	4770      	bx	lr
 8014836:	bf00      	nop

08014838 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8014838:	b170      	cbz	r0, 8014858 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801483a:	68c0      	ldr	r0, [r0, #12]
 801483c:	b160      	cbz	r0, 8014858 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801483e:	b410      	push	{r4}
 8014840:	e001      	b.n	8014846 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8014842:	6800      	ldr	r0, [r0, #0]
 8014844:	b128      	cbz	r0, 8014852 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8014846:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801484a:	4299      	cmp	r1, r3
 801484c:	bf08      	it	eq
 801484e:	4294      	cmpeq	r4, r2
 8014850:	d1f7      	bne.n	8014842 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8014852:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014856:	4770      	bx	lr
 8014858:	4770      	bx	lr
 801485a:	bf00      	nop

0801485c <rclc_action_find_handle_by_result_request_sequence_number>:
 801485c:	b170      	cbz	r0, 801487c <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801485e:	68c0      	ldr	r0, [r0, #12]
 8014860:	b160      	cbz	r0, 801487c <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8014862:	b410      	push	{r4}
 8014864:	e001      	b.n	801486a <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8014866:	6800      	ldr	r0, [r0, #0]
 8014868:	b128      	cbz	r0, 8014876 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801486a:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801486e:	4299      	cmp	r1, r3
 8014870:	bf08      	it	eq
 8014872:	4294      	cmpeq	r4, r2
 8014874:	d1f7      	bne.n	8014866 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8014876:	f85d 4b04 	ldr.w	r4, [sp], #4
 801487a:	4770      	bx	lr
 801487c:	4770      	bx	lr
 801487e:	bf00      	nop

08014880 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8014880:	b170      	cbz	r0, 80148a0 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8014882:	68c0      	ldr	r0, [r0, #12]
 8014884:	b160      	cbz	r0, 80148a0 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8014886:	b410      	push	{r4}
 8014888:	e001      	b.n	801488e <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801488a:	6800      	ldr	r0, [r0, #0]
 801488c:	b128      	cbz	r0, 801489a <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801488e:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8014892:	4299      	cmp	r1, r3
 8014894:	bf08      	it	eq
 8014896:	4294      	cmpeq	r4, r2
 8014898:	d1f7      	bne.n	801488a <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801489a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801489e:	4770      	bx	lr
 80148a0:	4770      	bx	lr
 80148a2:	bf00      	nop

080148a4 <rclc_action_find_first_handle_with_goal_response>:
 80148a4:	b140      	cbz	r0, 80148b8 <rclc_action_find_first_handle_with_goal_response+0x14>
 80148a6:	68c0      	ldr	r0, [r0, #12]
 80148a8:	b910      	cbnz	r0, 80148b0 <rclc_action_find_first_handle_with_goal_response+0xc>
 80148aa:	e005      	b.n	80148b8 <rclc_action_find_first_handle_with_goal_response+0x14>
 80148ac:	6800      	ldr	r0, [r0, #0]
 80148ae:	b118      	cbz	r0, 80148b8 <rclc_action_find_first_handle_with_goal_response+0x14>
 80148b0:	f890 3020 	ldrb.w	r3, [r0, #32]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d0f9      	beq.n	80148ac <rclc_action_find_first_handle_with_goal_response+0x8>
 80148b8:	4770      	bx	lr
 80148ba:	bf00      	nop

080148bc <rclc_action_find_first_handle_with_result_response>:
 80148bc:	b140      	cbz	r0, 80148d0 <rclc_action_find_first_handle_with_result_response+0x14>
 80148be:	68c0      	ldr	r0, [r0, #12]
 80148c0:	b910      	cbnz	r0, 80148c8 <rclc_action_find_first_handle_with_result_response+0xc>
 80148c2:	e005      	b.n	80148d0 <rclc_action_find_first_handle_with_result_response+0x14>
 80148c4:	6800      	ldr	r0, [r0, #0]
 80148c6:	b118      	cbz	r0, 80148d0 <rclc_action_find_first_handle_with_result_response+0x14>
 80148c8:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d0f9      	beq.n	80148c4 <rclc_action_find_first_handle_with_result_response+0x8>
 80148d0:	4770      	bx	lr
 80148d2:	bf00      	nop

080148d4 <rclc_action_server_response_goal_request>:
 80148d4:	b198      	cbz	r0, 80148fe <rclc_action_server_response_goal_request+0x2a>
 80148d6:	2200      	movs	r2, #0
 80148d8:	460b      	mov	r3, r1
 80148da:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80148de:	b510      	push	{r4, lr}
 80148e0:	6844      	ldr	r4, [r0, #4]
 80148e2:	b086      	sub	sp, #24
 80148e4:	f104 0010 	add.w	r0, r4, #16
 80148e8:	9205      	str	r2, [sp, #20]
 80148ea:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80148ee:	aa03      	add	r2, sp, #12
 80148f0:	f88d 300c 	strb.w	r3, [sp, #12]
 80148f4:	f7ff fd3e 	bl	8014374 <rcl_action_send_goal_response>
 80148f8:	b918      	cbnz	r0, 8014902 <rclc_action_server_response_goal_request+0x2e>
 80148fa:	b006      	add	sp, #24
 80148fc:	bd10      	pop	{r4, pc}
 80148fe:	200b      	movs	r0, #11
 8014900:	4770      	bx	lr
 8014902:	9001      	str	r0, [sp, #4]
 8014904:	f7fc fab8 	bl	8010e78 <rcutils_reset_error>
 8014908:	9801      	ldr	r0, [sp, #4]
 801490a:	b006      	add	sp, #24
 801490c:	bd10      	pop	{r4, pc}
 801490e:	bf00      	nop

08014910 <rclc_action_server_goal_cancel_accept>:
 8014910:	b310      	cbz	r0, 8014958 <rclc_action_server_goal_cancel_accept+0x48>
 8014912:	b510      	push	{r4, lr}
 8014914:	b090      	sub	sp, #64	@ 0x40
 8014916:	4604      	mov	r4, r0
 8014918:	a806      	add	r0, sp, #24
 801491a:	f7ff ff01 	bl	8014720 <rcl_action_get_zero_initialized_cancel_response>
 801491e:	2300      	movs	r3, #0
 8014920:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8014924:	46ec      	mov	ip, sp
 8014926:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801492a:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801492e:	f88d 3018 	strb.w	r3, [sp, #24]
 8014932:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8014936:	f8cd d01c 	str.w	sp, [sp, #28]
 801493a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801493e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8014960 <rclc_action_server_goal_cancel_accept+0x50>
 8014942:	6860      	ldr	r0, [r4, #4]
 8014944:	aa06      	add	r2, sp, #24
 8014946:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801494a:	3010      	adds	r0, #16
 801494c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014950:	f7ff fdc8 	bl	80144e4 <rcl_action_send_cancel_response>
 8014954:	b010      	add	sp, #64	@ 0x40
 8014956:	bd10      	pop	{r4, pc}
 8014958:	200b      	movs	r0, #11
 801495a:	4770      	bx	lr
 801495c:	f3af 8000 	nop.w
 8014960:	00000001 	.word	0x00000001
 8014964:	00000001 	.word	0x00000001

08014968 <rclc_action_server_goal_cancel_reject>:
 8014968:	b082      	sub	sp, #8
 801496a:	b530      	push	{r4, r5, lr}
 801496c:	b08b      	sub	sp, #44	@ 0x2c
 801496e:	ac0e      	add	r4, sp, #56	@ 0x38
 8014970:	e884 000c 	stmia.w	r4, {r2, r3}
 8014974:	b188      	cbz	r0, 801499a <rclc_action_server_goal_cancel_reject+0x32>
 8014976:	4604      	mov	r4, r0
 8014978:	a801      	add	r0, sp, #4
 801497a:	460d      	mov	r5, r1
 801497c:	f7ff fed0 	bl	8014720 <rcl_action_get_zero_initialized_cancel_response>
 8014980:	aa01      	add	r2, sp, #4
 8014982:	a90e      	add	r1, sp, #56	@ 0x38
 8014984:	f104 0010 	add.w	r0, r4, #16
 8014988:	f88d 5004 	strb.w	r5, [sp, #4]
 801498c:	f7ff fdaa 	bl	80144e4 <rcl_action_send_cancel_response>
 8014990:	b00b      	add	sp, #44	@ 0x2c
 8014992:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014996:	b002      	add	sp, #8
 8014998:	4770      	bx	lr
 801499a:	200b      	movs	r0, #11
 801499c:	b00b      	add	sp, #44	@ 0x2c
 801499e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80149a2:	b002      	add	sp, #8
 80149a4:	4770      	bx	lr
 80149a6:	bf00      	nop

080149a8 <__atomic_load_8>:
 80149a8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80149ac:	4a16      	ldr	r2, [pc, #88]	@ (8014a08 <__atomic_load_8+0x60>)
 80149ae:	4b17      	ldr	r3, [pc, #92]	@ (8014a0c <__atomic_load_8+0x64>)
 80149b0:	f04f 0c01 	mov.w	ip, #1
 80149b4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80149b8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80149bc:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80149c0:	fb02 f101 	mul.w	r1, r2, r1
 80149c4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80149c8:	fba3 2301 	umull	r2, r3, r3, r1
 80149cc:	091b      	lsrs	r3, r3, #4
 80149ce:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80149d2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80149d6:	b4d0      	push	{r4, r6, r7}
 80149d8:	1ac9      	subs	r1, r1, r3
 80149da:	4c0d      	ldr	r4, [pc, #52]	@ (8014a10 <__atomic_load_8+0x68>)
 80149dc:	1862      	adds	r2, r4, r1
 80149de:	e8d2 3f4f 	ldrexb	r3, [r2]
 80149e2:	e8c2 cf46 	strexb	r6, ip, [r2]
 80149e6:	2e00      	cmp	r6, #0
 80149e8:	d1f9      	bne.n	80149de <__atomic_load_8+0x36>
 80149ea:	b2db      	uxtb	r3, r3
 80149ec:	f3bf 8f5b 	dmb	ish
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d1f4      	bne.n	80149de <__atomic_load_8+0x36>
 80149f4:	e9d0 6700 	ldrd	r6, r7, [r0]
 80149f8:	f3bf 8f5b 	dmb	ish
 80149fc:	5463      	strb	r3, [r4, r1]
 80149fe:	4630      	mov	r0, r6
 8014a00:	4639      	mov	r1, r7
 8014a02:	bcd0      	pop	{r4, r6, r7}
 8014a04:	4770      	bx	lr
 8014a06:	bf00      	nop
 8014a08:	27d4eb2d 	.word	0x27d4eb2d
 8014a0c:	b21642c9 	.word	0xb21642c9
 8014a10:	24064808 	.word	0x24064808

08014a14 <__atomic_store_8>:
 8014a14:	b570      	push	{r4, r5, r6, lr}
 8014a16:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8014a1a:	4916      	ldr	r1, [pc, #88]	@ (8014a74 <__atomic_store_8+0x60>)
 8014a1c:	4c16      	ldr	r4, [pc, #88]	@ (8014a78 <__atomic_store_8+0x64>)
 8014a1e:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 8014a22:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8014a26:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8014a2a:	fb01 fe0e 	mul.w	lr, r1, lr
 8014a2e:	4913      	ldr	r1, [pc, #76]	@ (8014a7c <__atomic_store_8+0x68>)
 8014a30:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8014a34:	fba1 510e 	umull	r5, r1, r1, lr
 8014a38:	f04f 0501 	mov.w	r5, #1
 8014a3c:	0909      	lsrs	r1, r1, #4
 8014a3e:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8014a42:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 8014a46:	ebae 0e01 	sub.w	lr, lr, r1
 8014a4a:	eb04 0c0e 	add.w	ip, r4, lr
 8014a4e:	e8dc 1f4f 	ldrexb	r1, [ip]
 8014a52:	e8cc 5f46 	strexb	r6, r5, [ip]
 8014a56:	2e00      	cmp	r6, #0
 8014a58:	d1f9      	bne.n	8014a4e <__atomic_store_8+0x3a>
 8014a5a:	b2c9      	uxtb	r1, r1
 8014a5c:	f3bf 8f5b 	dmb	ish
 8014a60:	2900      	cmp	r1, #0
 8014a62:	d1f4      	bne.n	8014a4e <__atomic_store_8+0x3a>
 8014a64:	e9c0 2300 	strd	r2, r3, [r0]
 8014a68:	f3bf 8f5b 	dmb	ish
 8014a6c:	f804 100e 	strb.w	r1, [r4, lr]
 8014a70:	bd70      	pop	{r4, r5, r6, pc}
 8014a72:	bf00      	nop
 8014a74:	27d4eb2d 	.word	0x27d4eb2d
 8014a78:	24064808 	.word	0x24064808
 8014a7c:	b21642c9 	.word	0xb21642c9

08014a80 <__atomic_exchange_8>:
 8014a80:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8014a84:	4917      	ldr	r1, [pc, #92]	@ (8014ae4 <__atomic_exchange_8+0x64>)
 8014a86:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8014a8a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8014a8e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8014a92:	fb01 fc0c 	mul.w	ip, r1, ip
 8014a96:	4914      	ldr	r1, [pc, #80]	@ (8014ae8 <__atomic_exchange_8+0x68>)
 8014a98:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8014a9c:	b570      	push	{r4, r5, r6, lr}
 8014a9e:	4686      	mov	lr, r0
 8014aa0:	fba1 010c 	umull	r0, r1, r1, ip
 8014aa4:	4d11      	ldr	r5, [pc, #68]	@ (8014aec <__atomic_exchange_8+0x6c>)
 8014aa6:	f04f 0001 	mov.w	r0, #1
 8014aaa:	0909      	lsrs	r1, r1, #4
 8014aac:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8014ab0:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8014ab4:	ebac 0c01 	sub.w	ip, ip, r1
 8014ab8:	eb05 010c 	add.w	r1, r5, ip
 8014abc:	e8d1 4f4f 	ldrexb	r4, [r1]
 8014ac0:	e8c1 0f46 	strexb	r6, r0, [r1]
 8014ac4:	2e00      	cmp	r6, #0
 8014ac6:	d1f9      	bne.n	8014abc <__atomic_exchange_8+0x3c>
 8014ac8:	b2e4      	uxtb	r4, r4
 8014aca:	f3bf 8f5b 	dmb	ish
 8014ace:	2c00      	cmp	r4, #0
 8014ad0:	d1f4      	bne.n	8014abc <__atomic_exchange_8+0x3c>
 8014ad2:	e9de 0100 	ldrd	r0, r1, [lr]
 8014ad6:	e9ce 2300 	strd	r2, r3, [lr]
 8014ada:	f3bf 8f5b 	dmb	ish
 8014ade:	f805 400c 	strb.w	r4, [r5, ip]
 8014ae2:	bd70      	pop	{r4, r5, r6, pc}
 8014ae4:	27d4eb2d 	.word	0x27d4eb2d
 8014ae8:	b21642c9 	.word	0xb21642c9
 8014aec:	24064808 	.word	0x24064808

08014af0 <rcutils_get_env>:
 8014af0:	b168      	cbz	r0, 8014b0e <rcutils_get_env+0x1e>
 8014af2:	b510      	push	{r4, lr}
 8014af4:	460c      	mov	r4, r1
 8014af6:	b129      	cbz	r1, 8014b04 <rcutils_get_env+0x14>
 8014af8:	f007 fe32 	bl	801c760 <getenv>
 8014afc:	b120      	cbz	r0, 8014b08 <rcutils_get_env+0x18>
 8014afe:	6020      	str	r0, [r4, #0]
 8014b00:	2000      	movs	r0, #0
 8014b02:	bd10      	pop	{r4, pc}
 8014b04:	4803      	ldr	r0, [pc, #12]	@ (8014b14 <rcutils_get_env+0x24>)
 8014b06:	bd10      	pop	{r4, pc}
 8014b08:	4b03      	ldr	r3, [pc, #12]	@ (8014b18 <rcutils_get_env+0x28>)
 8014b0a:	6023      	str	r3, [r4, #0]
 8014b0c:	bd10      	pop	{r4, pc}
 8014b0e:	4803      	ldr	r0, [pc, #12]	@ (8014b1c <rcutils_get_env+0x2c>)
 8014b10:	4770      	bx	lr
 8014b12:	bf00      	nop
 8014b14:	0801ff08 	.word	0x0801ff08
 8014b18:	080205c8 	.word	0x080205c8
 8014b1c:	0801feec 	.word	0x0801feec

08014b20 <rcutils_is_directory>:
 8014b20:	2000      	movs	r0, #0
 8014b22:	4770      	bx	lr

08014b24 <rcutils_join_path>:
 8014b24:	b082      	sub	sp, #8
 8014b26:	2000      	movs	r0, #0
 8014b28:	e88d 000c 	stmia.w	sp, {r2, r3}
 8014b2c:	b002      	add	sp, #8
 8014b2e:	4770      	bx	lr

08014b30 <rcutils_to_native_path>:
 8014b30:	b084      	sub	sp, #16
 8014b32:	2000      	movs	r0, #0
 8014b34:	f10d 0c04 	add.w	ip, sp, #4
 8014b38:	b004      	add	sp, #16
 8014b3a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8014b3e:	4770      	bx	lr

08014b40 <rcutils_format_string_limit>:
 8014b40:	b40f      	push	{r0, r1, r2, r3}
 8014b42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b44:	b083      	sub	sp, #12
 8014b46:	ac08      	add	r4, sp, #32
 8014b48:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8014b4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014b4e:	b326      	cbz	r6, 8014b9a <rcutils_format_string_limit+0x5a>
 8014b50:	a808      	add	r0, sp, #32
 8014b52:	f7fc f96d 	bl	8010e30 <rcutils_allocator_is_valid>
 8014b56:	b300      	cbz	r0, 8014b9a <rcutils_format_string_limit+0x5a>
 8014b58:	2100      	movs	r1, #0
 8014b5a:	ab0f      	add	r3, sp, #60	@ 0x3c
 8014b5c:	4632      	mov	r2, r6
 8014b5e:	4608      	mov	r0, r1
 8014b60:	e9cd 3300 	strd	r3, r3, [sp]
 8014b64:	f000 f906 	bl	8014d74 <rcutils_vsnprintf>
 8014b68:	1c43      	adds	r3, r0, #1
 8014b6a:	4605      	mov	r5, r0
 8014b6c:	d015      	beq.n	8014b9a <rcutils_format_string_limit+0x5a>
 8014b6e:	1c47      	adds	r7, r0, #1
 8014b70:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014b72:	429f      	cmp	r7, r3
 8014b74:	d901      	bls.n	8014b7a <rcutils_format_string_limit+0x3a>
 8014b76:	1e5d      	subs	r5, r3, #1
 8014b78:	461f      	mov	r7, r3
 8014b7a:	9b08      	ldr	r3, [sp, #32]
 8014b7c:	4638      	mov	r0, r7
 8014b7e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014b80:	4798      	blx	r3
 8014b82:	4604      	mov	r4, r0
 8014b84:	b148      	cbz	r0, 8014b9a <rcutils_format_string_limit+0x5a>
 8014b86:	4632      	mov	r2, r6
 8014b88:	4639      	mov	r1, r7
 8014b8a:	9b01      	ldr	r3, [sp, #4]
 8014b8c:	f000 f8f2 	bl	8014d74 <rcutils_vsnprintf>
 8014b90:	2800      	cmp	r0, #0
 8014b92:	db09      	blt.n	8014ba8 <rcutils_format_string_limit+0x68>
 8014b94:	2300      	movs	r3, #0
 8014b96:	5563      	strb	r3, [r4, r5]
 8014b98:	e000      	b.n	8014b9c <rcutils_format_string_limit+0x5c>
 8014b9a:	2400      	movs	r4, #0
 8014b9c:	4620      	mov	r0, r4
 8014b9e:	b003      	add	sp, #12
 8014ba0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014ba4:	b004      	add	sp, #16
 8014ba6:	4770      	bx	lr
 8014ba8:	4620      	mov	r0, r4
 8014baa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014bac:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014bae:	2400      	movs	r4, #0
 8014bb0:	4798      	blx	r3
 8014bb2:	e7f3      	b.n	8014b9c <rcutils_format_string_limit+0x5c>

08014bb4 <rcutils_repl_str>:
 8014bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bb8:	ed2d 8b02 	vpush	{d8}
 8014bbc:	b087      	sub	sp, #28
 8014bbe:	2600      	movs	r6, #0
 8014bc0:	4680      	mov	r8, r0
 8014bc2:	468a      	mov	sl, r1
 8014bc4:	9000      	str	r0, [sp, #0]
 8014bc6:	4608      	mov	r0, r1
 8014bc8:	ee08 2a10 	vmov	s16, r2
 8014bcc:	4699      	mov	r9, r3
 8014bce:	2510      	movs	r5, #16
 8014bd0:	f7eb fb90 	bl	80002f4 <strlen>
 8014bd4:	4637      	mov	r7, r6
 8014bd6:	46b3      	mov	fp, r6
 8014bd8:	9001      	str	r0, [sp, #4]
 8014bda:	e01e      	b.n	8014c1a <rcutils_repl_str+0x66>
 8014bdc:	f10b 0b01 	add.w	fp, fp, #1
 8014be0:	9b01      	ldr	r3, [sp, #4]
 8014be2:	455e      	cmp	r6, fp
 8014be4:	eb04 0803 	add.w	r8, r4, r3
 8014be8:	d211      	bcs.n	8014c0e <rcutils_repl_str+0x5a>
 8014bea:	442e      	add	r6, r5
 8014bec:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014bf0:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8014bf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014bf8:	00b1      	lsls	r1, r6, #2
 8014bfa:	4798      	blx	r3
 8014bfc:	2800      	cmp	r0, #0
 8014bfe:	f000 8088 	beq.w	8014d12 <rcutils_repl_str+0x15e>
 8014c02:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8014c06:	4607      	mov	r7, r0
 8014c08:	bf28      	it	cs
 8014c0a:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8014c0e:	9a00      	ldr	r2, [sp, #0]
 8014c10:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8014c14:	1aa4      	subs	r4, r4, r2
 8014c16:	f843 4c04 	str.w	r4, [r3, #-4]
 8014c1a:	4651      	mov	r1, sl
 8014c1c:	4640      	mov	r0, r8
 8014c1e:	f008 fa70 	bl	801d102 <strstr>
 8014c22:	4604      	mov	r4, r0
 8014c24:	4638      	mov	r0, r7
 8014c26:	2c00      	cmp	r4, #0
 8014c28:	d1d8      	bne.n	8014bdc <rcutils_repl_str+0x28>
 8014c2a:	4640      	mov	r0, r8
 8014c2c:	f7eb fb62 	bl	80002f4 <strlen>
 8014c30:	9b00      	ldr	r3, [sp, #0]
 8014c32:	eba8 0803 	sub.w	r8, r8, r3
 8014c36:	eb08 0400 	add.w	r4, r8, r0
 8014c3a:	9402      	str	r4, [sp, #8]
 8014c3c:	f1bb 0f00 	cmp.w	fp, #0
 8014c40:	d045      	beq.n	8014cce <rcutils_repl_str+0x11a>
 8014c42:	ee18 0a10 	vmov	r0, s16
 8014c46:	f7eb fb55 	bl	80002f4 <strlen>
 8014c4a:	9a01      	ldr	r2, [sp, #4]
 8014c4c:	4606      	mov	r6, r0
 8014c4e:	f8d9 3000 	ldr.w	r3, [r9]
 8014c52:	1a82      	subs	r2, r0, r2
 8014c54:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014c58:	fb0b 4202 	mla	r2, fp, r2, r4
 8014c5c:	1c50      	adds	r0, r2, #1
 8014c5e:	9205      	str	r2, [sp, #20]
 8014c60:	4798      	blx	r3
 8014c62:	4682      	mov	sl, r0
 8014c64:	2800      	cmp	r0, #0
 8014c66:	d054      	beq.n	8014d12 <rcutils_repl_str+0x15e>
 8014c68:	683a      	ldr	r2, [r7, #0]
 8014c6a:	463d      	mov	r5, r7
 8014c6c:	9900      	ldr	r1, [sp, #0]
 8014c6e:	2401      	movs	r4, #1
 8014c70:	f008 fb3f 	bl	801d2f2 <memcpy>
 8014c74:	683b      	ldr	r3, [r7, #0]
 8014c76:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8014c7a:	eb0a 0803 	add.w	r8, sl, r3
 8014c7e:	ee18 7a10 	vmov	r7, s16
 8014c82:	f8dd a000 	ldr.w	sl, [sp]
 8014c86:	f8cd 9000 	str.w	r9, [sp]
 8014c8a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014c8e:	4632      	mov	r2, r6
 8014c90:	4639      	mov	r1, r7
 8014c92:	4640      	mov	r0, r8
 8014c94:	44b0      	add	r8, r6
 8014c96:	f008 fb2c 	bl	801d2f2 <memcpy>
 8014c9a:	f855 2b04 	ldr.w	r2, [r5], #4
 8014c9e:	45a3      	cmp	fp, r4
 8014ca0:	444a      	add	r2, r9
 8014ca2:	eb0a 0102 	add.w	r1, sl, r2
 8014ca6:	d02a      	beq.n	8014cfe <rcutils_repl_str+0x14a>
 8014ca8:	6828      	ldr	r0, [r5, #0]
 8014caa:	1a82      	subs	r2, r0, r2
 8014cac:	4640      	mov	r0, r8
 8014cae:	4490      	add	r8, r2
 8014cb0:	f008 fb1f 	bl	801d2f2 <memcpy>
 8014cb4:	1c62      	adds	r2, r4, #1
 8014cb6:	45a3      	cmp	fp, r4
 8014cb8:	4614      	mov	r4, r2
 8014cba:	d8e8      	bhi.n	8014c8e <rcutils_repl_str+0xda>
 8014cbc:	f8dd 9000 	ldr.w	r9, [sp]
 8014cc0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8014cc4:	2300      	movs	r3, #0
 8014cc6:	9a05      	ldr	r2, [sp, #20]
 8014cc8:	f80a 3002 	strb.w	r3, [sl, r2]
 8014ccc:	e00b      	b.n	8014ce6 <rcutils_repl_str+0x132>
 8014cce:	4620      	mov	r0, r4
 8014cd0:	f8d9 3000 	ldr.w	r3, [r9]
 8014cd4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014cd8:	3001      	adds	r0, #1
 8014cda:	4798      	blx	r3
 8014cdc:	4682      	mov	sl, r0
 8014cde:	b110      	cbz	r0, 8014ce6 <rcutils_repl_str+0x132>
 8014ce0:	9900      	ldr	r1, [sp, #0]
 8014ce2:	f008 fafe 	bl	801d2e2 <strcpy>
 8014ce6:	4638      	mov	r0, r7
 8014ce8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014cec:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014cf0:	4798      	blx	r3
 8014cf2:	4650      	mov	r0, sl
 8014cf4:	b007      	add	sp, #28
 8014cf6:	ecbd 8b02 	vpop	{d8}
 8014cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cfe:	9b02      	ldr	r3, [sp, #8]
 8014d00:	4640      	mov	r0, r8
 8014d02:	f8dd 9000 	ldr.w	r9, [sp]
 8014d06:	1a9a      	subs	r2, r3, r2
 8014d08:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8014d0c:	f008 faf1 	bl	801d2f2 <memcpy>
 8014d10:	e7d8      	b.n	8014cc4 <rcutils_repl_str+0x110>
 8014d12:	f04f 0a00 	mov.w	sl, #0
 8014d16:	e7e6      	b.n	8014ce6 <rcutils_repl_str+0x132>

08014d18 <rcutils_snprintf>:
 8014d18:	b40c      	push	{r2, r3}
 8014d1a:	b530      	push	{r4, r5, lr}
 8014d1c:	b083      	sub	sp, #12
 8014d1e:	ab06      	add	r3, sp, #24
 8014d20:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d24:	9301      	str	r3, [sp, #4]
 8014d26:	b1e2      	cbz	r2, 8014d62 <rcutils_snprintf+0x4a>
 8014d28:	fab0 f480 	clz	r4, r0
 8014d2c:	fab1 f581 	clz	r5, r1
 8014d30:	ea50 0c01 	orrs.w	ip, r0, r1
 8014d34:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8014d38:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8014d3c:	d008      	beq.n	8014d50 <rcutils_snprintf+0x38>
 8014d3e:	b984      	cbnz	r4, 8014d62 <rcutils_snprintf+0x4a>
 8014d40:	b97d      	cbnz	r5, 8014d62 <rcutils_snprintf+0x4a>
 8014d42:	f008 f8eb 	bl	801cf1c <vsniprintf>
 8014d46:	b003      	add	sp, #12
 8014d48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014d4c:	b002      	add	sp, #8
 8014d4e:	4770      	bx	lr
 8014d50:	4661      	mov	r1, ip
 8014d52:	4660      	mov	r0, ip
 8014d54:	f008 f8e2 	bl	801cf1c <vsniprintf>
 8014d58:	b003      	add	sp, #12
 8014d5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014d5e:	b002      	add	sp, #8
 8014d60:	4770      	bx	lr
 8014d62:	f008 fa91 	bl	801d288 <__errno>
 8014d66:	2216      	movs	r2, #22
 8014d68:	4603      	mov	r3, r0
 8014d6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014d6e:	601a      	str	r2, [r3, #0]
 8014d70:	e7e9      	b.n	8014d46 <rcutils_snprintf+0x2e>
 8014d72:	bf00      	nop

08014d74 <rcutils_vsnprintf>:
 8014d74:	b570      	push	{r4, r5, r6, lr}
 8014d76:	b1b2      	cbz	r2, 8014da6 <rcutils_vsnprintf+0x32>
 8014d78:	fab0 f480 	clz	r4, r0
 8014d7c:	fab1 f581 	clz	r5, r1
 8014d80:	ea50 0c01 	orrs.w	ip, r0, r1
 8014d84:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8014d88:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8014d8c:	d005      	beq.n	8014d9a <rcutils_vsnprintf+0x26>
 8014d8e:	b954      	cbnz	r4, 8014da6 <rcutils_vsnprintf+0x32>
 8014d90:	b94d      	cbnz	r5, 8014da6 <rcutils_vsnprintf+0x32>
 8014d92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d96:	f008 b8c1 	b.w	801cf1c <vsniprintf>
 8014d9a:	4661      	mov	r1, ip
 8014d9c:	4660      	mov	r0, ip
 8014d9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014da2:	f008 b8bb 	b.w	801cf1c <vsniprintf>
 8014da6:	f008 fa6f 	bl	801d288 <__errno>
 8014daa:	2316      	movs	r3, #22
 8014dac:	6003      	str	r3, [r0, #0]
 8014dae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014db2:	bd70      	pop	{r4, r5, r6, pc}

08014db4 <rcutils_strdup>:
 8014db4:	b084      	sub	sp, #16
 8014db6:	b570      	push	{r4, r5, r6, lr}
 8014db8:	b082      	sub	sp, #8
 8014dba:	4605      	mov	r5, r0
 8014dbc:	ac07      	add	r4, sp, #28
 8014dbe:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8014dc2:	b1b0      	cbz	r0, 8014df2 <rcutils_strdup+0x3e>
 8014dc4:	f7eb fa96 	bl	80002f4 <strlen>
 8014dc8:	1c42      	adds	r2, r0, #1
 8014dca:	9b07      	ldr	r3, [sp, #28]
 8014dcc:	4606      	mov	r6, r0
 8014dce:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014dd0:	4610      	mov	r0, r2
 8014dd2:	9201      	str	r2, [sp, #4]
 8014dd4:	4798      	blx	r3
 8014dd6:	4604      	mov	r4, r0
 8014dd8:	b128      	cbz	r0, 8014de6 <rcutils_strdup+0x32>
 8014dda:	9a01      	ldr	r2, [sp, #4]
 8014ddc:	4629      	mov	r1, r5
 8014dde:	f008 fa88 	bl	801d2f2 <memcpy>
 8014de2:	2300      	movs	r3, #0
 8014de4:	55a3      	strb	r3, [r4, r6]
 8014de6:	4620      	mov	r0, r4
 8014de8:	b002      	add	sp, #8
 8014dea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014dee:	b004      	add	sp, #16
 8014df0:	4770      	bx	lr
 8014df2:	4604      	mov	r4, r0
 8014df4:	e7f7      	b.n	8014de6 <rcutils_strdup+0x32>
 8014df6:	bf00      	nop

08014df8 <rcutils_strndup>:
 8014df8:	b082      	sub	sp, #8
 8014dfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dfc:	ac06      	add	r4, sp, #24
 8014dfe:	4605      	mov	r5, r0
 8014e00:	e884 000c 	stmia.w	r4, {r2, r3}
 8014e04:	b188      	cbz	r0, 8014e2a <rcutils_strndup+0x32>
 8014e06:	1c4f      	adds	r7, r1, #1
 8014e08:	460e      	mov	r6, r1
 8014e0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014e0c:	4638      	mov	r0, r7
 8014e0e:	4790      	blx	r2
 8014e10:	4604      	mov	r4, r0
 8014e12:	b128      	cbz	r0, 8014e20 <rcutils_strndup+0x28>
 8014e14:	463a      	mov	r2, r7
 8014e16:	4629      	mov	r1, r5
 8014e18:	f008 fa6b 	bl	801d2f2 <memcpy>
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	55a3      	strb	r3, [r4, r6]
 8014e20:	4620      	mov	r0, r4
 8014e22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014e26:	b002      	add	sp, #8
 8014e28:	4770      	bx	lr
 8014e2a:	4604      	mov	r4, r0
 8014e2c:	e7f8      	b.n	8014e20 <rcutils_strndup+0x28>
 8014e2e:	bf00      	nop

08014e30 <rcutils_get_zero_initialized_string_map>:
 8014e30:	2000      	movs	r0, #0
 8014e32:	4b01      	ldr	r3, [pc, #4]	@ (8014e38 <rcutils_get_zero_initialized_string_map+0x8>)
 8014e34:	6018      	str	r0, [r3, #0]
 8014e36:	4770      	bx	lr
 8014e38:	24064820 	.word	0x24064820

08014e3c <rcutils_string_map_reserve>:
 8014e3c:	2800      	cmp	r0, #0
 8014e3e:	d05e      	beq.n	8014efe <rcutils_string_map_reserve+0xc2>
 8014e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e44:	460c      	mov	r4, r1
 8014e46:	6801      	ldr	r1, [r0, #0]
 8014e48:	b082      	sub	sp, #8
 8014e4a:	4605      	mov	r5, r0
 8014e4c:	b129      	cbz	r1, 8014e5a <rcutils_string_map_reserve+0x1e>
 8014e4e:	68cb      	ldr	r3, [r1, #12]
 8014e50:	42a3      	cmp	r3, r4
 8014e52:	d906      	bls.n	8014e62 <rcutils_string_map_reserve+0x26>
 8014e54:	461c      	mov	r4, r3
 8014e56:	2900      	cmp	r1, #0
 8014e58:	d1f9      	bne.n	8014e4e <rcutils_string_map_reserve+0x12>
 8014e5a:	201f      	movs	r0, #31
 8014e5c:	b002      	add	sp, #8
 8014e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e62:	688b      	ldr	r3, [r1, #8]
 8014e64:	42a3      	cmp	r3, r4
 8014e66:	d046      	beq.n	8014ef6 <rcutils_string_map_reserve+0xba>
 8014e68:	6a0e      	ldr	r6, [r1, #32]
 8014e6a:	2c00      	cmp	r4, #0
 8014e6c:	d033      	beq.n	8014ed6 <rcutils_string_map_reserve+0x9a>
 8014e6e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8014e72:	d242      	bcs.n	8014efa <rcutils_string_map_reserve+0xbe>
 8014e74:	00a7      	lsls	r7, r4, #2
 8014e76:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8014e7a:	6808      	ldr	r0, [r1, #0]
 8014e7c:	4632      	mov	r2, r6
 8014e7e:	4639      	mov	r1, r7
 8014e80:	47c0      	blx	r8
 8014e82:	2800      	cmp	r0, #0
 8014e84:	d039      	beq.n	8014efa <rcutils_string_map_reserve+0xbe>
 8014e86:	682b      	ldr	r3, [r5, #0]
 8014e88:	4632      	mov	r2, r6
 8014e8a:	4639      	mov	r1, r7
 8014e8c:	6018      	str	r0, [r3, #0]
 8014e8e:	6858      	ldr	r0, [r3, #4]
 8014e90:	47c0      	blx	r8
 8014e92:	2800      	cmp	r0, #0
 8014e94:	d031      	beq.n	8014efa <rcutils_string_map_reserve+0xbe>
 8014e96:	682d      	ldr	r5, [r5, #0]
 8014e98:	68ab      	ldr	r3, [r5, #8]
 8014e9a:	6068      	str	r0, [r5, #4]
 8014e9c:	42a3      	cmp	r3, r4
 8014e9e:	d225      	bcs.n	8014eec <rcutils_string_map_reserve+0xb0>
 8014ea0:	682a      	ldr	r2, [r5, #0]
 8014ea2:	eb00 0c07 	add.w	ip, r0, r7
 8014ea6:	0099      	lsls	r1, r3, #2
 8014ea8:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8014eac:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8014eb0:	45e6      	cmp	lr, ip
 8014eb2:	d203      	bcs.n	8014ebc <rcutils_string_map_reserve+0x80>
 8014eb4:	eb02 0c07 	add.w	ip, r2, r7
 8014eb8:	4566      	cmp	r6, ip
 8014eba:	d322      	bcc.n	8014f02 <rcutils_string_map_reserve+0xc6>
 8014ebc:	1ae3      	subs	r3, r4, r3
 8014ebe:	4670      	mov	r0, lr
 8014ec0:	2100      	movs	r1, #0
 8014ec2:	009a      	lsls	r2, r3, #2
 8014ec4:	9201      	str	r2, [sp, #4]
 8014ec6:	f008 f8f5 	bl	801d0b4 <memset>
 8014eca:	9a01      	ldr	r2, [sp, #4]
 8014ecc:	2100      	movs	r1, #0
 8014ece:	4630      	mov	r0, r6
 8014ed0:	f008 f8f0 	bl	801d0b4 <memset>
 8014ed4:	e00a      	b.n	8014eec <rcutils_string_map_reserve+0xb0>
 8014ed6:	694f      	ldr	r7, [r1, #20]
 8014ed8:	6808      	ldr	r0, [r1, #0]
 8014eda:	4631      	mov	r1, r6
 8014edc:	47b8      	blx	r7
 8014ede:	682b      	ldr	r3, [r5, #0]
 8014ee0:	4631      	mov	r1, r6
 8014ee2:	6858      	ldr	r0, [r3, #4]
 8014ee4:	601c      	str	r4, [r3, #0]
 8014ee6:	47b8      	blx	r7
 8014ee8:	682d      	ldr	r5, [r5, #0]
 8014eea:	606c      	str	r4, [r5, #4]
 8014eec:	2000      	movs	r0, #0
 8014eee:	60ac      	str	r4, [r5, #8]
 8014ef0:	b002      	add	sp, #8
 8014ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ef6:	2000      	movs	r0, #0
 8014ef8:	e7b0      	b.n	8014e5c <rcutils_string_map_reserve+0x20>
 8014efa:	200a      	movs	r0, #10
 8014efc:	e7ae      	b.n	8014e5c <rcutils_string_map_reserve+0x20>
 8014efe:	200b      	movs	r0, #11
 8014f00:	4770      	bx	lr
 8014f02:	1f0b      	subs	r3, r1, #4
 8014f04:	4418      	add	r0, r3
 8014f06:	4413      	add	r3, r2
 8014f08:	3a04      	subs	r2, #4
 8014f0a:	4417      	add	r7, r2
 8014f0c:	2200      	movs	r2, #0
 8014f0e:	f843 2f04 	str.w	r2, [r3, #4]!
 8014f12:	42bb      	cmp	r3, r7
 8014f14:	f840 2f04 	str.w	r2, [r0, #4]!
 8014f18:	d1f9      	bne.n	8014f0e <rcutils_string_map_reserve+0xd2>
 8014f1a:	e7e7      	b.n	8014eec <rcutils_string_map_reserve+0xb0>

08014f1c <rcutils_string_map_init>:
 8014f1c:	b082      	sub	sp, #8
 8014f1e:	b570      	push	{r4, r5, r6, lr}
 8014f20:	ac04      	add	r4, sp, #16
 8014f22:	e884 000c 	stmia.w	r4, {r2, r3}
 8014f26:	b380      	cbz	r0, 8014f8a <rcutils_string_map_init+0x6e>
 8014f28:	6806      	ldr	r6, [r0, #0]
 8014f2a:	4604      	mov	r4, r0
 8014f2c:	b12e      	cbz	r6, 8014f3a <rcutils_string_map_init+0x1e>
 8014f2e:	251e      	movs	r5, #30
 8014f30:	4628      	mov	r0, r5
 8014f32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014f36:	b002      	add	sp, #8
 8014f38:	4770      	bx	lr
 8014f3a:	a804      	add	r0, sp, #16
 8014f3c:	460d      	mov	r5, r1
 8014f3e:	f7fb ff77 	bl	8010e30 <rcutils_allocator_is_valid>
 8014f42:	b310      	cbz	r0, 8014f8a <rcutils_string_map_init+0x6e>
 8014f44:	9b04      	ldr	r3, [sp, #16]
 8014f46:	2024      	movs	r0, #36	@ 0x24
 8014f48:	9908      	ldr	r1, [sp, #32]
 8014f4a:	4798      	blx	r3
 8014f4c:	6020      	str	r0, [r4, #0]
 8014f4e:	b310      	cbz	r0, 8014f96 <rcutils_string_map_init+0x7a>
 8014f50:	f10d 0e10 	add.w	lr, sp, #16
 8014f54:	f100 0c10 	add.w	ip, r0, #16
 8014f58:	e9c0 6600 	strd	r6, r6, [r0]
 8014f5c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8014f60:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014f64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014f68:	f8de 3000 	ldr.w	r3, [lr]
 8014f6c:	4629      	mov	r1, r5
 8014f6e:	4620      	mov	r0, r4
 8014f70:	f8cc 3000 	str.w	r3, [ip]
 8014f74:	f7ff ff62 	bl	8014e3c <rcutils_string_map_reserve>
 8014f78:	4605      	mov	r5, r0
 8014f7a:	2800      	cmp	r0, #0
 8014f7c:	d0d8      	beq.n	8014f30 <rcutils_string_map_init+0x14>
 8014f7e:	9b05      	ldr	r3, [sp, #20]
 8014f80:	9908      	ldr	r1, [sp, #32]
 8014f82:	6820      	ldr	r0, [r4, #0]
 8014f84:	4798      	blx	r3
 8014f86:	6026      	str	r6, [r4, #0]
 8014f88:	e7d2      	b.n	8014f30 <rcutils_string_map_init+0x14>
 8014f8a:	250b      	movs	r5, #11
 8014f8c:	4628      	mov	r0, r5
 8014f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014f92:	b002      	add	sp, #8
 8014f94:	4770      	bx	lr
 8014f96:	250a      	movs	r5, #10
 8014f98:	e7ca      	b.n	8014f30 <rcutils_string_map_init+0x14>
 8014f9a:	bf00      	nop

08014f9c <rcutils_string_map_fini>:
 8014f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fa0:	b082      	sub	sp, #8
 8014fa2:	2800      	cmp	r0, #0
 8014fa4:	d03a      	beq.n	801501c <rcutils_string_map_fini+0x80>
 8014fa6:	6804      	ldr	r4, [r0, #0]
 8014fa8:	4606      	mov	r6, r0
 8014faa:	2c00      	cmp	r4, #0
 8014fac:	d032      	beq.n	8015014 <rcutils_string_map_fini+0x78>
 8014fae:	68a3      	ldr	r3, [r4, #8]
 8014fb0:	b32b      	cbz	r3, 8014ffe <rcutils_string_map_fini+0x62>
 8014fb2:	2500      	movs	r5, #0
 8014fb4:	6822      	ldr	r2, [r4, #0]
 8014fb6:	462f      	mov	r7, r5
 8014fb8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014fbc:	b1e0      	cbz	r0, 8014ff8 <rcutils_string_map_fini+0x5c>
 8014fbe:	6a21      	ldr	r1, [r4, #32]
 8014fc0:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8014fc4:	9101      	str	r1, [sp, #4]
 8014fc6:	47c0      	blx	r8
 8014fc8:	9901      	ldr	r1, [sp, #4]
 8014fca:	e9d4 3200 	ldrd	r3, r2, [r4]
 8014fce:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 8014fd2:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014fd6:	47c0      	blx	r8
 8014fd8:	68e3      	ldr	r3, [r4, #12]
 8014fda:	6862      	ldr	r2, [r4, #4]
 8014fdc:	3b01      	subs	r3, #1
 8014fde:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014fe2:	3501      	adds	r5, #1
 8014fe4:	60e3      	str	r3, [r4, #12]
 8014fe6:	6834      	ldr	r4, [r6, #0]
 8014fe8:	68a3      	ldr	r3, [r4, #8]
 8014fea:	429d      	cmp	r5, r3
 8014fec:	d207      	bcs.n	8014ffe <rcutils_string_map_fini+0x62>
 8014fee:	6822      	ldr	r2, [r4, #0]
 8014ff0:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014ff4:	2800      	cmp	r0, #0
 8014ff6:	d1e2      	bne.n	8014fbe <rcutils_string_map_fini+0x22>
 8014ff8:	3501      	adds	r5, #1
 8014ffa:	429d      	cmp	r5, r3
 8014ffc:	d3dc      	bcc.n	8014fb8 <rcutils_string_map_fini+0x1c>
 8014ffe:	2100      	movs	r1, #0
 8015000:	4630      	mov	r0, r6
 8015002:	f7ff ff1b 	bl	8014e3c <rcutils_string_map_reserve>
 8015006:	4604      	mov	r4, r0
 8015008:	b920      	cbnz	r0, 8015014 <rcutils_string_map_fini+0x78>
 801500a:	6830      	ldr	r0, [r6, #0]
 801500c:	6943      	ldr	r3, [r0, #20]
 801500e:	6a01      	ldr	r1, [r0, #32]
 8015010:	4798      	blx	r3
 8015012:	6034      	str	r4, [r6, #0]
 8015014:	4620      	mov	r0, r4
 8015016:	b002      	add	sp, #8
 8015018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801501c:	240b      	movs	r4, #11
 801501e:	4620      	mov	r0, r4
 8015020:	b002      	add	sp, #8
 8015022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015026:	bf00      	nop

08015028 <rcutils_string_map_getn>:
 8015028:	b378      	cbz	r0, 801508a <rcutils_string_map_getn+0x62>
 801502a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801502e:	f8d0 b000 	ldr.w	fp, [r0]
 8015032:	f1bb 0f00 	cmp.w	fp, #0
 8015036:	d01f      	beq.n	8015078 <rcutils_string_map_getn+0x50>
 8015038:	fab1 f481 	clz	r4, r1
 801503c:	4688      	mov	r8, r1
 801503e:	0964      	lsrs	r4, r4, #5
 8015040:	b1d1      	cbz	r1, 8015078 <rcutils_string_map_getn+0x50>
 8015042:	f8db 7008 	ldr.w	r7, [fp, #8]
 8015046:	f8db 6000 	ldr.w	r6, [fp]
 801504a:	b1af      	cbz	r7, 8015078 <rcutils_string_map_getn+0x50>
 801504c:	4691      	mov	r9, r2
 801504e:	3e04      	subs	r6, #4
 8015050:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8015054:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8015058:	3401      	adds	r4, #1
 801505a:	4628      	mov	r0, r5
 801505c:	b155      	cbz	r5, 8015074 <rcutils_string_map_getn+0x4c>
 801505e:	f7eb f949 	bl	80002f4 <strlen>
 8015062:	4602      	mov	r2, r0
 8015064:	4629      	mov	r1, r5
 8015066:	4640      	mov	r0, r8
 8015068:	454a      	cmp	r2, r9
 801506a:	bf38      	it	cc
 801506c:	464a      	movcc	r2, r9
 801506e:	f008 f836 	bl	801d0de <strncmp>
 8015072:	b120      	cbz	r0, 801507e <rcutils_string_map_getn+0x56>
 8015074:	42a7      	cmp	r7, r4
 8015076:	d1eb      	bne.n	8015050 <rcutils_string_map_getn+0x28>
 8015078:	2000      	movs	r0, #0
 801507a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801507e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8015082:	f853 000a 	ldr.w	r0, [r3, sl]
 8015086:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801508a:	4770      	bx	lr
 801508c:	0000      	movs	r0, r0
	...

08015090 <rmw_get_zero_initialized_context>:
 8015090:	b510      	push	{r4, lr}
 8015092:	4604      	mov	r4, r0
 8015094:	3010      	adds	r0, #16
 8015096:	f000 f80f 	bl	80150b8 <rmw_get_zero_initialized_init_options>
 801509a:	2300      	movs	r3, #0
 801509c:	4620      	mov	r0, r4
 801509e:	60a3      	str	r3, [r4, #8]
 80150a0:	64a3      	str	r3, [r4, #72]	@ 0x48
 80150a2:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80150a4:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 80150b0 <rmw_get_zero_initialized_context+0x20>
 80150a8:	ed84 7b00 	vstr	d7, [r4]
 80150ac:	bd10      	pop	{r4, pc}
 80150ae:	bf00      	nop
	...

080150b8 <rmw_get_zero_initialized_init_options>:
 80150b8:	b510      	push	{r4, lr}
 80150ba:	4604      	mov	r4, r0
 80150bc:	2238      	movs	r2, #56	@ 0x38
 80150be:	2100      	movs	r1, #0
 80150c0:	f007 fff8 	bl	801d0b4 <memset>
 80150c4:	f104 0010 	add.w	r0, r4, #16
 80150c8:	f000 f80a 	bl	80150e0 <rmw_get_default_security_options>
 80150cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80150d0:	4620      	mov	r0, r4
 80150d2:	60e3      	str	r3, [r4, #12]
 80150d4:	bd10      	pop	{r4, pc}
 80150d6:	bf00      	nop

080150d8 <rmw_get_default_publisher_options>:
 80150d8:	2200      	movs	r2, #0
 80150da:	6002      	str	r2, [r0, #0]
 80150dc:	7102      	strb	r2, [r0, #4]
 80150de:	4770      	bx	lr

080150e0 <rmw_get_default_security_options>:
 80150e0:	2200      	movs	r2, #0
 80150e2:	7002      	strb	r2, [r0, #0]
 80150e4:	6042      	str	r2, [r0, #4]
 80150e6:	4770      	bx	lr

080150e8 <rmw_subscription_content_filter_options_fini>:
 80150e8:	b1b0      	cbz	r0, 8015118 <rmw_subscription_content_filter_options_fini+0x30>
 80150ea:	b538      	push	{r3, r4, r5, lr}
 80150ec:	4604      	mov	r4, r0
 80150ee:	4608      	mov	r0, r1
 80150f0:	460d      	mov	r5, r1
 80150f2:	f7fb fe9d 	bl	8010e30 <rcutils_allocator_is_valid>
 80150f6:	b168      	cbz	r0, 8015114 <rmw_subscription_content_filter_options_fini+0x2c>
 80150f8:	6820      	ldr	r0, [r4, #0]
 80150fa:	b120      	cbz	r0, 8015106 <rmw_subscription_content_filter_options_fini+0x1e>
 80150fc:	686b      	ldr	r3, [r5, #4]
 80150fe:	6929      	ldr	r1, [r5, #16]
 8015100:	4798      	blx	r3
 8015102:	2300      	movs	r3, #0
 8015104:	6023      	str	r3, [r4, #0]
 8015106:	1d20      	adds	r0, r4, #4
 8015108:	f006 fac8 	bl	801b69c <rcutils_string_array_fini>
 801510c:	3800      	subs	r0, #0
 801510e:	bf18      	it	ne
 8015110:	2001      	movne	r0, #1
 8015112:	bd38      	pop	{r3, r4, r5, pc}
 8015114:	200b      	movs	r0, #11
 8015116:	bd38      	pop	{r3, r4, r5, pc}
 8015118:	200b      	movs	r0, #11
 801511a:	4770      	bx	lr

0801511c <rmw_get_default_subscription_options>:
 801511c:	2200      	movs	r2, #0
 801511e:	e9c0 2200 	strd	r2, r2, [r0]
 8015122:	6082      	str	r2, [r0, #8]
 8015124:	4770      	bx	lr
 8015126:	bf00      	nop

08015128 <rmw_get_zero_initialized_message_info>:
 8015128:	b510      	push	{r4, lr}
 801512a:	4604      	mov	r4, r0
 801512c:	2240      	movs	r2, #64	@ 0x40
 801512e:	2100      	movs	r1, #0
 8015130:	f007 ffc0 	bl	801d0b4 <memset>
 8015134:	4620      	mov	r0, r4
 8015136:	bd10      	pop	{r4, pc}

08015138 <rmw_validate_full_topic_name>:
 8015138:	2800      	cmp	r0, #0
 801513a:	d05d      	beq.n	80151f8 <rmw_validate_full_topic_name+0xc0>
 801513c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015140:	460d      	mov	r5, r1
 8015142:	2900      	cmp	r1, #0
 8015144:	d05a      	beq.n	80151fc <rmw_validate_full_topic_name+0xc4>
 8015146:	4604      	mov	r4, r0
 8015148:	4616      	mov	r6, r2
 801514a:	f7eb f8d3 	bl	80002f4 <strlen>
 801514e:	b150      	cbz	r0, 8015166 <rmw_validate_full_topic_name+0x2e>
 8015150:	7823      	ldrb	r3, [r4, #0]
 8015152:	2b2f      	cmp	r3, #47	@ 0x2f
 8015154:	d00e      	beq.n	8015174 <rmw_validate_full_topic_name+0x3c>
 8015156:	2302      	movs	r3, #2
 8015158:	602b      	str	r3, [r5, #0]
 801515a:	b146      	cbz	r6, 801516e <rmw_validate_full_topic_name+0x36>
 801515c:	2300      	movs	r3, #0
 801515e:	4618      	mov	r0, r3
 8015160:	6033      	str	r3, [r6, #0]
 8015162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015166:	2301      	movs	r3, #1
 8015168:	602b      	str	r3, [r5, #0]
 801516a:	2e00      	cmp	r6, #0
 801516c:	d1f6      	bne.n	801515c <rmw_validate_full_topic_name+0x24>
 801516e:	2000      	movs	r0, #0
 8015170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015174:	1e43      	subs	r3, r0, #1
 8015176:	5ce2      	ldrb	r2, [r4, r3]
 8015178:	2a2f      	cmp	r2, #47	@ 0x2f
 801517a:	d041      	beq.n	8015200 <rmw_validate_full_topic_name+0xc8>
 801517c:	1e62      	subs	r2, r4, #1
 801517e:	f1c4 0e01 	rsb	lr, r4, #1
 8015182:	eb02 0800 	add.w	r8, r2, r0
 8015186:	eb0e 0702 	add.w	r7, lr, r2
 801518a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801518e:	f023 0120 	bic.w	r1, r3, #32
 8015192:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 8015196:	3941      	subs	r1, #65	@ 0x41
 8015198:	2919      	cmp	r1, #25
 801519a:	d90f      	bls.n	80151bc <rmw_validate_full_topic_name+0x84>
 801519c:	f1bc 0f0a 	cmp.w	ip, #10
 80151a0:	d90c      	bls.n	80151bc <rmw_validate_full_topic_name+0x84>
 80151a2:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 80151a6:	fab3 f383 	clz	r3, r3
 80151aa:	095b      	lsrs	r3, r3, #5
 80151ac:	b933      	cbnz	r3, 80151bc <rmw_validate_full_topic_name+0x84>
 80151ae:	2204      	movs	r2, #4
 80151b0:	602a      	str	r2, [r5, #0]
 80151b2:	2e00      	cmp	r6, #0
 80151b4:	d0db      	beq.n	801516e <rmw_validate_full_topic_name+0x36>
 80151b6:	4618      	mov	r0, r3
 80151b8:	6037      	str	r7, [r6, #0]
 80151ba:	e7d2      	b.n	8015162 <rmw_validate_full_topic_name+0x2a>
 80151bc:	4542      	cmp	r2, r8
 80151be:	d1e2      	bne.n	8015186 <rmw_validate_full_topic_name+0x4e>
 80151c0:	2301      	movs	r3, #1
 80151c2:	4f1a      	ldr	r7, [pc, #104]	@ (801522c <rmw_validate_full_topic_name+0xf4>)
 80151c4:	e004      	b.n	80151d0 <rmw_validate_full_topic_name+0x98>
 80151c6:	4298      	cmp	r0, r3
 80151c8:	f104 0401 	add.w	r4, r4, #1
 80151cc:	4613      	mov	r3, r2
 80151ce:	d91c      	bls.n	801520a <rmw_validate_full_topic_name+0xd2>
 80151d0:	4298      	cmp	r0, r3
 80151d2:	f103 0201 	add.w	r2, r3, #1
 80151d6:	d0f6      	beq.n	80151c6 <rmw_validate_full_topic_name+0x8e>
 80151d8:	7821      	ldrb	r1, [r4, #0]
 80151da:	292f      	cmp	r1, #47	@ 0x2f
 80151dc:	d1f3      	bne.n	80151c6 <rmw_validate_full_topic_name+0x8e>
 80151de:	7861      	ldrb	r1, [r4, #1]
 80151e0:	292f      	cmp	r1, #47	@ 0x2f
 80151e2:	d01e      	beq.n	8015222 <rmw_validate_full_topic_name+0xea>
 80151e4:	5dc9      	ldrb	r1, [r1, r7]
 80151e6:	0749      	lsls	r1, r1, #29
 80151e8:	d5ed      	bpl.n	80151c6 <rmw_validate_full_topic_name+0x8e>
 80151ea:	2206      	movs	r2, #6
 80151ec:	602a      	str	r2, [r5, #0]
 80151ee:	2e00      	cmp	r6, #0
 80151f0:	d0bd      	beq.n	801516e <rmw_validate_full_topic_name+0x36>
 80151f2:	2000      	movs	r0, #0
 80151f4:	6033      	str	r3, [r6, #0]
 80151f6:	e7b4      	b.n	8015162 <rmw_validate_full_topic_name+0x2a>
 80151f8:	200b      	movs	r0, #11
 80151fa:	4770      	bx	lr
 80151fc:	200b      	movs	r0, #11
 80151fe:	e7b0      	b.n	8015162 <rmw_validate_full_topic_name+0x2a>
 8015200:	2203      	movs	r2, #3
 8015202:	602a      	str	r2, [r5, #0]
 8015204:	2e00      	cmp	r6, #0
 8015206:	d1f4      	bne.n	80151f2 <rmw_validate_full_topic_name+0xba>
 8015208:	e7b1      	b.n	801516e <rmw_validate_full_topic_name+0x36>
 801520a:	28f7      	cmp	r0, #247	@ 0xf7
 801520c:	d803      	bhi.n	8015216 <rmw_validate_full_topic_name+0xde>
 801520e:	2300      	movs	r3, #0
 8015210:	4618      	mov	r0, r3
 8015212:	602b      	str	r3, [r5, #0]
 8015214:	e7a5      	b.n	8015162 <rmw_validate_full_topic_name+0x2a>
 8015216:	2307      	movs	r3, #7
 8015218:	602b      	str	r3, [r5, #0]
 801521a:	2e00      	cmp	r6, #0
 801521c:	d0a7      	beq.n	801516e <rmw_validate_full_topic_name+0x36>
 801521e:	23f6      	movs	r3, #246	@ 0xf6
 8015220:	e7e7      	b.n	80151f2 <rmw_validate_full_topic_name+0xba>
 8015222:	2205      	movs	r2, #5
 8015224:	602a      	str	r2, [r5, #0]
 8015226:	2e00      	cmp	r6, #0
 8015228:	d1e3      	bne.n	80151f2 <rmw_validate_full_topic_name+0xba>
 801522a:	e7a0      	b.n	801516e <rmw_validate_full_topic_name+0x36>
 801522c:	080206de 	.word	0x080206de

08015230 <rmw_validate_namespace_with_size>:
 8015230:	2800      	cmp	r0, #0
 8015232:	d043      	beq.n	80152bc <rmw_validate_namespace_with_size+0x8c>
 8015234:	b570      	push	{r4, r5, r6, lr}
 8015236:	4614      	mov	r4, r2
 8015238:	b0c2      	sub	sp, #264	@ 0x108
 801523a:	b32a      	cbz	r2, 8015288 <rmw_validate_namespace_with_size+0x58>
 801523c:	2901      	cmp	r1, #1
 801523e:	460d      	mov	r5, r1
 8015240:	461e      	mov	r6, r3
 8015242:	d102      	bne.n	801524a <rmw_validate_namespace_with_size+0x1a>
 8015244:	7803      	ldrb	r3, [r0, #0]
 8015246:	2b2f      	cmp	r3, #47	@ 0x2f
 8015248:	d012      	beq.n	8015270 <rmw_validate_namespace_with_size+0x40>
 801524a:	aa01      	add	r2, sp, #4
 801524c:	4669      	mov	r1, sp
 801524e:	f7ff ff73 	bl	8015138 <rmw_validate_full_topic_name>
 8015252:	b980      	cbnz	r0, 8015276 <rmw_validate_namespace_with_size+0x46>
 8015254:	9a00      	ldr	r2, [sp, #0]
 8015256:	b14a      	cbz	r2, 801526c <rmw_validate_namespace_with_size+0x3c>
 8015258:	2a07      	cmp	r2, #7
 801525a:	d007      	beq.n	801526c <rmw_validate_namespace_with_size+0x3c>
 801525c:	1e53      	subs	r3, r2, #1
 801525e:	2b05      	cmp	r3, #5
 8015260:	d82e      	bhi.n	80152c0 <rmw_validate_namespace_with_size+0x90>
 8015262:	e8df f003 	tbb	[pc, r3]
 8015266:	1f1c      	.short	0x1f1c
 8015268:	14282522 	.word	0x14282522
 801526c:	2df5      	cmp	r5, #245	@ 0xf5
 801526e:	d804      	bhi.n	801527a <rmw_validate_namespace_with_size+0x4a>
 8015270:	2300      	movs	r3, #0
 8015272:	4618      	mov	r0, r3
 8015274:	6023      	str	r3, [r4, #0]
 8015276:	b042      	add	sp, #264	@ 0x108
 8015278:	bd70      	pop	{r4, r5, r6, pc}
 801527a:	2307      	movs	r3, #7
 801527c:	6023      	str	r3, [r4, #0]
 801527e:	2e00      	cmp	r6, #0
 8015280:	d0f9      	beq.n	8015276 <rmw_validate_namespace_with_size+0x46>
 8015282:	23f4      	movs	r3, #244	@ 0xf4
 8015284:	6033      	str	r3, [r6, #0]
 8015286:	e7f6      	b.n	8015276 <rmw_validate_namespace_with_size+0x46>
 8015288:	200b      	movs	r0, #11
 801528a:	b042      	add	sp, #264	@ 0x108
 801528c:	bd70      	pop	{r4, r5, r6, pc}
 801528e:	2306      	movs	r3, #6
 8015290:	6023      	str	r3, [r4, #0]
 8015292:	2e00      	cmp	r6, #0
 8015294:	d0ef      	beq.n	8015276 <rmw_validate_namespace_with_size+0x46>
 8015296:	9b01      	ldr	r3, [sp, #4]
 8015298:	6033      	str	r3, [r6, #0]
 801529a:	b042      	add	sp, #264	@ 0x108
 801529c:	bd70      	pop	{r4, r5, r6, pc}
 801529e:	2301      	movs	r3, #1
 80152a0:	6023      	str	r3, [r4, #0]
 80152a2:	e7f6      	b.n	8015292 <rmw_validate_namespace_with_size+0x62>
 80152a4:	2302      	movs	r3, #2
 80152a6:	6023      	str	r3, [r4, #0]
 80152a8:	e7f3      	b.n	8015292 <rmw_validate_namespace_with_size+0x62>
 80152aa:	2303      	movs	r3, #3
 80152ac:	6023      	str	r3, [r4, #0]
 80152ae:	e7f0      	b.n	8015292 <rmw_validate_namespace_with_size+0x62>
 80152b0:	2304      	movs	r3, #4
 80152b2:	6023      	str	r3, [r4, #0]
 80152b4:	e7ed      	b.n	8015292 <rmw_validate_namespace_with_size+0x62>
 80152b6:	2305      	movs	r3, #5
 80152b8:	6023      	str	r3, [r4, #0]
 80152ba:	e7ea      	b.n	8015292 <rmw_validate_namespace_with_size+0x62>
 80152bc:	200b      	movs	r0, #11
 80152be:	4770      	bx	lr
 80152c0:	4613      	mov	r3, r2
 80152c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80152c6:	4a03      	ldr	r2, [pc, #12]	@ (80152d4 <rmw_validate_namespace_with_size+0xa4>)
 80152c8:	a802      	add	r0, sp, #8
 80152ca:	f7ff fd25 	bl	8014d18 <rcutils_snprintf>
 80152ce:	2001      	movs	r0, #1
 80152d0:	e7d1      	b.n	8015276 <rmw_validate_namespace_with_size+0x46>
 80152d2:	bf00      	nop
 80152d4:	0801ff24 	.word	0x0801ff24

080152d8 <rmw_validate_namespace>:
 80152d8:	b168      	cbz	r0, 80152f6 <rmw_validate_namespace+0x1e>
 80152da:	b570      	push	{r4, r5, r6, lr}
 80152dc:	460d      	mov	r5, r1
 80152de:	4616      	mov	r6, r2
 80152e0:	4604      	mov	r4, r0
 80152e2:	f7eb f807 	bl	80002f4 <strlen>
 80152e6:	4633      	mov	r3, r6
 80152e8:	4601      	mov	r1, r0
 80152ea:	462a      	mov	r2, r5
 80152ec:	4620      	mov	r0, r4
 80152ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80152f2:	f7ff bf9d 	b.w	8015230 <rmw_validate_namespace_with_size>
 80152f6:	200b      	movs	r0, #11
 80152f8:	4770      	bx	lr
 80152fa:	bf00      	nop

080152fc <rmw_namespace_validation_result_string>:
 80152fc:	2807      	cmp	r0, #7
 80152fe:	d803      	bhi.n	8015308 <rmw_namespace_validation_result_string+0xc>
 8015300:	4b02      	ldr	r3, [pc, #8]	@ (801530c <rmw_namespace_validation_result_string+0x10>)
 8015302:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8015306:	4770      	bx	lr
 8015308:	4801      	ldr	r0, [pc, #4]	@ (8015310 <rmw_namespace_validation_result_string+0x14>)
 801530a:	4770      	bx	lr
 801530c:	0802011c 	.word	0x0802011c
 8015310:	0801ff74 	.word	0x0801ff74

08015314 <rmw_validate_node_name>:
 8015314:	2800      	cmp	r0, #0
 8015316:	d042      	beq.n	801539e <rmw_validate_node_name+0x8a>
 8015318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801531c:	460d      	mov	r5, r1
 801531e:	2900      	cmp	r1, #0
 8015320:	d03f      	beq.n	80153a2 <rmw_validate_node_name+0x8e>
 8015322:	4604      	mov	r4, r0
 8015324:	4616      	mov	r6, r2
 8015326:	f7ea ffe5 	bl	80002f4 <strlen>
 801532a:	b310      	cbz	r0, 8015372 <rmw_validate_node_name+0x5e>
 801532c:	1e63      	subs	r3, r4, #1
 801532e:	f1c4 0101 	rsb	r1, r4, #1
 8015332:	eb03 0800 	add.w	r8, r3, r0
 8015336:	18cf      	adds	r7, r1, r3
 8015338:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801533c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8015340:	f02e 0c20 	bic.w	ip, lr, #32
 8015344:	2a09      	cmp	r2, #9
 8015346:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801534a:	d905      	bls.n	8015358 <rmw_validate_node_name+0x44>
 801534c:	f1bc 0f19 	cmp.w	ip, #25
 8015350:	d902      	bls.n	8015358 <rmw_validate_node_name+0x44>
 8015352:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8015356:	d114      	bne.n	8015382 <rmw_validate_node_name+0x6e>
 8015358:	4598      	cmp	r8, r3
 801535a:	d1ec      	bne.n	8015336 <rmw_validate_node_name+0x22>
 801535c:	7822      	ldrb	r2, [r4, #0]
 801535e:	4b16      	ldr	r3, [pc, #88]	@ (80153b8 <rmw_validate_node_name+0xa4>)
 8015360:	5cd3      	ldrb	r3, [r2, r3]
 8015362:	f013 0304 	ands.w	r3, r3, #4
 8015366:	d113      	bne.n	8015390 <rmw_validate_node_name+0x7c>
 8015368:	28ff      	cmp	r0, #255	@ 0xff
 801536a:	d81c      	bhi.n	80153a6 <rmw_validate_node_name+0x92>
 801536c:	4618      	mov	r0, r3
 801536e:	602b      	str	r3, [r5, #0]
 8015370:	e00c      	b.n	801538c <rmw_validate_node_name+0x78>
 8015372:	2301      	movs	r3, #1
 8015374:	602b      	str	r3, [r5, #0]
 8015376:	b17e      	cbz	r6, 8015398 <rmw_validate_node_name+0x84>
 8015378:	2300      	movs	r3, #0
 801537a:	4618      	mov	r0, r3
 801537c:	6033      	str	r3, [r6, #0]
 801537e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015382:	2302      	movs	r3, #2
 8015384:	602b      	str	r3, [r5, #0]
 8015386:	b13e      	cbz	r6, 8015398 <rmw_validate_node_name+0x84>
 8015388:	2000      	movs	r0, #0
 801538a:	6037      	str	r7, [r6, #0]
 801538c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015390:	2303      	movs	r3, #3
 8015392:	602b      	str	r3, [r5, #0]
 8015394:	2e00      	cmp	r6, #0
 8015396:	d1ef      	bne.n	8015378 <rmw_validate_node_name+0x64>
 8015398:	2000      	movs	r0, #0
 801539a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801539e:	200b      	movs	r0, #11
 80153a0:	4770      	bx	lr
 80153a2:	200b      	movs	r0, #11
 80153a4:	e7f2      	b.n	801538c <rmw_validate_node_name+0x78>
 80153a6:	2204      	movs	r2, #4
 80153a8:	602a      	str	r2, [r5, #0]
 80153aa:	2e00      	cmp	r6, #0
 80153ac:	d0f4      	beq.n	8015398 <rmw_validate_node_name+0x84>
 80153ae:	22fe      	movs	r2, #254	@ 0xfe
 80153b0:	4618      	mov	r0, r3
 80153b2:	6032      	str	r2, [r6, #0]
 80153b4:	e7ea      	b.n	801538c <rmw_validate_node_name+0x78>
 80153b6:	bf00      	nop
 80153b8:	080206de 	.word	0x080206de

080153bc <rmw_node_name_validation_result_string>:
 80153bc:	2804      	cmp	r0, #4
 80153be:	d803      	bhi.n	80153c8 <rmw_node_name_validation_result_string+0xc>
 80153c0:	4b02      	ldr	r3, [pc, #8]	@ (80153cc <rmw_node_name_validation_result_string+0x10>)
 80153c2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80153c6:	4770      	bx	lr
 80153c8:	4801      	ldr	r0, [pc, #4]	@ (80153d0 <rmw_node_name_validation_result_string+0x14>)
 80153ca:	4770      	bx	lr
 80153cc:	08020228 	.word	0x08020228
 80153d0:	0802013c 	.word	0x0802013c

080153d4 <rmw_destroy_client>:
 80153d4:	b570      	push	{r4, r5, r6, lr}
 80153d6:	b128      	cbz	r0, 80153e4 <rmw_destroy_client+0x10>
 80153d8:	4604      	mov	r4, r0
 80153da:	6800      	ldr	r0, [r0, #0]
 80153dc:	460d      	mov	r5, r1
 80153de:	f001 feef 	bl	80171c0 <is_uxrce_rmw_identifier_valid>
 80153e2:	b910      	cbnz	r0, 80153ea <rmw_destroy_client+0x16>
 80153e4:	2401      	movs	r4, #1
 80153e6:	4620      	mov	r0, r4
 80153e8:	bd70      	pop	{r4, r5, r6, pc}
 80153ea:	6863      	ldr	r3, [r4, #4]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d0f9      	beq.n	80153e4 <rmw_destroy_client+0x10>
 80153f0:	2d00      	cmp	r5, #0
 80153f2:	d0f7      	beq.n	80153e4 <rmw_destroy_client+0x10>
 80153f4:	6828      	ldr	r0, [r5, #0]
 80153f6:	f001 fee3 	bl	80171c0 <is_uxrce_rmw_identifier_valid>
 80153fa:	2800      	cmp	r0, #0
 80153fc:	d0f2      	beq.n	80153e4 <rmw_destroy_client+0x10>
 80153fe:	686e      	ldr	r6, [r5, #4]
 8015400:	2e00      	cmp	r6, #0
 8015402:	d0ef      	beq.n	80153e4 <rmw_destroy_client+0x10>
 8015404:	6864      	ldr	r4, [r4, #4]
 8015406:	6932      	ldr	r2, [r6, #16]
 8015408:	6920      	ldr	r0, [r4, #16]
 801540a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801540e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015412:	6819      	ldr	r1, [r3, #0]
 8015414:	f002 fd70 	bl	8017ef8 <uxr_buffer_cancel_data>
 8015418:	4602      	mov	r2, r0
 801541a:	6920      	ldr	r0, [r4, #16]
 801541c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015420:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015424:	f001 fdba 	bl	8016f9c <run_xrce_session>
 8015428:	6920      	ldr	r0, [r4, #16]
 801542a:	6932      	ldr	r2, [r6, #16]
 801542c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015430:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015434:	6819      	ldr	r1, [r3, #0]
 8015436:	f002 f9fb 	bl	8017830 <uxr_buffer_delete_entity>
 801543a:	4602      	mov	r2, r0
 801543c:	6920      	ldr	r0, [r4, #16]
 801543e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015442:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015446:	f001 fda9 	bl	8016f9c <run_xrce_session>
 801544a:	4603      	mov	r3, r0
 801544c:	4628      	mov	r0, r5
 801544e:	2b00      	cmp	r3, #0
 8015450:	bf14      	ite	ne
 8015452:	2400      	movne	r4, #0
 8015454:	2402      	moveq	r4, #2
 8015456:	f001 fc7f 	bl	8016d58 <rmw_uxrce_fini_client_memory>
 801545a:	e7c4      	b.n	80153e6 <rmw_destroy_client+0x12>

0801545c <rmw_get_implementation_identifier>:
 801545c:	4b01      	ldr	r3, [pc, #4]	@ (8015464 <rmw_get_implementation_identifier+0x8>)
 801545e:	6818      	ldr	r0, [r3, #0]
 8015460:	4770      	bx	lr
 8015462:	bf00      	nop
 8015464:	08020578 	.word	0x08020578

08015468 <rmw_init_options_init>:
 8015468:	b084      	sub	sp, #16
 801546a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801546c:	b083      	sub	sp, #12
 801546e:	ad09      	add	r5, sp, #36	@ 0x24
 8015470:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8015474:	b130      	cbz	r0, 8015484 <rmw_init_options_init+0x1c>
 8015476:	4604      	mov	r4, r0
 8015478:	4628      	mov	r0, r5
 801547a:	f7fb fcd9 	bl	8010e30 <rcutils_allocator_is_valid>
 801547e:	b108      	cbz	r0, 8015484 <rmw_init_options_init+0x1c>
 8015480:	68a6      	ldr	r6, [r4, #8]
 8015482:	b12e      	cbz	r6, 8015490 <rmw_init_options_init+0x28>
 8015484:	200b      	movs	r0, #11
 8015486:	b003      	add	sp, #12
 8015488:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801548c:	b004      	add	sp, #16
 801548e:	4770      	bx	lr
 8015490:	2200      	movs	r2, #0
 8015492:	2300      	movs	r3, #0
 8015494:	f104 0c20 	add.w	ip, r4, #32
 8015498:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8015534 <rmw_init_options_init+0xcc>
 801549c:	466f      	mov	r7, sp
 801549e:	e9c4 2300 	strd	r2, r3, [r4]
 80154a2:	4b20      	ldr	r3, [pc, #128]	@ (8015524 <rmw_init_options_init+0xbc>)
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	60a3      	str	r3, [r4, #8]
 80154a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80154aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154ae:	682b      	ldr	r3, [r5, #0]
 80154b0:	4638      	mov	r0, r7
 80154b2:	f8cc 3000 	str.w	r3, [ip]
 80154b6:	f8c4 e01c 	str.w	lr, [r4, #28]
 80154ba:	60e6      	str	r6, [r4, #12]
 80154bc:	f7ff fe10 	bl	80150e0 <rmw_get_default_security_options>
 80154c0:	f104 0310 	add.w	r3, r4, #16
 80154c4:	2203      	movs	r2, #3
 80154c6:	e897 0003 	ldmia.w	r7, {r0, r1}
 80154ca:	e883 0003 	stmia.w	r3, {r0, r1}
 80154ce:	4816      	ldr	r0, [pc, #88]	@ (8015528 <rmw_init_options_init+0xc0>)
 80154d0:	4916      	ldr	r1, [pc, #88]	@ (801552c <rmw_init_options_init+0xc4>)
 80154d2:	7626      	strb	r6, [r4, #24]
 80154d4:	f001 fb80 	bl	8016bd8 <rmw_uxrce_init_init_options_impl_memory>
 80154d8:	4813      	ldr	r0, [pc, #76]	@ (8015528 <rmw_init_options_init+0xc0>)
 80154da:	f006 fa79 	bl	801b9d0 <get_memory>
 80154de:	b1f0      	cbz	r0, 801551e <rmw_init_options_init+0xb6>
 80154e0:	4a13      	ldr	r2, [pc, #76]	@ (8015530 <rmw_init_options_init+0xc8>)
 80154e2:	6883      	ldr	r3, [r0, #8]
 80154e4:	6851      	ldr	r1, [r2, #4]
 80154e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80154e8:	7810      	ldrb	r0, [r2, #0]
 80154ea:	6159      	str	r1, [r3, #20]
 80154ec:	68d1      	ldr	r1, [r2, #12]
 80154ee:	7418      	strb	r0, [r3, #16]
 80154f0:	61d9      	str	r1, [r3, #28]
 80154f2:	6911      	ldr	r1, [r2, #16]
 80154f4:	6219      	str	r1, [r3, #32]
 80154f6:	6951      	ldr	r1, [r2, #20]
 80154f8:	6892      	ldr	r2, [r2, #8]
 80154fa:	6259      	str	r1, [r3, #36]	@ 0x24
 80154fc:	619a      	str	r2, [r3, #24]
 80154fe:	f004 fca5 	bl	8019e4c <uxr_nanos>
 8015502:	f007 fa33 	bl	801c96c <srand>
 8015506:	f007 fa5f 	bl	801c9c8 <rand>
 801550a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801550c:	6298      	str	r0, [r3, #40]	@ 0x28
 801550e:	2800      	cmp	r0, #0
 8015510:	d0f9      	beq.n	8015506 <rmw_init_options_init+0x9e>
 8015512:	2000      	movs	r0, #0
 8015514:	b003      	add	sp, #12
 8015516:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801551a:	b004      	add	sp, #16
 801551c:	4770      	bx	lr
 801551e:	2001      	movs	r0, #1
 8015520:	e7b1      	b.n	8015486 <rmw_init_options_init+0x1e>
 8015522:	bf00      	nop
 8015524:	08020578 	.word	0x08020578
 8015528:	2406925c 	.word	0x2406925c
 801552c:	24064af8 	.word	0x24064af8
 8015530:	2406469c 	.word	0x2406469c
 8015534:	0801fc00 	.word	0x0801fc00

08015538 <rmw_init_options_copy>:
 8015538:	2800      	cmp	r0, #0
 801553a:	d047      	beq.n	80155cc <rmw_init_options_copy+0x94>
 801553c:	b570      	push	{r4, r5, r6, lr}
 801553e:	460d      	mov	r5, r1
 8015540:	b149      	cbz	r1, 8015556 <rmw_init_options_copy+0x1e>
 8015542:	4604      	mov	r4, r0
 8015544:	6880      	ldr	r0, [r0, #8]
 8015546:	b120      	cbz	r0, 8015552 <rmw_init_options_copy+0x1a>
 8015548:	4b22      	ldr	r3, [pc, #136]	@ (80155d4 <rmw_init_options_copy+0x9c>)
 801554a:	6819      	ldr	r1, [r3, #0]
 801554c:	f7ea fec8 	bl	80002e0 <strcmp>
 8015550:	bba8      	cbnz	r0, 80155be <rmw_init_options_copy+0x86>
 8015552:	68ab      	ldr	r3, [r5, #8]
 8015554:	b11b      	cbz	r3, 801555e <rmw_init_options_copy+0x26>
 8015556:	f04f 0c0b 	mov.w	ip, #11
 801555a:	4660      	mov	r0, ip
 801555c:	bd70      	pop	{r4, r5, r6, pc}
 801555e:	4623      	mov	r3, r4
 8015560:	462a      	mov	r2, r5
 8015562:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8015566:	f8d3 e000 	ldr.w	lr, [r3]
 801556a:	3310      	adds	r3, #16
 801556c:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8015570:	3210      	adds	r2, #16
 8015572:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8015576:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801557a:	42b3      	cmp	r3, r6
 801557c:	f842 ec10 	str.w	lr, [r2, #-16]
 8015580:	f842 cc0c 	str.w	ip, [r2, #-12]
 8015584:	f842 0c08 	str.w	r0, [r2, #-8]
 8015588:	f842 1c04 	str.w	r1, [r2, #-4]
 801558c:	d1eb      	bne.n	8015566 <rmw_init_options_copy+0x2e>
 801558e:	6819      	ldr	r1, [r3, #0]
 8015590:	685b      	ldr	r3, [r3, #4]
 8015592:	4811      	ldr	r0, [pc, #68]	@ (80155d8 <rmw_init_options_copy+0xa0>)
 8015594:	6011      	str	r1, [r2, #0]
 8015596:	6053      	str	r3, [r2, #4]
 8015598:	f006 fa1a 	bl	801b9d0 <get_memory>
 801559c:	b198      	cbz	r0, 80155c6 <rmw_init_options_copy+0x8e>
 801559e:	6883      	ldr	r3, [r0, #8]
 80155a0:	f04f 0c00 	mov.w	ip, #0
 80155a4:	636b      	str	r3, [r5, #52]	@ 0x34
 80155a6:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 80155a8:	f103 0410 	add.w	r4, r3, #16
 80155ac:	3510      	adds	r5, #16
 80155ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80155b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80155b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80155b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80155ba:	4660      	mov	r0, ip
 80155bc:	bd70      	pop	{r4, r5, r6, pc}
 80155be:	f04f 0c0c 	mov.w	ip, #12
 80155c2:	4660      	mov	r0, ip
 80155c4:	bd70      	pop	{r4, r5, r6, pc}
 80155c6:	f04f 0c01 	mov.w	ip, #1
 80155ca:	e7c6      	b.n	801555a <rmw_init_options_copy+0x22>
 80155cc:	f04f 0c0b 	mov.w	ip, #11
 80155d0:	4660      	mov	r0, ip
 80155d2:	4770      	bx	lr
 80155d4:	08020578 	.word	0x08020578
 80155d8:	2406925c 	.word	0x2406925c

080155dc <rmw_init_options_fini>:
 80155dc:	b510      	push	{r4, lr}
 80155de:	b08e      	sub	sp, #56	@ 0x38
 80155e0:	b388      	cbz	r0, 8015646 <rmw_init_options_fini+0x6a>
 80155e2:	4604      	mov	r4, r0
 80155e4:	3020      	adds	r0, #32
 80155e6:	f7fb fc23 	bl	8010e30 <rcutils_allocator_is_valid>
 80155ea:	b360      	cbz	r0, 8015646 <rmw_init_options_fini+0x6a>
 80155ec:	68a0      	ldr	r0, [r4, #8]
 80155ee:	b120      	cbz	r0, 80155fa <rmw_init_options_fini+0x1e>
 80155f0:	4b1a      	ldr	r3, [pc, #104]	@ (801565c <rmw_init_options_fini+0x80>)
 80155f2:	6819      	ldr	r1, [r3, #0]
 80155f4:	f7ea fe74 	bl	80002e0 <strcmp>
 80155f8:	bb68      	cbnz	r0, 8015656 <rmw_init_options_fini+0x7a>
 80155fa:	4b19      	ldr	r3, [pc, #100]	@ (8015660 <rmw_init_options_fini+0x84>)
 80155fc:	6819      	ldr	r1, [r3, #0]
 80155fe:	b331      	cbz	r1, 801564e <rmw_init_options_fini+0x72>
 8015600:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8015602:	e001      	b.n	8015608 <rmw_init_options_fini+0x2c>
 8015604:	6849      	ldr	r1, [r1, #4]
 8015606:	b311      	cbz	r1, 801564e <rmw_init_options_fini+0x72>
 8015608:	688b      	ldr	r3, [r1, #8]
 801560a:	429a      	cmp	r2, r3
 801560c:	d1fa      	bne.n	8015604 <rmw_init_options_fini+0x28>
 801560e:	4814      	ldr	r0, [pc, #80]	@ (8015660 <rmw_init_options_fini+0x84>)
 8015610:	f006 f9ee 	bl	801b9f0 <put_memory>
 8015614:	4668      	mov	r0, sp
 8015616:	f7ff fd4f 	bl	80150b8 <rmw_get_zero_initialized_init_options>
 801561a:	46ee      	mov	lr, sp
 801561c:	46a4      	mov	ip, r4
 801561e:	2400      	movs	r4, #0
 8015620:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015624:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015628:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801562c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015630:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015634:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015638:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801563c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015640:	4620      	mov	r0, r4
 8015642:	b00e      	add	sp, #56	@ 0x38
 8015644:	bd10      	pop	{r4, pc}
 8015646:	240b      	movs	r4, #11
 8015648:	4620      	mov	r0, r4
 801564a:	b00e      	add	sp, #56	@ 0x38
 801564c:	bd10      	pop	{r4, pc}
 801564e:	2401      	movs	r4, #1
 8015650:	4620      	mov	r0, r4
 8015652:	b00e      	add	sp, #56	@ 0x38
 8015654:	bd10      	pop	{r4, pc}
 8015656:	240c      	movs	r4, #12
 8015658:	e7f2      	b.n	8015640 <rmw_init_options_fini+0x64>
 801565a:	bf00      	nop
 801565c:	08020578 	.word	0x08020578
 8015660:	2406925c 	.word	0x2406925c

08015664 <rmw_init>:
 8015664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015668:	b083      	sub	sp, #12
 801566a:	2800      	cmp	r0, #0
 801566c:	f000 80d3 	beq.w	8015816 <rmw_init+0x1b2>
 8015670:	460e      	mov	r6, r1
 8015672:	2900      	cmp	r1, #0
 8015674:	f000 80cf 	beq.w	8015816 <rmw_init+0x1b2>
 8015678:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801567a:	4605      	mov	r5, r0
 801567c:	2b00      	cmp	r3, #0
 801567e:	f000 80ca 	beq.w	8015816 <rmw_init+0x1b2>
 8015682:	4b78      	ldr	r3, [pc, #480]	@ (8015864 <rmw_init+0x200>)
 8015684:	6880      	ldr	r0, [r0, #8]
 8015686:	681f      	ldr	r7, [r3, #0]
 8015688:	b128      	cbz	r0, 8015696 <rmw_init+0x32>
 801568a:	4639      	mov	r1, r7
 801568c:	f7ea fe28 	bl	80002e0 <strcmp>
 8015690:	2800      	cmp	r0, #0
 8015692:	f040 80ca 	bne.w	801582a <rmw_init+0x1c6>
 8015696:	4c74      	ldr	r4, [pc, #464]	@ (8015868 <rmw_init+0x204>)
 8015698:	f04f 0800 	mov.w	r8, #0
 801569c:	4973      	ldr	r1, [pc, #460]	@ (801586c <rmw_init+0x208>)
 801569e:	4874      	ldr	r0, [pc, #464]	@ (8015870 <rmw_init+0x20c>)
 80156a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80156a4:	60b7      	str	r7, [r6, #8]
 80156a6:	e9c6 2300 	strd	r2, r3, [r6]
 80156aa:	68eb      	ldr	r3, [r5, #12]
 80156ac:	2201      	movs	r2, #1
 80156ae:	64b3      	str	r3, [r6, #72]	@ 0x48
 80156b0:	f001 fa32 	bl	8016b18 <rmw_uxrce_init_session_memory>
 80156b4:	4620      	mov	r0, r4
 80156b6:	2204      	movs	r2, #4
 80156b8:	496e      	ldr	r1, [pc, #440]	@ (8015874 <rmw_init+0x210>)
 80156ba:	f001 fa6d 	bl	8016b98 <rmw_uxrce_init_static_input_buffer_memory>
 80156be:	486c      	ldr	r0, [pc, #432]	@ (8015870 <rmw_init+0x20c>)
 80156c0:	f884 800d 	strb.w	r8, [r4, #13]
 80156c4:	f006 f984 	bl	801b9d0 <get_memory>
 80156c8:	2800      	cmp	r0, #0
 80156ca:	f000 80a9 	beq.w	8015820 <rmw_init+0x1bc>
 80156ce:	6884      	ldr	r4, [r0, #8]
 80156d0:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 80156d2:	f104 0910 	add.w	r9, r4, #16
 80156d6:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80156d8:	f890 c010 	ldrb.w	ip, [r0, #16]
 80156dc:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80156e0:	9101      	str	r1, [sp, #4]
 80156e2:	4661      	mov	r1, ip
 80156e4:	6a00      	ldr	r0, [r0, #32]
 80156e6:	9000      	str	r0, [sp, #0]
 80156e8:	4648      	mov	r0, r9
 80156ea:	f002 fb59 	bl	8017da0 <uxr_set_custom_transport_callbacks>
 80156ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80156f2:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80156f6:	4960      	ldr	r1, [pc, #384]	@ (8015878 <rmw_init+0x214>)
 80156f8:	4860      	ldr	r0, [pc, #384]	@ (801587c <rmw_init+0x218>)
 80156fa:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 80156fe:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8015702:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8015706:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 801570a:	2201      	movs	r2, #1
 801570c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8015710:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8015714:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8015718:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 801571c:	64f4      	str	r4, [r6, #76]	@ 0x4c
 801571e:	f001 f9db 	bl	8016ad8 <rmw_uxrce_init_node_memory>
 8015722:	2205      	movs	r2, #5
 8015724:	4956      	ldr	r1, [pc, #344]	@ (8015880 <rmw_init+0x21c>)
 8015726:	4857      	ldr	r0, [pc, #348]	@ (8015884 <rmw_init+0x220>)
 8015728:	f001 f9b6 	bl	8016a98 <rmw_uxrce_init_subscription_memory>
 801572c:	220a      	movs	r2, #10
 801572e:	4956      	ldr	r1, [pc, #344]	@ (8015888 <rmw_init+0x224>)
 8015730:	4856      	ldr	r0, [pc, #344]	@ (801588c <rmw_init+0x228>)
 8015732:	f001 f991 	bl	8016a58 <rmw_uxrce_init_publisher_memory>
 8015736:	2201      	movs	r2, #1
 8015738:	4955      	ldr	r1, [pc, #340]	@ (8015890 <rmw_init+0x22c>)
 801573a:	4856      	ldr	r0, [pc, #344]	@ (8015894 <rmw_init+0x230>)
 801573c:	f001 f94c 	bl	80169d8 <rmw_uxrce_init_service_memory>
 8015740:	2201      	movs	r2, #1
 8015742:	4955      	ldr	r1, [pc, #340]	@ (8015898 <rmw_init+0x234>)
 8015744:	4855      	ldr	r0, [pc, #340]	@ (801589c <rmw_init+0x238>)
 8015746:	f001 f967 	bl	8016a18 <rmw_uxrce_init_client_memory>
 801574a:	220f      	movs	r2, #15
 801574c:	4954      	ldr	r1, [pc, #336]	@ (80158a0 <rmw_init+0x23c>)
 801574e:	4855      	ldr	r0, [pc, #340]	@ (80158a4 <rmw_init+0x240>)
 8015750:	f001 fa02 	bl	8016b58 <rmw_uxrce_init_topic_memory>
 8015754:	2203      	movs	r2, #3
 8015756:	4954      	ldr	r1, [pc, #336]	@ (80158a8 <rmw_init+0x244>)
 8015758:	4854      	ldr	r0, [pc, #336]	@ (80158ac <rmw_init+0x248>)
 801575a:	f001 fa3d 	bl	8016bd8 <rmw_uxrce_init_init_options_impl_memory>
 801575e:	2204      	movs	r2, #4
 8015760:	4953      	ldr	r1, [pc, #332]	@ (80158b0 <rmw_init+0x24c>)
 8015762:	4854      	ldr	r0, [pc, #336]	@ (80158b4 <rmw_init+0x250>)
 8015764:	f001 fa58 	bl	8016c18 <rmw_uxrce_init_wait_set_memory>
 8015768:	4953      	ldr	r1, [pc, #332]	@ (80158b8 <rmw_init+0x254>)
 801576a:	4854      	ldr	r0, [pc, #336]	@ (80158bc <rmw_init+0x258>)
 801576c:	2204      	movs	r2, #4
 801576e:	f001 fa73 	bl	8016c58 <rmw_uxrce_init_guard_condition_memory>
 8015772:	4642      	mov	r2, r8
 8015774:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8015776:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8015778:	f000 ff94 	bl	80166a4 <rmw_uxrce_transport_init>
 801577c:	4607      	mov	r7, r0
 801577e:	2800      	cmp	r0, #0
 8015780:	d158      	bne.n	8015834 <rmw_init+0x1d0>
 8015782:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8015784:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8015788:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 801578c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801578e:	4628      	mov	r0, r5
 8015790:	f002 fd36 	bl	8018200 <uxr_init_session>
 8015794:	4622      	mov	r2, r4
 8015796:	494a      	ldr	r1, [pc, #296]	@ (80158c0 <rmw_init+0x25c>)
 8015798:	4628      	mov	r0, r5
 801579a:	f002 fd55 	bl	8018248 <uxr_set_topic_callback>
 801579e:	463a      	mov	r2, r7
 80157a0:	4948      	ldr	r1, [pc, #288]	@ (80158c4 <rmw_init+0x260>)
 80157a2:	4628      	mov	r0, r5
 80157a4:	f002 fd4c 	bl	8018240 <uxr_set_status_callback>
 80157a8:	463a      	mov	r2, r7
 80157aa:	4947      	ldr	r1, [pc, #284]	@ (80158c8 <rmw_init+0x264>)
 80157ac:	4628      	mov	r0, r5
 80157ae:	f002 fd4f 	bl	8018250 <uxr_set_request_callback>
 80157b2:	463a      	mov	r2, r7
 80157b4:	4945      	ldr	r1, [pc, #276]	@ (80158cc <rmw_init+0x268>)
 80157b6:	4628      	mov	r0, r5
 80157b8:	f002 fd4e 	bl	8018258 <uxr_set_reply_callback>
 80157bc:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80157c0:	2304      	movs	r3, #4
 80157c2:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 80157c6:	0092      	lsls	r2, r2, #2
 80157c8:	4628      	mov	r0, r5
 80157ca:	f002 fd85 	bl	80182d8 <uxr_create_input_reliable_stream>
 80157ce:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80157d2:	2304      	movs	r3, #4
 80157d4:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 80157d8:	0092      	lsls	r2, r2, #2
 80157da:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 80157de:	4628      	mov	r0, r5
 80157e0:	f002 fd50 	bl	8018284 <uxr_create_output_reliable_stream>
 80157e4:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 80157e8:	4628      	mov	r0, r5
 80157ea:	f002 fd6f 	bl	80182cc <uxr_create_input_best_effort_stream>
 80157ee:	f241 3194 	movw	r1, #5012	@ 0x1394
 80157f2:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 80157f6:	4628      	mov	r0, r5
 80157f8:	4421      	add	r1, r4
 80157fa:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80157fe:	f002 fd2f 	bl	8018260 <uxr_create_output_best_effort_stream>
 8015802:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8015806:	4628      	mov	r0, r5
 8015808:	f003 fab8 	bl	8018d7c <uxr_create_session>
 801580c:	b1f8      	cbz	r0, 801584e <rmw_init+0x1ea>
 801580e:	4638      	mov	r0, r7
 8015810:	b003      	add	sp, #12
 8015812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015816:	270b      	movs	r7, #11
 8015818:	4638      	mov	r0, r7
 801581a:	b003      	add	sp, #12
 801581c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015820:	2701      	movs	r7, #1
 8015822:	4638      	mov	r0, r7
 8015824:	b003      	add	sp, #12
 8015826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801582a:	270c      	movs	r7, #12
 801582c:	4638      	mov	r0, r7
 801582e:	b003      	add	sp, #12
 8015830:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015834:	4648      	mov	r0, r9
 8015836:	f002 faf1 	bl	8017e1c <uxr_close_custom_transport>
 801583a:	4621      	mov	r1, r4
 801583c:	480c      	ldr	r0, [pc, #48]	@ (8015870 <rmw_init+0x20c>)
 801583e:	f006 f8d7 	bl	801b9f0 <put_memory>
 8015842:	4638      	mov	r0, r7
 8015844:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8015848:	b003      	add	sp, #12
 801584a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801584e:	4648      	mov	r0, r9
 8015850:	f002 fae4 	bl	8017e1c <uxr_close_custom_transport>
 8015854:	4621      	mov	r1, r4
 8015856:	4806      	ldr	r0, [pc, #24]	@ (8015870 <rmw_init+0x20c>)
 8015858:	f006 f8ca 	bl	801b9f0 <put_memory>
 801585c:	64f7      	str	r7, [r6, #76]	@ 0x4c
 801585e:	2701      	movs	r7, #1
 8015860:	e7d5      	b.n	801580e <rmw_init+0x1aa>
 8015862:	bf00      	nop
 8015864:	08020578 	.word	0x08020578
 8015868:	240692ac 	.word	0x240692ac
 801586c:	24065558 	.word	0x24065558
 8015870:	2406929c 	.word	0x2406929c
 8015874:	24066b00 	.word	0x24066b00
 8015878:	24064b7c 	.word	0x24064b7c
 801587c:	2406926c 	.word	0x2406926c
 8015880:	24068c00 	.word	0x24068c00
 8015884:	240692bc 	.word	0x240692bc
 8015888:	24064c20 	.word	0x24064c20
 801588c:	2406927c 	.word	0x2406927c
 8015890:	24065490 	.word	0x24065490
 8015894:	2406928c 	.word	0x2406928c
 8015898:	240649b0 	.word	0x240649b0
 801589c:	240649a0 	.word	0x240649a0
 80158a0:	24069038 	.word	0x24069038
 80158a4:	240692cc 	.word	0x240692cc
 80158a8:	24064af8 	.word	0x24064af8
 80158ac:	2406925c 	.word	0x2406925c
 80158b0:	240691dc 	.word	0x240691dc
 80158b4:	240692dc 	.word	0x240692dc
 80158b8:	24064a78 	.word	0x24064a78
 80158bc:	2406924c 	.word	0x2406924c
 80158c0:	0801b809 	.word	0x0801b809
 80158c4:	0801b801 	.word	0x0801b801
 80158c8:	0801b8a1 	.word	0x0801b8a1
 80158cc:	0801b93d 	.word	0x0801b93d

080158d0 <rmw_context_fini>:
 80158d0:	4b17      	ldr	r3, [pc, #92]	@ (8015930 <rmw_context_fini+0x60>)
 80158d2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80158d4:	b570      	push	{r4, r5, r6, lr}
 80158d6:	681c      	ldr	r4, [r3, #0]
 80158d8:	4605      	mov	r5, r0
 80158da:	b334      	cbz	r4, 801592a <rmw_context_fini+0x5a>
 80158dc:	2600      	movs	r6, #0
 80158de:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 80158e2:	6902      	ldr	r2, [r0, #16]
 80158e4:	428a      	cmp	r2, r1
 80158e6:	d018      	beq.n	801591a <rmw_context_fini+0x4a>
 80158e8:	2c00      	cmp	r4, #0
 80158ea:	d1f8      	bne.n	80158de <rmw_context_fini+0xe>
 80158ec:	b189      	cbz	r1, 8015912 <rmw_context_fini+0x42>
 80158ee:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 80158f2:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 80158f6:	789b      	ldrb	r3, [r3, #2]
 80158f8:	2b01      	cmp	r3, #1
 80158fa:	bf14      	ite	ne
 80158fc:	210a      	movne	r1, #10
 80158fe:	2100      	moveq	r1, #0
 8015900:	f003 fa14 	bl	8018d2c <uxr_delete_session_retries>
 8015904:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8015906:	f001 f9c7 	bl	8016c98 <rmw_uxrce_fini_session_memory>
 801590a:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801590c:	3010      	adds	r0, #16
 801590e:	f002 fa85 	bl	8017e1c <uxr_close_custom_transport>
 8015912:	2300      	movs	r3, #0
 8015914:	4630      	mov	r0, r6
 8015916:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8015918:	bd70      	pop	{r4, r5, r6, pc}
 801591a:	3018      	adds	r0, #24
 801591c:	f000 f89c 	bl	8015a58 <rmw_destroy_node>
 8015920:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8015922:	4606      	mov	r6, r0
 8015924:	2c00      	cmp	r4, #0
 8015926:	d1da      	bne.n	80158de <rmw_context_fini+0xe>
 8015928:	e7e0      	b.n	80158ec <rmw_context_fini+0x1c>
 801592a:	4626      	mov	r6, r4
 801592c:	e7de      	b.n	80158ec <rmw_context_fini+0x1c>
 801592e:	bf00      	nop
 8015930:	2406926c 	.word	0x2406926c

08015934 <create_node>:
 8015934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015938:	b083      	sub	sp, #12
 801593a:	2b00      	cmp	r3, #0
 801593c:	d064      	beq.n	8015a08 <create_node+0xd4>
 801593e:	4606      	mov	r6, r0
 8015940:	4838      	ldr	r0, [pc, #224]	@ (8015a24 <create_node+0xf0>)
 8015942:	460f      	mov	r7, r1
 8015944:	4690      	mov	r8, r2
 8015946:	461d      	mov	r5, r3
 8015948:	f006 f842 	bl	801b9d0 <get_memory>
 801594c:	2800      	cmp	r0, #0
 801594e:	d05b      	beq.n	8015a08 <create_node+0xd4>
 8015950:	6884      	ldr	r4, [r0, #8]
 8015952:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8015954:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8015958:	f104 0518 	add.w	r5, r4, #24
 801595c:	6123      	str	r3, [r4, #16]
 801595e:	f7ff fd7d 	bl	801545c <rmw_get_implementation_identifier>
 8015962:	f8c4 9020 	str.w	r9, [r4, #32]
 8015966:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801596a:	4630      	mov	r0, r6
 801596c:	f7ea fcc2 	bl	80002f4 <strlen>
 8015970:	1c42      	adds	r2, r0, #1
 8015972:	2a3c      	cmp	r2, #60	@ 0x3c
 8015974:	d840      	bhi.n	80159f8 <create_node+0xc4>
 8015976:	4648      	mov	r0, r9
 8015978:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 801597c:	4631      	mov	r1, r6
 801597e:	f007 fcb8 	bl	801d2f2 <memcpy>
 8015982:	4638      	mov	r0, r7
 8015984:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8015988:	f7ea fcb4 	bl	80002f4 <strlen>
 801598c:	1c42      	adds	r2, r0, #1
 801598e:	2a3c      	cmp	r2, #60	@ 0x3c
 8015990:	d832      	bhi.n	80159f8 <create_node+0xc4>
 8015992:	4639      	mov	r1, r7
 8015994:	4648      	mov	r0, r9
 8015996:	f007 fcac 	bl	801d2f2 <memcpy>
 801599a:	6923      	ldr	r3, [r4, #16]
 801599c:	2101      	movs	r1, #1
 801599e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80159a2:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 80159a6:	1842      	adds	r2, r0, r1
 80159a8:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 80159ac:	f002 fa3a 	bl	8017e24 <uxr_object_id>
 80159b0:	6160      	str	r0, [r4, #20]
 80159b2:	783b      	ldrb	r3, [r7, #0]
 80159b4:	2b2f      	cmp	r3, #47	@ 0x2f
 80159b6:	d12c      	bne.n	8015a12 <create_node+0xde>
 80159b8:	787b      	ldrb	r3, [r7, #1]
 80159ba:	bb53      	cbnz	r3, 8015a12 <create_node+0xde>
 80159bc:	4633      	mov	r3, r6
 80159be:	4a1a      	ldr	r2, [pc, #104]	@ (8015a28 <create_node+0xf4>)
 80159c0:	213c      	movs	r1, #60	@ 0x3c
 80159c2:	481a      	ldr	r0, [pc, #104]	@ (8015a2c <create_node+0xf8>)
 80159c4:	f007 fa08 	bl	801cdd8 <sniprintf>
 80159c8:	6920      	ldr	r0, [r4, #16]
 80159ca:	2106      	movs	r1, #6
 80159cc:	fa1f f388 	uxth.w	r3, r8
 80159d0:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80159d4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80159d8:	9101      	str	r1, [sp, #4]
 80159da:	4914      	ldr	r1, [pc, #80]	@ (8015a2c <create_node+0xf8>)
 80159dc:	9100      	str	r1, [sp, #0]
 80159de:	6811      	ldr	r1, [r2, #0]
 80159e0:	6962      	ldr	r2, [r4, #20]
 80159e2:	f001 ff71 	bl	80178c8 <uxr_buffer_create_participant_bin>
 80159e6:	4602      	mov	r2, r0
 80159e8:	6920      	ldr	r0, [r4, #16]
 80159ea:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80159ee:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80159f2:	f001 fad3 	bl	8016f9c <run_xrce_session>
 80159f6:	b918      	cbnz	r0, 8015a00 <create_node+0xcc>
 80159f8:	4628      	mov	r0, r5
 80159fa:	2500      	movs	r5, #0
 80159fc:	f001 f952 	bl	8016ca4 <rmw_uxrce_fini_node_memory>
 8015a00:	4628      	mov	r0, r5
 8015a02:	b003      	add	sp, #12
 8015a04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a08:	2500      	movs	r5, #0
 8015a0a:	4628      	mov	r0, r5
 8015a0c:	b003      	add	sp, #12
 8015a0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a12:	463b      	mov	r3, r7
 8015a14:	4a06      	ldr	r2, [pc, #24]	@ (8015a30 <create_node+0xfc>)
 8015a16:	213c      	movs	r1, #60	@ 0x3c
 8015a18:	9600      	str	r6, [sp, #0]
 8015a1a:	4804      	ldr	r0, [pc, #16]	@ (8015a2c <create_node+0xf8>)
 8015a1c:	f007 f9dc 	bl	801cdd8 <sniprintf>
 8015a20:	e7d2      	b.n	80159c8 <create_node+0x94>
 8015a22:	bf00      	nop
 8015a24:	2406926c 	.word	0x2406926c
 8015a28:	0802024c 	.word	0x0802024c
 8015a2c:	24064824 	.word	0x24064824
 8015a30:	0801fc10 	.word	0x0801fc10

08015a34 <rmw_create_node>:
 8015a34:	468c      	mov	ip, r1
 8015a36:	4611      	mov	r1, r2
 8015a38:	f1bc 0f00 	cmp.w	ip, #0
 8015a3c:	d00a      	beq.n	8015a54 <rmw_create_node+0x20>
 8015a3e:	f89c 3000 	ldrb.w	r3, [ip]
 8015a42:	b13b      	cbz	r3, 8015a54 <rmw_create_node+0x20>
 8015a44:	b132      	cbz	r2, 8015a54 <rmw_create_node+0x20>
 8015a46:	7813      	ldrb	r3, [r2, #0]
 8015a48:	b123      	cbz	r3, 8015a54 <rmw_create_node+0x20>
 8015a4a:	4603      	mov	r3, r0
 8015a4c:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8015a4e:	4660      	mov	r0, ip
 8015a50:	f7ff bf70 	b.w	8015934 <create_node>
 8015a54:	2000      	movs	r0, #0
 8015a56:	4770      	bx	lr

08015a58 <rmw_destroy_node>:
 8015a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a5a:	b328      	cbz	r0, 8015aa8 <rmw_destroy_node+0x50>
 8015a5c:	4607      	mov	r7, r0
 8015a5e:	6800      	ldr	r0, [r0, #0]
 8015a60:	b120      	cbz	r0, 8015a6c <rmw_destroy_node+0x14>
 8015a62:	4b37      	ldr	r3, [pc, #220]	@ (8015b40 <rmw_destroy_node+0xe8>)
 8015a64:	6819      	ldr	r1, [r3, #0]
 8015a66:	f7ea fc3b 	bl	80002e0 <strcmp>
 8015a6a:	b9e8      	cbnz	r0, 8015aa8 <rmw_destroy_node+0x50>
 8015a6c:	687d      	ldr	r5, [r7, #4]
 8015a6e:	b1dd      	cbz	r5, 8015aa8 <rmw_destroy_node+0x50>
 8015a70:	4b34      	ldr	r3, [pc, #208]	@ (8015b44 <rmw_destroy_node+0xec>)
 8015a72:	681c      	ldr	r4, [r3, #0]
 8015a74:	2c00      	cmp	r4, #0
 8015a76:	d060      	beq.n	8015b3a <rmw_destroy_node+0xe2>
 8015a78:	2600      	movs	r6, #0
 8015a7a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015a7e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8015a82:	429d      	cmp	r5, r3
 8015a84:	d013      	beq.n	8015aae <rmw_destroy_node+0x56>
 8015a86:	2c00      	cmp	r4, #0
 8015a88:	d1f7      	bne.n	8015a7a <rmw_destroy_node+0x22>
 8015a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8015b48 <rmw_destroy_node+0xf0>)
 8015a8c:	681c      	ldr	r4, [r3, #0]
 8015a8e:	b1c4      	cbz	r4, 8015ac2 <rmw_destroy_node+0x6a>
 8015a90:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015a94:	6a0b      	ldr	r3, [r1, #32]
 8015a96:	429d      	cmp	r5, r3
 8015a98:	d1f9      	bne.n	8015a8e <rmw_destroy_node+0x36>
 8015a9a:	317c      	adds	r1, #124	@ 0x7c
 8015a9c:	4638      	mov	r0, r7
 8015a9e:	f000 fd4b 	bl	8016538 <rmw_destroy_subscription>
 8015aa2:	2801      	cmp	r0, #1
 8015aa4:	4606      	mov	r6, r0
 8015aa6:	d1f2      	bne.n	8015a8e <rmw_destroy_node+0x36>
 8015aa8:	2601      	movs	r6, #1
 8015aaa:	4630      	mov	r0, r6
 8015aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015aae:	3184      	adds	r1, #132	@ 0x84
 8015ab0:	4638      	mov	r0, r7
 8015ab2:	f000 f94d 	bl	8015d50 <rmw_destroy_publisher>
 8015ab6:	2801      	cmp	r0, #1
 8015ab8:	4606      	mov	r6, r0
 8015aba:	d0f5      	beq.n	8015aa8 <rmw_destroy_node+0x50>
 8015abc:	2c00      	cmp	r4, #0
 8015abe:	d1dc      	bne.n	8015a7a <rmw_destroy_node+0x22>
 8015ac0:	e7e3      	b.n	8015a8a <rmw_destroy_node+0x32>
 8015ac2:	4b22      	ldr	r3, [pc, #136]	@ (8015b4c <rmw_destroy_node+0xf4>)
 8015ac4:	681c      	ldr	r4, [r3, #0]
 8015ac6:	b16c      	cbz	r4, 8015ae4 <rmw_destroy_node+0x8c>
 8015ac8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015acc:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8015ace:	429d      	cmp	r5, r3
 8015ad0:	d1f9      	bne.n	8015ac6 <rmw_destroy_node+0x6e>
 8015ad2:	317c      	adds	r1, #124	@ 0x7c
 8015ad4:	4638      	mov	r0, r7
 8015ad6:	f000 fbb9 	bl	801624c <rmw_destroy_service>
 8015ada:	2801      	cmp	r0, #1
 8015adc:	4606      	mov	r6, r0
 8015ade:	d0e3      	beq.n	8015aa8 <rmw_destroy_node+0x50>
 8015ae0:	2c00      	cmp	r4, #0
 8015ae2:	d1f1      	bne.n	8015ac8 <rmw_destroy_node+0x70>
 8015ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8015b50 <rmw_destroy_node+0xf8>)
 8015ae6:	681c      	ldr	r4, [r3, #0]
 8015ae8:	b16c      	cbz	r4, 8015b06 <rmw_destroy_node+0xae>
 8015aea:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015aee:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8015af0:	429d      	cmp	r5, r3
 8015af2:	d1f9      	bne.n	8015ae8 <rmw_destroy_node+0x90>
 8015af4:	317c      	adds	r1, #124	@ 0x7c
 8015af6:	4638      	mov	r0, r7
 8015af8:	f7ff fc6c 	bl	80153d4 <rmw_destroy_client>
 8015afc:	2801      	cmp	r0, #1
 8015afe:	4606      	mov	r6, r0
 8015b00:	d0d2      	beq.n	8015aa8 <rmw_destroy_node+0x50>
 8015b02:	2c00      	cmp	r4, #0
 8015b04:	d1f1      	bne.n	8015aea <rmw_destroy_node+0x92>
 8015b06:	6928      	ldr	r0, [r5, #16]
 8015b08:	696a      	ldr	r2, [r5, #20]
 8015b0a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015b0e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015b12:	6819      	ldr	r1, [r3, #0]
 8015b14:	f001 fe8c 	bl	8017830 <uxr_buffer_delete_entity>
 8015b18:	4602      	mov	r2, r0
 8015b1a:	6928      	ldr	r0, [r5, #16]
 8015b1c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015b20:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015b24:	f001 fa3a 	bl	8016f9c <run_xrce_session>
 8015b28:	4603      	mov	r3, r0
 8015b2a:	4638      	mov	r0, r7
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	bf08      	it	eq
 8015b30:	2602      	moveq	r6, #2
 8015b32:	f001 f8b7 	bl	8016ca4 <rmw_uxrce_fini_node_memory>
 8015b36:	4630      	mov	r0, r6
 8015b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b3a:	4626      	mov	r6, r4
 8015b3c:	e7a5      	b.n	8015a8a <rmw_destroy_node+0x32>
 8015b3e:	bf00      	nop
 8015b40:	08020578 	.word	0x08020578
 8015b44:	2406927c 	.word	0x2406927c
 8015b48:	240692bc 	.word	0x240692bc
 8015b4c:	2406928c 	.word	0x2406928c
 8015b50:	240649a0 	.word	0x240649a0

08015b54 <rmw_node_get_graph_guard_condition>:
 8015b54:	6843      	ldr	r3, [r0, #4]
 8015b56:	6918      	ldr	r0, [r3, #16]
 8015b58:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8015b5c:	4770      	bx	lr
 8015b5e:	bf00      	nop

08015b60 <rmw_create_publisher>:
 8015b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b64:	b087      	sub	sp, #28
 8015b66:	2800      	cmp	r0, #0
 8015b68:	f000 80d2 	beq.w	8015d10 <rmw_create_publisher+0x1b0>
 8015b6c:	460e      	mov	r6, r1
 8015b6e:	2900      	cmp	r1, #0
 8015b70:	f000 80ce 	beq.w	8015d10 <rmw_create_publisher+0x1b0>
 8015b74:	4604      	mov	r4, r0
 8015b76:	6800      	ldr	r0, [r0, #0]
 8015b78:	4615      	mov	r5, r2
 8015b7a:	461f      	mov	r7, r3
 8015b7c:	f001 fb20 	bl	80171c0 <is_uxrce_rmw_identifier_valid>
 8015b80:	f080 0001 	eor.w	r0, r0, #1
 8015b84:	b2c0      	uxtb	r0, r0
 8015b86:	2800      	cmp	r0, #0
 8015b88:	f040 80c2 	bne.w	8015d10 <rmw_create_publisher+0x1b0>
 8015b8c:	2d00      	cmp	r5, #0
 8015b8e:	f000 80bf 	beq.w	8015d10 <rmw_create_publisher+0x1b0>
 8015b92:	782b      	ldrb	r3, [r5, #0]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	f000 80bb 	beq.w	8015d10 <rmw_create_publisher+0x1b0>
 8015b9a:	2f00      	cmp	r7, #0
 8015b9c:	f000 80b8 	beq.w	8015d10 <rmw_create_publisher+0x1b0>
 8015ba0:	485e      	ldr	r0, [pc, #376]	@ (8015d1c <rmw_create_publisher+0x1bc>)
 8015ba2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015ba6:	f005 ff13 	bl	801b9d0 <get_memory>
 8015baa:	2800      	cmp	r0, #0
 8015bac:	f000 80b0 	beq.w	8015d10 <rmw_create_publisher+0x1b0>
 8015bb0:	6884      	ldr	r4, [r0, #8]
 8015bb2:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 8015bb6:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8015bba:	f7ff fc4f 	bl	801545c <rmw_get_implementation_identifier>
 8015bbe:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8015bc2:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8015bc6:	4628      	mov	r0, r5
 8015bc8:	f7ea fb94 	bl	80002f4 <strlen>
 8015bcc:	3001      	adds	r0, #1
 8015bce:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 8015bd2:	283c      	cmp	r0, #60	@ 0x3c
 8015bd4:	f200 808f 	bhi.w	8015cf6 <rmw_create_publisher+0x196>
 8015bd8:	462b      	mov	r3, r5
 8015bda:	4a51      	ldr	r2, [pc, #324]	@ (8015d20 <rmw_create_publisher+0x1c0>)
 8015bdc:	213c      	movs	r1, #60	@ 0x3c
 8015bde:	4650      	mov	r0, sl
 8015be0:	f007 f8fa 	bl	801cdd8 <sniprintf>
 8015be4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015be8:	4639      	mov	r1, r7
 8015bea:	2250      	movs	r2, #80	@ 0x50
 8015bec:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8015bee:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8015bf2:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 8015bf6:	f007 fb7c 	bl	801d2f2 <memcpy>
 8015bfa:	7a3b      	ldrb	r3, [r7, #8]
 8015bfc:	4630      	mov	r0, r6
 8015bfe:	4949      	ldr	r1, [pc, #292]	@ (8015d24 <rmw_create_publisher+0x1c4>)
 8015c00:	2b02      	cmp	r3, #2
 8015c02:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015c06:	bf0c      	ite	eq
 8015c08:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8015c0c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 8015c10:	67a3      	str	r3, [r4, #120]	@ 0x78
 8015c12:	2300      	movs	r3, #0
 8015c14:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8015c18:	f7fb f9ac 	bl	8010f74 <get_message_typesupport_handle>
 8015c1c:	2800      	cmp	r0, #0
 8015c1e:	d06a      	beq.n	8015cf6 <rmw_create_publisher+0x196>
 8015c20:	6842      	ldr	r2, [r0, #4]
 8015c22:	61a2      	str	r2, [r4, #24]
 8015c24:	2a00      	cmp	r2, #0
 8015c26:	d066      	beq.n	8015cf6 <rmw_create_publisher+0x196>
 8015c28:	4629      	mov	r1, r5
 8015c2a:	463b      	mov	r3, r7
 8015c2c:	4648      	mov	r0, r9
 8015c2e:	f005 ff1d 	bl	801ba6c <create_topic>
 8015c32:	6260      	str	r0, [r4, #36]	@ 0x24
 8015c34:	2800      	cmp	r0, #0
 8015c36:	d062      	beq.n	8015cfe <rmw_create_publisher+0x19e>
 8015c38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015c3c:	2103      	movs	r1, #3
 8015c3e:	2506      	movs	r5, #6
 8015c40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015c44:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 8015c48:	1c42      	adds	r2, r0, #1
 8015c4a:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 8015c4e:	f002 f8e9 	bl	8017e24 <uxr_object_id>
 8015c52:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8015c56:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015c5a:	6120      	str	r0, [r4, #16]
 8015c5c:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 8015c60:	6910      	ldr	r0, [r2, #16]
 8015c62:	9500      	str	r5, [sp, #0]
 8015c64:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015c68:	6819      	ldr	r1, [r3, #0]
 8015c6a:	6922      	ldr	r2, [r4, #16]
 8015c6c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015c70:	f001 fe92 	bl	8017998 <uxr_buffer_create_publisher_bin>
 8015c74:	4602      	mov	r2, r0
 8015c76:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015c7a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8015c7e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015c82:	f001 f98b 	bl	8016f9c <run_xrce_session>
 8015c86:	b3b0      	cbz	r0, 8015cf6 <rmw_create_publisher+0x196>
 8015c88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015c8c:	2105      	movs	r1, #5
 8015c8e:	f10d 0a10 	add.w	sl, sp, #16
 8015c92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015c96:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8015c9a:	1c42      	adds	r2, r0, #1
 8015c9c:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 8015ca0:	f002 f8c0 	bl	8017e24 <uxr_object_id>
 8015ca4:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8015ca8:	4639      	mov	r1, r7
 8015caa:	6160      	str	r0, [r4, #20]
 8015cac:	691e      	ldr	r6, [r3, #16]
 8015cae:	4650      	mov	r0, sl
 8015cb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015cb4:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8015cb8:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8015cbc:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 8015cc0:	f001 f988 	bl	8016fd4 <convert_qos_profile>
 8015cc4:	9503      	str	r5, [sp, #12]
 8015cc6:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8015cca:	9001      	str	r0, [sp, #4]
 8015ccc:	4630      	mov	r0, r6
 8015cce:	f8ad 1008 	strh.w	r1, [sp, #8]
 8015cd2:	f8db 3010 	ldr.w	r3, [fp, #16]
 8015cd6:	9300      	str	r3, [sp, #0]
 8015cd8:	6839      	ldr	r1, [r7, #0]
 8015cda:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8015cde:	f001 febb 	bl	8017a58 <uxr_buffer_create_datawriter_bin>
 8015ce2:	4602      	mov	r2, r0
 8015ce4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015ce8:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8015cec:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015cf0:	f001 f954 	bl	8016f9c <run_xrce_session>
 8015cf4:	b970      	cbnz	r0, 8015d14 <rmw_create_publisher+0x1b4>
 8015cf6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8015cf8:	b108      	cbz	r0, 8015cfe <rmw_create_publisher+0x19e>
 8015cfa:	f001 f843 	bl	8016d84 <rmw_uxrce_fini_topic_memory>
 8015cfe:	4640      	mov	r0, r8
 8015d00:	f04f 0800 	mov.w	r8, #0
 8015d04:	f000 ffe6 	bl	8016cd4 <rmw_uxrce_fini_publisher_memory>
 8015d08:	4640      	mov	r0, r8
 8015d0a:	b007      	add	sp, #28
 8015d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d10:	f04f 0800 	mov.w	r8, #0
 8015d14:	4640      	mov	r0, r8
 8015d16:	b007      	add	sp, #28
 8015d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d1c:	2406927c 	.word	0x2406927c
 8015d20:	0802024c 	.word	0x0802024c
 8015d24:	0801e38c 	.word	0x0801e38c

08015d28 <rmw_publisher_get_actual_qos>:
 8015d28:	b178      	cbz	r0, 8015d4a <rmw_publisher_get_actual_qos+0x22>
 8015d2a:	b510      	push	{r4, lr}
 8015d2c:	fab1 f481 	clz	r4, r1
 8015d30:	0964      	lsrs	r4, r4, #5
 8015d32:	b141      	cbz	r1, 8015d46 <rmw_publisher_get_actual_qos+0x1e>
 8015d34:	6843      	ldr	r3, [r0, #4]
 8015d36:	2250      	movs	r2, #80	@ 0x50
 8015d38:	4608      	mov	r0, r1
 8015d3a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8015d3e:	f007 fad8 	bl	801d2f2 <memcpy>
 8015d42:	4620      	mov	r0, r4
 8015d44:	bd10      	pop	{r4, pc}
 8015d46:	200b      	movs	r0, #11
 8015d48:	bd10      	pop	{r4, pc}
 8015d4a:	200b      	movs	r0, #11
 8015d4c:	4770      	bx	lr
 8015d4e:	bf00      	nop

08015d50 <rmw_destroy_publisher>:
 8015d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d54:	b128      	cbz	r0, 8015d62 <rmw_destroy_publisher+0x12>
 8015d56:	4604      	mov	r4, r0
 8015d58:	6800      	ldr	r0, [r0, #0]
 8015d5a:	460d      	mov	r5, r1
 8015d5c:	f001 fa30 	bl	80171c0 <is_uxrce_rmw_identifier_valid>
 8015d60:	b918      	cbnz	r0, 8015d6a <rmw_destroy_publisher+0x1a>
 8015d62:	2401      	movs	r4, #1
 8015d64:	4620      	mov	r0, r4
 8015d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d6a:	6863      	ldr	r3, [r4, #4]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d0f8      	beq.n	8015d62 <rmw_destroy_publisher+0x12>
 8015d70:	fab5 f485 	clz	r4, r5
 8015d74:	0964      	lsrs	r4, r4, #5
 8015d76:	2d00      	cmp	r5, #0
 8015d78:	d0f3      	beq.n	8015d62 <rmw_destroy_publisher+0x12>
 8015d7a:	6828      	ldr	r0, [r5, #0]
 8015d7c:	f001 fa20 	bl	80171c0 <is_uxrce_rmw_identifier_valid>
 8015d80:	2800      	cmp	r0, #0
 8015d82:	d0ee      	beq.n	8015d62 <rmw_destroy_publisher+0x12>
 8015d84:	686e      	ldr	r6, [r5, #4]
 8015d86:	2e00      	cmp	r6, #0
 8015d88:	d0eb      	beq.n	8015d62 <rmw_destroy_publisher+0x12>
 8015d8a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8015d8c:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 8015d90:	f005 febc 	bl	801bb0c <destroy_topic>
 8015d94:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8015d98:	6972      	ldr	r2, [r6, #20]
 8015d9a:	6918      	ldr	r0, [r3, #16]
 8015d9c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015da0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015da4:	6819      	ldr	r1, [r3, #0]
 8015da6:	f001 fd43 	bl	8017830 <uxr_buffer_delete_entity>
 8015daa:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8015dae:	4680      	mov	r8, r0
 8015db0:	6932      	ldr	r2, [r6, #16]
 8015db2:	6918      	ldr	r0, [r3, #16]
 8015db4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015db8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015dbc:	6819      	ldr	r1, [r3, #0]
 8015dbe:	f001 fd37 	bl	8017830 <uxr_buffer_delete_entity>
 8015dc2:	4606      	mov	r6, r0
 8015dc4:	6938      	ldr	r0, [r7, #16]
 8015dc6:	4642      	mov	r2, r8
 8015dc8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015dcc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015dd0:	f001 f8e4 	bl	8016f9c <run_xrce_session>
 8015dd4:	693f      	ldr	r7, [r7, #16]
 8015dd6:	4632      	mov	r2, r6
 8015dd8:	4606      	mov	r6, r0
 8015dda:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8015dde:	4638      	mov	r0, r7
 8015de0:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8015de4:	f001 f8da 	bl	8016f9c <run_xrce_session>
 8015de8:	b126      	cbz	r6, 8015df4 <rmw_destroy_publisher+0xa4>
 8015dea:	b118      	cbz	r0, 8015df4 <rmw_destroy_publisher+0xa4>
 8015dec:	4628      	mov	r0, r5
 8015dee:	f000 ff71 	bl	8016cd4 <rmw_uxrce_fini_publisher_memory>
 8015df2:	e7b7      	b.n	8015d64 <rmw_destroy_publisher+0x14>
 8015df4:	2402      	movs	r4, #2
 8015df6:	e7f9      	b.n	8015dec <rmw_destroy_publisher+0x9c>

08015df8 <rmw_send_request>:
 8015df8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015dfc:	4604      	mov	r4, r0
 8015dfe:	6800      	ldr	r0, [r0, #0]
 8015e00:	b08b      	sub	sp, #44	@ 0x2c
 8015e02:	460e      	mov	r6, r1
 8015e04:	4615      	mov	r5, r2
 8015e06:	b128      	cbz	r0, 8015e14 <rmw_send_request+0x1c>
 8015e08:	4b21      	ldr	r3, [pc, #132]	@ (8015e90 <rmw_send_request+0x98>)
 8015e0a:	6819      	ldr	r1, [r3, #0]
 8015e0c:	f7ea fa68 	bl	80002e0 <strcmp>
 8015e10:	2800      	cmp	r0, #0
 8015e12:	d139      	bne.n	8015e88 <rmw_send_request+0x90>
 8015e14:	6864      	ldr	r4, [r4, #4]
 8015e16:	2700      	movs	r7, #0
 8015e18:	6963      	ldr	r3, [r4, #20]
 8015e1a:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8015e1e:	689b      	ldr	r3, [r3, #8]
 8015e20:	4798      	blx	r3
 8015e22:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8015e26:	4630      	mov	r0, r6
 8015e28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015e2c:	4798      	blx	r3
 8015e2e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015e32:	9000      	str	r0, [sp, #0]
 8015e34:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8015e38:	6922      	ldr	r2, [r4, #16]
 8015e3a:	ab02      	add	r3, sp, #8
 8015e3c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8015e3e:	f004 f81b 	bl	8019e78 <uxr_prepare_output_stream>
 8015e42:	e9c5 0700 	strd	r0, r7, [r5]
 8015e46:	b198      	cbz	r0, 8015e70 <rmw_send_request+0x78>
 8015e48:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015e4c:	a902      	add	r1, sp, #8
 8015e4e:	4630      	mov	r0, r6
 8015e50:	4798      	blx	r3
 8015e52:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8015e56:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8015e5a:	2b01      	cmp	r3, #1
 8015e5c:	d00c      	beq.n	8015e78 <rmw_send_request+0x80>
 8015e5e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8015e60:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015e64:	f002 fe18 	bl	8018a98 <uxr_run_session_until_confirm_delivery>
 8015e68:	4638      	mov	r0, r7
 8015e6a:	b00b      	add	sp, #44	@ 0x2c
 8015e6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e70:	2001      	movs	r0, #1
 8015e72:	b00b      	add	sp, #44	@ 0x2c
 8015e74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e78:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015e7c:	f002 fa52 	bl	8018324 <uxr_flash_output_streams>
 8015e80:	4638      	mov	r0, r7
 8015e82:	b00b      	add	sp, #44	@ 0x2c
 8015e84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e88:	200c      	movs	r0, #12
 8015e8a:	b00b      	add	sp, #44	@ 0x2c
 8015e8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e90:	08020578 	.word	0x08020578

08015e94 <rmw_take_request>:
 8015e94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015e98:	4605      	mov	r5, r0
 8015e9a:	6800      	ldr	r0, [r0, #0]
 8015e9c:	b089      	sub	sp, #36	@ 0x24
 8015e9e:	460c      	mov	r4, r1
 8015ea0:	4690      	mov	r8, r2
 8015ea2:	461e      	mov	r6, r3
 8015ea4:	b128      	cbz	r0, 8015eb2 <rmw_take_request+0x1e>
 8015ea6:	4b28      	ldr	r3, [pc, #160]	@ (8015f48 <rmw_take_request+0xb4>)
 8015ea8:	6819      	ldr	r1, [r3, #0]
 8015eaa:	f7ea fa19 	bl	80002e0 <strcmp>
 8015eae:	2800      	cmp	r0, #0
 8015eb0:	d146      	bne.n	8015f40 <rmw_take_request+0xac>
 8015eb2:	b10e      	cbz	r6, 8015eb8 <rmw_take_request+0x24>
 8015eb4:	2300      	movs	r3, #0
 8015eb6:	7033      	strb	r3, [r6, #0]
 8015eb8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8015ebc:	f000 fff0 	bl	8016ea0 <rmw_uxrce_clean_expired_static_input_buffer>
 8015ec0:	4648      	mov	r0, r9
 8015ec2:	f000 ffc5 	bl	8016e50 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015ec6:	4607      	mov	r7, r0
 8015ec8:	b3b0      	cbz	r0, 8015f38 <rmw_take_request+0xa4>
 8015eca:	6885      	ldr	r5, [r0, #8]
 8015ecc:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 8015ed0:	f8d5 383c 	ldr.w	r3, [r5, #2108]	@ 0x83c
 8015ed4:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8015ed8:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8015edc:	7423      	strb	r3, [r4, #16]
 8015ede:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	@ 0x834
 8015ee2:	f895 3836 	ldrb.w	r3, [r5, #2102]	@ 0x836
 8015ee6:	f8a4 2011 	strh.w	r2, [r4, #17]
 8015eea:	74e3      	strb	r3, [r4, #19]
 8015eec:	f8d5 1828 	ldr.w	r1, [r5, #2088]	@ 0x828
 8015ef0:	f8d5 282c 	ldr.w	r2, [r5, #2092]	@ 0x82c
 8015ef4:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 8015ef8:	6161      	str	r1, [r4, #20]
 8015efa:	61a2      	str	r2, [r4, #24]
 8015efc:	61e3      	str	r3, [r4, #28]
 8015efe:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015f02:	689b      	ldr	r3, [r3, #8]
 8015f04:	4798      	blx	r3
 8015f06:	6844      	ldr	r4, [r0, #4]
 8015f08:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8015f0c:	f105 0110 	add.w	r1, r5, #16
 8015f10:	4668      	mov	r0, sp
 8015f12:	f7f9 ff27 	bl	800fd64 <ucdr_init_buffer>
 8015f16:	4641      	mov	r1, r8
 8015f18:	68e3      	ldr	r3, [r4, #12]
 8015f1a:	4668      	mov	r0, sp
 8015f1c:	4798      	blx	r3
 8015f1e:	4639      	mov	r1, r7
 8015f20:	4604      	mov	r4, r0
 8015f22:	480a      	ldr	r0, [pc, #40]	@ (8015f4c <rmw_take_request+0xb8>)
 8015f24:	f005 fd64 	bl	801b9f0 <put_memory>
 8015f28:	b106      	cbz	r6, 8015f2c <rmw_take_request+0x98>
 8015f2a:	7034      	strb	r4, [r6, #0]
 8015f2c:	f084 0001 	eor.w	r0, r4, #1
 8015f30:	b2c0      	uxtb	r0, r0
 8015f32:	b009      	add	sp, #36	@ 0x24
 8015f34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f38:	2001      	movs	r0, #1
 8015f3a:	b009      	add	sp, #36	@ 0x24
 8015f3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f40:	200c      	movs	r0, #12
 8015f42:	b009      	add	sp, #36	@ 0x24
 8015f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f48:	08020578 	.word	0x08020578
 8015f4c:	240692ac 	.word	0x240692ac

08015f50 <rmw_send_response>:
 8015f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f52:	4605      	mov	r5, r0
 8015f54:	6800      	ldr	r0, [r0, #0]
 8015f56:	b091      	sub	sp, #68	@ 0x44
 8015f58:	460c      	mov	r4, r1
 8015f5a:	4616      	mov	r6, r2
 8015f5c:	b128      	cbz	r0, 8015f6a <rmw_send_response+0x1a>
 8015f5e:	4b29      	ldr	r3, [pc, #164]	@ (8016004 <rmw_send_response+0xb4>)
 8015f60:	6819      	ldr	r1, [r3, #0]
 8015f62:	f7ea f9bd 	bl	80002e0 <strcmp>
 8015f66:	2800      	cmp	r0, #0
 8015f68:	d141      	bne.n	8015fee <rmw_send_response+0x9e>
 8015f6a:	686d      	ldr	r5, [r5, #4]
 8015f6c:	68a1      	ldr	r1, [r4, #8]
 8015f6e:	6860      	ldr	r0, [r4, #4]
 8015f70:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8015f72:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8015f76:	9307      	str	r3, [sp, #28]
 8015f78:	4623      	mov	r3, r4
 8015f7a:	9206      	str	r2, [sp, #24]
 8015f7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f80:	789b      	ldrb	r3, [r3, #2]
 8015f82:	f88d 2017 	strb.w	r2, [sp, #23]
 8015f86:	f88d 3016 	strb.w	r3, [sp, #22]
 8015f8a:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8015f8e:	68e2      	ldr	r2, [r4, #12]
 8015f90:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015f94:	ab02      	add	r3, sp, #8
 8015f96:	696c      	ldr	r4, [r5, #20]
 8015f98:	c307      	stmia	r3!, {r0, r1, r2}
 8015f9a:	68e3      	ldr	r3, [r4, #12]
 8015f9c:	4798      	blx	r3
 8015f9e:	6844      	ldr	r4, [r0, #4]
 8015fa0:	4630      	mov	r0, r6
 8015fa2:	6923      	ldr	r3, [r4, #16]
 8015fa4:	4798      	blx	r3
 8015fa6:	f100 0318 	add.w	r3, r0, #24
 8015faa:	6938      	ldr	r0, [r7, #16]
 8015fac:	9300      	str	r3, [sp, #0]
 8015fae:	ab08      	add	r3, sp, #32
 8015fb0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015fb4:	692a      	ldr	r2, [r5, #16]
 8015fb6:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8015fb8:	f003 ff5e 	bl	8019e78 <uxr_prepare_output_stream>
 8015fbc:	b910      	cbnz	r0, 8015fc4 <rmw_send_response+0x74>
 8015fbe:	2001      	movs	r0, #1
 8015fc0:	b011      	add	sp, #68	@ 0x44
 8015fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015fc4:	a902      	add	r1, sp, #8
 8015fc6:	a808      	add	r0, sp, #32
 8015fc8:	f004 fff8 	bl	801afbc <uxr_serialize_SampleIdentity>
 8015fcc:	68a3      	ldr	r3, [r4, #8]
 8015fce:	a908      	add	r1, sp, #32
 8015fd0:	4630      	mov	r0, r6
 8015fd2:	4798      	blx	r3
 8015fd4:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8015fd8:	6938      	ldr	r0, [r7, #16]
 8015fda:	2b01      	cmp	r3, #1
 8015fdc:	d00a      	beq.n	8015ff4 <rmw_send_response+0xa4>
 8015fde:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8015fe0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015fe4:	f002 fd58 	bl	8018a98 <uxr_run_session_until_confirm_delivery>
 8015fe8:	2000      	movs	r0, #0
 8015fea:	b011      	add	sp, #68	@ 0x44
 8015fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015fee:	200c      	movs	r0, #12
 8015ff0:	b011      	add	sp, #68	@ 0x44
 8015ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ff4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015ff8:	f002 f994 	bl	8018324 <uxr_flash_output_streams>
 8015ffc:	2000      	movs	r0, #0
 8015ffe:	b011      	add	sp, #68	@ 0x44
 8016000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016002:	bf00      	nop
 8016004:	08020578 	.word	0x08020578

08016008 <rmw_take_response>:
 8016008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801600c:	4604      	mov	r4, r0
 801600e:	6800      	ldr	r0, [r0, #0]
 8016010:	b088      	sub	sp, #32
 8016012:	460f      	mov	r7, r1
 8016014:	4690      	mov	r8, r2
 8016016:	461d      	mov	r5, r3
 8016018:	b120      	cbz	r0, 8016024 <rmw_take_response+0x1c>
 801601a:	4b1d      	ldr	r3, [pc, #116]	@ (8016090 <rmw_take_response+0x88>)
 801601c:	6819      	ldr	r1, [r3, #0]
 801601e:	f7ea f95f 	bl	80002e0 <strcmp>
 8016022:	bb68      	cbnz	r0, 8016080 <rmw_take_response+0x78>
 8016024:	b10d      	cbz	r5, 801602a <rmw_take_response+0x22>
 8016026:	2300      	movs	r3, #0
 8016028:	702b      	strb	r3, [r5, #0]
 801602a:	6864      	ldr	r4, [r4, #4]
 801602c:	f000 ff38 	bl	8016ea0 <rmw_uxrce_clean_expired_static_input_buffer>
 8016030:	4620      	mov	r0, r4
 8016032:	f000 ff0d 	bl	8016e50 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016036:	4606      	mov	r6, r0
 8016038:	b330      	cbz	r0, 8016088 <rmw_take_response+0x80>
 801603a:	6963      	ldr	r3, [r4, #20]
 801603c:	6884      	ldr	r4, [r0, #8]
 801603e:	68db      	ldr	r3, [r3, #12]
 8016040:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8016044:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8016048:	e9c7 0108 	strd	r0, r1, [r7, #32]
 801604c:	4798      	blx	r3
 801604e:	6847      	ldr	r7, [r0, #4]
 8016050:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8016054:	f104 0110 	add.w	r1, r4, #16
 8016058:	4668      	mov	r0, sp
 801605a:	f7f9 fe83 	bl	800fd64 <ucdr_init_buffer>
 801605e:	4641      	mov	r1, r8
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	4668      	mov	r0, sp
 8016064:	4798      	blx	r3
 8016066:	4631      	mov	r1, r6
 8016068:	4604      	mov	r4, r0
 801606a:	480a      	ldr	r0, [pc, #40]	@ (8016094 <rmw_take_response+0x8c>)
 801606c:	f005 fcc0 	bl	801b9f0 <put_memory>
 8016070:	b105      	cbz	r5, 8016074 <rmw_take_response+0x6c>
 8016072:	702c      	strb	r4, [r5, #0]
 8016074:	f084 0001 	eor.w	r0, r4, #1
 8016078:	b2c0      	uxtb	r0, r0
 801607a:	b008      	add	sp, #32
 801607c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016080:	200c      	movs	r0, #12
 8016082:	b008      	add	sp, #32
 8016084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016088:	2001      	movs	r0, #1
 801608a:	b008      	add	sp, #32
 801608c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016090:	08020578 	.word	0x08020578
 8016094:	240692ac 	.word	0x240692ac

08016098 <rmw_create_service>:
 8016098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801609c:	b091      	sub	sp, #68	@ 0x44
 801609e:	2900      	cmp	r1, #0
 80160a0:	f000 80bb 	beq.w	801621a <rmw_create_service+0x182>
 80160a4:	4606      	mov	r6, r0
 80160a6:	2800      	cmp	r0, #0
 80160a8:	f000 80b7 	beq.w	801621a <rmw_create_service+0x182>
 80160ac:	4614      	mov	r4, r2
 80160ae:	6800      	ldr	r0, [r0, #0]
 80160b0:	4689      	mov	r9, r1
 80160b2:	461d      	mov	r5, r3
 80160b4:	f001 f884 	bl	80171c0 <is_uxrce_rmw_identifier_valid>
 80160b8:	2c00      	cmp	r4, #0
 80160ba:	f000 80ae 	beq.w	801621a <rmw_create_service+0x182>
 80160be:	f080 0001 	eor.w	r0, r0, #1
 80160c2:	b2c0      	uxtb	r0, r0
 80160c4:	2800      	cmp	r0, #0
 80160c6:	f040 80a8 	bne.w	801621a <rmw_create_service+0x182>
 80160ca:	7823      	ldrb	r3, [r4, #0]
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	f000 80a4 	beq.w	801621a <rmw_create_service+0x182>
 80160d2:	2d00      	cmp	r5, #0
 80160d4:	f000 80a1 	beq.w	801621a <rmw_create_service+0x182>
 80160d8:	4856      	ldr	r0, [pc, #344]	@ (8016234 <rmw_create_service+0x19c>)
 80160da:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80160de:	f005 fc77 	bl	801b9d0 <get_memory>
 80160e2:	4606      	mov	r6, r0
 80160e4:	2800      	cmp	r0, #0
 80160e6:	f000 8099 	beq.w	801621c <rmw_create_service+0x184>
 80160ea:	6887      	ldr	r7, [r0, #8]
 80160ec:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 80160f0:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 80160f4:	f7ff f9b2 	bl	801545c <rmw_get_implementation_identifier>
 80160f8:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80160fa:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 80160fe:	4620      	mov	r0, r4
 8016100:	f7ea f8f8 	bl	80002f4 <strlen>
 8016104:	1c42      	adds	r2, r0, #1
 8016106:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 801610a:	2a3c      	cmp	r2, #60	@ 0x3c
 801610c:	f200 808a 	bhi.w	8016224 <rmw_create_service+0x18c>
 8016110:	4621      	mov	r1, r4
 8016112:	4650      	mov	r0, sl
 8016114:	f007 f8ed 	bl	801d2f2 <memcpy>
 8016118:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801611c:	4629      	mov	r1, r5
 801611e:	2250      	movs	r2, #80	@ 0x50
 8016120:	f107 0020 	add.w	r0, r7, #32
 8016124:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 8016128:	677b      	str	r3, [r7, #116]	@ 0x74
 801612a:	f007 f8e2 	bl	801d2f2 <memcpy>
 801612e:	4648      	mov	r0, r9
 8016130:	4941      	ldr	r1, [pc, #260]	@ (8016238 <rmw_create_service+0x1a0>)
 8016132:	f7fa ff2b 	bl	8010f8c <get_service_typesupport_handle>
 8016136:	2800      	cmp	r0, #0
 8016138:	d074      	beq.n	8016224 <rmw_create_service+0x18c>
 801613a:	6843      	ldr	r3, [r0, #4]
 801613c:	617b      	str	r3, [r7, #20]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d070      	beq.n	8016224 <rmw_create_service+0x18c>
 8016142:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016146:	2108      	movs	r1, #8
 8016148:	f8df a0f4 	ldr.w	sl, [pc, #244]	@ 8016240 <rmw_create_service+0x1a8>
 801614c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016150:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8016244 <rmw_create_service+0x1ac>
 8016154:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 8016158:	1c42      	adds	r2, r0, #1
 801615a:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 801615e:	f001 fe61 	bl	8017e24 <uxr_object_id>
 8016162:	2364      	movs	r3, #100	@ 0x64
 8016164:	6138      	str	r0, [r7, #16]
 8016166:	4652      	mov	r2, sl
 8016168:	4649      	mov	r1, r9
 801616a:	6978      	ldr	r0, [r7, #20]
 801616c:	f000 ff7c 	bl	8017068 <generate_service_types>
 8016170:	2800      	cmp	r0, #0
 8016172:	d057      	beq.n	8016224 <rmw_create_service+0x18c>
 8016174:	f8df b0d0 	ldr.w	fp, [pc, #208]	@ 8016248 <rmw_create_service+0x1b0>
 8016178:	233c      	movs	r3, #60	@ 0x3c
 801617a:	4a30      	ldr	r2, [pc, #192]	@ (801623c <rmw_create_service+0x1a4>)
 801617c:	4620      	mov	r0, r4
 801617e:	4659      	mov	r1, fp
 8016180:	f000 ff40 	bl	8017004 <generate_service_topics>
 8016184:	2800      	cmp	r0, #0
 8016186:	d04d      	beq.n	8016224 <rmw_create_service+0x18c>
 8016188:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801618c:	a80c      	add	r0, sp, #48	@ 0x30
 801618e:	4629      	mov	r1, r5
 8016190:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8016194:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016198:	f000 ff1c 	bl	8016fd4 <convert_qos_profile>
 801619c:	4a27      	ldr	r2, [pc, #156]	@ (801623c <rmw_create_service+0x1a4>)
 801619e:	a80c      	add	r0, sp, #48	@ 0x30
 80161a0:	9400      	str	r4, [sp, #0]
 80161a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80161a4:	e9cd b203 	strd	fp, r2, [sp, #12]
 80161a8:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 80161ac:	c803      	ldmia	r0, {r0, r1}
 80161ae:	9a08      	ldr	r2, [sp, #32]
 80161b0:	9005      	str	r0, [sp, #20]
 80161b2:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80161b6:	2306      	movs	r3, #6
 80161b8:	f8ad 1018 	strh.w	r1, [sp, #24]
 80161bc:	9307      	str	r3, [sp, #28]
 80161be:	6811      	ldr	r1, [r2, #0]
 80161c0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80161c4:	693a      	ldr	r2, [r7, #16]
 80161c6:	f001 fd35 	bl	8017c34 <uxr_buffer_create_replier_bin>
 80161ca:	4602      	mov	r2, r0
 80161cc:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80161d0:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80161d4:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80161d8:	f000 fee0 	bl	8016f9c <run_xrce_session>
 80161dc:	b310      	cbz	r0, 8016224 <rmw_create_service+0x18c>
 80161de:	7a2b      	ldrb	r3, [r5, #8]
 80161e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80161e4:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80161e8:	2b02      	cmp	r3, #2
 80161ea:	920e      	str	r2, [sp, #56]	@ 0x38
 80161ec:	f04f 0200 	mov.w	r2, #0
 80161f0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80161f2:	bf0c      	ite	eq
 80161f4:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 80161f8:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 80161fc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016200:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016202:	ab0e      	add	r3, sp, #56	@ 0x38
 8016204:	673a      	str	r2, [r7, #112]	@ 0x70
 8016206:	f8d0 20e4 	ldr.w	r2, [r0, #228]	@ 0xe4
 801620a:	9300      	str	r3, [sp, #0]
 801620c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801620e:	6811      	ldr	r1, [r2, #0]
 8016210:	693a      	ldr	r2, [r7, #16]
 8016212:	f001 fe37 	bl	8017e84 <uxr_buffer_request_data>
 8016216:	8338      	strh	r0, [r7, #24]
 8016218:	e000      	b.n	801621c <rmw_create_service+0x184>
 801621a:	2600      	movs	r6, #0
 801621c:	4630      	mov	r0, r6
 801621e:	b011      	add	sp, #68	@ 0x44
 8016220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016224:	4630      	mov	r0, r6
 8016226:	2600      	movs	r6, #0
 8016228:	f000 fd80 	bl	8016d2c <rmw_uxrce_fini_service_memory>
 801622c:	4630      	mov	r0, r6
 801622e:	b011      	add	sp, #68	@ 0x44
 8016230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016234:	2406928c 	.word	0x2406928c
 8016238:	0801e38c 	.word	0x0801e38c
 801623c:	24064900 	.word	0x24064900
 8016240:	2406493c 	.word	0x2406493c
 8016244:	2406489c 	.word	0x2406489c
 8016248:	24064860 	.word	0x24064860

0801624c <rmw_destroy_service>:
 801624c:	b570      	push	{r4, r5, r6, lr}
 801624e:	b128      	cbz	r0, 801625c <rmw_destroy_service+0x10>
 8016250:	4604      	mov	r4, r0
 8016252:	6800      	ldr	r0, [r0, #0]
 8016254:	460d      	mov	r5, r1
 8016256:	f000 ffb3 	bl	80171c0 <is_uxrce_rmw_identifier_valid>
 801625a:	b910      	cbnz	r0, 8016262 <rmw_destroy_service+0x16>
 801625c:	2401      	movs	r4, #1
 801625e:	4620      	mov	r0, r4
 8016260:	bd70      	pop	{r4, r5, r6, pc}
 8016262:	6863      	ldr	r3, [r4, #4]
 8016264:	2b00      	cmp	r3, #0
 8016266:	d0f9      	beq.n	801625c <rmw_destroy_service+0x10>
 8016268:	2d00      	cmp	r5, #0
 801626a:	d0f7      	beq.n	801625c <rmw_destroy_service+0x10>
 801626c:	6828      	ldr	r0, [r5, #0]
 801626e:	f000 ffa7 	bl	80171c0 <is_uxrce_rmw_identifier_valid>
 8016272:	2800      	cmp	r0, #0
 8016274:	d0f2      	beq.n	801625c <rmw_destroy_service+0x10>
 8016276:	686e      	ldr	r6, [r5, #4]
 8016278:	2e00      	cmp	r6, #0
 801627a:	d0ef      	beq.n	801625c <rmw_destroy_service+0x10>
 801627c:	6864      	ldr	r4, [r4, #4]
 801627e:	6932      	ldr	r2, [r6, #16]
 8016280:	6920      	ldr	r0, [r4, #16]
 8016282:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016286:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801628a:	6819      	ldr	r1, [r3, #0]
 801628c:	f001 fe34 	bl	8017ef8 <uxr_buffer_cancel_data>
 8016290:	4602      	mov	r2, r0
 8016292:	6920      	ldr	r0, [r4, #16]
 8016294:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016298:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801629c:	f000 fe7e 	bl	8016f9c <run_xrce_session>
 80162a0:	6920      	ldr	r0, [r4, #16]
 80162a2:	6932      	ldr	r2, [r6, #16]
 80162a4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80162a8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80162ac:	6819      	ldr	r1, [r3, #0]
 80162ae:	f001 fabf 	bl	8017830 <uxr_buffer_delete_entity>
 80162b2:	4602      	mov	r2, r0
 80162b4:	6920      	ldr	r0, [r4, #16]
 80162b6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80162ba:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80162be:	f000 fe6d 	bl	8016f9c <run_xrce_session>
 80162c2:	4603      	mov	r3, r0
 80162c4:	4628      	mov	r0, r5
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	bf14      	ite	ne
 80162ca:	2400      	movne	r4, #0
 80162cc:	2402      	moveq	r4, #2
 80162ce:	f000 fd2d 	bl	8016d2c <rmw_uxrce_fini_service_memory>
 80162d2:	e7c4      	b.n	801625e <rmw_destroy_service+0x12>

080162d4 <rmw_service_response_publisher_get_actual_qos>:
 80162d4:	b181      	cbz	r1, 80162f8 <rmw_service_response_publisher_get_actual_qos+0x24>
 80162d6:	4603      	mov	r3, r0
 80162d8:	b510      	push	{r4, lr}
 80162da:	fab0 f480 	clz	r4, r0
 80162de:	0964      	lsrs	r4, r4, #5
 80162e0:	b140      	cbz	r0, 80162f4 <rmw_service_response_publisher_get_actual_qos+0x20>
 80162e2:	685b      	ldr	r3, [r3, #4]
 80162e4:	4608      	mov	r0, r1
 80162e6:	2250      	movs	r2, #80	@ 0x50
 80162e8:	f103 0120 	add.w	r1, r3, #32
 80162ec:	f007 f801 	bl	801d2f2 <memcpy>
 80162f0:	4620      	mov	r0, r4
 80162f2:	bd10      	pop	{r4, pc}
 80162f4:	200b      	movs	r0, #11
 80162f6:	bd10      	pop	{r4, pc}
 80162f8:	200b      	movs	r0, #11
 80162fa:	4770      	bx	lr

080162fc <rmw_service_request_subscription_get_actual_qos>:
 80162fc:	b178      	cbz	r0, 801631e <rmw_service_request_subscription_get_actual_qos+0x22>
 80162fe:	b510      	push	{r4, lr}
 8016300:	fab1 f481 	clz	r4, r1
 8016304:	0964      	lsrs	r4, r4, #5
 8016306:	b141      	cbz	r1, 801631a <rmw_service_request_subscription_get_actual_qos+0x1e>
 8016308:	6843      	ldr	r3, [r0, #4]
 801630a:	2250      	movs	r2, #80	@ 0x50
 801630c:	4608      	mov	r0, r1
 801630e:	f103 0120 	add.w	r1, r3, #32
 8016312:	f006 ffee 	bl	801d2f2 <memcpy>
 8016316:	4620      	mov	r0, r4
 8016318:	bd10      	pop	{r4, pc}
 801631a:	200b      	movs	r0, #11
 801631c:	bd10      	pop	{r4, pc}
 801631e:	200b      	movs	r0, #11
 8016320:	4770      	bx	lr
 8016322:	bf00      	nop

08016324 <rmw_create_subscription>:
 8016324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016328:	b08d      	sub	sp, #52	@ 0x34
 801632a:	2900      	cmp	r1, #0
 801632c:	f000 80d8 	beq.w	80164e0 <rmw_create_subscription+0x1bc>
 8016330:	4604      	mov	r4, r0
 8016332:	2800      	cmp	r0, #0
 8016334:	f000 80d4 	beq.w	80164e0 <rmw_create_subscription+0x1bc>
 8016338:	6800      	ldr	r0, [r0, #0]
 801633a:	460e      	mov	r6, r1
 801633c:	4615      	mov	r5, r2
 801633e:	461f      	mov	r7, r3
 8016340:	f000 ff3e 	bl	80171c0 <is_uxrce_rmw_identifier_valid>
 8016344:	f080 0001 	eor.w	r0, r0, #1
 8016348:	b2c0      	uxtb	r0, r0
 801634a:	2800      	cmp	r0, #0
 801634c:	f040 80c8 	bne.w	80164e0 <rmw_create_subscription+0x1bc>
 8016350:	2d00      	cmp	r5, #0
 8016352:	f000 80c5 	beq.w	80164e0 <rmw_create_subscription+0x1bc>
 8016356:	782b      	ldrb	r3, [r5, #0]
 8016358:	2b00      	cmp	r3, #0
 801635a:	f000 80c1 	beq.w	80164e0 <rmw_create_subscription+0x1bc>
 801635e:	2f00      	cmp	r7, #0
 8016360:	f000 80be 	beq.w	80164e0 <rmw_create_subscription+0x1bc>
 8016364:	4867      	ldr	r0, [pc, #412]	@ (8016504 <rmw_create_subscription+0x1e0>)
 8016366:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801636a:	f005 fb31 	bl	801b9d0 <get_memory>
 801636e:	4604      	mov	r4, r0
 8016370:	2800      	cmp	r0, #0
 8016372:	f000 80b6 	beq.w	80164e2 <rmw_create_subscription+0x1be>
 8016376:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801637a:	f108 0a98 	add.w	sl, r8, #152	@ 0x98
 801637e:	f8c8 8080 	str.w	r8, [r8, #128]	@ 0x80
 8016382:	f7ff f86b 	bl	801545c <rmw_get_implementation_identifier>
 8016386:	f8c8 007c 	str.w	r0, [r8, #124]	@ 0x7c
 801638a:	f8c8 a084 	str.w	sl, [r8, #132]	@ 0x84
 801638e:	4628      	mov	r0, r5
 8016390:	f7e9 ffb0 	bl	80002f4 <strlen>
 8016394:	3001      	adds	r0, #1
 8016396:	f108 047c 	add.w	r4, r8, #124	@ 0x7c
 801639a:	283c      	cmp	r0, #60	@ 0x3c
 801639c:	f200 80a5 	bhi.w	80164ea <rmw_create_subscription+0x1c6>
 80163a0:	462b      	mov	r3, r5
 80163a2:	4a59      	ldr	r2, [pc, #356]	@ (8016508 <rmw_create_subscription+0x1e4>)
 80163a4:	213c      	movs	r1, #60	@ 0x3c
 80163a6:	4650      	mov	r0, sl
 80163a8:	f006 fd16 	bl	801cdd8 <sniprintf>
 80163ac:	4639      	mov	r1, r7
 80163ae:	2250      	movs	r2, #80	@ 0x50
 80163b0:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 80163b4:	f8c8 9020 	str.w	r9, [r8, #32]
 80163b8:	f006 ff9b 	bl	801d2f2 <memcpy>
 80163bc:	4630      	mov	r0, r6
 80163be:	4953      	ldr	r1, [pc, #332]	@ (801650c <rmw_create_subscription+0x1e8>)
 80163c0:	f7fa fdd8 	bl	8010f74 <get_message_typesupport_handle>
 80163c4:	2800      	cmp	r0, #0
 80163c6:	f000 8090 	beq.w	80164ea <rmw_create_subscription+0x1c6>
 80163ca:	6842      	ldr	r2, [r0, #4]
 80163cc:	f8c8 2018 	str.w	r2, [r8, #24]
 80163d0:	2a00      	cmp	r2, #0
 80163d2:	f000 808a 	beq.w	80164ea <rmw_create_subscription+0x1c6>
 80163d6:	4629      	mov	r1, r5
 80163d8:	463b      	mov	r3, r7
 80163da:	4648      	mov	r0, r9
 80163dc:	f005 fb46 	bl	801ba6c <create_topic>
 80163e0:	f8c8 001c 	str.w	r0, [r8, #28]
 80163e4:	2800      	cmp	r0, #0
 80163e6:	f000 8085 	beq.w	80164f4 <rmw_create_subscription+0x1d0>
 80163ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80163ee:	2104      	movs	r1, #4
 80163f0:	2506      	movs	r5, #6
 80163f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80163f6:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 80163fa:	1c42      	adds	r2, r0, #1
 80163fc:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8016400:	f001 fd10 	bl	8017e24 <uxr_object_id>
 8016404:	f8c8 0010 	str.w	r0, [r8, #16]
 8016408:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801640c:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8016410:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016414:	9500      	str	r5, [sp, #0]
 8016416:	6819      	ldr	r1, [r3, #0]
 8016418:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801641c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016420:	f001 faea 	bl	80179f8 <uxr_buffer_create_subscriber_bin>
 8016424:	4602      	mov	r2, r0
 8016426:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801642a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801642e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016432:	f000 fdb3 	bl	8016f9c <run_xrce_session>
 8016436:	2800      	cmp	r0, #0
 8016438:	d057      	beq.n	80164ea <rmw_create_subscription+0x1c6>
 801643a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801643e:	4629      	mov	r1, r5
 8016440:	ae08      	add	r6, sp, #32
 8016442:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016446:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 801644a:	1c42      	adds	r2, r0, #1
 801644c:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8016450:	f001 fce8 	bl	8017e24 <uxr_object_id>
 8016454:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016458:	f8d8 301c 	ldr.w	r3, [r8, #28]
 801645c:	4639      	mov	r1, r7
 801645e:	f8c8 0014 	str.w	r0, [r8, #20]
 8016462:	4630      	mov	r0, r6
 8016464:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8016468:	9305      	str	r3, [sp, #20]
 801646a:	f000 fdb3 	bl	8016fd4 <convert_qos_profile>
 801646e:	9503      	str	r5, [sp, #12]
 8016470:	9b05      	ldr	r3, [sp, #20]
 8016472:	e896 0003 	ldmia.w	r6, {r0, r1}
 8016476:	9001      	str	r0, [sp, #4]
 8016478:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 801647c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8016480:	691b      	ldr	r3, [r3, #16]
 8016482:	9300      	str	r3, [sp, #0]
 8016484:	f8db 1000 	ldr.w	r1, [fp]
 8016488:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 801648c:	f001 fb5a 	bl	8017b44 <uxr_buffer_create_datareader_bin>
 8016490:	4602      	mov	r2, r0
 8016492:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016496:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801649a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801649e:	f000 fd7d 	bl	8016f9c <run_xrce_session>
 80164a2:	b310      	cbz	r0, 80164ea <rmw_create_subscription+0x1c6>
 80164a4:	7a3b      	ldrb	r3, [r7, #8]
 80164a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80164aa:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80164ae:	2b02      	cmp	r3, #2
 80164b0:	920a      	str	r2, [sp, #40]	@ 0x28
 80164b2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80164b6:	f04f 0200 	mov.w	r2, #0
 80164ba:	bf08      	it	eq
 80164bc:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 80164c0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80164c4:	bf18      	it	ne
 80164c6:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	@ 0xd4
 80164ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 80164cc:	9307      	str	r3, [sp, #28]
 80164ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80164d0:	9300      	str	r3, [sp, #0]
 80164d2:	9b07      	ldr	r3, [sp, #28]
 80164d4:	f8d8 2014 	ldr.w	r2, [r8, #20]
 80164d8:	6809      	ldr	r1, [r1, #0]
 80164da:	f001 fcd3 	bl	8017e84 <uxr_buffer_request_data>
 80164de:	e000      	b.n	80164e2 <rmw_create_subscription+0x1be>
 80164e0:	2400      	movs	r4, #0
 80164e2:	4620      	mov	r0, r4
 80164e4:	b00d      	add	sp, #52	@ 0x34
 80164e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164ea:	f8d8 001c 	ldr.w	r0, [r8, #28]
 80164ee:	b108      	cbz	r0, 80164f4 <rmw_create_subscription+0x1d0>
 80164f0:	f000 fc48 	bl	8016d84 <rmw_uxrce_fini_topic_memory>
 80164f4:	4620      	mov	r0, r4
 80164f6:	2400      	movs	r4, #0
 80164f8:	f000 fc02 	bl	8016d00 <rmw_uxrce_fini_subscription_memory>
 80164fc:	4620      	mov	r0, r4
 80164fe:	b00d      	add	sp, #52	@ 0x34
 8016500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016504:	240692bc 	.word	0x240692bc
 8016508:	0802024c 	.word	0x0802024c
 801650c:	0801e38c 	.word	0x0801e38c

08016510 <rmw_subscription_get_actual_qos>:
 8016510:	b178      	cbz	r0, 8016532 <rmw_subscription_get_actual_qos+0x22>
 8016512:	b510      	push	{r4, lr}
 8016514:	fab1 f481 	clz	r4, r1
 8016518:	0964      	lsrs	r4, r4, #5
 801651a:	b141      	cbz	r1, 801652e <rmw_subscription_get_actual_qos+0x1e>
 801651c:	6843      	ldr	r3, [r0, #4]
 801651e:	2250      	movs	r2, #80	@ 0x50
 8016520:	4608      	mov	r0, r1
 8016522:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8016526:	f006 fee4 	bl	801d2f2 <memcpy>
 801652a:	4620      	mov	r0, r4
 801652c:	bd10      	pop	{r4, pc}
 801652e:	200b      	movs	r0, #11
 8016530:	bd10      	pop	{r4, pc}
 8016532:	200b      	movs	r0, #11
 8016534:	4770      	bx	lr
 8016536:	bf00      	nop

08016538 <rmw_destroy_subscription>:
 8016538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801653c:	b128      	cbz	r0, 801654a <rmw_destroy_subscription+0x12>
 801653e:	4604      	mov	r4, r0
 8016540:	6800      	ldr	r0, [r0, #0]
 8016542:	460d      	mov	r5, r1
 8016544:	f000 fe3c 	bl	80171c0 <is_uxrce_rmw_identifier_valid>
 8016548:	b918      	cbnz	r0, 8016552 <rmw_destroy_subscription+0x1a>
 801654a:	2401      	movs	r4, #1
 801654c:	4620      	mov	r0, r4
 801654e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016552:	6863      	ldr	r3, [r4, #4]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d0f8      	beq.n	801654a <rmw_destroy_subscription+0x12>
 8016558:	fab5 f485 	clz	r4, r5
 801655c:	0964      	lsrs	r4, r4, #5
 801655e:	2d00      	cmp	r5, #0
 8016560:	d0f3      	beq.n	801654a <rmw_destroy_subscription+0x12>
 8016562:	6828      	ldr	r0, [r5, #0]
 8016564:	f000 fe2c 	bl	80171c0 <is_uxrce_rmw_identifier_valid>
 8016568:	2800      	cmp	r0, #0
 801656a:	d0ee      	beq.n	801654a <rmw_destroy_subscription+0x12>
 801656c:	686e      	ldr	r6, [r5, #4]
 801656e:	2e00      	cmp	r6, #0
 8016570:	d0eb      	beq.n	801654a <rmw_destroy_subscription+0x12>
 8016572:	6a37      	ldr	r7, [r6, #32]
 8016574:	6972      	ldr	r2, [r6, #20]
 8016576:	6938      	ldr	r0, [r7, #16]
 8016578:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801657c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016580:	6819      	ldr	r1, [r3, #0]
 8016582:	f001 fcb9 	bl	8017ef8 <uxr_buffer_cancel_data>
 8016586:	4602      	mov	r2, r0
 8016588:	6938      	ldr	r0, [r7, #16]
 801658a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801658e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016592:	f000 fd03 	bl	8016f9c <run_xrce_session>
 8016596:	69f0      	ldr	r0, [r6, #28]
 8016598:	f005 fab8 	bl	801bb0c <destroy_topic>
 801659c:	6a33      	ldr	r3, [r6, #32]
 801659e:	6972      	ldr	r2, [r6, #20]
 80165a0:	6918      	ldr	r0, [r3, #16]
 80165a2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80165a6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80165aa:	6819      	ldr	r1, [r3, #0]
 80165ac:	f001 f940 	bl	8017830 <uxr_buffer_delete_entity>
 80165b0:	6a33      	ldr	r3, [r6, #32]
 80165b2:	4680      	mov	r8, r0
 80165b4:	6932      	ldr	r2, [r6, #16]
 80165b6:	6918      	ldr	r0, [r3, #16]
 80165b8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80165bc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80165c0:	6819      	ldr	r1, [r3, #0]
 80165c2:	f001 f935 	bl	8017830 <uxr_buffer_delete_entity>
 80165c6:	4606      	mov	r6, r0
 80165c8:	6938      	ldr	r0, [r7, #16]
 80165ca:	4642      	mov	r2, r8
 80165cc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80165d0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80165d4:	f000 fce2 	bl	8016f9c <run_xrce_session>
 80165d8:	693f      	ldr	r7, [r7, #16]
 80165da:	4632      	mov	r2, r6
 80165dc:	4606      	mov	r6, r0
 80165de:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80165e2:	4638      	mov	r0, r7
 80165e4:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 80165e8:	f000 fcd8 	bl	8016f9c <run_xrce_session>
 80165ec:	b126      	cbz	r6, 80165f8 <rmw_destroy_subscription+0xc0>
 80165ee:	b118      	cbz	r0, 80165f8 <rmw_destroy_subscription+0xc0>
 80165f0:	4628      	mov	r0, r5
 80165f2:	f000 fb85 	bl	8016d00 <rmw_uxrce_fini_subscription_memory>
 80165f6:	e7a9      	b.n	801654c <rmw_destroy_subscription+0x14>
 80165f8:	2402      	movs	r4, #2
 80165fa:	e7f9      	b.n	80165f0 <rmw_destroy_subscription+0xb8>

080165fc <rmw_take_with_info>:
 80165fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165fe:	4604      	mov	r4, r0
 8016600:	6800      	ldr	r0, [r0, #0]
 8016602:	b089      	sub	sp, #36	@ 0x24
 8016604:	460f      	mov	r7, r1
 8016606:	4615      	mov	r5, r2
 8016608:	b128      	cbz	r0, 8016616 <rmw_take_with_info+0x1a>
 801660a:	4b24      	ldr	r3, [pc, #144]	@ (801669c <rmw_take_with_info+0xa0>)
 801660c:	6819      	ldr	r1, [r3, #0]
 801660e:	f7e9 fe67 	bl	80002e0 <strcmp>
 8016612:	2800      	cmp	r0, #0
 8016614:	d13e      	bne.n	8016694 <rmw_take_with_info+0x98>
 8016616:	b305      	cbz	r5, 801665a <rmw_take_with_info+0x5e>
 8016618:	2300      	movs	r3, #0
 801661a:	6864      	ldr	r4, [r4, #4]
 801661c:	702b      	strb	r3, [r5, #0]
 801661e:	f000 fc3f 	bl	8016ea0 <rmw_uxrce_clean_expired_static_input_buffer>
 8016622:	4620      	mov	r0, r4
 8016624:	f000 fc14 	bl	8016e50 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016628:	4606      	mov	r6, r0
 801662a:	b1f0      	cbz	r0, 801666a <rmw_take_with_info+0x6e>
 801662c:	6881      	ldr	r1, [r0, #8]
 801662e:	4668      	mov	r0, sp
 8016630:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016634:	3110      	adds	r1, #16
 8016636:	f7f9 fb95 	bl	800fd64 <ucdr_init_buffer>
 801663a:	69a3      	ldr	r3, [r4, #24]
 801663c:	4639      	mov	r1, r7
 801663e:	4668      	mov	r0, sp
 8016640:	68db      	ldr	r3, [r3, #12]
 8016642:	4798      	blx	r3
 8016644:	4604      	mov	r4, r0
 8016646:	4631      	mov	r1, r6
 8016648:	4815      	ldr	r0, [pc, #84]	@ (80166a0 <rmw_take_with_info+0xa4>)
 801664a:	f005 f9d1 	bl	801b9f0 <put_memory>
 801664e:	702c      	strb	r4, [r5, #0]
 8016650:	f084 0001 	eor.w	r0, r4, #1
 8016654:	b2c0      	uxtb	r0, r0
 8016656:	b009      	add	sp, #36	@ 0x24
 8016658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801665a:	6864      	ldr	r4, [r4, #4]
 801665c:	f000 fc20 	bl	8016ea0 <rmw_uxrce_clean_expired_static_input_buffer>
 8016660:	4620      	mov	r0, r4
 8016662:	f000 fbf5 	bl	8016e50 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016666:	4605      	mov	r5, r0
 8016668:	b910      	cbnz	r0, 8016670 <rmw_take_with_info+0x74>
 801666a:	2001      	movs	r0, #1
 801666c:	b009      	add	sp, #36	@ 0x24
 801666e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016670:	68a9      	ldr	r1, [r5, #8]
 8016672:	4668      	mov	r0, sp
 8016674:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016678:	3110      	adds	r1, #16
 801667a:	f7f9 fb73 	bl	800fd64 <ucdr_init_buffer>
 801667e:	69a3      	ldr	r3, [r4, #24]
 8016680:	4639      	mov	r1, r7
 8016682:	4668      	mov	r0, sp
 8016684:	68db      	ldr	r3, [r3, #12]
 8016686:	4798      	blx	r3
 8016688:	4629      	mov	r1, r5
 801668a:	4604      	mov	r4, r0
 801668c:	4804      	ldr	r0, [pc, #16]	@ (80166a0 <rmw_take_with_info+0xa4>)
 801668e:	f005 f9af 	bl	801b9f0 <put_memory>
 8016692:	e7dd      	b.n	8016650 <rmw_take_with_info+0x54>
 8016694:	200c      	movs	r0, #12
 8016696:	b009      	add	sp, #36	@ 0x24
 8016698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801669a:	bf00      	nop
 801669c:	08020578 	.word	0x08020578
 80166a0:	240692ac 	.word	0x240692ac

080166a4 <rmw_uxrce_transport_init>:
 80166a4:	b508      	push	{r3, lr}
 80166a6:	b108      	cbz	r0, 80166ac <rmw_uxrce_transport_init+0x8>
 80166a8:	f100 0210 	add.w	r2, r0, #16
 80166ac:	b139      	cbz	r1, 80166be <rmw_uxrce_transport_init+0x1a>
 80166ae:	6949      	ldr	r1, [r1, #20]
 80166b0:	4610      	mov	r0, r2
 80166b2:	f001 fb7f 	bl	8017db4 <uxr_init_custom_transport>
 80166b6:	f080 0001 	eor.w	r0, r0, #1
 80166ba:	b2c0      	uxtb	r0, r0
 80166bc:	bd08      	pop	{r3, pc}
 80166be:	4b04      	ldr	r3, [pc, #16]	@ (80166d0 <rmw_uxrce_transport_init+0x2c>)
 80166c0:	4610      	mov	r0, r2
 80166c2:	6859      	ldr	r1, [r3, #4]
 80166c4:	f001 fb76 	bl	8017db4 <uxr_init_custom_transport>
 80166c8:	f080 0001 	eor.w	r0, r0, #1
 80166cc:	b2c0      	uxtb	r0, r0
 80166ce:	bd08      	pop	{r3, pc}
 80166d0:	2406469c 	.word	0x2406469c

080166d4 <rmw_wait>:
 80166d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80166d8:	4698      	mov	r8, r3
 80166da:	ea40 0301 	orr.w	r3, r0, r1
 80166de:	b089      	sub	sp, #36	@ 0x24
 80166e0:	ea48 0303 	orr.w	r3, r8, r3
 80166e4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80166e6:	4313      	orrs	r3, r2
 80166e8:	f000 8106 	beq.w	80168f8 <rmw_wait+0x224>
 80166ec:	4605      	mov	r5, r0
 80166ee:	460e      	mov	r6, r1
 80166f0:	4691      	mov	r9, r2
 80166f2:	b16c      	cbz	r4, 8016710 <rmw_wait+0x3c>
 80166f4:	4ba6      	ldr	r3, [pc, #664]	@ (8016990 <rmw_wait+0x2bc>)
 80166f6:	af04      	add	r7, sp, #16
 80166f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80166fa:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80166fe:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016702:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016706:	f004 fff3 	bl	801b6f0 <rmw_time_equal>
 801670a:	2800      	cmp	r0, #0
 801670c:	f000 810b 	beq.w	8016926 <rmw_wait+0x252>
 8016710:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016714:	f000 fbc4 	bl	8016ea0 <rmw_uxrce_clean_expired_static_input_buffer>
 8016718:	4b9e      	ldr	r3, [pc, #632]	@ (8016994 <rmw_wait+0x2c0>)
 801671a:	681c      	ldr	r4, [r3, #0]
 801671c:	b14c      	cbz	r4, 8016732 <rmw_wait+0x5e>
 801671e:	4623      	mov	r3, r4
 8016720:	2100      	movs	r1, #0
 8016722:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8016726:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801672a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801672e:	2b00      	cmp	r3, #0
 8016730:	d1f7      	bne.n	8016722 <rmw_wait+0x4e>
 8016732:	f1b9 0f00 	cmp.w	r9, #0
 8016736:	d011      	beq.n	801675c <rmw_wait+0x88>
 8016738:	f8d9 1000 	ldr.w	r1, [r9]
 801673c:	b171      	cbz	r1, 801675c <rmw_wait+0x88>
 801673e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8016742:	2300      	movs	r3, #0
 8016744:	2001      	movs	r0, #1
 8016746:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801674a:	3301      	adds	r3, #1
 801674c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801674e:	4299      	cmp	r1, r3
 8016750:	6912      	ldr	r2, [r2, #16]
 8016752:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016756:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801675a:	d1f4      	bne.n	8016746 <rmw_wait+0x72>
 801675c:	f1b8 0f00 	cmp.w	r8, #0
 8016760:	d011      	beq.n	8016786 <rmw_wait+0xb2>
 8016762:	f8d8 1000 	ldr.w	r1, [r8]
 8016766:	b171      	cbz	r1, 8016786 <rmw_wait+0xb2>
 8016768:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801676c:	2300      	movs	r3, #0
 801676e:	2001      	movs	r0, #1
 8016770:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016774:	3301      	adds	r3, #1
 8016776:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8016778:	4299      	cmp	r1, r3
 801677a:	6912      	ldr	r2, [r2, #16]
 801677c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016780:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016784:	d1f4      	bne.n	8016770 <rmw_wait+0x9c>
 8016786:	b185      	cbz	r5, 80167aa <rmw_wait+0xd6>
 8016788:	6829      	ldr	r1, [r5, #0]
 801678a:	b171      	cbz	r1, 80167aa <rmw_wait+0xd6>
 801678c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8016790:	2300      	movs	r3, #0
 8016792:	2001      	movs	r0, #1
 8016794:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016798:	3301      	adds	r3, #1
 801679a:	6a12      	ldr	r2, [r2, #32]
 801679c:	4299      	cmp	r1, r3
 801679e:	6912      	ldr	r2, [r2, #16]
 80167a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80167a4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80167a8:	d1f4      	bne.n	8016794 <rmw_wait+0xc0>
 80167aa:	b344      	cbz	r4, 80167fe <rmw_wait+0x12a>
 80167ac:	4622      	mov	r2, r4
 80167ae:	2300      	movs	r3, #0
 80167b0:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80167b4:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80167b8:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 80167bc:	440b      	add	r3, r1
 80167be:	b2db      	uxtb	r3, r3
 80167c0:	2a00      	cmp	r2, #0
 80167c2:	d1f5      	bne.n	80167b0 <rmw_wait+0xdc>
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d05f      	beq.n	8016888 <rmw_wait+0x1b4>
 80167c8:	1c7a      	adds	r2, r7, #1
 80167ca:	d00d      	beq.n	80167e8 <rmw_wait+0x114>
 80167cc:	ee07 7a90 	vmov	s15, r7
 80167d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80167d4:	ee07 3a90 	vmov	s15, r3
 80167d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80167dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80167e0:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80167e4:	ee17 7a90 	vmov	r7, s15
 80167e8:	68a0      	ldr	r0, [r4, #8]
 80167ea:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80167ee:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	f040 808d 	bne.w	8016912 <rmw_wait+0x23e>
 80167f8:	6864      	ldr	r4, [r4, #4]
 80167fa:	2c00      	cmp	r4, #0
 80167fc:	d1f4      	bne.n	80167e8 <rmw_wait+0x114>
 80167fe:	f1b9 0f00 	cmp.w	r9, #0
 8016802:	f000 80a1 	beq.w	8016948 <rmw_wait+0x274>
 8016806:	f8d9 7000 	ldr.w	r7, [r9]
 801680a:	2f00      	cmp	r7, #0
 801680c:	f000 80a4 	beq.w	8016958 <rmw_wait+0x284>
 8016810:	2400      	movs	r4, #0
 8016812:	4627      	mov	r7, r4
 8016814:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016818:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801681c:	f000 fb18 	bl	8016e50 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016820:	2800      	cmp	r0, #0
 8016822:	d03b      	beq.n	801689c <rmw_wait+0x1c8>
 8016824:	3401      	adds	r4, #1
 8016826:	f8d9 3000 	ldr.w	r3, [r9]
 801682a:	2701      	movs	r7, #1
 801682c:	42a3      	cmp	r3, r4
 801682e:	d8f1      	bhi.n	8016814 <rmw_wait+0x140>
 8016830:	2701      	movs	r7, #1
 8016832:	f1b8 0f00 	cmp.w	r8, #0
 8016836:	d010      	beq.n	801685a <rmw_wait+0x186>
 8016838:	f8d8 3000 	ldr.w	r3, [r8]
 801683c:	b16b      	cbz	r3, 801685a <rmw_wait+0x186>
 801683e:	2400      	movs	r4, #0
 8016840:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016844:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016848:	f000 fb02 	bl	8016e50 <rmw_uxrce_find_static_input_buffer_by_owner>
 801684c:	b370      	cbz	r0, 80168ac <rmw_wait+0x1d8>
 801684e:	3401      	adds	r4, #1
 8016850:	f8d8 3000 	ldr.w	r3, [r8]
 8016854:	2701      	movs	r7, #1
 8016856:	42a3      	cmp	r3, r4
 8016858:	d8f2      	bhi.n	8016840 <rmw_wait+0x16c>
 801685a:	2d00      	cmp	r5, #0
 801685c:	d035      	beq.n	80168ca <rmw_wait+0x1f6>
 801685e:	682b      	ldr	r3, [r5, #0]
 8016860:	b39b      	cbz	r3, 80168ca <rmw_wait+0x1f6>
 8016862:	2400      	movs	r4, #0
 8016864:	686b      	ldr	r3, [r5, #4]
 8016866:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801686a:	f000 faf1 	bl	8016e50 <rmw_uxrce_find_static_input_buffer_by_owner>
 801686e:	b328      	cbz	r0, 80168bc <rmw_wait+0x1e8>
 8016870:	3401      	adds	r4, #1
 8016872:	682b      	ldr	r3, [r5, #0]
 8016874:	2701      	movs	r7, #1
 8016876:	42a3      	cmp	r3, r4
 8016878:	d8f4      	bhi.n	8016864 <rmw_wait+0x190>
 801687a:	2e00      	cmp	r6, #0
 801687c:	d03c      	beq.n	80168f8 <rmw_wait+0x224>
 801687e:	6834      	ldr	r4, [r6, #0]
 8016880:	2c00      	cmp	r4, #0
 8016882:	d039      	beq.n	80168f8 <rmw_wait+0x224>
 8016884:	2701      	movs	r7, #1
 8016886:	e023      	b.n	80168d0 <rmw_wait+0x1fc>
 8016888:	68a0      	ldr	r0, [r4, #8]
 801688a:	2100      	movs	r1, #0
 801688c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016890:	f002 f8c8 	bl	8018a24 <uxr_run_session_timeout>
 8016894:	6864      	ldr	r4, [r4, #4]
 8016896:	2c00      	cmp	r4, #0
 8016898:	d1f6      	bne.n	8016888 <rmw_wait+0x1b4>
 801689a:	e7b0      	b.n	80167fe <rmw_wait+0x12a>
 801689c:	e9d9 3200 	ldrd	r3, r2, [r9]
 80168a0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80168a4:	3401      	adds	r4, #1
 80168a6:	42a3      	cmp	r3, r4
 80168a8:	d8b4      	bhi.n	8016814 <rmw_wait+0x140>
 80168aa:	e7c2      	b.n	8016832 <rmw_wait+0x15e>
 80168ac:	e9d8 3200 	ldrd	r3, r2, [r8]
 80168b0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80168b4:	3401      	adds	r4, #1
 80168b6:	429c      	cmp	r4, r3
 80168b8:	d3c2      	bcc.n	8016840 <rmw_wait+0x16c>
 80168ba:	e7ce      	b.n	801685a <rmw_wait+0x186>
 80168bc:	e9d5 3200 	ldrd	r3, r2, [r5]
 80168c0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80168c4:	3401      	adds	r4, #1
 80168c6:	42a3      	cmp	r3, r4
 80168c8:	d8cc      	bhi.n	8016864 <rmw_wait+0x190>
 80168ca:	b1a6      	cbz	r6, 80168f6 <rmw_wait+0x222>
 80168cc:	6834      	ldr	r4, [r6, #0]
 80168ce:	b194      	cbz	r4, 80168f6 <rmw_wait+0x222>
 80168d0:	2300      	movs	r3, #0
 80168d2:	461d      	mov	r5, r3
 80168d4:	e004      	b.n	80168e0 <rmw_wait+0x20c>
 80168d6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80168da:	3301      	adds	r3, #1
 80168dc:	42a3      	cmp	r3, r4
 80168de:	d00a      	beq.n	80168f6 <rmw_wait+0x222>
 80168e0:	6870      	ldr	r0, [r6, #4]
 80168e2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80168e6:	7c0a      	ldrb	r2, [r1, #16]
 80168e8:	2a00      	cmp	r2, #0
 80168ea:	d0f4      	beq.n	80168d6 <rmw_wait+0x202>
 80168ec:	3301      	adds	r3, #1
 80168ee:	4617      	mov	r7, r2
 80168f0:	740d      	strb	r5, [r1, #16]
 80168f2:	42a3      	cmp	r3, r4
 80168f4:	d1f4      	bne.n	80168e0 <rmw_wait+0x20c>
 80168f6:	b147      	cbz	r7, 801690a <rmw_wait+0x236>
 80168f8:	2000      	movs	r0, #0
 80168fa:	b009      	add	sp, #36	@ 0x24
 80168fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016900:	b11e      	cbz	r6, 801690a <rmw_wait+0x236>
 8016902:	6834      	ldr	r4, [r6, #0]
 8016904:	462f      	mov	r7, r5
 8016906:	2c00      	cmp	r4, #0
 8016908:	d1e2      	bne.n	80168d0 <rmw_wait+0x1fc>
 801690a:	2002      	movs	r0, #2
 801690c:	b009      	add	sp, #36	@ 0x24
 801690e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016912:	4639      	mov	r1, r7
 8016914:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016918:	f002 f89e 	bl	8018a58 <uxr_run_session_until_data>
 801691c:	6864      	ldr	r4, [r4, #4]
 801691e:	2c00      	cmp	r4, #0
 8016920:	f47f af62 	bne.w	80167e8 <rmw_wait+0x114>
 8016924:	e76b      	b.n	80167fe <rmw_wait+0x12a>
 8016926:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801692a:	f004 ff37 	bl	801b79c <rmw_time_total_nsec>
 801692e:	2300      	movs	r3, #0
 8016930:	4a19      	ldr	r2, [pc, #100]	@ (8016998 <rmw_wait+0x2c4>)
 8016932:	f7e9 fd8d 	bl	8000450 <__aeabi_uldivmod>
 8016936:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801693a:	4607      	mov	r7, r0
 801693c:	f171 0300 	sbcs.w	r3, r1, #0
 8016940:	bfa8      	it	ge
 8016942:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8016946:	e6e5      	b.n	8016714 <rmw_wait+0x40>
 8016948:	f1b8 0f00 	cmp.w	r8, #0
 801694c:	d00f      	beq.n	801696e <rmw_wait+0x29a>
 801694e:	f8d8 3000 	ldr.w	r3, [r8]
 8016952:	b193      	cbz	r3, 801697a <rmw_wait+0x2a6>
 8016954:	464f      	mov	r7, r9
 8016956:	e772      	b.n	801683e <rmw_wait+0x16a>
 8016958:	f1b8 0f00 	cmp.w	r8, #0
 801695c:	d007      	beq.n	801696e <rmw_wait+0x29a>
 801695e:	f8d8 3000 	ldr.w	r3, [r8]
 8016962:	2b00      	cmp	r3, #0
 8016964:	f47f af6b 	bne.w	801683e <rmw_wait+0x16a>
 8016968:	b155      	cbz	r5, 8016980 <rmw_wait+0x2ac>
 801696a:	461f      	mov	r7, r3
 801696c:	e777      	b.n	801685e <rmw_wait+0x18a>
 801696e:	2d00      	cmp	r5, #0
 8016970:	d0c6      	beq.n	8016900 <rmw_wait+0x22c>
 8016972:	682b      	ldr	r3, [r5, #0]
 8016974:	b143      	cbz	r3, 8016988 <rmw_wait+0x2b4>
 8016976:	4647      	mov	r7, r8
 8016978:	e773      	b.n	8016862 <rmw_wait+0x18e>
 801697a:	b10d      	cbz	r5, 8016980 <rmw_wait+0x2ac>
 801697c:	464f      	mov	r7, r9
 801697e:	e76e      	b.n	801685e <rmw_wait+0x18a>
 8016980:	462f      	mov	r7, r5
 8016982:	2e00      	cmp	r6, #0
 8016984:	d1a2      	bne.n	80168cc <rmw_wait+0x1f8>
 8016986:	e7c0      	b.n	801690a <rmw_wait+0x236>
 8016988:	4647      	mov	r7, r8
 801698a:	2e00      	cmp	r6, #0
 801698c:	d19e      	bne.n	80168cc <rmw_wait+0x1f8>
 801698e:	e7bc      	b.n	801690a <rmw_wait+0x236>
 8016990:	0801e1d8 	.word	0x0801e1d8
 8016994:	2406929c 	.word	0x2406929c
 8016998:	000f4240 	.word	0x000f4240

0801699c <rmw_create_wait_set>:
 801699c:	b508      	push	{r3, lr}
 801699e:	4803      	ldr	r0, [pc, #12]	@ (80169ac <rmw_create_wait_set+0x10>)
 80169a0:	f005 f816 	bl	801b9d0 <get_memory>
 80169a4:	b108      	cbz	r0, 80169aa <rmw_create_wait_set+0xe>
 80169a6:	6880      	ldr	r0, [r0, #8]
 80169a8:	3010      	adds	r0, #16
 80169aa:	bd08      	pop	{r3, pc}
 80169ac:	240692dc 	.word	0x240692dc

080169b0 <rmw_destroy_wait_set>:
 80169b0:	b508      	push	{r3, lr}
 80169b2:	4b08      	ldr	r3, [pc, #32]	@ (80169d4 <rmw_destroy_wait_set+0x24>)
 80169b4:	6819      	ldr	r1, [r3, #0]
 80169b6:	b911      	cbnz	r1, 80169be <rmw_destroy_wait_set+0xe>
 80169b8:	e00a      	b.n	80169d0 <rmw_destroy_wait_set+0x20>
 80169ba:	6849      	ldr	r1, [r1, #4]
 80169bc:	b141      	cbz	r1, 80169d0 <rmw_destroy_wait_set+0x20>
 80169be:	688b      	ldr	r3, [r1, #8]
 80169c0:	3310      	adds	r3, #16
 80169c2:	4298      	cmp	r0, r3
 80169c4:	d1f9      	bne.n	80169ba <rmw_destroy_wait_set+0xa>
 80169c6:	4803      	ldr	r0, [pc, #12]	@ (80169d4 <rmw_destroy_wait_set+0x24>)
 80169c8:	f005 f812 	bl	801b9f0 <put_memory>
 80169cc:	2000      	movs	r0, #0
 80169ce:	bd08      	pop	{r3, pc}
 80169d0:	2001      	movs	r0, #1
 80169d2:	bd08      	pop	{r3, pc}
 80169d4:	240692dc 	.word	0x240692dc

080169d8 <rmw_uxrce_init_service_memory>:
 80169d8:	b1e2      	cbz	r2, 8016a14 <rmw_uxrce_init_service_memory+0x3c>
 80169da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169de:	7b05      	ldrb	r5, [r0, #12]
 80169e0:	4606      	mov	r6, r0
 80169e2:	b9ad      	cbnz	r5, 8016a10 <rmw_uxrce_init_service_memory+0x38>
 80169e4:	23c8      	movs	r3, #200	@ 0xc8
 80169e6:	4617      	mov	r7, r2
 80169e8:	460c      	mov	r4, r1
 80169ea:	46a8      	mov	r8, r5
 80169ec:	6083      	str	r3, [r0, #8]
 80169ee:	f240 1301 	movw	r3, #257	@ 0x101
 80169f2:	e9c0 5500 	strd	r5, r5, [r0]
 80169f6:	8183      	strh	r3, [r0, #12]
 80169f8:	3501      	adds	r5, #1
 80169fa:	4621      	mov	r1, r4
 80169fc:	4630      	mov	r0, r6
 80169fe:	f004 fff7 	bl	801b9f0 <put_memory>
 8016a02:	42af      	cmp	r7, r5
 8016a04:	60a4      	str	r4, [r4, #8]
 8016a06:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8016a0a:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8016a0e:	d1f3      	bne.n	80169f8 <rmw_uxrce_init_service_memory+0x20>
 8016a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a14:	4770      	bx	lr
 8016a16:	bf00      	nop

08016a18 <rmw_uxrce_init_client_memory>:
 8016a18:	b1e2      	cbz	r2, 8016a54 <rmw_uxrce_init_client_memory+0x3c>
 8016a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a1e:	7b05      	ldrb	r5, [r0, #12]
 8016a20:	4606      	mov	r6, r0
 8016a22:	b9ad      	cbnz	r5, 8016a50 <rmw_uxrce_init_client_memory+0x38>
 8016a24:	23c8      	movs	r3, #200	@ 0xc8
 8016a26:	4617      	mov	r7, r2
 8016a28:	460c      	mov	r4, r1
 8016a2a:	46a8      	mov	r8, r5
 8016a2c:	6083      	str	r3, [r0, #8]
 8016a2e:	f240 1301 	movw	r3, #257	@ 0x101
 8016a32:	e9c0 5500 	strd	r5, r5, [r0]
 8016a36:	8183      	strh	r3, [r0, #12]
 8016a38:	3501      	adds	r5, #1
 8016a3a:	4621      	mov	r1, r4
 8016a3c:	4630      	mov	r0, r6
 8016a3e:	f004 ffd7 	bl	801b9f0 <put_memory>
 8016a42:	42af      	cmp	r7, r5
 8016a44:	60a4      	str	r4, [r4, #8]
 8016a46:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8016a4a:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8016a4e:	d1f3      	bne.n	8016a38 <rmw_uxrce_init_client_memory+0x20>
 8016a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a54:	4770      	bx	lr
 8016a56:	bf00      	nop

08016a58 <rmw_uxrce_init_publisher_memory>:
 8016a58:	b1e2      	cbz	r2, 8016a94 <rmw_uxrce_init_publisher_memory+0x3c>
 8016a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a5e:	7b05      	ldrb	r5, [r0, #12]
 8016a60:	4606      	mov	r6, r0
 8016a62:	b9ad      	cbnz	r5, 8016a90 <rmw_uxrce_init_publisher_memory+0x38>
 8016a64:	23d8      	movs	r3, #216	@ 0xd8
 8016a66:	4617      	mov	r7, r2
 8016a68:	460c      	mov	r4, r1
 8016a6a:	46a8      	mov	r8, r5
 8016a6c:	6083      	str	r3, [r0, #8]
 8016a6e:	f240 1301 	movw	r3, #257	@ 0x101
 8016a72:	e9c0 5500 	strd	r5, r5, [r0]
 8016a76:	8183      	strh	r3, [r0, #12]
 8016a78:	3501      	adds	r5, #1
 8016a7a:	4621      	mov	r1, r4
 8016a7c:	4630      	mov	r0, r6
 8016a7e:	f004 ffb7 	bl	801b9f0 <put_memory>
 8016a82:	42af      	cmp	r7, r5
 8016a84:	60a4      	str	r4, [r4, #8]
 8016a86:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8016a8a:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8016a8e:	d1f3      	bne.n	8016a78 <rmw_uxrce_init_publisher_memory+0x20>
 8016a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a94:	4770      	bx	lr
 8016a96:	bf00      	nop

08016a98 <rmw_uxrce_init_subscription_memory>:
 8016a98:	b1e2      	cbz	r2, 8016ad4 <rmw_uxrce_init_subscription_memory+0x3c>
 8016a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a9e:	7b05      	ldrb	r5, [r0, #12]
 8016aa0:	4606      	mov	r6, r0
 8016aa2:	b9ad      	cbnz	r5, 8016ad0 <rmw_uxrce_init_subscription_memory+0x38>
 8016aa4:	23d8      	movs	r3, #216	@ 0xd8
 8016aa6:	4617      	mov	r7, r2
 8016aa8:	460c      	mov	r4, r1
 8016aaa:	46a8      	mov	r8, r5
 8016aac:	6083      	str	r3, [r0, #8]
 8016aae:	f240 1301 	movw	r3, #257	@ 0x101
 8016ab2:	e9c0 5500 	strd	r5, r5, [r0]
 8016ab6:	8183      	strh	r3, [r0, #12]
 8016ab8:	3501      	adds	r5, #1
 8016aba:	4621      	mov	r1, r4
 8016abc:	4630      	mov	r0, r6
 8016abe:	f004 ff97 	bl	801b9f0 <put_memory>
 8016ac2:	42af      	cmp	r7, r5
 8016ac4:	60a4      	str	r4, [r4, #8]
 8016ac6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8016aca:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8016ace:	d1f3      	bne.n	8016ab8 <rmw_uxrce_init_subscription_memory+0x20>
 8016ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ad4:	4770      	bx	lr
 8016ad6:	bf00      	nop

08016ad8 <rmw_uxrce_init_node_memory>:
 8016ad8:	b1e2      	cbz	r2, 8016b14 <rmw_uxrce_init_node_memory+0x3c>
 8016ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ade:	7b05      	ldrb	r5, [r0, #12]
 8016ae0:	4606      	mov	r6, r0
 8016ae2:	b9ad      	cbnz	r5, 8016b10 <rmw_uxrce_init_node_memory+0x38>
 8016ae4:	23a4      	movs	r3, #164	@ 0xa4
 8016ae6:	4617      	mov	r7, r2
 8016ae8:	460c      	mov	r4, r1
 8016aea:	46a8      	mov	r8, r5
 8016aec:	6083      	str	r3, [r0, #8]
 8016aee:	f240 1301 	movw	r3, #257	@ 0x101
 8016af2:	e9c0 5500 	strd	r5, r5, [r0]
 8016af6:	8183      	strh	r3, [r0, #12]
 8016af8:	3501      	adds	r5, #1
 8016afa:	4621      	mov	r1, r4
 8016afc:	4630      	mov	r0, r6
 8016afe:	f004 ff77 	bl	801b9f0 <put_memory>
 8016b02:	42af      	cmp	r7, r5
 8016b04:	60a4      	str	r4, [r4, #8]
 8016b06:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8016b0a:	f804 8c98 	strb.w	r8, [r4, #-152]
 8016b0e:	d1f3      	bne.n	8016af8 <rmw_uxrce_init_node_memory+0x20>
 8016b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b14:	4770      	bx	lr
 8016b16:	bf00      	nop

08016b18 <rmw_uxrce_init_session_memory>:
 8016b18:	b1ea      	cbz	r2, 8016b56 <rmw_uxrce_init_session_memory+0x3e>
 8016b1a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b1e:	7b05      	ldrb	r5, [r0, #12]
 8016b20:	4606      	mov	r6, r0
 8016b22:	b9b5      	cbnz	r5, 8016b52 <rmw_uxrce_init_session_memory+0x3a>
 8016b24:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8016b28:	f240 1301 	movw	r3, #257	@ 0x101
 8016b2c:	4617      	mov	r7, r2
 8016b2e:	460c      	mov	r4, r1
 8016b30:	46a9      	mov	r9, r5
 8016b32:	f8c0 8008 	str.w	r8, [r0, #8]
 8016b36:	8183      	strh	r3, [r0, #12]
 8016b38:	e9c0 5500 	strd	r5, r5, [r0]
 8016b3c:	3501      	adds	r5, #1
 8016b3e:	4621      	mov	r1, r4
 8016b40:	4630      	mov	r0, r6
 8016b42:	f004 ff55 	bl	801b9f0 <put_memory>
 8016b46:	42af      	cmp	r7, r5
 8016b48:	60a4      	str	r4, [r4, #8]
 8016b4a:	f884 900c 	strb.w	r9, [r4, #12]
 8016b4e:	4444      	add	r4, r8
 8016b50:	d1f4      	bne.n	8016b3c <rmw_uxrce_init_session_memory+0x24>
 8016b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b56:	4770      	bx	lr

08016b58 <rmw_uxrce_init_topic_memory>:
 8016b58:	b1e2      	cbz	r2, 8016b94 <rmw_uxrce_init_topic_memory+0x3c>
 8016b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b5e:	7b05      	ldrb	r5, [r0, #12]
 8016b60:	4606      	mov	r6, r0
 8016b62:	b9ad      	cbnz	r5, 8016b90 <rmw_uxrce_init_topic_memory+0x38>
 8016b64:	231c      	movs	r3, #28
 8016b66:	4617      	mov	r7, r2
 8016b68:	460c      	mov	r4, r1
 8016b6a:	46a8      	mov	r8, r5
 8016b6c:	6083      	str	r3, [r0, #8]
 8016b6e:	f240 1301 	movw	r3, #257	@ 0x101
 8016b72:	e9c0 5500 	strd	r5, r5, [r0]
 8016b76:	8183      	strh	r3, [r0, #12]
 8016b78:	3501      	adds	r5, #1
 8016b7a:	4621      	mov	r1, r4
 8016b7c:	4630      	mov	r0, r6
 8016b7e:	f004 ff37 	bl	801b9f0 <put_memory>
 8016b82:	42af      	cmp	r7, r5
 8016b84:	60a4      	str	r4, [r4, #8]
 8016b86:	f104 041c 	add.w	r4, r4, #28
 8016b8a:	f804 8c10 	strb.w	r8, [r4, #-16]
 8016b8e:	d1f3      	bne.n	8016b78 <rmw_uxrce_init_topic_memory+0x20>
 8016b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b94:	4770      	bx	lr
 8016b96:	bf00      	nop

08016b98 <rmw_uxrce_init_static_input_buffer_memory>:
 8016b98:	b1ea      	cbz	r2, 8016bd6 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8016b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b9e:	7b05      	ldrb	r5, [r0, #12]
 8016ba0:	4606      	mov	r6, r0
 8016ba2:	b9b5      	cbnz	r5, 8016bd2 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8016ba4:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8016ba8:	4617      	mov	r7, r2
 8016baa:	460c      	mov	r4, r1
 8016bac:	46a8      	mov	r8, r5
 8016bae:	6083      	str	r3, [r0, #8]
 8016bb0:	f240 1301 	movw	r3, #257	@ 0x101
 8016bb4:	e9c0 5500 	strd	r5, r5, [r0]
 8016bb8:	8183      	strh	r3, [r0, #12]
 8016bba:	3501      	adds	r5, #1
 8016bbc:	4621      	mov	r1, r4
 8016bbe:	4630      	mov	r0, r6
 8016bc0:	f004 ff16 	bl	801b9f0 <put_memory>
 8016bc4:	42af      	cmp	r7, r5
 8016bc6:	60a4      	str	r4, [r4, #8]
 8016bc8:	f884 800c 	strb.w	r8, [r4, #12]
 8016bcc:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8016bd0:	d1f3      	bne.n	8016bba <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8016bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bd6:	4770      	bx	lr

08016bd8 <rmw_uxrce_init_init_options_impl_memory>:
 8016bd8:	b1e2      	cbz	r2, 8016c14 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8016bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bde:	7b05      	ldrb	r5, [r0, #12]
 8016be0:	4606      	mov	r6, r0
 8016be2:	b9ad      	cbnz	r5, 8016c10 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8016be4:	232c      	movs	r3, #44	@ 0x2c
 8016be6:	4617      	mov	r7, r2
 8016be8:	460c      	mov	r4, r1
 8016bea:	46a8      	mov	r8, r5
 8016bec:	6083      	str	r3, [r0, #8]
 8016bee:	f240 1301 	movw	r3, #257	@ 0x101
 8016bf2:	e9c0 5500 	strd	r5, r5, [r0]
 8016bf6:	8183      	strh	r3, [r0, #12]
 8016bf8:	3501      	adds	r5, #1
 8016bfa:	4621      	mov	r1, r4
 8016bfc:	4630      	mov	r0, r6
 8016bfe:	f004 fef7 	bl	801b9f0 <put_memory>
 8016c02:	42af      	cmp	r7, r5
 8016c04:	60a4      	str	r4, [r4, #8]
 8016c06:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8016c0a:	f804 8c20 	strb.w	r8, [r4, #-32]
 8016c0e:	d1f3      	bne.n	8016bf8 <rmw_uxrce_init_init_options_impl_memory+0x20>
 8016c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c14:	4770      	bx	lr
 8016c16:	bf00      	nop

08016c18 <rmw_uxrce_init_wait_set_memory>:
 8016c18:	b1e2      	cbz	r2, 8016c54 <rmw_uxrce_init_wait_set_memory+0x3c>
 8016c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c1e:	7b05      	ldrb	r5, [r0, #12]
 8016c20:	4606      	mov	r6, r0
 8016c22:	b9ad      	cbnz	r5, 8016c50 <rmw_uxrce_init_wait_set_memory+0x38>
 8016c24:	231c      	movs	r3, #28
 8016c26:	4617      	mov	r7, r2
 8016c28:	460c      	mov	r4, r1
 8016c2a:	46a8      	mov	r8, r5
 8016c2c:	6083      	str	r3, [r0, #8]
 8016c2e:	f240 1301 	movw	r3, #257	@ 0x101
 8016c32:	e9c0 5500 	strd	r5, r5, [r0]
 8016c36:	8183      	strh	r3, [r0, #12]
 8016c38:	3501      	adds	r5, #1
 8016c3a:	4621      	mov	r1, r4
 8016c3c:	4630      	mov	r0, r6
 8016c3e:	f004 fed7 	bl	801b9f0 <put_memory>
 8016c42:	42af      	cmp	r7, r5
 8016c44:	60a4      	str	r4, [r4, #8]
 8016c46:	f104 041c 	add.w	r4, r4, #28
 8016c4a:	f804 8c10 	strb.w	r8, [r4, #-16]
 8016c4e:	d1f3      	bne.n	8016c38 <rmw_uxrce_init_wait_set_memory+0x20>
 8016c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c54:	4770      	bx	lr
 8016c56:	bf00      	nop

08016c58 <rmw_uxrce_init_guard_condition_memory>:
 8016c58:	b1e2      	cbz	r2, 8016c94 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8016c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c5e:	7b05      	ldrb	r5, [r0, #12]
 8016c60:	4606      	mov	r6, r0
 8016c62:	b9ad      	cbnz	r5, 8016c90 <rmw_uxrce_init_guard_condition_memory+0x38>
 8016c64:	2320      	movs	r3, #32
 8016c66:	4617      	mov	r7, r2
 8016c68:	460c      	mov	r4, r1
 8016c6a:	46a8      	mov	r8, r5
 8016c6c:	6083      	str	r3, [r0, #8]
 8016c6e:	f240 1301 	movw	r3, #257	@ 0x101
 8016c72:	e9c0 5500 	strd	r5, r5, [r0]
 8016c76:	8183      	strh	r3, [r0, #12]
 8016c78:	3501      	adds	r5, #1
 8016c7a:	4621      	mov	r1, r4
 8016c7c:	4630      	mov	r0, r6
 8016c7e:	f004 feb7 	bl	801b9f0 <put_memory>
 8016c82:	42af      	cmp	r7, r5
 8016c84:	60a4      	str	r4, [r4, #8]
 8016c86:	f104 0420 	add.w	r4, r4, #32
 8016c8a:	f804 8c14 	strb.w	r8, [r4, #-20]
 8016c8e:	d1f3      	bne.n	8016c78 <rmw_uxrce_init_guard_condition_memory+0x20>
 8016c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c94:	4770      	bx	lr
 8016c96:	bf00      	nop

08016c98 <rmw_uxrce_fini_session_memory>:
 8016c98:	4601      	mov	r1, r0
 8016c9a:	4801      	ldr	r0, [pc, #4]	@ (8016ca0 <rmw_uxrce_fini_session_memory+0x8>)
 8016c9c:	f004 bea8 	b.w	801b9f0 <put_memory>
 8016ca0:	2406929c 	.word	0x2406929c

08016ca4 <rmw_uxrce_fini_node_memory>:
 8016ca4:	b538      	push	{r3, r4, r5, lr}
 8016ca6:	4604      	mov	r4, r0
 8016ca8:	6800      	ldr	r0, [r0, #0]
 8016caa:	b128      	cbz	r0, 8016cb8 <rmw_uxrce_fini_node_memory+0x14>
 8016cac:	4b07      	ldr	r3, [pc, #28]	@ (8016ccc <rmw_uxrce_fini_node_memory+0x28>)
 8016cae:	6819      	ldr	r1, [r3, #0]
 8016cb0:	f7e9 fb16 	bl	80002e0 <strcmp>
 8016cb4:	b940      	cbnz	r0, 8016cc8 <rmw_uxrce_fini_node_memory+0x24>
 8016cb6:	6020      	str	r0, [r4, #0]
 8016cb8:	6861      	ldr	r1, [r4, #4]
 8016cba:	b129      	cbz	r1, 8016cc8 <rmw_uxrce_fini_node_memory+0x24>
 8016cbc:	2500      	movs	r5, #0
 8016cbe:	4804      	ldr	r0, [pc, #16]	@ (8016cd0 <rmw_uxrce_fini_node_memory+0x2c>)
 8016cc0:	610d      	str	r5, [r1, #16]
 8016cc2:	f004 fe95 	bl	801b9f0 <put_memory>
 8016cc6:	6065      	str	r5, [r4, #4]
 8016cc8:	bd38      	pop	{r3, r4, r5, pc}
 8016cca:	bf00      	nop
 8016ccc:	08020578 	.word	0x08020578
 8016cd0:	2406926c 	.word	0x2406926c

08016cd4 <rmw_uxrce_fini_publisher_memory>:
 8016cd4:	b510      	push	{r4, lr}
 8016cd6:	4604      	mov	r4, r0
 8016cd8:	6800      	ldr	r0, [r0, #0]
 8016cda:	b128      	cbz	r0, 8016ce8 <rmw_uxrce_fini_publisher_memory+0x14>
 8016cdc:	4b06      	ldr	r3, [pc, #24]	@ (8016cf8 <rmw_uxrce_fini_publisher_memory+0x24>)
 8016cde:	6819      	ldr	r1, [r3, #0]
 8016ce0:	f7e9 fafe 	bl	80002e0 <strcmp>
 8016ce4:	b938      	cbnz	r0, 8016cf6 <rmw_uxrce_fini_publisher_memory+0x22>
 8016ce6:	6020      	str	r0, [r4, #0]
 8016ce8:	6861      	ldr	r1, [r4, #4]
 8016cea:	b121      	cbz	r1, 8016cf6 <rmw_uxrce_fini_publisher_memory+0x22>
 8016cec:	4803      	ldr	r0, [pc, #12]	@ (8016cfc <rmw_uxrce_fini_publisher_memory+0x28>)
 8016cee:	f004 fe7f 	bl	801b9f0 <put_memory>
 8016cf2:	2300      	movs	r3, #0
 8016cf4:	6063      	str	r3, [r4, #4]
 8016cf6:	bd10      	pop	{r4, pc}
 8016cf8:	08020578 	.word	0x08020578
 8016cfc:	2406927c 	.word	0x2406927c

08016d00 <rmw_uxrce_fini_subscription_memory>:
 8016d00:	b510      	push	{r4, lr}
 8016d02:	4604      	mov	r4, r0
 8016d04:	6800      	ldr	r0, [r0, #0]
 8016d06:	b128      	cbz	r0, 8016d14 <rmw_uxrce_fini_subscription_memory+0x14>
 8016d08:	4b06      	ldr	r3, [pc, #24]	@ (8016d24 <rmw_uxrce_fini_subscription_memory+0x24>)
 8016d0a:	6819      	ldr	r1, [r3, #0]
 8016d0c:	f7e9 fae8 	bl	80002e0 <strcmp>
 8016d10:	b938      	cbnz	r0, 8016d22 <rmw_uxrce_fini_subscription_memory+0x22>
 8016d12:	6020      	str	r0, [r4, #0]
 8016d14:	6861      	ldr	r1, [r4, #4]
 8016d16:	b121      	cbz	r1, 8016d22 <rmw_uxrce_fini_subscription_memory+0x22>
 8016d18:	4803      	ldr	r0, [pc, #12]	@ (8016d28 <rmw_uxrce_fini_subscription_memory+0x28>)
 8016d1a:	f004 fe69 	bl	801b9f0 <put_memory>
 8016d1e:	2300      	movs	r3, #0
 8016d20:	6063      	str	r3, [r4, #4]
 8016d22:	bd10      	pop	{r4, pc}
 8016d24:	08020578 	.word	0x08020578
 8016d28:	240692bc 	.word	0x240692bc

08016d2c <rmw_uxrce_fini_service_memory>:
 8016d2c:	b510      	push	{r4, lr}
 8016d2e:	4604      	mov	r4, r0
 8016d30:	6800      	ldr	r0, [r0, #0]
 8016d32:	b128      	cbz	r0, 8016d40 <rmw_uxrce_fini_service_memory+0x14>
 8016d34:	4b06      	ldr	r3, [pc, #24]	@ (8016d50 <rmw_uxrce_fini_service_memory+0x24>)
 8016d36:	6819      	ldr	r1, [r3, #0]
 8016d38:	f7e9 fad2 	bl	80002e0 <strcmp>
 8016d3c:	b938      	cbnz	r0, 8016d4e <rmw_uxrce_fini_service_memory+0x22>
 8016d3e:	6020      	str	r0, [r4, #0]
 8016d40:	6861      	ldr	r1, [r4, #4]
 8016d42:	b121      	cbz	r1, 8016d4e <rmw_uxrce_fini_service_memory+0x22>
 8016d44:	4803      	ldr	r0, [pc, #12]	@ (8016d54 <rmw_uxrce_fini_service_memory+0x28>)
 8016d46:	f004 fe53 	bl	801b9f0 <put_memory>
 8016d4a:	2300      	movs	r3, #0
 8016d4c:	6063      	str	r3, [r4, #4]
 8016d4e:	bd10      	pop	{r4, pc}
 8016d50:	08020578 	.word	0x08020578
 8016d54:	2406928c 	.word	0x2406928c

08016d58 <rmw_uxrce_fini_client_memory>:
 8016d58:	b510      	push	{r4, lr}
 8016d5a:	4604      	mov	r4, r0
 8016d5c:	6800      	ldr	r0, [r0, #0]
 8016d5e:	b128      	cbz	r0, 8016d6c <rmw_uxrce_fini_client_memory+0x14>
 8016d60:	4b06      	ldr	r3, [pc, #24]	@ (8016d7c <rmw_uxrce_fini_client_memory+0x24>)
 8016d62:	6819      	ldr	r1, [r3, #0]
 8016d64:	f7e9 fabc 	bl	80002e0 <strcmp>
 8016d68:	b938      	cbnz	r0, 8016d7a <rmw_uxrce_fini_client_memory+0x22>
 8016d6a:	6020      	str	r0, [r4, #0]
 8016d6c:	6861      	ldr	r1, [r4, #4]
 8016d6e:	b121      	cbz	r1, 8016d7a <rmw_uxrce_fini_client_memory+0x22>
 8016d70:	4803      	ldr	r0, [pc, #12]	@ (8016d80 <rmw_uxrce_fini_client_memory+0x28>)
 8016d72:	f004 fe3d 	bl	801b9f0 <put_memory>
 8016d76:	2300      	movs	r3, #0
 8016d78:	6063      	str	r3, [r4, #4]
 8016d7a:	bd10      	pop	{r4, pc}
 8016d7c:	08020578 	.word	0x08020578
 8016d80:	240649a0 	.word	0x240649a0

08016d84 <rmw_uxrce_fini_topic_memory>:
 8016d84:	b510      	push	{r4, lr}
 8016d86:	4604      	mov	r4, r0
 8016d88:	4803      	ldr	r0, [pc, #12]	@ (8016d98 <rmw_uxrce_fini_topic_memory+0x14>)
 8016d8a:	4621      	mov	r1, r4
 8016d8c:	f004 fe30 	bl	801b9f0 <put_memory>
 8016d90:	2300      	movs	r3, #0
 8016d92:	61a3      	str	r3, [r4, #24]
 8016d94:	bd10      	pop	{r4, pc}
 8016d96:	bf00      	nop
 8016d98:	240692cc 	.word	0x240692cc

08016d9c <rmw_uxrce_get_static_input_buffer_for_entity>:
 8016d9c:	b082      	sub	sp, #8
 8016d9e:	492b      	ldr	r1, [pc, #172]	@ (8016e4c <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8016da0:	b530      	push	{r4, r5, lr}
 8016da2:	680d      	ldr	r5, [r1, #0]
 8016da4:	ac03      	add	r4, sp, #12
 8016da6:	e884 000c 	stmia.w	r4, {r2, r3}
 8016daa:	461c      	mov	r4, r3
 8016dac:	2d00      	cmp	r5, #0
 8016dae:	d04b      	beq.n	8016e48 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8016db0:	462b      	mov	r3, r5
 8016db2:	2100      	movs	r1, #0
 8016db4:	689a      	ldr	r2, [r3, #8]
 8016db6:	685b      	ldr	r3, [r3, #4]
 8016db8:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8016dbc:	4290      	cmp	r0, r2
 8016dbe:	bf08      	it	eq
 8016dc0:	3101      	addeq	r1, #1
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d1f6      	bne.n	8016db4 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8016dc6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8016dca:	2b02      	cmp	r3, #2
 8016dcc:	d029      	beq.n	8016e22 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8016dce:	d820      	bhi.n	8016e12 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8016dd0:	428c      	cmp	r4, r1
 8016dd2:	d828      	bhi.n	8016e26 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8016dd4:	fab4 f284 	clz	r2, r4
 8016dd8:	0952      	lsrs	r2, r2, #5
 8016dda:	b324      	cbz	r4, 8016e26 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8016ddc:	b1dd      	cbz	r5, 8016e16 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8016dde:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8016de2:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8016de6:	e001      	b.n	8016dec <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8016de8:	686d      	ldr	r5, [r5, #4]
 8016dea:	b1ad      	cbz	r5, 8016e18 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8016dec:	68ab      	ldr	r3, [r5, #8]
 8016dee:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 8016df2:	4288      	cmp	r0, r1
 8016df4:	d1f8      	bne.n	8016de8 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8016df6:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 8016dfa:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8016dfe:	4561      	cmp	r1, ip
 8016e00:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016e04:	eb73 0e04 	sbcs.w	lr, r3, r4
 8016e08:	daee      	bge.n	8016de8 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8016e0a:	468c      	mov	ip, r1
 8016e0c:	461c      	mov	r4, r3
 8016e0e:	462a      	mov	r2, r5
 8016e10:	e7ea      	b.n	8016de8 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8016e12:	2b03      	cmp	r3, #3
 8016e14:	d0dc      	beq.n	8016dd0 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8016e16:	2200      	movs	r2, #0
 8016e18:	4610      	mov	r0, r2
 8016e1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016e1e:	b002      	add	sp, #8
 8016e20:	4770      	bx	lr
 8016e22:	428c      	cmp	r4, r1
 8016e24:	d905      	bls.n	8016e32 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8016e26:	4809      	ldr	r0, [pc, #36]	@ (8016e4c <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8016e28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016e2c:	b002      	add	sp, #8
 8016e2e:	f004 bdcf 	b.w	801b9d0 <get_memory>
 8016e32:	fab4 f284 	clz	r2, r4
 8016e36:	0952      	lsrs	r2, r2, #5
 8016e38:	2c00      	cmp	r4, #0
 8016e3a:	d1ed      	bne.n	8016e18 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8016e3c:	4803      	ldr	r0, [pc, #12]	@ (8016e4c <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8016e3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016e42:	b002      	add	sp, #8
 8016e44:	f004 bdc4 	b.w	801b9d0 <get_memory>
 8016e48:	4629      	mov	r1, r5
 8016e4a:	e7bc      	b.n	8016dc6 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8016e4c:	240692ac 	.word	0x240692ac

08016e50 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8016e50:	4b12      	ldr	r3, [pc, #72]	@ (8016e9c <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	b530      	push	{r4, r5, lr}
 8016e56:	b1f3      	cbz	r3, 8016e96 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8016e58:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8016e5c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8016e60:	2400      	movs	r4, #0
 8016e62:	e001      	b.n	8016e68 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8016e64:	685b      	ldr	r3, [r3, #4]
 8016e66:	b1a3      	cbz	r3, 8016e92 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8016e68:	689a      	ldr	r2, [r3, #8]
 8016e6a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8016e6e:	4288      	cmp	r0, r1
 8016e70:	d1f8      	bne.n	8016e64 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8016e72:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8016e76:	f502 6202 	add.w	r2, r2, #2080	@ 0x820
 8016e7a:	4571      	cmp	r1, lr
 8016e7c:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8016e80:	eb72 050c 	sbcs.w	r5, r2, ip
 8016e84:	daee      	bge.n	8016e64 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8016e86:	461c      	mov	r4, r3
 8016e88:	685b      	ldr	r3, [r3, #4]
 8016e8a:	468e      	mov	lr, r1
 8016e8c:	4694      	mov	ip, r2
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d1ea      	bne.n	8016e68 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8016e92:	4620      	mov	r0, r4
 8016e94:	bd30      	pop	{r4, r5, pc}
 8016e96:	461c      	mov	r4, r3
 8016e98:	4620      	mov	r0, r4
 8016e9a:	bd30      	pop	{r4, r5, pc}
 8016e9c:	240692ac 	.word	0x240692ac

08016ea0 <rmw_uxrce_clean_expired_static_input_buffer>:
 8016ea0:	4b3d      	ldr	r3, [pc, #244]	@ (8016f98 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8016ea2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ea6:	681f      	ldr	r7, [r3, #0]
 8016ea8:	ed2d 8b06 	vpush	{d8-d10}
 8016eac:	b08d      	sub	sp, #52	@ 0x34
 8016eae:	f004 fe4f 	bl	801bb50 <rmw_uros_epoch_nanos>
 8016eb2:	2f00      	cmp	r7, #0
 8016eb4:	d05d      	beq.n	8016f72 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8016eb6:	46b8      	mov	r8, r7
 8016eb8:	4681      	mov	r9, r0
 8016eba:	468a      	mov	sl, r1
 8016ebc:	ac04      	add	r4, sp, #16
 8016ebe:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016ec2:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8016ec6:	2b04      	cmp	r3, #4
 8016ec8:	ed9f 8b2d 	vldr	d8, [pc, #180]	@ 8016f80 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8016ecc:	ed9f ab2e 	vldr	d10, [pc, #184]	@ 8016f88 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8016ed0:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 8016f90 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8016ed4:	d03f      	beq.n	8016f56 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8016ed6:	2b05      	cmp	r3, #5
 8016ed8:	d044      	beq.n	8016f64 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8016eda:	2b03      	cmp	r3, #3
 8016edc:	d03b      	beq.n	8016f56 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8016ede:	ed8d 8b04 	vstr	d8, [sp, #16]
 8016ee2:	ed8d ab06 	vstr	d10, [sp, #24]
 8016ee6:	ab08      	add	r3, sp, #32
 8016ee8:	ed8d 8b08 	vstr	d8, [sp, #32]
 8016eec:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8016ef0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016ef2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016ef6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016efa:	f004 fbf9 	bl	801b6f0 <rmw_time_equal>
 8016efe:	b118      	cbz	r0, 8016f08 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8016f00:	ed8d 9b04 	vstr	d9, [sp, #16]
 8016f04:	ed8d 8b06 	vstr	d8, [sp, #24]
 8016f08:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8016f0c:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8016f10:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8016f14:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8016f18:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016f1c:	f004 fc3e 	bl	801b79c <rmw_time_total_nsec>
 8016f20:	1830      	adds	r0, r6, r0
 8016f22:	eb47 0101 	adc.w	r1, r7, r1
 8016f26:	4548      	cmp	r0, r9
 8016f28:	eb71 030a 	sbcs.w	r3, r1, sl
 8016f2c:	db05      	blt.n	8016f3a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8016f2e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8016f32:	4591      	cmp	r9, r2
 8016f34:	eb7a 0303 	sbcs.w	r3, sl, r3
 8016f38:	da03      	bge.n	8016f42 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8016f3a:	4641      	mov	r1, r8
 8016f3c:	4816      	ldr	r0, [pc, #88]	@ (8016f98 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8016f3e:	f004 fd57 	bl	801b9f0 <put_memory>
 8016f42:	f1bb 0f00 	cmp.w	fp, #0
 8016f46:	d014      	beq.n	8016f72 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8016f48:	46d8      	mov	r8, fp
 8016f4a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016f4e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8016f52:	2b04      	cmp	r3, #4
 8016f54:	d1bf      	bne.n	8016ed6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8016f56:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8016f5a:	3340      	adds	r3, #64	@ 0x40
 8016f5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016f5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016f62:	e7c0      	b.n	8016ee6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8016f64:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8016f68:	3348      	adds	r3, #72	@ 0x48
 8016f6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016f6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016f70:	e7b9      	b.n	8016ee6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8016f72:	b00d      	add	sp, #52	@ 0x34
 8016f74:	ecbd 8b06 	vpop	{d8-d10}
 8016f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f7c:	f3af 8000 	nop.w
	...
 8016f88:	00000001 	.word	0x00000001
 8016f8c:	00000000 	.word	0x00000000
 8016f90:	0000001e 	.word	0x0000001e
 8016f94:	00000000 	.word	0x00000000
 8016f98:	240692ac 	.word	0x240692ac

08016f9c <run_xrce_session>:
 8016f9c:	b510      	push	{r4, lr}
 8016f9e:	788c      	ldrb	r4, [r1, #2]
 8016fa0:	b086      	sub	sp, #24
 8016fa2:	2c01      	cmp	r4, #1
 8016fa4:	f8ad 200e 	strh.w	r2, [sp, #14]
 8016fa8:	d00c      	beq.n	8016fc4 <run_xrce_session+0x28>
 8016faa:	2401      	movs	r4, #1
 8016fac:	4619      	mov	r1, r3
 8016fae:	f10d 020e 	add.w	r2, sp, #14
 8016fb2:	f10d 0317 	add.w	r3, sp, #23
 8016fb6:	9400      	str	r4, [sp, #0]
 8016fb8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016fbc:	f001 fd90 	bl	8018ae0 <uxr_run_session_until_all_status>
 8016fc0:	b006      	add	sp, #24
 8016fc2:	bd10      	pop	{r4, pc}
 8016fc4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016fc8:	f001 f9ac 	bl	8018324 <uxr_flash_output_streams>
 8016fcc:	4620      	mov	r0, r4
 8016fce:	b006      	add	sp, #24
 8016fd0:	bd10      	pop	{r4, pc}
 8016fd2:	bf00      	nop

08016fd4 <convert_qos_profile>:
 8016fd4:	7a4a      	ldrb	r2, [r1, #9]
 8016fd6:	f891 c008 	ldrb.w	ip, [r1, #8]
 8016fda:	2a02      	cmp	r2, #2
 8016fdc:	bf18      	it	ne
 8016fde:	2200      	movne	r2, #0
 8016fe0:	7002      	strb	r2, [r0, #0]
 8016fe2:	f1ac 0202 	sub.w	r2, ip, #2
 8016fe6:	fab2 f282 	clz	r2, r2
 8016fea:	0952      	lsrs	r2, r2, #5
 8016fec:	7042      	strb	r2, [r0, #1]
 8016fee:	780a      	ldrb	r2, [r1, #0]
 8016ff0:	8889      	ldrh	r1, [r1, #4]
 8016ff2:	f1a2 0202 	sub.w	r2, r2, #2
 8016ff6:	8081      	strh	r1, [r0, #4]
 8016ff8:	fab2 f282 	clz	r2, r2
 8016ffc:	0952      	lsrs	r2, r2, #5
 8016ffe:	7082      	strb	r2, [r0, #2]
 8017000:	4770      	bx	lr
 8017002:	bf00      	nop

08017004 <generate_service_topics>:
 8017004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017006:	461d      	mov	r5, r3
 8017008:	b083      	sub	sp, #12
 801700a:	4606      	mov	r6, r0
 801700c:	4c11      	ldr	r4, [pc, #68]	@ (8017054 <generate_service_topics+0x50>)
 801700e:	4608      	mov	r0, r1
 8017010:	4b11      	ldr	r3, [pc, #68]	@ (8017058 <generate_service_topics+0x54>)
 8017012:	4617      	mov	r7, r2
 8017014:	4629      	mov	r1, r5
 8017016:	4a11      	ldr	r2, [pc, #68]	@ (801705c <generate_service_topics+0x58>)
 8017018:	9401      	str	r4, [sp, #4]
 801701a:	9600      	str	r6, [sp, #0]
 801701c:	f005 fedc 	bl	801cdd8 <sniprintf>
 8017020:	4a0f      	ldr	r2, [pc, #60]	@ (8017060 <generate_service_topics+0x5c>)
 8017022:	4604      	mov	r4, r0
 8017024:	4b0f      	ldr	r3, [pc, #60]	@ (8017064 <generate_service_topics+0x60>)
 8017026:	9201      	str	r2, [sp, #4]
 8017028:	4638      	mov	r0, r7
 801702a:	4a0c      	ldr	r2, [pc, #48]	@ (801705c <generate_service_topics+0x58>)
 801702c:	4629      	mov	r1, r5
 801702e:	9600      	str	r6, [sp, #0]
 8017030:	f005 fed2 	bl	801cdd8 <sniprintf>
 8017034:	2c00      	cmp	r4, #0
 8017036:	bfa8      	it	ge
 8017038:	42a5      	cmpge	r5, r4
 801703a:	bfcc      	ite	gt
 801703c:	2401      	movgt	r4, #1
 801703e:	2400      	movle	r4, #0
 8017040:	dd05      	ble.n	801704e <generate_service_topics+0x4a>
 8017042:	2800      	cmp	r0, #0
 8017044:	bfa8      	it	ge
 8017046:	4285      	cmpge	r5, r0
 8017048:	bfcc      	ite	gt
 801704a:	2401      	movgt	r4, #1
 801704c:	2400      	movle	r4, #0
 801704e:	4620      	mov	r0, r4
 8017050:	b003      	add	sp, #12
 8017052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017054:	08020268 	.word	0x08020268
 8017058:	08020264 	.word	0x08020264
 801705c:	08020248 	.word	0x08020248
 8017060:	0802025c 	.word	0x0802025c
 8017064:	08020258 	.word	0x08020258

08017068 <generate_service_types>:
 8017068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801706c:	4606      	mov	r6, r0
 801706e:	b087      	sub	sp, #28
 8017070:	461c      	mov	r4, r3
 8017072:	6883      	ldr	r3, [r0, #8]
 8017074:	460d      	mov	r5, r1
 8017076:	4617      	mov	r7, r2
 8017078:	4798      	blx	r3
 801707a:	68f3      	ldr	r3, [r6, #12]
 801707c:	4606      	mov	r6, r0
 801707e:	4798      	blx	r3
 8017080:	2300      	movs	r3, #0
 8017082:	f8d0 b004 	ldr.w	fp, [r0, #4]
 8017086:	6872      	ldr	r2, [r6, #4]
 8017088:	702b      	strb	r3, [r5, #0]
 801708a:	6813      	ldr	r3, [r2, #0]
 801708c:	2b00      	cmp	r3, #0
 801708e:	d03f      	beq.n	8017110 <generate_service_types+0xa8>
 8017090:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8017124 <generate_service_types+0xbc>
 8017094:	4649      	mov	r1, r9
 8017096:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 801712c <generate_service_types+0xc4>
 801709a:	4628      	mov	r0, r5
 801709c:	f8df a090 	ldr.w	sl, [pc, #144]	@ 8017130 <generate_service_types+0xc8>
 80170a0:	f8cd 8014 	str.w	r8, [sp, #20]
 80170a4:	6852      	ldr	r2, [r2, #4]
 80170a6:	9100      	str	r1, [sp, #0]
 80170a8:	4621      	mov	r1, r4
 80170aa:	f8cd 8008 	str.w	r8, [sp, #8]
 80170ae:	f8cd a004 	str.w	sl, [sp, #4]
 80170b2:	e9cd 9203 	strd	r9, r2, [sp, #12]
 80170b6:	4a1a      	ldr	r2, [pc, #104]	@ (8017120 <generate_service_types+0xb8>)
 80170b8:	f005 fe8e 	bl	801cdd8 <sniprintf>
 80170bc:	2300      	movs	r3, #0
 80170be:	42a0      	cmp	r0, r4
 80170c0:	ea6f 0600 	mvn.w	r6, r0
 80170c4:	703b      	strb	r3, [r7, #0]
 80170c6:	f8db 3000 	ldr.w	r3, [fp]
 80170ca:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 80170ce:	bfac      	ite	ge
 80170d0:	2500      	movge	r5, #0
 80170d2:	2501      	movlt	r5, #1
 80170d4:	b30b      	cbz	r3, 801711a <generate_service_types+0xb2>
 80170d6:	4a13      	ldr	r2, [pc, #76]	@ (8017124 <generate_service_types+0xbc>)
 80170d8:	f8cd 8014 	str.w	r8, [sp, #20]
 80170dc:	402e      	ands	r6, r5
 80170de:	f8db 1004 	ldr.w	r1, [fp, #4]
 80170e2:	4638      	mov	r0, r7
 80170e4:	9104      	str	r1, [sp, #16]
 80170e6:	4621      	mov	r1, r4
 80170e8:	e9cd 2a00 	strd	r2, sl, [sp]
 80170ec:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80170f0:	4a0b      	ldr	r2, [pc, #44]	@ (8017120 <generate_service_types+0xb8>)
 80170f2:	f005 fe71 	bl	801cdd8 <sniprintf>
 80170f6:	2800      	cmp	r0, #0
 80170f8:	bfb4      	ite	lt
 80170fa:	2600      	movlt	r6, #0
 80170fc:	f006 0601 	andge.w	r6, r6, #1
 8017100:	42a0      	cmp	r0, r4
 8017102:	bfac      	ite	ge
 8017104:	2000      	movge	r0, #0
 8017106:	f006 0001 	andlt.w	r0, r6, #1
 801710a:	b007      	add	sp, #28
 801710c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017110:	4b05      	ldr	r3, [pc, #20]	@ (8017128 <generate_service_types+0xc0>)
 8017112:	f8df 9010 	ldr.w	r9, [pc, #16]	@ 8017124 <generate_service_types+0xbc>
 8017116:	4619      	mov	r1, r3
 8017118:	e7bd      	b.n	8017096 <generate_service_types+0x2e>
 801711a:	4b03      	ldr	r3, [pc, #12]	@ (8017128 <generate_service_types+0xc0>)
 801711c:	461a      	mov	r2, r3
 801711e:	e7db      	b.n	80170d8 <generate_service_types+0x70>
 8017120:	08020240 	.word	0x08020240
 8017124:	0802023c 	.word	0x0802023c
 8017128:	080205c8 	.word	0x080205c8
 801712c:	08020250 	.word	0x08020250
 8017130:	08020254 	.word	0x08020254

08017134 <generate_type_name>:
 8017134:	2300      	movs	r3, #0
 8017136:	b530      	push	{r4, r5, lr}
 8017138:	700b      	strb	r3, [r1, #0]
 801713a:	b087      	sub	sp, #28
 801713c:	6803      	ldr	r3, [r0, #0]
 801713e:	4614      	mov	r4, r2
 8017140:	b1bb      	cbz	r3, 8017172 <generate_type_name+0x3e>
 8017142:	4a0e      	ldr	r2, [pc, #56]	@ (801717c <generate_type_name+0x48>)
 8017144:	4615      	mov	r5, r2
 8017146:	9500      	str	r5, [sp, #0]
 8017148:	9203      	str	r2, [sp, #12]
 801714a:	4d0d      	ldr	r5, [pc, #52]	@ (8017180 <generate_type_name+0x4c>)
 801714c:	6842      	ldr	r2, [r0, #4]
 801714e:	4608      	mov	r0, r1
 8017150:	490c      	ldr	r1, [pc, #48]	@ (8017184 <generate_type_name+0x50>)
 8017152:	9204      	str	r2, [sp, #16]
 8017154:	9105      	str	r1, [sp, #20]
 8017156:	9102      	str	r1, [sp, #8]
 8017158:	4621      	mov	r1, r4
 801715a:	4a0b      	ldr	r2, [pc, #44]	@ (8017188 <generate_type_name+0x54>)
 801715c:	9501      	str	r5, [sp, #4]
 801715e:	f005 fe3b 	bl	801cdd8 <sniprintf>
 8017162:	2800      	cmp	r0, #0
 8017164:	bfa8      	it	ge
 8017166:	4284      	cmpge	r4, r0
 8017168:	bfcc      	ite	gt
 801716a:	2001      	movgt	r0, #1
 801716c:	2000      	movle	r0, #0
 801716e:	b007      	add	sp, #28
 8017170:	bd30      	pop	{r4, r5, pc}
 8017172:	4b06      	ldr	r3, [pc, #24]	@ (801718c <generate_type_name+0x58>)
 8017174:	4a01      	ldr	r2, [pc, #4]	@ (801717c <generate_type_name+0x48>)
 8017176:	461d      	mov	r5, r3
 8017178:	e7e5      	b.n	8017146 <generate_type_name+0x12>
 801717a:	bf00      	nop
 801717c:	0802023c 	.word	0x0802023c
 8017180:	08020254 	.word	0x08020254
 8017184:	08020250 	.word	0x08020250
 8017188:	08020240 	.word	0x08020240
 801718c:	080205c8 	.word	0x080205c8

08017190 <generate_topic_name>:
 8017190:	b530      	push	{r4, r5, lr}
 8017192:	4614      	mov	r4, r2
 8017194:	b083      	sub	sp, #12
 8017196:	4605      	mov	r5, r0
 8017198:	4b07      	ldr	r3, [pc, #28]	@ (80171b8 <generate_topic_name+0x28>)
 801719a:	4a08      	ldr	r2, [pc, #32]	@ (80171bc <generate_topic_name+0x2c>)
 801719c:	4608      	mov	r0, r1
 801719e:	9500      	str	r5, [sp, #0]
 80171a0:	4621      	mov	r1, r4
 80171a2:	f005 fe19 	bl	801cdd8 <sniprintf>
 80171a6:	2800      	cmp	r0, #0
 80171a8:	bfa8      	it	ge
 80171aa:	4284      	cmpge	r4, r0
 80171ac:	bfcc      	ite	gt
 80171ae:	2001      	movgt	r0, #1
 80171b0:	2000      	movle	r0, #0
 80171b2:	b003      	add	sp, #12
 80171b4:	bd30      	pop	{r4, r5, pc}
 80171b6:	bf00      	nop
 80171b8:	08020270 	.word	0x08020270
 80171bc:	0801fc08 	.word	0x0801fc08

080171c0 <is_uxrce_rmw_identifier_valid>:
 80171c0:	b510      	push	{r4, lr}
 80171c2:	4604      	mov	r4, r0
 80171c4:	b140      	cbz	r0, 80171d8 <is_uxrce_rmw_identifier_valid+0x18>
 80171c6:	f7fe f949 	bl	801545c <rmw_get_implementation_identifier>
 80171ca:	4601      	mov	r1, r0
 80171cc:	4620      	mov	r0, r4
 80171ce:	f7e9 f887 	bl	80002e0 <strcmp>
 80171d2:	fab0 f080 	clz	r0, r0
 80171d6:	0940      	lsrs	r0, r0, #5
 80171d8:	bd10      	pop	{r4, pc}
 80171da:	bf00      	nop

080171dc <std_msgs__msg__Header__init>:
 80171dc:	b570      	push	{r4, r5, r6, lr}
 80171de:	4605      	mov	r5, r0
 80171e0:	b1a8      	cbz	r0, 801720e <std_msgs__msg__Header__init+0x32>
 80171e2:	f7fa fbf7 	bl	80119d4 <builtin_interfaces__msg__Time__init>
 80171e6:	4604      	mov	r4, r0
 80171e8:	b140      	cbz	r0, 80171fc <std_msgs__msg__Header__init+0x20>
 80171ea:	f105 0608 	add.w	r6, r5, #8
 80171ee:	4630      	mov	r0, r6
 80171f0:	f004 fcbc 	bl	801bb6c <rosidl_runtime_c__String__init>
 80171f4:	4604      	mov	r4, r0
 80171f6:	b168      	cbz	r0, 8017214 <std_msgs__msg__Header__init+0x38>
 80171f8:	4620      	mov	r0, r4
 80171fa:	bd70      	pop	{r4, r5, r6, pc}
 80171fc:	4628      	mov	r0, r5
 80171fe:	f7fa fbed 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 8017202:	f105 0008 	add.w	r0, r5, #8
 8017206:	f004 fcc7 	bl	801bb98 <rosidl_runtime_c__String__fini>
 801720a:	4620      	mov	r0, r4
 801720c:	bd70      	pop	{r4, r5, r6, pc}
 801720e:	4604      	mov	r4, r0
 8017210:	4620      	mov	r0, r4
 8017212:	bd70      	pop	{r4, r5, r6, pc}
 8017214:	4628      	mov	r0, r5
 8017216:	f7fa fbe1 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 801721a:	4630      	mov	r0, r6
 801721c:	f004 fcbc 	bl	801bb98 <rosidl_runtime_c__String__fini>
 8017220:	e7ea      	b.n	80171f8 <std_msgs__msg__Header__init+0x1c>
 8017222:	bf00      	nop

08017224 <std_msgs__msg__Header__fini>:
 8017224:	b148      	cbz	r0, 801723a <std_msgs__msg__Header__fini+0x16>
 8017226:	b510      	push	{r4, lr}
 8017228:	4604      	mov	r4, r0
 801722a:	f7fa fbd7 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 801722e:	f104 0008 	add.w	r0, r4, #8
 8017232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017236:	f004 bcaf 	b.w	801bb98 <rosidl_runtime_c__String__fini>
 801723a:	4770      	bx	lr

0801723c <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>:
 801723c:	b570      	push	{r4, r5, r6, lr}
 801723e:	4605      	mov	r5, r0
 8017240:	b1a8      	cbz	r0, 801726e <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x32>
 8017242:	f7ff ffcb 	bl	80171dc <std_msgs__msg__Header__init>
 8017246:	4604      	mov	r4, r0
 8017248:	b140      	cbz	r0, 801725c <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x20>
 801724a:	f105 0618 	add.w	r6, r5, #24
 801724e:	4630      	mov	r0, r6
 8017250:	f004 fcea 	bl	801bc28 <tier4_vehicle_msgs__msg__ActuationCommand__init>
 8017254:	4604      	mov	r4, r0
 8017256:	b168      	cbz	r0, 8017274 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x38>
 8017258:	4620      	mov	r0, r4
 801725a:	bd70      	pop	{r4, r5, r6, pc}
 801725c:	4628      	mov	r0, r5
 801725e:	f7ff ffe1 	bl	8017224 <std_msgs__msg__Header__fini>
 8017262:	f105 0018 	add.w	r0, r5, #24
 8017266:	f004 fce3 	bl	801bc30 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801726a:	4620      	mov	r0, r4
 801726c:	bd70      	pop	{r4, r5, r6, pc}
 801726e:	4604      	mov	r4, r0
 8017270:	4620      	mov	r0, r4
 8017272:	bd70      	pop	{r4, r5, r6, pc}
 8017274:	4628      	mov	r0, r5
 8017276:	f7ff ffd5 	bl	8017224 <std_msgs__msg__Header__fini>
 801727a:	4630      	mov	r0, r6
 801727c:	f004 fcd8 	bl	801bc30 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 8017280:	e7ea      	b.n	8017258 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x1c>
 8017282:	bf00      	nop

08017284 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>:
 8017284:	b148      	cbz	r0, 801729a <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini+0x16>
 8017286:	b510      	push	{r4, lr}
 8017288:	4604      	mov	r4, r0
 801728a:	f7ff ffcb 	bl	8017224 <std_msgs__msg__Header__fini>
 801728e:	f104 0018 	add.w	r0, r4, #24
 8017292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017296:	f004 bccb 	b.w	801bc30 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801729a:	4770      	bx	lr

0801729c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>:
 801729c:	b570      	push	{r4, r5, r6, lr}
 801729e:	4605      	mov	r5, r0
 80172a0:	b1a8      	cbz	r0, 80172ce <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x32>
 80172a2:	f7ff ff9b 	bl	80171dc <std_msgs__msg__Header__init>
 80172a6:	4604      	mov	r4, r0
 80172a8:	b140      	cbz	r0, 80172bc <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x20>
 80172aa:	f105 0618 	add.w	r6, r5, #24
 80172ae:	4630      	mov	r0, r6
 80172b0:	f004 fcc0 	bl	801bc34 <tier4_vehicle_msgs__msg__ActuationStatus__init>
 80172b4:	4604      	mov	r4, r0
 80172b6:	b168      	cbz	r0, 80172d4 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x38>
 80172b8:	4620      	mov	r0, r4
 80172ba:	bd70      	pop	{r4, r5, r6, pc}
 80172bc:	4628      	mov	r0, r5
 80172be:	f7ff ffb1 	bl	8017224 <std_msgs__msg__Header__fini>
 80172c2:	f105 0018 	add.w	r0, r5, #24
 80172c6:	f004 fcb9 	bl	801bc3c <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 80172ca:	4620      	mov	r0, r4
 80172cc:	bd70      	pop	{r4, r5, r6, pc}
 80172ce:	4604      	mov	r4, r0
 80172d0:	4620      	mov	r0, r4
 80172d2:	bd70      	pop	{r4, r5, r6, pc}
 80172d4:	4628      	mov	r0, r5
 80172d6:	f7ff ffa5 	bl	8017224 <std_msgs__msg__Header__fini>
 80172da:	4630      	mov	r0, r6
 80172dc:	f004 fcae 	bl	801bc3c <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 80172e0:	e7ea      	b.n	80172b8 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x1c>
 80172e2:	bf00      	nop

080172e4 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>:
 80172e4:	b148      	cbz	r0, 80172fa <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini+0x16>
 80172e6:	b510      	push	{r4, lr}
 80172e8:	4604      	mov	r4, r0
 80172ea:	f7ff ff9b 	bl	8017224 <std_msgs__msg__Header__fini>
 80172ee:	f104 0018 	add.w	r0, r4, #24
 80172f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80172f6:	f004 bca1 	b.w	801bc3c <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 80172fa:	4770      	bx	lr

080172fc <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>:
 80172fc:	b538      	push	{r3, r4, r5, lr}
 80172fe:	4604      	mov	r4, r0
 8017300:	b128      	cbz	r0, 801730e <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x12>
 8017302:	f7fa fb67 	bl	80119d4 <builtin_interfaces__msg__Time__init>
 8017306:	4605      	mov	r5, r0
 8017308:	b120      	cbz	r0, 8017314 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x18>
 801730a:	4628      	mov	r0, r5
 801730c:	bd38      	pop	{r3, r4, r5, pc}
 801730e:	4605      	mov	r5, r0
 8017310:	4628      	mov	r0, r5
 8017312:	bd38      	pop	{r3, r4, r5, pc}
 8017314:	4620      	mov	r0, r4
 8017316:	f7fa fb61 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 801731a:	4628      	mov	r0, r5
 801731c:	bd38      	pop	{r3, r4, r5, pc}
 801731e:	bf00      	nop

08017320 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>:
 8017320:	b108      	cbz	r0, 8017326 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini+0x6>
 8017322:	f7fa bb5b 	b.w	80119dc <builtin_interfaces__msg__Time__fini>
 8017326:	4770      	bx	lr

08017328 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>:
 8017328:	b538      	push	{r3, r4, r5, lr}
 801732a:	4604      	mov	r4, r0
 801732c:	b128      	cbz	r0, 801733a <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x12>
 801732e:	f7fa fb51 	bl	80119d4 <builtin_interfaces__msg__Time__init>
 8017332:	4605      	mov	r5, r0
 8017334:	b120      	cbz	r0, 8017340 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x18>
 8017336:	4628      	mov	r0, r5
 8017338:	bd38      	pop	{r3, r4, r5, pc}
 801733a:	4605      	mov	r5, r0
 801733c:	4628      	mov	r0, r5
 801733e:	bd38      	pop	{r3, r4, r5, pc}
 8017340:	4620      	mov	r0, r4
 8017342:	f7fa fb4b 	bl	80119dc <builtin_interfaces__msg__Time__fini>
 8017346:	4628      	mov	r0, r5
 8017348:	bd38      	pop	{r3, r4, r5, pc}
 801734a:	bf00      	nop

0801734c <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>:
 801734c:	b108      	cbz	r0, 8017352 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini+0x6>
 801734e:	f7fa bb45 	b.w	80119dc <builtin_interfaces__msg__Time__fini>
 8017352:	4770      	bx	lr

08017354 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_init_function>:
 8017354:	f004 bc68 	b.w	801bc28 <tier4_vehicle_msgs__msg__ActuationCommand__init>

08017358 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_fini_function>:
 8017358:	f004 bc6a 	b.w	801bc30 <tier4_vehicle_msgs__msg__ActuationCommand__fini>

0801735c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 801735c:	4b04      	ldr	r3, [pc, #16]	@ (8017370 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801735e:	681a      	ldr	r2, [r3, #0]
 8017360:	b10a      	cbz	r2, 8017366 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0xa>
 8017362:	4803      	ldr	r0, [pc, #12]	@ (8017370 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 8017364:	4770      	bx	lr
 8017366:	4a03      	ldr	r2, [pc, #12]	@ (8017374 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x18>)
 8017368:	4801      	ldr	r0, [pc, #4]	@ (8017370 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801736a:	6812      	ldr	r2, [r2, #0]
 801736c:	601a      	str	r2, [r3, #0]
 801736e:	4770      	bx	lr
 8017370:	24001278 	.word	0x24001278
 8017374:	24000e14 	.word	0x24000e14

08017378 <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_init_function>:
 8017378:	f004 bc5c 	b.w	801bc34 <tier4_vehicle_msgs__msg__ActuationStatus__init>

0801737c <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_fini_function>:
 801737c:	f004 bc5e 	b.w	801bc3c <tier4_vehicle_msgs__msg__ActuationStatus__fini>

08017380 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 8017380:	4b04      	ldr	r3, [pc, #16]	@ (8017394 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 8017382:	681a      	ldr	r2, [r3, #0]
 8017384:	b10a      	cbz	r2, 801738a <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0xa>
 8017386:	4803      	ldr	r0, [pc, #12]	@ (8017394 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 8017388:	4770      	bx	lr
 801738a:	4a03      	ldr	r2, [pc, #12]	@ (8017398 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x18>)
 801738c:	4801      	ldr	r0, [pc, #4]	@ (8017394 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801738e:	6812      	ldr	r2, [r2, #0]
 8017390:	601a      	str	r2, [r3, #0]
 8017392:	4770      	bx	lr
 8017394:	24001338 	.word	0x24001338
 8017398:	24000e14 	.word	0x24000e14

0801739c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 801739c:	b1b8      	cbz	r0, 80173ce <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand+0x32>
 801739e:	b538      	push	{r3, r4, r5, lr}
 80173a0:	460d      	mov	r5, r1
 80173a2:	2108      	movs	r1, #8
 80173a4:	4628      	mov	r0, r5
 80173a6:	f7f8 fce1 	bl	800fd6c <ucdr_alignment>
 80173aa:	f105 0308 	add.w	r3, r5, #8
 80173ae:	2108      	movs	r1, #8
 80173b0:	f1c5 0508 	rsb	r5, r5, #8
 80173b4:	181c      	adds	r4, r3, r0
 80173b6:	4620      	mov	r0, r4
 80173b8:	f7f8 fcd8 	bl	800fd6c <ucdr_alignment>
 80173bc:	2108      	movs	r1, #8
 80173be:	4408      	add	r0, r1
 80173c0:	4404      	add	r4, r0
 80173c2:	4620      	mov	r0, r4
 80173c4:	f7f8 fcd2 	bl	800fd6c <ucdr_alignment>
 80173c8:	4428      	add	r0, r5
 80173ca:	4420      	add	r0, r4
 80173cc:	bd38      	pop	{r3, r4, r5, pc}
 80173ce:	4770      	bx	lr

080173d0 <_ActuationCommand__cdr_deserialize>:
 80173d0:	b538      	push	{r3, r4, r5, lr}
 80173d2:	460c      	mov	r4, r1
 80173d4:	b171      	cbz	r1, 80173f4 <_ActuationCommand__cdr_deserialize+0x24>
 80173d6:	4605      	mov	r5, r0
 80173d8:	f7f8 fbaa 	bl	800fb30 <ucdr_deserialize_double>
 80173dc:	f104 0108 	add.w	r1, r4, #8
 80173e0:	4628      	mov	r0, r5
 80173e2:	f7f8 fba5 	bl	800fb30 <ucdr_deserialize_double>
 80173e6:	f104 0110 	add.w	r1, r4, #16
 80173ea:	4628      	mov	r0, r5
 80173ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80173f0:	f7f8 bb9e 	b.w	800fb30 <ucdr_deserialize_double>
 80173f4:	4608      	mov	r0, r1
 80173f6:	bd38      	pop	{r3, r4, r5, pc}

080173f8 <_ActuationCommand__cdr_serialize>:
 80173f8:	b198      	cbz	r0, 8017422 <_ActuationCommand__cdr_serialize+0x2a>
 80173fa:	b538      	push	{r3, r4, r5, lr}
 80173fc:	460d      	mov	r5, r1
 80173fe:	4604      	mov	r4, r0
 8017400:	ed90 0b00 	vldr	d0, [r0]
 8017404:	4608      	mov	r0, r1
 8017406:	f7f8 fac3 	bl	800f990 <ucdr_serialize_double>
 801740a:	4628      	mov	r0, r5
 801740c:	ed94 0b02 	vldr	d0, [r4, #8]
 8017410:	f7f8 fabe 	bl	800f990 <ucdr_serialize_double>
 8017414:	4628      	mov	r0, r5
 8017416:	ed94 0b04 	vldr	d0, [r4, #16]
 801741a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801741e:	f7f8 bab7 	b.w	800f990 <ucdr_serialize_double>
 8017422:	4770      	bx	lr

08017424 <_ActuationCommand__get_serialized_size>:
 8017424:	b190      	cbz	r0, 801744c <_ActuationCommand__get_serialized_size+0x28>
 8017426:	2108      	movs	r1, #8
 8017428:	2000      	movs	r0, #0
 801742a:	b510      	push	{r4, lr}
 801742c:	f7f8 fc9e 	bl	800fd6c <ucdr_alignment>
 8017430:	2108      	movs	r1, #8
 8017432:	1844      	adds	r4, r0, r1
 8017434:	4620      	mov	r0, r4
 8017436:	f7f8 fc99 	bl	800fd6c <ucdr_alignment>
 801743a:	2108      	movs	r1, #8
 801743c:	4408      	add	r0, r1
 801743e:	4404      	add	r4, r0
 8017440:	4620      	mov	r0, r4
 8017442:	f7f8 fc93 	bl	800fd6c <ucdr_alignment>
 8017446:	3008      	adds	r0, #8
 8017448:	4420      	add	r0, r4
 801744a:	bd10      	pop	{r4, pc}
 801744c:	4770      	bx	lr
 801744e:	bf00      	nop

08017450 <_ActuationCommand__max_serialized_size>:
 8017450:	b538      	push	{r3, r4, r5, lr}
 8017452:	2108      	movs	r1, #8
 8017454:	2000      	movs	r0, #0
 8017456:	f7f8 fc89 	bl	800fd6c <ucdr_alignment>
 801745a:	2108      	movs	r1, #8
 801745c:	1845      	adds	r5, r0, r1
 801745e:	4628      	mov	r0, r5
 8017460:	f7f8 fc84 	bl	800fd6c <ucdr_alignment>
 8017464:	2108      	movs	r1, #8
 8017466:	1844      	adds	r4, r0, r1
 8017468:	442c      	add	r4, r5
 801746a:	4620      	mov	r0, r4
 801746c:	f7f8 fc7e 	bl	800fd6c <ucdr_alignment>
 8017470:	3008      	adds	r0, #8
 8017472:	4420      	add	r0, r4
 8017474:	bd38      	pop	{r3, r4, r5, pc}
 8017476:	bf00      	nop

08017478 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 8017478:	b570      	push	{r4, r5, r6, lr}
 801747a:	460c      	mov	r4, r1
 801747c:	2301      	movs	r3, #1
 801747e:	2108      	movs	r1, #8
 8017480:	f104 0508 	add.w	r5, r4, #8
 8017484:	7003      	strb	r3, [r0, #0]
 8017486:	4620      	mov	r0, r4
 8017488:	f1c4 0408 	rsb	r4, r4, #8
 801748c:	f7f8 fc6e 	bl	800fd6c <ucdr_alignment>
 8017490:	1946      	adds	r6, r0, r5
 8017492:	2108      	movs	r1, #8
 8017494:	4630      	mov	r0, r6
 8017496:	f7f8 fc69 	bl	800fd6c <ucdr_alignment>
 801749a:	2108      	movs	r1, #8
 801749c:	1845      	adds	r5, r0, r1
 801749e:	4435      	add	r5, r6
 80174a0:	4628      	mov	r0, r5
 80174a2:	f7f8 fc63 	bl	800fd6c <ucdr_alignment>
 80174a6:	4420      	add	r0, r4
 80174a8:	4428      	add	r0, r5
 80174aa:	bd70      	pop	{r4, r5, r6, pc}

080174ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 80174ac:	4800      	ldr	r0, [pc, #0]	@ (80174b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x4>)
 80174ae:	4770      	bx	lr
 80174b0:	24001344 	.word	0x24001344

080174b4 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 80174b4:	b1b8      	cbz	r0, 80174e6 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus+0x32>
 80174b6:	b538      	push	{r3, r4, r5, lr}
 80174b8:	460d      	mov	r5, r1
 80174ba:	2108      	movs	r1, #8
 80174bc:	4628      	mov	r0, r5
 80174be:	f7f8 fc55 	bl	800fd6c <ucdr_alignment>
 80174c2:	f105 0308 	add.w	r3, r5, #8
 80174c6:	2108      	movs	r1, #8
 80174c8:	f1c5 0508 	rsb	r5, r5, #8
 80174cc:	181c      	adds	r4, r3, r0
 80174ce:	4620      	mov	r0, r4
 80174d0:	f7f8 fc4c 	bl	800fd6c <ucdr_alignment>
 80174d4:	2108      	movs	r1, #8
 80174d6:	4408      	add	r0, r1
 80174d8:	4404      	add	r4, r0
 80174da:	4620      	mov	r0, r4
 80174dc:	f7f8 fc46 	bl	800fd6c <ucdr_alignment>
 80174e0:	4428      	add	r0, r5
 80174e2:	4420      	add	r0, r4
 80174e4:	bd38      	pop	{r3, r4, r5, pc}
 80174e6:	4770      	bx	lr

080174e8 <_ActuationStatus__cdr_deserialize>:
 80174e8:	b538      	push	{r3, r4, r5, lr}
 80174ea:	460c      	mov	r4, r1
 80174ec:	b171      	cbz	r1, 801750c <_ActuationStatus__cdr_deserialize+0x24>
 80174ee:	4605      	mov	r5, r0
 80174f0:	f7f8 fb1e 	bl	800fb30 <ucdr_deserialize_double>
 80174f4:	f104 0108 	add.w	r1, r4, #8
 80174f8:	4628      	mov	r0, r5
 80174fa:	f7f8 fb19 	bl	800fb30 <ucdr_deserialize_double>
 80174fe:	f104 0110 	add.w	r1, r4, #16
 8017502:	4628      	mov	r0, r5
 8017504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017508:	f7f8 bb12 	b.w	800fb30 <ucdr_deserialize_double>
 801750c:	4608      	mov	r0, r1
 801750e:	bd38      	pop	{r3, r4, r5, pc}

08017510 <_ActuationStatus__cdr_serialize>:
 8017510:	b198      	cbz	r0, 801753a <_ActuationStatus__cdr_serialize+0x2a>
 8017512:	b538      	push	{r3, r4, r5, lr}
 8017514:	460d      	mov	r5, r1
 8017516:	4604      	mov	r4, r0
 8017518:	ed90 0b00 	vldr	d0, [r0]
 801751c:	4608      	mov	r0, r1
 801751e:	f7f8 fa37 	bl	800f990 <ucdr_serialize_double>
 8017522:	4628      	mov	r0, r5
 8017524:	ed94 0b02 	vldr	d0, [r4, #8]
 8017528:	f7f8 fa32 	bl	800f990 <ucdr_serialize_double>
 801752c:	4628      	mov	r0, r5
 801752e:	ed94 0b04 	vldr	d0, [r4, #16]
 8017532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017536:	f7f8 ba2b 	b.w	800f990 <ucdr_serialize_double>
 801753a:	4770      	bx	lr

0801753c <_ActuationStatus__get_serialized_size>:
 801753c:	b190      	cbz	r0, 8017564 <_ActuationStatus__get_serialized_size+0x28>
 801753e:	2108      	movs	r1, #8
 8017540:	2000      	movs	r0, #0
 8017542:	b510      	push	{r4, lr}
 8017544:	f7f8 fc12 	bl	800fd6c <ucdr_alignment>
 8017548:	2108      	movs	r1, #8
 801754a:	1844      	adds	r4, r0, r1
 801754c:	4620      	mov	r0, r4
 801754e:	f7f8 fc0d 	bl	800fd6c <ucdr_alignment>
 8017552:	2108      	movs	r1, #8
 8017554:	4408      	add	r0, r1
 8017556:	4404      	add	r4, r0
 8017558:	4620      	mov	r0, r4
 801755a:	f7f8 fc07 	bl	800fd6c <ucdr_alignment>
 801755e:	3008      	adds	r0, #8
 8017560:	4420      	add	r0, r4
 8017562:	bd10      	pop	{r4, pc}
 8017564:	4770      	bx	lr
 8017566:	bf00      	nop

08017568 <_ActuationStatus__max_serialized_size>:
 8017568:	b538      	push	{r3, r4, r5, lr}
 801756a:	2108      	movs	r1, #8
 801756c:	2000      	movs	r0, #0
 801756e:	f7f8 fbfd 	bl	800fd6c <ucdr_alignment>
 8017572:	2108      	movs	r1, #8
 8017574:	1845      	adds	r5, r0, r1
 8017576:	4628      	mov	r0, r5
 8017578:	f7f8 fbf8 	bl	800fd6c <ucdr_alignment>
 801757c:	2108      	movs	r1, #8
 801757e:	1844      	adds	r4, r0, r1
 8017580:	442c      	add	r4, r5
 8017582:	4620      	mov	r0, r4
 8017584:	f7f8 fbf2 	bl	800fd6c <ucdr_alignment>
 8017588:	3008      	adds	r0, #8
 801758a:	4420      	add	r0, r4
 801758c:	bd38      	pop	{r3, r4, r5, pc}
 801758e:	bf00      	nop

08017590 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 8017590:	b570      	push	{r4, r5, r6, lr}
 8017592:	460c      	mov	r4, r1
 8017594:	2301      	movs	r3, #1
 8017596:	2108      	movs	r1, #8
 8017598:	f104 0508 	add.w	r5, r4, #8
 801759c:	7003      	strb	r3, [r0, #0]
 801759e:	4620      	mov	r0, r4
 80175a0:	f1c4 0408 	rsb	r4, r4, #8
 80175a4:	f7f8 fbe2 	bl	800fd6c <ucdr_alignment>
 80175a8:	1946      	adds	r6, r0, r5
 80175aa:	2108      	movs	r1, #8
 80175ac:	4630      	mov	r0, r6
 80175ae:	f7f8 fbdd 	bl	800fd6c <ucdr_alignment>
 80175b2:	2108      	movs	r1, #8
 80175b4:	1845      	adds	r5, r0, r1
 80175b6:	4435      	add	r5, r6
 80175b8:	4628      	mov	r0, r5
 80175ba:	f7f8 fbd7 	bl	800fd6c <ucdr_alignment>
 80175be:	4420      	add	r0, r4
 80175c0:	4428      	add	r0, r5
 80175c2:	bd70      	pop	{r4, r5, r6, pc}

080175c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 80175c4:	4800      	ldr	r0, [pc, #0]	@ (80175c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x4>)
 80175c6:	4770      	bx	lr
 80175c8:	2400136c 	.word	0x2400136c

080175cc <ucdr_serialize_endian_array_char>:
 80175cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175d0:	4619      	mov	r1, r3
 80175d2:	461f      	mov	r7, r3
 80175d4:	4605      	mov	r5, r0
 80175d6:	4690      	mov	r8, r2
 80175d8:	f7f8 fb70 	bl	800fcbc <ucdr_check_buffer_available_for>
 80175dc:	b9e0      	cbnz	r0, 8017618 <ucdr_serialize_endian_array_char+0x4c>
 80175de:	463e      	mov	r6, r7
 80175e0:	e00b      	b.n	80175fa <ucdr_serialize_endian_array_char+0x2e>
 80175e2:	4441      	add	r1, r8
 80175e4:	68a8      	ldr	r0, [r5, #8]
 80175e6:	4622      	mov	r2, r4
 80175e8:	1b36      	subs	r6, r6, r4
 80175ea:	f005 fe82 	bl	801d2f2 <memcpy>
 80175ee:	68ab      	ldr	r3, [r5, #8]
 80175f0:	6928      	ldr	r0, [r5, #16]
 80175f2:	4423      	add	r3, r4
 80175f4:	4420      	add	r0, r4
 80175f6:	60ab      	str	r3, [r5, #8]
 80175f8:	6128      	str	r0, [r5, #16]
 80175fa:	4631      	mov	r1, r6
 80175fc:	2201      	movs	r2, #1
 80175fe:	4628      	mov	r0, r5
 8017600:	f7f8 fbe6 	bl	800fdd0 <ucdr_check_final_buffer_behavior_array>
 8017604:	1bb9      	subs	r1, r7, r6
 8017606:	4604      	mov	r4, r0
 8017608:	2800      	cmp	r0, #0
 801760a:	d1ea      	bne.n	80175e2 <ucdr_serialize_endian_array_char+0x16>
 801760c:	2301      	movs	r3, #1
 801760e:	7da8      	ldrb	r0, [r5, #22]
 8017610:	756b      	strb	r3, [r5, #21]
 8017612:	4058      	eors	r0, r3
 8017614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017618:	463a      	mov	r2, r7
 801761a:	4641      	mov	r1, r8
 801761c:	68a8      	ldr	r0, [r5, #8]
 801761e:	f005 fe68 	bl	801d2f2 <memcpy>
 8017622:	68aa      	ldr	r2, [r5, #8]
 8017624:	692b      	ldr	r3, [r5, #16]
 8017626:	443a      	add	r2, r7
 8017628:	443b      	add	r3, r7
 801762a:	60aa      	str	r2, [r5, #8]
 801762c:	612b      	str	r3, [r5, #16]
 801762e:	e7ed      	b.n	801760c <ucdr_serialize_endian_array_char+0x40>

08017630 <ucdr_deserialize_endian_array_char>:
 8017630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017634:	4619      	mov	r1, r3
 8017636:	461f      	mov	r7, r3
 8017638:	4605      	mov	r5, r0
 801763a:	4690      	mov	r8, r2
 801763c:	f7f8 fb3e 	bl	800fcbc <ucdr_check_buffer_available_for>
 8017640:	b9e8      	cbnz	r0, 801767e <ucdr_deserialize_endian_array_char+0x4e>
 8017642:	463e      	mov	r6, r7
 8017644:	e00c      	b.n	8017660 <ucdr_deserialize_endian_array_char+0x30>
 8017646:	eb08 0003 	add.w	r0, r8, r3
 801764a:	68a9      	ldr	r1, [r5, #8]
 801764c:	4622      	mov	r2, r4
 801764e:	1b36      	subs	r6, r6, r4
 8017650:	f005 fe4f 	bl	801d2f2 <memcpy>
 8017654:	68ab      	ldr	r3, [r5, #8]
 8017656:	6928      	ldr	r0, [r5, #16]
 8017658:	4423      	add	r3, r4
 801765a:	4420      	add	r0, r4
 801765c:	60ab      	str	r3, [r5, #8]
 801765e:	6128      	str	r0, [r5, #16]
 8017660:	4631      	mov	r1, r6
 8017662:	2201      	movs	r2, #1
 8017664:	4628      	mov	r0, r5
 8017666:	f7f8 fbb3 	bl	800fdd0 <ucdr_check_final_buffer_behavior_array>
 801766a:	1bbb      	subs	r3, r7, r6
 801766c:	4604      	mov	r4, r0
 801766e:	2800      	cmp	r0, #0
 8017670:	d1e9      	bne.n	8017646 <ucdr_deserialize_endian_array_char+0x16>
 8017672:	2301      	movs	r3, #1
 8017674:	7da8      	ldrb	r0, [r5, #22]
 8017676:	756b      	strb	r3, [r5, #21]
 8017678:	4058      	eors	r0, r3
 801767a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801767e:	463a      	mov	r2, r7
 8017680:	68a9      	ldr	r1, [r5, #8]
 8017682:	4640      	mov	r0, r8
 8017684:	f005 fe35 	bl	801d2f2 <memcpy>
 8017688:	68aa      	ldr	r2, [r5, #8]
 801768a:	692b      	ldr	r3, [r5, #16]
 801768c:	443a      	add	r2, r7
 801768e:	443b      	add	r3, r7
 8017690:	60aa      	str	r2, [r5, #8]
 8017692:	612b      	str	r3, [r5, #16]
 8017694:	e7ed      	b.n	8017672 <ucdr_deserialize_endian_array_char+0x42>
 8017696:	bf00      	nop

08017698 <ucdr_serialize_array_uint8_t>:
 8017698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801769c:	4688      	mov	r8, r1
 801769e:	4611      	mov	r1, r2
 80176a0:	4617      	mov	r7, r2
 80176a2:	4605      	mov	r5, r0
 80176a4:	f7f8 fb0a 	bl	800fcbc <ucdr_check_buffer_available_for>
 80176a8:	b9e0      	cbnz	r0, 80176e4 <ucdr_serialize_array_uint8_t+0x4c>
 80176aa:	463e      	mov	r6, r7
 80176ac:	e00b      	b.n	80176c6 <ucdr_serialize_array_uint8_t+0x2e>
 80176ae:	4441      	add	r1, r8
 80176b0:	68a8      	ldr	r0, [r5, #8]
 80176b2:	4622      	mov	r2, r4
 80176b4:	1b36      	subs	r6, r6, r4
 80176b6:	f005 fe1c 	bl	801d2f2 <memcpy>
 80176ba:	68ab      	ldr	r3, [r5, #8]
 80176bc:	6928      	ldr	r0, [r5, #16]
 80176be:	4423      	add	r3, r4
 80176c0:	4420      	add	r0, r4
 80176c2:	60ab      	str	r3, [r5, #8]
 80176c4:	6128      	str	r0, [r5, #16]
 80176c6:	4631      	mov	r1, r6
 80176c8:	2201      	movs	r2, #1
 80176ca:	4628      	mov	r0, r5
 80176cc:	f7f8 fb80 	bl	800fdd0 <ucdr_check_final_buffer_behavior_array>
 80176d0:	1bb9      	subs	r1, r7, r6
 80176d2:	4604      	mov	r4, r0
 80176d4:	2800      	cmp	r0, #0
 80176d6:	d1ea      	bne.n	80176ae <ucdr_serialize_array_uint8_t+0x16>
 80176d8:	2301      	movs	r3, #1
 80176da:	7da8      	ldrb	r0, [r5, #22]
 80176dc:	756b      	strb	r3, [r5, #21]
 80176de:	4058      	eors	r0, r3
 80176e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176e4:	463a      	mov	r2, r7
 80176e6:	4641      	mov	r1, r8
 80176e8:	68a8      	ldr	r0, [r5, #8]
 80176ea:	f005 fe02 	bl	801d2f2 <memcpy>
 80176ee:	68aa      	ldr	r2, [r5, #8]
 80176f0:	692b      	ldr	r3, [r5, #16]
 80176f2:	443a      	add	r2, r7
 80176f4:	443b      	add	r3, r7
 80176f6:	60aa      	str	r2, [r5, #8]
 80176f8:	612b      	str	r3, [r5, #16]
 80176fa:	e7ed      	b.n	80176d8 <ucdr_serialize_array_uint8_t+0x40>

080176fc <ucdr_serialize_endian_array_uint8_t>:
 80176fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017700:	4619      	mov	r1, r3
 8017702:	461f      	mov	r7, r3
 8017704:	4605      	mov	r5, r0
 8017706:	4690      	mov	r8, r2
 8017708:	f7f8 fad8 	bl	800fcbc <ucdr_check_buffer_available_for>
 801770c:	b9e0      	cbnz	r0, 8017748 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801770e:	463e      	mov	r6, r7
 8017710:	e00b      	b.n	801772a <ucdr_serialize_endian_array_uint8_t+0x2e>
 8017712:	4441      	add	r1, r8
 8017714:	68a8      	ldr	r0, [r5, #8]
 8017716:	4622      	mov	r2, r4
 8017718:	1b36      	subs	r6, r6, r4
 801771a:	f005 fdea 	bl	801d2f2 <memcpy>
 801771e:	68ab      	ldr	r3, [r5, #8]
 8017720:	6928      	ldr	r0, [r5, #16]
 8017722:	4423      	add	r3, r4
 8017724:	4420      	add	r0, r4
 8017726:	60ab      	str	r3, [r5, #8]
 8017728:	6128      	str	r0, [r5, #16]
 801772a:	4631      	mov	r1, r6
 801772c:	2201      	movs	r2, #1
 801772e:	4628      	mov	r0, r5
 8017730:	f7f8 fb4e 	bl	800fdd0 <ucdr_check_final_buffer_behavior_array>
 8017734:	1bb9      	subs	r1, r7, r6
 8017736:	4604      	mov	r4, r0
 8017738:	2800      	cmp	r0, #0
 801773a:	d1ea      	bne.n	8017712 <ucdr_serialize_endian_array_uint8_t+0x16>
 801773c:	2301      	movs	r3, #1
 801773e:	7da8      	ldrb	r0, [r5, #22]
 8017740:	756b      	strb	r3, [r5, #21]
 8017742:	4058      	eors	r0, r3
 8017744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017748:	463a      	mov	r2, r7
 801774a:	4641      	mov	r1, r8
 801774c:	68a8      	ldr	r0, [r5, #8]
 801774e:	f005 fdd0 	bl	801d2f2 <memcpy>
 8017752:	68aa      	ldr	r2, [r5, #8]
 8017754:	692b      	ldr	r3, [r5, #16]
 8017756:	443a      	add	r2, r7
 8017758:	443b      	add	r3, r7
 801775a:	60aa      	str	r2, [r5, #8]
 801775c:	612b      	str	r3, [r5, #16]
 801775e:	e7ed      	b.n	801773c <ucdr_serialize_endian_array_uint8_t+0x40>

08017760 <ucdr_deserialize_array_uint8_t>:
 8017760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017764:	4688      	mov	r8, r1
 8017766:	4611      	mov	r1, r2
 8017768:	4617      	mov	r7, r2
 801776a:	4605      	mov	r5, r0
 801776c:	f7f8 faa6 	bl	800fcbc <ucdr_check_buffer_available_for>
 8017770:	b9e8      	cbnz	r0, 80177ae <ucdr_deserialize_array_uint8_t+0x4e>
 8017772:	463e      	mov	r6, r7
 8017774:	e00c      	b.n	8017790 <ucdr_deserialize_array_uint8_t+0x30>
 8017776:	eb08 0003 	add.w	r0, r8, r3
 801777a:	68a9      	ldr	r1, [r5, #8]
 801777c:	4622      	mov	r2, r4
 801777e:	1b36      	subs	r6, r6, r4
 8017780:	f005 fdb7 	bl	801d2f2 <memcpy>
 8017784:	68ab      	ldr	r3, [r5, #8]
 8017786:	6928      	ldr	r0, [r5, #16]
 8017788:	4423      	add	r3, r4
 801778a:	4420      	add	r0, r4
 801778c:	60ab      	str	r3, [r5, #8]
 801778e:	6128      	str	r0, [r5, #16]
 8017790:	4631      	mov	r1, r6
 8017792:	2201      	movs	r2, #1
 8017794:	4628      	mov	r0, r5
 8017796:	f7f8 fb1b 	bl	800fdd0 <ucdr_check_final_buffer_behavior_array>
 801779a:	1bbb      	subs	r3, r7, r6
 801779c:	4604      	mov	r4, r0
 801779e:	2800      	cmp	r0, #0
 80177a0:	d1e9      	bne.n	8017776 <ucdr_deserialize_array_uint8_t+0x16>
 80177a2:	2301      	movs	r3, #1
 80177a4:	7da8      	ldrb	r0, [r5, #22]
 80177a6:	756b      	strb	r3, [r5, #21]
 80177a8:	4058      	eors	r0, r3
 80177aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177ae:	463a      	mov	r2, r7
 80177b0:	68a9      	ldr	r1, [r5, #8]
 80177b2:	4640      	mov	r0, r8
 80177b4:	f005 fd9d 	bl	801d2f2 <memcpy>
 80177b8:	68aa      	ldr	r2, [r5, #8]
 80177ba:	692b      	ldr	r3, [r5, #16]
 80177bc:	443a      	add	r2, r7
 80177be:	443b      	add	r3, r7
 80177c0:	60aa      	str	r2, [r5, #8]
 80177c2:	612b      	str	r3, [r5, #16]
 80177c4:	e7ed      	b.n	80177a2 <ucdr_deserialize_array_uint8_t+0x42>
 80177c6:	bf00      	nop

080177c8 <ucdr_deserialize_endian_array_uint8_t>:
 80177c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177cc:	4619      	mov	r1, r3
 80177ce:	461f      	mov	r7, r3
 80177d0:	4605      	mov	r5, r0
 80177d2:	4690      	mov	r8, r2
 80177d4:	f7f8 fa72 	bl	800fcbc <ucdr_check_buffer_available_for>
 80177d8:	b9e8      	cbnz	r0, 8017816 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 80177da:	463e      	mov	r6, r7
 80177dc:	e00c      	b.n	80177f8 <ucdr_deserialize_endian_array_uint8_t+0x30>
 80177de:	eb08 0003 	add.w	r0, r8, r3
 80177e2:	68a9      	ldr	r1, [r5, #8]
 80177e4:	4622      	mov	r2, r4
 80177e6:	1b36      	subs	r6, r6, r4
 80177e8:	f005 fd83 	bl	801d2f2 <memcpy>
 80177ec:	68ab      	ldr	r3, [r5, #8]
 80177ee:	6928      	ldr	r0, [r5, #16]
 80177f0:	4423      	add	r3, r4
 80177f2:	4420      	add	r0, r4
 80177f4:	60ab      	str	r3, [r5, #8]
 80177f6:	6128      	str	r0, [r5, #16]
 80177f8:	4631      	mov	r1, r6
 80177fa:	2201      	movs	r2, #1
 80177fc:	4628      	mov	r0, r5
 80177fe:	f7f8 fae7 	bl	800fdd0 <ucdr_check_final_buffer_behavior_array>
 8017802:	1bbb      	subs	r3, r7, r6
 8017804:	4604      	mov	r4, r0
 8017806:	2800      	cmp	r0, #0
 8017808:	d1e9      	bne.n	80177de <ucdr_deserialize_endian_array_uint8_t+0x16>
 801780a:	2301      	movs	r3, #1
 801780c:	7da8      	ldrb	r0, [r5, #22]
 801780e:	756b      	strb	r3, [r5, #21]
 8017810:	4058      	eors	r0, r3
 8017812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017816:	463a      	mov	r2, r7
 8017818:	68a9      	ldr	r1, [r5, #8]
 801781a:	4640      	mov	r0, r8
 801781c:	f005 fd69 	bl	801d2f2 <memcpy>
 8017820:	68aa      	ldr	r2, [r5, #8]
 8017822:	692b      	ldr	r3, [r5, #16]
 8017824:	443a      	add	r2, r7
 8017826:	443b      	add	r3, r7
 8017828:	60aa      	str	r2, [r5, #8]
 801782a:	612b      	str	r3, [r5, #16]
 801782c:	e7ed      	b.n	801780a <ucdr_deserialize_endian_array_uint8_t+0x42>
 801782e:	bf00      	nop

08017830 <uxr_buffer_delete_entity>:
 8017830:	b510      	push	{r4, lr}
 8017832:	2300      	movs	r3, #0
 8017834:	b08e      	sub	sp, #56	@ 0x38
 8017836:	4604      	mov	r4, r0
 8017838:	9103      	str	r1, [sp, #12]
 801783a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801783e:	2303      	movs	r3, #3
 8017840:	2204      	movs	r2, #4
 8017842:	9300      	str	r3, [sp, #0]
 8017844:	ab06      	add	r3, sp, #24
 8017846:	f001 fb77 	bl	8018f38 <uxr_prepare_stream_to_write_submessage>
 801784a:	b918      	cbnz	r0, 8017854 <uxr_buffer_delete_entity+0x24>
 801784c:	4604      	mov	r4, r0
 801784e:	4620      	mov	r0, r4
 8017850:	b00e      	add	sp, #56	@ 0x38
 8017852:	bd10      	pop	{r4, pc}
 8017854:	9902      	ldr	r1, [sp, #8]
 8017856:	aa05      	add	r2, sp, #20
 8017858:	4620      	mov	r0, r4
 801785a:	f001 fca9 	bl	80191b0 <uxr_init_base_object_request>
 801785e:	4604      	mov	r4, r0
 8017860:	a905      	add	r1, sp, #20
 8017862:	a806      	add	r0, sp, #24
 8017864:	f003 fa5a 	bl	801ad1c <uxr_serialize_DELETE_Payload>
 8017868:	4620      	mov	r0, r4
 801786a:	b00e      	add	sp, #56	@ 0x38
 801786c:	bd10      	pop	{r4, pc}
 801786e:	bf00      	nop

08017870 <uxr_common_create_entity>:
 8017870:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8017874:	b510      	push	{r4, lr}
 8017876:	f1bc 0f01 	cmp.w	ip, #1
 801787a:	b08c      	sub	sp, #48	@ 0x30
 801787c:	4604      	mov	r4, r0
 801787e:	9202      	str	r2, [sp, #8]
 8017880:	bf0c      	ite	eq
 8017882:	f003 0201 	andeq.w	r2, r3, #1
 8017886:	2200      	movne	r2, #0
 8017888:	330e      	adds	r3, #14
 801788a:	9103      	str	r1, [sp, #12]
 801788c:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8017890:	441a      	add	r2, r3
 8017892:	ab04      	add	r3, sp, #16
 8017894:	9101      	str	r1, [sp, #4]
 8017896:	2101      	movs	r1, #1
 8017898:	b292      	uxth	r2, r2
 801789a:	9100      	str	r1, [sp, #0]
 801789c:	9903      	ldr	r1, [sp, #12]
 801789e:	f001 fb4b 	bl	8018f38 <uxr_prepare_stream_to_write_submessage>
 80178a2:	b918      	cbnz	r0, 80178ac <uxr_common_create_entity+0x3c>
 80178a4:	4604      	mov	r4, r0
 80178a6:	4620      	mov	r0, r4
 80178a8:	b00c      	add	sp, #48	@ 0x30
 80178aa:	bd10      	pop	{r4, pc}
 80178ac:	9902      	ldr	r1, [sp, #8]
 80178ae:	4620      	mov	r0, r4
 80178b0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80178b2:	f001 fc7d 	bl	80191b0 <uxr_init_base_object_request>
 80178b6:	4604      	mov	r4, r0
 80178b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80178ba:	a804      	add	r0, sp, #16
 80178bc:	f003 f988 	bl	801abd0 <uxr_serialize_CREATE_Payload>
 80178c0:	4620      	mov	r0, r4
 80178c2:	b00c      	add	sp, #48	@ 0x30
 80178c4:	bd10      	pop	{r4, pc}
 80178c6:	bf00      	nop

080178c8 <uxr_buffer_create_participant_bin>:
 80178c8:	b570      	push	{r4, r5, r6, lr}
 80178ca:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 80178ce:	4605      	mov	r5, r0
 80178d0:	ac11      	add	r4, sp, #68	@ 0x44
 80178d2:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 80178d6:	2303      	movs	r3, #3
 80178d8:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 80178dc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80178e0:	7223      	strb	r3, [r4, #8]
 80178e2:	2300      	movs	r3, #0
 80178e4:	2201      	movs	r2, #1
 80178e6:	f88d 3014 	strb.w	r3, [sp, #20]
 80178ea:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 80178ec:	7122      	strb	r2, [r4, #4]
 80178ee:	b1cb      	cbz	r3, 8017924 <uxr_buffer_create_participant_bin+0x5c>
 80178f0:	f88d 201c 	strb.w	r2, [sp, #28]
 80178f4:	9308      	str	r3, [sp, #32]
 80178f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80178fa:	a915      	add	r1, sp, #84	@ 0x54
 80178fc:	a809      	add	r0, sp, #36	@ 0x24
 80178fe:	f7f8 fa31 	bl	800fd64 <ucdr_init_buffer>
 8017902:	a905      	add	r1, sp, #20
 8017904:	a809      	add	r0, sp, #36	@ 0x24
 8017906:	f002 fd19 	bl	801a33c <uxr_serialize_OBJK_DomainParticipant_Binary>
 801790a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801790c:	9600      	str	r6, [sp, #0]
 801790e:	4628      	mov	r0, r5
 8017910:	9401      	str	r4, [sp, #4]
 8017912:	60e3      	str	r3, [r4, #12]
 8017914:	b29b      	uxth	r3, r3
 8017916:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801791a:	f7ff ffa9 	bl	8017870 <uxr_common_create_entity>
 801791e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8017922:	bd70      	pop	{r4, r5, r6, pc}
 8017924:	f88d 301c 	strb.w	r3, [sp, #28]
 8017928:	e7e5      	b.n	80178f6 <uxr_buffer_create_participant_bin+0x2e>
 801792a:	bf00      	nop

0801792c <uxr_buffer_create_topic_bin>:
 801792c:	b570      	push	{r4, r5, r6, lr}
 801792e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8017932:	4605      	mov	r5, r0
 8017934:	4618      	mov	r0, r3
 8017936:	9105      	str	r1, [sp, #20]
 8017938:	a997      	add	r1, sp, #604	@ 0x25c
 801793a:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 801793e:	ac13      	add	r4, sp, #76	@ 0x4c
 8017940:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017944:	2302      	movs	r3, #2
 8017946:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 801794a:	f000 fa8d 	bl	8017e68 <uxr_object_id_to_raw>
 801794e:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8017950:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017954:	a917      	add	r1, sp, #92	@ 0x5c
 8017956:	a80b      	add	r0, sp, #44	@ 0x2c
 8017958:	9306      	str	r3, [sp, #24]
 801795a:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 801795c:	930a      	str	r3, [sp, #40]	@ 0x28
 801795e:	2303      	movs	r3, #3
 8017960:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8017964:	2301      	movs	r3, #1
 8017966:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801796a:	2300      	movs	r3, #0
 801796c:	f88d 301c 	strb.w	r3, [sp, #28]
 8017970:	f7f8 f9f8 	bl	800fd64 <ucdr_init_buffer>
 8017974:	a906      	add	r1, sp, #24
 8017976:	a80b      	add	r0, sp, #44	@ 0x2c
 8017978:	f002 fd02 	bl	801a380 <uxr_serialize_OBJK_Topic_Binary>
 801797c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801797e:	4628      	mov	r0, r5
 8017980:	9600      	str	r6, [sp, #0]
 8017982:	9316      	str	r3, [sp, #88]	@ 0x58
 8017984:	b29b      	uxth	r3, r3
 8017986:	9401      	str	r4, [sp, #4]
 8017988:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801798c:	f7ff ff70 	bl	8017870 <uxr_common_create_entity>
 8017990:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8017994:	bd70      	pop	{r4, r5, r6, pc}
 8017996:	bf00      	nop

08017998 <uxr_buffer_create_publisher_bin>:
 8017998:	b5f0      	push	{r4, r5, r6, r7, lr}
 801799a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 801799e:	2603      	movs	r6, #3
 80179a0:	4605      	mov	r5, r0
 80179a2:	4618      	mov	r0, r3
 80179a4:	9105      	str	r1, [sp, #20]
 80179a6:	a992      	add	r1, sp, #584	@ 0x248
 80179a8:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 80179ac:	ac0e      	add	r4, sp, #56	@ 0x38
 80179ae:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 80179b2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80179b6:	f000 fa57 	bl	8017e68 <uxr_object_id_to_raw>
 80179ba:	2300      	movs	r3, #0
 80179bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80179c0:	a912      	add	r1, sp, #72	@ 0x48
 80179c2:	a806      	add	r0, sp, #24
 80179c4:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80179c8:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80179cc:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 80179d0:	f7f8 f9c8 	bl	800fd64 <ucdr_init_buffer>
 80179d4:	a993      	add	r1, sp, #588	@ 0x24c
 80179d6:	a806      	add	r0, sp, #24
 80179d8:	f002 fd86 	bl	801a4e8 <uxr_serialize_OBJK_Publisher_Binary>
 80179dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80179de:	4628      	mov	r0, r5
 80179e0:	9700      	str	r7, [sp, #0]
 80179e2:	9311      	str	r3, [sp, #68]	@ 0x44
 80179e4:	b29b      	uxth	r3, r3
 80179e6:	9401      	str	r4, [sp, #4]
 80179e8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80179ec:	f7ff ff40 	bl	8017870 <uxr_common_create_entity>
 80179f0:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 80179f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179f6:	bf00      	nop

080179f8 <uxr_buffer_create_subscriber_bin>:
 80179f8:	b570      	push	{r4, r5, r6, lr}
 80179fa:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 80179fe:	4605      	mov	r5, r0
 8017a00:	4618      	mov	r0, r3
 8017a02:	9105      	str	r1, [sp, #20]
 8017a04:	a992      	add	r1, sp, #584	@ 0x248
 8017a06:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 8017a0a:	ac0e      	add	r4, sp, #56	@ 0x38
 8017a0c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017a10:	2304      	movs	r3, #4
 8017a12:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8017a16:	f000 fa27 	bl	8017e68 <uxr_object_id_to_raw>
 8017a1a:	2300      	movs	r3, #0
 8017a1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017a20:	a912      	add	r1, sp, #72	@ 0x48
 8017a22:	a806      	add	r0, sp, #24
 8017a24:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8017a28:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8017a2c:	2303      	movs	r3, #3
 8017a2e:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8017a32:	f7f8 f997 	bl	800fd64 <ucdr_init_buffer>
 8017a36:	a993      	add	r1, sp, #588	@ 0x24c
 8017a38:	a806      	add	r0, sp, #24
 8017a3a:	f002 fe05 	bl	801a648 <uxr_serialize_OBJK_Subscriber_Binary>
 8017a3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017a40:	4628      	mov	r0, r5
 8017a42:	9600      	str	r6, [sp, #0]
 8017a44:	9311      	str	r3, [sp, #68]	@ 0x44
 8017a46:	b29b      	uxth	r3, r3
 8017a48:	9401      	str	r4, [sp, #4]
 8017a4a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017a4e:	f7ff ff0f 	bl	8017870 <uxr_common_create_entity>
 8017a52:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 8017a56:	bd70      	pop	{r4, r5, r6, pc}

08017a58 <uxr_buffer_create_datawriter_bin>:
 8017a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a5c:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8017a60:	4606      	mov	r6, r0
 8017a62:	4618      	mov	r0, r3
 8017a64:	2703      	movs	r7, #3
 8017a66:	ac1d      	add	r4, sp, #116	@ 0x74
 8017a68:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8017a6c:	9105      	str	r1, [sp, #20]
 8017a6e:	a9a1      	add	r1, sp, #644	@ 0x284
 8017a70:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8017a74:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017a78:	2305      	movs	r3, #5
 8017a7a:	7123      	strb	r3, [r4, #4]
 8017a7c:	f000 f9f4 	bl	8017e68 <uxr_object_id_to_raw>
 8017a80:	a90e      	add	r1, sp, #56	@ 0x38
 8017a82:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8017a84:	7227      	strb	r7, [r4, #8]
 8017a86:	f000 f9ef 	bl	8017e68 <uxr_object_id_to_raw>
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8017a90:	3d00      	subs	r5, #0
 8017a92:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8017a96:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8017a9a:	bf18      	it	ne
 8017a9c:	2501      	movne	r5, #1
 8017a9e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8017aa2:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8017aa6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8017aaa:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8017aae:	2301      	movs	r3, #1
 8017ab0:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8017ab4:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8017ab8:	bb8a      	cbnz	r2, 8017b1e <uxr_buffer_create_datawriter_bin+0xc6>
 8017aba:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8017abe:	f04f 0c13 	mov.w	ip, #19
 8017ac2:	250b      	movs	r5, #11
 8017ac4:	2221      	movs	r2, #33	@ 0x21
 8017ac6:	2111      	movs	r1, #17
 8017ac8:	2009      	movs	r0, #9
 8017aca:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8017ace:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8017ad2:	b923      	cbnz	r3, 8017ade <uxr_buffer_create_datawriter_bin+0x86>
 8017ad4:	4672      	mov	r2, lr
 8017ad6:	4661      	mov	r1, ip
 8017ad8:	4628      	mov	r0, r5
 8017ada:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8017ade:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8017ae2:	2b01      	cmp	r3, #1
 8017ae4:	d025      	beq.n	8017b32 <uxr_buffer_create_datawriter_bin+0xda>
 8017ae6:	2b03      	cmp	r3, #3
 8017ae8:	d029      	beq.n	8017b3e <uxr_buffer_create_datawriter_bin+0xe6>
 8017aea:	b32b      	cbz	r3, 8017b38 <uxr_buffer_create_datawriter_bin+0xe0>
 8017aec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017af0:	a921      	add	r1, sp, #132	@ 0x84
 8017af2:	a806      	add	r0, sp, #24
 8017af4:	f7f8 f936 	bl	800fd64 <ucdr_init_buffer>
 8017af8:	a90e      	add	r1, sp, #56	@ 0x38
 8017afa:	a806      	add	r0, sp, #24
 8017afc:	f002 fe56 	bl	801a7ac <uxr_serialize_OBJK_DataWriter_Binary>
 8017b00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017b02:	f8cd 8000 	str.w	r8, [sp]
 8017b06:	4630      	mov	r0, r6
 8017b08:	9401      	str	r4, [sp, #4]
 8017b0a:	60e3      	str	r3, [r4, #12]
 8017b0c:	b29b      	uxth	r3, r3
 8017b0e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017b12:	f7ff fead 	bl	8017870 <uxr_common_create_entity>
 8017b16:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8017b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b1e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8017b22:	f04f 0c12 	mov.w	ip, #18
 8017b26:	250a      	movs	r5, #10
 8017b28:	2220      	movs	r2, #32
 8017b2a:	2110      	movs	r1, #16
 8017b2c:	2008      	movs	r0, #8
 8017b2e:	2702      	movs	r7, #2
 8017b30:	e7cd      	b.n	8017ace <uxr_buffer_create_datawriter_bin+0x76>
 8017b32:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8017b36:	e7d9      	b.n	8017aec <uxr_buffer_create_datawriter_bin+0x94>
 8017b38:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8017b3c:	e7d6      	b.n	8017aec <uxr_buffer_create_datawriter_bin+0x94>
 8017b3e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8017b42:	e7d3      	b.n	8017aec <uxr_buffer_create_datawriter_bin+0x94>

08017b44 <uxr_buffer_create_datareader_bin>:
 8017b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b48:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8017b4c:	4606      	mov	r6, r0
 8017b4e:	4618      	mov	r0, r3
 8017b50:	2703      	movs	r7, #3
 8017b52:	ac1f      	add	r4, sp, #124	@ 0x7c
 8017b54:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 8017b58:	9105      	str	r1, [sp, #20]
 8017b5a:	a9a3      	add	r1, sp, #652	@ 0x28c
 8017b5c:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 8017b60:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017b64:	2306      	movs	r3, #6
 8017b66:	7123      	strb	r3, [r4, #4]
 8017b68:	f000 f97e 	bl	8017e68 <uxr_object_id_to_raw>
 8017b6c:	a90e      	add	r1, sp, #56	@ 0x38
 8017b6e:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 8017b70:	7227      	strb	r7, [r4, #8]
 8017b72:	f000 f979 	bl	8017e68 <uxr_object_id_to_raw>
 8017b76:	2300      	movs	r3, #0
 8017b78:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8017b7c:	3d00      	subs	r5, #0
 8017b7e:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 8017b82:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8017b86:	bf18      	it	ne
 8017b88:	2501      	movne	r5, #1
 8017b8a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8017b8e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8017b92:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8017b96:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8017b9a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8017b9e:	2301      	movs	r3, #1
 8017ba0:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8017ba4:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8017ba8:	bb8a      	cbnz	r2, 8017c0e <uxr_buffer_create_datareader_bin+0xca>
 8017baa:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8017bae:	f04f 0c13 	mov.w	ip, #19
 8017bb2:	250b      	movs	r5, #11
 8017bb4:	2221      	movs	r2, #33	@ 0x21
 8017bb6:	2111      	movs	r1, #17
 8017bb8:	2009      	movs	r0, #9
 8017bba:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8017bbe:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 8017bc2:	b923      	cbnz	r3, 8017bce <uxr_buffer_create_datareader_bin+0x8a>
 8017bc4:	4672      	mov	r2, lr
 8017bc6:	4661      	mov	r1, ip
 8017bc8:	4628      	mov	r0, r5
 8017bca:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8017bce:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 8017bd2:	2b01      	cmp	r3, #1
 8017bd4:	d025      	beq.n	8017c22 <uxr_buffer_create_datareader_bin+0xde>
 8017bd6:	2b03      	cmp	r3, #3
 8017bd8:	d029      	beq.n	8017c2e <uxr_buffer_create_datareader_bin+0xea>
 8017bda:	b32b      	cbz	r3, 8017c28 <uxr_buffer_create_datareader_bin+0xe4>
 8017bdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017be0:	a923      	add	r1, sp, #140	@ 0x8c
 8017be2:	a806      	add	r0, sp, #24
 8017be4:	f7f8 f8be 	bl	800fd64 <ucdr_init_buffer>
 8017be8:	a90e      	add	r1, sp, #56	@ 0x38
 8017bea:	a806      	add	r0, sp, #24
 8017bec:	f002 fda2 	bl	801a734 <uxr_serialize_OBJK_DataReader_Binary>
 8017bf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017bf2:	f8cd 8000 	str.w	r8, [sp]
 8017bf6:	4630      	mov	r0, r6
 8017bf8:	9401      	str	r4, [sp, #4]
 8017bfa:	60e3      	str	r3, [r4, #12]
 8017bfc:	b29b      	uxth	r3, r3
 8017bfe:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017c02:	f7ff fe35 	bl	8017870 <uxr_common_create_entity>
 8017c06:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8017c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c0e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8017c12:	f04f 0c12 	mov.w	ip, #18
 8017c16:	250a      	movs	r5, #10
 8017c18:	2220      	movs	r2, #32
 8017c1a:	2110      	movs	r1, #16
 8017c1c:	2008      	movs	r0, #8
 8017c1e:	2702      	movs	r7, #2
 8017c20:	e7cd      	b.n	8017bbe <uxr_buffer_create_datareader_bin+0x7a>
 8017c22:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8017c26:	e7d9      	b.n	8017bdc <uxr_buffer_create_datareader_bin+0x98>
 8017c28:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8017c2c:	e7d6      	b.n	8017bdc <uxr_buffer_create_datareader_bin+0x98>
 8017c2e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8017c32:	e7d3      	b.n	8017bdc <uxr_buffer_create_datareader_bin+0x98>

08017c34 <uxr_buffer_create_replier_bin>:
 8017c34:	b570      	push	{r4, r5, r6, lr}
 8017c36:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8017c3a:	4605      	mov	r5, r0
 8017c3c:	4618      	mov	r0, r3
 8017c3e:	9105      	str	r1, [sp, #20]
 8017c40:	a999      	add	r1, sp, #612	@ 0x264
 8017c42:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 8017c46:	ac15      	add	r4, sp, #84	@ 0x54
 8017c48:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017c4c:	2308      	movs	r3, #8
 8017c4e:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 8017c52:	f000 f909 	bl	8017e68 <uxr_object_id_to_raw>
 8017c56:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 8017c58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017c5c:	a919      	add	r1, sp, #100	@ 0x64
 8017c5e:	a80d      	add	r0, sp, #52	@ 0x34
 8017c60:	9306      	str	r3, [sp, #24]
 8017c62:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 8017c64:	9307      	str	r3, [sp, #28]
 8017c66:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 8017c68:	9308      	str	r3, [sp, #32]
 8017c6a:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8017c6c:	930c      	str	r3, [sp, #48]	@ 0x30
 8017c6e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017c70:	930a      	str	r3, [sp, #40]	@ 0x28
 8017c72:	2301      	movs	r3, #1
 8017c74:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8017c78:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8017c7c:	2303      	movs	r3, #3
 8017c7e:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 8017c82:	f7f8 f86f 	bl	800fd64 <ucdr_init_buffer>
 8017c86:	a906      	add	r1, sp, #24
 8017c88:	a80d      	add	r0, sp, #52	@ 0x34
 8017c8a:	f002 fdbb 	bl	801a804 <uxr_serialize_OBJK_Replier_Binary>
 8017c8e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017c90:	4628      	mov	r0, r5
 8017c92:	9600      	str	r6, [sp, #0]
 8017c94:	9318      	str	r3, [sp, #96]	@ 0x60
 8017c96:	b29b      	uxth	r3, r3
 8017c98:	9401      	str	r4, [sp, #4]
 8017c9a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017c9e:	f7ff fde7 	bl	8017870 <uxr_common_create_entity>
 8017ca2:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 8017ca6:	bd70      	pop	{r4, r5, r6, pc}

08017ca8 <get_custom_error>:
 8017ca8:	4b01      	ldr	r3, [pc, #4]	@ (8017cb0 <get_custom_error+0x8>)
 8017caa:	7818      	ldrb	r0, [r3, #0]
 8017cac:	4770      	bx	lr
 8017cae:	bf00      	nop
 8017cb0:	240692ec 	.word	0x240692ec

08017cb4 <recv_custom_msg>:
 8017cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cb8:	4693      	mov	fp, r2
 8017cba:	b089      	sub	sp, #36	@ 0x24
 8017cbc:	2200      	movs	r2, #0
 8017cbe:	4604      	mov	r4, r0
 8017cc0:	468a      	mov	sl, r1
 8017cc2:	9305      	str	r3, [sp, #20]
 8017cc4:	f88d 201e 	strb.w	r2, [sp, #30]
 8017cc8:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8017ccc:	b322      	cbz	r2, 8017d18 <recv_custom_msg+0x64>
 8017cce:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8017cd2:	f10d 081f 	add.w	r8, sp, #31
 8017cd6:	af05      	add	r7, sp, #20
 8017cd8:	f10d 061e 	add.w	r6, sp, #30
 8017cdc:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8017ce0:	e002      	b.n	8017ce8 <recv_custom_msg+0x34>
 8017ce2:	9b05      	ldr	r3, [sp, #20]
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	dd0f      	ble.n	8017d08 <recv_custom_msg+0x54>
 8017ce8:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8017cec:	4623      	mov	r3, r4
 8017cee:	4622      	mov	r2, r4
 8017cf0:	4648      	mov	r0, r9
 8017cf2:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8017cf6:	e9cd 5600 	strd	r5, r6, [sp]
 8017cfa:	f001 fc6f 	bl	80195dc <uxr_read_framed_msg>
 8017cfe:	2800      	cmp	r0, #0
 8017d00:	d0ef      	beq.n	8017ce2 <recv_custom_msg+0x2e>
 8017d02:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017d06:	b1b3      	cbz	r3, 8017d36 <recv_custom_msg+0x82>
 8017d08:	4b0f      	ldr	r3, [pc, #60]	@ (8017d48 <recv_custom_msg+0x94>)
 8017d0a:	2000      	movs	r0, #0
 8017d0c:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8017d10:	701a      	strb	r2, [r3, #0]
 8017d12:	b009      	add	sp, #36	@ 0x24
 8017d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d18:	f10d 021f 	add.w	r2, sp, #31
 8017d1c:	4601      	mov	r1, r0
 8017d1e:	9200      	str	r2, [sp, #0]
 8017d20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017d24:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8017d28:	47a8      	blx	r5
 8017d2a:	2800      	cmp	r0, #0
 8017d2c:	d0ec      	beq.n	8017d08 <recv_custom_msg+0x54>
 8017d2e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d1e8      	bne.n	8017d08 <recv_custom_msg+0x54>
 8017d36:	f8cb 0000 	str.w	r0, [fp]
 8017d3a:	2001      	movs	r0, #1
 8017d3c:	f8ca 4000 	str.w	r4, [sl]
 8017d40:	b009      	add	sp, #36	@ 0x24
 8017d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d46:	bf00      	nop
 8017d48:	240692ec 	.word	0x240692ec

08017d4c <send_custom_msg>:
 8017d4c:	b530      	push	{r4, r5, lr}
 8017d4e:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8017d52:	b087      	sub	sp, #28
 8017d54:	4614      	mov	r4, r2
 8017d56:	b995      	cbnz	r5, 8017d7e <send_custom_msg+0x32>
 8017d58:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 8017d5c:	f10d 0317 	add.w	r3, sp, #23
 8017d60:	47a8      	blx	r5
 8017d62:	1e03      	subs	r3, r0, #0
 8017d64:	bf18      	it	ne
 8017d66:	2301      	movne	r3, #1
 8017d68:	42a0      	cmp	r0, r4
 8017d6a:	bf18      	it	ne
 8017d6c:	2300      	movne	r3, #0
 8017d6e:	b91b      	cbnz	r3, 8017d78 <send_custom_msg+0x2c>
 8017d70:	4a0a      	ldr	r2, [pc, #40]	@ (8017d9c <send_custom_msg+0x50>)
 8017d72:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8017d76:	7011      	strb	r1, [r2, #0]
 8017d78:	4618      	mov	r0, r3
 8017d7a:	b007      	add	sp, #28
 8017d7c:	bd30      	pop	{r4, r5, pc}
 8017d7e:	460b      	mov	r3, r1
 8017d80:	2200      	movs	r2, #0
 8017d82:	f10d 0117 	add.w	r1, sp, #23
 8017d86:	9400      	str	r4, [sp, #0]
 8017d88:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8017d8c:	4602      	mov	r2, r0
 8017d8e:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8017d92:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8017d96:	f001 fa43 	bl	8019220 <uxr_write_framed_msg>
 8017d9a:	e7e2      	b.n	8017d62 <send_custom_msg+0x16>
 8017d9c:	240692ec 	.word	0x240692ec

08017da0 <uxr_set_custom_transport_callbacks>:
 8017da0:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8017da4:	9901      	ldr	r1, [sp, #4]
 8017da6:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8017daa:	9b00      	ldr	r3, [sp, #0]
 8017dac:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 8017db0:	4770      	bx	lr
 8017db2:	bf00      	nop

08017db4 <uxr_init_custom_transport>:
 8017db4:	b538      	push	{r3, r4, r5, lr}
 8017db6:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8017dba:	b303      	cbz	r3, 8017dfe <uxr_init_custom_transport+0x4a>
 8017dbc:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8017dc0:	4604      	mov	r4, r0
 8017dc2:	b1e2      	cbz	r2, 8017dfe <uxr_init_custom_transport+0x4a>
 8017dc4:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8017dc8:	b1ca      	cbz	r2, 8017dfe <uxr_init_custom_transport+0x4a>
 8017dca:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8017dce:	b1b2      	cbz	r2, 8017dfe <uxr_init_custom_transport+0x4a>
 8017dd0:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8017dd4:	4798      	blx	r3
 8017dd6:	4605      	mov	r5, r0
 8017dd8:	b188      	cbz	r0, 8017dfe <uxr_init_custom_transport+0x4a>
 8017dda:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8017dde:	b98b      	cbnz	r3, 8017e04 <uxr_init_custom_transport+0x50>
 8017de0:	4b0b      	ldr	r3, [pc, #44]	@ (8017e10 <uxr_init_custom_transport+0x5c>)
 8017de2:	4628      	mov	r0, r5
 8017de4:	490b      	ldr	r1, [pc, #44]	@ (8017e14 <uxr_init_custom_transport+0x60>)
 8017de6:	4a0c      	ldr	r2, [pc, #48]	@ (8017e18 <uxr_init_custom_transport+0x64>)
 8017de8:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8017dec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017df0:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8017df4:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8017df8:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8017dfc:	bd38      	pop	{r3, r4, r5, pc}
 8017dfe:	2500      	movs	r5, #0
 8017e00:	4628      	mov	r0, r5
 8017e02:	bd38      	pop	{r3, r4, r5, pc}
 8017e04:	2100      	movs	r1, #0
 8017e06:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8017e0a:	f001 fa03 	bl	8019214 <uxr_init_framing_io>
 8017e0e:	e7e7      	b.n	8017de0 <uxr_init_custom_transport+0x2c>
 8017e10:	08017cb5 	.word	0x08017cb5
 8017e14:	08017d4d 	.word	0x08017d4d
 8017e18:	08017ca9 	.word	0x08017ca9

08017e1c <uxr_close_custom_transport>:
 8017e1c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8017e20:	4718      	bx	r3
 8017e22:	bf00      	nop

08017e24 <uxr_object_id>:
 8017e24:	b082      	sub	sp, #8
 8017e26:	2300      	movs	r3, #0
 8017e28:	f88d 1006 	strb.w	r1, [sp, #6]
 8017e2c:	f360 030f 	bfi	r3, r0, #0, #16
 8017e30:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017e34:	f362 431f 	bfi	r3, r2, #16, #16
 8017e38:	4618      	mov	r0, r3
 8017e3a:	b002      	add	sp, #8
 8017e3c:	4770      	bx	lr
 8017e3e:	bf00      	nop

08017e40 <uxr_object_id_from_raw>:
 8017e40:	7843      	ldrb	r3, [r0, #1]
 8017e42:	b082      	sub	sp, #8
 8017e44:	7801      	ldrb	r1, [r0, #0]
 8017e46:	2000      	movs	r0, #0
 8017e48:	091a      	lsrs	r2, r3, #4
 8017e4a:	f003 030f 	and.w	r3, r3, #15
 8017e4e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8017e52:	f88d 3006 	strb.w	r3, [sp, #6]
 8017e56:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017e5a:	f362 000f 	bfi	r0, r2, #0, #16
 8017e5e:	f363 401f 	bfi	r0, r3, #16, #16
 8017e62:	b002      	add	sp, #8
 8017e64:	4770      	bx	lr
 8017e66:	bf00      	nop

08017e68 <uxr_object_id_to_raw>:
 8017e68:	4602      	mov	r2, r0
 8017e6a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8017e6e:	b082      	sub	sp, #8
 8017e70:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8017e74:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8017e78:	f881 c000 	strb.w	ip, [r1]
 8017e7c:	7048      	strb	r0, [r1, #1]
 8017e7e:	b002      	add	sp, #8
 8017e80:	4770      	bx	lr
 8017e82:	bf00      	nop

08017e84 <uxr_buffer_request_data>:
 8017e84:	b530      	push	{r4, r5, lr}
 8017e86:	b095      	sub	sp, #84	@ 0x54
 8017e88:	4604      	mov	r4, r0
 8017e8a:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8017e8c:	9303      	str	r3, [sp, #12]
 8017e8e:	2d00      	cmp	r5, #0
 8017e90:	f88d 301c 	strb.w	r3, [sp, #28]
 8017e94:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8017e98:	f04f 0200 	mov.w	r2, #0
 8017e9c:	bf14      	ite	ne
 8017e9e:	2101      	movne	r1, #1
 8017ea0:	4611      	moveq	r1, r2
 8017ea2:	f88d 201d 	strb.w	r2, [sp, #29]
 8017ea6:	f88d 201e 	strb.w	r2, [sp, #30]
 8017eaa:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8017eae:	d021      	beq.n	8017ef4 <uxr_buffer_request_data+0x70>
 8017eb0:	686b      	ldr	r3, [r5, #4]
 8017eb2:	2210      	movs	r2, #16
 8017eb4:	6829      	ldr	r1, [r5, #0]
 8017eb6:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8017eba:	f8cd 1026 	str.w	r1, [sp, #38]	@ 0x26
 8017ebe:	2308      	movs	r3, #8
 8017ec0:	2100      	movs	r1, #0
 8017ec2:	4620      	mov	r0, r4
 8017ec4:	e9cd 3100 	strd	r3, r1, [sp]
 8017ec8:	ab0c      	add	r3, sp, #48	@ 0x30
 8017eca:	9905      	ldr	r1, [sp, #20]
 8017ecc:	f001 f834 	bl	8018f38 <uxr_prepare_stream_to_write_submessage>
 8017ed0:	b918      	cbnz	r0, 8017eda <uxr_buffer_request_data+0x56>
 8017ed2:	4604      	mov	r4, r0
 8017ed4:	4620      	mov	r0, r4
 8017ed6:	b015      	add	sp, #84	@ 0x54
 8017ed8:	bd30      	pop	{r4, r5, pc}
 8017eda:	9904      	ldr	r1, [sp, #16]
 8017edc:	aa06      	add	r2, sp, #24
 8017ede:	4620      	mov	r0, r4
 8017ee0:	f001 f966 	bl	80191b0 <uxr_init_base_object_request>
 8017ee4:	4604      	mov	r4, r0
 8017ee6:	a906      	add	r1, sp, #24
 8017ee8:	a80c      	add	r0, sp, #48	@ 0x30
 8017eea:	f002 ffc1 	bl	801ae70 <uxr_serialize_READ_DATA_Payload>
 8017eee:	4620      	mov	r0, r4
 8017ef0:	b015      	add	sp, #84	@ 0x54
 8017ef2:	bd30      	pop	{r4, r5, pc}
 8017ef4:	2208      	movs	r2, #8
 8017ef6:	e7e2      	b.n	8017ebe <uxr_buffer_request_data+0x3a>

08017ef8 <uxr_buffer_cancel_data>:
 8017ef8:	b510      	push	{r4, lr}
 8017efa:	2300      	movs	r3, #0
 8017efc:	b094      	sub	sp, #80	@ 0x50
 8017efe:	4604      	mov	r4, r0
 8017f00:	9205      	str	r2, [sp, #20]
 8017f02:	9301      	str	r3, [sp, #4]
 8017f04:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017f08:	f88d 301e 	strb.w	r3, [sp, #30]
 8017f0c:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8017f10:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8017f14:	2308      	movs	r3, #8
 8017f16:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8017f1a:	2201      	movs	r2, #1
 8017f1c:	9300      	str	r3, [sp, #0]
 8017f1e:	ab0c      	add	r3, sp, #48	@ 0x30
 8017f20:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8017f24:	2210      	movs	r2, #16
 8017f26:	f001 f807 	bl	8018f38 <uxr_prepare_stream_to_write_submessage>
 8017f2a:	b918      	cbnz	r0, 8017f34 <uxr_buffer_cancel_data+0x3c>
 8017f2c:	4604      	mov	r4, r0
 8017f2e:	4620      	mov	r0, r4
 8017f30:	b014      	add	sp, #80	@ 0x50
 8017f32:	bd10      	pop	{r4, pc}
 8017f34:	9905      	ldr	r1, [sp, #20]
 8017f36:	aa06      	add	r2, sp, #24
 8017f38:	4620      	mov	r0, r4
 8017f3a:	f001 f939 	bl	80191b0 <uxr_init_base_object_request>
 8017f3e:	4604      	mov	r4, r0
 8017f40:	a906      	add	r1, sp, #24
 8017f42:	a80c      	add	r0, sp, #48	@ 0x30
 8017f44:	f002 ff94 	bl	801ae70 <uxr_serialize_READ_DATA_Payload>
 8017f48:	4620      	mov	r0, r4
 8017f4a:	b014      	add	sp, #80	@ 0x50
 8017f4c:	bd10      	pop	{r4, pc}
 8017f4e:	bf00      	nop

08017f50 <read_submessage_format>:
 8017f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f54:	b095      	sub	sp, #84	@ 0x54
 8017f56:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 8017f5a:	b113      	cbz	r3, 8017f62 <read_submessage_format+0x12>
 8017f5c:	b015      	add	sp, #84	@ 0x54
 8017f5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f62:	4606      	mov	r6, r0
 8017f64:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8017f66:	460c      	mov	r4, r1
 8017f68:	4615      	mov	r5, r2
 8017f6a:	9004      	str	r0, [sp, #16]
 8017f6c:	4699      	mov	r9, r3
 8017f6e:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8017f70:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8017f74:	9005      	str	r0, [sp, #20]
 8017f76:	a80c      	add	r0, sp, #48	@ 0x30
 8017f78:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8017f7c:	1a52      	subs	r2, r2, r1
 8017f7e:	f7f7 fef1 	bl	800fd64 <ucdr_init_buffer>
 8017f82:	a80c      	add	r0, sp, #48	@ 0x30
 8017f84:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8017f88:	f7f7 fec0 	bl	800fd0c <ucdr_set_on_full_buffer_callback>
 8017f8c:	69e2      	ldr	r2, [r4, #28]
 8017f8e:	b19a      	cbz	r2, 8017fb8 <read_submessage_format+0x68>
 8017f90:	f1b8 0f07 	cmp.w	r8, #7
 8017f94:	f882 9014 	strb.w	r9, [r2, #20]
 8017f98:	d040      	beq.n	801801c <read_submessage_format+0xcc>
 8017f9a:	f1b8 0f08 	cmp.w	r8, #8
 8017f9e:	d02e      	beq.n	8017ffe <read_submessage_format+0xae>
 8017fa0:	f1b8 0f06 	cmp.w	r8, #6
 8017fa4:	d011      	beq.n	8017fca <read_submessage_format+0x7a>
 8017fa6:	2301      	movs	r3, #1
 8017fa8:	7513      	strb	r3, [r2, #20]
 8017faa:	4629      	mov	r1, r5
 8017fac:	4620      	mov	r0, r4
 8017fae:	f7f7 ff2d 	bl	800fe0c <ucdr_advance_buffer>
 8017fb2:	b015      	add	sp, #84	@ 0x54
 8017fb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017fb8:	f1b8 0f07 	cmp.w	r8, #7
 8017fbc:	d02e      	beq.n	801801c <read_submessage_format+0xcc>
 8017fbe:	f1b8 0f08 	cmp.w	r8, #8
 8017fc2:	d01c      	beq.n	8017ffe <read_submessage_format+0xae>
 8017fc4:	f1b8 0f06 	cmp.w	r8, #6
 8017fc8:	d1ef      	bne.n	8017faa <read_submessage_format+0x5a>
 8017fca:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 8017fce:	f1b8 0f00 	cmp.w	r8, #0
 8017fd2:	d011      	beq.n	8017ff8 <read_submessage_format+0xa8>
 8017fd4:	ab0c      	add	r3, sp, #48	@ 0x30
 8017fd6:	9501      	str	r5, [sp, #4]
 8017fd8:	463a      	mov	r2, r7
 8017fda:	4630      	mov	r0, r6
 8017fdc:	9300      	str	r3, [sp, #0]
 8017fde:	2306      	movs	r3, #6
 8017fe0:	f88d 3016 	strb.w	r3, [sp, #22]
 8017fe4:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8017fe8:	9302      	str	r3, [sp, #8]
 8017fea:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8017fee:	47c0      	blx	r8
 8017ff0:	2301      	movs	r3, #1
 8017ff2:	69e2      	ldr	r2, [r4, #28]
 8017ff4:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8017ff8:	2a00      	cmp	r2, #0
 8017ffa:	d1d4      	bne.n	8017fa6 <read_submessage_format+0x56>
 8017ffc:	e7d5      	b.n	8017faa <read_submessage_format+0x5a>
 8017ffe:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 8018002:	2b00      	cmp	r3, #0
 8018004:	d0f8      	beq.n	8017ff8 <read_submessage_format+0xa8>
 8018006:	a80c      	add	r0, sp, #48	@ 0x30
 8018008:	a906      	add	r1, sp, #24
 801800a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801800e:	f002 fffb 	bl	801b008 <uxr_deserialize_SampleIdentity>
 8018012:	b9a0      	cbnz	r0, 801803e <read_submessage_format+0xee>
 8018014:	69e2      	ldr	r2, [r4, #28]
 8018016:	2a00      	cmp	r2, #0
 8018018:	d1c5      	bne.n	8017fa6 <read_submessage_format+0x56>
 801801a:	e7c6      	b.n	8017faa <read_submessage_format+0x5a>
 801801c:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 8018020:	b13b      	cbz	r3, 8018032 <read_submessage_format+0xe2>
 8018022:	a906      	add	r1, sp, #24
 8018024:	a80c      	add	r0, sp, #48	@ 0x30
 8018026:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801802a:	f002 fcc1 	bl	801a9b0 <uxr_deserialize_BaseObjectRequest>
 801802e:	bb60      	cbnz	r0, 801808a <read_submessage_format+0x13a>
 8018030:	69e2      	ldr	r2, [r4, #28]
 8018032:	68a3      	ldr	r3, [r4, #8]
 8018034:	442b      	add	r3, r5
 8018036:	60a3      	str	r3, [r4, #8]
 8018038:	2a00      	cmp	r2, #0
 801803a:	d1b4      	bne.n	8017fa6 <read_submessage_format+0x56>
 801803c:	e7b5      	b.n	8017faa <read_submessage_format+0x5a>
 801803e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018040:	a80c      	add	r0, sp, #48	@ 0x30
 8018042:	eba8 0803 	sub.w	r8, r8, r3
 8018046:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801804a:	44a8      	add	r8, r5
 801804c:	1a52      	subs	r2, r2, r1
 801804e:	f7f7 fe89 	bl	800fd64 <ucdr_init_buffer>
 8018052:	a80c      	add	r0, sp, #48	@ 0x30
 8018054:	fa1f f888 	uxth.w	r8, r8
 8018058:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801805c:	f7f7 fe56 	bl	800fd0c <ucdr_set_on_full_buffer_callback>
 8018060:	ab0c      	add	r3, sp, #48	@ 0x30
 8018062:	2108      	movs	r1, #8
 8018064:	f8cd 8004 	str.w	r8, [sp, #4]
 8018068:	9300      	str	r3, [sp, #0]
 801806a:	463a      	mov	r2, r7
 801806c:	f88d 1016 	strb.w	r1, [sp, #22]
 8018070:	ab06      	add	r3, sp, #24
 8018072:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 8018076:	4630      	mov	r0, r6
 8018078:	9102      	str	r1, [sp, #8]
 801807a:	9905      	ldr	r1, [sp, #20]
 801807c:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 8018080:	47b8      	blx	r7
 8018082:	2301      	movs	r3, #1
 8018084:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8018088:	e7c4      	b.n	8018014 <read_submessage_format+0xc4>
 801808a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801808e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018090:	a80c      	add	r0, sp, #48	@ 0x30
 8018092:	1a52      	subs	r2, r2, r1
 8018094:	eba8 0803 	sub.w	r8, r8, r3
 8018098:	f7f7 fe64 	bl	800fd64 <ucdr_init_buffer>
 801809c:	a80c      	add	r0, sp, #48	@ 0x30
 801809e:	44a8      	add	r8, r5
 80180a0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80180a4:	f7f7 fe32 	bl	800fd0c <ucdr_set_on_full_buffer_callback>
 80180a8:	ab0c      	add	r3, sp, #48	@ 0x30
 80180aa:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80180ae:	fa1f f888 	uxth.w	r8, r8
 80180b2:	9300      	str	r3, [sp, #0]
 80180b4:	463a      	mov	r2, r7
 80180b6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80180ba:	4630      	mov	r0, r6
 80180bc:	f8cd 8004 	str.w	r8, [sp, #4]
 80180c0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80180c4:	2107      	movs	r1, #7
 80180c6:	f88d 1016 	strb.w	r1, [sp, #22]
 80180ca:	b29b      	uxth	r3, r3
 80180cc:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 80180d0:	9102      	str	r1, [sp, #8]
 80180d2:	9905      	ldr	r1, [sp, #20]
 80180d4:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 80180d8:	47b8      	blx	r7
 80180da:	2301      	movs	r3, #1
 80180dc:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 80180e0:	e7a6      	b.n	8018030 <read_submessage_format+0xe0>
 80180e2:	bf00      	nop

080180e4 <on_get_fragmentation_info>:
 80180e4:	b500      	push	{lr}
 80180e6:	b08b      	sub	sp, #44	@ 0x2c
 80180e8:	4601      	mov	r1, r0
 80180ea:	2204      	movs	r2, #4
 80180ec:	a802      	add	r0, sp, #8
 80180ee:	f7f7 fe39 	bl	800fd64 <ucdr_init_buffer>
 80180f2:	f10d 0305 	add.w	r3, sp, #5
 80180f6:	f10d 0206 	add.w	r2, sp, #6
 80180fa:	a901      	add	r1, sp, #4
 80180fc:	a802      	add	r0, sp, #8
 80180fe:	f001 fe5d 	bl	8019dbc <uxr_read_submessage_header>
 8018102:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8018106:	2b0d      	cmp	r3, #13
 8018108:	d003      	beq.n	8018112 <on_get_fragmentation_info+0x2e>
 801810a:	2000      	movs	r0, #0
 801810c:	b00b      	add	sp, #44	@ 0x2c
 801810e:	f85d fb04 	ldr.w	pc, [sp], #4
 8018112:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8018116:	f013 0f02 	tst.w	r3, #2
 801811a:	bf14      	ite	ne
 801811c:	2002      	movne	r0, #2
 801811e:	2001      	moveq	r0, #1
 8018120:	b00b      	add	sp, #44	@ 0x2c
 8018122:	f85d fb04 	ldr.w	pc, [sp], #4
 8018126:	bf00      	nop

08018128 <read_submessage_get_info>:
 8018128:	b570      	push	{r4, r5, r6, lr}
 801812a:	2500      	movs	r5, #0
 801812c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8018130:	460e      	mov	r6, r1
 8018132:	4604      	mov	r4, r0
 8018134:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8018138:	4629      	mov	r1, r5
 801813a:	a810      	add	r0, sp, #64	@ 0x40
 801813c:	9503      	str	r5, [sp, #12]
 801813e:	9504      	str	r5, [sp, #16]
 8018140:	f004 ffb8 	bl	801d0b4 <memset>
 8018144:	a903      	add	r1, sp, #12
 8018146:	4630      	mov	r0, r6
 8018148:	f002 fdd2 	bl	801acf0 <uxr_deserialize_GET_INFO_Payload>
 801814c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8018150:	4620      	mov	r0, r4
 8018152:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8018156:	f001 f823 	bl	80191a0 <uxr_session_header_offset>
 801815a:	462b      	mov	r3, r5
 801815c:	220c      	movs	r2, #12
 801815e:	a905      	add	r1, sp, #20
 8018160:	9000      	str	r0, [sp, #0]
 8018162:	a808      	add	r0, sp, #32
 8018164:	f7f7 fdec 	bl	800fd40 <ucdr_init_buffer_origin_offset>
 8018168:	a910      	add	r1, sp, #64	@ 0x40
 801816a:	a808      	add	r0, sp, #32
 801816c:	f002 fe34 	bl	801add8 <uxr_serialize_INFO_Payload>
 8018170:	9b08      	ldr	r3, [sp, #32]
 8018172:	462a      	mov	r2, r5
 8018174:	4629      	mov	r1, r5
 8018176:	4620      	mov	r0, r4
 8018178:	f000 ffbe 	bl	80190f8 <uxr_stamp_session_header>
 801817c:	a808      	add	r0, sp, #32
 801817e:	f7f7 fe1f 	bl	800fdc0 <ucdr_buffer_length>
 8018182:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018184:	4602      	mov	r2, r0
 8018186:	a905      	add	r1, sp, #20
 8018188:	e9d3 0400 	ldrd	r0, r4, [r3]
 801818c:	47a0      	blx	r4
 801818e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8018192:	bd70      	pop	{r4, r5, r6, pc}

08018194 <write_submessage_acknack.isra.0>:
 8018194:	b570      	push	{r4, r5, r6, lr}
 8018196:	b092      	sub	sp, #72	@ 0x48
 8018198:	4605      	mov	r5, r0
 801819a:	460e      	mov	r6, r1
 801819c:	4614      	mov	r4, r2
 801819e:	f000 ffff 	bl	80191a0 <uxr_session_header_offset>
 80181a2:	a905      	add	r1, sp, #20
 80181a4:	9000      	str	r0, [sp, #0]
 80181a6:	2300      	movs	r3, #0
 80181a8:	a80a      	add	r0, sp, #40	@ 0x28
 80181aa:	2211      	movs	r2, #17
 80181ac:	f7f7 fdc8 	bl	800fd40 <ucdr_init_buffer_origin_offset>
 80181b0:	2218      	movs	r2, #24
 80181b2:	2300      	movs	r3, #0
 80181b4:	210a      	movs	r1, #10
 80181b6:	fb02 5404 	mla	r4, r2, r4, r5
 80181ba:	a80a      	add	r0, sp, #40	@ 0x28
 80181bc:	2205      	movs	r2, #5
 80181be:	3450      	adds	r4, #80	@ 0x50
 80181c0:	f001 fde2 	bl	8019d88 <uxr_buffer_submessage_header>
 80181c4:	a903      	add	r1, sp, #12
 80181c6:	4620      	mov	r0, r4
 80181c8:	f003 feec 	bl	801bfa4 <uxr_compute_acknack>
 80181cc:	ba40      	rev16	r0, r0
 80181ce:	a903      	add	r1, sp, #12
 80181d0:	f88d 6010 	strb.w	r6, [sp, #16]
 80181d4:	f8ad 000e 	strh.w	r0, [sp, #14]
 80181d8:	a80a      	add	r0, sp, #40	@ 0x28
 80181da:	f002 fe6f 	bl	801aebc <uxr_serialize_ACKNACK_Payload>
 80181de:	2200      	movs	r2, #0
 80181e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80181e2:	4628      	mov	r0, r5
 80181e4:	4611      	mov	r1, r2
 80181e6:	f000 ff87 	bl	80190f8 <uxr_stamp_session_header>
 80181ea:	a80a      	add	r0, sp, #40	@ 0x28
 80181ec:	f7f7 fde8 	bl	800fdc0 <ucdr_buffer_length>
 80181f0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80181f2:	4602      	mov	r2, r0
 80181f4:	a905      	add	r1, sp, #20
 80181f6:	e9d3 0400 	ldrd	r0, r4, [r3]
 80181fa:	47a0      	blx	r4
 80181fc:	b012      	add	sp, #72	@ 0x48
 80181fe:	bd70      	pop	{r4, r5, r6, pc}

08018200 <uxr_init_session>:
 8018200:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8018238 <uxr_init_session+0x38>
 8018204:	2300      	movs	r3, #0
 8018206:	b510      	push	{r4, lr}
 8018208:	4604      	mov	r4, r0
 801820a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 801820e:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8018212:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8018216:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 801821a:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 801821e:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8018222:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8018226:	2181      	movs	r1, #129	@ 0x81
 8018228:	f000 feca 	bl	8018fc0 <uxr_init_session_info>
 801822c:	f104 0008 	add.w	r0, r4, #8
 8018230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018234:	f001 bcc4 	b.w	8019bc0 <uxr_init_stream_storage>
	...

08018240 <uxr_set_status_callback>:
 8018240:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8018244:	4770      	bx	lr
 8018246:	bf00      	nop

08018248 <uxr_set_topic_callback>:
 8018248:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 801824c:	4770      	bx	lr
 801824e:	bf00      	nop

08018250 <uxr_set_request_callback>:
 8018250:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8018254:	4770      	bx	lr
 8018256:	bf00      	nop

08018258 <uxr_set_reply_callback>:
 8018258:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 801825c:	4770      	bx	lr
 801825e:	bf00      	nop

08018260 <uxr_create_output_best_effort_stream>:
 8018260:	b510      	push	{r4, lr}
 8018262:	4604      	mov	r4, r0
 8018264:	b084      	sub	sp, #16
 8018266:	e9cd 2100 	strd	r2, r1, [sp]
 801826a:	f000 ff99 	bl	80191a0 <uxr_session_header_offset>
 801826e:	4603      	mov	r3, r0
 8018270:	f104 0008 	add.w	r0, r4, #8
 8018274:	e9dd 2100 	ldrd	r2, r1, [sp]
 8018278:	b004      	add	sp, #16
 801827a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801827e:	f001 bce5 	b.w	8019c4c <uxr_add_output_best_effort_buffer>
 8018282:	bf00      	nop

08018284 <uxr_create_output_reliable_stream>:
 8018284:	b530      	push	{r4, r5, lr}
 8018286:	b089      	sub	sp, #36	@ 0x24
 8018288:	4604      	mov	r4, r0
 801828a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801828e:	9303      	str	r3, [sp, #12]
 8018290:	f000 ff86 	bl	80191a0 <uxr_session_header_offset>
 8018294:	4605      	mov	r5, r0
 8018296:	9905      	ldr	r1, [sp, #20]
 8018298:	f104 0008 	add.w	r0, r4, #8
 801829c:	9500      	str	r5, [sp, #0]
 801829e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80182a2:	f001 fce7 	bl	8019c74 <uxr_add_output_reliable_buffer>
 80182a6:	2200      	movs	r2, #0
 80182a8:	fa5f fc80 	uxtb.w	ip, r0
 80182ac:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80182b0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80182b4:	0e03      	lsrs	r3, r0, #24
 80182b6:	f36c 0207 	bfi	r2, ip, #0, #8
 80182ba:	f364 220f 	bfi	r2, r4, #8, #8
 80182be:	f361 4217 	bfi	r2, r1, #16, #8
 80182c2:	f363 621f 	bfi	r2, r3, #24, #8
 80182c6:	4610      	mov	r0, r2
 80182c8:	b009      	add	sp, #36	@ 0x24
 80182ca:	bd30      	pop	{r4, r5, pc}

080182cc <uxr_create_input_best_effort_stream>:
 80182cc:	b082      	sub	sp, #8
 80182ce:	3008      	adds	r0, #8
 80182d0:	b002      	add	sp, #8
 80182d2:	f001 bce9 	b.w	8019ca8 <uxr_add_input_best_effort_buffer>
 80182d6:	bf00      	nop

080182d8 <uxr_create_input_reliable_stream>:
 80182d8:	b510      	push	{r4, lr}
 80182da:	4c0c      	ldr	r4, [pc, #48]	@ (801830c <uxr_create_input_reliable_stream+0x34>)
 80182dc:	b084      	sub	sp, #16
 80182de:	3008      	adds	r0, #8
 80182e0:	9400      	str	r4, [sp, #0]
 80182e2:	f001 fcf7 	bl	8019cd4 <uxr_add_input_reliable_buffer>
 80182e6:	2200      	movs	r2, #0
 80182e8:	fa5f fe80 	uxtb.w	lr, r0
 80182ec:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 80182f0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80182f4:	0e03      	lsrs	r3, r0, #24
 80182f6:	f36e 0207 	bfi	r2, lr, #0, #8
 80182fa:	f36c 220f 	bfi	r2, ip, #8, #8
 80182fe:	f361 4217 	bfi	r2, r1, #16, #8
 8018302:	f363 621f 	bfi	r2, r3, #24, #8
 8018306:	4610      	mov	r0, r2
 8018308:	b004      	add	sp, #16
 801830a:	bd10      	pop	{r4, pc}
 801830c:	080180e5 	.word	0x080180e5

08018310 <uxr_epoch_nanos>:
 8018310:	b510      	push	{r4, lr}
 8018312:	4604      	mov	r4, r0
 8018314:	f001 fd9a 	bl	8019e4c <uxr_nanos>
 8018318:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 801831c:	1ac0      	subs	r0, r0, r3
 801831e:	eb61 0102 	sbc.w	r1, r1, r2
 8018322:	bd10      	pop	{r4, pc}

08018324 <uxr_flash_output_streams>:
 8018324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018328:	7e03      	ldrb	r3, [r0, #24]
 801832a:	b084      	sub	sp, #16
 801832c:	4604      	mov	r4, r0
 801832e:	b1fb      	cbz	r3, 8018370 <uxr_flash_output_streams+0x4c>
 8018330:	f04f 0900 	mov.w	r9, #0
 8018334:	f10d 0802 	add.w	r8, sp, #2
 8018338:	af03      	add	r7, sp, #12
 801833a:	ae02      	add	r6, sp, #8
 801833c:	4648      	mov	r0, r9
 801833e:	2201      	movs	r2, #1
 8018340:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8018344:	4611      	mov	r1, r2
 8018346:	3508      	adds	r5, #8
 8018348:	f001 fbe0 	bl	8019b0c <uxr_stream_id>
 801834c:	4684      	mov	ip, r0
 801834e:	4643      	mov	r3, r8
 8018350:	463a      	mov	r2, r7
 8018352:	4631      	mov	r1, r6
 8018354:	4628      	mov	r0, r5
 8018356:	f8cd c004 	str.w	ip, [sp, #4]
 801835a:	f003 fead 	bl	801c0b8 <uxr_prepare_best_effort_buffer_to_send>
 801835e:	2800      	cmp	r0, #0
 8018360:	d13d      	bne.n	80183de <uxr_flash_output_streams+0xba>
 8018362:	f109 0901 	add.w	r9, r9, #1
 8018366:	7e23      	ldrb	r3, [r4, #24]
 8018368:	fa5f f089 	uxtb.w	r0, r9
 801836c:	4283      	cmp	r3, r0
 801836e:	d8e6      	bhi.n	801833e <uxr_flash_output_streams+0x1a>
 8018370:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8018374:	b383      	cbz	r3, 80183d8 <uxr_flash_output_streams+0xb4>
 8018376:	f04f 0900 	mov.w	r9, #0
 801837a:	f10d 0802 	add.w	r8, sp, #2
 801837e:	af03      	add	r7, sp, #12
 8018380:	ae02      	add	r6, sp, #8
 8018382:	4648      	mov	r0, r9
 8018384:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8018388:	2201      	movs	r2, #1
 801838a:	2102      	movs	r1, #2
 801838c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8018390:	f001 fbbc 	bl	8019b0c <uxr_stream_id>
 8018394:	9001      	str	r0, [sp, #4]
 8018396:	3520      	adds	r5, #32
 8018398:	e00c      	b.n	80183b4 <uxr_flash_output_streams+0x90>
 801839a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801839e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80183a2:	9b02      	ldr	r3, [sp, #8]
 80183a4:	f000 fea8 	bl	80190f8 <uxr_stamp_session_header>
 80183a8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80183aa:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80183ae:	e9d3 0a00 	ldrd	r0, sl, [r3]
 80183b2:	47d0      	blx	sl
 80183b4:	4643      	mov	r3, r8
 80183b6:	463a      	mov	r2, r7
 80183b8:	4631      	mov	r1, r6
 80183ba:	4628      	mov	r0, r5
 80183bc:	f004 f8a0 	bl	801c500 <uxr_prepare_next_reliable_buffer_to_send>
 80183c0:	4603      	mov	r3, r0
 80183c2:	4620      	mov	r0, r4
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d1e8      	bne.n	801839a <uxr_flash_output_streams+0x76>
 80183c8:	f109 0901 	add.w	r9, r9, #1
 80183cc:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80183d0:	fa5f f089 	uxtb.w	r0, r9
 80183d4:	4283      	cmp	r3, r0
 80183d6:	d8d5      	bhi.n	8018384 <uxr_flash_output_streams+0x60>
 80183d8:	b004      	add	sp, #16
 80183da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183de:	9b02      	ldr	r3, [sp, #8]
 80183e0:	4620      	mov	r0, r4
 80183e2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80183e6:	f109 0901 	add.w	r9, r9, #1
 80183ea:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80183ee:	f000 fe83 	bl	80190f8 <uxr_stamp_session_header>
 80183f2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80183f4:	9a03      	ldr	r2, [sp, #12]
 80183f6:	685d      	ldr	r5, [r3, #4]
 80183f8:	6818      	ldr	r0, [r3, #0]
 80183fa:	9902      	ldr	r1, [sp, #8]
 80183fc:	47a8      	blx	r5
 80183fe:	7e23      	ldrb	r3, [r4, #24]
 8018400:	fa5f f089 	uxtb.w	r0, r9
 8018404:	4283      	cmp	r3, r0
 8018406:	d89a      	bhi.n	801833e <uxr_flash_output_streams+0x1a>
 8018408:	e7b2      	b.n	8018370 <uxr_flash_output_streams+0x4c>
 801840a:	bf00      	nop

0801840c <read_submessage_info>:
 801840c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018410:	460d      	mov	r5, r1
 8018412:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8018416:	4606      	mov	r6, r0
 8018418:	4669      	mov	r1, sp
 801841a:	4628      	mov	r0, r5
 801841c:	f002 fb7a 	bl	801ab14 <uxr_deserialize_BaseObjectReply>
 8018420:	4604      	mov	r4, r0
 8018422:	a902      	add	r1, sp, #8
 8018424:	4628      	mov	r0, r5
 8018426:	f89d 7005 	ldrb.w	r7, [sp, #5]
 801842a:	f7f6 fa19 	bl	800e860 <ucdr_deserialize_bool>
 801842e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8018432:	4004      	ands	r4, r0
 8018434:	b2e4      	uxtb	r4, r4
 8018436:	b95b      	cbnz	r3, 8018450 <read_submessage_info+0x44>
 8018438:	a987      	add	r1, sp, #540	@ 0x21c
 801843a:	4628      	mov	r0, r5
 801843c:	f7f6 fa10 	bl	800e860 <ucdr_deserialize_bool>
 8018440:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8018444:	4680      	mov	r8, r0
 8018446:	b94b      	cbnz	r3, 801845c <read_submessage_info+0x50>
 8018448:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801844c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018450:	a903      	add	r1, sp, #12
 8018452:	4628      	mov	r0, r5
 8018454:	f002 fa0a 	bl	801a86c <uxr_deserialize_ObjectVariant>
 8018458:	4004      	ands	r4, r0
 801845a:	e7ed      	b.n	8018438 <read_submessage_info+0x2c>
 801845c:	a988      	add	r1, sp, #544	@ 0x220
 801845e:	4628      	mov	r0, r5
 8018460:	f7f6 fa2c 	bl	800e8bc <ucdr_deserialize_uint8_t>
 8018464:	ea14 0f08 	tst.w	r4, r8
 8018468:	d0ee      	beq.n	8018448 <read_submessage_info+0x3c>
 801846a:	2800      	cmp	r0, #0
 801846c:	d0ec      	beq.n	8018448 <read_submessage_info+0x3c>
 801846e:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8018472:	2b0d      	cmp	r3, #13
 8018474:	d1e8      	bne.n	8018448 <read_submessage_info+0x3c>
 8018476:	a98a      	add	r1, sp, #552	@ 0x228
 8018478:	4628      	mov	r0, r5
 801847a:	f7f6 ffc5 	bl	800f408 <ucdr_deserialize_int16_t>
 801847e:	b138      	cbz	r0, 8018490 <read_submessage_info+0x84>
 8018480:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8018484:	2b00      	cmp	r3, #0
 8018486:	dd06      	ble.n	8018496 <read_submessage_info+0x8a>
 8018488:	2f00      	cmp	r7, #0
 801848a:	bf14      	ite	ne
 801848c:	2001      	movne	r0, #1
 801848e:	2002      	moveq	r0, #2
 8018490:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 8018494:	e7d8      	b.n	8018448 <read_submessage_info+0x3c>
 8018496:	2000      	movs	r0, #0
 8018498:	e7fa      	b.n	8018490 <read_submessage_info+0x84>
 801849a:	bf00      	nop

0801849c <read_submessage_list>:
 801849c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184a0:	4604      	mov	r4, r0
 80184a2:	b097      	sub	sp, #92	@ 0x5c
 80184a4:	460d      	mov	r5, r1
 80184a6:	4ec1      	ldr	r6, [pc, #772]	@ (80187ac <read_submessage_list+0x310>)
 80184a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80184aa:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 80184ae:	aa0c      	add	r2, sp, #48	@ 0x30
 80184b0:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 80184b4:	4628      	mov	r0, r5
 80184b6:	f001 fc81 	bl	8019dbc <uxr_read_submessage_header>
 80184ba:	2800      	cmp	r0, #0
 80184bc:	f000 8142 	beq.w	8018744 <read_submessage_list+0x2a8>
 80184c0:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 80184c4:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 80184c8:	3b02      	subs	r3, #2
 80184ca:	2b0d      	cmp	r3, #13
 80184cc:	d8ed      	bhi.n	80184aa <read_submessage_list+0xe>
 80184ce:	a101      	add	r1, pc, #4	@ (adr r1, 80184d4 <read_submessage_list+0x38>)
 80184d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80184d4:	0801873b 	.word	0x0801873b
 80184d8:	080184ab 	.word	0x080184ab
 80184dc:	0801872b 	.word	0x0801872b
 80184e0:	080186c9 	.word	0x080186c9
 80184e4:	080186bf 	.word	0x080186bf
 80184e8:	080184ab 	.word	0x080184ab
 80184ec:	080184ab 	.word	0x080184ab
 80184f0:	08018615 	.word	0x08018615
 80184f4:	080185a7 	.word	0x080185a7
 80184f8:	08018567 	.word	0x08018567
 80184fc:	080184ab 	.word	0x080184ab
 8018500:	080184ab 	.word	0x080184ab
 8018504:	080184ab 	.word	0x080184ab
 8018508:	0801850d 	.word	0x0801850d
 801850c:	a910      	add	r1, sp, #64	@ 0x40
 801850e:	4628      	mov	r0, r5
 8018510:	f002 fd28 	bl	801af64 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8018514:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 8018518:	f1b8 0f00 	cmp.w	r8, #0
 801851c:	f000 811a 	beq.w	8018754 <read_submessage_list+0x2b8>
 8018520:	f001 fc94 	bl	8019e4c <uxr_nanos>
 8018524:	4602      	mov	r2, r0
 8018526:	460b      	mov	r3, r1
 8018528:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 801852c:	2100      	movs	r1, #0
 801852e:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8018530:	9006      	str	r0, [sp, #24]
 8018532:	468c      	mov	ip, r1
 8018534:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8018536:	fbc7 0c06 	smlal	r0, ip, r7, r6
 801853a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801853c:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8018540:	468c      	mov	ip, r1
 8018542:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8018544:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8018548:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 801854c:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 8018550:	fbc7 0106 	smlal	r0, r1, r7, r6
 8018554:	e9cd 0100 	strd	r0, r1, [sp]
 8018558:	4620      	mov	r0, r4
 801855a:	47c0      	blx	r8
 801855c:	f04f 0301 	mov.w	r3, #1
 8018560:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8018564:	e7a1      	b.n	80184aa <read_submessage_list+0xe>
 8018566:	a910      	add	r1, sp, #64	@ 0x40
 8018568:	4628      	mov	r0, r5
 801856a:	f002 fce7 	bl	801af3c <uxr_deserialize_HEARTBEAT_Payload>
 801856e:	2100      	movs	r1, #0
 8018570:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8018574:	f001 faf8 	bl	8019b68 <uxr_stream_id_from_raw>
 8018578:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801857c:	900f      	str	r0, [sp, #60]	@ 0x3c
 801857e:	f104 0008 	add.w	r0, r4, #8
 8018582:	4641      	mov	r1, r8
 8018584:	f001 fbde 	bl	8019d44 <uxr_get_input_reliable_stream>
 8018588:	2800      	cmp	r0, #0
 801858a:	d08e      	beq.n	80184aa <read_submessage_list+0xe>
 801858c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8018590:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8018594:	f003 fcfa 	bl	801bf8c <uxr_process_heartbeat>
 8018598:	4642      	mov	r2, r8
 801859a:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 801859e:	4620      	mov	r0, r4
 80185a0:	f7ff fdf8 	bl	8018194 <write_submessage_acknack.isra.0>
 80185a4:	e781      	b.n	80184aa <read_submessage_list+0xe>
 80185a6:	a910      	add	r1, sp, #64	@ 0x40
 80185a8:	4628      	mov	r0, r5
 80185aa:	f002 fc9f 	bl	801aeec <uxr_deserialize_ACKNACK_Payload>
 80185ae:	2100      	movs	r1, #0
 80185b0:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80185b4:	f001 fad8 	bl	8019b68 <uxr_stream_id_from_raw>
 80185b8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80185bc:	900d      	str	r0, [sp, #52]	@ 0x34
 80185be:	f104 0008 	add.w	r0, r4, #8
 80185c2:	f001 fba9 	bl	8019d18 <uxr_get_output_reliable_stream>
 80185c6:	4680      	mov	r8, r0
 80185c8:	2800      	cmp	r0, #0
 80185ca:	f43f af6e 	beq.w	80184aa <read_submessage_list+0xe>
 80185ce:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 80185d2:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80185d6:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 80185da:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80185de:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80185e2:	b289      	uxth	r1, r1
 80185e4:	f004 f834 	bl	801c650 <uxr_process_acknack>
 80185e8:	4640      	mov	r0, r8
 80185ea:	f003 fff5 	bl	801c5d8 <uxr_begin_output_nack_buffer_it>
 80185ee:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 80185f2:	e005      	b.n	8018600 <read_submessage_list+0x164>
 80185f4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80185f6:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 80185fa:	e9d3 0900 	ldrd	r0, r9, [r3]
 80185fe:	47c8      	blx	r9
 8018600:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8018604:	aa0f      	add	r2, sp, #60	@ 0x3c
 8018606:	4651      	mov	r1, sl
 8018608:	4640      	mov	r0, r8
 801860a:	f003 ffe7 	bl	801c5dc <uxr_next_reliable_nack_buffer_to_send>
 801860e:	2800      	cmp	r0, #0
 8018610:	d1f0      	bne.n	80185f4 <read_submessage_list+0x158>
 8018612:	e74a      	b.n	80184aa <read_submessage_list+0xe>
 8018614:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8018618:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801861c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 8018620:	4628      	mov	r0, r5
 8018622:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8018626:	4651      	mov	r1, sl
 8018628:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 801862c:	f1a8 0804 	sub.w	r8, r8, #4
 8018630:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8018634:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8018638:	fa1f f888 	uxth.w	r8, r8
 801863c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8018640:	f009 090e 	and.w	r9, r9, #14
 8018644:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8018648:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 801864c:	f002 f9b0 	bl	801a9b0 <uxr_deserialize_BaseObjectRequest>
 8018650:	4650      	mov	r0, sl
 8018652:	a90f      	add	r1, sp, #60	@ 0x3c
 8018654:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8018658:	f000 fdca 	bl	80191f0 <uxr_parse_base_object_request>
 801865c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801865e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8018662:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8018666:	9110      	str	r1, [sp, #64]	@ 0x40
 8018668:	f1bb 0f00 	cmp.w	fp, #0
 801866c:	d006      	beq.n	801867c <read_submessage_list+0x1e0>
 801866e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8018672:	4652      	mov	r2, sl
 8018674:	4620      	mov	r0, r4
 8018676:	9300      	str	r3, [sp, #0]
 8018678:	2300      	movs	r3, #0
 801867a:	47d8      	blx	fp
 801867c:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801867e:	b182      	cbz	r2, 80186a2 <read_submessage_list+0x206>
 8018680:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8018682:	f04f 0c00 	mov.w	ip, #0
 8018686:	3902      	subs	r1, #2
 8018688:	e003      	b.n	8018692 <read_submessage_list+0x1f6>
 801868a:	f10c 0c01 	add.w	ip, ip, #1
 801868e:	4594      	cmp	ip, r2
 8018690:	d007      	beq.n	80186a2 <read_submessage_list+0x206>
 8018692:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8018696:	4553      	cmp	r3, sl
 8018698:	d1f7      	bne.n	801868a <read_submessage_list+0x1ee>
 801869a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801869c:	2200      	movs	r2, #0
 801869e:	f803 200c 	strb.w	r2, [r3, ip]
 80186a2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80186a6:	464b      	mov	r3, r9
 80186a8:	4642      	mov	r2, r8
 80186aa:	4620      	mov	r0, r4
 80186ac:	9102      	str	r1, [sp, #8]
 80186ae:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80186b0:	9101      	str	r1, [sp, #4]
 80186b2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80186b4:	9100      	str	r1, [sp, #0]
 80186b6:	4629      	mov	r1, r5
 80186b8:	f7ff fc4a 	bl	8017f50 <read_submessage_format>
 80186bc:	e6f5      	b.n	80184aa <read_submessage_list+0xe>
 80186be:	4629      	mov	r1, r5
 80186c0:	4620      	mov	r0, r4
 80186c2:	f7ff fea3 	bl	801840c <read_submessage_info>
 80186c6:	e6f0      	b.n	80184aa <read_submessage_list+0xe>
 80186c8:	2a00      	cmp	r2, #0
 80186ca:	d03e      	beq.n	801874a <read_submessage_list+0x2ae>
 80186cc:	a910      	add	r1, sp, #64	@ 0x40
 80186ce:	4628      	mov	r0, r5
 80186d0:	f002 fb64 	bl	801ad9c <uxr_deserialize_STATUS_Payload>
 80186d4:	a90e      	add	r1, sp, #56	@ 0x38
 80186d6:	aa0d      	add	r2, sp, #52	@ 0x34
 80186d8:	a810      	add	r0, sp, #64	@ 0x40
 80186da:	f000 fd89 	bl	80191f0 <uxr_parse_base_object_request>
 80186de:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80186e0:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 80186e4:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 80186e8:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 80186ec:	910f      	str	r1, [sp, #60]	@ 0x3c
 80186ee:	f1ba 0f00 	cmp.w	sl, #0
 80186f2:	d006      	beq.n	8018702 <read_submessage_list+0x266>
 80186f4:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80186f8:	4642      	mov	r2, r8
 80186fa:	4620      	mov	r0, r4
 80186fc:	9300      	str	r3, [sp, #0]
 80186fe:	464b      	mov	r3, r9
 8018700:	47d0      	blx	sl
 8018702:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8018704:	2a00      	cmp	r2, #0
 8018706:	f43f aed0 	beq.w	80184aa <read_submessage_list+0xe>
 801870a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801870c:	2100      	movs	r1, #0
 801870e:	3802      	subs	r0, #2
 8018710:	e003      	b.n	801871a <read_submessage_list+0x27e>
 8018712:	3101      	adds	r1, #1
 8018714:	4291      	cmp	r1, r2
 8018716:	f43f aec8 	beq.w	80184aa <read_submessage_list+0xe>
 801871a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801871e:	4543      	cmp	r3, r8
 8018720:	d1f7      	bne.n	8018712 <read_submessage_list+0x276>
 8018722:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8018724:	f803 9001 	strb.w	r9, [r3, r1]
 8018728:	e6bf      	b.n	80184aa <read_submessage_list+0xe>
 801872a:	2a00      	cmp	r2, #0
 801872c:	f47f aebd 	bne.w	80184aa <read_submessage_list+0xe>
 8018730:	4629      	mov	r1, r5
 8018732:	4620      	mov	r0, r4
 8018734:	f000 fca0 	bl	8019078 <uxr_read_create_session_status>
 8018738:	e6b7      	b.n	80184aa <read_submessage_list+0xe>
 801873a:	4629      	mov	r1, r5
 801873c:	4620      	mov	r0, r4
 801873e:	f7ff fcf3 	bl	8018128 <read_submessage_get_info>
 8018742:	e6b2      	b.n	80184aa <read_submessage_list+0xe>
 8018744:	b017      	add	sp, #92	@ 0x5c
 8018746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801874a:	4629      	mov	r1, r5
 801874c:	4620      	mov	r0, r4
 801874e:	f000 fca1 	bl	8019094 <uxr_read_delete_session_status>
 8018752:	e6aa      	b.n	80184aa <read_submessage_list+0xe>
 8018754:	f001 fb7a 	bl	8019e4c <uxr_nanos>
 8018758:	4642      	mov	r2, r8
 801875a:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801875c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801875e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8018762:	1818      	adds	r0, r3, r0
 8018764:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8018766:	eb42 0101 	adc.w	r1, r2, r1
 801876a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801876c:	4642      	mov	r2, r8
 801876e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8018772:	469c      	mov	ip, r3
 8018774:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 8018778:	fbc3 7806 	smlal	r7, r8, r3, r6
 801877c:	4643      	mov	r3, r8
 801877e:	eb1c 0c07 	adds.w	ip, ip, r7
 8018782:	eb42 0203 	adc.w	r2, r2, r3
 8018786:	ebb0 030c 	subs.w	r3, r0, ip
 801878a:	eb61 0202 	sbc.w	r2, r1, r2
 801878e:	2a00      	cmp	r2, #0
 8018790:	db08      	blt.n	80187a4 <read_submessage_list+0x308>
 8018792:	085b      	lsrs	r3, r3, #1
 8018794:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8018798:	1052      	asrs	r2, r2, #1
 801879a:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 801879e:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 80187a2:	e6db      	b.n	801855c <read_submessage_list+0xc0>
 80187a4:	3301      	adds	r3, #1
 80187a6:	f142 0200 	adc.w	r2, r2, #0
 80187aa:	e7f2      	b.n	8018792 <read_submessage_list+0x2f6>
 80187ac:	3b9aca00 	.word	0x3b9aca00

080187b0 <listen_message_reliably>:
 80187b0:	1e0b      	subs	r3, r1, #0
 80187b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187b6:	bfb8      	it	lt
 80187b8:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 80187bc:	b09d      	sub	sp, #116	@ 0x74
 80187be:	4680      	mov	r8, r0
 80187c0:	9305      	str	r3, [sp, #20]
 80187c2:	f001 fb27 	bl	8019e14 <uxr_millis>
 80187c6:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 80187ca:	4681      	mov	r9, r0
 80187cc:	2a00      	cmp	r2, #0
 80187ce:	f000 809a 	beq.w	8018906 <listen_message_reliably+0x156>
 80187d2:	2600      	movs	r6, #0
 80187d4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80187d8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80187dc:	460f      	mov	r7, r1
 80187de:	4630      	mov	r0, r6
 80187e0:	9303      	str	r3, [sp, #12]
 80187e2:	e00e      	b.n	8018802 <listen_message_reliably+0x52>
 80187e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80187e6:	3601      	adds	r6, #1
 80187e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80187ea:	455a      	cmp	r2, fp
 80187ec:	9903      	ldr	r1, [sp, #12]
 80187ee:	b2f0      	uxtb	r0, r6
 80187f0:	eb73 0101 	sbcs.w	r1, r3, r1
 80187f4:	da01      	bge.n	80187fa <listen_message_reliably+0x4a>
 80187f6:	4693      	mov	fp, r2
 80187f8:	9303      	str	r3, [sp, #12]
 80187fa:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80187fe:	4283      	cmp	r3, r0
 8018800:	d95f      	bls.n	80188c2 <listen_message_reliably+0x112>
 8018802:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8018806:	2102      	movs	r1, #2
 8018808:	2201      	movs	r2, #1
 801880a:	00e4      	lsls	r4, r4, #3
 801880c:	f001 f97e 	bl	8019b0c <uxr_stream_id>
 8018810:	4601      	mov	r1, r0
 8018812:	f104 0520 	add.w	r5, r4, #32
 8018816:	463b      	mov	r3, r7
 8018818:	464a      	mov	r2, r9
 801881a:	9109      	str	r1, [sp, #36]	@ 0x24
 801881c:	4445      	add	r5, r8
 801881e:	4628      	mov	r0, r5
 8018820:	f003 feae 	bl	801c580 <uxr_update_output_stream_heartbeat_timestamp>
 8018824:	eb08 0304 	add.w	r3, r8, r4
 8018828:	2800      	cmp	r0, #0
 801882a:	d0db      	beq.n	80187e4 <listen_message_reliably+0x34>
 801882c:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8018830:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8018834:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8018838:	4640      	mov	r0, r8
 801883a:	3501      	adds	r5, #1
 801883c:	4444      	add	r4, r8
 801883e:	9304      	str	r3, [sp, #16]
 8018840:	f000 fcae 	bl	80191a0 <uxr_session_header_offset>
 8018844:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8018848:	2300      	movs	r3, #0
 801884a:	2211      	movs	r2, #17
 801884c:	a90c      	add	r1, sp, #48	@ 0x30
 801884e:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8018852:	9000      	str	r0, [sp, #0]
 8018854:	4650      	mov	r0, sl
 8018856:	3601      	adds	r6, #1
 8018858:	f7f7 fa72 	bl	800fd40 <ucdr_init_buffer_origin_offset>
 801885c:	2300      	movs	r3, #0
 801885e:	2205      	movs	r2, #5
 8018860:	210b      	movs	r1, #11
 8018862:	4650      	mov	r0, sl
 8018864:	f001 fa90 	bl	8019d88 <uxr_buffer_submessage_header>
 8018868:	2101      	movs	r1, #1
 801886a:	8968      	ldrh	r0, [r5, #10]
 801886c:	f003 ff2a 	bl	801c6c4 <uxr_seq_num_add>
 8018870:	892b      	ldrh	r3, [r5, #8]
 8018872:	4602      	mov	r2, r0
 8018874:	a90a      	add	r1, sp, #40	@ 0x28
 8018876:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801887a:	4650      	mov	r0, sl
 801887c:	9b04      	ldr	r3, [sp, #16]
 801887e:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8018882:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8018886:	f002 fb45 	bl	801af14 <uxr_serialize_HEARTBEAT_Payload>
 801888a:	2200      	movs	r2, #0
 801888c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801888e:	4640      	mov	r0, r8
 8018890:	4611      	mov	r1, r2
 8018892:	f000 fc31 	bl	80190f8 <uxr_stamp_session_header>
 8018896:	4650      	mov	r0, sl
 8018898:	f7f7 fa92 	bl	800fdc0 <ucdr_buffer_length>
 801889c:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 80188a0:	4602      	mov	r2, r0
 80188a2:	a90c      	add	r1, sp, #48	@ 0x30
 80188a4:	e9d3 0500 	ldrd	r0, r5, [r3]
 80188a8:	47a8      	blx	r5
 80188aa:	9903      	ldr	r1, [sp, #12]
 80188ac:	b2f0      	uxtb	r0, r6
 80188ae:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 80188b2:	455a      	cmp	r2, fp
 80188b4:	eb73 0101 	sbcs.w	r1, r3, r1
 80188b8:	db9d      	blt.n	80187f6 <listen_message_reliably+0x46>
 80188ba:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80188be:	4283      	cmp	r3, r0
 80188c0:	d89f      	bhi.n	8018802 <listen_message_reliably+0x52>
 80188c2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80188c6:	9a03      	ldr	r2, [sp, #12]
 80188c8:	429a      	cmp	r2, r3
 80188ca:	bf08      	it	eq
 80188cc:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 80188d0:	d019      	beq.n	8018906 <listen_message_reliably+0x156>
 80188d2:	ebab 0309 	sub.w	r3, fp, r9
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	9d05      	ldr	r5, [sp, #20]
 80188da:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 80188de:	aa08      	add	r2, sp, #32
 80188e0:	bf08      	it	eq
 80188e2:	2301      	moveq	r3, #1
 80188e4:	a907      	add	r1, sp, #28
 80188e6:	6884      	ldr	r4, [r0, #8]
 80188e8:	429d      	cmp	r5, r3
 80188ea:	6800      	ldr	r0, [r0, #0]
 80188ec:	bfa8      	it	ge
 80188ee:	461d      	movge	r5, r3
 80188f0:	462b      	mov	r3, r5
 80188f2:	47a0      	blx	r4
 80188f4:	b948      	cbnz	r0, 801890a <listen_message_reliably+0x15a>
 80188f6:	9b05      	ldr	r3, [sp, #20]
 80188f8:	1b5b      	subs	r3, r3, r5
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	9305      	str	r3, [sp, #20]
 80188fe:	f73f af60 	bgt.w	80187c2 <listen_message_reliably+0x12>
 8018902:	4604      	mov	r4, r0
 8018904:	e012      	b.n	801892c <listen_message_reliably+0x17c>
 8018906:	9b05      	ldr	r3, [sp, #20]
 8018908:	e7e5      	b.n	80188d6 <listen_message_reliably+0x126>
 801890a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801890e:	4604      	mov	r4, r0
 8018910:	2500      	movs	r5, #0
 8018912:	a80c      	add	r0, sp, #48	@ 0x30
 8018914:	f7f7 fa26 	bl	800fd64 <ucdr_init_buffer>
 8018918:	f10d 031a 	add.w	r3, sp, #26
 801891c:	aa06      	add	r2, sp, #24
 801891e:	a90c      	add	r1, sp, #48	@ 0x30
 8018920:	4640      	mov	r0, r8
 8018922:	f88d 5018 	strb.w	r5, [sp, #24]
 8018926:	f000 fbfb 	bl	8019120 <uxr_read_session_header>
 801892a:	b918      	cbnz	r0, 8018934 <listen_message_reliably+0x184>
 801892c:	4620      	mov	r0, r4
 801892e:	b01d      	add	sp, #116	@ 0x74
 8018930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018934:	4629      	mov	r1, r5
 8018936:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801893a:	f001 f915 	bl	8019b68 <uxr_stream_id_from_raw>
 801893e:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8018942:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8018946:	f3c0 2507 	ubfx	r5, r0, #8, #8
 801894a:	2e01      	cmp	r6, #1
 801894c:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8018950:	d04b      	beq.n	80189ea <listen_message_reliably+0x23a>
 8018952:	2e02      	cmp	r6, #2
 8018954:	d00f      	beq.n	8018976 <listen_message_reliably+0x1c6>
 8018956:	2e00      	cmp	r6, #0
 8018958:	d1e8      	bne.n	801892c <listen_message_reliably+0x17c>
 801895a:	4631      	mov	r1, r6
 801895c:	4630      	mov	r0, r6
 801895e:	f001 f903 	bl	8019b68 <uxr_stream_id_from_raw>
 8018962:	4602      	mov	r2, r0
 8018964:	a90c      	add	r1, sp, #48	@ 0x30
 8018966:	4640      	mov	r0, r8
 8018968:	920a      	str	r2, [sp, #40]	@ 0x28
 801896a:	f7ff fd97 	bl	801849c <read_submessage_list>
 801896e:	4620      	mov	r0, r4
 8018970:	b01d      	add	sp, #116	@ 0x74
 8018972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018976:	4629      	mov	r1, r5
 8018978:	f108 0008 	add.w	r0, r8, #8
 801897c:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8018980:	f001 f9e0 	bl	8019d44 <uxr_get_input_reliable_stream>
 8018984:	4607      	mov	r7, r0
 8018986:	b338      	cbz	r0, 80189d8 <listen_message_reliably+0x228>
 8018988:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801898a:	a80c      	add	r0, sp, #48	@ 0x30
 801898c:	9203      	str	r2, [sp, #12]
 801898e:	f7f7 fa1b 	bl	800fdc8 <ucdr_buffer_remaining>
 8018992:	4603      	mov	r3, r0
 8018994:	f10d 0019 	add.w	r0, sp, #25
 8018998:	9a03      	ldr	r2, [sp, #12]
 801899a:	4651      	mov	r1, sl
 801899c:	9000      	str	r0, [sp, #0]
 801899e:	4638      	mov	r0, r7
 80189a0:	f003 f9f8 	bl	801bd94 <uxr_receive_reliable_message>
 80189a4:	b1c0      	cbz	r0, 80189d8 <listen_message_reliably+0x228>
 80189a6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80189aa:	b393      	cbz	r3, 8018a12 <listen_message_reliably+0x262>
 80189ac:	ae14      	add	r6, sp, #80	@ 0x50
 80189ae:	f04f 0a02 	mov.w	sl, #2
 80189b2:	e00a      	b.n	80189ca <listen_message_reliably+0x21a>
 80189b4:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 80189b8:	4631      	mov	r1, r6
 80189ba:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 80189be:	4640      	mov	r0, r8
 80189c0:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 80189c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80189c6:	f7ff fd69 	bl	801849c <read_submessage_list>
 80189ca:	2204      	movs	r2, #4
 80189cc:	4631      	mov	r1, r6
 80189ce:	4638      	mov	r0, r7
 80189d0:	f003 fa62 	bl	801be98 <uxr_next_input_reliable_buffer_available>
 80189d4:	2800      	cmp	r0, #0
 80189d6:	d1ed      	bne.n	80189b4 <listen_message_reliably+0x204>
 80189d8:	4640      	mov	r0, r8
 80189da:	462a      	mov	r2, r5
 80189dc:	4649      	mov	r1, r9
 80189de:	f7ff fbd9 	bl	8018194 <write_submessage_acknack.isra.0>
 80189e2:	4620      	mov	r0, r4
 80189e4:	b01d      	add	sp, #116	@ 0x74
 80189e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189ea:	4629      	mov	r1, r5
 80189ec:	f108 0008 	add.w	r0, r8, #8
 80189f0:	f001 f99e 	bl	8019d30 <uxr_get_input_best_effort_stream>
 80189f4:	2800      	cmp	r0, #0
 80189f6:	d099      	beq.n	801892c <listen_message_reliably+0x17c>
 80189f8:	4651      	mov	r1, sl
 80189fa:	f003 f941 	bl	801bc80 <uxr_receive_best_effort_message>
 80189fe:	2800      	cmp	r0, #0
 8018a00:	d094      	beq.n	801892c <listen_message_reliably+0x17c>
 8018a02:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8018a06:	a90c      	add	r1, sp, #48	@ 0x30
 8018a08:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018a0a:	4640      	mov	r0, r8
 8018a0c:	f7ff fd46 	bl	801849c <read_submessage_list>
 8018a10:	e78c      	b.n	801892c <listen_message_reliably+0x17c>
 8018a12:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8018a16:	a90c      	add	r1, sp, #48	@ 0x30
 8018a18:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018a1a:	4640      	mov	r0, r8
 8018a1c:	f7ff fd3e 	bl	801849c <read_submessage_list>
 8018a20:	e7c4      	b.n	80189ac <listen_message_reliably+0x1fc>
 8018a22:	bf00      	nop

08018a24 <uxr_run_session_timeout>:
 8018a24:	b570      	push	{r4, r5, r6, lr}
 8018a26:	4604      	mov	r4, r0
 8018a28:	460d      	mov	r5, r1
 8018a2a:	f001 f9f3 	bl	8019e14 <uxr_millis>
 8018a2e:	4606      	mov	r6, r0
 8018a30:	4620      	mov	r0, r4
 8018a32:	f7ff fc77 	bl	8018324 <uxr_flash_output_streams>
 8018a36:	4629      	mov	r1, r5
 8018a38:	4620      	mov	r0, r4
 8018a3a:	f7ff feb9 	bl	80187b0 <listen_message_reliably>
 8018a3e:	f001 f9e9 	bl	8019e14 <uxr_millis>
 8018a42:	1b83      	subs	r3, r0, r6
 8018a44:	1ae9      	subs	r1, r5, r3
 8018a46:	2900      	cmp	r1, #0
 8018a48:	dcf6      	bgt.n	8018a38 <uxr_run_session_timeout+0x14>
 8018a4a:	f104 0008 	add.w	r0, r4, #8
 8018a4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a52:	f001 b983 	b.w	8019d5c <uxr_output_streams_confirmed>
 8018a56:	bf00      	nop

08018a58 <uxr_run_session_until_data>:
 8018a58:	b570      	push	{r4, r5, r6, lr}
 8018a5a:	4604      	mov	r4, r0
 8018a5c:	460d      	mov	r5, r1
 8018a5e:	f001 f9d9 	bl	8019e14 <uxr_millis>
 8018a62:	4606      	mov	r6, r0
 8018a64:	4620      	mov	r0, r4
 8018a66:	f7ff fc5d 	bl	8018324 <uxr_flash_output_streams>
 8018a6a:	2300      	movs	r3, #0
 8018a6c:	4629      	mov	r1, r5
 8018a6e:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8018a72:	e005      	b.n	8018a80 <uxr_run_session_until_data+0x28>
 8018a74:	f001 f9ce 	bl	8019e14 <uxr_millis>
 8018a78:	1b83      	subs	r3, r0, r6
 8018a7a:	1ae9      	subs	r1, r5, r3
 8018a7c:	2900      	cmp	r1, #0
 8018a7e:	dd07      	ble.n	8018a90 <uxr_run_session_until_data+0x38>
 8018a80:	4620      	mov	r0, r4
 8018a82:	f7ff fe95 	bl	80187b0 <listen_message_reliably>
 8018a86:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8018a8a:	2800      	cmp	r0, #0
 8018a8c:	d0f2      	beq.n	8018a74 <uxr_run_session_until_data+0x1c>
 8018a8e:	bd70      	pop	{r4, r5, r6, pc}
 8018a90:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8018a94:	bd70      	pop	{r4, r5, r6, pc}
 8018a96:	bf00      	nop

08018a98 <uxr_run_session_until_confirm_delivery>:
 8018a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a9c:	4606      	mov	r6, r0
 8018a9e:	460d      	mov	r5, r1
 8018aa0:	f001 f9b8 	bl	8019e14 <uxr_millis>
 8018aa4:	4607      	mov	r7, r0
 8018aa6:	4630      	mov	r0, r6
 8018aa8:	f106 0808 	add.w	r8, r6, #8
 8018aac:	f7ff fc3a 	bl	8018324 <uxr_flash_output_streams>
 8018ab0:	2d00      	cmp	r5, #0
 8018ab2:	db10      	blt.n	8018ad6 <uxr_run_session_until_confirm_delivery+0x3e>
 8018ab4:	462c      	mov	r4, r5
 8018ab6:	e006      	b.n	8018ac6 <uxr_run_session_until_confirm_delivery+0x2e>
 8018ab8:	f7ff fe7a 	bl	80187b0 <listen_message_reliably>
 8018abc:	f001 f9aa 	bl	8019e14 <uxr_millis>
 8018ac0:	1bc3      	subs	r3, r0, r7
 8018ac2:	1aec      	subs	r4, r5, r3
 8018ac4:	d407      	bmi.n	8018ad6 <uxr_run_session_until_confirm_delivery+0x3e>
 8018ac6:	4640      	mov	r0, r8
 8018ac8:	f001 f948 	bl	8019d5c <uxr_output_streams_confirmed>
 8018acc:	4603      	mov	r3, r0
 8018ace:	4621      	mov	r1, r4
 8018ad0:	4630      	mov	r0, r6
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d0f0      	beq.n	8018ab8 <uxr_run_session_until_confirm_delivery+0x20>
 8018ad6:	4640      	mov	r0, r8
 8018ad8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018adc:	f001 b93e 	b.w	8019d5c <uxr_output_streams_confirmed>

08018ae0 <uxr_run_session_until_all_status>:
 8018ae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ae4:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8018ae8:	4606      	mov	r6, r0
 8018aea:	4688      	mov	r8, r1
 8018aec:	4692      	mov	sl, r2
 8018aee:	461f      	mov	r7, r3
 8018af0:	f7ff fc18 	bl	8018324 <uxr_flash_output_streams>
 8018af4:	f1bb 0f00 	cmp.w	fp, #0
 8018af8:	d004      	beq.n	8018b04 <uxr_run_session_until_all_status+0x24>
 8018afa:	465a      	mov	r2, fp
 8018afc:	21ff      	movs	r1, #255	@ 0xff
 8018afe:	4638      	mov	r0, r7
 8018b00:	f004 fad8 	bl	801d0b4 <memset>
 8018b04:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8018b08:	1e7d      	subs	r5, r7, #1
 8018b0a:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 8018b0e:	f001 f981 	bl	8019e14 <uxr_millis>
 8018b12:	4641      	mov	r1, r8
 8018b14:	4681      	mov	r9, r0
 8018b16:	4630      	mov	r0, r6
 8018b18:	f7ff fe4a 	bl	80187b0 <listen_message_reliably>
 8018b1c:	f001 f97a 	bl	8019e14 <uxr_millis>
 8018b20:	eba0 0009 	sub.w	r0, r0, r9
 8018b24:	eba8 0100 	sub.w	r1, r8, r0
 8018b28:	f1bb 0f00 	cmp.w	fp, #0
 8018b2c:	d029      	beq.n	8018b82 <uxr_run_session_until_all_status+0xa2>
 8018b2e:	46ae      	mov	lr, r5
 8018b30:	f04f 0c00 	mov.w	ip, #0
 8018b34:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8018b38:	2cff      	cmp	r4, #255	@ 0xff
 8018b3a:	d015      	beq.n	8018b68 <uxr_run_session_until_all_status+0x88>
 8018b3c:	f10c 0c01 	add.w	ip, ip, #1
 8018b40:	45e3      	cmp	fp, ip
 8018b42:	d8f7      	bhi.n	8018b34 <uxr_run_session_until_all_status+0x54>
 8018b44:	2300      	movs	r3, #0
 8018b46:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8018b48:	e000      	b.n	8018b4c <uxr_run_session_until_all_status+0x6c>
 8018b4a:	b158      	cbz	r0, 8018b64 <uxr_run_session_until_all_status+0x84>
 8018b4c:	462b      	mov	r3, r5
 8018b4e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8018b52:	3302      	adds	r3, #2
 8018b54:	2801      	cmp	r0, #1
 8018b56:	eba3 0307 	sub.w	r3, r3, r7
 8018b5a:	bf8c      	ite	hi
 8018b5c:	2000      	movhi	r0, #0
 8018b5e:	2001      	movls	r0, #1
 8018b60:	459b      	cmp	fp, r3
 8018b62:	d8f2      	bhi.n	8018b4a <uxr_run_session_until_all_status+0x6a>
 8018b64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b68:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8018b6c:	f10c 0c01 	add.w	ip, ip, #1
 8018b70:	45dc      	cmp	ip, fp
 8018b72:	d201      	bcs.n	8018b78 <uxr_run_session_until_all_status+0x98>
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d0dd      	beq.n	8018b34 <uxr_run_session_until_all_status+0x54>
 8018b78:	2900      	cmp	r1, #0
 8018b7a:	dde3      	ble.n	8018b44 <uxr_run_session_until_all_status+0x64>
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	d1ca      	bne.n	8018b16 <uxr_run_session_until_all_status+0x36>
 8018b80:	e7e0      	b.n	8018b44 <uxr_run_session_until_all_status+0x64>
 8018b82:	2001      	movs	r0, #1
 8018b84:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8018b88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018b8c <wait_session_status>:
 8018b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b90:	4604      	mov	r4, r0
 8018b92:	b09d      	sub	sp, #116	@ 0x74
 8018b94:	20ff      	movs	r0, #255	@ 0xff
 8018b96:	9303      	str	r3, [sp, #12]
 8018b98:	7160      	strb	r0, [r4, #5]
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	f000 80b6 	beq.w	8018d0c <wait_session_status+0x180>
 8018ba0:	4689      	mov	r9, r1
 8018ba2:	4692      	mov	sl, r2
 8018ba4:	f04f 0b00 	mov.w	fp, #0
 8018ba8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018baa:	4652      	mov	r2, sl
 8018bac:	4649      	mov	r1, r9
 8018bae:	e9d3 0500 	ldrd	r0, r5, [r3]
 8018bb2:	47a8      	blx	r5
 8018bb4:	f001 f92e 	bl	8019e14 <uxr_millis>
 8018bb8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8018bbc:	4605      	mov	r5, r0
 8018bbe:	e009      	b.n	8018bd4 <wait_session_status+0x48>
 8018bc0:	f001 f928 	bl	8019e14 <uxr_millis>
 8018bc4:	1b40      	subs	r0, r0, r5
 8018bc6:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	dd40      	ble.n	8018c50 <wait_session_status+0xc4>
 8018bce:	7960      	ldrb	r0, [r4, #5]
 8018bd0:	28ff      	cmp	r0, #255	@ 0xff
 8018bd2:	d145      	bne.n	8018c60 <wait_session_status+0xd4>
 8018bd4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8018bd6:	a908      	add	r1, sp, #32
 8018bd8:	6896      	ldr	r6, [r2, #8]
 8018bda:	6810      	ldr	r0, [r2, #0]
 8018bdc:	aa09      	add	r2, sp, #36	@ 0x24
 8018bde:	47b0      	blx	r6
 8018be0:	2800      	cmp	r0, #0
 8018be2:	d0ed      	beq.n	8018bc0 <wait_session_status+0x34>
 8018be4:	a80c      	add	r0, sp, #48	@ 0x30
 8018be6:	2600      	movs	r6, #0
 8018be8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8018bec:	f7f7 f8ba 	bl	800fd64 <ucdr_init_buffer>
 8018bf0:	f10d 031e 	add.w	r3, sp, #30
 8018bf4:	aa07      	add	r2, sp, #28
 8018bf6:	a90c      	add	r1, sp, #48	@ 0x30
 8018bf8:	4620      	mov	r0, r4
 8018bfa:	f88d 601c 	strb.w	r6, [sp, #28]
 8018bfe:	f000 fa8f 	bl	8019120 <uxr_read_session_header>
 8018c02:	2800      	cmp	r0, #0
 8018c04:	d0dc      	beq.n	8018bc0 <wait_session_status+0x34>
 8018c06:	4631      	mov	r1, r6
 8018c08:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8018c0c:	f000 ffac 	bl	8019b68 <uxr_stream_id_from_raw>
 8018c10:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8018c14:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8018c18:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8018c1c:	2f01      	cmp	r7, #1
 8018c1e:	9302      	str	r3, [sp, #8]
 8018c20:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8018c24:	d05c      	beq.n	8018ce0 <wait_session_status+0x154>
 8018c26:	2f02      	cmp	r7, #2
 8018c28:	d020      	beq.n	8018c6c <wait_session_status+0xe0>
 8018c2a:	2f00      	cmp	r7, #0
 8018c2c:	d1c8      	bne.n	8018bc0 <wait_session_status+0x34>
 8018c2e:	4639      	mov	r1, r7
 8018c30:	4638      	mov	r0, r7
 8018c32:	f000 ff99 	bl	8019b68 <uxr_stream_id_from_raw>
 8018c36:	a90c      	add	r1, sp, #48	@ 0x30
 8018c38:	4602      	mov	r2, r0
 8018c3a:	900b      	str	r0, [sp, #44]	@ 0x2c
 8018c3c:	4620      	mov	r0, r4
 8018c3e:	f7ff fc2d 	bl	801849c <read_submessage_list>
 8018c42:	f001 f8e7 	bl	8019e14 <uxr_millis>
 8018c46:	1b40      	subs	r0, r0, r5
 8018c48:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	dcbe      	bgt.n	8018bce <wait_session_status+0x42>
 8018c50:	f10b 0b01 	add.w	fp, fp, #1
 8018c54:	9b03      	ldr	r3, [sp, #12]
 8018c56:	7960      	ldrb	r0, [r4, #5]
 8018c58:	455b      	cmp	r3, fp
 8018c5a:	d001      	beq.n	8018c60 <wait_session_status+0xd4>
 8018c5c:	28ff      	cmp	r0, #255	@ 0xff
 8018c5e:	d0a3      	beq.n	8018ba8 <wait_session_status+0x1c>
 8018c60:	38ff      	subs	r0, #255	@ 0xff
 8018c62:	bf18      	it	ne
 8018c64:	2001      	movne	r0, #1
 8018c66:	b01d      	add	sp, #116	@ 0x74
 8018c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c6c:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8018c70:	4631      	mov	r1, r6
 8018c72:	f104 0008 	add.w	r0, r4, #8
 8018c76:	9304      	str	r3, [sp, #16]
 8018c78:	f001 f864 	bl	8019d44 <uxr_get_input_reliable_stream>
 8018c7c:	4680      	mov	r8, r0
 8018c7e:	b348      	cbz	r0, 8018cd4 <wait_session_status+0x148>
 8018c80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018c82:	a80c      	add	r0, sp, #48	@ 0x30
 8018c84:	9205      	str	r2, [sp, #20]
 8018c86:	f7f7 f89f 	bl	800fdc8 <ucdr_buffer_remaining>
 8018c8a:	4603      	mov	r3, r0
 8018c8c:	f10d 001d 	add.w	r0, sp, #29
 8018c90:	9a05      	ldr	r2, [sp, #20]
 8018c92:	9000      	str	r0, [sp, #0]
 8018c94:	4640      	mov	r0, r8
 8018c96:	9902      	ldr	r1, [sp, #8]
 8018c98:	f003 f87c 	bl	801bd94 <uxr_receive_reliable_message>
 8018c9c:	b1d0      	cbz	r0, 8018cd4 <wait_session_status+0x148>
 8018c9e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d03a      	beq.n	8018d1c <wait_session_status+0x190>
 8018ca6:	9f04      	ldr	r7, [sp, #16]
 8018ca8:	e00a      	b.n	8018cc0 <wait_session_status+0x134>
 8018caa:	f04f 0302 	mov.w	r3, #2
 8018cae:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8018cb2:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8018cb6:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8018cba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018cbc:	f7ff fbee 	bl	801849c <read_submessage_list>
 8018cc0:	a914      	add	r1, sp, #80	@ 0x50
 8018cc2:	2204      	movs	r2, #4
 8018cc4:	4640      	mov	r0, r8
 8018cc6:	f003 f8e7 	bl	801be98 <uxr_next_input_reliable_buffer_available>
 8018cca:	4603      	mov	r3, r0
 8018ccc:	a914      	add	r1, sp, #80	@ 0x50
 8018cce:	4620      	mov	r0, r4
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d1ea      	bne.n	8018caa <wait_session_status+0x11e>
 8018cd4:	4632      	mov	r2, r6
 8018cd6:	9904      	ldr	r1, [sp, #16]
 8018cd8:	4620      	mov	r0, r4
 8018cda:	f7ff fa5b 	bl	8018194 <write_submessage_acknack.isra.0>
 8018cde:	e76f      	b.n	8018bc0 <wait_session_status+0x34>
 8018ce0:	4631      	mov	r1, r6
 8018ce2:	f104 0008 	add.w	r0, r4, #8
 8018ce6:	f001 f823 	bl	8019d30 <uxr_get_input_best_effort_stream>
 8018cea:	2800      	cmp	r0, #0
 8018cec:	f43f af68 	beq.w	8018bc0 <wait_session_status+0x34>
 8018cf0:	9902      	ldr	r1, [sp, #8]
 8018cf2:	f002 ffc5 	bl	801bc80 <uxr_receive_best_effort_message>
 8018cf6:	2800      	cmp	r0, #0
 8018cf8:	f43f af62 	beq.w	8018bc0 <wait_session_status+0x34>
 8018cfc:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8018d00:	a90c      	add	r1, sp, #48	@ 0x30
 8018d02:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018d04:	4620      	mov	r0, r4
 8018d06:	f7ff fbc9 	bl	801849c <read_submessage_list>
 8018d0a:	e759      	b.n	8018bc0 <wait_session_status+0x34>
 8018d0c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018d0e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8018d12:	47a0      	blx	r4
 8018d14:	2001      	movs	r0, #1
 8018d16:	b01d      	add	sp, #116	@ 0x74
 8018d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d1c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8018d20:	a90c      	add	r1, sp, #48	@ 0x30
 8018d22:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018d24:	4620      	mov	r0, r4
 8018d26:	f7ff fbb9 	bl	801849c <read_submessage_list>
 8018d2a:	e7bc      	b.n	8018ca6 <wait_session_status+0x11a>

08018d2c <uxr_delete_session_retries>:
 8018d2c:	b530      	push	{r4, r5, lr}
 8018d2e:	b08f      	sub	sp, #60	@ 0x3c
 8018d30:	4604      	mov	r4, r0
 8018d32:	460d      	mov	r5, r1
 8018d34:	f000 fa34 	bl	80191a0 <uxr_session_header_offset>
 8018d38:	2300      	movs	r3, #0
 8018d3a:	2210      	movs	r2, #16
 8018d3c:	a902      	add	r1, sp, #8
 8018d3e:	9000      	str	r0, [sp, #0]
 8018d40:	a806      	add	r0, sp, #24
 8018d42:	f7f6 fffd 	bl	800fd40 <ucdr_init_buffer_origin_offset>
 8018d46:	a906      	add	r1, sp, #24
 8018d48:	4620      	mov	r0, r4
 8018d4a:	f000 f979 	bl	8019040 <uxr_buffer_delete_session>
 8018d4e:	2200      	movs	r2, #0
 8018d50:	9b06      	ldr	r3, [sp, #24]
 8018d52:	4620      	mov	r0, r4
 8018d54:	4611      	mov	r1, r2
 8018d56:	f000 f9cf 	bl	80190f8 <uxr_stamp_session_header>
 8018d5a:	a806      	add	r0, sp, #24
 8018d5c:	f7f7 f830 	bl	800fdc0 <ucdr_buffer_length>
 8018d60:	462b      	mov	r3, r5
 8018d62:	4602      	mov	r2, r0
 8018d64:	a902      	add	r1, sp, #8
 8018d66:	4620      	mov	r0, r4
 8018d68:	f7ff ff10 	bl	8018b8c <wait_session_status>
 8018d6c:	b118      	cbz	r0, 8018d76 <uxr_delete_session_retries+0x4a>
 8018d6e:	7960      	ldrb	r0, [r4, #5]
 8018d70:	fab0 f080 	clz	r0, r0
 8018d74:	0940      	lsrs	r0, r0, #5
 8018d76:	b00f      	add	sp, #60	@ 0x3c
 8018d78:	bd30      	pop	{r4, r5, pc}
 8018d7a:	bf00      	nop

08018d7c <uxr_create_session>:
 8018d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d80:	f100 0b08 	add.w	fp, r0, #8
 8018d84:	4604      	mov	r4, r0
 8018d86:	b0ab      	sub	sp, #172	@ 0xac
 8018d88:	4658      	mov	r0, fp
 8018d8a:	465e      	mov	r6, fp
 8018d8c:	f000 ff22 	bl	8019bd4 <uxr_reset_stream_storage>
 8018d90:	4620      	mov	r0, r4
 8018d92:	f000 fa05 	bl	80191a0 <uxr_session_header_offset>
 8018d96:	2300      	movs	r3, #0
 8018d98:	221c      	movs	r2, #28
 8018d9a:	a90b      	add	r1, sp, #44	@ 0x2c
 8018d9c:	9000      	str	r0, [sp, #0]
 8018d9e:	a812      	add	r0, sp, #72	@ 0x48
 8018da0:	f7f6 ffce 	bl	800fd40 <ucdr_init_buffer_origin_offset>
 8018da4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018da6:	a912      	add	r1, sp, #72	@ 0x48
 8018da8:	4620      	mov	r0, r4
 8018daa:	8a1a      	ldrh	r2, [r3, #16]
 8018dac:	3a04      	subs	r2, #4
 8018dae:	b292      	uxth	r2, r2
 8018db0:	f000 f91c 	bl	8018fec <uxr_buffer_create_session>
 8018db4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018db6:	4620      	mov	r0, r4
 8018db8:	f000 f98a 	bl	80190d0 <uxr_stamp_create_session_header>
 8018dbc:	a812      	add	r0, sp, #72	@ 0x48
 8018dbe:	f7f6 ffff 	bl	800fdc0 <ucdr_buffer_length>
 8018dc2:	23ff      	movs	r3, #255	@ 0xff
 8018dc4:	4681      	mov	r9, r0
 8018dc6:	7163      	strb	r3, [r4, #5]
 8018dc8:	230a      	movs	r3, #10
 8018dca:	9303      	str	r3, [sp, #12]
 8018dcc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018dce:	464a      	mov	r2, r9
 8018dd0:	a90b      	add	r1, sp, #44	@ 0x2c
 8018dd2:	e9d3 0500 	ldrd	r0, r5, [r3]
 8018dd6:	47a8      	blx	r5
 8018dd8:	f001 f81c 	bl	8019e14 <uxr_millis>
 8018ddc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8018de0:	4605      	mov	r5, r0
 8018de2:	e009      	b.n	8018df8 <uxr_create_session+0x7c>
 8018de4:	f001 f816 	bl	8019e14 <uxr_millis>
 8018de8:	1b40      	subs	r0, r0, r5
 8018dea:	7962      	ldrb	r2, [r4, #5]
 8018dec:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	dd38      	ble.n	8018e66 <uxr_create_session+0xea>
 8018df4:	2aff      	cmp	r2, #255	@ 0xff
 8018df6:	d13c      	bne.n	8018e72 <uxr_create_session+0xf6>
 8018df8:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8018dfa:	a907      	add	r1, sp, #28
 8018dfc:	6897      	ldr	r7, [r2, #8]
 8018dfe:	6810      	ldr	r0, [r2, #0]
 8018e00:	aa08      	add	r2, sp, #32
 8018e02:	47b8      	blx	r7
 8018e04:	2800      	cmp	r0, #0
 8018e06:	d0ed      	beq.n	8018de4 <uxr_create_session+0x68>
 8018e08:	a81a      	add	r0, sp, #104	@ 0x68
 8018e0a:	2700      	movs	r7, #0
 8018e0c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8018e10:	f7f6 ffa8 	bl	800fd64 <ucdr_init_buffer>
 8018e14:	f10d 031a 	add.w	r3, sp, #26
 8018e18:	aa06      	add	r2, sp, #24
 8018e1a:	a91a      	add	r1, sp, #104	@ 0x68
 8018e1c:	4620      	mov	r0, r4
 8018e1e:	f88d 7018 	strb.w	r7, [sp, #24]
 8018e22:	f000 f97d 	bl	8019120 <uxr_read_session_header>
 8018e26:	2800      	cmp	r0, #0
 8018e28:	d0dc      	beq.n	8018de4 <uxr_create_session+0x68>
 8018e2a:	4639      	mov	r1, r7
 8018e2c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8018e30:	f000 fe9a 	bl	8019b68 <uxr_stream_id_from_raw>
 8018e34:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8018e38:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8018e3c:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8018e40:	2f01      	cmp	r7, #1
 8018e42:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8018e46:	d053      	beq.n	8018ef0 <uxr_create_session+0x174>
 8018e48:	2f02      	cmp	r7, #2
 8018e4a:	d018      	beq.n	8018e7e <uxr_create_session+0x102>
 8018e4c:	2f00      	cmp	r7, #0
 8018e4e:	d1c9      	bne.n	8018de4 <uxr_create_session+0x68>
 8018e50:	4639      	mov	r1, r7
 8018e52:	4638      	mov	r0, r7
 8018e54:	f000 fe88 	bl	8019b68 <uxr_stream_id_from_raw>
 8018e58:	a91a      	add	r1, sp, #104	@ 0x68
 8018e5a:	4602      	mov	r2, r0
 8018e5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8018e5e:	4620      	mov	r0, r4
 8018e60:	f7ff fb1c 	bl	801849c <read_submessage_list>
 8018e64:	e7be      	b.n	8018de4 <uxr_create_session+0x68>
 8018e66:	9b03      	ldr	r3, [sp, #12]
 8018e68:	3b01      	subs	r3, #1
 8018e6a:	9303      	str	r3, [sp, #12]
 8018e6c:	d001      	beq.n	8018e72 <uxr_create_session+0xf6>
 8018e6e:	2aff      	cmp	r2, #255	@ 0xff
 8018e70:	d0ac      	beq.n	8018dcc <uxr_create_session+0x50>
 8018e72:	2a00      	cmp	r2, #0
 8018e74:	d051      	beq.n	8018f1a <uxr_create_session+0x19e>
 8018e76:	2000      	movs	r0, #0
 8018e78:	b02b      	add	sp, #172	@ 0xac
 8018e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e7e:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8018e82:	4641      	mov	r1, r8
 8018e84:	4630      	mov	r0, r6
 8018e86:	9304      	str	r3, [sp, #16]
 8018e88:	f000 ff5c 	bl	8019d44 <uxr_get_input_reliable_stream>
 8018e8c:	4682      	mov	sl, r0
 8018e8e:	b348      	cbz	r0, 8018ee4 <uxr_create_session+0x168>
 8018e90:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8018e92:	a81a      	add	r0, sp, #104	@ 0x68
 8018e94:	9205      	str	r2, [sp, #20]
 8018e96:	f7f6 ff97 	bl	800fdc8 <ucdr_buffer_remaining>
 8018e9a:	4603      	mov	r3, r0
 8018e9c:	f10d 0019 	add.w	r0, sp, #25
 8018ea0:	9a05      	ldr	r2, [sp, #20]
 8018ea2:	4659      	mov	r1, fp
 8018ea4:	9000      	str	r0, [sp, #0]
 8018ea6:	4650      	mov	r0, sl
 8018ea8:	f002 ff74 	bl	801bd94 <uxr_receive_reliable_message>
 8018eac:	b1d0      	cbz	r0, 8018ee4 <uxr_create_session+0x168>
 8018eae:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d038      	beq.n	8018f28 <uxr_create_session+0x1ac>
 8018eb6:	9f04      	ldr	r7, [sp, #16]
 8018eb8:	e00a      	b.n	8018ed0 <uxr_create_session+0x154>
 8018eba:	f04f 0302 	mov.w	r3, #2
 8018ebe:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 8018ec2:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 8018ec6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018eca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018ecc:	f7ff fae6 	bl	801849c <read_submessage_list>
 8018ed0:	a922      	add	r1, sp, #136	@ 0x88
 8018ed2:	2204      	movs	r2, #4
 8018ed4:	4650      	mov	r0, sl
 8018ed6:	f002 ffdf 	bl	801be98 <uxr_next_input_reliable_buffer_available>
 8018eda:	4603      	mov	r3, r0
 8018edc:	a922      	add	r1, sp, #136	@ 0x88
 8018ede:	4620      	mov	r0, r4
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	d1ea      	bne.n	8018eba <uxr_create_session+0x13e>
 8018ee4:	4642      	mov	r2, r8
 8018ee6:	9904      	ldr	r1, [sp, #16]
 8018ee8:	4620      	mov	r0, r4
 8018eea:	f7ff f953 	bl	8018194 <write_submessage_acknack.isra.0>
 8018eee:	e779      	b.n	8018de4 <uxr_create_session+0x68>
 8018ef0:	4641      	mov	r1, r8
 8018ef2:	4630      	mov	r0, r6
 8018ef4:	f000 ff1c 	bl	8019d30 <uxr_get_input_best_effort_stream>
 8018ef8:	2800      	cmp	r0, #0
 8018efa:	f43f af73 	beq.w	8018de4 <uxr_create_session+0x68>
 8018efe:	4659      	mov	r1, fp
 8018f00:	f002 febe 	bl	801bc80 <uxr_receive_best_effort_message>
 8018f04:	2800      	cmp	r0, #0
 8018f06:	f43f af6d 	beq.w	8018de4 <uxr_create_session+0x68>
 8018f0a:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8018f0e:	a91a      	add	r1, sp, #104	@ 0x68
 8018f10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018f12:	4620      	mov	r0, r4
 8018f14:	f7ff fac2 	bl	801849c <read_submessage_list>
 8018f18:	e764      	b.n	8018de4 <uxr_create_session+0x68>
 8018f1a:	4630      	mov	r0, r6
 8018f1c:	f000 fe5a 	bl	8019bd4 <uxr_reset_stream_storage>
 8018f20:	2001      	movs	r0, #1
 8018f22:	b02b      	add	sp, #172	@ 0xac
 8018f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f28:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8018f2c:	a91a      	add	r1, sp, #104	@ 0x68
 8018f2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018f30:	4620      	mov	r0, r4
 8018f32:	f7ff fab3 	bl	801849c <read_submessage_list>
 8018f36:	e7be      	b.n	8018eb6 <uxr_create_session+0x13a>

08018f38 <uxr_prepare_stream_to_write_submessage>:
 8018f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f3c:	b082      	sub	sp, #8
 8018f3e:	4604      	mov	r4, r0
 8018f40:	4610      	mov	r0, r2
 8018f42:	4615      	mov	r5, r2
 8018f44:	461e      	mov	r6, r3
 8018f46:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8018f4a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8018f4e:	f105 0904 	add.w	r9, r5, #4
 8018f52:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8018f56:	9101      	str	r1, [sp, #4]
 8018f58:	f000 ff56 	bl	8019e08 <uxr_submessage_padding>
 8018f5c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8018f60:	4481      	add	r9, r0
 8018f62:	2b01      	cmp	r3, #1
 8018f64:	d01d      	beq.n	8018fa2 <uxr_prepare_stream_to_write_submessage+0x6a>
 8018f66:	2b02      	cmp	r3, #2
 8018f68:	d116      	bne.n	8018f98 <uxr_prepare_stream_to_write_submessage+0x60>
 8018f6a:	f104 0008 	add.w	r0, r4, #8
 8018f6e:	4651      	mov	r1, sl
 8018f70:	f000 fed2 	bl	8019d18 <uxr_get_output_reliable_stream>
 8018f74:	4604      	mov	r4, r0
 8018f76:	b158      	cbz	r0, 8018f90 <uxr_prepare_stream_to_write_submessage+0x58>
 8018f78:	4649      	mov	r1, r9
 8018f7a:	4632      	mov	r2, r6
 8018f7c:	f003 f952 	bl	801c224 <uxr_prepare_reliable_buffer_to_write>
 8018f80:	4604      	mov	r4, r0
 8018f82:	b12c      	cbz	r4, 8018f90 <uxr_prepare_stream_to_write_submessage+0x58>
 8018f84:	4643      	mov	r3, r8
 8018f86:	b2aa      	uxth	r2, r5
 8018f88:	4639      	mov	r1, r7
 8018f8a:	4630      	mov	r0, r6
 8018f8c:	f000 fefc 	bl	8019d88 <uxr_buffer_submessage_header>
 8018f90:	4620      	mov	r0, r4
 8018f92:	b002      	add	sp, #8
 8018f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f98:	2400      	movs	r4, #0
 8018f9a:	4620      	mov	r0, r4
 8018f9c:	b002      	add	sp, #8
 8018f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018fa2:	f104 0008 	add.w	r0, r4, #8
 8018fa6:	4651      	mov	r1, sl
 8018fa8:	f000 feae 	bl	8019d08 <uxr_get_output_best_effort_stream>
 8018fac:	4604      	mov	r4, r0
 8018fae:	2800      	cmp	r0, #0
 8018fb0:	d0ee      	beq.n	8018f90 <uxr_prepare_stream_to_write_submessage+0x58>
 8018fb2:	4649      	mov	r1, r9
 8018fb4:	4632      	mov	r2, r6
 8018fb6:	f003 f85f 	bl	801c078 <uxr_prepare_best_effort_buffer_to_write>
 8018fba:	4604      	mov	r4, r0
 8018fbc:	e7e1      	b.n	8018f82 <uxr_prepare_stream_to_write_submessage+0x4a>
 8018fbe:	bf00      	nop

08018fc0 <uxr_init_session_info>:
 8018fc0:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8018fc4:	23ff      	movs	r3, #255	@ 0xff
 8018fc6:	7102      	strb	r2, [r0, #4]
 8018fc8:	f880 c001 	strb.w	ip, [r0, #1]
 8018fcc:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8018fd0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8018fd4:	7001      	strb	r1, [r0, #0]
 8018fd6:	f880 c002 	strb.w	ip, [r0, #2]
 8018fda:	7143      	strb	r3, [r0, #5]
 8018fdc:	70c2      	strb	r2, [r0, #3]
 8018fde:	b500      	push	{lr}
 8018fe0:	f04f 0e09 	mov.w	lr, #9
 8018fe4:	f8a0 e006 	strh.w	lr, [r0, #6]
 8018fe8:	f85d fb04 	ldr.w	pc, [sp], #4

08018fec <uxr_buffer_create_session>:
 8018fec:	b530      	push	{r4, r5, lr}
 8018fee:	2300      	movs	r3, #0
 8018ff0:	b089      	sub	sp, #36	@ 0x24
 8018ff2:	4d12      	ldr	r5, [pc, #72]	@ (801903c <uxr_buffer_create_session+0x50>)
 8018ff4:	460c      	mov	r4, r1
 8018ff6:	9307      	str	r3, [sp, #28]
 8018ff8:	4619      	mov	r1, r3
 8018ffa:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018ffe:	2201      	movs	r2, #1
 8019000:	9301      	str	r3, [sp, #4]
 8019002:	80c2      	strh	r2, [r0, #6]
 8019004:	f88d 2004 	strb.w	r2, [sp, #4]
 8019008:	682a      	ldr	r2, [r5, #0]
 801900a:	9303      	str	r3, [sp, #12]
 801900c:	9200      	str	r2, [sp, #0]
 801900e:	88aa      	ldrh	r2, [r5, #4]
 8019010:	9306      	str	r3, [sp, #24]
 8019012:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019016:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801901a:	9202      	str	r2, [sp, #8]
 801901c:	7802      	ldrb	r2, [r0, #0]
 801901e:	4620      	mov	r0, r4
 8019020:	f88d 200c 	strb.w	r2, [sp, #12]
 8019024:	2210      	movs	r2, #16
 8019026:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801902a:	f000 fead 	bl	8019d88 <uxr_buffer_submessage_header>
 801902e:	4669      	mov	r1, sp
 8019030:	4620      	mov	r0, r4
 8019032:	f001 fdcb 	bl	801abcc <uxr_serialize_CREATE_CLIENT_Payload>
 8019036:	b009      	add	sp, #36	@ 0x24
 8019038:	bd30      	pop	{r4, r5, pc}
 801903a:	bf00      	nop
 801903c:	0801e1e8 	.word	0x0801e1e8

08019040 <uxr_buffer_delete_session>:
 8019040:	4a0c      	ldr	r2, [pc, #48]	@ (8019074 <uxr_buffer_delete_session+0x34>)
 8019042:	2302      	movs	r3, #2
 8019044:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 8019048:	b510      	push	{r4, lr}
 801904a:	460c      	mov	r4, r1
 801904c:	b082      	sub	sp, #8
 801904e:	8911      	ldrh	r1, [r2, #8]
 8019050:	2204      	movs	r2, #4
 8019052:	80c3      	strh	r3, [r0, #6]
 8019054:	2300      	movs	r3, #0
 8019056:	f8ad 1006 	strh.w	r1, [sp, #6]
 801905a:	4620      	mov	r0, r4
 801905c:	2103      	movs	r1, #3
 801905e:	f8ad c004 	strh.w	ip, [sp, #4]
 8019062:	f000 fe91 	bl	8019d88 <uxr_buffer_submessage_header>
 8019066:	a901      	add	r1, sp, #4
 8019068:	4620      	mov	r0, r4
 801906a:	f001 fe57 	bl	801ad1c <uxr_serialize_DELETE_Payload>
 801906e:	b002      	add	sp, #8
 8019070:	bd10      	pop	{r4, pc}
 8019072:	bf00      	nop
 8019074:	0801e1e8 	.word	0x0801e1e8

08019078 <uxr_read_create_session_status>:
 8019078:	b510      	push	{r4, lr}
 801907a:	460b      	mov	r3, r1
 801907c:	b088      	sub	sp, #32
 801907e:	4604      	mov	r4, r0
 8019080:	a901      	add	r1, sp, #4
 8019082:	4618      	mov	r0, r3
 8019084:	f001 fe5a 	bl	801ad3c <uxr_deserialize_STATUS_AGENT_Payload>
 8019088:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801908c:	7163      	strb	r3, [r4, #5]
 801908e:	b008      	add	sp, #32
 8019090:	bd10      	pop	{r4, pc}
 8019092:	bf00      	nop

08019094 <uxr_read_delete_session_status>:
 8019094:	b510      	push	{r4, lr}
 8019096:	b084      	sub	sp, #16
 8019098:	4604      	mov	r4, r0
 801909a:	4608      	mov	r0, r1
 801909c:	a902      	add	r1, sp, #8
 801909e:	f001 fe7d 	bl	801ad9c <uxr_deserialize_STATUS_Payload>
 80190a2:	88e3      	ldrh	r3, [r4, #6]
 80190a4:	2b02      	cmp	r3, #2
 80190a6:	d001      	beq.n	80190ac <uxr_read_delete_session_status+0x18>
 80190a8:	b004      	add	sp, #16
 80190aa:	bd10      	pop	{r4, pc}
 80190ac:	f10d 000a 	add.w	r0, sp, #10
 80190b0:	f7fe fec6 	bl	8017e40 <uxr_object_id_from_raw>
 80190b4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80190b8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80190bc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80190c0:	b29b      	uxth	r3, r3
 80190c2:	2b02      	cmp	r3, #2
 80190c4:	d1f0      	bne.n	80190a8 <uxr_read_delete_session_status+0x14>
 80190c6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80190ca:	7163      	strb	r3, [r4, #5]
 80190cc:	e7ec      	b.n	80190a8 <uxr_read_delete_session_status+0x14>
 80190ce:	bf00      	nop

080190d0 <uxr_stamp_create_session_header>:
 80190d0:	b510      	push	{r4, lr}
 80190d2:	2208      	movs	r2, #8
 80190d4:	b08a      	sub	sp, #40	@ 0x28
 80190d6:	4604      	mov	r4, r0
 80190d8:	eb0d 0002 	add.w	r0, sp, r2
 80190dc:	f7f6 fe42 	bl	800fd64 <ucdr_init_buffer>
 80190e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80190e4:	2300      	movs	r3, #0
 80190e6:	a802      	add	r0, sp, #8
 80190e8:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80190ec:	9400      	str	r4, [sp, #0]
 80190ee:	461a      	mov	r2, r3
 80190f0:	f000 fef2 	bl	8019ed8 <uxr_serialize_message_header>
 80190f4:	b00a      	add	sp, #40	@ 0x28
 80190f6:	bd10      	pop	{r4, pc}

080190f8 <uxr_stamp_session_header>:
 80190f8:	b530      	push	{r4, r5, lr}
 80190fa:	b08d      	sub	sp, #52	@ 0x34
 80190fc:	4604      	mov	r4, r0
 80190fe:	460d      	mov	r5, r1
 8019100:	4619      	mov	r1, r3
 8019102:	a804      	add	r0, sp, #16
 8019104:	9203      	str	r2, [sp, #12]
 8019106:	2208      	movs	r2, #8
 8019108:	f7f6 fe2c 	bl	800fd64 <ucdr_init_buffer>
 801910c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019110:	9b03      	ldr	r3, [sp, #12]
 8019112:	462a      	mov	r2, r5
 8019114:	a804      	add	r0, sp, #16
 8019116:	9400      	str	r4, [sp, #0]
 8019118:	f000 fede 	bl	8019ed8 <uxr_serialize_message_header>
 801911c:	b00d      	add	sp, #52	@ 0x34
 801911e:	bd30      	pop	{r4, r5, pc}

08019120 <uxr_read_session_header>:
 8019120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019124:	4607      	mov	r7, r0
 8019126:	b084      	sub	sp, #16
 8019128:	4608      	mov	r0, r1
 801912a:	460c      	mov	r4, r1
 801912c:	4615      	mov	r5, r2
 801912e:	461e      	mov	r6, r3
 8019130:	f7f6 fe4a 	bl	800fdc8 <ucdr_buffer_remaining>
 8019134:	2808      	cmp	r0, #8
 8019136:	d803      	bhi.n	8019140 <uxr_read_session_header+0x20>
 8019138:	2000      	movs	r0, #0
 801913a:	b004      	add	sp, #16
 801913c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019140:	f10d 080c 	add.w	r8, sp, #12
 8019144:	4633      	mov	r3, r6
 8019146:	462a      	mov	r2, r5
 8019148:	4620      	mov	r0, r4
 801914a:	f10d 010b 	add.w	r1, sp, #11
 801914e:	f8cd 8000 	str.w	r8, [sp]
 8019152:	f000 fedf 	bl	8019f14 <uxr_deserialize_message_header>
 8019156:	783a      	ldrb	r2, [r7, #0]
 8019158:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801915c:	4293      	cmp	r3, r2
 801915e:	d1eb      	bne.n	8019138 <uxr_read_session_header+0x18>
 8019160:	061b      	lsls	r3, r3, #24
 8019162:	d41b      	bmi.n	801919c <uxr_read_session_header+0x7c>
 8019164:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8019168:	787b      	ldrb	r3, [r7, #1]
 801916a:	429a      	cmp	r2, r3
 801916c:	d003      	beq.n	8019176 <uxr_read_session_header+0x56>
 801916e:	2001      	movs	r0, #1
 8019170:	f080 0001 	eor.w	r0, r0, #1
 8019174:	e7e1      	b.n	801913a <uxr_read_session_header+0x1a>
 8019176:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801917a:	1cb8      	adds	r0, r7, #2
 801917c:	78bb      	ldrb	r3, [r7, #2]
 801917e:	429a      	cmp	r2, r3
 8019180:	d1f5      	bne.n	801916e <uxr_read_session_header+0x4e>
 8019182:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8019186:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801918a:	429a      	cmp	r2, r3
 801918c:	d1ef      	bne.n	801916e <uxr_read_session_header+0x4e>
 801918e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8019192:	7843      	ldrb	r3, [r0, #1]
 8019194:	429a      	cmp	r2, r3
 8019196:	d1ea      	bne.n	801916e <uxr_read_session_header+0x4e>
 8019198:	2000      	movs	r0, #0
 801919a:	e7e9      	b.n	8019170 <uxr_read_session_header+0x50>
 801919c:	2001      	movs	r0, #1
 801919e:	e7cc      	b.n	801913a <uxr_read_session_header+0x1a>

080191a0 <uxr_session_header_offset>:
 80191a0:	f990 3000 	ldrsb.w	r3, [r0]
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	bfac      	ite	ge
 80191a8:	2008      	movge	r0, #8
 80191aa:	2004      	movlt	r0, #4
 80191ac:	4770      	bx	lr
 80191ae:	bf00      	nop

080191b0 <uxr_init_base_object_request>:
 80191b0:	b510      	push	{r4, lr}
 80191b2:	b082      	sub	sp, #8
 80191b4:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 80191b8:	9101      	str	r1, [sp, #4]
 80191ba:	88c3      	ldrh	r3, [r0, #6]
 80191bc:	f1a3 010a 	sub.w	r1, r3, #10
 80191c0:	b289      	uxth	r1, r1
 80191c2:	42a1      	cmp	r1, r4
 80191c4:	d80f      	bhi.n	80191e6 <uxr_init_base_object_request+0x36>
 80191c6:	3301      	adds	r3, #1
 80191c8:	b29c      	uxth	r4, r3
 80191ca:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 80191ce:	b2db      	uxtb	r3, r3
 80191d0:	80c4      	strh	r4, [r0, #6]
 80191d2:	1c91      	adds	r1, r2, #2
 80191d4:	9801      	ldr	r0, [sp, #4]
 80191d6:	f882 c000 	strb.w	ip, [r2]
 80191da:	7053      	strb	r3, [r2, #1]
 80191dc:	f7fe fe44 	bl	8017e68 <uxr_object_id_to_raw>
 80191e0:	4620      	mov	r0, r4
 80191e2:	b002      	add	sp, #8
 80191e4:	bd10      	pop	{r4, pc}
 80191e6:	230a      	movs	r3, #10
 80191e8:	f04f 0c00 	mov.w	ip, #0
 80191ec:	461c      	mov	r4, r3
 80191ee:	e7ef      	b.n	80191d0 <uxr_init_base_object_request+0x20>

080191f0 <uxr_parse_base_object_request>:
 80191f0:	b570      	push	{r4, r5, r6, lr}
 80191f2:	4604      	mov	r4, r0
 80191f4:	3002      	adds	r0, #2
 80191f6:	460d      	mov	r5, r1
 80191f8:	4616      	mov	r6, r2
 80191fa:	f7fe fe21 	bl	8017e40 <uxr_object_id_from_raw>
 80191fe:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8019202:	8028      	strh	r0, [r5, #0]
 8019204:	806b      	strh	r3, [r5, #2]
 8019206:	7822      	ldrb	r2, [r4, #0]
 8019208:	7863      	ldrb	r3, [r4, #1]
 801920a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801920e:	8033      	strh	r3, [r6, #0]
 8019210:	bd70      	pop	{r4, r5, r6, pc}
 8019212:	bf00      	nop

08019214 <uxr_init_framing_io>:
 8019214:	2300      	movs	r3, #0
 8019216:	7041      	strb	r1, [r0, #1]
 8019218:	7003      	strb	r3, [r0, #0]
 801921a:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801921c:	4770      	bx	lr
 801921e:	bf00      	nop

08019220 <uxr_write_framed_msg>:
 8019220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019224:	4617      	mov	r7, r2
 8019226:	7842      	ldrb	r2, [r0, #1]
 8019228:	460e      	mov	r6, r1
 801922a:	b083      	sub	sp, #12
 801922c:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8019230:	469b      	mov	fp, r3
 8019232:	237e      	movs	r3, #126	@ 0x7e
 8019234:	4604      	mov	r4, r0
 8019236:	2901      	cmp	r1, #1
 8019238:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801923c:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8019240:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8019244:	f240 8115 	bls.w	8019472 <uxr_write_framed_msg+0x252>
 8019248:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801924c:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8019250:	2202      	movs	r2, #2
 8019252:	2901      	cmp	r1, #1
 8019254:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019258:	d952      	bls.n	8019300 <uxr_write_framed_msg+0xe0>
 801925a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801925c:	2103      	movs	r1, #3
 801925e:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8019262:	b2dd      	uxtb	r5, r3
 8019264:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8019268:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 801926c:	2a01      	cmp	r2, #1
 801926e:	d95c      	bls.n	801932a <uxr_write_framed_msg+0x10a>
 8019270:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019272:	1862      	adds	r2, r4, r1
 8019274:	3101      	adds	r1, #1
 8019276:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801927a:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 801927e:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8019282:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8019286:	2a01      	cmp	r2, #1
 8019288:	d961      	bls.n	801934e <uxr_write_framed_msg+0x12e>
 801928a:	1c4a      	adds	r2, r1, #1
 801928c:	4421      	add	r1, r4
 801928e:	b2d2      	uxtb	r2, r2
 8019290:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8019294:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019298:	2b00      	cmp	r3, #0
 801929a:	d06a      	beq.n	8019372 <uxr_write_framed_msg+0x152>
 801929c:	f04f 0800 	mov.w	r8, #0
 80192a0:	46c1      	mov	r9, r8
 80192a2:	e016      	b.n	80192d2 <uxr_write_framed_msg+0xb2>
 80192a4:	2a29      	cmp	r2, #41	@ 0x29
 80192a6:	d868      	bhi.n	801937a <uxr_write_framed_msg+0x15a>
 80192a8:	18a0      	adds	r0, r4, r2
 80192aa:	3201      	adds	r2, #1
 80192ac:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80192b0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80192b4:	ea88 0101 	eor.w	r1, r8, r1
 80192b8:	4b7d      	ldr	r3, [pc, #500]	@ (80194b0 <uxr_write_framed_msg+0x290>)
 80192ba:	f109 0901 	add.w	r9, r9, #1
 80192be:	b2c9      	uxtb	r1, r1
 80192c0:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80192c4:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 80192c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80192ca:	454b      	cmp	r3, r9
 80192cc:	d969      	bls.n	80193a2 <uxr_write_framed_msg+0x182>
 80192ce:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80192d2:	f81b 1009 	ldrb.w	r1, [fp, r9]
 80192d6:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80192da:	2801      	cmp	r0, #1
 80192dc:	d8e2      	bhi.n	80192a4 <uxr_write_framed_msg+0x84>
 80192de:	1c50      	adds	r0, r2, #1
 80192e0:	b2c0      	uxtb	r0, r0
 80192e2:	2829      	cmp	r0, #41	@ 0x29
 80192e4:	d849      	bhi.n	801937a <uxr_write_framed_msg+0x15a>
 80192e6:	18a0      	adds	r0, r4, r2
 80192e8:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 80192ec:	3202      	adds	r2, #2
 80192ee:	f081 0520 	eor.w	r5, r1, #32
 80192f2:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80192f6:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 80192fa:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80192fe:	e7d9      	b.n	80192b4 <uxr_write_framed_msg+0x94>
 8019300:	2104      	movs	r1, #4
 8019302:	f04f 0c03 	mov.w	ip, #3
 8019306:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019308:	4422      	add	r2, r4
 801930a:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 801930e:	44a4      	add	ip, r4
 8019310:	b2dd      	uxtb	r5, r3
 8019312:	f080 0020 	eor.w	r0, r0, #32
 8019316:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 801931a:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 801931e:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8019322:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8019326:	2a01      	cmp	r2, #1
 8019328:	d8a2      	bhi.n	8019270 <uxr_write_framed_msg+0x50>
 801932a:	1862      	adds	r2, r4, r1
 801932c:	207d      	movs	r0, #125	@ 0x7d
 801932e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019330:	f085 0520 	eor.w	r5, r5, #32
 8019334:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 8019338:	3102      	adds	r1, #2
 801933a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801933e:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 8019342:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8019346:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 801934a:	2a01      	cmp	r2, #1
 801934c:	d89d      	bhi.n	801928a <uxr_write_framed_msg+0x6a>
 801934e:	1c4d      	adds	r5, r1, #1
 8019350:	1c8a      	adds	r2, r1, #2
 8019352:	f080 0020 	eor.w	r0, r0, #32
 8019356:	4421      	add	r1, r4
 8019358:	fa54 f585 	uxtab	r5, r4, r5
 801935c:	b2d2      	uxtb	r2, r2
 801935e:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8019362:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 8019366:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 801936a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801936e:	2b00      	cmp	r3, #0
 8019370:	d194      	bne.n	801929c <uxr_write_framed_msg+0x7c>
 8019372:	4619      	mov	r1, r3
 8019374:	f8ad 3004 	strh.w	r3, [sp, #4]
 8019378:	e019      	b.n	80193ae <uxr_write_framed_msg+0x18e>
 801937a:	2500      	movs	r5, #0
 801937c:	e000      	b.n	8019380 <uxr_write_framed_msg+0x160>
 801937e:	b160      	cbz	r0, 801939a <uxr_write_framed_msg+0x17a>
 8019380:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8019384:	1b52      	subs	r2, r2, r5
 8019386:	4653      	mov	r3, sl
 8019388:	4638      	mov	r0, r7
 801938a:	4421      	add	r1, r4
 801938c:	47b0      	blx	r6
 801938e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8019392:	4405      	add	r5, r0
 8019394:	4295      	cmp	r5, r2
 8019396:	d3f2      	bcc.n	801937e <uxr_write_framed_msg+0x15e>
 8019398:	d066      	beq.n	8019468 <uxr_write_framed_msg+0x248>
 801939a:	2000      	movs	r0, #0
 801939c:	b003      	add	sp, #12
 801939e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193a2:	fa5f f188 	uxtb.w	r1, r8
 80193a6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80193aa:	f8ad 8004 	strh.w	r8, [sp, #4]
 80193ae:	f04f 0900 	mov.w	r9, #0
 80193b2:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 80193b6:	46c8      	mov	r8, r9
 80193b8:	e013      	b.n	80193e2 <uxr_write_framed_msg+0x1c2>
 80193ba:	2a29      	cmp	r2, #41	@ 0x29
 80193bc:	d824      	bhi.n	8019408 <uxr_write_framed_msg+0x1e8>
 80193be:	18a3      	adds	r3, r4, r2
 80193c0:	3201      	adds	r2, #1
 80193c2:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 80193c6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80193ca:	f109 0901 	add.w	r9, r9, #1
 80193ce:	f1b9 0f02 	cmp.w	r9, #2
 80193d2:	d02d      	beq.n	8019430 <uxr_write_framed_msg+0x210>
 80193d4:	f109 0308 	add.w	r3, r9, #8
 80193d8:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80193dc:	446b      	add	r3, sp
 80193de:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 80193e2:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 80193e6:	2b01      	cmp	r3, #1
 80193e8:	d8e7      	bhi.n	80193ba <uxr_write_framed_msg+0x19a>
 80193ea:	1c53      	adds	r3, r2, #1
 80193ec:	b2db      	uxtb	r3, r3
 80193ee:	2b29      	cmp	r3, #41	@ 0x29
 80193f0:	d80a      	bhi.n	8019408 <uxr_write_framed_msg+0x1e8>
 80193f2:	18a3      	adds	r3, r4, r2
 80193f4:	f081 0120 	eor.w	r1, r1, #32
 80193f8:	3202      	adds	r2, #2
 80193fa:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 80193fe:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 8019402:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019406:	e7e0      	b.n	80193ca <uxr_write_framed_msg+0x1aa>
 8019408:	2500      	movs	r5, #0
 801940a:	e001      	b.n	8019410 <uxr_write_framed_msg+0x1f0>
 801940c:	2800      	cmp	r0, #0
 801940e:	d0c4      	beq.n	801939a <uxr_write_framed_msg+0x17a>
 8019410:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8019414:	1b52      	subs	r2, r2, r5
 8019416:	4653      	mov	r3, sl
 8019418:	4638      	mov	r0, r7
 801941a:	4421      	add	r1, r4
 801941c:	47b0      	blx	r6
 801941e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8019422:	4405      	add	r5, r0
 8019424:	4295      	cmp	r5, r2
 8019426:	d3f1      	bcc.n	801940c <uxr_write_framed_msg+0x1ec>
 8019428:	d1b7      	bne.n	801939a <uxr_write_framed_msg+0x17a>
 801942a:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 801942e:	e7d1      	b.n	80193d4 <uxr_write_framed_msg+0x1b4>
 8019430:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8019434:	b19a      	cbz	r2, 801945e <uxr_write_framed_msg+0x23e>
 8019436:	2500      	movs	r5, #0
 8019438:	e001      	b.n	801943e <uxr_write_framed_msg+0x21e>
 801943a:	2800      	cmp	r0, #0
 801943c:	d0ad      	beq.n	801939a <uxr_write_framed_msg+0x17a>
 801943e:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8019442:	1b52      	subs	r2, r2, r5
 8019444:	4653      	mov	r3, sl
 8019446:	4638      	mov	r0, r7
 8019448:	4421      	add	r1, r4
 801944a:	47b0      	blx	r6
 801944c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8019450:	4405      	add	r5, r0
 8019452:	4295      	cmp	r5, r2
 8019454:	d3f1      	bcc.n	801943a <uxr_write_framed_msg+0x21a>
 8019456:	d1a0      	bne.n	801939a <uxr_write_framed_msg+0x17a>
 8019458:	2300      	movs	r3, #0
 801945a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801945e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019460:	b298      	uxth	r0, r3
 8019462:	b003      	add	sp, #12
 8019464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019468:	f04f 0300 	mov.w	r3, #0
 801946c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8019470:	e72a      	b.n	80192c8 <uxr_write_framed_msg+0xa8>
 8019472:	217d      	movs	r1, #125	@ 0x7d
 8019474:	f082 0220 	eor.w	r2, r2, #32
 8019478:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 801947c:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8019480:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8019484:	2203      	movs	r2, #3
 8019486:	2901      	cmp	r1, #1
 8019488:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801948c:	d803      	bhi.n	8019496 <uxr_write_framed_msg+0x276>
 801948e:	2105      	movs	r1, #5
 8019490:	f04f 0c04 	mov.w	ip, #4
 8019494:	e737      	b.n	8019306 <uxr_write_framed_msg+0xe6>
 8019496:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019498:	2104      	movs	r1, #4
 801949a:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 801949e:	b2dd      	uxtb	r5, r3
 80194a0:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80194a4:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 80194a8:	2a01      	cmp	r2, #1
 80194aa:	f63f aee1 	bhi.w	8019270 <uxr_write_framed_msg+0x50>
 80194ae:	e73c      	b.n	801932a <uxr_write_framed_msg+0x10a>
 80194b0:	08020324 	.word	0x08020324

080194b4 <uxr_framing_read_transport>:
 80194b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194b8:	4604      	mov	r4, r0
 80194ba:	b085      	sub	sp, #20
 80194bc:	4692      	mov	sl, r2
 80194be:	4689      	mov	r9, r1
 80194c0:	461d      	mov	r5, r3
 80194c2:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80194c4:	f000 fca6 	bl	8019e14 <uxr_millis>
 80194c8:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 80194cc:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 80194d0:	4680      	mov	r8, r0
 80194d2:	42ba      	cmp	r2, r7
 80194d4:	d05f      	beq.n	8019596 <uxr_framing_read_transport+0xe2>
 80194d6:	d817      	bhi.n	8019508 <uxr_framing_read_transport+0x54>
 80194d8:	3f01      	subs	r7, #1
 80194da:	1aba      	subs	r2, r7, r2
 80194dc:	2700      	movs	r7, #0
 80194de:	b2d2      	uxtb	r2, r2
 80194e0:	42b2      	cmp	r2, r6
 80194e2:	d81a      	bhi.n	801951a <uxr_framing_read_transport+0x66>
 80194e4:	19d3      	adds	r3, r2, r7
 80194e6:	42b3      	cmp	r3, r6
 80194e8:	d852      	bhi.n	8019590 <uxr_framing_read_transport+0xdc>
 80194ea:	b9d2      	cbnz	r2, 8019522 <uxr_framing_read_transport+0x6e>
 80194ec:	2600      	movs	r6, #0
 80194ee:	f000 fc91 	bl	8019e14 <uxr_millis>
 80194f2:	682b      	ldr	r3, [r5, #0]
 80194f4:	eba0 0008 	sub.w	r0, r0, r8
 80194f8:	1a1b      	subs	r3, r3, r0
 80194fa:	4630      	mov	r0, r6
 80194fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019500:	602b      	str	r3, [r5, #0]
 8019502:	b005      	add	sp, #20
 8019504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019508:	2f00      	cmp	r7, #0
 801950a:	d060      	beq.n	80195ce <uxr_framing_read_transport+0x11a>
 801950c:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 8019510:	3f01      	subs	r7, #1
 8019512:	b2d2      	uxtb	r2, r2
 8019514:	b2ff      	uxtb	r7, r7
 8019516:	42b2      	cmp	r2, r6
 8019518:	d9e4      	bls.n	80194e4 <uxr_framing_read_transport+0x30>
 801951a:	b2f2      	uxtb	r2, r6
 801951c:	2700      	movs	r7, #0
 801951e:	2a00      	cmp	r2, #0
 8019520:	d0e4      	beq.n	80194ec <uxr_framing_read_transport+0x38>
 8019522:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019524:	4650      	mov	r0, sl
 8019526:	9203      	str	r2, [sp, #12]
 8019528:	9300      	str	r3, [sp, #0]
 801952a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801952e:	682b      	ldr	r3, [r5, #0]
 8019530:	3102      	adds	r1, #2
 8019532:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 80195d8 <uxr_framing_read_transport+0x124>
 8019536:	4421      	add	r1, r4
 8019538:	47c8      	blx	r9
 801953a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801953e:	4606      	mov	r6, r0
 8019540:	4403      	add	r3, r0
 8019542:	0859      	lsrs	r1, r3, #1
 8019544:	fbab 2101 	umull	r2, r1, fp, r1
 8019548:	222a      	movs	r2, #42	@ 0x2a
 801954a:	0889      	lsrs	r1, r1, #2
 801954c:	fb02 3111 	mls	r1, r2, r1, r3
 8019550:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8019554:	2800      	cmp	r0, #0
 8019556:	d0c9      	beq.n	80194ec <uxr_framing_read_transport+0x38>
 8019558:	9a03      	ldr	r2, [sp, #12]
 801955a:	4290      	cmp	r0, r2
 801955c:	d1c7      	bne.n	80194ee <uxr_framing_read_transport+0x3a>
 801955e:	2f00      	cmp	r7, #0
 8019560:	d0c5      	beq.n	80194ee <uxr_framing_read_transport+0x3a>
 8019562:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019564:	3102      	adds	r1, #2
 8019566:	463a      	mov	r2, r7
 8019568:	4650      	mov	r0, sl
 801956a:	4421      	add	r1, r4
 801956c:	9300      	str	r3, [sp, #0]
 801956e:	2300      	movs	r3, #0
 8019570:	47c8      	blx	r9
 8019572:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8019576:	4406      	add	r6, r0
 8019578:	1813      	adds	r3, r2, r0
 801957a:	085a      	lsrs	r2, r3, #1
 801957c:	fbab 1b02 	umull	r1, fp, fp, r2
 8019580:	222a      	movs	r2, #42	@ 0x2a
 8019582:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8019586:	fb02 331b 	mls	r3, r2, fp, r3
 801958a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801958e:	e7ae      	b.n	80194ee <uxr_framing_read_transport+0x3a>
 8019590:	1ab6      	subs	r6, r6, r2
 8019592:	b2f7      	uxtb	r7, r6
 8019594:	e7a9      	b.n	80194ea <uxr_framing_read_transport+0x36>
 8019596:	2300      	movs	r3, #0
 8019598:	2e28      	cmp	r6, #40	@ 0x28
 801959a:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 801959c:	d9bd      	bls.n	801951a <uxr_framing_read_transport+0x66>
 801959e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80195a0:	2229      	movs	r2, #41	@ 0x29
 80195a2:	1ca1      	adds	r1, r4, #2
 80195a4:	4650      	mov	r0, sl
 80195a6:	9300      	str	r3, [sp, #0]
 80195a8:	682b      	ldr	r3, [r5, #0]
 80195aa:	47c8      	blx	r9
 80195ac:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80195b0:	4606      	mov	r6, r0
 80195b2:	212a      	movs	r1, #42	@ 0x2a
 80195b4:	4403      	add	r3, r0
 80195b6:	4808      	ldr	r0, [pc, #32]	@ (80195d8 <uxr_framing_read_transport+0x124>)
 80195b8:	085a      	lsrs	r2, r3, #1
 80195ba:	fba0 0202 	umull	r0, r2, r0, r2
 80195be:	0892      	lsrs	r2, r2, #2
 80195c0:	fb01 3312 	mls	r3, r1, r2, r3
 80195c4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80195c8:	2e00      	cmp	r6, #0
 80195ca:	d08f      	beq.n	80194ec <uxr_framing_read_transport+0x38>
 80195cc:	e78f      	b.n	80194ee <uxr_framing_read_transport+0x3a>
 80195ce:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 80195d2:	b2d2      	uxtb	r2, r2
 80195d4:	e784      	b.n	80194e0 <uxr_framing_read_transport+0x2c>
 80195d6:	bf00      	nop
 80195d8:	30c30c31 	.word	0x30c30c31

080195dc <uxr_read_framed_msg>:
 80195dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195e0:	461e      	mov	r6, r3
 80195e2:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80195e6:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80195ea:	b083      	sub	sp, #12
 80195ec:	4604      	mov	r4, r0
 80195ee:	4688      	mov	r8, r1
 80195f0:	429d      	cmp	r5, r3
 80195f2:	4691      	mov	r9, r2
 80195f4:	f000 818c 	beq.w	8019910 <uxr_read_framed_msg+0x334>
 80195f8:	7823      	ldrb	r3, [r4, #0]
 80195fa:	4dc3      	ldr	r5, [pc, #780]	@ (8019908 <uxr_read_framed_msg+0x32c>)
 80195fc:	4fc3      	ldr	r7, [pc, #780]	@ (801990c <uxr_read_framed_msg+0x330>)
 80195fe:	2b07      	cmp	r3, #7
 8019600:	d8fd      	bhi.n	80195fe <uxr_read_framed_msg+0x22>
 8019602:	e8df f013 	tbh	[pc, r3, lsl #1]
 8019606:	011c      	.short	0x011c
 8019608:	00d900fb 	.word	0x00d900fb
 801960c:	008f00ba 	.word	0x008f00ba
 8019610:	00320051 	.word	0x00320051
 8019614:	0008      	.short	0x0008
 8019616:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801961a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801961e:	4299      	cmp	r1, r3
 8019620:	f000 814d 	beq.w	80198be <uxr_read_framed_msg+0x2e2>
 8019624:	18e2      	adds	r2, r4, r3
 8019626:	7892      	ldrb	r2, [r2, #2]
 8019628:	2a7d      	cmp	r2, #125	@ 0x7d
 801962a:	f000 81b8 	beq.w	801999e <uxr_read_framed_msg+0x3c2>
 801962e:	3301      	adds	r3, #1
 8019630:	212a      	movs	r1, #42	@ 0x2a
 8019632:	2a7e      	cmp	r2, #126	@ 0x7e
 8019634:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8019638:	fba5 c000 	umull	ip, r0, r5, r0
 801963c:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8019640:	fb01 3310 	mls	r3, r1, r0, r3
 8019644:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019648:	f000 8257 	beq.w	8019afa <uxr_read_framed_msg+0x51e>
 801964c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801964e:	2000      	movs	r0, #0
 8019650:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8019652:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8019656:	7020      	strb	r0, [r4, #0]
 8019658:	b29b      	uxth	r3, r3
 801965a:	4299      	cmp	r1, r3
 801965c:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801965e:	f000 8178 	beq.w	8019952 <uxr_read_framed_msg+0x376>
 8019662:	2000      	movs	r0, #0
 8019664:	b003      	add	sp, #12
 8019666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801966a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801966e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8019672:	4298      	cmp	r0, r3
 8019674:	f000 8132 	beq.w	80198dc <uxr_read_framed_msg+0x300>
 8019678:	18e2      	adds	r2, r4, r3
 801967a:	7891      	ldrb	r1, [r2, #2]
 801967c:	297d      	cmp	r1, #125	@ 0x7d
 801967e:	f000 8170 	beq.w	8019962 <uxr_read_framed_msg+0x386>
 8019682:	3301      	adds	r3, #1
 8019684:	202a      	movs	r0, #42	@ 0x2a
 8019686:	297e      	cmp	r1, #126	@ 0x7e
 8019688:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801968c:	fba5 c202 	umull	ip, r2, r5, r2
 8019690:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019694:	fb00 3312 	mls	r3, r0, r2, r3
 8019698:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801969c:	f000 821d 	beq.w	8019ada <uxr_read_framed_msg+0x4fe>
 80196a0:	2307      	movs	r3, #7
 80196a2:	86a1      	strh	r1, [r4, #52]	@ 0x34
 80196a4:	7023      	strb	r3, [r4, #0]
 80196a6:	e7aa      	b.n	80195fe <uxr_read_framed_msg+0x22>
 80196a8:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80196aa:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80196ae:	459e      	cmp	lr, r3
 80196b0:	d827      	bhi.n	8019702 <uxr_read_framed_msg+0x126>
 80196b2:	e032      	b.n	801971a <uxr_read_framed_msg+0x13e>
 80196b4:	fba5 b101 	umull	fp, r1, r5, r1
 80196b8:	f89c c002 	ldrb.w	ip, [ip, #2]
 80196bc:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 80196c0:	0889      	lsrs	r1, r1, #2
 80196c2:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 80196c6:	fb0b 0111 	mls	r1, fp, r1, r0
 80196ca:	f000 80d4 	beq.w	8019876 <uxr_read_framed_msg+0x29a>
 80196ce:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80196d2:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 80196d6:	f000 80cb 	beq.w	8019870 <uxr_read_framed_msg+0x294>
 80196da:	f806 c003 	strb.w	ip, [r6, r3]
 80196de:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 80196e0:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80196e2:	ea80 010c 	eor.w	r1, r0, ip
 80196e6:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80196ea:	3301      	adds	r3, #1
 80196ec:	b2c9      	uxtb	r1, r1
 80196ee:	b29b      	uxth	r3, r3
 80196f0:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 80196f4:	4573      	cmp	r3, lr
 80196f6:	8663      	strh	r3, [r4, #50]	@ 0x32
 80196f8:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80196fc:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80196fe:	f080 811d 	bcs.w	801993c <uxr_read_framed_msg+0x360>
 8019702:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8019706:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801970a:	1c50      	adds	r0, r2, #1
 801970c:	eb04 0c02 	add.w	ip, r4, r2
 8019710:	4592      	cmp	sl, r2
 8019712:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8019716:	d1cd      	bne.n	80196b4 <uxr_read_framed_msg+0xd8>
 8019718:	459e      	cmp	lr, r3
 801971a:	f040 8114 	bne.w	8019946 <uxr_read_framed_msg+0x36a>
 801971e:	2306      	movs	r3, #6
 8019720:	7023      	strb	r3, [r4, #0]
 8019722:	e76c      	b.n	80195fe <uxr_read_framed_msg+0x22>
 8019724:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8019728:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801972c:	4298      	cmp	r0, r3
 801972e:	f000 80c6 	beq.w	80198be <uxr_read_framed_msg+0x2e2>
 8019732:	18e2      	adds	r2, r4, r3
 8019734:	7891      	ldrb	r1, [r2, #2]
 8019736:	297d      	cmp	r1, #125	@ 0x7d
 8019738:	f000 8193 	beq.w	8019a62 <uxr_read_framed_msg+0x486>
 801973c:	3301      	adds	r3, #1
 801973e:	202a      	movs	r0, #42	@ 0x2a
 8019740:	297e      	cmp	r1, #126	@ 0x7e
 8019742:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8019746:	fba5 c202 	umull	ip, r2, r5, r2
 801974a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801974e:	fb00 3312 	mls	r3, r0, r2, r3
 8019752:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019756:	f000 81d0 	beq.w	8019afa <uxr_read_framed_msg+0x51e>
 801975a:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801975c:	2000      	movs	r0, #0
 801975e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8019762:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019764:	8660      	strh	r0, [r4, #50]	@ 0x32
 8019766:	b29b      	uxth	r3, r3
 8019768:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801976a:	428b      	cmp	r3, r1
 801976c:	8623      	strh	r3, [r4, #48]	@ 0x30
 801976e:	f240 80e2 	bls.w	8019936 <uxr_read_framed_msg+0x35a>
 8019772:	7020      	strb	r0, [r4, #0]
 8019774:	b003      	add	sp, #12
 8019776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801977a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801977e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8019782:	4298      	cmp	r0, r3
 8019784:	f000 80aa 	beq.w	80198dc <uxr_read_framed_msg+0x300>
 8019788:	18e2      	adds	r2, r4, r3
 801978a:	7891      	ldrb	r1, [r2, #2]
 801978c:	297d      	cmp	r1, #125	@ 0x7d
 801978e:	f000 8186 	beq.w	8019a9e <uxr_read_framed_msg+0x4c2>
 8019792:	3301      	adds	r3, #1
 8019794:	202a      	movs	r0, #42	@ 0x2a
 8019796:	297e      	cmp	r1, #126	@ 0x7e
 8019798:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801979c:	fba5 c202 	umull	ip, r2, r5, r2
 80197a0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80197a4:	fb00 3312 	mls	r3, r0, r2, r3
 80197a8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80197ac:	f000 8195 	beq.w	8019ada <uxr_read_framed_msg+0x4fe>
 80197b0:	2304      	movs	r3, #4
 80197b2:	8621      	strh	r1, [r4, #48]	@ 0x30
 80197b4:	7023      	strb	r3, [r4, #0]
 80197b6:	e722      	b.n	80195fe <uxr_read_framed_msg+0x22>
 80197b8:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80197bc:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80197c0:	4290      	cmp	r0, r2
 80197c2:	f000 80b4 	beq.w	801992e <uxr_read_framed_msg+0x352>
 80197c6:	18a3      	adds	r3, r4, r2
 80197c8:	7899      	ldrb	r1, [r3, #2]
 80197ca:	297d      	cmp	r1, #125	@ 0x7d
 80197cc:	f000 8107 	beq.w	80199de <uxr_read_framed_msg+0x402>
 80197d0:	3201      	adds	r2, #1
 80197d2:	232a      	movs	r3, #42	@ 0x2a
 80197d4:	297e      	cmp	r1, #126	@ 0x7e
 80197d6:	ea4f 0052 	mov.w	r0, r2, lsr #1
 80197da:	fba5 c000 	umull	ip, r0, r5, r0
 80197de:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80197e2:	fb03 2210 	mls	r2, r3, r0, r2
 80197e6:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80197ea:	f000 818a 	beq.w	8019b02 <uxr_read_framed_msg+0x526>
 80197ee:	7863      	ldrb	r3, [r4, #1]
 80197f0:	428b      	cmp	r3, r1
 80197f2:	bf0c      	ite	eq
 80197f4:	2303      	moveq	r3, #3
 80197f6:	2300      	movne	r3, #0
 80197f8:	7023      	strb	r3, [r4, #0]
 80197fa:	e700      	b.n	80195fe <uxr_read_framed_msg+0x22>
 80197fc:	2300      	movs	r3, #0
 80197fe:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8019802:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8019806:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801980a:	4299      	cmp	r1, r3
 801980c:	d06a      	beq.n	80198e4 <uxr_read_framed_msg+0x308>
 801980e:	18e2      	adds	r2, r4, r3
 8019810:	7890      	ldrb	r0, [r2, #2]
 8019812:	287d      	cmp	r0, #125	@ 0x7d
 8019814:	f000 8100 	beq.w	8019a18 <uxr_read_framed_msg+0x43c>
 8019818:	3301      	adds	r3, #1
 801981a:	212a      	movs	r1, #42	@ 0x2a
 801981c:	287e      	cmp	r0, #126	@ 0x7e
 801981e:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8019822:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8019826:	fba5 c202 	umull	ip, r2, r5, r2
 801982a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801982e:	fb01 3312 	mls	r3, r1, r2, r3
 8019832:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019836:	d055      	beq.n	80198e4 <uxr_read_framed_msg+0x308>
 8019838:	2302      	movs	r3, #2
 801983a:	7023      	strb	r3, [r4, #0]
 801983c:	e6df      	b.n	80195fe <uxr_read_framed_msg+0x22>
 801983e:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 8019842:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8019846:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801984a:	1c5a      	adds	r2, r3, #1
 801984c:	459c      	cmp	ip, r3
 801984e:	eb04 0103 	add.w	r1, r4, r3
 8019852:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8019856:	f43f af04 	beq.w	8019662 <uxr_read_framed_msg+0x86>
 801985a:	fba5 0303 	umull	r0, r3, r5, r3
 801985e:	7889      	ldrb	r1, [r1, #2]
 8019860:	089b      	lsrs	r3, r3, #2
 8019862:	297e      	cmp	r1, #126	@ 0x7e
 8019864:	fb0e 2313 	mls	r3, lr, r3, r2
 8019868:	b2db      	uxtb	r3, r3
 801986a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801986e:	d1ec      	bne.n	801984a <uxr_read_framed_msg+0x26e>
 8019870:	2301      	movs	r3, #1
 8019872:	7023      	strb	r3, [r4, #0]
 8019874:	e6c3      	b.n	80195fe <uxr_read_framed_msg+0x22>
 8019876:	1c50      	adds	r0, r2, #1
 8019878:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 801987c:	3202      	adds	r2, #2
 801987e:	0841      	lsrs	r1, r0, #1
 8019880:	fba5 c101 	umull	ip, r1, r5, r1
 8019884:	0889      	lsrs	r1, r1, #2
 8019886:	fb0b 0111 	mls	r1, fp, r1, r0
 801988a:	1860      	adds	r0, r4, r1
 801988c:	b2c9      	uxtb	r1, r1
 801988e:	458a      	cmp	sl, r1
 8019890:	f43f af42 	beq.w	8019718 <uxr_read_framed_msg+0x13c>
 8019894:	0851      	lsrs	r1, r2, #1
 8019896:	7880      	ldrb	r0, [r0, #2]
 8019898:	fba5 a101 	umull	sl, r1, r5, r1
 801989c:	287e      	cmp	r0, #126	@ 0x7e
 801989e:	f080 0c20 	eor.w	ip, r0, #32
 80198a2:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80198a6:	fb0b 2211 	mls	r2, fp, r1, r2
 80198aa:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80198ae:	f47f af14 	bne.w	80196da <uxr_read_framed_msg+0xfe>
 80198b2:	459e      	cmp	lr, r3
 80198b4:	f43f af33 	beq.w	801971e <uxr_read_framed_msg+0x142>
 80198b8:	2301      	movs	r3, #1
 80198ba:	7023      	strb	r3, [r4, #0]
 80198bc:	e69f      	b.n	80195fe <uxr_read_framed_msg+0x22>
 80198be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80198c0:	9300      	str	r3, [sp, #0]
 80198c2:	2301      	movs	r3, #1
 80198c4:	9301      	str	r3, [sp, #4]
 80198c6:	464a      	mov	r2, r9
 80198c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80198ca:	4641      	mov	r1, r8
 80198cc:	4620      	mov	r0, r4
 80198ce:	f7ff fdf1 	bl	80194b4 <uxr_framing_read_transport>
 80198d2:	2800      	cmp	r0, #0
 80198d4:	f43f aec5 	beq.w	8019662 <uxr_read_framed_msg+0x86>
 80198d8:	7823      	ldrb	r3, [r4, #0]
 80198da:	e690      	b.n	80195fe <uxr_read_framed_msg+0x22>
 80198dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80198de:	9300      	str	r3, [sp, #0]
 80198e0:	2302      	movs	r3, #2
 80198e2:	e7ef      	b.n	80198c4 <uxr_read_framed_msg+0x2e8>
 80198e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80198e6:	464a      	mov	r2, r9
 80198e8:	4641      	mov	r1, r8
 80198ea:	4620      	mov	r0, r4
 80198ec:	9300      	str	r3, [sp, #0]
 80198ee:	2304      	movs	r3, #4
 80198f0:	9301      	str	r3, [sp, #4]
 80198f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80198f4:	f7ff fdde 	bl	80194b4 <uxr_framing_read_transport>
 80198f8:	2800      	cmp	r0, #0
 80198fa:	d1ed      	bne.n	80198d8 <uxr_read_framed_msg+0x2fc>
 80198fc:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8019900:	2b7e      	cmp	r3, #126	@ 0x7e
 8019902:	d0e9      	beq.n	80198d8 <uxr_read_framed_msg+0x2fc>
 8019904:	e6ad      	b.n	8019662 <uxr_read_framed_msg+0x86>
 8019906:	bf00      	nop
 8019908:	30c30c31 	.word	0x30c30c31
 801990c:	08020324 	.word	0x08020324
 8019910:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019912:	9300      	str	r3, [sp, #0]
 8019914:	2305      	movs	r3, #5
 8019916:	9301      	str	r3, [sp, #4]
 8019918:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801991a:	f7ff fdcb 	bl	80194b4 <uxr_framing_read_transport>
 801991e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8019922:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8019926:	429a      	cmp	r2, r3
 8019928:	f43f ae9b 	beq.w	8019662 <uxr_read_framed_msg+0x86>
 801992c:	e664      	b.n	80195f8 <uxr_read_framed_msg+0x1c>
 801992e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019930:	9300      	str	r3, [sp, #0]
 8019932:	2303      	movs	r3, #3
 8019934:	e7c6      	b.n	80198c4 <uxr_read_framed_msg+0x2e8>
 8019936:	2305      	movs	r3, #5
 8019938:	7023      	strb	r3, [r4, #0]
 801993a:	e660      	b.n	80195fe <uxr_read_framed_msg+0x22>
 801993c:	f43f aeef 	beq.w	801971e <uxr_read_framed_msg+0x142>
 8019940:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8019944:	d094      	beq.n	8019870 <uxr_read_framed_msg+0x294>
 8019946:	ebae 0303 	sub.w	r3, lr, r3
 801994a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801994c:	3302      	adds	r3, #2
 801994e:	9200      	str	r2, [sp, #0]
 8019950:	e7b8      	b.n	80198c4 <uxr_read_framed_msg+0x2e8>
 8019952:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8019956:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019958:	7013      	strb	r3, [r2, #0]
 801995a:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801995c:	b003      	add	sp, #12
 801995e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019962:	1c59      	adds	r1, r3, #1
 8019964:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8019968:	084a      	lsrs	r2, r1, #1
 801996a:	fba5 e202 	umull	lr, r2, r5, r2
 801996e:	0892      	lsrs	r2, r2, #2
 8019970:	fb0c 1212 	mls	r2, ip, r2, r1
 8019974:	b2d1      	uxtb	r1, r2
 8019976:	4288      	cmp	r0, r1
 8019978:	d0b0      	beq.n	80198dc <uxr_read_framed_msg+0x300>
 801997a:	3302      	adds	r3, #2
 801997c:	4422      	add	r2, r4
 801997e:	7891      	ldrb	r1, [r2, #2]
 8019980:	085a      	lsrs	r2, r3, #1
 8019982:	fba5 0202 	umull	r0, r2, r5, r2
 8019986:	297e      	cmp	r1, #126	@ 0x7e
 8019988:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801998c:	fb0c 3312 	mls	r3, ip, r2, r3
 8019990:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019994:	f000 80a1 	beq.w	8019ada <uxr_read_framed_msg+0x4fe>
 8019998:	f081 0120 	eor.w	r1, r1, #32
 801999c:	e680      	b.n	80196a0 <uxr_read_framed_msg+0xc4>
 801999e:	f103 0c01 	add.w	ip, r3, #1
 80199a2:	202a      	movs	r0, #42	@ 0x2a
 80199a4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80199a8:	fba5 e202 	umull	lr, r2, r5, r2
 80199ac:	0892      	lsrs	r2, r2, #2
 80199ae:	fb00 c212 	mls	r2, r0, r2, ip
 80199b2:	fa5f fc82 	uxtb.w	ip, r2
 80199b6:	4561      	cmp	r1, ip
 80199b8:	d081      	beq.n	80198be <uxr_read_framed_msg+0x2e2>
 80199ba:	3302      	adds	r3, #2
 80199bc:	4422      	add	r2, r4
 80199be:	0859      	lsrs	r1, r3, #1
 80199c0:	7892      	ldrb	r2, [r2, #2]
 80199c2:	fba5 c101 	umull	ip, r1, r5, r1
 80199c6:	2a7e      	cmp	r2, #126	@ 0x7e
 80199c8:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80199cc:	fb00 3311 	mls	r3, r0, r1, r3
 80199d0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80199d4:	f000 8091 	beq.w	8019afa <uxr_read_framed_msg+0x51e>
 80199d8:	f082 0220 	eor.w	r2, r2, #32
 80199dc:	e636      	b.n	801964c <uxr_read_framed_msg+0x70>
 80199de:	1c51      	adds	r1, r2, #1
 80199e0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80199e4:	084b      	lsrs	r3, r1, #1
 80199e6:	fba5 e303 	umull	lr, r3, r5, r3
 80199ea:	089b      	lsrs	r3, r3, #2
 80199ec:	fb0c 1313 	mls	r3, ip, r3, r1
 80199f0:	b2d9      	uxtb	r1, r3
 80199f2:	4288      	cmp	r0, r1
 80199f4:	d09b      	beq.n	801992e <uxr_read_framed_msg+0x352>
 80199f6:	3202      	adds	r2, #2
 80199f8:	4423      	add	r3, r4
 80199fa:	0850      	lsrs	r0, r2, #1
 80199fc:	789b      	ldrb	r3, [r3, #2]
 80199fe:	fba5 1000 	umull	r1, r0, r5, r0
 8019a02:	2b7e      	cmp	r3, #126	@ 0x7e
 8019a04:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8019a08:	fb0c 2210 	mls	r2, ip, r0, r2
 8019a0c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8019a10:	d077      	beq.n	8019b02 <uxr_read_framed_msg+0x526>
 8019a12:	f083 0120 	eor.w	r1, r3, #32
 8019a16:	e6ea      	b.n	80197ee <uxr_read_framed_msg+0x212>
 8019a18:	f103 0c01 	add.w	ip, r3, #1
 8019a1c:	202a      	movs	r0, #42	@ 0x2a
 8019a1e:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019a22:	fba5 e202 	umull	lr, r2, r5, r2
 8019a26:	0892      	lsrs	r2, r2, #2
 8019a28:	fb00 c212 	mls	r2, r0, r2, ip
 8019a2c:	fa5f fc82 	uxtb.w	ip, r2
 8019a30:	4561      	cmp	r1, ip
 8019a32:	f43f af57 	beq.w	80198e4 <uxr_read_framed_msg+0x308>
 8019a36:	3302      	adds	r3, #2
 8019a38:	4422      	add	r2, r4
 8019a3a:	7891      	ldrb	r1, [r2, #2]
 8019a3c:	085a      	lsrs	r2, r3, #1
 8019a3e:	fba5 c202 	umull	ip, r2, r5, r2
 8019a42:	297e      	cmp	r1, #126	@ 0x7e
 8019a44:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8019a48:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019a4c:	fb00 3312 	mls	r3, r0, r2, r3
 8019a50:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019a54:	f43f af46 	beq.w	80198e4 <uxr_read_framed_msg+0x308>
 8019a58:	f081 0120 	eor.w	r1, r1, #32
 8019a5c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8019a60:	e6ea      	b.n	8019838 <uxr_read_framed_msg+0x25c>
 8019a62:	1c59      	adds	r1, r3, #1
 8019a64:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8019a68:	084a      	lsrs	r2, r1, #1
 8019a6a:	fba5 e202 	umull	lr, r2, r5, r2
 8019a6e:	0892      	lsrs	r2, r2, #2
 8019a70:	fb0c 1212 	mls	r2, ip, r2, r1
 8019a74:	b2d1      	uxtb	r1, r2
 8019a76:	4288      	cmp	r0, r1
 8019a78:	f43f af21 	beq.w	80198be <uxr_read_framed_msg+0x2e2>
 8019a7c:	3302      	adds	r3, #2
 8019a7e:	4422      	add	r2, r4
 8019a80:	7891      	ldrb	r1, [r2, #2]
 8019a82:	085a      	lsrs	r2, r3, #1
 8019a84:	fba5 0202 	umull	r0, r2, r5, r2
 8019a88:	297e      	cmp	r1, #126	@ 0x7e
 8019a8a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019a8e:	fb0c 3312 	mls	r3, ip, r2, r3
 8019a92:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019a96:	d030      	beq.n	8019afa <uxr_read_framed_msg+0x51e>
 8019a98:	f081 0120 	eor.w	r1, r1, #32
 8019a9c:	e65d      	b.n	801975a <uxr_read_framed_msg+0x17e>
 8019a9e:	1c59      	adds	r1, r3, #1
 8019aa0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8019aa4:	084a      	lsrs	r2, r1, #1
 8019aa6:	fba5 e202 	umull	lr, r2, r5, r2
 8019aaa:	0892      	lsrs	r2, r2, #2
 8019aac:	fb0c 1212 	mls	r2, ip, r2, r1
 8019ab0:	b2d1      	uxtb	r1, r2
 8019ab2:	4288      	cmp	r0, r1
 8019ab4:	f43f af12 	beq.w	80198dc <uxr_read_framed_msg+0x300>
 8019ab8:	3302      	adds	r3, #2
 8019aba:	4422      	add	r2, r4
 8019abc:	7891      	ldrb	r1, [r2, #2]
 8019abe:	085a      	lsrs	r2, r3, #1
 8019ac0:	fba5 0202 	umull	r0, r2, r5, r2
 8019ac4:	297e      	cmp	r1, #126	@ 0x7e
 8019ac6:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019aca:	fb0c 3312 	mls	r3, ip, r2, r3
 8019ace:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019ad2:	d002      	beq.n	8019ada <uxr_read_framed_msg+0x4fe>
 8019ad4:	f081 0120 	eor.w	r1, r1, #32
 8019ad8:	e66a      	b.n	80197b0 <uxr_read_framed_msg+0x1d4>
 8019ada:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019adc:	9300      	str	r3, [sp, #0]
 8019ade:	2302      	movs	r3, #2
 8019ae0:	9301      	str	r3, [sp, #4]
 8019ae2:	464a      	mov	r2, r9
 8019ae4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019ae6:	4641      	mov	r1, r8
 8019ae8:	4620      	mov	r0, r4
 8019aea:	f7ff fce3 	bl	80194b4 <uxr_framing_read_transport>
 8019aee:	2800      	cmp	r0, #0
 8019af0:	f47f aef2 	bne.w	80198d8 <uxr_read_framed_msg+0x2fc>
 8019af4:	2301      	movs	r3, #1
 8019af6:	7023      	strb	r3, [r4, #0]
 8019af8:	e581      	b.n	80195fe <uxr_read_framed_msg+0x22>
 8019afa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019afc:	9300      	str	r3, [sp, #0]
 8019afe:	2301      	movs	r3, #1
 8019b00:	e7ee      	b.n	8019ae0 <uxr_read_framed_msg+0x504>
 8019b02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019b04:	9300      	str	r3, [sp, #0]
 8019b06:	2303      	movs	r3, #3
 8019b08:	e7ea      	b.n	8019ae0 <uxr_read_framed_msg+0x504>
 8019b0a:	bf00      	nop

08019b0c <uxr_stream_id>:
 8019b0c:	2901      	cmp	r1, #1
 8019b0e:	4684      	mov	ip, r0
 8019b10:	b500      	push	{lr}
 8019b12:	b083      	sub	sp, #12
 8019b14:	d01f      	beq.n	8019b56 <uxr_stream_id+0x4a>
 8019b16:	2902      	cmp	r1, #2
 8019b18:	f04f 0e00 	mov.w	lr, #0
 8019b1c:	d020      	beq.n	8019b60 <uxr_stream_id+0x54>
 8019b1e:	2300      	movs	r3, #0
 8019b20:	2000      	movs	r0, #0
 8019b22:	f36e 0307 	bfi	r3, lr, #0, #8
 8019b26:	f36c 230f 	bfi	r3, ip, #8, #8
 8019b2a:	f361 4317 	bfi	r3, r1, #16, #8
 8019b2e:	f362 631f 	bfi	r3, r2, #24, #8
 8019b32:	fa5f fc83 	uxtb.w	ip, r3
 8019b36:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019b3a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8019b3e:	0e1b      	lsrs	r3, r3, #24
 8019b40:	f36c 0007 	bfi	r0, ip, #0, #8
 8019b44:	f361 200f 	bfi	r0, r1, #8, #8
 8019b48:	f362 4017 	bfi	r0, r2, #16, #8
 8019b4c:	f363 601f 	bfi	r0, r3, #24, #8
 8019b50:	b003      	add	sp, #12
 8019b52:	f85d fb04 	ldr.w	pc, [sp], #4
 8019b56:	f100 0e01 	add.w	lr, r0, #1
 8019b5a:	fa5f fe8e 	uxtb.w	lr, lr
 8019b5e:	e7de      	b.n	8019b1e <uxr_stream_id+0x12>
 8019b60:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 8019b64:	e7db      	b.n	8019b1e <uxr_stream_id+0x12>
 8019b66:	bf00      	nop

08019b68 <uxr_stream_id_from_raw>:
 8019b68:	b082      	sub	sp, #8
 8019b6a:	b130      	cbz	r0, 8019b7a <uxr_stream_id_from_raw+0x12>
 8019b6c:	0603      	lsls	r3, r0, #24
 8019b6e:	d421      	bmi.n	8019bb4 <uxr_stream_id_from_raw+0x4c>
 8019b70:	1e42      	subs	r2, r0, #1
 8019b72:	f04f 0c01 	mov.w	ip, #1
 8019b76:	b2d2      	uxtb	r2, r2
 8019b78:	e001      	b.n	8019b7e <uxr_stream_id_from_raw+0x16>
 8019b7a:	4684      	mov	ip, r0
 8019b7c:	4602      	mov	r2, r0
 8019b7e:	2300      	movs	r3, #0
 8019b80:	f360 0307 	bfi	r3, r0, #0, #8
 8019b84:	2000      	movs	r0, #0
 8019b86:	f362 230f 	bfi	r3, r2, #8, #8
 8019b8a:	f36c 4317 	bfi	r3, ip, #16, #8
 8019b8e:	f361 631f 	bfi	r3, r1, #24, #8
 8019b92:	fa5f fc83 	uxtb.w	ip, r3
 8019b96:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019b9a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8019b9e:	0e1b      	lsrs	r3, r3, #24
 8019ba0:	f36c 0007 	bfi	r0, ip, #0, #8
 8019ba4:	f361 200f 	bfi	r0, r1, #8, #8
 8019ba8:	f362 4017 	bfi	r0, r2, #16, #8
 8019bac:	f363 601f 	bfi	r0, r3, #24, #8
 8019bb0:	b002      	add	sp, #8
 8019bb2:	4770      	bx	lr
 8019bb4:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8019bb8:	f04f 0c02 	mov.w	ip, #2
 8019bbc:	e7df      	b.n	8019b7e <uxr_stream_id_from_raw+0x16>
 8019bbe:	bf00      	nop

08019bc0 <uxr_init_stream_storage>:
 8019bc0:	2300      	movs	r3, #0
 8019bc2:	7403      	strb	r3, [r0, #16]
 8019bc4:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8019bc8:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8019bcc:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8019bd0:	4770      	bx	lr
 8019bd2:	bf00      	nop

08019bd4 <uxr_reset_stream_storage>:
 8019bd4:	b570      	push	{r4, r5, r6, lr}
 8019bd6:	7c03      	ldrb	r3, [r0, #16]
 8019bd8:	4604      	mov	r4, r0
 8019bda:	b14b      	cbz	r3, 8019bf0 <uxr_reset_stream_storage+0x1c>
 8019bdc:	4606      	mov	r6, r0
 8019bde:	2500      	movs	r5, #0
 8019be0:	4630      	mov	r0, r6
 8019be2:	3501      	adds	r5, #1
 8019be4:	f002 fa42 	bl	801c06c <uxr_reset_output_best_effort_stream>
 8019be8:	7c23      	ldrb	r3, [r4, #16]
 8019bea:	3610      	adds	r6, #16
 8019bec:	42ab      	cmp	r3, r5
 8019bee:	d8f7      	bhi.n	8019be0 <uxr_reset_stream_storage+0xc>
 8019bf0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8019bf4:	b15b      	cbz	r3, 8019c0e <uxr_reset_stream_storage+0x3a>
 8019bf6:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019bfa:	2500      	movs	r5, #0
 8019bfc:	4630      	mov	r0, r6
 8019bfe:	3501      	adds	r5, #1
 8019c00:	f002 f83a 	bl	801bc78 <uxr_reset_input_best_effort_stream>
 8019c04:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8019c08:	3602      	adds	r6, #2
 8019c0a:	42ab      	cmp	r3, r5
 8019c0c:	d8f6      	bhi.n	8019bfc <uxr_reset_stream_storage+0x28>
 8019c0e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8019c12:	b15b      	cbz	r3, 8019c2c <uxr_reset_stream_storage+0x58>
 8019c14:	f104 0618 	add.w	r6, r4, #24
 8019c18:	2500      	movs	r5, #0
 8019c1a:	4630      	mov	r0, r6
 8019c1c:	3501      	adds	r5, #1
 8019c1e:	f002 fad3 	bl	801c1c8 <uxr_reset_output_reliable_stream>
 8019c22:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8019c26:	3628      	adds	r6, #40	@ 0x28
 8019c28:	42ab      	cmp	r3, r5
 8019c2a:	d8f6      	bhi.n	8019c1a <uxr_reset_stream_storage+0x46>
 8019c2c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8019c30:	b15b      	cbz	r3, 8019c4a <uxr_reset_stream_storage+0x76>
 8019c32:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8019c36:	2500      	movs	r5, #0
 8019c38:	4630      	mov	r0, r6
 8019c3a:	3501      	adds	r5, #1
 8019c3c:	f002 f888 	bl	801bd50 <uxr_reset_input_reliable_stream>
 8019c40:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8019c44:	3618      	adds	r6, #24
 8019c46:	42ab      	cmp	r3, r5
 8019c48:	d8f6      	bhi.n	8019c38 <uxr_reset_stream_storage+0x64>
 8019c4a:	bd70      	pop	{r4, r5, r6, pc}

08019c4c <uxr_add_output_best_effort_buffer>:
 8019c4c:	b510      	push	{r4, lr}
 8019c4e:	7c04      	ldrb	r4, [r0, #16]
 8019c50:	b082      	sub	sp, #8
 8019c52:	f104 0c01 	add.w	ip, r4, #1
 8019c56:	f880 c010 	strb.w	ip, [r0, #16]
 8019c5a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8019c5e:	f002 f9fb 	bl	801c058 <uxr_init_output_best_effort_stream>
 8019c62:	2201      	movs	r2, #1
 8019c64:	4620      	mov	r0, r4
 8019c66:	4611      	mov	r1, r2
 8019c68:	b002      	add	sp, #8
 8019c6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019c6e:	f7ff bf4d 	b.w	8019b0c <uxr_stream_id>
 8019c72:	bf00      	nop

08019c74 <uxr_add_output_reliable_buffer>:
 8019c74:	b510      	push	{r4, lr}
 8019c76:	b084      	sub	sp, #16
 8019c78:	4684      	mov	ip, r0
 8019c7a:	2028      	movs	r0, #40	@ 0x28
 8019c7c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8019c80:	9400      	str	r4, [sp, #0]
 8019c82:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8019c86:	fb00 c004 	mla	r0, r0, r4, ip
 8019c8a:	f104 0e01 	add.w	lr, r4, #1
 8019c8e:	3018      	adds	r0, #24
 8019c90:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8019c94:	f002 fa60 	bl	801c158 <uxr_init_output_reliable_stream>
 8019c98:	2201      	movs	r2, #1
 8019c9a:	2102      	movs	r1, #2
 8019c9c:	4620      	mov	r0, r4
 8019c9e:	b004      	add	sp, #16
 8019ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ca4:	f7ff bf32 	b.w	8019b0c <uxr_stream_id>

08019ca8 <uxr_add_input_best_effort_buffer>:
 8019ca8:	b510      	push	{r4, lr}
 8019caa:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8019cae:	b082      	sub	sp, #8
 8019cb0:	1c62      	adds	r2, r4, #1
 8019cb2:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8019cb6:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8019cba:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019cbe:	f001 ffd7 	bl	801bc70 <uxr_init_input_best_effort_stream>
 8019cc2:	2200      	movs	r2, #0
 8019cc4:	2101      	movs	r1, #1
 8019cc6:	4620      	mov	r0, r4
 8019cc8:	b002      	add	sp, #8
 8019cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019cce:	f7ff bf1d 	b.w	8019b0c <uxr_stream_id>
 8019cd2:	bf00      	nop

08019cd4 <uxr_add_input_reliable_buffer>:
 8019cd4:	b510      	push	{r4, lr}
 8019cd6:	b084      	sub	sp, #16
 8019cd8:	4684      	mov	ip, r0
 8019cda:	2018      	movs	r0, #24
 8019cdc:	9c06      	ldr	r4, [sp, #24]
 8019cde:	9400      	str	r4, [sp, #0]
 8019ce0:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8019ce4:	fb00 c004 	mla	r0, r0, r4, ip
 8019ce8:	f104 0e01 	add.w	lr, r4, #1
 8019cec:	3048      	adds	r0, #72	@ 0x48
 8019cee:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8019cf2:	f002 f807 	bl	801bd04 <uxr_init_input_reliable_stream>
 8019cf6:	2200      	movs	r2, #0
 8019cf8:	2102      	movs	r1, #2
 8019cfa:	4620      	mov	r0, r4
 8019cfc:	b004      	add	sp, #16
 8019cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d02:	f7ff bf03 	b.w	8019b0c <uxr_stream_id>
 8019d06:	bf00      	nop

08019d08 <uxr_get_output_best_effort_stream>:
 8019d08:	7c03      	ldrb	r3, [r0, #16]
 8019d0a:	428b      	cmp	r3, r1
 8019d0c:	bf8c      	ite	hi
 8019d0e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8019d12:	2000      	movls	r0, #0
 8019d14:	4770      	bx	lr
 8019d16:	bf00      	nop

08019d18 <uxr_get_output_reliable_stream>:
 8019d18:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8019d1c:	428b      	cmp	r3, r1
 8019d1e:	d904      	bls.n	8019d2a <uxr_get_output_reliable_stream+0x12>
 8019d20:	2328      	movs	r3, #40	@ 0x28
 8019d22:	fb03 0001 	mla	r0, r3, r1, r0
 8019d26:	3018      	adds	r0, #24
 8019d28:	4770      	bx	lr
 8019d2a:	2000      	movs	r0, #0
 8019d2c:	4770      	bx	lr
 8019d2e:	bf00      	nop

08019d30 <uxr_get_input_best_effort_stream>:
 8019d30:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8019d34:	428b      	cmp	r3, r1
 8019d36:	d903      	bls.n	8019d40 <uxr_get_input_best_effort_stream+0x10>
 8019d38:	3121      	adds	r1, #33	@ 0x21
 8019d3a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8019d3e:	4770      	bx	lr
 8019d40:	2000      	movs	r0, #0
 8019d42:	4770      	bx	lr

08019d44 <uxr_get_input_reliable_stream>:
 8019d44:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8019d48:	428b      	cmp	r3, r1
 8019d4a:	d904      	bls.n	8019d56 <uxr_get_input_reliable_stream+0x12>
 8019d4c:	2318      	movs	r3, #24
 8019d4e:	fb03 0001 	mla	r0, r3, r1, r0
 8019d52:	3048      	adds	r0, #72	@ 0x48
 8019d54:	4770      	bx	lr
 8019d56:	2000      	movs	r0, #0
 8019d58:	4770      	bx	lr
 8019d5a:	bf00      	nop

08019d5c <uxr_output_streams_confirmed>:
 8019d5c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8019d60:	b183      	cbz	r3, 8019d84 <uxr_output_streams_confirmed+0x28>
 8019d62:	b570      	push	{r4, r5, r6, lr}
 8019d64:	4606      	mov	r6, r0
 8019d66:	f100 0518 	add.w	r5, r0, #24
 8019d6a:	2400      	movs	r4, #0
 8019d6c:	e000      	b.n	8019d70 <uxr_output_streams_confirmed+0x14>
 8019d6e:	b140      	cbz	r0, 8019d82 <uxr_output_streams_confirmed+0x26>
 8019d70:	4628      	mov	r0, r5
 8019d72:	3401      	adds	r4, #1
 8019d74:	f002 fc9c 	bl	801c6b0 <uxr_is_output_up_to_date>
 8019d78:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8019d7c:	3528      	adds	r5, #40	@ 0x28
 8019d7e:	42a3      	cmp	r3, r4
 8019d80:	d8f5      	bhi.n	8019d6e <uxr_output_streams_confirmed+0x12>
 8019d82:	bd70      	pop	{r4, r5, r6, pc}
 8019d84:	2001      	movs	r0, #1
 8019d86:	4770      	bx	lr

08019d88 <uxr_buffer_submessage_header>:
 8019d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d8a:	460e      	mov	r6, r1
 8019d8c:	2104      	movs	r1, #4
 8019d8e:	4604      	mov	r4, r0
 8019d90:	4615      	mov	r5, r2
 8019d92:	461f      	mov	r7, r3
 8019d94:	f7f6 f802 	bl	800fd9c <ucdr_align_to>
 8019d98:	2301      	movs	r3, #1
 8019d9a:	4631      	mov	r1, r6
 8019d9c:	4620      	mov	r0, r4
 8019d9e:	ea47 0203 	orr.w	r2, r7, r3
 8019da2:	7523      	strb	r3, [r4, #20]
 8019da4:	462b      	mov	r3, r5
 8019da6:	f000 f8d5 	bl	8019f54 <uxr_serialize_submessage_header>
 8019daa:	4620      	mov	r0, r4
 8019dac:	f7f6 f80c 	bl	800fdc8 <ucdr_buffer_remaining>
 8019db0:	42a8      	cmp	r0, r5
 8019db2:	bf34      	ite	cc
 8019db4:	2000      	movcc	r0, #0
 8019db6:	2001      	movcs	r0, #1
 8019db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019dba:	bf00      	nop

08019dbc <uxr_read_submessage_header>:
 8019dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019dc0:	4604      	mov	r4, r0
 8019dc2:	460d      	mov	r5, r1
 8019dc4:	2104      	movs	r1, #4
 8019dc6:	4616      	mov	r6, r2
 8019dc8:	4698      	mov	r8, r3
 8019dca:	f7f5 ffe7 	bl	800fd9c <ucdr_align_to>
 8019dce:	4620      	mov	r0, r4
 8019dd0:	f7f5 fffa 	bl	800fdc8 <ucdr_buffer_remaining>
 8019dd4:	2803      	cmp	r0, #3
 8019dd6:	bf8c      	ite	hi
 8019dd8:	2701      	movhi	r7, #1
 8019dda:	2700      	movls	r7, #0
 8019ddc:	d802      	bhi.n	8019de4 <uxr_read_submessage_header+0x28>
 8019dde:	4638      	mov	r0, r7
 8019de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019de4:	4633      	mov	r3, r6
 8019de6:	4642      	mov	r2, r8
 8019de8:	4620      	mov	r0, r4
 8019dea:	4629      	mov	r1, r5
 8019dec:	f000 f8c6 	bl	8019f7c <uxr_deserialize_submessage_header>
 8019df0:	f898 3000 	ldrb.w	r3, [r8]
 8019df4:	4638      	mov	r0, r7
 8019df6:	f003 0201 	and.w	r2, r3, #1
 8019dfa:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8019dfe:	f888 3000 	strb.w	r3, [r8]
 8019e02:	7522      	strb	r2, [r4, #20]
 8019e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019e08 <uxr_submessage_padding>:
 8019e08:	f010 0003 	ands.w	r0, r0, #3
 8019e0c:	bf18      	it	ne
 8019e0e:	f1c0 0004 	rsbne	r0, r0, #4
 8019e12:	4770      	bx	lr

08019e14 <uxr_millis>:
 8019e14:	b510      	push	{r4, lr}
 8019e16:	b084      	sub	sp, #16
 8019e18:	2001      	movs	r0, #1
 8019e1a:	4669      	mov	r1, sp
 8019e1c:	f7e7 fda0 	bl	8001960 <clock_gettime>
 8019e20:	4908      	ldr	r1, [pc, #32]	@ (8019e44 <uxr_millis+0x30>)
 8019e22:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8019e26:	fba0 0301 	umull	r0, r3, r0, r1
 8019e2a:	1900      	adds	r0, r0, r4
 8019e2c:	fb01 3102 	mla	r1, r1, r2, r3
 8019e30:	4a05      	ldr	r2, [pc, #20]	@ (8019e48 <uxr_millis+0x34>)
 8019e32:	f04f 0300 	mov.w	r3, #0
 8019e36:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8019e3a:	f7e6 fab9 	bl	80003b0 <__aeabi_ldivmod>
 8019e3e:	b004      	add	sp, #16
 8019e40:	bd10      	pop	{r4, pc}
 8019e42:	bf00      	nop
 8019e44:	3b9aca00 	.word	0x3b9aca00
 8019e48:	000f4240 	.word	0x000f4240

08019e4c <uxr_nanos>:
 8019e4c:	b510      	push	{r4, lr}
 8019e4e:	b084      	sub	sp, #16
 8019e50:	2001      	movs	r0, #1
 8019e52:	4669      	mov	r1, sp
 8019e54:	f7e7 fd84 	bl	8001960 <clock_gettime>
 8019e58:	4a06      	ldr	r2, [pc, #24]	@ (8019e74 <uxr_nanos+0x28>)
 8019e5a:	9800      	ldr	r0, [sp, #0]
 8019e5c:	9902      	ldr	r1, [sp, #8]
 8019e5e:	fba0 0302 	umull	r0, r3, r0, r2
 8019e62:	9c01      	ldr	r4, [sp, #4]
 8019e64:	1840      	adds	r0, r0, r1
 8019e66:	fb02 3304 	mla	r3, r2, r4, r3
 8019e6a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8019e6e:	b004      	add	sp, #16
 8019e70:	bd10      	pop	{r4, pc}
 8019e72:	bf00      	nop
 8019e74:	3b9aca00 	.word	0x3b9aca00

08019e78 <uxr_prepare_output_stream>:
 8019e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e7a:	b087      	sub	sp, #28
 8019e7c:	2707      	movs	r7, #7
 8019e7e:	2500      	movs	r5, #0
 8019e80:	461c      	mov	r4, r3
 8019e82:	4606      	mov	r6, r0
 8019e84:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8019e88:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019e8a:	e9cd 7500 	strd	r7, r5, [sp]
 8019e8e:	3204      	adds	r2, #4
 8019e90:	f7ff f852 	bl	8018f38 <uxr_prepare_stream_to_write_submessage>
 8019e94:	f080 0201 	eor.w	r2, r0, #1
 8019e98:	b2d2      	uxtb	r2, r2
 8019e9a:	75a2      	strb	r2, [r4, #22]
 8019e9c:	b112      	cbz	r2, 8019ea4 <uxr_prepare_output_stream+0x2c>
 8019e9e:	4628      	mov	r0, r5
 8019ea0:	b007      	add	sp, #28
 8019ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019ea4:	aa05      	add	r2, sp, #20
 8019ea6:	9902      	ldr	r1, [sp, #8]
 8019ea8:	4630      	mov	r0, r6
 8019eaa:	f7ff f981 	bl	80191b0 <uxr_init_base_object_request>
 8019eae:	a905      	add	r1, sp, #20
 8019eb0:	4605      	mov	r5, r0
 8019eb2:	4620      	mov	r0, r4
 8019eb4:	f000 fff2 	bl	801ae9c <uxr_serialize_WRITE_DATA_Payload_Data>
 8019eb8:	69a6      	ldr	r6, [r4, #24]
 8019eba:	69e7      	ldr	r7, [r4, #28]
 8019ebc:	4620      	mov	r0, r4
 8019ebe:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8019ec2:	1a52      	subs	r2, r2, r1
 8019ec4:	f7f5 ff4e 	bl	800fd64 <ucdr_init_buffer>
 8019ec8:	4620      	mov	r0, r4
 8019eca:	463a      	mov	r2, r7
 8019ecc:	4631      	mov	r1, r6
 8019ece:	f7f5 ff1d 	bl	800fd0c <ucdr_set_on_full_buffer_callback>
 8019ed2:	4628      	mov	r0, r5
 8019ed4:	b007      	add	sp, #28
 8019ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019ed8 <uxr_serialize_message_header>:
 8019ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019eda:	4616      	mov	r6, r2
 8019edc:	b083      	sub	sp, #12
 8019ede:	4604      	mov	r4, r0
 8019ee0:	460d      	mov	r5, r1
 8019ee2:	9301      	str	r3, [sp, #4]
 8019ee4:	9f08      	ldr	r7, [sp, #32]
 8019ee6:	f7f4 fcd3 	bl	800e890 <ucdr_serialize_uint8_t>
 8019eea:	4631      	mov	r1, r6
 8019eec:	4620      	mov	r0, r4
 8019eee:	f7f4 fccf 	bl	800e890 <ucdr_serialize_uint8_t>
 8019ef2:	9a01      	ldr	r2, [sp, #4]
 8019ef4:	2101      	movs	r1, #1
 8019ef6:	4620      	mov	r0, r4
 8019ef8:	f7f4 fd76 	bl	800e9e8 <ucdr_serialize_endian_uint16_t>
 8019efc:	062b      	lsls	r3, r5, #24
 8019efe:	d501      	bpl.n	8019f04 <uxr_serialize_message_header+0x2c>
 8019f00:	b003      	add	sp, #12
 8019f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f04:	2204      	movs	r2, #4
 8019f06:	4639      	mov	r1, r7
 8019f08:	4620      	mov	r0, r4
 8019f0a:	b003      	add	sp, #12
 8019f0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019f10:	f7fd bbc2 	b.w	8017698 <ucdr_serialize_array_uint8_t>

08019f14 <uxr_deserialize_message_header>:
 8019f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f16:	4616      	mov	r6, r2
 8019f18:	b083      	sub	sp, #12
 8019f1a:	4604      	mov	r4, r0
 8019f1c:	460d      	mov	r5, r1
 8019f1e:	9301      	str	r3, [sp, #4]
 8019f20:	9f08      	ldr	r7, [sp, #32]
 8019f22:	f7f4 fccb 	bl	800e8bc <ucdr_deserialize_uint8_t>
 8019f26:	4631      	mov	r1, r6
 8019f28:	4620      	mov	r0, r4
 8019f2a:	f7f4 fcc7 	bl	800e8bc <ucdr_deserialize_uint8_t>
 8019f2e:	9a01      	ldr	r2, [sp, #4]
 8019f30:	2101      	movs	r1, #1
 8019f32:	4620      	mov	r0, r4
 8019f34:	f7f4 fe4c 	bl	800ebd0 <ucdr_deserialize_endian_uint16_t>
 8019f38:	f995 3000 	ldrsb.w	r3, [r5]
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	da01      	bge.n	8019f44 <uxr_deserialize_message_header+0x30>
 8019f40:	b003      	add	sp, #12
 8019f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f44:	2204      	movs	r2, #4
 8019f46:	4639      	mov	r1, r7
 8019f48:	4620      	mov	r0, r4
 8019f4a:	b003      	add	sp, #12
 8019f4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019f50:	f7fd bc06 	b.w	8017760 <ucdr_deserialize_array_uint8_t>

08019f54 <uxr_serialize_submessage_header>:
 8019f54:	b530      	push	{r4, r5, lr}
 8019f56:	4615      	mov	r5, r2
 8019f58:	b083      	sub	sp, #12
 8019f5a:	4604      	mov	r4, r0
 8019f5c:	9301      	str	r3, [sp, #4]
 8019f5e:	f7f4 fc97 	bl	800e890 <ucdr_serialize_uint8_t>
 8019f62:	4629      	mov	r1, r5
 8019f64:	4620      	mov	r0, r4
 8019f66:	f7f4 fc93 	bl	800e890 <ucdr_serialize_uint8_t>
 8019f6a:	9a01      	ldr	r2, [sp, #4]
 8019f6c:	2101      	movs	r1, #1
 8019f6e:	4620      	mov	r0, r4
 8019f70:	b003      	add	sp, #12
 8019f72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019f76:	f7f4 bd37 	b.w	800e9e8 <ucdr_serialize_endian_uint16_t>
 8019f7a:	bf00      	nop

08019f7c <uxr_deserialize_submessage_header>:
 8019f7c:	b530      	push	{r4, r5, lr}
 8019f7e:	4615      	mov	r5, r2
 8019f80:	b083      	sub	sp, #12
 8019f82:	4604      	mov	r4, r0
 8019f84:	9301      	str	r3, [sp, #4]
 8019f86:	f7f4 fc99 	bl	800e8bc <ucdr_deserialize_uint8_t>
 8019f8a:	4629      	mov	r1, r5
 8019f8c:	4620      	mov	r0, r4
 8019f8e:	f7f4 fc95 	bl	800e8bc <ucdr_deserialize_uint8_t>
 8019f92:	9a01      	ldr	r2, [sp, #4]
 8019f94:	2101      	movs	r1, #1
 8019f96:	4620      	mov	r0, r4
 8019f98:	b003      	add	sp, #12
 8019f9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019f9e:	f7f4 be17 	b.w	800ebd0 <ucdr_deserialize_endian_uint16_t>
 8019fa2:	bf00      	nop

08019fa4 <uxr_serialize_CLIENT_Representation>:
 8019fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019fa8:	2204      	movs	r2, #4
 8019faa:	460e      	mov	r6, r1
 8019fac:	4605      	mov	r5, r0
 8019fae:	f7fd fb73 	bl	8017698 <ucdr_serialize_array_uint8_t>
 8019fb2:	4607      	mov	r7, r0
 8019fb4:	2202      	movs	r2, #2
 8019fb6:	1d31      	adds	r1, r6, #4
 8019fb8:	4628      	mov	r0, r5
 8019fba:	f7fd fb6d 	bl	8017698 <ucdr_serialize_array_uint8_t>
 8019fbe:	4038      	ands	r0, r7
 8019fc0:	2202      	movs	r2, #2
 8019fc2:	1db1      	adds	r1, r6, #6
 8019fc4:	b2c7      	uxtb	r7, r0
 8019fc6:	4628      	mov	r0, r5
 8019fc8:	f7fd fb66 	bl	8017698 <ucdr_serialize_array_uint8_t>
 8019fcc:	2204      	movs	r2, #4
 8019fce:	4007      	ands	r7, r0
 8019fd0:	f106 0108 	add.w	r1, r6, #8
 8019fd4:	4628      	mov	r0, r5
 8019fd6:	f7fd fb5f 	bl	8017698 <ucdr_serialize_array_uint8_t>
 8019fda:	4007      	ands	r7, r0
 8019fdc:	7b31      	ldrb	r1, [r6, #12]
 8019fde:	4628      	mov	r0, r5
 8019fe0:	f7f4 fc56 	bl	800e890 <ucdr_serialize_uint8_t>
 8019fe4:	7b71      	ldrb	r1, [r6, #13]
 8019fe6:	4007      	ands	r7, r0
 8019fe8:	4628      	mov	r0, r5
 8019fea:	f7f4 fc23 	bl	800e834 <ucdr_serialize_bool>
 8019fee:	7b73      	ldrb	r3, [r6, #13]
 8019ff0:	ea07 0800 	and.w	r8, r7, r0
 8019ff4:	b93b      	cbnz	r3, 801a006 <uxr_serialize_CLIENT_Representation+0x62>
 8019ff6:	8bb1      	ldrh	r1, [r6, #28]
 8019ff8:	4628      	mov	r0, r5
 8019ffa:	f7f4 fc75 	bl	800e8e8 <ucdr_serialize_uint16_t>
 8019ffe:	ea08 0000 	and.w	r0, r8, r0
 801a002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a006:	6931      	ldr	r1, [r6, #16]
 801a008:	4628      	mov	r0, r5
 801a00a:	f7f4 fe57 	bl	800ecbc <ucdr_serialize_uint32_t>
 801a00e:	6933      	ldr	r3, [r6, #16]
 801a010:	b1e3      	cbz	r3, 801a04c <uxr_serialize_CLIENT_Representation+0xa8>
 801a012:	b1c0      	cbz	r0, 801a046 <uxr_serialize_CLIENT_Representation+0xa2>
 801a014:	4637      	mov	r7, r6
 801a016:	f04f 0900 	mov.w	r9, #0
 801a01a:	e000      	b.n	801a01e <uxr_serialize_CLIENT_Representation+0x7a>
 801a01c:	b19c      	cbz	r4, 801a046 <uxr_serialize_CLIENT_Representation+0xa2>
 801a01e:	6979      	ldr	r1, [r7, #20]
 801a020:	4628      	mov	r0, r5
 801a022:	f001 fe0d 	bl	801bc40 <ucdr_serialize_string>
 801a026:	69b9      	ldr	r1, [r7, #24]
 801a028:	4604      	mov	r4, r0
 801a02a:	4628      	mov	r0, r5
 801a02c:	f001 fe08 	bl	801bc40 <ucdr_serialize_string>
 801a030:	f109 0901 	add.w	r9, r9, #1
 801a034:	6933      	ldr	r3, [r6, #16]
 801a036:	4004      	ands	r4, r0
 801a038:	3708      	adds	r7, #8
 801a03a:	4599      	cmp	r9, r3
 801a03c:	b2e4      	uxtb	r4, r4
 801a03e:	d3ed      	bcc.n	801a01c <uxr_serialize_CLIENT_Representation+0x78>
 801a040:	ea08 0804 	and.w	r8, r8, r4
 801a044:	e7d7      	b.n	8019ff6 <uxr_serialize_CLIENT_Representation+0x52>
 801a046:	f04f 0800 	mov.w	r8, #0
 801a04a:	e7d4      	b.n	8019ff6 <uxr_serialize_CLIENT_Representation+0x52>
 801a04c:	ea08 0800 	and.w	r8, r8, r0
 801a050:	e7d1      	b.n	8019ff6 <uxr_serialize_CLIENT_Representation+0x52>
 801a052:	bf00      	nop

0801a054 <uxr_deserialize_CLIENT_Representation>:
 801a054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a058:	2204      	movs	r2, #4
 801a05a:	460c      	mov	r4, r1
 801a05c:	4605      	mov	r5, r0
 801a05e:	f7fd fb7f 	bl	8017760 <ucdr_deserialize_array_uint8_t>
 801a062:	4607      	mov	r7, r0
 801a064:	2202      	movs	r2, #2
 801a066:	1d21      	adds	r1, r4, #4
 801a068:	4628      	mov	r0, r5
 801a06a:	f7fd fb79 	bl	8017760 <ucdr_deserialize_array_uint8_t>
 801a06e:	4038      	ands	r0, r7
 801a070:	2202      	movs	r2, #2
 801a072:	1da1      	adds	r1, r4, #6
 801a074:	b2c6      	uxtb	r6, r0
 801a076:	4628      	mov	r0, r5
 801a078:	f7fd fb72 	bl	8017760 <ucdr_deserialize_array_uint8_t>
 801a07c:	2204      	movs	r2, #4
 801a07e:	4006      	ands	r6, r0
 801a080:	f104 0108 	add.w	r1, r4, #8
 801a084:	4628      	mov	r0, r5
 801a086:	f7fd fb6b 	bl	8017760 <ucdr_deserialize_array_uint8_t>
 801a08a:	4006      	ands	r6, r0
 801a08c:	f104 010c 	add.w	r1, r4, #12
 801a090:	4628      	mov	r0, r5
 801a092:	f7f4 fc13 	bl	800e8bc <ucdr_deserialize_uint8_t>
 801a096:	f104 010d 	add.w	r1, r4, #13
 801a09a:	ea06 0700 	and.w	r7, r6, r0
 801a09e:	4628      	mov	r0, r5
 801a0a0:	f7f4 fbde 	bl	800e860 <ucdr_deserialize_bool>
 801a0a4:	7b63      	ldrb	r3, [r4, #13]
 801a0a6:	4007      	ands	r7, r0
 801a0a8:	b93b      	cbnz	r3, 801a0ba <uxr_deserialize_CLIENT_Representation+0x66>
 801a0aa:	f104 011c 	add.w	r1, r4, #28
 801a0ae:	4628      	mov	r0, r5
 801a0b0:	f7f4 fd1a 	bl	800eae8 <ucdr_deserialize_uint16_t>
 801a0b4:	4038      	ands	r0, r7
 801a0b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a0ba:	f104 0110 	add.w	r1, r4, #16
 801a0be:	4628      	mov	r0, r5
 801a0c0:	f7f4 ff2c 	bl	800ef1c <ucdr_deserialize_uint32_t>
 801a0c4:	6923      	ldr	r3, [r4, #16]
 801a0c6:	2b01      	cmp	r3, #1
 801a0c8:	d903      	bls.n	801a0d2 <uxr_deserialize_CLIENT_Representation+0x7e>
 801a0ca:	2301      	movs	r3, #1
 801a0cc:	2700      	movs	r7, #0
 801a0ce:	75ab      	strb	r3, [r5, #22]
 801a0d0:	e7eb      	b.n	801a0aa <uxr_deserialize_CLIENT_Representation+0x56>
 801a0d2:	b30b      	cbz	r3, 801a118 <uxr_deserialize_CLIENT_Representation+0xc4>
 801a0d4:	b1f0      	cbz	r0, 801a114 <uxr_deserialize_CLIENT_Representation+0xc0>
 801a0d6:	46a0      	mov	r8, r4
 801a0d8:	f04f 0900 	mov.w	r9, #0
 801a0dc:	e000      	b.n	801a0e0 <uxr_deserialize_CLIENT_Representation+0x8c>
 801a0de:	b1ce      	cbz	r6, 801a114 <uxr_deserialize_CLIENT_Representation+0xc0>
 801a0e0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801a0e4:	f108 0808 	add.w	r8, r8, #8
 801a0e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a0ec:	4628      	mov	r0, r5
 801a0ee:	f001 fdb7 	bl	801bc60 <ucdr_deserialize_string>
 801a0f2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801a0f6:	4606      	mov	r6, r0
 801a0f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a0fc:	4628      	mov	r0, r5
 801a0fe:	f109 0901 	add.w	r9, r9, #1
 801a102:	f001 fdad 	bl	801bc60 <ucdr_deserialize_string>
 801a106:	6923      	ldr	r3, [r4, #16]
 801a108:	4006      	ands	r6, r0
 801a10a:	4599      	cmp	r9, r3
 801a10c:	b2f6      	uxtb	r6, r6
 801a10e:	d3e6      	bcc.n	801a0de <uxr_deserialize_CLIENT_Representation+0x8a>
 801a110:	4037      	ands	r7, r6
 801a112:	e7ca      	b.n	801a0aa <uxr_deserialize_CLIENT_Representation+0x56>
 801a114:	2700      	movs	r7, #0
 801a116:	e7c8      	b.n	801a0aa <uxr_deserialize_CLIENT_Representation+0x56>
 801a118:	4007      	ands	r7, r0
 801a11a:	e7c6      	b.n	801a0aa <uxr_deserialize_CLIENT_Representation+0x56>

0801a11c <uxr_serialize_AGENT_Representation>:
 801a11c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a120:	2204      	movs	r2, #4
 801a122:	460f      	mov	r7, r1
 801a124:	4605      	mov	r5, r0
 801a126:	f7fd fab7 	bl	8017698 <ucdr_serialize_array_uint8_t>
 801a12a:	4604      	mov	r4, r0
 801a12c:	2202      	movs	r2, #2
 801a12e:	1d39      	adds	r1, r7, #4
 801a130:	4628      	mov	r0, r5
 801a132:	f7fd fab1 	bl	8017698 <ucdr_serialize_array_uint8_t>
 801a136:	4020      	ands	r0, r4
 801a138:	2202      	movs	r2, #2
 801a13a:	1db9      	adds	r1, r7, #6
 801a13c:	b2c4      	uxtb	r4, r0
 801a13e:	4628      	mov	r0, r5
 801a140:	f7fd faaa 	bl	8017698 <ucdr_serialize_array_uint8_t>
 801a144:	7a39      	ldrb	r1, [r7, #8]
 801a146:	4004      	ands	r4, r0
 801a148:	4628      	mov	r0, r5
 801a14a:	f7f4 fb73 	bl	800e834 <ucdr_serialize_bool>
 801a14e:	7a3b      	ldrb	r3, [r7, #8]
 801a150:	ea00 0804 	and.w	r8, r0, r4
 801a154:	b913      	cbnz	r3, 801a15c <uxr_serialize_AGENT_Representation+0x40>
 801a156:	4640      	mov	r0, r8
 801a158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a15c:	68f9      	ldr	r1, [r7, #12]
 801a15e:	4628      	mov	r0, r5
 801a160:	f7f4 fdac 	bl	800ecbc <ucdr_serialize_uint32_t>
 801a164:	68fb      	ldr	r3, [r7, #12]
 801a166:	b303      	cbz	r3, 801a1aa <uxr_serialize_AGENT_Representation+0x8e>
 801a168:	b1d0      	cbz	r0, 801a1a0 <uxr_serialize_AGENT_Representation+0x84>
 801a16a:	463e      	mov	r6, r7
 801a16c:	f04f 0900 	mov.w	r9, #0
 801a170:	e000      	b.n	801a174 <uxr_serialize_AGENT_Representation+0x58>
 801a172:	b1ac      	cbz	r4, 801a1a0 <uxr_serialize_AGENT_Representation+0x84>
 801a174:	6931      	ldr	r1, [r6, #16]
 801a176:	4628      	mov	r0, r5
 801a178:	f001 fd62 	bl	801bc40 <ucdr_serialize_string>
 801a17c:	6971      	ldr	r1, [r6, #20]
 801a17e:	4604      	mov	r4, r0
 801a180:	4628      	mov	r0, r5
 801a182:	f001 fd5d 	bl	801bc40 <ucdr_serialize_string>
 801a186:	f109 0901 	add.w	r9, r9, #1
 801a18a:	68fb      	ldr	r3, [r7, #12]
 801a18c:	4004      	ands	r4, r0
 801a18e:	3608      	adds	r6, #8
 801a190:	4599      	cmp	r9, r3
 801a192:	b2e4      	uxtb	r4, r4
 801a194:	d3ed      	bcc.n	801a172 <uxr_serialize_AGENT_Representation+0x56>
 801a196:	ea08 0804 	and.w	r8, r8, r4
 801a19a:	4640      	mov	r0, r8
 801a19c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a1a0:	f04f 0800 	mov.w	r8, #0
 801a1a4:	4640      	mov	r0, r8
 801a1a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a1aa:	ea08 0800 	and.w	r8, r8, r0
 801a1ae:	e7d2      	b.n	801a156 <uxr_serialize_AGENT_Representation+0x3a>

0801a1b0 <uxr_serialize_DATAWRITER_Representation>:
 801a1b0:	b570      	push	{r4, r5, r6, lr}
 801a1b2:	460d      	mov	r5, r1
 801a1b4:	7809      	ldrb	r1, [r1, #0]
 801a1b6:	4606      	mov	r6, r0
 801a1b8:	f7f4 fb6a 	bl	800e890 <ucdr_serialize_uint8_t>
 801a1bc:	4604      	mov	r4, r0
 801a1be:	b130      	cbz	r0, 801a1ce <uxr_serialize_DATAWRITER_Representation+0x1e>
 801a1c0:	782b      	ldrb	r3, [r5, #0]
 801a1c2:	2b02      	cmp	r3, #2
 801a1c4:	d00c      	beq.n	801a1e0 <uxr_serialize_DATAWRITER_Representation+0x30>
 801a1c6:	2b03      	cmp	r3, #3
 801a1c8:	d010      	beq.n	801a1ec <uxr_serialize_DATAWRITER_Representation+0x3c>
 801a1ca:	2b01      	cmp	r3, #1
 801a1cc:	d008      	beq.n	801a1e0 <uxr_serialize_DATAWRITER_Representation+0x30>
 801a1ce:	2202      	movs	r2, #2
 801a1d0:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801a1d4:	4630      	mov	r0, r6
 801a1d6:	f7fd fa5f 	bl	8017698 <ucdr_serialize_array_uint8_t>
 801a1da:	4020      	ands	r0, r4
 801a1dc:	b2c0      	uxtb	r0, r0
 801a1de:	bd70      	pop	{r4, r5, r6, pc}
 801a1e0:	6869      	ldr	r1, [r5, #4]
 801a1e2:	4630      	mov	r0, r6
 801a1e4:	f001 fd2c 	bl	801bc40 <ucdr_serialize_string>
 801a1e8:	4604      	mov	r4, r0
 801a1ea:	e7f0      	b.n	801a1ce <uxr_serialize_DATAWRITER_Representation+0x1e>
 801a1ec:	4629      	mov	r1, r5
 801a1ee:	4630      	mov	r0, r6
 801a1f0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801a1f4:	3104      	adds	r1, #4
 801a1f6:	f7f7 fc1f 	bl	8011a38 <ucdr_serialize_sequence_uint8_t>
 801a1fa:	4604      	mov	r4, r0
 801a1fc:	e7e7      	b.n	801a1ce <uxr_serialize_DATAWRITER_Representation+0x1e>
 801a1fe:	bf00      	nop

0801a200 <uxr_serialize_ObjectVariant.part.0>:
 801a200:	b570      	push	{r4, r5, r6, lr}
 801a202:	780b      	ldrb	r3, [r1, #0]
 801a204:	460c      	mov	r4, r1
 801a206:	4605      	mov	r5, r0
 801a208:	3b01      	subs	r3, #1
 801a20a:	2b0d      	cmp	r3, #13
 801a20c:	d854      	bhi.n	801a2b8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801a20e:	e8df f003 	tbb	[pc, r3]
 801a212:	0730      	.short	0x0730
 801a214:	07071b1b 	.word	0x07071b1b
 801a218:	0c530707 	.word	0x0c530707
 801a21c:	494e0c0c 	.word	0x494e0c0c
 801a220:	3104      	adds	r1, #4
 801a222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a226:	f7ff bfc3 	b.w	801a1b0 <uxr_serialize_DATAWRITER_Representation>
 801a22a:	7909      	ldrb	r1, [r1, #4]
 801a22c:	f7f4 fb30 	bl	800e890 <ucdr_serialize_uint8_t>
 801a230:	b1e8      	cbz	r0, 801a26e <uxr_serialize_ObjectVariant.part.0+0x6e>
 801a232:	7923      	ldrb	r3, [r4, #4]
 801a234:	2b01      	cmp	r3, #1
 801a236:	d001      	beq.n	801a23c <uxr_serialize_ObjectVariant.part.0+0x3c>
 801a238:	2b02      	cmp	r3, #2
 801a23a:	d13d      	bne.n	801a2b8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801a23c:	68a1      	ldr	r1, [r4, #8]
 801a23e:	4628      	mov	r0, r5
 801a240:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a244:	f001 bcfc 	b.w	801bc40 <ucdr_serialize_string>
 801a248:	7909      	ldrb	r1, [r1, #4]
 801a24a:	f7f4 fb21 	bl	800e890 <ucdr_serialize_uint8_t>
 801a24e:	4606      	mov	r6, r0
 801a250:	b120      	cbz	r0, 801a25c <uxr_serialize_ObjectVariant.part.0+0x5c>
 801a252:	7923      	ldrb	r3, [r4, #4]
 801a254:	2b02      	cmp	r3, #2
 801a256:	d039      	beq.n	801a2cc <uxr_serialize_ObjectVariant.part.0+0xcc>
 801a258:	2b03      	cmp	r3, #3
 801a25a:	d02f      	beq.n	801a2bc <uxr_serialize_ObjectVariant.part.0+0xbc>
 801a25c:	2202      	movs	r2, #2
 801a25e:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801a262:	4628      	mov	r0, r5
 801a264:	f7fd fa18 	bl	8017698 <ucdr_serialize_array_uint8_t>
 801a268:	4030      	ands	r0, r6
 801a26a:	b2c0      	uxtb	r0, r0
 801a26c:	bd70      	pop	{r4, r5, r6, pc}
 801a26e:	2000      	movs	r0, #0
 801a270:	bd70      	pop	{r4, r5, r6, pc}
 801a272:	7909      	ldrb	r1, [r1, #4]
 801a274:	f7f4 fb0c 	bl	800e890 <ucdr_serialize_uint8_t>
 801a278:	4606      	mov	r6, r0
 801a27a:	b158      	cbz	r0, 801a294 <uxr_serialize_ObjectVariant.part.0+0x94>
 801a27c:	7923      	ldrb	r3, [r4, #4]
 801a27e:	2b02      	cmp	r3, #2
 801a280:	d003      	beq.n	801a28a <uxr_serialize_ObjectVariant.part.0+0x8a>
 801a282:	2b03      	cmp	r3, #3
 801a284:	d028      	beq.n	801a2d8 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801a286:	2b01      	cmp	r3, #1
 801a288:	d104      	bne.n	801a294 <uxr_serialize_ObjectVariant.part.0+0x94>
 801a28a:	68a1      	ldr	r1, [r4, #8]
 801a28c:	4628      	mov	r0, r5
 801a28e:	f001 fcd7 	bl	801bc40 <ucdr_serialize_string>
 801a292:	4606      	mov	r6, r0
 801a294:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 801a298:	4628      	mov	r0, r5
 801a29a:	f7f5 f835 	bl	800f308 <ucdr_serialize_int16_t>
 801a29e:	4030      	ands	r0, r6
 801a2a0:	b2c0      	uxtb	r0, r0
 801a2a2:	bd70      	pop	{r4, r5, r6, pc}
 801a2a4:	3104      	adds	r1, #4
 801a2a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a2aa:	f7ff be7b 	b.w	8019fa4 <uxr_serialize_CLIENT_Representation>
 801a2ae:	3104      	adds	r1, #4
 801a2b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a2b4:	f7ff bf32 	b.w	801a11c <uxr_serialize_AGENT_Representation>
 801a2b8:	2001      	movs	r0, #1
 801a2ba:	bd70      	pop	{r4, r5, r6, pc}
 801a2bc:	68a2      	ldr	r2, [r4, #8]
 801a2be:	f104 010c 	add.w	r1, r4, #12
 801a2c2:	4628      	mov	r0, r5
 801a2c4:	f7f7 fbb8 	bl	8011a38 <ucdr_serialize_sequence_uint8_t>
 801a2c8:	4606      	mov	r6, r0
 801a2ca:	e7c7      	b.n	801a25c <uxr_serialize_ObjectVariant.part.0+0x5c>
 801a2cc:	68a1      	ldr	r1, [r4, #8]
 801a2ce:	4628      	mov	r0, r5
 801a2d0:	f001 fcb6 	bl	801bc40 <ucdr_serialize_string>
 801a2d4:	4606      	mov	r6, r0
 801a2d6:	e7c1      	b.n	801a25c <uxr_serialize_ObjectVariant.part.0+0x5c>
 801a2d8:	68a2      	ldr	r2, [r4, #8]
 801a2da:	f104 010c 	add.w	r1, r4, #12
 801a2de:	4628      	mov	r0, r5
 801a2e0:	f7f7 fbaa 	bl	8011a38 <ucdr_serialize_sequence_uint8_t>
 801a2e4:	4606      	mov	r6, r0
 801a2e6:	e7d5      	b.n	801a294 <uxr_serialize_ObjectVariant.part.0+0x94>

0801a2e8 <uxr_deserialize_DATAWRITER_Representation>:
 801a2e8:	b570      	push	{r4, r5, r6, lr}
 801a2ea:	4606      	mov	r6, r0
 801a2ec:	460d      	mov	r5, r1
 801a2ee:	f7f4 fae5 	bl	800e8bc <ucdr_deserialize_uint8_t>
 801a2f2:	4604      	mov	r4, r0
 801a2f4:	b130      	cbz	r0, 801a304 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801a2f6:	782b      	ldrb	r3, [r5, #0]
 801a2f8:	2b02      	cmp	r3, #2
 801a2fa:	d00c      	beq.n	801a316 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801a2fc:	2b03      	cmp	r3, #3
 801a2fe:	d012      	beq.n	801a326 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 801a300:	2b01      	cmp	r3, #1
 801a302:	d008      	beq.n	801a316 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801a304:	2202      	movs	r2, #2
 801a306:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801a30a:	4630      	mov	r0, r6
 801a30c:	f7fd fa28 	bl	8017760 <ucdr_deserialize_array_uint8_t>
 801a310:	4020      	ands	r0, r4
 801a312:	b2c0      	uxtb	r0, r0
 801a314:	bd70      	pop	{r4, r5, r6, pc}
 801a316:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a31a:	6869      	ldr	r1, [r5, #4]
 801a31c:	4630      	mov	r0, r6
 801a31e:	f001 fc9f 	bl	801bc60 <ucdr_deserialize_string>
 801a322:	4604      	mov	r4, r0
 801a324:	e7ee      	b.n	801a304 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801a326:	1d2b      	adds	r3, r5, #4
 801a328:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a32c:	f105 0108 	add.w	r1, r5, #8
 801a330:	4630      	mov	r0, r6
 801a332:	f7f7 fb93 	bl	8011a5c <ucdr_deserialize_sequence_uint8_t>
 801a336:	4604      	mov	r4, r0
 801a338:	e7e4      	b.n	801a304 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801a33a:	bf00      	nop

0801a33c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801a33c:	b570      	push	{r4, r5, r6, lr}
 801a33e:	460d      	mov	r5, r1
 801a340:	7809      	ldrb	r1, [r1, #0]
 801a342:	4606      	mov	r6, r0
 801a344:	f7f4 fa76 	bl	800e834 <ucdr_serialize_bool>
 801a348:	782b      	ldrb	r3, [r5, #0]
 801a34a:	4604      	mov	r4, r0
 801a34c:	b94b      	cbnz	r3, 801a362 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801a34e:	7a29      	ldrb	r1, [r5, #8]
 801a350:	4630      	mov	r0, r6
 801a352:	f7f4 fa6f 	bl	800e834 <ucdr_serialize_bool>
 801a356:	7a2b      	ldrb	r3, [r5, #8]
 801a358:	4004      	ands	r4, r0
 801a35a:	b2e4      	uxtb	r4, r4
 801a35c:	b943      	cbnz	r3, 801a370 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801a35e:	4620      	mov	r0, r4
 801a360:	bd70      	pop	{r4, r5, r6, pc}
 801a362:	6869      	ldr	r1, [r5, #4]
 801a364:	4630      	mov	r0, r6
 801a366:	f001 fc6b 	bl	801bc40 <ucdr_serialize_string>
 801a36a:	4004      	ands	r4, r0
 801a36c:	b2e4      	uxtb	r4, r4
 801a36e:	e7ee      	b.n	801a34e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801a370:	68e9      	ldr	r1, [r5, #12]
 801a372:	4630      	mov	r0, r6
 801a374:	f001 fc64 	bl	801bc40 <ucdr_serialize_string>
 801a378:	4004      	ands	r4, r0
 801a37a:	4620      	mov	r0, r4
 801a37c:	bd70      	pop	{r4, r5, r6, pc}
 801a37e:	bf00      	nop

0801a380 <uxr_serialize_OBJK_Topic_Binary>:
 801a380:	b570      	push	{r4, r5, r6, lr}
 801a382:	460d      	mov	r5, r1
 801a384:	4606      	mov	r6, r0
 801a386:	6809      	ldr	r1, [r1, #0]
 801a388:	f001 fc5a 	bl	801bc40 <ucdr_serialize_string>
 801a38c:	4604      	mov	r4, r0
 801a38e:	7929      	ldrb	r1, [r5, #4]
 801a390:	4630      	mov	r0, r6
 801a392:	f7f4 fa4f 	bl	800e834 <ucdr_serialize_bool>
 801a396:	792b      	ldrb	r3, [r5, #4]
 801a398:	4004      	ands	r4, r0
 801a39a:	b2e4      	uxtb	r4, r4
 801a39c:	b943      	cbnz	r3, 801a3b0 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801a39e:	7b29      	ldrb	r1, [r5, #12]
 801a3a0:	4630      	mov	r0, r6
 801a3a2:	f7f4 fa47 	bl	800e834 <ucdr_serialize_bool>
 801a3a6:	7b2b      	ldrb	r3, [r5, #12]
 801a3a8:	4004      	ands	r4, r0
 801a3aa:	b93b      	cbnz	r3, 801a3bc <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801a3ac:	4620      	mov	r0, r4
 801a3ae:	bd70      	pop	{r4, r5, r6, pc}
 801a3b0:	68a9      	ldr	r1, [r5, #8]
 801a3b2:	4630      	mov	r0, r6
 801a3b4:	f001 fc44 	bl	801bc40 <ucdr_serialize_string>
 801a3b8:	4004      	ands	r4, r0
 801a3ba:	e7f0      	b.n	801a39e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801a3bc:	6929      	ldr	r1, [r5, #16]
 801a3be:	4630      	mov	r0, r6
 801a3c0:	f001 fc3e 	bl	801bc40 <ucdr_serialize_string>
 801a3c4:	4004      	ands	r4, r0
 801a3c6:	b2e4      	uxtb	r4, r4
 801a3c8:	4620      	mov	r0, r4
 801a3ca:	bd70      	pop	{r4, r5, r6, pc}

0801a3cc <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801a3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3d0:	460c      	mov	r4, r1
 801a3d2:	7809      	ldrb	r1, [r1, #0]
 801a3d4:	4606      	mov	r6, r0
 801a3d6:	f7f4 fa2d 	bl	800e834 <ucdr_serialize_bool>
 801a3da:	7823      	ldrb	r3, [r4, #0]
 801a3dc:	4605      	mov	r5, r0
 801a3de:	b96b      	cbnz	r3, 801a3fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 801a3e0:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801a3e4:	4630      	mov	r0, r6
 801a3e6:	f7f4 fa25 	bl	800e834 <ucdr_serialize_bool>
 801a3ea:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a3ee:	4005      	ands	r5, r0
 801a3f0:	b2ed      	uxtb	r5, r5
 801a3f2:	2b00      	cmp	r3, #0
 801a3f4:	d169      	bne.n	801a4ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801a3f6:	4628      	mov	r0, r5
 801a3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3fc:	6861      	ldr	r1, [r4, #4]
 801a3fe:	4630      	mov	r0, r6
 801a400:	f7f4 fc5c 	bl	800ecbc <ucdr_serialize_uint32_t>
 801a404:	6863      	ldr	r3, [r4, #4]
 801a406:	2b00      	cmp	r3, #0
 801a408:	d06b      	beq.n	801a4e2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801a40a:	2800      	cmp	r0, #0
 801a40c:	d067      	beq.n	801a4de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a40e:	68a1      	ldr	r1, [r4, #8]
 801a410:	4630      	mov	r0, r6
 801a412:	f001 fc15 	bl	801bc40 <ucdr_serialize_string>
 801a416:	6863      	ldr	r3, [r4, #4]
 801a418:	2b01      	cmp	r3, #1
 801a41a:	d953      	bls.n	801a4c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a41c:	2800      	cmp	r0, #0
 801a41e:	d05e      	beq.n	801a4de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a420:	68e1      	ldr	r1, [r4, #12]
 801a422:	4630      	mov	r0, r6
 801a424:	f001 fc0c 	bl	801bc40 <ucdr_serialize_string>
 801a428:	6863      	ldr	r3, [r4, #4]
 801a42a:	2b02      	cmp	r3, #2
 801a42c:	d94a      	bls.n	801a4c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a42e:	2800      	cmp	r0, #0
 801a430:	d055      	beq.n	801a4de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a432:	6921      	ldr	r1, [r4, #16]
 801a434:	4630      	mov	r0, r6
 801a436:	f001 fc03 	bl	801bc40 <ucdr_serialize_string>
 801a43a:	6863      	ldr	r3, [r4, #4]
 801a43c:	2b03      	cmp	r3, #3
 801a43e:	d941      	bls.n	801a4c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a440:	2800      	cmp	r0, #0
 801a442:	d04c      	beq.n	801a4de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a444:	6961      	ldr	r1, [r4, #20]
 801a446:	4630      	mov	r0, r6
 801a448:	f001 fbfa 	bl	801bc40 <ucdr_serialize_string>
 801a44c:	6863      	ldr	r3, [r4, #4]
 801a44e:	2b04      	cmp	r3, #4
 801a450:	d938      	bls.n	801a4c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a452:	2800      	cmp	r0, #0
 801a454:	d043      	beq.n	801a4de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a456:	69a1      	ldr	r1, [r4, #24]
 801a458:	4630      	mov	r0, r6
 801a45a:	f001 fbf1 	bl	801bc40 <ucdr_serialize_string>
 801a45e:	6863      	ldr	r3, [r4, #4]
 801a460:	2b05      	cmp	r3, #5
 801a462:	d92f      	bls.n	801a4c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a464:	2800      	cmp	r0, #0
 801a466:	d03a      	beq.n	801a4de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a468:	69e1      	ldr	r1, [r4, #28]
 801a46a:	4630      	mov	r0, r6
 801a46c:	f001 fbe8 	bl	801bc40 <ucdr_serialize_string>
 801a470:	6863      	ldr	r3, [r4, #4]
 801a472:	2b06      	cmp	r3, #6
 801a474:	d926      	bls.n	801a4c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a476:	b390      	cbz	r0, 801a4de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a478:	6a21      	ldr	r1, [r4, #32]
 801a47a:	4630      	mov	r0, r6
 801a47c:	f001 fbe0 	bl	801bc40 <ucdr_serialize_string>
 801a480:	6863      	ldr	r3, [r4, #4]
 801a482:	2b07      	cmp	r3, #7
 801a484:	d91e      	bls.n	801a4c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a486:	b350      	cbz	r0, 801a4de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a488:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801a48a:	4630      	mov	r0, r6
 801a48c:	f001 fbd8 	bl	801bc40 <ucdr_serialize_string>
 801a490:	6863      	ldr	r3, [r4, #4]
 801a492:	2b08      	cmp	r3, #8
 801a494:	d916      	bls.n	801a4c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a496:	b310      	cbz	r0, 801a4de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a498:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801a49a:	4630      	mov	r0, r6
 801a49c:	f001 fbd0 	bl	801bc40 <ucdr_serialize_string>
 801a4a0:	6863      	ldr	r3, [r4, #4]
 801a4a2:	2b09      	cmp	r3, #9
 801a4a4:	d90e      	bls.n	801a4c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a4a6:	b1d0      	cbz	r0, 801a4de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a4a8:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801a4ac:	2709      	movs	r7, #9
 801a4ae:	e000      	b.n	801a4b2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 801a4b0:	b1a8      	cbz	r0, 801a4de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a4b2:	f858 1b04 	ldr.w	r1, [r8], #4
 801a4b6:	4630      	mov	r0, r6
 801a4b8:	f001 fbc2 	bl	801bc40 <ucdr_serialize_string>
 801a4bc:	3701      	adds	r7, #1
 801a4be:	6862      	ldr	r2, [r4, #4]
 801a4c0:	4297      	cmp	r7, r2
 801a4c2:	d3f5      	bcc.n	801a4b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801a4c4:	4005      	ands	r5, r0
 801a4c6:	b2ed      	uxtb	r5, r5
 801a4c8:	e78a      	b.n	801a3e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801a4ca:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801a4cc:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801a4d0:	4630      	mov	r0, r6
 801a4d2:	f7f7 fab1 	bl	8011a38 <ucdr_serialize_sequence_uint8_t>
 801a4d6:	4005      	ands	r5, r0
 801a4d8:	4628      	mov	r0, r5
 801a4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a4de:	2500      	movs	r5, #0
 801a4e0:	e77e      	b.n	801a3e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801a4e2:	4028      	ands	r0, r5
 801a4e4:	b2c5      	uxtb	r5, r0
 801a4e6:	e77b      	b.n	801a3e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0801a4e8 <uxr_serialize_OBJK_Publisher_Binary>:
 801a4e8:	b570      	push	{r4, r5, r6, lr}
 801a4ea:	460d      	mov	r5, r1
 801a4ec:	7809      	ldrb	r1, [r1, #0]
 801a4ee:	4606      	mov	r6, r0
 801a4f0:	f7f4 f9a0 	bl	800e834 <ucdr_serialize_bool>
 801a4f4:	782b      	ldrb	r3, [r5, #0]
 801a4f6:	4604      	mov	r4, r0
 801a4f8:	b94b      	cbnz	r3, 801a50e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801a4fa:	7a29      	ldrb	r1, [r5, #8]
 801a4fc:	4630      	mov	r0, r6
 801a4fe:	f7f4 f999 	bl	800e834 <ucdr_serialize_bool>
 801a502:	7a2b      	ldrb	r3, [r5, #8]
 801a504:	4004      	ands	r4, r0
 801a506:	b2e4      	uxtb	r4, r4
 801a508:	b943      	cbnz	r3, 801a51c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801a50a:	4620      	mov	r0, r4
 801a50c:	bd70      	pop	{r4, r5, r6, pc}
 801a50e:	6869      	ldr	r1, [r5, #4]
 801a510:	4630      	mov	r0, r6
 801a512:	f001 fb95 	bl	801bc40 <ucdr_serialize_string>
 801a516:	4004      	ands	r4, r0
 801a518:	b2e4      	uxtb	r4, r4
 801a51a:	e7ee      	b.n	801a4fa <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801a51c:	f105 010c 	add.w	r1, r5, #12
 801a520:	4630      	mov	r0, r6
 801a522:	f7ff ff53 	bl	801a3cc <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801a526:	4004      	ands	r4, r0
 801a528:	4620      	mov	r0, r4
 801a52a:	bd70      	pop	{r4, r5, r6, pc}

0801a52c <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 801a52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a530:	460c      	mov	r4, r1
 801a532:	7809      	ldrb	r1, [r1, #0]
 801a534:	4606      	mov	r6, r0
 801a536:	f7f4 f97d 	bl	800e834 <ucdr_serialize_bool>
 801a53a:	7823      	ldrb	r3, [r4, #0]
 801a53c:	4605      	mov	r5, r0
 801a53e:	b96b      	cbnz	r3, 801a55c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 801a540:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801a544:	4630      	mov	r0, r6
 801a546:	f7f4 f975 	bl	800e834 <ucdr_serialize_bool>
 801a54a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a54e:	4005      	ands	r5, r0
 801a550:	b2ed      	uxtb	r5, r5
 801a552:	2b00      	cmp	r3, #0
 801a554:	d169      	bne.n	801a62a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801a556:	4628      	mov	r0, r5
 801a558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a55c:	6861      	ldr	r1, [r4, #4]
 801a55e:	4630      	mov	r0, r6
 801a560:	f7f4 fbac 	bl	800ecbc <ucdr_serialize_uint32_t>
 801a564:	6863      	ldr	r3, [r4, #4]
 801a566:	2b00      	cmp	r3, #0
 801a568:	d06b      	beq.n	801a642 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801a56a:	2800      	cmp	r0, #0
 801a56c:	d067      	beq.n	801a63e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a56e:	68a1      	ldr	r1, [r4, #8]
 801a570:	4630      	mov	r0, r6
 801a572:	f001 fb65 	bl	801bc40 <ucdr_serialize_string>
 801a576:	6863      	ldr	r3, [r4, #4]
 801a578:	2b01      	cmp	r3, #1
 801a57a:	d953      	bls.n	801a624 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a57c:	2800      	cmp	r0, #0
 801a57e:	d05e      	beq.n	801a63e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a580:	68e1      	ldr	r1, [r4, #12]
 801a582:	4630      	mov	r0, r6
 801a584:	f001 fb5c 	bl	801bc40 <ucdr_serialize_string>
 801a588:	6863      	ldr	r3, [r4, #4]
 801a58a:	2b02      	cmp	r3, #2
 801a58c:	d94a      	bls.n	801a624 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a58e:	2800      	cmp	r0, #0
 801a590:	d055      	beq.n	801a63e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a592:	6921      	ldr	r1, [r4, #16]
 801a594:	4630      	mov	r0, r6
 801a596:	f001 fb53 	bl	801bc40 <ucdr_serialize_string>
 801a59a:	6863      	ldr	r3, [r4, #4]
 801a59c:	2b03      	cmp	r3, #3
 801a59e:	d941      	bls.n	801a624 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a5a0:	2800      	cmp	r0, #0
 801a5a2:	d04c      	beq.n	801a63e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a5a4:	6961      	ldr	r1, [r4, #20]
 801a5a6:	4630      	mov	r0, r6
 801a5a8:	f001 fb4a 	bl	801bc40 <ucdr_serialize_string>
 801a5ac:	6863      	ldr	r3, [r4, #4]
 801a5ae:	2b04      	cmp	r3, #4
 801a5b0:	d938      	bls.n	801a624 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a5b2:	2800      	cmp	r0, #0
 801a5b4:	d043      	beq.n	801a63e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a5b6:	69a1      	ldr	r1, [r4, #24]
 801a5b8:	4630      	mov	r0, r6
 801a5ba:	f001 fb41 	bl	801bc40 <ucdr_serialize_string>
 801a5be:	6863      	ldr	r3, [r4, #4]
 801a5c0:	2b05      	cmp	r3, #5
 801a5c2:	d92f      	bls.n	801a624 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a5c4:	2800      	cmp	r0, #0
 801a5c6:	d03a      	beq.n	801a63e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a5c8:	69e1      	ldr	r1, [r4, #28]
 801a5ca:	4630      	mov	r0, r6
 801a5cc:	f001 fb38 	bl	801bc40 <ucdr_serialize_string>
 801a5d0:	6863      	ldr	r3, [r4, #4]
 801a5d2:	2b06      	cmp	r3, #6
 801a5d4:	d926      	bls.n	801a624 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a5d6:	b390      	cbz	r0, 801a63e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a5d8:	6a21      	ldr	r1, [r4, #32]
 801a5da:	4630      	mov	r0, r6
 801a5dc:	f001 fb30 	bl	801bc40 <ucdr_serialize_string>
 801a5e0:	6863      	ldr	r3, [r4, #4]
 801a5e2:	2b07      	cmp	r3, #7
 801a5e4:	d91e      	bls.n	801a624 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a5e6:	b350      	cbz	r0, 801a63e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a5e8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801a5ea:	4630      	mov	r0, r6
 801a5ec:	f001 fb28 	bl	801bc40 <ucdr_serialize_string>
 801a5f0:	6863      	ldr	r3, [r4, #4]
 801a5f2:	2b08      	cmp	r3, #8
 801a5f4:	d916      	bls.n	801a624 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a5f6:	b310      	cbz	r0, 801a63e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a5f8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801a5fa:	4630      	mov	r0, r6
 801a5fc:	f001 fb20 	bl	801bc40 <ucdr_serialize_string>
 801a600:	6863      	ldr	r3, [r4, #4]
 801a602:	2b09      	cmp	r3, #9
 801a604:	d90e      	bls.n	801a624 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a606:	b1d0      	cbz	r0, 801a63e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a608:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801a60c:	2709      	movs	r7, #9
 801a60e:	e000      	b.n	801a612 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 801a610:	b1a8      	cbz	r0, 801a63e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a612:	f858 1b04 	ldr.w	r1, [r8], #4
 801a616:	4630      	mov	r0, r6
 801a618:	f001 fb12 	bl	801bc40 <ucdr_serialize_string>
 801a61c:	3701      	adds	r7, #1
 801a61e:	6862      	ldr	r2, [r4, #4]
 801a620:	4297      	cmp	r7, r2
 801a622:	d3f5      	bcc.n	801a610 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 801a624:	4005      	ands	r5, r0
 801a626:	b2ed      	uxtb	r5, r5
 801a628:	e78a      	b.n	801a540 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801a62a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801a62c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801a630:	4630      	mov	r0, r6
 801a632:	f7f7 fa01 	bl	8011a38 <ucdr_serialize_sequence_uint8_t>
 801a636:	4005      	ands	r5, r0
 801a638:	4628      	mov	r0, r5
 801a63a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a63e:	2500      	movs	r5, #0
 801a640:	e77e      	b.n	801a540 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801a642:	4028      	ands	r0, r5
 801a644:	b2c5      	uxtb	r5, r0
 801a646:	e77b      	b.n	801a540 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0801a648 <uxr_serialize_OBJK_Subscriber_Binary>:
 801a648:	b570      	push	{r4, r5, r6, lr}
 801a64a:	460d      	mov	r5, r1
 801a64c:	7809      	ldrb	r1, [r1, #0]
 801a64e:	4606      	mov	r6, r0
 801a650:	f7f4 f8f0 	bl	800e834 <ucdr_serialize_bool>
 801a654:	782b      	ldrb	r3, [r5, #0]
 801a656:	4604      	mov	r4, r0
 801a658:	b94b      	cbnz	r3, 801a66e <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801a65a:	7a29      	ldrb	r1, [r5, #8]
 801a65c:	4630      	mov	r0, r6
 801a65e:	f7f4 f8e9 	bl	800e834 <ucdr_serialize_bool>
 801a662:	7a2b      	ldrb	r3, [r5, #8]
 801a664:	4004      	ands	r4, r0
 801a666:	b2e4      	uxtb	r4, r4
 801a668:	b943      	cbnz	r3, 801a67c <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801a66a:	4620      	mov	r0, r4
 801a66c:	bd70      	pop	{r4, r5, r6, pc}
 801a66e:	6869      	ldr	r1, [r5, #4]
 801a670:	4630      	mov	r0, r6
 801a672:	f001 fae5 	bl	801bc40 <ucdr_serialize_string>
 801a676:	4004      	ands	r4, r0
 801a678:	b2e4      	uxtb	r4, r4
 801a67a:	e7ee      	b.n	801a65a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801a67c:	f105 010c 	add.w	r1, r5, #12
 801a680:	4630      	mov	r0, r6
 801a682:	f7ff ff53 	bl	801a52c <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801a686:	4004      	ands	r4, r0
 801a688:	4620      	mov	r0, r4
 801a68a:	bd70      	pop	{r4, r5, r6, pc}

0801a68c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801a68c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 801a690:	4688      	mov	r8, r1
 801a692:	4681      	mov	r9, r0
 801a694:	8809      	ldrh	r1, [r1, #0]
 801a696:	f7f4 f927 	bl	800e8e8 <ucdr_serialize_uint16_t>
 801a69a:	4606      	mov	r6, r0
 801a69c:	f898 1002 	ldrb.w	r1, [r8, #2]
 801a6a0:	4648      	mov	r0, r9
 801a6a2:	f7f4 f8c7 	bl	800e834 <ucdr_serialize_bool>
 801a6a6:	f898 3002 	ldrb.w	r3, [r8, #2]
 801a6aa:	4006      	ands	r6, r0
 801a6ac:	b2f5      	uxtb	r5, r6
 801a6ae:	b9eb      	cbnz	r3, 801a6ec <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801a6b0:	f898 1006 	ldrb.w	r1, [r8, #6]
 801a6b4:	4648      	mov	r0, r9
 801a6b6:	f7f4 f8bd 	bl	800e834 <ucdr_serialize_bool>
 801a6ba:	f898 3006 	ldrb.w	r3, [r8, #6]
 801a6be:	4005      	ands	r5, r0
 801a6c0:	bb7b      	cbnz	r3, 801a722 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801a6c2:	f898 100c 	ldrb.w	r1, [r8, #12]
 801a6c6:	4648      	mov	r0, r9
 801a6c8:	f7f4 f8b4 	bl	800e834 <ucdr_serialize_bool>
 801a6cc:	f898 300c 	ldrb.w	r3, [r8, #12]
 801a6d0:	4005      	ands	r5, r0
 801a6d2:	b9f3      	cbnz	r3, 801a712 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801a6d4:	f898 1014 	ldrb.w	r1, [r8, #20]
 801a6d8:	4648      	mov	r0, r9
 801a6da:	f7f4 f8ab 	bl	800e834 <ucdr_serialize_bool>
 801a6de:	f898 3014 	ldrb.w	r3, [r8, #20]
 801a6e2:	4005      	ands	r5, r0
 801a6e4:	b94b      	cbnz	r3, 801a6fa <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801a6e6:	4628      	mov	r0, r5
 801a6e8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801a6ec:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801a6f0:	4648      	mov	r0, r9
 801a6f2:	f7f4 f8f9 	bl	800e8e8 <ucdr_serialize_uint16_t>
 801a6f6:	4005      	ands	r5, r0
 801a6f8:	e7da      	b.n	801a6b0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801a6fa:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801a6fe:	f108 011c 	add.w	r1, r8, #28
 801a702:	4648      	mov	r0, r9
 801a704:	f7f7 f998 	bl	8011a38 <ucdr_serialize_sequence_uint8_t>
 801a708:	4028      	ands	r0, r5
 801a70a:	b2c5      	uxtb	r5, r0
 801a70c:	4628      	mov	r0, r5
 801a70e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801a712:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801a716:	4648      	mov	r0, r9
 801a718:	f7f4 fad0 	bl	800ecbc <ucdr_serialize_uint32_t>
 801a71c:	4028      	ands	r0, r5
 801a71e:	b2c5      	uxtb	r5, r0
 801a720:	e7d8      	b.n	801a6d4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801a722:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801a726:	4648      	mov	r0, r9
 801a728:	f7f4 fac8 	bl	800ecbc <ucdr_serialize_uint32_t>
 801a72c:	4028      	ands	r0, r5
 801a72e:	b2c5      	uxtb	r5, r0
 801a730:	e7c7      	b.n	801a6c2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801a732:	bf00      	nop

0801a734 <uxr_serialize_OBJK_DataReader_Binary>:
 801a734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a736:	2202      	movs	r2, #2
 801a738:	460c      	mov	r4, r1
 801a73a:	4606      	mov	r6, r0
 801a73c:	f7fc ffac 	bl	8017698 <ucdr_serialize_array_uint8_t>
 801a740:	4605      	mov	r5, r0
 801a742:	78a1      	ldrb	r1, [r4, #2]
 801a744:	4630      	mov	r0, r6
 801a746:	f7f4 f875 	bl	800e834 <ucdr_serialize_bool>
 801a74a:	78a3      	ldrb	r3, [r4, #2]
 801a74c:	4005      	ands	r5, r0
 801a74e:	b2ed      	uxtb	r5, r5
 801a750:	b90b      	cbnz	r3, 801a756 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801a752:	4628      	mov	r0, r5
 801a754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a756:	f104 0108 	add.w	r1, r4, #8
 801a75a:	4630      	mov	r0, r6
 801a75c:	f7ff ff96 	bl	801a68c <uxr_serialize_OBJK_Endpoint_QosBinary>
 801a760:	4607      	mov	r7, r0
 801a762:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801a766:	4630      	mov	r0, r6
 801a768:	f7f4 f864 	bl	800e834 <ucdr_serialize_bool>
 801a76c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801a770:	4038      	ands	r0, r7
 801a772:	b2c7      	uxtb	r7, r0
 801a774:	b95b      	cbnz	r3, 801a78e <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801a776:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801a77a:	4630      	mov	r0, r6
 801a77c:	f7f4 f85a 	bl	800e834 <ucdr_serialize_bool>
 801a780:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801a784:	4007      	ands	r7, r0
 801a786:	b94b      	cbnz	r3, 801a79c <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801a788:	403d      	ands	r5, r7
 801a78a:	4628      	mov	r0, r5
 801a78c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a78e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 801a792:	4630      	mov	r0, r6
 801a794:	f7f4 fce8 	bl	800f168 <ucdr_serialize_uint64_t>
 801a798:	4007      	ands	r7, r0
 801a79a:	e7ec      	b.n	801a776 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801a79c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801a79e:	4630      	mov	r0, r6
 801a7a0:	f001 fa4e 	bl	801bc40 <ucdr_serialize_string>
 801a7a4:	4007      	ands	r7, r0
 801a7a6:	b2ff      	uxtb	r7, r7
 801a7a8:	e7ee      	b.n	801a788 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801a7aa:	bf00      	nop

0801a7ac <uxr_serialize_OBJK_DataWriter_Binary>:
 801a7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7ae:	2202      	movs	r2, #2
 801a7b0:	460d      	mov	r5, r1
 801a7b2:	4606      	mov	r6, r0
 801a7b4:	f7fc ff70 	bl	8017698 <ucdr_serialize_array_uint8_t>
 801a7b8:	4604      	mov	r4, r0
 801a7ba:	78a9      	ldrb	r1, [r5, #2]
 801a7bc:	4630      	mov	r0, r6
 801a7be:	f7f4 f839 	bl	800e834 <ucdr_serialize_bool>
 801a7c2:	78ab      	ldrb	r3, [r5, #2]
 801a7c4:	4004      	ands	r4, r0
 801a7c6:	b2e4      	uxtb	r4, r4
 801a7c8:	b90b      	cbnz	r3, 801a7ce <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801a7ca:	4620      	mov	r0, r4
 801a7cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7ce:	f105 0108 	add.w	r1, r5, #8
 801a7d2:	4630      	mov	r0, r6
 801a7d4:	f7ff ff5a 	bl	801a68c <uxr_serialize_OBJK_Endpoint_QosBinary>
 801a7d8:	4607      	mov	r7, r0
 801a7da:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801a7de:	4630      	mov	r0, r6
 801a7e0:	f7f4 f828 	bl	800e834 <ucdr_serialize_bool>
 801a7e4:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801a7e8:	4038      	ands	r0, r7
 801a7ea:	b2c7      	uxtb	r7, r0
 801a7ec:	b913      	cbnz	r3, 801a7f4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801a7ee:	403c      	ands	r4, r7
 801a7f0:	4620      	mov	r0, r4
 801a7f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7f4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 801a7f8:	4630      	mov	r0, r6
 801a7fa:	f7f4 fcb5 	bl	800f168 <ucdr_serialize_uint64_t>
 801a7fe:	4007      	ands	r7, r0
 801a800:	e7f5      	b.n	801a7ee <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801a802:	bf00      	nop

0801a804 <uxr_serialize_OBJK_Replier_Binary>:
 801a804:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 801a808:	460f      	mov	r7, r1
 801a80a:	4680      	mov	r8, r0
 801a80c:	6809      	ldr	r1, [r1, #0]
 801a80e:	f001 fa17 	bl	801bc40 <ucdr_serialize_string>
 801a812:	4605      	mov	r5, r0
 801a814:	6879      	ldr	r1, [r7, #4]
 801a816:	4640      	mov	r0, r8
 801a818:	f001 fa12 	bl	801bc40 <ucdr_serialize_string>
 801a81c:	4005      	ands	r5, r0
 801a81e:	68b9      	ldr	r1, [r7, #8]
 801a820:	4640      	mov	r0, r8
 801a822:	b2ec      	uxtb	r4, r5
 801a824:	f001 fa0c 	bl	801bc40 <ucdr_serialize_string>
 801a828:	7b39      	ldrb	r1, [r7, #12]
 801a82a:	4004      	ands	r4, r0
 801a82c:	4640      	mov	r0, r8
 801a82e:	f7f4 f801 	bl	800e834 <ucdr_serialize_bool>
 801a832:	7b3b      	ldrb	r3, [r7, #12]
 801a834:	4004      	ands	r4, r0
 801a836:	b94b      	cbnz	r3, 801a84c <uxr_serialize_OBJK_Replier_Binary+0x48>
 801a838:	7d39      	ldrb	r1, [r7, #20]
 801a83a:	4640      	mov	r0, r8
 801a83c:	f7f3 fffa 	bl	800e834 <ucdr_serialize_bool>
 801a840:	7d3b      	ldrb	r3, [r7, #20]
 801a842:	4004      	ands	r4, r0
 801a844:	b943      	cbnz	r3, 801a858 <uxr_serialize_OBJK_Replier_Binary+0x54>
 801a846:	4620      	mov	r0, r4
 801a848:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801a84c:	6939      	ldr	r1, [r7, #16]
 801a84e:	4640      	mov	r0, r8
 801a850:	f001 f9f6 	bl	801bc40 <ucdr_serialize_string>
 801a854:	4004      	ands	r4, r0
 801a856:	e7ef      	b.n	801a838 <uxr_serialize_OBJK_Replier_Binary+0x34>
 801a858:	69b9      	ldr	r1, [r7, #24]
 801a85a:	4640      	mov	r0, r8
 801a85c:	f001 f9f0 	bl	801bc40 <ucdr_serialize_string>
 801a860:	4004      	ands	r4, r0
 801a862:	b2e4      	uxtb	r4, r4
 801a864:	4620      	mov	r0, r4
 801a866:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801a86a:	bf00      	nop

0801a86c <uxr_deserialize_ObjectVariant>:
 801a86c:	b570      	push	{r4, r5, r6, lr}
 801a86e:	4605      	mov	r5, r0
 801a870:	460e      	mov	r6, r1
 801a872:	f7f4 f823 	bl	800e8bc <ucdr_deserialize_uint8_t>
 801a876:	b168      	cbz	r0, 801a894 <uxr_deserialize_ObjectVariant+0x28>
 801a878:	7833      	ldrb	r3, [r6, #0]
 801a87a:	4604      	mov	r4, r0
 801a87c:	3b01      	subs	r3, #1
 801a87e:	2b0d      	cmp	r3, #13
 801a880:	d809      	bhi.n	801a896 <uxr_deserialize_ObjectVariant+0x2a>
 801a882:	e8df f003 	tbb	[pc, r3]
 801a886:	0a41      	.short	0x0a41
 801a888:	0a0a2323 	.word	0x0a0a2323
 801a88c:	10080a0a 	.word	0x10080a0a
 801a890:	565c1010 	.word	0x565c1010
 801a894:	2400      	movs	r4, #0
 801a896:	4620      	mov	r0, r4
 801a898:	bd70      	pop	{r4, r5, r6, pc}
 801a89a:	1d31      	adds	r1, r6, #4
 801a89c:	4628      	mov	r0, r5
 801a89e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a8a2:	f7ff bd21 	b.w	801a2e8 <uxr_deserialize_DATAWRITER_Representation>
 801a8a6:	1d31      	adds	r1, r6, #4
 801a8a8:	4628      	mov	r0, r5
 801a8aa:	f7f4 f807 	bl	800e8bc <ucdr_deserialize_uint8_t>
 801a8ae:	2800      	cmp	r0, #0
 801a8b0:	d0f0      	beq.n	801a894 <uxr_deserialize_ObjectVariant+0x28>
 801a8b2:	7933      	ldrb	r3, [r6, #4]
 801a8b4:	2b01      	cmp	r3, #1
 801a8b6:	d001      	beq.n	801a8bc <uxr_deserialize_ObjectVariant+0x50>
 801a8b8:	2b02      	cmp	r3, #2
 801a8ba:	d1ec      	bne.n	801a896 <uxr_deserialize_ObjectVariant+0x2a>
 801a8bc:	68b1      	ldr	r1, [r6, #8]
 801a8be:	4628      	mov	r0, r5
 801a8c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a8c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a8c8:	f001 b9ca 	b.w	801bc60 <ucdr_deserialize_string>
 801a8cc:	1d31      	adds	r1, r6, #4
 801a8ce:	4628      	mov	r0, r5
 801a8d0:	f7f3 fff4 	bl	800e8bc <ucdr_deserialize_uint8_t>
 801a8d4:	4604      	mov	r4, r0
 801a8d6:	b170      	cbz	r0, 801a8f6 <uxr_deserialize_ObjectVariant+0x8a>
 801a8d8:	7933      	ldrb	r3, [r6, #4]
 801a8da:	2b02      	cmp	r3, #2
 801a8dc:	d04c      	beq.n	801a978 <uxr_deserialize_ObjectVariant+0x10c>
 801a8de:	2b03      	cmp	r3, #3
 801a8e0:	d109      	bne.n	801a8f6 <uxr_deserialize_ObjectVariant+0x8a>
 801a8e2:	f106 0308 	add.w	r3, r6, #8
 801a8e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a8ea:	f106 010c 	add.w	r1, r6, #12
 801a8ee:	4628      	mov	r0, r5
 801a8f0:	f7f7 f8b4 	bl	8011a5c <ucdr_deserialize_sequence_uint8_t>
 801a8f4:	4604      	mov	r4, r0
 801a8f6:	2202      	movs	r2, #2
 801a8f8:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801a8fc:	4628      	mov	r0, r5
 801a8fe:	f7fc ff2f 	bl	8017760 <ucdr_deserialize_array_uint8_t>
 801a902:	4020      	ands	r0, r4
 801a904:	b2c4      	uxtb	r4, r0
 801a906:	e7c6      	b.n	801a896 <uxr_deserialize_ObjectVariant+0x2a>
 801a908:	1d31      	adds	r1, r6, #4
 801a90a:	4628      	mov	r0, r5
 801a90c:	f7f3 ffd6 	bl	800e8bc <ucdr_deserialize_uint8_t>
 801a910:	4604      	mov	r4, r0
 801a912:	b130      	cbz	r0, 801a922 <uxr_deserialize_ObjectVariant+0xb6>
 801a914:	7933      	ldrb	r3, [r6, #4]
 801a916:	2b02      	cmp	r3, #2
 801a918:	d036      	beq.n	801a988 <uxr_deserialize_ObjectVariant+0x11c>
 801a91a:	2b03      	cmp	r3, #3
 801a91c:	d03c      	beq.n	801a998 <uxr_deserialize_ObjectVariant+0x12c>
 801a91e:	2b01      	cmp	r3, #1
 801a920:	d032      	beq.n	801a988 <uxr_deserialize_ObjectVariant+0x11c>
 801a922:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801a926:	4628      	mov	r0, r5
 801a928:	f7f4 fd6e 	bl	800f408 <ucdr_deserialize_int16_t>
 801a92c:	4020      	ands	r0, r4
 801a92e:	b2c4      	uxtb	r4, r0
 801a930:	e7b1      	b.n	801a896 <uxr_deserialize_ObjectVariant+0x2a>
 801a932:	1d31      	adds	r1, r6, #4
 801a934:	4628      	mov	r0, r5
 801a936:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a93a:	f7ff bb8b 	b.w	801a054 <uxr_deserialize_CLIENT_Representation>
 801a93e:	2204      	movs	r2, #4
 801a940:	4628      	mov	r0, r5
 801a942:	18b1      	adds	r1, r6, r2
 801a944:	f7fc ff0c 	bl	8017760 <ucdr_deserialize_array_uint8_t>
 801a948:	4604      	mov	r4, r0
 801a94a:	2202      	movs	r2, #2
 801a94c:	f106 0108 	add.w	r1, r6, #8
 801a950:	4628      	mov	r0, r5
 801a952:	f7fc ff05 	bl	8017760 <ucdr_deserialize_array_uint8_t>
 801a956:	4004      	ands	r4, r0
 801a958:	2202      	movs	r2, #2
 801a95a:	f106 010a 	add.w	r1, r6, #10
 801a95e:	4628      	mov	r0, r5
 801a960:	b2e4      	uxtb	r4, r4
 801a962:	f7fc fefd 	bl	8017760 <ucdr_deserialize_array_uint8_t>
 801a966:	4603      	mov	r3, r0
 801a968:	f106 010c 	add.w	r1, r6, #12
 801a96c:	4628      	mov	r0, r5
 801a96e:	401c      	ands	r4, r3
 801a970:	f7f3 ff76 	bl	800e860 <ucdr_deserialize_bool>
 801a974:	4004      	ands	r4, r0
 801a976:	e78e      	b.n	801a896 <uxr_deserialize_ObjectVariant+0x2a>
 801a978:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a97c:	68b1      	ldr	r1, [r6, #8]
 801a97e:	4628      	mov	r0, r5
 801a980:	f001 f96e 	bl	801bc60 <ucdr_deserialize_string>
 801a984:	4604      	mov	r4, r0
 801a986:	e7b6      	b.n	801a8f6 <uxr_deserialize_ObjectVariant+0x8a>
 801a988:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a98c:	68b1      	ldr	r1, [r6, #8]
 801a98e:	4628      	mov	r0, r5
 801a990:	f001 f966 	bl	801bc60 <ucdr_deserialize_string>
 801a994:	4604      	mov	r4, r0
 801a996:	e7c4      	b.n	801a922 <uxr_deserialize_ObjectVariant+0xb6>
 801a998:	f106 0308 	add.w	r3, r6, #8
 801a99c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a9a0:	f106 010c 	add.w	r1, r6, #12
 801a9a4:	4628      	mov	r0, r5
 801a9a6:	f7f7 f859 	bl	8011a5c <ucdr_deserialize_sequence_uint8_t>
 801a9aa:	4604      	mov	r4, r0
 801a9ac:	e7b9      	b.n	801a922 <uxr_deserialize_ObjectVariant+0xb6>
 801a9ae:	bf00      	nop

0801a9b0 <uxr_deserialize_BaseObjectRequest>:
 801a9b0:	b570      	push	{r4, r5, r6, lr}
 801a9b2:	2202      	movs	r2, #2
 801a9b4:	4605      	mov	r5, r0
 801a9b6:	460e      	mov	r6, r1
 801a9b8:	f7fc fed2 	bl	8017760 <ucdr_deserialize_array_uint8_t>
 801a9bc:	2202      	movs	r2, #2
 801a9be:	4604      	mov	r4, r0
 801a9c0:	4628      	mov	r0, r5
 801a9c2:	18b1      	adds	r1, r6, r2
 801a9c4:	f7fc fecc 	bl	8017760 <ucdr_deserialize_array_uint8_t>
 801a9c8:	4020      	ands	r0, r4
 801a9ca:	b2c0      	uxtb	r0, r0
 801a9cc:	bd70      	pop	{r4, r5, r6, pc}
 801a9ce:	bf00      	nop

0801a9d0 <uxr_serialize_ActivityInfoVariant>:
 801a9d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a9d4:	460e      	mov	r6, r1
 801a9d6:	7809      	ldrb	r1, [r1, #0]
 801a9d8:	4680      	mov	r8, r0
 801a9da:	f7f3 ff59 	bl	800e890 <ucdr_serialize_uint8_t>
 801a9de:	4607      	mov	r7, r0
 801a9e0:	b138      	cbz	r0, 801a9f2 <uxr_serialize_ActivityInfoVariant+0x22>
 801a9e2:	7833      	ldrb	r3, [r6, #0]
 801a9e4:	2b06      	cmp	r3, #6
 801a9e6:	f000 8081 	beq.w	801aaec <uxr_serialize_ActivityInfoVariant+0x11c>
 801a9ea:	2b0d      	cmp	r3, #13
 801a9ec:	d014      	beq.n	801aa18 <uxr_serialize_ActivityInfoVariant+0x48>
 801a9ee:	2b05      	cmp	r3, #5
 801a9f0:	d002      	beq.n	801a9f8 <uxr_serialize_ActivityInfoVariant+0x28>
 801a9f2:	4638      	mov	r0, r7
 801a9f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a9f8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801a9fc:	4640      	mov	r0, r8
 801a9fe:	f7f4 fc83 	bl	800f308 <ucdr_serialize_int16_t>
 801aa02:	4607      	mov	r7, r0
 801aa04:	4640      	mov	r0, r8
 801aa06:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801aa0a:	f7f4 fbad 	bl	800f168 <ucdr_serialize_uint64_t>
 801aa0e:	4038      	ands	r0, r7
 801aa10:	b2c7      	uxtb	r7, r0
 801aa12:	4638      	mov	r0, r7
 801aa14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa18:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801aa1c:	4640      	mov	r0, r8
 801aa1e:	f7f4 fc73 	bl	800f308 <ucdr_serialize_int16_t>
 801aa22:	68f1      	ldr	r1, [r6, #12]
 801aa24:	4607      	mov	r7, r0
 801aa26:	4640      	mov	r0, r8
 801aa28:	f7f4 f948 	bl	800ecbc <ucdr_serialize_uint32_t>
 801aa2c:	68f3      	ldr	r3, [r6, #12]
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	d0ed      	beq.n	801aa0e <uxr_serialize_ActivityInfoVariant+0x3e>
 801aa32:	b318      	cbz	r0, 801aa7c <uxr_serialize_ActivityInfoVariant+0xac>
 801aa34:	f106 090c 	add.w	r9, r6, #12
 801aa38:	2400      	movs	r4, #0
 801aa3a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801aa3e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801aa42:	7c29      	ldrb	r1, [r5, #16]
 801aa44:	4640      	mov	r0, r8
 801aa46:	f7f3 ff23 	bl	800e890 <ucdr_serialize_uint8_t>
 801aa4a:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801aa4e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801aa52:	2800      	cmp	r0, #0
 801aa54:	d051      	beq.n	801aafa <uxr_serialize_ActivityInfoVariant+0x12a>
 801aa56:	7c2b      	ldrb	r3, [r5, #16]
 801aa58:	00c9      	lsls	r1, r1, #3
 801aa5a:	2b03      	cmp	r3, #3
 801aa5c:	d854      	bhi.n	801ab08 <uxr_serialize_ActivityInfoVariant+0x138>
 801aa5e:	e8df f003 	tbb	[pc, r3]
 801aa62:	2133      	.short	0x2133
 801aa64:	020f      	.short	0x020f
 801aa66:	4449      	add	r1, r9
 801aa68:	4640      	mov	r0, r8
 801aa6a:	6889      	ldr	r1, [r1, #8]
 801aa6c:	f001 f8e8 	bl	801bc40 <ucdr_serialize_string>
 801aa70:	3401      	adds	r4, #1
 801aa72:	68f2      	ldr	r2, [r6, #12]
 801aa74:	4294      	cmp	r4, r2
 801aa76:	d244      	bcs.n	801ab02 <uxr_serialize_ActivityInfoVariant+0x132>
 801aa78:	2800      	cmp	r0, #0
 801aa7a:	d1de      	bne.n	801aa3a <uxr_serialize_ActivityInfoVariant+0x6a>
 801aa7c:	2700      	movs	r7, #0
 801aa7e:	e7b8      	b.n	801a9f2 <uxr_serialize_ActivityInfoVariant+0x22>
 801aa80:	3108      	adds	r1, #8
 801aa82:	44a2      	add	sl, r4
 801aa84:	2210      	movs	r2, #16
 801aa86:	4640      	mov	r0, r8
 801aa88:	4449      	add	r1, r9
 801aa8a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801aa8e:	f7fc fe03 	bl	8017698 <ucdr_serialize_array_uint8_t>
 801aa92:	4605      	mov	r5, r0
 801aa94:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 801aa98:	4640      	mov	r0, r8
 801aa9a:	f7f4 f90f 	bl	800ecbc <ucdr_serialize_uint32_t>
 801aa9e:	4028      	ands	r0, r5
 801aaa0:	b2c0      	uxtb	r0, r0
 801aaa2:	e7e5      	b.n	801aa70 <uxr_serialize_ActivityInfoVariant+0xa0>
 801aaa4:	3108      	adds	r1, #8
 801aaa6:	44a2      	add	sl, r4
 801aaa8:	2204      	movs	r2, #4
 801aaaa:	4640      	mov	r0, r8
 801aaac:	4449      	add	r1, r9
 801aaae:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801aab2:	f7fc fdf1 	bl	8017698 <ucdr_serialize_array_uint8_t>
 801aab6:	4605      	mov	r5, r0
 801aab8:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 801aabc:	4640      	mov	r0, r8
 801aabe:	f7f3 ff13 	bl	800e8e8 <ucdr_serialize_uint16_t>
 801aac2:	4028      	ands	r0, r5
 801aac4:	b2c0      	uxtb	r0, r0
 801aac6:	e7d3      	b.n	801aa70 <uxr_serialize_ActivityInfoVariant+0xa0>
 801aac8:	3108      	adds	r1, #8
 801aaca:	44a2      	add	sl, r4
 801aacc:	2202      	movs	r2, #2
 801aace:	4640      	mov	r0, r8
 801aad0:	4449      	add	r1, r9
 801aad2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801aad6:	f7fc fddf 	bl	8017698 <ucdr_serialize_array_uint8_t>
 801aada:	4605      	mov	r5, r0
 801aadc:	f89a 1016 	ldrb.w	r1, [sl, #22]
 801aae0:	4640      	mov	r0, r8
 801aae2:	f7f3 fed5 	bl	800e890 <ucdr_serialize_uint8_t>
 801aae6:	4028      	ands	r0, r5
 801aae8:	b2c0      	uxtb	r0, r0
 801aaea:	e7c1      	b.n	801aa70 <uxr_serialize_ActivityInfoVariant+0xa0>
 801aaec:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801aaf0:	4640      	mov	r0, r8
 801aaf2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aaf6:	f7f4 bc07 	b.w	800f308 <ucdr_serialize_int16_t>
 801aafa:	3401      	adds	r4, #1
 801aafc:	68f2      	ldr	r2, [r6, #12]
 801aafe:	42a2      	cmp	r2, r4
 801ab00:	d8bc      	bhi.n	801aa7c <uxr_serialize_ActivityInfoVariant+0xac>
 801ab02:	4007      	ands	r7, r0
 801ab04:	b2ff      	uxtb	r7, r7
 801ab06:	e774      	b.n	801a9f2 <uxr_serialize_ActivityInfoVariant+0x22>
 801ab08:	3401      	adds	r4, #1
 801ab0a:	68f3      	ldr	r3, [r6, #12]
 801ab0c:	3518      	adds	r5, #24
 801ab0e:	429c      	cmp	r4, r3
 801ab10:	d397      	bcc.n	801aa42 <uxr_serialize_ActivityInfoVariant+0x72>
 801ab12:	e76e      	b.n	801a9f2 <uxr_serialize_ActivityInfoVariant+0x22>

0801ab14 <uxr_deserialize_BaseObjectReply>:
 801ab14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab18:	2202      	movs	r2, #2
 801ab1a:	4606      	mov	r6, r0
 801ab1c:	460f      	mov	r7, r1
 801ab1e:	f7fc fe1f 	bl	8017760 <ucdr_deserialize_array_uint8_t>
 801ab22:	2202      	movs	r2, #2
 801ab24:	4605      	mov	r5, r0
 801ab26:	4630      	mov	r0, r6
 801ab28:	18b9      	adds	r1, r7, r2
 801ab2a:	f7fc fe19 	bl	8017760 <ucdr_deserialize_array_uint8_t>
 801ab2e:	4680      	mov	r8, r0
 801ab30:	1d39      	adds	r1, r7, #4
 801ab32:	4630      	mov	r0, r6
 801ab34:	f7f3 fec2 	bl	800e8bc <ucdr_deserialize_uint8_t>
 801ab38:	ea05 0508 	and.w	r5, r5, r8
 801ab3c:	4604      	mov	r4, r0
 801ab3e:	1d79      	adds	r1, r7, #5
 801ab40:	4630      	mov	r0, r6
 801ab42:	402c      	ands	r4, r5
 801ab44:	f7f3 feba 	bl	800e8bc <ucdr_deserialize_uint8_t>
 801ab48:	4020      	ands	r0, r4
 801ab4a:	b2c0      	uxtb	r0, r0
 801ab4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ab50 <uxr_serialize_ReadSpecification>:
 801ab50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab52:	460e      	mov	r6, r1
 801ab54:	4607      	mov	r7, r0
 801ab56:	7809      	ldrb	r1, [r1, #0]
 801ab58:	f7f3 fe9a 	bl	800e890 <ucdr_serialize_uint8_t>
 801ab5c:	4604      	mov	r4, r0
 801ab5e:	7871      	ldrb	r1, [r6, #1]
 801ab60:	4638      	mov	r0, r7
 801ab62:	f7f3 fe95 	bl	800e890 <ucdr_serialize_uint8_t>
 801ab66:	4004      	ands	r4, r0
 801ab68:	78b1      	ldrb	r1, [r6, #2]
 801ab6a:	4638      	mov	r0, r7
 801ab6c:	f7f3 fe62 	bl	800e834 <ucdr_serialize_bool>
 801ab70:	78b3      	ldrb	r3, [r6, #2]
 801ab72:	b2e4      	uxtb	r4, r4
 801ab74:	4004      	ands	r4, r0
 801ab76:	b943      	cbnz	r3, 801ab8a <uxr_serialize_ReadSpecification+0x3a>
 801ab78:	7a31      	ldrb	r1, [r6, #8]
 801ab7a:	4638      	mov	r0, r7
 801ab7c:	f7f3 fe5a 	bl	800e834 <ucdr_serialize_bool>
 801ab80:	7a33      	ldrb	r3, [r6, #8]
 801ab82:	4004      	ands	r4, r0
 801ab84:	b93b      	cbnz	r3, 801ab96 <uxr_serialize_ReadSpecification+0x46>
 801ab86:	4620      	mov	r0, r4
 801ab88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ab8a:	6871      	ldr	r1, [r6, #4]
 801ab8c:	4638      	mov	r0, r7
 801ab8e:	f001 f857 	bl	801bc40 <ucdr_serialize_string>
 801ab92:	4004      	ands	r4, r0
 801ab94:	e7f0      	b.n	801ab78 <uxr_serialize_ReadSpecification+0x28>
 801ab96:	8971      	ldrh	r1, [r6, #10]
 801ab98:	4638      	mov	r0, r7
 801ab9a:	f7f3 fea5 	bl	800e8e8 <ucdr_serialize_uint16_t>
 801ab9e:	4605      	mov	r5, r0
 801aba0:	89b1      	ldrh	r1, [r6, #12]
 801aba2:	4638      	mov	r0, r7
 801aba4:	f7f3 fea0 	bl	800e8e8 <ucdr_serialize_uint16_t>
 801aba8:	4005      	ands	r5, r0
 801abaa:	89f1      	ldrh	r1, [r6, #14]
 801abac:	4638      	mov	r0, r7
 801abae:	b2ed      	uxtb	r5, r5
 801abb0:	f7f3 fe9a 	bl	800e8e8 <ucdr_serialize_uint16_t>
 801abb4:	8a31      	ldrh	r1, [r6, #16]
 801abb6:	4025      	ands	r5, r4
 801abb8:	4604      	mov	r4, r0
 801abba:	4638      	mov	r0, r7
 801abbc:	4025      	ands	r5, r4
 801abbe:	f7f3 fe93 	bl	800e8e8 <ucdr_serialize_uint16_t>
 801abc2:	ea00 0405 	and.w	r4, r0, r5
 801abc6:	4620      	mov	r0, r4
 801abc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801abca:	bf00      	nop

0801abcc <uxr_serialize_CREATE_CLIENT_Payload>:
 801abcc:	f7ff b9ea 	b.w	8019fa4 <uxr_serialize_CLIENT_Representation>

0801abd0 <uxr_serialize_CREATE_Payload>:
 801abd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801abd2:	2202      	movs	r2, #2
 801abd4:	4607      	mov	r7, r0
 801abd6:	460e      	mov	r6, r1
 801abd8:	f7fc fd5e 	bl	8017698 <ucdr_serialize_array_uint8_t>
 801abdc:	2202      	movs	r2, #2
 801abde:	4605      	mov	r5, r0
 801abe0:	4638      	mov	r0, r7
 801abe2:	18b1      	adds	r1, r6, r2
 801abe4:	f7fc fd58 	bl	8017698 <ucdr_serialize_array_uint8_t>
 801abe8:	7931      	ldrb	r1, [r6, #4]
 801abea:	4604      	mov	r4, r0
 801abec:	4638      	mov	r0, r7
 801abee:	f7f3 fe4f 	bl	800e890 <ucdr_serialize_uint8_t>
 801abf2:	b170      	cbz	r0, 801ac12 <uxr_serialize_CREATE_Payload+0x42>
 801abf4:	7933      	ldrb	r3, [r6, #4]
 801abf6:	402c      	ands	r4, r5
 801abf8:	3b01      	subs	r3, #1
 801abfa:	b2e4      	uxtb	r4, r4
 801abfc:	2b0d      	cmp	r3, #13
 801abfe:	d809      	bhi.n	801ac14 <uxr_serialize_CREATE_Payload+0x44>
 801ac00:	e8df f003 	tbb	[pc, r3]
 801ac04:	23230a4c 	.word	0x23230a4c
 801ac08:	0a0a0a0a 	.word	0x0a0a0a0a
 801ac0c:	12121208 	.word	0x12121208
 801ac10:	3e45      	.short	0x3e45
 801ac12:	2400      	movs	r4, #0
 801ac14:	4620      	mov	r0, r4
 801ac16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac18:	f106 0108 	add.w	r1, r6, #8
 801ac1c:	4638      	mov	r0, r7
 801ac1e:	f7ff fac7 	bl	801a1b0 <uxr_serialize_DATAWRITER_Representation>
 801ac22:	4004      	ands	r4, r0
 801ac24:	4620      	mov	r0, r4
 801ac26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac28:	7a31      	ldrb	r1, [r6, #8]
 801ac2a:	4638      	mov	r0, r7
 801ac2c:	f7f3 fe30 	bl	800e890 <ucdr_serialize_uint8_t>
 801ac30:	2800      	cmp	r0, #0
 801ac32:	d0ee      	beq.n	801ac12 <uxr_serialize_CREATE_Payload+0x42>
 801ac34:	7a33      	ldrb	r3, [r6, #8]
 801ac36:	2b01      	cmp	r3, #1
 801ac38:	d001      	beq.n	801ac3e <uxr_serialize_CREATE_Payload+0x6e>
 801ac3a:	2b02      	cmp	r3, #2
 801ac3c:	d1ea      	bne.n	801ac14 <uxr_serialize_CREATE_Payload+0x44>
 801ac3e:	68f1      	ldr	r1, [r6, #12]
 801ac40:	4638      	mov	r0, r7
 801ac42:	f000 fffd 	bl	801bc40 <ucdr_serialize_string>
 801ac46:	4004      	ands	r4, r0
 801ac48:	e7e4      	b.n	801ac14 <uxr_serialize_CREATE_Payload+0x44>
 801ac4a:	7a31      	ldrb	r1, [r6, #8]
 801ac4c:	4638      	mov	r0, r7
 801ac4e:	f7f3 fe1f 	bl	800e890 <ucdr_serialize_uint8_t>
 801ac52:	4605      	mov	r5, r0
 801ac54:	b158      	cbz	r0, 801ac6e <uxr_serialize_CREATE_Payload+0x9e>
 801ac56:	7a33      	ldrb	r3, [r6, #8]
 801ac58:	2b02      	cmp	r3, #2
 801ac5a:	d034      	beq.n	801acc6 <uxr_serialize_CREATE_Payload+0xf6>
 801ac5c:	2b03      	cmp	r3, #3
 801ac5e:	d106      	bne.n	801ac6e <uxr_serialize_CREATE_Payload+0x9e>
 801ac60:	68f2      	ldr	r2, [r6, #12]
 801ac62:	f106 0110 	add.w	r1, r6, #16
 801ac66:	4638      	mov	r0, r7
 801ac68:	f7f6 fee6 	bl	8011a38 <ucdr_serialize_sequence_uint8_t>
 801ac6c:	4605      	mov	r5, r0
 801ac6e:	2202      	movs	r2, #2
 801ac70:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 801ac74:	4638      	mov	r0, r7
 801ac76:	f7fc fd0f 	bl	8017698 <ucdr_serialize_array_uint8_t>
 801ac7a:	4028      	ands	r0, r5
 801ac7c:	4004      	ands	r4, r0
 801ac7e:	e7c9      	b.n	801ac14 <uxr_serialize_CREATE_Payload+0x44>
 801ac80:	f106 0108 	add.w	r1, r6, #8
 801ac84:	4638      	mov	r0, r7
 801ac86:	f7ff f98d 	bl	8019fa4 <uxr_serialize_CLIENT_Representation>
 801ac8a:	4004      	ands	r4, r0
 801ac8c:	e7c2      	b.n	801ac14 <uxr_serialize_CREATE_Payload+0x44>
 801ac8e:	f106 0108 	add.w	r1, r6, #8
 801ac92:	4638      	mov	r0, r7
 801ac94:	f7ff fa42 	bl	801a11c <uxr_serialize_AGENT_Representation>
 801ac98:	4004      	ands	r4, r0
 801ac9a:	e7bb      	b.n	801ac14 <uxr_serialize_CREATE_Payload+0x44>
 801ac9c:	7a31      	ldrb	r1, [r6, #8]
 801ac9e:	4638      	mov	r0, r7
 801aca0:	f7f3 fdf6 	bl	800e890 <ucdr_serialize_uint8_t>
 801aca4:	4605      	mov	r5, r0
 801aca6:	b130      	cbz	r0, 801acb6 <uxr_serialize_CREATE_Payload+0xe6>
 801aca8:	7a33      	ldrb	r3, [r6, #8]
 801acaa:	2b02      	cmp	r3, #2
 801acac:	d011      	beq.n	801acd2 <uxr_serialize_CREATE_Payload+0x102>
 801acae:	2b03      	cmp	r3, #3
 801acb0:	d015      	beq.n	801acde <uxr_serialize_CREATE_Payload+0x10e>
 801acb2:	2b01      	cmp	r3, #1
 801acb4:	d00d      	beq.n	801acd2 <uxr_serialize_CREATE_Payload+0x102>
 801acb6:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801acba:	4638      	mov	r0, r7
 801acbc:	f7f4 fb24 	bl	800f308 <ucdr_serialize_int16_t>
 801acc0:	4028      	ands	r0, r5
 801acc2:	4004      	ands	r4, r0
 801acc4:	e7a6      	b.n	801ac14 <uxr_serialize_CREATE_Payload+0x44>
 801acc6:	68f1      	ldr	r1, [r6, #12]
 801acc8:	4638      	mov	r0, r7
 801acca:	f000 ffb9 	bl	801bc40 <ucdr_serialize_string>
 801acce:	4605      	mov	r5, r0
 801acd0:	e7cd      	b.n	801ac6e <uxr_serialize_CREATE_Payload+0x9e>
 801acd2:	68f1      	ldr	r1, [r6, #12]
 801acd4:	4638      	mov	r0, r7
 801acd6:	f000 ffb3 	bl	801bc40 <ucdr_serialize_string>
 801acda:	4605      	mov	r5, r0
 801acdc:	e7eb      	b.n	801acb6 <uxr_serialize_CREATE_Payload+0xe6>
 801acde:	68f2      	ldr	r2, [r6, #12]
 801ace0:	f106 0110 	add.w	r1, r6, #16
 801ace4:	4638      	mov	r0, r7
 801ace6:	f7f6 fea7 	bl	8011a38 <ucdr_serialize_sequence_uint8_t>
 801acea:	4605      	mov	r5, r0
 801acec:	e7e3      	b.n	801acb6 <uxr_serialize_CREATE_Payload+0xe6>
 801acee:	bf00      	nop

0801acf0 <uxr_deserialize_GET_INFO_Payload>:
 801acf0:	b570      	push	{r4, r5, r6, lr}
 801acf2:	2202      	movs	r2, #2
 801acf4:	4605      	mov	r5, r0
 801acf6:	460e      	mov	r6, r1
 801acf8:	f7fc fd32 	bl	8017760 <ucdr_deserialize_array_uint8_t>
 801acfc:	2202      	movs	r2, #2
 801acfe:	4604      	mov	r4, r0
 801ad00:	4628      	mov	r0, r5
 801ad02:	18b1      	adds	r1, r6, r2
 801ad04:	f7fc fd2c 	bl	8017760 <ucdr_deserialize_array_uint8_t>
 801ad08:	4603      	mov	r3, r0
 801ad0a:	1d31      	adds	r1, r6, #4
 801ad0c:	4628      	mov	r0, r5
 801ad0e:	401c      	ands	r4, r3
 801ad10:	f7f4 f904 	bl	800ef1c <ucdr_deserialize_uint32_t>
 801ad14:	b2e4      	uxtb	r4, r4
 801ad16:	4020      	ands	r0, r4
 801ad18:	bd70      	pop	{r4, r5, r6, pc}
 801ad1a:	bf00      	nop

0801ad1c <uxr_serialize_DELETE_Payload>:
 801ad1c:	b570      	push	{r4, r5, r6, lr}
 801ad1e:	2202      	movs	r2, #2
 801ad20:	4605      	mov	r5, r0
 801ad22:	460e      	mov	r6, r1
 801ad24:	f7fc fcb8 	bl	8017698 <ucdr_serialize_array_uint8_t>
 801ad28:	2202      	movs	r2, #2
 801ad2a:	4604      	mov	r4, r0
 801ad2c:	4628      	mov	r0, r5
 801ad2e:	18b1      	adds	r1, r6, r2
 801ad30:	f7fc fcb2 	bl	8017698 <ucdr_serialize_array_uint8_t>
 801ad34:	4020      	ands	r0, r4
 801ad36:	b2c0      	uxtb	r0, r0
 801ad38:	bd70      	pop	{r4, r5, r6, pc}
 801ad3a:	bf00      	nop

0801ad3c <uxr_deserialize_STATUS_AGENT_Payload>:
 801ad3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad40:	460e      	mov	r6, r1
 801ad42:	4605      	mov	r5, r0
 801ad44:	f7f3 fdba 	bl	800e8bc <ucdr_deserialize_uint8_t>
 801ad48:	4604      	mov	r4, r0
 801ad4a:	1c71      	adds	r1, r6, #1
 801ad4c:	4628      	mov	r0, r5
 801ad4e:	f7f3 fdb5 	bl	800e8bc <ucdr_deserialize_uint8_t>
 801ad52:	2204      	movs	r2, #4
 801ad54:	4681      	mov	r9, r0
 801ad56:	4628      	mov	r0, r5
 801ad58:	18b1      	adds	r1, r6, r2
 801ad5a:	f7fc fd01 	bl	8017760 <ucdr_deserialize_array_uint8_t>
 801ad5e:	f106 0108 	add.w	r1, r6, #8
 801ad62:	4680      	mov	r8, r0
 801ad64:	2202      	movs	r2, #2
 801ad66:	4628      	mov	r0, r5
 801ad68:	f7fc fcfa 	bl	8017760 <ucdr_deserialize_array_uint8_t>
 801ad6c:	ea04 0309 	and.w	r3, r4, r9
 801ad70:	4607      	mov	r7, r0
 801ad72:	2202      	movs	r2, #2
 801ad74:	b2db      	uxtb	r3, r3
 801ad76:	f106 010a 	add.w	r1, r6, #10
 801ad7a:	4628      	mov	r0, r5
 801ad7c:	ea03 0408 	and.w	r4, r3, r8
 801ad80:	f7fc fcee 	bl	8017760 <ucdr_deserialize_array_uint8_t>
 801ad84:	4603      	mov	r3, r0
 801ad86:	4628      	mov	r0, r5
 801ad88:	403c      	ands	r4, r7
 801ad8a:	f106 010c 	add.w	r1, r6, #12
 801ad8e:	461d      	mov	r5, r3
 801ad90:	f7f3 fd66 	bl	800e860 <ucdr_deserialize_bool>
 801ad94:	4025      	ands	r5, r4
 801ad96:	4028      	ands	r0, r5
 801ad98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801ad9c <uxr_deserialize_STATUS_Payload>:
 801ad9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ada0:	2202      	movs	r2, #2
 801ada2:	4606      	mov	r6, r0
 801ada4:	460f      	mov	r7, r1
 801ada6:	f7fc fcdb 	bl	8017760 <ucdr_deserialize_array_uint8_t>
 801adaa:	2202      	movs	r2, #2
 801adac:	4605      	mov	r5, r0
 801adae:	4630      	mov	r0, r6
 801adb0:	18b9      	adds	r1, r7, r2
 801adb2:	f7fc fcd5 	bl	8017760 <ucdr_deserialize_array_uint8_t>
 801adb6:	4680      	mov	r8, r0
 801adb8:	1d39      	adds	r1, r7, #4
 801adba:	4630      	mov	r0, r6
 801adbc:	f7f3 fd7e 	bl	800e8bc <ucdr_deserialize_uint8_t>
 801adc0:	ea05 0508 	and.w	r5, r5, r8
 801adc4:	4604      	mov	r4, r0
 801adc6:	1d79      	adds	r1, r7, #5
 801adc8:	4630      	mov	r0, r6
 801adca:	402c      	ands	r4, r5
 801adcc:	f7f3 fd76 	bl	800e8bc <ucdr_deserialize_uint8_t>
 801add0:	4020      	ands	r0, r4
 801add2:	b2c0      	uxtb	r0, r0
 801add4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801add8 <uxr_serialize_INFO_Payload>:
 801add8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801addc:	2202      	movs	r2, #2
 801adde:	460c      	mov	r4, r1
 801ade0:	4605      	mov	r5, r0
 801ade2:	f7fc fc59 	bl	8017698 <ucdr_serialize_array_uint8_t>
 801ade6:	2202      	movs	r2, #2
 801ade8:	4680      	mov	r8, r0
 801adea:	4628      	mov	r0, r5
 801adec:	18a1      	adds	r1, r4, r2
 801adee:	f7fc fc53 	bl	8017698 <ucdr_serialize_array_uint8_t>
 801adf2:	4607      	mov	r7, r0
 801adf4:	7921      	ldrb	r1, [r4, #4]
 801adf6:	4628      	mov	r0, r5
 801adf8:	f7f3 fd4a 	bl	800e890 <ucdr_serialize_uint8_t>
 801adfc:	ea08 0807 	and.w	r8, r8, r7
 801ae00:	4606      	mov	r6, r0
 801ae02:	7961      	ldrb	r1, [r4, #5]
 801ae04:	4628      	mov	r0, r5
 801ae06:	ea06 0608 	and.w	r6, r6, r8
 801ae0a:	f7f3 fd41 	bl	800e890 <ucdr_serialize_uint8_t>
 801ae0e:	7a21      	ldrb	r1, [r4, #8]
 801ae10:	4030      	ands	r0, r6
 801ae12:	b2c7      	uxtb	r7, r0
 801ae14:	4628      	mov	r0, r5
 801ae16:	f7f3 fd0d 	bl	800e834 <ucdr_serialize_bool>
 801ae1a:	7a23      	ldrb	r3, [r4, #8]
 801ae1c:	4606      	mov	r6, r0
 801ae1e:	b96b      	cbnz	r3, 801ae3c <uxr_serialize_INFO_Payload+0x64>
 801ae20:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 801ae24:	4628      	mov	r0, r5
 801ae26:	f7f3 fd05 	bl	800e834 <ucdr_serialize_bool>
 801ae2a:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801ae2e:	4030      	ands	r0, r6
 801ae30:	b2c6      	uxtb	r6, r0
 801ae32:	b983      	cbnz	r3, 801ae56 <uxr_serialize_INFO_Payload+0x7e>
 801ae34:	ea06 0007 	and.w	r0, r6, r7
 801ae38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae3c:	7b21      	ldrb	r1, [r4, #12]
 801ae3e:	4628      	mov	r0, r5
 801ae40:	f7f3 fd26 	bl	800e890 <ucdr_serialize_uint8_t>
 801ae44:	b188      	cbz	r0, 801ae6a <uxr_serialize_INFO_Payload+0x92>
 801ae46:	f104 010c 	add.w	r1, r4, #12
 801ae4a:	4628      	mov	r0, r5
 801ae4c:	f7ff f9d8 	bl	801a200 <uxr_serialize_ObjectVariant.part.0>
 801ae50:	4030      	ands	r0, r6
 801ae52:	b2c6      	uxtb	r6, r0
 801ae54:	e7e4      	b.n	801ae20 <uxr_serialize_INFO_Payload+0x48>
 801ae56:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801ae5a:	4628      	mov	r0, r5
 801ae5c:	f7ff fdb8 	bl	801a9d0 <uxr_serialize_ActivityInfoVariant>
 801ae60:	4006      	ands	r6, r0
 801ae62:	ea06 0007 	and.w	r0, r6, r7
 801ae66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae6a:	4606      	mov	r6, r0
 801ae6c:	e7d8      	b.n	801ae20 <uxr_serialize_INFO_Payload+0x48>
 801ae6e:	bf00      	nop

0801ae70 <uxr_serialize_READ_DATA_Payload>:
 801ae70:	b570      	push	{r4, r5, r6, lr}
 801ae72:	2202      	movs	r2, #2
 801ae74:	4605      	mov	r5, r0
 801ae76:	460e      	mov	r6, r1
 801ae78:	f7fc fc0e 	bl	8017698 <ucdr_serialize_array_uint8_t>
 801ae7c:	2202      	movs	r2, #2
 801ae7e:	4604      	mov	r4, r0
 801ae80:	4628      	mov	r0, r5
 801ae82:	18b1      	adds	r1, r6, r2
 801ae84:	f7fc fc08 	bl	8017698 <ucdr_serialize_array_uint8_t>
 801ae88:	4603      	mov	r3, r0
 801ae8a:	1d31      	adds	r1, r6, #4
 801ae8c:	4628      	mov	r0, r5
 801ae8e:	401c      	ands	r4, r3
 801ae90:	f7ff fe5e 	bl	801ab50 <uxr_serialize_ReadSpecification>
 801ae94:	b2e4      	uxtb	r4, r4
 801ae96:	4020      	ands	r0, r4
 801ae98:	bd70      	pop	{r4, r5, r6, pc}
 801ae9a:	bf00      	nop

0801ae9c <uxr_serialize_WRITE_DATA_Payload_Data>:
 801ae9c:	b570      	push	{r4, r5, r6, lr}
 801ae9e:	2202      	movs	r2, #2
 801aea0:	4605      	mov	r5, r0
 801aea2:	460e      	mov	r6, r1
 801aea4:	f7fc fbf8 	bl	8017698 <ucdr_serialize_array_uint8_t>
 801aea8:	2202      	movs	r2, #2
 801aeaa:	4604      	mov	r4, r0
 801aeac:	4628      	mov	r0, r5
 801aeae:	18b1      	adds	r1, r6, r2
 801aeb0:	f7fc fbf2 	bl	8017698 <ucdr_serialize_array_uint8_t>
 801aeb4:	4020      	ands	r0, r4
 801aeb6:	b2c0      	uxtb	r0, r0
 801aeb8:	bd70      	pop	{r4, r5, r6, pc}
 801aeba:	bf00      	nop

0801aebc <uxr_serialize_ACKNACK_Payload>:
 801aebc:	b570      	push	{r4, r5, r6, lr}
 801aebe:	460c      	mov	r4, r1
 801aec0:	4605      	mov	r5, r0
 801aec2:	460e      	mov	r6, r1
 801aec4:	f834 1b02 	ldrh.w	r1, [r4], #2
 801aec8:	f7f3 fd0e 	bl	800e8e8 <ucdr_serialize_uint16_t>
 801aecc:	2202      	movs	r2, #2
 801aece:	4621      	mov	r1, r4
 801aed0:	4604      	mov	r4, r0
 801aed2:	4628      	mov	r0, r5
 801aed4:	f7fc fbe0 	bl	8017698 <ucdr_serialize_array_uint8_t>
 801aed8:	4603      	mov	r3, r0
 801aeda:	7931      	ldrb	r1, [r6, #4]
 801aedc:	4628      	mov	r0, r5
 801aede:	401c      	ands	r4, r3
 801aee0:	f7f3 fcd6 	bl	800e890 <ucdr_serialize_uint8_t>
 801aee4:	b2e4      	uxtb	r4, r4
 801aee6:	4020      	ands	r0, r4
 801aee8:	bd70      	pop	{r4, r5, r6, pc}
 801aeea:	bf00      	nop

0801aeec <uxr_deserialize_ACKNACK_Payload>:
 801aeec:	b570      	push	{r4, r5, r6, lr}
 801aeee:	460e      	mov	r6, r1
 801aef0:	4605      	mov	r5, r0
 801aef2:	f7f3 fdf9 	bl	800eae8 <ucdr_deserialize_uint16_t>
 801aef6:	2202      	movs	r2, #2
 801aef8:	4604      	mov	r4, r0
 801aefa:	4628      	mov	r0, r5
 801aefc:	18b1      	adds	r1, r6, r2
 801aefe:	f7fc fc2f 	bl	8017760 <ucdr_deserialize_array_uint8_t>
 801af02:	4603      	mov	r3, r0
 801af04:	1d31      	adds	r1, r6, #4
 801af06:	4628      	mov	r0, r5
 801af08:	401c      	ands	r4, r3
 801af0a:	f7f3 fcd7 	bl	800e8bc <ucdr_deserialize_uint8_t>
 801af0e:	b2e4      	uxtb	r4, r4
 801af10:	4020      	ands	r0, r4
 801af12:	bd70      	pop	{r4, r5, r6, pc}

0801af14 <uxr_serialize_HEARTBEAT_Payload>:
 801af14:	b570      	push	{r4, r5, r6, lr}
 801af16:	460d      	mov	r5, r1
 801af18:	4606      	mov	r6, r0
 801af1a:	8809      	ldrh	r1, [r1, #0]
 801af1c:	f7f3 fce4 	bl	800e8e8 <ucdr_serialize_uint16_t>
 801af20:	8869      	ldrh	r1, [r5, #2]
 801af22:	4604      	mov	r4, r0
 801af24:	4630      	mov	r0, r6
 801af26:	f7f3 fcdf 	bl	800e8e8 <ucdr_serialize_uint16_t>
 801af2a:	4603      	mov	r3, r0
 801af2c:	7929      	ldrb	r1, [r5, #4]
 801af2e:	4630      	mov	r0, r6
 801af30:	401c      	ands	r4, r3
 801af32:	f7f3 fcad 	bl	800e890 <ucdr_serialize_uint8_t>
 801af36:	b2e4      	uxtb	r4, r4
 801af38:	4020      	ands	r0, r4
 801af3a:	bd70      	pop	{r4, r5, r6, pc}

0801af3c <uxr_deserialize_HEARTBEAT_Payload>:
 801af3c:	b570      	push	{r4, r5, r6, lr}
 801af3e:	460e      	mov	r6, r1
 801af40:	4605      	mov	r5, r0
 801af42:	f7f3 fdd1 	bl	800eae8 <ucdr_deserialize_uint16_t>
 801af46:	4604      	mov	r4, r0
 801af48:	1cb1      	adds	r1, r6, #2
 801af4a:	4628      	mov	r0, r5
 801af4c:	f7f3 fdcc 	bl	800eae8 <ucdr_deserialize_uint16_t>
 801af50:	4603      	mov	r3, r0
 801af52:	1d31      	adds	r1, r6, #4
 801af54:	4628      	mov	r0, r5
 801af56:	401c      	ands	r4, r3
 801af58:	f7f3 fcb0 	bl	800e8bc <ucdr_deserialize_uint8_t>
 801af5c:	b2e4      	uxtb	r4, r4
 801af5e:	4020      	ands	r0, r4
 801af60:	bd70      	pop	{r4, r5, r6, pc}
 801af62:	bf00      	nop

0801af64 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801af64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af68:	460e      	mov	r6, r1
 801af6a:	4605      	mov	r5, r0
 801af6c:	f7f4 fb58 	bl	800f620 <ucdr_deserialize_int32_t>
 801af70:	4607      	mov	r7, r0
 801af72:	1d31      	adds	r1, r6, #4
 801af74:	4628      	mov	r0, r5
 801af76:	f7f3 ffd1 	bl	800ef1c <ucdr_deserialize_uint32_t>
 801af7a:	4680      	mov	r8, r0
 801af7c:	f106 0108 	add.w	r1, r6, #8
 801af80:	4628      	mov	r0, r5
 801af82:	f7f4 fb4d 	bl	800f620 <ucdr_deserialize_int32_t>
 801af86:	ea07 0708 	and.w	r7, r7, r8
 801af8a:	4604      	mov	r4, r0
 801af8c:	f106 010c 	add.w	r1, r6, #12
 801af90:	4628      	mov	r0, r5
 801af92:	403c      	ands	r4, r7
 801af94:	f7f3 ffc2 	bl	800ef1c <ucdr_deserialize_uint32_t>
 801af98:	f106 0110 	add.w	r1, r6, #16
 801af9c:	4004      	ands	r4, r0
 801af9e:	4628      	mov	r0, r5
 801afa0:	f7f4 fb3e 	bl	800f620 <ucdr_deserialize_int32_t>
 801afa4:	4603      	mov	r3, r0
 801afa6:	b2e4      	uxtb	r4, r4
 801afa8:	4628      	mov	r0, r5
 801afaa:	461d      	mov	r5, r3
 801afac:	f106 0114 	add.w	r1, r6, #20
 801afb0:	f7f3 ffb4 	bl	800ef1c <ucdr_deserialize_uint32_t>
 801afb4:	402c      	ands	r4, r5
 801afb6:	4020      	ands	r0, r4
 801afb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801afbc <uxr_serialize_SampleIdentity>:
 801afbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801afc0:	4604      	mov	r4, r0
 801afc2:	460d      	mov	r5, r1
 801afc4:	220c      	movs	r2, #12
 801afc6:	f7fc fb67 	bl	8017698 <ucdr_serialize_array_uint8_t>
 801afca:	2203      	movs	r2, #3
 801afcc:	f105 010c 	add.w	r1, r5, #12
 801afd0:	4607      	mov	r7, r0
 801afd2:	4620      	mov	r0, r4
 801afd4:	f7fc fb60 	bl	8017698 <ucdr_serialize_array_uint8_t>
 801afd8:	7be9      	ldrb	r1, [r5, #15]
 801afda:	4680      	mov	r8, r0
 801afdc:	4620      	mov	r0, r4
 801afde:	f7f3 fc57 	bl	800e890 <ucdr_serialize_uint8_t>
 801afe2:	6929      	ldr	r1, [r5, #16]
 801afe4:	4606      	mov	r6, r0
 801afe6:	4620      	mov	r0, r4
 801afe8:	f7f4 fa82 	bl	800f4f0 <ucdr_serialize_int32_t>
 801afec:	ea07 0708 	and.w	r7, r7, r8
 801aff0:	4603      	mov	r3, r0
 801aff2:	4620      	mov	r0, r4
 801aff4:	403e      	ands	r6, r7
 801aff6:	6969      	ldr	r1, [r5, #20]
 801aff8:	461c      	mov	r4, r3
 801affa:	f7f3 fe5f 	bl	800ecbc <ucdr_serialize_uint32_t>
 801affe:	4034      	ands	r4, r6
 801b000:	4020      	ands	r0, r4
 801b002:	b2c0      	uxtb	r0, r0
 801b004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b008 <uxr_deserialize_SampleIdentity>:
 801b008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b00c:	4604      	mov	r4, r0
 801b00e:	460d      	mov	r5, r1
 801b010:	220c      	movs	r2, #12
 801b012:	f7fc fba5 	bl	8017760 <ucdr_deserialize_array_uint8_t>
 801b016:	2203      	movs	r2, #3
 801b018:	f105 010c 	add.w	r1, r5, #12
 801b01c:	4607      	mov	r7, r0
 801b01e:	4620      	mov	r0, r4
 801b020:	f7fc fb9e 	bl	8017760 <ucdr_deserialize_array_uint8_t>
 801b024:	f105 010f 	add.w	r1, r5, #15
 801b028:	4680      	mov	r8, r0
 801b02a:	4620      	mov	r0, r4
 801b02c:	f7f3 fc46 	bl	800e8bc <ucdr_deserialize_uint8_t>
 801b030:	f105 0110 	add.w	r1, r5, #16
 801b034:	4606      	mov	r6, r0
 801b036:	4620      	mov	r0, r4
 801b038:	f7f4 faf2 	bl	800f620 <ucdr_deserialize_int32_t>
 801b03c:	ea07 0708 	and.w	r7, r7, r8
 801b040:	4603      	mov	r3, r0
 801b042:	4620      	mov	r0, r4
 801b044:	403e      	ands	r6, r7
 801b046:	f105 0114 	add.w	r1, r5, #20
 801b04a:	461c      	mov	r4, r3
 801b04c:	f7f3 ff66 	bl	800ef1c <ucdr_deserialize_uint32_t>
 801b050:	4034      	ands	r4, r6
 801b052:	4020      	ands	r0, r4
 801b054:	b2c0      	uxtb	r0, r0
 801b056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b05a:	bf00      	nop

0801b05c <rcl_convert_rmw_ret_to_rcl_ret>:
 801b05c:	280b      	cmp	r0, #11
 801b05e:	dc0d      	bgt.n	801b07c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801b060:	2800      	cmp	r0, #0
 801b062:	db09      	blt.n	801b078 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801b064:	280b      	cmp	r0, #11
 801b066:	d807      	bhi.n	801b078 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801b068:	e8df f000 	tbb	[pc, r0]
 801b06c:	07060607 	.word	0x07060607
 801b070:	06060606 	.word	0x06060606
 801b074:	07070606 	.word	0x07070606
 801b078:	2001      	movs	r0, #1
 801b07a:	4770      	bx	lr
 801b07c:	28cb      	cmp	r0, #203	@ 0xcb
 801b07e:	bf18      	it	ne
 801b080:	2001      	movne	r0, #1
 801b082:	4770      	bx	lr

0801b084 <rcl_get_default_domain_id>:
 801b084:	b530      	push	{r4, r5, lr}
 801b086:	2300      	movs	r3, #0
 801b088:	b083      	sub	sp, #12
 801b08a:	9300      	str	r3, [sp, #0]
 801b08c:	b1d0      	cbz	r0, 801b0c4 <rcl_get_default_domain_id+0x40>
 801b08e:	4604      	mov	r4, r0
 801b090:	4669      	mov	r1, sp
 801b092:	4815      	ldr	r0, [pc, #84]	@ (801b0e8 <rcl_get_default_domain_id+0x64>)
 801b094:	f7f9 fd2c 	bl	8014af0 <rcutils_get_env>
 801b098:	4602      	mov	r2, r0
 801b09a:	b110      	cbz	r0, 801b0a2 <rcl_get_default_domain_id+0x1e>
 801b09c:	2001      	movs	r0, #1
 801b09e:	b003      	add	sp, #12
 801b0a0:	bd30      	pop	{r4, r5, pc}
 801b0a2:	9b00      	ldr	r3, [sp, #0]
 801b0a4:	b18b      	cbz	r3, 801b0ca <rcl_get_default_domain_id+0x46>
 801b0a6:	7818      	ldrb	r0, [r3, #0]
 801b0a8:	2800      	cmp	r0, #0
 801b0aa:	d0f8      	beq.n	801b09e <rcl_get_default_domain_id+0x1a>
 801b0ac:	a901      	add	r1, sp, #4
 801b0ae:	4618      	mov	r0, r3
 801b0b0:	9201      	str	r2, [sp, #4]
 801b0b2:	f001 fd6b 	bl	801cb8c <strtoul>
 801b0b6:	4605      	mov	r5, r0
 801b0b8:	b150      	cbz	r0, 801b0d0 <rcl_get_default_domain_id+0x4c>
 801b0ba:	1c43      	adds	r3, r0, #1
 801b0bc:	d00d      	beq.n	801b0da <rcl_get_default_domain_id+0x56>
 801b0be:	2000      	movs	r0, #0
 801b0c0:	6025      	str	r5, [r4, #0]
 801b0c2:	e7ec      	b.n	801b09e <rcl_get_default_domain_id+0x1a>
 801b0c4:	200b      	movs	r0, #11
 801b0c6:	b003      	add	sp, #12
 801b0c8:	bd30      	pop	{r4, r5, pc}
 801b0ca:	4618      	mov	r0, r3
 801b0cc:	b003      	add	sp, #12
 801b0ce:	bd30      	pop	{r4, r5, pc}
 801b0d0:	9b01      	ldr	r3, [sp, #4]
 801b0d2:	781b      	ldrb	r3, [r3, #0]
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	d0f2      	beq.n	801b0be <rcl_get_default_domain_id+0x3a>
 801b0d8:	e7e0      	b.n	801b09c <rcl_get_default_domain_id+0x18>
 801b0da:	f002 f8d5 	bl	801d288 <__errno>
 801b0de:	6803      	ldr	r3, [r0, #0]
 801b0e0:	2b22      	cmp	r3, #34	@ 0x22
 801b0e2:	d1ec      	bne.n	801b0be <rcl_get_default_domain_id+0x3a>
 801b0e4:	e7da      	b.n	801b09c <rcl_get_default_domain_id+0x18>
 801b0e6:	bf00      	nop
 801b0e8:	08020524 	.word	0x08020524

0801b0ec <rcl_expand_topic_name>:
 801b0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0f0:	b08d      	sub	sp, #52	@ 0x34
 801b0f2:	4698      	mov	r8, r3
 801b0f4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801b0f6:	9207      	str	r2, [sp, #28]
 801b0f8:	2b00      	cmp	r3, #0
 801b0fa:	bf18      	it	ne
 801b0fc:	f1b8 0f00 	cmpne.w	r8, #0
 801b100:	bf0c      	ite	eq
 801b102:	2301      	moveq	r3, #1
 801b104:	2300      	movne	r3, #0
 801b106:	2a00      	cmp	r2, #0
 801b108:	bf08      	it	eq
 801b10a:	f043 0301 	orreq.w	r3, r3, #1
 801b10e:	2900      	cmp	r1, #0
 801b110:	bf08      	it	eq
 801b112:	f043 0301 	orreq.w	r3, r3, #1
 801b116:	2b00      	cmp	r3, #0
 801b118:	d13d      	bne.n	801b196 <rcl_expand_topic_name+0xaa>
 801b11a:	fab0 f280 	clz	r2, r0
 801b11e:	4604      	mov	r4, r0
 801b120:	0952      	lsrs	r2, r2, #5
 801b122:	2800      	cmp	r0, #0
 801b124:	d037      	beq.n	801b196 <rcl_expand_topic_name+0xaa>
 801b126:	460f      	mov	r7, r1
 801b128:	a90b      	add	r1, sp, #44	@ 0x2c
 801b12a:	f000 f9f3 	bl	801b514 <rcl_validate_topic_name>
 801b12e:	4605      	mov	r5, r0
 801b130:	bb68      	cbnz	r0, 801b18e <rcl_expand_topic_name+0xa2>
 801b132:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b134:	2b00      	cmp	r3, #0
 801b136:	d137      	bne.n	801b1a8 <rcl_expand_topic_name+0xbc>
 801b138:	4602      	mov	r2, r0
 801b13a:	a90b      	add	r1, sp, #44	@ 0x2c
 801b13c:	4638      	mov	r0, r7
 801b13e:	f7fa f8e9 	bl	8015314 <rmw_validate_node_name>
 801b142:	bb68      	cbnz	r0, 801b1a0 <rcl_expand_topic_name+0xb4>
 801b144:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b146:	2b00      	cmp	r3, #0
 801b148:	d133      	bne.n	801b1b2 <rcl_expand_topic_name+0xc6>
 801b14a:	462a      	mov	r2, r5
 801b14c:	a90b      	add	r1, sp, #44	@ 0x2c
 801b14e:	9807      	ldr	r0, [sp, #28]
 801b150:	f7fa f8c2 	bl	80152d8 <rmw_validate_namespace>
 801b154:	bb20      	cbnz	r0, 801b1a0 <rcl_expand_topic_name+0xb4>
 801b156:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801b158:	2d00      	cmp	r5, #0
 801b15a:	f040 80a2 	bne.w	801b2a2 <rcl_expand_topic_name+0x1b6>
 801b15e:	217b      	movs	r1, #123	@ 0x7b
 801b160:	4620      	mov	r0, r4
 801b162:	f001 ffaf 	bl	801d0c4 <strchr>
 801b166:	7823      	ldrb	r3, [r4, #0]
 801b168:	4681      	mov	r9, r0
 801b16a:	bb20      	cbnz	r0, 801b1b6 <rcl_expand_topic_name+0xca>
 801b16c:	2b2f      	cmp	r3, #47	@ 0x2f
 801b16e:	d122      	bne.n	801b1b6 <rcl_expand_topic_name+0xca>
 801b170:	ab19      	add	r3, sp, #100	@ 0x64
 801b172:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b176:	ab16      	add	r3, sp, #88	@ 0x58
 801b178:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b17c:	4620      	mov	r0, r4
 801b17e:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b180:	f7f9 fe18 	bl	8014db4 <rcutils_strdup>
 801b184:	2800      	cmp	r0, #0
 801b186:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801b188:	bf08      	it	eq
 801b18a:	250a      	moveq	r5, #10
 801b18c:	6018      	str	r0, [r3, #0]
 801b18e:	4628      	mov	r0, r5
 801b190:	b00d      	add	sp, #52	@ 0x34
 801b192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b196:	250b      	movs	r5, #11
 801b198:	4628      	mov	r0, r5
 801b19a:	b00d      	add	sp, #52	@ 0x34
 801b19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1a0:	f7ff ff5c 	bl	801b05c <rcl_convert_rmw_ret_to_rcl_ret>
 801b1a4:	4605      	mov	r5, r0
 801b1a6:	e7f2      	b.n	801b18e <rcl_expand_topic_name+0xa2>
 801b1a8:	2567      	movs	r5, #103	@ 0x67
 801b1aa:	4628      	mov	r0, r5
 801b1ac:	b00d      	add	sp, #52	@ 0x34
 801b1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1b2:	25c9      	movs	r5, #201	@ 0xc9
 801b1b4:	e7eb      	b.n	801b18e <rcl_expand_topic_name+0xa2>
 801b1b6:	2b7e      	cmp	r3, #126	@ 0x7e
 801b1b8:	d075      	beq.n	801b2a6 <rcl_expand_topic_name+0x1ba>
 801b1ba:	f1b9 0f00 	cmp.w	r9, #0
 801b1be:	f000 80c2 	beq.w	801b346 <rcl_expand_topic_name+0x25a>
 801b1c2:	2300      	movs	r3, #0
 801b1c4:	46a2      	mov	sl, r4
 801b1c6:	461e      	mov	r6, r3
 801b1c8:	9508      	str	r5, [sp, #32]
 801b1ca:	4655      	mov	r5, sl
 801b1cc:	9409      	str	r4, [sp, #36]	@ 0x24
 801b1ce:	46b2      	mov	sl, r6
 801b1d0:	464c      	mov	r4, r9
 801b1d2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801b1d6:	2c00      	cmp	r4, #0
 801b1d8:	f000 80ae 	beq.w	801b338 <rcl_expand_topic_name+0x24c>
 801b1dc:	217d      	movs	r1, #125	@ 0x7d
 801b1de:	4628      	mov	r0, r5
 801b1e0:	f001 ff70 	bl	801d0c4 <strchr>
 801b1e4:	eba0 0904 	sub.w	r9, r0, r4
 801b1e8:	4621      	mov	r1, r4
 801b1ea:	4869      	ldr	r0, [pc, #420]	@ (801b390 <rcl_expand_topic_name+0x2a4>)
 801b1ec:	f109 0601 	add.w	r6, r9, #1
 801b1f0:	4632      	mov	r2, r6
 801b1f2:	f001 ff74 	bl	801d0de <strncmp>
 801b1f6:	2800      	cmp	r0, #0
 801b1f8:	d051      	beq.n	801b29e <rcl_expand_topic_name+0x1b2>
 801b1fa:	4632      	mov	r2, r6
 801b1fc:	4621      	mov	r1, r4
 801b1fe:	4865      	ldr	r0, [pc, #404]	@ (801b394 <rcl_expand_topic_name+0x2a8>)
 801b200:	f001 ff6d 	bl	801d0de <strncmp>
 801b204:	b128      	cbz	r0, 801b212 <rcl_expand_topic_name+0x126>
 801b206:	4632      	mov	r2, r6
 801b208:	4621      	mov	r1, r4
 801b20a:	4863      	ldr	r0, [pc, #396]	@ (801b398 <rcl_expand_topic_name+0x2ac>)
 801b20c:	f001 ff67 	bl	801d0de <strncmp>
 801b210:	bb38      	cbnz	r0, 801b262 <rcl_expand_topic_name+0x176>
 801b212:	46d9      	mov	r9, fp
 801b214:	ab18      	add	r3, sp, #96	@ 0x60
 801b216:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b21a:	ab16      	add	r3, sp, #88	@ 0x58
 801b21c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b220:	4620      	mov	r0, r4
 801b222:	4631      	mov	r1, r6
 801b224:	cb0c      	ldmia	r3, {r2, r3}
 801b226:	f7f9 fde7 	bl	8014df8 <rcutils_strndup>
 801b22a:	4604      	mov	r4, r0
 801b22c:	2800      	cmp	r0, #0
 801b22e:	f000 80a3 	beq.w	801b378 <rcl_expand_topic_name+0x28c>
 801b232:	464a      	mov	r2, r9
 801b234:	4628      	mov	r0, r5
 801b236:	ab16      	add	r3, sp, #88	@ 0x58
 801b238:	4621      	mov	r1, r4
 801b23a:	f7f9 fcbb 	bl	8014bb4 <rcutils_repl_str>
 801b23e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801b240:	4605      	mov	r5, r0
 801b242:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801b244:	4620      	mov	r0, r4
 801b246:	4798      	blx	r3
 801b248:	4650      	mov	r0, sl
 801b24a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801b24c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801b24e:	4798      	blx	r3
 801b250:	2d00      	cmp	r5, #0
 801b252:	d06c      	beq.n	801b32e <rcl_expand_topic_name+0x242>
 801b254:	217b      	movs	r1, #123	@ 0x7b
 801b256:	4628      	mov	r0, r5
 801b258:	f001 ff34 	bl	801d0c4 <strchr>
 801b25c:	46aa      	mov	sl, r5
 801b25e:	4604      	mov	r4, r0
 801b260:	e7b9      	b.n	801b1d6 <rcl_expand_topic_name+0xea>
 801b262:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801b266:	1c61      	adds	r1, r4, #1
 801b268:	4640      	mov	r0, r8
 801b26a:	f7f9 fedd 	bl	8015028 <rcutils_string_map_getn>
 801b26e:	4681      	mov	r9, r0
 801b270:	2800      	cmp	r0, #0
 801b272:	d1cf      	bne.n	801b214 <rcl_expand_topic_name+0x128>
 801b274:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801b276:	aa18      	add	r2, sp, #96	@ 0x60
 801b278:	2569      	movs	r5, #105	@ 0x69
 801b27a:	6018      	str	r0, [r3, #0]
 801b27c:	ab16      	add	r3, sp, #88	@ 0x58
 801b27e:	ca07      	ldmia	r2, {r0, r1, r2}
 801b280:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b284:	4631      	mov	r1, r6
 801b286:	4620      	mov	r0, r4
 801b288:	cb0c      	ldmia	r3, {r2, r3}
 801b28a:	f7f9 fdb5 	bl	8014df8 <rcutils_strndup>
 801b28e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801b290:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801b292:	4798      	blx	r3
 801b294:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801b296:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801b298:	4650      	mov	r0, sl
 801b29a:	4798      	blx	r3
 801b29c:	e777      	b.n	801b18e <rcl_expand_topic_name+0xa2>
 801b29e:	46b9      	mov	r9, r7
 801b2a0:	e7b8      	b.n	801b214 <rcl_expand_topic_name+0x128>
 801b2a2:	25ca      	movs	r5, #202	@ 0xca
 801b2a4:	e773      	b.n	801b18e <rcl_expand_topic_name+0xa2>
 801b2a6:	9e07      	ldr	r6, [sp, #28]
 801b2a8:	4630      	mov	r0, r6
 801b2aa:	f7e5 f823 	bl	80002f4 <strlen>
 801b2ae:	4a3b      	ldr	r2, [pc, #236]	@ (801b39c <rcl_expand_topic_name+0x2b0>)
 801b2b0:	4b3b      	ldr	r3, [pc, #236]	@ (801b3a0 <rcl_expand_topic_name+0x2b4>)
 801b2b2:	9603      	str	r6, [sp, #12]
 801b2b4:	2801      	cmp	r0, #1
 801b2b6:	bf18      	it	ne
 801b2b8:	4613      	movne	r3, r2
 801b2ba:	9704      	str	r7, [sp, #16]
 801b2bc:	9302      	str	r3, [sp, #8]
 801b2be:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801b2c0:	9300      	str	r3, [sp, #0]
 801b2c2:	1c63      	adds	r3, r4, #1
 801b2c4:	9305      	str	r3, [sp, #20]
 801b2c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b2ca:	9301      	str	r3, [sp, #4]
 801b2cc:	ab16      	add	r3, sp, #88	@ 0x58
 801b2ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b2d0:	f7f9 fc36 	bl	8014b40 <rcutils_format_string_limit>
 801b2d4:	4606      	mov	r6, r0
 801b2d6:	b350      	cbz	r0, 801b32e <rcl_expand_topic_name+0x242>
 801b2d8:	f1b9 0f00 	cmp.w	r9, #0
 801b2dc:	d005      	beq.n	801b2ea <rcl_expand_topic_name+0x1fe>
 801b2de:	217b      	movs	r1, #123	@ 0x7b
 801b2e0:	46b2      	mov	sl, r6
 801b2e2:	f001 feef 	bl	801d0c4 <strchr>
 801b2e6:	4681      	mov	r9, r0
 801b2e8:	e76e      	b.n	801b1c8 <rcl_expand_topic_name+0xdc>
 801b2ea:	7833      	ldrb	r3, [r6, #0]
 801b2ec:	2b2f      	cmp	r3, #47	@ 0x2f
 801b2ee:	d01b      	beq.n	801b328 <rcl_expand_topic_name+0x23c>
 801b2f0:	9c07      	ldr	r4, [sp, #28]
 801b2f2:	4620      	mov	r0, r4
 801b2f4:	f7e4 fffe 	bl	80002f4 <strlen>
 801b2f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b2fc:	4a29      	ldr	r2, [pc, #164]	@ (801b3a4 <rcl_expand_topic_name+0x2b8>)
 801b2fe:	9301      	str	r3, [sp, #4]
 801b300:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801b302:	9604      	str	r6, [sp, #16]
 801b304:	9300      	str	r3, [sp, #0]
 801b306:	4b28      	ldr	r3, [pc, #160]	@ (801b3a8 <rcl_expand_topic_name+0x2bc>)
 801b308:	9403      	str	r4, [sp, #12]
 801b30a:	2801      	cmp	r0, #1
 801b30c:	bf18      	it	ne
 801b30e:	4613      	movne	r3, r2
 801b310:	9302      	str	r3, [sp, #8]
 801b312:	ab16      	add	r3, sp, #88	@ 0x58
 801b314:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b316:	f7f9 fc13 	bl	8014b40 <rcutils_format_string_limit>
 801b31a:	4603      	mov	r3, r0
 801b31c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801b31e:	4630      	mov	r0, r6
 801b320:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801b322:	461e      	mov	r6, r3
 801b324:	4790      	blx	r2
 801b326:	b116      	cbz	r6, 801b32e <rcl_expand_topic_name+0x242>
 801b328:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801b32a:	601e      	str	r6, [r3, #0]
 801b32c:	e72f      	b.n	801b18e <rcl_expand_topic_name+0xa2>
 801b32e:	2300      	movs	r3, #0
 801b330:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801b332:	250a      	movs	r5, #10
 801b334:	6013      	str	r3, [r2, #0]
 801b336:	e72a      	b.n	801b18e <rcl_expand_topic_name+0xa2>
 801b338:	4653      	mov	r3, sl
 801b33a:	4656      	mov	r6, sl
 801b33c:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801b340:	2b00      	cmp	r3, #0
 801b342:	d1d2      	bne.n	801b2ea <rcl_expand_topic_name+0x1fe>
 801b344:	7823      	ldrb	r3, [r4, #0]
 801b346:	2b2f      	cmp	r3, #47	@ 0x2f
 801b348:	d01e      	beq.n	801b388 <rcl_expand_topic_name+0x29c>
 801b34a:	9e07      	ldr	r6, [sp, #28]
 801b34c:	4630      	mov	r0, r6
 801b34e:	f7e4 ffd1 	bl	80002f4 <strlen>
 801b352:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801b354:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b358:	9603      	str	r6, [sp, #12]
 801b35a:	9404      	str	r4, [sp, #16]
 801b35c:	e9cd 2300 	strd	r2, r3, [sp]
 801b360:	4a10      	ldr	r2, [pc, #64]	@ (801b3a4 <rcl_expand_topic_name+0x2b8>)
 801b362:	4b11      	ldr	r3, [pc, #68]	@ (801b3a8 <rcl_expand_topic_name+0x2bc>)
 801b364:	2801      	cmp	r0, #1
 801b366:	bf18      	it	ne
 801b368:	4613      	movne	r3, r2
 801b36a:	9302      	str	r3, [sp, #8]
 801b36c:	ab16      	add	r3, sp, #88	@ 0x58
 801b36e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b370:	f7f9 fbe6 	bl	8014b40 <rcutils_format_string_limit>
 801b374:	4606      	mov	r6, r0
 801b376:	e7d6      	b.n	801b326 <rcl_expand_topic_name+0x23a>
 801b378:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 801b37c:	4650      	mov	r0, sl
 801b37e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801b380:	6014      	str	r4, [r2, #0]
 801b382:	250a      	movs	r5, #10
 801b384:	4798      	blx	r3
 801b386:	e702      	b.n	801b18e <rcl_expand_topic_name+0xa2>
 801b388:	2300      	movs	r3, #0
 801b38a:	461e      	mov	r6, r3
 801b38c:	e7cc      	b.n	801b328 <rcl_expand_topic_name+0x23c>
 801b38e:	bf00      	nop
 801b390:	0802053c 	.word	0x0802053c
 801b394:	08020544 	.word	0x08020544
 801b398:	0802054c 	.word	0x0802054c
 801b39c:	08020534 	.word	0x08020534
 801b3a0:	08020248 	.word	0x08020248
 801b3a4:	0801fc10 	.word	0x0801fc10
 801b3a8:	0801fc08 	.word	0x0801fc08

0801b3ac <rcl_get_default_topic_name_substitutions>:
 801b3ac:	2800      	cmp	r0, #0
 801b3ae:	bf0c      	ite	eq
 801b3b0:	200b      	moveq	r0, #11
 801b3b2:	2000      	movne	r0, #0
 801b3b4:	4770      	bx	lr
 801b3b6:	bf00      	nop

0801b3b8 <rcl_get_zero_initialized_guard_condition>:
 801b3b8:	4a03      	ldr	r2, [pc, #12]	@ (801b3c8 <rcl_get_zero_initialized_guard_condition+0x10>)
 801b3ba:	4603      	mov	r3, r0
 801b3bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b3c0:	e883 0003 	stmia.w	r3, {r0, r1}
 801b3c4:	4618      	mov	r0, r3
 801b3c6:	4770      	bx	lr
 801b3c8:	08020558 	.word	0x08020558

0801b3cc <rcl_guard_condition_init_from_rmw>:
 801b3cc:	b082      	sub	sp, #8
 801b3ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b3d2:	b086      	sub	sp, #24
 801b3d4:	4604      	mov	r4, r0
 801b3d6:	460e      	mov	r6, r1
 801b3d8:	4615      	mov	r5, r2
 801b3da:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801b3de:	f10d 0e04 	add.w	lr, sp, #4
 801b3e2:	f84c 3f04 	str.w	r3, [ip, #4]!
 801b3e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b3ea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b3ee:	f8dc 3000 	ldr.w	r3, [ip]
 801b3f2:	a801      	add	r0, sp, #4
 801b3f4:	f8ce 3000 	str.w	r3, [lr]
 801b3f8:	f7f5 fd1a 	bl	8010e30 <rcutils_allocator_is_valid>
 801b3fc:	f080 0301 	eor.w	r3, r0, #1
 801b400:	b2db      	uxtb	r3, r3
 801b402:	bb3b      	cbnz	r3, 801b454 <rcl_guard_condition_init_from_rmw+0x88>
 801b404:	b334      	cbz	r4, 801b454 <rcl_guard_condition_init_from_rmw+0x88>
 801b406:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801b40a:	f1b8 0f00 	cmp.w	r8, #0
 801b40e:	d11a      	bne.n	801b446 <rcl_guard_condition_init_from_rmw+0x7a>
 801b410:	b305      	cbz	r5, 801b454 <rcl_guard_condition_init_from_rmw+0x88>
 801b412:	4628      	mov	r0, r5
 801b414:	f7f6 fbd8 	bl	8011bc8 <rcl_context_is_valid>
 801b418:	b1f0      	cbz	r0, 801b458 <rcl_guard_condition_init_from_rmw+0x8c>
 801b41a:	9b01      	ldr	r3, [sp, #4]
 801b41c:	201c      	movs	r0, #28
 801b41e:	9905      	ldr	r1, [sp, #20]
 801b420:	4798      	blx	r3
 801b422:	4607      	mov	r7, r0
 801b424:	6060      	str	r0, [r4, #4]
 801b426:	b320      	cbz	r0, 801b472 <rcl_guard_condition_init_from_rmw+0xa6>
 801b428:	b1c6      	cbz	r6, 801b45c <rcl_guard_condition_init_from_rmw+0x90>
 801b42a:	6006      	str	r6, [r0, #0]
 801b42c:	f880 8004 	strb.w	r8, [r0, #4]
 801b430:	ac01      	add	r4, sp, #4
 801b432:	f107 0c08 	add.w	ip, r7, #8
 801b436:	2500      	movs	r5, #0
 801b438:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b43a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b43e:	6823      	ldr	r3, [r4, #0]
 801b440:	f8cc 3000 	str.w	r3, [ip]
 801b444:	e000      	b.n	801b448 <rcl_guard_condition_init_from_rmw+0x7c>
 801b446:	2564      	movs	r5, #100	@ 0x64
 801b448:	4628      	mov	r0, r5
 801b44a:	b006      	add	sp, #24
 801b44c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b450:	b002      	add	sp, #8
 801b452:	4770      	bx	lr
 801b454:	250b      	movs	r5, #11
 801b456:	e7f7      	b.n	801b448 <rcl_guard_condition_init_from_rmw+0x7c>
 801b458:	2565      	movs	r5, #101	@ 0x65
 801b45a:	e7f5      	b.n	801b448 <rcl_guard_condition_init_from_rmw+0x7c>
 801b45c:	6828      	ldr	r0, [r5, #0]
 801b45e:	3028      	adds	r0, #40	@ 0x28
 801b460:	f000 fada 	bl	801ba18 <rmw_create_guard_condition>
 801b464:	6038      	str	r0, [r7, #0]
 801b466:	6867      	ldr	r7, [r4, #4]
 801b468:	683e      	ldr	r6, [r7, #0]
 801b46a:	b126      	cbz	r6, 801b476 <rcl_guard_condition_init_from_rmw+0xaa>
 801b46c:	2301      	movs	r3, #1
 801b46e:	713b      	strb	r3, [r7, #4]
 801b470:	e7de      	b.n	801b430 <rcl_guard_condition_init_from_rmw+0x64>
 801b472:	250a      	movs	r5, #10
 801b474:	e7e8      	b.n	801b448 <rcl_guard_condition_init_from_rmw+0x7c>
 801b476:	9b02      	ldr	r3, [sp, #8]
 801b478:	4638      	mov	r0, r7
 801b47a:	9905      	ldr	r1, [sp, #20]
 801b47c:	2501      	movs	r5, #1
 801b47e:	4798      	blx	r3
 801b480:	6066      	str	r6, [r4, #4]
 801b482:	e7e1      	b.n	801b448 <rcl_guard_condition_init_from_rmw+0x7c>

0801b484 <rcl_guard_condition_fini>:
 801b484:	b570      	push	{r4, r5, r6, lr}
 801b486:	b082      	sub	sp, #8
 801b488:	b1f0      	cbz	r0, 801b4c8 <rcl_guard_condition_fini+0x44>
 801b48a:	6843      	ldr	r3, [r0, #4]
 801b48c:	4604      	mov	r4, r0
 801b48e:	b163      	cbz	r3, 801b4aa <rcl_guard_condition_fini+0x26>
 801b490:	6818      	ldr	r0, [r3, #0]
 801b492:	68de      	ldr	r6, [r3, #12]
 801b494:	6999      	ldr	r1, [r3, #24]
 801b496:	b160      	cbz	r0, 801b4b2 <rcl_guard_condition_fini+0x2e>
 801b498:	791d      	ldrb	r5, [r3, #4]
 801b49a:	b965      	cbnz	r5, 801b4b6 <rcl_guard_condition_fini+0x32>
 801b49c:	4618      	mov	r0, r3
 801b49e:	47b0      	blx	r6
 801b4a0:	2300      	movs	r3, #0
 801b4a2:	4628      	mov	r0, r5
 801b4a4:	6063      	str	r3, [r4, #4]
 801b4a6:	b002      	add	sp, #8
 801b4a8:	bd70      	pop	{r4, r5, r6, pc}
 801b4aa:	461d      	mov	r5, r3
 801b4ac:	4628      	mov	r0, r5
 801b4ae:	b002      	add	sp, #8
 801b4b0:	bd70      	pop	{r4, r5, r6, pc}
 801b4b2:	4605      	mov	r5, r0
 801b4b4:	e7f2      	b.n	801b49c <rcl_guard_condition_fini+0x18>
 801b4b6:	9101      	str	r1, [sp, #4]
 801b4b8:	f000 fac4 	bl	801ba44 <rmw_destroy_guard_condition>
 801b4bc:	1e05      	subs	r5, r0, #0
 801b4be:	6863      	ldr	r3, [r4, #4]
 801b4c0:	9901      	ldr	r1, [sp, #4]
 801b4c2:	bf18      	it	ne
 801b4c4:	2501      	movne	r5, #1
 801b4c6:	e7e9      	b.n	801b49c <rcl_guard_condition_fini+0x18>
 801b4c8:	250b      	movs	r5, #11
 801b4ca:	4628      	mov	r0, r5
 801b4cc:	b002      	add	sp, #8
 801b4ce:	bd70      	pop	{r4, r5, r6, pc}

0801b4d0 <rcl_guard_condition_get_default_options>:
 801b4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b4d2:	b087      	sub	sp, #28
 801b4d4:	4606      	mov	r6, r0
 801b4d6:	4c0b      	ldr	r4, [pc, #44]	@ (801b504 <rcl_guard_condition_get_default_options+0x34>)
 801b4d8:	4668      	mov	r0, sp
 801b4da:	f7f5 fc9b 	bl	8010e14 <rcutils_get_default_allocator>
 801b4de:	46ee      	mov	lr, sp
 801b4e0:	46a4      	mov	ip, r4
 801b4e2:	4625      	mov	r5, r4
 801b4e4:	4634      	mov	r4, r6
 801b4e6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b4ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b4ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b4f0:	f8de 7000 	ldr.w	r7, [lr]
 801b4f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b4f6:	4630      	mov	r0, r6
 801b4f8:	f8cc 7000 	str.w	r7, [ip]
 801b4fc:	6027      	str	r7, [r4, #0]
 801b4fe:	b007      	add	sp, #28
 801b500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b502:	bf00      	nop
 801b504:	240692f0 	.word	0x240692f0

0801b508 <rcl_guard_condition_get_rmw_handle>:
 801b508:	b110      	cbz	r0, 801b510 <rcl_guard_condition_get_rmw_handle+0x8>
 801b50a:	6840      	ldr	r0, [r0, #4]
 801b50c:	b100      	cbz	r0, 801b510 <rcl_guard_condition_get_rmw_handle+0x8>
 801b50e:	6800      	ldr	r0, [r0, #0]
 801b510:	4770      	bx	lr
 801b512:	bf00      	nop

0801b514 <rcl_validate_topic_name>:
 801b514:	2800      	cmp	r0, #0
 801b516:	f000 8089 	beq.w	801b62c <rcl_validate_topic_name+0x118>
 801b51a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b51e:	460e      	mov	r6, r1
 801b520:	2900      	cmp	r1, #0
 801b522:	f000 8085 	beq.w	801b630 <rcl_validate_topic_name+0x11c>
 801b526:	4604      	mov	r4, r0
 801b528:	4617      	mov	r7, r2
 801b52a:	f7e4 fee3 	bl	80002f4 <strlen>
 801b52e:	b1b0      	cbz	r0, 801b55e <rcl_validate_topic_name+0x4a>
 801b530:	f894 e000 	ldrb.w	lr, [r4]
 801b534:	f8df c160 	ldr.w	ip, [pc, #352]	@ 801b698 <rcl_validate_topic_name+0x184>
 801b538:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801b53c:	f013 0304 	ands.w	r3, r3, #4
 801b540:	d139      	bne.n	801b5b6 <rcl_validate_topic_name+0xa2>
 801b542:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801b546:	f814 2008 	ldrb.w	r2, [r4, r8]
 801b54a:	2a2f      	cmp	r2, #47	@ 0x2f
 801b54c:	d10f      	bne.n	801b56e <rcl_validate_topic_name+0x5a>
 801b54e:	2202      	movs	r2, #2
 801b550:	6032      	str	r2, [r6, #0]
 801b552:	b3a7      	cbz	r7, 801b5be <rcl_validate_topic_name+0xaa>
 801b554:	4618      	mov	r0, r3
 801b556:	f8c7 8000 	str.w	r8, [r7]
 801b55a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b55e:	2301      	movs	r3, #1
 801b560:	6033      	str	r3, [r6, #0]
 801b562:	b367      	cbz	r7, 801b5be <rcl_validate_topic_name+0xaa>
 801b564:	2300      	movs	r3, #0
 801b566:	4618      	mov	r0, r3
 801b568:	603b      	str	r3, [r7, #0]
 801b56a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b56e:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 801b572:	461d      	mov	r5, r3
 801b574:	4619      	mov	r1, r3
 801b576:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801b57a:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 801b57e:	f1b9 0f09 	cmp.w	r9, #9
 801b582:	d91f      	bls.n	801b5c4 <rcl_validate_topic_name+0xb0>
 801b584:	f022 0920 	bic.w	r9, r2, #32
 801b588:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 801b58c:	f1b9 0f19 	cmp.w	r9, #25
 801b590:	d918      	bls.n	801b5c4 <rcl_validate_topic_name+0xb0>
 801b592:	2a5f      	cmp	r2, #95	@ 0x5f
 801b594:	d024      	beq.n	801b5e0 <rcl_validate_topic_name+0xcc>
 801b596:	2a2f      	cmp	r2, #47	@ 0x2f
 801b598:	d058      	beq.n	801b64c <rcl_validate_topic_name+0x138>
 801b59a:	2a7e      	cmp	r2, #126	@ 0x7e
 801b59c:	d04a      	beq.n	801b634 <rcl_validate_topic_name+0x120>
 801b59e:	2a7b      	cmp	r2, #123	@ 0x7b
 801b5a0:	d05b      	beq.n	801b65a <rcl_validate_topic_name+0x146>
 801b5a2:	2a7d      	cmp	r2, #125	@ 0x7d
 801b5a4:	d169      	bne.n	801b67a <rcl_validate_topic_name+0x166>
 801b5a6:	2d00      	cmp	r5, #0
 801b5a8:	d15c      	bne.n	801b664 <rcl_validate_topic_name+0x150>
 801b5aa:	2305      	movs	r3, #5
 801b5ac:	6033      	str	r3, [r6, #0]
 801b5ae:	b137      	cbz	r7, 801b5be <rcl_validate_topic_name+0xaa>
 801b5b0:	2000      	movs	r0, #0
 801b5b2:	6039      	str	r1, [r7, #0]
 801b5b4:	e7d9      	b.n	801b56a <rcl_validate_topic_name+0x56>
 801b5b6:	2304      	movs	r3, #4
 801b5b8:	6033      	str	r3, [r6, #0]
 801b5ba:	2f00      	cmp	r7, #0
 801b5bc:	d1d2      	bne.n	801b564 <rcl_validate_topic_name+0x50>
 801b5be:	2000      	movs	r0, #0
 801b5c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b5c4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b5c8:	0752      	lsls	r2, r2, #29
 801b5ca:	d509      	bpl.n	801b5e0 <rcl_validate_topic_name+0xcc>
 801b5cc:	2900      	cmp	r1, #0
 801b5ce:	bf0c      	ite	eq
 801b5d0:	2200      	moveq	r2, #0
 801b5d2:	f005 0201 	andne.w	r2, r5, #1
 801b5d6:	b11a      	cbz	r2, 801b5e0 <rcl_validate_topic_name+0xcc>
 801b5d8:	1e4d      	subs	r5, r1, #1
 801b5da:	429d      	cmp	r5, r3
 801b5dc:	d031      	beq.n	801b642 <rcl_validate_topic_name+0x12e>
 801b5de:	4615      	mov	r5, r2
 801b5e0:	3101      	adds	r1, #1
 801b5e2:	4288      	cmp	r0, r1
 801b5e4:	d1c7      	bne.n	801b576 <rcl_validate_topic_name+0x62>
 801b5e6:	2d00      	cmp	r5, #0
 801b5e8:	d142      	bne.n	801b670 <rcl_validate_topic_name+0x15c>
 801b5ea:	4628      	mov	r0, r5
 801b5ec:	2301      	movs	r3, #1
 801b5ee:	e00c      	b.n	801b60a <rcl_validate_topic_name+0xf6>
 801b5f0:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801b5f4:	d101      	bne.n	801b5fa <rcl_validate_topic_name+0xe6>
 801b5f6:	2801      	cmp	r0, #1
 801b5f8:	d047      	beq.n	801b68a <rcl_validate_topic_name+0x176>
 801b5fa:	1c5a      	adds	r2, r3, #1
 801b5fc:	428b      	cmp	r3, r1
 801b5fe:	f100 0001 	add.w	r0, r0, #1
 801b602:	f104 0401 	add.w	r4, r4, #1
 801b606:	4613      	mov	r3, r2
 801b608:	d22e      	bcs.n	801b668 <rcl_validate_topic_name+0x154>
 801b60a:	4580      	cmp	r8, r0
 801b60c:	d0f5      	beq.n	801b5fa <rcl_validate_topic_name+0xe6>
 801b60e:	7822      	ldrb	r2, [r4, #0]
 801b610:	2a2f      	cmp	r2, #47	@ 0x2f
 801b612:	d1ed      	bne.n	801b5f0 <rcl_validate_topic_name+0xdc>
 801b614:	7862      	ldrb	r2, [r4, #1]
 801b616:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b61a:	0752      	lsls	r2, r2, #29
 801b61c:	d5ed      	bpl.n	801b5fa <rcl_validate_topic_name+0xe6>
 801b61e:	2204      	movs	r2, #4
 801b620:	6032      	str	r2, [r6, #0]
 801b622:	2f00      	cmp	r7, #0
 801b624:	d0cb      	beq.n	801b5be <rcl_validate_topic_name+0xaa>
 801b626:	2000      	movs	r0, #0
 801b628:	603b      	str	r3, [r7, #0]
 801b62a:	e79e      	b.n	801b56a <rcl_validate_topic_name+0x56>
 801b62c:	200b      	movs	r0, #11
 801b62e:	4770      	bx	lr
 801b630:	200b      	movs	r0, #11
 801b632:	e79a      	b.n	801b56a <rcl_validate_topic_name+0x56>
 801b634:	2900      	cmp	r1, #0
 801b636:	d0d3      	beq.n	801b5e0 <rcl_validate_topic_name+0xcc>
 801b638:	2306      	movs	r3, #6
 801b63a:	6033      	str	r3, [r6, #0]
 801b63c:	2f00      	cmp	r7, #0
 801b63e:	d1b7      	bne.n	801b5b0 <rcl_validate_topic_name+0x9c>
 801b640:	e7bd      	b.n	801b5be <rcl_validate_topic_name+0xaa>
 801b642:	2309      	movs	r3, #9
 801b644:	6033      	str	r3, [r6, #0]
 801b646:	2f00      	cmp	r7, #0
 801b648:	d1b2      	bne.n	801b5b0 <rcl_validate_topic_name+0x9c>
 801b64a:	e7b8      	b.n	801b5be <rcl_validate_topic_name+0xaa>
 801b64c:	2d00      	cmp	r5, #0
 801b64e:	d0c7      	beq.n	801b5e0 <rcl_validate_topic_name+0xcc>
 801b650:	2308      	movs	r3, #8
 801b652:	6033      	str	r3, [r6, #0]
 801b654:	2f00      	cmp	r7, #0
 801b656:	d1ab      	bne.n	801b5b0 <rcl_validate_topic_name+0x9c>
 801b658:	e7b1      	b.n	801b5be <rcl_validate_topic_name+0xaa>
 801b65a:	2d00      	cmp	r5, #0
 801b65c:	d1f8      	bne.n	801b650 <rcl_validate_topic_name+0x13c>
 801b65e:	460b      	mov	r3, r1
 801b660:	2501      	movs	r5, #1
 801b662:	e7bd      	b.n	801b5e0 <rcl_validate_topic_name+0xcc>
 801b664:	2500      	movs	r5, #0
 801b666:	e7bb      	b.n	801b5e0 <rcl_validate_topic_name+0xcc>
 801b668:	2300      	movs	r3, #0
 801b66a:	4618      	mov	r0, r3
 801b66c:	6033      	str	r3, [r6, #0]
 801b66e:	e77c      	b.n	801b56a <rcl_validate_topic_name+0x56>
 801b670:	2205      	movs	r2, #5
 801b672:	6032      	str	r2, [r6, #0]
 801b674:	2f00      	cmp	r7, #0
 801b676:	d1d6      	bne.n	801b626 <rcl_validate_topic_name+0x112>
 801b678:	e7a1      	b.n	801b5be <rcl_validate_topic_name+0xaa>
 801b67a:	2d00      	cmp	r5, #0
 801b67c:	bf14      	ite	ne
 801b67e:	2308      	movne	r3, #8
 801b680:	2303      	moveq	r3, #3
 801b682:	6033      	str	r3, [r6, #0]
 801b684:	2f00      	cmp	r7, #0
 801b686:	d193      	bne.n	801b5b0 <rcl_validate_topic_name+0x9c>
 801b688:	e799      	b.n	801b5be <rcl_validate_topic_name+0xaa>
 801b68a:	2307      	movs	r3, #7
 801b68c:	6033      	str	r3, [r6, #0]
 801b68e:	2f00      	cmp	r7, #0
 801b690:	d095      	beq.n	801b5be <rcl_validate_topic_name+0xaa>
 801b692:	2301      	movs	r3, #1
 801b694:	e7c7      	b.n	801b626 <rcl_validate_topic_name+0x112>
 801b696:	bf00      	nop
 801b698:	080206de 	.word	0x080206de

0801b69c <rcutils_string_array_fini>:
 801b69c:	b328      	cbz	r0, 801b6ea <rcutils_string_array_fini+0x4e>
 801b69e:	b570      	push	{r4, r5, r6, lr}
 801b6a0:	4604      	mov	r4, r0
 801b6a2:	6840      	ldr	r0, [r0, #4]
 801b6a4:	b1e0      	cbz	r0, 801b6e0 <rcutils_string_array_fini+0x44>
 801b6a6:	f104 0008 	add.w	r0, r4, #8
 801b6aa:	f7f5 fbc1 	bl	8010e30 <rcutils_allocator_is_valid>
 801b6ae:	b1c0      	cbz	r0, 801b6e2 <rcutils_string_array_fini+0x46>
 801b6b0:	6823      	ldr	r3, [r4, #0]
 801b6b2:	b1c3      	cbz	r3, 801b6e6 <rcutils_string_array_fini+0x4a>
 801b6b4:	2500      	movs	r5, #0
 801b6b6:	6860      	ldr	r0, [r4, #4]
 801b6b8:	462e      	mov	r6, r5
 801b6ba:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801b6be:	68e3      	ldr	r3, [r4, #12]
 801b6c0:	69a1      	ldr	r1, [r4, #24]
 801b6c2:	4798      	blx	r3
 801b6c4:	e9d4 3000 	ldrd	r3, r0, [r4]
 801b6c8:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801b6cc:	3501      	adds	r5, #1
 801b6ce:	429d      	cmp	r5, r3
 801b6d0:	d3f3      	bcc.n	801b6ba <rcutils_string_array_fini+0x1e>
 801b6d2:	68e3      	ldr	r3, [r4, #12]
 801b6d4:	69a1      	ldr	r1, [r4, #24]
 801b6d6:	4798      	blx	r3
 801b6d8:	2300      	movs	r3, #0
 801b6da:	4618      	mov	r0, r3
 801b6dc:	e9c4 3300 	strd	r3, r3, [r4]
 801b6e0:	bd70      	pop	{r4, r5, r6, pc}
 801b6e2:	200b      	movs	r0, #11
 801b6e4:	bd70      	pop	{r4, r5, r6, pc}
 801b6e6:	6860      	ldr	r0, [r4, #4]
 801b6e8:	e7f3      	b.n	801b6d2 <rcutils_string_array_fini+0x36>
 801b6ea:	200b      	movs	r0, #11
 801b6ec:	4770      	bx	lr
 801b6ee:	bf00      	nop

0801b6f0 <rmw_time_equal>:
 801b6f0:	b4f0      	push	{r4, r5, r6, r7}
 801b6f2:	b084      	sub	sp, #16
 801b6f4:	ac04      	add	r4, sp, #16
 801b6f6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801b6fa:	4603      	mov	r3, r0
 801b6fc:	4925      	ldr	r1, [pc, #148]	@ (801b794 <rmw_time_equal+0xa4>)
 801b6fe:	9d01      	ldr	r5, [sp, #4]
 801b700:	4610      	mov	r0, r2
 801b702:	4299      	cmp	r1, r3
 801b704:	f04f 0202 	mov.w	r2, #2
 801b708:	9e03      	ldr	r6, [sp, #12]
 801b70a:	41aa      	sbcs	r2, r5
 801b70c:	d330      	bcc.n	801b770 <rmw_time_equal+0x80>
 801b70e:	4c22      	ldr	r4, [pc, #136]	@ (801b798 <rmw_time_equal+0xa8>)
 801b710:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b714:	fba3 3204 	umull	r3, r2, r3, r4
 801b718:	fb04 2205 	mla	r2, r4, r5, r2
 801b71c:	43dd      	mvns	r5, r3
 801b71e:	1a8c      	subs	r4, r1, r2
 801b720:	4285      	cmp	r5, r0
 801b722:	41b4      	sbcs	r4, r6
 801b724:	d332      	bcc.n	801b78c <rmw_time_equal+0x9c>
 801b726:	eb10 0c03 	adds.w	ip, r0, r3
 801b72a:	eb42 0106 	adc.w	r1, r2, r6
 801b72e:	4819      	ldr	r0, [pc, #100]	@ (801b794 <rmw_time_equal+0xa4>)
 801b730:	2202      	movs	r2, #2
 801b732:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801b734:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801b736:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801b73a:	4298      	cmp	r0, r3
 801b73c:	41b2      	sbcs	r2, r6
 801b73e:	d31c      	bcc.n	801b77a <rmw_time_equal+0x8a>
 801b740:	4c15      	ldr	r4, [pc, #84]	@ (801b798 <rmw_time_equal+0xa8>)
 801b742:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801b746:	fba3 3204 	umull	r3, r2, r3, r4
 801b74a:	fb04 2206 	mla	r2, r4, r6, r2
 801b74e:	43de      	mvns	r6, r3
 801b750:	1a84      	subs	r4, r0, r2
 801b752:	42ae      	cmp	r6, r5
 801b754:	41bc      	sbcs	r4, r7
 801b756:	d315      	bcc.n	801b784 <rmw_time_equal+0x94>
 801b758:	195b      	adds	r3, r3, r5
 801b75a:	eb42 0207 	adc.w	r2, r2, r7
 801b75e:	428a      	cmp	r2, r1
 801b760:	bf08      	it	eq
 801b762:	4563      	cmpeq	r3, ip
 801b764:	bf0c      	ite	eq
 801b766:	2001      	moveq	r0, #1
 801b768:	2000      	movne	r0, #0
 801b76a:	b004      	add	sp, #16
 801b76c:	bcf0      	pop	{r4, r5, r6, r7}
 801b76e:	4770      	bx	lr
 801b770:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801b774:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b778:	e7d9      	b.n	801b72e <rmw_time_equal+0x3e>
 801b77a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b77e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 801b782:	e7ec      	b.n	801b75e <rmw_time_equal+0x6e>
 801b784:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b788:	4602      	mov	r2, r0
 801b78a:	e7e8      	b.n	801b75e <rmw_time_equal+0x6e>
 801b78c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801b790:	e7cd      	b.n	801b72e <rmw_time_equal+0x3e>
 801b792:	bf00      	nop
 801b794:	25c17d04 	.word	0x25c17d04
 801b798:	3b9aca00 	.word	0x3b9aca00

0801b79c <rmw_time_total_nsec>:
 801b79c:	b470      	push	{r4, r5, r6}
 801b79e:	b085      	sub	sp, #20
 801b7a0:	ac04      	add	r4, sp, #16
 801b7a2:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801b7a6:	4603      	mov	r3, r0
 801b7a8:	4913      	ldr	r1, [pc, #76]	@ (801b7f8 <rmw_time_total_nsec+0x5c>)
 801b7aa:	9d01      	ldr	r5, [sp, #4]
 801b7ac:	4610      	mov	r0, r2
 801b7ae:	4299      	cmp	r1, r3
 801b7b0:	f04f 0202 	mov.w	r2, #2
 801b7b4:	9e03      	ldr	r6, [sp, #12]
 801b7b6:	41aa      	sbcs	r2, r5
 801b7b8:	d311      	bcc.n	801b7de <rmw_time_total_nsec+0x42>
 801b7ba:	4c10      	ldr	r4, [pc, #64]	@ (801b7fc <rmw_time_total_nsec+0x60>)
 801b7bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b7c0:	fba3 3204 	umull	r3, r2, r3, r4
 801b7c4:	fb04 2205 	mla	r2, r4, r5, r2
 801b7c8:	43dd      	mvns	r5, r3
 801b7ca:	1a8c      	subs	r4, r1, r2
 801b7cc:	4285      	cmp	r5, r0
 801b7ce:	41b4      	sbcs	r4, r6
 801b7d0:	d30c      	bcc.n	801b7ec <rmw_time_total_nsec+0x50>
 801b7d2:	1818      	adds	r0, r3, r0
 801b7d4:	eb42 0106 	adc.w	r1, r2, r6
 801b7d8:	b005      	add	sp, #20
 801b7da:	bc70      	pop	{r4, r5, r6}
 801b7dc:	4770      	bx	lr
 801b7de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b7e2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b7e6:	b005      	add	sp, #20
 801b7e8:	bc70      	pop	{r4, r5, r6}
 801b7ea:	4770      	bx	lr
 801b7ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b7f0:	b005      	add	sp, #20
 801b7f2:	bc70      	pop	{r4, r5, r6}
 801b7f4:	4770      	bx	lr
 801b7f6:	bf00      	nop
 801b7f8:	25c17d04 	.word	0x25c17d04
 801b7fc:	3b9aca00 	.word	0x3b9aca00

0801b800 <on_status>:
 801b800:	b082      	sub	sp, #8
 801b802:	b002      	add	sp, #8
 801b804:	4770      	bx	lr
 801b806:	bf00      	nop

0801b808 <on_topic>:
 801b808:	4a23      	ldr	r2, [pc, #140]	@ (801b898 <on_topic+0x90>)
 801b80a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b80e:	6812      	ldr	r2, [r2, #0]
 801b810:	b094      	sub	sp, #80	@ 0x50
 801b812:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801b814:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 801b818:	9113      	str	r1, [sp, #76]	@ 0x4c
 801b81a:	9312      	str	r3, [sp, #72]	@ 0x48
 801b81c:	b3c2      	cbz	r2, 801b890 <on_topic+0x88>
 801b81e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801b822:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801b826:	e001      	b.n	801b82c <on_topic+0x24>
 801b828:	6852      	ldr	r2, [r2, #4]
 801b82a:	b38a      	cbz	r2, 801b890 <on_topic+0x88>
 801b82c:	6894      	ldr	r4, [r2, #8]
 801b82e:	8aa3      	ldrh	r3, [r4, #20]
 801b830:	428b      	cmp	r3, r1
 801b832:	d1f9      	bne.n	801b828 <on_topic+0x20>
 801b834:	7da3      	ldrb	r3, [r4, #22]
 801b836:	4283      	cmp	r3, r0
 801b838:	d1f6      	bne.n	801b828 <on_topic+0x20>
 801b83a:	2248      	movs	r2, #72	@ 0x48
 801b83c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801b840:	4668      	mov	r0, sp
 801b842:	f001 fd56 	bl	801d2f2 <memcpy>
 801b846:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801b84a:	4620      	mov	r0, r4
 801b84c:	cb0c      	ldmia	r3, {r2, r3}
 801b84e:	f7fb faa5 	bl	8016d9c <rmw_uxrce_get_static_input_buffer_for_entity>
 801b852:	4607      	mov	r7, r0
 801b854:	b1e0      	cbz	r0, 801b890 <on_topic+0x88>
 801b856:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801b85a:	462a      	mov	r2, r5
 801b85c:	4630      	mov	r0, r6
 801b85e:	f108 0110 	add.w	r1, r8, #16
 801b862:	f7fb ff7d 	bl	8017760 <ucdr_deserialize_array_uint8_t>
 801b866:	b930      	cbnz	r0, 801b876 <on_topic+0x6e>
 801b868:	4639      	mov	r1, r7
 801b86a:	480c      	ldr	r0, [pc, #48]	@ (801b89c <on_topic+0x94>)
 801b86c:	b014      	add	sp, #80	@ 0x50
 801b86e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b872:	f000 b8bd 	b.w	801b9f0 <put_memory>
 801b876:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801b87a:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 801b87e:	f000 f967 	bl	801bb50 <rmw_uros_epoch_nanos>
 801b882:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801b886:	2305      	movs	r3, #5
 801b888:	e942 0102 	strd	r0, r1, [r2, #-8]
 801b88c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801b890:	b014      	add	sp, #80	@ 0x50
 801b892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b896:	bf00      	nop
 801b898:	240692bc 	.word	0x240692bc
 801b89c:	240692ac 	.word	0x240692ac

0801b8a0 <on_request>:
 801b8a0:	4824      	ldr	r0, [pc, #144]	@ (801b934 <on_request+0x94>)
 801b8a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8a6:	6800      	ldr	r0, [r0, #0]
 801b8a8:	b094      	sub	sp, #80	@ 0x50
 801b8aa:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801b8ac:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801b8b0:	9113      	str	r1, [sp, #76]	@ 0x4c
 801b8b2:	2800      	cmp	r0, #0
 801b8b4:	d03b      	beq.n	801b92e <on_request+0x8e>
 801b8b6:	461d      	mov	r5, r3
 801b8b8:	e001      	b.n	801b8be <on_request+0x1e>
 801b8ba:	6840      	ldr	r0, [r0, #4]
 801b8bc:	b3b8      	cbz	r0, 801b92e <on_request+0x8e>
 801b8be:	6884      	ldr	r4, [r0, #8]
 801b8c0:	8b21      	ldrh	r1, [r4, #24]
 801b8c2:	4291      	cmp	r1, r2
 801b8c4:	d1f9      	bne.n	801b8ba <on_request+0x1a>
 801b8c6:	2248      	movs	r2, #72	@ 0x48
 801b8c8:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801b8cc:	4668      	mov	r0, sp
 801b8ce:	f001 fd10 	bl	801d2f2 <memcpy>
 801b8d2:	f104 0320 	add.w	r3, r4, #32
 801b8d6:	4620      	mov	r0, r4
 801b8d8:	cb0c      	ldmia	r3, {r2, r3}
 801b8da:	f7fb fa5f 	bl	8016d9c <rmw_uxrce_get_static_input_buffer_for_entity>
 801b8de:	4680      	mov	r8, r0
 801b8e0:	b328      	cbz	r0, 801b92e <on_request+0x8e>
 801b8e2:	4630      	mov	r0, r6
 801b8e4:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801b8e8:	463a      	mov	r2, r7
 801b8ea:	f106 0110 	add.w	r1, r6, #16
 801b8ee:	f7fb ff37 	bl	8017760 <ucdr_deserialize_array_uint8_t>
 801b8f2:	b930      	cbnz	r0, 801b902 <on_request+0x62>
 801b8f4:	4641      	mov	r1, r8
 801b8f6:	4810      	ldr	r0, [pc, #64]	@ (801b938 <on_request+0x98>)
 801b8f8:	b014      	add	sp, #80	@ 0x50
 801b8fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b8fe:	f000 b877 	b.w	801b9f0 <put_memory>
 801b902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b904:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 801b908:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 801b90c:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801b910:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b914:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b918:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b91c:	f000 f918 	bl	801bb50 <rmw_uros_epoch_nanos>
 801b920:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 801b924:	2303      	movs	r3, #3
 801b926:	e942 0102 	strd	r0, r1, [r2, #-8]
 801b92a:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 801b92e:	b014      	add	sp, #80	@ 0x50
 801b930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b934:	2406928c 	.word	0x2406928c
 801b938:	240692ac 	.word	0x240692ac

0801b93c <on_reply>:
 801b93c:	4822      	ldr	r0, [pc, #136]	@ (801b9c8 <on_reply+0x8c>)
 801b93e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b942:	6800      	ldr	r0, [r0, #0]
 801b944:	b094      	sub	sp, #80	@ 0x50
 801b946:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801b948:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801b94c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801b94e:	b3b8      	cbz	r0, 801b9c0 <on_reply+0x84>
 801b950:	461d      	mov	r5, r3
 801b952:	e001      	b.n	801b958 <on_reply+0x1c>
 801b954:	6840      	ldr	r0, [r0, #4]
 801b956:	b398      	cbz	r0, 801b9c0 <on_reply+0x84>
 801b958:	6884      	ldr	r4, [r0, #8]
 801b95a:	8b21      	ldrh	r1, [r4, #24]
 801b95c:	4291      	cmp	r1, r2
 801b95e:	d1f9      	bne.n	801b954 <on_reply+0x18>
 801b960:	2248      	movs	r2, #72	@ 0x48
 801b962:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801b966:	4668      	mov	r0, sp
 801b968:	f001 fcc3 	bl	801d2f2 <memcpy>
 801b96c:	f104 0320 	add.w	r3, r4, #32
 801b970:	4620      	mov	r0, r4
 801b972:	cb0c      	ldmia	r3, {r2, r3}
 801b974:	f7fb fa12 	bl	8016d9c <rmw_uxrce_get_static_input_buffer_for_entity>
 801b978:	4680      	mov	r8, r0
 801b97a:	b308      	cbz	r0, 801b9c0 <on_reply+0x84>
 801b97c:	4630      	mov	r0, r6
 801b97e:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801b982:	463a      	mov	r2, r7
 801b984:	f106 0110 	add.w	r1, r6, #16
 801b988:	f7fb feea 	bl	8017760 <ucdr_deserialize_array_uint8_t>
 801b98c:	b930      	cbnz	r0, 801b99c <on_reply+0x60>
 801b98e:	4641      	mov	r1, r8
 801b990:	480e      	ldr	r0, [pc, #56]	@ (801b9cc <on_reply+0x90>)
 801b992:	b014      	add	sp, #80	@ 0x50
 801b994:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b998:	f000 b82a 	b.w	801b9f0 <put_memory>
 801b99c:	2200      	movs	r2, #0
 801b99e:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 801b9a2:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801b9a6:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 801b9aa:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 801b9ae:	f000 f8cf 	bl	801bb50 <rmw_uros_epoch_nanos>
 801b9b2:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 801b9b6:	2304      	movs	r3, #4
 801b9b8:	e942 0102 	strd	r0, r1, [r2, #-8]
 801b9bc:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 801b9c0:	b014      	add	sp, #80	@ 0x50
 801b9c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b9c6:	bf00      	nop
 801b9c8:	240649a0 	.word	0x240649a0
 801b9cc:	240692ac 	.word	0x240692ac

0801b9d0 <get_memory>:
 801b9d0:	4603      	mov	r3, r0
 801b9d2:	6840      	ldr	r0, [r0, #4]
 801b9d4:	b158      	cbz	r0, 801b9ee <get_memory+0x1e>
 801b9d6:	6842      	ldr	r2, [r0, #4]
 801b9d8:	605a      	str	r2, [r3, #4]
 801b9da:	b10a      	cbz	r2, 801b9e0 <get_memory+0x10>
 801b9dc:	2100      	movs	r1, #0
 801b9de:	6011      	str	r1, [r2, #0]
 801b9e0:	681a      	ldr	r2, [r3, #0]
 801b9e2:	6042      	str	r2, [r0, #4]
 801b9e4:	b102      	cbz	r2, 801b9e8 <get_memory+0x18>
 801b9e6:	6010      	str	r0, [r2, #0]
 801b9e8:	2200      	movs	r2, #0
 801b9ea:	6002      	str	r2, [r0, #0]
 801b9ec:	6018      	str	r0, [r3, #0]
 801b9ee:	4770      	bx	lr

0801b9f0 <put_memory>:
 801b9f0:	680b      	ldr	r3, [r1, #0]
 801b9f2:	b10b      	cbz	r3, 801b9f8 <put_memory+0x8>
 801b9f4:	684a      	ldr	r2, [r1, #4]
 801b9f6:	605a      	str	r2, [r3, #4]
 801b9f8:	684a      	ldr	r2, [r1, #4]
 801b9fa:	b102      	cbz	r2, 801b9fe <put_memory+0xe>
 801b9fc:	6013      	str	r3, [r2, #0]
 801b9fe:	6803      	ldr	r3, [r0, #0]
 801ba00:	428b      	cmp	r3, r1
 801ba02:	6843      	ldr	r3, [r0, #4]
 801ba04:	bf08      	it	eq
 801ba06:	6002      	streq	r2, [r0, #0]
 801ba08:	604b      	str	r3, [r1, #4]
 801ba0a:	b103      	cbz	r3, 801ba0e <put_memory+0x1e>
 801ba0c:	6019      	str	r1, [r3, #0]
 801ba0e:	2300      	movs	r3, #0
 801ba10:	600b      	str	r3, [r1, #0]
 801ba12:	6041      	str	r1, [r0, #4]
 801ba14:	4770      	bx	lr
 801ba16:	bf00      	nop

0801ba18 <rmw_create_guard_condition>:
 801ba18:	b538      	push	{r3, r4, r5, lr}
 801ba1a:	4605      	mov	r5, r0
 801ba1c:	4808      	ldr	r0, [pc, #32]	@ (801ba40 <rmw_create_guard_condition+0x28>)
 801ba1e:	f7ff ffd7 	bl	801b9d0 <get_memory>
 801ba22:	4603      	mov	r3, r0
 801ba24:	b148      	cbz	r0, 801ba3a <rmw_create_guard_condition+0x22>
 801ba26:	6884      	ldr	r4, [r0, #8]
 801ba28:	2300      	movs	r3, #0
 801ba2a:	61e5      	str	r5, [r4, #28]
 801ba2c:	7423      	strb	r3, [r4, #16]
 801ba2e:	f7f9 fd15 	bl	801545c <rmw_get_implementation_identifier>
 801ba32:	f104 0314 	add.w	r3, r4, #20
 801ba36:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801ba3a:	4618      	mov	r0, r3
 801ba3c:	bd38      	pop	{r3, r4, r5, pc}
 801ba3e:	bf00      	nop
 801ba40:	2406924c 	.word	0x2406924c

0801ba44 <rmw_destroy_guard_condition>:
 801ba44:	b508      	push	{r3, lr}
 801ba46:	4b08      	ldr	r3, [pc, #32]	@ (801ba68 <rmw_destroy_guard_condition+0x24>)
 801ba48:	6819      	ldr	r1, [r3, #0]
 801ba4a:	b911      	cbnz	r1, 801ba52 <rmw_destroy_guard_condition+0xe>
 801ba4c:	e00a      	b.n	801ba64 <rmw_destroy_guard_condition+0x20>
 801ba4e:	6849      	ldr	r1, [r1, #4]
 801ba50:	b141      	cbz	r1, 801ba64 <rmw_destroy_guard_condition+0x20>
 801ba52:	688b      	ldr	r3, [r1, #8]
 801ba54:	3314      	adds	r3, #20
 801ba56:	4298      	cmp	r0, r3
 801ba58:	d1f9      	bne.n	801ba4e <rmw_destroy_guard_condition+0xa>
 801ba5a:	4803      	ldr	r0, [pc, #12]	@ (801ba68 <rmw_destroy_guard_condition+0x24>)
 801ba5c:	f7ff ffc8 	bl	801b9f0 <put_memory>
 801ba60:	2000      	movs	r0, #0
 801ba62:	bd08      	pop	{r3, pc}
 801ba64:	2001      	movs	r0, #1
 801ba66:	bd08      	pop	{r3, pc}
 801ba68:	2406924c 	.word	0x2406924c

0801ba6c <create_topic>:
 801ba6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba70:	4605      	mov	r5, r0
 801ba72:	b084      	sub	sp, #16
 801ba74:	4822      	ldr	r0, [pc, #136]	@ (801bb00 <create_topic+0x94>)
 801ba76:	460f      	mov	r7, r1
 801ba78:	4616      	mov	r6, r2
 801ba7a:	f7ff ffa9 	bl	801b9d0 <get_memory>
 801ba7e:	4604      	mov	r4, r0
 801ba80:	2800      	cmp	r0, #0
 801ba82:	d039      	beq.n	801baf8 <create_topic+0x8c>
 801ba84:	692b      	ldr	r3, [r5, #16]
 801ba86:	2102      	movs	r1, #2
 801ba88:	6884      	ldr	r4, [r0, #8]
 801ba8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801ba8e:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 801bb08 <create_topic+0x9c>
 801ba92:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801ba96:	1c42      	adds	r2, r0, #1
 801ba98:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801ba9c:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801baa0:	f7fc f9c0 	bl	8017e24 <uxr_object_id>
 801baa4:	223c      	movs	r2, #60	@ 0x3c
 801baa6:	6120      	str	r0, [r4, #16]
 801baa8:	4641      	mov	r1, r8
 801baaa:	4638      	mov	r0, r7
 801baac:	f7fb fb70 	bl	8017190 <generate_topic_name>
 801bab0:	b1f0      	cbz	r0, 801baf0 <create_topic+0x84>
 801bab2:	4f14      	ldr	r7, [pc, #80]	@ (801bb04 <create_topic+0x98>)
 801bab4:	4630      	mov	r0, r6
 801bab6:	2264      	movs	r2, #100	@ 0x64
 801bab8:	4639      	mov	r1, r7
 801baba:	f7fb fb3b 	bl	8017134 <generate_type_name>
 801babe:	b1b8      	cbz	r0, 801baf0 <create_topic+0x84>
 801bac0:	6928      	ldr	r0, [r5, #16]
 801bac2:	2106      	movs	r1, #6
 801bac4:	696b      	ldr	r3, [r5, #20]
 801bac6:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801baca:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801bace:	f8cd 8000 	str.w	r8, [sp]
 801bad2:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801bad6:	6811      	ldr	r1, [r2, #0]
 801bad8:	6922      	ldr	r2, [r4, #16]
 801bada:	f7fb ff27 	bl	801792c <uxr_buffer_create_topic_bin>
 801bade:	4602      	mov	r2, r0
 801bae0:	6928      	ldr	r0, [r5, #16]
 801bae2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801bae6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801baea:	f7fb fa57 	bl	8016f9c <run_xrce_session>
 801baee:	b918      	cbnz	r0, 801baf8 <create_topic+0x8c>
 801baf0:	4620      	mov	r0, r4
 801baf2:	2400      	movs	r4, #0
 801baf4:	f7fb f946 	bl	8016d84 <rmw_uxrce_fini_topic_memory>
 801baf8:	4620      	mov	r0, r4
 801bafa:	b004      	add	sp, #16
 801bafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb00:	240692cc 	.word	0x240692cc
 801bb04:	24069340 	.word	0x24069340
 801bb08:	24069304 	.word	0x24069304

0801bb0c <destroy_topic>:
 801bb0c:	b538      	push	{r3, r4, r5, lr}
 801bb0e:	6985      	ldr	r5, [r0, #24]
 801bb10:	b1dd      	cbz	r5, 801bb4a <destroy_topic+0x3e>
 801bb12:	4604      	mov	r4, r0
 801bb14:	6928      	ldr	r0, [r5, #16]
 801bb16:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801bb1a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801bb1e:	6922      	ldr	r2, [r4, #16]
 801bb20:	6819      	ldr	r1, [r3, #0]
 801bb22:	f7fb fe85 	bl	8017830 <uxr_buffer_delete_entity>
 801bb26:	4602      	mov	r2, r0
 801bb28:	6928      	ldr	r0, [r5, #16]
 801bb2a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801bb2e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801bb32:	f7fb fa33 	bl	8016f9c <run_xrce_session>
 801bb36:	4603      	mov	r3, r0
 801bb38:	4620      	mov	r0, r4
 801bb3a:	2b00      	cmp	r3, #0
 801bb3c:	bf14      	ite	ne
 801bb3e:	2400      	movne	r4, #0
 801bb40:	2402      	moveq	r4, #2
 801bb42:	f7fb f91f 	bl	8016d84 <rmw_uxrce_fini_topic_memory>
 801bb46:	4620      	mov	r0, r4
 801bb48:	bd38      	pop	{r3, r4, r5, pc}
 801bb4a:	2401      	movs	r4, #1
 801bb4c:	4620      	mov	r0, r4
 801bb4e:	bd38      	pop	{r3, r4, r5, pc}

0801bb50 <rmw_uros_epoch_nanos>:
 801bb50:	4b05      	ldr	r3, [pc, #20]	@ (801bb68 <rmw_uros_epoch_nanos+0x18>)
 801bb52:	681b      	ldr	r3, [r3, #0]
 801bb54:	b123      	cbz	r3, 801bb60 <rmw_uros_epoch_nanos+0x10>
 801bb56:	6898      	ldr	r0, [r3, #8]
 801bb58:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801bb5c:	f7fc bbd8 	b.w	8018310 <uxr_epoch_nanos>
 801bb60:	2000      	movs	r0, #0
 801bb62:	2100      	movs	r1, #0
 801bb64:	4770      	bx	lr
 801bb66:	bf00      	nop
 801bb68:	2406929c 	.word	0x2406929c

0801bb6c <rosidl_runtime_c__String__init>:
 801bb6c:	b510      	push	{r4, lr}
 801bb6e:	4604      	mov	r4, r0
 801bb70:	b086      	sub	sp, #24
 801bb72:	b170      	cbz	r0, 801bb92 <rosidl_runtime_c__String__init+0x26>
 801bb74:	a801      	add	r0, sp, #4
 801bb76:	f7f5 f94d 	bl	8010e14 <rcutils_get_default_allocator>
 801bb7a:	9b01      	ldr	r3, [sp, #4]
 801bb7c:	9905      	ldr	r1, [sp, #20]
 801bb7e:	2001      	movs	r0, #1
 801bb80:	4798      	blx	r3
 801bb82:	6020      	str	r0, [r4, #0]
 801bb84:	b128      	cbz	r0, 801bb92 <rosidl_runtime_c__String__init+0x26>
 801bb86:	2100      	movs	r1, #0
 801bb88:	2201      	movs	r2, #1
 801bb8a:	7001      	strb	r1, [r0, #0]
 801bb8c:	4610      	mov	r0, r2
 801bb8e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801bb92:	b006      	add	sp, #24
 801bb94:	bd10      	pop	{r4, pc}
 801bb96:	bf00      	nop

0801bb98 <rosidl_runtime_c__String__fini>:
 801bb98:	b320      	cbz	r0, 801bbe4 <rosidl_runtime_c__String__fini+0x4c>
 801bb9a:	6803      	ldr	r3, [r0, #0]
 801bb9c:	b510      	push	{r4, lr}
 801bb9e:	4604      	mov	r4, r0
 801bba0:	b086      	sub	sp, #24
 801bba2:	b173      	cbz	r3, 801bbc2 <rosidl_runtime_c__String__fini+0x2a>
 801bba4:	6883      	ldr	r3, [r0, #8]
 801bba6:	b1f3      	cbz	r3, 801bbe6 <rosidl_runtime_c__String__fini+0x4e>
 801bba8:	a801      	add	r0, sp, #4
 801bbaa:	f7f5 f933 	bl	8010e14 <rcutils_get_default_allocator>
 801bbae:	9b02      	ldr	r3, [sp, #8]
 801bbb0:	9905      	ldr	r1, [sp, #20]
 801bbb2:	6820      	ldr	r0, [r4, #0]
 801bbb4:	4798      	blx	r3
 801bbb6:	2300      	movs	r3, #0
 801bbb8:	e9c4 3300 	strd	r3, r3, [r4]
 801bbbc:	60a3      	str	r3, [r4, #8]
 801bbbe:	b006      	add	sp, #24
 801bbc0:	bd10      	pop	{r4, pc}
 801bbc2:	6843      	ldr	r3, [r0, #4]
 801bbc4:	b9db      	cbnz	r3, 801bbfe <rosidl_runtime_c__String__fini+0x66>
 801bbc6:	6883      	ldr	r3, [r0, #8]
 801bbc8:	2b00      	cmp	r3, #0
 801bbca:	d0f8      	beq.n	801bbbe <rosidl_runtime_c__String__fini+0x26>
 801bbcc:	4b12      	ldr	r3, [pc, #72]	@ (801bc18 <rosidl_runtime_c__String__fini+0x80>)
 801bbce:	2251      	movs	r2, #81	@ 0x51
 801bbd0:	2101      	movs	r1, #1
 801bbd2:	4812      	ldr	r0, [pc, #72]	@ (801bc1c <rosidl_runtime_c__String__fini+0x84>)
 801bbd4:	681b      	ldr	r3, [r3, #0]
 801bbd6:	68db      	ldr	r3, [r3, #12]
 801bbd8:	f001 f8f0 	bl	801cdbc <fwrite>
 801bbdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bbe0:	f000 fdac 	bl	801c73c <exit>
 801bbe4:	4770      	bx	lr
 801bbe6:	4b0c      	ldr	r3, [pc, #48]	@ (801bc18 <rosidl_runtime_c__String__fini+0x80>)
 801bbe8:	224c      	movs	r2, #76	@ 0x4c
 801bbea:	2101      	movs	r1, #1
 801bbec:	480c      	ldr	r0, [pc, #48]	@ (801bc20 <rosidl_runtime_c__String__fini+0x88>)
 801bbee:	681b      	ldr	r3, [r3, #0]
 801bbf0:	68db      	ldr	r3, [r3, #12]
 801bbf2:	f001 f8e3 	bl	801cdbc <fwrite>
 801bbf6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bbfa:	f000 fd9f 	bl	801c73c <exit>
 801bbfe:	4b06      	ldr	r3, [pc, #24]	@ (801bc18 <rosidl_runtime_c__String__fini+0x80>)
 801bc00:	224e      	movs	r2, #78	@ 0x4e
 801bc02:	2101      	movs	r1, #1
 801bc04:	4807      	ldr	r0, [pc, #28]	@ (801bc24 <rosidl_runtime_c__String__fini+0x8c>)
 801bc06:	681b      	ldr	r3, [r3, #0]
 801bc08:	68db      	ldr	r3, [r3, #12]
 801bc0a:	f001 f8d7 	bl	801cdbc <fwrite>
 801bc0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bc12:	f000 fd93 	bl	801c73c <exit>
 801bc16:	bf00      	nop
 801bc18:	240013a0 	.word	0x240013a0
 801bc1c:	0802061c 	.word	0x0802061c
 801bc20:	0802057c 	.word	0x0802057c
 801bc24:	080205cc 	.word	0x080205cc

0801bc28 <tier4_vehicle_msgs__msg__ActuationCommand__init>:
 801bc28:	3800      	subs	r0, #0
 801bc2a:	bf18      	it	ne
 801bc2c:	2001      	movne	r0, #1
 801bc2e:	4770      	bx	lr

0801bc30 <tier4_vehicle_msgs__msg__ActuationCommand__fini>:
 801bc30:	4770      	bx	lr
 801bc32:	bf00      	nop

0801bc34 <tier4_vehicle_msgs__msg__ActuationStatus__init>:
 801bc34:	3800      	subs	r0, #0
 801bc36:	bf18      	it	ne
 801bc38:	2001      	movne	r0, #1
 801bc3a:	4770      	bx	lr

0801bc3c <tier4_vehicle_msgs__msg__ActuationStatus__fini>:
 801bc3c:	4770      	bx	lr
 801bc3e:	bf00      	nop

0801bc40 <ucdr_serialize_string>:
 801bc40:	b510      	push	{r4, lr}
 801bc42:	b082      	sub	sp, #8
 801bc44:	4604      	mov	r4, r0
 801bc46:	4608      	mov	r0, r1
 801bc48:	9101      	str	r1, [sp, #4]
 801bc4a:	f7e4 fb53 	bl	80002f4 <strlen>
 801bc4e:	4602      	mov	r2, r0
 801bc50:	9901      	ldr	r1, [sp, #4]
 801bc52:	4620      	mov	r0, r4
 801bc54:	3201      	adds	r2, #1
 801bc56:	b002      	add	sp, #8
 801bc58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc5c:	f7f5 bec0 	b.w	80119e0 <ucdr_serialize_sequence_char>

0801bc60 <ucdr_deserialize_string>:
 801bc60:	b500      	push	{lr}
 801bc62:	b083      	sub	sp, #12
 801bc64:	ab01      	add	r3, sp, #4
 801bc66:	f7f5 fecd 	bl	8011a04 <ucdr_deserialize_sequence_char>
 801bc6a:	b003      	add	sp, #12
 801bc6c:	f85d fb04 	ldr.w	pc, [sp], #4

0801bc70 <uxr_init_input_best_effort_stream>:
 801bc70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bc74:	8003      	strh	r3, [r0, #0]
 801bc76:	4770      	bx	lr

0801bc78 <uxr_reset_input_best_effort_stream>:
 801bc78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bc7c:	8003      	strh	r3, [r0, #0]
 801bc7e:	4770      	bx	lr

0801bc80 <uxr_receive_best_effort_message>:
 801bc80:	b538      	push	{r3, r4, r5, lr}
 801bc82:	4604      	mov	r4, r0
 801bc84:	8800      	ldrh	r0, [r0, #0]
 801bc86:	460d      	mov	r5, r1
 801bc88:	f000 fd24 	bl	801c6d4 <uxr_seq_num_cmp>
 801bc8c:	4603      	mov	r3, r0
 801bc8e:	0fc0      	lsrs	r0, r0, #31
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	bfb8      	it	lt
 801bc94:	8025      	strhlt	r5, [r4, #0]
 801bc96:	bd38      	pop	{r3, r4, r5, pc}

0801bc98 <on_full_input_buffer>:
 801bc98:	b570      	push	{r4, r5, r6, lr}
 801bc9a:	460c      	mov	r4, r1
 801bc9c:	4605      	mov	r5, r0
 801bc9e:	8908      	ldrh	r0, [r1, #8]
 801bca0:	682b      	ldr	r3, [r5, #0]
 801bca2:	7d26      	ldrb	r6, [r4, #20]
 801bca4:	e9d1 1200 	ldrd	r1, r2, [r1]
 801bca8:	fbb2 f2f0 	udiv	r2, r2, r0
 801bcac:	eba3 0c01 	sub.w	ip, r3, r1
 801bcb0:	fbbc fcf2 	udiv	ip, ip, r2
 801bcb4:	f10c 0c01 	add.w	ip, ip, #1
 801bcb8:	fa1f f38c 	uxth.w	r3, ip
 801bcbc:	fbb3 fcf0 	udiv	ip, r3, r0
 801bcc0:	fb00 331c 	mls	r3, r0, ip, r3
 801bcc4:	b29b      	uxth	r3, r3
 801bcc6:	fb02 f303 	mul.w	r3, r2, r3
 801bcca:	1d18      	adds	r0, r3, #4
 801bccc:	4408      	add	r0, r1
 801bcce:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801bcd2:	b116      	cbz	r6, 801bcda <on_full_input_buffer+0x42>
 801bcd4:	2600      	movs	r6, #0
 801bcd6:	f840 6c04 	str.w	r6, [r0, #-4]
 801bcda:	2a03      	cmp	r2, #3
 801bcdc:	d801      	bhi.n	801bce2 <on_full_input_buffer+0x4a>
 801bcde:	2001      	movs	r0, #1
 801bce0:	bd70      	pop	{r4, r5, r6, pc}
 801bce2:	3308      	adds	r3, #8
 801bce4:	4628      	mov	r0, r5
 801bce6:	3a04      	subs	r2, #4
 801bce8:	4419      	add	r1, r3
 801bcea:	692b      	ldr	r3, [r5, #16]
 801bcec:	f7f4 f832 	bl	800fd54 <ucdr_init_buffer_origin>
 801bcf0:	4628      	mov	r0, r5
 801bcf2:	4622      	mov	r2, r4
 801bcf4:	4902      	ldr	r1, [pc, #8]	@ (801bd00 <on_full_input_buffer+0x68>)
 801bcf6:	f7f4 f809 	bl	800fd0c <ucdr_set_on_full_buffer_callback>
 801bcfa:	2000      	movs	r0, #0
 801bcfc:	bd70      	pop	{r4, r5, r6, pc}
 801bcfe:	bf00      	nop
 801bd00:	0801bc99 	.word	0x0801bc99

0801bd04 <uxr_init_input_reliable_stream>:
 801bd04:	b510      	push	{r4, lr}
 801bd06:	e9c0 1200 	strd	r1, r2, [r0]
 801bd0a:	2400      	movs	r4, #0
 801bd0c:	9a02      	ldr	r2, [sp, #8]
 801bd0e:	8103      	strh	r3, [r0, #8]
 801bd10:	6102      	str	r2, [r0, #16]
 801bd12:	7504      	strb	r4, [r0, #20]
 801bd14:	b1c3      	cbz	r3, 801bd48 <uxr_init_input_reliable_stream+0x44>
 801bd16:	600c      	str	r4, [r1, #0]
 801bd18:	8901      	ldrh	r1, [r0, #8]
 801bd1a:	2901      	cmp	r1, #1
 801bd1c:	d914      	bls.n	801bd48 <uxr_init_input_reliable_stream+0x44>
 801bd1e:	f04f 0c01 	mov.w	ip, #1
 801bd22:	6843      	ldr	r3, [r0, #4]
 801bd24:	f10c 0e01 	add.w	lr, ip, #1
 801bd28:	fbbc f2f1 	udiv	r2, ip, r1
 801bd2c:	fbb3 f3f1 	udiv	r3, r3, r1
 801bd30:	fb01 c212 	mls	r2, r1, r2, ip
 801bd34:	fa1f fc8e 	uxth.w	ip, lr
 801bd38:	b292      	uxth	r2, r2
 801bd3a:	fb02 f303 	mul.w	r3, r2, r3
 801bd3e:	6802      	ldr	r2, [r0, #0]
 801bd40:	50d4      	str	r4, [r2, r3]
 801bd42:	8901      	ldrh	r1, [r0, #8]
 801bd44:	4561      	cmp	r1, ip
 801bd46:	d8ec      	bhi.n	801bd22 <uxr_init_input_reliable_stream+0x1e>
 801bd48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bd4c:	60c3      	str	r3, [r0, #12]
 801bd4e:	bd10      	pop	{r4, pc}

0801bd50 <uxr_reset_input_reliable_stream>:
 801bd50:	8901      	ldrh	r1, [r0, #8]
 801bd52:	b1d9      	cbz	r1, 801bd8c <uxr_reset_input_reliable_stream+0x3c>
 801bd54:	b510      	push	{r4, lr}
 801bd56:	f04f 0e00 	mov.w	lr, #0
 801bd5a:	46f4      	mov	ip, lr
 801bd5c:	4674      	mov	r4, lr
 801bd5e:	6843      	ldr	r3, [r0, #4]
 801bd60:	f10e 0e01 	add.w	lr, lr, #1
 801bd64:	fbbc f2f1 	udiv	r2, ip, r1
 801bd68:	fbb3 f3f1 	udiv	r3, r3, r1
 801bd6c:	fb01 c212 	mls	r2, r1, r2, ip
 801bd70:	fa1f fc8e 	uxth.w	ip, lr
 801bd74:	b292      	uxth	r2, r2
 801bd76:	fb02 f303 	mul.w	r3, r2, r3
 801bd7a:	6802      	ldr	r2, [r0, #0]
 801bd7c:	50d4      	str	r4, [r2, r3]
 801bd7e:	8901      	ldrh	r1, [r0, #8]
 801bd80:	4561      	cmp	r1, ip
 801bd82:	d8ec      	bhi.n	801bd5e <uxr_reset_input_reliable_stream+0xe>
 801bd84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bd88:	60c3      	str	r3, [r0, #12]
 801bd8a:	bd10      	pop	{r4, pc}
 801bd8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bd90:	60c3      	str	r3, [r0, #12]
 801bd92:	4770      	bx	lr

0801bd94 <uxr_receive_reliable_message>:
 801bd94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bd98:	4604      	mov	r4, r0
 801bd9a:	460d      	mov	r5, r1
 801bd9c:	8901      	ldrh	r1, [r0, #8]
 801bd9e:	4617      	mov	r7, r2
 801bda0:	8980      	ldrh	r0, [r0, #12]
 801bda2:	4698      	mov	r8, r3
 801bda4:	f000 fc8e 	bl	801c6c4 <uxr_seq_num_add>
 801bda8:	4629      	mov	r1, r5
 801bdaa:	4606      	mov	r6, r0
 801bdac:	89a0      	ldrh	r0, [r4, #12]
 801bdae:	f000 fc91 	bl	801c6d4 <uxr_seq_num_cmp>
 801bdb2:	2800      	cmp	r0, #0
 801bdb4:	db0a      	blt.n	801bdcc <uxr_receive_reliable_message+0x38>
 801bdb6:	2600      	movs	r6, #0
 801bdb8:	4629      	mov	r1, r5
 801bdba:	89e0      	ldrh	r0, [r4, #14]
 801bdbc:	f000 fc8a 	bl	801c6d4 <uxr_seq_num_cmp>
 801bdc0:	2800      	cmp	r0, #0
 801bdc2:	da00      	bge.n	801bdc6 <uxr_receive_reliable_message+0x32>
 801bdc4:	81e5      	strh	r5, [r4, #14]
 801bdc6:	4630      	mov	r0, r6
 801bdc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bdcc:	4630      	mov	r0, r6
 801bdce:	4629      	mov	r1, r5
 801bdd0:	f000 fc80 	bl	801c6d4 <uxr_seq_num_cmp>
 801bdd4:	2800      	cmp	r0, #0
 801bdd6:	dbee      	blt.n	801bdb6 <uxr_receive_reliable_message+0x22>
 801bdd8:	6923      	ldr	r3, [r4, #16]
 801bdda:	4638      	mov	r0, r7
 801bddc:	4798      	blx	r3
 801bdde:	4681      	mov	r9, r0
 801bde0:	2101      	movs	r1, #1
 801bde2:	89a0      	ldrh	r0, [r4, #12]
 801bde4:	f000 fc6e 	bl	801c6c4 <uxr_seq_num_add>
 801bde8:	f1b9 0f00 	cmp.w	r9, #0
 801bdec:	bf08      	it	eq
 801bdee:	4285      	cmpeq	r5, r0
 801bdf0:	bf0c      	ite	eq
 801bdf2:	2601      	moveq	r6, #1
 801bdf4:	2600      	movne	r6, #0
 801bdf6:	d104      	bne.n	801be02 <uxr_receive_reliable_message+0x6e>
 801bdf8:	2300      	movs	r3, #0
 801bdfa:	9a08      	ldr	r2, [sp, #32]
 801bdfc:	81a0      	strh	r0, [r4, #12]
 801bdfe:	7013      	strb	r3, [r2, #0]
 801be00:	e7da      	b.n	801bdb8 <uxr_receive_reliable_message+0x24>
 801be02:	8922      	ldrh	r2, [r4, #8]
 801be04:	6863      	ldr	r3, [r4, #4]
 801be06:	fbb5 f0f2 	udiv	r0, r5, r2
 801be0a:	fbb3 f3f2 	udiv	r3, r3, r2
 801be0e:	fb02 5010 	mls	r0, r2, r0, r5
 801be12:	b280      	uxth	r0, r0
 801be14:	fb03 f000 	mul.w	r0, r3, r0
 801be18:	6823      	ldr	r3, [r4, #0]
 801be1a:	3004      	adds	r0, #4
 801be1c:	4418      	add	r0, r3
 801be1e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801be22:	2b00      	cmp	r3, #0
 801be24:	d1c7      	bne.n	801bdb6 <uxr_receive_reliable_message+0x22>
 801be26:	4639      	mov	r1, r7
 801be28:	4642      	mov	r2, r8
 801be2a:	f001 fa62 	bl	801d2f2 <memcpy>
 801be2e:	8921      	ldrh	r1, [r4, #8]
 801be30:	6863      	ldr	r3, [r4, #4]
 801be32:	fbb5 f2f1 	udiv	r2, r5, r1
 801be36:	fbb3 f3f1 	udiv	r3, r3, r1
 801be3a:	fb01 5212 	mls	r2, r1, r2, r5
 801be3e:	b292      	uxth	r2, r2
 801be40:	fb02 f303 	mul.w	r3, r2, r3
 801be44:	6822      	ldr	r2, [r4, #0]
 801be46:	f842 8003 	str.w	r8, [r2, r3]
 801be4a:	2301      	movs	r3, #1
 801be4c:	9a08      	ldr	r2, [sp, #32]
 801be4e:	7013      	strb	r3, [r2, #0]
 801be50:	f1b9 0f00 	cmp.w	r9, #0
 801be54:	d0af      	beq.n	801bdb6 <uxr_receive_reliable_message+0x22>
 801be56:	89a6      	ldrh	r6, [r4, #12]
 801be58:	2101      	movs	r1, #1
 801be5a:	4630      	mov	r0, r6
 801be5c:	f000 fc32 	bl	801c6c4 <uxr_seq_num_add>
 801be60:	8921      	ldrh	r1, [r4, #8]
 801be62:	6863      	ldr	r3, [r4, #4]
 801be64:	4606      	mov	r6, r0
 801be66:	fbb0 f2f1 	udiv	r2, r0, r1
 801be6a:	fbb3 f3f1 	udiv	r3, r3, r1
 801be6e:	fb01 0212 	mls	r2, r1, r2, r0
 801be72:	6820      	ldr	r0, [r4, #0]
 801be74:	b292      	uxth	r2, r2
 801be76:	fb02 f303 	mul.w	r3, r2, r3
 801be7a:	3304      	adds	r3, #4
 801be7c:	4418      	add	r0, r3
 801be7e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801be82:	2b00      	cmp	r3, #0
 801be84:	d097      	beq.n	801bdb6 <uxr_receive_reliable_message+0x22>
 801be86:	6923      	ldr	r3, [r4, #16]
 801be88:	4798      	blx	r3
 801be8a:	2802      	cmp	r0, #2
 801be8c:	d002      	beq.n	801be94 <uxr_receive_reliable_message+0x100>
 801be8e:	2801      	cmp	r0, #1
 801be90:	d0e2      	beq.n	801be58 <uxr_receive_reliable_message+0xc4>
 801be92:	e790      	b.n	801bdb6 <uxr_receive_reliable_message+0x22>
 801be94:	2601      	movs	r6, #1
 801be96:	e78f      	b.n	801bdb8 <uxr_receive_reliable_message+0x24>

0801be98 <uxr_next_input_reliable_buffer_available>:
 801be98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be9c:	4604      	mov	r4, r0
 801be9e:	460f      	mov	r7, r1
 801bea0:	8980      	ldrh	r0, [r0, #12]
 801bea2:	2101      	movs	r1, #1
 801bea4:	4690      	mov	r8, r2
 801bea6:	f000 fc0d 	bl	801c6c4 <uxr_seq_num_add>
 801beaa:	8922      	ldrh	r2, [r4, #8]
 801beac:	6866      	ldr	r6, [r4, #4]
 801beae:	fbb0 f3f2 	udiv	r3, r0, r2
 801beb2:	fbb6 f6f2 	udiv	r6, r6, r2
 801beb6:	fb02 0313 	mls	r3, r2, r3, r0
 801beba:	b29b      	uxth	r3, r3
 801bebc:	fb03 f606 	mul.w	r6, r3, r6
 801bec0:	6823      	ldr	r3, [r4, #0]
 801bec2:	3604      	adds	r6, #4
 801bec4:	441e      	add	r6, r3
 801bec6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801beca:	f1b9 0f00 	cmp.w	r9, #0
 801bece:	d023      	beq.n	801bf18 <uxr_next_input_reliable_buffer_available+0x80>
 801bed0:	4605      	mov	r5, r0
 801bed2:	6923      	ldr	r3, [r4, #16]
 801bed4:	4630      	mov	r0, r6
 801bed6:	4798      	blx	r3
 801bed8:	4682      	mov	sl, r0
 801beda:	b300      	cbz	r0, 801bf1e <uxr_next_input_reliable_buffer_available+0x86>
 801bedc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801bee0:	2101      	movs	r1, #1
 801bee2:	4650      	mov	r0, sl
 801bee4:	f000 fbee 	bl	801c6c4 <uxr_seq_num_add>
 801bee8:	8921      	ldrh	r1, [r4, #8]
 801beea:	4682      	mov	sl, r0
 801beec:	6863      	ldr	r3, [r4, #4]
 801beee:	6820      	ldr	r0, [r4, #0]
 801bef0:	fbba f2f1 	udiv	r2, sl, r1
 801bef4:	fbb3 f3f1 	udiv	r3, r3, r1
 801bef8:	fb01 a212 	mls	r2, r1, r2, sl
 801befc:	b292      	uxth	r2, r2
 801befe:	fb02 f303 	mul.w	r3, r2, r3
 801bf02:	3304      	adds	r3, #4
 801bf04:	4418      	add	r0, r3
 801bf06:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801bf0a:	b12b      	cbz	r3, 801bf18 <uxr_next_input_reliable_buffer_available+0x80>
 801bf0c:	6923      	ldr	r3, [r4, #16]
 801bf0e:	4798      	blx	r3
 801bf10:	2802      	cmp	r0, #2
 801bf12:	d01b      	beq.n	801bf4c <uxr_next_input_reliable_buffer_available+0xb4>
 801bf14:	2801      	cmp	r0, #1
 801bf16:	d0e3      	beq.n	801bee0 <uxr_next_input_reliable_buffer_available+0x48>
 801bf18:	2000      	movs	r0, #0
 801bf1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf1e:	464a      	mov	r2, r9
 801bf20:	4631      	mov	r1, r6
 801bf22:	4638      	mov	r0, r7
 801bf24:	f7f3 ff1e 	bl	800fd64 <ucdr_init_buffer>
 801bf28:	8921      	ldrh	r1, [r4, #8]
 801bf2a:	6863      	ldr	r3, [r4, #4]
 801bf2c:	2001      	movs	r0, #1
 801bf2e:	fbb5 f2f1 	udiv	r2, r5, r1
 801bf32:	fbb3 f3f1 	udiv	r3, r3, r1
 801bf36:	fb01 5212 	mls	r2, r1, r2, r5
 801bf3a:	b292      	uxth	r2, r2
 801bf3c:	fb02 f303 	mul.w	r3, r2, r3
 801bf40:	6822      	ldr	r2, [r4, #0]
 801bf42:	f842 a003 	str.w	sl, [r2, r3]
 801bf46:	81a5      	strh	r5, [r4, #12]
 801bf48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf4c:	8920      	ldrh	r0, [r4, #8]
 801bf4e:	eb06 0108 	add.w	r1, r6, r8
 801bf52:	6863      	ldr	r3, [r4, #4]
 801bf54:	eba9 0208 	sub.w	r2, r9, r8
 801bf58:	fbb5 f6f0 	udiv	r6, r5, r0
 801bf5c:	fbb3 f3f0 	udiv	r3, r3, r0
 801bf60:	fb00 5516 	mls	r5, r0, r6, r5
 801bf64:	2000      	movs	r0, #0
 801bf66:	b2ad      	uxth	r5, r5
 801bf68:	fb03 f505 	mul.w	r5, r3, r5
 801bf6c:	6823      	ldr	r3, [r4, #0]
 801bf6e:	5158      	str	r0, [r3, r5]
 801bf70:	4638      	mov	r0, r7
 801bf72:	f7f3 fef7 	bl	800fd64 <ucdr_init_buffer>
 801bf76:	4638      	mov	r0, r7
 801bf78:	4622      	mov	r2, r4
 801bf7a:	4903      	ldr	r1, [pc, #12]	@ (801bf88 <uxr_next_input_reliable_buffer_available+0xf0>)
 801bf7c:	f7f3 fec6 	bl	800fd0c <ucdr_set_on_full_buffer_callback>
 801bf80:	2001      	movs	r0, #1
 801bf82:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801bf86:	e7c8      	b.n	801bf1a <uxr_next_input_reliable_buffer_available+0x82>
 801bf88:	0801bc99 	.word	0x0801bc99

0801bf8c <uxr_process_heartbeat>:
 801bf8c:	b538      	push	{r3, r4, r5, lr}
 801bf8e:	4611      	mov	r1, r2
 801bf90:	4604      	mov	r4, r0
 801bf92:	89c0      	ldrh	r0, [r0, #14]
 801bf94:	4615      	mov	r5, r2
 801bf96:	f000 fb9d 	bl	801c6d4 <uxr_seq_num_cmp>
 801bf9a:	2800      	cmp	r0, #0
 801bf9c:	bfb8      	it	lt
 801bf9e:	81e5      	strhlt	r5, [r4, #14]
 801bfa0:	bd38      	pop	{r3, r4, r5, pc}
 801bfa2:	bf00      	nop

0801bfa4 <uxr_compute_acknack>:
 801bfa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bfa8:	8903      	ldrh	r3, [r0, #8]
 801bfaa:	4604      	mov	r4, r0
 801bfac:	460f      	mov	r7, r1
 801bfae:	8985      	ldrh	r5, [r0, #12]
 801bfb0:	b1db      	cbz	r3, 801bfea <uxr_compute_acknack+0x46>
 801bfb2:	4628      	mov	r0, r5
 801bfb4:	2601      	movs	r6, #1
 801bfb6:	e004      	b.n	801bfc2 <uxr_compute_acknack+0x1e>
 801bfb8:	4566      	cmp	r6, ip
 801bfba:	f106 0601 	add.w	r6, r6, #1
 801bfbe:	d214      	bcs.n	801bfea <uxr_compute_acknack+0x46>
 801bfc0:	89a0      	ldrh	r0, [r4, #12]
 801bfc2:	b2b1      	uxth	r1, r6
 801bfc4:	f000 fb7e 	bl	801c6c4 <uxr_seq_num_add>
 801bfc8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801bfcc:	fbb0 f2fc 	udiv	r2, r0, ip
 801bfd0:	e9d4 1300 	ldrd	r1, r3, [r4]
 801bfd4:	fb0c 0212 	mls	r2, ip, r2, r0
 801bfd8:	fbb3 f3fc 	udiv	r3, r3, ip
 801bfdc:	b292      	uxth	r2, r2
 801bfde:	fb02 f303 	mul.w	r3, r2, r3
 801bfe2:	58cb      	ldr	r3, [r1, r3]
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	d1e7      	bne.n	801bfb8 <uxr_compute_acknack+0x14>
 801bfe8:	4605      	mov	r5, r0
 801bfea:	803d      	strh	r5, [r7, #0]
 801bfec:	2101      	movs	r1, #1
 801bfee:	89e6      	ldrh	r6, [r4, #14]
 801bff0:	4628      	mov	r0, r5
 801bff2:	f000 fb6b 	bl	801c6cc <uxr_seq_num_sub>
 801bff6:	4601      	mov	r1, r0
 801bff8:	4630      	mov	r0, r6
 801bffa:	f000 fb67 	bl	801c6cc <uxr_seq_num_sub>
 801bffe:	4606      	mov	r6, r0
 801c000:	b328      	cbz	r0, 801c04e <uxr_compute_acknack+0xaa>
 801c002:	f04f 0900 	mov.w	r9, #0
 801c006:	f04f 0801 	mov.w	r8, #1
 801c00a:	464d      	mov	r5, r9
 801c00c:	fa1f f189 	uxth.w	r1, r9
 801c010:	8838      	ldrh	r0, [r7, #0]
 801c012:	f000 fb57 	bl	801c6c4 <uxr_seq_num_add>
 801c016:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801c01a:	6861      	ldr	r1, [r4, #4]
 801c01c:	fa08 fe09 	lsl.w	lr, r8, r9
 801c020:	6822      	ldr	r2, [r4, #0]
 801c022:	f109 0901 	add.w	r9, r9, #1
 801c026:	ea4e 0e05 	orr.w	lr, lr, r5
 801c02a:	fbb0 f3fc 	udiv	r3, r0, ip
 801c02e:	fbb1 f1fc 	udiv	r1, r1, ip
 801c032:	fb03 001c 	mls	r0, r3, ip, r0
 801c036:	b283      	uxth	r3, r0
 801c038:	fb01 f303 	mul.w	r3, r1, r3
 801c03c:	58d3      	ldr	r3, [r2, r3]
 801c03e:	b90b      	cbnz	r3, 801c044 <uxr_compute_acknack+0xa0>
 801c040:	fa1f f58e 	uxth.w	r5, lr
 801c044:	454e      	cmp	r6, r9
 801c046:	d1e1      	bne.n	801c00c <uxr_compute_acknack+0x68>
 801c048:	4628      	mov	r0, r5
 801c04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c04e:	4605      	mov	r5, r0
 801c050:	4628      	mov	r0, r5
 801c052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c056:	bf00      	nop

0801c058 <uxr_init_output_best_effort_stream>:
 801c058:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801c05c:	6001      	str	r1, [r0, #0]
 801c05e:	7303      	strb	r3, [r0, #12]
 801c060:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801c064:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801c068:	4770      	bx	lr
 801c06a:	bf00      	nop

0801c06c <uxr_reset_output_best_effort_stream>:
 801c06c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c070:	7b03      	ldrb	r3, [r0, #12]
 801c072:	81c2      	strh	r2, [r0, #14]
 801c074:	6043      	str	r3, [r0, #4]
 801c076:	4770      	bx	lr

0801c078 <uxr_prepare_best_effort_buffer_to_write>:
 801c078:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c07a:	4604      	mov	r4, r0
 801c07c:	b083      	sub	sp, #12
 801c07e:	6840      	ldr	r0, [r0, #4]
 801c080:	460d      	mov	r5, r1
 801c082:	4616      	mov	r6, r2
 801c084:	f7fd fec0 	bl	8019e08 <uxr_submessage_padding>
 801c088:	6863      	ldr	r3, [r4, #4]
 801c08a:	4418      	add	r0, r3
 801c08c:	68a3      	ldr	r3, [r4, #8]
 801c08e:	1942      	adds	r2, r0, r5
 801c090:	4293      	cmp	r3, r2
 801c092:	bf2c      	ite	cs
 801c094:	2701      	movcs	r7, #1
 801c096:	2700      	movcc	r7, #0
 801c098:	d202      	bcs.n	801c0a0 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801c09a:	4638      	mov	r0, r7
 801c09c:	b003      	add	sp, #12
 801c09e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c0a0:	9000      	str	r0, [sp, #0]
 801c0a2:	2300      	movs	r3, #0
 801c0a4:	4630      	mov	r0, r6
 801c0a6:	6821      	ldr	r1, [r4, #0]
 801c0a8:	f7f3 fe4a 	bl	800fd40 <ucdr_init_buffer_origin_offset>
 801c0ac:	6861      	ldr	r1, [r4, #4]
 801c0ae:	4638      	mov	r0, r7
 801c0b0:	4429      	add	r1, r5
 801c0b2:	6061      	str	r1, [r4, #4]
 801c0b4:	b003      	add	sp, #12
 801c0b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c0b8 <uxr_prepare_best_effort_buffer_to_send>:
 801c0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c0bc:	4604      	mov	r4, r0
 801c0be:	461d      	mov	r5, r3
 801c0c0:	6840      	ldr	r0, [r0, #4]
 801c0c2:	7b23      	ldrb	r3, [r4, #12]
 801c0c4:	4298      	cmp	r0, r3
 801c0c6:	bf8c      	ite	hi
 801c0c8:	2601      	movhi	r6, #1
 801c0ca:	2600      	movls	r6, #0
 801c0cc:	d802      	bhi.n	801c0d4 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801c0ce:	4630      	mov	r0, r6
 801c0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c0d4:	4688      	mov	r8, r1
 801c0d6:	89e0      	ldrh	r0, [r4, #14]
 801c0d8:	2101      	movs	r1, #1
 801c0da:	4617      	mov	r7, r2
 801c0dc:	f000 faf2 	bl	801c6c4 <uxr_seq_num_add>
 801c0e0:	6823      	ldr	r3, [r4, #0]
 801c0e2:	81e0      	strh	r0, [r4, #14]
 801c0e4:	8028      	strh	r0, [r5, #0]
 801c0e6:	4630      	mov	r0, r6
 801c0e8:	f8c8 3000 	str.w	r3, [r8]
 801c0ec:	6863      	ldr	r3, [r4, #4]
 801c0ee:	603b      	str	r3, [r7, #0]
 801c0f0:	7b23      	ldrb	r3, [r4, #12]
 801c0f2:	6063      	str	r3, [r4, #4]
 801c0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c0f8 <on_full_output_buffer>:
 801c0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c0fa:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801c0fe:	460c      	mov	r4, r1
 801c100:	6803      	ldr	r3, [r0, #0]
 801c102:	4605      	mov	r5, r0
 801c104:	7b26      	ldrb	r6, [r4, #12]
 801c106:	e9d1 1200 	ldrd	r1, r2, [r1]
 801c10a:	fbb2 f2fc 	udiv	r2, r2, ip
 801c10e:	eba3 0e01 	sub.w	lr, r3, r1
 801c112:	6903      	ldr	r3, [r0, #16]
 801c114:	fbbe fef2 	udiv	lr, lr, r2
 801c118:	f10e 0e01 	add.w	lr, lr, #1
 801c11c:	fa1f fe8e 	uxth.w	lr, lr
 801c120:	fbbe f7fc 	udiv	r7, lr, ip
 801c124:	fb0c ec17 	mls	ip, ip, r7, lr
 801c128:	fa1f fc8c 	uxth.w	ip, ip
 801c12c:	fb02 fc0c 	mul.w	ip, r2, ip
 801c130:	f851 200c 	ldr.w	r2, [r1, ip]
 801c134:	44b4      	add	ip, r6
 801c136:	1b92      	subs	r2, r2, r6
 801c138:	f10c 0c08 	add.w	ip, ip, #8
 801c13c:	3a04      	subs	r2, #4
 801c13e:	4461      	add	r1, ip
 801c140:	f7f3 fe08 	bl	800fd54 <ucdr_init_buffer_origin>
 801c144:	4628      	mov	r0, r5
 801c146:	4622      	mov	r2, r4
 801c148:	4902      	ldr	r1, [pc, #8]	@ (801c154 <on_full_output_buffer+0x5c>)
 801c14a:	f7f3 fddf 	bl	800fd0c <ucdr_set_on_full_buffer_callback>
 801c14e:	2000      	movs	r0, #0
 801c150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c152:	bf00      	nop
 801c154:	0801c0f9 	.word	0x0801c0f9

0801c158 <uxr_init_output_reliable_stream>:
 801c158:	b530      	push	{r4, r5, lr}
 801c15a:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801c15e:	8103      	strh	r3, [r0, #8]
 801c160:	7304      	strb	r4, [r0, #12]
 801c162:	e9c0 1200 	strd	r1, r2, [r0]
 801c166:	b1e3      	cbz	r3, 801c1a2 <uxr_init_output_reliable_stream+0x4a>
 801c168:	600c      	str	r4, [r1, #0]
 801c16a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801c16e:	f1bc 0f01 	cmp.w	ip, #1
 801c172:	d916      	bls.n	801c1a2 <uxr_init_output_reliable_stream+0x4a>
 801c174:	f04f 0e01 	mov.w	lr, #1
 801c178:	6843      	ldr	r3, [r0, #4]
 801c17a:	f10e 0501 	add.w	r5, lr, #1
 801c17e:	7b04      	ldrb	r4, [r0, #12]
 801c180:	6801      	ldr	r1, [r0, #0]
 801c182:	fbbe f2fc 	udiv	r2, lr, ip
 801c186:	fbb3 f3fc 	udiv	r3, r3, ip
 801c18a:	fb0c e212 	mls	r2, ip, r2, lr
 801c18e:	fa1f fe85 	uxth.w	lr, r5
 801c192:	b292      	uxth	r2, r2
 801c194:	fb02 f303 	mul.w	r3, r2, r3
 801c198:	50cc      	str	r4, [r1, r3]
 801c19a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801c19e:	45f4      	cmp	ip, lr
 801c1a0:	d8ea      	bhi.n	801c178 <uxr_init_output_reliable_stream+0x20>
 801c1a2:	4b07      	ldr	r3, [pc, #28]	@ (801c1c0 <uxr_init_output_reliable_stream+0x68>)
 801c1a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c1a8:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801c1ac:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 801c1b0:	f8c0 300e 	str.w	r3, [r0, #14]
 801c1b4:	2300      	movs	r3, #0
 801c1b6:	8242      	strh	r2, [r0, #18]
 801c1b8:	8403      	strh	r3, [r0, #32]
 801c1ba:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801c1be:	bd30      	pop	{r4, r5, pc}
 801c1c0:	ffff0000 	.word	0xffff0000
 801c1c4:	00000000 	.word	0x00000000

0801c1c8 <uxr_reset_output_reliable_stream>:
 801c1c8:	8901      	ldrh	r1, [r0, #8]
 801c1ca:	b510      	push	{r4, lr}
 801c1cc:	b1b1      	cbz	r1, 801c1fc <uxr_reset_output_reliable_stream+0x34>
 801c1ce:	f04f 0e00 	mov.w	lr, #0
 801c1d2:	46f4      	mov	ip, lr
 801c1d4:	6843      	ldr	r3, [r0, #4]
 801c1d6:	f10e 0e01 	add.w	lr, lr, #1
 801c1da:	7b04      	ldrb	r4, [r0, #12]
 801c1dc:	fbbc f2f1 	udiv	r2, ip, r1
 801c1e0:	fbb3 f3f1 	udiv	r3, r3, r1
 801c1e4:	fb01 c212 	mls	r2, r1, r2, ip
 801c1e8:	fa1f fc8e 	uxth.w	ip, lr
 801c1ec:	b292      	uxth	r2, r2
 801c1ee:	fb02 f303 	mul.w	r3, r2, r3
 801c1f2:	6802      	ldr	r2, [r0, #0]
 801c1f4:	50d4      	str	r4, [r2, r3]
 801c1f6:	8901      	ldrh	r1, [r0, #8]
 801c1f8:	4561      	cmp	r1, ip
 801c1fa:	d8eb      	bhi.n	801c1d4 <uxr_reset_output_reliable_stream+0xc>
 801c1fc:	4b08      	ldr	r3, [pc, #32]	@ (801c220 <uxr_reset_output_reliable_stream+0x58>)
 801c1fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c202:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 801c218 <uxr_reset_output_reliable_stream+0x50>
 801c206:	f8c0 300e 	str.w	r3, [r0, #14]
 801c20a:	2300      	movs	r3, #0
 801c20c:	8242      	strh	r2, [r0, #18]
 801c20e:	8403      	strh	r3, [r0, #32]
 801c210:	ed80 7b06 	vstr	d7, [r0, #24]
 801c214:	bd10      	pop	{r4, pc}
 801c216:	bf00      	nop
 801c218:	ffffffff 	.word	0xffffffff
 801c21c:	7fffffff 	.word	0x7fffffff
 801c220:	ffff0000 	.word	0xffff0000

0801c224 <uxr_prepare_reliable_buffer_to_write>:
 801c224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c228:	4604      	mov	r4, r0
 801c22a:	b091      	sub	sp, #68	@ 0x44
 801c22c:	8900      	ldrh	r0, [r0, #8]
 801c22e:	468b      	mov	fp, r1
 801c230:	89e6      	ldrh	r6, [r4, #14]
 801c232:	9204      	str	r2, [sp, #16]
 801c234:	6865      	ldr	r5, [r4, #4]
 801c236:	6823      	ldr	r3, [r4, #0]
 801c238:	f894 900c 	ldrb.w	r9, [r4, #12]
 801c23c:	fbb6 f2f0 	udiv	r2, r6, r0
 801c240:	fbb5 f5f0 	udiv	r5, r5, r0
 801c244:	fb00 6212 	mls	r2, r0, r2, r6
 801c248:	1f2f      	subs	r7, r5, #4
 801c24a:	b292      	uxth	r2, r2
 801c24c:	fb05 3202 	mla	r2, r5, r2, r3
 801c250:	1d11      	adds	r1, r2, #4
 801c252:	f8d2 8000 	ldr.w	r8, [r2]
 801c256:	9103      	str	r1, [sp, #12]
 801c258:	2800      	cmp	r0, #0
 801c25a:	f000 814a 	beq.w	801c4f2 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801c25e:	f04f 0c00 	mov.w	ip, #0
 801c262:	46e2      	mov	sl, ip
 801c264:	4661      	mov	r1, ip
 801c266:	f10c 0c01 	add.w	ip, ip, #1
 801c26a:	fbb1 f2f0 	udiv	r2, r1, r0
 801c26e:	fb00 1212 	mls	r2, r0, r2, r1
 801c272:	fa1f f18c 	uxth.w	r1, ip
 801c276:	b292      	uxth	r2, r2
 801c278:	fb05 f202 	mul.w	r2, r5, r2
 801c27c:	589a      	ldr	r2, [r3, r2]
 801c27e:	454a      	cmp	r2, r9
 801c280:	d103      	bne.n	801c28a <uxr_prepare_reliable_buffer_to_write+0x66>
 801c282:	f10a 0a01 	add.w	sl, sl, #1
 801c286:	fa1f fa8a 	uxth.w	sl, sl
 801c28a:	4281      	cmp	r1, r0
 801c28c:	d3eb      	bcc.n	801c266 <uxr_prepare_reliable_buffer_to_write+0x42>
 801c28e:	4640      	mov	r0, r8
 801c290:	2104      	movs	r1, #4
 801c292:	f8cd a014 	str.w	sl, [sp, #20]
 801c296:	f7f3 fd69 	bl	800fd6c <ucdr_alignment>
 801c29a:	4480      	add	r8, r0
 801c29c:	eb08 020b 	add.w	r2, r8, fp
 801c2a0:	42ba      	cmp	r2, r7
 801c2a2:	f240 80ca 	bls.w	801c43a <uxr_prepare_reliable_buffer_to_write+0x216>
 801c2a6:	7b22      	ldrb	r2, [r4, #12]
 801c2a8:	445a      	add	r2, fp
 801c2aa:	42ba      	cmp	r2, r7
 801c2ac:	f240 80b2 	bls.w	801c414 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801c2b0:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801c2b4:	b2bb      	uxth	r3, r7
 801c2b6:	eba2 0209 	sub.w	r2, r2, r9
 801c2ba:	441a      	add	r2, r3
 801c2bc:	b292      	uxth	r2, r2
 801c2be:	fb0a f902 	mul.w	r9, sl, r2
 801c2c2:	9205      	str	r2, [sp, #20]
 801c2c4:	45d9      	cmp	r9, fp
 801c2c6:	9206      	str	r2, [sp, #24]
 801c2c8:	f0c0 80b3 	bcc.w	801c432 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801c2cc:	f108 0204 	add.w	r2, r8, #4
 801c2d0:	42ba      	cmp	r2, r7
 801c2d2:	f080 80da 	bcs.w	801c48a <uxr_prepare_reliable_buffer_to_write+0x266>
 801c2d6:	f1a3 0904 	sub.w	r9, r3, #4
 801c2da:	9b05      	ldr	r3, [sp, #20]
 801c2dc:	eba9 0908 	sub.w	r9, r9, r8
 801c2e0:	fa1f f989 	uxth.w	r9, r9
 801c2e4:	ebab 0b09 	sub.w	fp, fp, r9
 801c2e8:	fbbb f2f3 	udiv	r2, fp, r3
 801c2ec:	fb03 b312 	mls	r3, r3, r2, fp
 801c2f0:	2b00      	cmp	r3, #0
 801c2f2:	f040 80c4 	bne.w	801c47e <uxr_prepare_reliable_buffer_to_write+0x25a>
 801c2f6:	b293      	uxth	r3, r2
 801c2f8:	4553      	cmp	r3, sl
 801c2fa:	f200 809a 	bhi.w	801c432 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801c2fe:	2b00      	cmp	r3, #0
 801c300:	f000 80f9 	beq.w	801c4f6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801c304:	f8cd 801c 	str.w	r8, [sp, #28]
 801c308:	f04f 0a00 	mov.w	sl, #0
 801c30c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801c310:	f10d 0b20 	add.w	fp, sp, #32
 801c314:	9505      	str	r5, [sp, #20]
 801c316:	461d      	mov	r5, r3
 801c318:	e000      	b.n	801c31c <uxr_prepare_reliable_buffer_to_write+0xf8>
 801c31a:	46c1      	mov	r9, r8
 801c31c:	8922      	ldrh	r2, [r4, #8]
 801c31e:	4658      	mov	r0, fp
 801c320:	6863      	ldr	r3, [r4, #4]
 801c322:	f10a 0a01 	add.w	sl, sl, #1
 801c326:	fbb6 f1f2 	udiv	r1, r6, r2
 801c32a:	fbb3 f3f2 	udiv	r3, r3, r2
 801c32e:	fb02 6111 	mls	r1, r2, r1, r6
 801c332:	463a      	mov	r2, r7
 801c334:	b289      	uxth	r1, r1
 801c336:	fb03 f101 	mul.w	r1, r3, r1
 801c33a:	6823      	ldr	r3, [r4, #0]
 801c33c:	3104      	adds	r1, #4
 801c33e:	4419      	add	r1, r3
 801c340:	2300      	movs	r3, #0
 801c342:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801c346:	f8cd c000 	str.w	ip, [sp]
 801c34a:	f7f3 fcf9 	bl	800fd40 <ucdr_init_buffer_origin_offset>
 801c34e:	464a      	mov	r2, r9
 801c350:	2300      	movs	r3, #0
 801c352:	210d      	movs	r1, #13
 801c354:	4658      	mov	r0, fp
 801c356:	f7fd fd17 	bl	8019d88 <uxr_buffer_submessage_header>
 801c35a:	8921      	ldrh	r1, [r4, #8]
 801c35c:	6863      	ldr	r3, [r4, #4]
 801c35e:	4630      	mov	r0, r6
 801c360:	fbb6 f2f1 	udiv	r2, r6, r1
 801c364:	fbb3 f3f1 	udiv	r3, r3, r1
 801c368:	fb01 6212 	mls	r2, r1, r2, r6
 801c36c:	2101      	movs	r1, #1
 801c36e:	b292      	uxth	r2, r2
 801c370:	fb02 f303 	mul.w	r3, r2, r3
 801c374:	6822      	ldr	r2, [r4, #0]
 801c376:	50d7      	str	r7, [r2, r3]
 801c378:	f000 f9a4 	bl	801c6c4 <uxr_seq_num_add>
 801c37c:	4606      	mov	r6, r0
 801c37e:	fa1f f38a 	uxth.w	r3, sl
 801c382:	429d      	cmp	r5, r3
 801c384:	d8c9      	bhi.n	801c31a <uxr_prepare_reliable_buffer_to_write+0xf6>
 801c386:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801c38a:	9d05      	ldr	r5, [sp, #20]
 801c38c:	8920      	ldrh	r0, [r4, #8]
 801c38e:	463a      	mov	r2, r7
 801c390:	6863      	ldr	r3, [r4, #4]
 801c392:	fbb6 f1f0 	udiv	r1, r6, r0
 801c396:	fbb3 f3f0 	udiv	r3, r3, r0
 801c39a:	fb00 6111 	mls	r1, r0, r1, r6
 801c39e:	4658      	mov	r0, fp
 801c3a0:	b289      	uxth	r1, r1
 801c3a2:	fb01 f303 	mul.w	r3, r1, r3
 801c3a6:	6821      	ldr	r1, [r4, #0]
 801c3a8:	3304      	adds	r3, #4
 801c3aa:	4419      	add	r1, r3
 801c3ac:	2300      	movs	r3, #0
 801c3ae:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801c3b2:	9700      	str	r7, [sp, #0]
 801c3b4:	f7f3 fcc4 	bl	800fd40 <ucdr_init_buffer_origin_offset>
 801c3b8:	9f06      	ldr	r7, [sp, #24]
 801c3ba:	4658      	mov	r0, fp
 801c3bc:	2302      	movs	r3, #2
 801c3be:	b2ba      	uxth	r2, r7
 801c3c0:	210d      	movs	r1, #13
 801c3c2:	f7fd fce1 	bl	8019d88 <uxr_buffer_submessage_header>
 801c3c6:	f108 0104 	add.w	r1, r8, #4
 801c3ca:	9b03      	ldr	r3, [sp, #12]
 801c3cc:	f1a5 0208 	sub.w	r2, r5, #8
 801c3d0:	8925      	ldrh	r5, [r4, #8]
 801c3d2:	440b      	add	r3, r1
 801c3d4:	eba2 0208 	sub.w	r2, r2, r8
 801c3d8:	fbb6 f0f5 	udiv	r0, r6, r5
 801c3dc:	4619      	mov	r1, r3
 801c3de:	6863      	ldr	r3, [r4, #4]
 801c3e0:	fb05 6010 	mls	r0, r5, r0, r6
 801c3e4:	fbb3 f3f5 	udiv	r3, r3, r5
 801c3e8:	b280      	uxth	r0, r0
 801c3ea:	6825      	ldr	r5, [r4, #0]
 801c3ec:	fb00 f303 	mul.w	r3, r0, r3
 801c3f0:	7b20      	ldrb	r0, [r4, #12]
 801c3f2:	3004      	adds	r0, #4
 801c3f4:	4438      	add	r0, r7
 801c3f6:	50e8      	str	r0, [r5, r3]
 801c3f8:	9d04      	ldr	r5, [sp, #16]
 801c3fa:	4628      	mov	r0, r5
 801c3fc:	f7f3 fcb2 	bl	800fd64 <ucdr_init_buffer>
 801c400:	4628      	mov	r0, r5
 801c402:	4622      	mov	r2, r4
 801c404:	493d      	ldr	r1, [pc, #244]	@ (801c4fc <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801c406:	f7f3 fc81 	bl	800fd0c <ucdr_set_on_full_buffer_callback>
 801c40a:	2001      	movs	r0, #1
 801c40c:	81e6      	strh	r6, [r4, #14]
 801c40e:	b011      	add	sp, #68	@ 0x44
 801c410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c414:	2101      	movs	r1, #1
 801c416:	89e0      	ldrh	r0, [r4, #14]
 801c418:	f000 f954 	bl	801c6c4 <uxr_seq_num_add>
 801c41c:	4605      	mov	r5, r0
 801c41e:	8921      	ldrh	r1, [r4, #8]
 801c420:	8a60      	ldrh	r0, [r4, #18]
 801c422:	f000 f94f 	bl	801c6c4 <uxr_seq_num_add>
 801c426:	4601      	mov	r1, r0
 801c428:	4628      	mov	r0, r5
 801c42a:	f000 f953 	bl	801c6d4 <uxr_seq_num_cmp>
 801c42e:	2800      	cmp	r0, #0
 801c430:	dd44      	ble.n	801c4bc <uxr_prepare_reliable_buffer_to_write+0x298>
 801c432:	2000      	movs	r0, #0
 801c434:	b011      	add	sp, #68	@ 0x44
 801c436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c43a:	8921      	ldrh	r1, [r4, #8]
 801c43c:	8a60      	ldrh	r0, [r4, #18]
 801c43e:	9205      	str	r2, [sp, #20]
 801c440:	f000 f940 	bl	801c6c4 <uxr_seq_num_add>
 801c444:	4601      	mov	r1, r0
 801c446:	4630      	mov	r0, r6
 801c448:	f000 f944 	bl	801c6d4 <uxr_seq_num_cmp>
 801c44c:	2800      	cmp	r0, #0
 801c44e:	9a05      	ldr	r2, [sp, #20]
 801c450:	dcef      	bgt.n	801c432 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801c452:	8925      	ldrh	r5, [r4, #8]
 801c454:	e9d4 7300 	ldrd	r7, r3, [r4]
 801c458:	fbb6 f4f5 	udiv	r4, r6, r5
 801c45c:	fbb3 f3f5 	udiv	r3, r3, r5
 801c460:	fb05 6414 	mls	r4, r5, r4, r6
 801c464:	b2a4      	uxth	r4, r4
 801c466:	fb04 f303 	mul.w	r3, r4, r3
 801c46a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801c46e:	50fa      	str	r2, [r7, r3]
 801c470:	2300      	movs	r3, #0
 801c472:	f8cd 8000 	str.w	r8, [sp]
 801c476:	f7f3 fc63 	bl	800fd40 <ucdr_init_buffer_origin_offset>
 801c47a:	2001      	movs	r0, #1
 801c47c:	e7da      	b.n	801c434 <uxr_prepare_reliable_buffer_to_write+0x210>
 801c47e:	3201      	adds	r2, #1
 801c480:	9306      	str	r3, [sp, #24]
 801c482:	b293      	uxth	r3, r2
 801c484:	4553      	cmp	r3, sl
 801c486:	d8d4      	bhi.n	801c432 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801c488:	e739      	b.n	801c2fe <uxr_prepare_reliable_buffer_to_write+0xda>
 801c48a:	4630      	mov	r0, r6
 801c48c:	2101      	movs	r1, #1
 801c48e:	9307      	str	r3, [sp, #28]
 801c490:	f000 f918 	bl	801c6c4 <uxr_seq_num_add>
 801c494:	4606      	mov	r6, r0
 801c496:	8920      	ldrh	r0, [r4, #8]
 801c498:	6862      	ldr	r2, [r4, #4]
 801c49a:	fbb6 f1f0 	udiv	r1, r6, r0
 801c49e:	fbb2 f2f0 	udiv	r2, r2, r0
 801c4a2:	fb00 6111 	mls	r1, r0, r1, r6
 801c4a6:	b289      	uxth	r1, r1
 801c4a8:	fb01 f202 	mul.w	r2, r1, r2
 801c4ac:	6821      	ldr	r1, [r4, #0]
 801c4ae:	3204      	adds	r2, #4
 801c4b0:	188b      	adds	r3, r1, r2
 801c4b2:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801c4b6:	9303      	str	r3, [sp, #12]
 801c4b8:	9b07      	ldr	r3, [sp, #28]
 801c4ba:	e70c      	b.n	801c2d6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801c4bc:	8921      	ldrh	r1, [r4, #8]
 801c4be:	6863      	ldr	r3, [r4, #4]
 801c4c0:	9804      	ldr	r0, [sp, #16]
 801c4c2:	fbb5 f2f1 	udiv	r2, r5, r1
 801c4c6:	fbb3 f3f1 	udiv	r3, r3, r1
 801c4ca:	fb01 5212 	mls	r2, r1, r2, r5
 801c4ce:	6821      	ldr	r1, [r4, #0]
 801c4d0:	b292      	uxth	r2, r2
 801c4d2:	fb02 f303 	mul.w	r3, r2, r3
 801c4d6:	7b22      	ldrb	r2, [r4, #12]
 801c4d8:	3304      	adds	r3, #4
 801c4da:	445a      	add	r2, fp
 801c4dc:	4419      	add	r1, r3
 801c4de:	f841 2c04 	str.w	r2, [r1, #-4]
 801c4e2:	7b23      	ldrb	r3, [r4, #12]
 801c4e4:	9300      	str	r3, [sp, #0]
 801c4e6:	2300      	movs	r3, #0
 801c4e8:	f7f3 fc2a 	bl	800fd40 <ucdr_init_buffer_origin_offset>
 801c4ec:	2001      	movs	r0, #1
 801c4ee:	81e5      	strh	r5, [r4, #14]
 801c4f0:	e7a0      	b.n	801c434 <uxr_prepare_reliable_buffer_to_write+0x210>
 801c4f2:	4682      	mov	sl, r0
 801c4f4:	e6cb      	b.n	801c28e <uxr_prepare_reliable_buffer_to_write+0x6a>
 801c4f6:	f10d 0b20 	add.w	fp, sp, #32
 801c4fa:	e747      	b.n	801c38c <uxr_prepare_reliable_buffer_to_write+0x168>
 801c4fc:	0801c0f9 	.word	0x0801c0f9

0801c500 <uxr_prepare_next_reliable_buffer_to_send>:
 801c500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c502:	4604      	mov	r4, r0
 801c504:	461d      	mov	r5, r3
 801c506:	460f      	mov	r7, r1
 801c508:	8a00      	ldrh	r0, [r0, #16]
 801c50a:	2101      	movs	r1, #1
 801c50c:	4616      	mov	r6, r2
 801c50e:	f000 f8d9 	bl	801c6c4 <uxr_seq_num_add>
 801c512:	8028      	strh	r0, [r5, #0]
 801c514:	8922      	ldrh	r2, [r4, #8]
 801c516:	6863      	ldr	r3, [r4, #4]
 801c518:	fbb0 f1f2 	udiv	r1, r0, r2
 801c51c:	fbb3 f3f2 	udiv	r3, r3, r2
 801c520:	fb02 0c11 	mls	ip, r2, r1, r0
 801c524:	89e1      	ldrh	r1, [r4, #14]
 801c526:	fa1f fc8c 	uxth.w	ip, ip
 801c52a:	fb0c fc03 	mul.w	ip, ip, r3
 801c52e:	6823      	ldr	r3, [r4, #0]
 801c530:	f10c 0c04 	add.w	ip, ip, #4
 801c534:	4463      	add	r3, ip
 801c536:	603b      	str	r3, [r7, #0]
 801c538:	6823      	ldr	r3, [r4, #0]
 801c53a:	449c      	add	ip, r3
 801c53c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801c540:	6033      	str	r3, [r6, #0]
 801c542:	f000 f8c7 	bl	801c6d4 <uxr_seq_num_cmp>
 801c546:	2800      	cmp	r0, #0
 801c548:	dd01      	ble.n	801c54e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801c54a:	2000      	movs	r0, #0
 801c54c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c54e:	7b23      	ldrb	r3, [r4, #12]
 801c550:	6832      	ldr	r2, [r6, #0]
 801c552:	429a      	cmp	r2, r3
 801c554:	d9f9      	bls.n	801c54a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801c556:	8a61      	ldrh	r1, [r4, #18]
 801c558:	8a20      	ldrh	r0, [r4, #16]
 801c55a:	f000 f8b7 	bl	801c6cc <uxr_seq_num_sub>
 801c55e:	8923      	ldrh	r3, [r4, #8]
 801c560:	4283      	cmp	r3, r0
 801c562:	d0f2      	beq.n	801c54a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801c564:	8828      	ldrh	r0, [r5, #0]
 801c566:	89e3      	ldrh	r3, [r4, #14]
 801c568:	8220      	strh	r0, [r4, #16]
 801c56a:	4298      	cmp	r0, r3
 801c56c:	d001      	beq.n	801c572 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801c56e:	2001      	movs	r0, #1
 801c570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c572:	2101      	movs	r1, #1
 801c574:	f000 f8a6 	bl	801c6c4 <uxr_seq_num_add>
 801c578:	4603      	mov	r3, r0
 801c57a:	2001      	movs	r0, #1
 801c57c:	81e3      	strh	r3, [r4, #14]
 801c57e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c580 <uxr_update_output_stream_heartbeat_timestamp>:
 801c580:	b570      	push	{r4, r5, r6, lr}
 801c582:	8a01      	ldrh	r1, [r0, #16]
 801c584:	4604      	mov	r4, r0
 801c586:	8a40      	ldrh	r0, [r0, #18]
 801c588:	4615      	mov	r5, r2
 801c58a:	461e      	mov	r6, r3
 801c58c:	f000 f8a2 	bl	801c6d4 <uxr_seq_num_cmp>
 801c590:	2800      	cmp	r0, #0
 801c592:	db07      	blt.n	801c5a4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801c594:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c598:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c59c:	2000      	movs	r0, #0
 801c59e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801c5a2:	bd70      	pop	{r4, r5, r6, pc}
 801c5a4:	f894 0020 	ldrb.w	r0, [r4, #32]
 801c5a8:	b940      	cbnz	r0, 801c5bc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801c5aa:	2301      	movs	r3, #1
 801c5ac:	f884 3020 	strb.w	r3, [r4, #32]
 801c5b0:	3564      	adds	r5, #100	@ 0x64
 801c5b2:	f146 0600 	adc.w	r6, r6, #0
 801c5b6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801c5ba:	bd70      	pop	{r4, r5, r6, pc}
 801c5bc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801c5c0:	4295      	cmp	r5, r2
 801c5c2:	eb76 0303 	sbcs.w	r3, r6, r3
 801c5c6:	db04      	blt.n	801c5d2 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801c5c8:	1c43      	adds	r3, r0, #1
 801c5ca:	2001      	movs	r0, #1
 801c5cc:	f884 3020 	strb.w	r3, [r4, #32]
 801c5d0:	e7ee      	b.n	801c5b0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801c5d2:	2000      	movs	r0, #0
 801c5d4:	e7ec      	b.n	801c5b0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801c5d6:	bf00      	nop

0801c5d8 <uxr_begin_output_nack_buffer_it>:
 801c5d8:	8a40      	ldrh	r0, [r0, #18]
 801c5da:	4770      	bx	lr

0801c5dc <uxr_next_reliable_nack_buffer_to_send>:
 801c5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c5e0:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 801c5e4:	b197      	cbz	r7, 801c60c <uxr_next_reliable_nack_buffer_to_send+0x30>
 801c5e6:	4680      	mov	r8, r0
 801c5e8:	460d      	mov	r5, r1
 801c5ea:	4616      	mov	r6, r2
 801c5ec:	461c      	mov	r4, r3
 801c5ee:	8818      	ldrh	r0, [r3, #0]
 801c5f0:	2101      	movs	r1, #1
 801c5f2:	f000 f867 	bl	801c6c4 <uxr_seq_num_add>
 801c5f6:	8020      	strh	r0, [r4, #0]
 801c5f8:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801c5fc:	f000 f86a 	bl	801c6d4 <uxr_seq_num_cmp>
 801c600:	2800      	cmp	r0, #0
 801c602:	dd06      	ble.n	801c612 <uxr_next_reliable_nack_buffer_to_send+0x36>
 801c604:	2300      	movs	r3, #0
 801c606:	461f      	mov	r7, r3
 801c608:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 801c60c:	4638      	mov	r0, r7
 801c60e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c612:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801c616:	8820      	ldrh	r0, [r4, #0]
 801c618:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801c61c:	fbb0 f3f2 	udiv	r3, r0, r2
 801c620:	fbb1 fcf2 	udiv	ip, r1, r2
 801c624:	fb02 0313 	mls	r3, r2, r3, r0
 801c628:	b29b      	uxth	r3, r3
 801c62a:	fb03 fc0c 	mul.w	ip, r3, ip
 801c62e:	f8d8 3000 	ldr.w	r3, [r8]
 801c632:	f10c 0c04 	add.w	ip, ip, #4
 801c636:	4463      	add	r3, ip
 801c638:	602b      	str	r3, [r5, #0]
 801c63a:	f8d8 3000 	ldr.w	r3, [r8]
 801c63e:	4463      	add	r3, ip
 801c640:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801c644:	6033      	str	r3, [r6, #0]
 801c646:	f898 200c 	ldrb.w	r2, [r8, #12]
 801c64a:	429a      	cmp	r2, r3
 801c64c:	d0d0      	beq.n	801c5f0 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801c64e:	e7dd      	b.n	801c60c <uxr_next_reliable_nack_buffer_to_send+0x30>

0801c650 <uxr_process_acknack>:
 801c650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c652:	4604      	mov	r4, r0
 801c654:	460e      	mov	r6, r1
 801c656:	4610      	mov	r0, r2
 801c658:	2101      	movs	r1, #1
 801c65a:	f000 f837 	bl	801c6cc <uxr_seq_num_sub>
 801c65e:	8a61      	ldrh	r1, [r4, #18]
 801c660:	f000 f834 	bl	801c6cc <uxr_seq_num_sub>
 801c664:	b1c8      	cbz	r0, 801c69a <uxr_process_acknack+0x4a>
 801c666:	4605      	mov	r5, r0
 801c668:	2700      	movs	r7, #0
 801c66a:	2101      	movs	r1, #1
 801c66c:	8a60      	ldrh	r0, [r4, #18]
 801c66e:	f000 f829 	bl	801c6c4 <uxr_seq_num_add>
 801c672:	8923      	ldrh	r3, [r4, #8]
 801c674:	6862      	ldr	r2, [r4, #4]
 801c676:	3701      	adds	r7, #1
 801c678:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801c67c:	6821      	ldr	r1, [r4, #0]
 801c67e:	42bd      	cmp	r5, r7
 801c680:	8260      	strh	r0, [r4, #18]
 801c682:	fbb0 fef3 	udiv	lr, r0, r3
 801c686:	fbb2 f2f3 	udiv	r2, r2, r3
 801c68a:	fb03 031e 	mls	r3, r3, lr, r0
 801c68e:	b29b      	uxth	r3, r3
 801c690:	fb02 f303 	mul.w	r3, r2, r3
 801c694:	f841 c003 	str.w	ip, [r1, r3]
 801c698:	d1e7      	bne.n	801c66a <uxr_process_acknack+0x1a>
 801c69a:	3e00      	subs	r6, #0
 801c69c:	f04f 0300 	mov.w	r3, #0
 801c6a0:	bf18      	it	ne
 801c6a2:	2601      	movne	r6, #1
 801c6a4:	f884 3020 	strb.w	r3, [r4, #32]
 801c6a8:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801c6ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c6ae:	bf00      	nop

0801c6b0 <uxr_is_output_up_to_date>:
 801c6b0:	8a01      	ldrh	r1, [r0, #16]
 801c6b2:	8a40      	ldrh	r0, [r0, #18]
 801c6b4:	b508      	push	{r3, lr}
 801c6b6:	f000 f80d 	bl	801c6d4 <uxr_seq_num_cmp>
 801c6ba:	fab0 f080 	clz	r0, r0
 801c6be:	0940      	lsrs	r0, r0, #5
 801c6c0:	bd08      	pop	{r3, pc}
 801c6c2:	bf00      	nop

0801c6c4 <uxr_seq_num_add>:
 801c6c4:	4408      	add	r0, r1
 801c6c6:	b280      	uxth	r0, r0
 801c6c8:	4770      	bx	lr
 801c6ca:	bf00      	nop

0801c6cc <uxr_seq_num_sub>:
 801c6cc:	1a40      	subs	r0, r0, r1
 801c6ce:	b280      	uxth	r0, r0
 801c6d0:	4770      	bx	lr
 801c6d2:	bf00      	nop

0801c6d4 <uxr_seq_num_cmp>:
 801c6d4:	4288      	cmp	r0, r1
 801c6d6:	d011      	beq.n	801c6fc <uxr_seq_num_cmp+0x28>
 801c6d8:	d309      	bcc.n	801c6ee <uxr_seq_num_cmp+0x1a>
 801c6da:	4288      	cmp	r0, r1
 801c6dc:	d910      	bls.n	801c700 <uxr_seq_num_cmp+0x2c>
 801c6de:	1a40      	subs	r0, r0, r1
 801c6e0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801c6e4:	bfd4      	ite	le
 801c6e6:	2001      	movle	r0, #1
 801c6e8:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801c6ec:	4770      	bx	lr
 801c6ee:	1a0b      	subs	r3, r1, r0
 801c6f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801c6f4:	daf1      	bge.n	801c6da <uxr_seq_num_cmp+0x6>
 801c6f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c6fa:	4770      	bx	lr
 801c6fc:	2000      	movs	r0, #0
 801c6fe:	4770      	bx	lr
 801c700:	2001      	movs	r0, #1
 801c702:	4770      	bx	lr

0801c704 <calloc>:
 801c704:	4b02      	ldr	r3, [pc, #8]	@ (801c710 <calloc+0xc>)
 801c706:	460a      	mov	r2, r1
 801c708:	4601      	mov	r1, r0
 801c70a:	6818      	ldr	r0, [r3, #0]
 801c70c:	f000 b802 	b.w	801c714 <_calloc_r>
 801c710:	240013a0 	.word	0x240013a0

0801c714 <_calloc_r>:
 801c714:	b570      	push	{r4, r5, r6, lr}
 801c716:	fba1 5402 	umull	r5, r4, r1, r2
 801c71a:	b93c      	cbnz	r4, 801c72c <_calloc_r+0x18>
 801c71c:	4629      	mov	r1, r5
 801c71e:	f000 f899 	bl	801c854 <_malloc_r>
 801c722:	4606      	mov	r6, r0
 801c724:	b928      	cbnz	r0, 801c732 <_calloc_r+0x1e>
 801c726:	2600      	movs	r6, #0
 801c728:	4630      	mov	r0, r6
 801c72a:	bd70      	pop	{r4, r5, r6, pc}
 801c72c:	220c      	movs	r2, #12
 801c72e:	6002      	str	r2, [r0, #0]
 801c730:	e7f9      	b.n	801c726 <_calloc_r+0x12>
 801c732:	462a      	mov	r2, r5
 801c734:	4621      	mov	r1, r4
 801c736:	f000 fcbd 	bl	801d0b4 <memset>
 801c73a:	e7f5      	b.n	801c728 <_calloc_r+0x14>

0801c73c <exit>:
 801c73c:	b508      	push	{r3, lr}
 801c73e:	4b06      	ldr	r3, [pc, #24]	@ (801c758 <exit+0x1c>)
 801c740:	4604      	mov	r4, r0
 801c742:	b113      	cbz	r3, 801c74a <exit+0xe>
 801c744:	2100      	movs	r1, #0
 801c746:	f3af 8000 	nop.w
 801c74a:	4b04      	ldr	r3, [pc, #16]	@ (801c75c <exit+0x20>)
 801c74c:	681b      	ldr	r3, [r3, #0]
 801c74e:	b103      	cbz	r3, 801c752 <exit+0x16>
 801c750:	4798      	blx	r3
 801c752:	4620      	mov	r0, r4
 801c754:	f7e5 fa6a 	bl	8001c2c <_exit>
 801c758:	00000000 	.word	0x00000000
 801c75c:	240694e4 	.word	0x240694e4

0801c760 <getenv>:
 801c760:	b507      	push	{r0, r1, r2, lr}
 801c762:	4b04      	ldr	r3, [pc, #16]	@ (801c774 <getenv+0x14>)
 801c764:	4601      	mov	r1, r0
 801c766:	aa01      	add	r2, sp, #4
 801c768:	6818      	ldr	r0, [r3, #0]
 801c76a:	f000 f805 	bl	801c778 <_findenv_r>
 801c76e:	b003      	add	sp, #12
 801c770:	f85d fb04 	ldr.w	pc, [sp], #4
 801c774:	240013a0 	.word	0x240013a0

0801c778 <_findenv_r>:
 801c778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c77c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801c7ec <_findenv_r+0x74>
 801c780:	4606      	mov	r6, r0
 801c782:	4689      	mov	r9, r1
 801c784:	4617      	mov	r7, r2
 801c786:	f000 fde1 	bl	801d34c <__env_lock>
 801c78a:	f8da 4000 	ldr.w	r4, [sl]
 801c78e:	b134      	cbz	r4, 801c79e <_findenv_r+0x26>
 801c790:	464b      	mov	r3, r9
 801c792:	4698      	mov	r8, r3
 801c794:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c798:	b13a      	cbz	r2, 801c7aa <_findenv_r+0x32>
 801c79a:	2a3d      	cmp	r2, #61	@ 0x3d
 801c79c:	d1f9      	bne.n	801c792 <_findenv_r+0x1a>
 801c79e:	4630      	mov	r0, r6
 801c7a0:	f000 fdda 	bl	801d358 <__env_unlock>
 801c7a4:	2000      	movs	r0, #0
 801c7a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7aa:	eba8 0809 	sub.w	r8, r8, r9
 801c7ae:	46a3      	mov	fp, r4
 801c7b0:	f854 0b04 	ldr.w	r0, [r4], #4
 801c7b4:	2800      	cmp	r0, #0
 801c7b6:	d0f2      	beq.n	801c79e <_findenv_r+0x26>
 801c7b8:	4642      	mov	r2, r8
 801c7ba:	4649      	mov	r1, r9
 801c7bc:	f000 fc8f 	bl	801d0de <strncmp>
 801c7c0:	2800      	cmp	r0, #0
 801c7c2:	d1f4      	bne.n	801c7ae <_findenv_r+0x36>
 801c7c4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801c7c8:	eb03 0508 	add.w	r5, r3, r8
 801c7cc:	f813 3008 	ldrb.w	r3, [r3, r8]
 801c7d0:	2b3d      	cmp	r3, #61	@ 0x3d
 801c7d2:	d1ec      	bne.n	801c7ae <_findenv_r+0x36>
 801c7d4:	f8da 3000 	ldr.w	r3, [sl]
 801c7d8:	ebab 0303 	sub.w	r3, fp, r3
 801c7dc:	109b      	asrs	r3, r3, #2
 801c7de:	4630      	mov	r0, r6
 801c7e0:	603b      	str	r3, [r7, #0]
 801c7e2:	f000 fdb9 	bl	801d358 <__env_unlock>
 801c7e6:	1c68      	adds	r0, r5, #1
 801c7e8:	e7dd      	b.n	801c7a6 <_findenv_r+0x2e>
 801c7ea:	bf00      	nop
 801c7ec:	24000000 	.word	0x24000000

0801c7f0 <malloc>:
 801c7f0:	4b02      	ldr	r3, [pc, #8]	@ (801c7fc <malloc+0xc>)
 801c7f2:	4601      	mov	r1, r0
 801c7f4:	6818      	ldr	r0, [r3, #0]
 801c7f6:	f000 b82d 	b.w	801c854 <_malloc_r>
 801c7fa:	bf00      	nop
 801c7fc:	240013a0 	.word	0x240013a0

0801c800 <free>:
 801c800:	4b02      	ldr	r3, [pc, #8]	@ (801c80c <free+0xc>)
 801c802:	4601      	mov	r1, r0
 801c804:	6818      	ldr	r0, [r3, #0]
 801c806:	f000 bdad 	b.w	801d364 <_free_r>
 801c80a:	bf00      	nop
 801c80c:	240013a0 	.word	0x240013a0

0801c810 <sbrk_aligned>:
 801c810:	b570      	push	{r4, r5, r6, lr}
 801c812:	4e0f      	ldr	r6, [pc, #60]	@ (801c850 <sbrk_aligned+0x40>)
 801c814:	460c      	mov	r4, r1
 801c816:	6831      	ldr	r1, [r6, #0]
 801c818:	4605      	mov	r5, r0
 801c81a:	b911      	cbnz	r1, 801c822 <sbrk_aligned+0x12>
 801c81c:	f000 fd12 	bl	801d244 <_sbrk_r>
 801c820:	6030      	str	r0, [r6, #0]
 801c822:	4621      	mov	r1, r4
 801c824:	4628      	mov	r0, r5
 801c826:	f000 fd0d 	bl	801d244 <_sbrk_r>
 801c82a:	1c43      	adds	r3, r0, #1
 801c82c:	d103      	bne.n	801c836 <sbrk_aligned+0x26>
 801c82e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801c832:	4620      	mov	r0, r4
 801c834:	bd70      	pop	{r4, r5, r6, pc}
 801c836:	1cc4      	adds	r4, r0, #3
 801c838:	f024 0403 	bic.w	r4, r4, #3
 801c83c:	42a0      	cmp	r0, r4
 801c83e:	d0f8      	beq.n	801c832 <sbrk_aligned+0x22>
 801c840:	1a21      	subs	r1, r4, r0
 801c842:	4628      	mov	r0, r5
 801c844:	f000 fcfe 	bl	801d244 <_sbrk_r>
 801c848:	3001      	adds	r0, #1
 801c84a:	d1f2      	bne.n	801c832 <sbrk_aligned+0x22>
 801c84c:	e7ef      	b.n	801c82e <sbrk_aligned+0x1e>
 801c84e:	bf00      	nop
 801c850:	240693a4 	.word	0x240693a4

0801c854 <_malloc_r>:
 801c854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c858:	1ccd      	adds	r5, r1, #3
 801c85a:	f025 0503 	bic.w	r5, r5, #3
 801c85e:	3508      	adds	r5, #8
 801c860:	2d0c      	cmp	r5, #12
 801c862:	bf38      	it	cc
 801c864:	250c      	movcc	r5, #12
 801c866:	2d00      	cmp	r5, #0
 801c868:	4606      	mov	r6, r0
 801c86a:	db01      	blt.n	801c870 <_malloc_r+0x1c>
 801c86c:	42a9      	cmp	r1, r5
 801c86e:	d904      	bls.n	801c87a <_malloc_r+0x26>
 801c870:	230c      	movs	r3, #12
 801c872:	6033      	str	r3, [r6, #0]
 801c874:	2000      	movs	r0, #0
 801c876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c87a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801c950 <_malloc_r+0xfc>
 801c87e:	f000 f869 	bl	801c954 <__malloc_lock>
 801c882:	f8d8 3000 	ldr.w	r3, [r8]
 801c886:	461c      	mov	r4, r3
 801c888:	bb44      	cbnz	r4, 801c8dc <_malloc_r+0x88>
 801c88a:	4629      	mov	r1, r5
 801c88c:	4630      	mov	r0, r6
 801c88e:	f7ff ffbf 	bl	801c810 <sbrk_aligned>
 801c892:	1c43      	adds	r3, r0, #1
 801c894:	4604      	mov	r4, r0
 801c896:	d158      	bne.n	801c94a <_malloc_r+0xf6>
 801c898:	f8d8 4000 	ldr.w	r4, [r8]
 801c89c:	4627      	mov	r7, r4
 801c89e:	2f00      	cmp	r7, #0
 801c8a0:	d143      	bne.n	801c92a <_malloc_r+0xd6>
 801c8a2:	2c00      	cmp	r4, #0
 801c8a4:	d04b      	beq.n	801c93e <_malloc_r+0xea>
 801c8a6:	6823      	ldr	r3, [r4, #0]
 801c8a8:	4639      	mov	r1, r7
 801c8aa:	4630      	mov	r0, r6
 801c8ac:	eb04 0903 	add.w	r9, r4, r3
 801c8b0:	f000 fcc8 	bl	801d244 <_sbrk_r>
 801c8b4:	4581      	cmp	r9, r0
 801c8b6:	d142      	bne.n	801c93e <_malloc_r+0xea>
 801c8b8:	6821      	ldr	r1, [r4, #0]
 801c8ba:	1a6d      	subs	r5, r5, r1
 801c8bc:	4629      	mov	r1, r5
 801c8be:	4630      	mov	r0, r6
 801c8c0:	f7ff ffa6 	bl	801c810 <sbrk_aligned>
 801c8c4:	3001      	adds	r0, #1
 801c8c6:	d03a      	beq.n	801c93e <_malloc_r+0xea>
 801c8c8:	6823      	ldr	r3, [r4, #0]
 801c8ca:	442b      	add	r3, r5
 801c8cc:	6023      	str	r3, [r4, #0]
 801c8ce:	f8d8 3000 	ldr.w	r3, [r8]
 801c8d2:	685a      	ldr	r2, [r3, #4]
 801c8d4:	bb62      	cbnz	r2, 801c930 <_malloc_r+0xdc>
 801c8d6:	f8c8 7000 	str.w	r7, [r8]
 801c8da:	e00f      	b.n	801c8fc <_malloc_r+0xa8>
 801c8dc:	6822      	ldr	r2, [r4, #0]
 801c8de:	1b52      	subs	r2, r2, r5
 801c8e0:	d420      	bmi.n	801c924 <_malloc_r+0xd0>
 801c8e2:	2a0b      	cmp	r2, #11
 801c8e4:	d917      	bls.n	801c916 <_malloc_r+0xc2>
 801c8e6:	1961      	adds	r1, r4, r5
 801c8e8:	42a3      	cmp	r3, r4
 801c8ea:	6025      	str	r5, [r4, #0]
 801c8ec:	bf18      	it	ne
 801c8ee:	6059      	strne	r1, [r3, #4]
 801c8f0:	6863      	ldr	r3, [r4, #4]
 801c8f2:	bf08      	it	eq
 801c8f4:	f8c8 1000 	streq.w	r1, [r8]
 801c8f8:	5162      	str	r2, [r4, r5]
 801c8fa:	604b      	str	r3, [r1, #4]
 801c8fc:	4630      	mov	r0, r6
 801c8fe:	f000 f82f 	bl	801c960 <__malloc_unlock>
 801c902:	f104 000b 	add.w	r0, r4, #11
 801c906:	1d23      	adds	r3, r4, #4
 801c908:	f020 0007 	bic.w	r0, r0, #7
 801c90c:	1ac2      	subs	r2, r0, r3
 801c90e:	bf1c      	itt	ne
 801c910:	1a1b      	subne	r3, r3, r0
 801c912:	50a3      	strne	r3, [r4, r2]
 801c914:	e7af      	b.n	801c876 <_malloc_r+0x22>
 801c916:	6862      	ldr	r2, [r4, #4]
 801c918:	42a3      	cmp	r3, r4
 801c91a:	bf0c      	ite	eq
 801c91c:	f8c8 2000 	streq.w	r2, [r8]
 801c920:	605a      	strne	r2, [r3, #4]
 801c922:	e7eb      	b.n	801c8fc <_malloc_r+0xa8>
 801c924:	4623      	mov	r3, r4
 801c926:	6864      	ldr	r4, [r4, #4]
 801c928:	e7ae      	b.n	801c888 <_malloc_r+0x34>
 801c92a:	463c      	mov	r4, r7
 801c92c:	687f      	ldr	r7, [r7, #4]
 801c92e:	e7b6      	b.n	801c89e <_malloc_r+0x4a>
 801c930:	461a      	mov	r2, r3
 801c932:	685b      	ldr	r3, [r3, #4]
 801c934:	42a3      	cmp	r3, r4
 801c936:	d1fb      	bne.n	801c930 <_malloc_r+0xdc>
 801c938:	2300      	movs	r3, #0
 801c93a:	6053      	str	r3, [r2, #4]
 801c93c:	e7de      	b.n	801c8fc <_malloc_r+0xa8>
 801c93e:	230c      	movs	r3, #12
 801c940:	6033      	str	r3, [r6, #0]
 801c942:	4630      	mov	r0, r6
 801c944:	f000 f80c 	bl	801c960 <__malloc_unlock>
 801c948:	e794      	b.n	801c874 <_malloc_r+0x20>
 801c94a:	6005      	str	r5, [r0, #0]
 801c94c:	e7d6      	b.n	801c8fc <_malloc_r+0xa8>
 801c94e:	bf00      	nop
 801c950:	240693a8 	.word	0x240693a8

0801c954 <__malloc_lock>:
 801c954:	4801      	ldr	r0, [pc, #4]	@ (801c95c <__malloc_lock+0x8>)
 801c956:	f000 bcc2 	b.w	801d2de <__retarget_lock_acquire_recursive>
 801c95a:	bf00      	nop
 801c95c:	240694ed 	.word	0x240694ed

0801c960 <__malloc_unlock>:
 801c960:	4801      	ldr	r0, [pc, #4]	@ (801c968 <__malloc_unlock+0x8>)
 801c962:	f000 bcbd 	b.w	801d2e0 <__retarget_lock_release_recursive>
 801c966:	bf00      	nop
 801c968:	240694ed 	.word	0x240694ed

0801c96c <srand>:
 801c96c:	b538      	push	{r3, r4, r5, lr}
 801c96e:	4b10      	ldr	r3, [pc, #64]	@ (801c9b0 <srand+0x44>)
 801c970:	681d      	ldr	r5, [r3, #0]
 801c972:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c974:	4604      	mov	r4, r0
 801c976:	b9b3      	cbnz	r3, 801c9a6 <srand+0x3a>
 801c978:	2018      	movs	r0, #24
 801c97a:	f7ff ff39 	bl	801c7f0 <malloc>
 801c97e:	4602      	mov	r2, r0
 801c980:	6328      	str	r0, [r5, #48]	@ 0x30
 801c982:	b920      	cbnz	r0, 801c98e <srand+0x22>
 801c984:	4b0b      	ldr	r3, [pc, #44]	@ (801c9b4 <srand+0x48>)
 801c986:	480c      	ldr	r0, [pc, #48]	@ (801c9b8 <srand+0x4c>)
 801c988:	2146      	movs	r1, #70	@ 0x46
 801c98a:	f000 fcc1 	bl	801d310 <__assert_func>
 801c98e:	490b      	ldr	r1, [pc, #44]	@ (801c9bc <srand+0x50>)
 801c990:	4b0b      	ldr	r3, [pc, #44]	@ (801c9c0 <srand+0x54>)
 801c992:	e9c0 1300 	strd	r1, r3, [r0]
 801c996:	4b0b      	ldr	r3, [pc, #44]	@ (801c9c4 <srand+0x58>)
 801c998:	6083      	str	r3, [r0, #8]
 801c99a:	230b      	movs	r3, #11
 801c99c:	8183      	strh	r3, [r0, #12]
 801c99e:	2100      	movs	r1, #0
 801c9a0:	2001      	movs	r0, #1
 801c9a2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801c9a6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c9a8:	2200      	movs	r2, #0
 801c9aa:	611c      	str	r4, [r3, #16]
 801c9ac:	615a      	str	r2, [r3, #20]
 801c9ae:	bd38      	pop	{r3, r4, r5, pc}
 801c9b0:	240013a0 	.word	0x240013a0
 801c9b4:	0802066e 	.word	0x0802066e
 801c9b8:	08020685 	.word	0x08020685
 801c9bc:	abcd330e 	.word	0xabcd330e
 801c9c0:	e66d1234 	.word	0xe66d1234
 801c9c4:	0005deec 	.word	0x0005deec

0801c9c8 <rand>:
 801c9c8:	4b16      	ldr	r3, [pc, #88]	@ (801ca24 <rand+0x5c>)
 801c9ca:	b510      	push	{r4, lr}
 801c9cc:	681c      	ldr	r4, [r3, #0]
 801c9ce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c9d0:	b9b3      	cbnz	r3, 801ca00 <rand+0x38>
 801c9d2:	2018      	movs	r0, #24
 801c9d4:	f7ff ff0c 	bl	801c7f0 <malloc>
 801c9d8:	4602      	mov	r2, r0
 801c9da:	6320      	str	r0, [r4, #48]	@ 0x30
 801c9dc:	b920      	cbnz	r0, 801c9e8 <rand+0x20>
 801c9de:	4b12      	ldr	r3, [pc, #72]	@ (801ca28 <rand+0x60>)
 801c9e0:	4812      	ldr	r0, [pc, #72]	@ (801ca2c <rand+0x64>)
 801c9e2:	2152      	movs	r1, #82	@ 0x52
 801c9e4:	f000 fc94 	bl	801d310 <__assert_func>
 801c9e8:	4911      	ldr	r1, [pc, #68]	@ (801ca30 <rand+0x68>)
 801c9ea:	4b12      	ldr	r3, [pc, #72]	@ (801ca34 <rand+0x6c>)
 801c9ec:	e9c0 1300 	strd	r1, r3, [r0]
 801c9f0:	4b11      	ldr	r3, [pc, #68]	@ (801ca38 <rand+0x70>)
 801c9f2:	6083      	str	r3, [r0, #8]
 801c9f4:	230b      	movs	r3, #11
 801c9f6:	8183      	strh	r3, [r0, #12]
 801c9f8:	2100      	movs	r1, #0
 801c9fa:	2001      	movs	r0, #1
 801c9fc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801ca00:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801ca02:	480e      	ldr	r0, [pc, #56]	@ (801ca3c <rand+0x74>)
 801ca04:	690b      	ldr	r3, [r1, #16]
 801ca06:	694c      	ldr	r4, [r1, #20]
 801ca08:	4a0d      	ldr	r2, [pc, #52]	@ (801ca40 <rand+0x78>)
 801ca0a:	4358      	muls	r0, r3
 801ca0c:	fb02 0004 	mla	r0, r2, r4, r0
 801ca10:	fba3 3202 	umull	r3, r2, r3, r2
 801ca14:	3301      	adds	r3, #1
 801ca16:	eb40 0002 	adc.w	r0, r0, r2
 801ca1a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801ca1e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801ca22:	bd10      	pop	{r4, pc}
 801ca24:	240013a0 	.word	0x240013a0
 801ca28:	0802066e 	.word	0x0802066e
 801ca2c:	08020685 	.word	0x08020685
 801ca30:	abcd330e 	.word	0xabcd330e
 801ca34:	e66d1234 	.word	0xe66d1234
 801ca38:	0005deec 	.word	0x0005deec
 801ca3c:	5851f42d 	.word	0x5851f42d
 801ca40:	4c957f2d 	.word	0x4c957f2d

0801ca44 <realloc>:
 801ca44:	4b02      	ldr	r3, [pc, #8]	@ (801ca50 <realloc+0xc>)
 801ca46:	460a      	mov	r2, r1
 801ca48:	4601      	mov	r1, r0
 801ca4a:	6818      	ldr	r0, [r3, #0]
 801ca4c:	f000 b802 	b.w	801ca54 <_realloc_r>
 801ca50:	240013a0 	.word	0x240013a0

0801ca54 <_realloc_r>:
 801ca54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca58:	4680      	mov	r8, r0
 801ca5a:	4615      	mov	r5, r2
 801ca5c:	460c      	mov	r4, r1
 801ca5e:	b921      	cbnz	r1, 801ca6a <_realloc_r+0x16>
 801ca60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ca64:	4611      	mov	r1, r2
 801ca66:	f7ff bef5 	b.w	801c854 <_malloc_r>
 801ca6a:	b92a      	cbnz	r2, 801ca78 <_realloc_r+0x24>
 801ca6c:	f000 fc7a 	bl	801d364 <_free_r>
 801ca70:	2400      	movs	r4, #0
 801ca72:	4620      	mov	r0, r4
 801ca74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ca78:	f000 fcbe 	bl	801d3f8 <_malloc_usable_size_r>
 801ca7c:	4285      	cmp	r5, r0
 801ca7e:	4606      	mov	r6, r0
 801ca80:	d802      	bhi.n	801ca88 <_realloc_r+0x34>
 801ca82:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801ca86:	d8f4      	bhi.n	801ca72 <_realloc_r+0x1e>
 801ca88:	4629      	mov	r1, r5
 801ca8a:	4640      	mov	r0, r8
 801ca8c:	f7ff fee2 	bl	801c854 <_malloc_r>
 801ca90:	4607      	mov	r7, r0
 801ca92:	2800      	cmp	r0, #0
 801ca94:	d0ec      	beq.n	801ca70 <_realloc_r+0x1c>
 801ca96:	42b5      	cmp	r5, r6
 801ca98:	462a      	mov	r2, r5
 801ca9a:	4621      	mov	r1, r4
 801ca9c:	bf28      	it	cs
 801ca9e:	4632      	movcs	r2, r6
 801caa0:	f000 fc27 	bl	801d2f2 <memcpy>
 801caa4:	4621      	mov	r1, r4
 801caa6:	4640      	mov	r0, r8
 801caa8:	f000 fc5c 	bl	801d364 <_free_r>
 801caac:	463c      	mov	r4, r7
 801caae:	e7e0      	b.n	801ca72 <_realloc_r+0x1e>

0801cab0 <_strtoul_l.constprop.0>:
 801cab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cab4:	4e34      	ldr	r6, [pc, #208]	@ (801cb88 <_strtoul_l.constprop.0+0xd8>)
 801cab6:	4686      	mov	lr, r0
 801cab8:	460d      	mov	r5, r1
 801caba:	4628      	mov	r0, r5
 801cabc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cac0:	5d37      	ldrb	r7, [r6, r4]
 801cac2:	f017 0708 	ands.w	r7, r7, #8
 801cac6:	d1f8      	bne.n	801caba <_strtoul_l.constprop.0+0xa>
 801cac8:	2c2d      	cmp	r4, #45	@ 0x2d
 801caca:	d12f      	bne.n	801cb2c <_strtoul_l.constprop.0+0x7c>
 801cacc:	782c      	ldrb	r4, [r5, #0]
 801cace:	2701      	movs	r7, #1
 801cad0:	1c85      	adds	r5, r0, #2
 801cad2:	f033 0010 	bics.w	r0, r3, #16
 801cad6:	d109      	bne.n	801caec <_strtoul_l.constprop.0+0x3c>
 801cad8:	2c30      	cmp	r4, #48	@ 0x30
 801cada:	d12c      	bne.n	801cb36 <_strtoul_l.constprop.0+0x86>
 801cadc:	7828      	ldrb	r0, [r5, #0]
 801cade:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801cae2:	2858      	cmp	r0, #88	@ 0x58
 801cae4:	d127      	bne.n	801cb36 <_strtoul_l.constprop.0+0x86>
 801cae6:	786c      	ldrb	r4, [r5, #1]
 801cae8:	2310      	movs	r3, #16
 801caea:	3502      	adds	r5, #2
 801caec:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801caf0:	2600      	movs	r6, #0
 801caf2:	fbb8 f8f3 	udiv	r8, r8, r3
 801caf6:	fb03 f908 	mul.w	r9, r3, r8
 801cafa:	ea6f 0909 	mvn.w	r9, r9
 801cafe:	4630      	mov	r0, r6
 801cb00:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801cb04:	f1bc 0f09 	cmp.w	ip, #9
 801cb08:	d81c      	bhi.n	801cb44 <_strtoul_l.constprop.0+0x94>
 801cb0a:	4664      	mov	r4, ip
 801cb0c:	42a3      	cmp	r3, r4
 801cb0e:	dd2a      	ble.n	801cb66 <_strtoul_l.constprop.0+0xb6>
 801cb10:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801cb14:	d007      	beq.n	801cb26 <_strtoul_l.constprop.0+0x76>
 801cb16:	4580      	cmp	r8, r0
 801cb18:	d322      	bcc.n	801cb60 <_strtoul_l.constprop.0+0xb0>
 801cb1a:	d101      	bne.n	801cb20 <_strtoul_l.constprop.0+0x70>
 801cb1c:	45a1      	cmp	r9, r4
 801cb1e:	db1f      	blt.n	801cb60 <_strtoul_l.constprop.0+0xb0>
 801cb20:	fb00 4003 	mla	r0, r0, r3, r4
 801cb24:	2601      	movs	r6, #1
 801cb26:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cb2a:	e7e9      	b.n	801cb00 <_strtoul_l.constprop.0+0x50>
 801cb2c:	2c2b      	cmp	r4, #43	@ 0x2b
 801cb2e:	bf04      	itt	eq
 801cb30:	782c      	ldrbeq	r4, [r5, #0]
 801cb32:	1c85      	addeq	r5, r0, #2
 801cb34:	e7cd      	b.n	801cad2 <_strtoul_l.constprop.0+0x22>
 801cb36:	2b00      	cmp	r3, #0
 801cb38:	d1d8      	bne.n	801caec <_strtoul_l.constprop.0+0x3c>
 801cb3a:	2c30      	cmp	r4, #48	@ 0x30
 801cb3c:	bf0c      	ite	eq
 801cb3e:	2308      	moveq	r3, #8
 801cb40:	230a      	movne	r3, #10
 801cb42:	e7d3      	b.n	801caec <_strtoul_l.constprop.0+0x3c>
 801cb44:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801cb48:	f1bc 0f19 	cmp.w	ip, #25
 801cb4c:	d801      	bhi.n	801cb52 <_strtoul_l.constprop.0+0xa2>
 801cb4e:	3c37      	subs	r4, #55	@ 0x37
 801cb50:	e7dc      	b.n	801cb0c <_strtoul_l.constprop.0+0x5c>
 801cb52:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801cb56:	f1bc 0f19 	cmp.w	ip, #25
 801cb5a:	d804      	bhi.n	801cb66 <_strtoul_l.constprop.0+0xb6>
 801cb5c:	3c57      	subs	r4, #87	@ 0x57
 801cb5e:	e7d5      	b.n	801cb0c <_strtoul_l.constprop.0+0x5c>
 801cb60:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801cb64:	e7df      	b.n	801cb26 <_strtoul_l.constprop.0+0x76>
 801cb66:	1c73      	adds	r3, r6, #1
 801cb68:	d106      	bne.n	801cb78 <_strtoul_l.constprop.0+0xc8>
 801cb6a:	2322      	movs	r3, #34	@ 0x22
 801cb6c:	f8ce 3000 	str.w	r3, [lr]
 801cb70:	4630      	mov	r0, r6
 801cb72:	b932      	cbnz	r2, 801cb82 <_strtoul_l.constprop.0+0xd2>
 801cb74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cb78:	b107      	cbz	r7, 801cb7c <_strtoul_l.constprop.0+0xcc>
 801cb7a:	4240      	negs	r0, r0
 801cb7c:	2a00      	cmp	r2, #0
 801cb7e:	d0f9      	beq.n	801cb74 <_strtoul_l.constprop.0+0xc4>
 801cb80:	b106      	cbz	r6, 801cb84 <_strtoul_l.constprop.0+0xd4>
 801cb82:	1e69      	subs	r1, r5, #1
 801cb84:	6011      	str	r1, [r2, #0]
 801cb86:	e7f5      	b.n	801cb74 <_strtoul_l.constprop.0+0xc4>
 801cb88:	080206de 	.word	0x080206de

0801cb8c <strtoul>:
 801cb8c:	4613      	mov	r3, r2
 801cb8e:	460a      	mov	r2, r1
 801cb90:	4601      	mov	r1, r0
 801cb92:	4802      	ldr	r0, [pc, #8]	@ (801cb9c <strtoul+0x10>)
 801cb94:	6800      	ldr	r0, [r0, #0]
 801cb96:	f7ff bf8b 	b.w	801cab0 <_strtoul_l.constprop.0>
 801cb9a:	bf00      	nop
 801cb9c:	240013a0 	.word	0x240013a0

0801cba0 <std>:
 801cba0:	2300      	movs	r3, #0
 801cba2:	b510      	push	{r4, lr}
 801cba4:	4604      	mov	r4, r0
 801cba6:	e9c0 3300 	strd	r3, r3, [r0]
 801cbaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cbae:	6083      	str	r3, [r0, #8]
 801cbb0:	8181      	strh	r1, [r0, #12]
 801cbb2:	6643      	str	r3, [r0, #100]	@ 0x64
 801cbb4:	81c2      	strh	r2, [r0, #14]
 801cbb6:	6183      	str	r3, [r0, #24]
 801cbb8:	4619      	mov	r1, r3
 801cbba:	2208      	movs	r2, #8
 801cbbc:	305c      	adds	r0, #92	@ 0x5c
 801cbbe:	f000 fa79 	bl	801d0b4 <memset>
 801cbc2:	4b0d      	ldr	r3, [pc, #52]	@ (801cbf8 <std+0x58>)
 801cbc4:	6263      	str	r3, [r4, #36]	@ 0x24
 801cbc6:	4b0d      	ldr	r3, [pc, #52]	@ (801cbfc <std+0x5c>)
 801cbc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 801cbca:	4b0d      	ldr	r3, [pc, #52]	@ (801cc00 <std+0x60>)
 801cbcc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801cbce:	4b0d      	ldr	r3, [pc, #52]	@ (801cc04 <std+0x64>)
 801cbd0:	6323      	str	r3, [r4, #48]	@ 0x30
 801cbd2:	4b0d      	ldr	r3, [pc, #52]	@ (801cc08 <std+0x68>)
 801cbd4:	6224      	str	r4, [r4, #32]
 801cbd6:	429c      	cmp	r4, r3
 801cbd8:	d006      	beq.n	801cbe8 <std+0x48>
 801cbda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801cbde:	4294      	cmp	r4, r2
 801cbe0:	d002      	beq.n	801cbe8 <std+0x48>
 801cbe2:	33d0      	adds	r3, #208	@ 0xd0
 801cbe4:	429c      	cmp	r4, r3
 801cbe6:	d105      	bne.n	801cbf4 <std+0x54>
 801cbe8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801cbec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cbf0:	f000 bb74 	b.w	801d2dc <__retarget_lock_init_recursive>
 801cbf4:	bd10      	pop	{r4, pc}
 801cbf6:	bf00      	nop
 801cbf8:	0801ce41 	.word	0x0801ce41
 801cbfc:	0801ce63 	.word	0x0801ce63
 801cc00:	0801ce9b 	.word	0x0801ce9b
 801cc04:	0801cebf 	.word	0x0801cebf
 801cc08:	240693ac 	.word	0x240693ac

0801cc0c <stdio_exit_handler>:
 801cc0c:	4a02      	ldr	r2, [pc, #8]	@ (801cc18 <stdio_exit_handler+0xc>)
 801cc0e:	4903      	ldr	r1, [pc, #12]	@ (801cc1c <stdio_exit_handler+0x10>)
 801cc10:	4803      	ldr	r0, [pc, #12]	@ (801cc20 <stdio_exit_handler+0x14>)
 801cc12:	f000 b869 	b.w	801cce8 <_fwalk_sglue>
 801cc16:	bf00      	nop
 801cc18:	24001394 	.word	0x24001394
 801cc1c:	0801dadd 	.word	0x0801dadd
 801cc20:	240013a4 	.word	0x240013a4

0801cc24 <cleanup_stdio>:
 801cc24:	6841      	ldr	r1, [r0, #4]
 801cc26:	4b0c      	ldr	r3, [pc, #48]	@ (801cc58 <cleanup_stdio+0x34>)
 801cc28:	4299      	cmp	r1, r3
 801cc2a:	b510      	push	{r4, lr}
 801cc2c:	4604      	mov	r4, r0
 801cc2e:	d001      	beq.n	801cc34 <cleanup_stdio+0x10>
 801cc30:	f000 ff54 	bl	801dadc <_fflush_r>
 801cc34:	68a1      	ldr	r1, [r4, #8]
 801cc36:	4b09      	ldr	r3, [pc, #36]	@ (801cc5c <cleanup_stdio+0x38>)
 801cc38:	4299      	cmp	r1, r3
 801cc3a:	d002      	beq.n	801cc42 <cleanup_stdio+0x1e>
 801cc3c:	4620      	mov	r0, r4
 801cc3e:	f000 ff4d 	bl	801dadc <_fflush_r>
 801cc42:	68e1      	ldr	r1, [r4, #12]
 801cc44:	4b06      	ldr	r3, [pc, #24]	@ (801cc60 <cleanup_stdio+0x3c>)
 801cc46:	4299      	cmp	r1, r3
 801cc48:	d004      	beq.n	801cc54 <cleanup_stdio+0x30>
 801cc4a:	4620      	mov	r0, r4
 801cc4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc50:	f000 bf44 	b.w	801dadc <_fflush_r>
 801cc54:	bd10      	pop	{r4, pc}
 801cc56:	bf00      	nop
 801cc58:	240693ac 	.word	0x240693ac
 801cc5c:	24069414 	.word	0x24069414
 801cc60:	2406947c 	.word	0x2406947c

0801cc64 <global_stdio_init.part.0>:
 801cc64:	b510      	push	{r4, lr}
 801cc66:	4b0b      	ldr	r3, [pc, #44]	@ (801cc94 <global_stdio_init.part.0+0x30>)
 801cc68:	4c0b      	ldr	r4, [pc, #44]	@ (801cc98 <global_stdio_init.part.0+0x34>)
 801cc6a:	4a0c      	ldr	r2, [pc, #48]	@ (801cc9c <global_stdio_init.part.0+0x38>)
 801cc6c:	601a      	str	r2, [r3, #0]
 801cc6e:	4620      	mov	r0, r4
 801cc70:	2200      	movs	r2, #0
 801cc72:	2104      	movs	r1, #4
 801cc74:	f7ff ff94 	bl	801cba0 <std>
 801cc78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801cc7c:	2201      	movs	r2, #1
 801cc7e:	2109      	movs	r1, #9
 801cc80:	f7ff ff8e 	bl	801cba0 <std>
 801cc84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801cc88:	2202      	movs	r2, #2
 801cc8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc8e:	2112      	movs	r1, #18
 801cc90:	f7ff bf86 	b.w	801cba0 <std>
 801cc94:	240694e4 	.word	0x240694e4
 801cc98:	240693ac 	.word	0x240693ac
 801cc9c:	0801cc0d 	.word	0x0801cc0d

0801cca0 <__sfp_lock_acquire>:
 801cca0:	4801      	ldr	r0, [pc, #4]	@ (801cca8 <__sfp_lock_acquire+0x8>)
 801cca2:	f000 bb1c 	b.w	801d2de <__retarget_lock_acquire_recursive>
 801cca6:	bf00      	nop
 801cca8:	240694ee 	.word	0x240694ee

0801ccac <__sfp_lock_release>:
 801ccac:	4801      	ldr	r0, [pc, #4]	@ (801ccb4 <__sfp_lock_release+0x8>)
 801ccae:	f000 bb17 	b.w	801d2e0 <__retarget_lock_release_recursive>
 801ccb2:	bf00      	nop
 801ccb4:	240694ee 	.word	0x240694ee

0801ccb8 <__sinit>:
 801ccb8:	b510      	push	{r4, lr}
 801ccba:	4604      	mov	r4, r0
 801ccbc:	f7ff fff0 	bl	801cca0 <__sfp_lock_acquire>
 801ccc0:	6a23      	ldr	r3, [r4, #32]
 801ccc2:	b11b      	cbz	r3, 801cccc <__sinit+0x14>
 801ccc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ccc8:	f7ff bff0 	b.w	801ccac <__sfp_lock_release>
 801cccc:	4b04      	ldr	r3, [pc, #16]	@ (801cce0 <__sinit+0x28>)
 801ccce:	6223      	str	r3, [r4, #32]
 801ccd0:	4b04      	ldr	r3, [pc, #16]	@ (801cce4 <__sinit+0x2c>)
 801ccd2:	681b      	ldr	r3, [r3, #0]
 801ccd4:	2b00      	cmp	r3, #0
 801ccd6:	d1f5      	bne.n	801ccc4 <__sinit+0xc>
 801ccd8:	f7ff ffc4 	bl	801cc64 <global_stdio_init.part.0>
 801ccdc:	e7f2      	b.n	801ccc4 <__sinit+0xc>
 801ccde:	bf00      	nop
 801cce0:	0801cc25 	.word	0x0801cc25
 801cce4:	240694e4 	.word	0x240694e4

0801cce8 <_fwalk_sglue>:
 801cce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ccec:	4607      	mov	r7, r0
 801ccee:	4688      	mov	r8, r1
 801ccf0:	4614      	mov	r4, r2
 801ccf2:	2600      	movs	r6, #0
 801ccf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ccf8:	f1b9 0901 	subs.w	r9, r9, #1
 801ccfc:	d505      	bpl.n	801cd0a <_fwalk_sglue+0x22>
 801ccfe:	6824      	ldr	r4, [r4, #0]
 801cd00:	2c00      	cmp	r4, #0
 801cd02:	d1f7      	bne.n	801ccf4 <_fwalk_sglue+0xc>
 801cd04:	4630      	mov	r0, r6
 801cd06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cd0a:	89ab      	ldrh	r3, [r5, #12]
 801cd0c:	2b01      	cmp	r3, #1
 801cd0e:	d907      	bls.n	801cd20 <_fwalk_sglue+0x38>
 801cd10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cd14:	3301      	adds	r3, #1
 801cd16:	d003      	beq.n	801cd20 <_fwalk_sglue+0x38>
 801cd18:	4629      	mov	r1, r5
 801cd1a:	4638      	mov	r0, r7
 801cd1c:	47c0      	blx	r8
 801cd1e:	4306      	orrs	r6, r0
 801cd20:	3568      	adds	r5, #104	@ 0x68
 801cd22:	e7e9      	b.n	801ccf8 <_fwalk_sglue+0x10>

0801cd24 <_fwrite_r>:
 801cd24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cd28:	9c08      	ldr	r4, [sp, #32]
 801cd2a:	468a      	mov	sl, r1
 801cd2c:	4690      	mov	r8, r2
 801cd2e:	fb02 f903 	mul.w	r9, r2, r3
 801cd32:	4606      	mov	r6, r0
 801cd34:	b118      	cbz	r0, 801cd3e <_fwrite_r+0x1a>
 801cd36:	6a03      	ldr	r3, [r0, #32]
 801cd38:	b90b      	cbnz	r3, 801cd3e <_fwrite_r+0x1a>
 801cd3a:	f7ff ffbd 	bl	801ccb8 <__sinit>
 801cd3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cd40:	07dd      	lsls	r5, r3, #31
 801cd42:	d405      	bmi.n	801cd50 <_fwrite_r+0x2c>
 801cd44:	89a3      	ldrh	r3, [r4, #12]
 801cd46:	0598      	lsls	r0, r3, #22
 801cd48:	d402      	bmi.n	801cd50 <_fwrite_r+0x2c>
 801cd4a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cd4c:	f000 fac7 	bl	801d2de <__retarget_lock_acquire_recursive>
 801cd50:	89a3      	ldrh	r3, [r4, #12]
 801cd52:	0719      	lsls	r1, r3, #28
 801cd54:	d516      	bpl.n	801cd84 <_fwrite_r+0x60>
 801cd56:	6923      	ldr	r3, [r4, #16]
 801cd58:	b1a3      	cbz	r3, 801cd84 <_fwrite_r+0x60>
 801cd5a:	2500      	movs	r5, #0
 801cd5c:	454d      	cmp	r5, r9
 801cd5e:	d01f      	beq.n	801cda0 <_fwrite_r+0x7c>
 801cd60:	68a7      	ldr	r7, [r4, #8]
 801cd62:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801cd66:	3f01      	subs	r7, #1
 801cd68:	2f00      	cmp	r7, #0
 801cd6a:	60a7      	str	r7, [r4, #8]
 801cd6c:	da04      	bge.n	801cd78 <_fwrite_r+0x54>
 801cd6e:	69a3      	ldr	r3, [r4, #24]
 801cd70:	429f      	cmp	r7, r3
 801cd72:	db0f      	blt.n	801cd94 <_fwrite_r+0x70>
 801cd74:	290a      	cmp	r1, #10
 801cd76:	d00d      	beq.n	801cd94 <_fwrite_r+0x70>
 801cd78:	6823      	ldr	r3, [r4, #0]
 801cd7a:	1c5a      	adds	r2, r3, #1
 801cd7c:	6022      	str	r2, [r4, #0]
 801cd7e:	7019      	strb	r1, [r3, #0]
 801cd80:	3501      	adds	r5, #1
 801cd82:	e7eb      	b.n	801cd5c <_fwrite_r+0x38>
 801cd84:	4621      	mov	r1, r4
 801cd86:	4630      	mov	r0, r6
 801cd88:	f000 f914 	bl	801cfb4 <__swsetup_r>
 801cd8c:	2800      	cmp	r0, #0
 801cd8e:	d0e4      	beq.n	801cd5a <_fwrite_r+0x36>
 801cd90:	2500      	movs	r5, #0
 801cd92:	e005      	b.n	801cda0 <_fwrite_r+0x7c>
 801cd94:	4622      	mov	r2, r4
 801cd96:	4630      	mov	r0, r6
 801cd98:	f000 f8ce 	bl	801cf38 <__swbuf_r>
 801cd9c:	3001      	adds	r0, #1
 801cd9e:	d1ef      	bne.n	801cd80 <_fwrite_r+0x5c>
 801cda0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cda2:	07da      	lsls	r2, r3, #31
 801cda4:	d405      	bmi.n	801cdb2 <_fwrite_r+0x8e>
 801cda6:	89a3      	ldrh	r3, [r4, #12]
 801cda8:	059b      	lsls	r3, r3, #22
 801cdaa:	d402      	bmi.n	801cdb2 <_fwrite_r+0x8e>
 801cdac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cdae:	f000 fa97 	bl	801d2e0 <__retarget_lock_release_recursive>
 801cdb2:	fbb5 f0f8 	udiv	r0, r5, r8
 801cdb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801cdbc <fwrite>:
 801cdbc:	b507      	push	{r0, r1, r2, lr}
 801cdbe:	9300      	str	r3, [sp, #0]
 801cdc0:	4613      	mov	r3, r2
 801cdc2:	460a      	mov	r2, r1
 801cdc4:	4601      	mov	r1, r0
 801cdc6:	4803      	ldr	r0, [pc, #12]	@ (801cdd4 <fwrite+0x18>)
 801cdc8:	6800      	ldr	r0, [r0, #0]
 801cdca:	f7ff ffab 	bl	801cd24 <_fwrite_r>
 801cdce:	b003      	add	sp, #12
 801cdd0:	f85d fb04 	ldr.w	pc, [sp], #4
 801cdd4:	240013a0 	.word	0x240013a0

0801cdd8 <sniprintf>:
 801cdd8:	b40c      	push	{r2, r3}
 801cdda:	b530      	push	{r4, r5, lr}
 801cddc:	4b17      	ldr	r3, [pc, #92]	@ (801ce3c <sniprintf+0x64>)
 801cdde:	1e0c      	subs	r4, r1, #0
 801cde0:	681d      	ldr	r5, [r3, #0]
 801cde2:	b09d      	sub	sp, #116	@ 0x74
 801cde4:	da08      	bge.n	801cdf8 <sniprintf+0x20>
 801cde6:	238b      	movs	r3, #139	@ 0x8b
 801cde8:	602b      	str	r3, [r5, #0]
 801cdea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cdee:	b01d      	add	sp, #116	@ 0x74
 801cdf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cdf4:	b002      	add	sp, #8
 801cdf6:	4770      	bx	lr
 801cdf8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801cdfc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ce00:	bf14      	ite	ne
 801ce02:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801ce06:	4623      	moveq	r3, r4
 801ce08:	9304      	str	r3, [sp, #16]
 801ce0a:	9307      	str	r3, [sp, #28]
 801ce0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ce10:	9002      	str	r0, [sp, #8]
 801ce12:	9006      	str	r0, [sp, #24]
 801ce14:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ce18:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801ce1a:	ab21      	add	r3, sp, #132	@ 0x84
 801ce1c:	a902      	add	r1, sp, #8
 801ce1e:	4628      	mov	r0, r5
 801ce20:	9301      	str	r3, [sp, #4]
 801ce22:	f000 fb4d 	bl	801d4c0 <_svfiprintf_r>
 801ce26:	1c43      	adds	r3, r0, #1
 801ce28:	bfbc      	itt	lt
 801ce2a:	238b      	movlt	r3, #139	@ 0x8b
 801ce2c:	602b      	strlt	r3, [r5, #0]
 801ce2e:	2c00      	cmp	r4, #0
 801ce30:	d0dd      	beq.n	801cdee <sniprintf+0x16>
 801ce32:	9b02      	ldr	r3, [sp, #8]
 801ce34:	2200      	movs	r2, #0
 801ce36:	701a      	strb	r2, [r3, #0]
 801ce38:	e7d9      	b.n	801cdee <sniprintf+0x16>
 801ce3a:	bf00      	nop
 801ce3c:	240013a0 	.word	0x240013a0

0801ce40 <__sread>:
 801ce40:	b510      	push	{r4, lr}
 801ce42:	460c      	mov	r4, r1
 801ce44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce48:	f000 f9ea 	bl	801d220 <_read_r>
 801ce4c:	2800      	cmp	r0, #0
 801ce4e:	bfab      	itete	ge
 801ce50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801ce52:	89a3      	ldrhlt	r3, [r4, #12]
 801ce54:	181b      	addge	r3, r3, r0
 801ce56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801ce5a:	bfac      	ite	ge
 801ce5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801ce5e:	81a3      	strhlt	r3, [r4, #12]
 801ce60:	bd10      	pop	{r4, pc}

0801ce62 <__swrite>:
 801ce62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce66:	461f      	mov	r7, r3
 801ce68:	898b      	ldrh	r3, [r1, #12]
 801ce6a:	05db      	lsls	r3, r3, #23
 801ce6c:	4605      	mov	r5, r0
 801ce6e:	460c      	mov	r4, r1
 801ce70:	4616      	mov	r6, r2
 801ce72:	d505      	bpl.n	801ce80 <__swrite+0x1e>
 801ce74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce78:	2302      	movs	r3, #2
 801ce7a:	2200      	movs	r2, #0
 801ce7c:	f000 f9be 	bl	801d1fc <_lseek_r>
 801ce80:	89a3      	ldrh	r3, [r4, #12]
 801ce82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ce86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ce8a:	81a3      	strh	r3, [r4, #12]
 801ce8c:	4632      	mov	r2, r6
 801ce8e:	463b      	mov	r3, r7
 801ce90:	4628      	mov	r0, r5
 801ce92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ce96:	f000 b9e5 	b.w	801d264 <_write_r>

0801ce9a <__sseek>:
 801ce9a:	b510      	push	{r4, lr}
 801ce9c:	460c      	mov	r4, r1
 801ce9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cea2:	f000 f9ab 	bl	801d1fc <_lseek_r>
 801cea6:	1c43      	adds	r3, r0, #1
 801cea8:	89a3      	ldrh	r3, [r4, #12]
 801ceaa:	bf15      	itete	ne
 801ceac:	6560      	strne	r0, [r4, #84]	@ 0x54
 801ceae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801ceb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801ceb6:	81a3      	strheq	r3, [r4, #12]
 801ceb8:	bf18      	it	ne
 801ceba:	81a3      	strhne	r3, [r4, #12]
 801cebc:	bd10      	pop	{r4, pc}

0801cebe <__sclose>:
 801cebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cec2:	f000 b935 	b.w	801d130 <_close_r>

0801cec6 <_vsniprintf_r>:
 801cec6:	b530      	push	{r4, r5, lr}
 801cec8:	4614      	mov	r4, r2
 801ceca:	2c00      	cmp	r4, #0
 801cecc:	b09b      	sub	sp, #108	@ 0x6c
 801cece:	4605      	mov	r5, r0
 801ced0:	461a      	mov	r2, r3
 801ced2:	da05      	bge.n	801cee0 <_vsniprintf_r+0x1a>
 801ced4:	238b      	movs	r3, #139	@ 0x8b
 801ced6:	6003      	str	r3, [r0, #0]
 801ced8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cedc:	b01b      	add	sp, #108	@ 0x6c
 801cede:	bd30      	pop	{r4, r5, pc}
 801cee0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801cee4:	f8ad 300c 	strh.w	r3, [sp, #12]
 801cee8:	bf14      	ite	ne
 801ceea:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801ceee:	4623      	moveq	r3, r4
 801cef0:	9302      	str	r3, [sp, #8]
 801cef2:	9305      	str	r3, [sp, #20]
 801cef4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801cef8:	9100      	str	r1, [sp, #0]
 801cefa:	9104      	str	r1, [sp, #16]
 801cefc:	f8ad 300e 	strh.w	r3, [sp, #14]
 801cf00:	4669      	mov	r1, sp
 801cf02:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801cf04:	f000 fadc 	bl	801d4c0 <_svfiprintf_r>
 801cf08:	1c43      	adds	r3, r0, #1
 801cf0a:	bfbc      	itt	lt
 801cf0c:	238b      	movlt	r3, #139	@ 0x8b
 801cf0e:	602b      	strlt	r3, [r5, #0]
 801cf10:	2c00      	cmp	r4, #0
 801cf12:	d0e3      	beq.n	801cedc <_vsniprintf_r+0x16>
 801cf14:	9b00      	ldr	r3, [sp, #0]
 801cf16:	2200      	movs	r2, #0
 801cf18:	701a      	strb	r2, [r3, #0]
 801cf1a:	e7df      	b.n	801cedc <_vsniprintf_r+0x16>

0801cf1c <vsniprintf>:
 801cf1c:	b507      	push	{r0, r1, r2, lr}
 801cf1e:	9300      	str	r3, [sp, #0]
 801cf20:	4613      	mov	r3, r2
 801cf22:	460a      	mov	r2, r1
 801cf24:	4601      	mov	r1, r0
 801cf26:	4803      	ldr	r0, [pc, #12]	@ (801cf34 <vsniprintf+0x18>)
 801cf28:	6800      	ldr	r0, [r0, #0]
 801cf2a:	f7ff ffcc 	bl	801cec6 <_vsniprintf_r>
 801cf2e:	b003      	add	sp, #12
 801cf30:	f85d fb04 	ldr.w	pc, [sp], #4
 801cf34:	240013a0 	.word	0x240013a0

0801cf38 <__swbuf_r>:
 801cf38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf3a:	460e      	mov	r6, r1
 801cf3c:	4614      	mov	r4, r2
 801cf3e:	4605      	mov	r5, r0
 801cf40:	b118      	cbz	r0, 801cf4a <__swbuf_r+0x12>
 801cf42:	6a03      	ldr	r3, [r0, #32]
 801cf44:	b90b      	cbnz	r3, 801cf4a <__swbuf_r+0x12>
 801cf46:	f7ff feb7 	bl	801ccb8 <__sinit>
 801cf4a:	69a3      	ldr	r3, [r4, #24]
 801cf4c:	60a3      	str	r3, [r4, #8]
 801cf4e:	89a3      	ldrh	r3, [r4, #12]
 801cf50:	071a      	lsls	r2, r3, #28
 801cf52:	d501      	bpl.n	801cf58 <__swbuf_r+0x20>
 801cf54:	6923      	ldr	r3, [r4, #16]
 801cf56:	b943      	cbnz	r3, 801cf6a <__swbuf_r+0x32>
 801cf58:	4621      	mov	r1, r4
 801cf5a:	4628      	mov	r0, r5
 801cf5c:	f000 f82a 	bl	801cfb4 <__swsetup_r>
 801cf60:	b118      	cbz	r0, 801cf6a <__swbuf_r+0x32>
 801cf62:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801cf66:	4638      	mov	r0, r7
 801cf68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf6a:	6823      	ldr	r3, [r4, #0]
 801cf6c:	6922      	ldr	r2, [r4, #16]
 801cf6e:	1a98      	subs	r0, r3, r2
 801cf70:	6963      	ldr	r3, [r4, #20]
 801cf72:	b2f6      	uxtb	r6, r6
 801cf74:	4283      	cmp	r3, r0
 801cf76:	4637      	mov	r7, r6
 801cf78:	dc05      	bgt.n	801cf86 <__swbuf_r+0x4e>
 801cf7a:	4621      	mov	r1, r4
 801cf7c:	4628      	mov	r0, r5
 801cf7e:	f000 fdad 	bl	801dadc <_fflush_r>
 801cf82:	2800      	cmp	r0, #0
 801cf84:	d1ed      	bne.n	801cf62 <__swbuf_r+0x2a>
 801cf86:	68a3      	ldr	r3, [r4, #8]
 801cf88:	3b01      	subs	r3, #1
 801cf8a:	60a3      	str	r3, [r4, #8]
 801cf8c:	6823      	ldr	r3, [r4, #0]
 801cf8e:	1c5a      	adds	r2, r3, #1
 801cf90:	6022      	str	r2, [r4, #0]
 801cf92:	701e      	strb	r6, [r3, #0]
 801cf94:	6962      	ldr	r2, [r4, #20]
 801cf96:	1c43      	adds	r3, r0, #1
 801cf98:	429a      	cmp	r2, r3
 801cf9a:	d004      	beq.n	801cfa6 <__swbuf_r+0x6e>
 801cf9c:	89a3      	ldrh	r3, [r4, #12]
 801cf9e:	07db      	lsls	r3, r3, #31
 801cfa0:	d5e1      	bpl.n	801cf66 <__swbuf_r+0x2e>
 801cfa2:	2e0a      	cmp	r6, #10
 801cfa4:	d1df      	bne.n	801cf66 <__swbuf_r+0x2e>
 801cfa6:	4621      	mov	r1, r4
 801cfa8:	4628      	mov	r0, r5
 801cfaa:	f000 fd97 	bl	801dadc <_fflush_r>
 801cfae:	2800      	cmp	r0, #0
 801cfb0:	d0d9      	beq.n	801cf66 <__swbuf_r+0x2e>
 801cfb2:	e7d6      	b.n	801cf62 <__swbuf_r+0x2a>

0801cfb4 <__swsetup_r>:
 801cfb4:	b538      	push	{r3, r4, r5, lr}
 801cfb6:	4b29      	ldr	r3, [pc, #164]	@ (801d05c <__swsetup_r+0xa8>)
 801cfb8:	4605      	mov	r5, r0
 801cfba:	6818      	ldr	r0, [r3, #0]
 801cfbc:	460c      	mov	r4, r1
 801cfbe:	b118      	cbz	r0, 801cfc8 <__swsetup_r+0x14>
 801cfc0:	6a03      	ldr	r3, [r0, #32]
 801cfc2:	b90b      	cbnz	r3, 801cfc8 <__swsetup_r+0x14>
 801cfc4:	f7ff fe78 	bl	801ccb8 <__sinit>
 801cfc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cfcc:	0719      	lsls	r1, r3, #28
 801cfce:	d422      	bmi.n	801d016 <__swsetup_r+0x62>
 801cfd0:	06da      	lsls	r2, r3, #27
 801cfd2:	d407      	bmi.n	801cfe4 <__swsetup_r+0x30>
 801cfd4:	2209      	movs	r2, #9
 801cfd6:	602a      	str	r2, [r5, #0]
 801cfd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cfdc:	81a3      	strh	r3, [r4, #12]
 801cfde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cfe2:	e033      	b.n	801d04c <__swsetup_r+0x98>
 801cfe4:	0758      	lsls	r0, r3, #29
 801cfe6:	d512      	bpl.n	801d00e <__swsetup_r+0x5a>
 801cfe8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cfea:	b141      	cbz	r1, 801cffe <__swsetup_r+0x4a>
 801cfec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cff0:	4299      	cmp	r1, r3
 801cff2:	d002      	beq.n	801cffa <__swsetup_r+0x46>
 801cff4:	4628      	mov	r0, r5
 801cff6:	f000 f9b5 	bl	801d364 <_free_r>
 801cffa:	2300      	movs	r3, #0
 801cffc:	6363      	str	r3, [r4, #52]	@ 0x34
 801cffe:	89a3      	ldrh	r3, [r4, #12]
 801d000:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d004:	81a3      	strh	r3, [r4, #12]
 801d006:	2300      	movs	r3, #0
 801d008:	6063      	str	r3, [r4, #4]
 801d00a:	6923      	ldr	r3, [r4, #16]
 801d00c:	6023      	str	r3, [r4, #0]
 801d00e:	89a3      	ldrh	r3, [r4, #12]
 801d010:	f043 0308 	orr.w	r3, r3, #8
 801d014:	81a3      	strh	r3, [r4, #12]
 801d016:	6923      	ldr	r3, [r4, #16]
 801d018:	b94b      	cbnz	r3, 801d02e <__swsetup_r+0x7a>
 801d01a:	89a3      	ldrh	r3, [r4, #12]
 801d01c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d020:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d024:	d003      	beq.n	801d02e <__swsetup_r+0x7a>
 801d026:	4621      	mov	r1, r4
 801d028:	4628      	mov	r0, r5
 801d02a:	f000 fdb7 	bl	801db9c <__smakebuf_r>
 801d02e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d032:	f013 0201 	ands.w	r2, r3, #1
 801d036:	d00a      	beq.n	801d04e <__swsetup_r+0x9a>
 801d038:	2200      	movs	r2, #0
 801d03a:	60a2      	str	r2, [r4, #8]
 801d03c:	6962      	ldr	r2, [r4, #20]
 801d03e:	4252      	negs	r2, r2
 801d040:	61a2      	str	r2, [r4, #24]
 801d042:	6922      	ldr	r2, [r4, #16]
 801d044:	b942      	cbnz	r2, 801d058 <__swsetup_r+0xa4>
 801d046:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d04a:	d1c5      	bne.n	801cfd8 <__swsetup_r+0x24>
 801d04c:	bd38      	pop	{r3, r4, r5, pc}
 801d04e:	0799      	lsls	r1, r3, #30
 801d050:	bf58      	it	pl
 801d052:	6962      	ldrpl	r2, [r4, #20]
 801d054:	60a2      	str	r2, [r4, #8]
 801d056:	e7f4      	b.n	801d042 <__swsetup_r+0x8e>
 801d058:	2000      	movs	r0, #0
 801d05a:	e7f7      	b.n	801d04c <__swsetup_r+0x98>
 801d05c:	240013a0 	.word	0x240013a0

0801d060 <memcmp>:
 801d060:	b510      	push	{r4, lr}
 801d062:	3901      	subs	r1, #1
 801d064:	4402      	add	r2, r0
 801d066:	4290      	cmp	r0, r2
 801d068:	d101      	bne.n	801d06e <memcmp+0xe>
 801d06a:	2000      	movs	r0, #0
 801d06c:	e005      	b.n	801d07a <memcmp+0x1a>
 801d06e:	7803      	ldrb	r3, [r0, #0]
 801d070:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d074:	42a3      	cmp	r3, r4
 801d076:	d001      	beq.n	801d07c <memcmp+0x1c>
 801d078:	1b18      	subs	r0, r3, r4
 801d07a:	bd10      	pop	{r4, pc}
 801d07c:	3001      	adds	r0, #1
 801d07e:	e7f2      	b.n	801d066 <memcmp+0x6>

0801d080 <memmove>:
 801d080:	4288      	cmp	r0, r1
 801d082:	b510      	push	{r4, lr}
 801d084:	eb01 0402 	add.w	r4, r1, r2
 801d088:	d902      	bls.n	801d090 <memmove+0x10>
 801d08a:	4284      	cmp	r4, r0
 801d08c:	4623      	mov	r3, r4
 801d08e:	d807      	bhi.n	801d0a0 <memmove+0x20>
 801d090:	1e43      	subs	r3, r0, #1
 801d092:	42a1      	cmp	r1, r4
 801d094:	d008      	beq.n	801d0a8 <memmove+0x28>
 801d096:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d09a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d09e:	e7f8      	b.n	801d092 <memmove+0x12>
 801d0a0:	4402      	add	r2, r0
 801d0a2:	4601      	mov	r1, r0
 801d0a4:	428a      	cmp	r2, r1
 801d0a6:	d100      	bne.n	801d0aa <memmove+0x2a>
 801d0a8:	bd10      	pop	{r4, pc}
 801d0aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d0ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d0b2:	e7f7      	b.n	801d0a4 <memmove+0x24>

0801d0b4 <memset>:
 801d0b4:	4402      	add	r2, r0
 801d0b6:	4603      	mov	r3, r0
 801d0b8:	4293      	cmp	r3, r2
 801d0ba:	d100      	bne.n	801d0be <memset+0xa>
 801d0bc:	4770      	bx	lr
 801d0be:	f803 1b01 	strb.w	r1, [r3], #1
 801d0c2:	e7f9      	b.n	801d0b8 <memset+0x4>

0801d0c4 <strchr>:
 801d0c4:	b2c9      	uxtb	r1, r1
 801d0c6:	4603      	mov	r3, r0
 801d0c8:	4618      	mov	r0, r3
 801d0ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d0ce:	b112      	cbz	r2, 801d0d6 <strchr+0x12>
 801d0d0:	428a      	cmp	r2, r1
 801d0d2:	d1f9      	bne.n	801d0c8 <strchr+0x4>
 801d0d4:	4770      	bx	lr
 801d0d6:	2900      	cmp	r1, #0
 801d0d8:	bf18      	it	ne
 801d0da:	2000      	movne	r0, #0
 801d0dc:	4770      	bx	lr

0801d0de <strncmp>:
 801d0de:	b510      	push	{r4, lr}
 801d0e0:	b16a      	cbz	r2, 801d0fe <strncmp+0x20>
 801d0e2:	3901      	subs	r1, #1
 801d0e4:	1884      	adds	r4, r0, r2
 801d0e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d0ea:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801d0ee:	429a      	cmp	r2, r3
 801d0f0:	d103      	bne.n	801d0fa <strncmp+0x1c>
 801d0f2:	42a0      	cmp	r0, r4
 801d0f4:	d001      	beq.n	801d0fa <strncmp+0x1c>
 801d0f6:	2a00      	cmp	r2, #0
 801d0f8:	d1f5      	bne.n	801d0e6 <strncmp+0x8>
 801d0fa:	1ad0      	subs	r0, r2, r3
 801d0fc:	bd10      	pop	{r4, pc}
 801d0fe:	4610      	mov	r0, r2
 801d100:	e7fc      	b.n	801d0fc <strncmp+0x1e>

0801d102 <strstr>:
 801d102:	780a      	ldrb	r2, [r1, #0]
 801d104:	b570      	push	{r4, r5, r6, lr}
 801d106:	b96a      	cbnz	r2, 801d124 <strstr+0x22>
 801d108:	bd70      	pop	{r4, r5, r6, pc}
 801d10a:	429a      	cmp	r2, r3
 801d10c:	d109      	bne.n	801d122 <strstr+0x20>
 801d10e:	460c      	mov	r4, r1
 801d110:	4605      	mov	r5, r0
 801d112:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801d116:	2b00      	cmp	r3, #0
 801d118:	d0f6      	beq.n	801d108 <strstr+0x6>
 801d11a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801d11e:	429e      	cmp	r6, r3
 801d120:	d0f7      	beq.n	801d112 <strstr+0x10>
 801d122:	3001      	adds	r0, #1
 801d124:	7803      	ldrb	r3, [r0, #0]
 801d126:	2b00      	cmp	r3, #0
 801d128:	d1ef      	bne.n	801d10a <strstr+0x8>
 801d12a:	4618      	mov	r0, r3
 801d12c:	e7ec      	b.n	801d108 <strstr+0x6>
	...

0801d130 <_close_r>:
 801d130:	b538      	push	{r3, r4, r5, lr}
 801d132:	4d06      	ldr	r5, [pc, #24]	@ (801d14c <_close_r+0x1c>)
 801d134:	2300      	movs	r3, #0
 801d136:	4604      	mov	r4, r0
 801d138:	4608      	mov	r0, r1
 801d13a:	602b      	str	r3, [r5, #0]
 801d13c:	f7e4 fdba 	bl	8001cb4 <_close>
 801d140:	1c43      	adds	r3, r0, #1
 801d142:	d102      	bne.n	801d14a <_close_r+0x1a>
 801d144:	682b      	ldr	r3, [r5, #0]
 801d146:	b103      	cbz	r3, 801d14a <_close_r+0x1a>
 801d148:	6023      	str	r3, [r4, #0]
 801d14a:	bd38      	pop	{r3, r4, r5, pc}
 801d14c:	240694e8 	.word	0x240694e8

0801d150 <_reclaim_reent>:
 801d150:	4b29      	ldr	r3, [pc, #164]	@ (801d1f8 <_reclaim_reent+0xa8>)
 801d152:	681b      	ldr	r3, [r3, #0]
 801d154:	4283      	cmp	r3, r0
 801d156:	b570      	push	{r4, r5, r6, lr}
 801d158:	4604      	mov	r4, r0
 801d15a:	d04b      	beq.n	801d1f4 <_reclaim_reent+0xa4>
 801d15c:	69c3      	ldr	r3, [r0, #28]
 801d15e:	b1ab      	cbz	r3, 801d18c <_reclaim_reent+0x3c>
 801d160:	68db      	ldr	r3, [r3, #12]
 801d162:	b16b      	cbz	r3, 801d180 <_reclaim_reent+0x30>
 801d164:	2500      	movs	r5, #0
 801d166:	69e3      	ldr	r3, [r4, #28]
 801d168:	68db      	ldr	r3, [r3, #12]
 801d16a:	5959      	ldr	r1, [r3, r5]
 801d16c:	2900      	cmp	r1, #0
 801d16e:	d13b      	bne.n	801d1e8 <_reclaim_reent+0x98>
 801d170:	3504      	adds	r5, #4
 801d172:	2d80      	cmp	r5, #128	@ 0x80
 801d174:	d1f7      	bne.n	801d166 <_reclaim_reent+0x16>
 801d176:	69e3      	ldr	r3, [r4, #28]
 801d178:	4620      	mov	r0, r4
 801d17a:	68d9      	ldr	r1, [r3, #12]
 801d17c:	f000 f8f2 	bl	801d364 <_free_r>
 801d180:	69e3      	ldr	r3, [r4, #28]
 801d182:	6819      	ldr	r1, [r3, #0]
 801d184:	b111      	cbz	r1, 801d18c <_reclaim_reent+0x3c>
 801d186:	4620      	mov	r0, r4
 801d188:	f000 f8ec 	bl	801d364 <_free_r>
 801d18c:	6961      	ldr	r1, [r4, #20]
 801d18e:	b111      	cbz	r1, 801d196 <_reclaim_reent+0x46>
 801d190:	4620      	mov	r0, r4
 801d192:	f000 f8e7 	bl	801d364 <_free_r>
 801d196:	69e1      	ldr	r1, [r4, #28]
 801d198:	b111      	cbz	r1, 801d1a0 <_reclaim_reent+0x50>
 801d19a:	4620      	mov	r0, r4
 801d19c:	f000 f8e2 	bl	801d364 <_free_r>
 801d1a0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d1a2:	b111      	cbz	r1, 801d1aa <_reclaim_reent+0x5a>
 801d1a4:	4620      	mov	r0, r4
 801d1a6:	f000 f8dd 	bl	801d364 <_free_r>
 801d1aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d1ac:	b111      	cbz	r1, 801d1b4 <_reclaim_reent+0x64>
 801d1ae:	4620      	mov	r0, r4
 801d1b0:	f000 f8d8 	bl	801d364 <_free_r>
 801d1b4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801d1b6:	b111      	cbz	r1, 801d1be <_reclaim_reent+0x6e>
 801d1b8:	4620      	mov	r0, r4
 801d1ba:	f000 f8d3 	bl	801d364 <_free_r>
 801d1be:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801d1c0:	b111      	cbz	r1, 801d1c8 <_reclaim_reent+0x78>
 801d1c2:	4620      	mov	r0, r4
 801d1c4:	f000 f8ce 	bl	801d364 <_free_r>
 801d1c8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801d1ca:	b111      	cbz	r1, 801d1d2 <_reclaim_reent+0x82>
 801d1cc:	4620      	mov	r0, r4
 801d1ce:	f000 f8c9 	bl	801d364 <_free_r>
 801d1d2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801d1d4:	b111      	cbz	r1, 801d1dc <_reclaim_reent+0x8c>
 801d1d6:	4620      	mov	r0, r4
 801d1d8:	f000 f8c4 	bl	801d364 <_free_r>
 801d1dc:	6a23      	ldr	r3, [r4, #32]
 801d1de:	b14b      	cbz	r3, 801d1f4 <_reclaim_reent+0xa4>
 801d1e0:	4620      	mov	r0, r4
 801d1e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d1e6:	4718      	bx	r3
 801d1e8:	680e      	ldr	r6, [r1, #0]
 801d1ea:	4620      	mov	r0, r4
 801d1ec:	f000 f8ba 	bl	801d364 <_free_r>
 801d1f0:	4631      	mov	r1, r6
 801d1f2:	e7bb      	b.n	801d16c <_reclaim_reent+0x1c>
 801d1f4:	bd70      	pop	{r4, r5, r6, pc}
 801d1f6:	bf00      	nop
 801d1f8:	240013a0 	.word	0x240013a0

0801d1fc <_lseek_r>:
 801d1fc:	b538      	push	{r3, r4, r5, lr}
 801d1fe:	4d07      	ldr	r5, [pc, #28]	@ (801d21c <_lseek_r+0x20>)
 801d200:	4604      	mov	r4, r0
 801d202:	4608      	mov	r0, r1
 801d204:	4611      	mov	r1, r2
 801d206:	2200      	movs	r2, #0
 801d208:	602a      	str	r2, [r5, #0]
 801d20a:	461a      	mov	r2, r3
 801d20c:	f7e4 fd79 	bl	8001d02 <_lseek>
 801d210:	1c43      	adds	r3, r0, #1
 801d212:	d102      	bne.n	801d21a <_lseek_r+0x1e>
 801d214:	682b      	ldr	r3, [r5, #0]
 801d216:	b103      	cbz	r3, 801d21a <_lseek_r+0x1e>
 801d218:	6023      	str	r3, [r4, #0]
 801d21a:	bd38      	pop	{r3, r4, r5, pc}
 801d21c:	240694e8 	.word	0x240694e8

0801d220 <_read_r>:
 801d220:	b538      	push	{r3, r4, r5, lr}
 801d222:	4d07      	ldr	r5, [pc, #28]	@ (801d240 <_read_r+0x20>)
 801d224:	4604      	mov	r4, r0
 801d226:	4608      	mov	r0, r1
 801d228:	4611      	mov	r1, r2
 801d22a:	2200      	movs	r2, #0
 801d22c:	602a      	str	r2, [r5, #0]
 801d22e:	461a      	mov	r2, r3
 801d230:	f7e4 fd07 	bl	8001c42 <_read>
 801d234:	1c43      	adds	r3, r0, #1
 801d236:	d102      	bne.n	801d23e <_read_r+0x1e>
 801d238:	682b      	ldr	r3, [r5, #0]
 801d23a:	b103      	cbz	r3, 801d23e <_read_r+0x1e>
 801d23c:	6023      	str	r3, [r4, #0]
 801d23e:	bd38      	pop	{r3, r4, r5, pc}
 801d240:	240694e8 	.word	0x240694e8

0801d244 <_sbrk_r>:
 801d244:	b538      	push	{r3, r4, r5, lr}
 801d246:	4d06      	ldr	r5, [pc, #24]	@ (801d260 <_sbrk_r+0x1c>)
 801d248:	2300      	movs	r3, #0
 801d24a:	4604      	mov	r4, r0
 801d24c:	4608      	mov	r0, r1
 801d24e:	602b      	str	r3, [r5, #0]
 801d250:	f7e4 fd64 	bl	8001d1c <_sbrk>
 801d254:	1c43      	adds	r3, r0, #1
 801d256:	d102      	bne.n	801d25e <_sbrk_r+0x1a>
 801d258:	682b      	ldr	r3, [r5, #0]
 801d25a:	b103      	cbz	r3, 801d25e <_sbrk_r+0x1a>
 801d25c:	6023      	str	r3, [r4, #0]
 801d25e:	bd38      	pop	{r3, r4, r5, pc}
 801d260:	240694e8 	.word	0x240694e8

0801d264 <_write_r>:
 801d264:	b538      	push	{r3, r4, r5, lr}
 801d266:	4d07      	ldr	r5, [pc, #28]	@ (801d284 <_write_r+0x20>)
 801d268:	4604      	mov	r4, r0
 801d26a:	4608      	mov	r0, r1
 801d26c:	4611      	mov	r1, r2
 801d26e:	2200      	movs	r2, #0
 801d270:	602a      	str	r2, [r5, #0]
 801d272:	461a      	mov	r2, r3
 801d274:	f7e4 fd02 	bl	8001c7c <_write>
 801d278:	1c43      	adds	r3, r0, #1
 801d27a:	d102      	bne.n	801d282 <_write_r+0x1e>
 801d27c:	682b      	ldr	r3, [r5, #0]
 801d27e:	b103      	cbz	r3, 801d282 <_write_r+0x1e>
 801d280:	6023      	str	r3, [r4, #0]
 801d282:	bd38      	pop	{r3, r4, r5, pc}
 801d284:	240694e8 	.word	0x240694e8

0801d288 <__errno>:
 801d288:	4b01      	ldr	r3, [pc, #4]	@ (801d290 <__errno+0x8>)
 801d28a:	6818      	ldr	r0, [r3, #0]
 801d28c:	4770      	bx	lr
 801d28e:	bf00      	nop
 801d290:	240013a0 	.word	0x240013a0

0801d294 <__libc_init_array>:
 801d294:	b570      	push	{r4, r5, r6, lr}
 801d296:	4d0d      	ldr	r5, [pc, #52]	@ (801d2cc <__libc_init_array+0x38>)
 801d298:	4c0d      	ldr	r4, [pc, #52]	@ (801d2d0 <__libc_init_array+0x3c>)
 801d29a:	1b64      	subs	r4, r4, r5
 801d29c:	10a4      	asrs	r4, r4, #2
 801d29e:	2600      	movs	r6, #0
 801d2a0:	42a6      	cmp	r6, r4
 801d2a2:	d109      	bne.n	801d2b8 <__libc_init_array+0x24>
 801d2a4:	4d0b      	ldr	r5, [pc, #44]	@ (801d2d4 <__libc_init_array+0x40>)
 801d2a6:	4c0c      	ldr	r4, [pc, #48]	@ (801d2d8 <__libc_init_array+0x44>)
 801d2a8:	f000 fe62 	bl	801df70 <_init>
 801d2ac:	1b64      	subs	r4, r4, r5
 801d2ae:	10a4      	asrs	r4, r4, #2
 801d2b0:	2600      	movs	r6, #0
 801d2b2:	42a6      	cmp	r6, r4
 801d2b4:	d105      	bne.n	801d2c2 <__libc_init_array+0x2e>
 801d2b6:	bd70      	pop	{r4, r5, r6, pc}
 801d2b8:	f855 3b04 	ldr.w	r3, [r5], #4
 801d2bc:	4798      	blx	r3
 801d2be:	3601      	adds	r6, #1
 801d2c0:	e7ee      	b.n	801d2a0 <__libc_init_array+0xc>
 801d2c2:	f855 3b04 	ldr.w	r3, [r5], #4
 801d2c6:	4798      	blx	r3
 801d2c8:	3601      	adds	r6, #1
 801d2ca:	e7f2      	b.n	801d2b2 <__libc_init_array+0x1e>
 801d2cc:	08020858 	.word	0x08020858
 801d2d0:	08020858 	.word	0x08020858
 801d2d4:	08020858 	.word	0x08020858
 801d2d8:	08020898 	.word	0x08020898

0801d2dc <__retarget_lock_init_recursive>:
 801d2dc:	4770      	bx	lr

0801d2de <__retarget_lock_acquire_recursive>:
 801d2de:	4770      	bx	lr

0801d2e0 <__retarget_lock_release_recursive>:
 801d2e0:	4770      	bx	lr

0801d2e2 <strcpy>:
 801d2e2:	4603      	mov	r3, r0
 801d2e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d2e8:	f803 2b01 	strb.w	r2, [r3], #1
 801d2ec:	2a00      	cmp	r2, #0
 801d2ee:	d1f9      	bne.n	801d2e4 <strcpy+0x2>
 801d2f0:	4770      	bx	lr

0801d2f2 <memcpy>:
 801d2f2:	440a      	add	r2, r1
 801d2f4:	4291      	cmp	r1, r2
 801d2f6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801d2fa:	d100      	bne.n	801d2fe <memcpy+0xc>
 801d2fc:	4770      	bx	lr
 801d2fe:	b510      	push	{r4, lr}
 801d300:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d304:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d308:	4291      	cmp	r1, r2
 801d30a:	d1f9      	bne.n	801d300 <memcpy+0xe>
 801d30c:	bd10      	pop	{r4, pc}
	...

0801d310 <__assert_func>:
 801d310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d312:	4614      	mov	r4, r2
 801d314:	461a      	mov	r2, r3
 801d316:	4b09      	ldr	r3, [pc, #36]	@ (801d33c <__assert_func+0x2c>)
 801d318:	681b      	ldr	r3, [r3, #0]
 801d31a:	4605      	mov	r5, r0
 801d31c:	68d8      	ldr	r0, [r3, #12]
 801d31e:	b954      	cbnz	r4, 801d336 <__assert_func+0x26>
 801d320:	4b07      	ldr	r3, [pc, #28]	@ (801d340 <__assert_func+0x30>)
 801d322:	461c      	mov	r4, r3
 801d324:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d328:	9100      	str	r1, [sp, #0]
 801d32a:	462b      	mov	r3, r5
 801d32c:	4905      	ldr	r1, [pc, #20]	@ (801d344 <__assert_func+0x34>)
 801d32e:	f000 fbfd 	bl	801db2c <fiprintf>
 801d332:	f000 fc91 	bl	801dc58 <abort>
 801d336:	4b04      	ldr	r3, [pc, #16]	@ (801d348 <__assert_func+0x38>)
 801d338:	e7f4      	b.n	801d324 <__assert_func+0x14>
 801d33a:	bf00      	nop
 801d33c:	240013a0 	.word	0x240013a0
 801d340:	08020819 	.word	0x08020819
 801d344:	080207eb 	.word	0x080207eb
 801d348:	080207de 	.word	0x080207de

0801d34c <__env_lock>:
 801d34c:	4801      	ldr	r0, [pc, #4]	@ (801d354 <__env_lock+0x8>)
 801d34e:	f7ff bfc6 	b.w	801d2de <__retarget_lock_acquire_recursive>
 801d352:	bf00      	nop
 801d354:	240694ec 	.word	0x240694ec

0801d358 <__env_unlock>:
 801d358:	4801      	ldr	r0, [pc, #4]	@ (801d360 <__env_unlock+0x8>)
 801d35a:	f7ff bfc1 	b.w	801d2e0 <__retarget_lock_release_recursive>
 801d35e:	bf00      	nop
 801d360:	240694ec 	.word	0x240694ec

0801d364 <_free_r>:
 801d364:	b538      	push	{r3, r4, r5, lr}
 801d366:	4605      	mov	r5, r0
 801d368:	2900      	cmp	r1, #0
 801d36a:	d041      	beq.n	801d3f0 <_free_r+0x8c>
 801d36c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d370:	1f0c      	subs	r4, r1, #4
 801d372:	2b00      	cmp	r3, #0
 801d374:	bfb8      	it	lt
 801d376:	18e4      	addlt	r4, r4, r3
 801d378:	f7ff faec 	bl	801c954 <__malloc_lock>
 801d37c:	4a1d      	ldr	r2, [pc, #116]	@ (801d3f4 <_free_r+0x90>)
 801d37e:	6813      	ldr	r3, [r2, #0]
 801d380:	b933      	cbnz	r3, 801d390 <_free_r+0x2c>
 801d382:	6063      	str	r3, [r4, #4]
 801d384:	6014      	str	r4, [r2, #0]
 801d386:	4628      	mov	r0, r5
 801d388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d38c:	f7ff bae8 	b.w	801c960 <__malloc_unlock>
 801d390:	42a3      	cmp	r3, r4
 801d392:	d908      	bls.n	801d3a6 <_free_r+0x42>
 801d394:	6820      	ldr	r0, [r4, #0]
 801d396:	1821      	adds	r1, r4, r0
 801d398:	428b      	cmp	r3, r1
 801d39a:	bf01      	itttt	eq
 801d39c:	6819      	ldreq	r1, [r3, #0]
 801d39e:	685b      	ldreq	r3, [r3, #4]
 801d3a0:	1809      	addeq	r1, r1, r0
 801d3a2:	6021      	streq	r1, [r4, #0]
 801d3a4:	e7ed      	b.n	801d382 <_free_r+0x1e>
 801d3a6:	461a      	mov	r2, r3
 801d3a8:	685b      	ldr	r3, [r3, #4]
 801d3aa:	b10b      	cbz	r3, 801d3b0 <_free_r+0x4c>
 801d3ac:	42a3      	cmp	r3, r4
 801d3ae:	d9fa      	bls.n	801d3a6 <_free_r+0x42>
 801d3b0:	6811      	ldr	r1, [r2, #0]
 801d3b2:	1850      	adds	r0, r2, r1
 801d3b4:	42a0      	cmp	r0, r4
 801d3b6:	d10b      	bne.n	801d3d0 <_free_r+0x6c>
 801d3b8:	6820      	ldr	r0, [r4, #0]
 801d3ba:	4401      	add	r1, r0
 801d3bc:	1850      	adds	r0, r2, r1
 801d3be:	4283      	cmp	r3, r0
 801d3c0:	6011      	str	r1, [r2, #0]
 801d3c2:	d1e0      	bne.n	801d386 <_free_r+0x22>
 801d3c4:	6818      	ldr	r0, [r3, #0]
 801d3c6:	685b      	ldr	r3, [r3, #4]
 801d3c8:	6053      	str	r3, [r2, #4]
 801d3ca:	4408      	add	r0, r1
 801d3cc:	6010      	str	r0, [r2, #0]
 801d3ce:	e7da      	b.n	801d386 <_free_r+0x22>
 801d3d0:	d902      	bls.n	801d3d8 <_free_r+0x74>
 801d3d2:	230c      	movs	r3, #12
 801d3d4:	602b      	str	r3, [r5, #0]
 801d3d6:	e7d6      	b.n	801d386 <_free_r+0x22>
 801d3d8:	6820      	ldr	r0, [r4, #0]
 801d3da:	1821      	adds	r1, r4, r0
 801d3dc:	428b      	cmp	r3, r1
 801d3de:	bf04      	itt	eq
 801d3e0:	6819      	ldreq	r1, [r3, #0]
 801d3e2:	685b      	ldreq	r3, [r3, #4]
 801d3e4:	6063      	str	r3, [r4, #4]
 801d3e6:	bf04      	itt	eq
 801d3e8:	1809      	addeq	r1, r1, r0
 801d3ea:	6021      	streq	r1, [r4, #0]
 801d3ec:	6054      	str	r4, [r2, #4]
 801d3ee:	e7ca      	b.n	801d386 <_free_r+0x22>
 801d3f0:	bd38      	pop	{r3, r4, r5, pc}
 801d3f2:	bf00      	nop
 801d3f4:	240693a8 	.word	0x240693a8

0801d3f8 <_malloc_usable_size_r>:
 801d3f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d3fc:	1f18      	subs	r0, r3, #4
 801d3fe:	2b00      	cmp	r3, #0
 801d400:	bfbc      	itt	lt
 801d402:	580b      	ldrlt	r3, [r1, r0]
 801d404:	18c0      	addlt	r0, r0, r3
 801d406:	4770      	bx	lr

0801d408 <__ssputs_r>:
 801d408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d40c:	688e      	ldr	r6, [r1, #8]
 801d40e:	461f      	mov	r7, r3
 801d410:	42be      	cmp	r6, r7
 801d412:	680b      	ldr	r3, [r1, #0]
 801d414:	4682      	mov	sl, r0
 801d416:	460c      	mov	r4, r1
 801d418:	4690      	mov	r8, r2
 801d41a:	d82d      	bhi.n	801d478 <__ssputs_r+0x70>
 801d41c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d420:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801d424:	d026      	beq.n	801d474 <__ssputs_r+0x6c>
 801d426:	6965      	ldr	r5, [r4, #20]
 801d428:	6909      	ldr	r1, [r1, #16]
 801d42a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d42e:	eba3 0901 	sub.w	r9, r3, r1
 801d432:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d436:	1c7b      	adds	r3, r7, #1
 801d438:	444b      	add	r3, r9
 801d43a:	106d      	asrs	r5, r5, #1
 801d43c:	429d      	cmp	r5, r3
 801d43e:	bf38      	it	cc
 801d440:	461d      	movcc	r5, r3
 801d442:	0553      	lsls	r3, r2, #21
 801d444:	d527      	bpl.n	801d496 <__ssputs_r+0x8e>
 801d446:	4629      	mov	r1, r5
 801d448:	f7ff fa04 	bl	801c854 <_malloc_r>
 801d44c:	4606      	mov	r6, r0
 801d44e:	b360      	cbz	r0, 801d4aa <__ssputs_r+0xa2>
 801d450:	6921      	ldr	r1, [r4, #16]
 801d452:	464a      	mov	r2, r9
 801d454:	f7ff ff4d 	bl	801d2f2 <memcpy>
 801d458:	89a3      	ldrh	r3, [r4, #12]
 801d45a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801d45e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d462:	81a3      	strh	r3, [r4, #12]
 801d464:	6126      	str	r6, [r4, #16]
 801d466:	6165      	str	r5, [r4, #20]
 801d468:	444e      	add	r6, r9
 801d46a:	eba5 0509 	sub.w	r5, r5, r9
 801d46e:	6026      	str	r6, [r4, #0]
 801d470:	60a5      	str	r5, [r4, #8]
 801d472:	463e      	mov	r6, r7
 801d474:	42be      	cmp	r6, r7
 801d476:	d900      	bls.n	801d47a <__ssputs_r+0x72>
 801d478:	463e      	mov	r6, r7
 801d47a:	6820      	ldr	r0, [r4, #0]
 801d47c:	4632      	mov	r2, r6
 801d47e:	4641      	mov	r1, r8
 801d480:	f7ff fdfe 	bl	801d080 <memmove>
 801d484:	68a3      	ldr	r3, [r4, #8]
 801d486:	1b9b      	subs	r3, r3, r6
 801d488:	60a3      	str	r3, [r4, #8]
 801d48a:	6823      	ldr	r3, [r4, #0]
 801d48c:	4433      	add	r3, r6
 801d48e:	6023      	str	r3, [r4, #0]
 801d490:	2000      	movs	r0, #0
 801d492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d496:	462a      	mov	r2, r5
 801d498:	f7ff fadc 	bl	801ca54 <_realloc_r>
 801d49c:	4606      	mov	r6, r0
 801d49e:	2800      	cmp	r0, #0
 801d4a0:	d1e0      	bne.n	801d464 <__ssputs_r+0x5c>
 801d4a2:	6921      	ldr	r1, [r4, #16]
 801d4a4:	4650      	mov	r0, sl
 801d4a6:	f7ff ff5d 	bl	801d364 <_free_r>
 801d4aa:	230c      	movs	r3, #12
 801d4ac:	f8ca 3000 	str.w	r3, [sl]
 801d4b0:	89a3      	ldrh	r3, [r4, #12]
 801d4b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d4b6:	81a3      	strh	r3, [r4, #12]
 801d4b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d4bc:	e7e9      	b.n	801d492 <__ssputs_r+0x8a>
	...

0801d4c0 <_svfiprintf_r>:
 801d4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4c4:	4698      	mov	r8, r3
 801d4c6:	898b      	ldrh	r3, [r1, #12]
 801d4c8:	061b      	lsls	r3, r3, #24
 801d4ca:	b09d      	sub	sp, #116	@ 0x74
 801d4cc:	4607      	mov	r7, r0
 801d4ce:	460d      	mov	r5, r1
 801d4d0:	4614      	mov	r4, r2
 801d4d2:	d510      	bpl.n	801d4f6 <_svfiprintf_r+0x36>
 801d4d4:	690b      	ldr	r3, [r1, #16]
 801d4d6:	b973      	cbnz	r3, 801d4f6 <_svfiprintf_r+0x36>
 801d4d8:	2140      	movs	r1, #64	@ 0x40
 801d4da:	f7ff f9bb 	bl	801c854 <_malloc_r>
 801d4de:	6028      	str	r0, [r5, #0]
 801d4e0:	6128      	str	r0, [r5, #16]
 801d4e2:	b930      	cbnz	r0, 801d4f2 <_svfiprintf_r+0x32>
 801d4e4:	230c      	movs	r3, #12
 801d4e6:	603b      	str	r3, [r7, #0]
 801d4e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d4ec:	b01d      	add	sp, #116	@ 0x74
 801d4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4f2:	2340      	movs	r3, #64	@ 0x40
 801d4f4:	616b      	str	r3, [r5, #20]
 801d4f6:	2300      	movs	r3, #0
 801d4f8:	9309      	str	r3, [sp, #36]	@ 0x24
 801d4fa:	2320      	movs	r3, #32
 801d4fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d500:	f8cd 800c 	str.w	r8, [sp, #12]
 801d504:	2330      	movs	r3, #48	@ 0x30
 801d506:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801d6a4 <_svfiprintf_r+0x1e4>
 801d50a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d50e:	f04f 0901 	mov.w	r9, #1
 801d512:	4623      	mov	r3, r4
 801d514:	469a      	mov	sl, r3
 801d516:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d51a:	b10a      	cbz	r2, 801d520 <_svfiprintf_r+0x60>
 801d51c:	2a25      	cmp	r2, #37	@ 0x25
 801d51e:	d1f9      	bne.n	801d514 <_svfiprintf_r+0x54>
 801d520:	ebba 0b04 	subs.w	fp, sl, r4
 801d524:	d00b      	beq.n	801d53e <_svfiprintf_r+0x7e>
 801d526:	465b      	mov	r3, fp
 801d528:	4622      	mov	r2, r4
 801d52a:	4629      	mov	r1, r5
 801d52c:	4638      	mov	r0, r7
 801d52e:	f7ff ff6b 	bl	801d408 <__ssputs_r>
 801d532:	3001      	adds	r0, #1
 801d534:	f000 80a7 	beq.w	801d686 <_svfiprintf_r+0x1c6>
 801d538:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d53a:	445a      	add	r2, fp
 801d53c:	9209      	str	r2, [sp, #36]	@ 0x24
 801d53e:	f89a 3000 	ldrb.w	r3, [sl]
 801d542:	2b00      	cmp	r3, #0
 801d544:	f000 809f 	beq.w	801d686 <_svfiprintf_r+0x1c6>
 801d548:	2300      	movs	r3, #0
 801d54a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d54e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d552:	f10a 0a01 	add.w	sl, sl, #1
 801d556:	9304      	str	r3, [sp, #16]
 801d558:	9307      	str	r3, [sp, #28]
 801d55a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d55e:	931a      	str	r3, [sp, #104]	@ 0x68
 801d560:	4654      	mov	r4, sl
 801d562:	2205      	movs	r2, #5
 801d564:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d568:	484e      	ldr	r0, [pc, #312]	@ (801d6a4 <_svfiprintf_r+0x1e4>)
 801d56a:	f7e2 fed1 	bl	8000310 <memchr>
 801d56e:	9a04      	ldr	r2, [sp, #16]
 801d570:	b9d8      	cbnz	r0, 801d5aa <_svfiprintf_r+0xea>
 801d572:	06d0      	lsls	r0, r2, #27
 801d574:	bf44      	itt	mi
 801d576:	2320      	movmi	r3, #32
 801d578:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d57c:	0711      	lsls	r1, r2, #28
 801d57e:	bf44      	itt	mi
 801d580:	232b      	movmi	r3, #43	@ 0x2b
 801d582:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d586:	f89a 3000 	ldrb.w	r3, [sl]
 801d58a:	2b2a      	cmp	r3, #42	@ 0x2a
 801d58c:	d015      	beq.n	801d5ba <_svfiprintf_r+0xfa>
 801d58e:	9a07      	ldr	r2, [sp, #28]
 801d590:	4654      	mov	r4, sl
 801d592:	2000      	movs	r0, #0
 801d594:	f04f 0c0a 	mov.w	ip, #10
 801d598:	4621      	mov	r1, r4
 801d59a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d59e:	3b30      	subs	r3, #48	@ 0x30
 801d5a0:	2b09      	cmp	r3, #9
 801d5a2:	d94b      	bls.n	801d63c <_svfiprintf_r+0x17c>
 801d5a4:	b1b0      	cbz	r0, 801d5d4 <_svfiprintf_r+0x114>
 801d5a6:	9207      	str	r2, [sp, #28]
 801d5a8:	e014      	b.n	801d5d4 <_svfiprintf_r+0x114>
 801d5aa:	eba0 0308 	sub.w	r3, r0, r8
 801d5ae:	fa09 f303 	lsl.w	r3, r9, r3
 801d5b2:	4313      	orrs	r3, r2
 801d5b4:	9304      	str	r3, [sp, #16]
 801d5b6:	46a2      	mov	sl, r4
 801d5b8:	e7d2      	b.n	801d560 <_svfiprintf_r+0xa0>
 801d5ba:	9b03      	ldr	r3, [sp, #12]
 801d5bc:	1d19      	adds	r1, r3, #4
 801d5be:	681b      	ldr	r3, [r3, #0]
 801d5c0:	9103      	str	r1, [sp, #12]
 801d5c2:	2b00      	cmp	r3, #0
 801d5c4:	bfbb      	ittet	lt
 801d5c6:	425b      	neglt	r3, r3
 801d5c8:	f042 0202 	orrlt.w	r2, r2, #2
 801d5cc:	9307      	strge	r3, [sp, #28]
 801d5ce:	9307      	strlt	r3, [sp, #28]
 801d5d0:	bfb8      	it	lt
 801d5d2:	9204      	strlt	r2, [sp, #16]
 801d5d4:	7823      	ldrb	r3, [r4, #0]
 801d5d6:	2b2e      	cmp	r3, #46	@ 0x2e
 801d5d8:	d10a      	bne.n	801d5f0 <_svfiprintf_r+0x130>
 801d5da:	7863      	ldrb	r3, [r4, #1]
 801d5dc:	2b2a      	cmp	r3, #42	@ 0x2a
 801d5de:	d132      	bne.n	801d646 <_svfiprintf_r+0x186>
 801d5e0:	9b03      	ldr	r3, [sp, #12]
 801d5e2:	1d1a      	adds	r2, r3, #4
 801d5e4:	681b      	ldr	r3, [r3, #0]
 801d5e6:	9203      	str	r2, [sp, #12]
 801d5e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d5ec:	3402      	adds	r4, #2
 801d5ee:	9305      	str	r3, [sp, #20]
 801d5f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801d6b4 <_svfiprintf_r+0x1f4>
 801d5f4:	7821      	ldrb	r1, [r4, #0]
 801d5f6:	2203      	movs	r2, #3
 801d5f8:	4650      	mov	r0, sl
 801d5fa:	f7e2 fe89 	bl	8000310 <memchr>
 801d5fe:	b138      	cbz	r0, 801d610 <_svfiprintf_r+0x150>
 801d600:	9b04      	ldr	r3, [sp, #16]
 801d602:	eba0 000a 	sub.w	r0, r0, sl
 801d606:	2240      	movs	r2, #64	@ 0x40
 801d608:	4082      	lsls	r2, r0
 801d60a:	4313      	orrs	r3, r2
 801d60c:	3401      	adds	r4, #1
 801d60e:	9304      	str	r3, [sp, #16]
 801d610:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d614:	4824      	ldr	r0, [pc, #144]	@ (801d6a8 <_svfiprintf_r+0x1e8>)
 801d616:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d61a:	2206      	movs	r2, #6
 801d61c:	f7e2 fe78 	bl	8000310 <memchr>
 801d620:	2800      	cmp	r0, #0
 801d622:	d036      	beq.n	801d692 <_svfiprintf_r+0x1d2>
 801d624:	4b21      	ldr	r3, [pc, #132]	@ (801d6ac <_svfiprintf_r+0x1ec>)
 801d626:	bb1b      	cbnz	r3, 801d670 <_svfiprintf_r+0x1b0>
 801d628:	9b03      	ldr	r3, [sp, #12]
 801d62a:	3307      	adds	r3, #7
 801d62c:	f023 0307 	bic.w	r3, r3, #7
 801d630:	3308      	adds	r3, #8
 801d632:	9303      	str	r3, [sp, #12]
 801d634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d636:	4433      	add	r3, r6
 801d638:	9309      	str	r3, [sp, #36]	@ 0x24
 801d63a:	e76a      	b.n	801d512 <_svfiprintf_r+0x52>
 801d63c:	fb0c 3202 	mla	r2, ip, r2, r3
 801d640:	460c      	mov	r4, r1
 801d642:	2001      	movs	r0, #1
 801d644:	e7a8      	b.n	801d598 <_svfiprintf_r+0xd8>
 801d646:	2300      	movs	r3, #0
 801d648:	3401      	adds	r4, #1
 801d64a:	9305      	str	r3, [sp, #20]
 801d64c:	4619      	mov	r1, r3
 801d64e:	f04f 0c0a 	mov.w	ip, #10
 801d652:	4620      	mov	r0, r4
 801d654:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d658:	3a30      	subs	r2, #48	@ 0x30
 801d65a:	2a09      	cmp	r2, #9
 801d65c:	d903      	bls.n	801d666 <_svfiprintf_r+0x1a6>
 801d65e:	2b00      	cmp	r3, #0
 801d660:	d0c6      	beq.n	801d5f0 <_svfiprintf_r+0x130>
 801d662:	9105      	str	r1, [sp, #20]
 801d664:	e7c4      	b.n	801d5f0 <_svfiprintf_r+0x130>
 801d666:	fb0c 2101 	mla	r1, ip, r1, r2
 801d66a:	4604      	mov	r4, r0
 801d66c:	2301      	movs	r3, #1
 801d66e:	e7f0      	b.n	801d652 <_svfiprintf_r+0x192>
 801d670:	ab03      	add	r3, sp, #12
 801d672:	9300      	str	r3, [sp, #0]
 801d674:	462a      	mov	r2, r5
 801d676:	4b0e      	ldr	r3, [pc, #56]	@ (801d6b0 <_svfiprintf_r+0x1f0>)
 801d678:	a904      	add	r1, sp, #16
 801d67a:	4638      	mov	r0, r7
 801d67c:	f3af 8000 	nop.w
 801d680:	1c42      	adds	r2, r0, #1
 801d682:	4606      	mov	r6, r0
 801d684:	d1d6      	bne.n	801d634 <_svfiprintf_r+0x174>
 801d686:	89ab      	ldrh	r3, [r5, #12]
 801d688:	065b      	lsls	r3, r3, #25
 801d68a:	f53f af2d 	bmi.w	801d4e8 <_svfiprintf_r+0x28>
 801d68e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d690:	e72c      	b.n	801d4ec <_svfiprintf_r+0x2c>
 801d692:	ab03      	add	r3, sp, #12
 801d694:	9300      	str	r3, [sp, #0]
 801d696:	462a      	mov	r2, r5
 801d698:	4b05      	ldr	r3, [pc, #20]	@ (801d6b0 <_svfiprintf_r+0x1f0>)
 801d69a:	a904      	add	r1, sp, #16
 801d69c:	4638      	mov	r0, r7
 801d69e:	f000 f879 	bl	801d794 <_printf_i>
 801d6a2:	e7ed      	b.n	801d680 <_svfiprintf_r+0x1c0>
 801d6a4:	0802081a 	.word	0x0802081a
 801d6a8:	08020824 	.word	0x08020824
 801d6ac:	00000000 	.word	0x00000000
 801d6b0:	0801d409 	.word	0x0801d409
 801d6b4:	08020820 	.word	0x08020820

0801d6b8 <_printf_common>:
 801d6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d6bc:	4616      	mov	r6, r2
 801d6be:	4698      	mov	r8, r3
 801d6c0:	688a      	ldr	r2, [r1, #8]
 801d6c2:	690b      	ldr	r3, [r1, #16]
 801d6c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d6c8:	4293      	cmp	r3, r2
 801d6ca:	bfb8      	it	lt
 801d6cc:	4613      	movlt	r3, r2
 801d6ce:	6033      	str	r3, [r6, #0]
 801d6d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801d6d4:	4607      	mov	r7, r0
 801d6d6:	460c      	mov	r4, r1
 801d6d8:	b10a      	cbz	r2, 801d6de <_printf_common+0x26>
 801d6da:	3301      	adds	r3, #1
 801d6dc:	6033      	str	r3, [r6, #0]
 801d6de:	6823      	ldr	r3, [r4, #0]
 801d6e0:	0699      	lsls	r1, r3, #26
 801d6e2:	bf42      	ittt	mi
 801d6e4:	6833      	ldrmi	r3, [r6, #0]
 801d6e6:	3302      	addmi	r3, #2
 801d6e8:	6033      	strmi	r3, [r6, #0]
 801d6ea:	6825      	ldr	r5, [r4, #0]
 801d6ec:	f015 0506 	ands.w	r5, r5, #6
 801d6f0:	d106      	bne.n	801d700 <_printf_common+0x48>
 801d6f2:	f104 0a19 	add.w	sl, r4, #25
 801d6f6:	68e3      	ldr	r3, [r4, #12]
 801d6f8:	6832      	ldr	r2, [r6, #0]
 801d6fa:	1a9b      	subs	r3, r3, r2
 801d6fc:	42ab      	cmp	r3, r5
 801d6fe:	dc26      	bgt.n	801d74e <_printf_common+0x96>
 801d700:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801d704:	6822      	ldr	r2, [r4, #0]
 801d706:	3b00      	subs	r3, #0
 801d708:	bf18      	it	ne
 801d70a:	2301      	movne	r3, #1
 801d70c:	0692      	lsls	r2, r2, #26
 801d70e:	d42b      	bmi.n	801d768 <_printf_common+0xb0>
 801d710:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801d714:	4641      	mov	r1, r8
 801d716:	4638      	mov	r0, r7
 801d718:	47c8      	blx	r9
 801d71a:	3001      	adds	r0, #1
 801d71c:	d01e      	beq.n	801d75c <_printf_common+0xa4>
 801d71e:	6823      	ldr	r3, [r4, #0]
 801d720:	6922      	ldr	r2, [r4, #16]
 801d722:	f003 0306 	and.w	r3, r3, #6
 801d726:	2b04      	cmp	r3, #4
 801d728:	bf02      	ittt	eq
 801d72a:	68e5      	ldreq	r5, [r4, #12]
 801d72c:	6833      	ldreq	r3, [r6, #0]
 801d72e:	1aed      	subeq	r5, r5, r3
 801d730:	68a3      	ldr	r3, [r4, #8]
 801d732:	bf0c      	ite	eq
 801d734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d738:	2500      	movne	r5, #0
 801d73a:	4293      	cmp	r3, r2
 801d73c:	bfc4      	itt	gt
 801d73e:	1a9b      	subgt	r3, r3, r2
 801d740:	18ed      	addgt	r5, r5, r3
 801d742:	2600      	movs	r6, #0
 801d744:	341a      	adds	r4, #26
 801d746:	42b5      	cmp	r5, r6
 801d748:	d11a      	bne.n	801d780 <_printf_common+0xc8>
 801d74a:	2000      	movs	r0, #0
 801d74c:	e008      	b.n	801d760 <_printf_common+0xa8>
 801d74e:	2301      	movs	r3, #1
 801d750:	4652      	mov	r2, sl
 801d752:	4641      	mov	r1, r8
 801d754:	4638      	mov	r0, r7
 801d756:	47c8      	blx	r9
 801d758:	3001      	adds	r0, #1
 801d75a:	d103      	bne.n	801d764 <_printf_common+0xac>
 801d75c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d764:	3501      	adds	r5, #1
 801d766:	e7c6      	b.n	801d6f6 <_printf_common+0x3e>
 801d768:	18e1      	adds	r1, r4, r3
 801d76a:	1c5a      	adds	r2, r3, #1
 801d76c:	2030      	movs	r0, #48	@ 0x30
 801d76e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801d772:	4422      	add	r2, r4
 801d774:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801d778:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801d77c:	3302      	adds	r3, #2
 801d77e:	e7c7      	b.n	801d710 <_printf_common+0x58>
 801d780:	2301      	movs	r3, #1
 801d782:	4622      	mov	r2, r4
 801d784:	4641      	mov	r1, r8
 801d786:	4638      	mov	r0, r7
 801d788:	47c8      	blx	r9
 801d78a:	3001      	adds	r0, #1
 801d78c:	d0e6      	beq.n	801d75c <_printf_common+0xa4>
 801d78e:	3601      	adds	r6, #1
 801d790:	e7d9      	b.n	801d746 <_printf_common+0x8e>
	...

0801d794 <_printf_i>:
 801d794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d798:	7e0f      	ldrb	r7, [r1, #24]
 801d79a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d79c:	2f78      	cmp	r7, #120	@ 0x78
 801d79e:	4691      	mov	r9, r2
 801d7a0:	4680      	mov	r8, r0
 801d7a2:	460c      	mov	r4, r1
 801d7a4:	469a      	mov	sl, r3
 801d7a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801d7aa:	d807      	bhi.n	801d7bc <_printf_i+0x28>
 801d7ac:	2f62      	cmp	r7, #98	@ 0x62
 801d7ae:	d80a      	bhi.n	801d7c6 <_printf_i+0x32>
 801d7b0:	2f00      	cmp	r7, #0
 801d7b2:	f000 80d2 	beq.w	801d95a <_printf_i+0x1c6>
 801d7b6:	2f58      	cmp	r7, #88	@ 0x58
 801d7b8:	f000 80b9 	beq.w	801d92e <_printf_i+0x19a>
 801d7bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d7c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801d7c4:	e03a      	b.n	801d83c <_printf_i+0xa8>
 801d7c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801d7ca:	2b15      	cmp	r3, #21
 801d7cc:	d8f6      	bhi.n	801d7bc <_printf_i+0x28>
 801d7ce:	a101      	add	r1, pc, #4	@ (adr r1, 801d7d4 <_printf_i+0x40>)
 801d7d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d7d4:	0801d82d 	.word	0x0801d82d
 801d7d8:	0801d841 	.word	0x0801d841
 801d7dc:	0801d7bd 	.word	0x0801d7bd
 801d7e0:	0801d7bd 	.word	0x0801d7bd
 801d7e4:	0801d7bd 	.word	0x0801d7bd
 801d7e8:	0801d7bd 	.word	0x0801d7bd
 801d7ec:	0801d841 	.word	0x0801d841
 801d7f0:	0801d7bd 	.word	0x0801d7bd
 801d7f4:	0801d7bd 	.word	0x0801d7bd
 801d7f8:	0801d7bd 	.word	0x0801d7bd
 801d7fc:	0801d7bd 	.word	0x0801d7bd
 801d800:	0801d941 	.word	0x0801d941
 801d804:	0801d86b 	.word	0x0801d86b
 801d808:	0801d8fb 	.word	0x0801d8fb
 801d80c:	0801d7bd 	.word	0x0801d7bd
 801d810:	0801d7bd 	.word	0x0801d7bd
 801d814:	0801d963 	.word	0x0801d963
 801d818:	0801d7bd 	.word	0x0801d7bd
 801d81c:	0801d86b 	.word	0x0801d86b
 801d820:	0801d7bd 	.word	0x0801d7bd
 801d824:	0801d7bd 	.word	0x0801d7bd
 801d828:	0801d903 	.word	0x0801d903
 801d82c:	6833      	ldr	r3, [r6, #0]
 801d82e:	1d1a      	adds	r2, r3, #4
 801d830:	681b      	ldr	r3, [r3, #0]
 801d832:	6032      	str	r2, [r6, #0]
 801d834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d838:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d83c:	2301      	movs	r3, #1
 801d83e:	e09d      	b.n	801d97c <_printf_i+0x1e8>
 801d840:	6833      	ldr	r3, [r6, #0]
 801d842:	6820      	ldr	r0, [r4, #0]
 801d844:	1d19      	adds	r1, r3, #4
 801d846:	6031      	str	r1, [r6, #0]
 801d848:	0606      	lsls	r6, r0, #24
 801d84a:	d501      	bpl.n	801d850 <_printf_i+0xbc>
 801d84c:	681d      	ldr	r5, [r3, #0]
 801d84e:	e003      	b.n	801d858 <_printf_i+0xc4>
 801d850:	0645      	lsls	r5, r0, #25
 801d852:	d5fb      	bpl.n	801d84c <_printf_i+0xb8>
 801d854:	f9b3 5000 	ldrsh.w	r5, [r3]
 801d858:	2d00      	cmp	r5, #0
 801d85a:	da03      	bge.n	801d864 <_printf_i+0xd0>
 801d85c:	232d      	movs	r3, #45	@ 0x2d
 801d85e:	426d      	negs	r5, r5
 801d860:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d864:	4859      	ldr	r0, [pc, #356]	@ (801d9cc <_printf_i+0x238>)
 801d866:	230a      	movs	r3, #10
 801d868:	e011      	b.n	801d88e <_printf_i+0xfa>
 801d86a:	6821      	ldr	r1, [r4, #0]
 801d86c:	6833      	ldr	r3, [r6, #0]
 801d86e:	0608      	lsls	r0, r1, #24
 801d870:	f853 5b04 	ldr.w	r5, [r3], #4
 801d874:	d402      	bmi.n	801d87c <_printf_i+0xe8>
 801d876:	0649      	lsls	r1, r1, #25
 801d878:	bf48      	it	mi
 801d87a:	b2ad      	uxthmi	r5, r5
 801d87c:	2f6f      	cmp	r7, #111	@ 0x6f
 801d87e:	4853      	ldr	r0, [pc, #332]	@ (801d9cc <_printf_i+0x238>)
 801d880:	6033      	str	r3, [r6, #0]
 801d882:	bf14      	ite	ne
 801d884:	230a      	movne	r3, #10
 801d886:	2308      	moveq	r3, #8
 801d888:	2100      	movs	r1, #0
 801d88a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801d88e:	6866      	ldr	r6, [r4, #4]
 801d890:	60a6      	str	r6, [r4, #8]
 801d892:	2e00      	cmp	r6, #0
 801d894:	bfa2      	ittt	ge
 801d896:	6821      	ldrge	r1, [r4, #0]
 801d898:	f021 0104 	bicge.w	r1, r1, #4
 801d89c:	6021      	strge	r1, [r4, #0]
 801d89e:	b90d      	cbnz	r5, 801d8a4 <_printf_i+0x110>
 801d8a0:	2e00      	cmp	r6, #0
 801d8a2:	d04b      	beq.n	801d93c <_printf_i+0x1a8>
 801d8a4:	4616      	mov	r6, r2
 801d8a6:	fbb5 f1f3 	udiv	r1, r5, r3
 801d8aa:	fb03 5711 	mls	r7, r3, r1, r5
 801d8ae:	5dc7      	ldrb	r7, [r0, r7]
 801d8b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d8b4:	462f      	mov	r7, r5
 801d8b6:	42bb      	cmp	r3, r7
 801d8b8:	460d      	mov	r5, r1
 801d8ba:	d9f4      	bls.n	801d8a6 <_printf_i+0x112>
 801d8bc:	2b08      	cmp	r3, #8
 801d8be:	d10b      	bne.n	801d8d8 <_printf_i+0x144>
 801d8c0:	6823      	ldr	r3, [r4, #0]
 801d8c2:	07df      	lsls	r7, r3, #31
 801d8c4:	d508      	bpl.n	801d8d8 <_printf_i+0x144>
 801d8c6:	6923      	ldr	r3, [r4, #16]
 801d8c8:	6861      	ldr	r1, [r4, #4]
 801d8ca:	4299      	cmp	r1, r3
 801d8cc:	bfde      	ittt	le
 801d8ce:	2330      	movle	r3, #48	@ 0x30
 801d8d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d8d4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801d8d8:	1b92      	subs	r2, r2, r6
 801d8da:	6122      	str	r2, [r4, #16]
 801d8dc:	f8cd a000 	str.w	sl, [sp]
 801d8e0:	464b      	mov	r3, r9
 801d8e2:	aa03      	add	r2, sp, #12
 801d8e4:	4621      	mov	r1, r4
 801d8e6:	4640      	mov	r0, r8
 801d8e8:	f7ff fee6 	bl	801d6b8 <_printf_common>
 801d8ec:	3001      	adds	r0, #1
 801d8ee:	d14a      	bne.n	801d986 <_printf_i+0x1f2>
 801d8f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d8f4:	b004      	add	sp, #16
 801d8f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d8fa:	6823      	ldr	r3, [r4, #0]
 801d8fc:	f043 0320 	orr.w	r3, r3, #32
 801d900:	6023      	str	r3, [r4, #0]
 801d902:	4833      	ldr	r0, [pc, #204]	@ (801d9d0 <_printf_i+0x23c>)
 801d904:	2778      	movs	r7, #120	@ 0x78
 801d906:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801d90a:	6823      	ldr	r3, [r4, #0]
 801d90c:	6831      	ldr	r1, [r6, #0]
 801d90e:	061f      	lsls	r7, r3, #24
 801d910:	f851 5b04 	ldr.w	r5, [r1], #4
 801d914:	d402      	bmi.n	801d91c <_printf_i+0x188>
 801d916:	065f      	lsls	r7, r3, #25
 801d918:	bf48      	it	mi
 801d91a:	b2ad      	uxthmi	r5, r5
 801d91c:	6031      	str	r1, [r6, #0]
 801d91e:	07d9      	lsls	r1, r3, #31
 801d920:	bf44      	itt	mi
 801d922:	f043 0320 	orrmi.w	r3, r3, #32
 801d926:	6023      	strmi	r3, [r4, #0]
 801d928:	b11d      	cbz	r5, 801d932 <_printf_i+0x19e>
 801d92a:	2310      	movs	r3, #16
 801d92c:	e7ac      	b.n	801d888 <_printf_i+0xf4>
 801d92e:	4827      	ldr	r0, [pc, #156]	@ (801d9cc <_printf_i+0x238>)
 801d930:	e7e9      	b.n	801d906 <_printf_i+0x172>
 801d932:	6823      	ldr	r3, [r4, #0]
 801d934:	f023 0320 	bic.w	r3, r3, #32
 801d938:	6023      	str	r3, [r4, #0]
 801d93a:	e7f6      	b.n	801d92a <_printf_i+0x196>
 801d93c:	4616      	mov	r6, r2
 801d93e:	e7bd      	b.n	801d8bc <_printf_i+0x128>
 801d940:	6833      	ldr	r3, [r6, #0]
 801d942:	6825      	ldr	r5, [r4, #0]
 801d944:	6961      	ldr	r1, [r4, #20]
 801d946:	1d18      	adds	r0, r3, #4
 801d948:	6030      	str	r0, [r6, #0]
 801d94a:	062e      	lsls	r6, r5, #24
 801d94c:	681b      	ldr	r3, [r3, #0]
 801d94e:	d501      	bpl.n	801d954 <_printf_i+0x1c0>
 801d950:	6019      	str	r1, [r3, #0]
 801d952:	e002      	b.n	801d95a <_printf_i+0x1c6>
 801d954:	0668      	lsls	r0, r5, #25
 801d956:	d5fb      	bpl.n	801d950 <_printf_i+0x1bc>
 801d958:	8019      	strh	r1, [r3, #0]
 801d95a:	2300      	movs	r3, #0
 801d95c:	6123      	str	r3, [r4, #16]
 801d95e:	4616      	mov	r6, r2
 801d960:	e7bc      	b.n	801d8dc <_printf_i+0x148>
 801d962:	6833      	ldr	r3, [r6, #0]
 801d964:	1d1a      	adds	r2, r3, #4
 801d966:	6032      	str	r2, [r6, #0]
 801d968:	681e      	ldr	r6, [r3, #0]
 801d96a:	6862      	ldr	r2, [r4, #4]
 801d96c:	2100      	movs	r1, #0
 801d96e:	4630      	mov	r0, r6
 801d970:	f7e2 fcce 	bl	8000310 <memchr>
 801d974:	b108      	cbz	r0, 801d97a <_printf_i+0x1e6>
 801d976:	1b80      	subs	r0, r0, r6
 801d978:	6060      	str	r0, [r4, #4]
 801d97a:	6863      	ldr	r3, [r4, #4]
 801d97c:	6123      	str	r3, [r4, #16]
 801d97e:	2300      	movs	r3, #0
 801d980:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d984:	e7aa      	b.n	801d8dc <_printf_i+0x148>
 801d986:	6923      	ldr	r3, [r4, #16]
 801d988:	4632      	mov	r2, r6
 801d98a:	4649      	mov	r1, r9
 801d98c:	4640      	mov	r0, r8
 801d98e:	47d0      	blx	sl
 801d990:	3001      	adds	r0, #1
 801d992:	d0ad      	beq.n	801d8f0 <_printf_i+0x15c>
 801d994:	6823      	ldr	r3, [r4, #0]
 801d996:	079b      	lsls	r3, r3, #30
 801d998:	d413      	bmi.n	801d9c2 <_printf_i+0x22e>
 801d99a:	68e0      	ldr	r0, [r4, #12]
 801d99c:	9b03      	ldr	r3, [sp, #12]
 801d99e:	4298      	cmp	r0, r3
 801d9a0:	bfb8      	it	lt
 801d9a2:	4618      	movlt	r0, r3
 801d9a4:	e7a6      	b.n	801d8f4 <_printf_i+0x160>
 801d9a6:	2301      	movs	r3, #1
 801d9a8:	4632      	mov	r2, r6
 801d9aa:	4649      	mov	r1, r9
 801d9ac:	4640      	mov	r0, r8
 801d9ae:	47d0      	blx	sl
 801d9b0:	3001      	adds	r0, #1
 801d9b2:	d09d      	beq.n	801d8f0 <_printf_i+0x15c>
 801d9b4:	3501      	adds	r5, #1
 801d9b6:	68e3      	ldr	r3, [r4, #12]
 801d9b8:	9903      	ldr	r1, [sp, #12]
 801d9ba:	1a5b      	subs	r3, r3, r1
 801d9bc:	42ab      	cmp	r3, r5
 801d9be:	dcf2      	bgt.n	801d9a6 <_printf_i+0x212>
 801d9c0:	e7eb      	b.n	801d99a <_printf_i+0x206>
 801d9c2:	2500      	movs	r5, #0
 801d9c4:	f104 0619 	add.w	r6, r4, #25
 801d9c8:	e7f5      	b.n	801d9b6 <_printf_i+0x222>
 801d9ca:	bf00      	nop
 801d9cc:	0802082b 	.word	0x0802082b
 801d9d0:	0802083c 	.word	0x0802083c

0801d9d4 <__sflush_r>:
 801d9d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d9dc:	0716      	lsls	r6, r2, #28
 801d9de:	4605      	mov	r5, r0
 801d9e0:	460c      	mov	r4, r1
 801d9e2:	d454      	bmi.n	801da8e <__sflush_r+0xba>
 801d9e4:	684b      	ldr	r3, [r1, #4]
 801d9e6:	2b00      	cmp	r3, #0
 801d9e8:	dc02      	bgt.n	801d9f0 <__sflush_r+0x1c>
 801d9ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801d9ec:	2b00      	cmp	r3, #0
 801d9ee:	dd48      	ble.n	801da82 <__sflush_r+0xae>
 801d9f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d9f2:	2e00      	cmp	r6, #0
 801d9f4:	d045      	beq.n	801da82 <__sflush_r+0xae>
 801d9f6:	2300      	movs	r3, #0
 801d9f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801d9fc:	682f      	ldr	r7, [r5, #0]
 801d9fe:	6a21      	ldr	r1, [r4, #32]
 801da00:	602b      	str	r3, [r5, #0]
 801da02:	d030      	beq.n	801da66 <__sflush_r+0x92>
 801da04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801da06:	89a3      	ldrh	r3, [r4, #12]
 801da08:	0759      	lsls	r1, r3, #29
 801da0a:	d505      	bpl.n	801da18 <__sflush_r+0x44>
 801da0c:	6863      	ldr	r3, [r4, #4]
 801da0e:	1ad2      	subs	r2, r2, r3
 801da10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801da12:	b10b      	cbz	r3, 801da18 <__sflush_r+0x44>
 801da14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801da16:	1ad2      	subs	r2, r2, r3
 801da18:	2300      	movs	r3, #0
 801da1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801da1c:	6a21      	ldr	r1, [r4, #32]
 801da1e:	4628      	mov	r0, r5
 801da20:	47b0      	blx	r6
 801da22:	1c43      	adds	r3, r0, #1
 801da24:	89a3      	ldrh	r3, [r4, #12]
 801da26:	d106      	bne.n	801da36 <__sflush_r+0x62>
 801da28:	6829      	ldr	r1, [r5, #0]
 801da2a:	291d      	cmp	r1, #29
 801da2c:	d82b      	bhi.n	801da86 <__sflush_r+0xb2>
 801da2e:	4a2a      	ldr	r2, [pc, #168]	@ (801dad8 <__sflush_r+0x104>)
 801da30:	410a      	asrs	r2, r1
 801da32:	07d6      	lsls	r6, r2, #31
 801da34:	d427      	bmi.n	801da86 <__sflush_r+0xb2>
 801da36:	2200      	movs	r2, #0
 801da38:	6062      	str	r2, [r4, #4]
 801da3a:	04d9      	lsls	r1, r3, #19
 801da3c:	6922      	ldr	r2, [r4, #16]
 801da3e:	6022      	str	r2, [r4, #0]
 801da40:	d504      	bpl.n	801da4c <__sflush_r+0x78>
 801da42:	1c42      	adds	r2, r0, #1
 801da44:	d101      	bne.n	801da4a <__sflush_r+0x76>
 801da46:	682b      	ldr	r3, [r5, #0]
 801da48:	b903      	cbnz	r3, 801da4c <__sflush_r+0x78>
 801da4a:	6560      	str	r0, [r4, #84]	@ 0x54
 801da4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801da4e:	602f      	str	r7, [r5, #0]
 801da50:	b1b9      	cbz	r1, 801da82 <__sflush_r+0xae>
 801da52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801da56:	4299      	cmp	r1, r3
 801da58:	d002      	beq.n	801da60 <__sflush_r+0x8c>
 801da5a:	4628      	mov	r0, r5
 801da5c:	f7ff fc82 	bl	801d364 <_free_r>
 801da60:	2300      	movs	r3, #0
 801da62:	6363      	str	r3, [r4, #52]	@ 0x34
 801da64:	e00d      	b.n	801da82 <__sflush_r+0xae>
 801da66:	2301      	movs	r3, #1
 801da68:	4628      	mov	r0, r5
 801da6a:	47b0      	blx	r6
 801da6c:	4602      	mov	r2, r0
 801da6e:	1c50      	adds	r0, r2, #1
 801da70:	d1c9      	bne.n	801da06 <__sflush_r+0x32>
 801da72:	682b      	ldr	r3, [r5, #0]
 801da74:	2b00      	cmp	r3, #0
 801da76:	d0c6      	beq.n	801da06 <__sflush_r+0x32>
 801da78:	2b1d      	cmp	r3, #29
 801da7a:	d001      	beq.n	801da80 <__sflush_r+0xac>
 801da7c:	2b16      	cmp	r3, #22
 801da7e:	d11e      	bne.n	801dabe <__sflush_r+0xea>
 801da80:	602f      	str	r7, [r5, #0]
 801da82:	2000      	movs	r0, #0
 801da84:	e022      	b.n	801dacc <__sflush_r+0xf8>
 801da86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801da8a:	b21b      	sxth	r3, r3
 801da8c:	e01b      	b.n	801dac6 <__sflush_r+0xf2>
 801da8e:	690f      	ldr	r7, [r1, #16]
 801da90:	2f00      	cmp	r7, #0
 801da92:	d0f6      	beq.n	801da82 <__sflush_r+0xae>
 801da94:	0793      	lsls	r3, r2, #30
 801da96:	680e      	ldr	r6, [r1, #0]
 801da98:	bf08      	it	eq
 801da9a:	694b      	ldreq	r3, [r1, #20]
 801da9c:	600f      	str	r7, [r1, #0]
 801da9e:	bf18      	it	ne
 801daa0:	2300      	movne	r3, #0
 801daa2:	eba6 0807 	sub.w	r8, r6, r7
 801daa6:	608b      	str	r3, [r1, #8]
 801daa8:	f1b8 0f00 	cmp.w	r8, #0
 801daac:	dde9      	ble.n	801da82 <__sflush_r+0xae>
 801daae:	6a21      	ldr	r1, [r4, #32]
 801dab0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801dab2:	4643      	mov	r3, r8
 801dab4:	463a      	mov	r2, r7
 801dab6:	4628      	mov	r0, r5
 801dab8:	47b0      	blx	r6
 801daba:	2800      	cmp	r0, #0
 801dabc:	dc08      	bgt.n	801dad0 <__sflush_r+0xfc>
 801dabe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dac2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dac6:	81a3      	strh	r3, [r4, #12]
 801dac8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801dacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dad0:	4407      	add	r7, r0
 801dad2:	eba8 0800 	sub.w	r8, r8, r0
 801dad6:	e7e7      	b.n	801daa8 <__sflush_r+0xd4>
 801dad8:	dfbffffe 	.word	0xdfbffffe

0801dadc <_fflush_r>:
 801dadc:	b538      	push	{r3, r4, r5, lr}
 801dade:	690b      	ldr	r3, [r1, #16]
 801dae0:	4605      	mov	r5, r0
 801dae2:	460c      	mov	r4, r1
 801dae4:	b913      	cbnz	r3, 801daec <_fflush_r+0x10>
 801dae6:	2500      	movs	r5, #0
 801dae8:	4628      	mov	r0, r5
 801daea:	bd38      	pop	{r3, r4, r5, pc}
 801daec:	b118      	cbz	r0, 801daf6 <_fflush_r+0x1a>
 801daee:	6a03      	ldr	r3, [r0, #32]
 801daf0:	b90b      	cbnz	r3, 801daf6 <_fflush_r+0x1a>
 801daf2:	f7ff f8e1 	bl	801ccb8 <__sinit>
 801daf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dafa:	2b00      	cmp	r3, #0
 801dafc:	d0f3      	beq.n	801dae6 <_fflush_r+0xa>
 801dafe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801db00:	07d0      	lsls	r0, r2, #31
 801db02:	d404      	bmi.n	801db0e <_fflush_r+0x32>
 801db04:	0599      	lsls	r1, r3, #22
 801db06:	d402      	bmi.n	801db0e <_fflush_r+0x32>
 801db08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801db0a:	f7ff fbe8 	bl	801d2de <__retarget_lock_acquire_recursive>
 801db0e:	4628      	mov	r0, r5
 801db10:	4621      	mov	r1, r4
 801db12:	f7ff ff5f 	bl	801d9d4 <__sflush_r>
 801db16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801db18:	07da      	lsls	r2, r3, #31
 801db1a:	4605      	mov	r5, r0
 801db1c:	d4e4      	bmi.n	801dae8 <_fflush_r+0xc>
 801db1e:	89a3      	ldrh	r3, [r4, #12]
 801db20:	059b      	lsls	r3, r3, #22
 801db22:	d4e1      	bmi.n	801dae8 <_fflush_r+0xc>
 801db24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801db26:	f7ff fbdb 	bl	801d2e0 <__retarget_lock_release_recursive>
 801db2a:	e7dd      	b.n	801dae8 <_fflush_r+0xc>

0801db2c <fiprintf>:
 801db2c:	b40e      	push	{r1, r2, r3}
 801db2e:	b503      	push	{r0, r1, lr}
 801db30:	4601      	mov	r1, r0
 801db32:	ab03      	add	r3, sp, #12
 801db34:	4805      	ldr	r0, [pc, #20]	@ (801db4c <fiprintf+0x20>)
 801db36:	f853 2b04 	ldr.w	r2, [r3], #4
 801db3a:	6800      	ldr	r0, [r0, #0]
 801db3c:	9301      	str	r3, [sp, #4]
 801db3e:	f000 f8bb 	bl	801dcb8 <_vfiprintf_r>
 801db42:	b002      	add	sp, #8
 801db44:	f85d eb04 	ldr.w	lr, [sp], #4
 801db48:	b003      	add	sp, #12
 801db4a:	4770      	bx	lr
 801db4c:	240013a0 	.word	0x240013a0

0801db50 <__swhatbuf_r>:
 801db50:	b570      	push	{r4, r5, r6, lr}
 801db52:	460c      	mov	r4, r1
 801db54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801db58:	2900      	cmp	r1, #0
 801db5a:	b096      	sub	sp, #88	@ 0x58
 801db5c:	4615      	mov	r5, r2
 801db5e:	461e      	mov	r6, r3
 801db60:	da0d      	bge.n	801db7e <__swhatbuf_r+0x2e>
 801db62:	89a3      	ldrh	r3, [r4, #12]
 801db64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801db68:	f04f 0100 	mov.w	r1, #0
 801db6c:	bf14      	ite	ne
 801db6e:	2340      	movne	r3, #64	@ 0x40
 801db70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801db74:	2000      	movs	r0, #0
 801db76:	6031      	str	r1, [r6, #0]
 801db78:	602b      	str	r3, [r5, #0]
 801db7a:	b016      	add	sp, #88	@ 0x58
 801db7c:	bd70      	pop	{r4, r5, r6, pc}
 801db7e:	466a      	mov	r2, sp
 801db80:	f000 f848 	bl	801dc14 <_fstat_r>
 801db84:	2800      	cmp	r0, #0
 801db86:	dbec      	blt.n	801db62 <__swhatbuf_r+0x12>
 801db88:	9901      	ldr	r1, [sp, #4]
 801db8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801db8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801db92:	4259      	negs	r1, r3
 801db94:	4159      	adcs	r1, r3
 801db96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801db9a:	e7eb      	b.n	801db74 <__swhatbuf_r+0x24>

0801db9c <__smakebuf_r>:
 801db9c:	898b      	ldrh	r3, [r1, #12]
 801db9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dba0:	079d      	lsls	r5, r3, #30
 801dba2:	4606      	mov	r6, r0
 801dba4:	460c      	mov	r4, r1
 801dba6:	d507      	bpl.n	801dbb8 <__smakebuf_r+0x1c>
 801dba8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801dbac:	6023      	str	r3, [r4, #0]
 801dbae:	6123      	str	r3, [r4, #16]
 801dbb0:	2301      	movs	r3, #1
 801dbb2:	6163      	str	r3, [r4, #20]
 801dbb4:	b003      	add	sp, #12
 801dbb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dbb8:	ab01      	add	r3, sp, #4
 801dbba:	466a      	mov	r2, sp
 801dbbc:	f7ff ffc8 	bl	801db50 <__swhatbuf_r>
 801dbc0:	9f00      	ldr	r7, [sp, #0]
 801dbc2:	4605      	mov	r5, r0
 801dbc4:	4639      	mov	r1, r7
 801dbc6:	4630      	mov	r0, r6
 801dbc8:	f7fe fe44 	bl	801c854 <_malloc_r>
 801dbcc:	b948      	cbnz	r0, 801dbe2 <__smakebuf_r+0x46>
 801dbce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dbd2:	059a      	lsls	r2, r3, #22
 801dbd4:	d4ee      	bmi.n	801dbb4 <__smakebuf_r+0x18>
 801dbd6:	f023 0303 	bic.w	r3, r3, #3
 801dbda:	f043 0302 	orr.w	r3, r3, #2
 801dbde:	81a3      	strh	r3, [r4, #12]
 801dbe0:	e7e2      	b.n	801dba8 <__smakebuf_r+0xc>
 801dbe2:	89a3      	ldrh	r3, [r4, #12]
 801dbe4:	6020      	str	r0, [r4, #0]
 801dbe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801dbea:	81a3      	strh	r3, [r4, #12]
 801dbec:	9b01      	ldr	r3, [sp, #4]
 801dbee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801dbf2:	b15b      	cbz	r3, 801dc0c <__smakebuf_r+0x70>
 801dbf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dbf8:	4630      	mov	r0, r6
 801dbfa:	f000 f81d 	bl	801dc38 <_isatty_r>
 801dbfe:	b128      	cbz	r0, 801dc0c <__smakebuf_r+0x70>
 801dc00:	89a3      	ldrh	r3, [r4, #12]
 801dc02:	f023 0303 	bic.w	r3, r3, #3
 801dc06:	f043 0301 	orr.w	r3, r3, #1
 801dc0a:	81a3      	strh	r3, [r4, #12]
 801dc0c:	89a3      	ldrh	r3, [r4, #12]
 801dc0e:	431d      	orrs	r5, r3
 801dc10:	81a5      	strh	r5, [r4, #12]
 801dc12:	e7cf      	b.n	801dbb4 <__smakebuf_r+0x18>

0801dc14 <_fstat_r>:
 801dc14:	b538      	push	{r3, r4, r5, lr}
 801dc16:	4d07      	ldr	r5, [pc, #28]	@ (801dc34 <_fstat_r+0x20>)
 801dc18:	2300      	movs	r3, #0
 801dc1a:	4604      	mov	r4, r0
 801dc1c:	4608      	mov	r0, r1
 801dc1e:	4611      	mov	r1, r2
 801dc20:	602b      	str	r3, [r5, #0]
 801dc22:	f7e4 f853 	bl	8001ccc <_fstat>
 801dc26:	1c43      	adds	r3, r0, #1
 801dc28:	d102      	bne.n	801dc30 <_fstat_r+0x1c>
 801dc2a:	682b      	ldr	r3, [r5, #0]
 801dc2c:	b103      	cbz	r3, 801dc30 <_fstat_r+0x1c>
 801dc2e:	6023      	str	r3, [r4, #0]
 801dc30:	bd38      	pop	{r3, r4, r5, pc}
 801dc32:	bf00      	nop
 801dc34:	240694e8 	.word	0x240694e8

0801dc38 <_isatty_r>:
 801dc38:	b538      	push	{r3, r4, r5, lr}
 801dc3a:	4d06      	ldr	r5, [pc, #24]	@ (801dc54 <_isatty_r+0x1c>)
 801dc3c:	2300      	movs	r3, #0
 801dc3e:	4604      	mov	r4, r0
 801dc40:	4608      	mov	r0, r1
 801dc42:	602b      	str	r3, [r5, #0]
 801dc44:	f7e4 f852 	bl	8001cec <_isatty>
 801dc48:	1c43      	adds	r3, r0, #1
 801dc4a:	d102      	bne.n	801dc52 <_isatty_r+0x1a>
 801dc4c:	682b      	ldr	r3, [r5, #0]
 801dc4e:	b103      	cbz	r3, 801dc52 <_isatty_r+0x1a>
 801dc50:	6023      	str	r3, [r4, #0]
 801dc52:	bd38      	pop	{r3, r4, r5, pc}
 801dc54:	240694e8 	.word	0x240694e8

0801dc58 <abort>:
 801dc58:	b508      	push	{r3, lr}
 801dc5a:	2006      	movs	r0, #6
 801dc5c:	f000 f96c 	bl	801df38 <raise>
 801dc60:	2001      	movs	r0, #1
 801dc62:	f7e3 ffe3 	bl	8001c2c <_exit>

0801dc66 <__sfputc_r>:
 801dc66:	6893      	ldr	r3, [r2, #8]
 801dc68:	3b01      	subs	r3, #1
 801dc6a:	2b00      	cmp	r3, #0
 801dc6c:	b410      	push	{r4}
 801dc6e:	6093      	str	r3, [r2, #8]
 801dc70:	da08      	bge.n	801dc84 <__sfputc_r+0x1e>
 801dc72:	6994      	ldr	r4, [r2, #24]
 801dc74:	42a3      	cmp	r3, r4
 801dc76:	db01      	blt.n	801dc7c <__sfputc_r+0x16>
 801dc78:	290a      	cmp	r1, #10
 801dc7a:	d103      	bne.n	801dc84 <__sfputc_r+0x1e>
 801dc7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dc80:	f7ff b95a 	b.w	801cf38 <__swbuf_r>
 801dc84:	6813      	ldr	r3, [r2, #0]
 801dc86:	1c58      	adds	r0, r3, #1
 801dc88:	6010      	str	r0, [r2, #0]
 801dc8a:	7019      	strb	r1, [r3, #0]
 801dc8c:	4608      	mov	r0, r1
 801dc8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dc92:	4770      	bx	lr

0801dc94 <__sfputs_r>:
 801dc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc96:	4606      	mov	r6, r0
 801dc98:	460f      	mov	r7, r1
 801dc9a:	4614      	mov	r4, r2
 801dc9c:	18d5      	adds	r5, r2, r3
 801dc9e:	42ac      	cmp	r4, r5
 801dca0:	d101      	bne.n	801dca6 <__sfputs_r+0x12>
 801dca2:	2000      	movs	r0, #0
 801dca4:	e007      	b.n	801dcb6 <__sfputs_r+0x22>
 801dca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dcaa:	463a      	mov	r2, r7
 801dcac:	4630      	mov	r0, r6
 801dcae:	f7ff ffda 	bl	801dc66 <__sfputc_r>
 801dcb2:	1c43      	adds	r3, r0, #1
 801dcb4:	d1f3      	bne.n	801dc9e <__sfputs_r+0xa>
 801dcb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801dcb8 <_vfiprintf_r>:
 801dcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcbc:	460d      	mov	r5, r1
 801dcbe:	b09d      	sub	sp, #116	@ 0x74
 801dcc0:	4614      	mov	r4, r2
 801dcc2:	4698      	mov	r8, r3
 801dcc4:	4606      	mov	r6, r0
 801dcc6:	b118      	cbz	r0, 801dcd0 <_vfiprintf_r+0x18>
 801dcc8:	6a03      	ldr	r3, [r0, #32]
 801dcca:	b90b      	cbnz	r3, 801dcd0 <_vfiprintf_r+0x18>
 801dccc:	f7fe fff4 	bl	801ccb8 <__sinit>
 801dcd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801dcd2:	07d9      	lsls	r1, r3, #31
 801dcd4:	d405      	bmi.n	801dce2 <_vfiprintf_r+0x2a>
 801dcd6:	89ab      	ldrh	r3, [r5, #12]
 801dcd8:	059a      	lsls	r2, r3, #22
 801dcda:	d402      	bmi.n	801dce2 <_vfiprintf_r+0x2a>
 801dcdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801dcde:	f7ff fafe 	bl	801d2de <__retarget_lock_acquire_recursive>
 801dce2:	89ab      	ldrh	r3, [r5, #12]
 801dce4:	071b      	lsls	r3, r3, #28
 801dce6:	d501      	bpl.n	801dcec <_vfiprintf_r+0x34>
 801dce8:	692b      	ldr	r3, [r5, #16]
 801dcea:	b99b      	cbnz	r3, 801dd14 <_vfiprintf_r+0x5c>
 801dcec:	4629      	mov	r1, r5
 801dcee:	4630      	mov	r0, r6
 801dcf0:	f7ff f960 	bl	801cfb4 <__swsetup_r>
 801dcf4:	b170      	cbz	r0, 801dd14 <_vfiprintf_r+0x5c>
 801dcf6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801dcf8:	07dc      	lsls	r4, r3, #31
 801dcfa:	d504      	bpl.n	801dd06 <_vfiprintf_r+0x4e>
 801dcfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801dd00:	b01d      	add	sp, #116	@ 0x74
 801dd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd06:	89ab      	ldrh	r3, [r5, #12]
 801dd08:	0598      	lsls	r0, r3, #22
 801dd0a:	d4f7      	bmi.n	801dcfc <_vfiprintf_r+0x44>
 801dd0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801dd0e:	f7ff fae7 	bl	801d2e0 <__retarget_lock_release_recursive>
 801dd12:	e7f3      	b.n	801dcfc <_vfiprintf_r+0x44>
 801dd14:	2300      	movs	r3, #0
 801dd16:	9309      	str	r3, [sp, #36]	@ 0x24
 801dd18:	2320      	movs	r3, #32
 801dd1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801dd1e:	f8cd 800c 	str.w	r8, [sp, #12]
 801dd22:	2330      	movs	r3, #48	@ 0x30
 801dd24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801ded4 <_vfiprintf_r+0x21c>
 801dd28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801dd2c:	f04f 0901 	mov.w	r9, #1
 801dd30:	4623      	mov	r3, r4
 801dd32:	469a      	mov	sl, r3
 801dd34:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dd38:	b10a      	cbz	r2, 801dd3e <_vfiprintf_r+0x86>
 801dd3a:	2a25      	cmp	r2, #37	@ 0x25
 801dd3c:	d1f9      	bne.n	801dd32 <_vfiprintf_r+0x7a>
 801dd3e:	ebba 0b04 	subs.w	fp, sl, r4
 801dd42:	d00b      	beq.n	801dd5c <_vfiprintf_r+0xa4>
 801dd44:	465b      	mov	r3, fp
 801dd46:	4622      	mov	r2, r4
 801dd48:	4629      	mov	r1, r5
 801dd4a:	4630      	mov	r0, r6
 801dd4c:	f7ff ffa2 	bl	801dc94 <__sfputs_r>
 801dd50:	3001      	adds	r0, #1
 801dd52:	f000 80a7 	beq.w	801dea4 <_vfiprintf_r+0x1ec>
 801dd56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dd58:	445a      	add	r2, fp
 801dd5a:	9209      	str	r2, [sp, #36]	@ 0x24
 801dd5c:	f89a 3000 	ldrb.w	r3, [sl]
 801dd60:	2b00      	cmp	r3, #0
 801dd62:	f000 809f 	beq.w	801dea4 <_vfiprintf_r+0x1ec>
 801dd66:	2300      	movs	r3, #0
 801dd68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801dd6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dd70:	f10a 0a01 	add.w	sl, sl, #1
 801dd74:	9304      	str	r3, [sp, #16]
 801dd76:	9307      	str	r3, [sp, #28]
 801dd78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801dd7c:	931a      	str	r3, [sp, #104]	@ 0x68
 801dd7e:	4654      	mov	r4, sl
 801dd80:	2205      	movs	r2, #5
 801dd82:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dd86:	4853      	ldr	r0, [pc, #332]	@ (801ded4 <_vfiprintf_r+0x21c>)
 801dd88:	f7e2 fac2 	bl	8000310 <memchr>
 801dd8c:	9a04      	ldr	r2, [sp, #16]
 801dd8e:	b9d8      	cbnz	r0, 801ddc8 <_vfiprintf_r+0x110>
 801dd90:	06d1      	lsls	r1, r2, #27
 801dd92:	bf44      	itt	mi
 801dd94:	2320      	movmi	r3, #32
 801dd96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801dd9a:	0713      	lsls	r3, r2, #28
 801dd9c:	bf44      	itt	mi
 801dd9e:	232b      	movmi	r3, #43	@ 0x2b
 801dda0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801dda4:	f89a 3000 	ldrb.w	r3, [sl]
 801dda8:	2b2a      	cmp	r3, #42	@ 0x2a
 801ddaa:	d015      	beq.n	801ddd8 <_vfiprintf_r+0x120>
 801ddac:	9a07      	ldr	r2, [sp, #28]
 801ddae:	4654      	mov	r4, sl
 801ddb0:	2000      	movs	r0, #0
 801ddb2:	f04f 0c0a 	mov.w	ip, #10
 801ddb6:	4621      	mov	r1, r4
 801ddb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ddbc:	3b30      	subs	r3, #48	@ 0x30
 801ddbe:	2b09      	cmp	r3, #9
 801ddc0:	d94b      	bls.n	801de5a <_vfiprintf_r+0x1a2>
 801ddc2:	b1b0      	cbz	r0, 801ddf2 <_vfiprintf_r+0x13a>
 801ddc4:	9207      	str	r2, [sp, #28]
 801ddc6:	e014      	b.n	801ddf2 <_vfiprintf_r+0x13a>
 801ddc8:	eba0 0308 	sub.w	r3, r0, r8
 801ddcc:	fa09 f303 	lsl.w	r3, r9, r3
 801ddd0:	4313      	orrs	r3, r2
 801ddd2:	9304      	str	r3, [sp, #16]
 801ddd4:	46a2      	mov	sl, r4
 801ddd6:	e7d2      	b.n	801dd7e <_vfiprintf_r+0xc6>
 801ddd8:	9b03      	ldr	r3, [sp, #12]
 801ddda:	1d19      	adds	r1, r3, #4
 801dddc:	681b      	ldr	r3, [r3, #0]
 801ddde:	9103      	str	r1, [sp, #12]
 801dde0:	2b00      	cmp	r3, #0
 801dde2:	bfbb      	ittet	lt
 801dde4:	425b      	neglt	r3, r3
 801dde6:	f042 0202 	orrlt.w	r2, r2, #2
 801ddea:	9307      	strge	r3, [sp, #28]
 801ddec:	9307      	strlt	r3, [sp, #28]
 801ddee:	bfb8      	it	lt
 801ddf0:	9204      	strlt	r2, [sp, #16]
 801ddf2:	7823      	ldrb	r3, [r4, #0]
 801ddf4:	2b2e      	cmp	r3, #46	@ 0x2e
 801ddf6:	d10a      	bne.n	801de0e <_vfiprintf_r+0x156>
 801ddf8:	7863      	ldrb	r3, [r4, #1]
 801ddfa:	2b2a      	cmp	r3, #42	@ 0x2a
 801ddfc:	d132      	bne.n	801de64 <_vfiprintf_r+0x1ac>
 801ddfe:	9b03      	ldr	r3, [sp, #12]
 801de00:	1d1a      	adds	r2, r3, #4
 801de02:	681b      	ldr	r3, [r3, #0]
 801de04:	9203      	str	r2, [sp, #12]
 801de06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801de0a:	3402      	adds	r4, #2
 801de0c:	9305      	str	r3, [sp, #20]
 801de0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801dee4 <_vfiprintf_r+0x22c>
 801de12:	7821      	ldrb	r1, [r4, #0]
 801de14:	2203      	movs	r2, #3
 801de16:	4650      	mov	r0, sl
 801de18:	f7e2 fa7a 	bl	8000310 <memchr>
 801de1c:	b138      	cbz	r0, 801de2e <_vfiprintf_r+0x176>
 801de1e:	9b04      	ldr	r3, [sp, #16]
 801de20:	eba0 000a 	sub.w	r0, r0, sl
 801de24:	2240      	movs	r2, #64	@ 0x40
 801de26:	4082      	lsls	r2, r0
 801de28:	4313      	orrs	r3, r2
 801de2a:	3401      	adds	r4, #1
 801de2c:	9304      	str	r3, [sp, #16]
 801de2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801de32:	4829      	ldr	r0, [pc, #164]	@ (801ded8 <_vfiprintf_r+0x220>)
 801de34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801de38:	2206      	movs	r2, #6
 801de3a:	f7e2 fa69 	bl	8000310 <memchr>
 801de3e:	2800      	cmp	r0, #0
 801de40:	d03f      	beq.n	801dec2 <_vfiprintf_r+0x20a>
 801de42:	4b26      	ldr	r3, [pc, #152]	@ (801dedc <_vfiprintf_r+0x224>)
 801de44:	bb1b      	cbnz	r3, 801de8e <_vfiprintf_r+0x1d6>
 801de46:	9b03      	ldr	r3, [sp, #12]
 801de48:	3307      	adds	r3, #7
 801de4a:	f023 0307 	bic.w	r3, r3, #7
 801de4e:	3308      	adds	r3, #8
 801de50:	9303      	str	r3, [sp, #12]
 801de52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de54:	443b      	add	r3, r7
 801de56:	9309      	str	r3, [sp, #36]	@ 0x24
 801de58:	e76a      	b.n	801dd30 <_vfiprintf_r+0x78>
 801de5a:	fb0c 3202 	mla	r2, ip, r2, r3
 801de5e:	460c      	mov	r4, r1
 801de60:	2001      	movs	r0, #1
 801de62:	e7a8      	b.n	801ddb6 <_vfiprintf_r+0xfe>
 801de64:	2300      	movs	r3, #0
 801de66:	3401      	adds	r4, #1
 801de68:	9305      	str	r3, [sp, #20]
 801de6a:	4619      	mov	r1, r3
 801de6c:	f04f 0c0a 	mov.w	ip, #10
 801de70:	4620      	mov	r0, r4
 801de72:	f810 2b01 	ldrb.w	r2, [r0], #1
 801de76:	3a30      	subs	r2, #48	@ 0x30
 801de78:	2a09      	cmp	r2, #9
 801de7a:	d903      	bls.n	801de84 <_vfiprintf_r+0x1cc>
 801de7c:	2b00      	cmp	r3, #0
 801de7e:	d0c6      	beq.n	801de0e <_vfiprintf_r+0x156>
 801de80:	9105      	str	r1, [sp, #20]
 801de82:	e7c4      	b.n	801de0e <_vfiprintf_r+0x156>
 801de84:	fb0c 2101 	mla	r1, ip, r1, r2
 801de88:	4604      	mov	r4, r0
 801de8a:	2301      	movs	r3, #1
 801de8c:	e7f0      	b.n	801de70 <_vfiprintf_r+0x1b8>
 801de8e:	ab03      	add	r3, sp, #12
 801de90:	9300      	str	r3, [sp, #0]
 801de92:	462a      	mov	r2, r5
 801de94:	4b12      	ldr	r3, [pc, #72]	@ (801dee0 <_vfiprintf_r+0x228>)
 801de96:	a904      	add	r1, sp, #16
 801de98:	4630      	mov	r0, r6
 801de9a:	f3af 8000 	nop.w
 801de9e:	4607      	mov	r7, r0
 801dea0:	1c78      	adds	r0, r7, #1
 801dea2:	d1d6      	bne.n	801de52 <_vfiprintf_r+0x19a>
 801dea4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801dea6:	07d9      	lsls	r1, r3, #31
 801dea8:	d405      	bmi.n	801deb6 <_vfiprintf_r+0x1fe>
 801deaa:	89ab      	ldrh	r3, [r5, #12]
 801deac:	059a      	lsls	r2, r3, #22
 801deae:	d402      	bmi.n	801deb6 <_vfiprintf_r+0x1fe>
 801deb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801deb2:	f7ff fa15 	bl	801d2e0 <__retarget_lock_release_recursive>
 801deb6:	89ab      	ldrh	r3, [r5, #12]
 801deb8:	065b      	lsls	r3, r3, #25
 801deba:	f53f af1f 	bmi.w	801dcfc <_vfiprintf_r+0x44>
 801debe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dec0:	e71e      	b.n	801dd00 <_vfiprintf_r+0x48>
 801dec2:	ab03      	add	r3, sp, #12
 801dec4:	9300      	str	r3, [sp, #0]
 801dec6:	462a      	mov	r2, r5
 801dec8:	4b05      	ldr	r3, [pc, #20]	@ (801dee0 <_vfiprintf_r+0x228>)
 801deca:	a904      	add	r1, sp, #16
 801decc:	4630      	mov	r0, r6
 801dece:	f7ff fc61 	bl	801d794 <_printf_i>
 801ded2:	e7e4      	b.n	801de9e <_vfiprintf_r+0x1e6>
 801ded4:	0802081a 	.word	0x0802081a
 801ded8:	08020824 	.word	0x08020824
 801dedc:	00000000 	.word	0x00000000
 801dee0:	0801dc95 	.word	0x0801dc95
 801dee4:	08020820 	.word	0x08020820

0801dee8 <_raise_r>:
 801dee8:	291f      	cmp	r1, #31
 801deea:	b538      	push	{r3, r4, r5, lr}
 801deec:	4605      	mov	r5, r0
 801deee:	460c      	mov	r4, r1
 801def0:	d904      	bls.n	801defc <_raise_r+0x14>
 801def2:	2316      	movs	r3, #22
 801def4:	6003      	str	r3, [r0, #0]
 801def6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801defa:	bd38      	pop	{r3, r4, r5, pc}
 801defc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801defe:	b112      	cbz	r2, 801df06 <_raise_r+0x1e>
 801df00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801df04:	b94b      	cbnz	r3, 801df1a <_raise_r+0x32>
 801df06:	4628      	mov	r0, r5
 801df08:	f000 f830 	bl	801df6c <_getpid_r>
 801df0c:	4622      	mov	r2, r4
 801df0e:	4601      	mov	r1, r0
 801df10:	4628      	mov	r0, r5
 801df12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801df16:	f000 b817 	b.w	801df48 <_kill_r>
 801df1a:	2b01      	cmp	r3, #1
 801df1c:	d00a      	beq.n	801df34 <_raise_r+0x4c>
 801df1e:	1c59      	adds	r1, r3, #1
 801df20:	d103      	bne.n	801df2a <_raise_r+0x42>
 801df22:	2316      	movs	r3, #22
 801df24:	6003      	str	r3, [r0, #0]
 801df26:	2001      	movs	r0, #1
 801df28:	e7e7      	b.n	801defa <_raise_r+0x12>
 801df2a:	2100      	movs	r1, #0
 801df2c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801df30:	4620      	mov	r0, r4
 801df32:	4798      	blx	r3
 801df34:	2000      	movs	r0, #0
 801df36:	e7e0      	b.n	801defa <_raise_r+0x12>

0801df38 <raise>:
 801df38:	4b02      	ldr	r3, [pc, #8]	@ (801df44 <raise+0xc>)
 801df3a:	4601      	mov	r1, r0
 801df3c:	6818      	ldr	r0, [r3, #0]
 801df3e:	f7ff bfd3 	b.w	801dee8 <_raise_r>
 801df42:	bf00      	nop
 801df44:	240013a0 	.word	0x240013a0

0801df48 <_kill_r>:
 801df48:	b538      	push	{r3, r4, r5, lr}
 801df4a:	4d07      	ldr	r5, [pc, #28]	@ (801df68 <_kill_r+0x20>)
 801df4c:	2300      	movs	r3, #0
 801df4e:	4604      	mov	r4, r0
 801df50:	4608      	mov	r0, r1
 801df52:	4611      	mov	r1, r2
 801df54:	602b      	str	r3, [r5, #0]
 801df56:	f7e3 fe59 	bl	8001c0c <_kill>
 801df5a:	1c43      	adds	r3, r0, #1
 801df5c:	d102      	bne.n	801df64 <_kill_r+0x1c>
 801df5e:	682b      	ldr	r3, [r5, #0]
 801df60:	b103      	cbz	r3, 801df64 <_kill_r+0x1c>
 801df62:	6023      	str	r3, [r4, #0]
 801df64:	bd38      	pop	{r3, r4, r5, pc}
 801df66:	bf00      	nop
 801df68:	240694e8 	.word	0x240694e8

0801df6c <_getpid_r>:
 801df6c:	f7e3 be46 	b.w	8001bfc <_getpid>

0801df70 <_init>:
 801df70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df72:	bf00      	nop
 801df74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801df76:	bc08      	pop	{r3}
 801df78:	469e      	mov	lr, r3
 801df7a:	4770      	bx	lr

0801df7c <_fini>:
 801df7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df7e:	bf00      	nop
 801df80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801df82:	bc08      	pop	{r3}
 801df84:	469e      	mov	lr, r3
 801df86:	4770      	bx	lr
