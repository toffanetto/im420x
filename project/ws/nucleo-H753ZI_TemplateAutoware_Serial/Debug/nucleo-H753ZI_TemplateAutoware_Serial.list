
nucleo-H753ZI_TemplateAutoware_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022710  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002920  080229b0  080229b0  000239b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080252d0  080252d0  000262d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000040  080252d8  080252d8  000262d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08025318  08025318  00026318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000013f0  24000000  0802531c  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000683a0  240013f0  0802670c  000283f0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24069790  0802670c  00028790  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000283f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002f047  00000000  00000000  0002841e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005bc8  00000000  00000000  00057465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001fc8  00000000  00000000  0005d030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001870  00000000  00000000  0005eff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000436f1  00000000  00000000  00060868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003423c  00000000  00000000  000a3f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019217b  00000000  00000000  000d8195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000076  00000000  00000000  0026a310  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000092e8  00000000  00000000  0026a388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000080  00000000  00000000  00273670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240013f0 	.word	0x240013f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08022998 	.word	0x08022998

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240013f4 	.word	0x240013f4
 80002dc:	08022998 	.word	0x08022998

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003ce:	f000 b9b5 	b.w	800073c <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000464:	f000 b96a 	b.w	800073c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	460c      	mov	r4, r1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d14e      	bne.n	800052a <__udivmoddi4+0xaa>
 800048c:	4694      	mov	ip, r2
 800048e:	458c      	cmp	ip, r1
 8000490:	4686      	mov	lr, r0
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	d962      	bls.n	800055e <__udivmoddi4+0xde>
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	4091      	lsls	r1, r2
 80004a0:	fa20 f303 	lsr.w	r3, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	4319      	orrs	r1, r3
 80004aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f f68c 	uxth.w	r6, ip
 80004b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004be:	fb07 1114 	mls	r1, r7, r4, r1
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb04 f106 	mul.w	r1, r4, r6
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004d6:	f080 8112 	bcs.w	80006fe <__udivmoddi4+0x27e>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 810f 	bls.w	80006fe <__udivmoddi4+0x27e>
 80004e0:	3c02      	subs	r4, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	fa1f f38e 	uxth.w	r3, lr
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1110 	mls	r1, r7, r0, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb00 f606 	mul.w	r6, r0, r6
 80004fa:	429e      	cmp	r6, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x94>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000506:	f080 80fc 	bcs.w	8000702 <__udivmoddi4+0x282>
 800050a:	429e      	cmp	r6, r3
 800050c:	f240 80f9 	bls.w	8000702 <__udivmoddi4+0x282>
 8000510:	4463      	add	r3, ip
 8000512:	3802      	subs	r0, #2
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800051a:	2100      	movs	r1, #0
 800051c:	b11d      	cbz	r5, 8000526 <__udivmoddi4+0xa6>
 800051e:	40d3      	lsrs	r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	e9c5 3200 	strd	r3, r2, [r5]
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d905      	bls.n	800053a <__udivmoddi4+0xba>
 800052e:	b10d      	cbz	r5, 8000534 <__udivmoddi4+0xb4>
 8000530:	e9c5 0100 	strd	r0, r1, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	4608      	mov	r0, r1
 8000538:	e7f5      	b.n	8000526 <__udivmoddi4+0xa6>
 800053a:	fab3 f183 	clz	r1, r3
 800053e:	2900      	cmp	r1, #0
 8000540:	d146      	bne.n	80005d0 <__udivmoddi4+0x150>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d302      	bcc.n	800054c <__udivmoddi4+0xcc>
 8000546:	4290      	cmp	r0, r2
 8000548:	f0c0 80f0 	bcc.w	800072c <__udivmoddi4+0x2ac>
 800054c:	1a86      	subs	r6, r0, r2
 800054e:	eb64 0303 	sbc.w	r3, r4, r3
 8000552:	2001      	movs	r0, #1
 8000554:	2d00      	cmp	r5, #0
 8000556:	d0e6      	beq.n	8000526 <__udivmoddi4+0xa6>
 8000558:	e9c5 6300 	strd	r6, r3, [r5]
 800055c:	e7e3      	b.n	8000526 <__udivmoddi4+0xa6>
 800055e:	2a00      	cmp	r2, #0
 8000560:	f040 8090 	bne.w	8000684 <__udivmoddi4+0x204>
 8000564:	eba1 040c 	sub.w	r4, r1, ip
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	2101      	movs	r1, #1
 8000572:	fbb4 f6f8 	udiv	r6, r4, r8
 8000576:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057a:	fb08 4416 	mls	r4, r8, r6, r4
 800057e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000582:	fb07 f006 	mul.w	r0, r7, r6
 8000586:	4298      	cmp	r0, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x11c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000592:	d202      	bcs.n	800059a <__udivmoddi4+0x11a>
 8000594:	4298      	cmp	r0, r3
 8000596:	f200 80cd 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 800059a:	4626      	mov	r6, r4
 800059c:	1a1c      	subs	r4, r3, r0
 800059e:	fa1f f38e 	uxth.w	r3, lr
 80005a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005a6:	fb08 4410 	mls	r4, r8, r0, r4
 80005aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005ae:	fb00 f707 	mul.w	r7, r0, r7
 80005b2:	429f      	cmp	r7, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x148>
 80005b6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005be:	d202      	bcs.n	80005c6 <__udivmoddi4+0x146>
 80005c0:	429f      	cmp	r7, r3
 80005c2:	f200 80b0 	bhi.w	8000726 <__udivmoddi4+0x2a6>
 80005c6:	4620      	mov	r0, r4
 80005c8:	1bdb      	subs	r3, r3, r7
 80005ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005ce:	e7a5      	b.n	800051c <__udivmoddi4+0x9c>
 80005d0:	f1c1 0620 	rsb	r6, r1, #32
 80005d4:	408b      	lsls	r3, r1
 80005d6:	fa22 f706 	lsr.w	r7, r2, r6
 80005da:	431f      	orrs	r7, r3
 80005dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e0:	fa04 f301 	lsl.w	r3, r4, r1
 80005e4:	ea43 030c 	orr.w	r3, r3, ip
 80005e8:	40f4      	lsrs	r4, r6
 80005ea:	fa00 f801 	lsl.w	r8, r0, r1
 80005ee:	0c38      	lsrs	r0, r7, #16
 80005f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005f4:	fbb4 fef0 	udiv	lr, r4, r0
 80005f8:	fa1f fc87 	uxth.w	ip, r7
 80005fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000600:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000604:	fb0e f90c 	mul.w	r9, lr, ip
 8000608:	45a1      	cmp	r9, r4
 800060a:	fa02 f201 	lsl.w	r2, r2, r1
 800060e:	d90a      	bls.n	8000626 <__udivmoddi4+0x1a6>
 8000610:	193c      	adds	r4, r7, r4
 8000612:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000616:	f080 8084 	bcs.w	8000722 <__udivmoddi4+0x2a2>
 800061a:	45a1      	cmp	r9, r4
 800061c:	f240 8081 	bls.w	8000722 <__udivmoddi4+0x2a2>
 8000620:	f1ae 0e02 	sub.w	lr, lr, #2
 8000624:	443c      	add	r4, r7
 8000626:	eba4 0409 	sub.w	r4, r4, r9
 800062a:	fa1f f983 	uxth.w	r9, r3
 800062e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000632:	fb00 4413 	mls	r4, r0, r3, r4
 8000636:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800063a:	fb03 fc0c 	mul.w	ip, r3, ip
 800063e:	45a4      	cmp	ip, r4
 8000640:	d907      	bls.n	8000652 <__udivmoddi4+0x1d2>
 8000642:	193c      	adds	r4, r7, r4
 8000644:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000648:	d267      	bcs.n	800071a <__udivmoddi4+0x29a>
 800064a:	45a4      	cmp	ip, r4
 800064c:	d965      	bls.n	800071a <__udivmoddi4+0x29a>
 800064e:	3b02      	subs	r3, #2
 8000650:	443c      	add	r4, r7
 8000652:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000656:	fba0 9302 	umull	r9, r3, r0, r2
 800065a:	eba4 040c 	sub.w	r4, r4, ip
 800065e:	429c      	cmp	r4, r3
 8000660:	46ce      	mov	lr, r9
 8000662:	469c      	mov	ip, r3
 8000664:	d351      	bcc.n	800070a <__udivmoddi4+0x28a>
 8000666:	d04e      	beq.n	8000706 <__udivmoddi4+0x286>
 8000668:	b155      	cbz	r5, 8000680 <__udivmoddi4+0x200>
 800066a:	ebb8 030e 	subs.w	r3, r8, lr
 800066e:	eb64 040c 	sbc.w	r4, r4, ip
 8000672:	fa04 f606 	lsl.w	r6, r4, r6
 8000676:	40cb      	lsrs	r3, r1
 8000678:	431e      	orrs	r6, r3
 800067a:	40cc      	lsrs	r4, r1
 800067c:	e9c5 6400 	strd	r6, r4, [r5]
 8000680:	2100      	movs	r1, #0
 8000682:	e750      	b.n	8000526 <__udivmoddi4+0xa6>
 8000684:	f1c2 0320 	rsb	r3, r2, #32
 8000688:	fa20 f103 	lsr.w	r1, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	fa24 f303 	lsr.w	r3, r4, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	430c      	orrs	r4, r1
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a0:	fa1f f78c 	uxth.w	r7, ip
 80006a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a8:	fb08 3110 	mls	r1, r8, r0, r3
 80006ac:	0c23      	lsrs	r3, r4, #16
 80006ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b2:	fb00 f107 	mul.w	r1, r0, r7
 80006b6:	4299      	cmp	r1, r3
 80006b8:	d908      	bls.n	80006cc <__udivmoddi4+0x24c>
 80006ba:	eb1c 0303 	adds.w	r3, ip, r3
 80006be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006c2:	d22c      	bcs.n	800071e <__udivmoddi4+0x29e>
 80006c4:	4299      	cmp	r1, r3
 80006c6:	d92a      	bls.n	800071e <__udivmoddi4+0x29e>
 80006c8:	3802      	subs	r0, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006d4:	fb08 3311 	mls	r3, r8, r1, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb01 f307 	mul.w	r3, r1, r7
 80006e0:	42a3      	cmp	r3, r4
 80006e2:	d908      	bls.n	80006f6 <__udivmoddi4+0x276>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006ec:	d213      	bcs.n	8000716 <__udivmoddi4+0x296>
 80006ee:	42a3      	cmp	r3, r4
 80006f0:	d911      	bls.n	8000716 <__udivmoddi4+0x296>
 80006f2:	3902      	subs	r1, #2
 80006f4:	4464      	add	r4, ip
 80006f6:	1ae4      	subs	r4, r4, r3
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e739      	b.n	8000572 <__udivmoddi4+0xf2>
 80006fe:	4604      	mov	r4, r0
 8000700:	e6f0      	b.n	80004e4 <__udivmoddi4+0x64>
 8000702:	4608      	mov	r0, r1
 8000704:	e706      	b.n	8000514 <__udivmoddi4+0x94>
 8000706:	45c8      	cmp	r8, r9
 8000708:	d2ae      	bcs.n	8000668 <__udivmoddi4+0x1e8>
 800070a:	ebb9 0e02 	subs.w	lr, r9, r2
 800070e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000712:	3801      	subs	r0, #1
 8000714:	e7a8      	b.n	8000668 <__udivmoddi4+0x1e8>
 8000716:	4631      	mov	r1, r6
 8000718:	e7ed      	b.n	80006f6 <__udivmoddi4+0x276>
 800071a:	4603      	mov	r3, r0
 800071c:	e799      	b.n	8000652 <__udivmoddi4+0x1d2>
 800071e:	4630      	mov	r0, r6
 8000720:	e7d4      	b.n	80006cc <__udivmoddi4+0x24c>
 8000722:	46d6      	mov	lr, sl
 8000724:	e77f      	b.n	8000626 <__udivmoddi4+0x1a6>
 8000726:	4463      	add	r3, ip
 8000728:	3802      	subs	r0, #2
 800072a:	e74d      	b.n	80005c8 <__udivmoddi4+0x148>
 800072c:	4606      	mov	r6, r0
 800072e:	4623      	mov	r3, r4
 8000730:	4608      	mov	r0, r1
 8000732:	e70f      	b.n	8000554 <__udivmoddi4+0xd4>
 8000734:	3e02      	subs	r6, #2
 8000736:	4463      	add	r3, ip
 8000738:	e730      	b.n	800059c <__udivmoddi4+0x11c>
 800073a:	bf00      	nop

0800073c <__aeabi_idiv0>:
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	@ 0x28
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
 8000760:	615a      	str	r2, [r3, #20]
 8000762:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000764:	4b37      	ldr	r3, [pc, #220]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000766:	4a38      	ldr	r2, [pc, #224]	@ (8000848 <MX_ADC1_Init+0x108>)
 8000768:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800076a:	4b36      	ldr	r3, [pc, #216]	@ (8000844 <MX_ADC1_Init+0x104>)
 800076c:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000770:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000772:	4b34      	ldr	r3, [pc, #208]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000778:	4b32      	ldr	r3, [pc, #200]	@ (8000844 <MX_ADC1_Init+0x104>)
 800077a:	2201      	movs	r2, #1
 800077c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077e:	4b31      	ldr	r3, [pc, #196]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000780:	2204      	movs	r2, #4
 8000782:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000784:	4b2f      	ldr	r3, [pc, #188]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000786:	2200      	movs	r2, #0
 8000788:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800078a:	4b2e      	ldr	r3, [pc, #184]	@ (8000844 <MX_ADC1_Init+0x104>)
 800078c:	2201      	movs	r2, #1
 800078e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000790:	4b2c      	ldr	r3, [pc, #176]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000792:	2202      	movs	r2, #2
 8000794:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000796:	4b2b      	ldr	r3, [pc, #172]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000798:	2200      	movs	r2, #0
 800079a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079c:	4b29      	ldr	r3, [pc, #164]	@ (8000844 <MX_ADC1_Init+0x104>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a2:	4b28      	ldr	r3, [pc, #160]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80007a8:	4b26      	ldr	r3, [pc, #152]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007aa:	2203      	movs	r2, #3
 80007ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ae:	4b25      	ldr	r3, [pc, #148]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007b4:	4b23      	ldr	r3, [pc, #140]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007ba:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007bc:	2200      	movs	r2, #0
 80007be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c2:	4820      	ldr	r0, [pc, #128]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007c4:	f002 fcf6 	bl	80031b4 <HAL_ADC_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007ce:	f001 f94b 	bl	8001a68 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	4819      	ldr	r0, [pc, #100]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007de:	f003 fd19 	bl	8004214 <HAL_ADCEx_MultiModeConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007e8:	f001 f93e 	bl	8001a68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007ec:	4b17      	ldr	r3, [pc, #92]	@ (800084c <MX_ADC1_Init+0x10c>)
 80007ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f0:	2306      	movs	r3, #6
 80007f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80007f4:	2306      	movs	r3, #6
 80007f6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80007fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007fe:	2304      	movs	r3, #4
 8000800:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080a:	463b      	mov	r3, r7
 800080c:	4619      	mov	r1, r3
 800080e:	480d      	ldr	r0, [pc, #52]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000810:	f002 ff54 	bl	80036bc <HAL_ADC_ConfigChannel>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800081a:	f001 f925 	bl	8001a68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800081e:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <MX_ADC1_Init+0x110>)
 8000820:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000822:	230c      	movs	r3, #12
 8000824:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000826:	463b      	mov	r3, r7
 8000828:	4619      	mov	r1, r3
 800082a:	4806      	ldr	r0, [pc, #24]	@ (8000844 <MX_ADC1_Init+0x104>)
 800082c:	f002 ff46 	bl	80036bc <HAL_ADC_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000836:	f001 f917 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	@ 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2400140c 	.word	0x2400140c
 8000848:	40022000 	.word	0x40022000
 800084c:	19200040 	.word	0x19200040
 8000850:	08600004 	.word	0x08600004

08000854 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b0ba      	sub	sp, #232	@ 0xe8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	22c0      	movs	r2, #192	@ 0xc0
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f021 f931 	bl	8021adc <memset>
  if(adcHandle->Instance==ADC1)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a45      	ldr	r2, [pc, #276]	@ (8000994 <HAL_ADC_MspInit+0x140>)
 8000880:	4293      	cmp	r3, r2
 8000882:	f040 8083 	bne.w	800098c <HAL_ADC_MspInit+0x138>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000886:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800088a:	f04f 0300 	mov.w	r3, #0
 800088e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 37;
 8000896:	2325      	movs	r3, #37	@ 0x25
 8000898:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800089a:	2302      	movs	r3, #2
 800089c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800089e:	2302      	movs	r3, #2
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80008a6:	2380      	movs	r3, #128	@ 0x80
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80008aa:	2320      	movs	r3, #32
 80008ac:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 80008ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	4618      	mov	r0, r3
 80008c0:	f007 fef4 	bl	80086ac <HAL_RCCEx_PeriphCLKConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 80008ca:	f001 f8cd 	bl	8001a68 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008ce:	4b32      	ldr	r3, [pc, #200]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008d4:	4a30      	ldr	r2, [pc, #192]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008d6:	f043 0320 	orr.w	r3, r3, #32
 80008da:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80008de:	4b2e      	ldr	r3, [pc, #184]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008e4:	f003 0320 	and.w	r3, r3, #32
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f2:	4a29      	ldr	r2, [pc, #164]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008f4:	f043 0320 	orr.w	r3, r3, #32
 80008f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008fc:	4b26      	ldr	r3, [pc, #152]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000902:	f003 0320 	and.w	r3, r3, #32
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800090a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800090e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000912:	2303      	movs	r3, #3
 8000914:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800091e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000922:	4619      	mov	r1, r3
 8000924:	481d      	ldr	r0, [pc, #116]	@ (800099c <HAL_ADC_MspInit+0x148>)
 8000926:	f006 fc7b 	bl	8007220 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800092a:	4b1d      	ldr	r3, [pc, #116]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800092c:	4a1d      	ldr	r2, [pc, #116]	@ (80009a4 <HAL_ADC_MspInit+0x150>)
 800092e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000930:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000932:	2209      	movs	r2, #9
 8000934:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800093c:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000944:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000948:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800094c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000950:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000952:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000954:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000958:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800095c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000960:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000962:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000964:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000968:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000970:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000972:	f003 fe0d 	bl	8004590 <HAL_DMA_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 800097c:	f001 f874 	bl	8001a68 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a07      	ldr	r2, [pc, #28]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000984:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000986:	4a06      	ldr	r2, [pc, #24]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800098c:	bf00      	nop
 800098e:	37e8      	adds	r7, #232	@ 0xe8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40022000 	.word	0x40022000
 8000998:	58024400 	.word	0x58024400
 800099c:	58021400 	.word	0x58021400
 80009a0:	24001470 	.word	0x24001470
 80009a4:	40020410 	.word	0x40020410

080009a8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	@ 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80009b4:	f00f fb0a 	bl	800ffcc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80009b8:	4b5a      	ldr	r3, [pc, #360]	@ (8000b24 <pvPortMallocMicroROS+0x17c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d101      	bne.n	80009c4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80009c0:	f000 f986 	bl	8000cd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80009c4:	4b58      	ldr	r3, [pc, #352]	@ (8000b28 <pvPortMallocMicroROS+0x180>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4013      	ands	r3, r2
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	f040 8090 	bne.w	8000af2 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d01e      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80009d8:	2208      	movs	r2, #8
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d015      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f023 0307 	bic.w	r3, r3, #7
 80009f0:	3308      	adds	r3, #8
 80009f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d00b      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80009fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a02:	f383 8811 	msr	BASEPRI, r3
 8000a06:	f3bf 8f6f 	isb	sy
 8000a0a:	f3bf 8f4f 	dsb	sy
 8000a0e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000a10:	bf00      	nop
 8000a12:	bf00      	nop
 8000a14:	e7fd      	b.n	8000a12 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d06a      	beq.n	8000af2 <pvPortMallocMicroROS+0x14a>
 8000a1c:	4b43      	ldr	r3, [pc, #268]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d865      	bhi.n	8000af2 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000a26:	4b42      	ldr	r3, [pc, #264]	@ (8000b30 <pvPortMallocMicroROS+0x188>)
 8000a28:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000a2a:	4b41      	ldr	r3, [pc, #260]	@ (8000b30 <pvPortMallocMicroROS+0x188>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a30:	e004      	b.n	8000a3c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a34:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d903      	bls.n	8000a4e <pvPortMallocMicroROS+0xa6>
 8000a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d1f1      	bne.n	8000a32 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000a4e:	4b35      	ldr	r3, [pc, #212]	@ (8000b24 <pvPortMallocMicroROS+0x17c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d04c      	beq.n	8000af2 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2208      	movs	r2, #8
 8000a5e:	4413      	add	r3, r2
 8000a60:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	6a3b      	ldr	r3, [r7, #32]
 8000a68:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	1ad2      	subs	r2, r2, r3
 8000a72:	2308      	movs	r3, #8
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d920      	bls.n	8000abc <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	f003 0307 	and.w	r3, r3, #7
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d00b      	beq.n	8000aa4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a90:	f383 8811 	msr	BASEPRI, r3
 8000a94:	f3bf 8f6f 	isb	sy
 8000a98:	f3bf 8f4f 	dsb	sy
 8000a9c:	613b      	str	r3, [r7, #16]
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa6:	685a      	ldr	r2, [r3, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	1ad2      	subs	r2, r2, r3
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000ab6:	69b8      	ldr	r0, [r7, #24]
 8000ab8:	f000 f96e 	bl	8000d98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	4a19      	ldr	r2, [pc, #100]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000ac8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000aca:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <pvPortMallocMicroROS+0x18c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d203      	bcs.n	8000ade <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a16      	ldr	r2, [pc, #88]	@ (8000b34 <pvPortMallocMicroROS+0x18c>)
 8000adc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <pvPortMallocMicroROS+0x180>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000af2:	f00f fa79 	bl	800ffe8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	f003 0307 	and.w	r3, r3, #7
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d00b      	beq.n	8000b18 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b04:	f383 8811 	msr	BASEPRI, r3
 8000b08:	f3bf 8f6f 	isb	sy
 8000b0c:	f3bf 8f4f 	dsb	sy
 8000b10:	60fb      	str	r3, [r7, #12]
}
 8000b12:	bf00      	nop
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000b18:	69fb      	ldr	r3, [r7, #28]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3728      	adds	r7, #40	@ 0x28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	24032230 	.word	0x24032230
 8000b28:	2403223c 	.word	0x2403223c
 8000b2c:	24032234 	.word	0x24032234
 8000b30:	24032228 	.word	0x24032228
 8000b34:	24032238 	.word	0x24032238

08000b38 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d04a      	beq.n	8000be0 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	425b      	negs	r3, r3
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	4413      	add	r3, r2
 8000b52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	685a      	ldr	r2, [r3, #4]
 8000b5c:	4b22      	ldr	r3, [pc, #136]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4013      	ands	r3, r2
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d10b      	bne.n	8000b7e <vPortFreeMicroROS+0x46>
	__asm volatile
 8000b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b6a:	f383 8811 	msr	BASEPRI, r3
 8000b6e:	f3bf 8f6f 	isb	sy
 8000b72:	f3bf 8f4f 	dsb	sy
 8000b76:	60fb      	str	r3, [r7, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	e7fd      	b.n	8000b7a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d00b      	beq.n	8000b9e <vPortFreeMicroROS+0x66>
	__asm volatile
 8000b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b8a:	f383 8811 	msr	BASEPRI, r3
 8000b8e:	f3bf 8f6f 	isb	sy
 8000b92:	f3bf 8f4f 	dsb	sy
 8000b96:	60bb      	str	r3, [r7, #8]
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	e7fd      	b.n	8000b9a <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d019      	beq.n	8000be0 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d115      	bne.n	8000be0 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000bc4:	f00f fa02 	bl	800ffcc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	685a      	ldr	r2, [r3, #4]
 8000bcc:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <vPortFreeMicroROS+0xb4>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a06      	ldr	r2, [pc, #24]	@ (8000bec <vPortFreeMicroROS+0xb4>)
 8000bd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000bd6:	6938      	ldr	r0, [r7, #16]
 8000bd8:	f000 f8de 	bl	8000d98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000bdc:	f00f fa04 	bl	800ffe8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000be0:	bf00      	nop
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	2403223c 	.word	0x2403223c
 8000bec:	24032234 	.word	0x24032234

08000bf0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b087      	sub	sp, #28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	425b      	negs	r3, r3
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	4413      	add	r3, r2
 8000c04:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <getBlockSize+0x38>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	4013      	ands	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]

	return count;
 8000c18:	68fb      	ldr	r3, [r7, #12]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	371c      	adds	r7, #28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	2403223c 	.word	0x2403223c

08000c2c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c36:	f00f f9c9 	bl	800ffcc <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000c3a:	6838      	ldr	r0, [r7, #0]
 8000c3c:	f7ff feb4 	bl	80009a8 <pvPortMallocMicroROS>
 8000c40:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d017      	beq.n	8000c78 <pvPortReallocMicroROS+0x4c>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d014      	beq.n	8000c78 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ffce 	bl	8000bf0 <getBlockSize>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2208      	movs	r2, #8
 8000c58:	1a9b      	subs	r3, r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d201      	bcs.n	8000c68 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	68b8      	ldr	r0, [r7, #8]
 8000c6e:	f021 f854 	bl	8021d1a <memcpy>

		vPortFreeMicroROS(pv);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff ff60 	bl	8000b38 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000c78:	f00f f9b6 	bl	800ffe8 <xTaskResumeAll>

	return newmem;
 8000c7c:	68bb      	ldr	r3, [r7, #8]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c90:	f00f f99c 	bl	800ffcc <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	fb02 f303 	mul.w	r3, r2, r3
 8000c9c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff fe82 	bl	80009a8 <pvPortMallocMicroROS>
 8000ca4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000caa:	e004      	b.n	8000cb6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	613a      	str	r2, [r7, #16]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	1e5a      	subs	r2, r3, #1
 8000cba:	617a      	str	r2, [r7, #20]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d1f5      	bne.n	8000cac <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000cc0:	f00f f992 	bl	800ffe8 <xTaskResumeAll>
  	return mem;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000cd6:	4b29      	ldr	r3, [pc, #164]	@ (8000d7c <prvHeapInit+0xac>)
 8000cd8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000cda:	4b29      	ldr	r3, [pc, #164]	@ (8000d80 <prvHeapInit+0xb0>)
 8000cdc:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f003 0307 	and.w	r3, r3, #7
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00c      	beq.n	8000d02 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	3307      	adds	r3, #7
 8000cec:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f023 0307 	bic.w	r3, r3, #7
 8000cf4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	4a20      	ldr	r2, [pc, #128]	@ (8000d80 <prvHeapInit+0xb0>)
 8000cfe:	4413      	add	r3, r2
 8000d00:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000d06:	4a1f      	ldr	r2, [pc, #124]	@ (8000d84 <prvHeapInit+0xb4>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <prvHeapInit+0xb4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68ba      	ldr	r2, [r7, #8]
 8000d16:	4413      	add	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000d1a:	2208      	movs	r2, #8
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	1a9b      	subs	r3, r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f023 0307 	bic.w	r3, r3, #7
 8000d28:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	4a16      	ldr	r2, [pc, #88]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d2e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000d30:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2200      	movs	r2, #0
 8000d36:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000d38:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	1ad2      	subs	r2, r2, r3
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8000d8c <prvHeapInit+0xbc>)
 8000d5c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	4a0b      	ldr	r2, [pc, #44]	@ (8000d90 <prvHeapInit+0xc0>)
 8000d64:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000d66:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <prvHeapInit+0xc4>)
 8000d68:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000d6c:	601a      	str	r2, [r3, #0]
}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	00030d40 	.word	0x00030d40
 8000d80:	240014e8 	.word	0x240014e8
 8000d84:	24032228 	.word	0x24032228
 8000d88:	24032230 	.word	0x24032230
 8000d8c:	24032238 	.word	0x24032238
 8000d90:	24032234 	.word	0x24032234
 8000d94:	2403223c 	.word	0x2403223c

08000d98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000da0:	4b28      	ldr	r3, [pc, #160]	@ (8000e44 <prvInsertBlockIntoFreeList+0xac>)
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	e002      	b.n	8000dac <prvInsertBlockIntoFreeList+0x14>
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d8f7      	bhi.n	8000da6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d108      	bne.n	8000dda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	441a      	add	r2, r3
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	441a      	add	r2, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d118      	bne.n	8000e20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <prvInsertBlockIntoFreeList+0xb0>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d00d      	beq.n	8000e16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	441a      	add	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	e008      	b.n	8000e28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000e16:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <prvInsertBlockIntoFreeList+0xb0>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	e003      	b.n	8000e28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d002      	beq.n	8000e36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	24032228 	.word	0x24032228
 8000e48:	24032230 	.word	0x24032230

08000e4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e52:	4b21      	ldr	r3, [pc, #132]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e58:	4a1f      	ldr	r2, [pc, #124]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e62:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e70:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e76:	4a18      	ldr	r2, [pc, #96]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e80:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2105      	movs	r1, #5
 8000e92:	200b      	movs	r0, #11
 8000e94:	f003 fb54 	bl	8004540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e98:	200b      	movs	r0, #11
 8000e9a:	f003 fb6b 	bl	8004574 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2105      	movs	r1, #5
 8000ea2:	200c      	movs	r0, #12
 8000ea4:	f003 fb4c 	bl	8004540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ea8:	200c      	movs	r0, #12
 8000eaa:	f003 fb63 	bl	8004574 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2105      	movs	r1, #5
 8000eb2:	2039      	movs	r0, #57	@ 0x39
 8000eb4:	f003 fb44 	bl	8004540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000eb8:	2039      	movs	r0, #57	@ 0x39
 8000eba:	f003 fb5b 	bl	8004574 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2105      	movs	r1, #5
 8000ec2:	203a      	movs	r0, #58	@ 0x3a
 8000ec4:	f003 fb3c 	bl	8004540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000ec8:	203a      	movs	r0, #58	@ 0x3a
 8000eca:	f003 fb53 	bl	8004574 <HAL_NVIC_EnableIRQ>

}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	58024400 	.word	0x58024400

08000edc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000eea:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000eec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ef0:	4904      	ldr	r1, [pc, #16]	@ (8000f04 <cubemx_transport_open+0x28>)
 8000ef2:	68f8      	ldr	r0, [r7, #12]
 8000ef4:	f00a fcc2 	bl	800b87c <HAL_UART_Receive_DMA>
    return true;
 8000ef8:	2301      	movs	r3, #1
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	24032240 	.word	0x24032240

08000f08 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f16:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f00a fcfb 	bl	800b914 <HAL_UART_DMAStop>
    return true;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f3c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f44:	2b20      	cmp	r3, #32
 8000f46:	d11b      	bne.n	8000f80 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	68b9      	ldr	r1, [r7, #8]
 8000f50:	6978      	ldr	r0, [r7, #20]
 8000f52:	f00a fc13 	bl	800b77c <HAL_UART_Transmit_DMA>
 8000f56:	4603      	mov	r3, r0
 8000f58:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000f5a:	e002      	b.n	8000f62 <cubemx_transport_write+0x3a>
            osDelay(1);
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f00d fcaa 	bl	800e8b6 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000f62:	7cfb      	ldrb	r3, [r7, #19]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d104      	bne.n	8000f72 <cubemx_transport_write+0x4a>
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f6e:	2b20      	cmp	r3, #32
 8000f70:	d1f4      	bne.n	8000f5c <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000f72:	7cfb      	ldrb	r3, [r7, #19]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <cubemx_transport_write+0x54>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	e002      	b.n	8000f82 <cubemx_transport_write+0x5a>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	e000      	b.n	8000f82 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000f80:	2300      	movs	r3, #0
    }
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000fa0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa6:	b672      	cpsid	i
}
 8000fa8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a5a      	ldr	r2, [pc, #360]	@ (800111c <cubemx_transport_read+0x190>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d068      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a57      	ldr	r2, [pc, #348]	@ (8001120 <cubemx_transport_read+0x194>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d061      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a55      	ldr	r2, [pc, #340]	@ (8001124 <cubemx_transport_read+0x198>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d05a      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a52      	ldr	r2, [pc, #328]	@ (8001128 <cubemx_transport_read+0x19c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d053      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a50      	ldr	r2, [pc, #320]	@ (800112c <cubemx_transport_read+0x1a0>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d04c      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a4d      	ldr	r2, [pc, #308]	@ (8001130 <cubemx_transport_read+0x1a4>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d045      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a4b      	ldr	r2, [pc, #300]	@ (8001134 <cubemx_transport_read+0x1a8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d03e      	beq.n	800108a <cubemx_transport_read+0xfe>
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a48      	ldr	r2, [pc, #288]	@ (8001138 <cubemx_transport_read+0x1ac>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d037      	beq.n	800108a <cubemx_transport_read+0xfe>
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a46      	ldr	r2, [pc, #280]	@ (800113c <cubemx_transport_read+0x1b0>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d030      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a43      	ldr	r2, [pc, #268]	@ (8001140 <cubemx_transport_read+0x1b4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d029      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a41      	ldr	r2, [pc, #260]	@ (8001144 <cubemx_transport_read+0x1b8>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d022      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a3e      	ldr	r2, [pc, #248]	@ (8001148 <cubemx_transport_read+0x1bc>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d01b      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a3c      	ldr	r2, [pc, #240]	@ (800114c <cubemx_transport_read+0x1c0>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d014      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a39      	ldr	r2, [pc, #228]	@ (8001150 <cubemx_transport_read+0x1c4>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d00d      	beq.n	800108a <cubemx_transport_read+0xfe>
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a37      	ldr	r2, [pc, #220]	@ (8001154 <cubemx_transport_read+0x1c8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d006      	beq.n	800108a <cubemx_transport_read+0xfe>
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a34      	ldr	r2, [pc, #208]	@ (8001158 <cubemx_transport_read+0x1cc>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d107      	bne.n	800109a <cubemx_transport_read+0x10e>
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001098:	e006      	b.n	80010a8 <cubemx_transport_read+0x11c>
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80010a8:	4a2c      	ldr	r2, [pc, #176]	@ (800115c <cubemx_transport_read+0x1d0>)
 80010aa:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80010ac:	b662      	cpsie	i
}
 80010ae:	bf00      	nop
        __enable_irq();
        ms_used++;
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	3301      	adds	r3, #1
 80010b4:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f00d fbfd 	bl	800e8b6 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80010bc:	4b28      	ldr	r3, [pc, #160]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b26      	ldr	r3, [pc, #152]	@ (800115c <cubemx_transport_read+0x1d0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d104      	bne.n	80010d2 <cubemx_transport_read+0x146>
 80010c8:	69fa      	ldr	r2, [r7, #28]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	f6ff af6a 	blt.w	8000fa6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80010d6:	e011      	b.n	80010fc <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 80010d8:	4b21      	ldr	r3, [pc, #132]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	440b      	add	r3, r1
 80010e2:	4920      	ldr	r1, [pc, #128]	@ (8001164 <cubemx_transport_read+0x1d8>)
 80010e4:	5c8a      	ldrb	r2, [r1, r2]
 80010e6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80010e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010f4:	6013      	str	r3, [r2, #0]
        wrote++;
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	3301      	adds	r3, #1
 80010fa:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80010fc:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b16      	ldr	r3, [pc, #88]	@ (800115c <cubemx_transport_read+0x1d0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	d003      	beq.n	8001110 <cubemx_transport_read+0x184>
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	429a      	cmp	r2, r3
 800110e:	d3e3      	bcc.n	80010d8 <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 8001110:	69bb      	ldr	r3, [r7, #24]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40020010 	.word	0x40020010
 8001120:	40020028 	.word	0x40020028
 8001124:	40020040 	.word	0x40020040
 8001128:	40020058 	.word	0x40020058
 800112c:	40020070 	.word	0x40020070
 8001130:	40020088 	.word	0x40020088
 8001134:	400200a0 	.word	0x400200a0
 8001138:	400200b8 	.word	0x400200b8
 800113c:	40020410 	.word	0x40020410
 8001140:	40020428 	.word	0x40020428
 8001144:	40020440 	.word	0x40020440
 8001148:	40020458 	.word	0x40020458
 800114c:	40020470 	.word	0x40020470
 8001150:	40020488 	.word	0x40020488
 8001154:	400204a0 	.word	0x400204a0
 8001158:	400204b8 	.word	0x400204b8
 800115c:	24032a44 	.word	0x24032a44
 8001160:	24032a40 	.word	0x24032a40
 8001164:	24032240 	.word	0x24032240

08001168 <control_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the control commands and save in control_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void control_cmd_callback(const void * xMsgIn)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  const autoware_control_msgs__msg__Control * control_cmd_msg_ = (const autoware_control_msgs__msg__Control * )xMsgIn;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 0);
 8001174:	4b05      	ldr	r3, [pc, #20]	@ (800118c <control_cmd_callback+0x24>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	4a03      	ldr	r2, [pc, #12]	@ (800118c <control_cmd_callback+0x24>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	24032a90 	.word	0x24032a90

08001190 <gear_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the gear command and save in gear_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void gear_cmd_callback(const void * xMsgIn)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  const autoware_vehicle_msgs__msg__GearCommand * gear_cmd_msg_ = (const autoware_vehicle_msgs__msg__GearCommand * )xMsgIn;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 1);
 800119c:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <gear_cmd_callback+0x24>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f043 0302 	orr.w	r3, r3, #2
 80011a4:	4a03      	ldr	r2, [pc, #12]	@ (80011b4 <gear_cmd_callback+0x24>)
 80011a6:	6013      	str	r3, [r2, #0]
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	24032a90 	.word	0x24032a90

080011b8 <turn_indicators_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the turn lights commands and save in turn_indicators_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void turn_indicators_cmd_callback(const void * xMsgIn)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  const autoware_vehicle_msgs__msg__TurnIndicatorsCommand * turn_indicators_cmd_msg_ = (const autoware_vehicle_msgs__msg__TurnIndicatorsCommand * )xMsgIn;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 2);
 80011c4:	4b05      	ldr	r3, [pc, #20]	@ (80011dc <turn_indicators_cmd_callback+0x24>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	4a03      	ldr	r2, [pc, #12]	@ (80011dc <turn_indicators_cmd_callback+0x24>)
 80011ce:	6013      	str	r3, [r2, #0]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	24032a90 	.word	0x24032a90

080011e0 <hazard_lights_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the hazard lights commands and save in hazard_lights_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void hazard_lights_cmd_callback(const void * xMsgIn)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  const autoware_vehicle_msgs__msg__HazardLightsCommand * hazard_lights_cmd_msg_ = (const autoware_vehicle_msgs__msg__HazardLightsCommand * )xMsgIn;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 3);
 80011ec:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <hazard_lights_cmd_callback+0x24>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f043 0308 	orr.w	r3, r3, #8
 80011f4:	4a03      	ldr	r2, [pc, #12]	@ (8001204 <hazard_lights_cmd_callback+0x24>)
 80011f6:	6013      	str	r3, [r2, #0]
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	24032a90 	.word	0x24032a90

08001208 <actuation_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the control commands and save in actuation_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void actuation_cmd_callback(const void * xMsgIn)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  const tier4_vehicle_msgs__msg__ActuationCommandStamped * actuation_cmd_msg_ = (const tier4_vehicle_msgs__msg__ActuationCommandStamped * )xMsgIn;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 4);
 8001214:	4b05      	ldr	r3, [pc, #20]	@ (800122c <actuation_cmd_callback+0x24>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f043 0310 	orr.w	r3, r3, #16
 800121c:	4a03      	ldr	r2, [pc, #12]	@ (800122c <actuation_cmd_callback+0x24>)
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	24032a90 	.word	0x24032a90

08001230 <emergency_callback>:
  * @brief  ROS topic subscriber callback to recieve the control commands and save in emergency_msg_ 
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void emergency_callback(const void * xMsgIn)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  const tier4_vehicle_msgs__msg__VehicleEmergencyStamped * emergency_msg_ = (const tier4_vehicle_msgs__msg__VehicleEmergencyStamped * )xMsgIn;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 5);
 800123c:	4b05      	ldr	r3, [pc, #20]	@ (8001254 <emergency_callback+0x24>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f043 0320 	orr.w	r3, r3, #32
 8001244:	4a03      	ldr	r2, [pc, #12]	@ (8001254 <emergency_callback+0x24>)
 8001246:	6013      	str	r3, [r2, #0]
}
 8001248:	bf00      	nop
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	24032a90 	.word	0x24032a90

08001258 <control_mode_cmd_callback>:
  * @brief  ROS service server callback to change the control mode and return a status about the change
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void control_mode_cmd_callback(const void * xRequestMsg, void * xResponseMsg)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  const autoware_vehicle_msgs__srv__ControlModeCommand_Request * control_mode_request_msg_ = (const autoware_vehicle_msgs__srv__ControlModeCommand_Request * )xRequestMsg;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	60fb      	str	r3, [r7, #12]

  // TODO Send threadflag to TaskControle


  //xResponseMsg = &control_mode_response_msg_;
}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexControlSignal */
  MutexControlSignalHandle = osMutexNew(&MutexControlSignal_attributes);
 8001278:	480e      	ldr	r0, [pc, #56]	@ (80012b4 <MX_FREERTOS_Init+0x40>)
 800127a:	f00d fb37 	bl	800e8ec <osMutexNew>
 800127e:	4603      	mov	r3, r0
 8001280:	4a0d      	ldr	r2, [pc, #52]	@ (80012b8 <MX_FREERTOS_Init+0x44>)
 8001282:	6013      	str	r3, [r2, #0]

  /* creation of MutexControlAction */
  MutexControlActionHandle = osMutexNew(&MutexControlAction_attributes);
 8001284:	480d      	ldr	r0, [pc, #52]	@ (80012bc <MX_FREERTOS_Init+0x48>)
 8001286:	f00d fb31 	bl	800e8ec <osMutexNew>
 800128a:	4603      	mov	r3, r0
 800128c:	4a0c      	ldr	r2, [pc, #48]	@ (80012c0 <MX_FREERTOS_Init+0x4c>)
 800128e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskControle */
  TaskControleHandle = osThreadNew(StartTaskControle, NULL, &TaskControle_attributes);
 8001290:	4a0c      	ldr	r2, [pc, #48]	@ (80012c4 <MX_FREERTOS_Init+0x50>)
 8001292:	2100      	movs	r1, #0
 8001294:	480c      	ldr	r0, [pc, #48]	@ (80012c8 <MX_FREERTOS_Init+0x54>)
 8001296:	f00d f9ad 	bl	800e5f4 <osThreadNew>
 800129a:	4603      	mov	r3, r0
 800129c:	4a0b      	ldr	r2, [pc, #44]	@ (80012cc <MX_FREERTOS_Init+0x58>)
 800129e:	6013      	str	r3, [r2, #0]

  /* creation of TaskMicroAutowa */
  TaskMicroAutowaHandle = osThreadNew(StartMicroAutoware, NULL, &TaskMicroAutowa_attributes);
 80012a0:	4a0b      	ldr	r2, [pc, #44]	@ (80012d0 <MX_FREERTOS_Init+0x5c>)
 80012a2:	2100      	movs	r1, #0
 80012a4:	480b      	ldr	r0, [pc, #44]	@ (80012d4 <MX_FREERTOS_Init+0x60>)
 80012a6:	f00d f9a5 	bl	800e5f4 <osThreadNew>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4a0a      	ldr	r2, [pc, #40]	@ (80012d8 <MX_FREERTOS_Init+0x64>)
 80012ae:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	08022c9c 	.word	0x08022c9c
 80012b8:	24032a50 	.word	0x24032a50
 80012bc:	08022cac 	.word	0x08022cac
 80012c0:	24032a54 	.word	0x24032a54
 80012c4:	08022c54 	.word	0x08022c54
 80012c8:	080025e5 	.word	0x080025e5
 80012cc:	24032a48 	.word	0x24032a48
 80012d0:	08022c78 	.word	0x08022c78
 80012d4:	08001a79 	.word	0x08001a79
 80012d8:	24032a4c 	.word	0x24032a4c

080012dc <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08e      	sub	sp, #56	@ 0x38
 80012e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f2:	4b9e      	ldr	r3, [pc, #632]	@ (800156c <MX_GPIO_Init+0x290>)
 80012f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f8:	4a9c      	ldr	r2, [pc, #624]	@ (800156c <MX_GPIO_Init+0x290>)
 80012fa:	f043 0304 	orr.w	r3, r3, #4
 80012fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001302:	4b9a      	ldr	r3, [pc, #616]	@ (800156c <MX_GPIO_Init+0x290>)
 8001304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	623b      	str	r3, [r7, #32]
 800130e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001310:	4b96      	ldr	r3, [pc, #600]	@ (800156c <MX_GPIO_Init+0x290>)
 8001312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001316:	4a95      	ldr	r2, [pc, #596]	@ (800156c <MX_GPIO_Init+0x290>)
 8001318:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800131c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001320:	4b92      	ldr	r3, [pc, #584]	@ (800156c <MX_GPIO_Init+0x290>)
 8001322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800132a:	61fb      	str	r3, [r7, #28]
 800132c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	4b8f      	ldr	r3, [pc, #572]	@ (800156c <MX_GPIO_Init+0x290>)
 8001330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001334:	4a8d      	ldr	r2, [pc, #564]	@ (800156c <MX_GPIO_Init+0x290>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800133e:	4b8b      	ldr	r3, [pc, #556]	@ (800156c <MX_GPIO_Init+0x290>)
 8001340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	61bb      	str	r3, [r7, #24]
 800134a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134c:	4b87      	ldr	r3, [pc, #540]	@ (800156c <MX_GPIO_Init+0x290>)
 800134e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001352:	4a86      	ldr	r2, [pc, #536]	@ (800156c <MX_GPIO_Init+0x290>)
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800135c:	4b83      	ldr	r3, [pc, #524]	@ (800156c <MX_GPIO_Init+0x290>)
 800135e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800136a:	4b80      	ldr	r3, [pc, #512]	@ (800156c <MX_GPIO_Init+0x290>)
 800136c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001370:	4a7e      	ldr	r2, [pc, #504]	@ (800156c <MX_GPIO_Init+0x290>)
 8001372:	f043 0320 	orr.w	r3, r3, #32
 8001376:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800137a:	4b7c      	ldr	r3, [pc, #496]	@ (800156c <MX_GPIO_Init+0x290>)
 800137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001380:	f003 0320 	and.w	r3, r3, #32
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001388:	4b78      	ldr	r3, [pc, #480]	@ (800156c <MX_GPIO_Init+0x290>)
 800138a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800138e:	4a77      	ldr	r2, [pc, #476]	@ (800156c <MX_GPIO_Init+0x290>)
 8001390:	f043 0308 	orr.w	r3, r3, #8
 8001394:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001398:	4b74      	ldr	r3, [pc, #464]	@ (800156c <MX_GPIO_Init+0x290>)
 800139a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013a6:	4b71      	ldr	r3, [pc, #452]	@ (800156c <MX_GPIO_Init+0x290>)
 80013a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ac:	4a6f      	ldr	r2, [pc, #444]	@ (800156c <MX_GPIO_Init+0x290>)
 80013ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013b6:	4b6d      	ldr	r3, [pc, #436]	@ (800156c <MX_GPIO_Init+0x290>)
 80013b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013c4:	4b69      	ldr	r3, [pc, #420]	@ (800156c <MX_GPIO_Init+0x290>)
 80013c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ca:	4a68      	ldr	r2, [pc, #416]	@ (800156c <MX_GPIO_Init+0x290>)
 80013cc:	f043 0310 	orr.w	r3, r3, #16
 80013d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d4:	4b65      	ldr	r3, [pc, #404]	@ (800156c <MX_GPIO_Init+0x290>)
 80013d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f244 0101 	movw	r1, #16385	@ 0x4001
 80013e8:	4861      	ldr	r0, [pc, #388]	@ (8001570 <MX_GPIO_Init+0x294>)
 80013ea:	f006 f8c9 	bl	8007580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013f4:	485f      	ldr	r0, [pc, #380]	@ (8001574 <MX_GPIO_Init+0x298>)
 80013f6:	f006 f8c3 	bl	8007580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2102      	movs	r1, #2
 80013fe:	485e      	ldr	r0, [pc, #376]	@ (8001578 <MX_GPIO_Init+0x29c>)
 8001400:	f006 f8be 	bl	8007580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001404:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140a:	2300      	movs	r3, #0
 800140c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001412:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001416:	4619      	mov	r1, r3
 8001418:	4858      	ldr	r0, [pc, #352]	@ (800157c <MX_GPIO_Init+0x2a0>)
 800141a:	f005 ff01 	bl	8007220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800141e:	2332      	movs	r3, #50	@ 0x32
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800142e:	230b      	movs	r3, #11
 8001430:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001436:	4619      	mov	r1, r3
 8001438:	4850      	ldr	r0, [pc, #320]	@ (800157c <MX_GPIO_Init+0x2a0>)
 800143a:	f005 fef1 	bl	8007220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800143e:	2386      	movs	r3, #134	@ 0x86
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800144e:	230b      	movs	r3, #11
 8001450:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001456:	4619      	mov	r1, r3
 8001458:	4849      	ldr	r0, [pc, #292]	@ (8001580 <MX_GPIO_Init+0x2a4>)
 800145a:	f005 fee1 	bl	8007220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800145e:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001462:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001464:	2301      	movs	r3, #1
 8001466:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001470:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001474:	4619      	mov	r1, r3
 8001476:	483e      	ldr	r0, [pc, #248]	@ (8001570 <MX_GPIO_Init+0x294>)
 8001478:	f005 fed2 	bl	8007220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JoySW_Pin;
 800147c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001480:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001482:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001486:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001488:	2301      	movs	r3, #1
 800148a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(JoySW_GPIO_Port, &GPIO_InitStruct);
 800148c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001490:	4619      	mov	r1, r3
 8001492:	483c      	ldr	r0, [pc, #240]	@ (8001584 <MX_GPIO_Init+0x2a8>)
 8001494:	f005 fec4 	bl	8007220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001498:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800149c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014aa:	230b      	movs	r3, #11
 80014ac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b2:	4619      	mov	r1, r3
 80014b4:	482e      	ldr	r0, [pc, #184]	@ (8001570 <MX_GPIO_Init+0x294>)
 80014b6:	f005 feb3 	bl	8007220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80014ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c0:	2301      	movs	r3, #1
 80014c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80014cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014d0:	4619      	mov	r1, r3
 80014d2:	4828      	ldr	r0, [pc, #160]	@ (8001574 <MX_GPIO_Init+0x298>)
 80014d4:	f005 fea4 	bl	8007220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80014d8:	2380      	movs	r3, #128	@ 0x80
 80014da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ea:	4619      	mov	r1, r3
 80014ec:	4826      	ldr	r0, [pc, #152]	@ (8001588 <MX_GPIO_Init+0x2ac>)
 80014ee:	f005 fe97 	bl	8007220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80014f2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001504:	230a      	movs	r3, #10
 8001506:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150c:	4619      	mov	r1, r3
 800150e:	481c      	ldr	r0, [pc, #112]	@ (8001580 <MX_GPIO_Init+0x2a4>)
 8001510:	f005 fe86 	bl	8007220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001514:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001526:	230b      	movs	r3, #11
 8001528:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800152a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152e:	4619      	mov	r1, r3
 8001530:	4815      	ldr	r0, [pc, #84]	@ (8001588 <MX_GPIO_Init+0x2ac>)
 8001532:	f005 fe75 	bl	8007220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001536:	2302      	movs	r3, #2
 8001538:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153a:	2301      	movs	r3, #1
 800153c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001546:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800154a:	4619      	mov	r1, r3
 800154c:	480a      	ldr	r0, [pc, #40]	@ (8001578 <MX_GPIO_Init+0x29c>)
 800154e:	f005 fe67 	bl	8007220 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2107      	movs	r1, #7
 8001556:	2028      	movs	r0, #40	@ 0x28
 8001558:	f002 fff2 	bl	8004540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800155c:	2028      	movs	r0, #40	@ 0x28
 800155e:	f003 f809 	bl	8004574 <HAL_NVIC_EnableIRQ>

}
 8001562:	bf00      	nop
 8001564:	3738      	adds	r7, #56	@ 0x38
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	58024400 	.word	0x58024400
 8001570:	58020400 	.word	0x58020400
 8001574:	58020c00 	.word	0x58020c00
 8001578:	58021000 	.word	0x58021000
 800157c:	58020800 	.word	0x58020800
 8001580:	58020000 	.word	0x58020000
 8001584:	58021400 	.word	0x58021400
 8001588:	58021800 	.word	0x58021800

0800158c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001590:	f001 fb9c 	bl	8002ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001594:	f000 f81c 	bl	80015d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001598:	f7ff fea0 	bl	80012dc <MX_GPIO_Init>
  MX_DMA_Init();
 800159c:	f7ff fc56 	bl	8000e4c <MX_DMA_Init>
  MX_USART3_UART_Init();
 80015a0:	f001 f8de 	bl	8002760 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80015a4:	f7ff f8cc 	bl	8000740 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80015a8:	f001 f88e 	bl	80026c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Starting ADC1 reading by DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t * ) uiADC1Buffer, 2);
 80015ac:	2202      	movs	r2, #2
 80015ae:	4906      	ldr	r1, [pc, #24]	@ (80015c8 <main+0x3c>)
 80015b0:	4806      	ldr	r0, [pc, #24]	@ (80015cc <main+0x40>)
 80015b2:	f001 ffa1 	bl	80034f8 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015b6:	f00c ffd3 	bl	800e560 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80015ba:	f7ff fe5b 	bl	8001274 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80015be:	f00c fff3 	bl	800e5a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015c2:	bf00      	nop
 80015c4:	e7fd      	b.n	80015c2 <main+0x36>
 80015c6:	bf00      	nop
 80015c8:	24032a5c 	.word	0x24032a5c
 80015cc:	2400140c 	.word	0x2400140c

080015d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b09e      	sub	sp, #120	@ 0x78
 80015d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015da:	224c      	movs	r2, #76	@ 0x4c
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f020 fa7c 	bl	8021adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e4:	f107 030c 	add.w	r3, r7, #12
 80015e8:	2220      	movs	r2, #32
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f020 fa75 	bl	8021adc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80015f2:	2002      	movs	r0, #2
 80015f4:	f005 fff8 	bl	80075e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	4b49      	ldr	r3, [pc, #292]	@ (8001724 <SystemClock_Config+0x154>)
 80015fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001600:	4a48      	ldr	r2, [pc, #288]	@ (8001724 <SystemClock_Config+0x154>)
 8001602:	f023 0301 	bic.w	r3, r3, #1
 8001606:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001608:	4b46      	ldr	r3, [pc, #280]	@ (8001724 <SystemClock_Config+0x154>)
 800160a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	4b45      	ldr	r3, [pc, #276]	@ (8001728 <SystemClock_Config+0x158>)
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	4a44      	ldr	r2, [pc, #272]	@ (8001728 <SystemClock_Config+0x158>)
 8001618:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800161c:	6193      	str	r3, [r2, #24]
 800161e:	4b42      	ldr	r3, [pc, #264]	@ (8001728 <SystemClock_Config+0x158>)
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800162a:	bf00      	nop
 800162c:	4b3e      	ldr	r3, [pc, #248]	@ (8001728 <SystemClock_Config+0x158>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001634:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001638:	d1f8      	bne.n	800162c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163a:	4b3c      	ldr	r3, [pc, #240]	@ (800172c <SystemClock_Config+0x15c>)
 800163c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001640:	4a3a      	ldr	r2, [pc, #232]	@ (800172c <SystemClock_Config+0x15c>)
 8001642:	f043 0302 	orr.w	r3, r3, #2
 8001646:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800164a:	4b38      	ldr	r3, [pc, #224]	@ (800172c <SystemClock_Config+0x15c>)
 800164c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001658:	2300      	movs	r3, #0
 800165a:	603b      	str	r3, [r7, #0]
 800165c:	4b32      	ldr	r3, [pc, #200]	@ (8001728 <SystemClock_Config+0x158>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	4a31      	ldr	r2, [pc, #196]	@ (8001728 <SystemClock_Config+0x158>)
 8001662:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001666:	6193      	str	r3, [r2, #24]
 8001668:	4b2f      	ldr	r3, [pc, #188]	@ (8001728 <SystemClock_Config+0x158>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001670:	603b      	str	r3, [r7, #0]
 8001672:	4b2c      	ldr	r3, [pc, #176]	@ (8001724 <SystemClock_Config+0x154>)
 8001674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001676:	4a2b      	ldr	r2, [pc, #172]	@ (8001724 <SystemClock_Config+0x154>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800167e:	4b29      	ldr	r3, [pc, #164]	@ (8001724 <SystemClock_Config+0x154>)
 8001680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800168a:	bf00      	nop
 800168c:	4b26      	ldr	r3, [pc, #152]	@ (8001728 <SystemClock_Config+0x158>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001694:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001698:	d1f8      	bne.n	800168c <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 800169a:	2310      	movs	r3, #16
 800169c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 800169e:	2380      	movs	r3, #128	@ 0x80
 80016a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80016a2:	2320      	movs	r3, #32
 80016a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a6:	2302      	movs	r3, #2
 80016a8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 80016aa:	2301      	movs	r3, #1
 80016ac:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016ae:	2301      	movs	r3, #1
 80016b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 80016b2:	23f0      	movs	r3, #240	@ 0xf0
 80016b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80016b6:	2302      	movs	r3, #2
 80016b8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016ba:	2304      	movs	r3, #4
 80016bc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016be:	2302      	movs	r3, #2
 80016c0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80016c2:	2308      	movs	r3, #8
 80016c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016d2:	4618      	mov	r0, r3
 80016d4:	f005 ffc2 	bl	800765c <HAL_RCC_OscConfig>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <SystemClock_Config+0x112>
  {
    Error_Handler();
 80016de:	f000 f9c3 	bl	8001a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e2:	233f      	movs	r3, #63	@ 0x3f
 80016e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e6:	2303      	movs	r3, #3
 80016e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80016ee:	2308      	movs	r3, #8
 80016f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80016f2:	2340      	movs	r3, #64	@ 0x40
 80016f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80016f6:	2340      	movs	r3, #64	@ 0x40
 80016f8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80016fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016fe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001700:	2340      	movs	r3, #64	@ 0x40
 8001702:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	2104      	movs	r1, #4
 800170a:	4618      	mov	r0, r3
 800170c:	f006 fc00 	bl	8007f10 <HAL_RCC_ClockConfig>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8001716:	f000 f9a7 	bl	8001a68 <Error_Handler>
  }
}
 800171a:	bf00      	nop
 800171c:	3778      	adds	r7, #120	@ 0x78
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	58000400 	.word	0x58000400
 8001728:	58024800 	.word	0x58024800
 800172c:	58024400 	.word	0x58024400

08001730 <HAL_GPIO_EXTI_Callback>:
  * @brief  ISR callback for the JoySW, switching the control mode.
  * @param  GPIO_Pin: EXTI pin.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	80fb      	strh	r3, [r7, #6]
  if(JoySW_Pin == GPIO_Pin){
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001740:	d10d      	bne.n	800175e <HAL_GPIO_EXTI_Callback+0x2e>
    ucButtonState ^= 1;
 8001742:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <HAL_GPIO_EXTI_Callback+0x38>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	f083 0301 	eor.w	r3, r3, #1
 800174a:	b2da      	uxtb	r2, r3
 800174c:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <HAL_GPIO_EXTI_Callback+0x38>)
 800174e:	701a      	strb	r2, [r3, #0]
    osThreadFlagsSet(TaskControleHandle, 0x1000);
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <HAL_GPIO_EXTI_Callback+0x3c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001758:	4618      	mov	r0, r3
 800175a:	f00c ffdd 	bl	800e718 <osThreadFlagsSet>
  }
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	24032a58 	.word	0x24032a58
 800176c:	24032a48 	.word	0x24032a48

08001770 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  if(&huart2 == huart)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4aad      	ldr	r2, [pc, #692]	@ (8001a30 <HAL_UART_RxCpltCallback+0x2c0>)
 800177c:	4293      	cmp	r3, r2
 800177e:	f040 8152 	bne.w	8001a26 <HAL_UART_RxCpltCallback+0x2b6>
  {

    switch (ucSmState)
 8001782:	4bac      	ldr	r3, [pc, #688]	@ (8001a34 <HAL_UART_RxCpltCallback+0x2c4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b28      	cmp	r3, #40	@ 0x28
 8001788:	f200 8141 	bhi.w	8001a0e <HAL_UART_RxCpltCallback+0x29e>
 800178c:	a201      	add	r2, pc, #4	@ (adr r2, 8001794 <HAL_UART_RxCpltCallback+0x24>)
 800178e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001792:	bf00      	nop
 8001794:	08001839 	.word	0x08001839
 8001798:	0800184d 	.word	0x0800184d
 800179c:	08001a0f 	.word	0x08001a0f
 80017a0:	08001a0f 	.word	0x08001a0f
 80017a4:	08001a0f 	.word	0x08001a0f
 80017a8:	08001a0f 	.word	0x08001a0f
 80017ac:	08001a0f 	.word	0x08001a0f
 80017b0:	08001a0f 	.word	0x08001a0f
 80017b4:	08001a0f 	.word	0x08001a0f
 80017b8:	08001a0f 	.word	0x08001a0f
 80017bc:	08001925 	.word	0x08001925
 80017c0:	08001937 	.word	0x08001937
 80017c4:	08001949 	.word	0x08001949
 80017c8:	0800195b 	.word	0x0800195b
 80017cc:	08001a0f 	.word	0x08001a0f
 80017d0:	08001a0f 	.word	0x08001a0f
 80017d4:	08001a0f 	.word	0x08001a0f
 80017d8:	08001a0f 	.word	0x08001a0f
 80017dc:	08001a0f 	.word	0x08001a0f
 80017e0:	08001a0f 	.word	0x08001a0f
 80017e4:	0800196d 	.word	0x0800196d
 80017e8:	0800197f 	.word	0x0800197f
 80017ec:	08001991 	.word	0x08001991
 80017f0:	080019a3 	.word	0x080019a3
 80017f4:	08001a0f 	.word	0x08001a0f
 80017f8:	08001a0f 	.word	0x08001a0f
 80017fc:	08001a0f 	.word	0x08001a0f
 8001800:	08001a0f 	.word	0x08001a0f
 8001804:	08001a0f 	.word	0x08001a0f
 8001808:	08001a0f 	.word	0x08001a0f
 800180c:	080019b5 	.word	0x080019b5
 8001810:	080019c7 	.word	0x080019c7
 8001814:	080019d9 	.word	0x080019d9
 8001818:	080019eb 	.word	0x080019eb
 800181c:	08001a0f 	.word	0x08001a0f
 8001820:	08001a0f 	.word	0x08001a0f
 8001824:	08001a0f 	.word	0x08001a0f
 8001828:	08001a0f 	.word	0x08001a0f
 800182c:	08001a0f 	.word	0x08001a0f
 8001830:	08001a0f 	.word	0x08001a0f
 8001834:	080019fd 	.word	0x080019fd
      {
        case 0:
        if('#' == * ucDmaBuffer)
 8001838:	4b7f      	ldr	r3, [pc, #508]	@ (8001a38 <HAL_UART_RxCpltCallback+0x2c8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b23      	cmp	r3, #35	@ 0x23
 8001840:	f040 80e9 	bne.w	8001a16 <HAL_UART_RxCpltCallback+0x2a6>
        {
          ucSmState = 1;
 8001844:	4b7b      	ldr	r3, [pc, #492]	@ (8001a34 <HAL_UART_RxCpltCallback+0x2c4>)
 8001846:	2201      	movs	r2, #1
 8001848:	601a      	str	r2, [r3, #0]
        }
        break;
 800184a:	e0e4      	b.n	8001a16 <HAL_UART_RxCpltCallback+0x2a6>

        case 1:
        switch (* ucDmaBuffer)
 800184c:	4b7a      	ldr	r3, [pc, #488]	@ (8001a38 <HAL_UART_RxCpltCallback+0x2c8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	3b24      	subs	r3, #36	@ 0x24
 8001854:	2b20      	cmp	r3, #32
 8001856:	d860      	bhi.n	800191a <HAL_UART_RxCpltCallback+0x1aa>
 8001858:	a201      	add	r2, pc, #4	@ (adr r2, 8001860 <HAL_UART_RxCpltCallback+0xf0>)
 800185a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185e:	bf00      	nop
 8001860:	08001905 	.word	0x08001905
 8001864:	0800191b 	.word	0x0800191b
 8001868:	0800191b 	.word	0x0800191b
 800186c:	0800191b 	.word	0x0800191b
 8001870:	0800191b 	.word	0x0800191b
 8001874:	0800191b 	.word	0x0800191b
 8001878:	0800191b 	.word	0x0800191b
 800187c:	0800191b 	.word	0x0800191b
 8001880:	0800191b 	.word	0x0800191b
 8001884:	0800191b 	.word	0x0800191b
 8001888:	0800191b 	.word	0x0800191b
 800188c:	0800191b 	.word	0x0800191b
 8001890:	0800191b 	.word	0x0800191b
 8001894:	0800191b 	.word	0x0800191b
 8001898:	0800191b 	.word	0x0800191b
 800189c:	0800191b 	.word	0x0800191b
 80018a0:	0800191b 	.word	0x0800191b
 80018a4:	0800191b 	.word	0x0800191b
 80018a8:	0800191b 	.word	0x0800191b
 80018ac:	0800191b 	.word	0x0800191b
 80018b0:	0800191b 	.word	0x0800191b
 80018b4:	0800191b 	.word	0x0800191b
 80018b8:	0800191b 	.word	0x0800191b
 80018bc:	0800191b 	.word	0x0800191b
 80018c0:	0800191b 	.word	0x0800191b
 80018c4:	0800191b 	.word	0x0800191b
 80018c8:	0800191b 	.word	0x0800191b
 80018cc:	0800191b 	.word	0x0800191b
 80018d0:	0800191b 	.word	0x0800191b
 80018d4:	080018e5 	.word	0x080018e5
 80018d8:	080018ed 	.word	0x080018ed
 80018dc:	080018f5 	.word	0x080018f5
 80018e0:	080018fd 	.word	0x080018fd
        {
          case 'A':
          ucSmState = 10;
 80018e4:	4b53      	ldr	r3, [pc, #332]	@ (8001a34 <HAL_UART_RxCpltCallback+0x2c4>)
 80018e6:	220a      	movs	r2, #10
 80018e8:	601a      	str	r2, [r3, #0]
          break;
 80018ea:	e01a      	b.n	8001922 <HAL_UART_RxCpltCallback+0x1b2>

          case 'B':
          ucSmState = 20;
 80018ec:	4b51      	ldr	r3, [pc, #324]	@ (8001a34 <HAL_UART_RxCpltCallback+0x2c4>)
 80018ee:	2214      	movs	r2, #20
 80018f0:	601a      	str	r2, [r3, #0]
          break;
 80018f2:	e016      	b.n	8001922 <HAL_UART_RxCpltCallback+0x1b2>

          case 'C':
          ucSmState = 30;
 80018f4:	4b4f      	ldr	r3, [pc, #316]	@ (8001a34 <HAL_UART_RxCpltCallback+0x2c4>)
 80018f6:	221e      	movs	r2, #30
 80018f8:	601a      	str	r2, [r3, #0]
          break;
 80018fa:	e012      	b.n	8001922 <HAL_UART_RxCpltCallback+0x1b2>

          case 'D':
          ucSmState = 40;
 80018fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001a34 <HAL_UART_RxCpltCallback+0x2c4>)
 80018fe:	2228      	movs	r2, #40	@ 0x28
 8001900:	601a      	str	r2, [r3, #0]
          break;
 8001902:	e00e      	b.n	8001922 <HAL_UART_RxCpltCallback+0x1b2>

          case '$':
          ucSmState = 0;
 8001904:	4b4b      	ldr	r3, [pc, #300]	@ (8001a34 <HAL_UART_RxCpltCallback+0x2c4>)
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
          osThreadFlagsSet(TaskControleHandle, 0x10000);
 800190a:	4b4c      	ldr	r3, [pc, #304]	@ (8001a3c <HAL_UART_RxCpltCallback+0x2cc>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8001912:	4618      	mov	r0, r3
 8001914:	f00c ff00 	bl	800e718 <osThreadFlagsSet>
          break;
 8001918:	e003      	b.n	8001922 <HAL_UART_RxCpltCallback+0x1b2>

          default:
            ucSmState = 0;
 800191a:	4b46      	ldr	r3, [pc, #280]	@ (8001a34 <HAL_UART_RxCpltCallback+0x2c4>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
            break;
 8001920:	bf00      	nop
        }
        break;
 8001922:	e079      	b.n	8001a18 <HAL_UART_RxCpltCallback+0x2a8>

        case 10:
        xVehicleStatus.xLongSpeed.ucBytes[0] = * ucDmaBuffer;
 8001924:	4b44      	ldr	r3, [pc, #272]	@ (8001a38 <HAL_UART_RxCpltCallback+0x2c8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	781a      	ldrb	r2, [r3, #0]
 800192a:	4b45      	ldr	r3, [pc, #276]	@ (8001a40 <HAL_UART_RxCpltCallback+0x2d0>)
 800192c:	701a      	strb	r2, [r3, #0]
        ucSmState = 11;
 800192e:	4b41      	ldr	r3, [pc, #260]	@ (8001a34 <HAL_UART_RxCpltCallback+0x2c4>)
 8001930:	220b      	movs	r2, #11
 8001932:	601a      	str	r2, [r3, #0]
        break;
 8001934:	e070      	b.n	8001a18 <HAL_UART_RxCpltCallback+0x2a8>

        case 11:
        xVehicleStatus.xLongSpeed.ucBytes[1] = * ucDmaBuffer;
 8001936:	4b40      	ldr	r3, [pc, #256]	@ (8001a38 <HAL_UART_RxCpltCallback+0x2c8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	781a      	ldrb	r2, [r3, #0]
 800193c:	4b40      	ldr	r3, [pc, #256]	@ (8001a40 <HAL_UART_RxCpltCallback+0x2d0>)
 800193e:	705a      	strb	r2, [r3, #1]
        ucSmState = 12;
 8001940:	4b3c      	ldr	r3, [pc, #240]	@ (8001a34 <HAL_UART_RxCpltCallback+0x2c4>)
 8001942:	220c      	movs	r2, #12
 8001944:	601a      	str	r2, [r3, #0]
        break;
 8001946:	e067      	b.n	8001a18 <HAL_UART_RxCpltCallback+0x2a8>

        case 12:
        xVehicleStatus.xLongSpeed.ucBytes[2] = * ucDmaBuffer;
 8001948:	4b3b      	ldr	r3, [pc, #236]	@ (8001a38 <HAL_UART_RxCpltCallback+0x2c8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	781a      	ldrb	r2, [r3, #0]
 800194e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a40 <HAL_UART_RxCpltCallback+0x2d0>)
 8001950:	709a      	strb	r2, [r3, #2]
        ucSmState = 13;
 8001952:	4b38      	ldr	r3, [pc, #224]	@ (8001a34 <HAL_UART_RxCpltCallback+0x2c4>)
 8001954:	220d      	movs	r2, #13
 8001956:	601a      	str	r2, [r3, #0]
        break;
 8001958:	e05e      	b.n	8001a18 <HAL_UART_RxCpltCallback+0x2a8>

        case 13:
        xVehicleStatus.xLongSpeed.ucBytes[3] = * ucDmaBuffer;
 800195a:	4b37      	ldr	r3, [pc, #220]	@ (8001a38 <HAL_UART_RxCpltCallback+0x2c8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	781a      	ldrb	r2, [r3, #0]
 8001960:	4b37      	ldr	r3, [pc, #220]	@ (8001a40 <HAL_UART_RxCpltCallback+0x2d0>)
 8001962:	70da      	strb	r2, [r3, #3]
        ucSmState = 1;
 8001964:	4b33      	ldr	r3, [pc, #204]	@ (8001a34 <HAL_UART_RxCpltCallback+0x2c4>)
 8001966:	2201      	movs	r2, #1
 8001968:	601a      	str	r2, [r3, #0]
        break;
 800196a:	e055      	b.n	8001a18 <HAL_UART_RxCpltCallback+0x2a8>

        case 20:
        xVehicleStatus.xLatSpeed.ucBytes[0] = * ucDmaBuffer;
 800196c:	4b32      	ldr	r3, [pc, #200]	@ (8001a38 <HAL_UART_RxCpltCallback+0x2c8>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	781a      	ldrb	r2, [r3, #0]
 8001972:	4b33      	ldr	r3, [pc, #204]	@ (8001a40 <HAL_UART_RxCpltCallback+0x2d0>)
 8001974:	711a      	strb	r2, [r3, #4]
        ucSmState = 21;
 8001976:	4b2f      	ldr	r3, [pc, #188]	@ (8001a34 <HAL_UART_RxCpltCallback+0x2c4>)
 8001978:	2215      	movs	r2, #21
 800197a:	601a      	str	r2, [r3, #0]
        break;
 800197c:	e04c      	b.n	8001a18 <HAL_UART_RxCpltCallback+0x2a8>

        case 21:
        xVehicleStatus.xLatSpeed.ucBytes[1] = * ucDmaBuffer;
 800197e:	4b2e      	ldr	r3, [pc, #184]	@ (8001a38 <HAL_UART_RxCpltCallback+0x2c8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	781a      	ldrb	r2, [r3, #0]
 8001984:	4b2e      	ldr	r3, [pc, #184]	@ (8001a40 <HAL_UART_RxCpltCallback+0x2d0>)
 8001986:	715a      	strb	r2, [r3, #5]
        ucSmState = 22;
 8001988:	4b2a      	ldr	r3, [pc, #168]	@ (8001a34 <HAL_UART_RxCpltCallback+0x2c4>)
 800198a:	2216      	movs	r2, #22
 800198c:	601a      	str	r2, [r3, #0]
        break;
 800198e:	e043      	b.n	8001a18 <HAL_UART_RxCpltCallback+0x2a8>

        case 22:
        xVehicleStatus.xLatSpeed.ucBytes[2] = * ucDmaBuffer;
 8001990:	4b29      	ldr	r3, [pc, #164]	@ (8001a38 <HAL_UART_RxCpltCallback+0x2c8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	781a      	ldrb	r2, [r3, #0]
 8001996:	4b2a      	ldr	r3, [pc, #168]	@ (8001a40 <HAL_UART_RxCpltCallback+0x2d0>)
 8001998:	719a      	strb	r2, [r3, #6]
        ucSmState = 23;
 800199a:	4b26      	ldr	r3, [pc, #152]	@ (8001a34 <HAL_UART_RxCpltCallback+0x2c4>)
 800199c:	2217      	movs	r2, #23
 800199e:	601a      	str	r2, [r3, #0]
        break;
 80019a0:	e03a      	b.n	8001a18 <HAL_UART_RxCpltCallback+0x2a8>

        case 23:
        xVehicleStatus.xLatSpeed.ucBytes[3] = * ucDmaBuffer;
 80019a2:	4b25      	ldr	r3, [pc, #148]	@ (8001a38 <HAL_UART_RxCpltCallback+0x2c8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	781a      	ldrb	r2, [r3, #0]
 80019a8:	4b25      	ldr	r3, [pc, #148]	@ (8001a40 <HAL_UART_RxCpltCallback+0x2d0>)
 80019aa:	71da      	strb	r2, [r3, #7]
        ucSmState = 1;
 80019ac:	4b21      	ldr	r3, [pc, #132]	@ (8001a34 <HAL_UART_RxCpltCallback+0x2c4>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	601a      	str	r2, [r3, #0]
        break;
 80019b2:	e031      	b.n	8001a18 <HAL_UART_RxCpltCallback+0x2a8>

        case 30:
        xVehicleStatus.xHeadingRate.ucBytes[0] = * ucDmaBuffer;
 80019b4:	4b20      	ldr	r3, [pc, #128]	@ (8001a38 <HAL_UART_RxCpltCallback+0x2c8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	781a      	ldrb	r2, [r3, #0]
 80019ba:	4b21      	ldr	r3, [pc, #132]	@ (8001a40 <HAL_UART_RxCpltCallback+0x2d0>)
 80019bc:	721a      	strb	r2, [r3, #8]
        ucSmState = 31;
 80019be:	4b1d      	ldr	r3, [pc, #116]	@ (8001a34 <HAL_UART_RxCpltCallback+0x2c4>)
 80019c0:	221f      	movs	r2, #31
 80019c2:	601a      	str	r2, [r3, #0]
        break;
 80019c4:	e028      	b.n	8001a18 <HAL_UART_RxCpltCallback+0x2a8>

        case 31:
        xVehicleStatus.xHeadingRate.ucBytes[1] = * ucDmaBuffer;
 80019c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a38 <HAL_UART_RxCpltCallback+0x2c8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	781a      	ldrb	r2, [r3, #0]
 80019cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001a40 <HAL_UART_RxCpltCallback+0x2d0>)
 80019ce:	725a      	strb	r2, [r3, #9]
        ucSmState = 32;
 80019d0:	4b18      	ldr	r3, [pc, #96]	@ (8001a34 <HAL_UART_RxCpltCallback+0x2c4>)
 80019d2:	2220      	movs	r2, #32
 80019d4:	601a      	str	r2, [r3, #0]
        break;
 80019d6:	e01f      	b.n	8001a18 <HAL_UART_RxCpltCallback+0x2a8>

        case 32:
        xVehicleStatus.xHeadingRate.ucBytes[2] = * ucDmaBuffer;
 80019d8:	4b17      	ldr	r3, [pc, #92]	@ (8001a38 <HAL_UART_RxCpltCallback+0x2c8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	781a      	ldrb	r2, [r3, #0]
 80019de:	4b18      	ldr	r3, [pc, #96]	@ (8001a40 <HAL_UART_RxCpltCallback+0x2d0>)
 80019e0:	729a      	strb	r2, [r3, #10]
        ucSmState = 33;
 80019e2:	4b14      	ldr	r3, [pc, #80]	@ (8001a34 <HAL_UART_RxCpltCallback+0x2c4>)
 80019e4:	2221      	movs	r2, #33	@ 0x21
 80019e6:	601a      	str	r2, [r3, #0]
        break;
 80019e8:	e016      	b.n	8001a18 <HAL_UART_RxCpltCallback+0x2a8>

        case 33:
        xVehicleStatus.xHeadingRate.ucBytes[3] = * ucDmaBuffer;
 80019ea:	4b13      	ldr	r3, [pc, #76]	@ (8001a38 <HAL_UART_RxCpltCallback+0x2c8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	781a      	ldrb	r2, [r3, #0]
 80019f0:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <HAL_UART_RxCpltCallback+0x2d0>)
 80019f2:	72da      	strb	r2, [r3, #11]
        ucSmState = 1;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a34 <HAL_UART_RxCpltCallback+0x2c4>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]
        break;
 80019fa:	e00d      	b.n	8001a18 <HAL_UART_RxCpltCallback+0x2a8>

        case 40:
        xVehicleStatus.ucGear = * ucDmaBuffer;
 80019fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a38 <HAL_UART_RxCpltCallback+0x2c8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	781a      	ldrb	r2, [r3, #0]
 8001a02:	4b0f      	ldr	r3, [pc, #60]	@ (8001a40 <HAL_UART_RxCpltCallback+0x2d0>)
 8001a04:	731a      	strb	r2, [r3, #12]
        ucSmState = 1;
 8001a06:	4b0b      	ldr	r3, [pc, #44]	@ (8001a34 <HAL_UART_RxCpltCallback+0x2c4>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]
        break;
 8001a0c:	e004      	b.n	8001a18 <HAL_UART_RxCpltCallback+0x2a8>


        default:
		  ucSmState = 0;
 8001a0e:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <HAL_UART_RxCpltCallback+0x2c4>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
          break;
 8001a14:	e000      	b.n	8001a18 <HAL_UART_RxCpltCallback+0x2a8>
        break;
 8001a16:	bf00      	nop
      }
    HAL_UART_Receive_IT(&huart2, ucDmaBuffer, 1);
 8001a18:	4b07      	ldr	r3, [pc, #28]	@ (8001a38 <HAL_UART_RxCpltCallback+0x2c8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4803      	ldr	r0, [pc, #12]	@ (8001a30 <HAL_UART_RxCpltCallback+0x2c0>)
 8001a22:	f009 fe5f 	bl	800b6e4 <HAL_UART_Receive_IT>
  }
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	24032af0 	.word	0x24032af0
 8001a34:	24032a8c 	.word	0x24032a8c
 8001a38:	24032a88 	.word	0x24032a88
 8001a3c:	24032a48 	.word	0x24032a48
 8001a40:	24032a78 	.word	0x24032a78

08001a44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a04      	ldr	r2, [pc, #16]	@ (8001a64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d101      	bne.n	8001a5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a56:	f001 f975 	bl	8002d44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40001000 	.word	0x40001000

08001a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a6c:	b672      	cpsid	i
}
 8001a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <Error_Handler+0x8>
 8001a74:	0000      	movs	r0, r0
	...

08001a78 <StartMicroAutoware>:
  * @brief  MicroAutoware task function.
  * @param  argument : not used.
  * @retval None
  */
void StartMicroAutoware(void *argument)
{
 8001a78:	b5b0      	push	{r4, r5, r7, lr}
 8001a7a:	f5ad 7d4a 	sub.w	sp, sp, #808	@ 0x328
 8001a7e:	af02      	add	r7, sp, #8
 8001a80:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8001a84:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8001a88:	6018      	str	r0, [r3, #0]

  // Variables -- START

  unsigned int uiFlags;
  unsigned char ucControlMode = AUTOWARE;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	f887 331b 	strb.w	r3, [r7, #795]	@ 0x31b
  // Variables -- END

  // micro-ROS configuration

  // Setting transport layer
  rmw_uros_set_custom_transport(
 8001a90:	4bb3      	ldr	r3, [pc, #716]	@ (8001d60 <StartMicroAutoware+0x2e8>)
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	4bb3      	ldr	r3, [pc, #716]	@ (8001d64 <StartMicroAutoware+0x2ec>)
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	4bb3      	ldr	r3, [pc, #716]	@ (8001d68 <StartMicroAutoware+0x2f0>)
 8001a9a:	4ab4      	ldr	r2, [pc, #720]	@ (8001d6c <StartMicroAutoware+0x2f4>)
 8001a9c:	49b4      	ldr	r1, [pc, #720]	@ (8001d70 <StartMicroAutoware+0x2f8>)
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f013 ff66 	bl	8015970 <rmw_uros_set_custom_transport>
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  // Setting memory allocation methods
  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001aa4:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8001aa8:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8001aac:	4618      	mov	r0, r3
 8001aae:	f013 feb5 	bl	801581c <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8001ab2:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8001ab6:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8001aba:	4aae      	ldr	r2, [pc, #696]	@ (8001d74 <StartMicroAutoware+0x2fc>)
 8001abc:	601a      	str	r2, [r3, #0]
  freeRTOS_allocator.deallocate = microros_deallocate;
 8001abe:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8001ac2:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8001ac6:	4aac      	ldr	r2, [pc, #688]	@ (8001d78 <StartMicroAutoware+0x300>)
 8001ac8:	605a      	str	r2, [r3, #4]
  freeRTOS_allocator.reallocate = microros_reallocate;
 8001aca:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8001ace:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8001ad2:	4aaa      	ldr	r2, [pc, #680]	@ (8001d7c <StartMicroAutoware+0x304>)
 8001ad4:	609a      	str	r2, [r3, #8]
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001ad6:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8001ada:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8001ade:	4aa8      	ldr	r2, [pc, #672]	@ (8001d80 <StartMicroAutoware+0x308>)
 8001ae0:	60da      	str	r2, [r3, #12]

  // micro-ROS app

  executor = rclc_executor_get_zero_initialized_executor();
 8001ae2:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8001ae6:	f5a3 741e 	sub.w	r4, r3, #632	@ 0x278
 8001aea:	463b      	mov	r3, r7
 8001aec:	4618      	mov	r0, r3
 8001aee:	f013 fa25 	bl	8014f3c <rclc_executor_get_zero_initialized_executor>
 8001af2:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8001af6:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8001afa:	4620      	mov	r0, r4
 8001afc:	4619      	mov	r1, r3
 8001afe:	2388      	movs	r3, #136	@ 0x88
 8001b00:	461a      	mov	r2, r3
 8001b02:	f020 f90a 	bl	8021d1a <memcpy>

  allocator = rcl_get_default_allocator();
 8001b06:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8001b0a:	f5a3 74f6 	sub.w	r4, r3, #492	@ 0x1ec
 8001b0e:	463b      	mov	r3, r7
 8001b10:	4618      	mov	r0, r3
 8001b12:	f013 fe91 	bl	8015838 <rcutils_get_default_allocator>
 8001b16:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8001b1a:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8001b1e:	461d      	mov	r5, r3
 8001b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b24:	682b      	ldr	r3, [r5, #0]
 8001b26:	6023      	str	r3, [r4, #0]

  //create init_options
  rclc_support_init(&support, 0, NULL, &allocator);
 8001b28:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001b2c:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8001b30:	2200      	movs	r2, #0
 8001b32:	2100      	movs	r1, #0
 8001b34:	f013 fd30 	bl	8015598 <rclc_support_init>

  // create node
  rclc_node_init_default(&VehicleInterfaceNode, NODE_NAME, "microautoware", &support);
 8001b38:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001b3c:	f507 70be 	add.w	r0, r7, #380	@ 0x17c
 8001b40:	4a90      	ldr	r2, [pc, #576]	@ (8001d84 <StartMicroAutoware+0x30c>)
 8001b42:	4991      	ldr	r1, [pc, #580]	@ (8001d88 <StartMicroAutoware+0x310>)
 8001b44:	f013 fd72 	bl	801562c <rclc_node_init_default>

  // create executor
  rclc_executor_init(&executor, &support.context, 1, &allocator);
 8001b48:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001b4c:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8001b50:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001b54:	2201      	movs	r2, #1
 8001b56:	f013 f9fb 	bl	8014f50 <rclc_executor_init>


  // create subscribers
  // TODO set QoS
  rclc_subscription_init_default(
 8001b5a:	f010 f9e7 	bl	8011f2c <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001b64:	f507 7045 	add.w	r0, r7, #788	@ 0x314
 8001b68:	4b88      	ldr	r3, [pc, #544]	@ (8001d8c <StartMicroAutoware+0x314>)
 8001b6a:	f013 fe15 	bl	8015798 <rclc_subscription_init_default>
    		&control_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_control_msgs, msg, Control),
    		"/control/command/control_cmd");

  rclc_subscription_init_default(
 8001b6e:	f010 fcf3 	bl	8012558 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>
 8001b72:	4602      	mov	r2, r0
 8001b74:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001b78:	f507 7044 	add.w	r0, r7, #784	@ 0x310
 8001b7c:	4b84      	ldr	r3, [pc, #528]	@ (8001d90 <StartMicroAutoware+0x318>)
 8001b7e:	f013 fe0b 	bl	8015798 <rclc_subscription_init_default>
    		&gear_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, GearCommand),
    		"/control/command/gear_cmd");

  rclc_subscription_init_default(
 8001b82:	f010 fd61 	bl	8012648 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>
 8001b86:	4602      	mov	r2, r0
 8001b88:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001b8c:	f507 7043 	add.w	r0, r7, #780	@ 0x30c
 8001b90:	4b80      	ldr	r3, [pc, #512]	@ (8001d94 <StartMicroAutoware+0x31c>)
 8001b92:	f013 fe01 	bl	8015798 <rclc_subscription_init_default>
    		&turn_indicators_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, TurnIndicatorsCommand),
    		"/control/command/turn_indicators_cmd");

  rclc_subscription_init_default(
 8001b96:	f010 fd0f 	bl	80125b8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001ba0:	f507 7042 	add.w	r0, r7, #776	@ 0x308
 8001ba4:	4b7c      	ldr	r3, [pc, #496]	@ (8001d98 <StartMicroAutoware+0x320>)
 8001ba6:	f013 fdf7 	bl	8015798 <rclc_subscription_init_default>
    		&hazard_lights_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, HazardLightsCommand ),
    		"/control/command/hazard_lights_cmd");

  rclc_subscription_init_default(
 8001baa:	f014 f81b 	bl	8015be4 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001bb4:	f507 7041 	add.w	r0, r7, #772	@ 0x304
 8001bb8:	4b78      	ldr	r3, [pc, #480]	@ (8001d9c <StartMicroAutoware+0x324>)
 8001bba:	f013 fded 	bl	8015798 <rclc_subscription_init_default>
    		&actuation_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, ActuationCommandStamped),
    		"/control/command/actuation_cmd");

  rclc_subscription_init_default(
 8001bbe:	f014 f859 	bl	8015c74 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001bc8:	f507 7040 	add.w	r0, r7, #768	@ 0x300
 8001bcc:	4b74      	ldr	r3, [pc, #464]	@ (8001da0 <StartMicroAutoware+0x328>)
 8001bce:	f013 fde3 	bl	8015798 <rclc_subscription_init_default>
    		ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, VehicleEmergencyStamped),
    		"/control/command/emergency_cmd");

  // create publishers
  // TODO set QoS
  rclc_publisher_init_default(
 8001bd2:	f010 fca9 	bl	8012528 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001bdc:	f507 703f 	add.w	r0, r7, #764	@ 0x2fc
 8001be0:	4b70      	ldr	r3, [pc, #448]	@ (8001da4 <StartMicroAutoware+0x32c>)
 8001be2:	f013 fd65 	bl	80156b0 <rclc_publisher_init_default>
		  	&control_mode_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, ControlModeReport),
			"/vehicle/status/control_mode");

  rclc_publisher_init_default(
 8001be6:	f010 fd5f 	bl	80126a8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>
 8001bea:	4602      	mov	r2, r0
 8001bec:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001bf0:	f507 703e 	add.w	r0, r7, #760	@ 0x2f8
 8001bf4:	4b6c      	ldr	r3, [pc, #432]	@ (8001da8 <StartMicroAutoware+0x330>)
 8001bf6:	f013 fd5b 	bl	80156b0 <rclc_publisher_init_default>
		  	&vehicle_twist_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, VelocityReport),
			"/vehicle/status/velocity_status");

  rclc_publisher_init_default(
 8001bfa:	f010 fd0d 	bl	8012618 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001c04:	f507 703d 	add.w	r0, r7, #756	@ 0x2f4
 8001c08:	4b68      	ldr	r3, [pc, #416]	@ (8001dac <StartMicroAutoware+0x334>)
 8001c0a:	f013 fd51 	bl	80156b0 <rclc_publisher_init_default>
			&steering_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, SteeringReport),
			"/vehicle/status/steering_status");

  rclc_publisher_init_default(
 8001c0e:	f010 fcbb 	bl	8012588 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>
 8001c12:	4602      	mov	r2, r0
 8001c14:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001c18:	f507 703c 	add.w	r0, r7, #752	@ 0x2f0
 8001c1c:	4b64      	ldr	r3, [pc, #400]	@ (8001db0 <StartMicroAutoware+0x338>)
 8001c1e:	f013 fd47 	bl	80156b0 <rclc_publisher_init_default>
			&gear_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, GearReport),
			"/vehicle/status/gear_status");

  rclc_publisher_init_default(
 8001c22:	f010 fd29 	bl	8012678 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>
 8001c26:	4602      	mov	r2, r0
 8001c28:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001c2c:	f507 703b 	add.w	r0, r7, #748	@ 0x2ec
 8001c30:	4b60      	ldr	r3, [pc, #384]	@ (8001db4 <StartMicroAutoware+0x33c>)
 8001c32:	f013 fd3d 	bl	80156b0 <rclc_publisher_init_default>
			&turn_indicators_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, TurnIndicatorsReport),
			"/vehicle/status/turn_indicators_status");

  rclc_publisher_init_default(
 8001c36:	f010 fcd7 	bl	80125e8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001c40:	f507 703a 	add.w	r0, r7, #744	@ 0x2e8
 8001c44:	4b5c      	ldr	r3, [pc, #368]	@ (8001db8 <StartMicroAutoware+0x340>)
 8001c46:	f013 fd33 	bl	80156b0 <rclc_publisher_init_default>
			&hazard_lights_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, HazardLightsReport),
			"/vehicle/status/hazard_lights_status");

  rclc_publisher_init_default(
 8001c4a:	f013 ffe3 	bl	8015c14 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001c54:	f507 7039 	add.w	r0, r7, #740	@ 0x2e4
 8001c58:	4b58      	ldr	r3, [pc, #352]	@ (8001dbc <StartMicroAutoware+0x344>)
 8001c5a:	f013 fd29 	bl	80156b0 <rclc_publisher_init_default>
			&actuation_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, ActuationStatusStamped),
			"/vehicle/status/actuation_status");

  rclc_publisher_init_default(
 8001c5e:	f013 fff1 	bl	8015c44 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>
 8001c62:	4602      	mov	r2, r0
 8001c64:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001c68:	f507 7038 	add.w	r0, r7, #736	@ 0x2e0
 8001c6c:	4b54      	ldr	r3, [pc, #336]	@ (8001dc0 <StartMicroAutoware+0x348>)
 8001c6e:	f013 fd1f 	bl	80156b0 <rclc_publisher_init_default>
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, SteeringWheelStatusStamped),
			"/vehicle/status/steering_wheel_status");

  // creating servers
  rclc_service_init_default(
 8001c72:	f010 fc39 	bl	80124e8 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>
 8001c76:	4602      	mov	r2, r0
 8001c78:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001c7c:	f507 7037 	add.w	r0, r7, #732	@ 0x2dc
 8001c80:	4b50      	ldr	r3, [pc, #320]	@ (8001dc4 <StartMicroAutoware+0x34c>)
 8001c82:	f013 fd4f 	bl	8015724 <rclc_service_init_default>
			ROSIDL_GET_SRV_TYPE_SUPPORT(autoware_vehicle_msgs, srv, ControlModeCommand),
			"/control/control_mode_request");


  // adding callbacks to executor
  rclc_executor_add_subscription(&executor, &control_cmd_sub_, &control_cmd_msg_, &control_cmd_callback, ON_NEW_DATA);
 8001c86:	f507 7224 	add.w	r2, r7, #656	@ 0x290
 8001c8a:	f507 7145 	add.w	r1, r7, #788	@ 0x314
 8001c8e:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001c92:	2300      	movs	r3, #0
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	4b4c      	ldr	r3, [pc, #304]	@ (8001dc8 <StartMicroAutoware+0x350>)
 8001c98:	f013 f9d6 	bl	8015048 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &gear_cmd_sub_, &gear_cmd_msg_, &gear_cmd_callback, ON_NEW_DATA);
 8001c9c:	f507 7221 	add.w	r2, r7, #644	@ 0x284
 8001ca0:	f507 7144 	add.w	r1, r7, #784	@ 0x310
 8001ca4:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001ca8:	2300      	movs	r3, #0
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	4b47      	ldr	r3, [pc, #284]	@ (8001dcc <StartMicroAutoware+0x354>)
 8001cae:	f013 f9cb 	bl	8015048 <rclc_executor_add_subscription>
  rclc_executor_add_service(&executor, &control_mode_server_, &control_mode_request_msg_, &control_mode_response_msg_, control_mode_cmd_callback);
 8001cb2:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 8001cb6:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8001cba:	f507 7137 	add.w	r1, r7, #732	@ 0x2dc
 8001cbe:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001cc2:	4c43      	ldr	r4, [pc, #268]	@ (8001dd0 <StartMicroAutoware+0x358>)
 8001cc4:	9400      	str	r4, [sp, #0]
 8001cc6:	f013 f9fd 	bl	80150c4 <rclc_executor_add_service>

  rclc_executor_add_subscription(&executor, &turn_indicators_cmd_sub_, &turn_indicators_cmd_msg_, &turn_indicators_cmd_callback, ON_NEW_DATA);
 8001cca:	f507 721e 	add.w	r2, r7, #632	@ 0x278
 8001cce:	f507 7143 	add.w	r1, r7, #780	@ 0x30c
 8001cd2:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	4b3e      	ldr	r3, [pc, #248]	@ (8001dd4 <StartMicroAutoware+0x35c>)
 8001cdc:	f013 f9b4 	bl	8015048 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &hazard_lights_cmd_sub_, &hazard_lights_cmd_msg_, &hazard_lights_cmd_callback, ON_NEW_DATA);
 8001ce0:	f507 721b 	add.w	r2, r7, #620	@ 0x26c
 8001ce4:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 8001ce8:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001cec:	2300      	movs	r3, #0
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	4b39      	ldr	r3, [pc, #228]	@ (8001dd8 <StartMicroAutoware+0x360>)
 8001cf2:	f013 f9a9 	bl	8015048 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &actuation_cmd_sub_, &actuation_cmd_msg_, &actuation_cmd_callback, ON_NEW_DATA);
 8001cf6:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 8001cfa:	f507 7141 	add.w	r1, r7, #772	@ 0x304
 8001cfe:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001d02:	2300      	movs	r3, #0
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	4b35      	ldr	r3, [pc, #212]	@ (8001ddc <StartMicroAutoware+0x364>)
 8001d08:	f013 f99e 	bl	8015048 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &emergency_sub_, &emergency_msg_, &emergency_callback, ON_NEW_DATA);
 8001d0c:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 8001d10:	f507 7140 	add.w	r1, r7, #768	@ 0x300
 8001d14:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001d18:	2300      	movs	r3, #0
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	4b30      	ldr	r3, [pc, #192]	@ (8001de0 <StartMicroAutoware+0x368>)
 8001d1e:	f013 f993 	bl	8015048 <rclc_executor_add_subscription>


  for (;;)
  {

    rclc_executor_spin_some(&executor, 20 * (1000 * 1000)); // Spinning executor for 20 ms.
 8001d22:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001d26:	a30c      	add	r3, pc, #48	@ (adr r3, 8001d58 <StartMicroAutoware+0x2e0>)
 8001d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2c:	4608      	mov	r0, r1
 8001d2e:	f013 fbf9 	bl	8015524 <rclc_executor_spin_some>

    if(0x00111111 == ucSubscribersRecieved)
 8001d32:	4b2c      	ldr	r3, [pc, #176]	@ (8001de4 <StartMicroAutoware+0x36c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a2c      	ldr	r2, [pc, #176]	@ (8001de8 <StartMicroAutoware+0x370>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d1f2      	bne.n	8001d22 <StartMicroAutoware+0x2aa>
    {

	  // TODO: Gather all subs data, then compact and send to TaskControle.

      // Verify if Autoware changed the operation mode
	  if(AUTOWARE == ucControlMode)
 8001d3c:	f897 331b 	ldrb.w	r3, [r7, #795]	@ 0x31b
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d155      	bne.n	8001df0 <StartMicroAutoware+0x378>
	  {
		ucControlMode = MANUAL;
 8001d44:	2302      	movs	r3, #2
 8001d46:	f887 331b 	strb.w	r3, [r7, #795]	@ 0x31b
		osThreadFlagsSet(TaskControleHandle, 0x10);
 8001d4a:	4b28      	ldr	r3, [pc, #160]	@ (8001dec <StartMicroAutoware+0x374>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2110      	movs	r1, #16
 8001d50:	4618      	mov	r0, r3
 8001d52:	f00c fce1 	bl	800e718 <osThreadFlagsSet>
 8001d56:	e058      	b.n	8001e0a <StartMicroAutoware+0x392>
 8001d58:	01312d00 	.word	0x01312d00
 8001d5c:	00000000 	.word	0x00000000
 8001d60:	08000f8d 	.word	0x08000f8d
 8001d64:	08000f29 	.word	0x08000f29
 8001d68:	08000f09 	.word	0x08000f09
 8001d6c:	08000edd 	.word	0x08000edd
 8001d70:	24032b84 	.word	0x24032b84
 8001d74:	08001e99 	.word	0x08001e99
 8001d78:	08001edd 	.word	0x08001edd
 8001d7c:	08001f15 	.word	0x08001f15
 8001d80:	08001f81 	.word	0x08001f81
 8001d84:	080229f8 	.word	0x080229f8
 8001d88:	08022a08 	.word	0x08022a08
 8001d8c:	08022a1c 	.word	0x08022a1c
 8001d90:	08022a3c 	.word	0x08022a3c
 8001d94:	08022a58 	.word	0x08022a58
 8001d98:	08022a80 	.word	0x08022a80
 8001d9c:	08022aa4 	.word	0x08022aa4
 8001da0:	08022ac4 	.word	0x08022ac4
 8001da4:	08022ae4 	.word	0x08022ae4
 8001da8:	08022b04 	.word	0x08022b04
 8001dac:	08022b24 	.word	0x08022b24
 8001db0:	08022b44 	.word	0x08022b44
 8001db4:	08022b60 	.word	0x08022b60
 8001db8:	08022b88 	.word	0x08022b88
 8001dbc:	08022bb0 	.word	0x08022bb0
 8001dc0:	08022bd4 	.word	0x08022bd4
 8001dc4:	08022bfc 	.word	0x08022bfc
 8001dc8:	08001169 	.word	0x08001169
 8001dcc:	08001191 	.word	0x08001191
 8001dd0:	08001259 	.word	0x08001259
 8001dd4:	080011b9 	.word	0x080011b9
 8001dd8:	080011e1 	.word	0x080011e1
 8001ddc:	08001209 	.word	0x08001209
 8001de0:	08001231 	.word	0x08001231
 8001de4:	24032a90 	.word	0x24032a90
 8001de8:	00111111 	.word	0x00111111
 8001dec:	24032a48 	.word	0x24032a48
	  }
	  else if(MANUAL == ucControlMode)
 8001df0:	f897 331b 	ldrb.w	r3, [r7, #795]	@ 0x31b
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d108      	bne.n	8001e0a <StartMicroAutoware+0x392>
	  {
		ucControlMode = AUTOWARE;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	f887 331b 	strb.w	r3, [r7, #795]	@ 0x31b
		osThreadFlagsSet(TaskControleHandle, 0x01);
 8001dfe:	4b22      	ldr	r3, [pc, #136]	@ (8001e88 <StartMicroAutoware+0x410>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2101      	movs	r1, #1
 8001e04:	4618      	mov	r0, r3
 8001e06:	f00c fc87 	bl	800e718 <osThreadFlagsSet>
	  }

	  // Autonomous mode: send commands
      if(AUTOWARE == ucControlMode)
 8001e0a:	f897 331b 	ldrb.w	r3, [r7, #795]	@ 0x31b
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d112      	bne.n	8001e38 <StartMicroAutoware+0x3c0>
      {
    	osMutexAcquire(MutexControlActionHandle, osWaitForever);
 8001e12:	4b1e      	ldr	r3, [pc, #120]	@ (8001e8c <StartMicroAutoware+0x414>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f00c fdec 	bl	800e9f8 <osMutexAcquire>
	    // xControlAction
		osMutexRelease(MutexControlSignalHandle);
 8001e20:	4b1b      	ldr	r3, [pc, #108]	@ (8001e90 <StartMicroAutoware+0x418>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f00c fe32 	bl	800ea8e <osMutexRelease>

		osThreadFlagsSet(TaskControleHandle, 0x100);
 8001e2a:	4b17      	ldr	r3, [pc, #92]	@ (8001e88 <StartMicroAutoware+0x410>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e32:	4618      	mov	r0, r3
 8001e34:	f00c fc70 	bl	800e718 <osThreadFlagsSet>
      }

      // WAIT for flag to sync xControlSignal update
      uiFlags = osThreadFlagsWait(0x100, osFlagsWaitAll, TIMEOUT_GET_CONTROL_SIGNAL);
 8001e38:	221e      	movs	r2, #30
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001e40:	f00c fcb8 	bl	800e7b4 <osThreadFlagsWait>
 8001e44:	f8c7 031c 	str.w	r0, [r7, #796]	@ 0x31c
      {
    	// Pub data carla
      }

      // Checking control mode update by hardware.
      uiFlags = osThreadFlagsWait(0x11, osFlagsWaitAll, 0);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	2011      	movs	r0, #17
 8001e4e:	f00c fcb1 	bl	800e7b4 <osThreadFlagsWait>
 8001e52:	f8c7 031c 	str.w	r0, [r7, #796]	@ 0x31c

	  if(0x01 == uiFlags)
 8001e56:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d105      	bne.n	8001e6a <StartMicroAutoware+0x3f2>
	  {
	    ucControlMode = AUTOWARE;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	f887 331b 	strb.w	r3, [r7, #795]	@ 0x31b
	    // publish to autoware
	    uiFlags = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
	  }

	  if(0x10 == uiFlags)
 8001e6a:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001e6e:	2b10      	cmp	r3, #16
 8001e70:	d105      	bne.n	8001e7e <StartMicroAutoware+0x406>
	  {
	    ucControlMode = MANUAL;
 8001e72:	2302      	movs	r3, #2
 8001e74:	f887 331b 	strb.w	r3, [r7, #795]	@ 0x31b
		// publish to autoware
		uiFlags = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
	  }


	  // Reseting subscribers flags
	  ucSubscribersRecieved = 0;
 8001e7e:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <StartMicroAutoware+0x41c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
    rclc_executor_spin_some(&executor, 20 * (1000 * 1000)); // Spinning executor for 20 ms.
 8001e84:	e74d      	b.n	8001d22 <StartMicroAutoware+0x2aa>
 8001e86:	bf00      	nop
 8001e88:	24032a48 	.word	0x24032a48
 8001e8c:	24032a54 	.word	0x24032a54
 8001e90:	24032a50 	.word	0x24032a50
 8001e94:	24032a90 	.word	0x24032a90

08001e98 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <microros_allocate+0x3c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4413      	add	r3, r2
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b09      	ldr	r3, [pc, #36]	@ (8001ed4 <microros_allocate+0x3c>)
 8001eb0:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001eb2:	4b09      	ldr	r3, [pc, #36]	@ (8001ed8 <microros_allocate+0x40>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4413      	add	r3, r2
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <microros_allocate+0x40>)
 8001ec0:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7fe fd70 	bl	80009a8 <pvPortMallocMicroROS>
 8001ec8:	4603      	mov	r3, r0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	24032a94 	.word	0x24032a94
 8001ed8:	24032a98 	.word	0x24032a98

08001edc <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00c      	beq.n	8001f06 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7fe fe7f 	bl	8000bf0 <getBlockSize>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4a06      	ldr	r2, [pc, #24]	@ (8001f10 <microros_deallocate+0x34>)
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	4b04      	ldr	r3, [pc, #16]	@ (8001f10 <microros_deallocate+0x34>)
 8001efe:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7fe fe19 	bl	8000b38 <vPortFreeMicroROS>
  }
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	24032a98 	.word	0x24032a98

08001f14 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001f20:	4b15      	ldr	r3, [pc, #84]	@ (8001f78 <microros_reallocate+0x64>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	4413      	add	r3, r2
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <microros_reallocate+0x64>)
 8001f2e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001f30:	4b12      	ldr	r3, [pc, #72]	@ (8001f7c <microros_reallocate+0x68>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	4413      	add	r3, r2
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f7c <microros_reallocate+0x68>)
 8001f3e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d104      	bne.n	8001f50 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001f46:	68b8      	ldr	r0, [r7, #8]
 8001f48:	f7fe fd2e 	bl	80009a8 <pvPortMallocMicroROS>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	e00e      	b.n	8001f6e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f7fe fe4d 	bl	8000bf0 <getBlockSize>
 8001f56:	4603      	mov	r3, r0
 8001f58:	4a08      	ldr	r2, [pc, #32]	@ (8001f7c <microros_reallocate+0x68>)
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <microros_reallocate+0x68>)
 8001f62:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f7fe fe60 	bl	8000c2c <pvPortReallocMicroROS>
 8001f6c:	4603      	mov	r3, r0
  }
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	24032a94 	.word	0x24032a94
 8001f7c:	24032a98 	.word	0x24032a98

08001f80 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	fb02 f303 	mul.w	r3, r2, r3
 8001f94:	4a0c      	ldr	r2, [pc, #48]	@ (8001fc8 <microros_zero_allocate+0x48>)
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	4413      	add	r3, r2
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc8 <microros_zero_allocate+0x48>)
 8001f9e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	fb02 f303 	mul.w	r3, r2, r3
 8001fa8:	4a08      	ldr	r2, [pc, #32]	@ (8001fcc <microros_zero_allocate+0x4c>)
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	4413      	add	r3, r2
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <microros_zero_allocate+0x4c>)
 8001fb2:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001fb4:	68b9      	ldr	r1, [r7, #8]
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f7fe fe65 	bl	8000c86 <pvPortCallocMicroROS>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	24032a94 	.word	0x24032a94
 8001fcc:	24032a98 	.word	0x24032a98

08001fd0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001fd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001fd4:	b086      	sub	sp, #24
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001fe2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fe6:	a320      	add	r3, pc, #128	@ (adr r3, 8002068 <UTILS_NanosecondsToTimespec+0x98>)
 8001fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fec:	f7fe f9e0 	bl	80003b0 <__aeabi_ldivmod>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001ffa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ffe:	a31a      	add	r3, pc, #104	@ (adr r3, 8002068 <UTILS_NanosecondsToTimespec+0x98>)
 8002000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002004:	f7fe f9d4 	bl	80003b0 <__aeabi_ldivmod>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b00      	cmp	r3, #0
 8002012:	da20      	bge.n	8002056 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	4a11      	ldr	r2, [pc, #68]	@ (8002060 <UTILS_NanosecondsToTimespec+0x90>)
 800201a:	fb82 1203 	smull	r1, r2, r2, r3
 800201e:	1712      	asrs	r2, r2, #28
 8002020:	17db      	asrs	r3, r3, #31
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	3301      	adds	r3, #1
 8002026:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202e:	6979      	ldr	r1, [r7, #20]
 8002030:	17c8      	asrs	r0, r1, #31
 8002032:	460c      	mov	r4, r1
 8002034:	4605      	mov	r5, r0
 8002036:	ebb2 0804 	subs.w	r8, r2, r4
 800203a:	eb63 0905 	sbc.w	r9, r3, r5
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	4906      	ldr	r1, [pc, #24]	@ (8002064 <UTILS_NanosecondsToTimespec+0x94>)
 800204c:	fb01 f303 	mul.w	r3, r1, r3
 8002050:	441a      	add	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	609a      	str	r2, [r3, #8]
    }
}
 8002056:	bf00      	nop
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002060:	44b82fa1 	.word	0x44b82fa1
 8002064:	3b9aca00 	.word	0x3b9aca00
 8002068:	3b9aca00 	.word	0x3b9aca00
 800206c:	00000000 	.word	0x00000000

08002070 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002074:	b08e      	sub	sp, #56	@ 0x38
 8002076:	af00      	add	r7, sp, #0
 8002078:	6278      	str	r0, [r7, #36]	@ 0x24
 800207a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800207c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002080:	2300      	movs	r3, #0
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002092:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002096:	4618      	mov	r0, r3
 8002098:	f00e fa2a 	bl	80104f0 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800209c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800209e:	17da      	asrs	r2, r3, #31
 80020a0:	61bb      	str	r3, [r7, #24]
 80020a2:	61fa      	str	r2, [r7, #28]
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	69b9      	ldr	r1, [r7, #24]
 80020ae:	000b      	movs	r3, r1
 80020b0:	2200      	movs	r2, #0
 80020b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80020b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020b8:	2200      	movs	r2, #0
 80020ba:	461c      	mov	r4, r3
 80020bc:	4615      	mov	r5, r2
 80020be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80020c2:	1911      	adds	r1, r2, r4
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	416b      	adcs	r3, r5
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80020ce:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80020d2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	f04f 0400 	mov.w	r4, #0
 80020de:	f04f 0500 	mov.w	r5, #0
 80020e2:	015d      	lsls	r5, r3, #5
 80020e4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80020e8:	0154      	lsls	r4, r2, #5
 80020ea:	4622      	mov	r2, r4
 80020ec:	462b      	mov	r3, r5
 80020ee:	ebb2 0800 	subs.w	r8, r2, r0
 80020f2:	eb63 0901 	sbc.w	r9, r3, r1
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	f04f 0300 	mov.w	r3, #0
 80020fe:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002102:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002106:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800210a:	4690      	mov	r8, r2
 800210c:	4699      	mov	r9, r3
 800210e:	eb18 0a00 	adds.w	sl, r8, r0
 8002112:	eb49 0b01 	adc.w	fp, r9, r1
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002122:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002126:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800212a:	ebb2 040a 	subs.w	r4, r2, sl
 800212e:	603c      	str	r4, [r7, #0]
 8002130:	eb63 030b 	sbc.w	r3, r3, fp
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	e9d7 4500 	ldrd	r4, r5, [r7]
 800213a:	4623      	mov	r3, r4
 800213c:	181b      	adds	r3, r3, r0
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	462b      	mov	r3, r5
 8002142:	eb41 0303 	adc.w	r3, r1, r3
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	6a3a      	ldr	r2, [r7, #32]
 800214a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800214e:	f7ff ff3f 	bl	8001fd0 <UTILS_NanosecondsToTimespec>

    return 0;
 8002152:	2300      	movs	r3, #0
 8002154:	4618      	mov	r0, r3
 8002156:	3738      	adds	r7, #56	@ 0x38
 8002158:	46bd      	mov	sp, r7
 800215a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002166:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <HAL_MspInit+0x38>)
 8002168:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800216c:	4a0a      	ldr	r2, [pc, #40]	@ (8002198 <HAL_MspInit+0x38>)
 800216e:	f043 0302 	orr.w	r3, r3, #2
 8002172:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002176:	4b08      	ldr	r3, [pc, #32]	@ (8002198 <HAL_MspInit+0x38>)
 8002178:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	607b      	str	r3, [r7, #4]
 8002182:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002184:	2200      	movs	r2, #0
 8002186:	210f      	movs	r1, #15
 8002188:	f06f 0001 	mvn.w	r0, #1
 800218c:	f002 f9d8 	bl	8004540 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	58024400 	.word	0x58024400

0800219c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b090      	sub	sp, #64	@ 0x40
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b0f      	cmp	r3, #15
 80021a8:	d827      	bhi.n	80021fa <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80021aa:	2200      	movs	r2, #0
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	2036      	movs	r0, #54	@ 0x36
 80021b0:	f002 f9c6 	bl	8004540 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021b4:	2036      	movs	r0, #54	@ 0x36
 80021b6:	f002 f9dd 	bl	8004574 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80021ba:	4a29      	ldr	r2, [pc, #164]	@ (8002260 <HAL_InitTick+0xc4>)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80021c0:	4b28      	ldr	r3, [pc, #160]	@ (8002264 <HAL_InitTick+0xc8>)
 80021c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021c6:	4a27      	ldr	r2, [pc, #156]	@ (8002264 <HAL_InitTick+0xc8>)
 80021c8:	f043 0310 	orr.w	r3, r3, #16
 80021cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80021d0:	4b24      	ldr	r3, [pc, #144]	@ (8002264 <HAL_InitTick+0xc8>)
 80021d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021de:	f107 0210 	add.w	r2, r7, #16
 80021e2:	f107 0314 	add.w	r3, r7, #20
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f006 fa1d 	bl	8008628 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80021ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80021f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d106      	bne.n	8002206 <HAL_InitTick+0x6a>
 80021f8:	e001      	b.n	80021fe <HAL_InitTick+0x62>
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e02b      	b.n	8002256 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021fe:	f006 f9e7 	bl	80085d0 <HAL_RCC_GetPCLK1Freq>
 8002202:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002204:	e004      	b.n	8002210 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002206:	f006 f9e3 	bl	80085d0 <HAL_RCC_GetPCLK1Freq>
 800220a:	4603      	mov	r3, r0
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002212:	4a15      	ldr	r2, [pc, #84]	@ (8002268 <HAL_InitTick+0xcc>)
 8002214:	fba2 2303 	umull	r2, r3, r2, r3
 8002218:	0c9b      	lsrs	r3, r3, #18
 800221a:	3b01      	subs	r3, #1
 800221c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800221e:	4b13      	ldr	r3, [pc, #76]	@ (800226c <HAL_InitTick+0xd0>)
 8002220:	4a13      	ldr	r2, [pc, #76]	@ (8002270 <HAL_InitTick+0xd4>)
 8002222:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002224:	4b11      	ldr	r3, [pc, #68]	@ (800226c <HAL_InitTick+0xd0>)
 8002226:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800222a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800222c:	4a0f      	ldr	r2, [pc, #60]	@ (800226c <HAL_InitTick+0xd0>)
 800222e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002230:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002232:	4b0e      	ldr	r3, [pc, #56]	@ (800226c <HAL_InitTick+0xd0>)
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002238:	4b0c      	ldr	r3, [pc, #48]	@ (800226c <HAL_InitTick+0xd0>)
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800223e:	480b      	ldr	r0, [pc, #44]	@ (800226c <HAL_InitTick+0xd0>)
 8002240:	f008 ff32 	bl	800b0a8 <HAL_TIM_Base_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d104      	bne.n	8002254 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800224a:	4808      	ldr	r0, [pc, #32]	@ (800226c <HAL_InitTick+0xd0>)
 800224c:	f008 ff8e 	bl	800b16c <HAL_TIM_Base_Start_IT>
 8002250:	4603      	mov	r3, r0
 8002252:	e000      	b.n	8002256 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
}
 8002256:	4618      	mov	r0, r3
 8002258:	3740      	adds	r7, #64	@ 0x40
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	2400000c 	.word	0x2400000c
 8002264:	58024400 	.word	0x58024400
 8002268:	431bde83 	.word	0x431bde83
 800226c:	24032a9c 	.word	0x24032a9c
 8002270:	40001000 	.word	0x40001000

08002274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002278:	bf00      	nop
 800227a:	e7fd      	b.n	8002278 <NMI_Handler+0x4>

0800227c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002280:	bf00      	nop
 8002282:	e7fd      	b.n	8002280 <HardFault_Handler+0x4>

08002284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002288:	bf00      	nop
 800228a:	e7fd      	b.n	8002288 <MemManage_Handler+0x4>

0800228c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002290:	bf00      	nop
 8002292:	e7fd      	b.n	8002290 <BusFault_Handler+0x4>

08002294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002298:	bf00      	nop
 800229a:	e7fd      	b.n	8002298 <UsageFault_Handler+0x4>

0800229c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
	...

080022ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80022b0:	4802      	ldr	r0, [pc, #8]	@ (80022bc <DMA1_Stream0_IRQHandler+0x10>)
 80022b2:	f003 fc97 	bl	8005be4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	24032d08 	.word	0x24032d08

080022c0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80022c4:	4802      	ldr	r0, [pc, #8]	@ (80022d0 <DMA1_Stream1_IRQHandler+0x10>)
 80022c6:	f003 fc8d 	bl	8005be4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	24032d80 	.word	0x24032d80

080022d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022d8:	4802      	ldr	r0, [pc, #8]	@ (80022e4 <USART2_IRQHandler+0x10>)
 80022da:	f009 fbb1 	bl	800ba40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	24032af0 	.word	0x24032af0

080022e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80022ec:	4802      	ldr	r0, [pc, #8]	@ (80022f8 <USART3_IRQHandler+0x10>)
 80022ee:	f009 fba7 	bl	800ba40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	24032b84 	.word	0x24032b84

080022fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JoySW_Pin);
 8002300:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002304:	f005 f955 	bl	80075b2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}

0800230c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002310:	4802      	ldr	r0, [pc, #8]	@ (800231c <TIM6_DAC_IRQHandler+0x10>)
 8002312:	f008 ffa3 	bl	800b25c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	24032a9c 	.word	0x24032a9c

08002320 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002324:	4802      	ldr	r0, [pc, #8]	@ (8002330 <DMA2_Stream1_IRQHandler+0x10>)
 8002326:	f003 fc5d 	bl	8005be4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	24032c18 	.word	0x24032c18

08002334 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002338:	4802      	ldr	r0, [pc, #8]	@ (8002344 <DMA2_Stream2_IRQHandler+0x10>)
 800233a:	f003 fc53 	bl	8005be4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	24032c90 	.word	0x24032c90

08002348 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return 1;
 800234c:	2301      	movs	r3, #1
}
 800234e:	4618      	mov	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <_kill>:

int _kill(int pid, int sig)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002362:	f01f fca5 	bl	8021cb0 <__errno>
 8002366:	4603      	mov	r3, r0
 8002368:	2216      	movs	r2, #22
 800236a:	601a      	str	r2, [r3, #0]
  return -1;
 800236c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <_exit>:

void _exit (int status)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002380:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff ffe7 	bl	8002358 <_kill>
  while (1) {}    /* Make sure we hang here */
 800238a:	bf00      	nop
 800238c:	e7fd      	b.n	800238a <_exit+0x12>

0800238e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b086      	sub	sp, #24
 8002392:	af00      	add	r7, sp, #0
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	e00a      	b.n	80023b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023a0:	f3af 8000 	nop.w
 80023a4:	4601      	mov	r1, r0
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	60ba      	str	r2, [r7, #8]
 80023ac:	b2ca      	uxtb	r2, r1
 80023ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	3301      	adds	r3, #1
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	dbf0      	blt.n	80023a0 <_read+0x12>
  }

  return len;
 80023be:	687b      	ldr	r3, [r7, #4]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	e009      	b.n	80023ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	60ba      	str	r2, [r7, #8]
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	3301      	adds	r3, #1
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	dbf1      	blt.n	80023da <_write+0x12>
  }
  return len;
 80023f6:	687b      	ldr	r3, [r7, #4]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <_close>:

int _close(int file)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002408:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800240c:	4618      	mov	r0, r3
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002428:	605a      	str	r2, [r3, #4]
  return 0;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <_isatty>:

int _isatty(int file)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002440:	2301      	movs	r3, #1
}
 8002442:	4618      	mov	r0, r3
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800244e:	b480      	push	{r7}
 8002450:	b085      	sub	sp, #20
 8002452:	af00      	add	r7, sp, #0
 8002454:	60f8      	str	r0, [r7, #12]
 8002456:	60b9      	str	r1, [r7, #8]
 8002458:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002470:	4a14      	ldr	r2, [pc, #80]	@ (80024c4 <_sbrk+0x5c>)
 8002472:	4b15      	ldr	r3, [pc, #84]	@ (80024c8 <_sbrk+0x60>)
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800247c:	4b13      	ldr	r3, [pc, #76]	@ (80024cc <_sbrk+0x64>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d102      	bne.n	800248a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002484:	4b11      	ldr	r3, [pc, #68]	@ (80024cc <_sbrk+0x64>)
 8002486:	4a12      	ldr	r2, [pc, #72]	@ (80024d0 <_sbrk+0x68>)
 8002488:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800248a:	4b10      	ldr	r3, [pc, #64]	@ (80024cc <_sbrk+0x64>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4413      	add	r3, r2
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	429a      	cmp	r2, r3
 8002496:	d207      	bcs.n	80024a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002498:	f01f fc0a 	bl	8021cb0 <__errno>
 800249c:	4603      	mov	r3, r0
 800249e:	220c      	movs	r2, #12
 80024a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024a6:	e009      	b.n	80024bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024a8:	4b08      	ldr	r3, [pc, #32]	@ (80024cc <_sbrk+0x64>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ae:	4b07      	ldr	r3, [pc, #28]	@ (80024cc <_sbrk+0x64>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4413      	add	r3, r2
 80024b6:	4a05      	ldr	r2, [pc, #20]	@ (80024cc <_sbrk+0x64>)
 80024b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ba:	68fb      	ldr	r3, [r7, #12]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	24080000 	.word	0x24080000
 80024c8:	00000400 	.word	0x00000400
 80024cc:	24032aec 	.word	0x24032aec
 80024d0:	24069790 	.word	0x24069790

080024d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024d8:	4b37      	ldr	r3, [pc, #220]	@ (80025b8 <SystemInit+0xe4>)
 80024da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024de:	4a36      	ldr	r2, [pc, #216]	@ (80025b8 <SystemInit+0xe4>)
 80024e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024e8:	4b34      	ldr	r3, [pc, #208]	@ (80025bc <SystemInit+0xe8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	2b06      	cmp	r3, #6
 80024f2:	d807      	bhi.n	8002504 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80024f4:	4b31      	ldr	r3, [pc, #196]	@ (80025bc <SystemInit+0xe8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f023 030f 	bic.w	r3, r3, #15
 80024fc:	4a2f      	ldr	r2, [pc, #188]	@ (80025bc <SystemInit+0xe8>)
 80024fe:	f043 0307 	orr.w	r3, r3, #7
 8002502:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002504:	4b2e      	ldr	r3, [pc, #184]	@ (80025c0 <SystemInit+0xec>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a2d      	ldr	r2, [pc, #180]	@ (80025c0 <SystemInit+0xec>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002510:	4b2b      	ldr	r3, [pc, #172]	@ (80025c0 <SystemInit+0xec>)
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002516:	4b2a      	ldr	r3, [pc, #168]	@ (80025c0 <SystemInit+0xec>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	4929      	ldr	r1, [pc, #164]	@ (80025c0 <SystemInit+0xec>)
 800251c:	4b29      	ldr	r3, [pc, #164]	@ (80025c4 <SystemInit+0xf0>)
 800251e:	4013      	ands	r3, r2
 8002520:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002522:	4b26      	ldr	r3, [pc, #152]	@ (80025bc <SystemInit+0xe8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b00      	cmp	r3, #0
 800252c:	d007      	beq.n	800253e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800252e:	4b23      	ldr	r3, [pc, #140]	@ (80025bc <SystemInit+0xe8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 030f 	bic.w	r3, r3, #15
 8002536:	4a21      	ldr	r2, [pc, #132]	@ (80025bc <SystemInit+0xe8>)
 8002538:	f043 0307 	orr.w	r3, r3, #7
 800253c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800253e:	4b20      	ldr	r3, [pc, #128]	@ (80025c0 <SystemInit+0xec>)
 8002540:	2200      	movs	r2, #0
 8002542:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002544:	4b1e      	ldr	r3, [pc, #120]	@ (80025c0 <SystemInit+0xec>)
 8002546:	2200      	movs	r2, #0
 8002548:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800254a:	4b1d      	ldr	r3, [pc, #116]	@ (80025c0 <SystemInit+0xec>)
 800254c:	2200      	movs	r2, #0
 800254e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002550:	4b1b      	ldr	r3, [pc, #108]	@ (80025c0 <SystemInit+0xec>)
 8002552:	4a1d      	ldr	r2, [pc, #116]	@ (80025c8 <SystemInit+0xf4>)
 8002554:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002556:	4b1a      	ldr	r3, [pc, #104]	@ (80025c0 <SystemInit+0xec>)
 8002558:	4a1c      	ldr	r2, [pc, #112]	@ (80025cc <SystemInit+0xf8>)
 800255a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800255c:	4b18      	ldr	r3, [pc, #96]	@ (80025c0 <SystemInit+0xec>)
 800255e:	4a1c      	ldr	r2, [pc, #112]	@ (80025d0 <SystemInit+0xfc>)
 8002560:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002562:	4b17      	ldr	r3, [pc, #92]	@ (80025c0 <SystemInit+0xec>)
 8002564:	2200      	movs	r2, #0
 8002566:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002568:	4b15      	ldr	r3, [pc, #84]	@ (80025c0 <SystemInit+0xec>)
 800256a:	4a19      	ldr	r2, [pc, #100]	@ (80025d0 <SystemInit+0xfc>)
 800256c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800256e:	4b14      	ldr	r3, [pc, #80]	@ (80025c0 <SystemInit+0xec>)
 8002570:	2200      	movs	r2, #0
 8002572:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002574:	4b12      	ldr	r3, [pc, #72]	@ (80025c0 <SystemInit+0xec>)
 8002576:	4a16      	ldr	r2, [pc, #88]	@ (80025d0 <SystemInit+0xfc>)
 8002578:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800257a:	4b11      	ldr	r3, [pc, #68]	@ (80025c0 <SystemInit+0xec>)
 800257c:	2200      	movs	r2, #0
 800257e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002580:	4b0f      	ldr	r3, [pc, #60]	@ (80025c0 <SystemInit+0xec>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a0e      	ldr	r2, [pc, #56]	@ (80025c0 <SystemInit+0xec>)
 8002586:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800258a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800258c:	4b0c      	ldr	r3, [pc, #48]	@ (80025c0 <SystemInit+0xec>)
 800258e:	2200      	movs	r2, #0
 8002590:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002592:	4b10      	ldr	r3, [pc, #64]	@ (80025d4 <SystemInit+0x100>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	4b10      	ldr	r3, [pc, #64]	@ (80025d8 <SystemInit+0x104>)
 8002598:	4013      	ands	r3, r2
 800259a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800259e:	d202      	bcs.n	80025a6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80025a0:	4b0e      	ldr	r3, [pc, #56]	@ (80025dc <SystemInit+0x108>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80025a6:	4b0e      	ldr	r3, [pc, #56]	@ (80025e0 <SystemInit+0x10c>)
 80025a8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80025ac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80025ae:	bf00      	nop
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	e000ed00 	.word	0xe000ed00
 80025bc:	52002000 	.word	0x52002000
 80025c0:	58024400 	.word	0x58024400
 80025c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80025c8:	02020200 	.word	0x02020200
 80025cc:	01ff0000 	.word	0x01ff0000
 80025d0:	01010280 	.word	0x01010280
 80025d4:	5c001000 	.word	0x5c001000
 80025d8:	ffff0000 	.word	0xffff0000
 80025dc:	51008108 	.word	0x51008108
 80025e0:	52004000 	.word	0x52004000

080025e4 <StartTaskControle>:
  * @brief  TaskControle task function.
  * @param  argument: not used.
  * @retval None
  */
void StartTaskControle(void *argument)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b092      	sub	sp, #72	@ 0x48
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	6078      	str	r0, [r7, #4]
  // Local variables -- START
  unsigned char ucControlMode;
  unsigned char ucFlagFullMsg;

  // Joystick calibration
  unsigned int uiX0   = 33970;
 80025ec:	f248 43b2 	movw	r3, #33970	@ 0x84b2
 80025f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  unsigned int uiXMin = 1057;
 80025f2:	f240 4321 	movw	r3, #1057	@ 0x421
 80025f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  unsigned int uiXMax = 65535;
 80025f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80025fc:	637b      	str	r3, [r7, #52]	@ 0x34
  unsigned int uiY0   = 33580;
 80025fe:	f248 332c 	movw	r3, #33580	@ 0x832c
 8002602:	633b      	str	r3, [r7, #48]	@ 0x30
  unsigned int uiYMin = 1062;
 8002604:	f240 4326 	movw	r3, #1062	@ 0x426
 8002608:	62fb      	str	r3, [r7, #44]	@ 0x2c
  unsigned int uiYMax = 65535;
 800260a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800260e:	62bb      	str	r3, [r7, #40]	@ 0x28
  unsigned char ucTxMsgToCarla[MSG_TO_CARLA_SIZE];

  // Local variables -- END

  // Initialization of DMA RX in circular mode
  HAL_UART_Receive_IT(&huart2, ucDmaBuffer, UART2_DMA_BUFFER_SIZE);
 8002610:	4b26      	ldr	r3, [pc, #152]	@ (80026ac <StartTaskControle+0xc8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2201      	movs	r2, #1
 8002616:	4619      	mov	r1, r3
 8002618:	4825      	ldr	r0, [pc, #148]	@ (80026b0 <StartTaskControle+0xcc>)
 800261a:	f009 f863 	bl	800b6e4 <HAL_UART_Receive_IT>

  // Initialization of operation mode
  ucControlMode = AUTOWARE;
 800261e:	2301      	movs	r3, #1
 8002620:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  // TESTING CODE FOR UART -- START

	xControlAction.fTrottle = 11.11;
 8002624:	4b23      	ldr	r3, [pc, #140]	@ (80026b4 <StartTaskControle+0xd0>)
 8002626:	4a24      	ldr	r2, [pc, #144]	@ (80026b8 <StartTaskControle+0xd4>)
 8002628:	601a      	str	r2, [r3, #0]
	xControlAction.fBrake = 22.22;
 800262a:	4b22      	ldr	r3, [pc, #136]	@ (80026b4 <StartTaskControle+0xd0>)
 800262c:	4a23      	ldr	r2, [pc, #140]	@ (80026bc <StartTaskControle+0xd8>)
 800262e:	605a      	str	r2, [r3, #4]
	xControlAction.fSteeringAngle = 33.33;
 8002630:	4b20      	ldr	r3, [pc, #128]	@ (80026b4 <StartTaskControle+0xd0>)
 8002632:	4a23      	ldr	r2, [pc, #140]	@ (80026c0 <StartTaskControle+0xdc>)
 8002634:	609a      	str	r2, [r3, #8]
	xControlAction.ucManualGearShift = 1;
 8002636:	4b1f      	ldr	r3, [pc, #124]	@ (80026b4 <StartTaskControle+0xd0>)
 8002638:	2201      	movs	r2, #1
 800263a:	739a      	strb	r2, [r3, #14]
	xControlAction.ucHandBrake = 2;
 800263c:	4b1d      	ldr	r3, [pc, #116]	@ (80026b4 <StartTaskControle+0xd0>)
 800263e:	2202      	movs	r2, #2
 8002640:	731a      	strb	r2, [r3, #12]
	xControlAction.ucReverse = 3;
 8002642:	4b1c      	ldr	r3, [pc, #112]	@ (80026b4 <StartTaskControle+0xd0>)
 8002644:	2203      	movs	r2, #3
 8002646:	735a      	strb	r2, [r3, #13]
	xControlAction.ucControlMode = MANUAL;
 8002648:	4b1a      	ldr	r3, [pc, #104]	@ (80026b4 <StartTaskControle+0xd0>)
 800264a:	2202      	movs	r2, #2
 800264c:	741a      	strb	r2, [r3, #16]
	xControlAction.ucGear = 4;
 800264e:	4b19      	ldr	r3, [pc, #100]	@ (80026b4 <StartTaskControle+0xd0>)
 8002650:	2204      	movs	r2, #4
 8002652:	73da      	strb	r2, [r3, #15]

  while(1){

	vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 8002654:	4b17      	ldr	r3, [pc, #92]	@ (80026b4 <StartTaskControle+0xd0>)
 8002656:	f107 020c 	add.w	r2, r7, #12
 800265a:	9201      	str	r2, [sp, #4]
 800265c:	691a      	ldr	r2, [r3, #16]
 800265e:	9200      	str	r2, [sp, #0]
 8002660:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002662:	f000 fa89 	bl	8002b78 <vGetStringFromControlAction>

	// Send cTxMsgToCarla to CARLA
	HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, strlen((char * ) ucTxMsgToCarla));
 8002666:	f107 030c 	add.w	r3, r7, #12
 800266a:	4618      	mov	r0, r3
 800266c:	f7fd fe42 	bl	80002f4 <strlen>
 8002670:	4603      	mov	r3, r0
 8002672:	b29a      	uxth	r2, r3
 8002674:	f107 030c 	add.w	r3, r7, #12
 8002678:	4619      	mov	r1, r3
 800267a:	480d      	ldr	r0, [pc, #52]	@ (80026b0 <StartTaskControle+0xcc>)
 800267c:	f009 f87e 	bl	800b77c <HAL_UART_Transmit_DMA>

	// Wait CARLA full msg xVehicleStatusRx
	//uiFlags = osThreadFlagsWait(0x10000, osFlagsWaitAll, osWaitForever);

	xControlAction.fTrottle = xVehicleStatus.xHeadingRate.fFloat;
 8002680:	4b10      	ldr	r3, [pc, #64]	@ (80026c4 <StartTaskControle+0xe0>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	4a0b      	ldr	r2, [pc, #44]	@ (80026b4 <StartTaskControle+0xd0>)
 8002686:	6013      	str	r3, [r2, #0]
	xControlAction.fBrake = xVehicleStatus.xLatSpeed.fFloat;
 8002688:	4b0e      	ldr	r3, [pc, #56]	@ (80026c4 <StartTaskControle+0xe0>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	4a09      	ldr	r2, [pc, #36]	@ (80026b4 <StartTaskControle+0xd0>)
 800268e:	6053      	str	r3, [r2, #4]
	xControlAction.fSteeringAngle = xVehicleStatus.xLongSpeed.fFloat;
 8002690:	4b0c      	ldr	r3, [pc, #48]	@ (80026c4 <StartTaskControle+0xe0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a07      	ldr	r2, [pc, #28]	@ (80026b4 <StartTaskControle+0xd0>)
 8002696:	6093      	str	r3, [r2, #8]
	xControlAction.ucGear = xVehicleStatus.ucGear;
 8002698:	4b0a      	ldr	r3, [pc, #40]	@ (80026c4 <StartTaskControle+0xe0>)
 800269a:	7b1a      	ldrb	r2, [r3, #12]
 800269c:	4b05      	ldr	r3, [pc, #20]	@ (80026b4 <StartTaskControle+0xd0>)
 800269e:	73da      	strb	r2, [r3, #15]

	HAL_Delay(15);
 80026a0:	200f      	movs	r0, #15
 80026a2:	f000 fb6f 	bl	8002d84 <HAL_Delay>
	vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 80026a6:	bf00      	nop
 80026a8:	e7d4      	b.n	8002654 <StartTaskControle+0x70>
 80026aa:	bf00      	nop
 80026ac:	24032a88 	.word	0x24032a88
 80026b0:	24032af0 	.word	0x24032af0
 80026b4:	24032a64 	.word	0x24032a64
 80026b8:	4131c28f 	.word	0x4131c28f
 80026bc:	41b1c28f 	.word	0x41b1c28f
 80026c0:	420551ec 	.word	0x420551ec
 80026c4:	24032a78 	.word	0x24032a78

080026c8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026cc:	4b22      	ldr	r3, [pc, #136]	@ (8002758 <MX_USART2_UART_Init+0x90>)
 80026ce:	4a23      	ldr	r2, [pc, #140]	@ (800275c <MX_USART2_UART_Init+0x94>)
 80026d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026d2:	4b21      	ldr	r3, [pc, #132]	@ (8002758 <MX_USART2_UART_Init+0x90>)
 80026d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026da:	4b1f      	ldr	r3, [pc, #124]	@ (8002758 <MX_USART2_UART_Init+0x90>)
 80026dc:	2200      	movs	r2, #0
 80026de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002758 <MX_USART2_UART_Init+0x90>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002758 <MX_USART2_UART_Init+0x90>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002758 <MX_USART2_UART_Init+0x90>)
 80026ee:	220c      	movs	r2, #12
 80026f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026f2:	4b19      	ldr	r3, [pc, #100]	@ (8002758 <MX_USART2_UART_Init+0x90>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026f8:	4b17      	ldr	r3, [pc, #92]	@ (8002758 <MX_USART2_UART_Init+0x90>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026fe:	4b16      	ldr	r3, [pc, #88]	@ (8002758 <MX_USART2_UART_Init+0x90>)
 8002700:	2200      	movs	r2, #0
 8002702:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002704:	4b14      	ldr	r3, [pc, #80]	@ (8002758 <MX_USART2_UART_Init+0x90>)
 8002706:	2200      	movs	r2, #0
 8002708:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800270a:	4b13      	ldr	r3, [pc, #76]	@ (8002758 <MX_USART2_UART_Init+0x90>)
 800270c:	2200      	movs	r2, #0
 800270e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002710:	4811      	ldr	r0, [pc, #68]	@ (8002758 <MX_USART2_UART_Init+0x90>)
 8002712:	f008 ff97 	bl	800b644 <HAL_UART_Init>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800271c:	f7ff f9a4 	bl	8001a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002720:	2100      	movs	r1, #0
 8002722:	480d      	ldr	r0, [pc, #52]	@ (8002758 <MX_USART2_UART_Init+0x90>)
 8002724:	f00b fe0d 	bl	800e342 <HAL_UARTEx_SetTxFifoThreshold>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800272e:	f7ff f99b 	bl	8001a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002732:	2100      	movs	r1, #0
 8002734:	4808      	ldr	r0, [pc, #32]	@ (8002758 <MX_USART2_UART_Init+0x90>)
 8002736:	f00b fe42 	bl	800e3be <HAL_UARTEx_SetRxFifoThreshold>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002740:	f7ff f992 	bl	8001a68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002744:	4804      	ldr	r0, [pc, #16]	@ (8002758 <MX_USART2_UART_Init+0x90>)
 8002746:	f00b fdc3 	bl	800e2d0 <HAL_UARTEx_DisableFifoMode>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002750:	f7ff f98a 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002754:	bf00      	nop
 8002756:	bd80      	pop	{r7, pc}
 8002758:	24032af0 	.word	0x24032af0
 800275c:	40004400 	.word	0x40004400

08002760 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002764:	4b22      	ldr	r3, [pc, #136]	@ (80027f0 <MX_USART3_UART_Init+0x90>)
 8002766:	4a23      	ldr	r2, [pc, #140]	@ (80027f4 <MX_USART3_UART_Init+0x94>)
 8002768:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800276a:	4b21      	ldr	r3, [pc, #132]	@ (80027f0 <MX_USART3_UART_Init+0x90>)
 800276c:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002770:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002772:	4b1f      	ldr	r3, [pc, #124]	@ (80027f0 <MX_USART3_UART_Init+0x90>)
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002778:	4b1d      	ldr	r3, [pc, #116]	@ (80027f0 <MX_USART3_UART_Init+0x90>)
 800277a:	2200      	movs	r2, #0
 800277c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800277e:	4b1c      	ldr	r3, [pc, #112]	@ (80027f0 <MX_USART3_UART_Init+0x90>)
 8002780:	2200      	movs	r2, #0
 8002782:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002784:	4b1a      	ldr	r3, [pc, #104]	@ (80027f0 <MX_USART3_UART_Init+0x90>)
 8002786:	220c      	movs	r2, #12
 8002788:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800278a:	4b19      	ldr	r3, [pc, #100]	@ (80027f0 <MX_USART3_UART_Init+0x90>)
 800278c:	2200      	movs	r2, #0
 800278e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002790:	4b17      	ldr	r3, [pc, #92]	@ (80027f0 <MX_USART3_UART_Init+0x90>)
 8002792:	2200      	movs	r2, #0
 8002794:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002796:	4b16      	ldr	r3, [pc, #88]	@ (80027f0 <MX_USART3_UART_Init+0x90>)
 8002798:	2200      	movs	r2, #0
 800279a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800279c:	4b14      	ldr	r3, [pc, #80]	@ (80027f0 <MX_USART3_UART_Init+0x90>)
 800279e:	2200      	movs	r2, #0
 80027a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027a2:	4b13      	ldr	r3, [pc, #76]	@ (80027f0 <MX_USART3_UART_Init+0x90>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027a8:	4811      	ldr	r0, [pc, #68]	@ (80027f0 <MX_USART3_UART_Init+0x90>)
 80027aa:	f008 ff4b 	bl	800b644 <HAL_UART_Init>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80027b4:	f7ff f958 	bl	8001a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027b8:	2100      	movs	r1, #0
 80027ba:	480d      	ldr	r0, [pc, #52]	@ (80027f0 <MX_USART3_UART_Init+0x90>)
 80027bc:	f00b fdc1 	bl	800e342 <HAL_UARTEx_SetTxFifoThreshold>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80027c6:	f7ff f94f 	bl	8001a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027ca:	2100      	movs	r1, #0
 80027cc:	4808      	ldr	r0, [pc, #32]	@ (80027f0 <MX_USART3_UART_Init+0x90>)
 80027ce:	f00b fdf6 	bl	800e3be <HAL_UARTEx_SetRxFifoThreshold>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80027d8:	f7ff f946 	bl	8001a68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80027dc:	4804      	ldr	r0, [pc, #16]	@ (80027f0 <MX_USART3_UART_Init+0x90>)
 80027de:	f00b fd77 	bl	800e2d0 <HAL_UARTEx_DisableFifoMode>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80027e8:	f7ff f93e 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027ec:	bf00      	nop
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	24032b84 	.word	0x24032b84
 80027f4:	40004800 	.word	0x40004800

080027f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b0be      	sub	sp, #248	@ 0xf8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002800:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	60da      	str	r2, [r3, #12]
 800280e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002810:	f107 0320 	add.w	r3, r7, #32
 8002814:	22c0      	movs	r2, #192	@ 0xc0
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f01f f95f 	bl	8021adc <memset>
  if(uartHandle->Instance==USART2)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a6a      	ldr	r2, [pc, #424]	@ (80029cc <HAL_UART_MspInit+0x1d4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	f040 80e1 	bne.w	80029ec <HAL_UART_MspInit+0x1f4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800282a:	f04f 0202 	mov.w	r2, #2
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002836:	2300      	movs	r3, #0
 8002838:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800283c:	f107 0320 	add.w	r3, r7, #32
 8002840:	4618      	mov	r0, r3
 8002842:	f005 ff33 	bl	80086ac <HAL_RCCEx_PeriphCLKConfig>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 800284c:	f7ff f90c 	bl	8001a68 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002850:	4b5f      	ldr	r3, [pc, #380]	@ (80029d0 <HAL_UART_MspInit+0x1d8>)
 8002852:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002856:	4a5e      	ldr	r2, [pc, #376]	@ (80029d0 <HAL_UART_MspInit+0x1d8>)
 8002858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800285c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002860:	4b5b      	ldr	r3, [pc, #364]	@ (80029d0 <HAL_UART_MspInit+0x1d8>)
 8002862:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286a:	61fb      	str	r3, [r7, #28]
 800286c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286e:	4b58      	ldr	r3, [pc, #352]	@ (80029d0 <HAL_UART_MspInit+0x1d8>)
 8002870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002874:	4a56      	ldr	r2, [pc, #344]	@ (80029d0 <HAL_UART_MspInit+0x1d8>)
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800287e:	4b54      	ldr	r3, [pc, #336]	@ (80029d0 <HAL_UART_MspInit+0x1d8>)
 8002880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	61bb      	str	r3, [r7, #24]
 800288a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800288c:	4b50      	ldr	r3, [pc, #320]	@ (80029d0 <HAL_UART_MspInit+0x1d8>)
 800288e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002892:	4a4f      	ldr	r2, [pc, #316]	@ (80029d0 <HAL_UART_MspInit+0x1d8>)
 8002894:	f043 0308 	orr.w	r3, r3, #8
 8002898:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800289c:	4b4c      	ldr	r3, [pc, #304]	@ (80029d0 <HAL_UART_MspInit+0x1d8>)
 800289e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80028aa:	2308      	movs	r3, #8
 80028ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b0:	2302      	movs	r3, #2
 80028b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028bc:	2300      	movs	r3, #0
 80028be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028c2:	2307      	movs	r3, #7
 80028c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80028cc:	4619      	mov	r1, r3
 80028ce:	4841      	ldr	r0, [pc, #260]	@ (80029d4 <HAL_UART_MspInit+0x1dc>)
 80028d0:	f004 fca6 	bl	8007220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80028d4:	2320      	movs	r3, #32
 80028d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028da:	2302      	movs	r3, #2
 80028dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e6:	2300      	movs	r3, #0
 80028e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028ec:	2307      	movs	r3, #7
 80028ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028f2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80028f6:	4619      	mov	r1, r3
 80028f8:	4837      	ldr	r0, [pc, #220]	@ (80029d8 <HAL_UART_MspInit+0x1e0>)
 80028fa:	f004 fc91 	bl	8007220 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Stream1;
 80028fe:	4b37      	ldr	r3, [pc, #220]	@ (80029dc <HAL_UART_MspInit+0x1e4>)
 8002900:	4a37      	ldr	r2, [pc, #220]	@ (80029e0 <HAL_UART_MspInit+0x1e8>)
 8002902:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002904:	4b35      	ldr	r3, [pc, #212]	@ (80029dc <HAL_UART_MspInit+0x1e4>)
 8002906:	222b      	movs	r2, #43	@ 0x2b
 8002908:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800290a:	4b34      	ldr	r3, [pc, #208]	@ (80029dc <HAL_UART_MspInit+0x1e4>)
 800290c:	2200      	movs	r2, #0
 800290e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002910:	4b32      	ldr	r3, [pc, #200]	@ (80029dc <HAL_UART_MspInit+0x1e4>)
 8002912:	2200      	movs	r2, #0
 8002914:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002916:	4b31      	ldr	r3, [pc, #196]	@ (80029dc <HAL_UART_MspInit+0x1e4>)
 8002918:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800291c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800291e:	4b2f      	ldr	r3, [pc, #188]	@ (80029dc <HAL_UART_MspInit+0x1e4>)
 8002920:	2200      	movs	r2, #0
 8002922:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002924:	4b2d      	ldr	r3, [pc, #180]	@ (80029dc <HAL_UART_MspInit+0x1e4>)
 8002926:	2200      	movs	r2, #0
 8002928:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800292a:	4b2c      	ldr	r3, [pc, #176]	@ (80029dc <HAL_UART_MspInit+0x1e4>)
 800292c:	2200      	movs	r2, #0
 800292e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002930:	4b2a      	ldr	r3, [pc, #168]	@ (80029dc <HAL_UART_MspInit+0x1e4>)
 8002932:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002936:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002938:	4b28      	ldr	r3, [pc, #160]	@ (80029dc <HAL_UART_MspInit+0x1e4>)
 800293a:	2200      	movs	r2, #0
 800293c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800293e:	4827      	ldr	r0, [pc, #156]	@ (80029dc <HAL_UART_MspInit+0x1e4>)
 8002940:	f001 fe26 	bl	8004590 <HAL_DMA_Init>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 800294a:	f7ff f88d 	bl	8001a68 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a22      	ldr	r2, [pc, #136]	@ (80029dc <HAL_UART_MspInit+0x1e4>)
 8002952:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002956:	4a21      	ldr	r2, [pc, #132]	@ (80029dc <HAL_UART_MspInit+0x1e4>)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA2_Stream2;
 800295c:	4b21      	ldr	r3, [pc, #132]	@ (80029e4 <HAL_UART_MspInit+0x1ec>)
 800295e:	4a22      	ldr	r2, [pc, #136]	@ (80029e8 <HAL_UART_MspInit+0x1f0>)
 8002960:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002962:	4b20      	ldr	r3, [pc, #128]	@ (80029e4 <HAL_UART_MspInit+0x1ec>)
 8002964:	222c      	movs	r2, #44	@ 0x2c
 8002966:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002968:	4b1e      	ldr	r3, [pc, #120]	@ (80029e4 <HAL_UART_MspInit+0x1ec>)
 800296a:	2240      	movs	r2, #64	@ 0x40
 800296c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800296e:	4b1d      	ldr	r3, [pc, #116]	@ (80029e4 <HAL_UART_MspInit+0x1ec>)
 8002970:	2200      	movs	r2, #0
 8002972:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002974:	4b1b      	ldr	r3, [pc, #108]	@ (80029e4 <HAL_UART_MspInit+0x1ec>)
 8002976:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800297a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800297c:	4b19      	ldr	r3, [pc, #100]	@ (80029e4 <HAL_UART_MspInit+0x1ec>)
 800297e:	2200      	movs	r2, #0
 8002980:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002982:	4b18      	ldr	r3, [pc, #96]	@ (80029e4 <HAL_UART_MspInit+0x1ec>)
 8002984:	2200      	movs	r2, #0
 8002986:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002988:	4b16      	ldr	r3, [pc, #88]	@ (80029e4 <HAL_UART_MspInit+0x1ec>)
 800298a:	2200      	movs	r2, #0
 800298c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800298e:	4b15      	ldr	r3, [pc, #84]	@ (80029e4 <HAL_UART_MspInit+0x1ec>)
 8002990:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002994:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002996:	4b13      	ldr	r3, [pc, #76]	@ (80029e4 <HAL_UART_MspInit+0x1ec>)
 8002998:	2200      	movs	r2, #0
 800299a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800299c:	4811      	ldr	r0, [pc, #68]	@ (80029e4 <HAL_UART_MspInit+0x1ec>)
 800299e:	f001 fdf7 	bl	8004590 <HAL_DMA_Init>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <HAL_UART_MspInit+0x1b4>
    {
      Error_Handler();
 80029a8:	f7ff f85e 	bl	8001a68 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a0d      	ldr	r2, [pc, #52]	@ (80029e4 <HAL_UART_MspInit+0x1ec>)
 80029b0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80029b2:	4a0c      	ldr	r2, [pc, #48]	@ (80029e4 <HAL_UART_MspInit+0x1ec>)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80029b8:	2200      	movs	r2, #0
 80029ba:	2105      	movs	r1, #5
 80029bc:	2026      	movs	r0, #38	@ 0x26
 80029be:	f001 fdbf 	bl	8004540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029c2:	2026      	movs	r0, #38	@ 0x26
 80029c4:	f001 fdd6 	bl	8004574 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80029c8:	e0c3      	b.n	8002b52 <HAL_UART_MspInit+0x35a>
 80029ca:	bf00      	nop
 80029cc:	40004400 	.word	0x40004400
 80029d0:	58024400 	.word	0x58024400
 80029d4:	58020000 	.word	0x58020000
 80029d8:	58020c00 	.word	0x58020c00
 80029dc:	24032c18 	.word	0x24032c18
 80029e0:	40020428 	.word	0x40020428
 80029e4:	24032c90 	.word	0x24032c90
 80029e8:	40020440 	.word	0x40020440
  else if(uartHandle->Instance==USART3)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a5a      	ldr	r2, [pc, #360]	@ (8002b5c <HAL_UART_MspInit+0x364>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	f040 80ad 	bne.w	8002b52 <HAL_UART_MspInit+0x35a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80029f8:	f04f 0202 	mov.w	r2, #2
 80029fc:	f04f 0300 	mov.w	r3, #0
 8002a00:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a04:	2300      	movs	r3, #0
 8002a06:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a0a:	f107 0320 	add.w	r3, r7, #32
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f005 fe4c 	bl	80086ac <HAL_RCCEx_PeriphCLKConfig>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_UART_MspInit+0x226>
      Error_Handler();
 8002a1a:	f7ff f825 	bl	8001a68 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a1e:	4b50      	ldr	r3, [pc, #320]	@ (8002b60 <HAL_UART_MspInit+0x368>)
 8002a20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a24:	4a4e      	ldr	r2, [pc, #312]	@ (8002b60 <HAL_UART_MspInit+0x368>)
 8002a26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a2a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002a2e:	4b4c      	ldr	r3, [pc, #304]	@ (8002b60 <HAL_UART_MspInit+0x368>)
 8002a30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a3c:	4b48      	ldr	r3, [pc, #288]	@ (8002b60 <HAL_UART_MspInit+0x368>)
 8002a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a42:	4a47      	ldr	r2, [pc, #284]	@ (8002b60 <HAL_UART_MspInit+0x368>)
 8002a44:	f043 0308 	orr.w	r3, r3, #8
 8002a48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a4c:	4b44      	ldr	r3, [pc, #272]	@ (8002b60 <HAL_UART_MspInit+0x368>)
 8002a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002a5a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a62:	2302      	movs	r3, #2
 8002a64:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a74:	2307      	movs	r3, #7
 8002a76:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a7a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4838      	ldr	r0, [pc, #224]	@ (8002b64 <HAL_UART_MspInit+0x36c>)
 8002a82:	f004 fbcd 	bl	8007220 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8002a86:	4b38      	ldr	r3, [pc, #224]	@ (8002b68 <HAL_UART_MspInit+0x370>)
 8002a88:	4a38      	ldr	r2, [pc, #224]	@ (8002b6c <HAL_UART_MspInit+0x374>)
 8002a8a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002a8c:	4b36      	ldr	r3, [pc, #216]	@ (8002b68 <HAL_UART_MspInit+0x370>)
 8002a8e:	222d      	movs	r2, #45	@ 0x2d
 8002a90:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a92:	4b35      	ldr	r3, [pc, #212]	@ (8002b68 <HAL_UART_MspInit+0x370>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a98:	4b33      	ldr	r3, [pc, #204]	@ (8002b68 <HAL_UART_MspInit+0x370>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a9e:	4b32      	ldr	r3, [pc, #200]	@ (8002b68 <HAL_UART_MspInit+0x370>)
 8002aa0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002aa4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002aa6:	4b30      	ldr	r3, [pc, #192]	@ (8002b68 <HAL_UART_MspInit+0x370>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aac:	4b2e      	ldr	r3, [pc, #184]	@ (8002b68 <HAL_UART_MspInit+0x370>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8002b68 <HAL_UART_MspInit+0x370>)
 8002ab4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ab8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002aba:	4b2b      	ldr	r3, [pc, #172]	@ (8002b68 <HAL_UART_MspInit+0x370>)
 8002abc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002ac0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ac2:	4b29      	ldr	r3, [pc, #164]	@ (8002b68 <HAL_UART_MspInit+0x370>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002ac8:	4827      	ldr	r0, [pc, #156]	@ (8002b68 <HAL_UART_MspInit+0x370>)
 8002aca:	f001 fd61 	bl	8004590 <HAL_DMA_Init>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_UART_MspInit+0x2e0>
      Error_Handler();
 8002ad4:	f7fe ffc8 	bl	8001a68 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a23      	ldr	r2, [pc, #140]	@ (8002b68 <HAL_UART_MspInit+0x370>)
 8002adc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002ae0:	4a21      	ldr	r2, [pc, #132]	@ (8002b68 <HAL_UART_MspInit+0x370>)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8002ae6:	4b22      	ldr	r3, [pc, #136]	@ (8002b70 <HAL_UART_MspInit+0x378>)
 8002ae8:	4a22      	ldr	r2, [pc, #136]	@ (8002b74 <HAL_UART_MspInit+0x37c>)
 8002aea:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002aec:	4b20      	ldr	r3, [pc, #128]	@ (8002b70 <HAL_UART_MspInit+0x378>)
 8002aee:	222e      	movs	r2, #46	@ 0x2e
 8002af0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002af2:	4b1f      	ldr	r3, [pc, #124]	@ (8002b70 <HAL_UART_MspInit+0x378>)
 8002af4:	2240      	movs	r2, #64	@ 0x40
 8002af6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002af8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b70 <HAL_UART_MspInit+0x378>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002afe:	4b1c      	ldr	r3, [pc, #112]	@ (8002b70 <HAL_UART_MspInit+0x378>)
 8002b00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b04:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b06:	4b1a      	ldr	r3, [pc, #104]	@ (8002b70 <HAL_UART_MspInit+0x378>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b0c:	4b18      	ldr	r3, [pc, #96]	@ (8002b70 <HAL_UART_MspInit+0x378>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002b12:	4b17      	ldr	r3, [pc, #92]	@ (8002b70 <HAL_UART_MspInit+0x378>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002b18:	4b15      	ldr	r3, [pc, #84]	@ (8002b70 <HAL_UART_MspInit+0x378>)
 8002b1a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002b1e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b20:	4b13      	ldr	r3, [pc, #76]	@ (8002b70 <HAL_UART_MspInit+0x378>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002b26:	4812      	ldr	r0, [pc, #72]	@ (8002b70 <HAL_UART_MspInit+0x378>)
 8002b28:	f001 fd32 	bl	8004590 <HAL_DMA_Init>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_UART_MspInit+0x33e>
      Error_Handler();
 8002b32:	f7fe ff99 	bl	8001a68 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a0d      	ldr	r2, [pc, #52]	@ (8002b70 <HAL_UART_MspInit+0x378>)
 8002b3a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002b3c:	4a0c      	ldr	r2, [pc, #48]	@ (8002b70 <HAL_UART_MspInit+0x378>)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 8002b42:	2200      	movs	r2, #0
 8002b44:	2108      	movs	r1, #8
 8002b46:	2027      	movs	r0, #39	@ 0x27
 8002b48:	f001 fcfa 	bl	8004540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b4c:	2027      	movs	r0, #39	@ 0x27
 8002b4e:	f001 fd11 	bl	8004574 <HAL_NVIC_EnableIRQ>
}
 8002b52:	bf00      	nop
 8002b54:	37f8      	adds	r7, #248	@ 0xf8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40004800 	.word	0x40004800
 8002b60:	58024400 	.word	0x58024400
 8002b64:	58020c00 	.word	0x58020c00
 8002b68:	24032d08 	.word	0x24032d08
 8002b6c:	40020010 	.word	0x40020010
 8002b70:	24032d80 	.word	0x24032d80
 8002b74:	40020028 	.word	0x40020028

08002b78 <vGetStringFromControlAction>:
  * @param  xControlActionTx: Compressed data with information to CARLA.
  * @param  ucTxMsg: Formated msg to be transmitted.
  * @retval None.
  */
void vGetStringFromControlAction(control_action xControlActionTx, unsigned char * ucTxMsg)
{
 8002b78:	b084      	sub	sp, #16
 8002b7a:	b480      	push	{r7}
 8002b7c:	b085      	sub	sp, #20
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	f107 0c18 	add.w	ip, r7, #24
 8002b84:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  float_bytes xThrottle;
  float_bytes xSteering;
  float_bytes xBrake;

  xThrottle.fFloat = xControlActionTx.fTrottle;
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	60fb      	str	r3, [r7, #12]
  xSteering.fFloat = xControlActionTx.fSteeringAngle;
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	60bb      	str	r3, [r7, #8]
  xBrake.fFloat = xControlActionTx.fBrake;
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	607b      	str	r3, [r7, #4]

  ucTxMsg[0]  = (unsigned char)'#';
 8002b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b96:	2223      	movs	r2, #35	@ 0x23
 8002b98:	701a      	strb	r2, [r3, #0]
  ucTxMsg[1]  = (unsigned char)'T';
 8002b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	2254      	movs	r2, #84	@ 0x54
 8002ba0:	701a      	strb	r2, [r3, #0]
  ucTxMsg[2]  = xThrottle.ucBytes[0];
 8002ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba4:	3302      	adds	r3, #2
 8002ba6:	7b3a      	ldrb	r2, [r7, #12]
 8002ba8:	701a      	strb	r2, [r3, #0]
  ucTxMsg[3]  = xThrottle.ucBytes[1];
 8002baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bac:	3303      	adds	r3, #3
 8002bae:	7b7a      	ldrb	r2, [r7, #13]
 8002bb0:	701a      	strb	r2, [r3, #0]
  ucTxMsg[4]  = xThrottle.ucBytes[2];
 8002bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	7bba      	ldrb	r2, [r7, #14]
 8002bb8:	701a      	strb	r2, [r3, #0]
  ucTxMsg[5]  = xThrottle.ucBytes[3];
 8002bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bbc:	3305      	adds	r3, #5
 8002bbe:	7bfa      	ldrb	r2, [r7, #15]
 8002bc0:	701a      	strb	r2, [r3, #0]
  ucTxMsg[6]  = (unsigned char)'S';
 8002bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bc4:	3306      	adds	r3, #6
 8002bc6:	2253      	movs	r2, #83	@ 0x53
 8002bc8:	701a      	strb	r2, [r3, #0]
  ucTxMsg[7]  = xSteering.ucBytes[0];
 8002bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bcc:	3307      	adds	r3, #7
 8002bce:	7a3a      	ldrb	r2, [r7, #8]
 8002bd0:	701a      	strb	r2, [r3, #0]
  ucTxMsg[8]  = xSteering.ucBytes[1];
 8002bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd4:	3308      	adds	r3, #8
 8002bd6:	7a7a      	ldrb	r2, [r7, #9]
 8002bd8:	701a      	strb	r2, [r3, #0]
  ucTxMsg[9]  = xSteering.ucBytes[2];
 8002bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bdc:	3309      	adds	r3, #9
 8002bde:	7aba      	ldrb	r2, [r7, #10]
 8002be0:	701a      	strb	r2, [r3, #0]
  ucTxMsg[10] = xSteering.ucBytes[3];
 8002be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be4:	330a      	adds	r3, #10
 8002be6:	7afa      	ldrb	r2, [r7, #11]
 8002be8:	701a      	strb	r2, [r3, #0]
  ucTxMsg[11] = (unsigned char)'B';
 8002bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bec:	330b      	adds	r3, #11
 8002bee:	2242      	movs	r2, #66	@ 0x42
 8002bf0:	701a      	strb	r2, [r3, #0]
  ucTxMsg[12] = xBrake.ucBytes[0];
 8002bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf4:	330c      	adds	r3, #12
 8002bf6:	793a      	ldrb	r2, [r7, #4]
 8002bf8:	701a      	strb	r2, [r3, #0]
  ucTxMsg[13] = xBrake.ucBytes[1];
 8002bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bfc:	330d      	adds	r3, #13
 8002bfe:	797a      	ldrb	r2, [r7, #5]
 8002c00:	701a      	strb	r2, [r3, #0]
  ucTxMsg[14] = xBrake.ucBytes[2];
 8002c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c04:	330e      	adds	r3, #14
 8002c06:	79ba      	ldrb	r2, [r7, #6]
 8002c08:	701a      	strb	r2, [r3, #0]
  ucTxMsg[15] = xBrake.ucBytes[3];
 8002c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c0c:	330f      	adds	r3, #15
 8002c0e:	79fa      	ldrb	r2, [r7, #7]
 8002c10:	701a      	strb	r2, [r3, #0]
  ucTxMsg[16] = (unsigned char)'H';
 8002c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c14:	3310      	adds	r3, #16
 8002c16:	2248      	movs	r2, #72	@ 0x48
 8002c18:	701a      	strb	r2, [r3, #0]
  ucTxMsg[17] = xControlActionTx.ucHandBrake;
 8002c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c1c:	3311      	adds	r3, #17
 8002c1e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002c22:	701a      	strb	r2, [r3, #0]
  ucTxMsg[18] = (unsigned char)'R';
 8002c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c26:	3312      	adds	r3, #18
 8002c28:	2252      	movs	r2, #82	@ 0x52
 8002c2a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[19] = xControlActionTx.ucReverse;
 8002c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c2e:	3313      	adds	r3, #19
 8002c30:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8002c34:	701a      	strb	r2, [r3, #0]
  ucTxMsg[20] = (unsigned char)'G';
 8002c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c38:	3314      	adds	r3, #20
 8002c3a:	2247      	movs	r2, #71	@ 0x47
 8002c3c:	701a      	strb	r2, [r3, #0]
  ucTxMsg[21] = xControlActionTx.ucGear;
 8002c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c40:	3315      	adds	r3, #21
 8002c42:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002c46:	701a      	strb	r2, [r3, #0]
  ucTxMsg[22] = (unsigned char)'M';
 8002c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c4a:	3316      	adds	r3, #22
 8002c4c:	224d      	movs	r2, #77	@ 0x4d
 8002c4e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[23] = xControlActionTx.ucManualGearShift;
 8002c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c52:	3317      	adds	r3, #23
 8002c54:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002c58:	701a      	strb	r2, [r3, #0]
  ucTxMsg[24] = (unsigned char)'$';
 8002c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c5c:	3318      	adds	r3, #24
 8002c5e:	2224      	movs	r2, #36	@ 0x24
 8002c60:	701a      	strb	r2, [r3, #0]
  ucTxMsg[25] = (unsigned char)'\0';
 8002c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c64:	3319      	adds	r3, #25
 8002c66:	2200      	movs	r2, #0
 8002c68:	701a      	strb	r2, [r3, #0]
  
}
 8002c6a:	bf00      	nop
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	b004      	add	sp, #16
 8002c76:	4770      	bx	lr

08002c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002c78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c7c:	f7ff fc2a 	bl	80024d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c80:	480c      	ldr	r0, [pc, #48]	@ (8002cb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c82:	490d      	ldr	r1, [pc, #52]	@ (8002cb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c84:	4a0d      	ldr	r2, [pc, #52]	@ (8002cbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c88:	e002      	b.n	8002c90 <LoopCopyDataInit>

08002c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c8e:	3304      	adds	r3, #4

08002c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c94:	d3f9      	bcc.n	8002c8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c96:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c98:	4c0a      	ldr	r4, [pc, #40]	@ (8002cc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c9c:	e001      	b.n	8002ca2 <LoopFillZerobss>

08002c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ca0:	3204      	adds	r2, #4

08002ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ca4:	d3fb      	bcc.n	8002c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ca6:	f01f f809 	bl	8021cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002caa:	f7fe fc6f 	bl	800158c <main>
  bx  lr
 8002cae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002cb0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002cb4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002cb8:	240013f0 	.word	0x240013f0
  ldr r2, =_sidata
 8002cbc:	0802531c 	.word	0x0802531c
  ldr r2, =_sbss
 8002cc0:	240013f0 	.word	0x240013f0
  ldr r4, =_ebss
 8002cc4:	24069790 	.word	0x24069790

08002cc8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cc8:	e7fe      	b.n	8002cc8 <ADC3_IRQHandler>
	...

08002ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cd2:	2003      	movs	r0, #3
 8002cd4:	f001 fc29 	bl	800452a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002cd8:	f005 fad0 	bl	800827c <HAL_RCC_GetSysClockFreq>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	4b15      	ldr	r3, [pc, #84]	@ (8002d34 <HAL_Init+0x68>)
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	0a1b      	lsrs	r3, r3, #8
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	4913      	ldr	r1, [pc, #76]	@ (8002d38 <HAL_Init+0x6c>)
 8002cea:	5ccb      	ldrb	r3, [r1, r3]
 8002cec:	f003 031f 	and.w	r3, r3, #31
 8002cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8002d34 <HAL_Init+0x68>)
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	4a0e      	ldr	r2, [pc, #56]	@ (8002d38 <HAL_Init+0x6c>)
 8002d00:	5cd3      	ldrb	r3, [r2, r3]
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0c:	4a0b      	ldr	r2, [pc, #44]	@ (8002d3c <HAL_Init+0x70>)
 8002d0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d10:	4a0b      	ldr	r2, [pc, #44]	@ (8002d40 <HAL_Init+0x74>)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d16:	200f      	movs	r0, #15
 8002d18:	f7ff fa40 	bl	800219c <HAL_InitTick>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e002      	b.n	8002d2c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002d26:	f7ff fa1b 	bl	8002160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	58024400 	.word	0x58024400
 8002d38:	08022cbc 	.word	0x08022cbc
 8002d3c:	24000008 	.word	0x24000008
 8002d40:	24000004 	.word	0x24000004

08002d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d48:	4b06      	ldr	r3, [pc, #24]	@ (8002d64 <HAL_IncTick+0x20>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4b06      	ldr	r3, [pc, #24]	@ (8002d68 <HAL_IncTick+0x24>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4413      	add	r3, r2
 8002d54:	4a04      	ldr	r2, [pc, #16]	@ (8002d68 <HAL_IncTick+0x24>)
 8002d56:	6013      	str	r3, [r2, #0]
}
 8002d58:	bf00      	nop
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	24000010 	.word	0x24000010
 8002d68:	24032df8 	.word	0x24032df8

08002d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d70:	4b03      	ldr	r3, [pc, #12]	@ (8002d80 <HAL_GetTick+0x14>)
 8002d72:	681b      	ldr	r3, [r3, #0]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	24032df8 	.word	0x24032df8

08002d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d8c:	f7ff ffee 	bl	8002d6c <HAL_GetTick>
 8002d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d9c:	d005      	beq.n	8002daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc8 <HAL_Delay+0x44>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4413      	add	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002daa:	bf00      	nop
 8002dac:	f7ff ffde 	bl	8002d6c <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d8f7      	bhi.n	8002dac <HAL_Delay+0x28>
  {
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	bf00      	nop
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	24000010 	.word	0x24000010

08002dcc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002dd0:	4b03      	ldr	r3, [pc, #12]	@ (8002de0 <HAL_GetREVID+0x14>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	0c1b      	lsrs	r3, r3, #16
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	5c001000 	.word	0x5c001000

08002de4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	609a      	str	r2, [r3, #8]
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	609a      	str	r2, [r3, #8]
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	3360      	adds	r3, #96	@ 0x60
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002e80:	bf00      	nop
 8002e82:	371c      	adds	r7, #28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f003 031f 	and.w	r3, r3, #31
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eac:	431a      	orrs	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	611a      	str	r2, [r3, #16]
}
 8002eb2:	bf00      	nop
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b087      	sub	sp, #28
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	60f8      	str	r0, [r7, #12]
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	3360      	adds	r3, #96	@ 0x60
 8002ece:	461a      	mov	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	601a      	str	r2, [r3, #0]
  }
}
 8002ee8:	bf00      	nop
 8002eea:	371c      	adds	r7, #28
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b087      	sub	sp, #28
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	3330      	adds	r3, #48	@ 0x30
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	0a1b      	lsrs	r3, r3, #8
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	f003 030c 	and.w	r3, r3, #12
 8002f36:	4413      	add	r3, r2
 8002f38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	211f      	movs	r1, #31
 8002f46:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	401a      	ands	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	0e9b      	lsrs	r3, r3, #26
 8002f52:	f003 011f 	and.w	r1, r3, #31
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	f003 031f 	and.w	r3, r3, #31
 8002f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f60:	431a      	orrs	r2, r3
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f66:	bf00      	nop
 8002f68:	371c      	adds	r7, #28
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f023 0203 	bic.w	r2, r3, #3
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	60da      	str	r2, [r3, #12]
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	3314      	adds	r3, #20
 8002fa8:	461a      	mov	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	0e5b      	lsrs	r3, r3, #25
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	4413      	add	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	0d1b      	lsrs	r3, r3, #20
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	2107      	movs	r1, #7
 8002fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	401a      	ands	r2, r3
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	0d1b      	lsrs	r3, r3, #20
 8002fd2:	f003 031f 	and.w	r3, r3, #31
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002fe2:	bf00      	nop
 8002fe4:	371c      	adds	r7, #28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
	...

08002ff0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003008:	43db      	mvns	r3, r3
 800300a:	401a      	ands	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f003 0318 	and.w	r3, r3, #24
 8003012:	4908      	ldr	r1, [pc, #32]	@ (8003034 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003014:	40d9      	lsrs	r1, r3
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	400b      	ands	r3, r1
 800301a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800301e:	431a      	orrs	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003026:	bf00      	nop
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	000fffff 	.word	0x000fffff

08003038 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 031f 	and.w	r3, r3, #31
}
 8003048:	4618      	mov	r0, r3
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	4b04      	ldr	r3, [pc, #16]	@ (8003074 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003062:	4013      	ands	r3, r2
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6093      	str	r3, [r2, #8]
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	5fffffc0 	.word	0x5fffffc0

08003078 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003088:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800308c:	d101      	bne.n	8003092 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	4b05      	ldr	r3, [pc, #20]	@ (80030c4 <LL_ADC_EnableInternalRegulator+0x24>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	6fffffc0 	.word	0x6fffffc0

080030c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030dc:	d101      	bne.n	80030e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	4b05      	ldr	r3, [pc, #20]	@ (8003114 <LL_ADC_Enable+0x24>)
 80030fe:	4013      	ands	r3, r2
 8003100:	f043 0201 	orr.w	r2, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	7fffffc0 	.word	0x7fffffc0

08003118 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b01      	cmp	r3, #1
 800312a:	d101      	bne.n	8003130 <LL_ADC_IsEnabled+0x18>
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <LL_ADC_IsEnabled+0x1a>
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
	...

08003140 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	4b05      	ldr	r3, [pc, #20]	@ (8003164 <LL_ADC_REG_StartConversion+0x24>)
 800314e:	4013      	ands	r3, r2
 8003150:	f043 0204 	orr.w	r2, r3, #4
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	7fffffc0 	.word	0x7fffffc0

08003168 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b04      	cmp	r3, #4
 800317a:	d101      	bne.n	8003180 <LL_ADC_REG_IsConversionOngoing+0x18>
 800317c:	2301      	movs	r3, #1
 800317e:	e000      	b.n	8003182 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d101      	bne.n	80031a6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031b4:	b590      	push	{r4, r7, lr}
 80031b6:	b089      	sub	sp, #36	@ 0x24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80031c0:	2300      	movs	r3, #0
 80031c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e18f      	b.n	80034ee <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d109      	bne.n	80031f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7fd fb39 	bl	8000854 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff ff3f 	bl	8003078 <LL_ADC_IsDeepPowerDownEnabled>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d004      	beq.n	800320a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff ff25 	bl	8003054 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff ff5a 	bl	80030c8 <LL_ADC_IsInternalRegulatorEnabled>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d114      	bne.n	8003244 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff ff3e 	bl	80030a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003224:	4b87      	ldr	r3, [pc, #540]	@ (8003444 <HAL_ADC_Init+0x290>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	099b      	lsrs	r3, r3, #6
 800322a:	4a87      	ldr	r2, [pc, #540]	@ (8003448 <HAL_ADC_Init+0x294>)
 800322c:	fba2 2303 	umull	r2, r3, r2, r3
 8003230:	099b      	lsrs	r3, r3, #6
 8003232:	3301      	adds	r3, #1
 8003234:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003236:	e002      	b.n	800323e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	3b01      	subs	r3, #1
 800323c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1f9      	bne.n	8003238 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff ff3d 	bl	80030c8 <LL_ADC_IsInternalRegulatorEnabled>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10d      	bne.n	8003270 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003258:	f043 0210 	orr.w	r2, r3, #16
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003264:	f043 0201 	orr.w	r2, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff ff77 	bl	8003168 <LL_ADC_REG_IsConversionOngoing>
 800327a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003280:	f003 0310 	and.w	r3, r3, #16
 8003284:	2b00      	cmp	r3, #0
 8003286:	f040 8129 	bne.w	80034dc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b00      	cmp	r3, #0
 800328e:	f040 8125 	bne.w	80034dc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003296:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800329a:	f043 0202 	orr.w	r2, r3, #2
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff ff36 	bl	8003118 <LL_ADC_IsEnabled>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d136      	bne.n	8003320 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a65      	ldr	r2, [pc, #404]	@ (800344c <HAL_ADC_Init+0x298>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d004      	beq.n	80032c6 <HAL_ADC_Init+0x112>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a63      	ldr	r2, [pc, #396]	@ (8003450 <HAL_ADC_Init+0x29c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d10e      	bne.n	80032e4 <HAL_ADC_Init+0x130>
 80032c6:	4861      	ldr	r0, [pc, #388]	@ (800344c <HAL_ADC_Init+0x298>)
 80032c8:	f7ff ff26 	bl	8003118 <LL_ADC_IsEnabled>
 80032cc:	4604      	mov	r4, r0
 80032ce:	4860      	ldr	r0, [pc, #384]	@ (8003450 <HAL_ADC_Init+0x29c>)
 80032d0:	f7ff ff22 	bl	8003118 <LL_ADC_IsEnabled>
 80032d4:	4603      	mov	r3, r0
 80032d6:	4323      	orrs	r3, r4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	bf0c      	ite	eq
 80032dc:	2301      	moveq	r3, #1
 80032de:	2300      	movne	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	e008      	b.n	80032f6 <HAL_ADC_Init+0x142>
 80032e4:	485b      	ldr	r0, [pc, #364]	@ (8003454 <HAL_ADC_Init+0x2a0>)
 80032e6:	f7ff ff17 	bl	8003118 <LL_ADC_IsEnabled>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	bf0c      	ite	eq
 80032f0:	2301      	moveq	r3, #1
 80032f2:	2300      	movne	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d012      	beq.n	8003320 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a53      	ldr	r2, [pc, #332]	@ (800344c <HAL_ADC_Init+0x298>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d004      	beq.n	800330e <HAL_ADC_Init+0x15a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a51      	ldr	r2, [pc, #324]	@ (8003450 <HAL_ADC_Init+0x29c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d101      	bne.n	8003312 <HAL_ADC_Init+0x15e>
 800330e:	4a52      	ldr	r2, [pc, #328]	@ (8003458 <HAL_ADC_Init+0x2a4>)
 8003310:	e000      	b.n	8003314 <HAL_ADC_Init+0x160>
 8003312:	4a52      	ldr	r2, [pc, #328]	@ (800345c <HAL_ADC_Init+0x2a8>)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	4619      	mov	r1, r3
 800331a:	4610      	mov	r0, r2
 800331c:	f7ff fd62 	bl	8002de4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003320:	f7ff fd54 	bl	8002dcc <HAL_GetREVID>
 8003324:	4603      	mov	r3, r0
 8003326:	f241 0203 	movw	r2, #4099	@ 0x1003
 800332a:	4293      	cmp	r3, r2
 800332c:	d914      	bls.n	8003358 <HAL_ADC_Init+0x1a4>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	2b10      	cmp	r3, #16
 8003334:	d110      	bne.n	8003358 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	7d5b      	ldrb	r3, [r3, #21]
 800333a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003340:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003346:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	7f1b      	ldrb	r3, [r3, #28]
 800334c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800334e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003350:	f043 030c 	orr.w	r3, r3, #12
 8003354:	61bb      	str	r3, [r7, #24]
 8003356:	e00d      	b.n	8003374 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	7d5b      	ldrb	r3, [r3, #21]
 800335c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003362:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003368:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	7f1b      	ldrb	r3, [r3, #28]
 800336e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	7f1b      	ldrb	r3, [r3, #28]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d106      	bne.n	800338a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	3b01      	subs	r3, #1
 8003382:	045b      	lsls	r3, r3, #17
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4313      	orrs	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338e:	2b00      	cmp	r3, #0
 8003390:	d009      	beq.n	80033a6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003396:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	4b2c      	ldr	r3, [pc, #176]	@ (8003460 <HAL_ADC_Init+0x2ac>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6812      	ldr	r2, [r2, #0]
 80033b4:	69b9      	ldr	r1, [r7, #24]
 80033b6:	430b      	orrs	r3, r1
 80033b8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff fed2 	bl	8003168 <LL_ADC_REG_IsConversionOngoing>
 80033c4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff fedf 	bl	800318e <LL_ADC_INJ_IsConversionOngoing>
 80033d0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d15f      	bne.n	8003498 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d15c      	bne.n	8003498 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	7d1b      	ldrb	r3, [r3, #20]
 80033e2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003464 <HAL_ADC_Init+0x2b0>)
 80033f4:	4013      	ands	r3, r2
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6812      	ldr	r2, [r2, #0]
 80033fa:	69b9      	ldr	r1, [r7, #24]
 80033fc:	430b      	orrs	r3, r1
 80033fe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003406:	2b01      	cmp	r3, #1
 8003408:	d130      	bne.n	800346c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691a      	ldr	r2, [r3, #16]
 8003416:	4b14      	ldr	r3, [pc, #80]	@ (8003468 <HAL_ADC_Init+0x2b4>)
 8003418:	4013      	ands	r3, r2
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800341e:	3a01      	subs	r2, #1
 8003420:	0411      	lsls	r1, r2, #16
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003426:	4311      	orrs	r1, r2
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800342c:	4311      	orrs	r1, r2
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003432:	430a      	orrs	r2, r1
 8003434:	431a      	orrs	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0201 	orr.w	r2, r2, #1
 800343e:	611a      	str	r2, [r3, #16]
 8003440:	e01c      	b.n	800347c <HAL_ADC_Init+0x2c8>
 8003442:	bf00      	nop
 8003444:	24000004 	.word	0x24000004
 8003448:	053e2d63 	.word	0x053e2d63
 800344c:	40022000 	.word	0x40022000
 8003450:	40022100 	.word	0x40022100
 8003454:	58026000 	.word	0x58026000
 8003458:	40022300 	.word	0x40022300
 800345c:	58026300 	.word	0x58026300
 8003460:	fff0c003 	.word	0xfff0c003
 8003464:	ffffbffc 	.word	0xffffbffc
 8003468:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691a      	ldr	r2, [r3, #16]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0201 	bic.w	r2, r2, #1
 800347a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fd8c 	bl	8003fb0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d10c      	bne.n	80034ba <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a6:	f023 010f 	bic.w	r1, r3, #15
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	1e5a      	subs	r2, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80034b8:	e007      	b.n	80034ca <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 020f 	bic.w	r2, r2, #15
 80034c8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ce:	f023 0303 	bic.w	r3, r3, #3
 80034d2:	f043 0201 	orr.w	r2, r3, #1
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	655a      	str	r2, [r3, #84]	@ 0x54
 80034da:	e007      	b.n	80034ec <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e0:	f043 0210 	orr.w	r2, r3, #16
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80034ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3724      	adds	r7, #36	@ 0x24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd90      	pop	{r4, r7, pc}
 80034f6:	bf00      	nop

080034f8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a55      	ldr	r2, [pc, #340]	@ (8003660 <HAL_ADC_Start_DMA+0x168>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d004      	beq.n	8003518 <HAL_ADC_Start_DMA+0x20>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a54      	ldr	r2, [pc, #336]	@ (8003664 <HAL_ADC_Start_DMA+0x16c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d101      	bne.n	800351c <HAL_ADC_Start_DMA+0x24>
 8003518:	4b53      	ldr	r3, [pc, #332]	@ (8003668 <HAL_ADC_Start_DMA+0x170>)
 800351a:	e000      	b.n	800351e <HAL_ADC_Start_DMA+0x26>
 800351c:	4b53      	ldr	r3, [pc, #332]	@ (800366c <HAL_ADC_Start_DMA+0x174>)
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff fd8a 	bl	8003038 <LL_ADC_GetMultimode>
 8003524:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff fe1c 	bl	8003168 <LL_ADC_REG_IsConversionOngoing>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	f040 808c 	bne.w	8003650 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800353e:	2b01      	cmp	r3, #1
 8003540:	d101      	bne.n	8003546 <HAL_ADC_Start_DMA+0x4e>
 8003542:	2302      	movs	r3, #2
 8003544:	e087      	b.n	8003656 <HAL_ADC_Start_DMA+0x15e>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d005      	beq.n	8003560 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	2b05      	cmp	r3, #5
 8003558:	d002      	beq.n	8003560 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	2b09      	cmp	r3, #9
 800355e:	d170      	bne.n	8003642 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 fc07 	bl	8003d74 <ADC_Enable>
 8003566:	4603      	mov	r3, r0
 8003568:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800356a:	7dfb      	ldrb	r3, [r7, #23]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d163      	bne.n	8003638 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003574:	4b3e      	ldr	r3, [pc, #248]	@ (8003670 <HAL_ADC_Start_DMA+0x178>)
 8003576:	4013      	ands	r3, r2
 8003578:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a37      	ldr	r2, [pc, #220]	@ (8003664 <HAL_ADC_Start_DMA+0x16c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d002      	beq.n	8003590 <HAL_ADC_Start_DMA+0x98>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	e000      	b.n	8003592 <HAL_ADC_Start_DMA+0x9a>
 8003590:	4b33      	ldr	r3, [pc, #204]	@ (8003660 <HAL_ADC_Start_DMA+0x168>)
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	6812      	ldr	r2, [r2, #0]
 8003596:	4293      	cmp	r3, r2
 8003598:	d002      	beq.n	80035a0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d105      	bne.n	80035ac <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d006      	beq.n	80035c6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035bc:	f023 0206 	bic.w	r2, r3, #6
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80035c4:	e002      	b.n	80035cc <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035d0:	4a28      	ldr	r2, [pc, #160]	@ (8003674 <HAL_ADC_Start_DMA+0x17c>)
 80035d2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035d8:	4a27      	ldr	r2, [pc, #156]	@ (8003678 <HAL_ADC_Start_DMA+0x180>)
 80035da:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035e0:	4a26      	ldr	r2, [pc, #152]	@ (800367c <HAL_ADC_Start_DMA+0x184>)
 80035e2:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	221c      	movs	r2, #28
 80035ea:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0210 	orr.w	r2, r2, #16
 8003602:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360c:	4619      	mov	r1, r3
 800360e:	4610      	mov	r0, r2
 8003610:	f7ff fcaf 	bl	8002f72 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3340      	adds	r3, #64	@ 0x40
 800361e:	4619      	mov	r1, r3
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f001 fb10 	bl	8004c48 <HAL_DMA_Start_IT>
 8003628:	4603      	mov	r3, r0
 800362a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff fd85 	bl	8003140 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003636:	e00d      	b.n	8003654 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8003640:	e008      	b.n	8003654 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800364e:	e001      	b.n	8003654 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003650:	2302      	movs	r3, #2
 8003652:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003654:	7dfb      	ldrb	r3, [r7, #23]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40022000 	.word	0x40022000
 8003664:	40022100 	.word	0x40022100
 8003668:	40022300 	.word	0x40022300
 800366c:	58026300 	.word	0x58026300
 8003670:	fffff0fe 	.word	0xfffff0fe
 8003674:	08003e89 	.word	0x08003e89
 8003678:	08003f61 	.word	0x08003f61
 800367c:	08003f7d 	.word	0x08003f7d

08003680 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80036bc:	b590      	push	{r4, r7, lr}
 80036be:	b0a1      	sub	sp, #132	@ 0x84
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80036cc:	2300      	movs	r3, #0
 80036ce:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	4a65      	ldr	r2, [pc, #404]	@ (800386c <HAL_ADC_ConfigChannel+0x1b0>)
 80036d6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <HAL_ADC_ConfigChannel+0x2a>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e32e      	b.n	8003d44 <HAL_ADC_ConfigChannel+0x688>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff fd38 	bl	8003168 <LL_ADC_REG_IsConversionOngoing>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f040 8313 	bne.w	8003d26 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	db2c      	blt.n	8003762 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003710:	2b00      	cmp	r3, #0
 8003712:	d108      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x6a>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	0e9b      	lsrs	r3, r3, #26
 800371a:	f003 031f 	and.w	r3, r3, #31
 800371e:	2201      	movs	r2, #1
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	e016      	b.n	8003754 <HAL_ADC_ConfigChannel+0x98>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800372e:	fa93 f3a3 	rbit	r3, r3
 8003732:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003734:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003736:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003738:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800373e:	2320      	movs	r3, #32
 8003740:	e003      	b.n	800374a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003742:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003744:	fab3 f383 	clz	r3, r3
 8003748:	b2db      	uxtb	r3, r3
 800374a:	f003 031f 	and.w	r3, r3, #31
 800374e:	2201      	movs	r2, #1
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	69d1      	ldr	r1, [r2, #28]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	430b      	orrs	r3, r1
 8003760:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	6859      	ldr	r1, [r3, #4]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	f7ff fbd3 	bl	8002f1a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff fcf5 	bl	8003168 <LL_ADC_REG_IsConversionOngoing>
 800377e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff fd02 	bl	800318e <LL_ADC_INJ_IsConversionOngoing>
 800378a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800378c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800378e:	2b00      	cmp	r3, #0
 8003790:	f040 80b8 	bne.w	8003904 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003794:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003796:	2b00      	cmp	r3, #0
 8003798:	f040 80b4 	bne.w	8003904 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6818      	ldr	r0, [r3, #0]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	6819      	ldr	r1, [r3, #0]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	461a      	mov	r2, r3
 80037aa:	f7ff fbf5 	bl	8002f98 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80037ae:	4b30      	ldr	r3, [pc, #192]	@ (8003870 <HAL_ADC_ConfigChannel+0x1b4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80037b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037ba:	d10b      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x118>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	695a      	ldr	r2, [r3, #20]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	089b      	lsrs	r3, r3, #2
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	e01d      	b.n	8003810 <HAL_ADC_ConfigChannel+0x154>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f003 0310 	and.w	r3, r3, #16
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10b      	bne.n	80037fa <HAL_ADC_ConfigChannel+0x13e>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	695a      	ldr	r2, [r3, #20]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	089b      	lsrs	r3, r3, #2
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	e00a      	b.n	8003810 <HAL_ADC_ConfigChannel+0x154>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	695a      	ldr	r2, [r3, #20]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	089b      	lsrs	r3, r3, #2
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	2b04      	cmp	r3, #4
 8003818:	d02c      	beq.n	8003874 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6919      	ldr	r1, [r3, #16]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003828:	f7ff fb10 	bl	8002e4c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6818      	ldr	r0, [r3, #0]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	6919      	ldr	r1, [r3, #16]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	7e5b      	ldrb	r3, [r3, #25]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d102      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x186>
 800383c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003840:	e000      	b.n	8003844 <HAL_ADC_ConfigChannel+0x188>
 8003842:	2300      	movs	r3, #0
 8003844:	461a      	mov	r2, r3
 8003846:	f7ff fb3a 	bl	8002ebe <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6919      	ldr	r1, [r3, #16]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	7e1b      	ldrb	r3, [r3, #24]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d102      	bne.n	8003860 <HAL_ADC_ConfigChannel+0x1a4>
 800385a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800385e:	e000      	b.n	8003862 <HAL_ADC_ConfigChannel+0x1a6>
 8003860:	2300      	movs	r3, #0
 8003862:	461a      	mov	r2, r3
 8003864:	f7ff fb12 	bl	8002e8c <LL_ADC_SetDataRightShift>
 8003868:	e04c      	b.n	8003904 <HAL_ADC_ConfigChannel+0x248>
 800386a:	bf00      	nop
 800386c:	47ff0000 	.word	0x47ff0000
 8003870:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800387a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	069b      	lsls	r3, r3, #26
 8003884:	429a      	cmp	r2, r3
 8003886:	d107      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003896:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800389e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	069b      	lsls	r3, r3, #26
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d107      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80038ba:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	069b      	lsls	r3, r3, #26
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d107      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80038de:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	069b      	lsls	r3, r3, #26
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d107      	bne.n	8003904 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003902:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff fc05 	bl	8003118 <LL_ADC_IsEnabled>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	f040 8211 	bne.w	8003d38 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6818      	ldr	r0, [r3, #0]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	6819      	ldr	r1, [r3, #0]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	461a      	mov	r2, r3
 8003924:	f7ff fb64 	bl	8002ff0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	4aa1      	ldr	r2, [pc, #644]	@ (8003bb4 <HAL_ADC_ConfigChannel+0x4f8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	f040 812e 	bne.w	8003b90 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10b      	bne.n	800395c <HAL_ADC_ConfigChannel+0x2a0>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	0e9b      	lsrs	r3, r3, #26
 800394a:	3301      	adds	r3, #1
 800394c:	f003 031f 	and.w	r3, r3, #31
 8003950:	2b09      	cmp	r3, #9
 8003952:	bf94      	ite	ls
 8003954:	2301      	movls	r3, #1
 8003956:	2300      	movhi	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	e019      	b.n	8003990 <HAL_ADC_ConfigChannel+0x2d4>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003962:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003964:	fa93 f3a3 	rbit	r3, r3
 8003968:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800396a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800396c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800396e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003974:	2320      	movs	r3, #32
 8003976:	e003      	b.n	8003980 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003978:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800397a:	fab3 f383 	clz	r3, r3
 800397e:	b2db      	uxtb	r3, r3
 8003980:	3301      	adds	r3, #1
 8003982:	f003 031f 	and.w	r3, r3, #31
 8003986:	2b09      	cmp	r3, #9
 8003988:	bf94      	ite	ls
 800398a:	2301      	movls	r3, #1
 800398c:	2300      	movhi	r3, #0
 800398e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003990:	2b00      	cmp	r3, #0
 8003992:	d079      	beq.n	8003a88 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800399c:	2b00      	cmp	r3, #0
 800399e:	d107      	bne.n	80039b0 <HAL_ADC_ConfigChannel+0x2f4>
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	0e9b      	lsrs	r3, r3, #26
 80039a6:	3301      	adds	r3, #1
 80039a8:	069b      	lsls	r3, r3, #26
 80039aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039ae:	e015      	b.n	80039dc <HAL_ADC_ConfigChannel+0x320>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039b8:	fa93 f3a3 	rbit	r3, r3
 80039bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80039be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039c0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80039c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80039c8:	2320      	movs	r3, #32
 80039ca:	e003      	b.n	80039d4 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80039cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039ce:	fab3 f383 	clz	r3, r3
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	3301      	adds	r3, #1
 80039d6:	069b      	lsls	r3, r3, #26
 80039d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d109      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x340>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	0e9b      	lsrs	r3, r3, #26
 80039ee:	3301      	adds	r3, #1
 80039f0:	f003 031f 	and.w	r3, r3, #31
 80039f4:	2101      	movs	r1, #1
 80039f6:	fa01 f303 	lsl.w	r3, r1, r3
 80039fa:	e017      	b.n	8003a2c <HAL_ADC_ConfigChannel+0x370>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a04:	fa93 f3a3 	rbit	r3, r3
 8003a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003a0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a0c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003a0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003a14:	2320      	movs	r3, #32
 8003a16:	e003      	b.n	8003a20 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003a18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a1a:	fab3 f383 	clz	r3, r3
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	3301      	adds	r3, #1
 8003a22:	f003 031f 	and.w	r3, r3, #31
 8003a26:	2101      	movs	r1, #1
 8003a28:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2c:	ea42 0103 	orr.w	r1, r2, r3
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10a      	bne.n	8003a52 <HAL_ADC_ConfigChannel+0x396>
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	0e9b      	lsrs	r3, r3, #26
 8003a42:	3301      	adds	r3, #1
 8003a44:	f003 021f 	and.w	r2, r3, #31
 8003a48:	4613      	mov	r3, r2
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	4413      	add	r3, r2
 8003a4e:	051b      	lsls	r3, r3, #20
 8003a50:	e018      	b.n	8003a84 <HAL_ADC_ConfigChannel+0x3c8>
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a5a:	fa93 f3a3 	rbit	r3, r3
 8003a5e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a62:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003a6a:	2320      	movs	r3, #32
 8003a6c:	e003      	b.n	8003a76 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a70:	fab3 f383 	clz	r3, r3
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	3301      	adds	r3, #1
 8003a78:	f003 021f 	and.w	r2, r3, #31
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	4413      	add	r3, r2
 8003a82:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a84:	430b      	orrs	r3, r1
 8003a86:	e07e      	b.n	8003b86 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d107      	bne.n	8003aa4 <HAL_ADC_ConfigChannel+0x3e8>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	0e9b      	lsrs	r3, r3, #26
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	069b      	lsls	r3, r3, #26
 8003a9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003aa2:	e015      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0x414>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aac:	fa93 f3a3 	rbit	r3, r3
 8003ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003abc:	2320      	movs	r3, #32
 8003abe:	e003      	b.n	8003ac8 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac2:	fab3 f383 	clz	r3, r3
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	3301      	adds	r3, #1
 8003aca:	069b      	lsls	r3, r3, #26
 8003acc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d109      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x434>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	0e9b      	lsrs	r3, r3, #26
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	f003 031f 	and.w	r3, r3, #31
 8003ae8:	2101      	movs	r1, #1
 8003aea:	fa01 f303 	lsl.w	r3, r1, r3
 8003aee:	e017      	b.n	8003b20 <HAL_ADC_ConfigChannel+0x464>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	fa93 f3a3 	rbit	r3, r3
 8003afc:	61bb      	str	r3, [r7, #24]
  return result;
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003b08:	2320      	movs	r3, #32
 8003b0a:	e003      	b.n	8003b14 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	fab3 f383 	clz	r3, r3
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	3301      	adds	r3, #1
 8003b16:	f003 031f 	and.w	r3, r3, #31
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b20:	ea42 0103 	orr.w	r1, r2, r3
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10d      	bne.n	8003b4c <HAL_ADC_ConfigChannel+0x490>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	0e9b      	lsrs	r3, r3, #26
 8003b36:	3301      	adds	r3, #1
 8003b38:	f003 021f 	and.w	r2, r3, #31
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	4413      	add	r3, r2
 8003b42:	3b1e      	subs	r3, #30
 8003b44:	051b      	lsls	r3, r3, #20
 8003b46:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b4a:	e01b      	b.n	8003b84 <HAL_ADC_ConfigChannel+0x4c8>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	fa93 f3a3 	rbit	r3, r3
 8003b58:	60fb      	str	r3, [r7, #12]
  return result;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003b64:	2320      	movs	r3, #32
 8003b66:	e003      	b.n	8003b70 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	fab3 f383 	clz	r3, r3
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	3301      	adds	r3, #1
 8003b72:	f003 021f 	and.w	r2, r3, #31
 8003b76:	4613      	mov	r3, r2
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3b1e      	subs	r3, #30
 8003b7e:	051b      	lsls	r3, r3, #20
 8003b80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b84:	430b      	orrs	r3, r1
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	6892      	ldr	r2, [r2, #8]
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	f7ff fa04 	bl	8002f98 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f280 80cf 	bge.w	8003d38 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a06      	ldr	r2, [pc, #24]	@ (8003bb8 <HAL_ADC_ConfigChannel+0x4fc>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d004      	beq.n	8003bae <HAL_ADC_ConfigChannel+0x4f2>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a04      	ldr	r2, [pc, #16]	@ (8003bbc <HAL_ADC_ConfigChannel+0x500>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d10a      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x508>
 8003bae:	4b04      	ldr	r3, [pc, #16]	@ (8003bc0 <HAL_ADC_ConfigChannel+0x504>)
 8003bb0:	e009      	b.n	8003bc6 <HAL_ADC_ConfigChannel+0x50a>
 8003bb2:	bf00      	nop
 8003bb4:	47ff0000 	.word	0x47ff0000
 8003bb8:	40022000 	.word	0x40022000
 8003bbc:	40022100 	.word	0x40022100
 8003bc0:	40022300 	.word	0x40022300
 8003bc4:	4b61      	ldr	r3, [pc, #388]	@ (8003d4c <HAL_ADC_ConfigChannel+0x690>)
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff f932 	bl	8002e30 <LL_ADC_GetCommonPathInternalCh>
 8003bcc:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a5f      	ldr	r2, [pc, #380]	@ (8003d50 <HAL_ADC_ConfigChannel+0x694>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d004      	beq.n	8003be2 <HAL_ADC_ConfigChannel+0x526>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a5d      	ldr	r2, [pc, #372]	@ (8003d54 <HAL_ADC_ConfigChannel+0x698>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d10e      	bne.n	8003c00 <HAL_ADC_ConfigChannel+0x544>
 8003be2:	485b      	ldr	r0, [pc, #364]	@ (8003d50 <HAL_ADC_ConfigChannel+0x694>)
 8003be4:	f7ff fa98 	bl	8003118 <LL_ADC_IsEnabled>
 8003be8:	4604      	mov	r4, r0
 8003bea:	485a      	ldr	r0, [pc, #360]	@ (8003d54 <HAL_ADC_ConfigChannel+0x698>)
 8003bec:	f7ff fa94 	bl	8003118 <LL_ADC_IsEnabled>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	4323      	orrs	r3, r4
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	bf0c      	ite	eq
 8003bf8:	2301      	moveq	r3, #1
 8003bfa:	2300      	movne	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	e008      	b.n	8003c12 <HAL_ADC_ConfigChannel+0x556>
 8003c00:	4855      	ldr	r0, [pc, #340]	@ (8003d58 <HAL_ADC_ConfigChannel+0x69c>)
 8003c02:	f7ff fa89 	bl	8003118 <LL_ADC_IsEnabled>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	bf0c      	ite	eq
 8003c0c:	2301      	moveq	r3, #1
 8003c0e:	2300      	movne	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d07d      	beq.n	8003d12 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a50      	ldr	r2, [pc, #320]	@ (8003d5c <HAL_ADC_ConfigChannel+0x6a0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d130      	bne.n	8003c82 <HAL_ADC_ConfigChannel+0x5c6>
 8003c20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d12b      	bne.n	8003c82 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a4a      	ldr	r2, [pc, #296]	@ (8003d58 <HAL_ADC_ConfigChannel+0x69c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	f040 8081 	bne.w	8003d38 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a45      	ldr	r2, [pc, #276]	@ (8003d50 <HAL_ADC_ConfigChannel+0x694>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d004      	beq.n	8003c4a <HAL_ADC_ConfigChannel+0x58e>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a43      	ldr	r2, [pc, #268]	@ (8003d54 <HAL_ADC_ConfigChannel+0x698>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d101      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x592>
 8003c4a:	4a45      	ldr	r2, [pc, #276]	@ (8003d60 <HAL_ADC_ConfigChannel+0x6a4>)
 8003c4c:	e000      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x594>
 8003c4e:	4a3f      	ldr	r2, [pc, #252]	@ (8003d4c <HAL_ADC_ConfigChannel+0x690>)
 8003c50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c52:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c56:	4619      	mov	r1, r3
 8003c58:	4610      	mov	r0, r2
 8003c5a:	f7ff f8d6 	bl	8002e0a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c5e:	4b41      	ldr	r3, [pc, #260]	@ (8003d64 <HAL_ADC_ConfigChannel+0x6a8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	099b      	lsrs	r3, r3, #6
 8003c64:	4a40      	ldr	r2, [pc, #256]	@ (8003d68 <HAL_ADC_ConfigChannel+0x6ac>)
 8003c66:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6a:	099b      	lsrs	r3, r3, #6
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003c72:	e002      	b.n	8003c7a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	3b01      	subs	r3, #1
 8003c78:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1f9      	bne.n	8003c74 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c80:	e05a      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a39      	ldr	r2, [pc, #228]	@ (8003d6c <HAL_ADC_ConfigChannel+0x6b0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d11e      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x60e>
 8003c8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d119      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a2f      	ldr	r2, [pc, #188]	@ (8003d58 <HAL_ADC_ConfigChannel+0x69c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d14b      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a2a      	ldr	r2, [pc, #168]	@ (8003d50 <HAL_ADC_ConfigChannel+0x694>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d004      	beq.n	8003cb4 <HAL_ADC_ConfigChannel+0x5f8>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a29      	ldr	r2, [pc, #164]	@ (8003d54 <HAL_ADC_ConfigChannel+0x698>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d101      	bne.n	8003cb8 <HAL_ADC_ConfigChannel+0x5fc>
 8003cb4:	4a2a      	ldr	r2, [pc, #168]	@ (8003d60 <HAL_ADC_ConfigChannel+0x6a4>)
 8003cb6:	e000      	b.n	8003cba <HAL_ADC_ConfigChannel+0x5fe>
 8003cb8:	4a24      	ldr	r2, [pc, #144]	@ (8003d4c <HAL_ADC_ConfigChannel+0x690>)
 8003cba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cbc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	f7ff f8a1 	bl	8002e0a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cc8:	e036      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a28      	ldr	r2, [pc, #160]	@ (8003d70 <HAL_ADC_ConfigChannel+0x6b4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d131      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x67c>
 8003cd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d12c      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a1d      	ldr	r2, [pc, #116]	@ (8003d58 <HAL_ADC_ConfigChannel+0x69c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d127      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a18      	ldr	r2, [pc, #96]	@ (8003d50 <HAL_ADC_ConfigChannel+0x694>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d004      	beq.n	8003cfc <HAL_ADC_ConfigChannel+0x640>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a17      	ldr	r2, [pc, #92]	@ (8003d54 <HAL_ADC_ConfigChannel+0x698>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d101      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x644>
 8003cfc:	4a18      	ldr	r2, [pc, #96]	@ (8003d60 <HAL_ADC_ConfigChannel+0x6a4>)
 8003cfe:	e000      	b.n	8003d02 <HAL_ADC_ConfigChannel+0x646>
 8003d00:	4a12      	ldr	r2, [pc, #72]	@ (8003d4c <HAL_ADC_ConfigChannel+0x690>)
 8003d02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d04:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	f7ff f87d 	bl	8002e0a <LL_ADC_SetCommonPathInternalCh>
 8003d10:	e012      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d16:	f043 0220 	orr.w	r2, r3, #32
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003d24:	e008      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d2a:	f043 0220 	orr.w	r2, r3, #32
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d40:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3784      	adds	r7, #132	@ 0x84
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd90      	pop	{r4, r7, pc}
 8003d4c:	58026300 	.word	0x58026300
 8003d50:	40022000 	.word	0x40022000
 8003d54:	40022100 	.word	0x40022100
 8003d58:	58026000 	.word	0x58026000
 8003d5c:	cb840000 	.word	0xcb840000
 8003d60:	40022300 	.word	0x40022300
 8003d64:	24000004 	.word	0x24000004
 8003d68:	053e2d63 	.word	0x053e2d63
 8003d6c:	c7520000 	.word	0xc7520000
 8003d70:	cfb80000 	.word	0xcfb80000

08003d74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff f9c9 	bl	8003118 <LL_ADC_IsEnabled>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d16e      	bne.n	8003e6a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	4b38      	ldr	r3, [pc, #224]	@ (8003e74 <ADC_Enable+0x100>)
 8003d94:	4013      	ands	r3, r2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00d      	beq.n	8003db6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d9e:	f043 0210 	orr.w	r2, r3, #16
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003daa:	f043 0201 	orr.w	r2, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e05a      	b.n	8003e6c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff f998 	bl	80030f0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003dc0:	f7fe ffd4 	bl	8002d6c <HAL_GetTick>
 8003dc4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a2b      	ldr	r2, [pc, #172]	@ (8003e78 <ADC_Enable+0x104>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d004      	beq.n	8003dda <ADC_Enable+0x66>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a29      	ldr	r2, [pc, #164]	@ (8003e7c <ADC_Enable+0x108>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d101      	bne.n	8003dde <ADC_Enable+0x6a>
 8003dda:	4b29      	ldr	r3, [pc, #164]	@ (8003e80 <ADC_Enable+0x10c>)
 8003ddc:	e000      	b.n	8003de0 <ADC_Enable+0x6c>
 8003dde:	4b29      	ldr	r3, [pc, #164]	@ (8003e84 <ADC_Enable+0x110>)
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff f929 	bl	8003038 <LL_ADC_GetMultimode>
 8003de6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a23      	ldr	r2, [pc, #140]	@ (8003e7c <ADC_Enable+0x108>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d002      	beq.n	8003df8 <ADC_Enable+0x84>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	e000      	b.n	8003dfa <ADC_Enable+0x86>
 8003df8:	4b1f      	ldr	r3, [pc, #124]	@ (8003e78 <ADC_Enable+0x104>)
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6812      	ldr	r2, [r2, #0]
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d02c      	beq.n	8003e5c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d130      	bne.n	8003e6a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e08:	e028      	b.n	8003e5c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff f982 	bl	8003118 <LL_ADC_IsEnabled>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d104      	bne.n	8003e24 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff f966 	bl	80030f0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e24:	f7fe ffa2 	bl	8002d6c <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d914      	bls.n	8003e5c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d00d      	beq.n	8003e5c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e44:	f043 0210 	orr.w	r2, r3, #16
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e50:	f043 0201 	orr.w	r2, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e007      	b.n	8003e6c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d1cf      	bne.n	8003e0a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	8000003f 	.word	0x8000003f
 8003e78:	40022000 	.word	0x40022000
 8003e7c:	40022100 	.word	0x40022100
 8003e80:	40022300 	.word	0x40022300
 8003e84:	58026300 	.word	0x58026300

08003e88 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e94:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e9a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d14b      	bne.n	8003f3a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d021      	beq.n	8003f00 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff f817 	bl	8002ef4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d032      	beq.n	8003f32 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d12b      	bne.n	8003f32 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ede:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d11f      	bne.n	8003f32 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef6:	f043 0201 	orr.w	r2, r3, #1
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	655a      	str	r2, [r3, #84]	@ 0x54
 8003efe:	e018      	b.n	8003f32 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d111      	bne.n	8003f32 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f12:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d105      	bne.n	8003f32 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2a:	f043 0201 	orr.w	r2, r3, #1
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f7ff fba4 	bl	8003680 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003f38:	e00e      	b.n	8003f58 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f3e:	f003 0310 	and.w	r3, r3, #16
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f7ff fbae 	bl	80036a8 <HAL_ADC_ErrorCallback>
}
 8003f4c:	e004      	b.n	8003f58 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	4798      	blx	r3
}
 8003f58:	bf00      	nop
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f7ff fb90 	bl	8003694 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f74:	bf00      	nop
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f8e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f9a:	f043 0204 	orr.w	r2, r3, #4
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f7ff fb80 	bl	80036a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fa8:	bf00      	nop
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a7a      	ldr	r2, [pc, #488]	@ (80041a8 <ADC_ConfigureBoostMode+0x1f8>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d004      	beq.n	8003fcc <ADC_ConfigureBoostMode+0x1c>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a79      	ldr	r2, [pc, #484]	@ (80041ac <ADC_ConfigureBoostMode+0x1fc>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d109      	bne.n	8003fe0 <ADC_ConfigureBoostMode+0x30>
 8003fcc:	4b78      	ldr	r3, [pc, #480]	@ (80041b0 <ADC_ConfigureBoostMode+0x200>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	bf14      	ite	ne
 8003fd8:	2301      	movne	r3, #1
 8003fda:	2300      	moveq	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	e008      	b.n	8003ff2 <ADC_ConfigureBoostMode+0x42>
 8003fe0:	4b74      	ldr	r3, [pc, #464]	@ (80041b4 <ADC_ConfigureBoostMode+0x204>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	bf14      	ite	ne
 8003fec:	2301      	movne	r3, #1
 8003fee:	2300      	moveq	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d01c      	beq.n	8004030 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003ff6:	f004 fabb 	bl	8008570 <HAL_RCC_GetHCLKFreq>
 8003ffa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004004:	d010      	beq.n	8004028 <ADC_ConfigureBoostMode+0x78>
 8004006:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800400a:	d873      	bhi.n	80040f4 <ADC_ConfigureBoostMode+0x144>
 800400c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004010:	d002      	beq.n	8004018 <ADC_ConfigureBoostMode+0x68>
 8004012:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004016:	d16d      	bne.n	80040f4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	0c1b      	lsrs	r3, r3, #16
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	fbb2 f3f3 	udiv	r3, r2, r3
 8004024:	60fb      	str	r3, [r7, #12]
        break;
 8004026:	e068      	b.n	80040fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	089b      	lsrs	r3, r3, #2
 800402c:	60fb      	str	r3, [r7, #12]
        break;
 800402e:	e064      	b.n	80040fa <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004030:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004034:	f04f 0100 	mov.w	r1, #0
 8004038:	f005 fd42 	bl	8009ac0 <HAL_RCCEx_GetPeriphCLKFreq>
 800403c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004046:	d051      	beq.n	80040ec <ADC_ConfigureBoostMode+0x13c>
 8004048:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800404c:	d854      	bhi.n	80040f8 <ADC_ConfigureBoostMode+0x148>
 800404e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004052:	d047      	beq.n	80040e4 <ADC_ConfigureBoostMode+0x134>
 8004054:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004058:	d84e      	bhi.n	80040f8 <ADC_ConfigureBoostMode+0x148>
 800405a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800405e:	d03d      	beq.n	80040dc <ADC_ConfigureBoostMode+0x12c>
 8004060:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004064:	d848      	bhi.n	80040f8 <ADC_ConfigureBoostMode+0x148>
 8004066:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800406a:	d033      	beq.n	80040d4 <ADC_ConfigureBoostMode+0x124>
 800406c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004070:	d842      	bhi.n	80040f8 <ADC_ConfigureBoostMode+0x148>
 8004072:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004076:	d029      	beq.n	80040cc <ADC_ConfigureBoostMode+0x11c>
 8004078:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800407c:	d83c      	bhi.n	80040f8 <ADC_ConfigureBoostMode+0x148>
 800407e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004082:	d01a      	beq.n	80040ba <ADC_ConfigureBoostMode+0x10a>
 8004084:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004088:	d836      	bhi.n	80040f8 <ADC_ConfigureBoostMode+0x148>
 800408a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800408e:	d014      	beq.n	80040ba <ADC_ConfigureBoostMode+0x10a>
 8004090:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004094:	d830      	bhi.n	80040f8 <ADC_ConfigureBoostMode+0x148>
 8004096:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800409a:	d00e      	beq.n	80040ba <ADC_ConfigureBoostMode+0x10a>
 800409c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040a0:	d82a      	bhi.n	80040f8 <ADC_ConfigureBoostMode+0x148>
 80040a2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80040a6:	d008      	beq.n	80040ba <ADC_ConfigureBoostMode+0x10a>
 80040a8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80040ac:	d824      	bhi.n	80040f8 <ADC_ConfigureBoostMode+0x148>
 80040ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040b2:	d002      	beq.n	80040ba <ADC_ConfigureBoostMode+0x10a>
 80040b4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80040b8:	d11e      	bne.n	80040f8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	0c9b      	lsrs	r3, r3, #18
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c8:	60fb      	str	r3, [r7, #12]
        break;
 80040ca:	e016      	b.n	80040fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	091b      	lsrs	r3, r3, #4
 80040d0:	60fb      	str	r3, [r7, #12]
        break;
 80040d2:	e012      	b.n	80040fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	095b      	lsrs	r3, r3, #5
 80040d8:	60fb      	str	r3, [r7, #12]
        break;
 80040da:	e00e      	b.n	80040fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	099b      	lsrs	r3, r3, #6
 80040e0:	60fb      	str	r3, [r7, #12]
        break;
 80040e2:	e00a      	b.n	80040fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	09db      	lsrs	r3, r3, #7
 80040e8:	60fb      	str	r3, [r7, #12]
        break;
 80040ea:	e006      	b.n	80040fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	0a1b      	lsrs	r3, r3, #8
 80040f0:	60fb      	str	r3, [r7, #12]
        break;
 80040f2:	e002      	b.n	80040fa <ADC_ConfigureBoostMode+0x14a>
        break;
 80040f4:	bf00      	nop
 80040f6:	e000      	b.n	80040fa <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80040f8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80040fa:	f7fe fe67 	bl	8002dcc <HAL_GetREVID>
 80040fe:	4603      	mov	r3, r0
 8004100:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004104:	4293      	cmp	r3, r2
 8004106:	d815      	bhi.n	8004134 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4a2b      	ldr	r2, [pc, #172]	@ (80041b8 <ADC_ConfigureBoostMode+0x208>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d908      	bls.n	8004122 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689a      	ldr	r2, [r3, #8]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800411e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004120:	e03e      	b.n	80041a0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004130:	609a      	str	r2, [r3, #8]
}
 8004132:	e035      	b.n	80041a0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	085b      	lsrs	r3, r3, #1
 8004138:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4a1f      	ldr	r2, [pc, #124]	@ (80041bc <ADC_ConfigureBoostMode+0x20c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d808      	bhi.n	8004154 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004150:	609a      	str	r2, [r3, #8]
}
 8004152:	e025      	b.n	80041a0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4a1a      	ldr	r2, [pc, #104]	@ (80041c0 <ADC_ConfigureBoostMode+0x210>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d80a      	bhi.n	8004172 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800416e:	609a      	str	r2, [r3, #8]
}
 8004170:	e016      	b.n	80041a0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	4a13      	ldr	r2, [pc, #76]	@ (80041c4 <ADC_ConfigureBoostMode+0x214>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d80a      	bhi.n	8004190 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800418c:	609a      	str	r2, [r3, #8]
}
 800418e:	e007      	b.n	80041a0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800419e:	609a      	str	r2, [r3, #8]
}
 80041a0:	bf00      	nop
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40022000 	.word	0x40022000
 80041ac:	40022100 	.word	0x40022100
 80041b0:	40022300 	.word	0x40022300
 80041b4:	58026300 	.word	0x58026300
 80041b8:	01312d00 	.word	0x01312d00
 80041bc:	005f5e10 	.word	0x005f5e10
 80041c0:	00bebc20 	.word	0x00bebc20
 80041c4:	017d7840 	.word	0x017d7840

080041c8 <LL_ADC_IsEnabled>:
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <LL_ADC_IsEnabled+0x18>
 80041dc:	2301      	movs	r3, #1
 80041de:	e000      	b.n	80041e2 <LL_ADC_IsEnabled+0x1a>
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <LL_ADC_REG_IsConversionOngoing>:
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d101      	bne.n	8004206 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004202:	2301      	movs	r3, #1
 8004204:	e000      	b.n	8004208 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004214:	b590      	push	{r4, r7, lr}
 8004216:	b09f      	sub	sp, #124	@ 0x7c
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800422e:	2302      	movs	r3, #2
 8004230:	e0be      	b.n	80043b0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800423a:	2300      	movs	r3, #0
 800423c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800423e:	2300      	movs	r3, #0
 8004240:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a5c      	ldr	r2, [pc, #368]	@ (80043b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d102      	bne.n	8004252 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800424c:	4b5b      	ldr	r3, [pc, #364]	@ (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800424e:	60bb      	str	r3, [r7, #8]
 8004250:	e001      	b.n	8004256 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004252:	2300      	movs	r3, #0
 8004254:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10b      	bne.n	8004274 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004260:	f043 0220 	orr.w	r2, r3, #32
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e09d      	b.n	80043b0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff ffb9 	bl	80041ee <LL_ADC_REG_IsConversionOngoing>
 800427c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff ffb3 	bl	80041ee <LL_ADC_REG_IsConversionOngoing>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d17f      	bne.n	800438e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800428e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004290:	2b00      	cmp	r3, #0
 8004292:	d17c      	bne.n	800438e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a47      	ldr	r2, [pc, #284]	@ (80043b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d004      	beq.n	80042a8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a46      	ldr	r2, [pc, #280]	@ (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d101      	bne.n	80042ac <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80042a8:	4b45      	ldr	r3, [pc, #276]	@ (80043c0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80042aa:	e000      	b.n	80042ae <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80042ac:	4b45      	ldr	r3, [pc, #276]	@ (80043c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80042ae:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d039      	beq.n	800432c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80042b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	431a      	orrs	r2, r3
 80042c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042c8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a3a      	ldr	r2, [pc, #232]	@ (80043b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d004      	beq.n	80042de <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a38      	ldr	r2, [pc, #224]	@ (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d10e      	bne.n	80042fc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80042de:	4836      	ldr	r0, [pc, #216]	@ (80043b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80042e0:	f7ff ff72 	bl	80041c8 <LL_ADC_IsEnabled>
 80042e4:	4604      	mov	r4, r0
 80042e6:	4835      	ldr	r0, [pc, #212]	@ (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80042e8:	f7ff ff6e 	bl	80041c8 <LL_ADC_IsEnabled>
 80042ec:	4603      	mov	r3, r0
 80042ee:	4323      	orrs	r3, r4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	bf0c      	ite	eq
 80042f4:	2301      	moveq	r3, #1
 80042f6:	2300      	movne	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	e008      	b.n	800430e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80042fc:	4832      	ldr	r0, [pc, #200]	@ (80043c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80042fe:	f7ff ff63 	bl	80041c8 <LL_ADC_IsEnabled>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	bf0c      	ite	eq
 8004308:	2301      	moveq	r3, #1
 800430a:	2300      	movne	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d047      	beq.n	80043a2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004312:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	4b2d      	ldr	r3, [pc, #180]	@ (80043cc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004318:	4013      	ands	r3, r2
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	6811      	ldr	r1, [r2, #0]
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	6892      	ldr	r2, [r2, #8]
 8004322:	430a      	orrs	r2, r1
 8004324:	431a      	orrs	r2, r3
 8004326:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004328:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800432a:	e03a      	b.n	80043a2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800432c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004334:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004336:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1e      	ldr	r2, [pc, #120]	@ (80043b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d004      	beq.n	800434c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a1d      	ldr	r2, [pc, #116]	@ (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d10e      	bne.n	800436a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800434c:	481a      	ldr	r0, [pc, #104]	@ (80043b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800434e:	f7ff ff3b 	bl	80041c8 <LL_ADC_IsEnabled>
 8004352:	4604      	mov	r4, r0
 8004354:	4819      	ldr	r0, [pc, #100]	@ (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004356:	f7ff ff37 	bl	80041c8 <LL_ADC_IsEnabled>
 800435a:	4603      	mov	r3, r0
 800435c:	4323      	orrs	r3, r4
 800435e:	2b00      	cmp	r3, #0
 8004360:	bf0c      	ite	eq
 8004362:	2301      	moveq	r3, #1
 8004364:	2300      	movne	r3, #0
 8004366:	b2db      	uxtb	r3, r3
 8004368:	e008      	b.n	800437c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800436a:	4817      	ldr	r0, [pc, #92]	@ (80043c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800436c:	f7ff ff2c 	bl	80041c8 <LL_ADC_IsEnabled>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	bf0c      	ite	eq
 8004376:	2301      	moveq	r3, #1
 8004378:	2300      	movne	r3, #0
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d010      	beq.n	80043a2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004380:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	4b11      	ldr	r3, [pc, #68]	@ (80043cc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004386:	4013      	ands	r3, r2
 8004388:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800438a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800438c:	e009      	b.n	80043a2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004392:	f043 0220 	orr.w	r2, r3, #32
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80043a0:	e000      	b.n	80043a4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043a2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80043ac:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	377c      	adds	r7, #124	@ 0x7c
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd90      	pop	{r4, r7, pc}
 80043b8:	40022000 	.word	0x40022000
 80043bc:	40022100 	.word	0x40022100
 80043c0:	40022300 	.word	0x40022300
 80043c4:	58026300 	.word	0x58026300
 80043c8:	58026000 	.word	0x58026000
 80043cc:	fffff0e0 	.word	0xfffff0e0

080043d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004410 <__NVIC_SetPriorityGrouping+0x40>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80043ec:	4013      	ands	r3, r2
 80043ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80043f8:	4b06      	ldr	r3, [pc, #24]	@ (8004414 <__NVIC_SetPriorityGrouping+0x44>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043fe:	4a04      	ldr	r2, [pc, #16]	@ (8004410 <__NVIC_SetPriorityGrouping+0x40>)
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	60d3      	str	r3, [r2, #12]
}
 8004404:	bf00      	nop
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	e000ed00 	.word	0xe000ed00
 8004414:	05fa0000 	.word	0x05fa0000

08004418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800441c:	4b04      	ldr	r3, [pc, #16]	@ (8004430 <__NVIC_GetPriorityGrouping+0x18>)
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	0a1b      	lsrs	r3, r3, #8
 8004422:	f003 0307 	and.w	r3, r3, #7
}
 8004426:	4618      	mov	r0, r3
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	e000ed00 	.word	0xe000ed00

08004434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	4603      	mov	r3, r0
 800443c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800443e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004442:	2b00      	cmp	r3, #0
 8004444:	db0b      	blt.n	800445e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004446:	88fb      	ldrh	r3, [r7, #6]
 8004448:	f003 021f 	and.w	r2, r3, #31
 800444c:	4907      	ldr	r1, [pc, #28]	@ (800446c <__NVIC_EnableIRQ+0x38>)
 800444e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	2001      	movs	r0, #1
 8004456:	fa00 f202 	lsl.w	r2, r0, r2
 800445a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	e000e100 	.word	0xe000e100

08004470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	4603      	mov	r3, r0
 8004478:	6039      	str	r1, [r7, #0]
 800447a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800447c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004480:	2b00      	cmp	r3, #0
 8004482:	db0a      	blt.n	800449a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	b2da      	uxtb	r2, r3
 8004488:	490c      	ldr	r1, [pc, #48]	@ (80044bc <__NVIC_SetPriority+0x4c>)
 800448a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800448e:	0112      	lsls	r2, r2, #4
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	440b      	add	r3, r1
 8004494:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004498:	e00a      	b.n	80044b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	b2da      	uxtb	r2, r3
 800449e:	4908      	ldr	r1, [pc, #32]	@ (80044c0 <__NVIC_SetPriority+0x50>)
 80044a0:	88fb      	ldrh	r3, [r7, #6]
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	3b04      	subs	r3, #4
 80044a8:	0112      	lsls	r2, r2, #4
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	440b      	add	r3, r1
 80044ae:	761a      	strb	r2, [r3, #24]
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	e000e100 	.word	0xe000e100
 80044c0:	e000ed00 	.word	0xe000ed00

080044c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b089      	sub	sp, #36	@ 0x24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	f1c3 0307 	rsb	r3, r3, #7
 80044de:	2b04      	cmp	r3, #4
 80044e0:	bf28      	it	cs
 80044e2:	2304      	movcs	r3, #4
 80044e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	3304      	adds	r3, #4
 80044ea:	2b06      	cmp	r3, #6
 80044ec:	d902      	bls.n	80044f4 <NVIC_EncodePriority+0x30>
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	3b03      	subs	r3, #3
 80044f2:	e000      	b.n	80044f6 <NVIC_EncodePriority+0x32>
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	43da      	mvns	r2, r3
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	401a      	ands	r2, r3
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800450c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	fa01 f303 	lsl.w	r3, r1, r3
 8004516:	43d9      	mvns	r1, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800451c:	4313      	orrs	r3, r2
         );
}
 800451e:	4618      	mov	r0, r3
 8004520:	3724      	adds	r7, #36	@ 0x24
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b082      	sub	sp, #8
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff ff4c 	bl	80043d0 <__NVIC_SetPriorityGrouping>
}
 8004538:	bf00      	nop
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800454e:	f7ff ff63 	bl	8004418 <__NVIC_GetPriorityGrouping>
 8004552:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	68b9      	ldr	r1, [r7, #8]
 8004558:	6978      	ldr	r0, [r7, #20]
 800455a:	f7ff ffb3 	bl	80044c4 <NVIC_EncodePriority>
 800455e:	4602      	mov	r2, r0
 8004560:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004564:	4611      	mov	r1, r2
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff ff82 	bl	8004470 <__NVIC_SetPriority>
}
 800456c:	bf00      	nop
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	4603      	mov	r3, r0
 800457c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800457e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff ff56 	bl	8004434 <__NVIC_EnableIRQ>
}
 8004588:	bf00      	nop
 800458a:	3708      	adds	r7, #8
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004598:	f7fe fbe8 	bl	8002d6c <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e316      	b.n	8004bd6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a66      	ldr	r2, [pc, #408]	@ (8004748 <HAL_DMA_Init+0x1b8>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d04a      	beq.n	8004648 <HAL_DMA_Init+0xb8>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a65      	ldr	r2, [pc, #404]	@ (800474c <HAL_DMA_Init+0x1bc>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d045      	beq.n	8004648 <HAL_DMA_Init+0xb8>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a63      	ldr	r2, [pc, #396]	@ (8004750 <HAL_DMA_Init+0x1c0>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d040      	beq.n	8004648 <HAL_DMA_Init+0xb8>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a62      	ldr	r2, [pc, #392]	@ (8004754 <HAL_DMA_Init+0x1c4>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d03b      	beq.n	8004648 <HAL_DMA_Init+0xb8>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a60      	ldr	r2, [pc, #384]	@ (8004758 <HAL_DMA_Init+0x1c8>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d036      	beq.n	8004648 <HAL_DMA_Init+0xb8>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a5f      	ldr	r2, [pc, #380]	@ (800475c <HAL_DMA_Init+0x1cc>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d031      	beq.n	8004648 <HAL_DMA_Init+0xb8>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a5d      	ldr	r2, [pc, #372]	@ (8004760 <HAL_DMA_Init+0x1d0>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d02c      	beq.n	8004648 <HAL_DMA_Init+0xb8>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a5c      	ldr	r2, [pc, #368]	@ (8004764 <HAL_DMA_Init+0x1d4>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d027      	beq.n	8004648 <HAL_DMA_Init+0xb8>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a5a      	ldr	r2, [pc, #360]	@ (8004768 <HAL_DMA_Init+0x1d8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d022      	beq.n	8004648 <HAL_DMA_Init+0xb8>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a59      	ldr	r2, [pc, #356]	@ (800476c <HAL_DMA_Init+0x1dc>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d01d      	beq.n	8004648 <HAL_DMA_Init+0xb8>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a57      	ldr	r2, [pc, #348]	@ (8004770 <HAL_DMA_Init+0x1e0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d018      	beq.n	8004648 <HAL_DMA_Init+0xb8>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a56      	ldr	r2, [pc, #344]	@ (8004774 <HAL_DMA_Init+0x1e4>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d013      	beq.n	8004648 <HAL_DMA_Init+0xb8>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a54      	ldr	r2, [pc, #336]	@ (8004778 <HAL_DMA_Init+0x1e8>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d00e      	beq.n	8004648 <HAL_DMA_Init+0xb8>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a53      	ldr	r2, [pc, #332]	@ (800477c <HAL_DMA_Init+0x1ec>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d009      	beq.n	8004648 <HAL_DMA_Init+0xb8>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a51      	ldr	r2, [pc, #324]	@ (8004780 <HAL_DMA_Init+0x1f0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d004      	beq.n	8004648 <HAL_DMA_Init+0xb8>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a50      	ldr	r2, [pc, #320]	@ (8004784 <HAL_DMA_Init+0x1f4>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d101      	bne.n	800464c <HAL_DMA_Init+0xbc>
 8004648:	2301      	movs	r3, #1
 800464a:	e000      	b.n	800464e <HAL_DMA_Init+0xbe>
 800464c:	2300      	movs	r3, #0
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 813b 	beq.w	80048ca <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a37      	ldr	r2, [pc, #220]	@ (8004748 <HAL_DMA_Init+0x1b8>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d04a      	beq.n	8004704 <HAL_DMA_Init+0x174>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a36      	ldr	r2, [pc, #216]	@ (800474c <HAL_DMA_Init+0x1bc>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d045      	beq.n	8004704 <HAL_DMA_Init+0x174>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a34      	ldr	r2, [pc, #208]	@ (8004750 <HAL_DMA_Init+0x1c0>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d040      	beq.n	8004704 <HAL_DMA_Init+0x174>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a33      	ldr	r2, [pc, #204]	@ (8004754 <HAL_DMA_Init+0x1c4>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d03b      	beq.n	8004704 <HAL_DMA_Init+0x174>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a31      	ldr	r2, [pc, #196]	@ (8004758 <HAL_DMA_Init+0x1c8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d036      	beq.n	8004704 <HAL_DMA_Init+0x174>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a30      	ldr	r2, [pc, #192]	@ (800475c <HAL_DMA_Init+0x1cc>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d031      	beq.n	8004704 <HAL_DMA_Init+0x174>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a2e      	ldr	r2, [pc, #184]	@ (8004760 <HAL_DMA_Init+0x1d0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d02c      	beq.n	8004704 <HAL_DMA_Init+0x174>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a2d      	ldr	r2, [pc, #180]	@ (8004764 <HAL_DMA_Init+0x1d4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d027      	beq.n	8004704 <HAL_DMA_Init+0x174>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a2b      	ldr	r2, [pc, #172]	@ (8004768 <HAL_DMA_Init+0x1d8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d022      	beq.n	8004704 <HAL_DMA_Init+0x174>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a2a      	ldr	r2, [pc, #168]	@ (800476c <HAL_DMA_Init+0x1dc>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d01d      	beq.n	8004704 <HAL_DMA_Init+0x174>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a28      	ldr	r2, [pc, #160]	@ (8004770 <HAL_DMA_Init+0x1e0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d018      	beq.n	8004704 <HAL_DMA_Init+0x174>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a27      	ldr	r2, [pc, #156]	@ (8004774 <HAL_DMA_Init+0x1e4>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d013      	beq.n	8004704 <HAL_DMA_Init+0x174>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a25      	ldr	r2, [pc, #148]	@ (8004778 <HAL_DMA_Init+0x1e8>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00e      	beq.n	8004704 <HAL_DMA_Init+0x174>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a24      	ldr	r2, [pc, #144]	@ (800477c <HAL_DMA_Init+0x1ec>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d009      	beq.n	8004704 <HAL_DMA_Init+0x174>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a22      	ldr	r2, [pc, #136]	@ (8004780 <HAL_DMA_Init+0x1f0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d004      	beq.n	8004704 <HAL_DMA_Init+0x174>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a21      	ldr	r2, [pc, #132]	@ (8004784 <HAL_DMA_Init+0x1f4>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d108      	bne.n	8004716 <HAL_DMA_Init+0x186>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0201 	bic.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	e007      	b.n	8004726 <HAL_DMA_Init+0x196>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0201 	bic.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004726:	e02f      	b.n	8004788 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004728:	f7fe fb20 	bl	8002d6c <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b05      	cmp	r3, #5
 8004734:	d928      	bls.n	8004788 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2220      	movs	r2, #32
 800473a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2203      	movs	r2, #3
 8004740:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e246      	b.n	8004bd6 <HAL_DMA_Init+0x646>
 8004748:	40020010 	.word	0x40020010
 800474c:	40020028 	.word	0x40020028
 8004750:	40020040 	.word	0x40020040
 8004754:	40020058 	.word	0x40020058
 8004758:	40020070 	.word	0x40020070
 800475c:	40020088 	.word	0x40020088
 8004760:	400200a0 	.word	0x400200a0
 8004764:	400200b8 	.word	0x400200b8
 8004768:	40020410 	.word	0x40020410
 800476c:	40020428 	.word	0x40020428
 8004770:	40020440 	.word	0x40020440
 8004774:	40020458 	.word	0x40020458
 8004778:	40020470 	.word	0x40020470
 800477c:	40020488 	.word	0x40020488
 8004780:	400204a0 	.word	0x400204a0
 8004784:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1c8      	bne.n	8004728 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	4b83      	ldr	r3, [pc, #524]	@ (80049b0 <HAL_DMA_Init+0x420>)
 80047a2:	4013      	ands	r3, r2
 80047a4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80047ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047c6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d107      	bne.n	80047ec <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e4:	4313      	orrs	r3, r2
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80047ec:	4b71      	ldr	r3, [pc, #452]	@ (80049b4 <HAL_DMA_Init+0x424>)
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	4b71      	ldr	r3, [pc, #452]	@ (80049b8 <HAL_DMA_Init+0x428>)
 80047f2:	4013      	ands	r3, r2
 80047f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047f8:	d328      	bcc.n	800484c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	2b28      	cmp	r3, #40	@ 0x28
 8004800:	d903      	bls.n	800480a <HAL_DMA_Init+0x27a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b2e      	cmp	r3, #46	@ 0x2e
 8004808:	d917      	bls.n	800483a <HAL_DMA_Init+0x2aa>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004810:	d903      	bls.n	800481a <HAL_DMA_Init+0x28a>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b42      	cmp	r3, #66	@ 0x42
 8004818:	d90f      	bls.n	800483a <HAL_DMA_Init+0x2aa>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2b46      	cmp	r3, #70	@ 0x46
 8004820:	d903      	bls.n	800482a <HAL_DMA_Init+0x29a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b48      	cmp	r3, #72	@ 0x48
 8004828:	d907      	bls.n	800483a <HAL_DMA_Init+0x2aa>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2b4e      	cmp	r3, #78	@ 0x4e
 8004830:	d905      	bls.n	800483e <HAL_DMA_Init+0x2ae>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2b52      	cmp	r3, #82	@ 0x52
 8004838:	d801      	bhi.n	800483e <HAL_DMA_Init+0x2ae>
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <HAL_DMA_Init+0x2b0>
 800483e:	2300      	movs	r3, #0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800484a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f023 0307 	bic.w	r3, r3, #7
 8004862:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	4313      	orrs	r3, r2
 800486c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004872:	2b04      	cmp	r3, #4
 8004874:	d117      	bne.n	80048a6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4313      	orrs	r3, r2
 800487e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00e      	beq.n	80048a6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f002 fb3f 	bl	8006f0c <DMA_CheckFifoParam>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2240      	movs	r2, #64	@ 0x40
 8004898:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e197      	b.n	8004bd6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f002 fa7a 	bl	8006da8 <DMA_CalcBaseAndBitshift>
 80048b4:	4603      	mov	r3, r0
 80048b6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048bc:	f003 031f 	and.w	r3, r3, #31
 80048c0:	223f      	movs	r2, #63	@ 0x3f
 80048c2:	409a      	lsls	r2, r3
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	609a      	str	r2, [r3, #8]
 80048c8:	e0cd      	b.n	8004a66 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a3b      	ldr	r2, [pc, #236]	@ (80049bc <HAL_DMA_Init+0x42c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d022      	beq.n	800491a <HAL_DMA_Init+0x38a>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a39      	ldr	r2, [pc, #228]	@ (80049c0 <HAL_DMA_Init+0x430>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d01d      	beq.n	800491a <HAL_DMA_Init+0x38a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a38      	ldr	r2, [pc, #224]	@ (80049c4 <HAL_DMA_Init+0x434>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d018      	beq.n	800491a <HAL_DMA_Init+0x38a>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a36      	ldr	r2, [pc, #216]	@ (80049c8 <HAL_DMA_Init+0x438>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d013      	beq.n	800491a <HAL_DMA_Init+0x38a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a35      	ldr	r2, [pc, #212]	@ (80049cc <HAL_DMA_Init+0x43c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d00e      	beq.n	800491a <HAL_DMA_Init+0x38a>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a33      	ldr	r2, [pc, #204]	@ (80049d0 <HAL_DMA_Init+0x440>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d009      	beq.n	800491a <HAL_DMA_Init+0x38a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a32      	ldr	r2, [pc, #200]	@ (80049d4 <HAL_DMA_Init+0x444>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d004      	beq.n	800491a <HAL_DMA_Init+0x38a>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a30      	ldr	r2, [pc, #192]	@ (80049d8 <HAL_DMA_Init+0x448>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d101      	bne.n	800491e <HAL_DMA_Init+0x38e>
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <HAL_DMA_Init+0x390>
 800491e:	2300      	movs	r3, #0
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 8097 	beq.w	8004a54 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a24      	ldr	r2, [pc, #144]	@ (80049bc <HAL_DMA_Init+0x42c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d021      	beq.n	8004974 <HAL_DMA_Init+0x3e4>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a22      	ldr	r2, [pc, #136]	@ (80049c0 <HAL_DMA_Init+0x430>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d01c      	beq.n	8004974 <HAL_DMA_Init+0x3e4>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a21      	ldr	r2, [pc, #132]	@ (80049c4 <HAL_DMA_Init+0x434>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d017      	beq.n	8004974 <HAL_DMA_Init+0x3e4>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a1f      	ldr	r2, [pc, #124]	@ (80049c8 <HAL_DMA_Init+0x438>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d012      	beq.n	8004974 <HAL_DMA_Init+0x3e4>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a1e      	ldr	r2, [pc, #120]	@ (80049cc <HAL_DMA_Init+0x43c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d00d      	beq.n	8004974 <HAL_DMA_Init+0x3e4>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a1c      	ldr	r2, [pc, #112]	@ (80049d0 <HAL_DMA_Init+0x440>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d008      	beq.n	8004974 <HAL_DMA_Init+0x3e4>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1b      	ldr	r2, [pc, #108]	@ (80049d4 <HAL_DMA_Init+0x444>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d003      	beq.n	8004974 <HAL_DMA_Init+0x3e4>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a19      	ldr	r2, [pc, #100]	@ (80049d8 <HAL_DMA_Init+0x448>)
 8004972:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	4b13      	ldr	r3, [pc, #76]	@ (80049dc <HAL_DMA_Init+0x44c>)
 8004990:	4013      	ands	r3, r2
 8004992:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	2b40      	cmp	r3, #64	@ 0x40
 800499a:	d021      	beq.n	80049e0 <HAL_DMA_Init+0x450>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	2b80      	cmp	r3, #128	@ 0x80
 80049a2:	d102      	bne.n	80049aa <HAL_DMA_Init+0x41a>
 80049a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80049a8:	e01b      	b.n	80049e2 <HAL_DMA_Init+0x452>
 80049aa:	2300      	movs	r3, #0
 80049ac:	e019      	b.n	80049e2 <HAL_DMA_Init+0x452>
 80049ae:	bf00      	nop
 80049b0:	fe10803f 	.word	0xfe10803f
 80049b4:	5c001000 	.word	0x5c001000
 80049b8:	ffff0000 	.word	0xffff0000
 80049bc:	58025408 	.word	0x58025408
 80049c0:	5802541c 	.word	0x5802541c
 80049c4:	58025430 	.word	0x58025430
 80049c8:	58025444 	.word	0x58025444
 80049cc:	58025458 	.word	0x58025458
 80049d0:	5802546c 	.word	0x5802546c
 80049d4:	58025480 	.word	0x58025480
 80049d8:	58025494 	.word	0x58025494
 80049dc:	fffe000f 	.word	0xfffe000f
 80049e0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	68d2      	ldr	r2, [r2, #12]
 80049e6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80049e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80049f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80049f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004a00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004a08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004a10:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	461a      	mov	r2, r3
 8004a26:	4b6e      	ldr	r3, [pc, #440]	@ (8004be0 <HAL_DMA_Init+0x650>)
 8004a28:	4413      	add	r3, r2
 8004a2a:	4a6e      	ldr	r2, [pc, #440]	@ (8004be4 <HAL_DMA_Init+0x654>)
 8004a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a30:	091b      	lsrs	r3, r3, #4
 8004a32:	009a      	lsls	r2, r3, #2
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f002 f9b5 	bl	8006da8 <DMA_CalcBaseAndBitshift>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a46:	f003 031f 	and.w	r3, r3, #31
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	409a      	lsls	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	605a      	str	r2, [r3, #4]
 8004a52:	e008      	b.n	8004a66 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2240      	movs	r2, #64	@ 0x40
 8004a58:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2203      	movs	r2, #3
 8004a5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e0b7      	b.n	8004bd6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a5f      	ldr	r2, [pc, #380]	@ (8004be8 <HAL_DMA_Init+0x658>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d072      	beq.n	8004b56 <HAL_DMA_Init+0x5c6>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a5d      	ldr	r2, [pc, #372]	@ (8004bec <HAL_DMA_Init+0x65c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d06d      	beq.n	8004b56 <HAL_DMA_Init+0x5c6>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a5c      	ldr	r2, [pc, #368]	@ (8004bf0 <HAL_DMA_Init+0x660>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d068      	beq.n	8004b56 <HAL_DMA_Init+0x5c6>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a5a      	ldr	r2, [pc, #360]	@ (8004bf4 <HAL_DMA_Init+0x664>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d063      	beq.n	8004b56 <HAL_DMA_Init+0x5c6>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a59      	ldr	r2, [pc, #356]	@ (8004bf8 <HAL_DMA_Init+0x668>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d05e      	beq.n	8004b56 <HAL_DMA_Init+0x5c6>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a57      	ldr	r2, [pc, #348]	@ (8004bfc <HAL_DMA_Init+0x66c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d059      	beq.n	8004b56 <HAL_DMA_Init+0x5c6>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a56      	ldr	r2, [pc, #344]	@ (8004c00 <HAL_DMA_Init+0x670>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d054      	beq.n	8004b56 <HAL_DMA_Init+0x5c6>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a54      	ldr	r2, [pc, #336]	@ (8004c04 <HAL_DMA_Init+0x674>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d04f      	beq.n	8004b56 <HAL_DMA_Init+0x5c6>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a53      	ldr	r2, [pc, #332]	@ (8004c08 <HAL_DMA_Init+0x678>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d04a      	beq.n	8004b56 <HAL_DMA_Init+0x5c6>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a51      	ldr	r2, [pc, #324]	@ (8004c0c <HAL_DMA_Init+0x67c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d045      	beq.n	8004b56 <HAL_DMA_Init+0x5c6>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a50      	ldr	r2, [pc, #320]	@ (8004c10 <HAL_DMA_Init+0x680>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d040      	beq.n	8004b56 <HAL_DMA_Init+0x5c6>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a4e      	ldr	r2, [pc, #312]	@ (8004c14 <HAL_DMA_Init+0x684>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d03b      	beq.n	8004b56 <HAL_DMA_Init+0x5c6>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a4d      	ldr	r2, [pc, #308]	@ (8004c18 <HAL_DMA_Init+0x688>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d036      	beq.n	8004b56 <HAL_DMA_Init+0x5c6>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a4b      	ldr	r2, [pc, #300]	@ (8004c1c <HAL_DMA_Init+0x68c>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d031      	beq.n	8004b56 <HAL_DMA_Init+0x5c6>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a4a      	ldr	r2, [pc, #296]	@ (8004c20 <HAL_DMA_Init+0x690>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d02c      	beq.n	8004b56 <HAL_DMA_Init+0x5c6>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a48      	ldr	r2, [pc, #288]	@ (8004c24 <HAL_DMA_Init+0x694>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d027      	beq.n	8004b56 <HAL_DMA_Init+0x5c6>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a47      	ldr	r2, [pc, #284]	@ (8004c28 <HAL_DMA_Init+0x698>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d022      	beq.n	8004b56 <HAL_DMA_Init+0x5c6>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a45      	ldr	r2, [pc, #276]	@ (8004c2c <HAL_DMA_Init+0x69c>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d01d      	beq.n	8004b56 <HAL_DMA_Init+0x5c6>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a44      	ldr	r2, [pc, #272]	@ (8004c30 <HAL_DMA_Init+0x6a0>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d018      	beq.n	8004b56 <HAL_DMA_Init+0x5c6>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a42      	ldr	r2, [pc, #264]	@ (8004c34 <HAL_DMA_Init+0x6a4>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d013      	beq.n	8004b56 <HAL_DMA_Init+0x5c6>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a41      	ldr	r2, [pc, #260]	@ (8004c38 <HAL_DMA_Init+0x6a8>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d00e      	beq.n	8004b56 <HAL_DMA_Init+0x5c6>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a3f      	ldr	r2, [pc, #252]	@ (8004c3c <HAL_DMA_Init+0x6ac>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d009      	beq.n	8004b56 <HAL_DMA_Init+0x5c6>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a3e      	ldr	r2, [pc, #248]	@ (8004c40 <HAL_DMA_Init+0x6b0>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d004      	beq.n	8004b56 <HAL_DMA_Init+0x5c6>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a3c      	ldr	r2, [pc, #240]	@ (8004c44 <HAL_DMA_Init+0x6b4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d101      	bne.n	8004b5a <HAL_DMA_Init+0x5ca>
 8004b56:	2301      	movs	r3, #1
 8004b58:	e000      	b.n	8004b5c <HAL_DMA_Init+0x5cc>
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d032      	beq.n	8004bc6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f002 fa4f 	bl	8007004 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	2b80      	cmp	r3, #128	@ 0x80
 8004b6c:	d102      	bne.n	8004b74 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b7c:	b2d2      	uxtb	r2, r2
 8004b7e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004b88:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d010      	beq.n	8004bb4 <HAL_DMA_Init+0x624>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b08      	cmp	r3, #8
 8004b98:	d80c      	bhi.n	8004bb4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f002 facc 	bl	8007138 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004bb0:	605a      	str	r2, [r3, #4]
 8004bb2:	e008      	b.n	8004bc6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	a7fdabf8 	.word	0xa7fdabf8
 8004be4:	cccccccd 	.word	0xcccccccd
 8004be8:	40020010 	.word	0x40020010
 8004bec:	40020028 	.word	0x40020028
 8004bf0:	40020040 	.word	0x40020040
 8004bf4:	40020058 	.word	0x40020058
 8004bf8:	40020070 	.word	0x40020070
 8004bfc:	40020088 	.word	0x40020088
 8004c00:	400200a0 	.word	0x400200a0
 8004c04:	400200b8 	.word	0x400200b8
 8004c08:	40020410 	.word	0x40020410
 8004c0c:	40020428 	.word	0x40020428
 8004c10:	40020440 	.word	0x40020440
 8004c14:	40020458 	.word	0x40020458
 8004c18:	40020470 	.word	0x40020470
 8004c1c:	40020488 	.word	0x40020488
 8004c20:	400204a0 	.word	0x400204a0
 8004c24:	400204b8 	.word	0x400204b8
 8004c28:	58025408 	.word	0x58025408
 8004c2c:	5802541c 	.word	0x5802541c
 8004c30:	58025430 	.word	0x58025430
 8004c34:	58025444 	.word	0x58025444
 8004c38:	58025458 	.word	0x58025458
 8004c3c:	5802546c 	.word	0x5802546c
 8004c40:	58025480 	.word	0x58025480
 8004c44:	58025494 	.word	0x58025494

08004c48 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
 8004c54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c56:	2300      	movs	r3, #0
 8004c58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e226      	b.n	80050b2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <HAL_DMA_Start_IT+0x2a>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e21f      	b.n	80050b2 <HAL_DMA_Start_IT+0x46a>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	f040 820a 	bne.w	800509c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a68      	ldr	r2, [pc, #416]	@ (8004e3c <HAL_DMA_Start_IT+0x1f4>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d04a      	beq.n	8004d36 <HAL_DMA_Start_IT+0xee>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a66      	ldr	r2, [pc, #408]	@ (8004e40 <HAL_DMA_Start_IT+0x1f8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d045      	beq.n	8004d36 <HAL_DMA_Start_IT+0xee>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a65      	ldr	r2, [pc, #404]	@ (8004e44 <HAL_DMA_Start_IT+0x1fc>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d040      	beq.n	8004d36 <HAL_DMA_Start_IT+0xee>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a63      	ldr	r2, [pc, #396]	@ (8004e48 <HAL_DMA_Start_IT+0x200>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d03b      	beq.n	8004d36 <HAL_DMA_Start_IT+0xee>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a62      	ldr	r2, [pc, #392]	@ (8004e4c <HAL_DMA_Start_IT+0x204>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d036      	beq.n	8004d36 <HAL_DMA_Start_IT+0xee>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a60      	ldr	r2, [pc, #384]	@ (8004e50 <HAL_DMA_Start_IT+0x208>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d031      	beq.n	8004d36 <HAL_DMA_Start_IT+0xee>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a5f      	ldr	r2, [pc, #380]	@ (8004e54 <HAL_DMA_Start_IT+0x20c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d02c      	beq.n	8004d36 <HAL_DMA_Start_IT+0xee>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a5d      	ldr	r2, [pc, #372]	@ (8004e58 <HAL_DMA_Start_IT+0x210>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d027      	beq.n	8004d36 <HAL_DMA_Start_IT+0xee>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a5c      	ldr	r2, [pc, #368]	@ (8004e5c <HAL_DMA_Start_IT+0x214>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d022      	beq.n	8004d36 <HAL_DMA_Start_IT+0xee>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a5a      	ldr	r2, [pc, #360]	@ (8004e60 <HAL_DMA_Start_IT+0x218>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d01d      	beq.n	8004d36 <HAL_DMA_Start_IT+0xee>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a59      	ldr	r2, [pc, #356]	@ (8004e64 <HAL_DMA_Start_IT+0x21c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d018      	beq.n	8004d36 <HAL_DMA_Start_IT+0xee>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a57      	ldr	r2, [pc, #348]	@ (8004e68 <HAL_DMA_Start_IT+0x220>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d013      	beq.n	8004d36 <HAL_DMA_Start_IT+0xee>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a56      	ldr	r2, [pc, #344]	@ (8004e6c <HAL_DMA_Start_IT+0x224>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d00e      	beq.n	8004d36 <HAL_DMA_Start_IT+0xee>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a54      	ldr	r2, [pc, #336]	@ (8004e70 <HAL_DMA_Start_IT+0x228>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d009      	beq.n	8004d36 <HAL_DMA_Start_IT+0xee>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a53      	ldr	r2, [pc, #332]	@ (8004e74 <HAL_DMA_Start_IT+0x22c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d004      	beq.n	8004d36 <HAL_DMA_Start_IT+0xee>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a51      	ldr	r2, [pc, #324]	@ (8004e78 <HAL_DMA_Start_IT+0x230>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d108      	bne.n	8004d48 <HAL_DMA_Start_IT+0x100>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0201 	bic.w	r2, r2, #1
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	e007      	b.n	8004d58 <HAL_DMA_Start_IT+0x110>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0201 	bic.w	r2, r2, #1
 8004d56:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	68b9      	ldr	r1, [r7, #8]
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f001 fe76 	bl	8006a50 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a34      	ldr	r2, [pc, #208]	@ (8004e3c <HAL_DMA_Start_IT+0x1f4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d04a      	beq.n	8004e04 <HAL_DMA_Start_IT+0x1bc>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a33      	ldr	r2, [pc, #204]	@ (8004e40 <HAL_DMA_Start_IT+0x1f8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d045      	beq.n	8004e04 <HAL_DMA_Start_IT+0x1bc>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a31      	ldr	r2, [pc, #196]	@ (8004e44 <HAL_DMA_Start_IT+0x1fc>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d040      	beq.n	8004e04 <HAL_DMA_Start_IT+0x1bc>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a30      	ldr	r2, [pc, #192]	@ (8004e48 <HAL_DMA_Start_IT+0x200>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d03b      	beq.n	8004e04 <HAL_DMA_Start_IT+0x1bc>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a2e      	ldr	r2, [pc, #184]	@ (8004e4c <HAL_DMA_Start_IT+0x204>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d036      	beq.n	8004e04 <HAL_DMA_Start_IT+0x1bc>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a2d      	ldr	r2, [pc, #180]	@ (8004e50 <HAL_DMA_Start_IT+0x208>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d031      	beq.n	8004e04 <HAL_DMA_Start_IT+0x1bc>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a2b      	ldr	r2, [pc, #172]	@ (8004e54 <HAL_DMA_Start_IT+0x20c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d02c      	beq.n	8004e04 <HAL_DMA_Start_IT+0x1bc>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a2a      	ldr	r2, [pc, #168]	@ (8004e58 <HAL_DMA_Start_IT+0x210>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d027      	beq.n	8004e04 <HAL_DMA_Start_IT+0x1bc>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a28      	ldr	r2, [pc, #160]	@ (8004e5c <HAL_DMA_Start_IT+0x214>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d022      	beq.n	8004e04 <HAL_DMA_Start_IT+0x1bc>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a27      	ldr	r2, [pc, #156]	@ (8004e60 <HAL_DMA_Start_IT+0x218>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d01d      	beq.n	8004e04 <HAL_DMA_Start_IT+0x1bc>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a25      	ldr	r2, [pc, #148]	@ (8004e64 <HAL_DMA_Start_IT+0x21c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d018      	beq.n	8004e04 <HAL_DMA_Start_IT+0x1bc>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a24      	ldr	r2, [pc, #144]	@ (8004e68 <HAL_DMA_Start_IT+0x220>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d013      	beq.n	8004e04 <HAL_DMA_Start_IT+0x1bc>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a22      	ldr	r2, [pc, #136]	@ (8004e6c <HAL_DMA_Start_IT+0x224>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d00e      	beq.n	8004e04 <HAL_DMA_Start_IT+0x1bc>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a21      	ldr	r2, [pc, #132]	@ (8004e70 <HAL_DMA_Start_IT+0x228>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d009      	beq.n	8004e04 <HAL_DMA_Start_IT+0x1bc>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a1f      	ldr	r2, [pc, #124]	@ (8004e74 <HAL_DMA_Start_IT+0x22c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d004      	beq.n	8004e04 <HAL_DMA_Start_IT+0x1bc>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8004e78 <HAL_DMA_Start_IT+0x230>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d101      	bne.n	8004e08 <HAL_DMA_Start_IT+0x1c0>
 8004e04:	2301      	movs	r3, #1
 8004e06:	e000      	b.n	8004e0a <HAL_DMA_Start_IT+0x1c2>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d036      	beq.n	8004e7c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f023 021e 	bic.w	r2, r3, #30
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f042 0216 	orr.w	r2, r2, #22
 8004e20:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d03e      	beq.n	8004ea8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f042 0208 	orr.w	r2, r2, #8
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	e035      	b.n	8004ea8 <HAL_DMA_Start_IT+0x260>
 8004e3c:	40020010 	.word	0x40020010
 8004e40:	40020028 	.word	0x40020028
 8004e44:	40020040 	.word	0x40020040
 8004e48:	40020058 	.word	0x40020058
 8004e4c:	40020070 	.word	0x40020070
 8004e50:	40020088 	.word	0x40020088
 8004e54:	400200a0 	.word	0x400200a0
 8004e58:	400200b8 	.word	0x400200b8
 8004e5c:	40020410 	.word	0x40020410
 8004e60:	40020428 	.word	0x40020428
 8004e64:	40020440 	.word	0x40020440
 8004e68:	40020458 	.word	0x40020458
 8004e6c:	40020470 	.word	0x40020470
 8004e70:	40020488 	.word	0x40020488
 8004e74:	400204a0 	.word	0x400204a0
 8004e78:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f023 020e 	bic.w	r2, r3, #14
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 020a 	orr.w	r2, r2, #10
 8004e8e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d007      	beq.n	8004ea8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0204 	orr.w	r2, r2, #4
 8004ea6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a83      	ldr	r2, [pc, #524]	@ (80050bc <HAL_DMA_Start_IT+0x474>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d072      	beq.n	8004f98 <HAL_DMA_Start_IT+0x350>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a82      	ldr	r2, [pc, #520]	@ (80050c0 <HAL_DMA_Start_IT+0x478>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d06d      	beq.n	8004f98 <HAL_DMA_Start_IT+0x350>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a80      	ldr	r2, [pc, #512]	@ (80050c4 <HAL_DMA_Start_IT+0x47c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d068      	beq.n	8004f98 <HAL_DMA_Start_IT+0x350>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a7f      	ldr	r2, [pc, #508]	@ (80050c8 <HAL_DMA_Start_IT+0x480>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d063      	beq.n	8004f98 <HAL_DMA_Start_IT+0x350>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a7d      	ldr	r2, [pc, #500]	@ (80050cc <HAL_DMA_Start_IT+0x484>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d05e      	beq.n	8004f98 <HAL_DMA_Start_IT+0x350>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a7c      	ldr	r2, [pc, #496]	@ (80050d0 <HAL_DMA_Start_IT+0x488>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d059      	beq.n	8004f98 <HAL_DMA_Start_IT+0x350>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a7a      	ldr	r2, [pc, #488]	@ (80050d4 <HAL_DMA_Start_IT+0x48c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d054      	beq.n	8004f98 <HAL_DMA_Start_IT+0x350>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a79      	ldr	r2, [pc, #484]	@ (80050d8 <HAL_DMA_Start_IT+0x490>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d04f      	beq.n	8004f98 <HAL_DMA_Start_IT+0x350>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a77      	ldr	r2, [pc, #476]	@ (80050dc <HAL_DMA_Start_IT+0x494>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d04a      	beq.n	8004f98 <HAL_DMA_Start_IT+0x350>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a76      	ldr	r2, [pc, #472]	@ (80050e0 <HAL_DMA_Start_IT+0x498>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d045      	beq.n	8004f98 <HAL_DMA_Start_IT+0x350>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a74      	ldr	r2, [pc, #464]	@ (80050e4 <HAL_DMA_Start_IT+0x49c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d040      	beq.n	8004f98 <HAL_DMA_Start_IT+0x350>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a73      	ldr	r2, [pc, #460]	@ (80050e8 <HAL_DMA_Start_IT+0x4a0>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d03b      	beq.n	8004f98 <HAL_DMA_Start_IT+0x350>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a71      	ldr	r2, [pc, #452]	@ (80050ec <HAL_DMA_Start_IT+0x4a4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d036      	beq.n	8004f98 <HAL_DMA_Start_IT+0x350>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a70      	ldr	r2, [pc, #448]	@ (80050f0 <HAL_DMA_Start_IT+0x4a8>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d031      	beq.n	8004f98 <HAL_DMA_Start_IT+0x350>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a6e      	ldr	r2, [pc, #440]	@ (80050f4 <HAL_DMA_Start_IT+0x4ac>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d02c      	beq.n	8004f98 <HAL_DMA_Start_IT+0x350>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a6d      	ldr	r2, [pc, #436]	@ (80050f8 <HAL_DMA_Start_IT+0x4b0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d027      	beq.n	8004f98 <HAL_DMA_Start_IT+0x350>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a6b      	ldr	r2, [pc, #428]	@ (80050fc <HAL_DMA_Start_IT+0x4b4>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d022      	beq.n	8004f98 <HAL_DMA_Start_IT+0x350>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a6a      	ldr	r2, [pc, #424]	@ (8005100 <HAL_DMA_Start_IT+0x4b8>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d01d      	beq.n	8004f98 <HAL_DMA_Start_IT+0x350>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a68      	ldr	r2, [pc, #416]	@ (8005104 <HAL_DMA_Start_IT+0x4bc>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d018      	beq.n	8004f98 <HAL_DMA_Start_IT+0x350>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a67      	ldr	r2, [pc, #412]	@ (8005108 <HAL_DMA_Start_IT+0x4c0>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d013      	beq.n	8004f98 <HAL_DMA_Start_IT+0x350>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a65      	ldr	r2, [pc, #404]	@ (800510c <HAL_DMA_Start_IT+0x4c4>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d00e      	beq.n	8004f98 <HAL_DMA_Start_IT+0x350>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a64      	ldr	r2, [pc, #400]	@ (8005110 <HAL_DMA_Start_IT+0x4c8>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d009      	beq.n	8004f98 <HAL_DMA_Start_IT+0x350>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a62      	ldr	r2, [pc, #392]	@ (8005114 <HAL_DMA_Start_IT+0x4cc>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d004      	beq.n	8004f98 <HAL_DMA_Start_IT+0x350>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a61      	ldr	r2, [pc, #388]	@ (8005118 <HAL_DMA_Start_IT+0x4d0>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d101      	bne.n	8004f9c <HAL_DMA_Start_IT+0x354>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e000      	b.n	8004f9e <HAL_DMA_Start_IT+0x356>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d01a      	beq.n	8004fd8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d007      	beq.n	8004fc0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fbe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d007      	beq.n	8004fd8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fd6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a37      	ldr	r2, [pc, #220]	@ (80050bc <HAL_DMA_Start_IT+0x474>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d04a      	beq.n	8005078 <HAL_DMA_Start_IT+0x430>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a36      	ldr	r2, [pc, #216]	@ (80050c0 <HAL_DMA_Start_IT+0x478>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d045      	beq.n	8005078 <HAL_DMA_Start_IT+0x430>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a34      	ldr	r2, [pc, #208]	@ (80050c4 <HAL_DMA_Start_IT+0x47c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d040      	beq.n	8005078 <HAL_DMA_Start_IT+0x430>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a33      	ldr	r2, [pc, #204]	@ (80050c8 <HAL_DMA_Start_IT+0x480>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d03b      	beq.n	8005078 <HAL_DMA_Start_IT+0x430>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a31      	ldr	r2, [pc, #196]	@ (80050cc <HAL_DMA_Start_IT+0x484>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d036      	beq.n	8005078 <HAL_DMA_Start_IT+0x430>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a30      	ldr	r2, [pc, #192]	@ (80050d0 <HAL_DMA_Start_IT+0x488>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d031      	beq.n	8005078 <HAL_DMA_Start_IT+0x430>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a2e      	ldr	r2, [pc, #184]	@ (80050d4 <HAL_DMA_Start_IT+0x48c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d02c      	beq.n	8005078 <HAL_DMA_Start_IT+0x430>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a2d      	ldr	r2, [pc, #180]	@ (80050d8 <HAL_DMA_Start_IT+0x490>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d027      	beq.n	8005078 <HAL_DMA_Start_IT+0x430>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a2b      	ldr	r2, [pc, #172]	@ (80050dc <HAL_DMA_Start_IT+0x494>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d022      	beq.n	8005078 <HAL_DMA_Start_IT+0x430>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a2a      	ldr	r2, [pc, #168]	@ (80050e0 <HAL_DMA_Start_IT+0x498>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d01d      	beq.n	8005078 <HAL_DMA_Start_IT+0x430>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a28      	ldr	r2, [pc, #160]	@ (80050e4 <HAL_DMA_Start_IT+0x49c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d018      	beq.n	8005078 <HAL_DMA_Start_IT+0x430>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a27      	ldr	r2, [pc, #156]	@ (80050e8 <HAL_DMA_Start_IT+0x4a0>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d013      	beq.n	8005078 <HAL_DMA_Start_IT+0x430>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a25      	ldr	r2, [pc, #148]	@ (80050ec <HAL_DMA_Start_IT+0x4a4>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d00e      	beq.n	8005078 <HAL_DMA_Start_IT+0x430>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a24      	ldr	r2, [pc, #144]	@ (80050f0 <HAL_DMA_Start_IT+0x4a8>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d009      	beq.n	8005078 <HAL_DMA_Start_IT+0x430>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a22      	ldr	r2, [pc, #136]	@ (80050f4 <HAL_DMA_Start_IT+0x4ac>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d004      	beq.n	8005078 <HAL_DMA_Start_IT+0x430>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a21      	ldr	r2, [pc, #132]	@ (80050f8 <HAL_DMA_Start_IT+0x4b0>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d108      	bne.n	800508a <HAL_DMA_Start_IT+0x442>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0201 	orr.w	r2, r2, #1
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	e012      	b.n	80050b0 <HAL_DMA_Start_IT+0x468>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f042 0201 	orr.w	r2, r2, #1
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	e009      	b.n	80050b0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050a2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80050b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40020010 	.word	0x40020010
 80050c0:	40020028 	.word	0x40020028
 80050c4:	40020040 	.word	0x40020040
 80050c8:	40020058 	.word	0x40020058
 80050cc:	40020070 	.word	0x40020070
 80050d0:	40020088 	.word	0x40020088
 80050d4:	400200a0 	.word	0x400200a0
 80050d8:	400200b8 	.word	0x400200b8
 80050dc:	40020410 	.word	0x40020410
 80050e0:	40020428 	.word	0x40020428
 80050e4:	40020440 	.word	0x40020440
 80050e8:	40020458 	.word	0x40020458
 80050ec:	40020470 	.word	0x40020470
 80050f0:	40020488 	.word	0x40020488
 80050f4:	400204a0 	.word	0x400204a0
 80050f8:	400204b8 	.word	0x400204b8
 80050fc:	58025408 	.word	0x58025408
 8005100:	5802541c 	.word	0x5802541c
 8005104:	58025430 	.word	0x58025430
 8005108:	58025444 	.word	0x58025444
 800510c:	58025458 	.word	0x58025458
 8005110:	5802546c 	.word	0x5802546c
 8005114:	58025480 	.word	0x58025480
 8005118:	58025494 	.word	0x58025494

0800511c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005124:	f7fd fe22 	bl	8002d6c <HAL_GetTick>
 8005128:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e2dc      	b.n	80056ee <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d008      	beq.n	8005152 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2280      	movs	r2, #128	@ 0x80
 8005144:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e2cd      	b.n	80056ee <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a76      	ldr	r2, [pc, #472]	@ (8005330 <HAL_DMA_Abort+0x214>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d04a      	beq.n	80051f2 <HAL_DMA_Abort+0xd6>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a74      	ldr	r2, [pc, #464]	@ (8005334 <HAL_DMA_Abort+0x218>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d045      	beq.n	80051f2 <HAL_DMA_Abort+0xd6>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a73      	ldr	r2, [pc, #460]	@ (8005338 <HAL_DMA_Abort+0x21c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d040      	beq.n	80051f2 <HAL_DMA_Abort+0xd6>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a71      	ldr	r2, [pc, #452]	@ (800533c <HAL_DMA_Abort+0x220>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d03b      	beq.n	80051f2 <HAL_DMA_Abort+0xd6>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a70      	ldr	r2, [pc, #448]	@ (8005340 <HAL_DMA_Abort+0x224>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d036      	beq.n	80051f2 <HAL_DMA_Abort+0xd6>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a6e      	ldr	r2, [pc, #440]	@ (8005344 <HAL_DMA_Abort+0x228>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d031      	beq.n	80051f2 <HAL_DMA_Abort+0xd6>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a6d      	ldr	r2, [pc, #436]	@ (8005348 <HAL_DMA_Abort+0x22c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d02c      	beq.n	80051f2 <HAL_DMA_Abort+0xd6>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a6b      	ldr	r2, [pc, #428]	@ (800534c <HAL_DMA_Abort+0x230>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d027      	beq.n	80051f2 <HAL_DMA_Abort+0xd6>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a6a      	ldr	r2, [pc, #424]	@ (8005350 <HAL_DMA_Abort+0x234>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d022      	beq.n	80051f2 <HAL_DMA_Abort+0xd6>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a68      	ldr	r2, [pc, #416]	@ (8005354 <HAL_DMA_Abort+0x238>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d01d      	beq.n	80051f2 <HAL_DMA_Abort+0xd6>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a67      	ldr	r2, [pc, #412]	@ (8005358 <HAL_DMA_Abort+0x23c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d018      	beq.n	80051f2 <HAL_DMA_Abort+0xd6>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a65      	ldr	r2, [pc, #404]	@ (800535c <HAL_DMA_Abort+0x240>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d013      	beq.n	80051f2 <HAL_DMA_Abort+0xd6>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a64      	ldr	r2, [pc, #400]	@ (8005360 <HAL_DMA_Abort+0x244>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d00e      	beq.n	80051f2 <HAL_DMA_Abort+0xd6>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a62      	ldr	r2, [pc, #392]	@ (8005364 <HAL_DMA_Abort+0x248>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d009      	beq.n	80051f2 <HAL_DMA_Abort+0xd6>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a61      	ldr	r2, [pc, #388]	@ (8005368 <HAL_DMA_Abort+0x24c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d004      	beq.n	80051f2 <HAL_DMA_Abort+0xd6>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a5f      	ldr	r2, [pc, #380]	@ (800536c <HAL_DMA_Abort+0x250>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d101      	bne.n	80051f6 <HAL_DMA_Abort+0xda>
 80051f2:	2301      	movs	r3, #1
 80051f4:	e000      	b.n	80051f8 <HAL_DMA_Abort+0xdc>
 80051f6:	2300      	movs	r3, #0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d013      	beq.n	8005224 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 021e 	bic.w	r2, r2, #30
 800520a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	695a      	ldr	r2, [r3, #20]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800521a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	e00a      	b.n	800523a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 020e 	bic.w	r2, r2, #14
 8005232:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a3c      	ldr	r2, [pc, #240]	@ (8005330 <HAL_DMA_Abort+0x214>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d072      	beq.n	800532a <HAL_DMA_Abort+0x20e>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a3a      	ldr	r2, [pc, #232]	@ (8005334 <HAL_DMA_Abort+0x218>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d06d      	beq.n	800532a <HAL_DMA_Abort+0x20e>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a39      	ldr	r2, [pc, #228]	@ (8005338 <HAL_DMA_Abort+0x21c>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d068      	beq.n	800532a <HAL_DMA_Abort+0x20e>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a37      	ldr	r2, [pc, #220]	@ (800533c <HAL_DMA_Abort+0x220>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d063      	beq.n	800532a <HAL_DMA_Abort+0x20e>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a36      	ldr	r2, [pc, #216]	@ (8005340 <HAL_DMA_Abort+0x224>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d05e      	beq.n	800532a <HAL_DMA_Abort+0x20e>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a34      	ldr	r2, [pc, #208]	@ (8005344 <HAL_DMA_Abort+0x228>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d059      	beq.n	800532a <HAL_DMA_Abort+0x20e>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a33      	ldr	r2, [pc, #204]	@ (8005348 <HAL_DMA_Abort+0x22c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d054      	beq.n	800532a <HAL_DMA_Abort+0x20e>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a31      	ldr	r2, [pc, #196]	@ (800534c <HAL_DMA_Abort+0x230>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d04f      	beq.n	800532a <HAL_DMA_Abort+0x20e>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a30      	ldr	r2, [pc, #192]	@ (8005350 <HAL_DMA_Abort+0x234>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d04a      	beq.n	800532a <HAL_DMA_Abort+0x20e>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a2e      	ldr	r2, [pc, #184]	@ (8005354 <HAL_DMA_Abort+0x238>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d045      	beq.n	800532a <HAL_DMA_Abort+0x20e>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a2d      	ldr	r2, [pc, #180]	@ (8005358 <HAL_DMA_Abort+0x23c>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d040      	beq.n	800532a <HAL_DMA_Abort+0x20e>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a2b      	ldr	r2, [pc, #172]	@ (800535c <HAL_DMA_Abort+0x240>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d03b      	beq.n	800532a <HAL_DMA_Abort+0x20e>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a2a      	ldr	r2, [pc, #168]	@ (8005360 <HAL_DMA_Abort+0x244>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d036      	beq.n	800532a <HAL_DMA_Abort+0x20e>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a28      	ldr	r2, [pc, #160]	@ (8005364 <HAL_DMA_Abort+0x248>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d031      	beq.n	800532a <HAL_DMA_Abort+0x20e>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a27      	ldr	r2, [pc, #156]	@ (8005368 <HAL_DMA_Abort+0x24c>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d02c      	beq.n	800532a <HAL_DMA_Abort+0x20e>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a25      	ldr	r2, [pc, #148]	@ (800536c <HAL_DMA_Abort+0x250>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d027      	beq.n	800532a <HAL_DMA_Abort+0x20e>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a24      	ldr	r2, [pc, #144]	@ (8005370 <HAL_DMA_Abort+0x254>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d022      	beq.n	800532a <HAL_DMA_Abort+0x20e>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a22      	ldr	r2, [pc, #136]	@ (8005374 <HAL_DMA_Abort+0x258>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d01d      	beq.n	800532a <HAL_DMA_Abort+0x20e>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a21      	ldr	r2, [pc, #132]	@ (8005378 <HAL_DMA_Abort+0x25c>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d018      	beq.n	800532a <HAL_DMA_Abort+0x20e>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a1f      	ldr	r2, [pc, #124]	@ (800537c <HAL_DMA_Abort+0x260>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d013      	beq.n	800532a <HAL_DMA_Abort+0x20e>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a1e      	ldr	r2, [pc, #120]	@ (8005380 <HAL_DMA_Abort+0x264>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d00e      	beq.n	800532a <HAL_DMA_Abort+0x20e>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a1c      	ldr	r2, [pc, #112]	@ (8005384 <HAL_DMA_Abort+0x268>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d009      	beq.n	800532a <HAL_DMA_Abort+0x20e>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a1b      	ldr	r2, [pc, #108]	@ (8005388 <HAL_DMA_Abort+0x26c>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d004      	beq.n	800532a <HAL_DMA_Abort+0x20e>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a19      	ldr	r2, [pc, #100]	@ (800538c <HAL_DMA_Abort+0x270>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d132      	bne.n	8005390 <HAL_DMA_Abort+0x274>
 800532a:	2301      	movs	r3, #1
 800532c:	e031      	b.n	8005392 <HAL_DMA_Abort+0x276>
 800532e:	bf00      	nop
 8005330:	40020010 	.word	0x40020010
 8005334:	40020028 	.word	0x40020028
 8005338:	40020040 	.word	0x40020040
 800533c:	40020058 	.word	0x40020058
 8005340:	40020070 	.word	0x40020070
 8005344:	40020088 	.word	0x40020088
 8005348:	400200a0 	.word	0x400200a0
 800534c:	400200b8 	.word	0x400200b8
 8005350:	40020410 	.word	0x40020410
 8005354:	40020428 	.word	0x40020428
 8005358:	40020440 	.word	0x40020440
 800535c:	40020458 	.word	0x40020458
 8005360:	40020470 	.word	0x40020470
 8005364:	40020488 	.word	0x40020488
 8005368:	400204a0 	.word	0x400204a0
 800536c:	400204b8 	.word	0x400204b8
 8005370:	58025408 	.word	0x58025408
 8005374:	5802541c 	.word	0x5802541c
 8005378:	58025430 	.word	0x58025430
 800537c:	58025444 	.word	0x58025444
 8005380:	58025458 	.word	0x58025458
 8005384:	5802546c 	.word	0x5802546c
 8005388:	58025480 	.word	0x58025480
 800538c:	58025494 	.word	0x58025494
 8005390:	2300      	movs	r3, #0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d007      	beq.n	80053a6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a6d      	ldr	r2, [pc, #436]	@ (8005560 <HAL_DMA_Abort+0x444>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d04a      	beq.n	8005446 <HAL_DMA_Abort+0x32a>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a6b      	ldr	r2, [pc, #428]	@ (8005564 <HAL_DMA_Abort+0x448>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d045      	beq.n	8005446 <HAL_DMA_Abort+0x32a>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a6a      	ldr	r2, [pc, #424]	@ (8005568 <HAL_DMA_Abort+0x44c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d040      	beq.n	8005446 <HAL_DMA_Abort+0x32a>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a68      	ldr	r2, [pc, #416]	@ (800556c <HAL_DMA_Abort+0x450>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d03b      	beq.n	8005446 <HAL_DMA_Abort+0x32a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a67      	ldr	r2, [pc, #412]	@ (8005570 <HAL_DMA_Abort+0x454>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d036      	beq.n	8005446 <HAL_DMA_Abort+0x32a>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a65      	ldr	r2, [pc, #404]	@ (8005574 <HAL_DMA_Abort+0x458>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d031      	beq.n	8005446 <HAL_DMA_Abort+0x32a>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a64      	ldr	r2, [pc, #400]	@ (8005578 <HAL_DMA_Abort+0x45c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d02c      	beq.n	8005446 <HAL_DMA_Abort+0x32a>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a62      	ldr	r2, [pc, #392]	@ (800557c <HAL_DMA_Abort+0x460>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d027      	beq.n	8005446 <HAL_DMA_Abort+0x32a>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a61      	ldr	r2, [pc, #388]	@ (8005580 <HAL_DMA_Abort+0x464>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d022      	beq.n	8005446 <HAL_DMA_Abort+0x32a>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a5f      	ldr	r2, [pc, #380]	@ (8005584 <HAL_DMA_Abort+0x468>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d01d      	beq.n	8005446 <HAL_DMA_Abort+0x32a>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a5e      	ldr	r2, [pc, #376]	@ (8005588 <HAL_DMA_Abort+0x46c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d018      	beq.n	8005446 <HAL_DMA_Abort+0x32a>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a5c      	ldr	r2, [pc, #368]	@ (800558c <HAL_DMA_Abort+0x470>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d013      	beq.n	8005446 <HAL_DMA_Abort+0x32a>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a5b      	ldr	r2, [pc, #364]	@ (8005590 <HAL_DMA_Abort+0x474>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d00e      	beq.n	8005446 <HAL_DMA_Abort+0x32a>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a59      	ldr	r2, [pc, #356]	@ (8005594 <HAL_DMA_Abort+0x478>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d009      	beq.n	8005446 <HAL_DMA_Abort+0x32a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a58      	ldr	r2, [pc, #352]	@ (8005598 <HAL_DMA_Abort+0x47c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d004      	beq.n	8005446 <HAL_DMA_Abort+0x32a>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a56      	ldr	r2, [pc, #344]	@ (800559c <HAL_DMA_Abort+0x480>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d108      	bne.n	8005458 <HAL_DMA_Abort+0x33c>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0201 	bic.w	r2, r2, #1
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	e007      	b.n	8005468 <HAL_DMA_Abort+0x34c>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0201 	bic.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005468:	e013      	b.n	8005492 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800546a:	f7fd fc7f 	bl	8002d6c <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b05      	cmp	r3, #5
 8005476:	d90c      	bls.n	8005492 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2220      	movs	r2, #32
 800547c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2203      	movs	r2, #3
 8005482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e12d      	b.n	80056ee <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1e5      	bne.n	800546a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a2f      	ldr	r2, [pc, #188]	@ (8005560 <HAL_DMA_Abort+0x444>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d04a      	beq.n	800553e <HAL_DMA_Abort+0x422>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a2d      	ldr	r2, [pc, #180]	@ (8005564 <HAL_DMA_Abort+0x448>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d045      	beq.n	800553e <HAL_DMA_Abort+0x422>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a2c      	ldr	r2, [pc, #176]	@ (8005568 <HAL_DMA_Abort+0x44c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d040      	beq.n	800553e <HAL_DMA_Abort+0x422>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a2a      	ldr	r2, [pc, #168]	@ (800556c <HAL_DMA_Abort+0x450>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d03b      	beq.n	800553e <HAL_DMA_Abort+0x422>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a29      	ldr	r2, [pc, #164]	@ (8005570 <HAL_DMA_Abort+0x454>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d036      	beq.n	800553e <HAL_DMA_Abort+0x422>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a27      	ldr	r2, [pc, #156]	@ (8005574 <HAL_DMA_Abort+0x458>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d031      	beq.n	800553e <HAL_DMA_Abort+0x422>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a26      	ldr	r2, [pc, #152]	@ (8005578 <HAL_DMA_Abort+0x45c>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d02c      	beq.n	800553e <HAL_DMA_Abort+0x422>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a24      	ldr	r2, [pc, #144]	@ (800557c <HAL_DMA_Abort+0x460>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d027      	beq.n	800553e <HAL_DMA_Abort+0x422>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a23      	ldr	r2, [pc, #140]	@ (8005580 <HAL_DMA_Abort+0x464>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d022      	beq.n	800553e <HAL_DMA_Abort+0x422>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a21      	ldr	r2, [pc, #132]	@ (8005584 <HAL_DMA_Abort+0x468>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d01d      	beq.n	800553e <HAL_DMA_Abort+0x422>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a20      	ldr	r2, [pc, #128]	@ (8005588 <HAL_DMA_Abort+0x46c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d018      	beq.n	800553e <HAL_DMA_Abort+0x422>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a1e      	ldr	r2, [pc, #120]	@ (800558c <HAL_DMA_Abort+0x470>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d013      	beq.n	800553e <HAL_DMA_Abort+0x422>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a1d      	ldr	r2, [pc, #116]	@ (8005590 <HAL_DMA_Abort+0x474>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d00e      	beq.n	800553e <HAL_DMA_Abort+0x422>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a1b      	ldr	r2, [pc, #108]	@ (8005594 <HAL_DMA_Abort+0x478>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d009      	beq.n	800553e <HAL_DMA_Abort+0x422>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a1a      	ldr	r2, [pc, #104]	@ (8005598 <HAL_DMA_Abort+0x47c>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d004      	beq.n	800553e <HAL_DMA_Abort+0x422>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a18      	ldr	r2, [pc, #96]	@ (800559c <HAL_DMA_Abort+0x480>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d101      	bne.n	8005542 <HAL_DMA_Abort+0x426>
 800553e:	2301      	movs	r3, #1
 8005540:	e000      	b.n	8005544 <HAL_DMA_Abort+0x428>
 8005542:	2300      	movs	r3, #0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d02b      	beq.n	80055a0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800554c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005552:	f003 031f 	and.w	r3, r3, #31
 8005556:	223f      	movs	r2, #63	@ 0x3f
 8005558:	409a      	lsls	r2, r3
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	609a      	str	r2, [r3, #8]
 800555e:	e02a      	b.n	80055b6 <HAL_DMA_Abort+0x49a>
 8005560:	40020010 	.word	0x40020010
 8005564:	40020028 	.word	0x40020028
 8005568:	40020040 	.word	0x40020040
 800556c:	40020058 	.word	0x40020058
 8005570:	40020070 	.word	0x40020070
 8005574:	40020088 	.word	0x40020088
 8005578:	400200a0 	.word	0x400200a0
 800557c:	400200b8 	.word	0x400200b8
 8005580:	40020410 	.word	0x40020410
 8005584:	40020428 	.word	0x40020428
 8005588:	40020440 	.word	0x40020440
 800558c:	40020458 	.word	0x40020458
 8005590:	40020470 	.word	0x40020470
 8005594:	40020488 	.word	0x40020488
 8005598:	400204a0 	.word	0x400204a0
 800559c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055aa:	f003 031f 	and.w	r3, r3, #31
 80055ae:	2201      	movs	r2, #1
 80055b0:	409a      	lsls	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a4f      	ldr	r2, [pc, #316]	@ (80056f8 <HAL_DMA_Abort+0x5dc>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d072      	beq.n	80056a6 <HAL_DMA_Abort+0x58a>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a4d      	ldr	r2, [pc, #308]	@ (80056fc <HAL_DMA_Abort+0x5e0>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d06d      	beq.n	80056a6 <HAL_DMA_Abort+0x58a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a4c      	ldr	r2, [pc, #304]	@ (8005700 <HAL_DMA_Abort+0x5e4>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d068      	beq.n	80056a6 <HAL_DMA_Abort+0x58a>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a4a      	ldr	r2, [pc, #296]	@ (8005704 <HAL_DMA_Abort+0x5e8>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d063      	beq.n	80056a6 <HAL_DMA_Abort+0x58a>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a49      	ldr	r2, [pc, #292]	@ (8005708 <HAL_DMA_Abort+0x5ec>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d05e      	beq.n	80056a6 <HAL_DMA_Abort+0x58a>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a47      	ldr	r2, [pc, #284]	@ (800570c <HAL_DMA_Abort+0x5f0>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d059      	beq.n	80056a6 <HAL_DMA_Abort+0x58a>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a46      	ldr	r2, [pc, #280]	@ (8005710 <HAL_DMA_Abort+0x5f4>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d054      	beq.n	80056a6 <HAL_DMA_Abort+0x58a>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a44      	ldr	r2, [pc, #272]	@ (8005714 <HAL_DMA_Abort+0x5f8>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d04f      	beq.n	80056a6 <HAL_DMA_Abort+0x58a>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a43      	ldr	r2, [pc, #268]	@ (8005718 <HAL_DMA_Abort+0x5fc>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d04a      	beq.n	80056a6 <HAL_DMA_Abort+0x58a>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a41      	ldr	r2, [pc, #260]	@ (800571c <HAL_DMA_Abort+0x600>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d045      	beq.n	80056a6 <HAL_DMA_Abort+0x58a>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a40      	ldr	r2, [pc, #256]	@ (8005720 <HAL_DMA_Abort+0x604>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d040      	beq.n	80056a6 <HAL_DMA_Abort+0x58a>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a3e      	ldr	r2, [pc, #248]	@ (8005724 <HAL_DMA_Abort+0x608>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d03b      	beq.n	80056a6 <HAL_DMA_Abort+0x58a>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a3d      	ldr	r2, [pc, #244]	@ (8005728 <HAL_DMA_Abort+0x60c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d036      	beq.n	80056a6 <HAL_DMA_Abort+0x58a>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a3b      	ldr	r2, [pc, #236]	@ (800572c <HAL_DMA_Abort+0x610>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d031      	beq.n	80056a6 <HAL_DMA_Abort+0x58a>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a3a      	ldr	r2, [pc, #232]	@ (8005730 <HAL_DMA_Abort+0x614>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d02c      	beq.n	80056a6 <HAL_DMA_Abort+0x58a>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a38      	ldr	r2, [pc, #224]	@ (8005734 <HAL_DMA_Abort+0x618>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d027      	beq.n	80056a6 <HAL_DMA_Abort+0x58a>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a37      	ldr	r2, [pc, #220]	@ (8005738 <HAL_DMA_Abort+0x61c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d022      	beq.n	80056a6 <HAL_DMA_Abort+0x58a>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a35      	ldr	r2, [pc, #212]	@ (800573c <HAL_DMA_Abort+0x620>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d01d      	beq.n	80056a6 <HAL_DMA_Abort+0x58a>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a34      	ldr	r2, [pc, #208]	@ (8005740 <HAL_DMA_Abort+0x624>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d018      	beq.n	80056a6 <HAL_DMA_Abort+0x58a>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a32      	ldr	r2, [pc, #200]	@ (8005744 <HAL_DMA_Abort+0x628>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d013      	beq.n	80056a6 <HAL_DMA_Abort+0x58a>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a31      	ldr	r2, [pc, #196]	@ (8005748 <HAL_DMA_Abort+0x62c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d00e      	beq.n	80056a6 <HAL_DMA_Abort+0x58a>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a2f      	ldr	r2, [pc, #188]	@ (800574c <HAL_DMA_Abort+0x630>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d009      	beq.n	80056a6 <HAL_DMA_Abort+0x58a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a2e      	ldr	r2, [pc, #184]	@ (8005750 <HAL_DMA_Abort+0x634>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d004      	beq.n	80056a6 <HAL_DMA_Abort+0x58a>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a2c      	ldr	r2, [pc, #176]	@ (8005754 <HAL_DMA_Abort+0x638>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d101      	bne.n	80056aa <HAL_DMA_Abort+0x58e>
 80056a6:	2301      	movs	r3, #1
 80056a8:	e000      	b.n	80056ac <HAL_DMA_Abort+0x590>
 80056aa:	2300      	movs	r3, #0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d015      	beq.n	80056dc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80056b8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00c      	beq.n	80056dc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056d0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80056da:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	40020010 	.word	0x40020010
 80056fc:	40020028 	.word	0x40020028
 8005700:	40020040 	.word	0x40020040
 8005704:	40020058 	.word	0x40020058
 8005708:	40020070 	.word	0x40020070
 800570c:	40020088 	.word	0x40020088
 8005710:	400200a0 	.word	0x400200a0
 8005714:	400200b8 	.word	0x400200b8
 8005718:	40020410 	.word	0x40020410
 800571c:	40020428 	.word	0x40020428
 8005720:	40020440 	.word	0x40020440
 8005724:	40020458 	.word	0x40020458
 8005728:	40020470 	.word	0x40020470
 800572c:	40020488 	.word	0x40020488
 8005730:	400204a0 	.word	0x400204a0
 8005734:	400204b8 	.word	0x400204b8
 8005738:	58025408 	.word	0x58025408
 800573c:	5802541c 	.word	0x5802541c
 8005740:	58025430 	.word	0x58025430
 8005744:	58025444 	.word	0x58025444
 8005748:	58025458 	.word	0x58025458
 800574c:	5802546c 	.word	0x5802546c
 8005750:	58025480 	.word	0x58025480
 8005754:	58025494 	.word	0x58025494

08005758 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e237      	b.n	8005bda <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b02      	cmp	r3, #2
 8005774:	d004      	beq.n	8005780 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2280      	movs	r2, #128	@ 0x80
 800577a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e22c      	b.n	8005bda <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a5c      	ldr	r2, [pc, #368]	@ (80058f8 <HAL_DMA_Abort_IT+0x1a0>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d04a      	beq.n	8005820 <HAL_DMA_Abort_IT+0xc8>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a5b      	ldr	r2, [pc, #364]	@ (80058fc <HAL_DMA_Abort_IT+0x1a4>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d045      	beq.n	8005820 <HAL_DMA_Abort_IT+0xc8>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a59      	ldr	r2, [pc, #356]	@ (8005900 <HAL_DMA_Abort_IT+0x1a8>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d040      	beq.n	8005820 <HAL_DMA_Abort_IT+0xc8>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a58      	ldr	r2, [pc, #352]	@ (8005904 <HAL_DMA_Abort_IT+0x1ac>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d03b      	beq.n	8005820 <HAL_DMA_Abort_IT+0xc8>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a56      	ldr	r2, [pc, #344]	@ (8005908 <HAL_DMA_Abort_IT+0x1b0>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d036      	beq.n	8005820 <HAL_DMA_Abort_IT+0xc8>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a55      	ldr	r2, [pc, #340]	@ (800590c <HAL_DMA_Abort_IT+0x1b4>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d031      	beq.n	8005820 <HAL_DMA_Abort_IT+0xc8>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a53      	ldr	r2, [pc, #332]	@ (8005910 <HAL_DMA_Abort_IT+0x1b8>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d02c      	beq.n	8005820 <HAL_DMA_Abort_IT+0xc8>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a52      	ldr	r2, [pc, #328]	@ (8005914 <HAL_DMA_Abort_IT+0x1bc>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d027      	beq.n	8005820 <HAL_DMA_Abort_IT+0xc8>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a50      	ldr	r2, [pc, #320]	@ (8005918 <HAL_DMA_Abort_IT+0x1c0>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d022      	beq.n	8005820 <HAL_DMA_Abort_IT+0xc8>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a4f      	ldr	r2, [pc, #316]	@ (800591c <HAL_DMA_Abort_IT+0x1c4>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d01d      	beq.n	8005820 <HAL_DMA_Abort_IT+0xc8>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a4d      	ldr	r2, [pc, #308]	@ (8005920 <HAL_DMA_Abort_IT+0x1c8>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d018      	beq.n	8005820 <HAL_DMA_Abort_IT+0xc8>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a4c      	ldr	r2, [pc, #304]	@ (8005924 <HAL_DMA_Abort_IT+0x1cc>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d013      	beq.n	8005820 <HAL_DMA_Abort_IT+0xc8>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a4a      	ldr	r2, [pc, #296]	@ (8005928 <HAL_DMA_Abort_IT+0x1d0>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00e      	beq.n	8005820 <HAL_DMA_Abort_IT+0xc8>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a49      	ldr	r2, [pc, #292]	@ (800592c <HAL_DMA_Abort_IT+0x1d4>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d009      	beq.n	8005820 <HAL_DMA_Abort_IT+0xc8>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a47      	ldr	r2, [pc, #284]	@ (8005930 <HAL_DMA_Abort_IT+0x1d8>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d004      	beq.n	8005820 <HAL_DMA_Abort_IT+0xc8>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a46      	ldr	r2, [pc, #280]	@ (8005934 <HAL_DMA_Abort_IT+0x1dc>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d101      	bne.n	8005824 <HAL_DMA_Abort_IT+0xcc>
 8005820:	2301      	movs	r3, #1
 8005822:	e000      	b.n	8005826 <HAL_DMA_Abort_IT+0xce>
 8005824:	2300      	movs	r3, #0
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 8086 	beq.w	8005938 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2204      	movs	r2, #4
 8005830:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a2f      	ldr	r2, [pc, #188]	@ (80058f8 <HAL_DMA_Abort_IT+0x1a0>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d04a      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x17c>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a2e      	ldr	r2, [pc, #184]	@ (80058fc <HAL_DMA_Abort_IT+0x1a4>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d045      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x17c>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a2c      	ldr	r2, [pc, #176]	@ (8005900 <HAL_DMA_Abort_IT+0x1a8>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d040      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x17c>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a2b      	ldr	r2, [pc, #172]	@ (8005904 <HAL_DMA_Abort_IT+0x1ac>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d03b      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x17c>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a29      	ldr	r2, [pc, #164]	@ (8005908 <HAL_DMA_Abort_IT+0x1b0>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d036      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x17c>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a28      	ldr	r2, [pc, #160]	@ (800590c <HAL_DMA_Abort_IT+0x1b4>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d031      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x17c>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a26      	ldr	r2, [pc, #152]	@ (8005910 <HAL_DMA_Abort_IT+0x1b8>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d02c      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x17c>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a25      	ldr	r2, [pc, #148]	@ (8005914 <HAL_DMA_Abort_IT+0x1bc>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d027      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x17c>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a23      	ldr	r2, [pc, #140]	@ (8005918 <HAL_DMA_Abort_IT+0x1c0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d022      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x17c>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a22      	ldr	r2, [pc, #136]	@ (800591c <HAL_DMA_Abort_IT+0x1c4>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d01d      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x17c>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a20      	ldr	r2, [pc, #128]	@ (8005920 <HAL_DMA_Abort_IT+0x1c8>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d018      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x17c>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a1f      	ldr	r2, [pc, #124]	@ (8005924 <HAL_DMA_Abort_IT+0x1cc>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d013      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x17c>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005928 <HAL_DMA_Abort_IT+0x1d0>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00e      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x17c>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a1c      	ldr	r2, [pc, #112]	@ (800592c <HAL_DMA_Abort_IT+0x1d4>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d009      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x17c>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a1a      	ldr	r2, [pc, #104]	@ (8005930 <HAL_DMA_Abort_IT+0x1d8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d004      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x17c>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a19      	ldr	r2, [pc, #100]	@ (8005934 <HAL_DMA_Abort_IT+0x1dc>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d108      	bne.n	80058e6 <HAL_DMA_Abort_IT+0x18e>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 0201 	bic.w	r2, r2, #1
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	e178      	b.n	8005bd8 <HAL_DMA_Abort_IT+0x480>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 0201 	bic.w	r2, r2, #1
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	e16f      	b.n	8005bd8 <HAL_DMA_Abort_IT+0x480>
 80058f8:	40020010 	.word	0x40020010
 80058fc:	40020028 	.word	0x40020028
 8005900:	40020040 	.word	0x40020040
 8005904:	40020058 	.word	0x40020058
 8005908:	40020070 	.word	0x40020070
 800590c:	40020088 	.word	0x40020088
 8005910:	400200a0 	.word	0x400200a0
 8005914:	400200b8 	.word	0x400200b8
 8005918:	40020410 	.word	0x40020410
 800591c:	40020428 	.word	0x40020428
 8005920:	40020440 	.word	0x40020440
 8005924:	40020458 	.word	0x40020458
 8005928:	40020470 	.word	0x40020470
 800592c:	40020488 	.word	0x40020488
 8005930:	400204a0 	.word	0x400204a0
 8005934:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 020e 	bic.w	r2, r2, #14
 8005946:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a6c      	ldr	r2, [pc, #432]	@ (8005b00 <HAL_DMA_Abort_IT+0x3a8>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d04a      	beq.n	80059e8 <HAL_DMA_Abort_IT+0x290>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a6b      	ldr	r2, [pc, #428]	@ (8005b04 <HAL_DMA_Abort_IT+0x3ac>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d045      	beq.n	80059e8 <HAL_DMA_Abort_IT+0x290>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a69      	ldr	r2, [pc, #420]	@ (8005b08 <HAL_DMA_Abort_IT+0x3b0>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d040      	beq.n	80059e8 <HAL_DMA_Abort_IT+0x290>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a68      	ldr	r2, [pc, #416]	@ (8005b0c <HAL_DMA_Abort_IT+0x3b4>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d03b      	beq.n	80059e8 <HAL_DMA_Abort_IT+0x290>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a66      	ldr	r2, [pc, #408]	@ (8005b10 <HAL_DMA_Abort_IT+0x3b8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d036      	beq.n	80059e8 <HAL_DMA_Abort_IT+0x290>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a65      	ldr	r2, [pc, #404]	@ (8005b14 <HAL_DMA_Abort_IT+0x3bc>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d031      	beq.n	80059e8 <HAL_DMA_Abort_IT+0x290>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a63      	ldr	r2, [pc, #396]	@ (8005b18 <HAL_DMA_Abort_IT+0x3c0>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d02c      	beq.n	80059e8 <HAL_DMA_Abort_IT+0x290>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a62      	ldr	r2, [pc, #392]	@ (8005b1c <HAL_DMA_Abort_IT+0x3c4>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d027      	beq.n	80059e8 <HAL_DMA_Abort_IT+0x290>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a60      	ldr	r2, [pc, #384]	@ (8005b20 <HAL_DMA_Abort_IT+0x3c8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d022      	beq.n	80059e8 <HAL_DMA_Abort_IT+0x290>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a5f      	ldr	r2, [pc, #380]	@ (8005b24 <HAL_DMA_Abort_IT+0x3cc>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d01d      	beq.n	80059e8 <HAL_DMA_Abort_IT+0x290>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a5d      	ldr	r2, [pc, #372]	@ (8005b28 <HAL_DMA_Abort_IT+0x3d0>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d018      	beq.n	80059e8 <HAL_DMA_Abort_IT+0x290>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a5c      	ldr	r2, [pc, #368]	@ (8005b2c <HAL_DMA_Abort_IT+0x3d4>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d013      	beq.n	80059e8 <HAL_DMA_Abort_IT+0x290>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a5a      	ldr	r2, [pc, #360]	@ (8005b30 <HAL_DMA_Abort_IT+0x3d8>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d00e      	beq.n	80059e8 <HAL_DMA_Abort_IT+0x290>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a59      	ldr	r2, [pc, #356]	@ (8005b34 <HAL_DMA_Abort_IT+0x3dc>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d009      	beq.n	80059e8 <HAL_DMA_Abort_IT+0x290>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a57      	ldr	r2, [pc, #348]	@ (8005b38 <HAL_DMA_Abort_IT+0x3e0>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d004      	beq.n	80059e8 <HAL_DMA_Abort_IT+0x290>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a56      	ldr	r2, [pc, #344]	@ (8005b3c <HAL_DMA_Abort_IT+0x3e4>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d108      	bne.n	80059fa <HAL_DMA_Abort_IT+0x2a2>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 0201 	bic.w	r2, r2, #1
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	e007      	b.n	8005a0a <HAL_DMA_Abort_IT+0x2b2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0201 	bic.w	r2, r2, #1
 8005a08:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a3c      	ldr	r2, [pc, #240]	@ (8005b00 <HAL_DMA_Abort_IT+0x3a8>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d072      	beq.n	8005afa <HAL_DMA_Abort_IT+0x3a2>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a3a      	ldr	r2, [pc, #232]	@ (8005b04 <HAL_DMA_Abort_IT+0x3ac>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d06d      	beq.n	8005afa <HAL_DMA_Abort_IT+0x3a2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a39      	ldr	r2, [pc, #228]	@ (8005b08 <HAL_DMA_Abort_IT+0x3b0>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d068      	beq.n	8005afa <HAL_DMA_Abort_IT+0x3a2>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a37      	ldr	r2, [pc, #220]	@ (8005b0c <HAL_DMA_Abort_IT+0x3b4>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d063      	beq.n	8005afa <HAL_DMA_Abort_IT+0x3a2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a36      	ldr	r2, [pc, #216]	@ (8005b10 <HAL_DMA_Abort_IT+0x3b8>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d05e      	beq.n	8005afa <HAL_DMA_Abort_IT+0x3a2>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a34      	ldr	r2, [pc, #208]	@ (8005b14 <HAL_DMA_Abort_IT+0x3bc>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d059      	beq.n	8005afa <HAL_DMA_Abort_IT+0x3a2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a33      	ldr	r2, [pc, #204]	@ (8005b18 <HAL_DMA_Abort_IT+0x3c0>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d054      	beq.n	8005afa <HAL_DMA_Abort_IT+0x3a2>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a31      	ldr	r2, [pc, #196]	@ (8005b1c <HAL_DMA_Abort_IT+0x3c4>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d04f      	beq.n	8005afa <HAL_DMA_Abort_IT+0x3a2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a30      	ldr	r2, [pc, #192]	@ (8005b20 <HAL_DMA_Abort_IT+0x3c8>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d04a      	beq.n	8005afa <HAL_DMA_Abort_IT+0x3a2>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a2e      	ldr	r2, [pc, #184]	@ (8005b24 <HAL_DMA_Abort_IT+0x3cc>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d045      	beq.n	8005afa <HAL_DMA_Abort_IT+0x3a2>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a2d      	ldr	r2, [pc, #180]	@ (8005b28 <HAL_DMA_Abort_IT+0x3d0>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d040      	beq.n	8005afa <HAL_DMA_Abort_IT+0x3a2>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a2b      	ldr	r2, [pc, #172]	@ (8005b2c <HAL_DMA_Abort_IT+0x3d4>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d03b      	beq.n	8005afa <HAL_DMA_Abort_IT+0x3a2>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a2a      	ldr	r2, [pc, #168]	@ (8005b30 <HAL_DMA_Abort_IT+0x3d8>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d036      	beq.n	8005afa <HAL_DMA_Abort_IT+0x3a2>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a28      	ldr	r2, [pc, #160]	@ (8005b34 <HAL_DMA_Abort_IT+0x3dc>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d031      	beq.n	8005afa <HAL_DMA_Abort_IT+0x3a2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a27      	ldr	r2, [pc, #156]	@ (8005b38 <HAL_DMA_Abort_IT+0x3e0>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d02c      	beq.n	8005afa <HAL_DMA_Abort_IT+0x3a2>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a25      	ldr	r2, [pc, #148]	@ (8005b3c <HAL_DMA_Abort_IT+0x3e4>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d027      	beq.n	8005afa <HAL_DMA_Abort_IT+0x3a2>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a24      	ldr	r2, [pc, #144]	@ (8005b40 <HAL_DMA_Abort_IT+0x3e8>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d022      	beq.n	8005afa <HAL_DMA_Abort_IT+0x3a2>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a22      	ldr	r2, [pc, #136]	@ (8005b44 <HAL_DMA_Abort_IT+0x3ec>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d01d      	beq.n	8005afa <HAL_DMA_Abort_IT+0x3a2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a21      	ldr	r2, [pc, #132]	@ (8005b48 <HAL_DMA_Abort_IT+0x3f0>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d018      	beq.n	8005afa <HAL_DMA_Abort_IT+0x3a2>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a1f      	ldr	r2, [pc, #124]	@ (8005b4c <HAL_DMA_Abort_IT+0x3f4>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d013      	beq.n	8005afa <HAL_DMA_Abort_IT+0x3a2>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8005b50 <HAL_DMA_Abort_IT+0x3f8>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d00e      	beq.n	8005afa <HAL_DMA_Abort_IT+0x3a2>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a1c      	ldr	r2, [pc, #112]	@ (8005b54 <HAL_DMA_Abort_IT+0x3fc>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d009      	beq.n	8005afa <HAL_DMA_Abort_IT+0x3a2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a1b      	ldr	r2, [pc, #108]	@ (8005b58 <HAL_DMA_Abort_IT+0x400>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d004      	beq.n	8005afa <HAL_DMA_Abort_IT+0x3a2>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a19      	ldr	r2, [pc, #100]	@ (8005b5c <HAL_DMA_Abort_IT+0x404>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d132      	bne.n	8005b60 <HAL_DMA_Abort_IT+0x408>
 8005afa:	2301      	movs	r3, #1
 8005afc:	e031      	b.n	8005b62 <HAL_DMA_Abort_IT+0x40a>
 8005afe:	bf00      	nop
 8005b00:	40020010 	.word	0x40020010
 8005b04:	40020028 	.word	0x40020028
 8005b08:	40020040 	.word	0x40020040
 8005b0c:	40020058 	.word	0x40020058
 8005b10:	40020070 	.word	0x40020070
 8005b14:	40020088 	.word	0x40020088
 8005b18:	400200a0 	.word	0x400200a0
 8005b1c:	400200b8 	.word	0x400200b8
 8005b20:	40020410 	.word	0x40020410
 8005b24:	40020428 	.word	0x40020428
 8005b28:	40020440 	.word	0x40020440
 8005b2c:	40020458 	.word	0x40020458
 8005b30:	40020470 	.word	0x40020470
 8005b34:	40020488 	.word	0x40020488
 8005b38:	400204a0 	.word	0x400204a0
 8005b3c:	400204b8 	.word	0x400204b8
 8005b40:	58025408 	.word	0x58025408
 8005b44:	5802541c 	.word	0x5802541c
 8005b48:	58025430 	.word	0x58025430
 8005b4c:	58025444 	.word	0x58025444
 8005b50:	58025458 	.word	0x58025458
 8005b54:	5802546c 	.word	0x5802546c
 8005b58:	58025480 	.word	0x58025480
 8005b5c:	58025494 	.word	0x58025494
 8005b60:	2300      	movs	r3, #0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d028      	beq.n	8005bb8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b74:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b7a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b80:	f003 031f 	and.w	r3, r3, #31
 8005b84:	2201      	movs	r2, #1
 8005b86:	409a      	lsls	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005b94:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00c      	beq.n	8005bb8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ba8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005bac:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005bb6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop

08005be4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08a      	sub	sp, #40	@ 0x28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005bf0:	4b67      	ldr	r3, [pc, #412]	@ (8005d90 <HAL_DMA_IRQHandler+0x1ac>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a67      	ldr	r2, [pc, #412]	@ (8005d94 <HAL_DMA_IRQHandler+0x1b0>)
 8005bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfa:	0a9b      	lsrs	r3, r3, #10
 8005bfc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c02:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c08:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a5f      	ldr	r2, [pc, #380]	@ (8005d98 <HAL_DMA_IRQHandler+0x1b4>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d04a      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0xd2>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a5d      	ldr	r2, [pc, #372]	@ (8005d9c <HAL_DMA_IRQHandler+0x1b8>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d045      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0xd2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a5c      	ldr	r2, [pc, #368]	@ (8005da0 <HAL_DMA_IRQHandler+0x1bc>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d040      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0xd2>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a5a      	ldr	r2, [pc, #360]	@ (8005da4 <HAL_DMA_IRQHandler+0x1c0>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d03b      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0xd2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a59      	ldr	r2, [pc, #356]	@ (8005da8 <HAL_DMA_IRQHandler+0x1c4>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d036      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0xd2>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a57      	ldr	r2, [pc, #348]	@ (8005dac <HAL_DMA_IRQHandler+0x1c8>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d031      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0xd2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a56      	ldr	r2, [pc, #344]	@ (8005db0 <HAL_DMA_IRQHandler+0x1cc>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d02c      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0xd2>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a54      	ldr	r2, [pc, #336]	@ (8005db4 <HAL_DMA_IRQHandler+0x1d0>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d027      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0xd2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a53      	ldr	r2, [pc, #332]	@ (8005db8 <HAL_DMA_IRQHandler+0x1d4>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d022      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0xd2>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a51      	ldr	r2, [pc, #324]	@ (8005dbc <HAL_DMA_IRQHandler+0x1d8>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d01d      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0xd2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a50      	ldr	r2, [pc, #320]	@ (8005dc0 <HAL_DMA_IRQHandler+0x1dc>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d018      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0xd2>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a4e      	ldr	r2, [pc, #312]	@ (8005dc4 <HAL_DMA_IRQHandler+0x1e0>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d013      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0xd2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a4d      	ldr	r2, [pc, #308]	@ (8005dc8 <HAL_DMA_IRQHandler+0x1e4>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d00e      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0xd2>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a4b      	ldr	r2, [pc, #300]	@ (8005dcc <HAL_DMA_IRQHandler+0x1e8>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d009      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0xd2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a4a      	ldr	r2, [pc, #296]	@ (8005dd0 <HAL_DMA_IRQHandler+0x1ec>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d004      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0xd2>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a48      	ldr	r2, [pc, #288]	@ (8005dd4 <HAL_DMA_IRQHandler+0x1f0>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d101      	bne.n	8005cba <HAL_DMA_IRQHandler+0xd6>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e000      	b.n	8005cbc <HAL_DMA_IRQHandler+0xd8>
 8005cba:	2300      	movs	r3, #0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 842b 	beq.w	8006518 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cc6:	f003 031f 	and.w	r3, r3, #31
 8005cca:	2208      	movs	r2, #8
 8005ccc:	409a      	lsls	r2, r3
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 80a2 	beq.w	8005e1c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a2e      	ldr	r2, [pc, #184]	@ (8005d98 <HAL_DMA_IRQHandler+0x1b4>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d04a      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x194>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a2d      	ldr	r2, [pc, #180]	@ (8005d9c <HAL_DMA_IRQHandler+0x1b8>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d045      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x194>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a2b      	ldr	r2, [pc, #172]	@ (8005da0 <HAL_DMA_IRQHandler+0x1bc>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d040      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x194>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a2a      	ldr	r2, [pc, #168]	@ (8005da4 <HAL_DMA_IRQHandler+0x1c0>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d03b      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x194>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a28      	ldr	r2, [pc, #160]	@ (8005da8 <HAL_DMA_IRQHandler+0x1c4>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d036      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x194>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a27      	ldr	r2, [pc, #156]	@ (8005dac <HAL_DMA_IRQHandler+0x1c8>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d031      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x194>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a25      	ldr	r2, [pc, #148]	@ (8005db0 <HAL_DMA_IRQHandler+0x1cc>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d02c      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x194>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a24      	ldr	r2, [pc, #144]	@ (8005db4 <HAL_DMA_IRQHandler+0x1d0>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d027      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x194>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a22      	ldr	r2, [pc, #136]	@ (8005db8 <HAL_DMA_IRQHandler+0x1d4>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d022      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x194>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a21      	ldr	r2, [pc, #132]	@ (8005dbc <HAL_DMA_IRQHandler+0x1d8>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d01d      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x194>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a1f      	ldr	r2, [pc, #124]	@ (8005dc0 <HAL_DMA_IRQHandler+0x1dc>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d018      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x194>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a1e      	ldr	r2, [pc, #120]	@ (8005dc4 <HAL_DMA_IRQHandler+0x1e0>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d013      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x194>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a1c      	ldr	r2, [pc, #112]	@ (8005dc8 <HAL_DMA_IRQHandler+0x1e4>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00e      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x194>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a1b      	ldr	r2, [pc, #108]	@ (8005dcc <HAL_DMA_IRQHandler+0x1e8>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d009      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x194>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a19      	ldr	r2, [pc, #100]	@ (8005dd0 <HAL_DMA_IRQHandler+0x1ec>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d004      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x194>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a18      	ldr	r2, [pc, #96]	@ (8005dd4 <HAL_DMA_IRQHandler+0x1f0>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d12f      	bne.n	8005dd8 <HAL_DMA_IRQHandler+0x1f4>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0304 	and.w	r3, r3, #4
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	bf14      	ite	ne
 8005d86:	2301      	movne	r3, #1
 8005d88:	2300      	moveq	r3, #0
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	e02e      	b.n	8005dec <HAL_DMA_IRQHandler+0x208>
 8005d8e:	bf00      	nop
 8005d90:	24000004 	.word	0x24000004
 8005d94:	1b4e81b5 	.word	0x1b4e81b5
 8005d98:	40020010 	.word	0x40020010
 8005d9c:	40020028 	.word	0x40020028
 8005da0:	40020040 	.word	0x40020040
 8005da4:	40020058 	.word	0x40020058
 8005da8:	40020070 	.word	0x40020070
 8005dac:	40020088 	.word	0x40020088
 8005db0:	400200a0 	.word	0x400200a0
 8005db4:	400200b8 	.word	0x400200b8
 8005db8:	40020410 	.word	0x40020410
 8005dbc:	40020428 	.word	0x40020428
 8005dc0:	40020440 	.word	0x40020440
 8005dc4:	40020458 	.word	0x40020458
 8005dc8:	40020470 	.word	0x40020470
 8005dcc:	40020488 	.word	0x40020488
 8005dd0:	400204a0 	.word	0x400204a0
 8005dd4:	400204b8 	.word	0x400204b8
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0308 	and.w	r3, r3, #8
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	bf14      	ite	ne
 8005de6:	2301      	movne	r3, #1
 8005de8:	2300      	moveq	r3, #0
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d015      	beq.n	8005e1c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 0204 	bic.w	r2, r2, #4
 8005dfe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e04:	f003 031f 	and.w	r3, r3, #31
 8005e08:	2208      	movs	r2, #8
 8005e0a:	409a      	lsls	r2, r3
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e14:	f043 0201 	orr.w	r2, r3, #1
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e20:	f003 031f 	and.w	r3, r3, #31
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	fa22 f303 	lsr.w	r3, r2, r3
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d06e      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a69      	ldr	r2, [pc, #420]	@ (8005fdc <HAL_DMA_IRQHandler+0x3f8>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d04a      	beq.n	8005ed2 <HAL_DMA_IRQHandler+0x2ee>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a67      	ldr	r2, [pc, #412]	@ (8005fe0 <HAL_DMA_IRQHandler+0x3fc>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d045      	beq.n	8005ed2 <HAL_DMA_IRQHandler+0x2ee>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a66      	ldr	r2, [pc, #408]	@ (8005fe4 <HAL_DMA_IRQHandler+0x400>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d040      	beq.n	8005ed2 <HAL_DMA_IRQHandler+0x2ee>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a64      	ldr	r2, [pc, #400]	@ (8005fe8 <HAL_DMA_IRQHandler+0x404>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d03b      	beq.n	8005ed2 <HAL_DMA_IRQHandler+0x2ee>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a63      	ldr	r2, [pc, #396]	@ (8005fec <HAL_DMA_IRQHandler+0x408>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d036      	beq.n	8005ed2 <HAL_DMA_IRQHandler+0x2ee>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a61      	ldr	r2, [pc, #388]	@ (8005ff0 <HAL_DMA_IRQHandler+0x40c>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d031      	beq.n	8005ed2 <HAL_DMA_IRQHandler+0x2ee>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a60      	ldr	r2, [pc, #384]	@ (8005ff4 <HAL_DMA_IRQHandler+0x410>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d02c      	beq.n	8005ed2 <HAL_DMA_IRQHandler+0x2ee>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a5e      	ldr	r2, [pc, #376]	@ (8005ff8 <HAL_DMA_IRQHandler+0x414>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d027      	beq.n	8005ed2 <HAL_DMA_IRQHandler+0x2ee>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a5d      	ldr	r2, [pc, #372]	@ (8005ffc <HAL_DMA_IRQHandler+0x418>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d022      	beq.n	8005ed2 <HAL_DMA_IRQHandler+0x2ee>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a5b      	ldr	r2, [pc, #364]	@ (8006000 <HAL_DMA_IRQHandler+0x41c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d01d      	beq.n	8005ed2 <HAL_DMA_IRQHandler+0x2ee>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a5a      	ldr	r2, [pc, #360]	@ (8006004 <HAL_DMA_IRQHandler+0x420>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d018      	beq.n	8005ed2 <HAL_DMA_IRQHandler+0x2ee>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a58      	ldr	r2, [pc, #352]	@ (8006008 <HAL_DMA_IRQHandler+0x424>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d013      	beq.n	8005ed2 <HAL_DMA_IRQHandler+0x2ee>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a57      	ldr	r2, [pc, #348]	@ (800600c <HAL_DMA_IRQHandler+0x428>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d00e      	beq.n	8005ed2 <HAL_DMA_IRQHandler+0x2ee>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a55      	ldr	r2, [pc, #340]	@ (8006010 <HAL_DMA_IRQHandler+0x42c>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d009      	beq.n	8005ed2 <HAL_DMA_IRQHandler+0x2ee>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a54      	ldr	r2, [pc, #336]	@ (8006014 <HAL_DMA_IRQHandler+0x430>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d004      	beq.n	8005ed2 <HAL_DMA_IRQHandler+0x2ee>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a52      	ldr	r2, [pc, #328]	@ (8006018 <HAL_DMA_IRQHandler+0x434>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d10a      	bne.n	8005ee8 <HAL_DMA_IRQHandler+0x304>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	bf14      	ite	ne
 8005ee0:	2301      	movne	r3, #1
 8005ee2:	2300      	moveq	r3, #0
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	e003      	b.n	8005ef0 <HAL_DMA_IRQHandler+0x30c>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2300      	movs	r3, #0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00d      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ef8:	f003 031f 	and.w	r3, r3, #31
 8005efc:	2201      	movs	r2, #1
 8005efe:	409a      	lsls	r2, r3
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f08:	f043 0202 	orr.w	r2, r3, #2
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f14:	f003 031f 	and.w	r3, r3, #31
 8005f18:	2204      	movs	r2, #4
 8005f1a:	409a      	lsls	r2, r3
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 808f 	beq.w	8006044 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a2c      	ldr	r2, [pc, #176]	@ (8005fdc <HAL_DMA_IRQHandler+0x3f8>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d04a      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0x3e2>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a2a      	ldr	r2, [pc, #168]	@ (8005fe0 <HAL_DMA_IRQHandler+0x3fc>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d045      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0x3e2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a29      	ldr	r2, [pc, #164]	@ (8005fe4 <HAL_DMA_IRQHandler+0x400>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d040      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0x3e2>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a27      	ldr	r2, [pc, #156]	@ (8005fe8 <HAL_DMA_IRQHandler+0x404>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d03b      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0x3e2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a26      	ldr	r2, [pc, #152]	@ (8005fec <HAL_DMA_IRQHandler+0x408>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d036      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0x3e2>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a24      	ldr	r2, [pc, #144]	@ (8005ff0 <HAL_DMA_IRQHandler+0x40c>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d031      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0x3e2>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a23      	ldr	r2, [pc, #140]	@ (8005ff4 <HAL_DMA_IRQHandler+0x410>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d02c      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0x3e2>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a21      	ldr	r2, [pc, #132]	@ (8005ff8 <HAL_DMA_IRQHandler+0x414>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d027      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0x3e2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a20      	ldr	r2, [pc, #128]	@ (8005ffc <HAL_DMA_IRQHandler+0x418>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d022      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0x3e2>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a1e      	ldr	r2, [pc, #120]	@ (8006000 <HAL_DMA_IRQHandler+0x41c>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d01d      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0x3e2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a1d      	ldr	r2, [pc, #116]	@ (8006004 <HAL_DMA_IRQHandler+0x420>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d018      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0x3e2>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a1b      	ldr	r2, [pc, #108]	@ (8006008 <HAL_DMA_IRQHandler+0x424>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d013      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0x3e2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a1a      	ldr	r2, [pc, #104]	@ (800600c <HAL_DMA_IRQHandler+0x428>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d00e      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0x3e2>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a18      	ldr	r2, [pc, #96]	@ (8006010 <HAL_DMA_IRQHandler+0x42c>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d009      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0x3e2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a17      	ldr	r2, [pc, #92]	@ (8006014 <HAL_DMA_IRQHandler+0x430>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d004      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0x3e2>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a15      	ldr	r2, [pc, #84]	@ (8006018 <HAL_DMA_IRQHandler+0x434>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d12a      	bne.n	800601c <HAL_DMA_IRQHandler+0x438>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0302 	and.w	r3, r3, #2
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	bf14      	ite	ne
 8005fd4:	2301      	movne	r3, #1
 8005fd6:	2300      	moveq	r3, #0
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	e023      	b.n	8006024 <HAL_DMA_IRQHandler+0x440>
 8005fdc:	40020010 	.word	0x40020010
 8005fe0:	40020028 	.word	0x40020028
 8005fe4:	40020040 	.word	0x40020040
 8005fe8:	40020058 	.word	0x40020058
 8005fec:	40020070 	.word	0x40020070
 8005ff0:	40020088 	.word	0x40020088
 8005ff4:	400200a0 	.word	0x400200a0
 8005ff8:	400200b8 	.word	0x400200b8
 8005ffc:	40020410 	.word	0x40020410
 8006000:	40020428 	.word	0x40020428
 8006004:	40020440 	.word	0x40020440
 8006008:	40020458 	.word	0x40020458
 800600c:	40020470 	.word	0x40020470
 8006010:	40020488 	.word	0x40020488
 8006014:	400204a0 	.word	0x400204a0
 8006018:	400204b8 	.word	0x400204b8
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2300      	movs	r3, #0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00d      	beq.n	8006044 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800602c:	f003 031f 	and.w	r3, r3, #31
 8006030:	2204      	movs	r2, #4
 8006032:	409a      	lsls	r2, r3
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800603c:	f043 0204 	orr.w	r2, r3, #4
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006048:	f003 031f 	and.w	r3, r3, #31
 800604c:	2210      	movs	r2, #16
 800604e:	409a      	lsls	r2, r3
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	4013      	ands	r3, r2
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 80a6 	beq.w	80061a6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a85      	ldr	r2, [pc, #532]	@ (8006274 <HAL_DMA_IRQHandler+0x690>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d04a      	beq.n	80060fa <HAL_DMA_IRQHandler+0x516>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a83      	ldr	r2, [pc, #524]	@ (8006278 <HAL_DMA_IRQHandler+0x694>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d045      	beq.n	80060fa <HAL_DMA_IRQHandler+0x516>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a82      	ldr	r2, [pc, #520]	@ (800627c <HAL_DMA_IRQHandler+0x698>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d040      	beq.n	80060fa <HAL_DMA_IRQHandler+0x516>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a80      	ldr	r2, [pc, #512]	@ (8006280 <HAL_DMA_IRQHandler+0x69c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d03b      	beq.n	80060fa <HAL_DMA_IRQHandler+0x516>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a7f      	ldr	r2, [pc, #508]	@ (8006284 <HAL_DMA_IRQHandler+0x6a0>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d036      	beq.n	80060fa <HAL_DMA_IRQHandler+0x516>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a7d      	ldr	r2, [pc, #500]	@ (8006288 <HAL_DMA_IRQHandler+0x6a4>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d031      	beq.n	80060fa <HAL_DMA_IRQHandler+0x516>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a7c      	ldr	r2, [pc, #496]	@ (800628c <HAL_DMA_IRQHandler+0x6a8>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d02c      	beq.n	80060fa <HAL_DMA_IRQHandler+0x516>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a7a      	ldr	r2, [pc, #488]	@ (8006290 <HAL_DMA_IRQHandler+0x6ac>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d027      	beq.n	80060fa <HAL_DMA_IRQHandler+0x516>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a79      	ldr	r2, [pc, #484]	@ (8006294 <HAL_DMA_IRQHandler+0x6b0>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d022      	beq.n	80060fa <HAL_DMA_IRQHandler+0x516>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a77      	ldr	r2, [pc, #476]	@ (8006298 <HAL_DMA_IRQHandler+0x6b4>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d01d      	beq.n	80060fa <HAL_DMA_IRQHandler+0x516>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a76      	ldr	r2, [pc, #472]	@ (800629c <HAL_DMA_IRQHandler+0x6b8>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d018      	beq.n	80060fa <HAL_DMA_IRQHandler+0x516>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a74      	ldr	r2, [pc, #464]	@ (80062a0 <HAL_DMA_IRQHandler+0x6bc>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d013      	beq.n	80060fa <HAL_DMA_IRQHandler+0x516>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a73      	ldr	r2, [pc, #460]	@ (80062a4 <HAL_DMA_IRQHandler+0x6c0>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d00e      	beq.n	80060fa <HAL_DMA_IRQHandler+0x516>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a71      	ldr	r2, [pc, #452]	@ (80062a8 <HAL_DMA_IRQHandler+0x6c4>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d009      	beq.n	80060fa <HAL_DMA_IRQHandler+0x516>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a70      	ldr	r2, [pc, #448]	@ (80062ac <HAL_DMA_IRQHandler+0x6c8>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d004      	beq.n	80060fa <HAL_DMA_IRQHandler+0x516>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a6e      	ldr	r2, [pc, #440]	@ (80062b0 <HAL_DMA_IRQHandler+0x6cc>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d10a      	bne.n	8006110 <HAL_DMA_IRQHandler+0x52c>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0308 	and.w	r3, r3, #8
 8006104:	2b00      	cmp	r3, #0
 8006106:	bf14      	ite	ne
 8006108:	2301      	movne	r3, #1
 800610a:	2300      	moveq	r3, #0
 800610c:	b2db      	uxtb	r3, r3
 800610e:	e009      	b.n	8006124 <HAL_DMA_IRQHandler+0x540>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0304 	and.w	r3, r3, #4
 800611a:	2b00      	cmp	r3, #0
 800611c:	bf14      	ite	ne
 800611e:	2301      	movne	r3, #1
 8006120:	2300      	moveq	r3, #0
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	d03e      	beq.n	80061a6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800612c:	f003 031f 	and.w	r3, r3, #31
 8006130:	2210      	movs	r2, #16
 8006132:	409a      	lsls	r2, r3
 8006134:	6a3b      	ldr	r3, [r7, #32]
 8006136:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d018      	beq.n	8006178 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d108      	bne.n	8006166 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006158:	2b00      	cmp	r3, #0
 800615a:	d024      	beq.n	80061a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	4798      	blx	r3
 8006164:	e01f      	b.n	80061a6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800616a:	2b00      	cmp	r3, #0
 800616c:	d01b      	beq.n	80061a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	4798      	blx	r3
 8006176:	e016      	b.n	80061a6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006182:	2b00      	cmp	r3, #0
 8006184:	d107      	bne.n	8006196 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 0208 	bic.w	r2, r2, #8
 8006194:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800619a:	2b00      	cmp	r3, #0
 800619c:	d003      	beq.n	80061a6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061aa:	f003 031f 	and.w	r3, r3, #31
 80061ae:	2220      	movs	r2, #32
 80061b0:	409a      	lsls	r2, r3
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	4013      	ands	r3, r2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f000 8110 	beq.w	80063dc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a2c      	ldr	r2, [pc, #176]	@ (8006274 <HAL_DMA_IRQHandler+0x690>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d04a      	beq.n	800625c <HAL_DMA_IRQHandler+0x678>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a2b      	ldr	r2, [pc, #172]	@ (8006278 <HAL_DMA_IRQHandler+0x694>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d045      	beq.n	800625c <HAL_DMA_IRQHandler+0x678>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a29      	ldr	r2, [pc, #164]	@ (800627c <HAL_DMA_IRQHandler+0x698>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d040      	beq.n	800625c <HAL_DMA_IRQHandler+0x678>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a28      	ldr	r2, [pc, #160]	@ (8006280 <HAL_DMA_IRQHandler+0x69c>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d03b      	beq.n	800625c <HAL_DMA_IRQHandler+0x678>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a26      	ldr	r2, [pc, #152]	@ (8006284 <HAL_DMA_IRQHandler+0x6a0>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d036      	beq.n	800625c <HAL_DMA_IRQHandler+0x678>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a25      	ldr	r2, [pc, #148]	@ (8006288 <HAL_DMA_IRQHandler+0x6a4>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d031      	beq.n	800625c <HAL_DMA_IRQHandler+0x678>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a23      	ldr	r2, [pc, #140]	@ (800628c <HAL_DMA_IRQHandler+0x6a8>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d02c      	beq.n	800625c <HAL_DMA_IRQHandler+0x678>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a22      	ldr	r2, [pc, #136]	@ (8006290 <HAL_DMA_IRQHandler+0x6ac>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d027      	beq.n	800625c <HAL_DMA_IRQHandler+0x678>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a20      	ldr	r2, [pc, #128]	@ (8006294 <HAL_DMA_IRQHandler+0x6b0>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d022      	beq.n	800625c <HAL_DMA_IRQHandler+0x678>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a1f      	ldr	r2, [pc, #124]	@ (8006298 <HAL_DMA_IRQHandler+0x6b4>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d01d      	beq.n	800625c <HAL_DMA_IRQHandler+0x678>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a1d      	ldr	r2, [pc, #116]	@ (800629c <HAL_DMA_IRQHandler+0x6b8>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d018      	beq.n	800625c <HAL_DMA_IRQHandler+0x678>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a1c      	ldr	r2, [pc, #112]	@ (80062a0 <HAL_DMA_IRQHandler+0x6bc>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d013      	beq.n	800625c <HAL_DMA_IRQHandler+0x678>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a1a      	ldr	r2, [pc, #104]	@ (80062a4 <HAL_DMA_IRQHandler+0x6c0>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d00e      	beq.n	800625c <HAL_DMA_IRQHandler+0x678>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a19      	ldr	r2, [pc, #100]	@ (80062a8 <HAL_DMA_IRQHandler+0x6c4>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d009      	beq.n	800625c <HAL_DMA_IRQHandler+0x678>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a17      	ldr	r2, [pc, #92]	@ (80062ac <HAL_DMA_IRQHandler+0x6c8>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d004      	beq.n	800625c <HAL_DMA_IRQHandler+0x678>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a16      	ldr	r2, [pc, #88]	@ (80062b0 <HAL_DMA_IRQHandler+0x6cc>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d12b      	bne.n	80062b4 <HAL_DMA_IRQHandler+0x6d0>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0310 	and.w	r3, r3, #16
 8006266:	2b00      	cmp	r3, #0
 8006268:	bf14      	ite	ne
 800626a:	2301      	movne	r3, #1
 800626c:	2300      	moveq	r3, #0
 800626e:	b2db      	uxtb	r3, r3
 8006270:	e02a      	b.n	80062c8 <HAL_DMA_IRQHandler+0x6e4>
 8006272:	bf00      	nop
 8006274:	40020010 	.word	0x40020010
 8006278:	40020028 	.word	0x40020028
 800627c:	40020040 	.word	0x40020040
 8006280:	40020058 	.word	0x40020058
 8006284:	40020070 	.word	0x40020070
 8006288:	40020088 	.word	0x40020088
 800628c:	400200a0 	.word	0x400200a0
 8006290:	400200b8 	.word	0x400200b8
 8006294:	40020410 	.word	0x40020410
 8006298:	40020428 	.word	0x40020428
 800629c:	40020440 	.word	0x40020440
 80062a0:	40020458 	.word	0x40020458
 80062a4:	40020470 	.word	0x40020470
 80062a8:	40020488 	.word	0x40020488
 80062ac:	400204a0 	.word	0x400204a0
 80062b0:	400204b8 	.word	0x400204b8
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	bf14      	ite	ne
 80062c2:	2301      	movne	r3, #1
 80062c4:	2300      	moveq	r3, #0
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 8087 	beq.w	80063dc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062d2:	f003 031f 	and.w	r3, r3, #31
 80062d6:	2220      	movs	r2, #32
 80062d8:	409a      	lsls	r2, r3
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b04      	cmp	r3, #4
 80062e8:	d139      	bne.n	800635e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f022 0216 	bic.w	r2, r2, #22
 80062f8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	695a      	ldr	r2, [r3, #20]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006308:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630e:	2b00      	cmp	r3, #0
 8006310:	d103      	bne.n	800631a <HAL_DMA_IRQHandler+0x736>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006316:	2b00      	cmp	r3, #0
 8006318:	d007      	beq.n	800632a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0208 	bic.w	r2, r2, #8
 8006328:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800632e:	f003 031f 	and.w	r3, r3, #31
 8006332:	223f      	movs	r2, #63	@ 0x3f
 8006334:	409a      	lsls	r2, r3
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 834a 	beq.w	80069e8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	4798      	blx	r3
          }
          return;
 800635c:	e344      	b.n	80069e8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d018      	beq.n	800639e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d108      	bne.n	800638c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800637e:	2b00      	cmp	r3, #0
 8006380:	d02c      	beq.n	80063dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	4798      	blx	r3
 800638a:	e027      	b.n	80063dc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006390:	2b00      	cmp	r3, #0
 8006392:	d023      	beq.n	80063dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	4798      	blx	r3
 800639c:	e01e      	b.n	80063dc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10f      	bne.n	80063cc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0210 	bic.w	r2, r2, #16
 80063ba:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 8306 	beq.w	80069f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f000 8088 	beq.w	8006504 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2204      	movs	r2, #4
 80063f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a7a      	ldr	r2, [pc, #488]	@ (80065ec <HAL_DMA_IRQHandler+0xa08>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d04a      	beq.n	800649c <HAL_DMA_IRQHandler+0x8b8>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a79      	ldr	r2, [pc, #484]	@ (80065f0 <HAL_DMA_IRQHandler+0xa0c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d045      	beq.n	800649c <HAL_DMA_IRQHandler+0x8b8>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a77      	ldr	r2, [pc, #476]	@ (80065f4 <HAL_DMA_IRQHandler+0xa10>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d040      	beq.n	800649c <HAL_DMA_IRQHandler+0x8b8>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a76      	ldr	r2, [pc, #472]	@ (80065f8 <HAL_DMA_IRQHandler+0xa14>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d03b      	beq.n	800649c <HAL_DMA_IRQHandler+0x8b8>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a74      	ldr	r2, [pc, #464]	@ (80065fc <HAL_DMA_IRQHandler+0xa18>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d036      	beq.n	800649c <HAL_DMA_IRQHandler+0x8b8>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a73      	ldr	r2, [pc, #460]	@ (8006600 <HAL_DMA_IRQHandler+0xa1c>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d031      	beq.n	800649c <HAL_DMA_IRQHandler+0x8b8>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a71      	ldr	r2, [pc, #452]	@ (8006604 <HAL_DMA_IRQHandler+0xa20>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d02c      	beq.n	800649c <HAL_DMA_IRQHandler+0x8b8>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a70      	ldr	r2, [pc, #448]	@ (8006608 <HAL_DMA_IRQHandler+0xa24>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d027      	beq.n	800649c <HAL_DMA_IRQHandler+0x8b8>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a6e      	ldr	r2, [pc, #440]	@ (800660c <HAL_DMA_IRQHandler+0xa28>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d022      	beq.n	800649c <HAL_DMA_IRQHandler+0x8b8>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a6d      	ldr	r2, [pc, #436]	@ (8006610 <HAL_DMA_IRQHandler+0xa2c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d01d      	beq.n	800649c <HAL_DMA_IRQHandler+0x8b8>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a6b      	ldr	r2, [pc, #428]	@ (8006614 <HAL_DMA_IRQHandler+0xa30>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d018      	beq.n	800649c <HAL_DMA_IRQHandler+0x8b8>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a6a      	ldr	r2, [pc, #424]	@ (8006618 <HAL_DMA_IRQHandler+0xa34>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d013      	beq.n	800649c <HAL_DMA_IRQHandler+0x8b8>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a68      	ldr	r2, [pc, #416]	@ (800661c <HAL_DMA_IRQHandler+0xa38>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d00e      	beq.n	800649c <HAL_DMA_IRQHandler+0x8b8>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a67      	ldr	r2, [pc, #412]	@ (8006620 <HAL_DMA_IRQHandler+0xa3c>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d009      	beq.n	800649c <HAL_DMA_IRQHandler+0x8b8>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a65      	ldr	r2, [pc, #404]	@ (8006624 <HAL_DMA_IRQHandler+0xa40>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d004      	beq.n	800649c <HAL_DMA_IRQHandler+0x8b8>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a64      	ldr	r2, [pc, #400]	@ (8006628 <HAL_DMA_IRQHandler+0xa44>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d108      	bne.n	80064ae <HAL_DMA_IRQHandler+0x8ca>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 0201 	bic.w	r2, r2, #1
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	e007      	b.n	80064be <HAL_DMA_IRQHandler+0x8da>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 0201 	bic.w	r2, r2, #1
 80064bc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	3301      	adds	r3, #1
 80064c2:	60fb      	str	r3, [r7, #12]
 80064c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d307      	bcc.n	80064da <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1f2      	bne.n	80064be <HAL_DMA_IRQHandler+0x8da>
 80064d8:	e000      	b.n	80064dc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80064da:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d004      	beq.n	80064f4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2203      	movs	r2, #3
 80064ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80064f2:	e003      	b.n	80064fc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 8272 	beq.w	80069f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	4798      	blx	r3
 8006516:	e26c      	b.n	80069f2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a43      	ldr	r2, [pc, #268]	@ (800662c <HAL_DMA_IRQHandler+0xa48>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d022      	beq.n	8006568 <HAL_DMA_IRQHandler+0x984>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a42      	ldr	r2, [pc, #264]	@ (8006630 <HAL_DMA_IRQHandler+0xa4c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d01d      	beq.n	8006568 <HAL_DMA_IRQHandler+0x984>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a40      	ldr	r2, [pc, #256]	@ (8006634 <HAL_DMA_IRQHandler+0xa50>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d018      	beq.n	8006568 <HAL_DMA_IRQHandler+0x984>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a3f      	ldr	r2, [pc, #252]	@ (8006638 <HAL_DMA_IRQHandler+0xa54>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d013      	beq.n	8006568 <HAL_DMA_IRQHandler+0x984>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a3d      	ldr	r2, [pc, #244]	@ (800663c <HAL_DMA_IRQHandler+0xa58>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d00e      	beq.n	8006568 <HAL_DMA_IRQHandler+0x984>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a3c      	ldr	r2, [pc, #240]	@ (8006640 <HAL_DMA_IRQHandler+0xa5c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d009      	beq.n	8006568 <HAL_DMA_IRQHandler+0x984>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a3a      	ldr	r2, [pc, #232]	@ (8006644 <HAL_DMA_IRQHandler+0xa60>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d004      	beq.n	8006568 <HAL_DMA_IRQHandler+0x984>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a39      	ldr	r2, [pc, #228]	@ (8006648 <HAL_DMA_IRQHandler+0xa64>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d101      	bne.n	800656c <HAL_DMA_IRQHandler+0x988>
 8006568:	2301      	movs	r3, #1
 800656a:	e000      	b.n	800656e <HAL_DMA_IRQHandler+0x98a>
 800656c:	2300      	movs	r3, #0
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 823f 	beq.w	80069f2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006580:	f003 031f 	and.w	r3, r3, #31
 8006584:	2204      	movs	r2, #4
 8006586:	409a      	lsls	r2, r3
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	4013      	ands	r3, r2
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 80cd 	beq.w	800672c <HAL_DMA_IRQHandler+0xb48>
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f003 0304 	and.w	r3, r3, #4
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 80c7 	beq.w	800672c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065a2:	f003 031f 	and.w	r3, r3, #31
 80065a6:	2204      	movs	r2, #4
 80065a8:	409a      	lsls	r2, r3
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d049      	beq.n	800664c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d109      	bne.n	80065d6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 8210 	beq.w	80069ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065d4:	e20a      	b.n	80069ec <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 8206 	beq.w	80069ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065e8:	e200      	b.n	80069ec <HAL_DMA_IRQHandler+0xe08>
 80065ea:	bf00      	nop
 80065ec:	40020010 	.word	0x40020010
 80065f0:	40020028 	.word	0x40020028
 80065f4:	40020040 	.word	0x40020040
 80065f8:	40020058 	.word	0x40020058
 80065fc:	40020070 	.word	0x40020070
 8006600:	40020088 	.word	0x40020088
 8006604:	400200a0 	.word	0x400200a0
 8006608:	400200b8 	.word	0x400200b8
 800660c:	40020410 	.word	0x40020410
 8006610:	40020428 	.word	0x40020428
 8006614:	40020440 	.word	0x40020440
 8006618:	40020458 	.word	0x40020458
 800661c:	40020470 	.word	0x40020470
 8006620:	40020488 	.word	0x40020488
 8006624:	400204a0 	.word	0x400204a0
 8006628:	400204b8 	.word	0x400204b8
 800662c:	58025408 	.word	0x58025408
 8006630:	5802541c 	.word	0x5802541c
 8006634:	58025430 	.word	0x58025430
 8006638:	58025444 	.word	0x58025444
 800663c:	58025458 	.word	0x58025458
 8006640:	5802546c 	.word	0x5802546c
 8006644:	58025480 	.word	0x58025480
 8006648:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	f003 0320 	and.w	r3, r3, #32
 8006652:	2b00      	cmp	r3, #0
 8006654:	d160      	bne.n	8006718 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a7f      	ldr	r2, [pc, #508]	@ (8006858 <HAL_DMA_IRQHandler+0xc74>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d04a      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xb12>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a7d      	ldr	r2, [pc, #500]	@ (800685c <HAL_DMA_IRQHandler+0xc78>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d045      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xb12>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a7c      	ldr	r2, [pc, #496]	@ (8006860 <HAL_DMA_IRQHandler+0xc7c>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d040      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xb12>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a7a      	ldr	r2, [pc, #488]	@ (8006864 <HAL_DMA_IRQHandler+0xc80>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d03b      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xb12>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a79      	ldr	r2, [pc, #484]	@ (8006868 <HAL_DMA_IRQHandler+0xc84>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d036      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xb12>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a77      	ldr	r2, [pc, #476]	@ (800686c <HAL_DMA_IRQHandler+0xc88>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d031      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xb12>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a76      	ldr	r2, [pc, #472]	@ (8006870 <HAL_DMA_IRQHandler+0xc8c>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d02c      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xb12>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a74      	ldr	r2, [pc, #464]	@ (8006874 <HAL_DMA_IRQHandler+0xc90>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d027      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xb12>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a73      	ldr	r2, [pc, #460]	@ (8006878 <HAL_DMA_IRQHandler+0xc94>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d022      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xb12>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a71      	ldr	r2, [pc, #452]	@ (800687c <HAL_DMA_IRQHandler+0xc98>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d01d      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xb12>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a70      	ldr	r2, [pc, #448]	@ (8006880 <HAL_DMA_IRQHandler+0xc9c>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d018      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xb12>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a6e      	ldr	r2, [pc, #440]	@ (8006884 <HAL_DMA_IRQHandler+0xca0>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d013      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xb12>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a6d      	ldr	r2, [pc, #436]	@ (8006888 <HAL_DMA_IRQHandler+0xca4>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d00e      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xb12>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a6b      	ldr	r2, [pc, #428]	@ (800688c <HAL_DMA_IRQHandler+0xca8>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d009      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xb12>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a6a      	ldr	r2, [pc, #424]	@ (8006890 <HAL_DMA_IRQHandler+0xcac>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d004      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xb12>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a68      	ldr	r2, [pc, #416]	@ (8006894 <HAL_DMA_IRQHandler+0xcb0>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d108      	bne.n	8006708 <HAL_DMA_IRQHandler+0xb24>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f022 0208 	bic.w	r2, r2, #8
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	e007      	b.n	8006718 <HAL_DMA_IRQHandler+0xb34>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 0204 	bic.w	r2, r2, #4
 8006716:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 8165 	beq.w	80069ec <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800672a:	e15f      	b.n	80069ec <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006730:	f003 031f 	and.w	r3, r3, #31
 8006734:	2202      	movs	r2, #2
 8006736:	409a      	lsls	r2, r3
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	4013      	ands	r3, r2
 800673c:	2b00      	cmp	r3, #0
 800673e:	f000 80c5 	beq.w	80068cc <HAL_DMA_IRQHandler+0xce8>
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f003 0302 	and.w	r3, r3, #2
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 80bf 	beq.w	80068cc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006752:	f003 031f 	and.w	r3, r3, #31
 8006756:	2202      	movs	r2, #2
 8006758:	409a      	lsls	r2, r3
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d018      	beq.n	800679a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d109      	bne.n	8006786 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 813a 	beq.w	80069f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006784:	e134      	b.n	80069f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800678a:	2b00      	cmp	r3, #0
 800678c:	f000 8130 	beq.w	80069f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006798:	e12a      	b.n	80069f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f003 0320 	and.w	r3, r3, #32
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f040 8089 	bne.w	80068b8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a2b      	ldr	r2, [pc, #172]	@ (8006858 <HAL_DMA_IRQHandler+0xc74>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d04a      	beq.n	8006846 <HAL_DMA_IRQHandler+0xc62>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a29      	ldr	r2, [pc, #164]	@ (800685c <HAL_DMA_IRQHandler+0xc78>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d045      	beq.n	8006846 <HAL_DMA_IRQHandler+0xc62>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a28      	ldr	r2, [pc, #160]	@ (8006860 <HAL_DMA_IRQHandler+0xc7c>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d040      	beq.n	8006846 <HAL_DMA_IRQHandler+0xc62>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a26      	ldr	r2, [pc, #152]	@ (8006864 <HAL_DMA_IRQHandler+0xc80>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d03b      	beq.n	8006846 <HAL_DMA_IRQHandler+0xc62>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a25      	ldr	r2, [pc, #148]	@ (8006868 <HAL_DMA_IRQHandler+0xc84>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d036      	beq.n	8006846 <HAL_DMA_IRQHandler+0xc62>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a23      	ldr	r2, [pc, #140]	@ (800686c <HAL_DMA_IRQHandler+0xc88>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d031      	beq.n	8006846 <HAL_DMA_IRQHandler+0xc62>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a22      	ldr	r2, [pc, #136]	@ (8006870 <HAL_DMA_IRQHandler+0xc8c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d02c      	beq.n	8006846 <HAL_DMA_IRQHandler+0xc62>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a20      	ldr	r2, [pc, #128]	@ (8006874 <HAL_DMA_IRQHandler+0xc90>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d027      	beq.n	8006846 <HAL_DMA_IRQHandler+0xc62>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a1f      	ldr	r2, [pc, #124]	@ (8006878 <HAL_DMA_IRQHandler+0xc94>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d022      	beq.n	8006846 <HAL_DMA_IRQHandler+0xc62>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a1d      	ldr	r2, [pc, #116]	@ (800687c <HAL_DMA_IRQHandler+0xc98>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d01d      	beq.n	8006846 <HAL_DMA_IRQHandler+0xc62>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a1c      	ldr	r2, [pc, #112]	@ (8006880 <HAL_DMA_IRQHandler+0xc9c>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d018      	beq.n	8006846 <HAL_DMA_IRQHandler+0xc62>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a1a      	ldr	r2, [pc, #104]	@ (8006884 <HAL_DMA_IRQHandler+0xca0>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d013      	beq.n	8006846 <HAL_DMA_IRQHandler+0xc62>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a19      	ldr	r2, [pc, #100]	@ (8006888 <HAL_DMA_IRQHandler+0xca4>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d00e      	beq.n	8006846 <HAL_DMA_IRQHandler+0xc62>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a17      	ldr	r2, [pc, #92]	@ (800688c <HAL_DMA_IRQHandler+0xca8>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d009      	beq.n	8006846 <HAL_DMA_IRQHandler+0xc62>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a16      	ldr	r2, [pc, #88]	@ (8006890 <HAL_DMA_IRQHandler+0xcac>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d004      	beq.n	8006846 <HAL_DMA_IRQHandler+0xc62>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a14      	ldr	r2, [pc, #80]	@ (8006894 <HAL_DMA_IRQHandler+0xcb0>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d128      	bne.n	8006898 <HAL_DMA_IRQHandler+0xcb4>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f022 0214 	bic.w	r2, r2, #20
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	e027      	b.n	80068a8 <HAL_DMA_IRQHandler+0xcc4>
 8006858:	40020010 	.word	0x40020010
 800685c:	40020028 	.word	0x40020028
 8006860:	40020040 	.word	0x40020040
 8006864:	40020058 	.word	0x40020058
 8006868:	40020070 	.word	0x40020070
 800686c:	40020088 	.word	0x40020088
 8006870:	400200a0 	.word	0x400200a0
 8006874:	400200b8 	.word	0x400200b8
 8006878:	40020410 	.word	0x40020410
 800687c:	40020428 	.word	0x40020428
 8006880:	40020440 	.word	0x40020440
 8006884:	40020458 	.word	0x40020458
 8006888:	40020470 	.word	0x40020470
 800688c:	40020488 	.word	0x40020488
 8006890:	400204a0 	.word	0x400204a0
 8006894:	400204b8 	.word	0x400204b8
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f022 020a 	bic.w	r2, r2, #10
 80068a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 8097 	beq.w	80069f0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068ca:	e091      	b.n	80069f0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068d0:	f003 031f 	and.w	r3, r3, #31
 80068d4:	2208      	movs	r2, #8
 80068d6:	409a      	lsls	r2, r3
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	4013      	ands	r3, r2
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 8088 	beq.w	80069f2 <HAL_DMA_IRQHandler+0xe0e>
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	f003 0308 	and.w	r3, r3, #8
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f000 8082 	beq.w	80069f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a41      	ldr	r2, [pc, #260]	@ (80069f8 <HAL_DMA_IRQHandler+0xe14>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d04a      	beq.n	800698e <HAL_DMA_IRQHandler+0xdaa>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a3f      	ldr	r2, [pc, #252]	@ (80069fc <HAL_DMA_IRQHandler+0xe18>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d045      	beq.n	800698e <HAL_DMA_IRQHandler+0xdaa>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a3e      	ldr	r2, [pc, #248]	@ (8006a00 <HAL_DMA_IRQHandler+0xe1c>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d040      	beq.n	800698e <HAL_DMA_IRQHandler+0xdaa>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a3c      	ldr	r2, [pc, #240]	@ (8006a04 <HAL_DMA_IRQHandler+0xe20>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d03b      	beq.n	800698e <HAL_DMA_IRQHandler+0xdaa>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a3b      	ldr	r2, [pc, #236]	@ (8006a08 <HAL_DMA_IRQHandler+0xe24>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d036      	beq.n	800698e <HAL_DMA_IRQHandler+0xdaa>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a39      	ldr	r2, [pc, #228]	@ (8006a0c <HAL_DMA_IRQHandler+0xe28>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d031      	beq.n	800698e <HAL_DMA_IRQHandler+0xdaa>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a38      	ldr	r2, [pc, #224]	@ (8006a10 <HAL_DMA_IRQHandler+0xe2c>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d02c      	beq.n	800698e <HAL_DMA_IRQHandler+0xdaa>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a36      	ldr	r2, [pc, #216]	@ (8006a14 <HAL_DMA_IRQHandler+0xe30>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d027      	beq.n	800698e <HAL_DMA_IRQHandler+0xdaa>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a35      	ldr	r2, [pc, #212]	@ (8006a18 <HAL_DMA_IRQHandler+0xe34>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d022      	beq.n	800698e <HAL_DMA_IRQHandler+0xdaa>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a33      	ldr	r2, [pc, #204]	@ (8006a1c <HAL_DMA_IRQHandler+0xe38>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d01d      	beq.n	800698e <HAL_DMA_IRQHandler+0xdaa>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a32      	ldr	r2, [pc, #200]	@ (8006a20 <HAL_DMA_IRQHandler+0xe3c>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d018      	beq.n	800698e <HAL_DMA_IRQHandler+0xdaa>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a30      	ldr	r2, [pc, #192]	@ (8006a24 <HAL_DMA_IRQHandler+0xe40>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d013      	beq.n	800698e <HAL_DMA_IRQHandler+0xdaa>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a2f      	ldr	r2, [pc, #188]	@ (8006a28 <HAL_DMA_IRQHandler+0xe44>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d00e      	beq.n	800698e <HAL_DMA_IRQHandler+0xdaa>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a2d      	ldr	r2, [pc, #180]	@ (8006a2c <HAL_DMA_IRQHandler+0xe48>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d009      	beq.n	800698e <HAL_DMA_IRQHandler+0xdaa>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a2c      	ldr	r2, [pc, #176]	@ (8006a30 <HAL_DMA_IRQHandler+0xe4c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d004      	beq.n	800698e <HAL_DMA_IRQHandler+0xdaa>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a2a      	ldr	r2, [pc, #168]	@ (8006a34 <HAL_DMA_IRQHandler+0xe50>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d108      	bne.n	80069a0 <HAL_DMA_IRQHandler+0xdbc>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 021c 	bic.w	r2, r2, #28
 800699c:	601a      	str	r2, [r3, #0]
 800699e:	e007      	b.n	80069b0 <HAL_DMA_IRQHandler+0xdcc>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f022 020e 	bic.w	r2, r2, #14
 80069ae:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069b4:	f003 031f 	and.w	r3, r3, #31
 80069b8:	2201      	movs	r2, #1
 80069ba:	409a      	lsls	r2, r3
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d009      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	4798      	blx	r3
 80069e6:	e004      	b.n	80069f2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80069e8:	bf00      	nop
 80069ea:	e002      	b.n	80069f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069ec:	bf00      	nop
 80069ee:	e000      	b.n	80069f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069f0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80069f2:	3728      	adds	r7, #40	@ 0x28
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	40020010 	.word	0x40020010
 80069fc:	40020028 	.word	0x40020028
 8006a00:	40020040 	.word	0x40020040
 8006a04:	40020058 	.word	0x40020058
 8006a08:	40020070 	.word	0x40020070
 8006a0c:	40020088 	.word	0x40020088
 8006a10:	400200a0 	.word	0x400200a0
 8006a14:	400200b8 	.word	0x400200b8
 8006a18:	40020410 	.word	0x40020410
 8006a1c:	40020428 	.word	0x40020428
 8006a20:	40020440 	.word	0x40020440
 8006a24:	40020458 	.word	0x40020458
 8006a28:	40020470 	.word	0x40020470
 8006a2c:	40020488 	.word	0x40020488
 8006a30:	400204a0 	.word	0x400204a0
 8006a34:	400204b8 	.word	0x400204b8

08006a38 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
 8006a5c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a62:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a68:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a7f      	ldr	r2, [pc, #508]	@ (8006c6c <DMA_SetConfig+0x21c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d072      	beq.n	8006b5a <DMA_SetConfig+0x10a>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a7d      	ldr	r2, [pc, #500]	@ (8006c70 <DMA_SetConfig+0x220>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d06d      	beq.n	8006b5a <DMA_SetConfig+0x10a>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a7c      	ldr	r2, [pc, #496]	@ (8006c74 <DMA_SetConfig+0x224>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d068      	beq.n	8006b5a <DMA_SetConfig+0x10a>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a7a      	ldr	r2, [pc, #488]	@ (8006c78 <DMA_SetConfig+0x228>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d063      	beq.n	8006b5a <DMA_SetConfig+0x10a>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a79      	ldr	r2, [pc, #484]	@ (8006c7c <DMA_SetConfig+0x22c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d05e      	beq.n	8006b5a <DMA_SetConfig+0x10a>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a77      	ldr	r2, [pc, #476]	@ (8006c80 <DMA_SetConfig+0x230>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d059      	beq.n	8006b5a <DMA_SetConfig+0x10a>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a76      	ldr	r2, [pc, #472]	@ (8006c84 <DMA_SetConfig+0x234>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d054      	beq.n	8006b5a <DMA_SetConfig+0x10a>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a74      	ldr	r2, [pc, #464]	@ (8006c88 <DMA_SetConfig+0x238>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d04f      	beq.n	8006b5a <DMA_SetConfig+0x10a>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a73      	ldr	r2, [pc, #460]	@ (8006c8c <DMA_SetConfig+0x23c>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d04a      	beq.n	8006b5a <DMA_SetConfig+0x10a>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a71      	ldr	r2, [pc, #452]	@ (8006c90 <DMA_SetConfig+0x240>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d045      	beq.n	8006b5a <DMA_SetConfig+0x10a>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a70      	ldr	r2, [pc, #448]	@ (8006c94 <DMA_SetConfig+0x244>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d040      	beq.n	8006b5a <DMA_SetConfig+0x10a>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a6e      	ldr	r2, [pc, #440]	@ (8006c98 <DMA_SetConfig+0x248>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d03b      	beq.n	8006b5a <DMA_SetConfig+0x10a>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a6d      	ldr	r2, [pc, #436]	@ (8006c9c <DMA_SetConfig+0x24c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d036      	beq.n	8006b5a <DMA_SetConfig+0x10a>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a6b      	ldr	r2, [pc, #428]	@ (8006ca0 <DMA_SetConfig+0x250>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d031      	beq.n	8006b5a <DMA_SetConfig+0x10a>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a6a      	ldr	r2, [pc, #424]	@ (8006ca4 <DMA_SetConfig+0x254>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d02c      	beq.n	8006b5a <DMA_SetConfig+0x10a>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a68      	ldr	r2, [pc, #416]	@ (8006ca8 <DMA_SetConfig+0x258>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d027      	beq.n	8006b5a <DMA_SetConfig+0x10a>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a67      	ldr	r2, [pc, #412]	@ (8006cac <DMA_SetConfig+0x25c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d022      	beq.n	8006b5a <DMA_SetConfig+0x10a>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a65      	ldr	r2, [pc, #404]	@ (8006cb0 <DMA_SetConfig+0x260>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d01d      	beq.n	8006b5a <DMA_SetConfig+0x10a>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a64      	ldr	r2, [pc, #400]	@ (8006cb4 <DMA_SetConfig+0x264>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d018      	beq.n	8006b5a <DMA_SetConfig+0x10a>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a62      	ldr	r2, [pc, #392]	@ (8006cb8 <DMA_SetConfig+0x268>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d013      	beq.n	8006b5a <DMA_SetConfig+0x10a>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a61      	ldr	r2, [pc, #388]	@ (8006cbc <DMA_SetConfig+0x26c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d00e      	beq.n	8006b5a <DMA_SetConfig+0x10a>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a5f      	ldr	r2, [pc, #380]	@ (8006cc0 <DMA_SetConfig+0x270>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d009      	beq.n	8006b5a <DMA_SetConfig+0x10a>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a5e      	ldr	r2, [pc, #376]	@ (8006cc4 <DMA_SetConfig+0x274>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d004      	beq.n	8006b5a <DMA_SetConfig+0x10a>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a5c      	ldr	r2, [pc, #368]	@ (8006cc8 <DMA_SetConfig+0x278>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d101      	bne.n	8006b5e <DMA_SetConfig+0x10e>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e000      	b.n	8006b60 <DMA_SetConfig+0x110>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00d      	beq.n	8006b80 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006b6c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d004      	beq.n	8006b80 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006b7e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a39      	ldr	r2, [pc, #228]	@ (8006c6c <DMA_SetConfig+0x21c>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d04a      	beq.n	8006c20 <DMA_SetConfig+0x1d0>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a38      	ldr	r2, [pc, #224]	@ (8006c70 <DMA_SetConfig+0x220>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d045      	beq.n	8006c20 <DMA_SetConfig+0x1d0>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a36      	ldr	r2, [pc, #216]	@ (8006c74 <DMA_SetConfig+0x224>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d040      	beq.n	8006c20 <DMA_SetConfig+0x1d0>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a35      	ldr	r2, [pc, #212]	@ (8006c78 <DMA_SetConfig+0x228>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d03b      	beq.n	8006c20 <DMA_SetConfig+0x1d0>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a33      	ldr	r2, [pc, #204]	@ (8006c7c <DMA_SetConfig+0x22c>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d036      	beq.n	8006c20 <DMA_SetConfig+0x1d0>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a32      	ldr	r2, [pc, #200]	@ (8006c80 <DMA_SetConfig+0x230>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d031      	beq.n	8006c20 <DMA_SetConfig+0x1d0>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a30      	ldr	r2, [pc, #192]	@ (8006c84 <DMA_SetConfig+0x234>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d02c      	beq.n	8006c20 <DMA_SetConfig+0x1d0>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a2f      	ldr	r2, [pc, #188]	@ (8006c88 <DMA_SetConfig+0x238>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d027      	beq.n	8006c20 <DMA_SetConfig+0x1d0>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a2d      	ldr	r2, [pc, #180]	@ (8006c8c <DMA_SetConfig+0x23c>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d022      	beq.n	8006c20 <DMA_SetConfig+0x1d0>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a2c      	ldr	r2, [pc, #176]	@ (8006c90 <DMA_SetConfig+0x240>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d01d      	beq.n	8006c20 <DMA_SetConfig+0x1d0>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a2a      	ldr	r2, [pc, #168]	@ (8006c94 <DMA_SetConfig+0x244>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d018      	beq.n	8006c20 <DMA_SetConfig+0x1d0>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a29      	ldr	r2, [pc, #164]	@ (8006c98 <DMA_SetConfig+0x248>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d013      	beq.n	8006c20 <DMA_SetConfig+0x1d0>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a27      	ldr	r2, [pc, #156]	@ (8006c9c <DMA_SetConfig+0x24c>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d00e      	beq.n	8006c20 <DMA_SetConfig+0x1d0>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a26      	ldr	r2, [pc, #152]	@ (8006ca0 <DMA_SetConfig+0x250>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d009      	beq.n	8006c20 <DMA_SetConfig+0x1d0>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a24      	ldr	r2, [pc, #144]	@ (8006ca4 <DMA_SetConfig+0x254>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d004      	beq.n	8006c20 <DMA_SetConfig+0x1d0>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a23      	ldr	r2, [pc, #140]	@ (8006ca8 <DMA_SetConfig+0x258>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d101      	bne.n	8006c24 <DMA_SetConfig+0x1d4>
 8006c20:	2301      	movs	r3, #1
 8006c22:	e000      	b.n	8006c26 <DMA_SetConfig+0x1d6>
 8006c24:	2300      	movs	r3, #0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d059      	beq.n	8006cde <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c2e:	f003 031f 	and.w	r3, r3, #31
 8006c32:	223f      	movs	r2, #63	@ 0x3f
 8006c34:	409a      	lsls	r2, r3
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006c48:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	2b40      	cmp	r3, #64	@ 0x40
 8006c58:	d138      	bne.n	8006ccc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006c6a:	e086      	b.n	8006d7a <DMA_SetConfig+0x32a>
 8006c6c:	40020010 	.word	0x40020010
 8006c70:	40020028 	.word	0x40020028
 8006c74:	40020040 	.word	0x40020040
 8006c78:	40020058 	.word	0x40020058
 8006c7c:	40020070 	.word	0x40020070
 8006c80:	40020088 	.word	0x40020088
 8006c84:	400200a0 	.word	0x400200a0
 8006c88:	400200b8 	.word	0x400200b8
 8006c8c:	40020410 	.word	0x40020410
 8006c90:	40020428 	.word	0x40020428
 8006c94:	40020440 	.word	0x40020440
 8006c98:	40020458 	.word	0x40020458
 8006c9c:	40020470 	.word	0x40020470
 8006ca0:	40020488 	.word	0x40020488
 8006ca4:	400204a0 	.word	0x400204a0
 8006ca8:	400204b8 	.word	0x400204b8
 8006cac:	58025408 	.word	0x58025408
 8006cb0:	5802541c 	.word	0x5802541c
 8006cb4:	58025430 	.word	0x58025430
 8006cb8:	58025444 	.word	0x58025444
 8006cbc:	58025458 	.word	0x58025458
 8006cc0:	5802546c 	.word	0x5802546c
 8006cc4:	58025480 	.word	0x58025480
 8006cc8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	60da      	str	r2, [r3, #12]
}
 8006cdc:	e04d      	b.n	8006d7a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a29      	ldr	r2, [pc, #164]	@ (8006d88 <DMA_SetConfig+0x338>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d022      	beq.n	8006d2e <DMA_SetConfig+0x2de>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a27      	ldr	r2, [pc, #156]	@ (8006d8c <DMA_SetConfig+0x33c>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d01d      	beq.n	8006d2e <DMA_SetConfig+0x2de>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a26      	ldr	r2, [pc, #152]	@ (8006d90 <DMA_SetConfig+0x340>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d018      	beq.n	8006d2e <DMA_SetConfig+0x2de>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a24      	ldr	r2, [pc, #144]	@ (8006d94 <DMA_SetConfig+0x344>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d013      	beq.n	8006d2e <DMA_SetConfig+0x2de>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a23      	ldr	r2, [pc, #140]	@ (8006d98 <DMA_SetConfig+0x348>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d00e      	beq.n	8006d2e <DMA_SetConfig+0x2de>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a21      	ldr	r2, [pc, #132]	@ (8006d9c <DMA_SetConfig+0x34c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d009      	beq.n	8006d2e <DMA_SetConfig+0x2de>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a20      	ldr	r2, [pc, #128]	@ (8006da0 <DMA_SetConfig+0x350>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d004      	beq.n	8006d2e <DMA_SetConfig+0x2de>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a1e      	ldr	r2, [pc, #120]	@ (8006da4 <DMA_SetConfig+0x354>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d101      	bne.n	8006d32 <DMA_SetConfig+0x2e2>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e000      	b.n	8006d34 <DMA_SetConfig+0x2e4>
 8006d32:	2300      	movs	r3, #0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d020      	beq.n	8006d7a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d3c:	f003 031f 	and.w	r3, r3, #31
 8006d40:	2201      	movs	r2, #1
 8006d42:	409a      	lsls	r2, r3
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	683a      	ldr	r2, [r7, #0]
 8006d4e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	2b40      	cmp	r3, #64	@ 0x40
 8006d56:	d108      	bne.n	8006d6a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	60da      	str	r2, [r3, #12]
}
 8006d68:	e007      	b.n	8006d7a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	60da      	str	r2, [r3, #12]
}
 8006d7a:	bf00      	nop
 8006d7c:	371c      	adds	r7, #28
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	58025408 	.word	0x58025408
 8006d8c:	5802541c 	.word	0x5802541c
 8006d90:	58025430 	.word	0x58025430
 8006d94:	58025444 	.word	0x58025444
 8006d98:	58025458 	.word	0x58025458
 8006d9c:	5802546c 	.word	0x5802546c
 8006da0:	58025480 	.word	0x58025480
 8006da4:	58025494 	.word	0x58025494

08006da8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a42      	ldr	r2, [pc, #264]	@ (8006ec0 <DMA_CalcBaseAndBitshift+0x118>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d04a      	beq.n	8006e50 <DMA_CalcBaseAndBitshift+0xa8>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a41      	ldr	r2, [pc, #260]	@ (8006ec4 <DMA_CalcBaseAndBitshift+0x11c>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d045      	beq.n	8006e50 <DMA_CalcBaseAndBitshift+0xa8>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a3f      	ldr	r2, [pc, #252]	@ (8006ec8 <DMA_CalcBaseAndBitshift+0x120>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d040      	beq.n	8006e50 <DMA_CalcBaseAndBitshift+0xa8>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a3e      	ldr	r2, [pc, #248]	@ (8006ecc <DMA_CalcBaseAndBitshift+0x124>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d03b      	beq.n	8006e50 <DMA_CalcBaseAndBitshift+0xa8>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a3c      	ldr	r2, [pc, #240]	@ (8006ed0 <DMA_CalcBaseAndBitshift+0x128>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d036      	beq.n	8006e50 <DMA_CalcBaseAndBitshift+0xa8>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a3b      	ldr	r2, [pc, #236]	@ (8006ed4 <DMA_CalcBaseAndBitshift+0x12c>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d031      	beq.n	8006e50 <DMA_CalcBaseAndBitshift+0xa8>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a39      	ldr	r2, [pc, #228]	@ (8006ed8 <DMA_CalcBaseAndBitshift+0x130>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d02c      	beq.n	8006e50 <DMA_CalcBaseAndBitshift+0xa8>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a38      	ldr	r2, [pc, #224]	@ (8006edc <DMA_CalcBaseAndBitshift+0x134>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d027      	beq.n	8006e50 <DMA_CalcBaseAndBitshift+0xa8>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a36      	ldr	r2, [pc, #216]	@ (8006ee0 <DMA_CalcBaseAndBitshift+0x138>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d022      	beq.n	8006e50 <DMA_CalcBaseAndBitshift+0xa8>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a35      	ldr	r2, [pc, #212]	@ (8006ee4 <DMA_CalcBaseAndBitshift+0x13c>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d01d      	beq.n	8006e50 <DMA_CalcBaseAndBitshift+0xa8>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a33      	ldr	r2, [pc, #204]	@ (8006ee8 <DMA_CalcBaseAndBitshift+0x140>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d018      	beq.n	8006e50 <DMA_CalcBaseAndBitshift+0xa8>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a32      	ldr	r2, [pc, #200]	@ (8006eec <DMA_CalcBaseAndBitshift+0x144>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d013      	beq.n	8006e50 <DMA_CalcBaseAndBitshift+0xa8>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a30      	ldr	r2, [pc, #192]	@ (8006ef0 <DMA_CalcBaseAndBitshift+0x148>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d00e      	beq.n	8006e50 <DMA_CalcBaseAndBitshift+0xa8>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a2f      	ldr	r2, [pc, #188]	@ (8006ef4 <DMA_CalcBaseAndBitshift+0x14c>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d009      	beq.n	8006e50 <DMA_CalcBaseAndBitshift+0xa8>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a2d      	ldr	r2, [pc, #180]	@ (8006ef8 <DMA_CalcBaseAndBitshift+0x150>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d004      	beq.n	8006e50 <DMA_CalcBaseAndBitshift+0xa8>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a2c      	ldr	r2, [pc, #176]	@ (8006efc <DMA_CalcBaseAndBitshift+0x154>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d101      	bne.n	8006e54 <DMA_CalcBaseAndBitshift+0xac>
 8006e50:	2301      	movs	r3, #1
 8006e52:	e000      	b.n	8006e56 <DMA_CalcBaseAndBitshift+0xae>
 8006e54:	2300      	movs	r3, #0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d024      	beq.n	8006ea4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	3b10      	subs	r3, #16
 8006e62:	4a27      	ldr	r2, [pc, #156]	@ (8006f00 <DMA_CalcBaseAndBitshift+0x158>)
 8006e64:	fba2 2303 	umull	r2, r3, r2, r3
 8006e68:	091b      	lsrs	r3, r3, #4
 8006e6a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f003 0307 	and.w	r3, r3, #7
 8006e72:	4a24      	ldr	r2, [pc, #144]	@ (8006f04 <DMA_CalcBaseAndBitshift+0x15c>)
 8006e74:	5cd3      	ldrb	r3, [r2, r3]
 8006e76:	461a      	mov	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2b03      	cmp	r3, #3
 8006e80:	d908      	bls.n	8006e94 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	461a      	mov	r2, r3
 8006e88:	4b1f      	ldr	r3, [pc, #124]	@ (8006f08 <DMA_CalcBaseAndBitshift+0x160>)
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	1d1a      	adds	r2, r3, #4
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	659a      	str	r2, [r3, #88]	@ 0x58
 8006e92:	e00d      	b.n	8006eb0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	461a      	mov	r2, r3
 8006e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8006f08 <DMA_CalcBaseAndBitshift+0x160>)
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ea2:	e005      	b.n	8006eb0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	40020010 	.word	0x40020010
 8006ec4:	40020028 	.word	0x40020028
 8006ec8:	40020040 	.word	0x40020040
 8006ecc:	40020058 	.word	0x40020058
 8006ed0:	40020070 	.word	0x40020070
 8006ed4:	40020088 	.word	0x40020088
 8006ed8:	400200a0 	.word	0x400200a0
 8006edc:	400200b8 	.word	0x400200b8
 8006ee0:	40020410 	.word	0x40020410
 8006ee4:	40020428 	.word	0x40020428
 8006ee8:	40020440 	.word	0x40020440
 8006eec:	40020458 	.word	0x40020458
 8006ef0:	40020470 	.word	0x40020470
 8006ef4:	40020488 	.word	0x40020488
 8006ef8:	400204a0 	.word	0x400204a0
 8006efc:	400204b8 	.word	0x400204b8
 8006f00:	aaaaaaab 	.word	0xaaaaaaab
 8006f04:	08022ccc 	.word	0x08022ccc
 8006f08:	fffffc00 	.word	0xfffffc00

08006f0c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d120      	bne.n	8006f62 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f24:	2b03      	cmp	r3, #3
 8006f26:	d858      	bhi.n	8006fda <DMA_CheckFifoParam+0xce>
 8006f28:	a201      	add	r2, pc, #4	@ (adr r2, 8006f30 <DMA_CheckFifoParam+0x24>)
 8006f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2e:	bf00      	nop
 8006f30:	08006f41 	.word	0x08006f41
 8006f34:	08006f53 	.word	0x08006f53
 8006f38:	08006f41 	.word	0x08006f41
 8006f3c:	08006fdb 	.word	0x08006fdb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d048      	beq.n	8006fde <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f50:	e045      	b.n	8006fde <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f56:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006f5a:	d142      	bne.n	8006fe2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f60:	e03f      	b.n	8006fe2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f6a:	d123      	bne.n	8006fb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f70:	2b03      	cmp	r3, #3
 8006f72:	d838      	bhi.n	8006fe6 <DMA_CheckFifoParam+0xda>
 8006f74:	a201      	add	r2, pc, #4	@ (adr r2, 8006f7c <DMA_CheckFifoParam+0x70>)
 8006f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7a:	bf00      	nop
 8006f7c:	08006f8d 	.word	0x08006f8d
 8006f80:	08006f93 	.word	0x08006f93
 8006f84:	08006f8d 	.word	0x08006f8d
 8006f88:	08006fa5 	.word	0x08006fa5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	73fb      	strb	r3, [r7, #15]
        break;
 8006f90:	e030      	b.n	8006ff4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d025      	beq.n	8006fea <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006fa2:	e022      	b.n	8006fea <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006fac:	d11f      	bne.n	8006fee <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006fb2:	e01c      	b.n	8006fee <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d902      	bls.n	8006fc2 <DMA_CheckFifoParam+0xb6>
 8006fbc:	2b03      	cmp	r3, #3
 8006fbe:	d003      	beq.n	8006fc8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006fc0:	e018      	b.n	8006ff4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	73fb      	strb	r3, [r7, #15]
        break;
 8006fc6:	e015      	b.n	8006ff4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00e      	beq.n	8006ff2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	73fb      	strb	r3, [r7, #15]
    break;
 8006fd8:	e00b      	b.n	8006ff2 <DMA_CheckFifoParam+0xe6>
        break;
 8006fda:	bf00      	nop
 8006fdc:	e00a      	b.n	8006ff4 <DMA_CheckFifoParam+0xe8>
        break;
 8006fde:	bf00      	nop
 8006fe0:	e008      	b.n	8006ff4 <DMA_CheckFifoParam+0xe8>
        break;
 8006fe2:	bf00      	nop
 8006fe4:	e006      	b.n	8006ff4 <DMA_CheckFifoParam+0xe8>
        break;
 8006fe6:	bf00      	nop
 8006fe8:	e004      	b.n	8006ff4 <DMA_CheckFifoParam+0xe8>
        break;
 8006fea:	bf00      	nop
 8006fec:	e002      	b.n	8006ff4 <DMA_CheckFifoParam+0xe8>
        break;
 8006fee:	bf00      	nop
 8006ff0:	e000      	b.n	8006ff4 <DMA_CheckFifoParam+0xe8>
    break;
 8006ff2:	bf00      	nop
    }
  }

  return status;
 8006ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop

08007004 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a38      	ldr	r2, [pc, #224]	@ (80070f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d022      	beq.n	8007062 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a36      	ldr	r2, [pc, #216]	@ (80070fc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d01d      	beq.n	8007062 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a35      	ldr	r2, [pc, #212]	@ (8007100 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d018      	beq.n	8007062 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a33      	ldr	r2, [pc, #204]	@ (8007104 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d013      	beq.n	8007062 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a32      	ldr	r2, [pc, #200]	@ (8007108 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d00e      	beq.n	8007062 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a30      	ldr	r2, [pc, #192]	@ (800710c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d009      	beq.n	8007062 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a2f      	ldr	r2, [pc, #188]	@ (8007110 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d004      	beq.n	8007062 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a2d      	ldr	r2, [pc, #180]	@ (8007114 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d101      	bne.n	8007066 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007062:	2301      	movs	r3, #1
 8007064:	e000      	b.n	8007068 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007066:	2300      	movs	r3, #0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d01a      	beq.n	80070a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	b2db      	uxtb	r3, r3
 8007072:	3b08      	subs	r3, #8
 8007074:	4a28      	ldr	r2, [pc, #160]	@ (8007118 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007076:	fba2 2303 	umull	r2, r3, r2, r3
 800707a:	091b      	lsrs	r3, r3, #4
 800707c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	4b26      	ldr	r3, [pc, #152]	@ (800711c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007082:	4413      	add	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	461a      	mov	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a24      	ldr	r2, [pc, #144]	@ (8007120 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007090:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f003 031f 	and.w	r3, r3, #31
 8007098:	2201      	movs	r2, #1
 800709a:	409a      	lsls	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80070a0:	e024      	b.n	80070ec <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	3b10      	subs	r3, #16
 80070aa:	4a1e      	ldr	r2, [pc, #120]	@ (8007124 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80070ac:	fba2 2303 	umull	r2, r3, r2, r3
 80070b0:	091b      	lsrs	r3, r3, #4
 80070b2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	4a1c      	ldr	r2, [pc, #112]	@ (8007128 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d806      	bhi.n	80070ca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	4a1b      	ldr	r2, [pc, #108]	@ (800712c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d902      	bls.n	80070ca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	3308      	adds	r3, #8
 80070c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	4b18      	ldr	r3, [pc, #96]	@ (8007130 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80070ce:	4413      	add	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	461a      	mov	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a16      	ldr	r2, [pc, #88]	@ (8007134 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80070dc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f003 031f 	and.w	r3, r3, #31
 80070e4:	2201      	movs	r2, #1
 80070e6:	409a      	lsls	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80070ec:	bf00      	nop
 80070ee:	3714      	adds	r7, #20
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr
 80070f8:	58025408 	.word	0x58025408
 80070fc:	5802541c 	.word	0x5802541c
 8007100:	58025430 	.word	0x58025430
 8007104:	58025444 	.word	0x58025444
 8007108:	58025458 	.word	0x58025458
 800710c:	5802546c 	.word	0x5802546c
 8007110:	58025480 	.word	0x58025480
 8007114:	58025494 	.word	0x58025494
 8007118:	cccccccd 	.word	0xcccccccd
 800711c:	16009600 	.word	0x16009600
 8007120:	58025880 	.word	0x58025880
 8007124:	aaaaaaab 	.word	0xaaaaaaab
 8007128:	400204b8 	.word	0x400204b8
 800712c:	4002040f 	.word	0x4002040f
 8007130:	10008200 	.word	0x10008200
 8007134:	40020880 	.word	0x40020880

08007138 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	b2db      	uxtb	r3, r3
 8007146:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d04a      	beq.n	80071e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2b08      	cmp	r3, #8
 8007152:	d847      	bhi.n	80071e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a25      	ldr	r2, [pc, #148]	@ (80071f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d022      	beq.n	80071a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a24      	ldr	r2, [pc, #144]	@ (80071f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d01d      	beq.n	80071a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a22      	ldr	r2, [pc, #136]	@ (80071f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d018      	beq.n	80071a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a21      	ldr	r2, [pc, #132]	@ (80071fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d013      	beq.n	80071a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a1f      	ldr	r2, [pc, #124]	@ (8007200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d00e      	beq.n	80071a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a1e      	ldr	r2, [pc, #120]	@ (8007204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d009      	beq.n	80071a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a1c      	ldr	r2, [pc, #112]	@ (8007208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d004      	beq.n	80071a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a1b      	ldr	r2, [pc, #108]	@ (800720c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d101      	bne.n	80071a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80071a4:	2301      	movs	r3, #1
 80071a6:	e000      	b.n	80071aa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80071a8:	2300      	movs	r3, #0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00a      	beq.n	80071c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	4b17      	ldr	r3, [pc, #92]	@ (8007210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80071b2:	4413      	add	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	461a      	mov	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a15      	ldr	r2, [pc, #84]	@ (8007214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80071c0:	671a      	str	r2, [r3, #112]	@ 0x70
 80071c2:	e009      	b.n	80071d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	4b14      	ldr	r3, [pc, #80]	@ (8007218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80071c8:	4413      	add	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	461a      	mov	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a11      	ldr	r2, [pc, #68]	@ (800721c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80071d6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	3b01      	subs	r3, #1
 80071dc:	2201      	movs	r2, #1
 80071de:	409a      	lsls	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80071e4:	bf00      	nop
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr
 80071f0:	58025408 	.word	0x58025408
 80071f4:	5802541c 	.word	0x5802541c
 80071f8:	58025430 	.word	0x58025430
 80071fc:	58025444 	.word	0x58025444
 8007200:	58025458 	.word	0x58025458
 8007204:	5802546c 	.word	0x5802546c
 8007208:	58025480 	.word	0x58025480
 800720c:	58025494 	.word	0x58025494
 8007210:	1600963f 	.word	0x1600963f
 8007214:	58025940 	.word	0x58025940
 8007218:	1000823f 	.word	0x1000823f
 800721c:	40020940 	.word	0x40020940

08007220 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007220:	b480      	push	{r7}
 8007222:	b089      	sub	sp, #36	@ 0x24
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800722a:	2300      	movs	r3, #0
 800722c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800722e:	4b89      	ldr	r3, [pc, #548]	@ (8007454 <HAL_GPIO_Init+0x234>)
 8007230:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007232:	e194      	b.n	800755e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	2101      	movs	r1, #1
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	fa01 f303 	lsl.w	r3, r1, r3
 8007240:	4013      	ands	r3, r2
 8007242:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 8186 	beq.w	8007558 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	f003 0303 	and.w	r3, r3, #3
 8007254:	2b01      	cmp	r3, #1
 8007256:	d005      	beq.n	8007264 <HAL_GPIO_Init+0x44>
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	f003 0303 	and.w	r3, r3, #3
 8007260:	2b02      	cmp	r3, #2
 8007262:	d130      	bne.n	80072c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	005b      	lsls	r3, r3, #1
 800726e:	2203      	movs	r2, #3
 8007270:	fa02 f303 	lsl.w	r3, r2, r3
 8007274:	43db      	mvns	r3, r3
 8007276:	69ba      	ldr	r2, [r7, #24]
 8007278:	4013      	ands	r3, r2
 800727a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	68da      	ldr	r2, [r3, #12]
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	005b      	lsls	r3, r3, #1
 8007284:	fa02 f303 	lsl.w	r3, r2, r3
 8007288:	69ba      	ldr	r2, [r7, #24]
 800728a:	4313      	orrs	r3, r2
 800728c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	69ba      	ldr	r2, [r7, #24]
 8007292:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800729a:	2201      	movs	r2, #1
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	fa02 f303 	lsl.w	r3, r2, r3
 80072a2:	43db      	mvns	r3, r3
 80072a4:	69ba      	ldr	r2, [r7, #24]
 80072a6:	4013      	ands	r3, r2
 80072a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	091b      	lsrs	r3, r3, #4
 80072b0:	f003 0201 	and.w	r2, r3, #1
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	fa02 f303 	lsl.w	r3, r2, r3
 80072ba:	69ba      	ldr	r2, [r7, #24]
 80072bc:	4313      	orrs	r3, r2
 80072be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	69ba      	ldr	r2, [r7, #24]
 80072c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	f003 0303 	and.w	r3, r3, #3
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d017      	beq.n	8007302 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	005b      	lsls	r3, r3, #1
 80072dc:	2203      	movs	r2, #3
 80072de:	fa02 f303 	lsl.w	r3, r2, r3
 80072e2:	43db      	mvns	r3, r3
 80072e4:	69ba      	ldr	r2, [r7, #24]
 80072e6:	4013      	ands	r3, r2
 80072e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	689a      	ldr	r2, [r3, #8]
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	005b      	lsls	r3, r3, #1
 80072f2:	fa02 f303 	lsl.w	r3, r2, r3
 80072f6:	69ba      	ldr	r2, [r7, #24]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	69ba      	ldr	r2, [r7, #24]
 8007300:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f003 0303 	and.w	r3, r3, #3
 800730a:	2b02      	cmp	r3, #2
 800730c:	d123      	bne.n	8007356 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	08da      	lsrs	r2, r3, #3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	3208      	adds	r2, #8
 8007316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800731a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	f003 0307 	and.w	r3, r3, #7
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	220f      	movs	r2, #15
 8007326:	fa02 f303 	lsl.w	r3, r2, r3
 800732a:	43db      	mvns	r3, r3
 800732c:	69ba      	ldr	r2, [r7, #24]
 800732e:	4013      	ands	r3, r2
 8007330:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	691a      	ldr	r2, [r3, #16]
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	f003 0307 	and.w	r3, r3, #7
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	fa02 f303 	lsl.w	r3, r2, r3
 8007342:	69ba      	ldr	r2, [r7, #24]
 8007344:	4313      	orrs	r3, r2
 8007346:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	08da      	lsrs	r2, r3, #3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	3208      	adds	r2, #8
 8007350:	69b9      	ldr	r1, [r7, #24]
 8007352:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	005b      	lsls	r3, r3, #1
 8007360:	2203      	movs	r2, #3
 8007362:	fa02 f303 	lsl.w	r3, r2, r3
 8007366:	43db      	mvns	r3, r3
 8007368:	69ba      	ldr	r2, [r7, #24]
 800736a:	4013      	ands	r3, r2
 800736c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f003 0203 	and.w	r2, r3, #3
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	fa02 f303 	lsl.w	r3, r2, r3
 800737e:	69ba      	ldr	r2, [r7, #24]
 8007380:	4313      	orrs	r3, r2
 8007382:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	69ba      	ldr	r2, [r7, #24]
 8007388:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007392:	2b00      	cmp	r3, #0
 8007394:	f000 80e0 	beq.w	8007558 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007398:	4b2f      	ldr	r3, [pc, #188]	@ (8007458 <HAL_GPIO_Init+0x238>)
 800739a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800739e:	4a2e      	ldr	r2, [pc, #184]	@ (8007458 <HAL_GPIO_Init+0x238>)
 80073a0:	f043 0302 	orr.w	r3, r3, #2
 80073a4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80073a8:	4b2b      	ldr	r3, [pc, #172]	@ (8007458 <HAL_GPIO_Init+0x238>)
 80073aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80073ae:	f003 0302 	and.w	r3, r3, #2
 80073b2:	60fb      	str	r3, [r7, #12]
 80073b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80073b6:	4a29      	ldr	r2, [pc, #164]	@ (800745c <HAL_GPIO_Init+0x23c>)
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	089b      	lsrs	r3, r3, #2
 80073bc:	3302      	adds	r3, #2
 80073be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	f003 0303 	and.w	r3, r3, #3
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	220f      	movs	r2, #15
 80073ce:	fa02 f303 	lsl.w	r3, r2, r3
 80073d2:	43db      	mvns	r3, r3
 80073d4:	69ba      	ldr	r2, [r7, #24]
 80073d6:	4013      	ands	r3, r2
 80073d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a20      	ldr	r2, [pc, #128]	@ (8007460 <HAL_GPIO_Init+0x240>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d052      	beq.n	8007488 <HAL_GPIO_Init+0x268>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a1f      	ldr	r2, [pc, #124]	@ (8007464 <HAL_GPIO_Init+0x244>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d031      	beq.n	800744e <HAL_GPIO_Init+0x22e>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a1e      	ldr	r2, [pc, #120]	@ (8007468 <HAL_GPIO_Init+0x248>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d02b      	beq.n	800744a <HAL_GPIO_Init+0x22a>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a1d      	ldr	r2, [pc, #116]	@ (800746c <HAL_GPIO_Init+0x24c>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d025      	beq.n	8007446 <HAL_GPIO_Init+0x226>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a1c      	ldr	r2, [pc, #112]	@ (8007470 <HAL_GPIO_Init+0x250>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d01f      	beq.n	8007442 <HAL_GPIO_Init+0x222>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a1b      	ldr	r2, [pc, #108]	@ (8007474 <HAL_GPIO_Init+0x254>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d019      	beq.n	800743e <HAL_GPIO_Init+0x21e>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a1a      	ldr	r2, [pc, #104]	@ (8007478 <HAL_GPIO_Init+0x258>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d013      	beq.n	800743a <HAL_GPIO_Init+0x21a>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a19      	ldr	r2, [pc, #100]	@ (800747c <HAL_GPIO_Init+0x25c>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d00d      	beq.n	8007436 <HAL_GPIO_Init+0x216>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a18      	ldr	r2, [pc, #96]	@ (8007480 <HAL_GPIO_Init+0x260>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d007      	beq.n	8007432 <HAL_GPIO_Init+0x212>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a17      	ldr	r2, [pc, #92]	@ (8007484 <HAL_GPIO_Init+0x264>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d101      	bne.n	800742e <HAL_GPIO_Init+0x20e>
 800742a:	2309      	movs	r3, #9
 800742c:	e02d      	b.n	800748a <HAL_GPIO_Init+0x26a>
 800742e:	230a      	movs	r3, #10
 8007430:	e02b      	b.n	800748a <HAL_GPIO_Init+0x26a>
 8007432:	2308      	movs	r3, #8
 8007434:	e029      	b.n	800748a <HAL_GPIO_Init+0x26a>
 8007436:	2307      	movs	r3, #7
 8007438:	e027      	b.n	800748a <HAL_GPIO_Init+0x26a>
 800743a:	2306      	movs	r3, #6
 800743c:	e025      	b.n	800748a <HAL_GPIO_Init+0x26a>
 800743e:	2305      	movs	r3, #5
 8007440:	e023      	b.n	800748a <HAL_GPIO_Init+0x26a>
 8007442:	2304      	movs	r3, #4
 8007444:	e021      	b.n	800748a <HAL_GPIO_Init+0x26a>
 8007446:	2303      	movs	r3, #3
 8007448:	e01f      	b.n	800748a <HAL_GPIO_Init+0x26a>
 800744a:	2302      	movs	r3, #2
 800744c:	e01d      	b.n	800748a <HAL_GPIO_Init+0x26a>
 800744e:	2301      	movs	r3, #1
 8007450:	e01b      	b.n	800748a <HAL_GPIO_Init+0x26a>
 8007452:	bf00      	nop
 8007454:	58000080 	.word	0x58000080
 8007458:	58024400 	.word	0x58024400
 800745c:	58000400 	.word	0x58000400
 8007460:	58020000 	.word	0x58020000
 8007464:	58020400 	.word	0x58020400
 8007468:	58020800 	.word	0x58020800
 800746c:	58020c00 	.word	0x58020c00
 8007470:	58021000 	.word	0x58021000
 8007474:	58021400 	.word	0x58021400
 8007478:	58021800 	.word	0x58021800
 800747c:	58021c00 	.word	0x58021c00
 8007480:	58022000 	.word	0x58022000
 8007484:	58022400 	.word	0x58022400
 8007488:	2300      	movs	r3, #0
 800748a:	69fa      	ldr	r2, [r7, #28]
 800748c:	f002 0203 	and.w	r2, r2, #3
 8007490:	0092      	lsls	r2, r2, #2
 8007492:	4093      	lsls	r3, r2
 8007494:	69ba      	ldr	r2, [r7, #24]
 8007496:	4313      	orrs	r3, r2
 8007498:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800749a:	4938      	ldr	r1, [pc, #224]	@ (800757c <HAL_GPIO_Init+0x35c>)
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	089b      	lsrs	r3, r3, #2
 80074a0:	3302      	adds	r3, #2
 80074a2:	69ba      	ldr	r2, [r7, #24]
 80074a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80074a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	43db      	mvns	r3, r3
 80074b4:	69ba      	ldr	r2, [r7, #24]
 80074b6:	4013      	ands	r3, r2
 80074b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80074ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80074d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	43db      	mvns	r3, r3
 80074e2:	69ba      	ldr	r2, [r7, #24]
 80074e4:	4013      	ands	r3, r2
 80074e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d003      	beq.n	80074fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80074fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	43db      	mvns	r3, r3
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	4013      	ands	r3, r2
 8007512:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800751c:	2b00      	cmp	r3, #0
 800751e:	d003      	beq.n	8007528 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007520:	69ba      	ldr	r2, [r7, #24]
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	4313      	orrs	r3, r2
 8007526:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	69ba      	ldr	r2, [r7, #24]
 800752c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	43db      	mvns	r3, r3
 8007538:	69ba      	ldr	r2, [r7, #24]
 800753a:	4013      	ands	r3, r2
 800753c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800754a:	69ba      	ldr	r2, [r7, #24]
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	4313      	orrs	r3, r2
 8007550:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	69ba      	ldr	r2, [r7, #24]
 8007556:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	3301      	adds	r3, #1
 800755c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	fa22 f303 	lsr.w	r3, r2, r3
 8007568:	2b00      	cmp	r3, #0
 800756a:	f47f ae63 	bne.w	8007234 <HAL_GPIO_Init+0x14>
  }
}
 800756e:	bf00      	nop
 8007570:	bf00      	nop
 8007572:	3724      	adds	r7, #36	@ 0x24
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	58000400 	.word	0x58000400

08007580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	460b      	mov	r3, r1
 800758a:	807b      	strh	r3, [r7, #2]
 800758c:	4613      	mov	r3, r2
 800758e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007590:	787b      	ldrb	r3, [r7, #1]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d003      	beq.n	800759e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007596:	887a      	ldrh	r2, [r7, #2]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800759c:	e003      	b.n	80075a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800759e:	887b      	ldrh	r3, [r7, #2]
 80075a0:	041a      	lsls	r2, r3, #16
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	619a      	str	r2, [r3, #24]
}
 80075a6:	bf00      	nop
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b082      	sub	sp, #8
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	4603      	mov	r3, r0
 80075ba:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80075bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80075c4:	88fb      	ldrh	r3, [r7, #6]
 80075c6:	4013      	ands	r3, r2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d008      	beq.n	80075de <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80075cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075d0:	88fb      	ldrh	r3, [r7, #6]
 80075d2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80075d6:	88fb      	ldrh	r3, [r7, #6]
 80075d8:	4618      	mov	r0, r3
 80075da:	f7fa f8a9 	bl	8001730 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80075de:	bf00      	nop
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
	...

080075e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80075f0:	4b19      	ldr	r3, [pc, #100]	@ (8007658 <HAL_PWREx_ConfigSupply+0x70>)
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	f003 0304 	and.w	r3, r3, #4
 80075f8:	2b04      	cmp	r3, #4
 80075fa:	d00a      	beq.n	8007612 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80075fc:	4b16      	ldr	r3, [pc, #88]	@ (8007658 <HAL_PWREx_ConfigSupply+0x70>)
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	f003 0307 	and.w	r3, r3, #7
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	429a      	cmp	r2, r3
 8007608:	d001      	beq.n	800760e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e01f      	b.n	800764e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800760e:	2300      	movs	r3, #0
 8007610:	e01d      	b.n	800764e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007612:	4b11      	ldr	r3, [pc, #68]	@ (8007658 <HAL_PWREx_ConfigSupply+0x70>)
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	f023 0207 	bic.w	r2, r3, #7
 800761a:	490f      	ldr	r1, [pc, #60]	@ (8007658 <HAL_PWREx_ConfigSupply+0x70>)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4313      	orrs	r3, r2
 8007620:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007622:	f7fb fba3 	bl	8002d6c <HAL_GetTick>
 8007626:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007628:	e009      	b.n	800763e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800762a:	f7fb fb9f 	bl	8002d6c <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007638:	d901      	bls.n	800763e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e007      	b.n	800764e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800763e:	4b06      	ldr	r3, [pc, #24]	@ (8007658 <HAL_PWREx_ConfigSupply+0x70>)
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007646:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800764a:	d1ee      	bne.n	800762a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	58024800 	.word	0x58024800

0800765c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b08c      	sub	sp, #48	@ 0x30
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d102      	bne.n	8007670 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	f000 bc48 	b.w	8007f00 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	2b00      	cmp	r3, #0
 800767a:	f000 8088 	beq.w	800778e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800767e:	4b99      	ldr	r3, [pc, #612]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007686:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007688:	4b96      	ldr	r3, [pc, #600]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 800768a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800768c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800768e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007690:	2b10      	cmp	r3, #16
 8007692:	d007      	beq.n	80076a4 <HAL_RCC_OscConfig+0x48>
 8007694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007696:	2b18      	cmp	r3, #24
 8007698:	d111      	bne.n	80076be <HAL_RCC_OscConfig+0x62>
 800769a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800769c:	f003 0303 	and.w	r3, r3, #3
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d10c      	bne.n	80076be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076a4:	4b8f      	ldr	r3, [pc, #572]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d06d      	beq.n	800778c <HAL_RCC_OscConfig+0x130>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d169      	bne.n	800778c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	f000 bc21 	b.w	8007f00 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076c6:	d106      	bne.n	80076d6 <HAL_RCC_OscConfig+0x7a>
 80076c8:	4b86      	ldr	r3, [pc, #536]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a85      	ldr	r2, [pc, #532]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 80076ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076d2:	6013      	str	r3, [r2, #0]
 80076d4:	e02e      	b.n	8007734 <HAL_RCC_OscConfig+0xd8>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10c      	bne.n	80076f8 <HAL_RCC_OscConfig+0x9c>
 80076de:	4b81      	ldr	r3, [pc, #516]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a80      	ldr	r2, [pc, #512]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 80076e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076e8:	6013      	str	r3, [r2, #0]
 80076ea:	4b7e      	ldr	r3, [pc, #504]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a7d      	ldr	r2, [pc, #500]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 80076f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80076f4:	6013      	str	r3, [r2, #0]
 80076f6:	e01d      	b.n	8007734 <HAL_RCC_OscConfig+0xd8>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007700:	d10c      	bne.n	800771c <HAL_RCC_OscConfig+0xc0>
 8007702:	4b78      	ldr	r3, [pc, #480]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a77      	ldr	r2, [pc, #476]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 8007708:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800770c:	6013      	str	r3, [r2, #0]
 800770e:	4b75      	ldr	r3, [pc, #468]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a74      	ldr	r2, [pc, #464]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 8007714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007718:	6013      	str	r3, [r2, #0]
 800771a:	e00b      	b.n	8007734 <HAL_RCC_OscConfig+0xd8>
 800771c:	4b71      	ldr	r3, [pc, #452]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a70      	ldr	r2, [pc, #448]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 8007722:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007726:	6013      	str	r3, [r2, #0]
 8007728:	4b6e      	ldr	r3, [pc, #440]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a6d      	ldr	r2, [pc, #436]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 800772e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d013      	beq.n	8007764 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800773c:	f7fb fb16 	bl	8002d6c <HAL_GetTick>
 8007740:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007742:	e008      	b.n	8007756 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007744:	f7fb fb12 	bl	8002d6c <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	2b64      	cmp	r3, #100	@ 0x64
 8007750:	d901      	bls.n	8007756 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	e3d4      	b.n	8007f00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007756:	4b63      	ldr	r3, [pc, #396]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d0f0      	beq.n	8007744 <HAL_RCC_OscConfig+0xe8>
 8007762:	e014      	b.n	800778e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007764:	f7fb fb02 	bl	8002d6c <HAL_GetTick>
 8007768:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800776a:	e008      	b.n	800777e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800776c:	f7fb fafe 	bl	8002d6c <HAL_GetTick>
 8007770:	4602      	mov	r2, r0
 8007772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	2b64      	cmp	r3, #100	@ 0x64
 8007778:	d901      	bls.n	800777e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e3c0      	b.n	8007f00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800777e:	4b59      	ldr	r3, [pc, #356]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1f0      	bne.n	800776c <HAL_RCC_OscConfig+0x110>
 800778a:	e000      	b.n	800778e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800778c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0302 	and.w	r3, r3, #2
 8007796:	2b00      	cmp	r3, #0
 8007798:	f000 80ca 	beq.w	8007930 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800779c:	4b51      	ldr	r3, [pc, #324]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077a4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80077a6:	4b4f      	ldr	r3, [pc, #316]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 80077a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077aa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80077ac:	6a3b      	ldr	r3, [r7, #32]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d007      	beq.n	80077c2 <HAL_RCC_OscConfig+0x166>
 80077b2:	6a3b      	ldr	r3, [r7, #32]
 80077b4:	2b18      	cmp	r3, #24
 80077b6:	d156      	bne.n	8007866 <HAL_RCC_OscConfig+0x20a>
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	f003 0303 	and.w	r3, r3, #3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d151      	bne.n	8007866 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077c2:	4b48      	ldr	r3, [pc, #288]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0304 	and.w	r3, r3, #4
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d005      	beq.n	80077da <HAL_RCC_OscConfig+0x17e>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d101      	bne.n	80077da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e392      	b.n	8007f00 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80077da:	4b42      	ldr	r3, [pc, #264]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f023 0219 	bic.w	r2, r3, #25
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	493f      	ldr	r1, [pc, #252]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 80077e8:	4313      	orrs	r3, r2
 80077ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ec:	f7fb fabe 	bl	8002d6c <HAL_GetTick>
 80077f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077f2:	e008      	b.n	8007806 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077f4:	f7fb faba 	bl	8002d6c <HAL_GetTick>
 80077f8:	4602      	mov	r2, r0
 80077fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d901      	bls.n	8007806 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007802:	2303      	movs	r3, #3
 8007804:	e37c      	b.n	8007f00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007806:	4b37      	ldr	r3, [pc, #220]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0304 	and.w	r3, r3, #4
 800780e:	2b00      	cmp	r3, #0
 8007810:	d0f0      	beq.n	80077f4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007812:	f7fb fadb 	bl	8002dcc <HAL_GetREVID>
 8007816:	4603      	mov	r3, r0
 8007818:	f241 0203 	movw	r2, #4099	@ 0x1003
 800781c:	4293      	cmp	r3, r2
 800781e:	d817      	bhi.n	8007850 <HAL_RCC_OscConfig+0x1f4>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	2b40      	cmp	r3, #64	@ 0x40
 8007826:	d108      	bne.n	800783a <HAL_RCC_OscConfig+0x1de>
 8007828:	4b2e      	ldr	r3, [pc, #184]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007830:	4a2c      	ldr	r2, [pc, #176]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 8007832:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007836:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007838:	e07a      	b.n	8007930 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800783a:	4b2a      	ldr	r3, [pc, #168]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	031b      	lsls	r3, r3, #12
 8007848:	4926      	ldr	r1, [pc, #152]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 800784a:	4313      	orrs	r3, r2
 800784c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800784e:	e06f      	b.n	8007930 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007850:	4b24      	ldr	r3, [pc, #144]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	061b      	lsls	r3, r3, #24
 800785e:	4921      	ldr	r1, [pc, #132]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 8007860:	4313      	orrs	r3, r2
 8007862:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007864:	e064      	b.n	8007930 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d047      	beq.n	80078fe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800786e:	4b1d      	ldr	r3, [pc, #116]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f023 0219 	bic.w	r2, r3, #25
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	491a      	ldr	r1, [pc, #104]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 800787c:	4313      	orrs	r3, r2
 800787e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007880:	f7fb fa74 	bl	8002d6c <HAL_GetTick>
 8007884:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007886:	e008      	b.n	800789a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007888:	f7fb fa70 	bl	8002d6c <HAL_GetTick>
 800788c:	4602      	mov	r2, r0
 800788e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	2b02      	cmp	r3, #2
 8007894:	d901      	bls.n	800789a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e332      	b.n	8007f00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800789a:	4b12      	ldr	r3, [pc, #72]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 0304 	and.w	r3, r3, #4
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d0f0      	beq.n	8007888 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078a6:	f7fb fa91 	bl	8002dcc <HAL_GetREVID>
 80078aa:	4603      	mov	r3, r0
 80078ac:	f241 0203 	movw	r2, #4099	@ 0x1003
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d819      	bhi.n	80078e8 <HAL_RCC_OscConfig+0x28c>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	2b40      	cmp	r3, #64	@ 0x40
 80078ba:	d108      	bne.n	80078ce <HAL_RCC_OscConfig+0x272>
 80078bc:	4b09      	ldr	r3, [pc, #36]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80078c4:	4a07      	ldr	r2, [pc, #28]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 80078c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078ca:	6053      	str	r3, [r2, #4]
 80078cc:	e030      	b.n	8007930 <HAL_RCC_OscConfig+0x2d4>
 80078ce:	4b05      	ldr	r3, [pc, #20]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	031b      	lsls	r3, r3, #12
 80078dc:	4901      	ldr	r1, [pc, #4]	@ (80078e4 <HAL_RCC_OscConfig+0x288>)
 80078de:	4313      	orrs	r3, r2
 80078e0:	604b      	str	r3, [r1, #4]
 80078e2:	e025      	b.n	8007930 <HAL_RCC_OscConfig+0x2d4>
 80078e4:	58024400 	.word	0x58024400
 80078e8:	4b9a      	ldr	r3, [pc, #616]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	061b      	lsls	r3, r3, #24
 80078f6:	4997      	ldr	r1, [pc, #604]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 80078f8:	4313      	orrs	r3, r2
 80078fa:	604b      	str	r3, [r1, #4]
 80078fc:	e018      	b.n	8007930 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078fe:	4b95      	ldr	r3, [pc, #596]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a94      	ldr	r2, [pc, #592]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 8007904:	f023 0301 	bic.w	r3, r3, #1
 8007908:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800790a:	f7fb fa2f 	bl	8002d6c <HAL_GetTick>
 800790e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007910:	e008      	b.n	8007924 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007912:	f7fb fa2b 	bl	8002d6c <HAL_GetTick>
 8007916:	4602      	mov	r2, r0
 8007918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	2b02      	cmp	r3, #2
 800791e:	d901      	bls.n	8007924 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007920:	2303      	movs	r3, #3
 8007922:	e2ed      	b.n	8007f00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007924:	4b8b      	ldr	r3, [pc, #556]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0304 	and.w	r3, r3, #4
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1f0      	bne.n	8007912 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0310 	and.w	r3, r3, #16
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 80a9 	beq.w	8007a90 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800793e:	4b85      	ldr	r3, [pc, #532]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007946:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007948:	4b82      	ldr	r3, [pc, #520]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 800794a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800794c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	2b08      	cmp	r3, #8
 8007952:	d007      	beq.n	8007964 <HAL_RCC_OscConfig+0x308>
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	2b18      	cmp	r3, #24
 8007958:	d13a      	bne.n	80079d0 <HAL_RCC_OscConfig+0x374>
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	f003 0303 	and.w	r3, r3, #3
 8007960:	2b01      	cmp	r3, #1
 8007962:	d135      	bne.n	80079d0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007964:	4b7b      	ldr	r3, [pc, #492]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800796c:	2b00      	cmp	r3, #0
 800796e:	d005      	beq.n	800797c <HAL_RCC_OscConfig+0x320>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	69db      	ldr	r3, [r3, #28]
 8007974:	2b80      	cmp	r3, #128	@ 0x80
 8007976:	d001      	beq.n	800797c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	e2c1      	b.n	8007f00 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800797c:	f7fb fa26 	bl	8002dcc <HAL_GetREVID>
 8007980:	4603      	mov	r3, r0
 8007982:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007986:	4293      	cmp	r3, r2
 8007988:	d817      	bhi.n	80079ba <HAL_RCC_OscConfig+0x35e>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	2b20      	cmp	r3, #32
 8007990:	d108      	bne.n	80079a4 <HAL_RCC_OscConfig+0x348>
 8007992:	4b70      	ldr	r3, [pc, #448]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800799a:	4a6e      	ldr	r2, [pc, #440]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 800799c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079a0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80079a2:	e075      	b.n	8007a90 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80079a4:	4b6b      	ldr	r3, [pc, #428]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6a1b      	ldr	r3, [r3, #32]
 80079b0:	069b      	lsls	r3, r3, #26
 80079b2:	4968      	ldr	r1, [pc, #416]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 80079b4:	4313      	orrs	r3, r2
 80079b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80079b8:	e06a      	b.n	8007a90 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80079ba:	4b66      	ldr	r3, [pc, #408]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	061b      	lsls	r3, r3, #24
 80079c8:	4962      	ldr	r1, [pc, #392]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80079ce:	e05f      	b.n	8007a90 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	69db      	ldr	r3, [r3, #28]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d042      	beq.n	8007a5e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80079d8:	4b5e      	ldr	r3, [pc, #376]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a5d      	ldr	r2, [pc, #372]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 80079de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079e4:	f7fb f9c2 	bl	8002d6c <HAL_GetTick>
 80079e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80079ea:	e008      	b.n	80079fe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80079ec:	f7fb f9be 	bl	8002d6c <HAL_GetTick>
 80079f0:	4602      	mov	r2, r0
 80079f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d901      	bls.n	80079fe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80079fa:	2303      	movs	r3, #3
 80079fc:	e280      	b.n	8007f00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80079fe:	4b55      	ldr	r3, [pc, #340]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d0f0      	beq.n	80079ec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a0a:	f7fb f9df 	bl	8002dcc <HAL_GetREVID>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d817      	bhi.n	8007a48 <HAL_RCC_OscConfig+0x3ec>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a1b      	ldr	r3, [r3, #32]
 8007a1c:	2b20      	cmp	r3, #32
 8007a1e:	d108      	bne.n	8007a32 <HAL_RCC_OscConfig+0x3d6>
 8007a20:	4b4c      	ldr	r3, [pc, #304]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007a28:	4a4a      	ldr	r2, [pc, #296]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 8007a2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a2e:	6053      	str	r3, [r2, #4]
 8007a30:	e02e      	b.n	8007a90 <HAL_RCC_OscConfig+0x434>
 8007a32:	4b48      	ldr	r3, [pc, #288]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	069b      	lsls	r3, r3, #26
 8007a40:	4944      	ldr	r1, [pc, #272]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 8007a42:	4313      	orrs	r3, r2
 8007a44:	604b      	str	r3, [r1, #4]
 8007a46:	e023      	b.n	8007a90 <HAL_RCC_OscConfig+0x434>
 8007a48:	4b42      	ldr	r3, [pc, #264]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a1b      	ldr	r3, [r3, #32]
 8007a54:	061b      	lsls	r3, r3, #24
 8007a56:	493f      	ldr	r1, [pc, #252]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	60cb      	str	r3, [r1, #12]
 8007a5c:	e018      	b.n	8007a90 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007a5e:	4b3d      	ldr	r3, [pc, #244]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a3c      	ldr	r2, [pc, #240]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 8007a64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a6a:	f7fb f97f 	bl	8002d6c <HAL_GetTick>
 8007a6e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007a70:	e008      	b.n	8007a84 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007a72:	f7fb f97b 	bl	8002d6c <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d901      	bls.n	8007a84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e23d      	b.n	8007f00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007a84:	4b33      	ldr	r3, [pc, #204]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1f0      	bne.n	8007a72 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0308 	and.w	r3, r3, #8
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d036      	beq.n	8007b0a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	695b      	ldr	r3, [r3, #20]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d019      	beq.n	8007ad8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 8007aa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007aa8:	4a2a      	ldr	r2, [pc, #168]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 8007aaa:	f043 0301 	orr.w	r3, r3, #1
 8007aae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ab0:	f7fb f95c 	bl	8002d6c <HAL_GetTick>
 8007ab4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007ab6:	e008      	b.n	8007aca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ab8:	f7fb f958 	bl	8002d6c <HAL_GetTick>
 8007abc:	4602      	mov	r2, r0
 8007abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d901      	bls.n	8007aca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e21a      	b.n	8007f00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007aca:	4b22      	ldr	r3, [pc, #136]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 8007acc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d0f0      	beq.n	8007ab8 <HAL_RCC_OscConfig+0x45c>
 8007ad6:	e018      	b.n	8007b0a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 8007ada:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007adc:	4a1d      	ldr	r2, [pc, #116]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 8007ade:	f023 0301 	bic.w	r3, r3, #1
 8007ae2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ae4:	f7fb f942 	bl	8002d6c <HAL_GetTick>
 8007ae8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007aea:	e008      	b.n	8007afe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007aec:	f7fb f93e 	bl	8002d6c <HAL_GetTick>
 8007af0:	4602      	mov	r2, r0
 8007af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d901      	bls.n	8007afe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	e200      	b.n	8007f00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007afe:	4b15      	ldr	r3, [pc, #84]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 8007b00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b02:	f003 0302 	and.w	r3, r3, #2
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1f0      	bne.n	8007aec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 0320 	and.w	r3, r3, #32
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d039      	beq.n	8007b8a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d01c      	beq.n	8007b58 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a0c      	ldr	r2, [pc, #48]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 8007b24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007b28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007b2a:	f7fb f91f 	bl	8002d6c <HAL_GetTick>
 8007b2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007b30:	e008      	b.n	8007b44 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b32:	f7fb f91b 	bl	8002d6c <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d901      	bls.n	8007b44 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e1dd      	b.n	8007f00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007b44:	4b03      	ldr	r3, [pc, #12]	@ (8007b54 <HAL_RCC_OscConfig+0x4f8>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d0f0      	beq.n	8007b32 <HAL_RCC_OscConfig+0x4d6>
 8007b50:	e01b      	b.n	8007b8a <HAL_RCC_OscConfig+0x52e>
 8007b52:	bf00      	nop
 8007b54:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007b58:	4b9b      	ldr	r3, [pc, #620]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a9a      	ldr	r2, [pc, #616]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007b5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b62:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007b64:	f7fb f902 	bl	8002d6c <HAL_GetTick>
 8007b68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007b6a:	e008      	b.n	8007b7e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b6c:	f7fb f8fe 	bl	8002d6c <HAL_GetTick>
 8007b70:	4602      	mov	r2, r0
 8007b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d901      	bls.n	8007b7e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e1c0      	b.n	8007f00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007b7e:	4b92      	ldr	r3, [pc, #584]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1f0      	bne.n	8007b6c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0304 	and.w	r3, r3, #4
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f000 8081 	beq.w	8007c9a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007b98:	4b8c      	ldr	r3, [pc, #560]	@ (8007dcc <HAL_RCC_OscConfig+0x770>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a8b      	ldr	r2, [pc, #556]	@ (8007dcc <HAL_RCC_OscConfig+0x770>)
 8007b9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ba2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ba4:	f7fb f8e2 	bl	8002d6c <HAL_GetTick>
 8007ba8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007baa:	e008      	b.n	8007bbe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bac:	f7fb f8de 	bl	8002d6c <HAL_GetTick>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	2b64      	cmp	r3, #100	@ 0x64
 8007bb8:	d901      	bls.n	8007bbe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	e1a0      	b.n	8007f00 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007bbe:	4b83      	ldr	r3, [pc, #524]	@ (8007dcc <HAL_RCC_OscConfig+0x770>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d0f0      	beq.n	8007bac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d106      	bne.n	8007be0 <HAL_RCC_OscConfig+0x584>
 8007bd2:	4b7d      	ldr	r3, [pc, #500]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bd6:	4a7c      	ldr	r2, [pc, #496]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007bd8:	f043 0301 	orr.w	r3, r3, #1
 8007bdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8007bde:	e02d      	b.n	8007c3c <HAL_RCC_OscConfig+0x5e0>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d10c      	bne.n	8007c02 <HAL_RCC_OscConfig+0x5a6>
 8007be8:	4b77      	ldr	r3, [pc, #476]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bec:	4a76      	ldr	r2, [pc, #472]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007bee:	f023 0301 	bic.w	r3, r3, #1
 8007bf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007bf4:	4b74      	ldr	r3, [pc, #464]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bf8:	4a73      	ldr	r2, [pc, #460]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007bfa:	f023 0304 	bic.w	r3, r3, #4
 8007bfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c00:	e01c      	b.n	8007c3c <HAL_RCC_OscConfig+0x5e0>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	2b05      	cmp	r3, #5
 8007c08:	d10c      	bne.n	8007c24 <HAL_RCC_OscConfig+0x5c8>
 8007c0a:	4b6f      	ldr	r3, [pc, #444]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c0e:	4a6e      	ldr	r2, [pc, #440]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007c10:	f043 0304 	orr.w	r3, r3, #4
 8007c14:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c16:	4b6c      	ldr	r3, [pc, #432]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c1a:	4a6b      	ldr	r2, [pc, #428]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007c1c:	f043 0301 	orr.w	r3, r3, #1
 8007c20:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c22:	e00b      	b.n	8007c3c <HAL_RCC_OscConfig+0x5e0>
 8007c24:	4b68      	ldr	r3, [pc, #416]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c28:	4a67      	ldr	r2, [pc, #412]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007c2a:	f023 0301 	bic.w	r3, r3, #1
 8007c2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c30:	4b65      	ldr	r3, [pc, #404]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c34:	4a64      	ldr	r2, [pc, #400]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007c36:	f023 0304 	bic.w	r3, r3, #4
 8007c3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d015      	beq.n	8007c70 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c44:	f7fb f892 	bl	8002d6c <HAL_GetTick>
 8007c48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c4a:	e00a      	b.n	8007c62 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c4c:	f7fb f88e 	bl	8002d6c <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d901      	bls.n	8007c62 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e14e      	b.n	8007f00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c62:	4b59      	ldr	r3, [pc, #356]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c66:	f003 0302 	and.w	r3, r3, #2
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d0ee      	beq.n	8007c4c <HAL_RCC_OscConfig+0x5f0>
 8007c6e:	e014      	b.n	8007c9a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c70:	f7fb f87c 	bl	8002d6c <HAL_GetTick>
 8007c74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007c76:	e00a      	b.n	8007c8e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c78:	f7fb f878 	bl	8002d6c <HAL_GetTick>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c80:	1ad3      	subs	r3, r2, r3
 8007c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d901      	bls.n	8007c8e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e138      	b.n	8007f00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007c8e:	4b4e      	ldr	r3, [pc, #312]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1ee      	bne.n	8007c78 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f000 812d 	beq.w	8007efe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007ca4:	4b48      	ldr	r3, [pc, #288]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007cac:	2b18      	cmp	r3, #24
 8007cae:	f000 80bd 	beq.w	8007e2c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	f040 809e 	bne.w	8007df8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cbc:	4b42      	ldr	r3, [pc, #264]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a41      	ldr	r2, [pc, #260]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007cc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cc8:	f7fb f850 	bl	8002d6c <HAL_GetTick>
 8007ccc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007cce:	e008      	b.n	8007ce2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cd0:	f7fb f84c 	bl	8002d6c <HAL_GetTick>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d901      	bls.n	8007ce2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e10e      	b.n	8007f00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ce2:	4b39      	ldr	r3, [pc, #228]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1f0      	bne.n	8007cd0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007cee:	4b36      	ldr	r3, [pc, #216]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007cf0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007cf2:	4b37      	ldr	r3, [pc, #220]	@ (8007dd0 <HAL_RCC_OscConfig+0x774>)
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007cfe:	0112      	lsls	r2, r2, #4
 8007d00:	430a      	orrs	r2, r1
 8007d02:	4931      	ldr	r1, [pc, #196]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	628b      	str	r3, [r1, #40]	@ 0x28
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d16:	3b01      	subs	r3, #1
 8007d18:	025b      	lsls	r3, r3, #9
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	431a      	orrs	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d22:	3b01      	subs	r3, #1
 8007d24:	041b      	lsls	r3, r3, #16
 8007d26:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007d2a:	431a      	orrs	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d30:	3b01      	subs	r3, #1
 8007d32:	061b      	lsls	r3, r3, #24
 8007d34:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007d38:	4923      	ldr	r1, [pc, #140]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007d3e:	4b22      	ldr	r3, [pc, #136]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d42:	4a21      	ldr	r2, [pc, #132]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007d44:	f023 0301 	bic.w	r3, r3, #1
 8007d48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007d4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d4e:	4b21      	ldr	r3, [pc, #132]	@ (8007dd4 <HAL_RCC_OscConfig+0x778>)
 8007d50:	4013      	ands	r3, r2
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007d56:	00d2      	lsls	r2, r2, #3
 8007d58:	491b      	ldr	r1, [pc, #108]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d62:	f023 020c 	bic.w	r2, r3, #12
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d6a:	4917      	ldr	r1, [pc, #92]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007d70:	4b15      	ldr	r3, [pc, #84]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d74:	f023 0202 	bic.w	r2, r3, #2
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d7c:	4912      	ldr	r1, [pc, #72]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007d82:	4b11      	ldr	r3, [pc, #68]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d86:	4a10      	ldr	r2, [pc, #64]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007d88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d92:	4a0d      	ldr	r2, [pc, #52]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007d94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007da0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007da4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007da6:	4b08      	ldr	r3, [pc, #32]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007daa:	4a07      	ldr	r2, [pc, #28]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007dac:	f043 0301 	orr.w	r3, r3, #1
 8007db0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007db2:	4b05      	ldr	r3, [pc, #20]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a04      	ldr	r2, [pc, #16]	@ (8007dc8 <HAL_RCC_OscConfig+0x76c>)
 8007db8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007dbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dbe:	f7fa ffd5 	bl	8002d6c <HAL_GetTick>
 8007dc2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007dc4:	e011      	b.n	8007dea <HAL_RCC_OscConfig+0x78e>
 8007dc6:	bf00      	nop
 8007dc8:	58024400 	.word	0x58024400
 8007dcc:	58024800 	.word	0x58024800
 8007dd0:	fffffc0c 	.word	0xfffffc0c
 8007dd4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dd8:	f7fa ffc8 	bl	8002d6c <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d901      	bls.n	8007dea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e08a      	b.n	8007f00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007dea:	4b47      	ldr	r3, [pc, #284]	@ (8007f08 <HAL_RCC_OscConfig+0x8ac>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d0f0      	beq.n	8007dd8 <HAL_RCC_OscConfig+0x77c>
 8007df6:	e082      	b.n	8007efe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007df8:	4b43      	ldr	r3, [pc, #268]	@ (8007f08 <HAL_RCC_OscConfig+0x8ac>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a42      	ldr	r2, [pc, #264]	@ (8007f08 <HAL_RCC_OscConfig+0x8ac>)
 8007dfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e04:	f7fa ffb2 	bl	8002d6c <HAL_GetTick>
 8007e08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e0a:	e008      	b.n	8007e1e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e0c:	f7fa ffae 	bl	8002d6c <HAL_GetTick>
 8007e10:	4602      	mov	r2, r0
 8007e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d901      	bls.n	8007e1e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e070      	b.n	8007f00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e1e:	4b3a      	ldr	r3, [pc, #232]	@ (8007f08 <HAL_RCC_OscConfig+0x8ac>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1f0      	bne.n	8007e0c <HAL_RCC_OscConfig+0x7b0>
 8007e2a:	e068      	b.n	8007efe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007e2c:	4b36      	ldr	r3, [pc, #216]	@ (8007f08 <HAL_RCC_OscConfig+0x8ac>)
 8007e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e30:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007e32:	4b35      	ldr	r3, [pc, #212]	@ (8007f08 <HAL_RCC_OscConfig+0x8ac>)
 8007e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e36:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d031      	beq.n	8007ea4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	f003 0203 	and.w	r2, r3, #3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d12a      	bne.n	8007ea4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	091b      	lsrs	r3, r3, #4
 8007e52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d122      	bne.n	8007ea4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e68:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d11a      	bne.n	8007ea4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	0a5b      	lsrs	r3, r3, #9
 8007e72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e7a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d111      	bne.n	8007ea4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	0c1b      	lsrs	r3, r3, #16
 8007e84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e8c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d108      	bne.n	8007ea4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	0e1b      	lsrs	r3, r3, #24
 8007e96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e9e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d001      	beq.n	8007ea8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e02b      	b.n	8007f00 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007ea8:	4b17      	ldr	r3, [pc, #92]	@ (8007f08 <HAL_RCC_OscConfig+0x8ac>)
 8007eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eac:	08db      	lsrs	r3, r3, #3
 8007eae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007eb2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007eb8:	693a      	ldr	r2, [r7, #16]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d01f      	beq.n	8007efe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007ebe:	4b12      	ldr	r3, [pc, #72]	@ (8007f08 <HAL_RCC_OscConfig+0x8ac>)
 8007ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec2:	4a11      	ldr	r2, [pc, #68]	@ (8007f08 <HAL_RCC_OscConfig+0x8ac>)
 8007ec4:	f023 0301 	bic.w	r3, r3, #1
 8007ec8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007eca:	f7fa ff4f 	bl	8002d6c <HAL_GetTick>
 8007ece:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007ed0:	bf00      	nop
 8007ed2:	f7fa ff4b 	bl	8002d6c <HAL_GetTick>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d0f9      	beq.n	8007ed2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007ede:	4b0a      	ldr	r3, [pc, #40]	@ (8007f08 <HAL_RCC_OscConfig+0x8ac>)
 8007ee0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8007f0c <HAL_RCC_OscConfig+0x8b0>)
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007eea:	00d2      	lsls	r2, r2, #3
 8007eec:	4906      	ldr	r1, [pc, #24]	@ (8007f08 <HAL_RCC_OscConfig+0x8ac>)
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007ef2:	4b05      	ldr	r3, [pc, #20]	@ (8007f08 <HAL_RCC_OscConfig+0x8ac>)
 8007ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ef6:	4a04      	ldr	r2, [pc, #16]	@ (8007f08 <HAL_RCC_OscConfig+0x8ac>)
 8007ef8:	f043 0301 	orr.w	r3, r3, #1
 8007efc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3730      	adds	r7, #48	@ 0x30
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	58024400 	.word	0x58024400
 8007f0c:	ffff0007 	.word	0xffff0007

08007f10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d101      	bne.n	8007f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	e19c      	b.n	800825e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f24:	4b8a      	ldr	r3, [pc, #552]	@ (8008150 <HAL_RCC_ClockConfig+0x240>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 030f 	and.w	r3, r3, #15
 8007f2c:	683a      	ldr	r2, [r7, #0]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d910      	bls.n	8007f54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f32:	4b87      	ldr	r3, [pc, #540]	@ (8008150 <HAL_RCC_ClockConfig+0x240>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f023 020f 	bic.w	r2, r3, #15
 8007f3a:	4985      	ldr	r1, [pc, #532]	@ (8008150 <HAL_RCC_ClockConfig+0x240>)
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f42:	4b83      	ldr	r3, [pc, #524]	@ (8008150 <HAL_RCC_ClockConfig+0x240>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 030f 	and.w	r3, r3, #15
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d001      	beq.n	8007f54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e184      	b.n	800825e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0304 	and.w	r3, r3, #4
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d010      	beq.n	8007f82 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	691a      	ldr	r2, [r3, #16]
 8007f64:	4b7b      	ldr	r3, [pc, #492]	@ (8008154 <HAL_RCC_ClockConfig+0x244>)
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d908      	bls.n	8007f82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007f70:	4b78      	ldr	r3, [pc, #480]	@ (8008154 <HAL_RCC_ClockConfig+0x244>)
 8007f72:	699b      	ldr	r3, [r3, #24]
 8007f74:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	4975      	ldr	r1, [pc, #468]	@ (8008154 <HAL_RCC_ClockConfig+0x244>)
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f003 0308 	and.w	r3, r3, #8
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d010      	beq.n	8007fb0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	695a      	ldr	r2, [r3, #20]
 8007f92:	4b70      	ldr	r3, [pc, #448]	@ (8008154 <HAL_RCC_ClockConfig+0x244>)
 8007f94:	69db      	ldr	r3, [r3, #28]
 8007f96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d908      	bls.n	8007fb0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007f9e:	4b6d      	ldr	r3, [pc, #436]	@ (8008154 <HAL_RCC_ClockConfig+0x244>)
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	496a      	ldr	r1, [pc, #424]	@ (8008154 <HAL_RCC_ClockConfig+0x244>)
 8007fac:	4313      	orrs	r3, r2
 8007fae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 0310 	and.w	r3, r3, #16
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d010      	beq.n	8007fde <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	699a      	ldr	r2, [r3, #24]
 8007fc0:	4b64      	ldr	r3, [pc, #400]	@ (8008154 <HAL_RCC_ClockConfig+0x244>)
 8007fc2:	69db      	ldr	r3, [r3, #28]
 8007fc4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d908      	bls.n	8007fde <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007fcc:	4b61      	ldr	r3, [pc, #388]	@ (8008154 <HAL_RCC_ClockConfig+0x244>)
 8007fce:	69db      	ldr	r3, [r3, #28]
 8007fd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	495e      	ldr	r1, [pc, #376]	@ (8008154 <HAL_RCC_ClockConfig+0x244>)
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 0320 	and.w	r3, r3, #32
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d010      	beq.n	800800c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	69da      	ldr	r2, [r3, #28]
 8007fee:	4b59      	ldr	r3, [pc, #356]	@ (8008154 <HAL_RCC_ClockConfig+0x244>)
 8007ff0:	6a1b      	ldr	r3, [r3, #32]
 8007ff2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d908      	bls.n	800800c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007ffa:	4b56      	ldr	r3, [pc, #344]	@ (8008154 <HAL_RCC_ClockConfig+0x244>)
 8007ffc:	6a1b      	ldr	r3, [r3, #32]
 8007ffe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	69db      	ldr	r3, [r3, #28]
 8008006:	4953      	ldr	r1, [pc, #332]	@ (8008154 <HAL_RCC_ClockConfig+0x244>)
 8008008:	4313      	orrs	r3, r2
 800800a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0302 	and.w	r3, r3, #2
 8008014:	2b00      	cmp	r3, #0
 8008016:	d010      	beq.n	800803a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68da      	ldr	r2, [r3, #12]
 800801c:	4b4d      	ldr	r3, [pc, #308]	@ (8008154 <HAL_RCC_ClockConfig+0x244>)
 800801e:	699b      	ldr	r3, [r3, #24]
 8008020:	f003 030f 	and.w	r3, r3, #15
 8008024:	429a      	cmp	r2, r3
 8008026:	d908      	bls.n	800803a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008028:	4b4a      	ldr	r3, [pc, #296]	@ (8008154 <HAL_RCC_ClockConfig+0x244>)
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	f023 020f 	bic.w	r2, r3, #15
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	4947      	ldr	r1, [pc, #284]	@ (8008154 <HAL_RCC_ClockConfig+0x244>)
 8008036:	4313      	orrs	r3, r2
 8008038:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 0301 	and.w	r3, r3, #1
 8008042:	2b00      	cmp	r3, #0
 8008044:	d055      	beq.n	80080f2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008046:	4b43      	ldr	r3, [pc, #268]	@ (8008154 <HAL_RCC_ClockConfig+0x244>)
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	4940      	ldr	r1, [pc, #256]	@ (8008154 <HAL_RCC_ClockConfig+0x244>)
 8008054:	4313      	orrs	r3, r2
 8008056:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	2b02      	cmp	r3, #2
 800805e:	d107      	bne.n	8008070 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008060:	4b3c      	ldr	r3, [pc, #240]	@ (8008154 <HAL_RCC_ClockConfig+0x244>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008068:	2b00      	cmp	r3, #0
 800806a:	d121      	bne.n	80080b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e0f6      	b.n	800825e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	2b03      	cmp	r3, #3
 8008076:	d107      	bne.n	8008088 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008078:	4b36      	ldr	r3, [pc, #216]	@ (8008154 <HAL_RCC_ClockConfig+0x244>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008080:	2b00      	cmp	r3, #0
 8008082:	d115      	bne.n	80080b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e0ea      	b.n	800825e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d107      	bne.n	80080a0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008090:	4b30      	ldr	r3, [pc, #192]	@ (8008154 <HAL_RCC_ClockConfig+0x244>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008098:	2b00      	cmp	r3, #0
 800809a:	d109      	bne.n	80080b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	e0de      	b.n	800825e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080a0:	4b2c      	ldr	r3, [pc, #176]	@ (8008154 <HAL_RCC_ClockConfig+0x244>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 0304 	and.w	r3, r3, #4
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d101      	bne.n	80080b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e0d6      	b.n	800825e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80080b0:	4b28      	ldr	r3, [pc, #160]	@ (8008154 <HAL_RCC_ClockConfig+0x244>)
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	f023 0207 	bic.w	r2, r3, #7
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	4925      	ldr	r1, [pc, #148]	@ (8008154 <HAL_RCC_ClockConfig+0x244>)
 80080be:	4313      	orrs	r3, r2
 80080c0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080c2:	f7fa fe53 	bl	8002d6c <HAL_GetTick>
 80080c6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080c8:	e00a      	b.n	80080e0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080ca:	f7fa fe4f 	bl	8002d6c <HAL_GetTick>
 80080ce:	4602      	mov	r2, r0
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080d8:	4293      	cmp	r3, r2
 80080da:	d901      	bls.n	80080e0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80080dc:	2303      	movs	r3, #3
 80080de:	e0be      	b.n	800825e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080e0:	4b1c      	ldr	r3, [pc, #112]	@ (8008154 <HAL_RCC_ClockConfig+0x244>)
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	00db      	lsls	r3, r3, #3
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d1eb      	bne.n	80080ca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d010      	beq.n	8008120 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68da      	ldr	r2, [r3, #12]
 8008102:	4b14      	ldr	r3, [pc, #80]	@ (8008154 <HAL_RCC_ClockConfig+0x244>)
 8008104:	699b      	ldr	r3, [r3, #24]
 8008106:	f003 030f 	and.w	r3, r3, #15
 800810a:	429a      	cmp	r2, r3
 800810c:	d208      	bcs.n	8008120 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800810e:	4b11      	ldr	r3, [pc, #68]	@ (8008154 <HAL_RCC_ClockConfig+0x244>)
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	f023 020f 	bic.w	r2, r3, #15
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	490e      	ldr	r1, [pc, #56]	@ (8008154 <HAL_RCC_ClockConfig+0x244>)
 800811c:	4313      	orrs	r3, r2
 800811e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008120:	4b0b      	ldr	r3, [pc, #44]	@ (8008150 <HAL_RCC_ClockConfig+0x240>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 030f 	and.w	r3, r3, #15
 8008128:	683a      	ldr	r2, [r7, #0]
 800812a:	429a      	cmp	r2, r3
 800812c:	d214      	bcs.n	8008158 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800812e:	4b08      	ldr	r3, [pc, #32]	@ (8008150 <HAL_RCC_ClockConfig+0x240>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f023 020f 	bic.w	r2, r3, #15
 8008136:	4906      	ldr	r1, [pc, #24]	@ (8008150 <HAL_RCC_ClockConfig+0x240>)
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	4313      	orrs	r3, r2
 800813c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800813e:	4b04      	ldr	r3, [pc, #16]	@ (8008150 <HAL_RCC_ClockConfig+0x240>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 030f 	and.w	r3, r3, #15
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	429a      	cmp	r2, r3
 800814a:	d005      	beq.n	8008158 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e086      	b.n	800825e <HAL_RCC_ClockConfig+0x34e>
 8008150:	52002000 	.word	0x52002000
 8008154:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 0304 	and.w	r3, r3, #4
 8008160:	2b00      	cmp	r3, #0
 8008162:	d010      	beq.n	8008186 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	691a      	ldr	r2, [r3, #16]
 8008168:	4b3f      	ldr	r3, [pc, #252]	@ (8008268 <HAL_RCC_ClockConfig+0x358>)
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008170:	429a      	cmp	r2, r3
 8008172:	d208      	bcs.n	8008186 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008174:	4b3c      	ldr	r3, [pc, #240]	@ (8008268 <HAL_RCC_ClockConfig+0x358>)
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	4939      	ldr	r1, [pc, #228]	@ (8008268 <HAL_RCC_ClockConfig+0x358>)
 8008182:	4313      	orrs	r3, r2
 8008184:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 0308 	and.w	r3, r3, #8
 800818e:	2b00      	cmp	r3, #0
 8008190:	d010      	beq.n	80081b4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	695a      	ldr	r2, [r3, #20]
 8008196:	4b34      	ldr	r3, [pc, #208]	@ (8008268 <HAL_RCC_ClockConfig+0x358>)
 8008198:	69db      	ldr	r3, [r3, #28]
 800819a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800819e:	429a      	cmp	r2, r3
 80081a0:	d208      	bcs.n	80081b4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80081a2:	4b31      	ldr	r3, [pc, #196]	@ (8008268 <HAL_RCC_ClockConfig+0x358>)
 80081a4:	69db      	ldr	r3, [r3, #28]
 80081a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	695b      	ldr	r3, [r3, #20]
 80081ae:	492e      	ldr	r1, [pc, #184]	@ (8008268 <HAL_RCC_ClockConfig+0x358>)
 80081b0:	4313      	orrs	r3, r2
 80081b2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0310 	and.w	r3, r3, #16
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d010      	beq.n	80081e2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	699a      	ldr	r2, [r3, #24]
 80081c4:	4b28      	ldr	r3, [pc, #160]	@ (8008268 <HAL_RCC_ClockConfig+0x358>)
 80081c6:	69db      	ldr	r3, [r3, #28]
 80081c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d208      	bcs.n	80081e2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80081d0:	4b25      	ldr	r3, [pc, #148]	@ (8008268 <HAL_RCC_ClockConfig+0x358>)
 80081d2:	69db      	ldr	r3, [r3, #28]
 80081d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	699b      	ldr	r3, [r3, #24]
 80081dc:	4922      	ldr	r1, [pc, #136]	@ (8008268 <HAL_RCC_ClockConfig+0x358>)
 80081de:	4313      	orrs	r3, r2
 80081e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 0320 	and.w	r3, r3, #32
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d010      	beq.n	8008210 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	69da      	ldr	r2, [r3, #28]
 80081f2:	4b1d      	ldr	r3, [pc, #116]	@ (8008268 <HAL_RCC_ClockConfig+0x358>)
 80081f4:	6a1b      	ldr	r3, [r3, #32]
 80081f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d208      	bcs.n	8008210 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80081fe:	4b1a      	ldr	r3, [pc, #104]	@ (8008268 <HAL_RCC_ClockConfig+0x358>)
 8008200:	6a1b      	ldr	r3, [r3, #32]
 8008202:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	69db      	ldr	r3, [r3, #28]
 800820a:	4917      	ldr	r1, [pc, #92]	@ (8008268 <HAL_RCC_ClockConfig+0x358>)
 800820c:	4313      	orrs	r3, r2
 800820e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008210:	f000 f834 	bl	800827c <HAL_RCC_GetSysClockFreq>
 8008214:	4602      	mov	r2, r0
 8008216:	4b14      	ldr	r3, [pc, #80]	@ (8008268 <HAL_RCC_ClockConfig+0x358>)
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	0a1b      	lsrs	r3, r3, #8
 800821c:	f003 030f 	and.w	r3, r3, #15
 8008220:	4912      	ldr	r1, [pc, #72]	@ (800826c <HAL_RCC_ClockConfig+0x35c>)
 8008222:	5ccb      	ldrb	r3, [r1, r3]
 8008224:	f003 031f 	and.w	r3, r3, #31
 8008228:	fa22 f303 	lsr.w	r3, r2, r3
 800822c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800822e:	4b0e      	ldr	r3, [pc, #56]	@ (8008268 <HAL_RCC_ClockConfig+0x358>)
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	f003 030f 	and.w	r3, r3, #15
 8008236:	4a0d      	ldr	r2, [pc, #52]	@ (800826c <HAL_RCC_ClockConfig+0x35c>)
 8008238:	5cd3      	ldrb	r3, [r2, r3]
 800823a:	f003 031f 	and.w	r3, r3, #31
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	fa22 f303 	lsr.w	r3, r2, r3
 8008244:	4a0a      	ldr	r2, [pc, #40]	@ (8008270 <HAL_RCC_ClockConfig+0x360>)
 8008246:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008248:	4a0a      	ldr	r2, [pc, #40]	@ (8008274 <HAL_RCC_ClockConfig+0x364>)
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800824e:	4b0a      	ldr	r3, [pc, #40]	@ (8008278 <HAL_RCC_ClockConfig+0x368>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4618      	mov	r0, r3
 8008254:	f7f9 ffa2 	bl	800219c <HAL_InitTick>
 8008258:	4603      	mov	r3, r0
 800825a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800825c:	7bfb      	ldrb	r3, [r7, #15]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3718      	adds	r7, #24
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	58024400 	.word	0x58024400
 800826c:	08022cbc 	.word	0x08022cbc
 8008270:	24000008 	.word	0x24000008
 8008274:	24000004 	.word	0x24000004
 8008278:	2400000c 	.word	0x2400000c

0800827c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800827c:	b480      	push	{r7}
 800827e:	b089      	sub	sp, #36	@ 0x24
 8008280:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008282:	4bb3      	ldr	r3, [pc, #716]	@ (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800828a:	2b18      	cmp	r3, #24
 800828c:	f200 8155 	bhi.w	800853a <HAL_RCC_GetSysClockFreq+0x2be>
 8008290:	a201      	add	r2, pc, #4	@ (adr r2, 8008298 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008296:	bf00      	nop
 8008298:	080082fd 	.word	0x080082fd
 800829c:	0800853b 	.word	0x0800853b
 80082a0:	0800853b 	.word	0x0800853b
 80082a4:	0800853b 	.word	0x0800853b
 80082a8:	0800853b 	.word	0x0800853b
 80082ac:	0800853b 	.word	0x0800853b
 80082b0:	0800853b 	.word	0x0800853b
 80082b4:	0800853b 	.word	0x0800853b
 80082b8:	08008323 	.word	0x08008323
 80082bc:	0800853b 	.word	0x0800853b
 80082c0:	0800853b 	.word	0x0800853b
 80082c4:	0800853b 	.word	0x0800853b
 80082c8:	0800853b 	.word	0x0800853b
 80082cc:	0800853b 	.word	0x0800853b
 80082d0:	0800853b 	.word	0x0800853b
 80082d4:	0800853b 	.word	0x0800853b
 80082d8:	08008329 	.word	0x08008329
 80082dc:	0800853b 	.word	0x0800853b
 80082e0:	0800853b 	.word	0x0800853b
 80082e4:	0800853b 	.word	0x0800853b
 80082e8:	0800853b 	.word	0x0800853b
 80082ec:	0800853b 	.word	0x0800853b
 80082f0:	0800853b 	.word	0x0800853b
 80082f4:	0800853b 	.word	0x0800853b
 80082f8:	0800832f 	.word	0x0800832f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082fc:	4b94      	ldr	r3, [pc, #592]	@ (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f003 0320 	and.w	r3, r3, #32
 8008304:	2b00      	cmp	r3, #0
 8008306:	d009      	beq.n	800831c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008308:	4b91      	ldr	r3, [pc, #580]	@ (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	08db      	lsrs	r3, r3, #3
 800830e:	f003 0303 	and.w	r3, r3, #3
 8008312:	4a90      	ldr	r2, [pc, #576]	@ (8008554 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008314:	fa22 f303 	lsr.w	r3, r2, r3
 8008318:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800831a:	e111      	b.n	8008540 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800831c:	4b8d      	ldr	r3, [pc, #564]	@ (8008554 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800831e:	61bb      	str	r3, [r7, #24]
      break;
 8008320:	e10e      	b.n	8008540 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008322:	4b8d      	ldr	r3, [pc, #564]	@ (8008558 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008324:	61bb      	str	r3, [r7, #24]
      break;
 8008326:	e10b      	b.n	8008540 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008328:	4b8c      	ldr	r3, [pc, #560]	@ (800855c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800832a:	61bb      	str	r3, [r7, #24]
      break;
 800832c:	e108      	b.n	8008540 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800832e:	4b88      	ldr	r3, [pc, #544]	@ (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008332:	f003 0303 	and.w	r3, r3, #3
 8008336:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008338:	4b85      	ldr	r3, [pc, #532]	@ (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800833a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800833c:	091b      	lsrs	r3, r3, #4
 800833e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008342:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008344:	4b82      	ldr	r3, [pc, #520]	@ (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008348:	f003 0301 	and.w	r3, r3, #1
 800834c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800834e:	4b80      	ldr	r3, [pc, #512]	@ (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008352:	08db      	lsrs	r3, r3, #3
 8008354:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	fb02 f303 	mul.w	r3, r2, r3
 800835e:	ee07 3a90 	vmov	s15, r3
 8008362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008366:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	2b00      	cmp	r3, #0
 800836e:	f000 80e1 	beq.w	8008534 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	2b02      	cmp	r3, #2
 8008376:	f000 8083 	beq.w	8008480 <HAL_RCC_GetSysClockFreq+0x204>
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	2b02      	cmp	r3, #2
 800837e:	f200 80a1 	bhi.w	80084c4 <HAL_RCC_GetSysClockFreq+0x248>
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d003      	beq.n	8008390 <HAL_RCC_GetSysClockFreq+0x114>
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	2b01      	cmp	r3, #1
 800838c:	d056      	beq.n	800843c <HAL_RCC_GetSysClockFreq+0x1c0>
 800838e:	e099      	b.n	80084c4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008390:	4b6f      	ldr	r3, [pc, #444]	@ (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 0320 	and.w	r3, r3, #32
 8008398:	2b00      	cmp	r3, #0
 800839a:	d02d      	beq.n	80083f8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800839c:	4b6c      	ldr	r3, [pc, #432]	@ (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	08db      	lsrs	r3, r3, #3
 80083a2:	f003 0303 	and.w	r3, r3, #3
 80083a6:	4a6b      	ldr	r2, [pc, #428]	@ (8008554 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80083a8:	fa22 f303 	lsr.w	r3, r2, r3
 80083ac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	ee07 3a90 	vmov	s15, r3
 80083b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	ee07 3a90 	vmov	s15, r3
 80083be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083c6:	4b62      	ldr	r3, [pc, #392]	@ (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ce:	ee07 3a90 	vmov	s15, r3
 80083d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80083da:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008560 <HAL_RCC_GetSysClockFreq+0x2e4>
 80083de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083f2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80083f6:	e087      	b.n	8008508 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	ee07 3a90 	vmov	s15, r3
 80083fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008402:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008564 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800840a:	4b51      	ldr	r3, [pc, #324]	@ (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800840c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800840e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008412:	ee07 3a90 	vmov	s15, r3
 8008416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800841a:	ed97 6a02 	vldr	s12, [r7, #8]
 800841e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008560 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800842a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800842e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008436:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800843a:	e065      	b.n	8008508 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	ee07 3a90 	vmov	s15, r3
 8008442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008446:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008568 <HAL_RCC_GetSysClockFreq+0x2ec>
 800844a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800844e:	4b40      	ldr	r3, [pc, #256]	@ (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008456:	ee07 3a90 	vmov	s15, r3
 800845a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800845e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008462:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008560 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800846a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800846e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800847a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800847e:	e043      	b.n	8008508 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	ee07 3a90 	vmov	s15, r3
 8008486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800848a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800856c <HAL_RCC_GetSysClockFreq+0x2f0>
 800848e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008492:	4b2f      	ldr	r3, [pc, #188]	@ (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800849a:	ee07 3a90 	vmov	s15, r3
 800849e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80084a6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008560 <HAL_RCC_GetSysClockFreq+0x2e4>
 80084aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80084c2:	e021      	b.n	8008508 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	ee07 3a90 	vmov	s15, r3
 80084ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ce:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008568 <HAL_RCC_GetSysClockFreq+0x2ec>
 80084d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084d6:	4b1e      	ldr	r3, [pc, #120]	@ (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084de:	ee07 3a90 	vmov	s15, r3
 80084e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80084ea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008560 <HAL_RCC_GetSysClockFreq+0x2e4>
 80084ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008502:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008506:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008508:	4b11      	ldr	r3, [pc, #68]	@ (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800850a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800850c:	0a5b      	lsrs	r3, r3, #9
 800850e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008512:	3301      	adds	r3, #1
 8008514:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	ee07 3a90 	vmov	s15, r3
 800851c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008520:	edd7 6a07 	vldr	s13, [r7, #28]
 8008524:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800852c:	ee17 3a90 	vmov	r3, s15
 8008530:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008532:	e005      	b.n	8008540 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008534:	2300      	movs	r3, #0
 8008536:	61bb      	str	r3, [r7, #24]
      break;
 8008538:	e002      	b.n	8008540 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800853a:	4b07      	ldr	r3, [pc, #28]	@ (8008558 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800853c:	61bb      	str	r3, [r7, #24]
      break;
 800853e:	bf00      	nop
  }

  return sysclockfreq;
 8008540:	69bb      	ldr	r3, [r7, #24]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3724      	adds	r7, #36	@ 0x24
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	58024400 	.word	0x58024400
 8008554:	03d09000 	.word	0x03d09000
 8008558:	003d0900 	.word	0x003d0900
 800855c:	007a1200 	.word	0x007a1200
 8008560:	46000000 	.word	0x46000000
 8008564:	4c742400 	.word	0x4c742400
 8008568:	4a742400 	.word	0x4a742400
 800856c:	4af42400 	.word	0x4af42400

08008570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008576:	f7ff fe81 	bl	800827c <HAL_RCC_GetSysClockFreq>
 800857a:	4602      	mov	r2, r0
 800857c:	4b10      	ldr	r3, [pc, #64]	@ (80085c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	0a1b      	lsrs	r3, r3, #8
 8008582:	f003 030f 	and.w	r3, r3, #15
 8008586:	490f      	ldr	r1, [pc, #60]	@ (80085c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8008588:	5ccb      	ldrb	r3, [r1, r3]
 800858a:	f003 031f 	and.w	r3, r3, #31
 800858e:	fa22 f303 	lsr.w	r3, r2, r3
 8008592:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008594:	4b0a      	ldr	r3, [pc, #40]	@ (80085c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	f003 030f 	and.w	r3, r3, #15
 800859c:	4a09      	ldr	r2, [pc, #36]	@ (80085c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800859e:	5cd3      	ldrb	r3, [r2, r3]
 80085a0:	f003 031f 	and.w	r3, r3, #31
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	fa22 f303 	lsr.w	r3, r2, r3
 80085aa:	4a07      	ldr	r2, [pc, #28]	@ (80085c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80085ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80085ae:	4a07      	ldr	r2, [pc, #28]	@ (80085cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80085b4:	4b04      	ldr	r3, [pc, #16]	@ (80085c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80085b6:	681b      	ldr	r3, [r3, #0]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	58024400 	.word	0x58024400
 80085c4:	08022cbc 	.word	0x08022cbc
 80085c8:	24000008 	.word	0x24000008
 80085cc:	24000004 	.word	0x24000004

080085d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80085d4:	f7ff ffcc 	bl	8008570 <HAL_RCC_GetHCLKFreq>
 80085d8:	4602      	mov	r2, r0
 80085da:	4b06      	ldr	r3, [pc, #24]	@ (80085f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085dc:	69db      	ldr	r3, [r3, #28]
 80085de:	091b      	lsrs	r3, r3, #4
 80085e0:	f003 0307 	and.w	r3, r3, #7
 80085e4:	4904      	ldr	r1, [pc, #16]	@ (80085f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80085e6:	5ccb      	ldrb	r3, [r1, r3]
 80085e8:	f003 031f 	and.w	r3, r3, #31
 80085ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	58024400 	.word	0x58024400
 80085f8:	08022cbc 	.word	0x08022cbc

080085fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008600:	f7ff ffb6 	bl	8008570 <HAL_RCC_GetHCLKFreq>
 8008604:	4602      	mov	r2, r0
 8008606:	4b06      	ldr	r3, [pc, #24]	@ (8008620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008608:	69db      	ldr	r3, [r3, #28]
 800860a:	0a1b      	lsrs	r3, r3, #8
 800860c:	f003 0307 	and.w	r3, r3, #7
 8008610:	4904      	ldr	r1, [pc, #16]	@ (8008624 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008612:	5ccb      	ldrb	r3, [r1, r3]
 8008614:	f003 031f 	and.w	r3, r3, #31
 8008618:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800861c:	4618      	mov	r0, r3
 800861e:	bd80      	pop	{r7, pc}
 8008620:	58024400 	.word	0x58024400
 8008624:	08022cbc 	.word	0x08022cbc

08008628 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	223f      	movs	r2, #63	@ 0x3f
 8008636:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008638:	4b1a      	ldr	r3, [pc, #104]	@ (80086a4 <HAL_RCC_GetClockConfig+0x7c>)
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	f003 0207 	and.w	r2, r3, #7
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008644:	4b17      	ldr	r3, [pc, #92]	@ (80086a4 <HAL_RCC_GetClockConfig+0x7c>)
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008650:	4b14      	ldr	r3, [pc, #80]	@ (80086a4 <HAL_RCC_GetClockConfig+0x7c>)
 8008652:	699b      	ldr	r3, [r3, #24]
 8008654:	f003 020f 	and.w	r2, r3, #15
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800865c:	4b11      	ldr	r3, [pc, #68]	@ (80086a4 <HAL_RCC_GetClockConfig+0x7c>)
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008668:	4b0e      	ldr	r3, [pc, #56]	@ (80086a4 <HAL_RCC_GetClockConfig+0x7c>)
 800866a:	69db      	ldr	r3, [r3, #28]
 800866c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008674:	4b0b      	ldr	r3, [pc, #44]	@ (80086a4 <HAL_RCC_GetClockConfig+0x7c>)
 8008676:	69db      	ldr	r3, [r3, #28]
 8008678:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008680:	4b08      	ldr	r3, [pc, #32]	@ (80086a4 <HAL_RCC_GetClockConfig+0x7c>)
 8008682:	6a1b      	ldr	r3, [r3, #32]
 8008684:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800868c:	4b06      	ldr	r3, [pc, #24]	@ (80086a8 <HAL_RCC_GetClockConfig+0x80>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 020f 	and.w	r2, r3, #15
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	601a      	str	r2, [r3, #0]
}
 8008698:	bf00      	nop
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr
 80086a4:	58024400 	.word	0x58024400
 80086a8:	52002000 	.word	0x52002000

080086ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80086ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086b0:	b0ca      	sub	sp, #296	@ 0x128
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80086b8:	2300      	movs	r3, #0
 80086ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80086be:	2300      	movs	r3, #0
 80086c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80086c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086cc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80086d0:	2500      	movs	r5, #0
 80086d2:	ea54 0305 	orrs.w	r3, r4, r5
 80086d6:	d049      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80086d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80086de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80086e2:	d02f      	beq.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80086e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80086e8:	d828      	bhi.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80086ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086ee:	d01a      	beq.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80086f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086f4:	d822      	bhi.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d003      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80086fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086fe:	d007      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008700:	e01c      	b.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008702:	4bb8      	ldr	r3, [pc, #736]	@ (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008706:	4ab7      	ldr	r2, [pc, #732]	@ (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008708:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800870c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800870e:	e01a      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008714:	3308      	adds	r3, #8
 8008716:	2102      	movs	r1, #2
 8008718:	4618      	mov	r0, r3
 800871a:	f002 fb61 	bl	800ade0 <RCCEx_PLL2_Config>
 800871e:	4603      	mov	r3, r0
 8008720:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008724:	e00f      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800872a:	3328      	adds	r3, #40	@ 0x28
 800872c:	2102      	movs	r1, #2
 800872e:	4618      	mov	r0, r3
 8008730:	f002 fc08 	bl	800af44 <RCCEx_PLL3_Config>
 8008734:	4603      	mov	r3, r0
 8008736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800873a:	e004      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008742:	e000      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008746:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10a      	bne.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800874e:	4ba5      	ldr	r3, [pc, #660]	@ (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008750:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008752:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800875a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800875c:	4aa1      	ldr	r2, [pc, #644]	@ (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800875e:	430b      	orrs	r3, r1
 8008760:	6513      	str	r3, [r2, #80]	@ 0x50
 8008762:	e003      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008764:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008768:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800876c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008774:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008778:	f04f 0900 	mov.w	r9, #0
 800877c:	ea58 0309 	orrs.w	r3, r8, r9
 8008780:	d047      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008788:	2b04      	cmp	r3, #4
 800878a:	d82a      	bhi.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800878c:	a201      	add	r2, pc, #4	@ (adr r2, 8008794 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800878e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008792:	bf00      	nop
 8008794:	080087a9 	.word	0x080087a9
 8008798:	080087b7 	.word	0x080087b7
 800879c:	080087cd 	.word	0x080087cd
 80087a0:	080087eb 	.word	0x080087eb
 80087a4:	080087eb 	.word	0x080087eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087a8:	4b8e      	ldr	r3, [pc, #568]	@ (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ac:	4a8d      	ldr	r2, [pc, #564]	@ (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80087b4:	e01a      	b.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ba:	3308      	adds	r3, #8
 80087bc:	2100      	movs	r1, #0
 80087be:	4618      	mov	r0, r3
 80087c0:	f002 fb0e 	bl	800ade0 <RCCEx_PLL2_Config>
 80087c4:	4603      	mov	r3, r0
 80087c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80087ca:	e00f      	b.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80087cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087d0:	3328      	adds	r3, #40	@ 0x28
 80087d2:	2100      	movs	r1, #0
 80087d4:	4618      	mov	r0, r3
 80087d6:	f002 fbb5 	bl	800af44 <RCCEx_PLL3_Config>
 80087da:	4603      	mov	r3, r0
 80087dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80087e0:	e004      	b.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087e8:	e000      	b.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80087ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10a      	bne.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80087f4:	4b7b      	ldr	r3, [pc, #492]	@ (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087f8:	f023 0107 	bic.w	r1, r3, #7
 80087fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008802:	4a78      	ldr	r2, [pc, #480]	@ (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008804:	430b      	orrs	r3, r1
 8008806:	6513      	str	r3, [r2, #80]	@ 0x50
 8008808:	e003      	b.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800880a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800880e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800881e:	f04f 0b00 	mov.w	fp, #0
 8008822:	ea5a 030b 	orrs.w	r3, sl, fp
 8008826:	d04c      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800882c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800882e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008832:	d030      	beq.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008834:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008838:	d829      	bhi.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800883a:	2bc0      	cmp	r3, #192	@ 0xc0
 800883c:	d02d      	beq.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800883e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008840:	d825      	bhi.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008842:	2b80      	cmp	r3, #128	@ 0x80
 8008844:	d018      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008846:	2b80      	cmp	r3, #128	@ 0x80
 8008848:	d821      	bhi.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800884a:	2b00      	cmp	r3, #0
 800884c:	d002      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800884e:	2b40      	cmp	r3, #64	@ 0x40
 8008850:	d007      	beq.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008852:	e01c      	b.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008854:	4b63      	ldr	r3, [pc, #396]	@ (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008858:	4a62      	ldr	r2, [pc, #392]	@ (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800885a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800885e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008860:	e01c      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008866:	3308      	adds	r3, #8
 8008868:	2100      	movs	r1, #0
 800886a:	4618      	mov	r0, r3
 800886c:	f002 fab8 	bl	800ade0 <RCCEx_PLL2_Config>
 8008870:	4603      	mov	r3, r0
 8008872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008876:	e011      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800887c:	3328      	adds	r3, #40	@ 0x28
 800887e:	2100      	movs	r1, #0
 8008880:	4618      	mov	r0, r3
 8008882:	f002 fb5f 	bl	800af44 <RCCEx_PLL3_Config>
 8008886:	4603      	mov	r3, r0
 8008888:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800888c:	e006      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008894:	e002      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008896:	bf00      	nop
 8008898:	e000      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800889a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800889c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10a      	bne.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80088a4:	4b4f      	ldr	r3, [pc, #316]	@ (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088a8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80088ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088b2:	4a4c      	ldr	r2, [pc, #304]	@ (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088b4:	430b      	orrs	r3, r1
 80088b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80088b8:	e003      	b.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80088c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ca:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80088ce:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80088d2:	2300      	movs	r3, #0
 80088d4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80088d8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80088dc:	460b      	mov	r3, r1
 80088de:	4313      	orrs	r3, r2
 80088e0:	d053      	beq.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80088e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80088ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80088ee:	d035      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80088f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80088f4:	d82e      	bhi.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80088f6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80088fa:	d031      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80088fc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008900:	d828      	bhi.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008902:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008906:	d01a      	beq.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008908:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800890c:	d822      	bhi.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800890e:	2b00      	cmp	r3, #0
 8008910:	d003      	beq.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008912:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008916:	d007      	beq.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008918:	e01c      	b.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800891a:	4b32      	ldr	r3, [pc, #200]	@ (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800891c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800891e:	4a31      	ldr	r2, [pc, #196]	@ (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008924:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008926:	e01c      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800892c:	3308      	adds	r3, #8
 800892e:	2100      	movs	r1, #0
 8008930:	4618      	mov	r0, r3
 8008932:	f002 fa55 	bl	800ade0 <RCCEx_PLL2_Config>
 8008936:	4603      	mov	r3, r0
 8008938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800893c:	e011      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800893e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008942:	3328      	adds	r3, #40	@ 0x28
 8008944:	2100      	movs	r1, #0
 8008946:	4618      	mov	r0, r3
 8008948:	f002 fafc 	bl	800af44 <RCCEx_PLL3_Config>
 800894c:	4603      	mov	r3, r0
 800894e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008952:	e006      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800895a:	e002      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800895c:	bf00      	nop
 800895e:	e000      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10b      	bne.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800896a:	4b1e      	ldr	r3, [pc, #120]	@ (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800896c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800896e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008976:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800897a:	4a1a      	ldr	r2, [pc, #104]	@ (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800897c:	430b      	orrs	r3, r1
 800897e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008980:	e003      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008982:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008986:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800898a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800898e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008992:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008996:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800899a:	2300      	movs	r3, #0
 800899c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80089a0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80089a4:	460b      	mov	r3, r1
 80089a6:	4313      	orrs	r3, r2
 80089a8:	d056      	beq.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80089aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80089b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80089b6:	d038      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80089b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80089bc:	d831      	bhi.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80089be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80089c2:	d034      	beq.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80089c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80089c8:	d82b      	bhi.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80089ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089ce:	d01d      	beq.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80089d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089d4:	d825      	bhi.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d006      	beq.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80089da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089de:	d00a      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80089e0:	e01f      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80089e2:	bf00      	nop
 80089e4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089e8:	4ba2      	ldr	r3, [pc, #648]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ec:	4aa1      	ldr	r2, [pc, #644]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80089f4:	e01c      	b.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089fa:	3308      	adds	r3, #8
 80089fc:	2100      	movs	r1, #0
 80089fe:	4618      	mov	r0, r3
 8008a00:	f002 f9ee 	bl	800ade0 <RCCEx_PLL2_Config>
 8008a04:	4603      	mov	r3, r0
 8008a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008a0a:	e011      	b.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a10:	3328      	adds	r3, #40	@ 0x28
 8008a12:	2100      	movs	r1, #0
 8008a14:	4618      	mov	r0, r3
 8008a16:	f002 fa95 	bl	800af44 <RCCEx_PLL3_Config>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a20:	e006      	b.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a28:	e002      	b.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008a2a:	bf00      	nop
 8008a2c:	e000      	b.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008a2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d10b      	bne.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008a38:	4b8e      	ldr	r3, [pc, #568]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a3c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008a48:	4a8a      	ldr	r2, [pc, #552]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a4a:	430b      	orrs	r3, r1
 8008a4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a4e:	e003      	b.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a60:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008a64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008a68:	2300      	movs	r3, #0
 8008a6a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008a6e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008a72:	460b      	mov	r3, r1
 8008a74:	4313      	orrs	r3, r2
 8008a76:	d03a      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a7e:	2b30      	cmp	r3, #48	@ 0x30
 8008a80:	d01f      	beq.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008a82:	2b30      	cmp	r3, #48	@ 0x30
 8008a84:	d819      	bhi.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008a86:	2b20      	cmp	r3, #32
 8008a88:	d00c      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008a8a:	2b20      	cmp	r3, #32
 8008a8c:	d815      	bhi.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d019      	beq.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008a92:	2b10      	cmp	r3, #16
 8008a94:	d111      	bne.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a96:	4b77      	ldr	r3, [pc, #476]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a9a:	4a76      	ldr	r2, [pc, #472]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008aa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008aa2:	e011      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aa8:	3308      	adds	r3, #8
 8008aaa:	2102      	movs	r1, #2
 8008aac:	4618      	mov	r0, r3
 8008aae:	f002 f997 	bl	800ade0 <RCCEx_PLL2_Config>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008ab8:	e006      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ac0:	e002      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008ac2:	bf00      	nop
 8008ac4:	e000      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008ac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10a      	bne.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008ad0:	4b68      	ldr	r3, [pc, #416]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ad4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ade:	4a65      	ldr	r2, [pc, #404]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ae0:	430b      	orrs	r3, r1
 8008ae2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008ae4:	e003      	b.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008aea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008afa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008afe:	2300      	movs	r3, #0
 8008b00:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008b04:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	d051      	beq.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b18:	d035      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008b1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b1e:	d82e      	bhi.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008b20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b24:	d031      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008b26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b2a:	d828      	bhi.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008b2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b30:	d01a      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008b32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b36:	d822      	bhi.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d003      	beq.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008b3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b40:	d007      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008b42:	e01c      	b.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b44:	4b4b      	ldr	r3, [pc, #300]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b48:	4a4a      	ldr	r2, [pc, #296]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008b50:	e01c      	b.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b56:	3308      	adds	r3, #8
 8008b58:	2100      	movs	r1, #0
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f002 f940 	bl	800ade0 <RCCEx_PLL2_Config>
 8008b60:	4603      	mov	r3, r0
 8008b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008b66:	e011      	b.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b6c:	3328      	adds	r3, #40	@ 0x28
 8008b6e:	2100      	movs	r1, #0
 8008b70:	4618      	mov	r0, r3
 8008b72:	f002 f9e7 	bl	800af44 <RCCEx_PLL3_Config>
 8008b76:	4603      	mov	r3, r0
 8008b78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008b7c:	e006      	b.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b84:	e002      	b.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008b86:	bf00      	nop
 8008b88:	e000      	b.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10a      	bne.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008b94:	4b37      	ldr	r3, [pc, #220]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b98:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ba2:	4a34      	ldr	r2, [pc, #208]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ba4:	430b      	orrs	r3, r1
 8008ba6:	6513      	str	r3, [r2, #80]	@ 0x50
 8008ba8:	e003      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008baa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008bbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008bc8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008bcc:	460b      	mov	r3, r1
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	d056      	beq.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008bdc:	d033      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008bde:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008be2:	d82c      	bhi.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008be4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008be8:	d02f      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008bea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008bee:	d826      	bhi.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008bf0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008bf4:	d02b      	beq.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008bf6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008bfa:	d820      	bhi.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008bfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c00:	d012      	beq.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008c02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c06:	d81a      	bhi.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d022      	beq.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008c0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c10:	d115      	bne.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c16:	3308      	adds	r3, #8
 8008c18:	2101      	movs	r1, #1
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f002 f8e0 	bl	800ade0 <RCCEx_PLL2_Config>
 8008c20:	4603      	mov	r3, r0
 8008c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008c26:	e015      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c2c:	3328      	adds	r3, #40	@ 0x28
 8008c2e:	2101      	movs	r1, #1
 8008c30:	4618      	mov	r0, r3
 8008c32:	f002 f987 	bl	800af44 <RCCEx_PLL3_Config>
 8008c36:	4603      	mov	r3, r0
 8008c38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008c3c:	e00a      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c44:	e006      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008c46:	bf00      	nop
 8008c48:	e004      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008c4a:	bf00      	nop
 8008c4c:	e002      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008c4e:	bf00      	nop
 8008c50:	e000      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008c52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d10d      	bne.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008c5c:	4b05      	ldr	r3, [pc, #20]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c60:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c6a:	4a02      	ldr	r2, [pc, #8]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c6c:	430b      	orrs	r3, r1
 8008c6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008c70:	e006      	b.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008c72:	bf00      	nop
 8008c74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c88:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008c90:	2300      	movs	r3, #0
 8008c92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008c96:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	d055      	beq.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ca4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008cac:	d033      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008cb2:	d82c      	bhi.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cb8:	d02f      	beq.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008cba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cbe:	d826      	bhi.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008cc0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008cc4:	d02b      	beq.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008cc6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008cca:	d820      	bhi.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008ccc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cd0:	d012      	beq.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008cd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cd6:	d81a      	bhi.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d022      	beq.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008cdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ce0:	d115      	bne.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ce6:	3308      	adds	r3, #8
 8008ce8:	2101      	movs	r1, #1
 8008cea:	4618      	mov	r0, r3
 8008cec:	f002 f878 	bl	800ade0 <RCCEx_PLL2_Config>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008cf6:	e015      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cfc:	3328      	adds	r3, #40	@ 0x28
 8008cfe:	2101      	movs	r1, #1
 8008d00:	4618      	mov	r0, r3
 8008d02:	f002 f91f 	bl	800af44 <RCCEx_PLL3_Config>
 8008d06:	4603      	mov	r3, r0
 8008d08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008d0c:	e00a      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d14:	e006      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008d16:	bf00      	nop
 8008d18:	e004      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008d1a:	bf00      	nop
 8008d1c:	e002      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008d1e:	bf00      	nop
 8008d20:	e000      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008d22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d10b      	bne.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008d2c:	4ba3      	ldr	r3, [pc, #652]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d30:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008d3c:	4a9f      	ldr	r2, [pc, #636]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d3e:	430b      	orrs	r3, r1
 8008d40:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d42:	e003      	b.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d54:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008d58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008d62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008d66:	460b      	mov	r3, r1
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	d037      	beq.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d76:	d00e      	beq.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008d78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d7c:	d816      	bhi.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d018      	beq.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008d82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d86:	d111      	bne.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d88:	4b8c      	ldr	r3, [pc, #560]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d8c:	4a8b      	ldr	r2, [pc, #556]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008d94:	e00f      	b.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d9a:	3308      	adds	r3, #8
 8008d9c:	2101      	movs	r1, #1
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f002 f81e 	bl	800ade0 <RCCEx_PLL2_Config>
 8008da4:	4603      	mov	r3, r0
 8008da6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008daa:	e004      	b.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008db2:	e000      	b.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008db6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d10a      	bne.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008dbe:	4b7f      	ldr	r3, [pc, #508]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dc2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dcc:	4a7b      	ldr	r2, [pc, #492]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dce:	430b      	orrs	r3, r1
 8008dd0:	6513      	str	r3, [r2, #80]	@ 0x50
 8008dd2:	e003      	b.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008de8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008dec:	2300      	movs	r3, #0
 8008dee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008df2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008df6:	460b      	mov	r3, r1
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	d039      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	d81c      	bhi.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008e06:	a201      	add	r2, pc, #4	@ (adr r2, 8008e0c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0c:	08008e49 	.word	0x08008e49
 8008e10:	08008e1d 	.word	0x08008e1d
 8008e14:	08008e2b 	.word	0x08008e2b
 8008e18:	08008e49 	.word	0x08008e49
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e1c:	4b67      	ldr	r3, [pc, #412]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e20:	4a66      	ldr	r2, [pc, #408]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008e28:	e00f      	b.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e2e:	3308      	adds	r3, #8
 8008e30:	2102      	movs	r1, #2
 8008e32:	4618      	mov	r0, r3
 8008e34:	f001 ffd4 	bl	800ade0 <RCCEx_PLL2_Config>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008e3e:	e004      	b.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e46:	e000      	b.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d10a      	bne.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008e52:	4b5a      	ldr	r3, [pc, #360]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e56:	f023 0103 	bic.w	r1, r3, #3
 8008e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e60:	4a56      	ldr	r2, [pc, #344]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e62:	430b      	orrs	r3, r1
 8008e64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008e66:	e003      	b.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e78:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008e7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e80:	2300      	movs	r3, #0
 8008e82:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008e86:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	f000 809f 	beq.w	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e92:	4b4b      	ldr	r3, [pc, #300]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a4a      	ldr	r2, [pc, #296]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008e9e:	f7f9 ff65 	bl	8002d6c <HAL_GetTick>
 8008ea2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ea6:	e00b      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ea8:	f7f9 ff60 	bl	8002d6c <HAL_GetTick>
 8008eac:	4602      	mov	r2, r0
 8008eae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008eb2:	1ad3      	subs	r3, r2, r3
 8008eb4:	2b64      	cmp	r3, #100	@ 0x64
 8008eb6:	d903      	bls.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ebe:	e005      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ec0:	4b3f      	ldr	r3, [pc, #252]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d0ed      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008ecc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d179      	bne.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008ed4:	4b39      	ldr	r3, [pc, #228]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ed6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008edc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008ee0:	4053      	eors	r3, r2
 8008ee2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d015      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008eea:	4b34      	ldr	r3, [pc, #208]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008eee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ef2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008ef6:	4b31      	ldr	r3, [pc, #196]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008efa:	4a30      	ldr	r2, [pc, #192]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f00:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008f02:	4b2e      	ldr	r3, [pc, #184]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f06:	4a2d      	ldr	r2, [pc, #180]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f0c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008f0e:	4a2b      	ldr	r2, [pc, #172]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008f14:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008f1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f22:	d118      	bne.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f24:	f7f9 ff22 	bl	8002d6c <HAL_GetTick>
 8008f28:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f2c:	e00d      	b.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f2e:	f7f9 ff1d 	bl	8002d6c <HAL_GetTick>
 8008f32:	4602      	mov	r2, r0
 8008f34:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008f38:	1ad2      	subs	r2, r2, r3
 8008f3a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d903      	bls.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008f42:	2303      	movs	r3, #3
 8008f44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8008f48:	e005      	b.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f4e:	f003 0302 	and.w	r3, r3, #2
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d0eb      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d129      	bne.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008f66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f6e:	d10e      	bne.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008f70:	4b12      	ldr	r3, [pc, #72]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008f80:	091a      	lsrs	r2, r3, #4
 8008f82:	4b10      	ldr	r3, [pc, #64]	@ (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008f84:	4013      	ands	r3, r2
 8008f86:	4a0d      	ldr	r2, [pc, #52]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f88:	430b      	orrs	r3, r1
 8008f8a:	6113      	str	r3, [r2, #16]
 8008f8c:	e005      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f90:	691b      	ldr	r3, [r3, #16]
 8008f92:	4a0a      	ldr	r2, [pc, #40]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f94:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008f98:	6113      	str	r3, [r2, #16]
 8008f9a:	4b08      	ldr	r3, [pc, #32]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f9c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fa2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008faa:	4a04      	ldr	r2, [pc, #16]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fac:	430b      	orrs	r3, r1
 8008fae:	6713      	str	r3, [r2, #112]	@ 0x70
 8008fb0:	e00e      	b.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008fba:	e009      	b.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008fbc:	58024400 	.word	0x58024400
 8008fc0:	58024800 	.word	0x58024800
 8008fc4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd8:	f002 0301 	and.w	r3, r2, #1
 8008fdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008fe6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008fea:	460b      	mov	r3, r1
 8008fec:	4313      	orrs	r3, r2
 8008fee:	f000 8089 	beq.w	8009104 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ff6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ff8:	2b28      	cmp	r3, #40	@ 0x28
 8008ffa:	d86b      	bhi.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8009004 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009002:	bf00      	nop
 8009004:	080090dd 	.word	0x080090dd
 8009008:	080090d5 	.word	0x080090d5
 800900c:	080090d5 	.word	0x080090d5
 8009010:	080090d5 	.word	0x080090d5
 8009014:	080090d5 	.word	0x080090d5
 8009018:	080090d5 	.word	0x080090d5
 800901c:	080090d5 	.word	0x080090d5
 8009020:	080090d5 	.word	0x080090d5
 8009024:	080090a9 	.word	0x080090a9
 8009028:	080090d5 	.word	0x080090d5
 800902c:	080090d5 	.word	0x080090d5
 8009030:	080090d5 	.word	0x080090d5
 8009034:	080090d5 	.word	0x080090d5
 8009038:	080090d5 	.word	0x080090d5
 800903c:	080090d5 	.word	0x080090d5
 8009040:	080090d5 	.word	0x080090d5
 8009044:	080090bf 	.word	0x080090bf
 8009048:	080090d5 	.word	0x080090d5
 800904c:	080090d5 	.word	0x080090d5
 8009050:	080090d5 	.word	0x080090d5
 8009054:	080090d5 	.word	0x080090d5
 8009058:	080090d5 	.word	0x080090d5
 800905c:	080090d5 	.word	0x080090d5
 8009060:	080090d5 	.word	0x080090d5
 8009064:	080090dd 	.word	0x080090dd
 8009068:	080090d5 	.word	0x080090d5
 800906c:	080090d5 	.word	0x080090d5
 8009070:	080090d5 	.word	0x080090d5
 8009074:	080090d5 	.word	0x080090d5
 8009078:	080090d5 	.word	0x080090d5
 800907c:	080090d5 	.word	0x080090d5
 8009080:	080090d5 	.word	0x080090d5
 8009084:	080090dd 	.word	0x080090dd
 8009088:	080090d5 	.word	0x080090d5
 800908c:	080090d5 	.word	0x080090d5
 8009090:	080090d5 	.word	0x080090d5
 8009094:	080090d5 	.word	0x080090d5
 8009098:	080090d5 	.word	0x080090d5
 800909c:	080090d5 	.word	0x080090d5
 80090a0:	080090d5 	.word	0x080090d5
 80090a4:	080090dd 	.word	0x080090dd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80090a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ac:	3308      	adds	r3, #8
 80090ae:	2101      	movs	r1, #1
 80090b0:	4618      	mov	r0, r3
 80090b2:	f001 fe95 	bl	800ade0 <RCCEx_PLL2_Config>
 80090b6:	4603      	mov	r3, r0
 80090b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80090bc:	e00f      	b.n	80090de <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090c2:	3328      	adds	r3, #40	@ 0x28
 80090c4:	2101      	movs	r1, #1
 80090c6:	4618      	mov	r0, r3
 80090c8:	f001 ff3c 	bl	800af44 <RCCEx_PLL3_Config>
 80090cc:	4603      	mov	r3, r0
 80090ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80090d2:	e004      	b.n	80090de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80090da:	e000      	b.n	80090de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80090dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10a      	bne.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80090e6:	4bbf      	ldr	r3, [pc, #764]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090ea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80090ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090f4:	4abb      	ldr	r2, [pc, #748]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090f6:	430b      	orrs	r3, r1
 80090f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80090fa:	e003      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009100:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910c:	f002 0302 	and.w	r3, r2, #2
 8009110:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009114:	2300      	movs	r3, #0
 8009116:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800911a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800911e:	460b      	mov	r3, r1
 8009120:	4313      	orrs	r3, r2
 8009122:	d041      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009128:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800912a:	2b05      	cmp	r3, #5
 800912c:	d824      	bhi.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800912e:	a201      	add	r2, pc, #4	@ (adr r2, 8009134 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009134:	08009181 	.word	0x08009181
 8009138:	0800914d 	.word	0x0800914d
 800913c:	08009163 	.word	0x08009163
 8009140:	08009181 	.word	0x08009181
 8009144:	08009181 	.word	0x08009181
 8009148:	08009181 	.word	0x08009181
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800914c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009150:	3308      	adds	r3, #8
 8009152:	2101      	movs	r1, #1
 8009154:	4618      	mov	r0, r3
 8009156:	f001 fe43 	bl	800ade0 <RCCEx_PLL2_Config>
 800915a:	4603      	mov	r3, r0
 800915c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009160:	e00f      	b.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009166:	3328      	adds	r3, #40	@ 0x28
 8009168:	2101      	movs	r1, #1
 800916a:	4618      	mov	r0, r3
 800916c:	f001 feea 	bl	800af44 <RCCEx_PLL3_Config>
 8009170:	4603      	mov	r3, r0
 8009172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009176:	e004      	b.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800917e:	e000      	b.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009186:	2b00      	cmp	r3, #0
 8009188:	d10a      	bne.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800918a:	4b96      	ldr	r3, [pc, #600]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800918c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800918e:	f023 0107 	bic.w	r1, r3, #7
 8009192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009196:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009198:	4a92      	ldr	r2, [pc, #584]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800919a:	430b      	orrs	r3, r1
 800919c:	6553      	str	r3, [r2, #84]	@ 0x54
 800919e:	e003      	b.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80091a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b0:	f002 0304 	and.w	r3, r2, #4
 80091b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80091b8:	2300      	movs	r3, #0
 80091ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80091be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80091c2:	460b      	mov	r3, r1
 80091c4:	4313      	orrs	r3, r2
 80091c6:	d044      	beq.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80091c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80091d0:	2b05      	cmp	r3, #5
 80091d2:	d825      	bhi.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80091d4:	a201      	add	r2, pc, #4	@ (adr r2, 80091dc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80091d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091da:	bf00      	nop
 80091dc:	08009229 	.word	0x08009229
 80091e0:	080091f5 	.word	0x080091f5
 80091e4:	0800920b 	.word	0x0800920b
 80091e8:	08009229 	.word	0x08009229
 80091ec:	08009229 	.word	0x08009229
 80091f0:	08009229 	.word	0x08009229
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091f8:	3308      	adds	r3, #8
 80091fa:	2101      	movs	r1, #1
 80091fc:	4618      	mov	r0, r3
 80091fe:	f001 fdef 	bl	800ade0 <RCCEx_PLL2_Config>
 8009202:	4603      	mov	r3, r0
 8009204:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009208:	e00f      	b.n	800922a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800920a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800920e:	3328      	adds	r3, #40	@ 0x28
 8009210:	2101      	movs	r1, #1
 8009212:	4618      	mov	r0, r3
 8009214:	f001 fe96 	bl	800af44 <RCCEx_PLL3_Config>
 8009218:	4603      	mov	r3, r0
 800921a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800921e:	e004      	b.n	800922a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009226:	e000      	b.n	800922a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800922a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800922e:	2b00      	cmp	r3, #0
 8009230:	d10b      	bne.n	800924a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009232:	4b6c      	ldr	r3, [pc, #432]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009236:	f023 0107 	bic.w	r1, r3, #7
 800923a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800923e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009242:	4a68      	ldr	r2, [pc, #416]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009244:	430b      	orrs	r3, r1
 8009246:	6593      	str	r3, [r2, #88]	@ 0x58
 8009248:	e003      	b.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800924a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800924e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925a:	f002 0320 	and.w	r3, r2, #32
 800925e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009262:	2300      	movs	r3, #0
 8009264:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009268:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800926c:	460b      	mov	r3, r1
 800926e:	4313      	orrs	r3, r2
 8009270:	d055      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800927a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800927e:	d033      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009280:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009284:	d82c      	bhi.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800928a:	d02f      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800928c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009290:	d826      	bhi.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009292:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009296:	d02b      	beq.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009298:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800929c:	d820      	bhi.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800929e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092a2:	d012      	beq.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80092a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092a8:	d81a      	bhi.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d022      	beq.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80092ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092b2:	d115      	bne.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092b8:	3308      	adds	r3, #8
 80092ba:	2100      	movs	r1, #0
 80092bc:	4618      	mov	r0, r3
 80092be:	f001 fd8f 	bl	800ade0 <RCCEx_PLL2_Config>
 80092c2:	4603      	mov	r3, r0
 80092c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80092c8:	e015      	b.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80092ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ce:	3328      	adds	r3, #40	@ 0x28
 80092d0:	2102      	movs	r1, #2
 80092d2:	4618      	mov	r0, r3
 80092d4:	f001 fe36 	bl	800af44 <RCCEx_PLL3_Config>
 80092d8:	4603      	mov	r3, r0
 80092da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80092de:	e00a      	b.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80092e6:	e006      	b.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80092e8:	bf00      	nop
 80092ea:	e004      	b.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80092ec:	bf00      	nop
 80092ee:	e002      	b.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80092f0:	bf00      	nop
 80092f2:	e000      	b.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80092f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d10b      	bne.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80092fe:	4b39      	ldr	r3, [pc, #228]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009302:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800930a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800930e:	4a35      	ldr	r2, [pc, #212]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009310:	430b      	orrs	r3, r1
 8009312:	6553      	str	r3, [r2, #84]	@ 0x54
 8009314:	e003      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800931a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800931e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009326:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800932a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800932e:	2300      	movs	r3, #0
 8009330:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009334:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009338:	460b      	mov	r3, r1
 800933a:	4313      	orrs	r3, r2
 800933c:	d058      	beq.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800933e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009342:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009346:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800934a:	d033      	beq.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800934c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009350:	d82c      	bhi.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009356:	d02f      	beq.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009358:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800935c:	d826      	bhi.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800935e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009362:	d02b      	beq.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009364:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009368:	d820      	bhi.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800936a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800936e:	d012      	beq.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009370:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009374:	d81a      	bhi.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009376:	2b00      	cmp	r3, #0
 8009378:	d022      	beq.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800937a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800937e:	d115      	bne.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009384:	3308      	adds	r3, #8
 8009386:	2100      	movs	r1, #0
 8009388:	4618      	mov	r0, r3
 800938a:	f001 fd29 	bl	800ade0 <RCCEx_PLL2_Config>
 800938e:	4603      	mov	r3, r0
 8009390:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009394:	e015      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800939a:	3328      	adds	r3, #40	@ 0x28
 800939c:	2102      	movs	r1, #2
 800939e:	4618      	mov	r0, r3
 80093a0:	f001 fdd0 	bl	800af44 <RCCEx_PLL3_Config>
 80093a4:	4603      	mov	r3, r0
 80093a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80093aa:	e00a      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80093b2:	e006      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80093b4:	bf00      	nop
 80093b6:	e004      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80093b8:	bf00      	nop
 80093ba:	e002      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80093bc:	bf00      	nop
 80093be:	e000      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80093c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d10e      	bne.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80093ca:	4b06      	ldr	r3, [pc, #24]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80093cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093ce:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80093d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80093da:	4a02      	ldr	r2, [pc, #8]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80093dc:	430b      	orrs	r3, r1
 80093de:	6593      	str	r3, [r2, #88]	@ 0x58
 80093e0:	e006      	b.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80093e2:	bf00      	nop
 80093e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80093f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80093fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009400:	2300      	movs	r3, #0
 8009402:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009406:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800940a:	460b      	mov	r3, r1
 800940c:	4313      	orrs	r3, r2
 800940e:	d055      	beq.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009414:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009418:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800941c:	d033      	beq.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800941e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009422:	d82c      	bhi.n	800947e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009424:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009428:	d02f      	beq.n	800948a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800942a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800942e:	d826      	bhi.n	800947e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009430:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009434:	d02b      	beq.n	800948e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009436:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800943a:	d820      	bhi.n	800947e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800943c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009440:	d012      	beq.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009442:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009446:	d81a      	bhi.n	800947e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009448:	2b00      	cmp	r3, #0
 800944a:	d022      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800944c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009450:	d115      	bne.n	800947e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009456:	3308      	adds	r3, #8
 8009458:	2100      	movs	r1, #0
 800945a:	4618      	mov	r0, r3
 800945c:	f001 fcc0 	bl	800ade0 <RCCEx_PLL2_Config>
 8009460:	4603      	mov	r3, r0
 8009462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009466:	e015      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800946c:	3328      	adds	r3, #40	@ 0x28
 800946e:	2102      	movs	r1, #2
 8009470:	4618      	mov	r0, r3
 8009472:	f001 fd67 	bl	800af44 <RCCEx_PLL3_Config>
 8009476:	4603      	mov	r3, r0
 8009478:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800947c:	e00a      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009484:	e006      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009486:	bf00      	nop
 8009488:	e004      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800948a:	bf00      	nop
 800948c:	e002      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800948e:	bf00      	nop
 8009490:	e000      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009494:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009498:	2b00      	cmp	r3, #0
 800949a:	d10b      	bne.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800949c:	4ba1      	ldr	r3, [pc, #644]	@ (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800949e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094a0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80094a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80094ac:	4a9d      	ldr	r2, [pc, #628]	@ (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094ae:	430b      	orrs	r3, r1
 80094b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80094b2:	e003      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80094bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c4:	f002 0308 	and.w	r3, r2, #8
 80094c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80094cc:	2300      	movs	r3, #0
 80094ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80094d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80094d6:	460b      	mov	r3, r1
 80094d8:	4313      	orrs	r3, r2
 80094da:	d01e      	beq.n	800951a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80094dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094e8:	d10c      	bne.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80094ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ee:	3328      	adds	r3, #40	@ 0x28
 80094f0:	2102      	movs	r1, #2
 80094f2:	4618      	mov	r0, r3
 80094f4:	f001 fd26 	bl	800af44 <RCCEx_PLL3_Config>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d002      	beq.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009504:	4b87      	ldr	r3, [pc, #540]	@ (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009508:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800950c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009510:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009514:	4a83      	ldr	r2, [pc, #524]	@ (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009516:	430b      	orrs	r3, r1
 8009518:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800951a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800951e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009522:	f002 0310 	and.w	r3, r2, #16
 8009526:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800952a:	2300      	movs	r3, #0
 800952c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009530:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009534:	460b      	mov	r3, r1
 8009536:	4313      	orrs	r3, r2
 8009538:	d01e      	beq.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800953a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800953e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009546:	d10c      	bne.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800954c:	3328      	adds	r3, #40	@ 0x28
 800954e:	2102      	movs	r1, #2
 8009550:	4618      	mov	r0, r3
 8009552:	f001 fcf7 	bl	800af44 <RCCEx_PLL3_Config>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d002      	beq.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009562:	4b70      	ldr	r3, [pc, #448]	@ (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009566:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800956a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800956e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009572:	4a6c      	ldr	r2, [pc, #432]	@ (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009574:	430b      	orrs	r3, r1
 8009576:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800957c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009580:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009584:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009588:	2300      	movs	r3, #0
 800958a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800958e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009592:	460b      	mov	r3, r1
 8009594:	4313      	orrs	r3, r2
 8009596:	d03e      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800959c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80095a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095a4:	d022      	beq.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80095a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095aa:	d81b      	bhi.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d003      	beq.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80095b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095b4:	d00b      	beq.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80095b6:	e015      	b.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80095b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095bc:	3308      	adds	r3, #8
 80095be:	2100      	movs	r1, #0
 80095c0:	4618      	mov	r0, r3
 80095c2:	f001 fc0d 	bl	800ade0 <RCCEx_PLL2_Config>
 80095c6:	4603      	mov	r3, r0
 80095c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80095cc:	e00f      	b.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80095ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095d2:	3328      	adds	r3, #40	@ 0x28
 80095d4:	2102      	movs	r1, #2
 80095d6:	4618      	mov	r0, r3
 80095d8:	f001 fcb4 	bl	800af44 <RCCEx_PLL3_Config>
 80095dc:	4603      	mov	r3, r0
 80095de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80095e2:	e004      	b.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095ea:	e000      	b.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80095ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d10b      	bne.n	800960e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80095f6:	4b4b      	ldr	r3, [pc, #300]	@ (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095fa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80095fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009602:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009606:	4a47      	ldr	r2, [pc, #284]	@ (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009608:	430b      	orrs	r3, r1
 800960a:	6593      	str	r3, [r2, #88]	@ 0x58
 800960c:	e003      	b.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800960e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009612:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800961a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009622:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009624:	2300      	movs	r3, #0
 8009626:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009628:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800962c:	460b      	mov	r3, r1
 800962e:	4313      	orrs	r3, r2
 8009630:	d03b      	beq.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800963a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800963e:	d01f      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009640:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009644:	d818      	bhi.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009646:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800964a:	d003      	beq.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800964c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009650:	d007      	beq.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009652:	e011      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009654:	4b33      	ldr	r3, [pc, #204]	@ (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009658:	4a32      	ldr	r2, [pc, #200]	@ (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800965a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800965e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009660:	e00f      	b.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009666:	3328      	adds	r3, #40	@ 0x28
 8009668:	2101      	movs	r1, #1
 800966a:	4618      	mov	r0, r3
 800966c:	f001 fc6a 	bl	800af44 <RCCEx_PLL3_Config>
 8009670:	4603      	mov	r3, r0
 8009672:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009676:	e004      	b.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800967e:	e000      	b.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009682:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009686:	2b00      	cmp	r3, #0
 8009688:	d10b      	bne.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800968a:	4b26      	ldr	r3, [pc, #152]	@ (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800968c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800968e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800969a:	4a22      	ldr	r2, [pc, #136]	@ (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800969c:	430b      	orrs	r3, r1
 800969e:	6553      	str	r3, [r2, #84]	@ 0x54
 80096a0:	e003      	b.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80096aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80096b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80096b8:	2300      	movs	r3, #0
 80096ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80096bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80096c0:	460b      	mov	r3, r1
 80096c2:	4313      	orrs	r3, r2
 80096c4:	d034      	beq.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80096c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d003      	beq.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80096d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096d4:	d007      	beq.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80096d6:	e011      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096d8:	4b12      	ldr	r3, [pc, #72]	@ (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096dc:	4a11      	ldr	r2, [pc, #68]	@ (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80096e4:	e00e      	b.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80096e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096ea:	3308      	adds	r3, #8
 80096ec:	2102      	movs	r1, #2
 80096ee:	4618      	mov	r0, r3
 80096f0:	f001 fb76 	bl	800ade0 <RCCEx_PLL2_Config>
 80096f4:	4603      	mov	r3, r0
 80096f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80096fa:	e003      	b.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80096fc:	2301      	movs	r3, #1
 80096fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009702:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009704:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009708:	2b00      	cmp	r3, #0
 800970a:	d10d      	bne.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800970c:	4b05      	ldr	r3, [pc, #20]	@ (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800970e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009710:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800971a:	4a02      	ldr	r2, [pc, #8]	@ (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800971c:	430b      	orrs	r3, r1
 800971e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009720:	e006      	b.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009722:	bf00      	nop
 8009724:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009728:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800972c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009738:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800973c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800973e:	2300      	movs	r3, #0
 8009740:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009742:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009746:	460b      	mov	r3, r1
 8009748:	4313      	orrs	r3, r2
 800974a:	d00c      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800974c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009750:	3328      	adds	r3, #40	@ 0x28
 8009752:	2102      	movs	r1, #2
 8009754:	4618      	mov	r0, r3
 8009756:	f001 fbf5 	bl	800af44 <RCCEx_PLL3_Config>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d002      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800976a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009772:	663b      	str	r3, [r7, #96]	@ 0x60
 8009774:	2300      	movs	r3, #0
 8009776:	667b      	str	r3, [r7, #100]	@ 0x64
 8009778:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800977c:	460b      	mov	r3, r1
 800977e:	4313      	orrs	r3, r2
 8009780:	d038      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800978a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800978e:	d018      	beq.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009790:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009794:	d811      	bhi.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009796:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800979a:	d014      	beq.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800979c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097a0:	d80b      	bhi.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d011      	beq.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80097a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097aa:	d106      	bne.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097ac:	4bc3      	ldr	r3, [pc, #780]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b0:	4ac2      	ldr	r2, [pc, #776]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80097b8:	e008      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80097c0:	e004      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80097c2:	bf00      	nop
 80097c4:	e002      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80097c6:	bf00      	nop
 80097c8:	e000      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80097ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10b      	bne.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80097d4:	4bb9      	ldr	r3, [pc, #740]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097d8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80097dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097e4:	4ab5      	ldr	r2, [pc, #724]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097e6:	430b      	orrs	r3, r1
 80097e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80097ea:	e003      	b.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80097f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009800:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009802:	2300      	movs	r3, #0
 8009804:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009806:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800980a:	460b      	mov	r3, r1
 800980c:	4313      	orrs	r3, r2
 800980e:	d009      	beq.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009810:	4baa      	ldr	r3, [pc, #680]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009814:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800981c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800981e:	4aa7      	ldr	r2, [pc, #668]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009820:	430b      	orrs	r3, r1
 8009822:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009830:	653b      	str	r3, [r7, #80]	@ 0x50
 8009832:	2300      	movs	r3, #0
 8009834:	657b      	str	r3, [r7, #84]	@ 0x54
 8009836:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800983a:	460b      	mov	r3, r1
 800983c:	4313      	orrs	r3, r2
 800983e:	d00a      	beq.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009840:	4b9e      	ldr	r3, [pc, #632]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800984c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009850:	4a9a      	ldr	r2, [pc, #616]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009852:	430b      	orrs	r3, r1
 8009854:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800985a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009862:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009864:	2300      	movs	r3, #0
 8009866:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009868:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800986c:	460b      	mov	r3, r1
 800986e:	4313      	orrs	r3, r2
 8009870:	d009      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009872:	4b92      	ldr	r3, [pc, #584]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009876:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800987a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800987e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009880:	4a8e      	ldr	r2, [pc, #568]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009882:	430b      	orrs	r3, r1
 8009884:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800988a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009892:	643b      	str	r3, [r7, #64]	@ 0x40
 8009894:	2300      	movs	r3, #0
 8009896:	647b      	str	r3, [r7, #68]	@ 0x44
 8009898:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800989c:	460b      	mov	r3, r1
 800989e:	4313      	orrs	r3, r2
 80098a0:	d00e      	beq.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80098a2:	4b86      	ldr	r3, [pc, #536]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	4a85      	ldr	r2, [pc, #532]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098a8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80098ac:	6113      	str	r3, [r2, #16]
 80098ae:	4b83      	ldr	r3, [pc, #524]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098b0:	6919      	ldr	r1, [r3, #16]
 80098b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80098ba:	4a80      	ldr	r2, [pc, #512]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098bc:	430b      	orrs	r3, r1
 80098be:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80098c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80098cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80098ce:	2300      	movs	r3, #0
 80098d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098d2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80098d6:	460b      	mov	r3, r1
 80098d8:	4313      	orrs	r3, r2
 80098da:	d009      	beq.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80098dc:	4b77      	ldr	r3, [pc, #476]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098e0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80098e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ea:	4a74      	ldr	r2, [pc, #464]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098ec:	430b      	orrs	r3, r1
 80098ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80098f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80098fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80098fe:	2300      	movs	r3, #0
 8009900:	637b      	str	r3, [r7, #52]	@ 0x34
 8009902:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009906:	460b      	mov	r3, r1
 8009908:	4313      	orrs	r3, r2
 800990a:	d00a      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800990c:	4b6b      	ldr	r3, [pc, #428]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800990e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009910:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009918:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800991c:	4a67      	ldr	r2, [pc, #412]	@ (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800991e:	430b      	orrs	r3, r1
 8009920:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992a:	2100      	movs	r1, #0
 800992c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800992e:	f003 0301 	and.w	r3, r3, #1
 8009932:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009934:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009938:	460b      	mov	r3, r1
 800993a:	4313      	orrs	r3, r2
 800993c:	d011      	beq.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800993e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009942:	3308      	adds	r3, #8
 8009944:	2100      	movs	r1, #0
 8009946:	4618      	mov	r0, r3
 8009948:	f001 fa4a 	bl	800ade0 <RCCEx_PLL2_Config>
 800994c:	4603      	mov	r3, r0
 800994e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009952:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009956:	2b00      	cmp	r3, #0
 8009958:	d003      	beq.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800995a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800995e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996a:	2100      	movs	r1, #0
 800996c:	6239      	str	r1, [r7, #32]
 800996e:	f003 0302 	and.w	r3, r3, #2
 8009972:	627b      	str	r3, [r7, #36]	@ 0x24
 8009974:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009978:	460b      	mov	r3, r1
 800997a:	4313      	orrs	r3, r2
 800997c:	d011      	beq.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800997e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009982:	3308      	adds	r3, #8
 8009984:	2101      	movs	r1, #1
 8009986:	4618      	mov	r0, r3
 8009988:	f001 fa2a 	bl	800ade0 <RCCEx_PLL2_Config>
 800998c:	4603      	mov	r3, r0
 800998e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009996:	2b00      	cmp	r3, #0
 8009998:	d003      	beq.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800999a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800999e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80099a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099aa:	2100      	movs	r1, #0
 80099ac:	61b9      	str	r1, [r7, #24]
 80099ae:	f003 0304 	and.w	r3, r3, #4
 80099b2:	61fb      	str	r3, [r7, #28]
 80099b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80099b8:	460b      	mov	r3, r1
 80099ba:	4313      	orrs	r3, r2
 80099bc:	d011      	beq.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80099be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099c2:	3308      	adds	r3, #8
 80099c4:	2102      	movs	r1, #2
 80099c6:	4618      	mov	r0, r3
 80099c8:	f001 fa0a 	bl	800ade0 <RCCEx_PLL2_Config>
 80099cc:	4603      	mov	r3, r0
 80099ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80099d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d003      	beq.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80099e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ea:	2100      	movs	r1, #0
 80099ec:	6139      	str	r1, [r7, #16]
 80099ee:	f003 0308 	and.w	r3, r3, #8
 80099f2:	617b      	str	r3, [r7, #20]
 80099f4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80099f8:	460b      	mov	r3, r1
 80099fa:	4313      	orrs	r3, r2
 80099fc:	d011      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a02:	3328      	adds	r3, #40	@ 0x28
 8009a04:	2100      	movs	r1, #0
 8009a06:	4618      	mov	r0, r3
 8009a08:	f001 fa9c 	bl	800af44 <RCCEx_PLL3_Config>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8009a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d003      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	f003 0310 	and.w	r3, r3, #16
 8009a32:	60fb      	str	r3, [r7, #12]
 8009a34:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009a38:	460b      	mov	r3, r1
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	d011      	beq.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a42:	3328      	adds	r3, #40	@ 0x28
 8009a44:	2101      	movs	r1, #1
 8009a46:	4618      	mov	r0, r3
 8009a48:	f001 fa7c 	bl	800af44 <RCCEx_PLL3_Config>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d003      	beq.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	6039      	str	r1, [r7, #0]
 8009a6e:	f003 0320 	and.w	r3, r3, #32
 8009a72:	607b      	str	r3, [r7, #4]
 8009a74:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009a78:	460b      	mov	r3, r1
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	d011      	beq.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a82:	3328      	adds	r3, #40	@ 0x28
 8009a84:	2102      	movs	r1, #2
 8009a86:	4618      	mov	r0, r3
 8009a88:	f001 fa5c 	bl	800af44 <RCCEx_PLL3_Config>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009a92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d003      	beq.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8009aa2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d101      	bne.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	e000      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009abc:	58024400 	.word	0x58024400

08009ac0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b090      	sub	sp, #64	@ 0x40
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009aca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ace:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009ad2:	430b      	orrs	r3, r1
 8009ad4:	f040 8094 	bne.w	8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009ad8:	4b9e      	ldr	r3, [pc, #632]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009adc:	f003 0307 	and.w	r3, r3, #7
 8009ae0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae4:	2b04      	cmp	r3, #4
 8009ae6:	f200 8087 	bhi.w	8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009aea:	a201      	add	r2, pc, #4	@ (adr r2, 8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af0:	08009b05 	.word	0x08009b05
 8009af4:	08009b2d 	.word	0x08009b2d
 8009af8:	08009b55 	.word	0x08009b55
 8009afc:	08009bf1 	.word	0x08009bf1
 8009b00:	08009b7d 	.word	0x08009b7d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b04:	4b93      	ldr	r3, [pc, #588]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b10:	d108      	bne.n	8009b24 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b16:	4618      	mov	r0, r3
 8009b18:	f001 f810 	bl	800ab3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b20:	f000 bd45 	b.w	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b24:	2300      	movs	r3, #0
 8009b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b28:	f000 bd41 	b.w	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b2c:	4b89      	ldr	r3, [pc, #548]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b38:	d108      	bne.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b3a:	f107 0318 	add.w	r3, r7, #24
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f000 fd54 	bl	800a5ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b48:	f000 bd31 	b.w	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b50:	f000 bd2d 	b.w	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b54:	4b7f      	ldr	r3, [pc, #508]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b60:	d108      	bne.n	8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b62:	f107 030c 	add.w	r3, r7, #12
 8009b66:	4618      	mov	r0, r3
 8009b68:	f000 fe94 	bl	800a894 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b70:	f000 bd1d 	b.w	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b74:	2300      	movs	r3, #0
 8009b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b78:	f000 bd19 	b.w	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b7c:	4b75      	ldr	r3, [pc, #468]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b80:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009b84:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b86:	4b73      	ldr	r3, [pc, #460]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f003 0304 	and.w	r3, r3, #4
 8009b8e:	2b04      	cmp	r3, #4
 8009b90:	d10c      	bne.n	8009bac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d109      	bne.n	8009bac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b98:	4b6e      	ldr	r3, [pc, #440]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	08db      	lsrs	r3, r3, #3
 8009b9e:	f003 0303 	and.w	r3, r3, #3
 8009ba2:	4a6d      	ldr	r2, [pc, #436]	@ (8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8009ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009baa:	e01f      	b.n	8009bec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009bac:	4b69      	ldr	r3, [pc, #420]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bb8:	d106      	bne.n	8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009bc0:	d102      	bne.n	8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009bc2:	4b66      	ldr	r3, [pc, #408]	@ (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bc6:	e011      	b.n	8009bec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009bc8:	4b62      	ldr	r3, [pc, #392]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bd4:	d106      	bne.n	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009bdc:	d102      	bne.n	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009bde:	4b60      	ldr	r3, [pc, #384]	@ (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009be2:	e003      	b.n	8009bec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009be4:	2300      	movs	r3, #0
 8009be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009be8:	f000 bce1 	b.w	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009bec:	f000 bcdf 	b.w	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009bf0:	4b5c      	ldr	r3, [pc, #368]	@ (8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bf4:	f000 bcdb 	b.w	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bfc:	f000 bcd7 	b.w	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009c00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c04:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009c08:	430b      	orrs	r3, r1
 8009c0a:	f040 80ad 	bne.w	8009d68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009c0e:	4b51      	ldr	r3, [pc, #324]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c12:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009c16:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c1e:	d056      	beq.n	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c26:	f200 8090 	bhi.w	8009d4a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c2c:	2bc0      	cmp	r3, #192	@ 0xc0
 8009c2e:	f000 8088 	beq.w	8009d42 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c34:	2bc0      	cmp	r3, #192	@ 0xc0
 8009c36:	f200 8088 	bhi.w	8009d4a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c3c:	2b80      	cmp	r3, #128	@ 0x80
 8009c3e:	d032      	beq.n	8009ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c42:	2b80      	cmp	r3, #128	@ 0x80
 8009c44:	f200 8081 	bhi.w	8009d4a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d003      	beq.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c50:	2b40      	cmp	r3, #64	@ 0x40
 8009c52:	d014      	beq.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009c54:	e079      	b.n	8009d4a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c56:	4b3f      	ldr	r3, [pc, #252]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c62:	d108      	bne.n	8009c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f000 ff67 	bl	800ab3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c72:	f000 bc9c 	b.w	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c76:	2300      	movs	r3, #0
 8009c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c7a:	f000 bc98 	b.w	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c7e:	4b35      	ldr	r3, [pc, #212]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c8a:	d108      	bne.n	8009c9e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c8c:	f107 0318 	add.w	r3, r7, #24
 8009c90:	4618      	mov	r0, r3
 8009c92:	f000 fcab 	bl	800a5ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c9a:	f000 bc88 	b.w	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ca2:	f000 bc84 	b.w	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ca6:	4b2b      	ldr	r3, [pc, #172]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009cae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009cb2:	d108      	bne.n	8009cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cb4:	f107 030c 	add.w	r3, r7, #12
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 fdeb 	bl	800a894 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cc2:	f000 bc74 	b.w	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cca:	f000 bc70 	b.w	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009cce:	4b21      	ldr	r3, [pc, #132]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cd2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009cd6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009cd8:	4b1e      	ldr	r3, [pc, #120]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f003 0304 	and.w	r3, r3, #4
 8009ce0:	2b04      	cmp	r3, #4
 8009ce2:	d10c      	bne.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d109      	bne.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009cea:	4b1a      	ldr	r3, [pc, #104]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	08db      	lsrs	r3, r3, #3
 8009cf0:	f003 0303 	and.w	r3, r3, #3
 8009cf4:	4a18      	ldr	r2, [pc, #96]	@ (8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8009cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cfc:	e01f      	b.n	8009d3e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009cfe:	4b15      	ldr	r3, [pc, #84]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d0a:	d106      	bne.n	8009d1a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d12:	d102      	bne.n	8009d1a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009d14:	4b11      	ldr	r3, [pc, #68]	@ (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d18:	e011      	b.n	8009d3e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d26:	d106      	bne.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d2e:	d102      	bne.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009d30:	4b0b      	ldr	r3, [pc, #44]	@ (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d34:	e003      	b.n	8009d3e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009d36:	2300      	movs	r3, #0
 8009d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009d3a:	f000 bc38 	b.w	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009d3e:	f000 bc36 	b.w	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009d42:	4b08      	ldr	r3, [pc, #32]	@ (8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d46:	f000 bc32 	b.w	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d4e:	f000 bc2e 	b.w	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009d52:	bf00      	nop
 8009d54:	58024400 	.word	0x58024400
 8009d58:	03d09000 	.word	0x03d09000
 8009d5c:	003d0900 	.word	0x003d0900
 8009d60:	007a1200 	.word	0x007a1200
 8009d64:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d6c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009d70:	430b      	orrs	r3, r1
 8009d72:	f040 809c 	bne.w	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009d76:	4b9e      	ldr	r3, [pc, #632]	@ (8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d7a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009d7e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009d86:	d054      	beq.n	8009e32 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d8a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009d8e:	f200 808b 	bhi.w	8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d94:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009d98:	f000 8083 	beq.w	8009ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d9e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009da2:	f200 8081 	bhi.w	8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009dac:	d02f      	beq.n	8009e0e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009db4:	d878      	bhi.n	8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d004      	beq.n	8009dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009dc2:	d012      	beq.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009dc4:	e070      	b.n	8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009dc6:	4b8a      	ldr	r3, [pc, #552]	@ (8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009dce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009dd2:	d107      	bne.n	8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009dd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f000 feaf 	bl	800ab3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009de2:	e3e4      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009de4:	2300      	movs	r3, #0
 8009de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009de8:	e3e1      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009dea:	4b81      	ldr	r3, [pc, #516]	@ (8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009df2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009df6:	d107      	bne.n	8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009df8:	f107 0318 	add.w	r3, r7, #24
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f000 fbf5 	bl	800a5ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009e02:	69bb      	ldr	r3, [r7, #24]
 8009e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e06:	e3d2      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e0c:	e3cf      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e0e:	4b78      	ldr	r3, [pc, #480]	@ (8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e1a:	d107      	bne.n	8009e2c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e1c:	f107 030c 	add.w	r3, r7, #12
 8009e20:	4618      	mov	r0, r3
 8009e22:	f000 fd37 	bl	800a894 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e2a:	e3c0      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e30:	e3bd      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e32:	4b6f      	ldr	r3, [pc, #444]	@ (8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e36:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009e3a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e3c:	4b6c      	ldr	r3, [pc, #432]	@ (8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f003 0304 	and.w	r3, r3, #4
 8009e44:	2b04      	cmp	r3, #4
 8009e46:	d10c      	bne.n	8009e62 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d109      	bne.n	8009e62 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e4e:	4b68      	ldr	r3, [pc, #416]	@ (8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	08db      	lsrs	r3, r3, #3
 8009e54:	f003 0303 	and.w	r3, r3, #3
 8009e58:	4a66      	ldr	r2, [pc, #408]	@ (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e60:	e01e      	b.n	8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e62:	4b63      	ldr	r3, [pc, #396]	@ (8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e6e:	d106      	bne.n	8009e7e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e76:	d102      	bne.n	8009e7e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009e78:	4b5f      	ldr	r3, [pc, #380]	@ (8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e7c:	e010      	b.n	8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e7e:	4b5c      	ldr	r3, [pc, #368]	@ (8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e8a:	d106      	bne.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e92:	d102      	bne.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009e94:	4b59      	ldr	r3, [pc, #356]	@ (8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e98:	e002      	b.n	8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009e9e:	e386      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009ea0:	e385      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009ea2:	4b57      	ldr	r3, [pc, #348]	@ (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ea6:	e382      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009eac:	e37f      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009eae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009eb2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009eb6:	430b      	orrs	r3, r1
 8009eb8:	f040 80a7 	bne.w	800a00a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009ebc:	4b4c      	ldr	r3, [pc, #304]	@ (8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ec0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009ec4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009ecc:	d055      	beq.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009ed4:	f200 8096 	bhi.w	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eda:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009ede:	f000 8084 	beq.w	8009fea <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009ee8:	f200 808c 	bhi.w	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ef2:	d030      	beq.n	8009f56 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009efa:	f200 8083 	bhi.w	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d004      	beq.n	8009f0e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009f0a:	d012      	beq.n	8009f32 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009f0c:	e07a      	b.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f0e:	4b38      	ldr	r3, [pc, #224]	@ (8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f1a:	d107      	bne.n	8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f20:	4618      	mov	r0, r3
 8009f22:	f000 fe0b 	bl	800ab3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f2a:	e340      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f30:	e33d      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f32:	4b2f      	ldr	r3, [pc, #188]	@ (8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f3e:	d107      	bne.n	8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f40:	f107 0318 	add.w	r3, r7, #24
 8009f44:	4618      	mov	r0, r3
 8009f46:	f000 fb51 	bl	800a5ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f4e:	e32e      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f50:	2300      	movs	r3, #0
 8009f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f54:	e32b      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f56:	4b26      	ldr	r3, [pc, #152]	@ (8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f62:	d107      	bne.n	8009f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f64:	f107 030c 	add.w	r3, r7, #12
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f000 fc93 	bl	800a894 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f72:	e31c      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f74:	2300      	movs	r3, #0
 8009f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f78:	e319      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f7e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009f82:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f84:	4b1a      	ldr	r3, [pc, #104]	@ (8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f003 0304 	and.w	r3, r3, #4
 8009f8c:	2b04      	cmp	r3, #4
 8009f8e:	d10c      	bne.n	8009faa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d109      	bne.n	8009faa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f96:	4b16      	ldr	r3, [pc, #88]	@ (8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	08db      	lsrs	r3, r3, #3
 8009f9c:	f003 0303 	and.w	r3, r3, #3
 8009fa0:	4a14      	ldr	r2, [pc, #80]	@ (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8009fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fa8:	e01e      	b.n	8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009faa:	4b11      	ldr	r3, [pc, #68]	@ (8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fb6:	d106      	bne.n	8009fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fbe:	d102      	bne.n	8009fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fc4:	e010      	b.n	8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fd2:	d106      	bne.n	8009fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fda:	d102      	bne.n	8009fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009fdc:	4b07      	ldr	r3, [pc, #28]	@ (8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fe0:	e002      	b.n	8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009fe6:	e2e2      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009fe8:	e2e1      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009fea:	4b05      	ldr	r3, [pc, #20]	@ (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fee:	e2de      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009ff0:	58024400 	.word	0x58024400
 8009ff4:	03d09000 	.word	0x03d09000
 8009ff8:	003d0900 	.word	0x003d0900
 8009ffc:	007a1200 	.word	0x007a1200
 800a000:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a004:	2300      	movs	r3, #0
 800a006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a008:	e2d1      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a00a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a00e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a012:	430b      	orrs	r3, r1
 800a014:	f040 809c 	bne.w	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a018:	4b93      	ldr	r3, [pc, #588]	@ (800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a01a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a01c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a020:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a024:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a028:	d054      	beq.n	800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a02c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a030:	f200 808b 	bhi.w	800a14a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a036:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a03a:	f000 8083 	beq.w	800a144 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a03e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a040:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a044:	f200 8081 	bhi.w	800a14a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a04a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a04e:	d02f      	beq.n	800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a052:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a056:	d878      	bhi.n	800a14a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d004      	beq.n	800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a060:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a064:	d012      	beq.n	800a08c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a066:	e070      	b.n	800a14a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a068:	4b7f      	ldr	r3, [pc, #508]	@ (800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a070:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a074:	d107      	bne.n	800a086 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a07a:	4618      	mov	r0, r3
 800a07c:	f000 fd5e 	bl	800ab3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a084:	e293      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a086:	2300      	movs	r3, #0
 800a088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a08a:	e290      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a08c:	4b76      	ldr	r3, [pc, #472]	@ (800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a094:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a098:	d107      	bne.n	800a0aa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a09a:	f107 0318 	add.w	r3, r7, #24
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f000 faa4 	bl	800a5ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a0a4:	69bb      	ldr	r3, [r7, #24]
 800a0a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0a8:	e281      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0ae:	e27e      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a0b0:	4b6d      	ldr	r3, [pc, #436]	@ (800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0bc:	d107      	bne.n	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0be:	f107 030c 	add.w	r3, r7, #12
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f000 fbe6 	bl	800a894 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0cc:	e26f      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0d2:	e26c      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0d4:	4b64      	ldr	r3, [pc, #400]	@ (800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a0d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a0dc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0de:	4b62      	ldr	r3, [pc, #392]	@ (800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f003 0304 	and.w	r3, r3, #4
 800a0e6:	2b04      	cmp	r3, #4
 800a0e8:	d10c      	bne.n	800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a0ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d109      	bne.n	800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0f0:	4b5d      	ldr	r3, [pc, #372]	@ (800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	08db      	lsrs	r3, r3, #3
 800a0f6:	f003 0303 	and.w	r3, r3, #3
 800a0fa:	4a5c      	ldr	r2, [pc, #368]	@ (800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a0fc:	fa22 f303 	lsr.w	r3, r2, r3
 800a100:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a102:	e01e      	b.n	800a142 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a104:	4b58      	ldr	r3, [pc, #352]	@ (800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a10c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a110:	d106      	bne.n	800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a114:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a118:	d102      	bne.n	800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a11a:	4b55      	ldr	r3, [pc, #340]	@ (800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a11c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a11e:	e010      	b.n	800a142 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a120:	4b51      	ldr	r3, [pc, #324]	@ (800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a128:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a12c:	d106      	bne.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a12e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a130:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a134:	d102      	bne.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a136:	4b4f      	ldr	r3, [pc, #316]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a138:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a13a:	e002      	b.n	800a142 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a13c:	2300      	movs	r3, #0
 800a13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a140:	e235      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a142:	e234      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a144:	4b4c      	ldr	r3, [pc, #304]	@ (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a148:	e231      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a14a:	2300      	movs	r3, #0
 800a14c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a14e:	e22e      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a150:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a154:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a158:	430b      	orrs	r3, r1
 800a15a:	f040 808f 	bne.w	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a15e:	4b42      	ldr	r3, [pc, #264]	@ (800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a160:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a162:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a166:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a16a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a16e:	d06b      	beq.n	800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a172:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a176:	d874      	bhi.n	800a262 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a17a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a17e:	d056      	beq.n	800a22e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a182:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a186:	d86c      	bhi.n	800a262 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a18a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a18e:	d03b      	beq.n	800a208 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a192:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a196:	d864      	bhi.n	800a262 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a19a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a19e:	d021      	beq.n	800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1a6:	d85c      	bhi.n	800a262 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d004      	beq.n	800a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1b4:	d004      	beq.n	800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a1b6:	e054      	b.n	800a262 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a1b8:	f7fe fa0a 	bl	80085d0 <HAL_RCC_GetPCLK1Freq>
 800a1bc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a1be:	e1f6      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1c0:	4b29      	ldr	r3, [pc, #164]	@ (800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1cc:	d107      	bne.n	800a1de <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1ce:	f107 0318 	add.w	r3, r7, #24
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f000 fa0a 	bl	800a5ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1dc:	e1e7      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1e2:	e1e4      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1e4:	4b20      	ldr	r3, [pc, #128]	@ (800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a1ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1f0:	d107      	bne.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1f2:	f107 030c 	add.w	r3, r7, #12
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f000 fb4c 	bl	800a894 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a200:	e1d5      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a202:	2300      	movs	r3, #0
 800a204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a206:	e1d2      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a208:	4b17      	ldr	r3, [pc, #92]	@ (800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f003 0304 	and.w	r3, r3, #4
 800a210:	2b04      	cmp	r3, #4
 800a212:	d109      	bne.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a214:	4b14      	ldr	r3, [pc, #80]	@ (800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	08db      	lsrs	r3, r3, #3
 800a21a:	f003 0303 	and.w	r3, r3, #3
 800a21e:	4a13      	ldr	r2, [pc, #76]	@ (800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a220:	fa22 f303 	lsr.w	r3, r2, r3
 800a224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a226:	e1c2      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a228:	2300      	movs	r3, #0
 800a22a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a22c:	e1bf      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a22e:	4b0e      	ldr	r3, [pc, #56]	@ (800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a236:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a23a:	d102      	bne.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a23c:	4b0c      	ldr	r3, [pc, #48]	@ (800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a23e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a240:	e1b5      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a242:	2300      	movs	r3, #0
 800a244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a246:	e1b2      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a248:	4b07      	ldr	r3, [pc, #28]	@ (800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a250:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a254:	d102      	bne.n	800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a256:	4b07      	ldr	r3, [pc, #28]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a25a:	e1a8      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a25c:	2300      	movs	r3, #0
 800a25e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a260:	e1a5      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a262:	2300      	movs	r3, #0
 800a264:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a266:	e1a2      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a268:	58024400 	.word	0x58024400
 800a26c:	03d09000 	.word	0x03d09000
 800a270:	003d0900 	.word	0x003d0900
 800a274:	007a1200 	.word	0x007a1200
 800a278:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a27c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a280:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a284:	430b      	orrs	r3, r1
 800a286:	d173      	bne.n	800a370 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a288:	4b9c      	ldr	r3, [pc, #624]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a28a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a28c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a290:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a294:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a298:	d02f      	beq.n	800a2fa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a29c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2a0:	d863      	bhi.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a2a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d004      	beq.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2ae:	d012      	beq.n	800a2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a2b0:	e05b      	b.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2b2:	4b92      	ldr	r3, [pc, #584]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a2be:	d107      	bne.n	800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2c0:	f107 0318 	add.w	r3, r7, #24
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f000 f991 	bl	800a5ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2ce:	e16e      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2d4:	e16b      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a2d6:	4b89      	ldr	r3, [pc, #548]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2e2:	d107      	bne.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2e4:	f107 030c 	add.w	r3, r7, #12
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f000 fad3 	bl	800a894 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2f2:	e15c      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2f8:	e159      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a2fa:	4b80      	ldr	r3, [pc, #512]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a2fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a302:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a304:	4b7d      	ldr	r3, [pc, #500]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f003 0304 	and.w	r3, r3, #4
 800a30c:	2b04      	cmp	r3, #4
 800a30e:	d10c      	bne.n	800a32a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a312:	2b00      	cmp	r3, #0
 800a314:	d109      	bne.n	800a32a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a316:	4b79      	ldr	r3, [pc, #484]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	08db      	lsrs	r3, r3, #3
 800a31c:	f003 0303 	and.w	r3, r3, #3
 800a320:	4a77      	ldr	r2, [pc, #476]	@ (800a500 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a322:	fa22 f303 	lsr.w	r3, r2, r3
 800a326:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a328:	e01e      	b.n	800a368 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a32a:	4b74      	ldr	r3, [pc, #464]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a332:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a336:	d106      	bne.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a33a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a33e:	d102      	bne.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a340:	4b70      	ldr	r3, [pc, #448]	@ (800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a344:	e010      	b.n	800a368 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a346:	4b6d      	ldr	r3, [pc, #436]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a34e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a352:	d106      	bne.n	800a362 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a356:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a35a:	d102      	bne.n	800a362 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a35c:	4b6a      	ldr	r3, [pc, #424]	@ (800a508 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a35e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a360:	e002      	b.n	800a368 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a362:	2300      	movs	r3, #0
 800a364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a366:	e122      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a368:	e121      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a36a:	2300      	movs	r3, #0
 800a36c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a36e:	e11e      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a370:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a374:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a378:	430b      	orrs	r3, r1
 800a37a:	d133      	bne.n	800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a37c:	4b5f      	ldr	r3, [pc, #380]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a37e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a380:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a384:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d004      	beq.n	800a396 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a38e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a392:	d012      	beq.n	800a3ba <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a394:	e023      	b.n	800a3de <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a396:	4b59      	ldr	r3, [pc, #356]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a39e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a3a2:	d107      	bne.n	800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f000 fbc7 	bl	800ab3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3b2:	e0fc      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3b8:	e0f9      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3ba:	4b50      	ldr	r3, [pc, #320]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a3c6:	d107      	bne.n	800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3c8:	f107 0318 	add.w	r3, r7, #24
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f000 f90d 	bl	800a5ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a3d2:	6a3b      	ldr	r3, [r7, #32]
 800a3d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3d6:	e0ea      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3dc:	e0e7      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3e2:	e0e4      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a3e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3e8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a3ec:	430b      	orrs	r3, r1
 800a3ee:	f040 808d 	bne.w	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a3f2:	4b42      	ldr	r3, [pc, #264]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a3f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3f6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a3fa:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a3fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a402:	d06b      	beq.n	800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a406:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a40a:	d874      	bhi.n	800a4f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a40c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a40e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a412:	d056      	beq.n	800a4c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a416:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a41a:	d86c      	bhi.n	800a4f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a41c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a41e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a422:	d03b      	beq.n	800a49c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a426:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a42a:	d864      	bhi.n	800a4f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a42c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a42e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a432:	d021      	beq.n	800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a436:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a43a:	d85c      	bhi.n	800a4f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d004      	beq.n	800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a444:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a448:	d004      	beq.n	800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a44a:	e054      	b.n	800a4f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a44c:	f000 f8b8 	bl	800a5c0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a450:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a452:	e0ac      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a454:	4b29      	ldr	r3, [pc, #164]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a45c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a460:	d107      	bne.n	800a472 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a462:	f107 0318 	add.w	r3, r7, #24
 800a466:	4618      	mov	r0, r3
 800a468:	f000 f8c0 	bl	800a5ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a470:	e09d      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a472:	2300      	movs	r3, #0
 800a474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a476:	e09a      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a478:	4b20      	ldr	r3, [pc, #128]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a480:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a484:	d107      	bne.n	800a496 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a486:	f107 030c 	add.w	r3, r7, #12
 800a48a:	4618      	mov	r0, r3
 800a48c:	f000 fa02 	bl	800a894 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a494:	e08b      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a496:	2300      	movs	r3, #0
 800a498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a49a:	e088      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a49c:	4b17      	ldr	r3, [pc, #92]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f003 0304 	and.w	r3, r3, #4
 800a4a4:	2b04      	cmp	r3, #4
 800a4a6:	d109      	bne.n	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4a8:	4b14      	ldr	r3, [pc, #80]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	08db      	lsrs	r3, r3, #3
 800a4ae:	f003 0303 	and.w	r3, r3, #3
 800a4b2:	4a13      	ldr	r2, [pc, #76]	@ (800a500 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a4b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a4b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4ba:	e078      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4c0:	e075      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a4c2:	4b0e      	ldr	r3, [pc, #56]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4ce:	d102      	bne.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a4d0:	4b0c      	ldr	r3, [pc, #48]	@ (800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4d4:	e06b      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4da:	e068      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a4dc:	4b07      	ldr	r3, [pc, #28]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4e8:	d102      	bne.n	800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a4ea:	4b07      	ldr	r3, [pc, #28]	@ (800a508 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a4ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4ee:	e05e      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4f4:	e05b      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4fa:	e058      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a4fc:	58024400 	.word	0x58024400
 800a500:	03d09000 	.word	0x03d09000
 800a504:	003d0900 	.word	0x003d0900
 800a508:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a50c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a510:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a514:	430b      	orrs	r3, r1
 800a516:	d148      	bne.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a518:	4b27      	ldr	r3, [pc, #156]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a51a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a51c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a520:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a524:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a528:	d02a      	beq.n	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a52a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a52c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a530:	d838      	bhi.n	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a534:	2b00      	cmp	r3, #0
 800a536:	d004      	beq.n	800a542 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a53a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a53e:	d00d      	beq.n	800a55c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a540:	e030      	b.n	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a542:	4b1d      	ldr	r3, [pc, #116]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a54a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a54e:	d102      	bne.n	800a556 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a550:	4b1a      	ldr	r3, [pc, #104]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a554:	e02b      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a556:	2300      	movs	r3, #0
 800a558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a55a:	e028      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a55c:	4b16      	ldr	r3, [pc, #88]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a564:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a568:	d107      	bne.n	800a57a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a56a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a56e:	4618      	mov	r0, r3
 800a570:	f000 fae4 	bl	800ab3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a578:	e019      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a57a:	2300      	movs	r3, #0
 800a57c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a57e:	e016      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a580:	4b0d      	ldr	r3, [pc, #52]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a588:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a58c:	d107      	bne.n	800a59e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a58e:	f107 0318 	add.w	r3, r7, #24
 800a592:	4618      	mov	r0, r3
 800a594:	f000 f82a 	bl	800a5ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a598:	69fb      	ldr	r3, [r7, #28]
 800a59a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a59c:	e007      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5a2:	e004      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5a8:	e001      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a5ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3740      	adds	r7, #64	@ 0x40
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	58024400 	.word	0x58024400
 800a5bc:	007a1200 	.word	0x007a1200

0800a5c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a5c4:	f7fd ffd4 	bl	8008570 <HAL_RCC_GetHCLKFreq>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	4b06      	ldr	r3, [pc, #24]	@ (800a5e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a5cc:	6a1b      	ldr	r3, [r3, #32]
 800a5ce:	091b      	lsrs	r3, r3, #4
 800a5d0:	f003 0307 	and.w	r3, r3, #7
 800a5d4:	4904      	ldr	r1, [pc, #16]	@ (800a5e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a5d6:	5ccb      	ldrb	r3, [r1, r3]
 800a5d8:	f003 031f 	and.w	r3, r3, #31
 800a5dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	58024400 	.word	0x58024400
 800a5e8:	08022cbc 	.word	0x08022cbc

0800a5ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b089      	sub	sp, #36	@ 0x24
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a5f4:	4ba1      	ldr	r3, [pc, #644]	@ (800a87c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5f8:	f003 0303 	and.w	r3, r3, #3
 800a5fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a5fe:	4b9f      	ldr	r3, [pc, #636]	@ (800a87c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a602:	0b1b      	lsrs	r3, r3, #12
 800a604:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a608:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a60a:	4b9c      	ldr	r3, [pc, #624]	@ (800a87c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a60c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a60e:	091b      	lsrs	r3, r3, #4
 800a610:	f003 0301 	and.w	r3, r3, #1
 800a614:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a616:	4b99      	ldr	r3, [pc, #612]	@ (800a87c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a61a:	08db      	lsrs	r3, r3, #3
 800a61c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a620:	693a      	ldr	r2, [r7, #16]
 800a622:	fb02 f303 	mul.w	r3, r2, r3
 800a626:	ee07 3a90 	vmov	s15, r3
 800a62a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a62e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	2b00      	cmp	r3, #0
 800a636:	f000 8111 	beq.w	800a85c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	2b02      	cmp	r3, #2
 800a63e:	f000 8083 	beq.w	800a748 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	2b02      	cmp	r3, #2
 800a646:	f200 80a1 	bhi.w	800a78c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a64a:	69bb      	ldr	r3, [r7, #24]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d003      	beq.n	800a658 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	2b01      	cmp	r3, #1
 800a654:	d056      	beq.n	800a704 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a656:	e099      	b.n	800a78c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a658:	4b88      	ldr	r3, [pc, #544]	@ (800a87c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f003 0320 	and.w	r3, r3, #32
 800a660:	2b00      	cmp	r3, #0
 800a662:	d02d      	beq.n	800a6c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a664:	4b85      	ldr	r3, [pc, #532]	@ (800a87c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	08db      	lsrs	r3, r3, #3
 800a66a:	f003 0303 	and.w	r3, r3, #3
 800a66e:	4a84      	ldr	r2, [pc, #528]	@ (800a880 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a670:	fa22 f303 	lsr.w	r3, r2, r3
 800a674:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	ee07 3a90 	vmov	s15, r3
 800a67c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	ee07 3a90 	vmov	s15, r3
 800a686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a68a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a68e:	4b7b      	ldr	r3, [pc, #492]	@ (800a87c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a696:	ee07 3a90 	vmov	s15, r3
 800a69a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a69e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a884 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a6a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a6be:	e087      	b.n	800a7d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	ee07 3a90 	vmov	s15, r3
 800a6c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a888 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a6ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6d2:	4b6a      	ldr	r3, [pc, #424]	@ (800a87c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6da:	ee07 3a90 	vmov	s15, r3
 800a6de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a884 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a6ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a702:	e065      	b.n	800a7d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	ee07 3a90 	vmov	s15, r3
 800a70a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a70e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a88c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a716:	4b59      	ldr	r3, [pc, #356]	@ (800a87c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a71a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a71e:	ee07 3a90 	vmov	s15, r3
 800a722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a726:	ed97 6a03 	vldr	s12, [r7, #12]
 800a72a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a884 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a72e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a736:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a73a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a73e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a742:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a746:	e043      	b.n	800a7d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	ee07 3a90 	vmov	s15, r3
 800a74e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a752:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a890 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a75a:	4b48      	ldr	r3, [pc, #288]	@ (800a87c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a75c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a75e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a762:	ee07 3a90 	vmov	s15, r3
 800a766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a76a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a76e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a884 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a77a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a77e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a782:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a786:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a78a:	e021      	b.n	800a7d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	ee07 3a90 	vmov	s15, r3
 800a792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a796:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a88c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a79a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a79e:	4b37      	ldr	r3, [pc, #220]	@ (800a87c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7a6:	ee07 3a90 	vmov	s15, r3
 800a7aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a884 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a7b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a7d0:	4b2a      	ldr	r3, [pc, #168]	@ (800a87c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7d4:	0a5b      	lsrs	r3, r3, #9
 800a7d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7da:	ee07 3a90 	vmov	s15, r3
 800a7de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a7e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7f6:	ee17 2a90 	vmov	r2, s15
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a7fe:	4b1f      	ldr	r3, [pc, #124]	@ (800a87c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a802:	0c1b      	lsrs	r3, r3, #16
 800a804:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a808:	ee07 3a90 	vmov	s15, r3
 800a80c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a810:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a814:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a818:	edd7 6a07 	vldr	s13, [r7, #28]
 800a81c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a824:	ee17 2a90 	vmov	r2, s15
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a82c:	4b13      	ldr	r3, [pc, #76]	@ (800a87c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a82e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a830:	0e1b      	lsrs	r3, r3, #24
 800a832:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a836:	ee07 3a90 	vmov	s15, r3
 800a83a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a83e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a842:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a846:	edd7 6a07 	vldr	s13, [r7, #28]
 800a84a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a84e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a852:	ee17 2a90 	vmov	r2, s15
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a85a:	e008      	b.n	800a86e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2200      	movs	r2, #0
 800a86c:	609a      	str	r2, [r3, #8]
}
 800a86e:	bf00      	nop
 800a870:	3724      	adds	r7, #36	@ 0x24
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr
 800a87a:	bf00      	nop
 800a87c:	58024400 	.word	0x58024400
 800a880:	03d09000 	.word	0x03d09000
 800a884:	46000000 	.word	0x46000000
 800a888:	4c742400 	.word	0x4c742400
 800a88c:	4a742400 	.word	0x4a742400
 800a890:	4af42400 	.word	0x4af42400

0800a894 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a894:	b480      	push	{r7}
 800a896:	b089      	sub	sp, #36	@ 0x24
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a89c:	4ba1      	ldr	r3, [pc, #644]	@ (800ab24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a89e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8a0:	f003 0303 	and.w	r3, r3, #3
 800a8a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a8a6:	4b9f      	ldr	r3, [pc, #636]	@ (800ab24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8aa:	0d1b      	lsrs	r3, r3, #20
 800a8ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a8b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a8b2:	4b9c      	ldr	r3, [pc, #624]	@ (800ab24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8b6:	0a1b      	lsrs	r3, r3, #8
 800a8b8:	f003 0301 	and.w	r3, r3, #1
 800a8bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a8be:	4b99      	ldr	r3, [pc, #612]	@ (800ab24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8c2:	08db      	lsrs	r3, r3, #3
 800a8c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8c8:	693a      	ldr	r2, [r7, #16]
 800a8ca:	fb02 f303 	mul.w	r3, r2, r3
 800a8ce:	ee07 3a90 	vmov	s15, r3
 800a8d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	f000 8111 	beq.w	800ab04 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	f000 8083 	beq.w	800a9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a8ea:	69bb      	ldr	r3, [r7, #24]
 800a8ec:	2b02      	cmp	r3, #2
 800a8ee:	f200 80a1 	bhi.w	800aa34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d003      	beq.n	800a900 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a8f8:	69bb      	ldr	r3, [r7, #24]
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d056      	beq.n	800a9ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a8fe:	e099      	b.n	800aa34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a900:	4b88      	ldr	r3, [pc, #544]	@ (800ab24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f003 0320 	and.w	r3, r3, #32
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d02d      	beq.n	800a968 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a90c:	4b85      	ldr	r3, [pc, #532]	@ (800ab24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	08db      	lsrs	r3, r3, #3
 800a912:	f003 0303 	and.w	r3, r3, #3
 800a916:	4a84      	ldr	r2, [pc, #528]	@ (800ab28 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a918:	fa22 f303 	lsr.w	r3, r2, r3
 800a91c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	ee07 3a90 	vmov	s15, r3
 800a924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	ee07 3a90 	vmov	s15, r3
 800a92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a936:	4b7b      	ldr	r3, [pc, #492]	@ (800ab24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a93a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a93e:	ee07 3a90 	vmov	s15, r3
 800a942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a946:	ed97 6a03 	vldr	s12, [r7, #12]
 800a94a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ab2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a94e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a956:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a95a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a95e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a962:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a966:	e087      	b.n	800aa78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	ee07 3a90 	vmov	s15, r3
 800a96e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a972:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ab30 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a97a:	4b6a      	ldr	r3, [pc, #424]	@ (800ab24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a97c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a97e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a982:	ee07 3a90 	vmov	s15, r3
 800a986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a98a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a98e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ab2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a99a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a99e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9aa:	e065      	b.n	800aa78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	ee07 3a90 	vmov	s15, r3
 800a9b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9b6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ab34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a9ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9be:	4b59      	ldr	r3, [pc, #356]	@ (800ab24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9c6:	ee07 3a90 	vmov	s15, r3
 800a9ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9d2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ab2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a9d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9ee:	e043      	b.n	800aa78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	ee07 3a90 	vmov	s15, r3
 800a9f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9fa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ab38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a9fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa02:	4b48      	ldr	r3, [pc, #288]	@ (800ab24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa0a:	ee07 3a90 	vmov	s15, r3
 800aa0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa12:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa16:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ab2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa32:	e021      	b.n	800aa78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	ee07 3a90 	vmov	s15, r3
 800aa3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa3e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ab34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aa42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa46:	4b37      	ldr	r3, [pc, #220]	@ (800ab24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa4e:	ee07 3a90 	vmov	s15, r3
 800aa52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa56:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa5a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ab2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa76:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800aa78:	4b2a      	ldr	r3, [pc, #168]	@ (800ab24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa7c:	0a5b      	lsrs	r3, r3, #9
 800aa7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa82:	ee07 3a90 	vmov	s15, r3
 800aa86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa92:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa9e:	ee17 2a90 	vmov	r2, s15
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800aaa6:	4b1f      	ldr	r3, [pc, #124]	@ (800ab24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aaa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaaa:	0c1b      	lsrs	r3, r3, #16
 800aaac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aab0:	ee07 3a90 	vmov	s15, r3
 800aab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aab8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aabc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aac0:	edd7 6a07 	vldr	s13, [r7, #28]
 800aac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aacc:	ee17 2a90 	vmov	r2, s15
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800aad4:	4b13      	ldr	r3, [pc, #76]	@ (800ab24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aad8:	0e1b      	lsrs	r3, r3, #24
 800aada:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aade:	ee07 3a90 	vmov	s15, r3
 800aae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aae6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aaea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aaee:	edd7 6a07 	vldr	s13, [r7, #28]
 800aaf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aaf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aafa:	ee17 2a90 	vmov	r2, s15
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ab02:	e008      	b.n	800ab16 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	609a      	str	r2, [r3, #8]
}
 800ab16:	bf00      	nop
 800ab18:	3724      	adds	r7, #36	@ 0x24
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop
 800ab24:	58024400 	.word	0x58024400
 800ab28:	03d09000 	.word	0x03d09000
 800ab2c:	46000000 	.word	0x46000000
 800ab30:	4c742400 	.word	0x4c742400
 800ab34:	4a742400 	.word	0x4a742400
 800ab38:	4af42400 	.word	0x4af42400

0800ab3c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b089      	sub	sp, #36	@ 0x24
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab44:	4ba0      	ldr	r3, [pc, #640]	@ (800adc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab48:	f003 0303 	and.w	r3, r3, #3
 800ab4c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ab4e:	4b9e      	ldr	r3, [pc, #632]	@ (800adc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab52:	091b      	lsrs	r3, r3, #4
 800ab54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab58:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ab5a:	4b9b      	ldr	r3, [pc, #620]	@ (800adc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab5e:	f003 0301 	and.w	r3, r3, #1
 800ab62:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ab64:	4b98      	ldr	r3, [pc, #608]	@ (800adc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab68:	08db      	lsrs	r3, r3, #3
 800ab6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab6e:	693a      	ldr	r2, [r7, #16]
 800ab70:	fb02 f303 	mul.w	r3, r2, r3
 800ab74:	ee07 3a90 	vmov	s15, r3
 800ab78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab7c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	f000 8111 	beq.w	800adaa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	2b02      	cmp	r3, #2
 800ab8c:	f000 8083 	beq.w	800ac96 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ab90:	69bb      	ldr	r3, [r7, #24]
 800ab92:	2b02      	cmp	r3, #2
 800ab94:	f200 80a1 	bhi.w	800acda <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d003      	beq.n	800aba6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d056      	beq.n	800ac52 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800aba4:	e099      	b.n	800acda <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aba6:	4b88      	ldr	r3, [pc, #544]	@ (800adc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f003 0320 	and.w	r3, r3, #32
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d02d      	beq.n	800ac0e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abb2:	4b85      	ldr	r3, [pc, #532]	@ (800adc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	08db      	lsrs	r3, r3, #3
 800abb8:	f003 0303 	and.w	r3, r3, #3
 800abbc:	4a83      	ldr	r2, [pc, #524]	@ (800adcc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800abbe:	fa22 f303 	lsr.w	r3, r2, r3
 800abc2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	ee07 3a90 	vmov	s15, r3
 800abca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	ee07 3a90 	vmov	s15, r3
 800abd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abdc:	4b7a      	ldr	r3, [pc, #488]	@ (800adc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abe4:	ee07 3a90 	vmov	s15, r3
 800abe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abec:	ed97 6a03 	vldr	s12, [r7, #12]
 800abf0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800add0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800abf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abfc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac08:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ac0c:	e087      	b.n	800ad1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	ee07 3a90 	vmov	s15, r3
 800ac14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac18:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800add4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ac1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac20:	4b69      	ldr	r3, [pc, #420]	@ (800adc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac28:	ee07 3a90 	vmov	s15, r3
 800ac2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac30:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac34:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800add0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ac38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac50:	e065      	b.n	800ad1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	ee07 3a90 	vmov	s15, r3
 800ac58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac5c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800add8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ac60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac64:	4b58      	ldr	r3, [pc, #352]	@ (800adc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac6c:	ee07 3a90 	vmov	s15, r3
 800ac70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac74:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac78:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800add0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ac7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac94:	e043      	b.n	800ad1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	ee07 3a90 	vmov	s15, r3
 800ac9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aca0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800addc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800aca4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aca8:	4b47      	ldr	r3, [pc, #284]	@ (800adc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800acaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acb0:	ee07 3a90 	vmov	s15, r3
 800acb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acb8:	ed97 6a03 	vldr	s12, [r7, #12]
 800acbc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800add0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800acc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800accc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acd4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acd8:	e021      	b.n	800ad1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	ee07 3a90 	vmov	s15, r3
 800ace0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ace4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800add4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ace8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acec:	4b36      	ldr	r3, [pc, #216]	@ (800adc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800acee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acf4:	ee07 3a90 	vmov	s15, r3
 800acf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acfc:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad00:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800add0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ad04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad1c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ad1e:	4b2a      	ldr	r3, [pc, #168]	@ (800adc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad22:	0a5b      	lsrs	r3, r3, #9
 800ad24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad28:	ee07 3a90 	vmov	s15, r3
 800ad2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad34:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad38:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad44:	ee17 2a90 	vmov	r2, s15
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ad4c:	4b1e      	ldr	r3, [pc, #120]	@ (800adc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad50:	0c1b      	lsrs	r3, r3, #16
 800ad52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad56:	ee07 3a90 	vmov	s15, r3
 800ad5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad62:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad66:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad72:	ee17 2a90 	vmov	r2, s15
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ad7a:	4b13      	ldr	r3, [pc, #76]	@ (800adc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad7e:	0e1b      	lsrs	r3, r3, #24
 800ad80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad84:	ee07 3a90 	vmov	s15, r3
 800ad88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad90:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad94:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ada0:	ee17 2a90 	vmov	r2, s15
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ada8:	e008      	b.n	800adbc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2200      	movs	r2, #0
 800adae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	609a      	str	r2, [r3, #8]
}
 800adbc:	bf00      	nop
 800adbe:	3724      	adds	r7, #36	@ 0x24
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr
 800adc8:	58024400 	.word	0x58024400
 800adcc:	03d09000 	.word	0x03d09000
 800add0:	46000000 	.word	0x46000000
 800add4:	4c742400 	.word	0x4c742400
 800add8:	4a742400 	.word	0x4a742400
 800addc:	4af42400 	.word	0x4af42400

0800ade0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800adea:	2300      	movs	r3, #0
 800adec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800adee:	4b53      	ldr	r3, [pc, #332]	@ (800af3c <RCCEx_PLL2_Config+0x15c>)
 800adf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adf2:	f003 0303 	and.w	r3, r3, #3
 800adf6:	2b03      	cmp	r3, #3
 800adf8:	d101      	bne.n	800adfe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800adfa:	2301      	movs	r3, #1
 800adfc:	e099      	b.n	800af32 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800adfe:	4b4f      	ldr	r3, [pc, #316]	@ (800af3c <RCCEx_PLL2_Config+0x15c>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a4e      	ldr	r2, [pc, #312]	@ (800af3c <RCCEx_PLL2_Config+0x15c>)
 800ae04:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ae08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae0a:	f7f7 ffaf 	bl	8002d6c <HAL_GetTick>
 800ae0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ae10:	e008      	b.n	800ae24 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ae12:	f7f7 ffab 	bl	8002d6c <HAL_GetTick>
 800ae16:	4602      	mov	r2, r0
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	1ad3      	subs	r3, r2, r3
 800ae1c:	2b02      	cmp	r3, #2
 800ae1e:	d901      	bls.n	800ae24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ae20:	2303      	movs	r3, #3
 800ae22:	e086      	b.n	800af32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ae24:	4b45      	ldr	r3, [pc, #276]	@ (800af3c <RCCEx_PLL2_Config+0x15c>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d1f0      	bne.n	800ae12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ae30:	4b42      	ldr	r3, [pc, #264]	@ (800af3c <RCCEx_PLL2_Config+0x15c>)
 800ae32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae34:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	031b      	lsls	r3, r3, #12
 800ae3e:	493f      	ldr	r1, [pc, #252]	@ (800af3c <RCCEx_PLL2_Config+0x15c>)
 800ae40:	4313      	orrs	r3, r2
 800ae42:	628b      	str	r3, [r1, #40]	@ 0x28
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	3b01      	subs	r3, #1
 800ae4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	3b01      	subs	r3, #1
 800ae54:	025b      	lsls	r3, r3, #9
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	431a      	orrs	r2, r3
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	68db      	ldr	r3, [r3, #12]
 800ae5e:	3b01      	subs	r3, #1
 800ae60:	041b      	lsls	r3, r3, #16
 800ae62:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ae66:	431a      	orrs	r2, r3
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	691b      	ldr	r3, [r3, #16]
 800ae6c:	3b01      	subs	r3, #1
 800ae6e:	061b      	lsls	r3, r3, #24
 800ae70:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ae74:	4931      	ldr	r1, [pc, #196]	@ (800af3c <RCCEx_PLL2_Config+0x15c>)
 800ae76:	4313      	orrs	r3, r2
 800ae78:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ae7a:	4b30      	ldr	r3, [pc, #192]	@ (800af3c <RCCEx_PLL2_Config+0x15c>)
 800ae7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae7e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	695b      	ldr	r3, [r3, #20]
 800ae86:	492d      	ldr	r1, [pc, #180]	@ (800af3c <RCCEx_PLL2_Config+0x15c>)
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ae8c:	4b2b      	ldr	r3, [pc, #172]	@ (800af3c <RCCEx_PLL2_Config+0x15c>)
 800ae8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae90:	f023 0220 	bic.w	r2, r3, #32
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	699b      	ldr	r3, [r3, #24]
 800ae98:	4928      	ldr	r1, [pc, #160]	@ (800af3c <RCCEx_PLL2_Config+0x15c>)
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ae9e:	4b27      	ldr	r3, [pc, #156]	@ (800af3c <RCCEx_PLL2_Config+0x15c>)
 800aea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aea2:	4a26      	ldr	r2, [pc, #152]	@ (800af3c <RCCEx_PLL2_Config+0x15c>)
 800aea4:	f023 0310 	bic.w	r3, r3, #16
 800aea8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800aeaa:	4b24      	ldr	r3, [pc, #144]	@ (800af3c <RCCEx_PLL2_Config+0x15c>)
 800aeac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aeae:	4b24      	ldr	r3, [pc, #144]	@ (800af40 <RCCEx_PLL2_Config+0x160>)
 800aeb0:	4013      	ands	r3, r2
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	69d2      	ldr	r2, [r2, #28]
 800aeb6:	00d2      	lsls	r2, r2, #3
 800aeb8:	4920      	ldr	r1, [pc, #128]	@ (800af3c <RCCEx_PLL2_Config+0x15c>)
 800aeba:	4313      	orrs	r3, r2
 800aebc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800aebe:	4b1f      	ldr	r3, [pc, #124]	@ (800af3c <RCCEx_PLL2_Config+0x15c>)
 800aec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aec2:	4a1e      	ldr	r2, [pc, #120]	@ (800af3c <RCCEx_PLL2_Config+0x15c>)
 800aec4:	f043 0310 	orr.w	r3, r3, #16
 800aec8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d106      	bne.n	800aede <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800aed0:	4b1a      	ldr	r3, [pc, #104]	@ (800af3c <RCCEx_PLL2_Config+0x15c>)
 800aed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aed4:	4a19      	ldr	r2, [pc, #100]	@ (800af3c <RCCEx_PLL2_Config+0x15c>)
 800aed6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aeda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aedc:	e00f      	b.n	800aefe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d106      	bne.n	800aef2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800aee4:	4b15      	ldr	r3, [pc, #84]	@ (800af3c <RCCEx_PLL2_Config+0x15c>)
 800aee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aee8:	4a14      	ldr	r2, [pc, #80]	@ (800af3c <RCCEx_PLL2_Config+0x15c>)
 800aeea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aeee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aef0:	e005      	b.n	800aefe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800aef2:	4b12      	ldr	r3, [pc, #72]	@ (800af3c <RCCEx_PLL2_Config+0x15c>)
 800aef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aef6:	4a11      	ldr	r2, [pc, #68]	@ (800af3c <RCCEx_PLL2_Config+0x15c>)
 800aef8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800aefc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800aefe:	4b0f      	ldr	r3, [pc, #60]	@ (800af3c <RCCEx_PLL2_Config+0x15c>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4a0e      	ldr	r2, [pc, #56]	@ (800af3c <RCCEx_PLL2_Config+0x15c>)
 800af04:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800af08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af0a:	f7f7 ff2f 	bl	8002d6c <HAL_GetTick>
 800af0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800af10:	e008      	b.n	800af24 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800af12:	f7f7 ff2b 	bl	8002d6c <HAL_GetTick>
 800af16:	4602      	mov	r2, r0
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	1ad3      	subs	r3, r2, r3
 800af1c:	2b02      	cmp	r3, #2
 800af1e:	d901      	bls.n	800af24 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800af20:	2303      	movs	r3, #3
 800af22:	e006      	b.n	800af32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800af24:	4b05      	ldr	r3, [pc, #20]	@ (800af3c <RCCEx_PLL2_Config+0x15c>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d0f0      	beq.n	800af12 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800af30:	7bfb      	ldrb	r3, [r7, #15]
}
 800af32:	4618      	mov	r0, r3
 800af34:	3710      	adds	r7, #16
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	58024400 	.word	0x58024400
 800af40:	ffff0007 	.word	0xffff0007

0800af44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800af4e:	2300      	movs	r3, #0
 800af50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800af52:	4b53      	ldr	r3, [pc, #332]	@ (800b0a0 <RCCEx_PLL3_Config+0x15c>)
 800af54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af56:	f003 0303 	and.w	r3, r3, #3
 800af5a:	2b03      	cmp	r3, #3
 800af5c:	d101      	bne.n	800af62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	e099      	b.n	800b096 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800af62:	4b4f      	ldr	r3, [pc, #316]	@ (800b0a0 <RCCEx_PLL3_Config+0x15c>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a4e      	ldr	r2, [pc, #312]	@ (800b0a0 <RCCEx_PLL3_Config+0x15c>)
 800af68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af6e:	f7f7 fefd 	bl	8002d6c <HAL_GetTick>
 800af72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800af74:	e008      	b.n	800af88 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800af76:	f7f7 fef9 	bl	8002d6c <HAL_GetTick>
 800af7a:	4602      	mov	r2, r0
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	1ad3      	subs	r3, r2, r3
 800af80:	2b02      	cmp	r3, #2
 800af82:	d901      	bls.n	800af88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800af84:	2303      	movs	r3, #3
 800af86:	e086      	b.n	800b096 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800af88:	4b45      	ldr	r3, [pc, #276]	@ (800b0a0 <RCCEx_PLL3_Config+0x15c>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af90:	2b00      	cmp	r3, #0
 800af92:	d1f0      	bne.n	800af76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800af94:	4b42      	ldr	r3, [pc, #264]	@ (800b0a0 <RCCEx_PLL3_Config+0x15c>)
 800af96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af98:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	051b      	lsls	r3, r3, #20
 800afa2:	493f      	ldr	r1, [pc, #252]	@ (800b0a0 <RCCEx_PLL3_Config+0x15c>)
 800afa4:	4313      	orrs	r3, r2
 800afa6:	628b      	str	r3, [r1, #40]	@ 0x28
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	3b01      	subs	r3, #1
 800afae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	3b01      	subs	r3, #1
 800afb8:	025b      	lsls	r3, r3, #9
 800afba:	b29b      	uxth	r3, r3
 800afbc:	431a      	orrs	r2, r3
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	68db      	ldr	r3, [r3, #12]
 800afc2:	3b01      	subs	r3, #1
 800afc4:	041b      	lsls	r3, r3, #16
 800afc6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800afca:	431a      	orrs	r2, r3
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	691b      	ldr	r3, [r3, #16]
 800afd0:	3b01      	subs	r3, #1
 800afd2:	061b      	lsls	r3, r3, #24
 800afd4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800afd8:	4931      	ldr	r1, [pc, #196]	@ (800b0a0 <RCCEx_PLL3_Config+0x15c>)
 800afda:	4313      	orrs	r3, r2
 800afdc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800afde:	4b30      	ldr	r3, [pc, #192]	@ (800b0a0 <RCCEx_PLL3_Config+0x15c>)
 800afe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afe2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	695b      	ldr	r3, [r3, #20]
 800afea:	492d      	ldr	r1, [pc, #180]	@ (800b0a0 <RCCEx_PLL3_Config+0x15c>)
 800afec:	4313      	orrs	r3, r2
 800afee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800aff0:	4b2b      	ldr	r3, [pc, #172]	@ (800b0a0 <RCCEx_PLL3_Config+0x15c>)
 800aff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aff4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	699b      	ldr	r3, [r3, #24]
 800affc:	4928      	ldr	r1, [pc, #160]	@ (800b0a0 <RCCEx_PLL3_Config+0x15c>)
 800affe:	4313      	orrs	r3, r2
 800b000:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b002:	4b27      	ldr	r3, [pc, #156]	@ (800b0a0 <RCCEx_PLL3_Config+0x15c>)
 800b004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b006:	4a26      	ldr	r2, [pc, #152]	@ (800b0a0 <RCCEx_PLL3_Config+0x15c>)
 800b008:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b00c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b00e:	4b24      	ldr	r3, [pc, #144]	@ (800b0a0 <RCCEx_PLL3_Config+0x15c>)
 800b010:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b012:	4b24      	ldr	r3, [pc, #144]	@ (800b0a4 <RCCEx_PLL3_Config+0x160>)
 800b014:	4013      	ands	r3, r2
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	69d2      	ldr	r2, [r2, #28]
 800b01a:	00d2      	lsls	r2, r2, #3
 800b01c:	4920      	ldr	r1, [pc, #128]	@ (800b0a0 <RCCEx_PLL3_Config+0x15c>)
 800b01e:	4313      	orrs	r3, r2
 800b020:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b022:	4b1f      	ldr	r3, [pc, #124]	@ (800b0a0 <RCCEx_PLL3_Config+0x15c>)
 800b024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b026:	4a1e      	ldr	r2, [pc, #120]	@ (800b0a0 <RCCEx_PLL3_Config+0x15c>)
 800b028:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b02c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d106      	bne.n	800b042 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b034:	4b1a      	ldr	r3, [pc, #104]	@ (800b0a0 <RCCEx_PLL3_Config+0x15c>)
 800b036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b038:	4a19      	ldr	r2, [pc, #100]	@ (800b0a0 <RCCEx_PLL3_Config+0x15c>)
 800b03a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b03e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b040:	e00f      	b.n	800b062 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	2b01      	cmp	r3, #1
 800b046:	d106      	bne.n	800b056 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b048:	4b15      	ldr	r3, [pc, #84]	@ (800b0a0 <RCCEx_PLL3_Config+0x15c>)
 800b04a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b04c:	4a14      	ldr	r2, [pc, #80]	@ (800b0a0 <RCCEx_PLL3_Config+0x15c>)
 800b04e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b052:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b054:	e005      	b.n	800b062 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b056:	4b12      	ldr	r3, [pc, #72]	@ (800b0a0 <RCCEx_PLL3_Config+0x15c>)
 800b058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b05a:	4a11      	ldr	r2, [pc, #68]	@ (800b0a0 <RCCEx_PLL3_Config+0x15c>)
 800b05c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b060:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b062:	4b0f      	ldr	r3, [pc, #60]	@ (800b0a0 <RCCEx_PLL3_Config+0x15c>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4a0e      	ldr	r2, [pc, #56]	@ (800b0a0 <RCCEx_PLL3_Config+0x15c>)
 800b068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b06c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b06e:	f7f7 fe7d 	bl	8002d6c <HAL_GetTick>
 800b072:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b074:	e008      	b.n	800b088 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b076:	f7f7 fe79 	bl	8002d6c <HAL_GetTick>
 800b07a:	4602      	mov	r2, r0
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	1ad3      	subs	r3, r2, r3
 800b080:	2b02      	cmp	r3, #2
 800b082:	d901      	bls.n	800b088 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b084:	2303      	movs	r3, #3
 800b086:	e006      	b.n	800b096 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b088:	4b05      	ldr	r3, [pc, #20]	@ (800b0a0 <RCCEx_PLL3_Config+0x15c>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b090:	2b00      	cmp	r3, #0
 800b092:	d0f0      	beq.n	800b076 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b094:	7bfb      	ldrb	r3, [r7, #15]
}
 800b096:	4618      	mov	r0, r3
 800b098:	3710      	adds	r7, #16
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	58024400 	.word	0x58024400
 800b0a4:	ffff0007 	.word	0xffff0007

0800b0a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d101      	bne.n	800b0ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e049      	b.n	800b14e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d106      	bne.n	800b0d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 f841 	bl	800b156 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2202      	movs	r2, #2
 800b0d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	3304      	adds	r3, #4
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	4610      	mov	r0, r2
 800b0e8:	f000 f9e8 	bl	800b4bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2201      	movs	r2, #1
 800b108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2201      	movs	r2, #1
 800b110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2201      	movs	r2, #1
 800b118:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2201      	movs	r2, #1
 800b120:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2201      	movs	r2, #1
 800b128:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2201      	movs	r2, #1
 800b130:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2201      	movs	r2, #1
 800b138:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2201      	movs	r2, #1
 800b140:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2201      	movs	r2, #1
 800b148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b14c:	2300      	movs	r3, #0
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3708      	adds	r7, #8
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b156:	b480      	push	{r7}
 800b158:	b083      	sub	sp, #12
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b15e:	bf00      	nop
 800b160:	370c      	adds	r7, #12
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr
	...

0800b16c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b085      	sub	sp, #20
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d001      	beq.n	800b184 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b180:	2301      	movs	r3, #1
 800b182:	e054      	b.n	800b22e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2202      	movs	r2, #2
 800b188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68da      	ldr	r2, [r3, #12]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f042 0201 	orr.w	r2, r2, #1
 800b19a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4a26      	ldr	r2, [pc, #152]	@ (800b23c <HAL_TIM_Base_Start_IT+0xd0>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d022      	beq.n	800b1ec <HAL_TIM_Base_Start_IT+0x80>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1ae:	d01d      	beq.n	800b1ec <HAL_TIM_Base_Start_IT+0x80>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a22      	ldr	r2, [pc, #136]	@ (800b240 <HAL_TIM_Base_Start_IT+0xd4>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d018      	beq.n	800b1ec <HAL_TIM_Base_Start_IT+0x80>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a21      	ldr	r2, [pc, #132]	@ (800b244 <HAL_TIM_Base_Start_IT+0xd8>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d013      	beq.n	800b1ec <HAL_TIM_Base_Start_IT+0x80>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a1f      	ldr	r2, [pc, #124]	@ (800b248 <HAL_TIM_Base_Start_IT+0xdc>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d00e      	beq.n	800b1ec <HAL_TIM_Base_Start_IT+0x80>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	4a1e      	ldr	r2, [pc, #120]	@ (800b24c <HAL_TIM_Base_Start_IT+0xe0>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d009      	beq.n	800b1ec <HAL_TIM_Base_Start_IT+0x80>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	4a1c      	ldr	r2, [pc, #112]	@ (800b250 <HAL_TIM_Base_Start_IT+0xe4>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d004      	beq.n	800b1ec <HAL_TIM_Base_Start_IT+0x80>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4a1b      	ldr	r2, [pc, #108]	@ (800b254 <HAL_TIM_Base_Start_IT+0xe8>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d115      	bne.n	800b218 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	689a      	ldr	r2, [r3, #8]
 800b1f2:	4b19      	ldr	r3, [pc, #100]	@ (800b258 <HAL_TIM_Base_Start_IT+0xec>)
 800b1f4:	4013      	ands	r3, r2
 800b1f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2b06      	cmp	r3, #6
 800b1fc:	d015      	beq.n	800b22a <HAL_TIM_Base_Start_IT+0xbe>
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b204:	d011      	beq.n	800b22a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f042 0201 	orr.w	r2, r2, #1
 800b214:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b216:	e008      	b.n	800b22a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f042 0201 	orr.w	r2, r2, #1
 800b226:	601a      	str	r2, [r3, #0]
 800b228:	e000      	b.n	800b22c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b22a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b22c:	2300      	movs	r3, #0
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3714      	adds	r7, #20
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr
 800b23a:	bf00      	nop
 800b23c:	40010000 	.word	0x40010000
 800b240:	40000400 	.word	0x40000400
 800b244:	40000800 	.word	0x40000800
 800b248:	40000c00 	.word	0x40000c00
 800b24c:	40010400 	.word	0x40010400
 800b250:	40001800 	.word	0x40001800
 800b254:	40014000 	.word	0x40014000
 800b258:	00010007 	.word	0x00010007

0800b25c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b084      	sub	sp, #16
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	691b      	ldr	r3, [r3, #16]
 800b272:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	f003 0302 	and.w	r3, r3, #2
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d020      	beq.n	800b2c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f003 0302 	and.w	r3, r3, #2
 800b284:	2b00      	cmp	r3, #0
 800b286:	d01b      	beq.n	800b2c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f06f 0202 	mvn.w	r2, #2
 800b290:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2201      	movs	r2, #1
 800b296:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	699b      	ldr	r3, [r3, #24]
 800b29e:	f003 0303 	and.w	r3, r3, #3
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d003      	beq.n	800b2ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 f8e9 	bl	800b47e <HAL_TIM_IC_CaptureCallback>
 800b2ac:	e005      	b.n	800b2ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 f8db 	bl	800b46a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 f8ec 	bl	800b492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	f003 0304 	and.w	r3, r3, #4
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d020      	beq.n	800b30c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f003 0304 	and.w	r3, r3, #4
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d01b      	beq.n	800b30c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f06f 0204 	mvn.w	r2, #4
 800b2dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2202      	movs	r2, #2
 800b2e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	699b      	ldr	r3, [r3, #24]
 800b2ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d003      	beq.n	800b2fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 f8c3 	bl	800b47e <HAL_TIM_IC_CaptureCallback>
 800b2f8:	e005      	b.n	800b306 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 f8b5 	bl	800b46a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 f8c6 	bl	800b492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	f003 0308 	and.w	r3, r3, #8
 800b312:	2b00      	cmp	r3, #0
 800b314:	d020      	beq.n	800b358 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f003 0308 	and.w	r3, r3, #8
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d01b      	beq.n	800b358 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f06f 0208 	mvn.w	r2, #8
 800b328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2204      	movs	r2, #4
 800b32e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	69db      	ldr	r3, [r3, #28]
 800b336:	f003 0303 	and.w	r3, r3, #3
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d003      	beq.n	800b346 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 f89d 	bl	800b47e <HAL_TIM_IC_CaptureCallback>
 800b344:	e005      	b.n	800b352 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 f88f 	bl	800b46a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f000 f8a0 	bl	800b492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2200      	movs	r2, #0
 800b356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	f003 0310 	and.w	r3, r3, #16
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d020      	beq.n	800b3a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f003 0310 	and.w	r3, r3, #16
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d01b      	beq.n	800b3a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f06f 0210 	mvn.w	r2, #16
 800b374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2208      	movs	r2, #8
 800b37a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	69db      	ldr	r3, [r3, #28]
 800b382:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b386:	2b00      	cmp	r3, #0
 800b388:	d003      	beq.n	800b392 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 f877 	bl	800b47e <HAL_TIM_IC_CaptureCallback>
 800b390:	e005      	b.n	800b39e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 f869 	bl	800b46a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 f87a 	bl	800b492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	f003 0301 	and.w	r3, r3, #1
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d00c      	beq.n	800b3c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f003 0301 	and.w	r3, r3, #1
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d007      	beq.n	800b3c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f06f 0201 	mvn.w	r2, #1
 800b3c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f7f6 fb3e 	bl	8001a44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d104      	bne.n	800b3dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d00c      	beq.n	800b3f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d007      	beq.n	800b3f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b3ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 f913 	bl	800b61c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d00c      	beq.n	800b41a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b406:	2b00      	cmp	r3, #0
 800b408:	d007      	beq.n	800b41a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f000 f90b 	bl	800b630 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b420:	2b00      	cmp	r3, #0
 800b422:	d00c      	beq.n	800b43e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d007      	beq.n	800b43e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 f834 	bl	800b4a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	f003 0320 	and.w	r3, r3, #32
 800b444:	2b00      	cmp	r3, #0
 800b446:	d00c      	beq.n	800b462 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f003 0320 	and.w	r3, r3, #32
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d007      	beq.n	800b462 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f06f 0220 	mvn.w	r2, #32
 800b45a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 f8d3 	bl	800b608 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b462:	bf00      	nop
 800b464:	3710      	adds	r7, #16
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}

0800b46a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b46a:	b480      	push	{r7}
 800b46c:	b083      	sub	sp, #12
 800b46e:	af00      	add	r7, sp, #0
 800b470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b472:	bf00      	nop
 800b474:	370c      	adds	r7, #12
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr

0800b47e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b47e:	b480      	push	{r7}
 800b480:	b083      	sub	sp, #12
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b486:	bf00      	nop
 800b488:	370c      	adds	r7, #12
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr

0800b492 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b492:	b480      	push	{r7}
 800b494:	b083      	sub	sp, #12
 800b496:	af00      	add	r7, sp, #0
 800b498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b49a:	bf00      	nop
 800b49c:	370c      	adds	r7, #12
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a4:	4770      	bx	lr

0800b4a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b4a6:	b480      	push	{r7}
 800b4a8:	b083      	sub	sp, #12
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b4ae:	bf00      	nop
 800b4b0:	370c      	adds	r7, #12
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b8:	4770      	bx	lr
	...

0800b4bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b085      	sub	sp, #20
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	4a46      	ldr	r2, [pc, #280]	@ (800b5e8 <TIM_Base_SetConfig+0x12c>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d013      	beq.n	800b4fc <TIM_Base_SetConfig+0x40>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4da:	d00f      	beq.n	800b4fc <TIM_Base_SetConfig+0x40>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	4a43      	ldr	r2, [pc, #268]	@ (800b5ec <TIM_Base_SetConfig+0x130>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d00b      	beq.n	800b4fc <TIM_Base_SetConfig+0x40>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	4a42      	ldr	r2, [pc, #264]	@ (800b5f0 <TIM_Base_SetConfig+0x134>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d007      	beq.n	800b4fc <TIM_Base_SetConfig+0x40>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	4a41      	ldr	r2, [pc, #260]	@ (800b5f4 <TIM_Base_SetConfig+0x138>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d003      	beq.n	800b4fc <TIM_Base_SetConfig+0x40>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	4a40      	ldr	r2, [pc, #256]	@ (800b5f8 <TIM_Base_SetConfig+0x13c>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d108      	bne.n	800b50e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	68fa      	ldr	r2, [r7, #12]
 800b50a:	4313      	orrs	r3, r2
 800b50c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	4a35      	ldr	r2, [pc, #212]	@ (800b5e8 <TIM_Base_SetConfig+0x12c>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d01f      	beq.n	800b556 <TIM_Base_SetConfig+0x9a>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b51c:	d01b      	beq.n	800b556 <TIM_Base_SetConfig+0x9a>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4a32      	ldr	r2, [pc, #200]	@ (800b5ec <TIM_Base_SetConfig+0x130>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d017      	beq.n	800b556 <TIM_Base_SetConfig+0x9a>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	4a31      	ldr	r2, [pc, #196]	@ (800b5f0 <TIM_Base_SetConfig+0x134>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d013      	beq.n	800b556 <TIM_Base_SetConfig+0x9a>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4a30      	ldr	r2, [pc, #192]	@ (800b5f4 <TIM_Base_SetConfig+0x138>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d00f      	beq.n	800b556 <TIM_Base_SetConfig+0x9a>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	4a2f      	ldr	r2, [pc, #188]	@ (800b5f8 <TIM_Base_SetConfig+0x13c>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d00b      	beq.n	800b556 <TIM_Base_SetConfig+0x9a>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	4a2e      	ldr	r2, [pc, #184]	@ (800b5fc <TIM_Base_SetConfig+0x140>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d007      	beq.n	800b556 <TIM_Base_SetConfig+0x9a>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	4a2d      	ldr	r2, [pc, #180]	@ (800b600 <TIM_Base_SetConfig+0x144>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d003      	beq.n	800b556 <TIM_Base_SetConfig+0x9a>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	4a2c      	ldr	r2, [pc, #176]	@ (800b604 <TIM_Base_SetConfig+0x148>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d108      	bne.n	800b568 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b55c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	68db      	ldr	r3, [r3, #12]
 800b562:	68fa      	ldr	r2, [r7, #12]
 800b564:	4313      	orrs	r3, r2
 800b566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	695b      	ldr	r3, [r3, #20]
 800b572:	4313      	orrs	r3, r2
 800b574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	68fa      	ldr	r2, [r7, #12]
 800b57a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	689a      	ldr	r2, [r3, #8]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4a16      	ldr	r2, [pc, #88]	@ (800b5e8 <TIM_Base_SetConfig+0x12c>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d00f      	beq.n	800b5b4 <TIM_Base_SetConfig+0xf8>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	4a18      	ldr	r2, [pc, #96]	@ (800b5f8 <TIM_Base_SetConfig+0x13c>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d00b      	beq.n	800b5b4 <TIM_Base_SetConfig+0xf8>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	4a17      	ldr	r2, [pc, #92]	@ (800b5fc <TIM_Base_SetConfig+0x140>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d007      	beq.n	800b5b4 <TIM_Base_SetConfig+0xf8>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	4a16      	ldr	r2, [pc, #88]	@ (800b600 <TIM_Base_SetConfig+0x144>)
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d003      	beq.n	800b5b4 <TIM_Base_SetConfig+0xf8>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	4a15      	ldr	r2, [pc, #84]	@ (800b604 <TIM_Base_SetConfig+0x148>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d103      	bne.n	800b5bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	691a      	ldr	r2, [r3, #16]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2201      	movs	r2, #1
 800b5c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	691b      	ldr	r3, [r3, #16]
 800b5c6:	f003 0301 	and.w	r3, r3, #1
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	d105      	bne.n	800b5da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	691b      	ldr	r3, [r3, #16]
 800b5d2:	f023 0201 	bic.w	r2, r3, #1
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	611a      	str	r2, [r3, #16]
  }
}
 800b5da:	bf00      	nop
 800b5dc:	3714      	adds	r7, #20
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr
 800b5e6:	bf00      	nop
 800b5e8:	40010000 	.word	0x40010000
 800b5ec:	40000400 	.word	0x40000400
 800b5f0:	40000800 	.word	0x40000800
 800b5f4:	40000c00 	.word	0x40000c00
 800b5f8:	40010400 	.word	0x40010400
 800b5fc:	40014000 	.word	0x40014000
 800b600:	40014400 	.word	0x40014400
 800b604:	40014800 	.word	0x40014800

0800b608 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b610:	bf00      	nop
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b624:	bf00      	nop
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b630:	b480      	push	{r7}
 800b632:	b083      	sub	sp, #12
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b638:	bf00      	nop
 800b63a:	370c      	adds	r7, #12
 800b63c:	46bd      	mov	sp, r7
 800b63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b642:	4770      	bx	lr

0800b644 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d101      	bne.n	800b656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b652:	2301      	movs	r3, #1
 800b654:	e042      	b.n	800b6dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d106      	bne.n	800b66e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2200      	movs	r2, #0
 800b664:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f7f7 f8c5 	bl	80027f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2224      	movs	r2, #36	@ 0x24
 800b672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f022 0201 	bic.w	r2, r2, #1
 800b684:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d002      	beq.n	800b694 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f001 fb2c 	bl	800ccec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 fdc1 	bl	800c21c <UART_SetConfig>
 800b69a:	4603      	mov	r3, r0
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d101      	bne.n	800b6a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	e01b      	b.n	800b6dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	685a      	ldr	r2, [r3, #4]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b6b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	689a      	ldr	r2, [r3, #8]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b6c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f042 0201 	orr.w	r2, r2, #1
 800b6d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f001 fbab 	bl	800ce30 <UART_CheckIdleState>
 800b6da:	4603      	mov	r3, r0
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3708      	adds	r7, #8
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b08a      	sub	sp, #40	@ 0x28
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	60f8      	str	r0, [r7, #12]
 800b6ec:	60b9      	str	r1, [r7, #8]
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b6f8:	2b20      	cmp	r3, #32
 800b6fa:	d137      	bne.n	800b76c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d002      	beq.n	800b708 <HAL_UART_Receive_IT+0x24>
 800b702:	88fb      	ldrh	r3, [r7, #6]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d101      	bne.n	800b70c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b708:	2301      	movs	r3, #1
 800b70a:	e030      	b.n	800b76e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2200      	movs	r2, #0
 800b710:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a18      	ldr	r2, [pc, #96]	@ (800b778 <HAL_UART_Receive_IT+0x94>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d01f      	beq.n	800b75c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b726:	2b00      	cmp	r3, #0
 800b728:	d018      	beq.n	800b75c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	e853 3f00 	ldrex	r3, [r3]
 800b736:	613b      	str	r3, [r7, #16]
   return(result);
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b73e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	461a      	mov	r2, r3
 800b746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b748:	623b      	str	r3, [r7, #32]
 800b74a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b74c:	69f9      	ldr	r1, [r7, #28]
 800b74e:	6a3a      	ldr	r2, [r7, #32]
 800b750:	e841 2300 	strex	r3, r2, [r1]
 800b754:	61bb      	str	r3, [r7, #24]
   return(result);
 800b756:	69bb      	ldr	r3, [r7, #24]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d1e6      	bne.n	800b72a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b75c:	88fb      	ldrh	r3, [r7, #6]
 800b75e:	461a      	mov	r2, r3
 800b760:	68b9      	ldr	r1, [r7, #8]
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	f001 fc7c 	bl	800d060 <UART_Start_Receive_IT>
 800b768:	4603      	mov	r3, r0
 800b76a:	e000      	b.n	800b76e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b76c:	2302      	movs	r3, #2
  }
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3728      	adds	r7, #40	@ 0x28
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	58000c00 	.word	0x58000c00

0800b77c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b08a      	sub	sp, #40	@ 0x28
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	4613      	mov	r3, r2
 800b788:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b790:	2b20      	cmp	r3, #32
 800b792:	d167      	bne.n	800b864 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d002      	beq.n	800b7a0 <HAL_UART_Transmit_DMA+0x24>
 800b79a:	88fb      	ldrh	r3, [r7, #6]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d101      	bne.n	800b7a4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	e060      	b.n	800b866 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	68ba      	ldr	r2, [r7, #8]
 800b7a8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	88fa      	ldrh	r2, [r7, #6]
 800b7ae:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	88fa      	ldrh	r2, [r7, #6]
 800b7b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2221      	movs	r2, #33	@ 0x21
 800b7c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d028      	beq.n	800b824 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b7d6:	4a26      	ldr	r2, [pc, #152]	@ (800b870 <HAL_UART_Transmit_DMA+0xf4>)
 800b7d8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b7de:	4a25      	ldr	r2, [pc, #148]	@ (800b874 <HAL_UART_Transmit_DMA+0xf8>)
 800b7e0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b7e6:	4a24      	ldr	r2, [pc, #144]	@ (800b878 <HAL_UART_Transmit_DMA+0xfc>)
 800b7e8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	3328      	adds	r3, #40	@ 0x28
 800b802:	461a      	mov	r2, r3
 800b804:	88fb      	ldrh	r3, [r7, #6]
 800b806:	f7f9 fa1f 	bl	8004c48 <HAL_DMA_Start_IT>
 800b80a:	4603      	mov	r3, r0
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d009      	beq.n	800b824 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	2210      	movs	r2, #16
 800b814:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	2220      	movs	r2, #32
 800b81c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800b820:	2301      	movs	r3, #1
 800b822:	e020      	b.n	800b866 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2240      	movs	r2, #64	@ 0x40
 800b82a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	3308      	adds	r3, #8
 800b832:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	e853 3f00 	ldrex	r3, [r3]
 800b83a:	613b      	str	r3, [r7, #16]
   return(result);
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b842:	627b      	str	r3, [r7, #36]	@ 0x24
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	3308      	adds	r3, #8
 800b84a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b84c:	623a      	str	r2, [r7, #32]
 800b84e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b850:	69f9      	ldr	r1, [r7, #28]
 800b852:	6a3a      	ldr	r2, [r7, #32]
 800b854:	e841 2300 	strex	r3, r2, [r1]
 800b858:	61bb      	str	r3, [r7, #24]
   return(result);
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d1e5      	bne.n	800b82c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800b860:	2300      	movs	r3, #0
 800b862:	e000      	b.n	800b866 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b864:	2302      	movs	r3, #2
  }
}
 800b866:	4618      	mov	r0, r3
 800b868:	3728      	adds	r7, #40	@ 0x28
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	0800d541 	.word	0x0800d541
 800b874:	0800d5d7 	.word	0x0800d5d7
 800b878:	0800d759 	.word	0x0800d759

0800b87c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b08a      	sub	sp, #40	@ 0x28
 800b880:	af00      	add	r7, sp, #0
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	4613      	mov	r3, r2
 800b888:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b890:	2b20      	cmp	r3, #32
 800b892:	d137      	bne.n	800b904 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d002      	beq.n	800b8a0 <HAL_UART_Receive_DMA+0x24>
 800b89a:	88fb      	ldrh	r3, [r7, #6]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d101      	bne.n	800b8a4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	e030      	b.n	800b906 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4a18      	ldr	r2, [pc, #96]	@ (800b910 <HAL_UART_Receive_DMA+0x94>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d01f      	beq.n	800b8f4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d018      	beq.n	800b8f4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	e853 3f00 	ldrex	r3, [r3]
 800b8ce:	613b      	str	r3, [r7, #16]
   return(result);
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b8d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	461a      	mov	r2, r3
 800b8de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8e0:	623b      	str	r3, [r7, #32]
 800b8e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e4:	69f9      	ldr	r1, [r7, #28]
 800b8e6:	6a3a      	ldr	r2, [r7, #32]
 800b8e8:	e841 2300 	strex	r3, r2, [r1]
 800b8ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8ee:	69bb      	ldr	r3, [r7, #24]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d1e6      	bne.n	800b8c2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b8f4:	88fb      	ldrh	r3, [r7, #6]
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	68b9      	ldr	r1, [r7, #8]
 800b8fa:	68f8      	ldr	r0, [r7, #12]
 800b8fc:	f001 fcd2 	bl	800d2a4 <UART_Start_Receive_DMA>
 800b900:	4603      	mov	r3, r0
 800b902:	e000      	b.n	800b906 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b904:	2302      	movs	r3, #2
  }
}
 800b906:	4618      	mov	r0, r3
 800b908:	3728      	adds	r7, #40	@ 0x28
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
 800b90e:	bf00      	nop
 800b910:	58000c00 	.word	0x58000c00

0800b914 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b090      	sub	sp, #64	@ 0x40
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b922:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b92a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	689b      	ldr	r3, [r3, #8]
 800b932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b936:	2b80      	cmp	r3, #128	@ 0x80
 800b938:	d139      	bne.n	800b9ae <HAL_UART_DMAStop+0x9a>
 800b93a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b93c:	2b21      	cmp	r3, #33	@ 0x21
 800b93e:	d136      	bne.n	800b9ae <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	3308      	adds	r3, #8
 800b946:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b948:	6a3b      	ldr	r3, [r7, #32]
 800b94a:	e853 3f00 	ldrex	r3, [r3]
 800b94e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b956:	637b      	str	r3, [r7, #52]	@ 0x34
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	3308      	adds	r3, #8
 800b95e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b960:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b962:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b964:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b966:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b968:	e841 2300 	strex	r3, r2, [r1]
 800b96c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b970:	2b00      	cmp	r3, #0
 800b972:	d1e5      	bne.n	800b940 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d015      	beq.n	800b9a8 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b980:	4618      	mov	r0, r3
 800b982:	f7f9 fbcb 	bl	800511c <HAL_DMA_Abort>
 800b986:	4603      	mov	r3, r0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d00d      	beq.n	800b9a8 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b990:	4618      	mov	r0, r3
 800b992:	f7fb f851 	bl	8006a38 <HAL_DMA_GetError>
 800b996:	4603      	mov	r3, r0
 800b998:	2b20      	cmp	r3, #32
 800b99a:	d105      	bne.n	800b9a8 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2210      	movs	r2, #16
 800b9a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800b9a4:	2303      	movs	r3, #3
 800b9a6:	e047      	b.n	800ba38 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f001 fd21 	bl	800d3f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	689b      	ldr	r3, [r3, #8]
 800b9b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9b8:	2b40      	cmp	r3, #64	@ 0x40
 800b9ba:	d13c      	bne.n	800ba36 <HAL_UART_DMAStop+0x122>
 800b9bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9be:	2b22      	cmp	r3, #34	@ 0x22
 800b9c0:	d139      	bne.n	800ba36 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	3308      	adds	r3, #8
 800b9c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	e853 3f00 	ldrex	r3, [r3]
 800b9d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b9d8:	633b      	str	r3, [r7, #48]	@ 0x30
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	3308      	adds	r3, #8
 800b9e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9e2:	61ba      	str	r2, [r7, #24]
 800b9e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e6:	6979      	ldr	r1, [r7, #20]
 800b9e8:	69ba      	ldr	r2, [r7, #24]
 800b9ea:	e841 2300 	strex	r3, r2, [r1]
 800b9ee:	613b      	str	r3, [r7, #16]
   return(result);
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1e5      	bne.n	800b9c2 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d017      	beq.n	800ba30 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7f9 fb88 	bl	800511c <HAL_DMA_Abort>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00e      	beq.n	800ba30 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f7fb f80d 	bl	8006a38 <HAL_DMA_GetError>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b20      	cmp	r3, #32
 800ba22:	d105      	bne.n	800ba30 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2210      	movs	r2, #16
 800ba28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800ba2c:	2303      	movs	r3, #3
 800ba2e:	e003      	b.n	800ba38 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f001 fd1f 	bl	800d474 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800ba36:	2300      	movs	r3, #0
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3740      	adds	r7, #64	@ 0x40
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b0ba      	sub	sp, #232	@ 0xe8
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	69db      	ldr	r3, [r3, #28]
 800ba4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	689b      	ldr	r3, [r3, #8]
 800ba62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ba66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ba6a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ba6e:	4013      	ands	r3, r2
 800ba70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ba74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d11b      	bne.n	800bab4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ba7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba80:	f003 0320 	and.w	r3, r3, #32
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d015      	beq.n	800bab4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ba88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba8c:	f003 0320 	and.w	r3, r3, #32
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d105      	bne.n	800baa0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ba94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d009      	beq.n	800bab4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	f000 8377 	beq.w	800c198 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	4798      	blx	r3
      }
      return;
 800bab2:	e371      	b.n	800c198 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bab4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bab8:	2b00      	cmp	r3, #0
 800baba:	f000 8123 	beq.w	800bd04 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800babe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bac2:	4b8d      	ldr	r3, [pc, #564]	@ (800bcf8 <HAL_UART_IRQHandler+0x2b8>)
 800bac4:	4013      	ands	r3, r2
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d106      	bne.n	800bad8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800baca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800bace:	4b8b      	ldr	r3, [pc, #556]	@ (800bcfc <HAL_UART_IRQHandler+0x2bc>)
 800bad0:	4013      	ands	r3, r2
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	f000 8116 	beq.w	800bd04 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800badc:	f003 0301 	and.w	r3, r3, #1
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d011      	beq.n	800bb08 <HAL_UART_IRQHandler+0xc8>
 800bae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800baec:	2b00      	cmp	r3, #0
 800baee:	d00b      	beq.n	800bb08 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	2201      	movs	r2, #1
 800baf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bafe:	f043 0201 	orr.w	r2, r3, #1
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb0c:	f003 0302 	and.w	r3, r3, #2
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d011      	beq.n	800bb38 <HAL_UART_IRQHandler+0xf8>
 800bb14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bb18:	f003 0301 	and.w	r3, r3, #1
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d00b      	beq.n	800bb38 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	2202      	movs	r2, #2
 800bb26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb2e:	f043 0204 	orr.w	r2, r3, #4
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb3c:	f003 0304 	and.w	r3, r3, #4
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d011      	beq.n	800bb68 <HAL_UART_IRQHandler+0x128>
 800bb44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bb48:	f003 0301 	and.w	r3, r3, #1
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d00b      	beq.n	800bb68 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2204      	movs	r2, #4
 800bb56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb5e:	f043 0202 	orr.w	r2, r3, #2
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bb68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb6c:	f003 0308 	and.w	r3, r3, #8
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d017      	beq.n	800bba4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bb74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb78:	f003 0320 	and.w	r3, r3, #32
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d105      	bne.n	800bb8c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bb80:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bb84:	4b5c      	ldr	r3, [pc, #368]	@ (800bcf8 <HAL_UART_IRQHandler+0x2b8>)
 800bb86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d00b      	beq.n	800bba4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	2208      	movs	r2, #8
 800bb92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb9a:	f043 0208 	orr.w	r2, r3, #8
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bba8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d012      	beq.n	800bbd6 <HAL_UART_IRQHandler+0x196>
 800bbb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bbb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d00c      	beq.n	800bbd6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bbc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbcc:	f043 0220 	orr.w	r2, r3, #32
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	f000 82dd 	beq.w	800c19c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bbe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bbe6:	f003 0320 	and.w	r3, r3, #32
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d013      	beq.n	800bc16 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bbee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bbf2:	f003 0320 	and.w	r3, r3, #32
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d105      	bne.n	800bc06 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bbfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bbfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d007      	beq.n	800bc16 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d003      	beq.n	800bc16 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc1c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc2a:	2b40      	cmp	r3, #64	@ 0x40
 800bc2c:	d005      	beq.n	800bc3a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bc2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bc32:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d054      	beq.n	800bce4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f001 fc1a 	bl	800d474 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	689b      	ldr	r3, [r3, #8]
 800bc46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc4a:	2b40      	cmp	r3, #64	@ 0x40
 800bc4c:	d146      	bne.n	800bcdc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	3308      	adds	r3, #8
 800bc54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bc5c:	e853 3f00 	ldrex	r3, [r3]
 800bc60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bc64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bc68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	3308      	adds	r3, #8
 800bc76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bc7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bc7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bc86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bc8a:	e841 2300 	strex	r3, r2, [r1]
 800bc8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bc92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d1d9      	bne.n	800bc4e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d017      	beq.n	800bcd4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bcaa:	4a15      	ldr	r2, [pc, #84]	@ (800bd00 <HAL_UART_IRQHandler+0x2c0>)
 800bcac:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7f9 fd4f 	bl	8005758 <HAL_DMA_Abort_IT>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d019      	beq.n	800bcf4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bcc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800bcce:	4610      	mov	r0, r2
 800bcd0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcd2:	e00f      	b.n	800bcf4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f000 fa8b 	bl	800c1f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcda:	e00b      	b.n	800bcf4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f000 fa87 	bl	800c1f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bce2:	e007      	b.n	800bcf4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f000 fa83 	bl	800c1f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2200      	movs	r2, #0
 800bcee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800bcf2:	e253      	b.n	800c19c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcf4:	bf00      	nop
    return;
 800bcf6:	e251      	b.n	800c19c <HAL_UART_IRQHandler+0x75c>
 800bcf8:	10000001 	.word	0x10000001
 800bcfc:	04000120 	.word	0x04000120
 800bd00:	0800d7d9 	.word	0x0800d7d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	f040 81e7 	bne.w	800c0dc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bd0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd12:	f003 0310 	and.w	r3, r3, #16
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	f000 81e0 	beq.w	800c0dc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bd1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd20:	f003 0310 	and.w	r3, r3, #16
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	f000 81d9 	beq.w	800c0dc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	2210      	movs	r2, #16
 800bd30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	689b      	ldr	r3, [r3, #8]
 800bd38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd3c:	2b40      	cmp	r3, #64	@ 0x40
 800bd3e:	f040 8151 	bne.w	800bfe4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	4a96      	ldr	r2, [pc, #600]	@ (800bfa4 <HAL_UART_IRQHandler+0x564>)
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d068      	beq.n	800be22 <HAL_UART_IRQHandler+0x3e2>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4a93      	ldr	r2, [pc, #588]	@ (800bfa8 <HAL_UART_IRQHandler+0x568>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d061      	beq.n	800be22 <HAL_UART_IRQHandler+0x3e2>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4a91      	ldr	r2, [pc, #580]	@ (800bfac <HAL_UART_IRQHandler+0x56c>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d05a      	beq.n	800be22 <HAL_UART_IRQHandler+0x3e2>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	4a8e      	ldr	r2, [pc, #568]	@ (800bfb0 <HAL_UART_IRQHandler+0x570>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d053      	beq.n	800be22 <HAL_UART_IRQHandler+0x3e2>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4a8c      	ldr	r2, [pc, #560]	@ (800bfb4 <HAL_UART_IRQHandler+0x574>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d04c      	beq.n	800be22 <HAL_UART_IRQHandler+0x3e2>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4a89      	ldr	r2, [pc, #548]	@ (800bfb8 <HAL_UART_IRQHandler+0x578>)
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d045      	beq.n	800be22 <HAL_UART_IRQHandler+0x3e2>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	4a87      	ldr	r2, [pc, #540]	@ (800bfbc <HAL_UART_IRQHandler+0x57c>)
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d03e      	beq.n	800be22 <HAL_UART_IRQHandler+0x3e2>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a84      	ldr	r2, [pc, #528]	@ (800bfc0 <HAL_UART_IRQHandler+0x580>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d037      	beq.n	800be22 <HAL_UART_IRQHandler+0x3e2>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4a82      	ldr	r2, [pc, #520]	@ (800bfc4 <HAL_UART_IRQHandler+0x584>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d030      	beq.n	800be22 <HAL_UART_IRQHandler+0x3e2>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	4a7f      	ldr	r2, [pc, #508]	@ (800bfc8 <HAL_UART_IRQHandler+0x588>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d029      	beq.n	800be22 <HAL_UART_IRQHandler+0x3e2>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4a7d      	ldr	r2, [pc, #500]	@ (800bfcc <HAL_UART_IRQHandler+0x58c>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d022      	beq.n	800be22 <HAL_UART_IRQHandler+0x3e2>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4a7a      	ldr	r2, [pc, #488]	@ (800bfd0 <HAL_UART_IRQHandler+0x590>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d01b      	beq.n	800be22 <HAL_UART_IRQHandler+0x3e2>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4a78      	ldr	r2, [pc, #480]	@ (800bfd4 <HAL_UART_IRQHandler+0x594>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d014      	beq.n	800be22 <HAL_UART_IRQHandler+0x3e2>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4a75      	ldr	r2, [pc, #468]	@ (800bfd8 <HAL_UART_IRQHandler+0x598>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d00d      	beq.n	800be22 <HAL_UART_IRQHandler+0x3e2>
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	4a73      	ldr	r2, [pc, #460]	@ (800bfdc <HAL_UART_IRQHandler+0x59c>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d006      	beq.n	800be22 <HAL_UART_IRQHandler+0x3e2>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4a70      	ldr	r2, [pc, #448]	@ (800bfe0 <HAL_UART_IRQHandler+0x5a0>)
 800be1e:	4293      	cmp	r3, r2
 800be20:	d106      	bne.n	800be30 <HAL_UART_IRQHandler+0x3f0>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	b29b      	uxth	r3, r3
 800be2e:	e005      	b.n	800be3c <HAL_UART_IRQHandler+0x3fc>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800be40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800be44:	2b00      	cmp	r3, #0
 800be46:	f000 81ab 	beq.w	800c1a0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800be50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800be54:	429a      	cmp	r2, r3
 800be56:	f080 81a3 	bcs.w	800c1a0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800be60:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be6a:	69db      	ldr	r3, [r3, #28]
 800be6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be70:	f000 8087 	beq.w	800bf82 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800be80:	e853 3f00 	ldrex	r3, [r3]
 800be84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800be88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800be8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800be90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	461a      	mov	r2, r3
 800be9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800be9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bea2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800beaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800beae:	e841 2300 	strex	r3, r2, [r1]
 800beb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800beb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d1da      	bne.n	800be74 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	3308      	adds	r3, #8
 800bec4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bec6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bec8:	e853 3f00 	ldrex	r3, [r3]
 800becc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bece:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bed0:	f023 0301 	bic.w	r3, r3, #1
 800bed4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	3308      	adds	r3, #8
 800bede:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bee2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bee6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bee8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800beea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800beee:	e841 2300 	strex	r3, r2, [r1]
 800bef2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bef4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d1e1      	bne.n	800bebe <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	3308      	adds	r3, #8
 800bf00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bf04:	e853 3f00 	ldrex	r3, [r3]
 800bf08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bf0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	3308      	adds	r3, #8
 800bf1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bf1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bf20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bf24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bf26:	e841 2300 	strex	r3, r2, [r1]
 800bf2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bf2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d1e3      	bne.n	800befa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2220      	movs	r2, #32
 800bf36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf48:	e853 3f00 	ldrex	r3, [r3]
 800bf4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bf4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf50:	f023 0310 	bic.w	r3, r3, #16
 800bf54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf62:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bf64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bf68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bf6a:	e841 2300 	strex	r3, r2, [r1]
 800bf6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bf70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d1e4      	bne.n	800bf40 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7f9 f8cd 	bl	800511c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2202      	movs	r2, #2
 800bf86:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	1ad3      	subs	r3, r2, r3
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f000 f931 	bl	800c204 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bfa2:	e0fd      	b.n	800c1a0 <HAL_UART_IRQHandler+0x760>
 800bfa4:	40020010 	.word	0x40020010
 800bfa8:	40020028 	.word	0x40020028
 800bfac:	40020040 	.word	0x40020040
 800bfb0:	40020058 	.word	0x40020058
 800bfb4:	40020070 	.word	0x40020070
 800bfb8:	40020088 	.word	0x40020088
 800bfbc:	400200a0 	.word	0x400200a0
 800bfc0:	400200b8 	.word	0x400200b8
 800bfc4:	40020410 	.word	0x40020410
 800bfc8:	40020428 	.word	0x40020428
 800bfcc:	40020440 	.word	0x40020440
 800bfd0:	40020458 	.word	0x40020458
 800bfd4:	40020470 	.word	0x40020470
 800bfd8:	40020488 	.word	0x40020488
 800bfdc:	400204a0 	.word	0x400204a0
 800bfe0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bff0:	b29b      	uxth	r3, r3
 800bff2:	1ad3      	subs	r3, r2, r3
 800bff4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bffe:	b29b      	uxth	r3, r3
 800c000:	2b00      	cmp	r3, #0
 800c002:	f000 80cf 	beq.w	800c1a4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c006:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	f000 80ca 	beq.w	800c1a4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c018:	e853 3f00 	ldrex	r3, [r3]
 800c01c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c01e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c020:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c024:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	461a      	mov	r2, r3
 800c02e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c032:	647b      	str	r3, [r7, #68]	@ 0x44
 800c034:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c036:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c038:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c03a:	e841 2300 	strex	r3, r2, [r1]
 800c03e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c042:	2b00      	cmp	r3, #0
 800c044:	d1e4      	bne.n	800c010 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	3308      	adds	r3, #8
 800c04c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c050:	e853 3f00 	ldrex	r3, [r3]
 800c054:	623b      	str	r3, [r7, #32]
   return(result);
 800c056:	6a3a      	ldr	r2, [r7, #32]
 800c058:	4b55      	ldr	r3, [pc, #340]	@ (800c1b0 <HAL_UART_IRQHandler+0x770>)
 800c05a:	4013      	ands	r3, r2
 800c05c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	3308      	adds	r3, #8
 800c066:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c06a:	633a      	str	r2, [r7, #48]	@ 0x30
 800c06c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c06e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c070:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c072:	e841 2300 	strex	r3, r2, [r1]
 800c076:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d1e3      	bne.n	800c046 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2220      	movs	r2, #32
 800c082:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2200      	movs	r2, #0
 800c08a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2200      	movs	r2, #0
 800c090:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	e853 3f00 	ldrex	r3, [r3]
 800c09e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f023 0310 	bic.w	r3, r3, #16
 800c0a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c0b4:	61fb      	str	r3, [r7, #28]
 800c0b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b8:	69b9      	ldr	r1, [r7, #24]
 800c0ba:	69fa      	ldr	r2, [r7, #28]
 800c0bc:	e841 2300 	strex	r3, r2, [r1]
 800c0c0:	617b      	str	r3, [r7, #20]
   return(result);
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d1e4      	bne.n	800c092 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2202      	movs	r2, #2
 800c0cc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c0ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 f895 	bl	800c204 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c0da:	e063      	b.n	800c1a4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c0dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d00e      	beq.n	800c106 <HAL_UART_IRQHandler+0x6c6>
 800c0e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c0ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d008      	beq.n	800c106 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c0fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f002 f8c8 	bl	800e294 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c104:	e051      	b.n	800c1aa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c10a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d014      	beq.n	800c13c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d105      	bne.n	800c12a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c11e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c122:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c126:	2b00      	cmp	r3, #0
 800c128:	d008      	beq.n	800c13c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d03a      	beq.n	800c1a8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	4798      	blx	r3
    }
    return;
 800c13a:	e035      	b.n	800c1a8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c13c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c144:	2b00      	cmp	r3, #0
 800c146:	d009      	beq.n	800c15c <HAL_UART_IRQHandler+0x71c>
 800c148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c14c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c150:	2b00      	cmp	r3, #0
 800c152:	d003      	beq.n	800c15c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f001 fb55 	bl	800d804 <UART_EndTransmit_IT>
    return;
 800c15a:	e026      	b.n	800c1aa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c15c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c160:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c164:	2b00      	cmp	r3, #0
 800c166:	d009      	beq.n	800c17c <HAL_UART_IRQHandler+0x73c>
 800c168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c16c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c170:	2b00      	cmp	r3, #0
 800c172:	d003      	beq.n	800c17c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f002 f8a1 	bl	800e2bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c17a:	e016      	b.n	800c1aa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c17c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c180:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c184:	2b00      	cmp	r3, #0
 800c186:	d010      	beq.n	800c1aa <HAL_UART_IRQHandler+0x76a>
 800c188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	da0c      	bge.n	800c1aa <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f002 f889 	bl	800e2a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c196:	e008      	b.n	800c1aa <HAL_UART_IRQHandler+0x76a>
      return;
 800c198:	bf00      	nop
 800c19a:	e006      	b.n	800c1aa <HAL_UART_IRQHandler+0x76a>
    return;
 800c19c:	bf00      	nop
 800c19e:	e004      	b.n	800c1aa <HAL_UART_IRQHandler+0x76a>
      return;
 800c1a0:	bf00      	nop
 800c1a2:	e002      	b.n	800c1aa <HAL_UART_IRQHandler+0x76a>
      return;
 800c1a4:	bf00      	nop
 800c1a6:	e000      	b.n	800c1aa <HAL_UART_IRQHandler+0x76a>
    return;
 800c1a8:	bf00      	nop
  }
}
 800c1aa:	37e8      	adds	r7, #232	@ 0xe8
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}
 800c1b0:	effffffe 	.word	0xeffffffe

0800c1b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c1bc:	bf00      	nop
 800c1be:	370c      	adds	r7, #12
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c6:	4770      	bx	lr

0800c1c8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b083      	sub	sp, #12
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c1d0:	bf00      	nop
 800c1d2:	370c      	adds	r7, #12
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr

0800c1dc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b083      	sub	sp, #12
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c1e4:	bf00      	nop
 800c1e6:	370c      	adds	r7, #12
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr

0800c1f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b083      	sub	sp, #12
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c1f8:	bf00      	nop
 800c1fa:	370c      	adds	r7, #12
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr

0800c204 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	460b      	mov	r3, r1
 800c20e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c210:	bf00      	nop
 800c212:	370c      	adds	r7, #12
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c21c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c220:	b092      	sub	sp, #72	@ 0x48
 800c222:	af00      	add	r7, sp, #0
 800c224:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c226:	2300      	movs	r3, #0
 800c228:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	689a      	ldr	r2, [r3, #8]
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	691b      	ldr	r3, [r3, #16]
 800c234:	431a      	orrs	r2, r3
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	695b      	ldr	r3, [r3, #20]
 800c23a:	431a      	orrs	r2, r3
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	69db      	ldr	r3, [r3, #28]
 800c240:	4313      	orrs	r3, r2
 800c242:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	4bbe      	ldr	r3, [pc, #760]	@ (800c544 <UART_SetConfig+0x328>)
 800c24c:	4013      	ands	r3, r2
 800c24e:	697a      	ldr	r2, [r7, #20]
 800c250:	6812      	ldr	r2, [r2, #0]
 800c252:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c254:	430b      	orrs	r3, r1
 800c256:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	68da      	ldr	r2, [r3, #12]
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	430a      	orrs	r2, r1
 800c26c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	699b      	ldr	r3, [r3, #24]
 800c272:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4ab3      	ldr	r2, [pc, #716]	@ (800c548 <UART_SetConfig+0x32c>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d004      	beq.n	800c288 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	6a1b      	ldr	r3, [r3, #32]
 800c282:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c284:	4313      	orrs	r3, r2
 800c286:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	689a      	ldr	r2, [r3, #8]
 800c28e:	4baf      	ldr	r3, [pc, #700]	@ (800c54c <UART_SetConfig+0x330>)
 800c290:	4013      	ands	r3, r2
 800c292:	697a      	ldr	r2, [r7, #20]
 800c294:	6812      	ldr	r2, [r2, #0]
 800c296:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c298:	430b      	orrs	r3, r1
 800c29a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2a2:	f023 010f 	bic.w	r1, r3, #15
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	430a      	orrs	r2, r1
 800c2b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	4aa6      	ldr	r2, [pc, #664]	@ (800c550 <UART_SetConfig+0x334>)
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	d177      	bne.n	800c3ac <UART_SetConfig+0x190>
 800c2bc:	4ba5      	ldr	r3, [pc, #660]	@ (800c554 <UART_SetConfig+0x338>)
 800c2be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c2c4:	2b28      	cmp	r3, #40	@ 0x28
 800c2c6:	d86d      	bhi.n	800c3a4 <UART_SetConfig+0x188>
 800c2c8:	a201      	add	r2, pc, #4	@ (adr r2, 800c2d0 <UART_SetConfig+0xb4>)
 800c2ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ce:	bf00      	nop
 800c2d0:	0800c375 	.word	0x0800c375
 800c2d4:	0800c3a5 	.word	0x0800c3a5
 800c2d8:	0800c3a5 	.word	0x0800c3a5
 800c2dc:	0800c3a5 	.word	0x0800c3a5
 800c2e0:	0800c3a5 	.word	0x0800c3a5
 800c2e4:	0800c3a5 	.word	0x0800c3a5
 800c2e8:	0800c3a5 	.word	0x0800c3a5
 800c2ec:	0800c3a5 	.word	0x0800c3a5
 800c2f0:	0800c37d 	.word	0x0800c37d
 800c2f4:	0800c3a5 	.word	0x0800c3a5
 800c2f8:	0800c3a5 	.word	0x0800c3a5
 800c2fc:	0800c3a5 	.word	0x0800c3a5
 800c300:	0800c3a5 	.word	0x0800c3a5
 800c304:	0800c3a5 	.word	0x0800c3a5
 800c308:	0800c3a5 	.word	0x0800c3a5
 800c30c:	0800c3a5 	.word	0x0800c3a5
 800c310:	0800c385 	.word	0x0800c385
 800c314:	0800c3a5 	.word	0x0800c3a5
 800c318:	0800c3a5 	.word	0x0800c3a5
 800c31c:	0800c3a5 	.word	0x0800c3a5
 800c320:	0800c3a5 	.word	0x0800c3a5
 800c324:	0800c3a5 	.word	0x0800c3a5
 800c328:	0800c3a5 	.word	0x0800c3a5
 800c32c:	0800c3a5 	.word	0x0800c3a5
 800c330:	0800c38d 	.word	0x0800c38d
 800c334:	0800c3a5 	.word	0x0800c3a5
 800c338:	0800c3a5 	.word	0x0800c3a5
 800c33c:	0800c3a5 	.word	0x0800c3a5
 800c340:	0800c3a5 	.word	0x0800c3a5
 800c344:	0800c3a5 	.word	0x0800c3a5
 800c348:	0800c3a5 	.word	0x0800c3a5
 800c34c:	0800c3a5 	.word	0x0800c3a5
 800c350:	0800c395 	.word	0x0800c395
 800c354:	0800c3a5 	.word	0x0800c3a5
 800c358:	0800c3a5 	.word	0x0800c3a5
 800c35c:	0800c3a5 	.word	0x0800c3a5
 800c360:	0800c3a5 	.word	0x0800c3a5
 800c364:	0800c3a5 	.word	0x0800c3a5
 800c368:	0800c3a5 	.word	0x0800c3a5
 800c36c:	0800c3a5 	.word	0x0800c3a5
 800c370:	0800c39d 	.word	0x0800c39d
 800c374:	2301      	movs	r3, #1
 800c376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c37a:	e222      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c37c:	2304      	movs	r3, #4
 800c37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c382:	e21e      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c384:	2308      	movs	r3, #8
 800c386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c38a:	e21a      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c38c:	2310      	movs	r3, #16
 800c38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c392:	e216      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c394:	2320      	movs	r3, #32
 800c396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c39a:	e212      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c39c:	2340      	movs	r3, #64	@ 0x40
 800c39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3a2:	e20e      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c3a4:	2380      	movs	r3, #128	@ 0x80
 800c3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3aa:	e20a      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4a69      	ldr	r2, [pc, #420]	@ (800c558 <UART_SetConfig+0x33c>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d130      	bne.n	800c418 <UART_SetConfig+0x1fc>
 800c3b6:	4b67      	ldr	r3, [pc, #412]	@ (800c554 <UART_SetConfig+0x338>)
 800c3b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3ba:	f003 0307 	and.w	r3, r3, #7
 800c3be:	2b05      	cmp	r3, #5
 800c3c0:	d826      	bhi.n	800c410 <UART_SetConfig+0x1f4>
 800c3c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c3c8 <UART_SetConfig+0x1ac>)
 800c3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c8:	0800c3e1 	.word	0x0800c3e1
 800c3cc:	0800c3e9 	.word	0x0800c3e9
 800c3d0:	0800c3f1 	.word	0x0800c3f1
 800c3d4:	0800c3f9 	.word	0x0800c3f9
 800c3d8:	0800c401 	.word	0x0800c401
 800c3dc:	0800c409 	.word	0x0800c409
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3e6:	e1ec      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c3e8:	2304      	movs	r3, #4
 800c3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ee:	e1e8      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c3f0:	2308      	movs	r3, #8
 800c3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3f6:	e1e4      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c3f8:	2310      	movs	r3, #16
 800c3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3fe:	e1e0      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c400:	2320      	movs	r3, #32
 800c402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c406:	e1dc      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c408:	2340      	movs	r3, #64	@ 0x40
 800c40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c40e:	e1d8      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c410:	2380      	movs	r3, #128	@ 0x80
 800c412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c416:	e1d4      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4a4f      	ldr	r2, [pc, #316]	@ (800c55c <UART_SetConfig+0x340>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d130      	bne.n	800c484 <UART_SetConfig+0x268>
 800c422:	4b4c      	ldr	r3, [pc, #304]	@ (800c554 <UART_SetConfig+0x338>)
 800c424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c426:	f003 0307 	and.w	r3, r3, #7
 800c42a:	2b05      	cmp	r3, #5
 800c42c:	d826      	bhi.n	800c47c <UART_SetConfig+0x260>
 800c42e:	a201      	add	r2, pc, #4	@ (adr r2, 800c434 <UART_SetConfig+0x218>)
 800c430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c434:	0800c44d 	.word	0x0800c44d
 800c438:	0800c455 	.word	0x0800c455
 800c43c:	0800c45d 	.word	0x0800c45d
 800c440:	0800c465 	.word	0x0800c465
 800c444:	0800c46d 	.word	0x0800c46d
 800c448:	0800c475 	.word	0x0800c475
 800c44c:	2300      	movs	r3, #0
 800c44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c452:	e1b6      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c454:	2304      	movs	r3, #4
 800c456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c45a:	e1b2      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c45c:	2308      	movs	r3, #8
 800c45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c462:	e1ae      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c464:	2310      	movs	r3, #16
 800c466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c46a:	e1aa      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c46c:	2320      	movs	r3, #32
 800c46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c472:	e1a6      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c474:	2340      	movs	r3, #64	@ 0x40
 800c476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c47a:	e1a2      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c47c:	2380      	movs	r3, #128	@ 0x80
 800c47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c482:	e19e      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	4a35      	ldr	r2, [pc, #212]	@ (800c560 <UART_SetConfig+0x344>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d130      	bne.n	800c4f0 <UART_SetConfig+0x2d4>
 800c48e:	4b31      	ldr	r3, [pc, #196]	@ (800c554 <UART_SetConfig+0x338>)
 800c490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c492:	f003 0307 	and.w	r3, r3, #7
 800c496:	2b05      	cmp	r3, #5
 800c498:	d826      	bhi.n	800c4e8 <UART_SetConfig+0x2cc>
 800c49a:	a201      	add	r2, pc, #4	@ (adr r2, 800c4a0 <UART_SetConfig+0x284>)
 800c49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4a0:	0800c4b9 	.word	0x0800c4b9
 800c4a4:	0800c4c1 	.word	0x0800c4c1
 800c4a8:	0800c4c9 	.word	0x0800c4c9
 800c4ac:	0800c4d1 	.word	0x0800c4d1
 800c4b0:	0800c4d9 	.word	0x0800c4d9
 800c4b4:	0800c4e1 	.word	0x0800c4e1
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4be:	e180      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c4c0:	2304      	movs	r3, #4
 800c4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4c6:	e17c      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c4c8:	2308      	movs	r3, #8
 800c4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ce:	e178      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c4d0:	2310      	movs	r3, #16
 800c4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4d6:	e174      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c4d8:	2320      	movs	r3, #32
 800c4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4de:	e170      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c4e0:	2340      	movs	r3, #64	@ 0x40
 800c4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4e6:	e16c      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c4e8:	2380      	movs	r3, #128	@ 0x80
 800c4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ee:	e168      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4a1b      	ldr	r2, [pc, #108]	@ (800c564 <UART_SetConfig+0x348>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d142      	bne.n	800c580 <UART_SetConfig+0x364>
 800c4fa:	4b16      	ldr	r3, [pc, #88]	@ (800c554 <UART_SetConfig+0x338>)
 800c4fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4fe:	f003 0307 	and.w	r3, r3, #7
 800c502:	2b05      	cmp	r3, #5
 800c504:	d838      	bhi.n	800c578 <UART_SetConfig+0x35c>
 800c506:	a201      	add	r2, pc, #4	@ (adr r2, 800c50c <UART_SetConfig+0x2f0>)
 800c508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c50c:	0800c525 	.word	0x0800c525
 800c510:	0800c52d 	.word	0x0800c52d
 800c514:	0800c535 	.word	0x0800c535
 800c518:	0800c53d 	.word	0x0800c53d
 800c51c:	0800c569 	.word	0x0800c569
 800c520:	0800c571 	.word	0x0800c571
 800c524:	2300      	movs	r3, #0
 800c526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c52a:	e14a      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c52c:	2304      	movs	r3, #4
 800c52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c532:	e146      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c534:	2308      	movs	r3, #8
 800c536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c53a:	e142      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c53c:	2310      	movs	r3, #16
 800c53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c542:	e13e      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c544:	cfff69f3 	.word	0xcfff69f3
 800c548:	58000c00 	.word	0x58000c00
 800c54c:	11fff4ff 	.word	0x11fff4ff
 800c550:	40011000 	.word	0x40011000
 800c554:	58024400 	.word	0x58024400
 800c558:	40004400 	.word	0x40004400
 800c55c:	40004800 	.word	0x40004800
 800c560:	40004c00 	.word	0x40004c00
 800c564:	40005000 	.word	0x40005000
 800c568:	2320      	movs	r3, #32
 800c56a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c56e:	e128      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c570:	2340      	movs	r3, #64	@ 0x40
 800c572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c576:	e124      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c578:	2380      	movs	r3, #128	@ 0x80
 800c57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c57e:	e120      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	4acb      	ldr	r2, [pc, #812]	@ (800c8b4 <UART_SetConfig+0x698>)
 800c586:	4293      	cmp	r3, r2
 800c588:	d176      	bne.n	800c678 <UART_SetConfig+0x45c>
 800c58a:	4bcb      	ldr	r3, [pc, #812]	@ (800c8b8 <UART_SetConfig+0x69c>)
 800c58c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c58e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c592:	2b28      	cmp	r3, #40	@ 0x28
 800c594:	d86c      	bhi.n	800c670 <UART_SetConfig+0x454>
 800c596:	a201      	add	r2, pc, #4	@ (adr r2, 800c59c <UART_SetConfig+0x380>)
 800c598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c59c:	0800c641 	.word	0x0800c641
 800c5a0:	0800c671 	.word	0x0800c671
 800c5a4:	0800c671 	.word	0x0800c671
 800c5a8:	0800c671 	.word	0x0800c671
 800c5ac:	0800c671 	.word	0x0800c671
 800c5b0:	0800c671 	.word	0x0800c671
 800c5b4:	0800c671 	.word	0x0800c671
 800c5b8:	0800c671 	.word	0x0800c671
 800c5bc:	0800c649 	.word	0x0800c649
 800c5c0:	0800c671 	.word	0x0800c671
 800c5c4:	0800c671 	.word	0x0800c671
 800c5c8:	0800c671 	.word	0x0800c671
 800c5cc:	0800c671 	.word	0x0800c671
 800c5d0:	0800c671 	.word	0x0800c671
 800c5d4:	0800c671 	.word	0x0800c671
 800c5d8:	0800c671 	.word	0x0800c671
 800c5dc:	0800c651 	.word	0x0800c651
 800c5e0:	0800c671 	.word	0x0800c671
 800c5e4:	0800c671 	.word	0x0800c671
 800c5e8:	0800c671 	.word	0x0800c671
 800c5ec:	0800c671 	.word	0x0800c671
 800c5f0:	0800c671 	.word	0x0800c671
 800c5f4:	0800c671 	.word	0x0800c671
 800c5f8:	0800c671 	.word	0x0800c671
 800c5fc:	0800c659 	.word	0x0800c659
 800c600:	0800c671 	.word	0x0800c671
 800c604:	0800c671 	.word	0x0800c671
 800c608:	0800c671 	.word	0x0800c671
 800c60c:	0800c671 	.word	0x0800c671
 800c610:	0800c671 	.word	0x0800c671
 800c614:	0800c671 	.word	0x0800c671
 800c618:	0800c671 	.word	0x0800c671
 800c61c:	0800c661 	.word	0x0800c661
 800c620:	0800c671 	.word	0x0800c671
 800c624:	0800c671 	.word	0x0800c671
 800c628:	0800c671 	.word	0x0800c671
 800c62c:	0800c671 	.word	0x0800c671
 800c630:	0800c671 	.word	0x0800c671
 800c634:	0800c671 	.word	0x0800c671
 800c638:	0800c671 	.word	0x0800c671
 800c63c:	0800c669 	.word	0x0800c669
 800c640:	2301      	movs	r3, #1
 800c642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c646:	e0bc      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c648:	2304      	movs	r3, #4
 800c64a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c64e:	e0b8      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c650:	2308      	movs	r3, #8
 800c652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c656:	e0b4      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c658:	2310      	movs	r3, #16
 800c65a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c65e:	e0b0      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c660:	2320      	movs	r3, #32
 800c662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c666:	e0ac      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c668:	2340      	movs	r3, #64	@ 0x40
 800c66a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c66e:	e0a8      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c670:	2380      	movs	r3, #128	@ 0x80
 800c672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c676:	e0a4      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	4a8f      	ldr	r2, [pc, #572]	@ (800c8bc <UART_SetConfig+0x6a0>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d130      	bne.n	800c6e4 <UART_SetConfig+0x4c8>
 800c682:	4b8d      	ldr	r3, [pc, #564]	@ (800c8b8 <UART_SetConfig+0x69c>)
 800c684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c686:	f003 0307 	and.w	r3, r3, #7
 800c68a:	2b05      	cmp	r3, #5
 800c68c:	d826      	bhi.n	800c6dc <UART_SetConfig+0x4c0>
 800c68e:	a201      	add	r2, pc, #4	@ (adr r2, 800c694 <UART_SetConfig+0x478>)
 800c690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c694:	0800c6ad 	.word	0x0800c6ad
 800c698:	0800c6b5 	.word	0x0800c6b5
 800c69c:	0800c6bd 	.word	0x0800c6bd
 800c6a0:	0800c6c5 	.word	0x0800c6c5
 800c6a4:	0800c6cd 	.word	0x0800c6cd
 800c6a8:	0800c6d5 	.word	0x0800c6d5
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6b2:	e086      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c6b4:	2304      	movs	r3, #4
 800c6b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6ba:	e082      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c6bc:	2308      	movs	r3, #8
 800c6be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6c2:	e07e      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c6c4:	2310      	movs	r3, #16
 800c6c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6ca:	e07a      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c6cc:	2320      	movs	r3, #32
 800c6ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6d2:	e076      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c6d4:	2340      	movs	r3, #64	@ 0x40
 800c6d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6da:	e072      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c6dc:	2380      	movs	r3, #128	@ 0x80
 800c6de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6e2:	e06e      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	4a75      	ldr	r2, [pc, #468]	@ (800c8c0 <UART_SetConfig+0x6a4>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d130      	bne.n	800c750 <UART_SetConfig+0x534>
 800c6ee:	4b72      	ldr	r3, [pc, #456]	@ (800c8b8 <UART_SetConfig+0x69c>)
 800c6f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6f2:	f003 0307 	and.w	r3, r3, #7
 800c6f6:	2b05      	cmp	r3, #5
 800c6f8:	d826      	bhi.n	800c748 <UART_SetConfig+0x52c>
 800c6fa:	a201      	add	r2, pc, #4	@ (adr r2, 800c700 <UART_SetConfig+0x4e4>)
 800c6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c700:	0800c719 	.word	0x0800c719
 800c704:	0800c721 	.word	0x0800c721
 800c708:	0800c729 	.word	0x0800c729
 800c70c:	0800c731 	.word	0x0800c731
 800c710:	0800c739 	.word	0x0800c739
 800c714:	0800c741 	.word	0x0800c741
 800c718:	2300      	movs	r3, #0
 800c71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c71e:	e050      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c720:	2304      	movs	r3, #4
 800c722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c726:	e04c      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c728:	2308      	movs	r3, #8
 800c72a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c72e:	e048      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c730:	2310      	movs	r3, #16
 800c732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c736:	e044      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c738:	2320      	movs	r3, #32
 800c73a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c73e:	e040      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c740:	2340      	movs	r3, #64	@ 0x40
 800c742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c746:	e03c      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c748:	2380      	movs	r3, #128	@ 0x80
 800c74a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c74e:	e038      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4a5b      	ldr	r2, [pc, #364]	@ (800c8c4 <UART_SetConfig+0x6a8>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d130      	bne.n	800c7bc <UART_SetConfig+0x5a0>
 800c75a:	4b57      	ldr	r3, [pc, #348]	@ (800c8b8 <UART_SetConfig+0x69c>)
 800c75c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c75e:	f003 0307 	and.w	r3, r3, #7
 800c762:	2b05      	cmp	r3, #5
 800c764:	d826      	bhi.n	800c7b4 <UART_SetConfig+0x598>
 800c766:	a201      	add	r2, pc, #4	@ (adr r2, 800c76c <UART_SetConfig+0x550>)
 800c768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c76c:	0800c785 	.word	0x0800c785
 800c770:	0800c78d 	.word	0x0800c78d
 800c774:	0800c795 	.word	0x0800c795
 800c778:	0800c79d 	.word	0x0800c79d
 800c77c:	0800c7a5 	.word	0x0800c7a5
 800c780:	0800c7ad 	.word	0x0800c7ad
 800c784:	2302      	movs	r3, #2
 800c786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c78a:	e01a      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c78c:	2304      	movs	r3, #4
 800c78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c792:	e016      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c794:	2308      	movs	r3, #8
 800c796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c79a:	e012      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c79c:	2310      	movs	r3, #16
 800c79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7a2:	e00e      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c7a4:	2320      	movs	r3, #32
 800c7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7aa:	e00a      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c7ac:	2340      	movs	r3, #64	@ 0x40
 800c7ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7b2:	e006      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c7b4:	2380      	movs	r3, #128	@ 0x80
 800c7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7ba:	e002      	b.n	800c7c2 <UART_SetConfig+0x5a6>
 800c7bc:	2380      	movs	r3, #128	@ 0x80
 800c7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	4a3f      	ldr	r2, [pc, #252]	@ (800c8c4 <UART_SetConfig+0x6a8>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	f040 80f8 	bne.w	800c9be <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c7ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c7d2:	2b20      	cmp	r3, #32
 800c7d4:	dc46      	bgt.n	800c864 <UART_SetConfig+0x648>
 800c7d6:	2b02      	cmp	r3, #2
 800c7d8:	f2c0 8082 	blt.w	800c8e0 <UART_SetConfig+0x6c4>
 800c7dc:	3b02      	subs	r3, #2
 800c7de:	2b1e      	cmp	r3, #30
 800c7e0:	d87e      	bhi.n	800c8e0 <UART_SetConfig+0x6c4>
 800c7e2:	a201      	add	r2, pc, #4	@ (adr r2, 800c7e8 <UART_SetConfig+0x5cc>)
 800c7e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7e8:	0800c86b 	.word	0x0800c86b
 800c7ec:	0800c8e1 	.word	0x0800c8e1
 800c7f0:	0800c873 	.word	0x0800c873
 800c7f4:	0800c8e1 	.word	0x0800c8e1
 800c7f8:	0800c8e1 	.word	0x0800c8e1
 800c7fc:	0800c8e1 	.word	0x0800c8e1
 800c800:	0800c883 	.word	0x0800c883
 800c804:	0800c8e1 	.word	0x0800c8e1
 800c808:	0800c8e1 	.word	0x0800c8e1
 800c80c:	0800c8e1 	.word	0x0800c8e1
 800c810:	0800c8e1 	.word	0x0800c8e1
 800c814:	0800c8e1 	.word	0x0800c8e1
 800c818:	0800c8e1 	.word	0x0800c8e1
 800c81c:	0800c8e1 	.word	0x0800c8e1
 800c820:	0800c893 	.word	0x0800c893
 800c824:	0800c8e1 	.word	0x0800c8e1
 800c828:	0800c8e1 	.word	0x0800c8e1
 800c82c:	0800c8e1 	.word	0x0800c8e1
 800c830:	0800c8e1 	.word	0x0800c8e1
 800c834:	0800c8e1 	.word	0x0800c8e1
 800c838:	0800c8e1 	.word	0x0800c8e1
 800c83c:	0800c8e1 	.word	0x0800c8e1
 800c840:	0800c8e1 	.word	0x0800c8e1
 800c844:	0800c8e1 	.word	0x0800c8e1
 800c848:	0800c8e1 	.word	0x0800c8e1
 800c84c:	0800c8e1 	.word	0x0800c8e1
 800c850:	0800c8e1 	.word	0x0800c8e1
 800c854:	0800c8e1 	.word	0x0800c8e1
 800c858:	0800c8e1 	.word	0x0800c8e1
 800c85c:	0800c8e1 	.word	0x0800c8e1
 800c860:	0800c8d3 	.word	0x0800c8d3
 800c864:	2b40      	cmp	r3, #64	@ 0x40
 800c866:	d037      	beq.n	800c8d8 <UART_SetConfig+0x6bc>
 800c868:	e03a      	b.n	800c8e0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c86a:	f7fd fea9 	bl	800a5c0 <HAL_RCCEx_GetD3PCLK1Freq>
 800c86e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c870:	e03c      	b.n	800c8ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c876:	4618      	mov	r0, r3
 800c878:	f7fd feb8 	bl	800a5ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c87e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c880:	e034      	b.n	800c8ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c882:	f107 0318 	add.w	r3, r7, #24
 800c886:	4618      	mov	r0, r3
 800c888:	f7fe f804 	bl	800a894 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c88c:	69fb      	ldr	r3, [r7, #28]
 800c88e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c890:	e02c      	b.n	800c8ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c892:	4b09      	ldr	r3, [pc, #36]	@ (800c8b8 <UART_SetConfig+0x69c>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f003 0320 	and.w	r3, r3, #32
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d016      	beq.n	800c8cc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c89e:	4b06      	ldr	r3, [pc, #24]	@ (800c8b8 <UART_SetConfig+0x69c>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	08db      	lsrs	r3, r3, #3
 800c8a4:	f003 0303 	and.w	r3, r3, #3
 800c8a8:	4a07      	ldr	r2, [pc, #28]	@ (800c8c8 <UART_SetConfig+0x6ac>)
 800c8aa:	fa22 f303 	lsr.w	r3, r2, r3
 800c8ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c8b0:	e01c      	b.n	800c8ec <UART_SetConfig+0x6d0>
 800c8b2:	bf00      	nop
 800c8b4:	40011400 	.word	0x40011400
 800c8b8:	58024400 	.word	0x58024400
 800c8bc:	40007800 	.word	0x40007800
 800c8c0:	40007c00 	.word	0x40007c00
 800c8c4:	58000c00 	.word	0x58000c00
 800c8c8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c8cc:	4b9d      	ldr	r3, [pc, #628]	@ (800cb44 <UART_SetConfig+0x928>)
 800c8ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8d0:	e00c      	b.n	800c8ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c8d2:	4b9d      	ldr	r3, [pc, #628]	@ (800cb48 <UART_SetConfig+0x92c>)
 800c8d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8d6:	e009      	b.n	800c8ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c8d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c8dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8de:	e005      	b.n	800c8ec <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c8ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c8ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	f000 81de 	beq.w	800ccb0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8f8:	4a94      	ldr	r2, [pc, #592]	@ (800cb4c <UART_SetConfig+0x930>)
 800c8fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8fe:	461a      	mov	r2, r3
 800c900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c902:	fbb3 f3f2 	udiv	r3, r3, r2
 800c906:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	685a      	ldr	r2, [r3, #4]
 800c90c:	4613      	mov	r3, r2
 800c90e:	005b      	lsls	r3, r3, #1
 800c910:	4413      	add	r3, r2
 800c912:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c914:	429a      	cmp	r2, r3
 800c916:	d305      	bcc.n	800c924 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c91e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c920:	429a      	cmp	r2, r3
 800c922:	d903      	bls.n	800c92c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c924:	2301      	movs	r3, #1
 800c926:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c92a:	e1c1      	b.n	800ccb0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c92c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c92e:	2200      	movs	r2, #0
 800c930:	60bb      	str	r3, [r7, #8]
 800c932:	60fa      	str	r2, [r7, #12]
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c938:	4a84      	ldr	r2, [pc, #528]	@ (800cb4c <UART_SetConfig+0x930>)
 800c93a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c93e:	b29b      	uxth	r3, r3
 800c940:	2200      	movs	r2, #0
 800c942:	603b      	str	r3, [r7, #0]
 800c944:	607a      	str	r2, [r7, #4]
 800c946:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c94a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c94e:	f7f3 fd7f 	bl	8000450 <__aeabi_uldivmod>
 800c952:	4602      	mov	r2, r0
 800c954:	460b      	mov	r3, r1
 800c956:	4610      	mov	r0, r2
 800c958:	4619      	mov	r1, r3
 800c95a:	f04f 0200 	mov.w	r2, #0
 800c95e:	f04f 0300 	mov.w	r3, #0
 800c962:	020b      	lsls	r3, r1, #8
 800c964:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c968:	0202      	lsls	r2, r0, #8
 800c96a:	6979      	ldr	r1, [r7, #20]
 800c96c:	6849      	ldr	r1, [r1, #4]
 800c96e:	0849      	lsrs	r1, r1, #1
 800c970:	2000      	movs	r0, #0
 800c972:	460c      	mov	r4, r1
 800c974:	4605      	mov	r5, r0
 800c976:	eb12 0804 	adds.w	r8, r2, r4
 800c97a:	eb43 0905 	adc.w	r9, r3, r5
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	2200      	movs	r2, #0
 800c984:	469a      	mov	sl, r3
 800c986:	4693      	mov	fp, r2
 800c988:	4652      	mov	r2, sl
 800c98a:	465b      	mov	r3, fp
 800c98c:	4640      	mov	r0, r8
 800c98e:	4649      	mov	r1, r9
 800c990:	f7f3 fd5e 	bl	8000450 <__aeabi_uldivmod>
 800c994:	4602      	mov	r2, r0
 800c996:	460b      	mov	r3, r1
 800c998:	4613      	mov	r3, r2
 800c99a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c99c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c99e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c9a2:	d308      	bcc.n	800c9b6 <UART_SetConfig+0x79a>
 800c9a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c9aa:	d204      	bcs.n	800c9b6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9b2:	60da      	str	r2, [r3, #12]
 800c9b4:	e17c      	b.n	800ccb0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c9bc:	e178      	b.n	800ccb0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	69db      	ldr	r3, [r3, #28]
 800c9c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c9c6:	f040 80c5 	bne.w	800cb54 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c9ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c9ce:	2b20      	cmp	r3, #32
 800c9d0:	dc48      	bgt.n	800ca64 <UART_SetConfig+0x848>
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	db7b      	blt.n	800cace <UART_SetConfig+0x8b2>
 800c9d6:	2b20      	cmp	r3, #32
 800c9d8:	d879      	bhi.n	800cace <UART_SetConfig+0x8b2>
 800c9da:	a201      	add	r2, pc, #4	@ (adr r2, 800c9e0 <UART_SetConfig+0x7c4>)
 800c9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9e0:	0800ca6b 	.word	0x0800ca6b
 800c9e4:	0800ca73 	.word	0x0800ca73
 800c9e8:	0800cacf 	.word	0x0800cacf
 800c9ec:	0800cacf 	.word	0x0800cacf
 800c9f0:	0800ca7b 	.word	0x0800ca7b
 800c9f4:	0800cacf 	.word	0x0800cacf
 800c9f8:	0800cacf 	.word	0x0800cacf
 800c9fc:	0800cacf 	.word	0x0800cacf
 800ca00:	0800ca8b 	.word	0x0800ca8b
 800ca04:	0800cacf 	.word	0x0800cacf
 800ca08:	0800cacf 	.word	0x0800cacf
 800ca0c:	0800cacf 	.word	0x0800cacf
 800ca10:	0800cacf 	.word	0x0800cacf
 800ca14:	0800cacf 	.word	0x0800cacf
 800ca18:	0800cacf 	.word	0x0800cacf
 800ca1c:	0800cacf 	.word	0x0800cacf
 800ca20:	0800ca9b 	.word	0x0800ca9b
 800ca24:	0800cacf 	.word	0x0800cacf
 800ca28:	0800cacf 	.word	0x0800cacf
 800ca2c:	0800cacf 	.word	0x0800cacf
 800ca30:	0800cacf 	.word	0x0800cacf
 800ca34:	0800cacf 	.word	0x0800cacf
 800ca38:	0800cacf 	.word	0x0800cacf
 800ca3c:	0800cacf 	.word	0x0800cacf
 800ca40:	0800cacf 	.word	0x0800cacf
 800ca44:	0800cacf 	.word	0x0800cacf
 800ca48:	0800cacf 	.word	0x0800cacf
 800ca4c:	0800cacf 	.word	0x0800cacf
 800ca50:	0800cacf 	.word	0x0800cacf
 800ca54:	0800cacf 	.word	0x0800cacf
 800ca58:	0800cacf 	.word	0x0800cacf
 800ca5c:	0800cacf 	.word	0x0800cacf
 800ca60:	0800cac1 	.word	0x0800cac1
 800ca64:	2b40      	cmp	r3, #64	@ 0x40
 800ca66:	d02e      	beq.n	800cac6 <UART_SetConfig+0x8aa>
 800ca68:	e031      	b.n	800cace <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca6a:	f7fb fdb1 	bl	80085d0 <HAL_RCC_GetPCLK1Freq>
 800ca6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ca70:	e033      	b.n	800cada <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca72:	f7fb fdc3 	bl	80085fc <HAL_RCC_GetPCLK2Freq>
 800ca76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ca78:	e02f      	b.n	800cada <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f7fd fdb4 	bl	800a5ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ca84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca88:	e027      	b.n	800cada <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca8a:	f107 0318 	add.w	r3, r7, #24
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7fd ff00 	bl	800a894 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca94:	69fb      	ldr	r3, [r7, #28]
 800ca96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca98:	e01f      	b.n	800cada <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca9a:	4b2d      	ldr	r3, [pc, #180]	@ (800cb50 <UART_SetConfig+0x934>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f003 0320 	and.w	r3, r3, #32
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d009      	beq.n	800caba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800caa6:	4b2a      	ldr	r3, [pc, #168]	@ (800cb50 <UART_SetConfig+0x934>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	08db      	lsrs	r3, r3, #3
 800caac:	f003 0303 	and.w	r3, r3, #3
 800cab0:	4a24      	ldr	r2, [pc, #144]	@ (800cb44 <UART_SetConfig+0x928>)
 800cab2:	fa22 f303 	lsr.w	r3, r2, r3
 800cab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cab8:	e00f      	b.n	800cada <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800caba:	4b22      	ldr	r3, [pc, #136]	@ (800cb44 <UART_SetConfig+0x928>)
 800cabc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cabe:	e00c      	b.n	800cada <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cac0:	4b21      	ldr	r3, [pc, #132]	@ (800cb48 <UART_SetConfig+0x92c>)
 800cac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cac4:	e009      	b.n	800cada <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cac6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800caca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cacc:	e005      	b.n	800cada <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cace:	2300      	movs	r3, #0
 800cad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cad2:	2301      	movs	r3, #1
 800cad4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cad8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cadc:	2b00      	cmp	r3, #0
 800cade:	f000 80e7 	beq.w	800ccb0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cae6:	4a19      	ldr	r2, [pc, #100]	@ (800cb4c <UART_SetConfig+0x930>)
 800cae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800caec:	461a      	mov	r2, r3
 800caee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caf0:	fbb3 f3f2 	udiv	r3, r3, r2
 800caf4:	005a      	lsls	r2, r3, #1
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	085b      	lsrs	r3, r3, #1
 800cafc:	441a      	add	r2, r3
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb06:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb0a:	2b0f      	cmp	r3, #15
 800cb0c:	d916      	bls.n	800cb3c <UART_SetConfig+0x920>
 800cb0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb14:	d212      	bcs.n	800cb3c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cb16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb18:	b29b      	uxth	r3, r3
 800cb1a:	f023 030f 	bic.w	r3, r3, #15
 800cb1e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cb20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb22:	085b      	lsrs	r3, r3, #1
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	f003 0307 	and.w	r3, r3, #7
 800cb2a:	b29a      	uxth	r2, r3
 800cb2c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cb2e:	4313      	orrs	r3, r2
 800cb30:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800cb38:	60da      	str	r2, [r3, #12]
 800cb3a:	e0b9      	b.n	800ccb0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cb42:	e0b5      	b.n	800ccb0 <UART_SetConfig+0xa94>
 800cb44:	03d09000 	.word	0x03d09000
 800cb48:	003d0900 	.word	0x003d0900
 800cb4c:	08022cd4 	.word	0x08022cd4
 800cb50:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800cb54:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cb58:	2b20      	cmp	r3, #32
 800cb5a:	dc49      	bgt.n	800cbf0 <UART_SetConfig+0x9d4>
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	db7c      	blt.n	800cc5a <UART_SetConfig+0xa3e>
 800cb60:	2b20      	cmp	r3, #32
 800cb62:	d87a      	bhi.n	800cc5a <UART_SetConfig+0xa3e>
 800cb64:	a201      	add	r2, pc, #4	@ (adr r2, 800cb6c <UART_SetConfig+0x950>)
 800cb66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb6a:	bf00      	nop
 800cb6c:	0800cbf7 	.word	0x0800cbf7
 800cb70:	0800cbff 	.word	0x0800cbff
 800cb74:	0800cc5b 	.word	0x0800cc5b
 800cb78:	0800cc5b 	.word	0x0800cc5b
 800cb7c:	0800cc07 	.word	0x0800cc07
 800cb80:	0800cc5b 	.word	0x0800cc5b
 800cb84:	0800cc5b 	.word	0x0800cc5b
 800cb88:	0800cc5b 	.word	0x0800cc5b
 800cb8c:	0800cc17 	.word	0x0800cc17
 800cb90:	0800cc5b 	.word	0x0800cc5b
 800cb94:	0800cc5b 	.word	0x0800cc5b
 800cb98:	0800cc5b 	.word	0x0800cc5b
 800cb9c:	0800cc5b 	.word	0x0800cc5b
 800cba0:	0800cc5b 	.word	0x0800cc5b
 800cba4:	0800cc5b 	.word	0x0800cc5b
 800cba8:	0800cc5b 	.word	0x0800cc5b
 800cbac:	0800cc27 	.word	0x0800cc27
 800cbb0:	0800cc5b 	.word	0x0800cc5b
 800cbb4:	0800cc5b 	.word	0x0800cc5b
 800cbb8:	0800cc5b 	.word	0x0800cc5b
 800cbbc:	0800cc5b 	.word	0x0800cc5b
 800cbc0:	0800cc5b 	.word	0x0800cc5b
 800cbc4:	0800cc5b 	.word	0x0800cc5b
 800cbc8:	0800cc5b 	.word	0x0800cc5b
 800cbcc:	0800cc5b 	.word	0x0800cc5b
 800cbd0:	0800cc5b 	.word	0x0800cc5b
 800cbd4:	0800cc5b 	.word	0x0800cc5b
 800cbd8:	0800cc5b 	.word	0x0800cc5b
 800cbdc:	0800cc5b 	.word	0x0800cc5b
 800cbe0:	0800cc5b 	.word	0x0800cc5b
 800cbe4:	0800cc5b 	.word	0x0800cc5b
 800cbe8:	0800cc5b 	.word	0x0800cc5b
 800cbec:	0800cc4d 	.word	0x0800cc4d
 800cbf0:	2b40      	cmp	r3, #64	@ 0x40
 800cbf2:	d02e      	beq.n	800cc52 <UART_SetConfig+0xa36>
 800cbf4:	e031      	b.n	800cc5a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cbf6:	f7fb fceb 	bl	80085d0 <HAL_RCC_GetPCLK1Freq>
 800cbfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cbfc:	e033      	b.n	800cc66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cbfe:	f7fb fcfd 	bl	80085fc <HAL_RCC_GetPCLK2Freq>
 800cc02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cc04:	e02f      	b.n	800cc66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7fd fcee 	bl	800a5ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cc10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc14:	e027      	b.n	800cc66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc16:	f107 0318 	add.w	r3, r7, #24
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7fd fe3a 	bl	800a894 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cc20:	69fb      	ldr	r3, [r7, #28]
 800cc22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc24:	e01f      	b.n	800cc66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc26:	4b2d      	ldr	r3, [pc, #180]	@ (800ccdc <UART_SetConfig+0xac0>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f003 0320 	and.w	r3, r3, #32
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d009      	beq.n	800cc46 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cc32:	4b2a      	ldr	r3, [pc, #168]	@ (800ccdc <UART_SetConfig+0xac0>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	08db      	lsrs	r3, r3, #3
 800cc38:	f003 0303 	and.w	r3, r3, #3
 800cc3c:	4a28      	ldr	r2, [pc, #160]	@ (800cce0 <UART_SetConfig+0xac4>)
 800cc3e:	fa22 f303 	lsr.w	r3, r2, r3
 800cc42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cc44:	e00f      	b.n	800cc66 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800cc46:	4b26      	ldr	r3, [pc, #152]	@ (800cce0 <UART_SetConfig+0xac4>)
 800cc48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc4a:	e00c      	b.n	800cc66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cc4c:	4b25      	ldr	r3, [pc, #148]	@ (800cce4 <UART_SetConfig+0xac8>)
 800cc4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc50:	e009      	b.n	800cc66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc58:	e005      	b.n	800cc66 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cc5e:	2301      	movs	r3, #1
 800cc60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cc64:	bf00      	nop
    }

    if (pclk != 0U)
 800cc66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d021      	beq.n	800ccb0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc70:	4a1d      	ldr	r2, [pc, #116]	@ (800cce8 <UART_SetConfig+0xacc>)
 800cc72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc76:	461a      	mov	r2, r3
 800cc78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc7a:	fbb3 f2f2 	udiv	r2, r3, r2
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	085b      	lsrs	r3, r3, #1
 800cc84:	441a      	add	r2, r3
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	685b      	ldr	r3, [r3, #4]
 800cc8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc92:	2b0f      	cmp	r3, #15
 800cc94:	d909      	bls.n	800ccaa <UART_SetConfig+0xa8e>
 800cc96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc9c:	d205      	bcs.n	800ccaa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cc9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cca0:	b29a      	uxth	r2, r3
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	60da      	str	r2, [r3, #12]
 800cca8:	e002      	b.n	800ccb0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ccaa:	2301      	movs	r3, #1
 800ccac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	2201      	movs	r2, #1
 800ccb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	2201      	movs	r2, #1
 800ccbc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cccc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3748      	adds	r7, #72	@ 0x48
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ccda:	bf00      	nop
 800ccdc:	58024400 	.word	0x58024400
 800cce0:	03d09000 	.word	0x03d09000
 800cce4:	003d0900 	.word	0x003d0900
 800cce8:	08022cd4 	.word	0x08022cd4

0800ccec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b083      	sub	sp, #12
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccf8:	f003 0308 	and.w	r3, r3, #8
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d00a      	beq.n	800cd16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	430a      	orrs	r2, r1
 800cd14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd1a:	f003 0301 	and.w	r3, r3, #1
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d00a      	beq.n	800cd38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	430a      	orrs	r2, r1
 800cd36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd3c:	f003 0302 	and.w	r3, r3, #2
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d00a      	beq.n	800cd5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	430a      	orrs	r2, r1
 800cd58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd5e:	f003 0304 	and.w	r3, r3, #4
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d00a      	beq.n	800cd7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	430a      	orrs	r2, r1
 800cd7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd80:	f003 0310 	and.w	r3, r3, #16
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d00a      	beq.n	800cd9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	689b      	ldr	r3, [r3, #8]
 800cd8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	430a      	orrs	r2, r1
 800cd9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cda2:	f003 0320 	and.w	r3, r3, #32
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d00a      	beq.n	800cdc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	689b      	ldr	r3, [r3, #8]
 800cdb0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	430a      	orrs	r2, r1
 800cdbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d01a      	beq.n	800ce02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	430a      	orrs	r2, r1
 800cde0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cde6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cdea:	d10a      	bne.n	800ce02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	685b      	ldr	r3, [r3, #4]
 800cdf2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	430a      	orrs	r2, r1
 800ce00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d00a      	beq.n	800ce24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	685b      	ldr	r3, [r3, #4]
 800ce14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	430a      	orrs	r2, r1
 800ce22:	605a      	str	r2, [r3, #4]
  }
}
 800ce24:	bf00      	nop
 800ce26:	370c      	adds	r7, #12
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr

0800ce30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b098      	sub	sp, #96	@ 0x60
 800ce34:	af02      	add	r7, sp, #8
 800ce36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ce40:	f7f5 ff94 	bl	8002d6c <HAL_GetTick>
 800ce44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f003 0308 	and.w	r3, r3, #8
 800ce50:	2b08      	cmp	r3, #8
 800ce52:	d12f      	bne.n	800ceb4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ce58:	9300      	str	r3, [sp, #0]
 800ce5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f000 f88e 	bl	800cf84 <UART_WaitOnFlagUntilTimeout>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d022      	beq.n	800ceb4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce76:	e853 3f00 	ldrex	r3, [r3]
 800ce7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ce7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ce82:	653b      	str	r3, [r7, #80]	@ 0x50
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	461a      	mov	r2, r3
 800ce8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce8c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce8e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ce92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce94:	e841 2300 	strex	r3, r2, [r1]
 800ce98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ce9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d1e6      	bne.n	800ce6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2220      	movs	r2, #32
 800cea4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ceb0:	2303      	movs	r3, #3
 800ceb2:	e063      	b.n	800cf7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f003 0304 	and.w	r3, r3, #4
 800cebe:	2b04      	cmp	r3, #4
 800cec0:	d149      	bne.n	800cf56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cec2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cec6:	9300      	str	r3, [sp, #0]
 800cec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ceca:	2200      	movs	r2, #0
 800cecc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f000 f857 	bl	800cf84 <UART_WaitOnFlagUntilTimeout>
 800ced6:	4603      	mov	r3, r0
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d03c      	beq.n	800cf56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cee4:	e853 3f00 	ldrex	r3, [r3]
 800cee8:	623b      	str	r3, [r7, #32]
   return(result);
 800ceea:	6a3b      	ldr	r3, [r7, #32]
 800ceec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cef0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	461a      	mov	r2, r3
 800cef8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cefa:	633b      	str	r3, [r7, #48]	@ 0x30
 800cefc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cefe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cf00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf02:	e841 2300 	strex	r3, r2, [r1]
 800cf06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cf08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d1e6      	bne.n	800cedc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	3308      	adds	r3, #8
 800cf14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	e853 3f00 	ldrex	r3, [r3]
 800cf1c:	60fb      	str	r3, [r7, #12]
   return(result);
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	f023 0301 	bic.w	r3, r3, #1
 800cf24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	3308      	adds	r3, #8
 800cf2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cf2e:	61fa      	str	r2, [r7, #28]
 800cf30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf32:	69b9      	ldr	r1, [r7, #24]
 800cf34:	69fa      	ldr	r2, [r7, #28]
 800cf36:	e841 2300 	strex	r3, r2, [r1]
 800cf3a:	617b      	str	r3, [r7, #20]
   return(result);
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d1e5      	bne.n	800cf0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2220      	movs	r2, #32
 800cf46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf52:	2303      	movs	r3, #3
 800cf54:	e012      	b.n	800cf7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2220      	movs	r2, #32
 800cf5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2220      	movs	r2, #32
 800cf62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2200      	movs	r2, #0
 800cf6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2200      	movs	r2, #0
 800cf70:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2200      	movs	r2, #0
 800cf76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cf7a:	2300      	movs	r3, #0
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3758      	adds	r7, #88	@ 0x58
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b084      	sub	sp, #16
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	60f8      	str	r0, [r7, #12]
 800cf8c:	60b9      	str	r1, [r7, #8]
 800cf8e:	603b      	str	r3, [r7, #0]
 800cf90:	4613      	mov	r3, r2
 800cf92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf94:	e04f      	b.n	800d036 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf96:	69bb      	ldr	r3, [r7, #24]
 800cf98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cf9c:	d04b      	beq.n	800d036 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf9e:	f7f5 fee5 	bl	8002d6c <HAL_GetTick>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	1ad3      	subs	r3, r2, r3
 800cfa8:	69ba      	ldr	r2, [r7, #24]
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d302      	bcc.n	800cfb4 <UART_WaitOnFlagUntilTimeout+0x30>
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d101      	bne.n	800cfb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cfb4:	2303      	movs	r3, #3
 800cfb6:	e04e      	b.n	800d056 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f003 0304 	and.w	r3, r3, #4
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d037      	beq.n	800d036 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	2b80      	cmp	r3, #128	@ 0x80
 800cfca:	d034      	beq.n	800d036 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	2b40      	cmp	r3, #64	@ 0x40
 800cfd0:	d031      	beq.n	800d036 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	69db      	ldr	r3, [r3, #28]
 800cfd8:	f003 0308 	and.w	r3, r3, #8
 800cfdc:	2b08      	cmp	r3, #8
 800cfde:	d110      	bne.n	800d002 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	2208      	movs	r2, #8
 800cfe6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cfe8:	68f8      	ldr	r0, [r7, #12]
 800cfea:	f000 fa43 	bl	800d474 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	2208      	movs	r2, #8
 800cff2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2200      	movs	r2, #0
 800cffa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cffe:	2301      	movs	r3, #1
 800d000:	e029      	b.n	800d056 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	69db      	ldr	r3, [r3, #28]
 800d008:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d00c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d010:	d111      	bne.n	800d036 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d01a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d01c:	68f8      	ldr	r0, [r7, #12]
 800d01e:	f000 fa29 	bl	800d474 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	2220      	movs	r2, #32
 800d026:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2200      	movs	r2, #0
 800d02e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d032:	2303      	movs	r3, #3
 800d034:	e00f      	b.n	800d056 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	69da      	ldr	r2, [r3, #28]
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	4013      	ands	r3, r2
 800d040:	68ba      	ldr	r2, [r7, #8]
 800d042:	429a      	cmp	r2, r3
 800d044:	bf0c      	ite	eq
 800d046:	2301      	moveq	r3, #1
 800d048:	2300      	movne	r3, #0
 800d04a:	b2db      	uxtb	r3, r3
 800d04c:	461a      	mov	r2, r3
 800d04e:	79fb      	ldrb	r3, [r7, #7]
 800d050:	429a      	cmp	r2, r3
 800d052:	d0a0      	beq.n	800cf96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d054:	2300      	movs	r3, #0
}
 800d056:	4618      	mov	r0, r3
 800d058:	3710      	adds	r7, #16
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}
	...

0800d060 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d060:	b480      	push	{r7}
 800d062:	b0a3      	sub	sp, #140	@ 0x8c
 800d064:	af00      	add	r7, sp, #0
 800d066:	60f8      	str	r0, [r7, #12]
 800d068:	60b9      	str	r1, [r7, #8]
 800d06a:	4613      	mov	r3, r2
 800d06c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	68ba      	ldr	r2, [r7, #8]
 800d072:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	88fa      	ldrh	r2, [r7, #6]
 800d078:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	88fa      	ldrh	r2, [r7, #6]
 800d080:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2200      	movs	r2, #0
 800d088:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	689b      	ldr	r3, [r3, #8]
 800d08e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d092:	d10e      	bne.n	800d0b2 <UART_Start_Receive_IT+0x52>
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	691b      	ldr	r3, [r3, #16]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d105      	bne.n	800d0a8 <UART_Start_Receive_IT+0x48>
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800d0a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d0a6:	e02d      	b.n	800d104 <UART_Start_Receive_IT+0xa4>
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	22ff      	movs	r2, #255	@ 0xff
 800d0ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d0b0:	e028      	b.n	800d104 <UART_Start_Receive_IT+0xa4>
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	689b      	ldr	r3, [r3, #8]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d10d      	bne.n	800d0d6 <UART_Start_Receive_IT+0x76>
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	691b      	ldr	r3, [r3, #16]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d104      	bne.n	800d0cc <UART_Start_Receive_IT+0x6c>
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	22ff      	movs	r2, #255	@ 0xff
 800d0c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d0ca:	e01b      	b.n	800d104 <UART_Start_Receive_IT+0xa4>
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	227f      	movs	r2, #127	@ 0x7f
 800d0d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d0d4:	e016      	b.n	800d104 <UART_Start_Receive_IT+0xa4>
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	689b      	ldr	r3, [r3, #8]
 800d0da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d0de:	d10d      	bne.n	800d0fc <UART_Start_Receive_IT+0x9c>
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	691b      	ldr	r3, [r3, #16]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d104      	bne.n	800d0f2 <UART_Start_Receive_IT+0x92>
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	227f      	movs	r2, #127	@ 0x7f
 800d0ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d0f0:	e008      	b.n	800d104 <UART_Start_Receive_IT+0xa4>
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	223f      	movs	r2, #63	@ 0x3f
 800d0f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d0fa:	e003      	b.n	800d104 <UART_Start_Receive_IT+0xa4>
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2200      	movs	r2, #0
 800d100:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2200      	movs	r2, #0
 800d108:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	2222      	movs	r2, #34	@ 0x22
 800d110:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	3308      	adds	r3, #8
 800d11a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d11c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d11e:	e853 3f00 	ldrex	r3, [r3]
 800d122:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800d124:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d126:	f043 0301 	orr.w	r3, r3, #1
 800d12a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	3308      	adds	r3, #8
 800d134:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d138:	673a      	str	r2, [r7, #112]	@ 0x70
 800d13a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d13c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d13e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d140:	e841 2300 	strex	r3, r2, [r1]
 800d144:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800d146:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d1e3      	bne.n	800d114 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d150:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d154:	d14f      	bne.n	800d1f6 <UART_Start_Receive_IT+0x196>
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d15c:	88fa      	ldrh	r2, [r7, #6]
 800d15e:	429a      	cmp	r2, r3
 800d160:	d349      	bcc.n	800d1f6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	689b      	ldr	r3, [r3, #8]
 800d166:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d16a:	d107      	bne.n	800d17c <UART_Start_Receive_IT+0x11c>
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	691b      	ldr	r3, [r3, #16]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d103      	bne.n	800d17c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	4a47      	ldr	r2, [pc, #284]	@ (800d294 <UART_Start_Receive_IT+0x234>)
 800d178:	675a      	str	r2, [r3, #116]	@ 0x74
 800d17a:	e002      	b.n	800d182 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	4a46      	ldr	r2, [pc, #280]	@ (800d298 <UART_Start_Receive_IT+0x238>)
 800d180:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	691b      	ldr	r3, [r3, #16]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d01a      	beq.n	800d1c0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d190:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d192:	e853 3f00 	ldrex	r3, [r3]
 800d196:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d198:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d19a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d19e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	461a      	mov	r2, r3
 800d1a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d1ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d1ae:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1b0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d1b2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d1b4:	e841 2300 	strex	r3, r2, [r1]
 800d1b8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800d1ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d1e4      	bne.n	800d18a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	3308      	adds	r3, #8
 800d1c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1ca:	e853 3f00 	ldrex	r3, [r3]
 800d1ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d1d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	3308      	adds	r3, #8
 800d1de:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d1e0:	64ba      	str	r2, [r7, #72]	@ 0x48
 800d1e2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1e4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d1e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d1e8:	e841 2300 	strex	r3, r2, [r1]
 800d1ec:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d1ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d1e5      	bne.n	800d1c0 <UART_Start_Receive_IT+0x160>
 800d1f4:	e046      	b.n	800d284 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	689b      	ldr	r3, [r3, #8]
 800d1fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d1fe:	d107      	bne.n	800d210 <UART_Start_Receive_IT+0x1b0>
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	691b      	ldr	r3, [r3, #16]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d103      	bne.n	800d210 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	4a24      	ldr	r2, [pc, #144]	@ (800d29c <UART_Start_Receive_IT+0x23c>)
 800d20c:	675a      	str	r2, [r3, #116]	@ 0x74
 800d20e:	e002      	b.n	800d216 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	4a23      	ldr	r2, [pc, #140]	@ (800d2a0 <UART_Start_Receive_IT+0x240>)
 800d214:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	691b      	ldr	r3, [r3, #16]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d019      	beq.n	800d252 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d226:	e853 3f00 	ldrex	r3, [r3]
 800d22a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d22e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800d232:	677b      	str	r3, [r7, #116]	@ 0x74
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	461a      	mov	r2, r3
 800d23a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d23c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d23e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d240:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d242:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d244:	e841 2300 	strex	r3, r2, [r1]
 800d248:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d24a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d1e6      	bne.n	800d21e <UART_Start_Receive_IT+0x1be>
 800d250:	e018      	b.n	800d284 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	e853 3f00 	ldrex	r3, [r3]
 800d25e:	613b      	str	r3, [r7, #16]
   return(result);
 800d260:	693b      	ldr	r3, [r7, #16]
 800d262:	f043 0320 	orr.w	r3, r3, #32
 800d266:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	461a      	mov	r2, r3
 800d26e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d270:	623b      	str	r3, [r7, #32]
 800d272:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d274:	69f9      	ldr	r1, [r7, #28]
 800d276:	6a3a      	ldr	r2, [r7, #32]
 800d278:	e841 2300 	strex	r3, r2, [r1]
 800d27c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d27e:	69bb      	ldr	r3, [r7, #24]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d1e6      	bne.n	800d252 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800d284:	2300      	movs	r3, #0
}
 800d286:	4618      	mov	r0, r3
 800d288:	378c      	adds	r7, #140	@ 0x8c
 800d28a:	46bd      	mov	sp, r7
 800d28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d290:	4770      	bx	lr
 800d292:	bf00      	nop
 800d294:	0800df2d 	.word	0x0800df2d
 800d298:	0800dbcd 	.word	0x0800dbcd
 800d29c:	0800da15 	.word	0x0800da15
 800d2a0:	0800d85d 	.word	0x0800d85d

0800d2a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b096      	sub	sp, #88	@ 0x58
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	60f8      	str	r0, [r7, #12]
 800d2ac:	60b9      	str	r1, [r7, #8]
 800d2ae:	4613      	mov	r3, r2
 800d2b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	68ba      	ldr	r2, [r7, #8]
 800d2b6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	88fa      	ldrh	r2, [r7, #6]
 800d2bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	2222      	movs	r2, #34	@ 0x22
 800d2cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d02d      	beq.n	800d336 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2e0:	4a40      	ldr	r2, [pc, #256]	@ (800d3e4 <UART_Start_Receive_DMA+0x140>)
 800d2e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2ea:	4a3f      	ldr	r2, [pc, #252]	@ (800d3e8 <UART_Start_Receive_DMA+0x144>)
 800d2ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2f4:	4a3d      	ldr	r2, [pc, #244]	@ (800d3ec <UART_Start_Receive_DMA+0x148>)
 800d2f6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2fe:	2200      	movs	r2, #0
 800d300:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	3324      	adds	r3, #36	@ 0x24
 800d30e:	4619      	mov	r1, r3
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d314:	461a      	mov	r2, r3
 800d316:	88fb      	ldrh	r3, [r7, #6]
 800d318:	f7f7 fc96 	bl	8004c48 <HAL_DMA_Start_IT>
 800d31c:	4603      	mov	r3, r0
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d009      	beq.n	800d336 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	2210      	movs	r2, #16
 800d326:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2220      	movs	r2, #32
 800d32e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800d332:	2301      	movs	r3, #1
 800d334:	e051      	b.n	800d3da <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	691b      	ldr	r3, [r3, #16]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d018      	beq.n	800d370 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d346:	e853 3f00 	ldrex	r3, [r3]
 800d34a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d34c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d34e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d352:	657b      	str	r3, [r7, #84]	@ 0x54
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	461a      	mov	r2, r3
 800d35a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d35c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d35e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d360:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d362:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d364:	e841 2300 	strex	r3, r2, [r1]
 800d368:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d36a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d1e6      	bne.n	800d33e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	3308      	adds	r3, #8
 800d376:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d37a:	e853 3f00 	ldrex	r3, [r3]
 800d37e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d382:	f043 0301 	orr.w	r3, r3, #1
 800d386:	653b      	str	r3, [r7, #80]	@ 0x50
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	3308      	adds	r3, #8
 800d38e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d390:	637a      	str	r2, [r7, #52]	@ 0x34
 800d392:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d394:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d396:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d398:	e841 2300 	strex	r3, r2, [r1]
 800d39c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d39e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d1e5      	bne.n	800d370 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	3308      	adds	r3, #8
 800d3aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ac:	697b      	ldr	r3, [r7, #20]
 800d3ae:	e853 3f00 	ldrex	r3, [r3]
 800d3b2:	613b      	str	r3, [r7, #16]
   return(result);
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	3308      	adds	r3, #8
 800d3c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d3c4:	623a      	str	r2, [r7, #32]
 800d3c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3c8:	69f9      	ldr	r1, [r7, #28]
 800d3ca:	6a3a      	ldr	r2, [r7, #32]
 800d3cc:	e841 2300 	strex	r3, r2, [r1]
 800d3d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800d3d2:	69bb      	ldr	r3, [r7, #24]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d1e5      	bne.n	800d3a4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800d3d8:	2300      	movs	r3, #0
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3758      	adds	r7, #88	@ 0x58
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	0800d5f3 	.word	0x0800d5f3
 800d3e8:	0800d71b 	.word	0x0800d71b
 800d3ec:	0800d759 	.word	0x0800d759

0800d3f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b08f      	sub	sp, #60	@ 0x3c
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3fe:	6a3b      	ldr	r3, [r7, #32]
 800d400:	e853 3f00 	ldrex	r3, [r3]
 800d404:	61fb      	str	r3, [r7, #28]
   return(result);
 800d406:	69fb      	ldr	r3, [r7, #28]
 800d408:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d40c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	461a      	mov	r2, r3
 800d414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d416:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d418:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d41a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d41c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d41e:	e841 2300 	strex	r3, r2, [r1]
 800d422:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d426:	2b00      	cmp	r3, #0
 800d428:	d1e6      	bne.n	800d3f8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	3308      	adds	r3, #8
 800d430:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	e853 3f00 	ldrex	r3, [r3]
 800d438:	60bb      	str	r3, [r7, #8]
   return(result);
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d440:	633b      	str	r3, [r7, #48]	@ 0x30
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	3308      	adds	r3, #8
 800d448:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d44a:	61ba      	str	r2, [r7, #24]
 800d44c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d44e:	6979      	ldr	r1, [r7, #20]
 800d450:	69ba      	ldr	r2, [r7, #24]
 800d452:	e841 2300 	strex	r3, r2, [r1]
 800d456:	613b      	str	r3, [r7, #16]
   return(result);
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d1e5      	bne.n	800d42a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2220      	movs	r2, #32
 800d462:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800d466:	bf00      	nop
 800d468:	373c      	adds	r7, #60	@ 0x3c
 800d46a:	46bd      	mov	sp, r7
 800d46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d470:	4770      	bx	lr
	...

0800d474 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d474:	b480      	push	{r7}
 800d476:	b095      	sub	sp, #84	@ 0x54
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d484:	e853 3f00 	ldrex	r3, [r3]
 800d488:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d48c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d490:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	461a      	mov	r2, r3
 800d498:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d49a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d49c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d49e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d4a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d4a2:	e841 2300 	strex	r3, r2, [r1]
 800d4a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d4a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d1e6      	bne.n	800d47c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	3308      	adds	r3, #8
 800d4b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4b6:	6a3b      	ldr	r3, [r7, #32]
 800d4b8:	e853 3f00 	ldrex	r3, [r3]
 800d4bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800d4be:	69fa      	ldr	r2, [r7, #28]
 800d4c0:	4b1e      	ldr	r3, [pc, #120]	@ (800d53c <UART_EndRxTransfer+0xc8>)
 800d4c2:	4013      	ands	r3, r2
 800d4c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	3308      	adds	r3, #8
 800d4cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d4ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d4d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d4d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d4d6:	e841 2300 	strex	r3, r2, [r1]
 800d4da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d1e5      	bne.n	800d4ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4e6:	2b01      	cmp	r3, #1
 800d4e8:	d118      	bne.n	800d51c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	e853 3f00 	ldrex	r3, [r3]
 800d4f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	f023 0310 	bic.w	r3, r3, #16
 800d4fe:	647b      	str	r3, [r7, #68]	@ 0x44
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	461a      	mov	r2, r3
 800d506:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d508:	61bb      	str	r3, [r7, #24]
 800d50a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d50c:	6979      	ldr	r1, [r7, #20]
 800d50e:	69ba      	ldr	r2, [r7, #24]
 800d510:	e841 2300 	strex	r3, r2, [r1]
 800d514:	613b      	str	r3, [r7, #16]
   return(result);
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d1e6      	bne.n	800d4ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2220      	movs	r2, #32
 800d520:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2200      	movs	r2, #0
 800d528:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2200      	movs	r2, #0
 800d52e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d530:	bf00      	nop
 800d532:	3754      	adds	r7, #84	@ 0x54
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr
 800d53c:	effffffe 	.word	0xeffffffe

0800d540 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b090      	sub	sp, #64	@ 0x40
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d54c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	69db      	ldr	r3, [r3, #28]
 800d552:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d556:	d037      	beq.n	800d5c8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d55a:	2200      	movs	r2, #0
 800d55c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d560:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	3308      	adds	r3, #8
 800d566:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d56a:	e853 3f00 	ldrex	r3, [r3]
 800d56e:	623b      	str	r3, [r7, #32]
   return(result);
 800d570:	6a3b      	ldr	r3, [r7, #32]
 800d572:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d576:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	3308      	adds	r3, #8
 800d57e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d580:	633a      	str	r2, [r7, #48]	@ 0x30
 800d582:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d584:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d588:	e841 2300 	strex	r3, r2, [r1]
 800d58c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d590:	2b00      	cmp	r3, #0
 800d592:	d1e5      	bne.n	800d560 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	e853 3f00 	ldrex	r3, [r3]
 800d5a0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5b2:	61fb      	str	r3, [r7, #28]
 800d5b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5b6:	69b9      	ldr	r1, [r7, #24]
 800d5b8:	69fa      	ldr	r2, [r7, #28]
 800d5ba:	e841 2300 	strex	r3, r2, [r1]
 800d5be:	617b      	str	r3, [r7, #20]
   return(result);
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d1e6      	bne.n	800d594 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d5c6:	e002      	b.n	800d5ce <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d5c8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d5ca:	f7fe fdf3 	bl	800c1b4 <HAL_UART_TxCpltCallback>
}
 800d5ce:	bf00      	nop
 800d5d0:	3740      	adds	r7, #64	@ 0x40
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}

0800d5d6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d5d6:	b580      	push	{r7, lr}
 800d5d8:	b084      	sub	sp, #16
 800d5da:	af00      	add	r7, sp, #0
 800d5dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5e2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d5e4:	68f8      	ldr	r0, [r7, #12]
 800d5e6:	f7fe fdef 	bl	800c1c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d5ea:	bf00      	nop
 800d5ec:	3710      	adds	r7, #16
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}

0800d5f2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d5f2:	b580      	push	{r7, lr}
 800d5f4:	b09c      	sub	sp, #112	@ 0x70
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5fe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	69db      	ldr	r3, [r3, #28]
 800d604:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d608:	d071      	beq.n	800d6ee <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d60a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d60c:	2200      	movs	r2, #0
 800d60e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d612:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d618:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d61a:	e853 3f00 	ldrex	r3, [r3]
 800d61e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d620:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d622:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d626:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d628:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	461a      	mov	r2, r3
 800d62e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d630:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d632:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d634:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d636:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d638:	e841 2300 	strex	r3, r2, [r1]
 800d63c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d63e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d640:	2b00      	cmp	r3, #0
 800d642:	d1e6      	bne.n	800d612 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d644:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	3308      	adds	r3, #8
 800d64a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d64e:	e853 3f00 	ldrex	r3, [r3]
 800d652:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d656:	f023 0301 	bic.w	r3, r3, #1
 800d65a:	667b      	str	r3, [r7, #100]	@ 0x64
 800d65c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	3308      	adds	r3, #8
 800d662:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d664:	647a      	str	r2, [r7, #68]	@ 0x44
 800d666:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d668:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d66a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d66c:	e841 2300 	strex	r3, r2, [r1]
 800d670:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d674:	2b00      	cmp	r3, #0
 800d676:	d1e5      	bne.n	800d644 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d678:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	3308      	adds	r3, #8
 800d67e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d682:	e853 3f00 	ldrex	r3, [r3]
 800d686:	623b      	str	r3, [r7, #32]
   return(result);
 800d688:	6a3b      	ldr	r3, [r7, #32]
 800d68a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d68e:	663b      	str	r3, [r7, #96]	@ 0x60
 800d690:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	3308      	adds	r3, #8
 800d696:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d698:	633a      	str	r2, [r7, #48]	@ 0x30
 800d69a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d69c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d69e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6a0:	e841 2300 	strex	r3, r2, [r1]
 800d6a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d6a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d1e5      	bne.n	800d678 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d6ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d6ae:	2220      	movs	r2, #32
 800d6b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d6b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d6b8:	2b01      	cmp	r3, #1
 800d6ba:	d118      	bne.n	800d6ee <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	e853 3f00 	ldrex	r3, [r3]
 800d6c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	f023 0310 	bic.w	r3, r3, #16
 800d6d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d6d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d6da:	61fb      	str	r3, [r7, #28]
 800d6dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6de:	69b9      	ldr	r1, [r7, #24]
 800d6e0:	69fa      	ldr	r2, [r7, #28]
 800d6e2:	e841 2300 	strex	r3, r2, [r1]
 800d6e6:	617b      	str	r3, [r7, #20]
   return(result);
 800d6e8:	697b      	ldr	r3, [r7, #20]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d1e6      	bne.n	800d6bc <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d6ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d6f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d6f8:	2b01      	cmp	r3, #1
 800d6fa:	d107      	bne.n	800d70c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d6fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d6fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d702:	4619      	mov	r1, r3
 800d704:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d706:	f7fe fd7d 	bl	800c204 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d70a:	e002      	b.n	800d712 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800d70c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d70e:	f7f4 f82f 	bl	8001770 <HAL_UART_RxCpltCallback>
}
 800d712:	bf00      	nop
 800d714:	3770      	adds	r7, #112	@ 0x70
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}

0800d71a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d71a:	b580      	push	{r7, lr}
 800d71c:	b084      	sub	sp, #16
 800d71e:	af00      	add	r7, sp, #0
 800d720:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d726:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	2201      	movs	r2, #1
 800d72c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d732:	2b01      	cmp	r3, #1
 800d734:	d109      	bne.n	800d74a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d73c:	085b      	lsrs	r3, r3, #1
 800d73e:	b29b      	uxth	r3, r3
 800d740:	4619      	mov	r1, r3
 800d742:	68f8      	ldr	r0, [r7, #12]
 800d744:	f7fe fd5e 	bl	800c204 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d748:	e002      	b.n	800d750 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800d74a:	68f8      	ldr	r0, [r7, #12]
 800d74c:	f7fe fd46 	bl	800c1dc <HAL_UART_RxHalfCpltCallback>
}
 800d750:	bf00      	nop
 800d752:	3710      	adds	r7, #16
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b086      	sub	sp, #24
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d764:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d76c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d774:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	689b      	ldr	r3, [r3, #8]
 800d77c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d780:	2b80      	cmp	r3, #128	@ 0x80
 800d782:	d109      	bne.n	800d798 <UART_DMAError+0x40>
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	2b21      	cmp	r3, #33	@ 0x21
 800d788:	d106      	bne.n	800d798 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	2200      	movs	r2, #0
 800d78e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800d792:	6978      	ldr	r0, [r7, #20]
 800d794:	f7ff fe2c 	bl	800d3f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	689b      	ldr	r3, [r3, #8]
 800d79e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7a2:	2b40      	cmp	r3, #64	@ 0x40
 800d7a4:	d109      	bne.n	800d7ba <UART_DMAError+0x62>
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	2b22      	cmp	r3, #34	@ 0x22
 800d7aa:	d106      	bne.n	800d7ba <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d7ac:	697b      	ldr	r3, [r7, #20]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800d7b4:	6978      	ldr	r0, [r7, #20]
 800d7b6:	f7ff fe5d 	bl	800d474 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d7c0:	f043 0210 	orr.w	r2, r3, #16
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d7ca:	6978      	ldr	r0, [r7, #20]
 800d7cc:	f7fe fd10 	bl	800c1f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d7d0:	bf00      	nop
 800d7d2:	3718      	adds	r7, #24
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}

0800d7d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b084      	sub	sp, #16
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d7f6:	68f8      	ldr	r0, [r7, #12]
 800d7f8:	f7fe fcfa 	bl	800c1f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d7fc:	bf00      	nop
 800d7fe:	3710      	adds	r7, #16
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}

0800d804 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b088      	sub	sp, #32
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	e853 3f00 	ldrex	r3, [r3]
 800d818:	60bb      	str	r3, [r7, #8]
   return(result);
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d820:	61fb      	str	r3, [r7, #28]
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	461a      	mov	r2, r3
 800d828:	69fb      	ldr	r3, [r7, #28]
 800d82a:	61bb      	str	r3, [r7, #24]
 800d82c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d82e:	6979      	ldr	r1, [r7, #20]
 800d830:	69ba      	ldr	r2, [r7, #24]
 800d832:	e841 2300 	strex	r3, r2, [r1]
 800d836:	613b      	str	r3, [r7, #16]
   return(result);
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d1e6      	bne.n	800d80c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2220      	movs	r2, #32
 800d842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2200      	movs	r2, #0
 800d84a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f7fe fcb1 	bl	800c1b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d852:	bf00      	nop
 800d854:	3720      	adds	r7, #32
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}
	...

0800d85c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b09c      	sub	sp, #112	@ 0x70
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d86a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d874:	2b22      	cmp	r3, #34	@ 0x22
 800d876:	f040 80be 	bne.w	800d9f6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d880:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d884:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d888:	b2d9      	uxtb	r1, r3
 800d88a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d88e:	b2da      	uxtb	r2, r3
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d894:	400a      	ands	r2, r1
 800d896:	b2d2      	uxtb	r2, r2
 800d898:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d89e:	1c5a      	adds	r2, r3, #1
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d8aa:	b29b      	uxth	r3, r3
 800d8ac:	3b01      	subs	r3, #1
 800d8ae:	b29a      	uxth	r2, r3
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d8bc:	b29b      	uxth	r3, r3
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	f040 80a1 	bne.w	800da06 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8cc:	e853 3f00 	ldrex	r3, [r3]
 800d8d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d8d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d8d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	461a      	mov	r2, r3
 800d8e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d8e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d8e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d8e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d8ea:	e841 2300 	strex	r3, r2, [r1]
 800d8ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d8f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d1e6      	bne.n	800d8c4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	3308      	adds	r3, #8
 800d8fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d900:	e853 3f00 	ldrex	r3, [r3]
 800d904:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d908:	f023 0301 	bic.w	r3, r3, #1
 800d90c:	667b      	str	r3, [r7, #100]	@ 0x64
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	3308      	adds	r3, #8
 800d914:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d916:	647a      	str	r2, [r7, #68]	@ 0x44
 800d918:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d91a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d91c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d91e:	e841 2300 	strex	r3, r2, [r1]
 800d922:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d926:	2b00      	cmp	r3, #0
 800d928:	d1e5      	bne.n	800d8f6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2220      	movs	r2, #32
 800d92e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2200      	movs	r2, #0
 800d936:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2200      	movs	r2, #0
 800d93c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	4a33      	ldr	r2, [pc, #204]	@ (800da10 <UART_RxISR_8BIT+0x1b4>)
 800d944:	4293      	cmp	r3, r2
 800d946:	d01f      	beq.n	800d988 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	685b      	ldr	r3, [r3, #4]
 800d94e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d952:	2b00      	cmp	r3, #0
 800d954:	d018      	beq.n	800d988 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d95e:	e853 3f00 	ldrex	r3, [r3]
 800d962:	623b      	str	r3, [r7, #32]
   return(result);
 800d964:	6a3b      	ldr	r3, [r7, #32]
 800d966:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d96a:	663b      	str	r3, [r7, #96]	@ 0x60
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	461a      	mov	r2, r3
 800d972:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d974:	633b      	str	r3, [r7, #48]	@ 0x30
 800d976:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d978:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d97a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d97c:	e841 2300 	strex	r3, r2, [r1]
 800d980:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d984:	2b00      	cmp	r3, #0
 800d986:	d1e6      	bne.n	800d956 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d98c:	2b01      	cmp	r3, #1
 800d98e:	d12e      	bne.n	800d9ee <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2200      	movs	r2, #0
 800d994:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	e853 3f00 	ldrex	r3, [r3]
 800d9a2:	60fb      	str	r3, [r7, #12]
   return(result);
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f023 0310 	bic.w	r3, r3, #16
 800d9aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	461a      	mov	r2, r3
 800d9b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d9b4:	61fb      	str	r3, [r7, #28]
 800d9b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9b8:	69b9      	ldr	r1, [r7, #24]
 800d9ba:	69fa      	ldr	r2, [r7, #28]
 800d9bc:	e841 2300 	strex	r3, r2, [r1]
 800d9c0:	617b      	str	r3, [r7, #20]
   return(result);
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d1e6      	bne.n	800d996 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	69db      	ldr	r3, [r3, #28]
 800d9ce:	f003 0310 	and.w	r3, r3, #16
 800d9d2:	2b10      	cmp	r3, #16
 800d9d4:	d103      	bne.n	800d9de <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	2210      	movs	r2, #16
 800d9dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f7fe fc0c 	bl	800c204 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d9ec:	e00b      	b.n	800da06 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f7f3 febe 	bl	8001770 <HAL_UART_RxCpltCallback>
}
 800d9f4:	e007      	b.n	800da06 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	699a      	ldr	r2, [r3, #24]
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	f042 0208 	orr.w	r2, r2, #8
 800da04:	619a      	str	r2, [r3, #24]
}
 800da06:	bf00      	nop
 800da08:	3770      	adds	r7, #112	@ 0x70
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}
 800da0e:	bf00      	nop
 800da10:	58000c00 	.word	0x58000c00

0800da14 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b09c      	sub	sp, #112	@ 0x70
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800da22:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800da2c:	2b22      	cmp	r3, #34	@ 0x22
 800da2e:	f040 80be 	bne.w	800dbae <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da38:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da40:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800da42:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800da46:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800da4a:	4013      	ands	r3, r2
 800da4c:	b29a      	uxth	r2, r3
 800da4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800da50:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da56:	1c9a      	adds	r2, r3, #2
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800da62:	b29b      	uxth	r3, r3
 800da64:	3b01      	subs	r3, #1
 800da66:	b29a      	uxth	r2, r3
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800da74:	b29b      	uxth	r3, r3
 800da76:	2b00      	cmp	r3, #0
 800da78:	f040 80a1 	bne.w	800dbbe <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da84:	e853 3f00 	ldrex	r3, [r3]
 800da88:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800da8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800da90:	667b      	str	r3, [r7, #100]	@ 0x64
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	461a      	mov	r2, r3
 800da98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800da9a:	657b      	str	r3, [r7, #84]	@ 0x54
 800da9c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800daa0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800daa2:	e841 2300 	strex	r3, r2, [r1]
 800daa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800daa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d1e6      	bne.n	800da7c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	3308      	adds	r3, #8
 800dab4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dab8:	e853 3f00 	ldrex	r3, [r3]
 800dabc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dabe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dac0:	f023 0301 	bic.w	r3, r3, #1
 800dac4:	663b      	str	r3, [r7, #96]	@ 0x60
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	3308      	adds	r3, #8
 800dacc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800dace:	643a      	str	r2, [r7, #64]	@ 0x40
 800dad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dad2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dad4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dad6:	e841 2300 	strex	r3, r2, [r1]
 800dada:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dadc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d1e5      	bne.n	800daae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2220      	movs	r2, #32
 800dae6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2200      	movs	r2, #0
 800daee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2200      	movs	r2, #0
 800daf4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	4a33      	ldr	r2, [pc, #204]	@ (800dbc8 <UART_RxISR_16BIT+0x1b4>)
 800dafc:	4293      	cmp	r3, r2
 800dafe:	d01f      	beq.n	800db40 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	685b      	ldr	r3, [r3, #4]
 800db06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d018      	beq.n	800db40 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db14:	6a3b      	ldr	r3, [r7, #32]
 800db16:	e853 3f00 	ldrex	r3, [r3]
 800db1a:	61fb      	str	r3, [r7, #28]
   return(result);
 800db1c:	69fb      	ldr	r3, [r7, #28]
 800db1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800db22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	461a      	mov	r2, r3
 800db2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800db2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800db2e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800db32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db34:	e841 2300 	strex	r3, r2, [r1]
 800db38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800db3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d1e6      	bne.n	800db0e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db44:	2b01      	cmp	r3, #1
 800db46:	d12e      	bne.n	800dba6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2200      	movs	r2, #0
 800db4c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	e853 3f00 	ldrex	r3, [r3]
 800db5a:	60bb      	str	r3, [r7, #8]
   return(result);
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	f023 0310 	bic.w	r3, r3, #16
 800db62:	65bb      	str	r3, [r7, #88]	@ 0x58
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	461a      	mov	r2, r3
 800db6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800db6c:	61bb      	str	r3, [r7, #24]
 800db6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db70:	6979      	ldr	r1, [r7, #20]
 800db72:	69ba      	ldr	r2, [r7, #24]
 800db74:	e841 2300 	strex	r3, r2, [r1]
 800db78:	613b      	str	r3, [r7, #16]
   return(result);
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d1e6      	bne.n	800db4e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	69db      	ldr	r3, [r3, #28]
 800db86:	f003 0310 	and.w	r3, r3, #16
 800db8a:	2b10      	cmp	r3, #16
 800db8c:	d103      	bne.n	800db96 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	2210      	movs	r2, #16
 800db94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800db9c:	4619      	mov	r1, r3
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f7fe fb30 	bl	800c204 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dba4:	e00b      	b.n	800dbbe <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f7f3 fde2 	bl	8001770 <HAL_UART_RxCpltCallback>
}
 800dbac:	e007      	b.n	800dbbe <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	699a      	ldr	r2, [r3, #24]
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f042 0208 	orr.w	r2, r2, #8
 800dbbc:	619a      	str	r2, [r3, #24]
}
 800dbbe:	bf00      	nop
 800dbc0:	3770      	adds	r7, #112	@ 0x70
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	58000c00 	.word	0x58000c00

0800dbcc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b0ac      	sub	sp, #176	@ 0xb0
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dbda:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	69db      	ldr	r3, [r3, #28]
 800dbe4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	689b      	ldr	r3, [r3, #8]
 800dbf8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dc02:	2b22      	cmp	r3, #34	@ 0x22
 800dc04:	f040 8180 	bne.w	800df08 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dc0e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dc12:	e123      	b.n	800de5c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc1a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800dc1e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800dc22:	b2d9      	uxtb	r1, r3
 800dc24:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800dc28:	b2da      	uxtb	r2, r3
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc2e:	400a      	ands	r2, r1
 800dc30:	b2d2      	uxtb	r2, r2
 800dc32:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc38:	1c5a      	adds	r2, r3, #1
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dc44:	b29b      	uxth	r3, r3
 800dc46:	3b01      	subs	r3, #1
 800dc48:	b29a      	uxth	r2, r3
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	69db      	ldr	r3, [r3, #28]
 800dc56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800dc5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc5e:	f003 0307 	and.w	r3, r3, #7
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d053      	beq.n	800dd0e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dc66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc6a:	f003 0301 	and.w	r3, r3, #1
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d011      	beq.n	800dc96 <UART_RxISR_8BIT_FIFOEN+0xca>
 800dc72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dc76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d00b      	beq.n	800dc96 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	2201      	movs	r2, #1
 800dc84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dc8c:	f043 0201 	orr.w	r2, r3, #1
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dc96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc9a:	f003 0302 	and.w	r3, r3, #2
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d011      	beq.n	800dcc6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800dca2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dca6:	f003 0301 	and.w	r3, r3, #1
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d00b      	beq.n	800dcc6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	2202      	movs	r2, #2
 800dcb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dcbc:	f043 0204 	orr.w	r2, r3, #4
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dcc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dcca:	f003 0304 	and.w	r3, r3, #4
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d011      	beq.n	800dcf6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800dcd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dcd6:	f003 0301 	and.w	r3, r3, #1
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d00b      	beq.n	800dcf6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	2204      	movs	r2, #4
 800dce4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dcec:	f043 0202 	orr.w	r2, r3, #2
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d006      	beq.n	800dd0e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f7fe fa75 	bl	800c1f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2200      	movs	r2, #0
 800dd0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dd14:	b29b      	uxth	r3, r3
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	f040 80a0 	bne.w	800de5c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dd24:	e853 3f00 	ldrex	r3, [r3]
 800dd28:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800dd2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dd2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dd30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	461a      	mov	r2, r3
 800dd3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dd3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dd40:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd42:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800dd44:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800dd46:	e841 2300 	strex	r3, r2, [r1]
 800dd4a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800dd4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d1e4      	bne.n	800dd1c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	3308      	adds	r3, #8
 800dd58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dd5c:	e853 3f00 	ldrex	r3, [r3]
 800dd60:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800dd62:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dd64:	4b6e      	ldr	r3, [pc, #440]	@ (800df20 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800dd66:	4013      	ands	r3, r2
 800dd68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	3308      	adds	r3, #8
 800dd72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800dd76:	66ba      	str	r2, [r7, #104]	@ 0x68
 800dd78:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd7a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800dd7c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800dd7e:	e841 2300 	strex	r3, r2, [r1]
 800dd82:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800dd84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d1e3      	bne.n	800dd52 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2220      	movs	r2, #32
 800dd8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2200      	movs	r2, #0
 800dd96:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	4a60      	ldr	r2, [pc, #384]	@ (800df24 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800dda4:	4293      	cmp	r3, r2
 800dda6:	d021      	beq.n	800ddec <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	685b      	ldr	r3, [r3, #4]
 800ddae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d01a      	beq.n	800ddec <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ddbe:	e853 3f00 	ldrex	r3, [r3]
 800ddc2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ddc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ddc6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ddca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ddd8:	657b      	str	r3, [r7, #84]	@ 0x54
 800ddda:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dddc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ddde:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dde0:	e841 2300 	strex	r3, r2, [r1]
 800dde4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800dde6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d1e4      	bne.n	800ddb6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ddf0:	2b01      	cmp	r3, #1
 800ddf2:	d130      	bne.n	800de56 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de02:	e853 3f00 	ldrex	r3, [r3]
 800de06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800de08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de0a:	f023 0310 	bic.w	r3, r3, #16
 800de0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	461a      	mov	r2, r3
 800de18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de1c:	643b      	str	r3, [r7, #64]	@ 0x40
 800de1e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800de22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800de24:	e841 2300 	strex	r3, r2, [r1]
 800de28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800de2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d1e4      	bne.n	800ddfa <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	69db      	ldr	r3, [r3, #28]
 800de36:	f003 0310 	and.w	r3, r3, #16
 800de3a:	2b10      	cmp	r3, #16
 800de3c:	d103      	bne.n	800de46 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	2210      	movs	r2, #16
 800de44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800de4c:	4619      	mov	r1, r3
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f7fe f9d8 	bl	800c204 <HAL_UARTEx_RxEventCallback>
 800de54:	e002      	b.n	800de5c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f7f3 fc8a 	bl	8001770 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800de5c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800de60:	2b00      	cmp	r3, #0
 800de62:	d006      	beq.n	800de72 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800de64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de68:	f003 0320 	and.w	r3, r3, #32
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	f47f aed1 	bne.w	800dc14 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800de78:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800de7c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800de80:	2b00      	cmp	r3, #0
 800de82:	d049      	beq.n	800df18 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800de8a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800de8e:	429a      	cmp	r2, r3
 800de90:	d242      	bcs.n	800df18 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	3308      	adds	r3, #8
 800de98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de9a:	6a3b      	ldr	r3, [r7, #32]
 800de9c:	e853 3f00 	ldrex	r3, [r3]
 800dea0:	61fb      	str	r3, [r7, #28]
   return(result);
 800dea2:	69fb      	ldr	r3, [r7, #28]
 800dea4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dea8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	3308      	adds	r3, #8
 800deb2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800deb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800deb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800debc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800debe:	e841 2300 	strex	r3, r2, [r1]
 800dec2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d1e3      	bne.n	800de92 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	4a16      	ldr	r2, [pc, #88]	@ (800df28 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800dece:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	e853 3f00 	ldrex	r3, [r3]
 800dedc:	60bb      	str	r3, [r7, #8]
   return(result);
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	f043 0320 	orr.w	r3, r3, #32
 800dee4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	461a      	mov	r2, r3
 800deee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800def2:	61bb      	str	r3, [r7, #24]
 800def4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800def6:	6979      	ldr	r1, [r7, #20]
 800def8:	69ba      	ldr	r2, [r7, #24]
 800defa:	e841 2300 	strex	r3, r2, [r1]
 800defe:	613b      	str	r3, [r7, #16]
   return(result);
 800df00:	693b      	ldr	r3, [r7, #16]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d1e4      	bne.n	800ded0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800df06:	e007      	b.n	800df18 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	699a      	ldr	r2, [r3, #24]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	f042 0208 	orr.w	r2, r2, #8
 800df16:	619a      	str	r2, [r3, #24]
}
 800df18:	bf00      	nop
 800df1a:	37b0      	adds	r7, #176	@ 0xb0
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}
 800df20:	effffffe 	.word	0xeffffffe
 800df24:	58000c00 	.word	0x58000c00
 800df28:	0800d85d 	.word	0x0800d85d

0800df2c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b0ae      	sub	sp, #184	@ 0xb8
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800df3a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	69db      	ldr	r3, [r3, #28]
 800df44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	689b      	ldr	r3, [r3, #8]
 800df58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800df62:	2b22      	cmp	r3, #34	@ 0x22
 800df64:	f040 8184 	bne.w	800e270 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800df6e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800df72:	e127      	b.n	800e1c4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df7a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800df86:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800df8a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800df8e:	4013      	ands	r3, r2
 800df90:	b29a      	uxth	r2, r3
 800df92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800df96:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df9c:	1c9a      	adds	r2, r3, #2
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dfa8:	b29b      	uxth	r3, r3
 800dfaa:	3b01      	subs	r3, #1
 800dfac:	b29a      	uxth	r2, r3
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	69db      	ldr	r3, [r3, #28]
 800dfba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800dfbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dfc2:	f003 0307 	and.w	r3, r3, #7
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d053      	beq.n	800e072 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dfca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dfce:	f003 0301 	and.w	r3, r3, #1
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d011      	beq.n	800dffa <UART_RxISR_16BIT_FIFOEN+0xce>
 800dfd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dfda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d00b      	beq.n	800dffa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	2201      	movs	r2, #1
 800dfe8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dff0:	f043 0201 	orr.w	r2, r3, #1
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dffa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dffe:	f003 0302 	and.w	r3, r3, #2
 800e002:	2b00      	cmp	r3, #0
 800e004:	d011      	beq.n	800e02a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e006:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e00a:	f003 0301 	and.w	r3, r3, #1
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d00b      	beq.n	800e02a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	2202      	movs	r2, #2
 800e018:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e020:	f043 0204 	orr.w	r2, r3, #4
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e02a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e02e:	f003 0304 	and.w	r3, r3, #4
 800e032:	2b00      	cmp	r3, #0
 800e034:	d011      	beq.n	800e05a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e036:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e03a:	f003 0301 	and.w	r3, r3, #1
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d00b      	beq.n	800e05a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	2204      	movs	r2, #4
 800e048:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e050:	f043 0202 	orr.w	r2, r3, #2
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e060:	2b00      	cmp	r3, #0
 800e062:	d006      	beq.n	800e072 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f7fe f8c3 	bl	800c1f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2200      	movs	r2, #0
 800e06e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e078:	b29b      	uxth	r3, r3
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	f040 80a2 	bne.w	800e1c4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e086:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e088:	e853 3f00 	ldrex	r3, [r3]
 800e08c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e08e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e090:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e094:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	461a      	mov	r2, r3
 800e09e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e0a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e0a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e0aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e0ae:	e841 2300 	strex	r3, r2, [r1]
 800e0b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e0b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d1e2      	bne.n	800e080 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	3308      	adds	r3, #8
 800e0c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e0c4:	e853 3f00 	ldrex	r3, [r3]
 800e0c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e0ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e0cc:	4b6e      	ldr	r3, [pc, #440]	@ (800e288 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800e0ce:	4013      	ands	r3, r2
 800e0d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	3308      	adds	r3, #8
 800e0da:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800e0de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e0e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e0e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e0e6:	e841 2300 	strex	r3, r2, [r1]
 800e0ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e0ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d1e3      	bne.n	800e0ba <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2220      	movs	r2, #32
 800e0f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2200      	movs	r2, #0
 800e104:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	4a60      	ldr	r2, [pc, #384]	@ (800e28c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800e10c:	4293      	cmp	r3, r2
 800e10e:	d021      	beq.n	800e154 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d01a      	beq.n	800e154 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e126:	e853 3f00 	ldrex	r3, [r3]
 800e12a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e12c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e12e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e132:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	461a      	mov	r2, r3
 800e13c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e140:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e142:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e144:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e146:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e148:	e841 2300 	strex	r3, r2, [r1]
 800e14c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e14e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e150:	2b00      	cmp	r3, #0
 800e152:	d1e4      	bne.n	800e11e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e158:	2b01      	cmp	r3, #1
 800e15a:	d130      	bne.n	800e1be <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2200      	movs	r2, #0
 800e160:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e16a:	e853 3f00 	ldrex	r3, [r3]
 800e16e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e172:	f023 0310 	bic.w	r3, r3, #16
 800e176:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	461a      	mov	r2, r3
 800e180:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e184:	647b      	str	r3, [r7, #68]	@ 0x44
 800e186:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e188:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e18a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e18c:	e841 2300 	strex	r3, r2, [r1]
 800e190:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e194:	2b00      	cmp	r3, #0
 800e196:	d1e4      	bne.n	800e162 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	69db      	ldr	r3, [r3, #28]
 800e19e:	f003 0310 	and.w	r3, r3, #16
 800e1a2:	2b10      	cmp	r3, #16
 800e1a4:	d103      	bne.n	800e1ae <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	2210      	movs	r2, #16
 800e1ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f7fe f824 	bl	800c204 <HAL_UARTEx_RxEventCallback>
 800e1bc:	e002      	b.n	800e1c4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f7f3 fad6 	bl	8001770 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e1c4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d006      	beq.n	800e1da <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800e1cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e1d0:	f003 0320 	and.w	r3, r3, #32
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	f47f aecd 	bne.w	800df74 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e1e0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e1e4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d049      	beq.n	800e280 <UART_RxISR_16BIT_FIFOEN+0x354>
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e1f2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	d242      	bcs.n	800e280 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	3308      	adds	r3, #8
 800e200:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e204:	e853 3f00 	ldrex	r3, [r3]
 800e208:	623b      	str	r3, [r7, #32]
   return(result);
 800e20a:	6a3b      	ldr	r3, [r7, #32]
 800e20c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e210:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	3308      	adds	r3, #8
 800e21a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800e21e:	633a      	str	r2, [r7, #48]	@ 0x30
 800e220:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e222:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e224:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e226:	e841 2300 	strex	r3, r2, [r1]
 800e22a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e22c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d1e3      	bne.n	800e1fa <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	4a16      	ldr	r2, [pc, #88]	@ (800e290 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800e236:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	e853 3f00 	ldrex	r3, [r3]
 800e244:	60fb      	str	r3, [r7, #12]
   return(result);
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	f043 0320 	orr.w	r3, r3, #32
 800e24c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	461a      	mov	r2, r3
 800e256:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e25a:	61fb      	str	r3, [r7, #28]
 800e25c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e25e:	69b9      	ldr	r1, [r7, #24]
 800e260:	69fa      	ldr	r2, [r7, #28]
 800e262:	e841 2300 	strex	r3, r2, [r1]
 800e266:	617b      	str	r3, [r7, #20]
   return(result);
 800e268:	697b      	ldr	r3, [r7, #20]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d1e4      	bne.n	800e238 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e26e:	e007      	b.n	800e280 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	699a      	ldr	r2, [r3, #24]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f042 0208 	orr.w	r2, r2, #8
 800e27e:	619a      	str	r2, [r3, #24]
}
 800e280:	bf00      	nop
 800e282:	37b8      	adds	r7, #184	@ 0xb8
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}
 800e288:	effffffe 	.word	0xeffffffe
 800e28c:	58000c00 	.word	0x58000c00
 800e290:	0800da15 	.word	0x0800da15

0800e294 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e294:	b480      	push	{r7}
 800e296:	b083      	sub	sp, #12
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e29c:	bf00      	nop
 800e29e:	370c      	adds	r7, #12
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a6:	4770      	bx	lr

0800e2a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b083      	sub	sp, #12
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e2b0:	bf00      	nop
 800e2b2:	370c      	adds	r7, #12
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ba:	4770      	bx	lr

0800e2bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e2bc:	b480      	push	{r7}
 800e2be:	b083      	sub	sp, #12
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e2c4:	bf00      	nop
 800e2c6:	370c      	adds	r7, #12
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ce:	4770      	bx	lr

0800e2d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e2d0:	b480      	push	{r7}
 800e2d2:	b085      	sub	sp, #20
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e2de:	2b01      	cmp	r3, #1
 800e2e0:	d101      	bne.n	800e2e6 <HAL_UARTEx_DisableFifoMode+0x16>
 800e2e2:	2302      	movs	r3, #2
 800e2e4:	e027      	b.n	800e336 <HAL_UARTEx_DisableFifoMode+0x66>
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	2201      	movs	r2, #1
 800e2ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2224      	movs	r2, #36	@ 0x24
 800e2f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	681a      	ldr	r2, [r3, #0]
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	f022 0201 	bic.w	r2, r2, #1
 800e30c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e314:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2200      	movs	r2, #0
 800e31a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	68fa      	ldr	r2, [r7, #12]
 800e322:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2220      	movs	r2, #32
 800e328:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2200      	movs	r2, #0
 800e330:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e334:	2300      	movs	r3, #0
}
 800e336:	4618      	mov	r0, r3
 800e338:	3714      	adds	r7, #20
 800e33a:	46bd      	mov	sp, r7
 800e33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e340:	4770      	bx	lr

0800e342 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e342:	b580      	push	{r7, lr}
 800e344:	b084      	sub	sp, #16
 800e346:	af00      	add	r7, sp, #0
 800e348:	6078      	str	r0, [r7, #4]
 800e34a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e352:	2b01      	cmp	r3, #1
 800e354:	d101      	bne.n	800e35a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e356:	2302      	movs	r3, #2
 800e358:	e02d      	b.n	800e3b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2201      	movs	r2, #1
 800e35e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2224      	movs	r2, #36	@ 0x24
 800e366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	681a      	ldr	r2, [r3, #0]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	f022 0201 	bic.w	r2, r2, #1
 800e380:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	689b      	ldr	r3, [r3, #8]
 800e388:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	683a      	ldr	r2, [r7, #0]
 800e392:	430a      	orrs	r2, r1
 800e394:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f000 f850 	bl	800e43c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	68fa      	ldr	r2, [r7, #12]
 800e3a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2220      	movs	r2, #32
 800e3a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e3b4:	2300      	movs	r3, #0
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	3710      	adds	r7, #16
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}

0800e3be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e3be:	b580      	push	{r7, lr}
 800e3c0:	b084      	sub	sp, #16
 800e3c2:	af00      	add	r7, sp, #0
 800e3c4:	6078      	str	r0, [r7, #4]
 800e3c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d101      	bne.n	800e3d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e3d2:	2302      	movs	r3, #2
 800e3d4:	e02d      	b.n	800e432 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2201      	movs	r2, #1
 800e3da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2224      	movs	r2, #36	@ 0x24
 800e3e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	681a      	ldr	r2, [r3, #0]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	f022 0201 	bic.w	r2, r2, #1
 800e3fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	689b      	ldr	r3, [r3, #8]
 800e404:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	683a      	ldr	r2, [r7, #0]
 800e40e:	430a      	orrs	r2, r1
 800e410:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f000 f812 	bl	800e43c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	68fa      	ldr	r2, [r7, #12]
 800e41e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2220      	movs	r2, #32
 800e424:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2200      	movs	r2, #0
 800e42c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e430:	2300      	movs	r3, #0
}
 800e432:	4618      	mov	r0, r3
 800e434:	3710      	adds	r7, #16
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
	...

0800e43c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e43c:	b480      	push	{r7}
 800e43e:	b085      	sub	sp, #20
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d108      	bne.n	800e45e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2201      	movs	r2, #1
 800e450:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2201      	movs	r2, #1
 800e458:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e45c:	e031      	b.n	800e4c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e45e:	2310      	movs	r3, #16
 800e460:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e462:	2310      	movs	r3, #16
 800e464:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	689b      	ldr	r3, [r3, #8]
 800e46c:	0e5b      	lsrs	r3, r3, #25
 800e46e:	b2db      	uxtb	r3, r3
 800e470:	f003 0307 	and.w	r3, r3, #7
 800e474:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	689b      	ldr	r3, [r3, #8]
 800e47c:	0f5b      	lsrs	r3, r3, #29
 800e47e:	b2db      	uxtb	r3, r3
 800e480:	f003 0307 	and.w	r3, r3, #7
 800e484:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e486:	7bbb      	ldrb	r3, [r7, #14]
 800e488:	7b3a      	ldrb	r2, [r7, #12]
 800e48a:	4911      	ldr	r1, [pc, #68]	@ (800e4d0 <UARTEx_SetNbDataToProcess+0x94>)
 800e48c:	5c8a      	ldrb	r2, [r1, r2]
 800e48e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e492:	7b3a      	ldrb	r2, [r7, #12]
 800e494:	490f      	ldr	r1, [pc, #60]	@ (800e4d4 <UARTEx_SetNbDataToProcess+0x98>)
 800e496:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e498:	fb93 f3f2 	sdiv	r3, r3, r2
 800e49c:	b29a      	uxth	r2, r3
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e4a4:	7bfb      	ldrb	r3, [r7, #15]
 800e4a6:	7b7a      	ldrb	r2, [r7, #13]
 800e4a8:	4909      	ldr	r1, [pc, #36]	@ (800e4d0 <UARTEx_SetNbDataToProcess+0x94>)
 800e4aa:	5c8a      	ldrb	r2, [r1, r2]
 800e4ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e4b0:	7b7a      	ldrb	r2, [r7, #13]
 800e4b2:	4908      	ldr	r1, [pc, #32]	@ (800e4d4 <UARTEx_SetNbDataToProcess+0x98>)
 800e4b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e4b6:	fb93 f3f2 	sdiv	r3, r3, r2
 800e4ba:	b29a      	uxth	r2, r3
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e4c2:	bf00      	nop
 800e4c4:	3714      	adds	r7, #20
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4cc:	4770      	bx	lr
 800e4ce:	bf00      	nop
 800e4d0:	08022cec 	.word	0x08022cec
 800e4d4:	08022cf4 	.word	0x08022cf4

0800e4d8 <__NVIC_SetPriority>:
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b083      	sub	sp, #12
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	4603      	mov	r3, r0
 800e4e0:	6039      	str	r1, [r7, #0]
 800e4e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800e4e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	db0a      	blt.n	800e502 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	b2da      	uxtb	r2, r3
 800e4f0:	490c      	ldr	r1, [pc, #48]	@ (800e524 <__NVIC_SetPriority+0x4c>)
 800e4f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e4f6:	0112      	lsls	r2, r2, #4
 800e4f8:	b2d2      	uxtb	r2, r2
 800e4fa:	440b      	add	r3, r1
 800e4fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800e500:	e00a      	b.n	800e518 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	b2da      	uxtb	r2, r3
 800e506:	4908      	ldr	r1, [pc, #32]	@ (800e528 <__NVIC_SetPriority+0x50>)
 800e508:	88fb      	ldrh	r3, [r7, #6]
 800e50a:	f003 030f 	and.w	r3, r3, #15
 800e50e:	3b04      	subs	r3, #4
 800e510:	0112      	lsls	r2, r2, #4
 800e512:	b2d2      	uxtb	r2, r2
 800e514:	440b      	add	r3, r1
 800e516:	761a      	strb	r2, [r3, #24]
}
 800e518:	bf00      	nop
 800e51a:	370c      	adds	r7, #12
 800e51c:	46bd      	mov	sp, r7
 800e51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e522:	4770      	bx	lr
 800e524:	e000e100 	.word	0xe000e100
 800e528:	e000ed00 	.word	0xe000ed00

0800e52c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e52c:	b580      	push	{r7, lr}
 800e52e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e530:	4b05      	ldr	r3, [pc, #20]	@ (800e548 <SysTick_Handler+0x1c>)
 800e532:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e534:	f002 f976 	bl	8010824 <xTaskGetSchedulerState>
 800e538:	4603      	mov	r3, r0
 800e53a:	2b01      	cmp	r3, #1
 800e53c:	d001      	beq.n	800e542 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e53e:	f003 fa73 	bl	8011a28 <xPortSysTickHandler>
  }
}
 800e542:	bf00      	nop
 800e544:	bd80      	pop	{r7, pc}
 800e546:	bf00      	nop
 800e548:	e000e010 	.word	0xe000e010

0800e54c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e54c:	b580      	push	{r7, lr}
 800e54e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e550:	2100      	movs	r1, #0
 800e552:	f06f 0004 	mvn.w	r0, #4
 800e556:	f7ff ffbf 	bl	800e4d8 <__NVIC_SetPriority>
#endif
}
 800e55a:	bf00      	nop
 800e55c:	bd80      	pop	{r7, pc}
	...

0800e560 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e560:	b480      	push	{r7}
 800e562:	b083      	sub	sp, #12
 800e564:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e566:	f3ef 8305 	mrs	r3, IPSR
 800e56a:	603b      	str	r3, [r7, #0]
  return(result);
 800e56c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d003      	beq.n	800e57a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e572:	f06f 0305 	mvn.w	r3, #5
 800e576:	607b      	str	r3, [r7, #4]
 800e578:	e00c      	b.n	800e594 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e57a:	4b0a      	ldr	r3, [pc, #40]	@ (800e5a4 <osKernelInitialize+0x44>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d105      	bne.n	800e58e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e582:	4b08      	ldr	r3, [pc, #32]	@ (800e5a4 <osKernelInitialize+0x44>)
 800e584:	2201      	movs	r2, #1
 800e586:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e588:	2300      	movs	r3, #0
 800e58a:	607b      	str	r3, [r7, #4]
 800e58c:	e002      	b.n	800e594 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e58e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e592:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e594:	687b      	ldr	r3, [r7, #4]
}
 800e596:	4618      	mov	r0, r3
 800e598:	370c      	adds	r7, #12
 800e59a:	46bd      	mov	sp, r7
 800e59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a0:	4770      	bx	lr
 800e5a2:	bf00      	nop
 800e5a4:	24032dfc 	.word	0x24032dfc

0800e5a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e5ae:	f3ef 8305 	mrs	r3, IPSR
 800e5b2:	603b      	str	r3, [r7, #0]
  return(result);
 800e5b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d003      	beq.n	800e5c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800e5ba:	f06f 0305 	mvn.w	r3, #5
 800e5be:	607b      	str	r3, [r7, #4]
 800e5c0:	e010      	b.n	800e5e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e5c2:	4b0b      	ldr	r3, [pc, #44]	@ (800e5f0 <osKernelStart+0x48>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	2b01      	cmp	r3, #1
 800e5c8:	d109      	bne.n	800e5de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e5ca:	f7ff ffbf 	bl	800e54c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e5ce:	4b08      	ldr	r3, [pc, #32]	@ (800e5f0 <osKernelStart+0x48>)
 800e5d0:	2202      	movs	r2, #2
 800e5d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e5d4:	f001 fc8a 	bl	800feec <vTaskStartScheduler>
      stat = osOK;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	607b      	str	r3, [r7, #4]
 800e5dc:	e002      	b.n	800e5e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e5de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e5e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e5e4:	687b      	ldr	r3, [r7, #4]
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3708      	adds	r7, #8
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
 800e5ee:	bf00      	nop
 800e5f0:	24032dfc 	.word	0x24032dfc

0800e5f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b08e      	sub	sp, #56	@ 0x38
 800e5f8:	af04      	add	r7, sp, #16
 800e5fa:	60f8      	str	r0, [r7, #12]
 800e5fc:	60b9      	str	r1, [r7, #8]
 800e5fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e600:	2300      	movs	r3, #0
 800e602:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e604:	f3ef 8305 	mrs	r3, IPSR
 800e608:	617b      	str	r3, [r7, #20]
  return(result);
 800e60a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d17e      	bne.n	800e70e <osThreadNew+0x11a>
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d07b      	beq.n	800e70e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e616:	2380      	movs	r3, #128	@ 0x80
 800e618:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e61a:	2318      	movs	r3, #24
 800e61c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e61e:	2300      	movs	r3, #0
 800e620:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800e622:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e626:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d045      	beq.n	800e6ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d002      	beq.n	800e63c <osThreadNew+0x48>
        name = attr->name;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	699b      	ldr	r3, [r3, #24]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d002      	beq.n	800e64a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	699b      	ldr	r3, [r3, #24]
 800e648:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e64a:	69fb      	ldr	r3, [r7, #28]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d008      	beq.n	800e662 <osThreadNew+0x6e>
 800e650:	69fb      	ldr	r3, [r7, #28]
 800e652:	2b38      	cmp	r3, #56	@ 0x38
 800e654:	d805      	bhi.n	800e662 <osThreadNew+0x6e>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	685b      	ldr	r3, [r3, #4]
 800e65a:	f003 0301 	and.w	r3, r3, #1
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d001      	beq.n	800e666 <osThreadNew+0x72>
        return (NULL);
 800e662:	2300      	movs	r3, #0
 800e664:	e054      	b.n	800e710 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	695b      	ldr	r3, [r3, #20]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d003      	beq.n	800e676 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	695b      	ldr	r3, [r3, #20]
 800e672:	089b      	lsrs	r3, r3, #2
 800e674:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	689b      	ldr	r3, [r3, #8]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d00e      	beq.n	800e69c <osThreadNew+0xa8>
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	68db      	ldr	r3, [r3, #12]
 800e682:	2ba7      	cmp	r3, #167	@ 0xa7
 800e684:	d90a      	bls.n	800e69c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d006      	beq.n	800e69c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	695b      	ldr	r3, [r3, #20]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d002      	beq.n	800e69c <osThreadNew+0xa8>
        mem = 1;
 800e696:	2301      	movs	r3, #1
 800e698:	61bb      	str	r3, [r7, #24]
 800e69a:	e010      	b.n	800e6be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	689b      	ldr	r3, [r3, #8]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d10c      	bne.n	800e6be <osThreadNew+0xca>
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	68db      	ldr	r3, [r3, #12]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d108      	bne.n	800e6be <osThreadNew+0xca>
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	691b      	ldr	r3, [r3, #16]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d104      	bne.n	800e6be <osThreadNew+0xca>
          mem = 0;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	61bb      	str	r3, [r7, #24]
 800e6b8:	e001      	b.n	800e6be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e6be:	69bb      	ldr	r3, [r7, #24]
 800e6c0:	2b01      	cmp	r3, #1
 800e6c2:	d110      	bne.n	800e6e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e6c8:	687a      	ldr	r2, [r7, #4]
 800e6ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e6cc:	9202      	str	r2, [sp, #8]
 800e6ce:	9301      	str	r3, [sp, #4]
 800e6d0:	69fb      	ldr	r3, [r7, #28]
 800e6d2:	9300      	str	r3, [sp, #0]
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	6a3a      	ldr	r2, [r7, #32]
 800e6d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e6da:	68f8      	ldr	r0, [r7, #12]
 800e6dc:	f001 fa12 	bl	800fb04 <xTaskCreateStatic>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	613b      	str	r3, [r7, #16]
 800e6e4:	e013      	b.n	800e70e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e6e6:	69bb      	ldr	r3, [r7, #24]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d110      	bne.n	800e70e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e6ec:	6a3b      	ldr	r3, [r7, #32]
 800e6ee:	b29a      	uxth	r2, r3
 800e6f0:	f107 0310 	add.w	r3, r7, #16
 800e6f4:	9301      	str	r3, [sp, #4]
 800e6f6:	69fb      	ldr	r3, [r7, #28]
 800e6f8:	9300      	str	r3, [sp, #0]
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e6fe:	68f8      	ldr	r0, [r7, #12]
 800e700:	f001 fa60 	bl	800fbc4 <xTaskCreate>
 800e704:	4603      	mov	r3, r0
 800e706:	2b01      	cmp	r3, #1
 800e708:	d001      	beq.n	800e70e <osThreadNew+0x11a>
            hTask = NULL;
 800e70a:	2300      	movs	r3, #0
 800e70c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e70e:	693b      	ldr	r3, [r7, #16]
}
 800e710:	4618      	mov	r0, r3
 800e712:	3728      	adds	r7, #40	@ 0x28
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}

0800e718 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800e718:	b580      	push	{r7, lr}
 800e71a:	b088      	sub	sp, #32
 800e71c:	af02      	add	r7, sp, #8
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d002      	beq.n	800e732 <osThreadFlagsSet+0x1a>
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	da03      	bge.n	800e73a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800e732:	f06f 0303 	mvn.w	r3, #3
 800e736:	60fb      	str	r3, [r7, #12]
 800e738:	e035      	b.n	800e7a6 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800e73a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e73e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e740:	f3ef 8305 	mrs	r3, IPSR
 800e744:	613b      	str	r3, [r7, #16]
  return(result);
 800e746:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d01f      	beq.n	800e78c <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800e74c:	2300      	movs	r3, #0
 800e74e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800e750:	f107 0308 	add.w	r3, r7, #8
 800e754:	9300      	str	r3, [sp, #0]
 800e756:	2300      	movs	r3, #0
 800e758:	2201      	movs	r2, #1
 800e75a:	6839      	ldr	r1, [r7, #0]
 800e75c:	6978      	ldr	r0, [r7, #20]
 800e75e:	f002 fb11 	bl	8010d84 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800e762:	f107 030c 	add.w	r3, r7, #12
 800e766:	2200      	movs	r2, #0
 800e768:	9200      	str	r2, [sp, #0]
 800e76a:	2200      	movs	r2, #0
 800e76c:	2100      	movs	r1, #0
 800e76e:	6978      	ldr	r0, [r7, #20]
 800e770:	f002 fb08 	bl	8010d84 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d015      	beq.n	800e7a6 <osThreadFlagsSet+0x8e>
 800e77a:	4b0d      	ldr	r3, [pc, #52]	@ (800e7b0 <osThreadFlagsSet+0x98>)
 800e77c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e780:	601a      	str	r2, [r3, #0]
 800e782:	f3bf 8f4f 	dsb	sy
 800e786:	f3bf 8f6f 	isb	sy
 800e78a:	e00c      	b.n	800e7a6 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800e78c:	2300      	movs	r3, #0
 800e78e:	2201      	movs	r2, #1
 800e790:	6839      	ldr	r1, [r7, #0]
 800e792:	6978      	ldr	r0, [r7, #20]
 800e794:	f002 fa34 	bl	8010c00 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800e798:	f107 030c 	add.w	r3, r7, #12
 800e79c:	2200      	movs	r2, #0
 800e79e:	2100      	movs	r1, #0
 800e7a0:	6978      	ldr	r0, [r7, #20]
 800e7a2:	f002 fa2d 	bl	8010c00 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800e7a6:	68fb      	ldr	r3, [r7, #12]
}
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	3718      	adds	r7, #24
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}
 800e7b0:	e000ed04 	.word	0xe000ed04

0800e7b4 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b08c      	sub	sp, #48	@ 0x30
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	60f8      	str	r0, [r7, #12]
 800e7bc:	60b9      	str	r1, [r7, #8]
 800e7be:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e7c0:	f3ef 8305 	mrs	r3, IPSR
 800e7c4:	617b      	str	r3, [r7, #20]
  return(result);
 800e7c6:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d003      	beq.n	800e7d4 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800e7cc:	f06f 0305 	mvn.w	r3, #5
 800e7d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e7d2:	e06b      	b.n	800e8ac <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	da03      	bge.n	800e7e2 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800e7da:	f06f 0303 	mvn.w	r3, #3
 800e7de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e7e0:	e064      	b.n	800e8ac <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	f003 0302 	and.w	r3, r3, #2
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d002      	beq.n	800e7f2 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e7f0:	e001      	b.n	800e7f6 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800e7fe:	f001 fc91 	bl	8010124 <xTaskGetTickCount>
 800e802:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800e804:	f107 0210 	add.w	r2, r7, #16
 800e808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e80a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e80c:	2000      	movs	r0, #0
 800e80e:	f002 f997 	bl	8010b40 <xTaskNotifyWait>
 800e812:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800e814:	69fb      	ldr	r3, [r7, #28]
 800e816:	2b01      	cmp	r3, #1
 800e818:	d137      	bne.n	800e88a <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800e81a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	4013      	ands	r3, r2
 800e820:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e826:	4313      	orrs	r3, r2
 800e828:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	f003 0301 	and.w	r3, r3, #1
 800e830:	2b00      	cmp	r3, #0
 800e832:	d00c      	beq.n	800e84e <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800e834:	68fa      	ldr	r2, [r7, #12]
 800e836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e838:	4013      	ands	r3, r2
 800e83a:	68fa      	ldr	r2, [r7, #12]
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d032      	beq.n	800e8a6 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d10f      	bne.n	800e866 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800e846:	f06f 0302 	mvn.w	r3, #2
 800e84a:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800e84c:	e02e      	b.n	800e8ac <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800e84e:	68fa      	ldr	r2, [r7, #12]
 800e850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e852:	4013      	ands	r3, r2
 800e854:	2b00      	cmp	r3, #0
 800e856:	d128      	bne.n	800e8aa <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d103      	bne.n	800e866 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800e85e:	f06f 0302 	mvn.w	r3, #2
 800e862:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800e864:	e022      	b.n	800e8ac <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800e866:	f001 fc5d 	bl	8010124 <xTaskGetTickCount>
 800e86a:	4602      	mov	r2, r0
 800e86c:	6a3b      	ldr	r3, [r7, #32]
 800e86e:	1ad3      	subs	r3, r2, r3
 800e870:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800e872:	69ba      	ldr	r2, [r7, #24]
 800e874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e876:	429a      	cmp	r2, r3
 800e878:	d902      	bls.n	800e880 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800e87a:	2300      	movs	r3, #0
 800e87c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e87e:	e00e      	b.n	800e89e <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800e880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e882:	69bb      	ldr	r3, [r7, #24]
 800e884:	1ad3      	subs	r3, r2, r3
 800e886:	627b      	str	r3, [r7, #36]	@ 0x24
 800e888:	e009      	b.n	800e89e <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d103      	bne.n	800e898 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800e890:	f06f 0302 	mvn.w	r3, #2
 800e894:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e896:	e002      	b.n	800e89e <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800e898:	f06f 0301 	mvn.w	r3, #1
 800e89c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800e89e:	69fb      	ldr	r3, [r7, #28]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d1af      	bne.n	800e804 <osThreadFlagsWait+0x50>
 800e8a4:	e002      	b.n	800e8ac <osThreadFlagsWait+0xf8>
            break;
 800e8a6:	bf00      	nop
 800e8a8:	e000      	b.n	800e8ac <osThreadFlagsWait+0xf8>
            break;
 800e8aa:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800e8ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3730      	adds	r7, #48	@ 0x30
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}

0800e8b6 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e8b6:	b580      	push	{r7, lr}
 800e8b8:	b084      	sub	sp, #16
 800e8ba:	af00      	add	r7, sp, #0
 800e8bc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8be:	f3ef 8305 	mrs	r3, IPSR
 800e8c2:	60bb      	str	r3, [r7, #8]
  return(result);
 800e8c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d003      	beq.n	800e8d2 <osDelay+0x1c>
    stat = osErrorISR;
 800e8ca:	f06f 0305 	mvn.w	r3, #5
 800e8ce:	60fb      	str	r3, [r7, #12]
 800e8d0:	e007      	b.n	800e8e2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d002      	beq.n	800e8e2 <osDelay+0x2c>
      vTaskDelay(ticks);
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f001 facf 	bl	800fe80 <vTaskDelay>
    }
  }

  return (stat);
 800e8e2:	68fb      	ldr	r3, [r7, #12]
}
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	3710      	adds	r7, #16
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}

0800e8ec <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b088      	sub	sp, #32
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8f8:	f3ef 8305 	mrs	r3, IPSR
 800e8fc:	60bb      	str	r3, [r7, #8]
  return(result);
 800e8fe:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800e900:	2b00      	cmp	r3, #0
 800e902:	d174      	bne.n	800e9ee <osMutexNew+0x102>
    if (attr != NULL) {
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d003      	beq.n	800e912 <osMutexNew+0x26>
      type = attr->attr_bits;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	685b      	ldr	r3, [r3, #4]
 800e90e:	61bb      	str	r3, [r7, #24]
 800e910:	e001      	b.n	800e916 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800e912:	2300      	movs	r3, #0
 800e914:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800e916:	69bb      	ldr	r3, [r7, #24]
 800e918:	f003 0301 	and.w	r3, r3, #1
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d002      	beq.n	800e926 <osMutexNew+0x3a>
      rmtx = 1U;
 800e920:	2301      	movs	r3, #1
 800e922:	617b      	str	r3, [r7, #20]
 800e924:	e001      	b.n	800e92a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800e926:	2300      	movs	r3, #0
 800e928:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800e92a:	69bb      	ldr	r3, [r7, #24]
 800e92c:	f003 0308 	and.w	r3, r3, #8
 800e930:	2b00      	cmp	r3, #0
 800e932:	d15c      	bne.n	800e9ee <osMutexNew+0x102>
      mem = -1;
 800e934:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e938:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d015      	beq.n	800e96c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	689b      	ldr	r3, [r3, #8]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d006      	beq.n	800e956 <osMutexNew+0x6a>
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	68db      	ldr	r3, [r3, #12]
 800e94c:	2b4f      	cmp	r3, #79	@ 0x4f
 800e94e:	d902      	bls.n	800e956 <osMutexNew+0x6a>
          mem = 1;
 800e950:	2301      	movs	r3, #1
 800e952:	613b      	str	r3, [r7, #16]
 800e954:	e00c      	b.n	800e970 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	689b      	ldr	r3, [r3, #8]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d108      	bne.n	800e970 <osMutexNew+0x84>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	68db      	ldr	r3, [r3, #12]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d104      	bne.n	800e970 <osMutexNew+0x84>
            mem = 0;
 800e966:	2300      	movs	r3, #0
 800e968:	613b      	str	r3, [r7, #16]
 800e96a:	e001      	b.n	800e970 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800e96c:	2300      	movs	r3, #0
 800e96e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800e970:	693b      	ldr	r3, [r7, #16]
 800e972:	2b01      	cmp	r3, #1
 800e974:	d112      	bne.n	800e99c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d007      	beq.n	800e98c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	689b      	ldr	r3, [r3, #8]
 800e980:	4619      	mov	r1, r3
 800e982:	2004      	movs	r0, #4
 800e984:	f000 fb1f 	bl	800efc6 <xQueueCreateMutexStatic>
 800e988:	61f8      	str	r0, [r7, #28]
 800e98a:	e016      	b.n	800e9ba <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	689b      	ldr	r3, [r3, #8]
 800e990:	4619      	mov	r1, r3
 800e992:	2001      	movs	r0, #1
 800e994:	f000 fb17 	bl	800efc6 <xQueueCreateMutexStatic>
 800e998:	61f8      	str	r0, [r7, #28]
 800e99a:	e00e      	b.n	800e9ba <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800e99c:	693b      	ldr	r3, [r7, #16]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d10b      	bne.n	800e9ba <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800e9a2:	697b      	ldr	r3, [r7, #20]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d004      	beq.n	800e9b2 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800e9a8:	2004      	movs	r0, #4
 800e9aa:	f000 faf4 	bl	800ef96 <xQueueCreateMutex>
 800e9ae:	61f8      	str	r0, [r7, #28]
 800e9b0:	e003      	b.n	800e9ba <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800e9b2:	2001      	movs	r0, #1
 800e9b4:	f000 faef 	bl	800ef96 <xQueueCreateMutex>
 800e9b8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800e9ba:	69fb      	ldr	r3, [r7, #28]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d00c      	beq.n	800e9da <osMutexNew+0xee>
        if (attr != NULL) {
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d003      	beq.n	800e9ce <osMutexNew+0xe2>
          name = attr->name;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	60fb      	str	r3, [r7, #12]
 800e9cc:	e001      	b.n	800e9d2 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800e9d2:	68f9      	ldr	r1, [r7, #12]
 800e9d4:	69f8      	ldr	r0, [r7, #28]
 800e9d6:	f001 f837 	bl	800fa48 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800e9da:	69fb      	ldr	r3, [r7, #28]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d006      	beq.n	800e9ee <osMutexNew+0x102>
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d003      	beq.n	800e9ee <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800e9e6:	69fb      	ldr	r3, [r7, #28]
 800e9e8:	f043 0301 	orr.w	r3, r3, #1
 800e9ec:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800e9ee:	69fb      	ldr	r3, [r7, #28]
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3720      	adds	r7, #32
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}

0800e9f8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b086      	sub	sp, #24
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f023 0301 	bic.w	r3, r3, #1
 800ea08:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f003 0301 	and.w	r3, r3, #1
 800ea10:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ea12:	2300      	movs	r3, #0
 800ea14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea16:	f3ef 8305 	mrs	r3, IPSR
 800ea1a:	60bb      	str	r3, [r7, #8]
  return(result);
 800ea1c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d003      	beq.n	800ea2a <osMutexAcquire+0x32>
    stat = osErrorISR;
 800ea22:	f06f 0305 	mvn.w	r3, #5
 800ea26:	617b      	str	r3, [r7, #20]
 800ea28:	e02c      	b.n	800ea84 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800ea2a:	693b      	ldr	r3, [r7, #16]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d103      	bne.n	800ea38 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800ea30:	f06f 0303 	mvn.w	r3, #3
 800ea34:	617b      	str	r3, [r7, #20]
 800ea36:	e025      	b.n	800ea84 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d011      	beq.n	800ea62 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ea3e:	6839      	ldr	r1, [r7, #0]
 800ea40:	6938      	ldr	r0, [r7, #16]
 800ea42:	f000 fb10 	bl	800f066 <xQueueTakeMutexRecursive>
 800ea46:	4603      	mov	r3, r0
 800ea48:	2b01      	cmp	r3, #1
 800ea4a:	d01b      	beq.n	800ea84 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d003      	beq.n	800ea5a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800ea52:	f06f 0301 	mvn.w	r3, #1
 800ea56:	617b      	str	r3, [r7, #20]
 800ea58:	e014      	b.n	800ea84 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ea5a:	f06f 0302 	mvn.w	r3, #2
 800ea5e:	617b      	str	r3, [r7, #20]
 800ea60:	e010      	b.n	800ea84 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ea62:	6839      	ldr	r1, [r7, #0]
 800ea64:	6938      	ldr	r0, [r7, #16]
 800ea66:	f000 fdb7 	bl	800f5d8 <xQueueSemaphoreTake>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	2b01      	cmp	r3, #1
 800ea6e:	d009      	beq.n	800ea84 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d003      	beq.n	800ea7e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800ea76:	f06f 0301 	mvn.w	r3, #1
 800ea7a:	617b      	str	r3, [r7, #20]
 800ea7c:	e002      	b.n	800ea84 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ea7e:	f06f 0302 	mvn.w	r3, #2
 800ea82:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800ea84:	697b      	ldr	r3, [r7, #20]
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3718      	adds	r7, #24
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}

0800ea8e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ea8e:	b580      	push	{r7, lr}
 800ea90:	b086      	sub	sp, #24
 800ea92:	af00      	add	r7, sp, #0
 800ea94:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	f023 0301 	bic.w	r3, r3, #1
 800ea9c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f003 0301 	and.w	r3, r3, #1
 800eaa4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eaaa:	f3ef 8305 	mrs	r3, IPSR
 800eaae:	60bb      	str	r3, [r7, #8]
  return(result);
 800eab0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d003      	beq.n	800eabe <osMutexRelease+0x30>
    stat = osErrorISR;
 800eab6:	f06f 0305 	mvn.w	r3, #5
 800eaba:	617b      	str	r3, [r7, #20]
 800eabc:	e01f      	b.n	800eafe <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800eabe:	693b      	ldr	r3, [r7, #16]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d103      	bne.n	800eacc <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800eac4:	f06f 0303 	mvn.w	r3, #3
 800eac8:	617b      	str	r3, [r7, #20]
 800eaca:	e018      	b.n	800eafe <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d009      	beq.n	800eae6 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ead2:	6938      	ldr	r0, [r7, #16]
 800ead4:	f000 fa92 	bl	800effc <xQueueGiveMutexRecursive>
 800ead8:	4603      	mov	r3, r0
 800eada:	2b01      	cmp	r3, #1
 800eadc:	d00f      	beq.n	800eafe <osMutexRelease+0x70>
        stat = osErrorResource;
 800eade:	f06f 0302 	mvn.w	r3, #2
 800eae2:	617b      	str	r3, [r7, #20]
 800eae4:	e00b      	b.n	800eafe <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800eae6:	2300      	movs	r3, #0
 800eae8:	2200      	movs	r2, #0
 800eaea:	2100      	movs	r1, #0
 800eaec:	6938      	ldr	r0, [r7, #16]
 800eaee:	f000 faf1 	bl	800f0d4 <xQueueGenericSend>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	2b01      	cmp	r3, #1
 800eaf6:	d002      	beq.n	800eafe <osMutexRelease+0x70>
        stat = osErrorResource;
 800eaf8:	f06f 0302 	mvn.w	r3, #2
 800eafc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800eafe:	697b      	ldr	r3, [r7, #20]
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3718      	adds	r7, #24
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}

0800eb08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800eb08:	b480      	push	{r7}
 800eb0a:	b085      	sub	sp, #20
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	60f8      	str	r0, [r7, #12]
 800eb10:	60b9      	str	r1, [r7, #8]
 800eb12:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	4a07      	ldr	r2, [pc, #28]	@ (800eb34 <vApplicationGetIdleTaskMemory+0x2c>)
 800eb18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	4a06      	ldr	r2, [pc, #24]	@ (800eb38 <vApplicationGetIdleTaskMemory+0x30>)
 800eb1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2280      	movs	r2, #128	@ 0x80
 800eb24:	601a      	str	r2, [r3, #0]
}
 800eb26:	bf00      	nop
 800eb28:	3714      	adds	r7, #20
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb30:	4770      	bx	lr
 800eb32:	bf00      	nop
 800eb34:	24032e00 	.word	0x24032e00
 800eb38:	24032ea8 	.word	0x24032ea8

0800eb3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800eb3c:	b480      	push	{r7}
 800eb3e:	b085      	sub	sp, #20
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	60f8      	str	r0, [r7, #12]
 800eb44:	60b9      	str	r1, [r7, #8]
 800eb46:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	4a07      	ldr	r2, [pc, #28]	@ (800eb68 <vApplicationGetTimerTaskMemory+0x2c>)
 800eb4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	4a06      	ldr	r2, [pc, #24]	@ (800eb6c <vApplicationGetTimerTaskMemory+0x30>)
 800eb52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800eb5a:	601a      	str	r2, [r3, #0]
}
 800eb5c:	bf00      	nop
 800eb5e:	3714      	adds	r7, #20
 800eb60:	46bd      	mov	sp, r7
 800eb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb66:	4770      	bx	lr
 800eb68:	240330a8 	.word	0x240330a8
 800eb6c:	24033150 	.word	0x24033150

0800eb70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800eb70:	b480      	push	{r7}
 800eb72:	b083      	sub	sp, #12
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f103 0208 	add.w	r2, r3, #8
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800eb88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f103 0208 	add.w	r2, r3, #8
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f103 0208 	add.w	r2, r3, #8
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2200      	movs	r2, #0
 800eba2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800eba4:	bf00      	nop
 800eba6:	370c      	adds	r7, #12
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr

0800ebb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b083      	sub	sp, #12
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ebbe:	bf00      	nop
 800ebc0:	370c      	adds	r7, #12
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc8:	4770      	bx	lr

0800ebca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ebca:	b480      	push	{r7}
 800ebcc:	b085      	sub	sp, #20
 800ebce:	af00      	add	r7, sp, #0
 800ebd0:	6078      	str	r0, [r7, #4]
 800ebd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	685b      	ldr	r3, [r3, #4]
 800ebd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	68fa      	ldr	r2, [r7, #12]
 800ebde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	689a      	ldr	r2, [r3, #8]
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	689b      	ldr	r3, [r3, #8]
 800ebec:	683a      	ldr	r2, [r7, #0]
 800ebee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	683a      	ldr	r2, [r7, #0]
 800ebf4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	687a      	ldr	r2, [r7, #4]
 800ebfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	1c5a      	adds	r2, r3, #1
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	601a      	str	r2, [r3, #0]
}
 800ec06:	bf00      	nop
 800ec08:	3714      	adds	r7, #20
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec10:	4770      	bx	lr

0800ec12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ec12:	b480      	push	{r7}
 800ec14:	b085      	sub	sp, #20
 800ec16:	af00      	add	r7, sp, #0
 800ec18:	6078      	str	r0, [r7, #4]
 800ec1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ec28:	d103      	bne.n	800ec32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	691b      	ldr	r3, [r3, #16]
 800ec2e:	60fb      	str	r3, [r7, #12]
 800ec30:	e00c      	b.n	800ec4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	3308      	adds	r3, #8
 800ec36:	60fb      	str	r3, [r7, #12]
 800ec38:	e002      	b.n	800ec40 <vListInsert+0x2e>
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	685b      	ldr	r3, [r3, #4]
 800ec3e:	60fb      	str	r3, [r7, #12]
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	685b      	ldr	r3, [r3, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	68ba      	ldr	r2, [r7, #8]
 800ec48:	429a      	cmp	r2, r3
 800ec4a:	d2f6      	bcs.n	800ec3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	685a      	ldr	r2, [r3, #4]
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	685b      	ldr	r3, [r3, #4]
 800ec58:	683a      	ldr	r2, [r7, #0]
 800ec5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	68fa      	ldr	r2, [r7, #12]
 800ec60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	683a      	ldr	r2, [r7, #0]
 800ec66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	687a      	ldr	r2, [r7, #4]
 800ec6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	1c5a      	adds	r2, r3, #1
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	601a      	str	r2, [r3, #0]
}
 800ec78:	bf00      	nop
 800ec7a:	3714      	adds	r7, #20
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec82:	4770      	bx	lr

0800ec84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ec84:	b480      	push	{r7}
 800ec86:	b085      	sub	sp, #20
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	691b      	ldr	r3, [r3, #16]
 800ec90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	685b      	ldr	r3, [r3, #4]
 800ec96:	687a      	ldr	r2, [r7, #4]
 800ec98:	6892      	ldr	r2, [r2, #8]
 800ec9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	689b      	ldr	r3, [r3, #8]
 800eca0:	687a      	ldr	r2, [r7, #4]
 800eca2:	6852      	ldr	r2, [r2, #4]
 800eca4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	685b      	ldr	r3, [r3, #4]
 800ecaa:	687a      	ldr	r2, [r7, #4]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d103      	bne.n	800ecb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	689a      	ldr	r2, [r3, #8]
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2200      	movs	r2, #0
 800ecbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	1e5a      	subs	r2, r3, #1
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	681b      	ldr	r3, [r3, #0]
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	3714      	adds	r7, #20
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd6:	4770      	bx	lr

0800ecd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b084      	sub	sp, #16
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
 800ece0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d10b      	bne.n	800ed04 <xQueueGenericReset+0x2c>
	__asm volatile
 800ecec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecf0:	f383 8811 	msr	BASEPRI, r3
 800ecf4:	f3bf 8f6f 	isb	sy
 800ecf8:	f3bf 8f4f 	dsb	sy
 800ecfc:	60bb      	str	r3, [r7, #8]
}
 800ecfe:	bf00      	nop
 800ed00:	bf00      	nop
 800ed02:	e7fd      	b.n	800ed00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ed04:	f002 fe00 	bl	8011908 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681a      	ldr	r2, [r3, #0]
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed10:	68f9      	ldr	r1, [r7, #12]
 800ed12:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ed14:	fb01 f303 	mul.w	r3, r1, r3
 800ed18:	441a      	add	r2, r3
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	2200      	movs	r2, #0
 800ed22:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	681a      	ldr	r2, [r3, #0]
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	681a      	ldr	r2, [r3, #0]
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed34:	3b01      	subs	r3, #1
 800ed36:	68f9      	ldr	r1, [r7, #12]
 800ed38:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ed3a:	fb01 f303 	mul.w	r3, r1, r3
 800ed3e:	441a      	add	r2, r3
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	22ff      	movs	r2, #255	@ 0xff
 800ed48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	22ff      	movs	r2, #255	@ 0xff
 800ed50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d114      	bne.n	800ed84 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	691b      	ldr	r3, [r3, #16]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d01a      	beq.n	800ed98 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	3310      	adds	r3, #16
 800ed66:	4618      	mov	r0, r3
 800ed68:	f001 fb5e 	bl	8010428 <xTaskRemoveFromEventList>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d012      	beq.n	800ed98 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ed72:	4b0d      	ldr	r3, [pc, #52]	@ (800eda8 <xQueueGenericReset+0xd0>)
 800ed74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed78:	601a      	str	r2, [r3, #0]
 800ed7a:	f3bf 8f4f 	dsb	sy
 800ed7e:	f3bf 8f6f 	isb	sy
 800ed82:	e009      	b.n	800ed98 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	3310      	adds	r3, #16
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f7ff fef1 	bl	800eb70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	3324      	adds	r3, #36	@ 0x24
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7ff feec 	bl	800eb70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ed98:	f002 fde8 	bl	801196c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ed9c:	2301      	movs	r3, #1
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3710      	adds	r7, #16
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}
 800eda6:	bf00      	nop
 800eda8:	e000ed04 	.word	0xe000ed04

0800edac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800edac:	b580      	push	{r7, lr}
 800edae:	b08e      	sub	sp, #56	@ 0x38
 800edb0:	af02      	add	r7, sp, #8
 800edb2:	60f8      	str	r0, [r7, #12]
 800edb4:	60b9      	str	r1, [r7, #8]
 800edb6:	607a      	str	r2, [r7, #4]
 800edb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d10b      	bne.n	800edd8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800edc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edc4:	f383 8811 	msr	BASEPRI, r3
 800edc8:	f3bf 8f6f 	isb	sy
 800edcc:	f3bf 8f4f 	dsb	sy
 800edd0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800edd2:	bf00      	nop
 800edd4:	bf00      	nop
 800edd6:	e7fd      	b.n	800edd4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d10b      	bne.n	800edf6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800edde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ede2:	f383 8811 	msr	BASEPRI, r3
 800ede6:	f3bf 8f6f 	isb	sy
 800edea:	f3bf 8f4f 	dsb	sy
 800edee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800edf0:	bf00      	nop
 800edf2:	bf00      	nop
 800edf4:	e7fd      	b.n	800edf2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d002      	beq.n	800ee02 <xQueueGenericCreateStatic+0x56>
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d001      	beq.n	800ee06 <xQueueGenericCreateStatic+0x5a>
 800ee02:	2301      	movs	r3, #1
 800ee04:	e000      	b.n	800ee08 <xQueueGenericCreateStatic+0x5c>
 800ee06:	2300      	movs	r3, #0
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d10b      	bne.n	800ee24 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ee0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee10:	f383 8811 	msr	BASEPRI, r3
 800ee14:	f3bf 8f6f 	isb	sy
 800ee18:	f3bf 8f4f 	dsb	sy
 800ee1c:	623b      	str	r3, [r7, #32]
}
 800ee1e:	bf00      	nop
 800ee20:	bf00      	nop
 800ee22:	e7fd      	b.n	800ee20 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d102      	bne.n	800ee30 <xQueueGenericCreateStatic+0x84>
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d101      	bne.n	800ee34 <xQueueGenericCreateStatic+0x88>
 800ee30:	2301      	movs	r3, #1
 800ee32:	e000      	b.n	800ee36 <xQueueGenericCreateStatic+0x8a>
 800ee34:	2300      	movs	r3, #0
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d10b      	bne.n	800ee52 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ee3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee3e:	f383 8811 	msr	BASEPRI, r3
 800ee42:	f3bf 8f6f 	isb	sy
 800ee46:	f3bf 8f4f 	dsb	sy
 800ee4a:	61fb      	str	r3, [r7, #28]
}
 800ee4c:	bf00      	nop
 800ee4e:	bf00      	nop
 800ee50:	e7fd      	b.n	800ee4e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ee52:	2350      	movs	r3, #80	@ 0x50
 800ee54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ee56:	697b      	ldr	r3, [r7, #20]
 800ee58:	2b50      	cmp	r3, #80	@ 0x50
 800ee5a:	d00b      	beq.n	800ee74 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ee5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee60:	f383 8811 	msr	BASEPRI, r3
 800ee64:	f3bf 8f6f 	isb	sy
 800ee68:	f3bf 8f4f 	dsb	sy
 800ee6c:	61bb      	str	r3, [r7, #24]
}
 800ee6e:	bf00      	nop
 800ee70:	bf00      	nop
 800ee72:	e7fd      	b.n	800ee70 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ee74:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ee7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d00d      	beq.n	800ee9c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ee80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee82:	2201      	movs	r2, #1
 800ee84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ee88:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ee8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee8e:	9300      	str	r3, [sp, #0]
 800ee90:	4613      	mov	r3, r2
 800ee92:	687a      	ldr	r2, [r7, #4]
 800ee94:	68b9      	ldr	r1, [r7, #8]
 800ee96:	68f8      	ldr	r0, [r7, #12]
 800ee98:	f000 f840 	bl	800ef1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ee9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	3730      	adds	r7, #48	@ 0x30
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}

0800eea6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800eea6:	b580      	push	{r7, lr}
 800eea8:	b08a      	sub	sp, #40	@ 0x28
 800eeaa:	af02      	add	r7, sp, #8
 800eeac:	60f8      	str	r0, [r7, #12]
 800eeae:	60b9      	str	r1, [r7, #8]
 800eeb0:	4613      	mov	r3, r2
 800eeb2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d10b      	bne.n	800eed2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800eeba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eebe:	f383 8811 	msr	BASEPRI, r3
 800eec2:	f3bf 8f6f 	isb	sy
 800eec6:	f3bf 8f4f 	dsb	sy
 800eeca:	613b      	str	r3, [r7, #16]
}
 800eecc:	bf00      	nop
 800eece:	bf00      	nop
 800eed0:	e7fd      	b.n	800eece <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	68ba      	ldr	r2, [r7, #8]
 800eed6:	fb02 f303 	mul.w	r3, r2, r3
 800eeda:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800eedc:	69fb      	ldr	r3, [r7, #28]
 800eede:	3350      	adds	r3, #80	@ 0x50
 800eee0:	4618      	mov	r0, r3
 800eee2:	f002 fe33 	bl	8011b4c <pvPortMalloc>
 800eee6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800eee8:	69bb      	ldr	r3, [r7, #24]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d011      	beq.n	800ef12 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800eeee:	69bb      	ldr	r3, [r7, #24]
 800eef0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	3350      	adds	r3, #80	@ 0x50
 800eef6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800eef8:	69bb      	ldr	r3, [r7, #24]
 800eefa:	2200      	movs	r2, #0
 800eefc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ef00:	79fa      	ldrb	r2, [r7, #7]
 800ef02:	69bb      	ldr	r3, [r7, #24]
 800ef04:	9300      	str	r3, [sp, #0]
 800ef06:	4613      	mov	r3, r2
 800ef08:	697a      	ldr	r2, [r7, #20]
 800ef0a:	68b9      	ldr	r1, [r7, #8]
 800ef0c:	68f8      	ldr	r0, [r7, #12]
 800ef0e:	f000 f805 	bl	800ef1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ef12:	69bb      	ldr	r3, [r7, #24]
	}
 800ef14:	4618      	mov	r0, r3
 800ef16:	3720      	adds	r7, #32
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}

0800ef1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b084      	sub	sp, #16
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	60f8      	str	r0, [r7, #12]
 800ef24:	60b9      	str	r1, [r7, #8]
 800ef26:	607a      	str	r2, [r7, #4]
 800ef28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d103      	bne.n	800ef38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ef30:	69bb      	ldr	r3, [r7, #24]
 800ef32:	69ba      	ldr	r2, [r7, #24]
 800ef34:	601a      	str	r2, [r3, #0]
 800ef36:	e002      	b.n	800ef3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ef38:	69bb      	ldr	r3, [r7, #24]
 800ef3a:	687a      	ldr	r2, [r7, #4]
 800ef3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ef3e:	69bb      	ldr	r3, [r7, #24]
 800ef40:	68fa      	ldr	r2, [r7, #12]
 800ef42:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ef44:	69bb      	ldr	r3, [r7, #24]
 800ef46:	68ba      	ldr	r2, [r7, #8]
 800ef48:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ef4a:	2101      	movs	r1, #1
 800ef4c:	69b8      	ldr	r0, [r7, #24]
 800ef4e:	f7ff fec3 	bl	800ecd8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ef52:	69bb      	ldr	r3, [r7, #24]
 800ef54:	78fa      	ldrb	r2, [r7, #3]
 800ef56:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ef5a:	bf00      	nop
 800ef5c:	3710      	adds	r7, #16
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}

0800ef62 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ef62:	b580      	push	{r7, lr}
 800ef64:	b082      	sub	sp, #8
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d00e      	beq.n	800ef8e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2200      	movs	r2, #0
 800ef74:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	2200      	movs	r2, #0
 800ef7a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2200      	movs	r2, #0
 800ef80:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ef82:	2300      	movs	r3, #0
 800ef84:	2200      	movs	r2, #0
 800ef86:	2100      	movs	r1, #0
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f000 f8a3 	bl	800f0d4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ef8e:	bf00      	nop
 800ef90:	3708      	adds	r7, #8
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}

0800ef96 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ef96:	b580      	push	{r7, lr}
 800ef98:	b086      	sub	sp, #24
 800ef9a:	af00      	add	r7, sp, #0
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800efa0:	2301      	movs	r3, #1
 800efa2:	617b      	str	r3, [r7, #20]
 800efa4:	2300      	movs	r3, #0
 800efa6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800efa8:	79fb      	ldrb	r3, [r7, #7]
 800efaa:	461a      	mov	r2, r3
 800efac:	6939      	ldr	r1, [r7, #16]
 800efae:	6978      	ldr	r0, [r7, #20]
 800efb0:	f7ff ff79 	bl	800eea6 <xQueueGenericCreate>
 800efb4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800efb6:	68f8      	ldr	r0, [r7, #12]
 800efb8:	f7ff ffd3 	bl	800ef62 <prvInitialiseMutex>

		return xNewQueue;
 800efbc:	68fb      	ldr	r3, [r7, #12]
	}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3718      	adds	r7, #24
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}

0800efc6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800efc6:	b580      	push	{r7, lr}
 800efc8:	b088      	sub	sp, #32
 800efca:	af02      	add	r7, sp, #8
 800efcc:	4603      	mov	r3, r0
 800efce:	6039      	str	r1, [r7, #0]
 800efd0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800efd2:	2301      	movs	r3, #1
 800efd4:	617b      	str	r3, [r7, #20]
 800efd6:	2300      	movs	r3, #0
 800efd8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800efda:	79fb      	ldrb	r3, [r7, #7]
 800efdc:	9300      	str	r3, [sp, #0]
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	2200      	movs	r2, #0
 800efe2:	6939      	ldr	r1, [r7, #16]
 800efe4:	6978      	ldr	r0, [r7, #20]
 800efe6:	f7ff fee1 	bl	800edac <xQueueGenericCreateStatic>
 800efea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800efec:	68f8      	ldr	r0, [r7, #12]
 800efee:	f7ff ffb8 	bl	800ef62 <prvInitialiseMutex>

		return xNewQueue;
 800eff2:	68fb      	ldr	r3, [r7, #12]
	}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3718      	adds	r7, #24
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}

0800effc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800effc:	b590      	push	{r4, r7, lr}
 800effe:	b087      	sub	sp, #28
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d10b      	bne.n	800f026 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800f00e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f012:	f383 8811 	msr	BASEPRI, r3
 800f016:	f3bf 8f6f 	isb	sy
 800f01a:	f3bf 8f4f 	dsb	sy
 800f01e:	60fb      	str	r3, [r7, #12]
}
 800f020:	bf00      	nop
 800f022:	bf00      	nop
 800f024:	e7fd      	b.n	800f022 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f026:	693b      	ldr	r3, [r7, #16]
 800f028:	689c      	ldr	r4, [r3, #8]
 800f02a:	f001 fbeb 	bl	8010804 <xTaskGetCurrentTaskHandle>
 800f02e:	4603      	mov	r3, r0
 800f030:	429c      	cmp	r4, r3
 800f032:	d111      	bne.n	800f058 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	68db      	ldr	r3, [r3, #12]
 800f038:	1e5a      	subs	r2, r3, #1
 800f03a:	693b      	ldr	r3, [r7, #16]
 800f03c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800f03e:	693b      	ldr	r3, [r7, #16]
 800f040:	68db      	ldr	r3, [r3, #12]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d105      	bne.n	800f052 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800f046:	2300      	movs	r3, #0
 800f048:	2200      	movs	r2, #0
 800f04a:	2100      	movs	r1, #0
 800f04c:	6938      	ldr	r0, [r7, #16]
 800f04e:	f000 f841 	bl	800f0d4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800f052:	2301      	movs	r3, #1
 800f054:	617b      	str	r3, [r7, #20]
 800f056:	e001      	b.n	800f05c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800f058:	2300      	movs	r3, #0
 800f05a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800f05c:	697b      	ldr	r3, [r7, #20]
	}
 800f05e:	4618      	mov	r0, r3
 800f060:	371c      	adds	r7, #28
 800f062:	46bd      	mov	sp, r7
 800f064:	bd90      	pop	{r4, r7, pc}

0800f066 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800f066:	b590      	push	{r4, r7, lr}
 800f068:	b087      	sub	sp, #28
 800f06a:	af00      	add	r7, sp, #0
 800f06c:	6078      	str	r0, [r7, #4]
 800f06e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f074:	693b      	ldr	r3, [r7, #16]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d10b      	bne.n	800f092 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800f07a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f07e:	f383 8811 	msr	BASEPRI, r3
 800f082:	f3bf 8f6f 	isb	sy
 800f086:	f3bf 8f4f 	dsb	sy
 800f08a:	60fb      	str	r3, [r7, #12]
}
 800f08c:	bf00      	nop
 800f08e:	bf00      	nop
 800f090:	e7fd      	b.n	800f08e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f092:	693b      	ldr	r3, [r7, #16]
 800f094:	689c      	ldr	r4, [r3, #8]
 800f096:	f001 fbb5 	bl	8010804 <xTaskGetCurrentTaskHandle>
 800f09a:	4603      	mov	r3, r0
 800f09c:	429c      	cmp	r4, r3
 800f09e:	d107      	bne.n	800f0b0 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f0a0:	693b      	ldr	r3, [r7, #16]
 800f0a2:	68db      	ldr	r3, [r3, #12]
 800f0a4:	1c5a      	adds	r2, r3, #1
 800f0a6:	693b      	ldr	r3, [r7, #16]
 800f0a8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	617b      	str	r3, [r7, #20]
 800f0ae:	e00c      	b.n	800f0ca <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800f0b0:	6839      	ldr	r1, [r7, #0]
 800f0b2:	6938      	ldr	r0, [r7, #16]
 800f0b4:	f000 fa90 	bl	800f5d8 <xQueueSemaphoreTake>
 800f0b8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800f0ba:	697b      	ldr	r3, [r7, #20]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d004      	beq.n	800f0ca <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f0c0:	693b      	ldr	r3, [r7, #16]
 800f0c2:	68db      	ldr	r3, [r3, #12]
 800f0c4:	1c5a      	adds	r2, r3, #1
 800f0c6:	693b      	ldr	r3, [r7, #16]
 800f0c8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800f0ca:	697b      	ldr	r3, [r7, #20]
	}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	371c      	adds	r7, #28
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd90      	pop	{r4, r7, pc}

0800f0d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b08e      	sub	sp, #56	@ 0x38
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	60f8      	str	r0, [r7, #12]
 800f0dc:	60b9      	str	r1, [r7, #8]
 800f0de:	607a      	str	r2, [r7, #4]
 800f0e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d10b      	bne.n	800f108 <xQueueGenericSend+0x34>
	__asm volatile
 800f0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0f4:	f383 8811 	msr	BASEPRI, r3
 800f0f8:	f3bf 8f6f 	isb	sy
 800f0fc:	f3bf 8f4f 	dsb	sy
 800f100:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f102:	bf00      	nop
 800f104:	bf00      	nop
 800f106:	e7fd      	b.n	800f104 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d103      	bne.n	800f116 <xQueueGenericSend+0x42>
 800f10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f112:	2b00      	cmp	r3, #0
 800f114:	d101      	bne.n	800f11a <xQueueGenericSend+0x46>
 800f116:	2301      	movs	r3, #1
 800f118:	e000      	b.n	800f11c <xQueueGenericSend+0x48>
 800f11a:	2300      	movs	r3, #0
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d10b      	bne.n	800f138 <xQueueGenericSend+0x64>
	__asm volatile
 800f120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f124:	f383 8811 	msr	BASEPRI, r3
 800f128:	f3bf 8f6f 	isb	sy
 800f12c:	f3bf 8f4f 	dsb	sy
 800f130:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f132:	bf00      	nop
 800f134:	bf00      	nop
 800f136:	e7fd      	b.n	800f134 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	2b02      	cmp	r3, #2
 800f13c:	d103      	bne.n	800f146 <xQueueGenericSend+0x72>
 800f13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f142:	2b01      	cmp	r3, #1
 800f144:	d101      	bne.n	800f14a <xQueueGenericSend+0x76>
 800f146:	2301      	movs	r3, #1
 800f148:	e000      	b.n	800f14c <xQueueGenericSend+0x78>
 800f14a:	2300      	movs	r3, #0
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d10b      	bne.n	800f168 <xQueueGenericSend+0x94>
	__asm volatile
 800f150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f154:	f383 8811 	msr	BASEPRI, r3
 800f158:	f3bf 8f6f 	isb	sy
 800f15c:	f3bf 8f4f 	dsb	sy
 800f160:	623b      	str	r3, [r7, #32]
}
 800f162:	bf00      	nop
 800f164:	bf00      	nop
 800f166:	e7fd      	b.n	800f164 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f168:	f001 fb5c 	bl	8010824 <xTaskGetSchedulerState>
 800f16c:	4603      	mov	r3, r0
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d102      	bne.n	800f178 <xQueueGenericSend+0xa4>
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d101      	bne.n	800f17c <xQueueGenericSend+0xa8>
 800f178:	2301      	movs	r3, #1
 800f17a:	e000      	b.n	800f17e <xQueueGenericSend+0xaa>
 800f17c:	2300      	movs	r3, #0
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d10b      	bne.n	800f19a <xQueueGenericSend+0xc6>
	__asm volatile
 800f182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f186:	f383 8811 	msr	BASEPRI, r3
 800f18a:	f3bf 8f6f 	isb	sy
 800f18e:	f3bf 8f4f 	dsb	sy
 800f192:	61fb      	str	r3, [r7, #28]
}
 800f194:	bf00      	nop
 800f196:	bf00      	nop
 800f198:	e7fd      	b.n	800f196 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f19a:	f002 fbb5 	bl	8011908 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f1a6:	429a      	cmp	r2, r3
 800f1a8:	d302      	bcc.n	800f1b0 <xQueueGenericSend+0xdc>
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	2b02      	cmp	r3, #2
 800f1ae:	d129      	bne.n	800f204 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f1b0:	683a      	ldr	r2, [r7, #0]
 800f1b2:	68b9      	ldr	r1, [r7, #8]
 800f1b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f1b6:	f000 fb37 	bl	800f828 <prvCopyDataToQueue>
 800f1ba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d010      	beq.n	800f1e6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f1c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1c6:	3324      	adds	r3, #36	@ 0x24
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f001 f92d 	bl	8010428 <xTaskRemoveFromEventList>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d013      	beq.n	800f1fc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f1d4:	4b3f      	ldr	r3, [pc, #252]	@ (800f2d4 <xQueueGenericSend+0x200>)
 800f1d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f1da:	601a      	str	r2, [r3, #0]
 800f1dc:	f3bf 8f4f 	dsb	sy
 800f1e0:	f3bf 8f6f 	isb	sy
 800f1e4:	e00a      	b.n	800f1fc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f1e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d007      	beq.n	800f1fc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f1ec:	4b39      	ldr	r3, [pc, #228]	@ (800f2d4 <xQueueGenericSend+0x200>)
 800f1ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f1f2:	601a      	str	r2, [r3, #0]
 800f1f4:	f3bf 8f4f 	dsb	sy
 800f1f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f1fc:	f002 fbb6 	bl	801196c <vPortExitCritical>
				return pdPASS;
 800f200:	2301      	movs	r3, #1
 800f202:	e063      	b.n	800f2cc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d103      	bne.n	800f212 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f20a:	f002 fbaf 	bl	801196c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f20e:	2300      	movs	r3, #0
 800f210:	e05c      	b.n	800f2cc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f214:	2b00      	cmp	r3, #0
 800f216:	d106      	bne.n	800f226 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f218:	f107 0314 	add.w	r3, r7, #20
 800f21c:	4618      	mov	r0, r3
 800f21e:	f001 f98f 	bl	8010540 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f222:	2301      	movs	r3, #1
 800f224:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f226:	f002 fba1 	bl	801196c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f22a:	f000 fecf 	bl	800ffcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f22e:	f002 fb6b 	bl	8011908 <vPortEnterCritical>
 800f232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f234:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f238:	b25b      	sxtb	r3, r3
 800f23a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f23e:	d103      	bne.n	800f248 <xQueueGenericSend+0x174>
 800f240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f242:	2200      	movs	r2, #0
 800f244:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f24a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f24e:	b25b      	sxtb	r3, r3
 800f250:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f254:	d103      	bne.n	800f25e <xQueueGenericSend+0x18a>
 800f256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f258:	2200      	movs	r2, #0
 800f25a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f25e:	f002 fb85 	bl	801196c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f262:	1d3a      	adds	r2, r7, #4
 800f264:	f107 0314 	add.w	r3, r7, #20
 800f268:	4611      	mov	r1, r2
 800f26a:	4618      	mov	r0, r3
 800f26c:	f001 f97e 	bl	801056c <xTaskCheckForTimeOut>
 800f270:	4603      	mov	r3, r0
 800f272:	2b00      	cmp	r3, #0
 800f274:	d124      	bne.n	800f2c0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f276:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f278:	f000 fbce 	bl	800fa18 <prvIsQueueFull>
 800f27c:	4603      	mov	r3, r0
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d018      	beq.n	800f2b4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f284:	3310      	adds	r3, #16
 800f286:	687a      	ldr	r2, [r7, #4]
 800f288:	4611      	mov	r1, r2
 800f28a:	4618      	mov	r0, r3
 800f28c:	f001 f87a 	bl	8010384 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f290:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f292:	f000 fb59 	bl	800f948 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f296:	f000 fea7 	bl	800ffe8 <xTaskResumeAll>
 800f29a:	4603      	mov	r3, r0
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	f47f af7c 	bne.w	800f19a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800f2a2:	4b0c      	ldr	r3, [pc, #48]	@ (800f2d4 <xQueueGenericSend+0x200>)
 800f2a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f2a8:	601a      	str	r2, [r3, #0]
 800f2aa:	f3bf 8f4f 	dsb	sy
 800f2ae:	f3bf 8f6f 	isb	sy
 800f2b2:	e772      	b.n	800f19a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f2b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f2b6:	f000 fb47 	bl	800f948 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f2ba:	f000 fe95 	bl	800ffe8 <xTaskResumeAll>
 800f2be:	e76c      	b.n	800f19a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f2c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f2c2:	f000 fb41 	bl	800f948 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f2c6:	f000 fe8f 	bl	800ffe8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f2ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	3738      	adds	r7, #56	@ 0x38
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}
 800f2d4:	e000ed04 	.word	0xe000ed04

0800f2d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b090      	sub	sp, #64	@ 0x40
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	60f8      	str	r0, [r7, #12]
 800f2e0:	60b9      	str	r1, [r7, #8]
 800f2e2:	607a      	str	r2, [r7, #4]
 800f2e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800f2ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d10b      	bne.n	800f308 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800f2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2f4:	f383 8811 	msr	BASEPRI, r3
 800f2f8:	f3bf 8f6f 	isb	sy
 800f2fc:	f3bf 8f4f 	dsb	sy
 800f300:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f302:	bf00      	nop
 800f304:	bf00      	nop
 800f306:	e7fd      	b.n	800f304 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d103      	bne.n	800f316 <xQueueGenericSendFromISR+0x3e>
 800f30e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f312:	2b00      	cmp	r3, #0
 800f314:	d101      	bne.n	800f31a <xQueueGenericSendFromISR+0x42>
 800f316:	2301      	movs	r3, #1
 800f318:	e000      	b.n	800f31c <xQueueGenericSendFromISR+0x44>
 800f31a:	2300      	movs	r3, #0
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d10b      	bne.n	800f338 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800f320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f324:	f383 8811 	msr	BASEPRI, r3
 800f328:	f3bf 8f6f 	isb	sy
 800f32c:	f3bf 8f4f 	dsb	sy
 800f330:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f332:	bf00      	nop
 800f334:	bf00      	nop
 800f336:	e7fd      	b.n	800f334 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	2b02      	cmp	r3, #2
 800f33c:	d103      	bne.n	800f346 <xQueueGenericSendFromISR+0x6e>
 800f33e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f342:	2b01      	cmp	r3, #1
 800f344:	d101      	bne.n	800f34a <xQueueGenericSendFromISR+0x72>
 800f346:	2301      	movs	r3, #1
 800f348:	e000      	b.n	800f34c <xQueueGenericSendFromISR+0x74>
 800f34a:	2300      	movs	r3, #0
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d10b      	bne.n	800f368 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800f350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f354:	f383 8811 	msr	BASEPRI, r3
 800f358:	f3bf 8f6f 	isb	sy
 800f35c:	f3bf 8f4f 	dsb	sy
 800f360:	623b      	str	r3, [r7, #32]
}
 800f362:	bf00      	nop
 800f364:	bf00      	nop
 800f366:	e7fd      	b.n	800f364 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f368:	f002 fbae 	bl	8011ac8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f36c:	f3ef 8211 	mrs	r2, BASEPRI
 800f370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f374:	f383 8811 	msr	BASEPRI, r3
 800f378:	f3bf 8f6f 	isb	sy
 800f37c:	f3bf 8f4f 	dsb	sy
 800f380:	61fa      	str	r2, [r7, #28]
 800f382:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f384:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f386:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f38a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f38e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f390:	429a      	cmp	r2, r3
 800f392:	d302      	bcc.n	800f39a <xQueueGenericSendFromISR+0xc2>
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	2b02      	cmp	r3, #2
 800f398:	d12f      	bne.n	800f3fa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f39c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f3a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f3aa:	683a      	ldr	r2, [r7, #0]
 800f3ac:	68b9      	ldr	r1, [r7, #8]
 800f3ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f3b0:	f000 fa3a 	bl	800f828 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f3b4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800f3b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f3bc:	d112      	bne.n	800f3e4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d016      	beq.n	800f3f4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3c8:	3324      	adds	r3, #36	@ 0x24
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f001 f82c 	bl	8010428 <xTaskRemoveFromEventList>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d00e      	beq.n	800f3f4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d00b      	beq.n	800f3f4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2201      	movs	r2, #1
 800f3e0:	601a      	str	r2, [r3, #0]
 800f3e2:	e007      	b.n	800f3f4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f3e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f3e8:	3301      	adds	r3, #1
 800f3ea:	b2db      	uxtb	r3, r3
 800f3ec:	b25a      	sxtb	r2, r3
 800f3ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800f3f8:	e001      	b.n	800f3fe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f3fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f400:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f402:	697b      	ldr	r3, [r7, #20]
 800f404:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f408:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f40a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f40c:	4618      	mov	r0, r3
 800f40e:	3740      	adds	r7, #64	@ 0x40
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}

0800f414 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b08c      	sub	sp, #48	@ 0x30
 800f418:	af00      	add	r7, sp, #0
 800f41a:	60f8      	str	r0, [r7, #12]
 800f41c:	60b9      	str	r1, [r7, #8]
 800f41e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f420:	2300      	movs	r3, #0
 800f422:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d10b      	bne.n	800f446 <xQueueReceive+0x32>
	__asm volatile
 800f42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f432:	f383 8811 	msr	BASEPRI, r3
 800f436:	f3bf 8f6f 	isb	sy
 800f43a:	f3bf 8f4f 	dsb	sy
 800f43e:	623b      	str	r3, [r7, #32]
}
 800f440:	bf00      	nop
 800f442:	bf00      	nop
 800f444:	e7fd      	b.n	800f442 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d103      	bne.n	800f454 <xQueueReceive+0x40>
 800f44c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f44e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f450:	2b00      	cmp	r3, #0
 800f452:	d101      	bne.n	800f458 <xQueueReceive+0x44>
 800f454:	2301      	movs	r3, #1
 800f456:	e000      	b.n	800f45a <xQueueReceive+0x46>
 800f458:	2300      	movs	r3, #0
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d10b      	bne.n	800f476 <xQueueReceive+0x62>
	__asm volatile
 800f45e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f462:	f383 8811 	msr	BASEPRI, r3
 800f466:	f3bf 8f6f 	isb	sy
 800f46a:	f3bf 8f4f 	dsb	sy
 800f46e:	61fb      	str	r3, [r7, #28]
}
 800f470:	bf00      	nop
 800f472:	bf00      	nop
 800f474:	e7fd      	b.n	800f472 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f476:	f001 f9d5 	bl	8010824 <xTaskGetSchedulerState>
 800f47a:	4603      	mov	r3, r0
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d102      	bne.n	800f486 <xQueueReceive+0x72>
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d101      	bne.n	800f48a <xQueueReceive+0x76>
 800f486:	2301      	movs	r3, #1
 800f488:	e000      	b.n	800f48c <xQueueReceive+0x78>
 800f48a:	2300      	movs	r3, #0
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d10b      	bne.n	800f4a8 <xQueueReceive+0x94>
	__asm volatile
 800f490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f494:	f383 8811 	msr	BASEPRI, r3
 800f498:	f3bf 8f6f 	isb	sy
 800f49c:	f3bf 8f4f 	dsb	sy
 800f4a0:	61bb      	str	r3, [r7, #24]
}
 800f4a2:	bf00      	nop
 800f4a4:	bf00      	nop
 800f4a6:	e7fd      	b.n	800f4a4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f4a8:	f002 fa2e 	bl	8011908 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f4ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4b0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d01f      	beq.n	800f4f8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f4b8:	68b9      	ldr	r1, [r7, #8]
 800f4ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f4bc:	f000 fa1e 	bl	800f8fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4c2:	1e5a      	subs	r2, r3, #1
 800f4c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4c6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f4c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4ca:	691b      	ldr	r3, [r3, #16]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d00f      	beq.n	800f4f0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f4d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4d2:	3310      	adds	r3, #16
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f000 ffa7 	bl	8010428 <xTaskRemoveFromEventList>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d007      	beq.n	800f4f0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f4e0:	4b3c      	ldr	r3, [pc, #240]	@ (800f5d4 <xQueueReceive+0x1c0>)
 800f4e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4e6:	601a      	str	r2, [r3, #0]
 800f4e8:	f3bf 8f4f 	dsb	sy
 800f4ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f4f0:	f002 fa3c 	bl	801196c <vPortExitCritical>
				return pdPASS;
 800f4f4:	2301      	movs	r3, #1
 800f4f6:	e069      	b.n	800f5cc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d103      	bne.n	800f506 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f4fe:	f002 fa35 	bl	801196c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f502:	2300      	movs	r3, #0
 800f504:	e062      	b.n	800f5cc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d106      	bne.n	800f51a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f50c:	f107 0310 	add.w	r3, r7, #16
 800f510:	4618      	mov	r0, r3
 800f512:	f001 f815 	bl	8010540 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f516:	2301      	movs	r3, #1
 800f518:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f51a:	f002 fa27 	bl	801196c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f51e:	f000 fd55 	bl	800ffcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f522:	f002 f9f1 	bl	8011908 <vPortEnterCritical>
 800f526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f528:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f52c:	b25b      	sxtb	r3, r3
 800f52e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f532:	d103      	bne.n	800f53c <xQueueReceive+0x128>
 800f534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f536:	2200      	movs	r2, #0
 800f538:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f53c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f53e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f542:	b25b      	sxtb	r3, r3
 800f544:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f548:	d103      	bne.n	800f552 <xQueueReceive+0x13e>
 800f54a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f54c:	2200      	movs	r2, #0
 800f54e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f552:	f002 fa0b 	bl	801196c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f556:	1d3a      	adds	r2, r7, #4
 800f558:	f107 0310 	add.w	r3, r7, #16
 800f55c:	4611      	mov	r1, r2
 800f55e:	4618      	mov	r0, r3
 800f560:	f001 f804 	bl	801056c <xTaskCheckForTimeOut>
 800f564:	4603      	mov	r3, r0
 800f566:	2b00      	cmp	r3, #0
 800f568:	d123      	bne.n	800f5b2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f56a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f56c:	f000 fa3e 	bl	800f9ec <prvIsQueueEmpty>
 800f570:	4603      	mov	r3, r0
 800f572:	2b00      	cmp	r3, #0
 800f574:	d017      	beq.n	800f5a6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f578:	3324      	adds	r3, #36	@ 0x24
 800f57a:	687a      	ldr	r2, [r7, #4]
 800f57c:	4611      	mov	r1, r2
 800f57e:	4618      	mov	r0, r3
 800f580:	f000 ff00 	bl	8010384 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f584:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f586:	f000 f9df 	bl	800f948 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f58a:	f000 fd2d 	bl	800ffe8 <xTaskResumeAll>
 800f58e:	4603      	mov	r3, r0
 800f590:	2b00      	cmp	r3, #0
 800f592:	d189      	bne.n	800f4a8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800f594:	4b0f      	ldr	r3, [pc, #60]	@ (800f5d4 <xQueueReceive+0x1c0>)
 800f596:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f59a:	601a      	str	r2, [r3, #0]
 800f59c:	f3bf 8f4f 	dsb	sy
 800f5a0:	f3bf 8f6f 	isb	sy
 800f5a4:	e780      	b.n	800f4a8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f5a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f5a8:	f000 f9ce 	bl	800f948 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f5ac:	f000 fd1c 	bl	800ffe8 <xTaskResumeAll>
 800f5b0:	e77a      	b.n	800f4a8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f5b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f5b4:	f000 f9c8 	bl	800f948 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f5b8:	f000 fd16 	bl	800ffe8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f5bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f5be:	f000 fa15 	bl	800f9ec <prvIsQueueEmpty>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	f43f af6f 	beq.w	800f4a8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f5ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3730      	adds	r7, #48	@ 0x30
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}
 800f5d4:	e000ed04 	.word	0xe000ed04

0800f5d8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b08e      	sub	sp, #56	@ 0x38
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
 800f5e0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f5ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d10b      	bne.n	800f60c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800f5f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5f8:	f383 8811 	msr	BASEPRI, r3
 800f5fc:	f3bf 8f6f 	isb	sy
 800f600:	f3bf 8f4f 	dsb	sy
 800f604:	623b      	str	r3, [r7, #32]
}
 800f606:	bf00      	nop
 800f608:	bf00      	nop
 800f60a:	e7fd      	b.n	800f608 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f60c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f60e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f610:	2b00      	cmp	r3, #0
 800f612:	d00b      	beq.n	800f62c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800f614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f618:	f383 8811 	msr	BASEPRI, r3
 800f61c:	f3bf 8f6f 	isb	sy
 800f620:	f3bf 8f4f 	dsb	sy
 800f624:	61fb      	str	r3, [r7, #28]
}
 800f626:	bf00      	nop
 800f628:	bf00      	nop
 800f62a:	e7fd      	b.n	800f628 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f62c:	f001 f8fa 	bl	8010824 <xTaskGetSchedulerState>
 800f630:	4603      	mov	r3, r0
 800f632:	2b00      	cmp	r3, #0
 800f634:	d102      	bne.n	800f63c <xQueueSemaphoreTake+0x64>
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d101      	bne.n	800f640 <xQueueSemaphoreTake+0x68>
 800f63c:	2301      	movs	r3, #1
 800f63e:	e000      	b.n	800f642 <xQueueSemaphoreTake+0x6a>
 800f640:	2300      	movs	r3, #0
 800f642:	2b00      	cmp	r3, #0
 800f644:	d10b      	bne.n	800f65e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800f646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f64a:	f383 8811 	msr	BASEPRI, r3
 800f64e:	f3bf 8f6f 	isb	sy
 800f652:	f3bf 8f4f 	dsb	sy
 800f656:	61bb      	str	r3, [r7, #24]
}
 800f658:	bf00      	nop
 800f65a:	bf00      	nop
 800f65c:	e7fd      	b.n	800f65a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f65e:	f002 f953 	bl	8011908 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f666:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d024      	beq.n	800f6b8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f66e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f670:	1e5a      	subs	r2, r3, #1
 800f672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f674:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d104      	bne.n	800f688 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f67e:	f001 fa4b 	bl	8010b18 <pvTaskIncrementMutexHeldCount>
 800f682:	4602      	mov	r2, r0
 800f684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f686:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f68a:	691b      	ldr	r3, [r3, #16]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d00f      	beq.n	800f6b0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f692:	3310      	adds	r3, #16
 800f694:	4618      	mov	r0, r3
 800f696:	f000 fec7 	bl	8010428 <xTaskRemoveFromEventList>
 800f69a:	4603      	mov	r3, r0
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d007      	beq.n	800f6b0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f6a0:	4b54      	ldr	r3, [pc, #336]	@ (800f7f4 <xQueueSemaphoreTake+0x21c>)
 800f6a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f6a6:	601a      	str	r2, [r3, #0]
 800f6a8:	f3bf 8f4f 	dsb	sy
 800f6ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f6b0:	f002 f95c 	bl	801196c <vPortExitCritical>
				return pdPASS;
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	e098      	b.n	800f7ea <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d112      	bne.n	800f6e4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d00b      	beq.n	800f6dc <xQueueSemaphoreTake+0x104>
	__asm volatile
 800f6c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6c8:	f383 8811 	msr	BASEPRI, r3
 800f6cc:	f3bf 8f6f 	isb	sy
 800f6d0:	f3bf 8f4f 	dsb	sy
 800f6d4:	617b      	str	r3, [r7, #20]
}
 800f6d6:	bf00      	nop
 800f6d8:	bf00      	nop
 800f6da:	e7fd      	b.n	800f6d8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f6dc:	f002 f946 	bl	801196c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	e082      	b.n	800f7ea <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f6e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d106      	bne.n	800f6f8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f6ea:	f107 030c 	add.w	r3, r7, #12
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f000 ff26 	bl	8010540 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f6f4:	2301      	movs	r3, #1
 800f6f6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f6f8:	f002 f938 	bl	801196c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f6fc:	f000 fc66 	bl	800ffcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f700:	f002 f902 	bl	8011908 <vPortEnterCritical>
 800f704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f706:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f70a:	b25b      	sxtb	r3, r3
 800f70c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f710:	d103      	bne.n	800f71a <xQueueSemaphoreTake+0x142>
 800f712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f714:	2200      	movs	r2, #0
 800f716:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f71a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f71c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f720:	b25b      	sxtb	r3, r3
 800f722:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f726:	d103      	bne.n	800f730 <xQueueSemaphoreTake+0x158>
 800f728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f72a:	2200      	movs	r2, #0
 800f72c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f730:	f002 f91c 	bl	801196c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f734:	463a      	mov	r2, r7
 800f736:	f107 030c 	add.w	r3, r7, #12
 800f73a:	4611      	mov	r1, r2
 800f73c:	4618      	mov	r0, r3
 800f73e:	f000 ff15 	bl	801056c <xTaskCheckForTimeOut>
 800f742:	4603      	mov	r3, r0
 800f744:	2b00      	cmp	r3, #0
 800f746:	d132      	bne.n	800f7ae <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f748:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f74a:	f000 f94f 	bl	800f9ec <prvIsQueueEmpty>
 800f74e:	4603      	mov	r3, r0
 800f750:	2b00      	cmp	r3, #0
 800f752:	d026      	beq.n	800f7a2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d109      	bne.n	800f770 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800f75c:	f002 f8d4 	bl	8011908 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f762:	689b      	ldr	r3, [r3, #8]
 800f764:	4618      	mov	r0, r3
 800f766:	f001 f87b 	bl	8010860 <xTaskPriorityInherit>
 800f76a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800f76c:	f002 f8fe 	bl	801196c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f772:	3324      	adds	r3, #36	@ 0x24
 800f774:	683a      	ldr	r2, [r7, #0]
 800f776:	4611      	mov	r1, r2
 800f778:	4618      	mov	r0, r3
 800f77a:	f000 fe03 	bl	8010384 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f77e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f780:	f000 f8e2 	bl	800f948 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f784:	f000 fc30 	bl	800ffe8 <xTaskResumeAll>
 800f788:	4603      	mov	r3, r0
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	f47f af67 	bne.w	800f65e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800f790:	4b18      	ldr	r3, [pc, #96]	@ (800f7f4 <xQueueSemaphoreTake+0x21c>)
 800f792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f796:	601a      	str	r2, [r3, #0]
 800f798:	f3bf 8f4f 	dsb	sy
 800f79c:	f3bf 8f6f 	isb	sy
 800f7a0:	e75d      	b.n	800f65e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f7a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f7a4:	f000 f8d0 	bl	800f948 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f7a8:	f000 fc1e 	bl	800ffe8 <xTaskResumeAll>
 800f7ac:	e757      	b.n	800f65e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f7ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f7b0:	f000 f8ca 	bl	800f948 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f7b4:	f000 fc18 	bl	800ffe8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f7b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f7ba:	f000 f917 	bl	800f9ec <prvIsQueueEmpty>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	f43f af4c 	beq.w	800f65e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d00d      	beq.n	800f7e8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800f7cc:	f002 f89c 	bl	8011908 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f7d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f7d2:	f000 f811 	bl	800f7f8 <prvGetDisinheritPriorityAfterTimeout>
 800f7d6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7da:	689b      	ldr	r3, [r3, #8]
 800f7dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f001 f916 	bl	8010a10 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f7e4:	f002 f8c2 	bl	801196c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f7e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	3738      	adds	r7, #56	@ 0x38
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	bd80      	pop	{r7, pc}
 800f7f2:	bf00      	nop
 800f7f4:	e000ed04 	.word	0xe000ed04

0800f7f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f7f8:	b480      	push	{r7}
 800f7fa:	b085      	sub	sp, #20
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f804:	2b00      	cmp	r3, #0
 800f806:	d006      	beq.n	800f816 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800f812:	60fb      	str	r3, [r7, #12]
 800f814:	e001      	b.n	800f81a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f816:	2300      	movs	r3, #0
 800f818:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f81a:	68fb      	ldr	r3, [r7, #12]
	}
 800f81c:	4618      	mov	r0, r3
 800f81e:	3714      	adds	r7, #20
 800f820:	46bd      	mov	sp, r7
 800f822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f826:	4770      	bx	lr

0800f828 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b086      	sub	sp, #24
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	60f8      	str	r0, [r7, #12]
 800f830:	60b9      	str	r1, [r7, #8]
 800f832:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f834:	2300      	movs	r3, #0
 800f836:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f83c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f842:	2b00      	cmp	r3, #0
 800f844:	d10d      	bne.n	800f862 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d14d      	bne.n	800f8ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	689b      	ldr	r3, [r3, #8]
 800f852:	4618      	mov	r0, r3
 800f854:	f001 f86c 	bl	8010930 <xTaskPriorityDisinherit>
 800f858:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	2200      	movs	r2, #0
 800f85e:	609a      	str	r2, [r3, #8]
 800f860:	e043      	b.n	800f8ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d119      	bne.n	800f89c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	6858      	ldr	r0, [r3, #4]
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f870:	461a      	mov	r2, r3
 800f872:	68b9      	ldr	r1, [r7, #8]
 800f874:	f012 fa51 	bl	8021d1a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	685a      	ldr	r2, [r3, #4]
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f880:	441a      	add	r2, r3
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	685a      	ldr	r2, [r3, #4]
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	689b      	ldr	r3, [r3, #8]
 800f88e:	429a      	cmp	r2, r3
 800f890:	d32b      	bcc.n	800f8ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	681a      	ldr	r2, [r3, #0]
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	605a      	str	r2, [r3, #4]
 800f89a:	e026      	b.n	800f8ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	68d8      	ldr	r0, [r3, #12]
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8a4:	461a      	mov	r2, r3
 800f8a6:	68b9      	ldr	r1, [r7, #8]
 800f8a8:	f012 fa37 	bl	8021d1a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	68da      	ldr	r2, [r3, #12]
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8b4:	425b      	negs	r3, r3
 800f8b6:	441a      	add	r2, r3
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	68da      	ldr	r2, [r3, #12]
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d207      	bcs.n	800f8d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	689a      	ldr	r2, [r3, #8]
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8d0:	425b      	negs	r3, r3
 800f8d2:	441a      	add	r2, r3
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2b02      	cmp	r3, #2
 800f8dc:	d105      	bne.n	800f8ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f8de:	693b      	ldr	r3, [r7, #16]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d002      	beq.n	800f8ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f8e4:	693b      	ldr	r3, [r7, #16]
 800f8e6:	3b01      	subs	r3, #1
 800f8e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f8ea:	693b      	ldr	r3, [r7, #16]
 800f8ec:	1c5a      	adds	r2, r3, #1
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800f8f2:	697b      	ldr	r3, [r7, #20]
}
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	3718      	adds	r7, #24
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	bd80      	pop	{r7, pc}

0800f8fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b082      	sub	sp, #8
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
 800f904:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d018      	beq.n	800f940 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	68da      	ldr	r2, [r3, #12]
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f916:	441a      	add	r2, r3
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	68da      	ldr	r2, [r3, #12]
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	689b      	ldr	r3, [r3, #8]
 800f924:	429a      	cmp	r2, r3
 800f926:	d303      	bcc.n	800f930 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	681a      	ldr	r2, [r3, #0]
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	68d9      	ldr	r1, [r3, #12]
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f938:	461a      	mov	r2, r3
 800f93a:	6838      	ldr	r0, [r7, #0]
 800f93c:	f012 f9ed 	bl	8021d1a <memcpy>
	}
}
 800f940:	bf00      	nop
 800f942:	3708      	adds	r7, #8
 800f944:	46bd      	mov	sp, r7
 800f946:	bd80      	pop	{r7, pc}

0800f948 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b084      	sub	sp, #16
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f950:	f001 ffda 	bl	8011908 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f95a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f95c:	e011      	b.n	800f982 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f962:	2b00      	cmp	r3, #0
 800f964:	d012      	beq.n	800f98c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	3324      	adds	r3, #36	@ 0x24
 800f96a:	4618      	mov	r0, r3
 800f96c:	f000 fd5c 	bl	8010428 <xTaskRemoveFromEventList>
 800f970:	4603      	mov	r3, r0
 800f972:	2b00      	cmp	r3, #0
 800f974:	d001      	beq.n	800f97a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f976:	f000 fe5d 	bl	8010634 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f97a:	7bfb      	ldrb	r3, [r7, #15]
 800f97c:	3b01      	subs	r3, #1
 800f97e:	b2db      	uxtb	r3, r3
 800f980:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f986:	2b00      	cmp	r3, #0
 800f988:	dce9      	bgt.n	800f95e <prvUnlockQueue+0x16>
 800f98a:	e000      	b.n	800f98e <prvUnlockQueue+0x46>
					break;
 800f98c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	22ff      	movs	r2, #255	@ 0xff
 800f992:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800f996:	f001 ffe9 	bl	801196c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f99a:	f001 ffb5 	bl	8011908 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f9a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f9a6:	e011      	b.n	800f9cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	691b      	ldr	r3, [r3, #16]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d012      	beq.n	800f9d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	3310      	adds	r3, #16
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f000 fd37 	bl	8010428 <xTaskRemoveFromEventList>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d001      	beq.n	800f9c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f9c0:	f000 fe38 	bl	8010634 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f9c4:	7bbb      	ldrb	r3, [r7, #14]
 800f9c6:	3b01      	subs	r3, #1
 800f9c8:	b2db      	uxtb	r3, r3
 800f9ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f9cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	dce9      	bgt.n	800f9a8 <prvUnlockQueue+0x60>
 800f9d4:	e000      	b.n	800f9d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f9d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	22ff      	movs	r2, #255	@ 0xff
 800f9dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800f9e0:	f001 ffc4 	bl	801196c <vPortExitCritical>
}
 800f9e4:	bf00      	nop
 800f9e6:	3710      	adds	r7, #16
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bd80      	pop	{r7, pc}

0800f9ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b084      	sub	sp, #16
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f9f4:	f001 ff88 	bl	8011908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d102      	bne.n	800fa06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fa00:	2301      	movs	r3, #1
 800fa02:	60fb      	str	r3, [r7, #12]
 800fa04:	e001      	b.n	800fa0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fa06:	2300      	movs	r3, #0
 800fa08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fa0a:	f001 ffaf 	bl	801196c <vPortExitCritical>

	return xReturn;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
}
 800fa10:	4618      	mov	r0, r3
 800fa12:	3710      	adds	r7, #16
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}

0800fa18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b084      	sub	sp, #16
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fa20:	f001 ff72 	bl	8011908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	d102      	bne.n	800fa36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fa30:	2301      	movs	r3, #1
 800fa32:	60fb      	str	r3, [r7, #12]
 800fa34:	e001      	b.n	800fa3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fa36:	2300      	movs	r3, #0
 800fa38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fa3a:	f001 ff97 	bl	801196c <vPortExitCritical>

	return xReturn;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
}
 800fa40:	4618      	mov	r0, r3
 800fa42:	3710      	adds	r7, #16
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}

0800fa48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fa48:	b480      	push	{r7}
 800fa4a:	b085      	sub	sp, #20
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
 800fa50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fa52:	2300      	movs	r3, #0
 800fa54:	60fb      	str	r3, [r7, #12]
 800fa56:	e014      	b.n	800fa82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fa58:	4a0f      	ldr	r2, [pc, #60]	@ (800fa98 <vQueueAddToRegistry+0x50>)
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d10b      	bne.n	800fa7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fa64:	490c      	ldr	r1, [pc, #48]	@ (800fa98 <vQueueAddToRegistry+0x50>)
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	683a      	ldr	r2, [r7, #0]
 800fa6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800fa6e:	4a0a      	ldr	r2, [pc, #40]	@ (800fa98 <vQueueAddToRegistry+0x50>)
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	00db      	lsls	r3, r3, #3
 800fa74:	4413      	add	r3, r2
 800fa76:	687a      	ldr	r2, [r7, #4]
 800fa78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fa7a:	e006      	b.n	800fa8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	3301      	adds	r3, #1
 800fa80:	60fb      	str	r3, [r7, #12]
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	2b07      	cmp	r3, #7
 800fa86:	d9e7      	bls.n	800fa58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fa88:	bf00      	nop
 800fa8a:	bf00      	nop
 800fa8c:	3714      	adds	r7, #20
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa94:	4770      	bx	lr
 800fa96:	bf00      	nop
 800fa98:	24033550 	.word	0x24033550

0800fa9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b086      	sub	sp, #24
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	60f8      	str	r0, [r7, #12]
 800faa4:	60b9      	str	r1, [r7, #8]
 800faa6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800faac:	f001 ff2c 	bl	8011908 <vPortEnterCritical>
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fab6:	b25b      	sxtb	r3, r3
 800fab8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fabc:	d103      	bne.n	800fac6 <vQueueWaitForMessageRestricted+0x2a>
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	2200      	movs	r2, #0
 800fac2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fac6:	697b      	ldr	r3, [r7, #20]
 800fac8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800facc:	b25b      	sxtb	r3, r3
 800face:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fad2:	d103      	bne.n	800fadc <vQueueWaitForMessageRestricted+0x40>
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	2200      	movs	r2, #0
 800fad8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fadc:	f001 ff46 	bl	801196c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d106      	bne.n	800faf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	3324      	adds	r3, #36	@ 0x24
 800faec:	687a      	ldr	r2, [r7, #4]
 800faee:	68b9      	ldr	r1, [r7, #8]
 800faf0:	4618      	mov	r0, r3
 800faf2:	f000 fc6d 	bl	80103d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800faf6:	6978      	ldr	r0, [r7, #20]
 800faf8:	f7ff ff26 	bl	800f948 <prvUnlockQueue>
	}
 800fafc:	bf00      	nop
 800fafe:	3718      	adds	r7, #24
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}

0800fb04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b08e      	sub	sp, #56	@ 0x38
 800fb08:	af04      	add	r7, sp, #16
 800fb0a:	60f8      	str	r0, [r7, #12]
 800fb0c:	60b9      	str	r1, [r7, #8]
 800fb0e:	607a      	str	r2, [r7, #4]
 800fb10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fb12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d10b      	bne.n	800fb30 <xTaskCreateStatic+0x2c>
	__asm volatile
 800fb18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb1c:	f383 8811 	msr	BASEPRI, r3
 800fb20:	f3bf 8f6f 	isb	sy
 800fb24:	f3bf 8f4f 	dsb	sy
 800fb28:	623b      	str	r3, [r7, #32]
}
 800fb2a:	bf00      	nop
 800fb2c:	bf00      	nop
 800fb2e:	e7fd      	b.n	800fb2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800fb30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d10b      	bne.n	800fb4e <xTaskCreateStatic+0x4a>
	__asm volatile
 800fb36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb3a:	f383 8811 	msr	BASEPRI, r3
 800fb3e:	f3bf 8f6f 	isb	sy
 800fb42:	f3bf 8f4f 	dsb	sy
 800fb46:	61fb      	str	r3, [r7, #28]
}
 800fb48:	bf00      	nop
 800fb4a:	bf00      	nop
 800fb4c:	e7fd      	b.n	800fb4a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fb4e:	23a8      	movs	r3, #168	@ 0xa8
 800fb50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fb52:	693b      	ldr	r3, [r7, #16]
 800fb54:	2ba8      	cmp	r3, #168	@ 0xa8
 800fb56:	d00b      	beq.n	800fb70 <xTaskCreateStatic+0x6c>
	__asm volatile
 800fb58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb5c:	f383 8811 	msr	BASEPRI, r3
 800fb60:	f3bf 8f6f 	isb	sy
 800fb64:	f3bf 8f4f 	dsb	sy
 800fb68:	61bb      	str	r3, [r7, #24]
}
 800fb6a:	bf00      	nop
 800fb6c:	bf00      	nop
 800fb6e:	e7fd      	b.n	800fb6c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fb70:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fb72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d01e      	beq.n	800fbb6 <xTaskCreateStatic+0xb2>
 800fb78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d01b      	beq.n	800fbb6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fb7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb80:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fb82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fb86:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fb88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb8a:	2202      	movs	r2, #2
 800fb8c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fb90:	2300      	movs	r3, #0
 800fb92:	9303      	str	r3, [sp, #12]
 800fb94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb96:	9302      	str	r3, [sp, #8]
 800fb98:	f107 0314 	add.w	r3, r7, #20
 800fb9c:	9301      	str	r3, [sp, #4]
 800fb9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fba0:	9300      	str	r3, [sp, #0]
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	687a      	ldr	r2, [r7, #4]
 800fba6:	68b9      	ldr	r1, [r7, #8]
 800fba8:	68f8      	ldr	r0, [r7, #12]
 800fbaa:	f000 f851 	bl	800fc50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fbae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fbb0:	f000 f8f6 	bl	800fda0 <prvAddNewTaskToReadyList>
 800fbb4:	e001      	b.n	800fbba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fbba:	697b      	ldr	r3, [r7, #20]
	}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3728      	adds	r7, #40	@ 0x28
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}

0800fbc4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b08c      	sub	sp, #48	@ 0x30
 800fbc8:	af04      	add	r7, sp, #16
 800fbca:	60f8      	str	r0, [r7, #12]
 800fbcc:	60b9      	str	r1, [r7, #8]
 800fbce:	603b      	str	r3, [r7, #0]
 800fbd0:	4613      	mov	r3, r2
 800fbd2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fbd4:	88fb      	ldrh	r3, [r7, #6]
 800fbd6:	009b      	lsls	r3, r3, #2
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f001 ffb7 	bl	8011b4c <pvPortMalloc>
 800fbde:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fbe0:	697b      	ldr	r3, [r7, #20]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d00e      	beq.n	800fc04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fbe6:	20a8      	movs	r0, #168	@ 0xa8
 800fbe8:	f001 ffb0 	bl	8011b4c <pvPortMalloc>
 800fbec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fbee:	69fb      	ldr	r3, [r7, #28]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d003      	beq.n	800fbfc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fbf4:	69fb      	ldr	r3, [r7, #28]
 800fbf6:	697a      	ldr	r2, [r7, #20]
 800fbf8:	631a      	str	r2, [r3, #48]	@ 0x30
 800fbfa:	e005      	b.n	800fc08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fbfc:	6978      	ldr	r0, [r7, #20]
 800fbfe:	f002 f873 	bl	8011ce8 <vPortFree>
 800fc02:	e001      	b.n	800fc08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fc04:	2300      	movs	r3, #0
 800fc06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fc08:	69fb      	ldr	r3, [r7, #28]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d017      	beq.n	800fc3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fc0e:	69fb      	ldr	r3, [r7, #28]
 800fc10:	2200      	movs	r2, #0
 800fc12:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fc16:	88fa      	ldrh	r2, [r7, #6]
 800fc18:	2300      	movs	r3, #0
 800fc1a:	9303      	str	r3, [sp, #12]
 800fc1c:	69fb      	ldr	r3, [r7, #28]
 800fc1e:	9302      	str	r3, [sp, #8]
 800fc20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc22:	9301      	str	r3, [sp, #4]
 800fc24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc26:	9300      	str	r3, [sp, #0]
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	68b9      	ldr	r1, [r7, #8]
 800fc2c:	68f8      	ldr	r0, [r7, #12]
 800fc2e:	f000 f80f 	bl	800fc50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fc32:	69f8      	ldr	r0, [r7, #28]
 800fc34:	f000 f8b4 	bl	800fda0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fc38:	2301      	movs	r3, #1
 800fc3a:	61bb      	str	r3, [r7, #24]
 800fc3c:	e002      	b.n	800fc44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fc3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fc42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fc44:	69bb      	ldr	r3, [r7, #24]
	}
 800fc46:	4618      	mov	r0, r3
 800fc48:	3720      	adds	r7, #32
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	bd80      	pop	{r7, pc}
	...

0800fc50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b088      	sub	sp, #32
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	60f8      	str	r0, [r7, #12]
 800fc58:	60b9      	str	r1, [r7, #8]
 800fc5a:	607a      	str	r2, [r7, #4]
 800fc5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fc5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc60:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	009b      	lsls	r3, r3, #2
 800fc66:	461a      	mov	r2, r3
 800fc68:	21a5      	movs	r1, #165	@ 0xa5
 800fc6a:	f011 ff37 	bl	8021adc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fc6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fc72:	6879      	ldr	r1, [r7, #4]
 800fc74:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800fc78:	440b      	add	r3, r1
 800fc7a:	009b      	lsls	r3, r3, #2
 800fc7c:	4413      	add	r3, r2
 800fc7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fc80:	69bb      	ldr	r3, [r7, #24]
 800fc82:	f023 0307 	bic.w	r3, r3, #7
 800fc86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fc88:	69bb      	ldr	r3, [r7, #24]
 800fc8a:	f003 0307 	and.w	r3, r3, #7
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d00b      	beq.n	800fcaa <prvInitialiseNewTask+0x5a>
	__asm volatile
 800fc92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc96:	f383 8811 	msr	BASEPRI, r3
 800fc9a:	f3bf 8f6f 	isb	sy
 800fc9e:	f3bf 8f4f 	dsb	sy
 800fca2:	617b      	str	r3, [r7, #20]
}
 800fca4:	bf00      	nop
 800fca6:	bf00      	nop
 800fca8:	e7fd      	b.n	800fca6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d01f      	beq.n	800fcf0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	61fb      	str	r3, [r7, #28]
 800fcb4:	e012      	b.n	800fcdc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fcb6:	68ba      	ldr	r2, [r7, #8]
 800fcb8:	69fb      	ldr	r3, [r7, #28]
 800fcba:	4413      	add	r3, r2
 800fcbc:	7819      	ldrb	r1, [r3, #0]
 800fcbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fcc0:	69fb      	ldr	r3, [r7, #28]
 800fcc2:	4413      	add	r3, r2
 800fcc4:	3334      	adds	r3, #52	@ 0x34
 800fcc6:	460a      	mov	r2, r1
 800fcc8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fcca:	68ba      	ldr	r2, [r7, #8]
 800fccc:	69fb      	ldr	r3, [r7, #28]
 800fcce:	4413      	add	r3, r2
 800fcd0:	781b      	ldrb	r3, [r3, #0]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d006      	beq.n	800fce4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fcd6:	69fb      	ldr	r3, [r7, #28]
 800fcd8:	3301      	adds	r3, #1
 800fcda:	61fb      	str	r3, [r7, #28]
 800fcdc:	69fb      	ldr	r3, [r7, #28]
 800fcde:	2b0f      	cmp	r3, #15
 800fce0:	d9e9      	bls.n	800fcb6 <prvInitialiseNewTask+0x66>
 800fce2:	e000      	b.n	800fce6 <prvInitialiseNewTask+0x96>
			{
				break;
 800fce4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fce8:	2200      	movs	r2, #0
 800fcea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800fcee:	e003      	b.n	800fcf8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fcf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fcf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcfa:	2b37      	cmp	r3, #55	@ 0x37
 800fcfc:	d901      	bls.n	800fd02 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fcfe:	2337      	movs	r3, #55	@ 0x37
 800fd00:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fd02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fd06:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fd08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fd0c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fd0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd10:	2200      	movs	r2, #0
 800fd12:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fd14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd16:	3304      	adds	r3, #4
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f7fe ff49 	bl	800ebb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fd1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd20:	3318      	adds	r3, #24
 800fd22:	4618      	mov	r0, r3
 800fd24:	f7fe ff44 	bl	800ebb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fd28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd2c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd30:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fd34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd36:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd3c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fd3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd40:	2200      	movs	r2, #0
 800fd42:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fd46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd48:	2200      	movs	r2, #0
 800fd4a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800fd4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd50:	3354      	adds	r3, #84	@ 0x54
 800fd52:	224c      	movs	r2, #76	@ 0x4c
 800fd54:	2100      	movs	r1, #0
 800fd56:	4618      	mov	r0, r3
 800fd58:	f011 fec0 	bl	8021adc <memset>
 800fd5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd5e:	4a0d      	ldr	r2, [pc, #52]	@ (800fd94 <prvInitialiseNewTask+0x144>)
 800fd60:	659a      	str	r2, [r3, #88]	@ 0x58
 800fd62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd64:	4a0c      	ldr	r2, [pc, #48]	@ (800fd98 <prvInitialiseNewTask+0x148>)
 800fd66:	65da      	str	r2, [r3, #92]	@ 0x5c
 800fd68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd6a:	4a0c      	ldr	r2, [pc, #48]	@ (800fd9c <prvInitialiseNewTask+0x14c>)
 800fd6c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fd6e:	683a      	ldr	r2, [r7, #0]
 800fd70:	68f9      	ldr	r1, [r7, #12]
 800fd72:	69b8      	ldr	r0, [r7, #24]
 800fd74:	f001 fc9a 	bl	80116ac <pxPortInitialiseStack>
 800fd78:	4602      	mov	r2, r0
 800fd7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fd7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d002      	beq.n	800fd8a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fd84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fd8a:	bf00      	nop
 800fd8c:	3720      	adds	r7, #32
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bd80      	pop	{r7, pc}
 800fd92:	bf00      	nop
 800fd94:	2406964c 	.word	0x2406964c
 800fd98:	240696b4 	.word	0x240696b4
 800fd9c:	2406971c 	.word	0x2406971c

0800fda0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b082      	sub	sp, #8
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fda8:	f001 fdae 	bl	8011908 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fdac:	4b2d      	ldr	r3, [pc, #180]	@ (800fe64 <prvAddNewTaskToReadyList+0xc4>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	3301      	adds	r3, #1
 800fdb2:	4a2c      	ldr	r2, [pc, #176]	@ (800fe64 <prvAddNewTaskToReadyList+0xc4>)
 800fdb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fdb6:	4b2c      	ldr	r3, [pc, #176]	@ (800fe68 <prvAddNewTaskToReadyList+0xc8>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d109      	bne.n	800fdd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fdbe:	4a2a      	ldr	r2, [pc, #168]	@ (800fe68 <prvAddNewTaskToReadyList+0xc8>)
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fdc4:	4b27      	ldr	r3, [pc, #156]	@ (800fe64 <prvAddNewTaskToReadyList+0xc4>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	2b01      	cmp	r3, #1
 800fdca:	d110      	bne.n	800fdee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fdcc:	f000 fc56 	bl	801067c <prvInitialiseTaskLists>
 800fdd0:	e00d      	b.n	800fdee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fdd2:	4b26      	ldr	r3, [pc, #152]	@ (800fe6c <prvAddNewTaskToReadyList+0xcc>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d109      	bne.n	800fdee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fdda:	4b23      	ldr	r3, [pc, #140]	@ (800fe68 <prvAddNewTaskToReadyList+0xc8>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fde4:	429a      	cmp	r2, r3
 800fde6:	d802      	bhi.n	800fdee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fde8:	4a1f      	ldr	r2, [pc, #124]	@ (800fe68 <prvAddNewTaskToReadyList+0xc8>)
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fdee:	4b20      	ldr	r3, [pc, #128]	@ (800fe70 <prvAddNewTaskToReadyList+0xd0>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	3301      	adds	r3, #1
 800fdf4:	4a1e      	ldr	r2, [pc, #120]	@ (800fe70 <prvAddNewTaskToReadyList+0xd0>)
 800fdf6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fdf8:	4b1d      	ldr	r3, [pc, #116]	@ (800fe70 <prvAddNewTaskToReadyList+0xd0>)
 800fdfa:	681a      	ldr	r2, [r3, #0]
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe04:	4b1b      	ldr	r3, [pc, #108]	@ (800fe74 <prvAddNewTaskToReadyList+0xd4>)
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	429a      	cmp	r2, r3
 800fe0a:	d903      	bls.n	800fe14 <prvAddNewTaskToReadyList+0x74>
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe10:	4a18      	ldr	r2, [pc, #96]	@ (800fe74 <prvAddNewTaskToReadyList+0xd4>)
 800fe12:	6013      	str	r3, [r2, #0]
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe18:	4613      	mov	r3, r2
 800fe1a:	009b      	lsls	r3, r3, #2
 800fe1c:	4413      	add	r3, r2
 800fe1e:	009b      	lsls	r3, r3, #2
 800fe20:	4a15      	ldr	r2, [pc, #84]	@ (800fe78 <prvAddNewTaskToReadyList+0xd8>)
 800fe22:	441a      	add	r2, r3
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	3304      	adds	r3, #4
 800fe28:	4619      	mov	r1, r3
 800fe2a:	4610      	mov	r0, r2
 800fe2c:	f7fe fecd 	bl	800ebca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fe30:	f001 fd9c 	bl	801196c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fe34:	4b0d      	ldr	r3, [pc, #52]	@ (800fe6c <prvAddNewTaskToReadyList+0xcc>)
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d00e      	beq.n	800fe5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fe3c:	4b0a      	ldr	r3, [pc, #40]	@ (800fe68 <prvAddNewTaskToReadyList+0xc8>)
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d207      	bcs.n	800fe5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fe4a:	4b0c      	ldr	r3, [pc, #48]	@ (800fe7c <prvAddNewTaskToReadyList+0xdc>)
 800fe4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe50:	601a      	str	r2, [r3, #0]
 800fe52:	f3bf 8f4f 	dsb	sy
 800fe56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fe5a:	bf00      	nop
 800fe5c:	3708      	adds	r7, #8
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
 800fe62:	bf00      	nop
 800fe64:	24033a64 	.word	0x24033a64
 800fe68:	24033590 	.word	0x24033590
 800fe6c:	24033a70 	.word	0x24033a70
 800fe70:	24033a80 	.word	0x24033a80
 800fe74:	24033a6c 	.word	0x24033a6c
 800fe78:	24033594 	.word	0x24033594
 800fe7c:	e000ed04 	.word	0xe000ed04

0800fe80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b084      	sub	sp, #16
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fe88:	2300      	movs	r3, #0
 800fe8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d018      	beq.n	800fec4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fe92:	4b14      	ldr	r3, [pc, #80]	@ (800fee4 <vTaskDelay+0x64>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d00b      	beq.n	800feb2 <vTaskDelay+0x32>
	__asm volatile
 800fe9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe9e:	f383 8811 	msr	BASEPRI, r3
 800fea2:	f3bf 8f6f 	isb	sy
 800fea6:	f3bf 8f4f 	dsb	sy
 800feaa:	60bb      	str	r3, [r7, #8]
}
 800feac:	bf00      	nop
 800feae:	bf00      	nop
 800feb0:	e7fd      	b.n	800feae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800feb2:	f000 f88b 	bl	800ffcc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800feb6:	2100      	movs	r1, #0
 800feb8:	6878      	ldr	r0, [r7, #4]
 800feba:	f001 f849 	bl	8010f50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800febe:	f000 f893 	bl	800ffe8 <xTaskResumeAll>
 800fec2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d107      	bne.n	800feda <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800feca:	4b07      	ldr	r3, [pc, #28]	@ (800fee8 <vTaskDelay+0x68>)
 800fecc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fed0:	601a      	str	r2, [r3, #0]
 800fed2:	f3bf 8f4f 	dsb	sy
 800fed6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800feda:	bf00      	nop
 800fedc:	3710      	adds	r7, #16
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}
 800fee2:	bf00      	nop
 800fee4:	24033a8c 	.word	0x24033a8c
 800fee8:	e000ed04 	.word	0xe000ed04

0800feec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b08a      	sub	sp, #40	@ 0x28
 800fef0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fef2:	2300      	movs	r3, #0
 800fef4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fef6:	2300      	movs	r3, #0
 800fef8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fefa:	463a      	mov	r2, r7
 800fefc:	1d39      	adds	r1, r7, #4
 800fefe:	f107 0308 	add.w	r3, r7, #8
 800ff02:	4618      	mov	r0, r3
 800ff04:	f7fe fe00 	bl	800eb08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ff08:	6839      	ldr	r1, [r7, #0]
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	68ba      	ldr	r2, [r7, #8]
 800ff0e:	9202      	str	r2, [sp, #8]
 800ff10:	9301      	str	r3, [sp, #4]
 800ff12:	2300      	movs	r3, #0
 800ff14:	9300      	str	r3, [sp, #0]
 800ff16:	2300      	movs	r3, #0
 800ff18:	460a      	mov	r2, r1
 800ff1a:	4924      	ldr	r1, [pc, #144]	@ (800ffac <vTaskStartScheduler+0xc0>)
 800ff1c:	4824      	ldr	r0, [pc, #144]	@ (800ffb0 <vTaskStartScheduler+0xc4>)
 800ff1e:	f7ff fdf1 	bl	800fb04 <xTaskCreateStatic>
 800ff22:	4603      	mov	r3, r0
 800ff24:	4a23      	ldr	r2, [pc, #140]	@ (800ffb4 <vTaskStartScheduler+0xc8>)
 800ff26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ff28:	4b22      	ldr	r3, [pc, #136]	@ (800ffb4 <vTaskStartScheduler+0xc8>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d002      	beq.n	800ff36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ff30:	2301      	movs	r3, #1
 800ff32:	617b      	str	r3, [r7, #20]
 800ff34:	e001      	b.n	800ff3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ff36:	2300      	movs	r3, #0
 800ff38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ff3a:	697b      	ldr	r3, [r7, #20]
 800ff3c:	2b01      	cmp	r3, #1
 800ff3e:	d102      	bne.n	800ff46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ff40:	f001 f85a 	bl	8010ff8 <xTimerCreateTimerTask>
 800ff44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ff46:	697b      	ldr	r3, [r7, #20]
 800ff48:	2b01      	cmp	r3, #1
 800ff4a:	d11b      	bne.n	800ff84 <vTaskStartScheduler+0x98>
	__asm volatile
 800ff4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff50:	f383 8811 	msr	BASEPRI, r3
 800ff54:	f3bf 8f6f 	isb	sy
 800ff58:	f3bf 8f4f 	dsb	sy
 800ff5c:	613b      	str	r3, [r7, #16]
}
 800ff5e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ff60:	4b15      	ldr	r3, [pc, #84]	@ (800ffb8 <vTaskStartScheduler+0xcc>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	3354      	adds	r3, #84	@ 0x54
 800ff66:	4a15      	ldr	r2, [pc, #84]	@ (800ffbc <vTaskStartScheduler+0xd0>)
 800ff68:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ff6a:	4b15      	ldr	r3, [pc, #84]	@ (800ffc0 <vTaskStartScheduler+0xd4>)
 800ff6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ff70:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ff72:	4b14      	ldr	r3, [pc, #80]	@ (800ffc4 <vTaskStartScheduler+0xd8>)
 800ff74:	2201      	movs	r2, #1
 800ff76:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ff78:	4b13      	ldr	r3, [pc, #76]	@ (800ffc8 <vTaskStartScheduler+0xdc>)
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ff7e:	f001 fc1f 	bl	80117c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ff82:	e00f      	b.n	800ffa4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ff84:	697b      	ldr	r3, [r7, #20]
 800ff86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ff8a:	d10b      	bne.n	800ffa4 <vTaskStartScheduler+0xb8>
	__asm volatile
 800ff8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff90:	f383 8811 	msr	BASEPRI, r3
 800ff94:	f3bf 8f6f 	isb	sy
 800ff98:	f3bf 8f4f 	dsb	sy
 800ff9c:	60fb      	str	r3, [r7, #12]
}
 800ff9e:	bf00      	nop
 800ffa0:	bf00      	nop
 800ffa2:	e7fd      	b.n	800ffa0 <vTaskStartScheduler+0xb4>
}
 800ffa4:	bf00      	nop
 800ffa6:	3718      	adds	r7, #24
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}
 800ffac:	08022c1c 	.word	0x08022c1c
 800ffb0:	0801064d 	.word	0x0801064d
 800ffb4:	24033a88 	.word	0x24033a88
 800ffb8:	24033590 	.word	0x24033590
 800ffbc:	240013a0 	.word	0x240013a0
 800ffc0:	24033a84 	.word	0x24033a84
 800ffc4:	24033a70 	.word	0x24033a70
 800ffc8:	24033a68 	.word	0x24033a68

0800ffcc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ffcc:	b480      	push	{r7}
 800ffce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ffd0:	4b04      	ldr	r3, [pc, #16]	@ (800ffe4 <vTaskSuspendAll+0x18>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	3301      	adds	r3, #1
 800ffd6:	4a03      	ldr	r2, [pc, #12]	@ (800ffe4 <vTaskSuspendAll+0x18>)
 800ffd8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ffda:	bf00      	nop
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe2:	4770      	bx	lr
 800ffe4:	24033a8c 	.word	0x24033a8c

0800ffe8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b084      	sub	sp, #16
 800ffec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ffee:	2300      	movs	r3, #0
 800fff0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fff2:	2300      	movs	r3, #0
 800fff4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fff6:	4b42      	ldr	r3, [pc, #264]	@ (8010100 <xTaskResumeAll+0x118>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d10b      	bne.n	8010016 <xTaskResumeAll+0x2e>
	__asm volatile
 800fffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010002:	f383 8811 	msr	BASEPRI, r3
 8010006:	f3bf 8f6f 	isb	sy
 801000a:	f3bf 8f4f 	dsb	sy
 801000e:	603b      	str	r3, [r7, #0]
}
 8010010:	bf00      	nop
 8010012:	bf00      	nop
 8010014:	e7fd      	b.n	8010012 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010016:	f001 fc77 	bl	8011908 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801001a:	4b39      	ldr	r3, [pc, #228]	@ (8010100 <xTaskResumeAll+0x118>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	3b01      	subs	r3, #1
 8010020:	4a37      	ldr	r2, [pc, #220]	@ (8010100 <xTaskResumeAll+0x118>)
 8010022:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010024:	4b36      	ldr	r3, [pc, #216]	@ (8010100 <xTaskResumeAll+0x118>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d162      	bne.n	80100f2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801002c:	4b35      	ldr	r3, [pc, #212]	@ (8010104 <xTaskResumeAll+0x11c>)
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d05e      	beq.n	80100f2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010034:	e02f      	b.n	8010096 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010036:	4b34      	ldr	r3, [pc, #208]	@ (8010108 <xTaskResumeAll+0x120>)
 8010038:	68db      	ldr	r3, [r3, #12]
 801003a:	68db      	ldr	r3, [r3, #12]
 801003c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	3318      	adds	r3, #24
 8010042:	4618      	mov	r0, r3
 8010044:	f7fe fe1e 	bl	800ec84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	3304      	adds	r3, #4
 801004c:	4618      	mov	r0, r3
 801004e:	f7fe fe19 	bl	800ec84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010056:	4b2d      	ldr	r3, [pc, #180]	@ (801010c <xTaskResumeAll+0x124>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	429a      	cmp	r2, r3
 801005c:	d903      	bls.n	8010066 <xTaskResumeAll+0x7e>
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010062:	4a2a      	ldr	r2, [pc, #168]	@ (801010c <xTaskResumeAll+0x124>)
 8010064:	6013      	str	r3, [r2, #0]
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801006a:	4613      	mov	r3, r2
 801006c:	009b      	lsls	r3, r3, #2
 801006e:	4413      	add	r3, r2
 8010070:	009b      	lsls	r3, r3, #2
 8010072:	4a27      	ldr	r2, [pc, #156]	@ (8010110 <xTaskResumeAll+0x128>)
 8010074:	441a      	add	r2, r3
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	3304      	adds	r3, #4
 801007a:	4619      	mov	r1, r3
 801007c:	4610      	mov	r0, r2
 801007e:	f7fe fda4 	bl	800ebca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010086:	4b23      	ldr	r3, [pc, #140]	@ (8010114 <xTaskResumeAll+0x12c>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801008c:	429a      	cmp	r2, r3
 801008e:	d302      	bcc.n	8010096 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8010090:	4b21      	ldr	r3, [pc, #132]	@ (8010118 <xTaskResumeAll+0x130>)
 8010092:	2201      	movs	r2, #1
 8010094:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010096:	4b1c      	ldr	r3, [pc, #112]	@ (8010108 <xTaskResumeAll+0x120>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d1cb      	bne.n	8010036 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d001      	beq.n	80100a8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80100a4:	f000 fb8e 	bl	80107c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80100a8:	4b1c      	ldr	r3, [pc, #112]	@ (801011c <xTaskResumeAll+0x134>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d010      	beq.n	80100d6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80100b4:	f000 f846 	bl	8010144 <xTaskIncrementTick>
 80100b8:	4603      	mov	r3, r0
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d002      	beq.n	80100c4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80100be:	4b16      	ldr	r3, [pc, #88]	@ (8010118 <xTaskResumeAll+0x130>)
 80100c0:	2201      	movs	r2, #1
 80100c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	3b01      	subs	r3, #1
 80100c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d1f1      	bne.n	80100b4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80100d0:	4b12      	ldr	r3, [pc, #72]	@ (801011c <xTaskResumeAll+0x134>)
 80100d2:	2200      	movs	r2, #0
 80100d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80100d6:	4b10      	ldr	r3, [pc, #64]	@ (8010118 <xTaskResumeAll+0x130>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d009      	beq.n	80100f2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80100de:	2301      	movs	r3, #1
 80100e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80100e2:	4b0f      	ldr	r3, [pc, #60]	@ (8010120 <xTaskResumeAll+0x138>)
 80100e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80100e8:	601a      	str	r2, [r3, #0]
 80100ea:	f3bf 8f4f 	dsb	sy
 80100ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80100f2:	f001 fc3b 	bl	801196c <vPortExitCritical>

	return xAlreadyYielded;
 80100f6:	68bb      	ldr	r3, [r7, #8]
}
 80100f8:	4618      	mov	r0, r3
 80100fa:	3710      	adds	r7, #16
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}
 8010100:	24033a8c 	.word	0x24033a8c
 8010104:	24033a64 	.word	0x24033a64
 8010108:	24033a24 	.word	0x24033a24
 801010c:	24033a6c 	.word	0x24033a6c
 8010110:	24033594 	.word	0x24033594
 8010114:	24033590 	.word	0x24033590
 8010118:	24033a78 	.word	0x24033a78
 801011c:	24033a74 	.word	0x24033a74
 8010120:	e000ed04 	.word	0xe000ed04

08010124 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010124:	b480      	push	{r7}
 8010126:	b083      	sub	sp, #12
 8010128:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801012a:	4b05      	ldr	r3, [pc, #20]	@ (8010140 <xTaskGetTickCount+0x1c>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010130:	687b      	ldr	r3, [r7, #4]
}
 8010132:	4618      	mov	r0, r3
 8010134:	370c      	adds	r7, #12
 8010136:	46bd      	mov	sp, r7
 8010138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013c:	4770      	bx	lr
 801013e:	bf00      	nop
 8010140:	24033a68 	.word	0x24033a68

08010144 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b086      	sub	sp, #24
 8010148:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801014a:	2300      	movs	r3, #0
 801014c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801014e:	4b4f      	ldr	r3, [pc, #316]	@ (801028c <xTaskIncrementTick+0x148>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	2b00      	cmp	r3, #0
 8010154:	f040 8090 	bne.w	8010278 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010158:	4b4d      	ldr	r3, [pc, #308]	@ (8010290 <xTaskIncrementTick+0x14c>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	3301      	adds	r3, #1
 801015e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010160:	4a4b      	ldr	r2, [pc, #300]	@ (8010290 <xTaskIncrementTick+0x14c>)
 8010162:	693b      	ldr	r3, [r7, #16]
 8010164:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010166:	693b      	ldr	r3, [r7, #16]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d121      	bne.n	80101b0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 801016c:	4b49      	ldr	r3, [pc, #292]	@ (8010294 <xTaskIncrementTick+0x150>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d00b      	beq.n	801018e <xTaskIncrementTick+0x4a>
	__asm volatile
 8010176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801017a:	f383 8811 	msr	BASEPRI, r3
 801017e:	f3bf 8f6f 	isb	sy
 8010182:	f3bf 8f4f 	dsb	sy
 8010186:	603b      	str	r3, [r7, #0]
}
 8010188:	bf00      	nop
 801018a:	bf00      	nop
 801018c:	e7fd      	b.n	801018a <xTaskIncrementTick+0x46>
 801018e:	4b41      	ldr	r3, [pc, #260]	@ (8010294 <xTaskIncrementTick+0x150>)
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	60fb      	str	r3, [r7, #12]
 8010194:	4b40      	ldr	r3, [pc, #256]	@ (8010298 <xTaskIncrementTick+0x154>)
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	4a3e      	ldr	r2, [pc, #248]	@ (8010294 <xTaskIncrementTick+0x150>)
 801019a:	6013      	str	r3, [r2, #0]
 801019c:	4a3e      	ldr	r2, [pc, #248]	@ (8010298 <xTaskIncrementTick+0x154>)
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	6013      	str	r3, [r2, #0]
 80101a2:	4b3e      	ldr	r3, [pc, #248]	@ (801029c <xTaskIncrementTick+0x158>)
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	3301      	adds	r3, #1
 80101a8:	4a3c      	ldr	r2, [pc, #240]	@ (801029c <xTaskIncrementTick+0x158>)
 80101aa:	6013      	str	r3, [r2, #0]
 80101ac:	f000 fb0a 	bl	80107c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80101b0:	4b3b      	ldr	r3, [pc, #236]	@ (80102a0 <xTaskIncrementTick+0x15c>)
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	693a      	ldr	r2, [r7, #16]
 80101b6:	429a      	cmp	r2, r3
 80101b8:	d349      	bcc.n	801024e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80101ba:	4b36      	ldr	r3, [pc, #216]	@ (8010294 <xTaskIncrementTick+0x150>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d104      	bne.n	80101ce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101c4:	4b36      	ldr	r3, [pc, #216]	@ (80102a0 <xTaskIncrementTick+0x15c>)
 80101c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80101ca:	601a      	str	r2, [r3, #0]
					break;
 80101cc:	e03f      	b.n	801024e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101ce:	4b31      	ldr	r3, [pc, #196]	@ (8010294 <xTaskIncrementTick+0x150>)
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	68db      	ldr	r3, [r3, #12]
 80101d4:	68db      	ldr	r3, [r3, #12]
 80101d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	685b      	ldr	r3, [r3, #4]
 80101dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80101de:	693a      	ldr	r2, [r7, #16]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	429a      	cmp	r2, r3
 80101e4:	d203      	bcs.n	80101ee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80101e6:	4a2e      	ldr	r2, [pc, #184]	@ (80102a0 <xTaskIncrementTick+0x15c>)
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80101ec:	e02f      	b.n	801024e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	3304      	adds	r3, #4
 80101f2:	4618      	mov	r0, r3
 80101f4:	f7fe fd46 	bl	800ec84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80101f8:	68bb      	ldr	r3, [r7, #8]
 80101fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d004      	beq.n	801020a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	3318      	adds	r3, #24
 8010204:	4618      	mov	r0, r3
 8010206:	f7fe fd3d 	bl	800ec84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801020a:	68bb      	ldr	r3, [r7, #8]
 801020c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801020e:	4b25      	ldr	r3, [pc, #148]	@ (80102a4 <xTaskIncrementTick+0x160>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	429a      	cmp	r2, r3
 8010214:	d903      	bls.n	801021e <xTaskIncrementTick+0xda>
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801021a:	4a22      	ldr	r2, [pc, #136]	@ (80102a4 <xTaskIncrementTick+0x160>)
 801021c:	6013      	str	r3, [r2, #0]
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010222:	4613      	mov	r3, r2
 8010224:	009b      	lsls	r3, r3, #2
 8010226:	4413      	add	r3, r2
 8010228:	009b      	lsls	r3, r3, #2
 801022a:	4a1f      	ldr	r2, [pc, #124]	@ (80102a8 <xTaskIncrementTick+0x164>)
 801022c:	441a      	add	r2, r3
 801022e:	68bb      	ldr	r3, [r7, #8]
 8010230:	3304      	adds	r3, #4
 8010232:	4619      	mov	r1, r3
 8010234:	4610      	mov	r0, r2
 8010236:	f7fe fcc8 	bl	800ebca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801023a:	68bb      	ldr	r3, [r7, #8]
 801023c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801023e:	4b1b      	ldr	r3, [pc, #108]	@ (80102ac <xTaskIncrementTick+0x168>)
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010244:	429a      	cmp	r2, r3
 8010246:	d3b8      	bcc.n	80101ba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8010248:	2301      	movs	r3, #1
 801024a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801024c:	e7b5      	b.n	80101ba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801024e:	4b17      	ldr	r3, [pc, #92]	@ (80102ac <xTaskIncrementTick+0x168>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010254:	4914      	ldr	r1, [pc, #80]	@ (80102a8 <xTaskIncrementTick+0x164>)
 8010256:	4613      	mov	r3, r2
 8010258:	009b      	lsls	r3, r3, #2
 801025a:	4413      	add	r3, r2
 801025c:	009b      	lsls	r3, r3, #2
 801025e:	440b      	add	r3, r1
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	2b01      	cmp	r3, #1
 8010264:	d901      	bls.n	801026a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8010266:	2301      	movs	r3, #1
 8010268:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801026a:	4b11      	ldr	r3, [pc, #68]	@ (80102b0 <xTaskIncrementTick+0x16c>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d007      	beq.n	8010282 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8010272:	2301      	movs	r3, #1
 8010274:	617b      	str	r3, [r7, #20]
 8010276:	e004      	b.n	8010282 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010278:	4b0e      	ldr	r3, [pc, #56]	@ (80102b4 <xTaskIncrementTick+0x170>)
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	3301      	adds	r3, #1
 801027e:	4a0d      	ldr	r2, [pc, #52]	@ (80102b4 <xTaskIncrementTick+0x170>)
 8010280:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010282:	697b      	ldr	r3, [r7, #20]
}
 8010284:	4618      	mov	r0, r3
 8010286:	3718      	adds	r7, #24
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}
 801028c:	24033a8c 	.word	0x24033a8c
 8010290:	24033a68 	.word	0x24033a68
 8010294:	24033a1c 	.word	0x24033a1c
 8010298:	24033a20 	.word	0x24033a20
 801029c:	24033a7c 	.word	0x24033a7c
 80102a0:	24033a84 	.word	0x24033a84
 80102a4:	24033a6c 	.word	0x24033a6c
 80102a8:	24033594 	.word	0x24033594
 80102ac:	24033590 	.word	0x24033590
 80102b0:	24033a78 	.word	0x24033a78
 80102b4:	24033a74 	.word	0x24033a74

080102b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80102b8:	b480      	push	{r7}
 80102ba:	b085      	sub	sp, #20
 80102bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80102be:	4b2b      	ldr	r3, [pc, #172]	@ (801036c <vTaskSwitchContext+0xb4>)
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d003      	beq.n	80102ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80102c6:	4b2a      	ldr	r3, [pc, #168]	@ (8010370 <vTaskSwitchContext+0xb8>)
 80102c8:	2201      	movs	r2, #1
 80102ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80102cc:	e047      	b.n	801035e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80102ce:	4b28      	ldr	r3, [pc, #160]	@ (8010370 <vTaskSwitchContext+0xb8>)
 80102d0:	2200      	movs	r2, #0
 80102d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102d4:	4b27      	ldr	r3, [pc, #156]	@ (8010374 <vTaskSwitchContext+0xbc>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	60fb      	str	r3, [r7, #12]
 80102da:	e011      	b.n	8010300 <vTaskSwitchContext+0x48>
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d10b      	bne.n	80102fa <vTaskSwitchContext+0x42>
	__asm volatile
 80102e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102e6:	f383 8811 	msr	BASEPRI, r3
 80102ea:	f3bf 8f6f 	isb	sy
 80102ee:	f3bf 8f4f 	dsb	sy
 80102f2:	607b      	str	r3, [r7, #4]
}
 80102f4:	bf00      	nop
 80102f6:	bf00      	nop
 80102f8:	e7fd      	b.n	80102f6 <vTaskSwitchContext+0x3e>
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	3b01      	subs	r3, #1
 80102fe:	60fb      	str	r3, [r7, #12]
 8010300:	491d      	ldr	r1, [pc, #116]	@ (8010378 <vTaskSwitchContext+0xc0>)
 8010302:	68fa      	ldr	r2, [r7, #12]
 8010304:	4613      	mov	r3, r2
 8010306:	009b      	lsls	r3, r3, #2
 8010308:	4413      	add	r3, r2
 801030a:	009b      	lsls	r3, r3, #2
 801030c:	440b      	add	r3, r1
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d0e3      	beq.n	80102dc <vTaskSwitchContext+0x24>
 8010314:	68fa      	ldr	r2, [r7, #12]
 8010316:	4613      	mov	r3, r2
 8010318:	009b      	lsls	r3, r3, #2
 801031a:	4413      	add	r3, r2
 801031c:	009b      	lsls	r3, r3, #2
 801031e:	4a16      	ldr	r2, [pc, #88]	@ (8010378 <vTaskSwitchContext+0xc0>)
 8010320:	4413      	add	r3, r2
 8010322:	60bb      	str	r3, [r7, #8]
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	685b      	ldr	r3, [r3, #4]
 8010328:	685a      	ldr	r2, [r3, #4]
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	605a      	str	r2, [r3, #4]
 801032e:	68bb      	ldr	r3, [r7, #8]
 8010330:	685a      	ldr	r2, [r3, #4]
 8010332:	68bb      	ldr	r3, [r7, #8]
 8010334:	3308      	adds	r3, #8
 8010336:	429a      	cmp	r2, r3
 8010338:	d104      	bne.n	8010344 <vTaskSwitchContext+0x8c>
 801033a:	68bb      	ldr	r3, [r7, #8]
 801033c:	685b      	ldr	r3, [r3, #4]
 801033e:	685a      	ldr	r2, [r3, #4]
 8010340:	68bb      	ldr	r3, [r7, #8]
 8010342:	605a      	str	r2, [r3, #4]
 8010344:	68bb      	ldr	r3, [r7, #8]
 8010346:	685b      	ldr	r3, [r3, #4]
 8010348:	68db      	ldr	r3, [r3, #12]
 801034a:	4a0c      	ldr	r2, [pc, #48]	@ (801037c <vTaskSwitchContext+0xc4>)
 801034c:	6013      	str	r3, [r2, #0]
 801034e:	4a09      	ldr	r2, [pc, #36]	@ (8010374 <vTaskSwitchContext+0xbc>)
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010354:	4b09      	ldr	r3, [pc, #36]	@ (801037c <vTaskSwitchContext+0xc4>)
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	3354      	adds	r3, #84	@ 0x54
 801035a:	4a09      	ldr	r2, [pc, #36]	@ (8010380 <vTaskSwitchContext+0xc8>)
 801035c:	6013      	str	r3, [r2, #0]
}
 801035e:	bf00      	nop
 8010360:	3714      	adds	r7, #20
 8010362:	46bd      	mov	sp, r7
 8010364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010368:	4770      	bx	lr
 801036a:	bf00      	nop
 801036c:	24033a8c 	.word	0x24033a8c
 8010370:	24033a78 	.word	0x24033a78
 8010374:	24033a6c 	.word	0x24033a6c
 8010378:	24033594 	.word	0x24033594
 801037c:	24033590 	.word	0x24033590
 8010380:	240013a0 	.word	0x240013a0

08010384 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b084      	sub	sp, #16
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
 801038c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d10b      	bne.n	80103ac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8010394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010398:	f383 8811 	msr	BASEPRI, r3
 801039c:	f3bf 8f6f 	isb	sy
 80103a0:	f3bf 8f4f 	dsb	sy
 80103a4:	60fb      	str	r3, [r7, #12]
}
 80103a6:	bf00      	nop
 80103a8:	bf00      	nop
 80103aa:	e7fd      	b.n	80103a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80103ac:	4b07      	ldr	r3, [pc, #28]	@ (80103cc <vTaskPlaceOnEventList+0x48>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	3318      	adds	r3, #24
 80103b2:	4619      	mov	r1, r3
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f7fe fc2c 	bl	800ec12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80103ba:	2101      	movs	r1, #1
 80103bc:	6838      	ldr	r0, [r7, #0]
 80103be:	f000 fdc7 	bl	8010f50 <prvAddCurrentTaskToDelayedList>
}
 80103c2:	bf00      	nop
 80103c4:	3710      	adds	r7, #16
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bd80      	pop	{r7, pc}
 80103ca:	bf00      	nop
 80103cc:	24033590 	.word	0x24033590

080103d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b086      	sub	sp, #24
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	60f8      	str	r0, [r7, #12]
 80103d8:	60b9      	str	r1, [r7, #8]
 80103da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d10b      	bne.n	80103fa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80103e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103e6:	f383 8811 	msr	BASEPRI, r3
 80103ea:	f3bf 8f6f 	isb	sy
 80103ee:	f3bf 8f4f 	dsb	sy
 80103f2:	617b      	str	r3, [r7, #20]
}
 80103f4:	bf00      	nop
 80103f6:	bf00      	nop
 80103f8:	e7fd      	b.n	80103f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80103fa:	4b0a      	ldr	r3, [pc, #40]	@ (8010424 <vTaskPlaceOnEventListRestricted+0x54>)
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	3318      	adds	r3, #24
 8010400:	4619      	mov	r1, r3
 8010402:	68f8      	ldr	r0, [r7, #12]
 8010404:	f7fe fbe1 	bl	800ebca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d002      	beq.n	8010414 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801040e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010412:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010414:	6879      	ldr	r1, [r7, #4]
 8010416:	68b8      	ldr	r0, [r7, #8]
 8010418:	f000 fd9a 	bl	8010f50 <prvAddCurrentTaskToDelayedList>
	}
 801041c:	bf00      	nop
 801041e:	3718      	adds	r7, #24
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}
 8010424:	24033590 	.word	0x24033590

08010428 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b086      	sub	sp, #24
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	68db      	ldr	r3, [r3, #12]
 8010434:	68db      	ldr	r3, [r3, #12]
 8010436:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010438:	693b      	ldr	r3, [r7, #16]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d10b      	bne.n	8010456 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801043e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010442:	f383 8811 	msr	BASEPRI, r3
 8010446:	f3bf 8f6f 	isb	sy
 801044a:	f3bf 8f4f 	dsb	sy
 801044e:	60fb      	str	r3, [r7, #12]
}
 8010450:	bf00      	nop
 8010452:	bf00      	nop
 8010454:	e7fd      	b.n	8010452 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010456:	693b      	ldr	r3, [r7, #16]
 8010458:	3318      	adds	r3, #24
 801045a:	4618      	mov	r0, r3
 801045c:	f7fe fc12 	bl	800ec84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010460:	4b1d      	ldr	r3, [pc, #116]	@ (80104d8 <xTaskRemoveFromEventList+0xb0>)
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d11d      	bne.n	80104a4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	3304      	adds	r3, #4
 801046c:	4618      	mov	r0, r3
 801046e:	f7fe fc09 	bl	800ec84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010472:	693b      	ldr	r3, [r7, #16]
 8010474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010476:	4b19      	ldr	r3, [pc, #100]	@ (80104dc <xTaskRemoveFromEventList+0xb4>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	429a      	cmp	r2, r3
 801047c:	d903      	bls.n	8010486 <xTaskRemoveFromEventList+0x5e>
 801047e:	693b      	ldr	r3, [r7, #16]
 8010480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010482:	4a16      	ldr	r2, [pc, #88]	@ (80104dc <xTaskRemoveFromEventList+0xb4>)
 8010484:	6013      	str	r3, [r2, #0]
 8010486:	693b      	ldr	r3, [r7, #16]
 8010488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801048a:	4613      	mov	r3, r2
 801048c:	009b      	lsls	r3, r3, #2
 801048e:	4413      	add	r3, r2
 8010490:	009b      	lsls	r3, r3, #2
 8010492:	4a13      	ldr	r2, [pc, #76]	@ (80104e0 <xTaskRemoveFromEventList+0xb8>)
 8010494:	441a      	add	r2, r3
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	3304      	adds	r3, #4
 801049a:	4619      	mov	r1, r3
 801049c:	4610      	mov	r0, r2
 801049e:	f7fe fb94 	bl	800ebca <vListInsertEnd>
 80104a2:	e005      	b.n	80104b0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80104a4:	693b      	ldr	r3, [r7, #16]
 80104a6:	3318      	adds	r3, #24
 80104a8:	4619      	mov	r1, r3
 80104aa:	480e      	ldr	r0, [pc, #56]	@ (80104e4 <xTaskRemoveFromEventList+0xbc>)
 80104ac:	f7fe fb8d 	bl	800ebca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104b4:	4b0c      	ldr	r3, [pc, #48]	@ (80104e8 <xTaskRemoveFromEventList+0xc0>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104ba:	429a      	cmp	r2, r3
 80104bc:	d905      	bls.n	80104ca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80104be:	2301      	movs	r3, #1
 80104c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80104c2:	4b0a      	ldr	r3, [pc, #40]	@ (80104ec <xTaskRemoveFromEventList+0xc4>)
 80104c4:	2201      	movs	r2, #1
 80104c6:	601a      	str	r2, [r3, #0]
 80104c8:	e001      	b.n	80104ce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80104ca:	2300      	movs	r3, #0
 80104cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80104ce:	697b      	ldr	r3, [r7, #20]
}
 80104d0:	4618      	mov	r0, r3
 80104d2:	3718      	adds	r7, #24
 80104d4:	46bd      	mov	sp, r7
 80104d6:	bd80      	pop	{r7, pc}
 80104d8:	24033a8c 	.word	0x24033a8c
 80104dc:	24033a6c 	.word	0x24033a6c
 80104e0:	24033594 	.word	0x24033594
 80104e4:	24033a24 	.word	0x24033a24
 80104e8:	24033590 	.word	0x24033590
 80104ec:	24033a78 	.word	0x24033a78

080104f0 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b084      	sub	sp, #16
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d10b      	bne.n	8010516 <vTaskSetTimeOutState+0x26>
	__asm volatile
 80104fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010502:	f383 8811 	msr	BASEPRI, r3
 8010506:	f3bf 8f6f 	isb	sy
 801050a:	f3bf 8f4f 	dsb	sy
 801050e:	60fb      	str	r3, [r7, #12]
}
 8010510:	bf00      	nop
 8010512:	bf00      	nop
 8010514:	e7fd      	b.n	8010512 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8010516:	f001 f9f7 	bl	8011908 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 801051a:	4b07      	ldr	r3, [pc, #28]	@ (8010538 <vTaskSetTimeOutState+0x48>)
 801051c:	681a      	ldr	r2, [r3, #0]
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8010522:	4b06      	ldr	r3, [pc, #24]	@ (801053c <vTaskSetTimeOutState+0x4c>)
 8010524:	681a      	ldr	r2, [r3, #0]
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 801052a:	f001 fa1f 	bl	801196c <vPortExitCritical>
}
 801052e:	bf00      	nop
 8010530:	3710      	adds	r7, #16
 8010532:	46bd      	mov	sp, r7
 8010534:	bd80      	pop	{r7, pc}
 8010536:	bf00      	nop
 8010538:	24033a7c 	.word	0x24033a7c
 801053c:	24033a68 	.word	0x24033a68

08010540 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010540:	b480      	push	{r7}
 8010542:	b083      	sub	sp, #12
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010548:	4b06      	ldr	r3, [pc, #24]	@ (8010564 <vTaskInternalSetTimeOutState+0x24>)
 801054a:	681a      	ldr	r2, [r3, #0]
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010550:	4b05      	ldr	r3, [pc, #20]	@ (8010568 <vTaskInternalSetTimeOutState+0x28>)
 8010552:	681a      	ldr	r2, [r3, #0]
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	605a      	str	r2, [r3, #4]
}
 8010558:	bf00      	nop
 801055a:	370c      	adds	r7, #12
 801055c:	46bd      	mov	sp, r7
 801055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010562:	4770      	bx	lr
 8010564:	24033a7c 	.word	0x24033a7c
 8010568:	24033a68 	.word	0x24033a68

0801056c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b088      	sub	sp, #32
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
 8010574:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d10b      	bne.n	8010594 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 801057c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010580:	f383 8811 	msr	BASEPRI, r3
 8010584:	f3bf 8f6f 	isb	sy
 8010588:	f3bf 8f4f 	dsb	sy
 801058c:	613b      	str	r3, [r7, #16]
}
 801058e:	bf00      	nop
 8010590:	bf00      	nop
 8010592:	e7fd      	b.n	8010590 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d10b      	bne.n	80105b2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801059a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801059e:	f383 8811 	msr	BASEPRI, r3
 80105a2:	f3bf 8f6f 	isb	sy
 80105a6:	f3bf 8f4f 	dsb	sy
 80105aa:	60fb      	str	r3, [r7, #12]
}
 80105ac:	bf00      	nop
 80105ae:	bf00      	nop
 80105b0:	e7fd      	b.n	80105ae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80105b2:	f001 f9a9 	bl	8011908 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80105b6:	4b1d      	ldr	r3, [pc, #116]	@ (801062c <xTaskCheckForTimeOut+0xc0>)
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	685b      	ldr	r3, [r3, #4]
 80105c0:	69ba      	ldr	r2, [r7, #24]
 80105c2:	1ad3      	subs	r3, r2, r3
 80105c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80105ce:	d102      	bne.n	80105d6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80105d0:	2300      	movs	r3, #0
 80105d2:	61fb      	str	r3, [r7, #28]
 80105d4:	e023      	b.n	801061e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681a      	ldr	r2, [r3, #0]
 80105da:	4b15      	ldr	r3, [pc, #84]	@ (8010630 <xTaskCheckForTimeOut+0xc4>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	429a      	cmp	r2, r3
 80105e0:	d007      	beq.n	80105f2 <xTaskCheckForTimeOut+0x86>
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	685b      	ldr	r3, [r3, #4]
 80105e6:	69ba      	ldr	r2, [r7, #24]
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d302      	bcc.n	80105f2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80105ec:	2301      	movs	r3, #1
 80105ee:	61fb      	str	r3, [r7, #28]
 80105f0:	e015      	b.n	801061e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	697a      	ldr	r2, [r7, #20]
 80105f8:	429a      	cmp	r2, r3
 80105fa:	d20b      	bcs.n	8010614 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	681a      	ldr	r2, [r3, #0]
 8010600:	697b      	ldr	r3, [r7, #20]
 8010602:	1ad2      	subs	r2, r2, r3
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010608:	6878      	ldr	r0, [r7, #4]
 801060a:	f7ff ff99 	bl	8010540 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801060e:	2300      	movs	r3, #0
 8010610:	61fb      	str	r3, [r7, #28]
 8010612:	e004      	b.n	801061e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8010614:	683b      	ldr	r3, [r7, #0]
 8010616:	2200      	movs	r2, #0
 8010618:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801061a:	2301      	movs	r3, #1
 801061c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801061e:	f001 f9a5 	bl	801196c <vPortExitCritical>

	return xReturn;
 8010622:	69fb      	ldr	r3, [r7, #28]
}
 8010624:	4618      	mov	r0, r3
 8010626:	3720      	adds	r7, #32
 8010628:	46bd      	mov	sp, r7
 801062a:	bd80      	pop	{r7, pc}
 801062c:	24033a68 	.word	0x24033a68
 8010630:	24033a7c 	.word	0x24033a7c

08010634 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010634:	b480      	push	{r7}
 8010636:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010638:	4b03      	ldr	r3, [pc, #12]	@ (8010648 <vTaskMissedYield+0x14>)
 801063a:	2201      	movs	r2, #1
 801063c:	601a      	str	r2, [r3, #0]
}
 801063e:	bf00      	nop
 8010640:	46bd      	mov	sp, r7
 8010642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010646:	4770      	bx	lr
 8010648:	24033a78 	.word	0x24033a78

0801064c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b082      	sub	sp, #8
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010654:	f000 f852 	bl	80106fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010658:	4b06      	ldr	r3, [pc, #24]	@ (8010674 <prvIdleTask+0x28>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	2b01      	cmp	r3, #1
 801065e:	d9f9      	bls.n	8010654 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010660:	4b05      	ldr	r3, [pc, #20]	@ (8010678 <prvIdleTask+0x2c>)
 8010662:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010666:	601a      	str	r2, [r3, #0]
 8010668:	f3bf 8f4f 	dsb	sy
 801066c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010670:	e7f0      	b.n	8010654 <prvIdleTask+0x8>
 8010672:	bf00      	nop
 8010674:	24033594 	.word	0x24033594
 8010678:	e000ed04 	.word	0xe000ed04

0801067c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b082      	sub	sp, #8
 8010680:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010682:	2300      	movs	r3, #0
 8010684:	607b      	str	r3, [r7, #4]
 8010686:	e00c      	b.n	80106a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010688:	687a      	ldr	r2, [r7, #4]
 801068a:	4613      	mov	r3, r2
 801068c:	009b      	lsls	r3, r3, #2
 801068e:	4413      	add	r3, r2
 8010690:	009b      	lsls	r3, r3, #2
 8010692:	4a12      	ldr	r2, [pc, #72]	@ (80106dc <prvInitialiseTaskLists+0x60>)
 8010694:	4413      	add	r3, r2
 8010696:	4618      	mov	r0, r3
 8010698:	f7fe fa6a 	bl	800eb70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	3301      	adds	r3, #1
 80106a0:	607b      	str	r3, [r7, #4]
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2b37      	cmp	r3, #55	@ 0x37
 80106a6:	d9ef      	bls.n	8010688 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80106a8:	480d      	ldr	r0, [pc, #52]	@ (80106e0 <prvInitialiseTaskLists+0x64>)
 80106aa:	f7fe fa61 	bl	800eb70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80106ae:	480d      	ldr	r0, [pc, #52]	@ (80106e4 <prvInitialiseTaskLists+0x68>)
 80106b0:	f7fe fa5e 	bl	800eb70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80106b4:	480c      	ldr	r0, [pc, #48]	@ (80106e8 <prvInitialiseTaskLists+0x6c>)
 80106b6:	f7fe fa5b 	bl	800eb70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80106ba:	480c      	ldr	r0, [pc, #48]	@ (80106ec <prvInitialiseTaskLists+0x70>)
 80106bc:	f7fe fa58 	bl	800eb70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80106c0:	480b      	ldr	r0, [pc, #44]	@ (80106f0 <prvInitialiseTaskLists+0x74>)
 80106c2:	f7fe fa55 	bl	800eb70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80106c6:	4b0b      	ldr	r3, [pc, #44]	@ (80106f4 <prvInitialiseTaskLists+0x78>)
 80106c8:	4a05      	ldr	r2, [pc, #20]	@ (80106e0 <prvInitialiseTaskLists+0x64>)
 80106ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80106cc:	4b0a      	ldr	r3, [pc, #40]	@ (80106f8 <prvInitialiseTaskLists+0x7c>)
 80106ce:	4a05      	ldr	r2, [pc, #20]	@ (80106e4 <prvInitialiseTaskLists+0x68>)
 80106d0:	601a      	str	r2, [r3, #0]
}
 80106d2:	bf00      	nop
 80106d4:	3708      	adds	r7, #8
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}
 80106da:	bf00      	nop
 80106dc:	24033594 	.word	0x24033594
 80106e0:	240339f4 	.word	0x240339f4
 80106e4:	24033a08 	.word	0x24033a08
 80106e8:	24033a24 	.word	0x24033a24
 80106ec:	24033a38 	.word	0x24033a38
 80106f0:	24033a50 	.word	0x24033a50
 80106f4:	24033a1c 	.word	0x24033a1c
 80106f8:	24033a20 	.word	0x24033a20

080106fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b082      	sub	sp, #8
 8010700:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010702:	e019      	b.n	8010738 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010704:	f001 f900 	bl	8011908 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010708:	4b10      	ldr	r3, [pc, #64]	@ (801074c <prvCheckTasksWaitingTermination+0x50>)
 801070a:	68db      	ldr	r3, [r3, #12]
 801070c:	68db      	ldr	r3, [r3, #12]
 801070e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	3304      	adds	r3, #4
 8010714:	4618      	mov	r0, r3
 8010716:	f7fe fab5 	bl	800ec84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801071a:	4b0d      	ldr	r3, [pc, #52]	@ (8010750 <prvCheckTasksWaitingTermination+0x54>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	3b01      	subs	r3, #1
 8010720:	4a0b      	ldr	r2, [pc, #44]	@ (8010750 <prvCheckTasksWaitingTermination+0x54>)
 8010722:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010724:	4b0b      	ldr	r3, [pc, #44]	@ (8010754 <prvCheckTasksWaitingTermination+0x58>)
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	3b01      	subs	r3, #1
 801072a:	4a0a      	ldr	r2, [pc, #40]	@ (8010754 <prvCheckTasksWaitingTermination+0x58>)
 801072c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801072e:	f001 f91d 	bl	801196c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010732:	6878      	ldr	r0, [r7, #4]
 8010734:	f000 f810 	bl	8010758 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010738:	4b06      	ldr	r3, [pc, #24]	@ (8010754 <prvCheckTasksWaitingTermination+0x58>)
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d1e1      	bne.n	8010704 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010740:	bf00      	nop
 8010742:	bf00      	nop
 8010744:	3708      	adds	r7, #8
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}
 801074a:	bf00      	nop
 801074c:	24033a38 	.word	0x24033a38
 8010750:	24033a64 	.word	0x24033a64
 8010754:	24033a4c 	.word	0x24033a4c

08010758 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010758:	b580      	push	{r7, lr}
 801075a:	b084      	sub	sp, #16
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	3354      	adds	r3, #84	@ 0x54
 8010764:	4618      	mov	r0, r3
 8010766:	f011 fa07 	bl	8021b78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010770:	2b00      	cmp	r3, #0
 8010772:	d108      	bne.n	8010786 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010778:	4618      	mov	r0, r3
 801077a:	f001 fab5 	bl	8011ce8 <vPortFree>
				vPortFree( pxTCB );
 801077e:	6878      	ldr	r0, [r7, #4]
 8010780:	f001 fab2 	bl	8011ce8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010784:	e019      	b.n	80107ba <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801078c:	2b01      	cmp	r3, #1
 801078e:	d103      	bne.n	8010798 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010790:	6878      	ldr	r0, [r7, #4]
 8010792:	f001 faa9 	bl	8011ce8 <vPortFree>
	}
 8010796:	e010      	b.n	80107ba <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801079e:	2b02      	cmp	r3, #2
 80107a0:	d00b      	beq.n	80107ba <prvDeleteTCB+0x62>
	__asm volatile
 80107a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107a6:	f383 8811 	msr	BASEPRI, r3
 80107aa:	f3bf 8f6f 	isb	sy
 80107ae:	f3bf 8f4f 	dsb	sy
 80107b2:	60fb      	str	r3, [r7, #12]
}
 80107b4:	bf00      	nop
 80107b6:	bf00      	nop
 80107b8:	e7fd      	b.n	80107b6 <prvDeleteTCB+0x5e>
	}
 80107ba:	bf00      	nop
 80107bc:	3710      	adds	r7, #16
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}
	...

080107c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80107c4:	b480      	push	{r7}
 80107c6:	b083      	sub	sp, #12
 80107c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80107ca:	4b0c      	ldr	r3, [pc, #48]	@ (80107fc <prvResetNextTaskUnblockTime+0x38>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d104      	bne.n	80107de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80107d4:	4b0a      	ldr	r3, [pc, #40]	@ (8010800 <prvResetNextTaskUnblockTime+0x3c>)
 80107d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80107da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80107dc:	e008      	b.n	80107f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107de:	4b07      	ldr	r3, [pc, #28]	@ (80107fc <prvResetNextTaskUnblockTime+0x38>)
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	68db      	ldr	r3, [r3, #12]
 80107e4:	68db      	ldr	r3, [r3, #12]
 80107e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	685b      	ldr	r3, [r3, #4]
 80107ec:	4a04      	ldr	r2, [pc, #16]	@ (8010800 <prvResetNextTaskUnblockTime+0x3c>)
 80107ee:	6013      	str	r3, [r2, #0]
}
 80107f0:	bf00      	nop
 80107f2:	370c      	adds	r7, #12
 80107f4:	46bd      	mov	sp, r7
 80107f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fa:	4770      	bx	lr
 80107fc:	24033a1c 	.word	0x24033a1c
 8010800:	24033a84 	.word	0x24033a84

08010804 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8010804:	b480      	push	{r7}
 8010806:	b083      	sub	sp, #12
 8010808:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801080a:	4b05      	ldr	r3, [pc, #20]	@ (8010820 <xTaskGetCurrentTaskHandle+0x1c>)
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8010810:	687b      	ldr	r3, [r7, #4]
	}
 8010812:	4618      	mov	r0, r3
 8010814:	370c      	adds	r7, #12
 8010816:	46bd      	mov	sp, r7
 8010818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081c:	4770      	bx	lr
 801081e:	bf00      	nop
 8010820:	24033590 	.word	0x24033590

08010824 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010824:	b480      	push	{r7}
 8010826:	b083      	sub	sp, #12
 8010828:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801082a:	4b0b      	ldr	r3, [pc, #44]	@ (8010858 <xTaskGetSchedulerState+0x34>)
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d102      	bne.n	8010838 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010832:	2301      	movs	r3, #1
 8010834:	607b      	str	r3, [r7, #4]
 8010836:	e008      	b.n	801084a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010838:	4b08      	ldr	r3, [pc, #32]	@ (801085c <xTaskGetSchedulerState+0x38>)
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d102      	bne.n	8010846 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010840:	2302      	movs	r3, #2
 8010842:	607b      	str	r3, [r7, #4]
 8010844:	e001      	b.n	801084a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010846:	2300      	movs	r3, #0
 8010848:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801084a:	687b      	ldr	r3, [r7, #4]
	}
 801084c:	4618      	mov	r0, r3
 801084e:	370c      	adds	r7, #12
 8010850:	46bd      	mov	sp, r7
 8010852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010856:	4770      	bx	lr
 8010858:	24033a70 	.word	0x24033a70
 801085c:	24033a8c 	.word	0x24033a8c

08010860 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010860:	b580      	push	{r7, lr}
 8010862:	b084      	sub	sp, #16
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801086c:	2300      	movs	r3, #0
 801086e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d051      	beq.n	801091a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010876:	68bb      	ldr	r3, [r7, #8]
 8010878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801087a:	4b2a      	ldr	r3, [pc, #168]	@ (8010924 <xTaskPriorityInherit+0xc4>)
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010880:	429a      	cmp	r2, r3
 8010882:	d241      	bcs.n	8010908 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010884:	68bb      	ldr	r3, [r7, #8]
 8010886:	699b      	ldr	r3, [r3, #24]
 8010888:	2b00      	cmp	r3, #0
 801088a:	db06      	blt.n	801089a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801088c:	4b25      	ldr	r3, [pc, #148]	@ (8010924 <xTaskPriorityInherit+0xc4>)
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010892:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010896:	68bb      	ldr	r3, [r7, #8]
 8010898:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801089a:	68bb      	ldr	r3, [r7, #8]
 801089c:	6959      	ldr	r1, [r3, #20]
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108a2:	4613      	mov	r3, r2
 80108a4:	009b      	lsls	r3, r3, #2
 80108a6:	4413      	add	r3, r2
 80108a8:	009b      	lsls	r3, r3, #2
 80108aa:	4a1f      	ldr	r2, [pc, #124]	@ (8010928 <xTaskPriorityInherit+0xc8>)
 80108ac:	4413      	add	r3, r2
 80108ae:	4299      	cmp	r1, r3
 80108b0:	d122      	bne.n	80108f8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80108b2:	68bb      	ldr	r3, [r7, #8]
 80108b4:	3304      	adds	r3, #4
 80108b6:	4618      	mov	r0, r3
 80108b8:	f7fe f9e4 	bl	800ec84 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80108bc:	4b19      	ldr	r3, [pc, #100]	@ (8010924 <xTaskPriorityInherit+0xc4>)
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108c2:	68bb      	ldr	r3, [r7, #8]
 80108c4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80108c6:	68bb      	ldr	r3, [r7, #8]
 80108c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108ca:	4b18      	ldr	r3, [pc, #96]	@ (801092c <xTaskPriorityInherit+0xcc>)
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	429a      	cmp	r2, r3
 80108d0:	d903      	bls.n	80108da <xTaskPriorityInherit+0x7a>
 80108d2:	68bb      	ldr	r3, [r7, #8]
 80108d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108d6:	4a15      	ldr	r2, [pc, #84]	@ (801092c <xTaskPriorityInherit+0xcc>)
 80108d8:	6013      	str	r3, [r2, #0]
 80108da:	68bb      	ldr	r3, [r7, #8]
 80108dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108de:	4613      	mov	r3, r2
 80108e0:	009b      	lsls	r3, r3, #2
 80108e2:	4413      	add	r3, r2
 80108e4:	009b      	lsls	r3, r3, #2
 80108e6:	4a10      	ldr	r2, [pc, #64]	@ (8010928 <xTaskPriorityInherit+0xc8>)
 80108e8:	441a      	add	r2, r3
 80108ea:	68bb      	ldr	r3, [r7, #8]
 80108ec:	3304      	adds	r3, #4
 80108ee:	4619      	mov	r1, r3
 80108f0:	4610      	mov	r0, r2
 80108f2:	f7fe f96a 	bl	800ebca <vListInsertEnd>
 80108f6:	e004      	b.n	8010902 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80108f8:	4b0a      	ldr	r3, [pc, #40]	@ (8010924 <xTaskPriorityInherit+0xc4>)
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010902:	2301      	movs	r3, #1
 8010904:	60fb      	str	r3, [r7, #12]
 8010906:	e008      	b.n	801091a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010908:	68bb      	ldr	r3, [r7, #8]
 801090a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801090c:	4b05      	ldr	r3, [pc, #20]	@ (8010924 <xTaskPriorityInherit+0xc4>)
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010912:	429a      	cmp	r2, r3
 8010914:	d201      	bcs.n	801091a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010916:	2301      	movs	r3, #1
 8010918:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801091a:	68fb      	ldr	r3, [r7, #12]
	}
 801091c:	4618      	mov	r0, r3
 801091e:	3710      	adds	r7, #16
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}
 8010924:	24033590 	.word	0x24033590
 8010928:	24033594 	.word	0x24033594
 801092c:	24033a6c 	.word	0x24033a6c

08010930 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010930:	b580      	push	{r7, lr}
 8010932:	b086      	sub	sp, #24
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801093c:	2300      	movs	r3, #0
 801093e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d058      	beq.n	80109f8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010946:	4b2f      	ldr	r3, [pc, #188]	@ (8010a04 <xTaskPriorityDisinherit+0xd4>)
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	693a      	ldr	r2, [r7, #16]
 801094c:	429a      	cmp	r2, r3
 801094e:	d00b      	beq.n	8010968 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8010950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010954:	f383 8811 	msr	BASEPRI, r3
 8010958:	f3bf 8f6f 	isb	sy
 801095c:	f3bf 8f4f 	dsb	sy
 8010960:	60fb      	str	r3, [r7, #12]
}
 8010962:	bf00      	nop
 8010964:	bf00      	nop
 8010966:	e7fd      	b.n	8010964 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010968:	693b      	ldr	r3, [r7, #16]
 801096a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801096c:	2b00      	cmp	r3, #0
 801096e:	d10b      	bne.n	8010988 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8010970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010974:	f383 8811 	msr	BASEPRI, r3
 8010978:	f3bf 8f6f 	isb	sy
 801097c:	f3bf 8f4f 	dsb	sy
 8010980:	60bb      	str	r3, [r7, #8]
}
 8010982:	bf00      	nop
 8010984:	bf00      	nop
 8010986:	e7fd      	b.n	8010984 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8010988:	693b      	ldr	r3, [r7, #16]
 801098a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801098c:	1e5a      	subs	r2, r3, #1
 801098e:	693b      	ldr	r3, [r7, #16]
 8010990:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010992:	693b      	ldr	r3, [r7, #16]
 8010994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010996:	693b      	ldr	r3, [r7, #16]
 8010998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801099a:	429a      	cmp	r2, r3
 801099c:	d02c      	beq.n	80109f8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801099e:	693b      	ldr	r3, [r7, #16]
 80109a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d128      	bne.n	80109f8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80109a6:	693b      	ldr	r3, [r7, #16]
 80109a8:	3304      	adds	r3, #4
 80109aa:	4618      	mov	r0, r3
 80109ac:	f7fe f96a 	bl	800ec84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80109b0:	693b      	ldr	r3, [r7, #16]
 80109b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80109b8:	693b      	ldr	r3, [r7, #16]
 80109ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80109c0:	693b      	ldr	r3, [r7, #16]
 80109c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80109c4:	693b      	ldr	r3, [r7, #16]
 80109c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109c8:	4b0f      	ldr	r3, [pc, #60]	@ (8010a08 <xTaskPriorityDisinherit+0xd8>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	429a      	cmp	r2, r3
 80109ce:	d903      	bls.n	80109d8 <xTaskPriorityDisinherit+0xa8>
 80109d0:	693b      	ldr	r3, [r7, #16]
 80109d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109d4:	4a0c      	ldr	r2, [pc, #48]	@ (8010a08 <xTaskPriorityDisinherit+0xd8>)
 80109d6:	6013      	str	r3, [r2, #0]
 80109d8:	693b      	ldr	r3, [r7, #16]
 80109da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109dc:	4613      	mov	r3, r2
 80109de:	009b      	lsls	r3, r3, #2
 80109e0:	4413      	add	r3, r2
 80109e2:	009b      	lsls	r3, r3, #2
 80109e4:	4a09      	ldr	r2, [pc, #36]	@ (8010a0c <xTaskPriorityDisinherit+0xdc>)
 80109e6:	441a      	add	r2, r3
 80109e8:	693b      	ldr	r3, [r7, #16]
 80109ea:	3304      	adds	r3, #4
 80109ec:	4619      	mov	r1, r3
 80109ee:	4610      	mov	r0, r2
 80109f0:	f7fe f8eb 	bl	800ebca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80109f4:	2301      	movs	r3, #1
 80109f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80109f8:	697b      	ldr	r3, [r7, #20]
	}
 80109fa:	4618      	mov	r0, r3
 80109fc:	3718      	adds	r7, #24
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd80      	pop	{r7, pc}
 8010a02:	bf00      	nop
 8010a04:	24033590 	.word	0x24033590
 8010a08:	24033a6c 	.word	0x24033a6c
 8010a0c:	24033594 	.word	0x24033594

08010a10 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b088      	sub	sp, #32
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
 8010a18:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010a1e:	2301      	movs	r3, #1
 8010a20:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d06c      	beq.n	8010b02 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010a28:	69bb      	ldr	r3, [r7, #24]
 8010a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d10b      	bne.n	8010a48 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8010a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a34:	f383 8811 	msr	BASEPRI, r3
 8010a38:	f3bf 8f6f 	isb	sy
 8010a3c:	f3bf 8f4f 	dsb	sy
 8010a40:	60fb      	str	r3, [r7, #12]
}
 8010a42:	bf00      	nop
 8010a44:	bf00      	nop
 8010a46:	e7fd      	b.n	8010a44 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010a48:	69bb      	ldr	r3, [r7, #24]
 8010a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010a4c:	683a      	ldr	r2, [r7, #0]
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	d902      	bls.n	8010a58 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010a52:	683b      	ldr	r3, [r7, #0]
 8010a54:	61fb      	str	r3, [r7, #28]
 8010a56:	e002      	b.n	8010a5e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010a58:	69bb      	ldr	r3, [r7, #24]
 8010a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010a5c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010a5e:	69bb      	ldr	r3, [r7, #24]
 8010a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a62:	69fa      	ldr	r2, [r7, #28]
 8010a64:	429a      	cmp	r2, r3
 8010a66:	d04c      	beq.n	8010b02 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010a68:	69bb      	ldr	r3, [r7, #24]
 8010a6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010a6c:	697a      	ldr	r2, [r7, #20]
 8010a6e:	429a      	cmp	r2, r3
 8010a70:	d147      	bne.n	8010b02 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010a72:	4b26      	ldr	r3, [pc, #152]	@ (8010b0c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	69ba      	ldr	r2, [r7, #24]
 8010a78:	429a      	cmp	r2, r3
 8010a7a:	d10b      	bne.n	8010a94 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8010a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a80:	f383 8811 	msr	BASEPRI, r3
 8010a84:	f3bf 8f6f 	isb	sy
 8010a88:	f3bf 8f4f 	dsb	sy
 8010a8c:	60bb      	str	r3, [r7, #8]
}
 8010a8e:	bf00      	nop
 8010a90:	bf00      	nop
 8010a92:	e7fd      	b.n	8010a90 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010a94:	69bb      	ldr	r3, [r7, #24]
 8010a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a98:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010a9a:	69bb      	ldr	r3, [r7, #24]
 8010a9c:	69fa      	ldr	r2, [r7, #28]
 8010a9e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010aa0:	69bb      	ldr	r3, [r7, #24]
 8010aa2:	699b      	ldr	r3, [r3, #24]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	db04      	blt.n	8010ab2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010aa8:	69fb      	ldr	r3, [r7, #28]
 8010aaa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010aae:	69bb      	ldr	r3, [r7, #24]
 8010ab0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010ab2:	69bb      	ldr	r3, [r7, #24]
 8010ab4:	6959      	ldr	r1, [r3, #20]
 8010ab6:	693a      	ldr	r2, [r7, #16]
 8010ab8:	4613      	mov	r3, r2
 8010aba:	009b      	lsls	r3, r3, #2
 8010abc:	4413      	add	r3, r2
 8010abe:	009b      	lsls	r3, r3, #2
 8010ac0:	4a13      	ldr	r2, [pc, #76]	@ (8010b10 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010ac2:	4413      	add	r3, r2
 8010ac4:	4299      	cmp	r1, r3
 8010ac6:	d11c      	bne.n	8010b02 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010ac8:	69bb      	ldr	r3, [r7, #24]
 8010aca:	3304      	adds	r3, #4
 8010acc:	4618      	mov	r0, r3
 8010ace:	f7fe f8d9 	bl	800ec84 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010ad2:	69bb      	ldr	r3, [r7, #24]
 8010ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8010b14 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	429a      	cmp	r2, r3
 8010adc:	d903      	bls.n	8010ae6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8010ade:	69bb      	ldr	r3, [r7, #24]
 8010ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ae2:	4a0c      	ldr	r2, [pc, #48]	@ (8010b14 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8010ae4:	6013      	str	r3, [r2, #0]
 8010ae6:	69bb      	ldr	r3, [r7, #24]
 8010ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010aea:	4613      	mov	r3, r2
 8010aec:	009b      	lsls	r3, r3, #2
 8010aee:	4413      	add	r3, r2
 8010af0:	009b      	lsls	r3, r3, #2
 8010af2:	4a07      	ldr	r2, [pc, #28]	@ (8010b10 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010af4:	441a      	add	r2, r3
 8010af6:	69bb      	ldr	r3, [r7, #24]
 8010af8:	3304      	adds	r3, #4
 8010afa:	4619      	mov	r1, r3
 8010afc:	4610      	mov	r0, r2
 8010afe:	f7fe f864 	bl	800ebca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010b02:	bf00      	nop
 8010b04:	3720      	adds	r7, #32
 8010b06:	46bd      	mov	sp, r7
 8010b08:	bd80      	pop	{r7, pc}
 8010b0a:	bf00      	nop
 8010b0c:	24033590 	.word	0x24033590
 8010b10:	24033594 	.word	0x24033594
 8010b14:	24033a6c 	.word	0x24033a6c

08010b18 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010b18:	b480      	push	{r7}
 8010b1a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010b1c:	4b07      	ldr	r3, [pc, #28]	@ (8010b3c <pvTaskIncrementMutexHeldCount+0x24>)
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d004      	beq.n	8010b2e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010b24:	4b05      	ldr	r3, [pc, #20]	@ (8010b3c <pvTaskIncrementMutexHeldCount+0x24>)
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010b2a:	3201      	adds	r2, #1
 8010b2c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8010b2e:	4b03      	ldr	r3, [pc, #12]	@ (8010b3c <pvTaskIncrementMutexHeldCount+0x24>)
 8010b30:	681b      	ldr	r3, [r3, #0]
	}
 8010b32:	4618      	mov	r0, r3
 8010b34:	46bd      	mov	sp, r7
 8010b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3a:	4770      	bx	lr
 8010b3c:	24033590 	.word	0x24033590

08010b40 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b086      	sub	sp, #24
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	60f8      	str	r0, [r7, #12]
 8010b48:	60b9      	str	r1, [r7, #8]
 8010b4a:	607a      	str	r2, [r7, #4]
 8010b4c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8010b4e:	f000 fedb 	bl	8011908 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8010b52:	4b29      	ldr	r3, [pc, #164]	@ (8010bf8 <xTaskNotifyWait+0xb8>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8010b5a:	b2db      	uxtb	r3, r3
 8010b5c:	2b02      	cmp	r3, #2
 8010b5e:	d01c      	beq.n	8010b9a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8010b60:	4b25      	ldr	r3, [pc, #148]	@ (8010bf8 <xTaskNotifyWait+0xb8>)
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8010b68:	68fa      	ldr	r2, [r7, #12]
 8010b6a:	43d2      	mvns	r2, r2
 8010b6c:	400a      	ands	r2, r1
 8010b6e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8010b72:	4b21      	ldr	r3, [pc, #132]	@ (8010bf8 <xTaskNotifyWait+0xb8>)
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	2201      	movs	r2, #1
 8010b78:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8010b7c:	683b      	ldr	r3, [r7, #0]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d00b      	beq.n	8010b9a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010b82:	2101      	movs	r1, #1
 8010b84:	6838      	ldr	r0, [r7, #0]
 8010b86:	f000 f9e3 	bl	8010f50 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8010bfc <xTaskNotifyWait+0xbc>)
 8010b8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010b90:	601a      	str	r2, [r3, #0]
 8010b92:	f3bf 8f4f 	dsb	sy
 8010b96:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010b9a:	f000 fee7 	bl	801196c <vPortExitCritical>

		taskENTER_CRITICAL();
 8010b9e:	f000 feb3 	bl	8011908 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d005      	beq.n	8010bb4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8010ba8:	4b13      	ldr	r3, [pc, #76]	@ (8010bf8 <xTaskNotifyWait+0xb8>)
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8010bb4:	4b10      	ldr	r3, [pc, #64]	@ (8010bf8 <xTaskNotifyWait+0xb8>)
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8010bbc:	b2db      	uxtb	r3, r3
 8010bbe:	2b02      	cmp	r3, #2
 8010bc0:	d002      	beq.n	8010bc8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	617b      	str	r3, [r7, #20]
 8010bc6:	e00a      	b.n	8010bde <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8010bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8010bf8 <xTaskNotifyWait+0xb8>)
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8010bd0:	68ba      	ldr	r2, [r7, #8]
 8010bd2:	43d2      	mvns	r2, r2
 8010bd4:	400a      	ands	r2, r1
 8010bd6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8010bda:	2301      	movs	r3, #1
 8010bdc:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010bde:	4b06      	ldr	r3, [pc, #24]	@ (8010bf8 <xTaskNotifyWait+0xb8>)
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	2200      	movs	r2, #0
 8010be4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8010be8:	f000 fec0 	bl	801196c <vPortExitCritical>

		return xReturn;
 8010bec:	697b      	ldr	r3, [r7, #20]
	}
 8010bee:	4618      	mov	r0, r3
 8010bf0:	3718      	adds	r7, #24
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	bd80      	pop	{r7, pc}
 8010bf6:	bf00      	nop
 8010bf8:	24033590 	.word	0x24033590
 8010bfc:	e000ed04 	.word	0xe000ed04

08010c00 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b08a      	sub	sp, #40	@ 0x28
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	60f8      	str	r0, [r7, #12]
 8010c08:	60b9      	str	r1, [r7, #8]
 8010c0a:	603b      	str	r3, [r7, #0]
 8010c0c:	4613      	mov	r3, r2
 8010c0e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8010c10:	2301      	movs	r3, #1
 8010c12:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d10b      	bne.n	8010c32 <xTaskGenericNotify+0x32>
	__asm volatile
 8010c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c1e:	f383 8811 	msr	BASEPRI, r3
 8010c22:	f3bf 8f6f 	isb	sy
 8010c26:	f3bf 8f4f 	dsb	sy
 8010c2a:	61bb      	str	r3, [r7, #24]
}
 8010c2c:	bf00      	nop
 8010c2e:	bf00      	nop
 8010c30:	e7fd      	b.n	8010c2e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8010c36:	f000 fe67 	bl	8011908 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d004      	beq.n	8010c4a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010c40:	6a3b      	ldr	r3, [r7, #32]
 8010c42:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8010c46:	683b      	ldr	r3, [r7, #0]
 8010c48:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010c4a:	6a3b      	ldr	r3, [r7, #32]
 8010c4c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8010c50:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010c52:	6a3b      	ldr	r3, [r7, #32]
 8010c54:	2202      	movs	r2, #2
 8010c56:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8010c5a:	79fb      	ldrb	r3, [r7, #7]
 8010c5c:	2b04      	cmp	r3, #4
 8010c5e:	d82e      	bhi.n	8010cbe <xTaskGenericNotify+0xbe>
 8010c60:	a201      	add	r2, pc, #4	@ (adr r2, 8010c68 <xTaskGenericNotify+0x68>)
 8010c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c66:	bf00      	nop
 8010c68:	08010ce3 	.word	0x08010ce3
 8010c6c:	08010c7d 	.word	0x08010c7d
 8010c70:	08010c8f 	.word	0x08010c8f
 8010c74:	08010c9f 	.word	0x08010c9f
 8010c78:	08010ca9 	.word	0x08010ca9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010c7c:	6a3b      	ldr	r3, [r7, #32]
 8010c7e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8010c82:	68bb      	ldr	r3, [r7, #8]
 8010c84:	431a      	orrs	r2, r3
 8010c86:	6a3b      	ldr	r3, [r7, #32]
 8010c88:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8010c8c:	e02c      	b.n	8010ce8 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010c8e:	6a3b      	ldr	r3, [r7, #32]
 8010c90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010c94:	1c5a      	adds	r2, r3, #1
 8010c96:	6a3b      	ldr	r3, [r7, #32]
 8010c98:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8010c9c:	e024      	b.n	8010ce8 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010c9e:	6a3b      	ldr	r3, [r7, #32]
 8010ca0:	68ba      	ldr	r2, [r7, #8]
 8010ca2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8010ca6:	e01f      	b.n	8010ce8 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010ca8:	7ffb      	ldrb	r3, [r7, #31]
 8010caa:	2b02      	cmp	r3, #2
 8010cac:	d004      	beq.n	8010cb8 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010cae:	6a3b      	ldr	r3, [r7, #32]
 8010cb0:	68ba      	ldr	r2, [r7, #8]
 8010cb2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010cb6:	e017      	b.n	8010ce8 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8010cb8:	2300      	movs	r3, #0
 8010cba:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8010cbc:	e014      	b.n	8010ce8 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010cbe:	6a3b      	ldr	r3, [r7, #32]
 8010cc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010cc8:	d00d      	beq.n	8010ce6 <xTaskGenericNotify+0xe6>
	__asm volatile
 8010cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cce:	f383 8811 	msr	BASEPRI, r3
 8010cd2:	f3bf 8f6f 	isb	sy
 8010cd6:	f3bf 8f4f 	dsb	sy
 8010cda:	617b      	str	r3, [r7, #20]
}
 8010cdc:	bf00      	nop
 8010cde:	bf00      	nop
 8010ce0:	e7fd      	b.n	8010cde <xTaskGenericNotify+0xde>
					break;
 8010ce2:	bf00      	nop
 8010ce4:	e000      	b.n	8010ce8 <xTaskGenericNotify+0xe8>

					break;
 8010ce6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010ce8:	7ffb      	ldrb	r3, [r7, #31]
 8010cea:	2b01      	cmp	r3, #1
 8010cec:	d13b      	bne.n	8010d66 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010cee:	6a3b      	ldr	r3, [r7, #32]
 8010cf0:	3304      	adds	r3, #4
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f7fd ffc6 	bl	800ec84 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8010cf8:	6a3b      	ldr	r3, [r7, #32]
 8010cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8010d74 <xTaskGenericNotify+0x174>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	429a      	cmp	r2, r3
 8010d02:	d903      	bls.n	8010d0c <xTaskGenericNotify+0x10c>
 8010d04:	6a3b      	ldr	r3, [r7, #32]
 8010d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d08:	4a1a      	ldr	r2, [pc, #104]	@ (8010d74 <xTaskGenericNotify+0x174>)
 8010d0a:	6013      	str	r3, [r2, #0]
 8010d0c:	6a3b      	ldr	r3, [r7, #32]
 8010d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d10:	4613      	mov	r3, r2
 8010d12:	009b      	lsls	r3, r3, #2
 8010d14:	4413      	add	r3, r2
 8010d16:	009b      	lsls	r3, r3, #2
 8010d18:	4a17      	ldr	r2, [pc, #92]	@ (8010d78 <xTaskGenericNotify+0x178>)
 8010d1a:	441a      	add	r2, r3
 8010d1c:	6a3b      	ldr	r3, [r7, #32]
 8010d1e:	3304      	adds	r3, #4
 8010d20:	4619      	mov	r1, r3
 8010d22:	4610      	mov	r0, r2
 8010d24:	f7fd ff51 	bl	800ebca <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010d28:	6a3b      	ldr	r3, [r7, #32]
 8010d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d00b      	beq.n	8010d48 <xTaskGenericNotify+0x148>
	__asm volatile
 8010d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d34:	f383 8811 	msr	BASEPRI, r3
 8010d38:	f3bf 8f6f 	isb	sy
 8010d3c:	f3bf 8f4f 	dsb	sy
 8010d40:	613b      	str	r3, [r7, #16]
}
 8010d42:	bf00      	nop
 8010d44:	bf00      	nop
 8010d46:	e7fd      	b.n	8010d44 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010d48:	6a3b      	ldr	r3, [r7, #32]
 8010d4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8010d7c <xTaskGenericNotify+0x17c>)
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d52:	429a      	cmp	r2, r3
 8010d54:	d907      	bls.n	8010d66 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8010d56:	4b0a      	ldr	r3, [pc, #40]	@ (8010d80 <xTaskGenericNotify+0x180>)
 8010d58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010d5c:	601a      	str	r2, [r3, #0]
 8010d5e:	f3bf 8f4f 	dsb	sy
 8010d62:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010d66:	f000 fe01 	bl	801196c <vPortExitCritical>

		return xReturn;
 8010d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3728      	adds	r7, #40	@ 0x28
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}
 8010d74:	24033a6c 	.word	0x24033a6c
 8010d78:	24033594 	.word	0x24033594
 8010d7c:	24033590 	.word	0x24033590
 8010d80:	e000ed04 	.word	0xe000ed04

08010d84 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b08e      	sub	sp, #56	@ 0x38
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	60f8      	str	r0, [r7, #12]
 8010d8c:	60b9      	str	r1, [r7, #8]
 8010d8e:	603b      	str	r3, [r7, #0]
 8010d90:	4613      	mov	r3, r2
 8010d92:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8010d94:	2301      	movs	r3, #1
 8010d96:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d10b      	bne.n	8010db6 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8010d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010da2:	f383 8811 	msr	BASEPRI, r3
 8010da6:	f3bf 8f6f 	isb	sy
 8010daa:	f3bf 8f4f 	dsb	sy
 8010dae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010db0:	bf00      	nop
 8010db2:	bf00      	nop
 8010db4:	e7fd      	b.n	8010db2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010db6:	f000 fe87 	bl	8011ac8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8010dbe:	f3ef 8211 	mrs	r2, BASEPRI
 8010dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dc6:	f383 8811 	msr	BASEPRI, r3
 8010dca:	f3bf 8f6f 	isb	sy
 8010dce:	f3bf 8f4f 	dsb	sy
 8010dd2:	623a      	str	r2, [r7, #32]
 8010dd4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8010dd6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d004      	beq.n	8010dea <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010de2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8010de6:	683b      	ldr	r3, [r7, #0]
 8010de8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dec:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8010df0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010df6:	2202      	movs	r2, #2
 8010df8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8010dfc:	79fb      	ldrb	r3, [r7, #7]
 8010dfe:	2b04      	cmp	r3, #4
 8010e00:	d82e      	bhi.n	8010e60 <xTaskGenericNotifyFromISR+0xdc>
 8010e02:	a201      	add	r2, pc, #4	@ (adr r2, 8010e08 <xTaskGenericNotifyFromISR+0x84>)
 8010e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e08:	08010e85 	.word	0x08010e85
 8010e0c:	08010e1d 	.word	0x08010e1d
 8010e10:	08010e2f 	.word	0x08010e2f
 8010e14:	08010e3f 	.word	0x08010e3f
 8010e18:	08010e49 	.word	0x08010e49
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e1e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8010e22:	68bb      	ldr	r3, [r7, #8]
 8010e24:	431a      	orrs	r2, r3
 8010e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e28:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8010e2c:	e02d      	b.n	8010e8a <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010e34:	1c5a      	adds	r2, r3, #1
 8010e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e38:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8010e3c:	e025      	b.n	8010e8a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e40:	68ba      	ldr	r2, [r7, #8]
 8010e42:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8010e46:	e020      	b.n	8010e8a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010e48:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010e4c:	2b02      	cmp	r3, #2
 8010e4e:	d004      	beq.n	8010e5a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e52:	68ba      	ldr	r2, [r7, #8]
 8010e54:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010e58:	e017      	b.n	8010e8a <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8010e5e:	e014      	b.n	8010e8a <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010e66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010e6a:	d00d      	beq.n	8010e88 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8010e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e70:	f383 8811 	msr	BASEPRI, r3
 8010e74:	f3bf 8f6f 	isb	sy
 8010e78:	f3bf 8f4f 	dsb	sy
 8010e7c:	61bb      	str	r3, [r7, #24]
}
 8010e7e:	bf00      	nop
 8010e80:	bf00      	nop
 8010e82:	e7fd      	b.n	8010e80 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8010e84:	bf00      	nop
 8010e86:	e000      	b.n	8010e8a <xTaskGenericNotifyFromISR+0x106>
					break;
 8010e88:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010e8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010e8e:	2b01      	cmp	r3, #1
 8010e90:	d147      	bne.n	8010f22 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d00b      	beq.n	8010eb2 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8010e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e9e:	f383 8811 	msr	BASEPRI, r3
 8010ea2:	f3bf 8f6f 	isb	sy
 8010ea6:	f3bf 8f4f 	dsb	sy
 8010eaa:	617b      	str	r3, [r7, #20]
}
 8010eac:	bf00      	nop
 8010eae:	bf00      	nop
 8010eb0:	e7fd      	b.n	8010eae <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010eb2:	4b21      	ldr	r3, [pc, #132]	@ (8010f38 <xTaskGenericNotifyFromISR+0x1b4>)
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d11d      	bne.n	8010ef6 <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ebc:	3304      	adds	r3, #4
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f7fd fee0 	bl	800ec84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8010f3c <xTaskGenericNotifyFromISR+0x1b8>)
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	429a      	cmp	r2, r3
 8010ece:	d903      	bls.n	8010ed8 <xTaskGenericNotifyFromISR+0x154>
 8010ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ed4:	4a19      	ldr	r2, [pc, #100]	@ (8010f3c <xTaskGenericNotifyFromISR+0x1b8>)
 8010ed6:	6013      	str	r3, [r2, #0]
 8010ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010edc:	4613      	mov	r3, r2
 8010ede:	009b      	lsls	r3, r3, #2
 8010ee0:	4413      	add	r3, r2
 8010ee2:	009b      	lsls	r3, r3, #2
 8010ee4:	4a16      	ldr	r2, [pc, #88]	@ (8010f40 <xTaskGenericNotifyFromISR+0x1bc>)
 8010ee6:	441a      	add	r2, r3
 8010ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010eea:	3304      	adds	r3, #4
 8010eec:	4619      	mov	r1, r3
 8010eee:	4610      	mov	r0, r2
 8010ef0:	f7fd fe6b 	bl	800ebca <vListInsertEnd>
 8010ef4:	e005      	b.n	8010f02 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8010ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ef8:	3318      	adds	r3, #24
 8010efa:	4619      	mov	r1, r3
 8010efc:	4811      	ldr	r0, [pc, #68]	@ (8010f44 <xTaskGenericNotifyFromISR+0x1c0>)
 8010efe:	f7fd fe64 	bl	800ebca <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f06:	4b10      	ldr	r3, [pc, #64]	@ (8010f48 <xTaskGenericNotifyFromISR+0x1c4>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f0c:	429a      	cmp	r2, r3
 8010f0e:	d908      	bls.n	8010f22 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8010f10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d002      	beq.n	8010f1c <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8010f16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010f18:	2201      	movs	r2, #1
 8010f1a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8010f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8010f4c <xTaskGenericNotifyFromISR+0x1c8>)
 8010f1e:	2201      	movs	r2, #1
 8010f20:	601a      	str	r2, [r3, #0]
 8010f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f24:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010f26:	693b      	ldr	r3, [r7, #16]
 8010f28:	f383 8811 	msr	BASEPRI, r3
}
 8010f2c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8010f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8010f30:	4618      	mov	r0, r3
 8010f32:	3738      	adds	r7, #56	@ 0x38
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}
 8010f38:	24033a8c 	.word	0x24033a8c
 8010f3c:	24033a6c 	.word	0x24033a6c
 8010f40:	24033594 	.word	0x24033594
 8010f44:	24033a24 	.word	0x24033a24
 8010f48:	24033590 	.word	0x24033590
 8010f4c:	24033a78 	.word	0x24033a78

08010f50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b084      	sub	sp, #16
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
 8010f58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010f5a:	4b21      	ldr	r3, [pc, #132]	@ (8010fe0 <prvAddCurrentTaskToDelayedList+0x90>)
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010f60:	4b20      	ldr	r3, [pc, #128]	@ (8010fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	3304      	adds	r3, #4
 8010f66:	4618      	mov	r0, r3
 8010f68:	f7fd fe8c 	bl	800ec84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010f72:	d10a      	bne.n	8010f8a <prvAddCurrentTaskToDelayedList+0x3a>
 8010f74:	683b      	ldr	r3, [r7, #0]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d007      	beq.n	8010f8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8010fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	3304      	adds	r3, #4
 8010f80:	4619      	mov	r1, r3
 8010f82:	4819      	ldr	r0, [pc, #100]	@ (8010fe8 <prvAddCurrentTaskToDelayedList+0x98>)
 8010f84:	f7fd fe21 	bl	800ebca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010f88:	e026      	b.n	8010fd8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010f8a:	68fa      	ldr	r2, [r7, #12]
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	4413      	add	r3, r2
 8010f90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010f92:	4b14      	ldr	r3, [pc, #80]	@ (8010fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	68ba      	ldr	r2, [r7, #8]
 8010f98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010f9a:	68ba      	ldr	r2, [r7, #8]
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	429a      	cmp	r2, r3
 8010fa0:	d209      	bcs.n	8010fb6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010fa2:	4b12      	ldr	r3, [pc, #72]	@ (8010fec <prvAddCurrentTaskToDelayedList+0x9c>)
 8010fa4:	681a      	ldr	r2, [r3, #0]
 8010fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8010fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	3304      	adds	r3, #4
 8010fac:	4619      	mov	r1, r3
 8010fae:	4610      	mov	r0, r2
 8010fb0:	f7fd fe2f 	bl	800ec12 <vListInsert>
}
 8010fb4:	e010      	b.n	8010fd8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8010ff0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010fb8:	681a      	ldr	r2, [r3, #0]
 8010fba:	4b0a      	ldr	r3, [pc, #40]	@ (8010fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	3304      	adds	r3, #4
 8010fc0:	4619      	mov	r1, r3
 8010fc2:	4610      	mov	r0, r2
 8010fc4:	f7fd fe25 	bl	800ec12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8010ff4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	68ba      	ldr	r2, [r7, #8]
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d202      	bcs.n	8010fd8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010fd2:	4a08      	ldr	r2, [pc, #32]	@ (8010ff4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010fd4:	68bb      	ldr	r3, [r7, #8]
 8010fd6:	6013      	str	r3, [r2, #0]
}
 8010fd8:	bf00      	nop
 8010fda:	3710      	adds	r7, #16
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}
 8010fe0:	24033a68 	.word	0x24033a68
 8010fe4:	24033590 	.word	0x24033590
 8010fe8:	24033a50 	.word	0x24033a50
 8010fec:	24033a20 	.word	0x24033a20
 8010ff0:	24033a1c 	.word	0x24033a1c
 8010ff4:	24033a84 	.word	0x24033a84

08010ff8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b08a      	sub	sp, #40	@ 0x28
 8010ffc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010ffe:	2300      	movs	r3, #0
 8011000:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011002:	f000 fb13 	bl	801162c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011006:	4b1d      	ldr	r3, [pc, #116]	@ (801107c <xTimerCreateTimerTask+0x84>)
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d021      	beq.n	8011052 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801100e:	2300      	movs	r3, #0
 8011010:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011012:	2300      	movs	r3, #0
 8011014:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011016:	1d3a      	adds	r2, r7, #4
 8011018:	f107 0108 	add.w	r1, r7, #8
 801101c:	f107 030c 	add.w	r3, r7, #12
 8011020:	4618      	mov	r0, r3
 8011022:	f7fd fd8b 	bl	800eb3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011026:	6879      	ldr	r1, [r7, #4]
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	68fa      	ldr	r2, [r7, #12]
 801102c:	9202      	str	r2, [sp, #8]
 801102e:	9301      	str	r3, [sp, #4]
 8011030:	2302      	movs	r3, #2
 8011032:	9300      	str	r3, [sp, #0]
 8011034:	2300      	movs	r3, #0
 8011036:	460a      	mov	r2, r1
 8011038:	4911      	ldr	r1, [pc, #68]	@ (8011080 <xTimerCreateTimerTask+0x88>)
 801103a:	4812      	ldr	r0, [pc, #72]	@ (8011084 <xTimerCreateTimerTask+0x8c>)
 801103c:	f7fe fd62 	bl	800fb04 <xTaskCreateStatic>
 8011040:	4603      	mov	r3, r0
 8011042:	4a11      	ldr	r2, [pc, #68]	@ (8011088 <xTimerCreateTimerTask+0x90>)
 8011044:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011046:	4b10      	ldr	r3, [pc, #64]	@ (8011088 <xTimerCreateTimerTask+0x90>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d001      	beq.n	8011052 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801104e:	2301      	movs	r3, #1
 8011050:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011052:	697b      	ldr	r3, [r7, #20]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d10b      	bne.n	8011070 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8011058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801105c:	f383 8811 	msr	BASEPRI, r3
 8011060:	f3bf 8f6f 	isb	sy
 8011064:	f3bf 8f4f 	dsb	sy
 8011068:	613b      	str	r3, [r7, #16]
}
 801106a:	bf00      	nop
 801106c:	bf00      	nop
 801106e:	e7fd      	b.n	801106c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011070:	697b      	ldr	r3, [r7, #20]
}
 8011072:	4618      	mov	r0, r3
 8011074:	3718      	adds	r7, #24
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}
 801107a:	bf00      	nop
 801107c:	24033ac0 	.word	0x24033ac0
 8011080:	08022c24 	.word	0x08022c24
 8011084:	080111c5 	.word	0x080111c5
 8011088:	24033ac4 	.word	0x24033ac4

0801108c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b08a      	sub	sp, #40	@ 0x28
 8011090:	af00      	add	r7, sp, #0
 8011092:	60f8      	str	r0, [r7, #12]
 8011094:	60b9      	str	r1, [r7, #8]
 8011096:	607a      	str	r2, [r7, #4]
 8011098:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801109a:	2300      	movs	r3, #0
 801109c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d10b      	bne.n	80110bc <xTimerGenericCommand+0x30>
	__asm volatile
 80110a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110a8:	f383 8811 	msr	BASEPRI, r3
 80110ac:	f3bf 8f6f 	isb	sy
 80110b0:	f3bf 8f4f 	dsb	sy
 80110b4:	623b      	str	r3, [r7, #32]
}
 80110b6:	bf00      	nop
 80110b8:	bf00      	nop
 80110ba:	e7fd      	b.n	80110b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80110bc:	4b19      	ldr	r3, [pc, #100]	@ (8011124 <xTimerGenericCommand+0x98>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d02a      	beq.n	801111a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80110d0:	68bb      	ldr	r3, [r7, #8]
 80110d2:	2b05      	cmp	r3, #5
 80110d4:	dc18      	bgt.n	8011108 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80110d6:	f7ff fba5 	bl	8010824 <xTaskGetSchedulerState>
 80110da:	4603      	mov	r3, r0
 80110dc:	2b02      	cmp	r3, #2
 80110de:	d109      	bne.n	80110f4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80110e0:	4b10      	ldr	r3, [pc, #64]	@ (8011124 <xTimerGenericCommand+0x98>)
 80110e2:	6818      	ldr	r0, [r3, #0]
 80110e4:	f107 0110 	add.w	r1, r7, #16
 80110e8:	2300      	movs	r3, #0
 80110ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80110ec:	f7fd fff2 	bl	800f0d4 <xQueueGenericSend>
 80110f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80110f2:	e012      	b.n	801111a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80110f4:	4b0b      	ldr	r3, [pc, #44]	@ (8011124 <xTimerGenericCommand+0x98>)
 80110f6:	6818      	ldr	r0, [r3, #0]
 80110f8:	f107 0110 	add.w	r1, r7, #16
 80110fc:	2300      	movs	r3, #0
 80110fe:	2200      	movs	r2, #0
 8011100:	f7fd ffe8 	bl	800f0d4 <xQueueGenericSend>
 8011104:	6278      	str	r0, [r7, #36]	@ 0x24
 8011106:	e008      	b.n	801111a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011108:	4b06      	ldr	r3, [pc, #24]	@ (8011124 <xTimerGenericCommand+0x98>)
 801110a:	6818      	ldr	r0, [r3, #0]
 801110c:	f107 0110 	add.w	r1, r7, #16
 8011110:	2300      	movs	r3, #0
 8011112:	683a      	ldr	r2, [r7, #0]
 8011114:	f7fe f8e0 	bl	800f2d8 <xQueueGenericSendFromISR>
 8011118:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801111a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801111c:	4618      	mov	r0, r3
 801111e:	3728      	adds	r7, #40	@ 0x28
 8011120:	46bd      	mov	sp, r7
 8011122:	bd80      	pop	{r7, pc}
 8011124:	24033ac0 	.word	0x24033ac0

08011128 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b088      	sub	sp, #32
 801112c:	af02      	add	r7, sp, #8
 801112e:	6078      	str	r0, [r7, #4]
 8011130:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011132:	4b23      	ldr	r3, [pc, #140]	@ (80111c0 <prvProcessExpiredTimer+0x98>)
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	68db      	ldr	r3, [r3, #12]
 8011138:	68db      	ldr	r3, [r3, #12]
 801113a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801113c:	697b      	ldr	r3, [r7, #20]
 801113e:	3304      	adds	r3, #4
 8011140:	4618      	mov	r0, r3
 8011142:	f7fd fd9f 	bl	800ec84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011146:	697b      	ldr	r3, [r7, #20]
 8011148:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801114c:	f003 0304 	and.w	r3, r3, #4
 8011150:	2b00      	cmp	r3, #0
 8011152:	d023      	beq.n	801119c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011154:	697b      	ldr	r3, [r7, #20]
 8011156:	699a      	ldr	r2, [r3, #24]
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	18d1      	adds	r1, r2, r3
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	683a      	ldr	r2, [r7, #0]
 8011160:	6978      	ldr	r0, [r7, #20]
 8011162:	f000 f8d5 	bl	8011310 <prvInsertTimerInActiveList>
 8011166:	4603      	mov	r3, r0
 8011168:	2b00      	cmp	r3, #0
 801116a:	d020      	beq.n	80111ae <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801116c:	2300      	movs	r3, #0
 801116e:	9300      	str	r3, [sp, #0]
 8011170:	2300      	movs	r3, #0
 8011172:	687a      	ldr	r2, [r7, #4]
 8011174:	2100      	movs	r1, #0
 8011176:	6978      	ldr	r0, [r7, #20]
 8011178:	f7ff ff88 	bl	801108c <xTimerGenericCommand>
 801117c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801117e:	693b      	ldr	r3, [r7, #16]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d114      	bne.n	80111ae <prvProcessExpiredTimer+0x86>
	__asm volatile
 8011184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011188:	f383 8811 	msr	BASEPRI, r3
 801118c:	f3bf 8f6f 	isb	sy
 8011190:	f3bf 8f4f 	dsb	sy
 8011194:	60fb      	str	r3, [r7, #12]
}
 8011196:	bf00      	nop
 8011198:	bf00      	nop
 801119a:	e7fd      	b.n	8011198 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801119c:	697b      	ldr	r3, [r7, #20]
 801119e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80111a2:	f023 0301 	bic.w	r3, r3, #1
 80111a6:	b2da      	uxtb	r2, r3
 80111a8:	697b      	ldr	r3, [r7, #20]
 80111aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80111ae:	697b      	ldr	r3, [r7, #20]
 80111b0:	6a1b      	ldr	r3, [r3, #32]
 80111b2:	6978      	ldr	r0, [r7, #20]
 80111b4:	4798      	blx	r3
}
 80111b6:	bf00      	nop
 80111b8:	3718      	adds	r7, #24
 80111ba:	46bd      	mov	sp, r7
 80111bc:	bd80      	pop	{r7, pc}
 80111be:	bf00      	nop
 80111c0:	24033ab8 	.word	0x24033ab8

080111c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b084      	sub	sp, #16
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80111cc:	f107 0308 	add.w	r3, r7, #8
 80111d0:	4618      	mov	r0, r3
 80111d2:	f000 f859 	bl	8011288 <prvGetNextExpireTime>
 80111d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80111d8:	68bb      	ldr	r3, [r7, #8]
 80111da:	4619      	mov	r1, r3
 80111dc:	68f8      	ldr	r0, [r7, #12]
 80111de:	f000 f805 	bl	80111ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80111e2:	f000 f8d7 	bl	8011394 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80111e6:	bf00      	nop
 80111e8:	e7f0      	b.n	80111cc <prvTimerTask+0x8>
	...

080111ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b084      	sub	sp, #16
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
 80111f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80111f6:	f7fe fee9 	bl	800ffcc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80111fa:	f107 0308 	add.w	r3, r7, #8
 80111fe:	4618      	mov	r0, r3
 8011200:	f000 f866 	bl	80112d0 <prvSampleTimeNow>
 8011204:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011206:	68bb      	ldr	r3, [r7, #8]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d130      	bne.n	801126e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801120c:	683b      	ldr	r3, [r7, #0]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d10a      	bne.n	8011228 <prvProcessTimerOrBlockTask+0x3c>
 8011212:	687a      	ldr	r2, [r7, #4]
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	429a      	cmp	r2, r3
 8011218:	d806      	bhi.n	8011228 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801121a:	f7fe fee5 	bl	800ffe8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801121e:	68f9      	ldr	r1, [r7, #12]
 8011220:	6878      	ldr	r0, [r7, #4]
 8011222:	f7ff ff81 	bl	8011128 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011226:	e024      	b.n	8011272 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d008      	beq.n	8011240 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801122e:	4b13      	ldr	r3, [pc, #76]	@ (801127c <prvProcessTimerOrBlockTask+0x90>)
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d101      	bne.n	801123c <prvProcessTimerOrBlockTask+0x50>
 8011238:	2301      	movs	r3, #1
 801123a:	e000      	b.n	801123e <prvProcessTimerOrBlockTask+0x52>
 801123c:	2300      	movs	r3, #0
 801123e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011240:	4b0f      	ldr	r3, [pc, #60]	@ (8011280 <prvProcessTimerOrBlockTask+0x94>)
 8011242:	6818      	ldr	r0, [r3, #0]
 8011244:	687a      	ldr	r2, [r7, #4]
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	1ad3      	subs	r3, r2, r3
 801124a:	683a      	ldr	r2, [r7, #0]
 801124c:	4619      	mov	r1, r3
 801124e:	f7fe fc25 	bl	800fa9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011252:	f7fe fec9 	bl	800ffe8 <xTaskResumeAll>
 8011256:	4603      	mov	r3, r0
 8011258:	2b00      	cmp	r3, #0
 801125a:	d10a      	bne.n	8011272 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801125c:	4b09      	ldr	r3, [pc, #36]	@ (8011284 <prvProcessTimerOrBlockTask+0x98>)
 801125e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011262:	601a      	str	r2, [r3, #0]
 8011264:	f3bf 8f4f 	dsb	sy
 8011268:	f3bf 8f6f 	isb	sy
}
 801126c:	e001      	b.n	8011272 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801126e:	f7fe febb 	bl	800ffe8 <xTaskResumeAll>
}
 8011272:	bf00      	nop
 8011274:	3710      	adds	r7, #16
 8011276:	46bd      	mov	sp, r7
 8011278:	bd80      	pop	{r7, pc}
 801127a:	bf00      	nop
 801127c:	24033abc 	.word	0x24033abc
 8011280:	24033ac0 	.word	0x24033ac0
 8011284:	e000ed04 	.word	0xe000ed04

08011288 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011288:	b480      	push	{r7}
 801128a:	b085      	sub	sp, #20
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011290:	4b0e      	ldr	r3, [pc, #56]	@ (80112cc <prvGetNextExpireTime+0x44>)
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d101      	bne.n	801129e <prvGetNextExpireTime+0x16>
 801129a:	2201      	movs	r2, #1
 801129c:	e000      	b.n	80112a0 <prvGetNextExpireTime+0x18>
 801129e:	2200      	movs	r2, #0
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d105      	bne.n	80112b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80112ac:	4b07      	ldr	r3, [pc, #28]	@ (80112cc <prvGetNextExpireTime+0x44>)
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	68db      	ldr	r3, [r3, #12]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	60fb      	str	r3, [r7, #12]
 80112b6:	e001      	b.n	80112bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80112b8:	2300      	movs	r3, #0
 80112ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80112bc:	68fb      	ldr	r3, [r7, #12]
}
 80112be:	4618      	mov	r0, r3
 80112c0:	3714      	adds	r7, #20
 80112c2:	46bd      	mov	sp, r7
 80112c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c8:	4770      	bx	lr
 80112ca:	bf00      	nop
 80112cc:	24033ab8 	.word	0x24033ab8

080112d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b084      	sub	sp, #16
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80112d8:	f7fe ff24 	bl	8010124 <xTaskGetTickCount>
 80112dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80112de:	4b0b      	ldr	r3, [pc, #44]	@ (801130c <prvSampleTimeNow+0x3c>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	68fa      	ldr	r2, [r7, #12]
 80112e4:	429a      	cmp	r2, r3
 80112e6:	d205      	bcs.n	80112f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80112e8:	f000 f93a 	bl	8011560 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	2201      	movs	r2, #1
 80112f0:	601a      	str	r2, [r3, #0]
 80112f2:	e002      	b.n	80112fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	2200      	movs	r2, #0
 80112f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80112fa:	4a04      	ldr	r2, [pc, #16]	@ (801130c <prvSampleTimeNow+0x3c>)
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011300:	68fb      	ldr	r3, [r7, #12]
}
 8011302:	4618      	mov	r0, r3
 8011304:	3710      	adds	r7, #16
 8011306:	46bd      	mov	sp, r7
 8011308:	bd80      	pop	{r7, pc}
 801130a:	bf00      	nop
 801130c:	24033ac8 	.word	0x24033ac8

08011310 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b086      	sub	sp, #24
 8011314:	af00      	add	r7, sp, #0
 8011316:	60f8      	str	r0, [r7, #12]
 8011318:	60b9      	str	r1, [r7, #8]
 801131a:	607a      	str	r2, [r7, #4]
 801131c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801131e:	2300      	movs	r3, #0
 8011320:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	68ba      	ldr	r2, [r7, #8]
 8011326:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	68fa      	ldr	r2, [r7, #12]
 801132c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801132e:	68ba      	ldr	r2, [r7, #8]
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	429a      	cmp	r2, r3
 8011334:	d812      	bhi.n	801135c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011336:	687a      	ldr	r2, [r7, #4]
 8011338:	683b      	ldr	r3, [r7, #0]
 801133a:	1ad2      	subs	r2, r2, r3
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	699b      	ldr	r3, [r3, #24]
 8011340:	429a      	cmp	r2, r3
 8011342:	d302      	bcc.n	801134a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011344:	2301      	movs	r3, #1
 8011346:	617b      	str	r3, [r7, #20]
 8011348:	e01b      	b.n	8011382 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801134a:	4b10      	ldr	r3, [pc, #64]	@ (801138c <prvInsertTimerInActiveList+0x7c>)
 801134c:	681a      	ldr	r2, [r3, #0]
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	3304      	adds	r3, #4
 8011352:	4619      	mov	r1, r3
 8011354:	4610      	mov	r0, r2
 8011356:	f7fd fc5c 	bl	800ec12 <vListInsert>
 801135a:	e012      	b.n	8011382 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801135c:	687a      	ldr	r2, [r7, #4]
 801135e:	683b      	ldr	r3, [r7, #0]
 8011360:	429a      	cmp	r2, r3
 8011362:	d206      	bcs.n	8011372 <prvInsertTimerInActiveList+0x62>
 8011364:	68ba      	ldr	r2, [r7, #8]
 8011366:	683b      	ldr	r3, [r7, #0]
 8011368:	429a      	cmp	r2, r3
 801136a:	d302      	bcc.n	8011372 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801136c:	2301      	movs	r3, #1
 801136e:	617b      	str	r3, [r7, #20]
 8011370:	e007      	b.n	8011382 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011372:	4b07      	ldr	r3, [pc, #28]	@ (8011390 <prvInsertTimerInActiveList+0x80>)
 8011374:	681a      	ldr	r2, [r3, #0]
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	3304      	adds	r3, #4
 801137a:	4619      	mov	r1, r3
 801137c:	4610      	mov	r0, r2
 801137e:	f7fd fc48 	bl	800ec12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011382:	697b      	ldr	r3, [r7, #20]
}
 8011384:	4618      	mov	r0, r3
 8011386:	3718      	adds	r7, #24
 8011388:	46bd      	mov	sp, r7
 801138a:	bd80      	pop	{r7, pc}
 801138c:	24033abc 	.word	0x24033abc
 8011390:	24033ab8 	.word	0x24033ab8

08011394 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b08e      	sub	sp, #56	@ 0x38
 8011398:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801139a:	e0ce      	b.n	801153a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	da19      	bge.n	80113d6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80113a2:	1d3b      	adds	r3, r7, #4
 80113a4:	3304      	adds	r3, #4
 80113a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80113a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d10b      	bne.n	80113c6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80113ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113b2:	f383 8811 	msr	BASEPRI, r3
 80113b6:	f3bf 8f6f 	isb	sy
 80113ba:	f3bf 8f4f 	dsb	sy
 80113be:	61fb      	str	r3, [r7, #28]
}
 80113c0:	bf00      	nop
 80113c2:	bf00      	nop
 80113c4:	e7fd      	b.n	80113c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80113c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80113cc:	6850      	ldr	r0, [r2, #4]
 80113ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80113d0:	6892      	ldr	r2, [r2, #8]
 80113d2:	4611      	mov	r1, r2
 80113d4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	f2c0 80ae 	blt.w	801153a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80113e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113e4:	695b      	ldr	r3, [r3, #20]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d004      	beq.n	80113f4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80113ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113ec:	3304      	adds	r3, #4
 80113ee:	4618      	mov	r0, r3
 80113f0:	f7fd fc48 	bl	800ec84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80113f4:	463b      	mov	r3, r7
 80113f6:	4618      	mov	r0, r3
 80113f8:	f7ff ff6a 	bl	80112d0 <prvSampleTimeNow>
 80113fc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	2b09      	cmp	r3, #9
 8011402:	f200 8097 	bhi.w	8011534 <prvProcessReceivedCommands+0x1a0>
 8011406:	a201      	add	r2, pc, #4	@ (adr r2, 801140c <prvProcessReceivedCommands+0x78>)
 8011408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801140c:	08011435 	.word	0x08011435
 8011410:	08011435 	.word	0x08011435
 8011414:	08011435 	.word	0x08011435
 8011418:	080114ab 	.word	0x080114ab
 801141c:	080114bf 	.word	0x080114bf
 8011420:	0801150b 	.word	0x0801150b
 8011424:	08011435 	.word	0x08011435
 8011428:	08011435 	.word	0x08011435
 801142c:	080114ab 	.word	0x080114ab
 8011430:	080114bf 	.word	0x080114bf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011436:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801143a:	f043 0301 	orr.w	r3, r3, #1
 801143e:	b2da      	uxtb	r2, r3
 8011440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011442:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011446:	68ba      	ldr	r2, [r7, #8]
 8011448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801144a:	699b      	ldr	r3, [r3, #24]
 801144c:	18d1      	adds	r1, r2, r3
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011452:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011454:	f7ff ff5c 	bl	8011310 <prvInsertTimerInActiveList>
 8011458:	4603      	mov	r3, r0
 801145a:	2b00      	cmp	r3, #0
 801145c:	d06c      	beq.n	8011538 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801145e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011460:	6a1b      	ldr	r3, [r3, #32]
 8011462:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011464:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011468:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801146c:	f003 0304 	and.w	r3, r3, #4
 8011470:	2b00      	cmp	r3, #0
 8011472:	d061      	beq.n	8011538 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011474:	68ba      	ldr	r2, [r7, #8]
 8011476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011478:	699b      	ldr	r3, [r3, #24]
 801147a:	441a      	add	r2, r3
 801147c:	2300      	movs	r3, #0
 801147e:	9300      	str	r3, [sp, #0]
 8011480:	2300      	movs	r3, #0
 8011482:	2100      	movs	r1, #0
 8011484:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011486:	f7ff fe01 	bl	801108c <xTimerGenericCommand>
 801148a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801148c:	6a3b      	ldr	r3, [r7, #32]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d152      	bne.n	8011538 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8011492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011496:	f383 8811 	msr	BASEPRI, r3
 801149a:	f3bf 8f6f 	isb	sy
 801149e:	f3bf 8f4f 	dsb	sy
 80114a2:	61bb      	str	r3, [r7, #24]
}
 80114a4:	bf00      	nop
 80114a6:	bf00      	nop
 80114a8:	e7fd      	b.n	80114a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80114aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80114b0:	f023 0301 	bic.w	r3, r3, #1
 80114b4:	b2da      	uxtb	r2, r3
 80114b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80114bc:	e03d      	b.n	801153a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80114be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80114c4:	f043 0301 	orr.w	r3, r3, #1
 80114c8:	b2da      	uxtb	r2, r3
 80114ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80114d0:	68ba      	ldr	r2, [r7, #8]
 80114d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80114d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114d8:	699b      	ldr	r3, [r3, #24]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d10b      	bne.n	80114f6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80114de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114e2:	f383 8811 	msr	BASEPRI, r3
 80114e6:	f3bf 8f6f 	isb	sy
 80114ea:	f3bf 8f4f 	dsb	sy
 80114ee:	617b      	str	r3, [r7, #20]
}
 80114f0:	bf00      	nop
 80114f2:	bf00      	nop
 80114f4:	e7fd      	b.n	80114f2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80114f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114f8:	699a      	ldr	r2, [r3, #24]
 80114fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114fc:	18d1      	adds	r1, r2, r3
 80114fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011502:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011504:	f7ff ff04 	bl	8011310 <prvInsertTimerInActiveList>
					break;
 8011508:	e017      	b.n	801153a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801150a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801150c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011510:	f003 0302 	and.w	r3, r3, #2
 8011514:	2b00      	cmp	r3, #0
 8011516:	d103      	bne.n	8011520 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8011518:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801151a:	f000 fbe5 	bl	8011ce8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801151e:	e00c      	b.n	801153a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011522:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011526:	f023 0301 	bic.w	r3, r3, #1
 801152a:	b2da      	uxtb	r2, r3
 801152c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801152e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011532:	e002      	b.n	801153a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8011534:	bf00      	nop
 8011536:	e000      	b.n	801153a <prvProcessReceivedCommands+0x1a6>
					break;
 8011538:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801153a:	4b08      	ldr	r3, [pc, #32]	@ (801155c <prvProcessReceivedCommands+0x1c8>)
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	1d39      	adds	r1, r7, #4
 8011540:	2200      	movs	r2, #0
 8011542:	4618      	mov	r0, r3
 8011544:	f7fd ff66 	bl	800f414 <xQueueReceive>
 8011548:	4603      	mov	r3, r0
 801154a:	2b00      	cmp	r3, #0
 801154c:	f47f af26 	bne.w	801139c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8011550:	bf00      	nop
 8011552:	bf00      	nop
 8011554:	3730      	adds	r7, #48	@ 0x30
 8011556:	46bd      	mov	sp, r7
 8011558:	bd80      	pop	{r7, pc}
 801155a:	bf00      	nop
 801155c:	24033ac0 	.word	0x24033ac0

08011560 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b088      	sub	sp, #32
 8011564:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011566:	e049      	b.n	80115fc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011568:	4b2e      	ldr	r3, [pc, #184]	@ (8011624 <prvSwitchTimerLists+0xc4>)
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	68db      	ldr	r3, [r3, #12]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011572:	4b2c      	ldr	r3, [pc, #176]	@ (8011624 <prvSwitchTimerLists+0xc4>)
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	68db      	ldr	r3, [r3, #12]
 8011578:	68db      	ldr	r3, [r3, #12]
 801157a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	3304      	adds	r3, #4
 8011580:	4618      	mov	r0, r3
 8011582:	f7fd fb7f 	bl	800ec84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	6a1b      	ldr	r3, [r3, #32]
 801158a:	68f8      	ldr	r0, [r7, #12]
 801158c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011594:	f003 0304 	and.w	r3, r3, #4
 8011598:	2b00      	cmp	r3, #0
 801159a:	d02f      	beq.n	80115fc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	699b      	ldr	r3, [r3, #24]
 80115a0:	693a      	ldr	r2, [r7, #16]
 80115a2:	4413      	add	r3, r2
 80115a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80115a6:	68ba      	ldr	r2, [r7, #8]
 80115a8:	693b      	ldr	r3, [r7, #16]
 80115aa:	429a      	cmp	r2, r3
 80115ac:	d90e      	bls.n	80115cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	68ba      	ldr	r2, [r7, #8]
 80115b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	68fa      	ldr	r2, [r7, #12]
 80115b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80115ba:	4b1a      	ldr	r3, [pc, #104]	@ (8011624 <prvSwitchTimerLists+0xc4>)
 80115bc:	681a      	ldr	r2, [r3, #0]
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	3304      	adds	r3, #4
 80115c2:	4619      	mov	r1, r3
 80115c4:	4610      	mov	r0, r2
 80115c6:	f7fd fb24 	bl	800ec12 <vListInsert>
 80115ca:	e017      	b.n	80115fc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80115cc:	2300      	movs	r3, #0
 80115ce:	9300      	str	r3, [sp, #0]
 80115d0:	2300      	movs	r3, #0
 80115d2:	693a      	ldr	r2, [r7, #16]
 80115d4:	2100      	movs	r1, #0
 80115d6:	68f8      	ldr	r0, [r7, #12]
 80115d8:	f7ff fd58 	bl	801108c <xTimerGenericCommand>
 80115dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d10b      	bne.n	80115fc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80115e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115e8:	f383 8811 	msr	BASEPRI, r3
 80115ec:	f3bf 8f6f 	isb	sy
 80115f0:	f3bf 8f4f 	dsb	sy
 80115f4:	603b      	str	r3, [r7, #0]
}
 80115f6:	bf00      	nop
 80115f8:	bf00      	nop
 80115fa:	e7fd      	b.n	80115f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80115fc:	4b09      	ldr	r3, [pc, #36]	@ (8011624 <prvSwitchTimerLists+0xc4>)
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d1b0      	bne.n	8011568 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011606:	4b07      	ldr	r3, [pc, #28]	@ (8011624 <prvSwitchTimerLists+0xc4>)
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801160c:	4b06      	ldr	r3, [pc, #24]	@ (8011628 <prvSwitchTimerLists+0xc8>)
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	4a04      	ldr	r2, [pc, #16]	@ (8011624 <prvSwitchTimerLists+0xc4>)
 8011612:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011614:	4a04      	ldr	r2, [pc, #16]	@ (8011628 <prvSwitchTimerLists+0xc8>)
 8011616:	697b      	ldr	r3, [r7, #20]
 8011618:	6013      	str	r3, [r2, #0]
}
 801161a:	bf00      	nop
 801161c:	3718      	adds	r7, #24
 801161e:	46bd      	mov	sp, r7
 8011620:	bd80      	pop	{r7, pc}
 8011622:	bf00      	nop
 8011624:	24033ab8 	.word	0x24033ab8
 8011628:	24033abc 	.word	0x24033abc

0801162c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b082      	sub	sp, #8
 8011630:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011632:	f000 f969 	bl	8011908 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011636:	4b15      	ldr	r3, [pc, #84]	@ (801168c <prvCheckForValidListAndQueue+0x60>)
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d120      	bne.n	8011680 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801163e:	4814      	ldr	r0, [pc, #80]	@ (8011690 <prvCheckForValidListAndQueue+0x64>)
 8011640:	f7fd fa96 	bl	800eb70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011644:	4813      	ldr	r0, [pc, #76]	@ (8011694 <prvCheckForValidListAndQueue+0x68>)
 8011646:	f7fd fa93 	bl	800eb70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801164a:	4b13      	ldr	r3, [pc, #76]	@ (8011698 <prvCheckForValidListAndQueue+0x6c>)
 801164c:	4a10      	ldr	r2, [pc, #64]	@ (8011690 <prvCheckForValidListAndQueue+0x64>)
 801164e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011650:	4b12      	ldr	r3, [pc, #72]	@ (801169c <prvCheckForValidListAndQueue+0x70>)
 8011652:	4a10      	ldr	r2, [pc, #64]	@ (8011694 <prvCheckForValidListAndQueue+0x68>)
 8011654:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011656:	2300      	movs	r3, #0
 8011658:	9300      	str	r3, [sp, #0]
 801165a:	4b11      	ldr	r3, [pc, #68]	@ (80116a0 <prvCheckForValidListAndQueue+0x74>)
 801165c:	4a11      	ldr	r2, [pc, #68]	@ (80116a4 <prvCheckForValidListAndQueue+0x78>)
 801165e:	2110      	movs	r1, #16
 8011660:	200a      	movs	r0, #10
 8011662:	f7fd fba3 	bl	800edac <xQueueGenericCreateStatic>
 8011666:	4603      	mov	r3, r0
 8011668:	4a08      	ldr	r2, [pc, #32]	@ (801168c <prvCheckForValidListAndQueue+0x60>)
 801166a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801166c:	4b07      	ldr	r3, [pc, #28]	@ (801168c <prvCheckForValidListAndQueue+0x60>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d005      	beq.n	8011680 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011674:	4b05      	ldr	r3, [pc, #20]	@ (801168c <prvCheckForValidListAndQueue+0x60>)
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	490b      	ldr	r1, [pc, #44]	@ (80116a8 <prvCheckForValidListAndQueue+0x7c>)
 801167a:	4618      	mov	r0, r3
 801167c:	f7fe f9e4 	bl	800fa48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011680:	f000 f974 	bl	801196c <vPortExitCritical>
}
 8011684:	bf00      	nop
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}
 801168a:	bf00      	nop
 801168c:	24033ac0 	.word	0x24033ac0
 8011690:	24033a90 	.word	0x24033a90
 8011694:	24033aa4 	.word	0x24033aa4
 8011698:	24033ab8 	.word	0x24033ab8
 801169c:	24033abc 	.word	0x24033abc
 80116a0:	24033b6c 	.word	0x24033b6c
 80116a4:	24033acc 	.word	0x24033acc
 80116a8:	08022c2c 	.word	0x08022c2c

080116ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80116ac:	b480      	push	{r7}
 80116ae:	b085      	sub	sp, #20
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	60f8      	str	r0, [r7, #12]
 80116b4:	60b9      	str	r1, [r7, #8]
 80116b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	3b04      	subs	r3, #4
 80116bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80116c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	3b04      	subs	r3, #4
 80116ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80116cc:	68bb      	ldr	r3, [r7, #8]
 80116ce:	f023 0201 	bic.w	r2, r3, #1
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	3b04      	subs	r3, #4
 80116da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80116dc:	4a0c      	ldr	r2, [pc, #48]	@ (8011710 <pxPortInitialiseStack+0x64>)
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	3b14      	subs	r3, #20
 80116e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80116e8:	687a      	ldr	r2, [r7, #4]
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	3b04      	subs	r3, #4
 80116f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	f06f 0202 	mvn.w	r2, #2
 80116fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	3b20      	subs	r3, #32
 8011700:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011702:	68fb      	ldr	r3, [r7, #12]
}
 8011704:	4618      	mov	r0, r3
 8011706:	3714      	adds	r7, #20
 8011708:	46bd      	mov	sp, r7
 801170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170e:	4770      	bx	lr
 8011710:	08011715 	.word	0x08011715

08011714 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011714:	b480      	push	{r7}
 8011716:	b085      	sub	sp, #20
 8011718:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801171a:	2300      	movs	r3, #0
 801171c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801171e:	4b13      	ldr	r3, [pc, #76]	@ (801176c <prvTaskExitError+0x58>)
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011726:	d00b      	beq.n	8011740 <prvTaskExitError+0x2c>
	__asm volatile
 8011728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801172c:	f383 8811 	msr	BASEPRI, r3
 8011730:	f3bf 8f6f 	isb	sy
 8011734:	f3bf 8f4f 	dsb	sy
 8011738:	60fb      	str	r3, [r7, #12]
}
 801173a:	bf00      	nop
 801173c:	bf00      	nop
 801173e:	e7fd      	b.n	801173c <prvTaskExitError+0x28>
	__asm volatile
 8011740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011744:	f383 8811 	msr	BASEPRI, r3
 8011748:	f3bf 8f6f 	isb	sy
 801174c:	f3bf 8f4f 	dsb	sy
 8011750:	60bb      	str	r3, [r7, #8]
}
 8011752:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011754:	bf00      	nop
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d0fc      	beq.n	8011756 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801175c:	bf00      	nop
 801175e:	bf00      	nop
 8011760:	3714      	adds	r7, #20
 8011762:	46bd      	mov	sp, r7
 8011764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011768:	4770      	bx	lr
 801176a:	bf00      	nop
 801176c:	24000014 	.word	0x24000014

08011770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011770:	4b07      	ldr	r3, [pc, #28]	@ (8011790 <pxCurrentTCBConst2>)
 8011772:	6819      	ldr	r1, [r3, #0]
 8011774:	6808      	ldr	r0, [r1, #0]
 8011776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801177a:	f380 8809 	msr	PSP, r0
 801177e:	f3bf 8f6f 	isb	sy
 8011782:	f04f 0000 	mov.w	r0, #0
 8011786:	f380 8811 	msr	BASEPRI, r0
 801178a:	4770      	bx	lr
 801178c:	f3af 8000 	nop.w

08011790 <pxCurrentTCBConst2>:
 8011790:	24033590 	.word	0x24033590
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011794:	bf00      	nop
 8011796:	bf00      	nop

08011798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011798:	4808      	ldr	r0, [pc, #32]	@ (80117bc <prvPortStartFirstTask+0x24>)
 801179a:	6800      	ldr	r0, [r0, #0]
 801179c:	6800      	ldr	r0, [r0, #0]
 801179e:	f380 8808 	msr	MSP, r0
 80117a2:	f04f 0000 	mov.w	r0, #0
 80117a6:	f380 8814 	msr	CONTROL, r0
 80117aa:	b662      	cpsie	i
 80117ac:	b661      	cpsie	f
 80117ae:	f3bf 8f4f 	dsb	sy
 80117b2:	f3bf 8f6f 	isb	sy
 80117b6:	df00      	svc	0
 80117b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80117ba:	bf00      	nop
 80117bc:	e000ed08 	.word	0xe000ed08

080117c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b086      	sub	sp, #24
 80117c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80117c6:	4b47      	ldr	r3, [pc, #284]	@ (80118e4 <xPortStartScheduler+0x124>)
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	4a47      	ldr	r2, [pc, #284]	@ (80118e8 <xPortStartScheduler+0x128>)
 80117cc:	4293      	cmp	r3, r2
 80117ce:	d10b      	bne.n	80117e8 <xPortStartScheduler+0x28>
	__asm volatile
 80117d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117d4:	f383 8811 	msr	BASEPRI, r3
 80117d8:	f3bf 8f6f 	isb	sy
 80117dc:	f3bf 8f4f 	dsb	sy
 80117e0:	613b      	str	r3, [r7, #16]
}
 80117e2:	bf00      	nop
 80117e4:	bf00      	nop
 80117e6:	e7fd      	b.n	80117e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80117e8:	4b3e      	ldr	r3, [pc, #248]	@ (80118e4 <xPortStartScheduler+0x124>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	4a3f      	ldr	r2, [pc, #252]	@ (80118ec <xPortStartScheduler+0x12c>)
 80117ee:	4293      	cmp	r3, r2
 80117f0:	d10b      	bne.n	801180a <xPortStartScheduler+0x4a>
	__asm volatile
 80117f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117f6:	f383 8811 	msr	BASEPRI, r3
 80117fa:	f3bf 8f6f 	isb	sy
 80117fe:	f3bf 8f4f 	dsb	sy
 8011802:	60fb      	str	r3, [r7, #12]
}
 8011804:	bf00      	nop
 8011806:	bf00      	nop
 8011808:	e7fd      	b.n	8011806 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801180a:	4b39      	ldr	r3, [pc, #228]	@ (80118f0 <xPortStartScheduler+0x130>)
 801180c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801180e:	697b      	ldr	r3, [r7, #20]
 8011810:	781b      	ldrb	r3, [r3, #0]
 8011812:	b2db      	uxtb	r3, r3
 8011814:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011816:	697b      	ldr	r3, [r7, #20]
 8011818:	22ff      	movs	r2, #255	@ 0xff
 801181a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801181c:	697b      	ldr	r3, [r7, #20]
 801181e:	781b      	ldrb	r3, [r3, #0]
 8011820:	b2db      	uxtb	r3, r3
 8011822:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011824:	78fb      	ldrb	r3, [r7, #3]
 8011826:	b2db      	uxtb	r3, r3
 8011828:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801182c:	b2da      	uxtb	r2, r3
 801182e:	4b31      	ldr	r3, [pc, #196]	@ (80118f4 <xPortStartScheduler+0x134>)
 8011830:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011832:	4b31      	ldr	r3, [pc, #196]	@ (80118f8 <xPortStartScheduler+0x138>)
 8011834:	2207      	movs	r2, #7
 8011836:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011838:	e009      	b.n	801184e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801183a:	4b2f      	ldr	r3, [pc, #188]	@ (80118f8 <xPortStartScheduler+0x138>)
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	3b01      	subs	r3, #1
 8011840:	4a2d      	ldr	r2, [pc, #180]	@ (80118f8 <xPortStartScheduler+0x138>)
 8011842:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011844:	78fb      	ldrb	r3, [r7, #3]
 8011846:	b2db      	uxtb	r3, r3
 8011848:	005b      	lsls	r3, r3, #1
 801184a:	b2db      	uxtb	r3, r3
 801184c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801184e:	78fb      	ldrb	r3, [r7, #3]
 8011850:	b2db      	uxtb	r3, r3
 8011852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011856:	2b80      	cmp	r3, #128	@ 0x80
 8011858:	d0ef      	beq.n	801183a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801185a:	4b27      	ldr	r3, [pc, #156]	@ (80118f8 <xPortStartScheduler+0x138>)
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	f1c3 0307 	rsb	r3, r3, #7
 8011862:	2b04      	cmp	r3, #4
 8011864:	d00b      	beq.n	801187e <xPortStartScheduler+0xbe>
	__asm volatile
 8011866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801186a:	f383 8811 	msr	BASEPRI, r3
 801186e:	f3bf 8f6f 	isb	sy
 8011872:	f3bf 8f4f 	dsb	sy
 8011876:	60bb      	str	r3, [r7, #8]
}
 8011878:	bf00      	nop
 801187a:	bf00      	nop
 801187c:	e7fd      	b.n	801187a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801187e:	4b1e      	ldr	r3, [pc, #120]	@ (80118f8 <xPortStartScheduler+0x138>)
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	021b      	lsls	r3, r3, #8
 8011884:	4a1c      	ldr	r2, [pc, #112]	@ (80118f8 <xPortStartScheduler+0x138>)
 8011886:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011888:	4b1b      	ldr	r3, [pc, #108]	@ (80118f8 <xPortStartScheduler+0x138>)
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011890:	4a19      	ldr	r2, [pc, #100]	@ (80118f8 <xPortStartScheduler+0x138>)
 8011892:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	b2da      	uxtb	r2, r3
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801189c:	4b17      	ldr	r3, [pc, #92]	@ (80118fc <xPortStartScheduler+0x13c>)
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	4a16      	ldr	r2, [pc, #88]	@ (80118fc <xPortStartScheduler+0x13c>)
 80118a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80118a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80118a8:	4b14      	ldr	r3, [pc, #80]	@ (80118fc <xPortStartScheduler+0x13c>)
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	4a13      	ldr	r2, [pc, #76]	@ (80118fc <xPortStartScheduler+0x13c>)
 80118ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80118b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80118b4:	f000 f8da 	bl	8011a6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80118b8:	4b11      	ldr	r3, [pc, #68]	@ (8011900 <xPortStartScheduler+0x140>)
 80118ba:	2200      	movs	r2, #0
 80118bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80118be:	f000 f8f9 	bl	8011ab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80118c2:	4b10      	ldr	r3, [pc, #64]	@ (8011904 <xPortStartScheduler+0x144>)
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	4a0f      	ldr	r2, [pc, #60]	@ (8011904 <xPortStartScheduler+0x144>)
 80118c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80118cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80118ce:	f7ff ff63 	bl	8011798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80118d2:	f7fe fcf1 	bl	80102b8 <vTaskSwitchContext>
	prvTaskExitError();
 80118d6:	f7ff ff1d 	bl	8011714 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80118da:	2300      	movs	r3, #0
}
 80118dc:	4618      	mov	r0, r3
 80118de:	3718      	adds	r7, #24
 80118e0:	46bd      	mov	sp, r7
 80118e2:	bd80      	pop	{r7, pc}
 80118e4:	e000ed00 	.word	0xe000ed00
 80118e8:	410fc271 	.word	0x410fc271
 80118ec:	410fc270 	.word	0x410fc270
 80118f0:	e000e400 	.word	0xe000e400
 80118f4:	24033bbc 	.word	0x24033bbc
 80118f8:	24033bc0 	.word	0x24033bc0
 80118fc:	e000ed20 	.word	0xe000ed20
 8011900:	24000014 	.word	0x24000014
 8011904:	e000ef34 	.word	0xe000ef34

08011908 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011908:	b480      	push	{r7}
 801190a:	b083      	sub	sp, #12
 801190c:	af00      	add	r7, sp, #0
	__asm volatile
 801190e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011912:	f383 8811 	msr	BASEPRI, r3
 8011916:	f3bf 8f6f 	isb	sy
 801191a:	f3bf 8f4f 	dsb	sy
 801191e:	607b      	str	r3, [r7, #4]
}
 8011920:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011922:	4b10      	ldr	r3, [pc, #64]	@ (8011964 <vPortEnterCritical+0x5c>)
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	3301      	adds	r3, #1
 8011928:	4a0e      	ldr	r2, [pc, #56]	@ (8011964 <vPortEnterCritical+0x5c>)
 801192a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801192c:	4b0d      	ldr	r3, [pc, #52]	@ (8011964 <vPortEnterCritical+0x5c>)
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	2b01      	cmp	r3, #1
 8011932:	d110      	bne.n	8011956 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011934:	4b0c      	ldr	r3, [pc, #48]	@ (8011968 <vPortEnterCritical+0x60>)
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	b2db      	uxtb	r3, r3
 801193a:	2b00      	cmp	r3, #0
 801193c:	d00b      	beq.n	8011956 <vPortEnterCritical+0x4e>
	__asm volatile
 801193e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011942:	f383 8811 	msr	BASEPRI, r3
 8011946:	f3bf 8f6f 	isb	sy
 801194a:	f3bf 8f4f 	dsb	sy
 801194e:	603b      	str	r3, [r7, #0]
}
 8011950:	bf00      	nop
 8011952:	bf00      	nop
 8011954:	e7fd      	b.n	8011952 <vPortEnterCritical+0x4a>
	}
}
 8011956:	bf00      	nop
 8011958:	370c      	adds	r7, #12
 801195a:	46bd      	mov	sp, r7
 801195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011960:	4770      	bx	lr
 8011962:	bf00      	nop
 8011964:	24000014 	.word	0x24000014
 8011968:	e000ed04 	.word	0xe000ed04

0801196c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801196c:	b480      	push	{r7}
 801196e:	b083      	sub	sp, #12
 8011970:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011972:	4b12      	ldr	r3, [pc, #72]	@ (80119bc <vPortExitCritical+0x50>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d10b      	bne.n	8011992 <vPortExitCritical+0x26>
	__asm volatile
 801197a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801197e:	f383 8811 	msr	BASEPRI, r3
 8011982:	f3bf 8f6f 	isb	sy
 8011986:	f3bf 8f4f 	dsb	sy
 801198a:	607b      	str	r3, [r7, #4]
}
 801198c:	bf00      	nop
 801198e:	bf00      	nop
 8011990:	e7fd      	b.n	801198e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011992:	4b0a      	ldr	r3, [pc, #40]	@ (80119bc <vPortExitCritical+0x50>)
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	3b01      	subs	r3, #1
 8011998:	4a08      	ldr	r2, [pc, #32]	@ (80119bc <vPortExitCritical+0x50>)
 801199a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801199c:	4b07      	ldr	r3, [pc, #28]	@ (80119bc <vPortExitCritical+0x50>)
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d105      	bne.n	80119b0 <vPortExitCritical+0x44>
 80119a4:	2300      	movs	r3, #0
 80119a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80119a8:	683b      	ldr	r3, [r7, #0]
 80119aa:	f383 8811 	msr	BASEPRI, r3
}
 80119ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80119b0:	bf00      	nop
 80119b2:	370c      	adds	r7, #12
 80119b4:	46bd      	mov	sp, r7
 80119b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ba:	4770      	bx	lr
 80119bc:	24000014 	.word	0x24000014

080119c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80119c0:	f3ef 8009 	mrs	r0, PSP
 80119c4:	f3bf 8f6f 	isb	sy
 80119c8:	4b15      	ldr	r3, [pc, #84]	@ (8011a20 <pxCurrentTCBConst>)
 80119ca:	681a      	ldr	r2, [r3, #0]
 80119cc:	f01e 0f10 	tst.w	lr, #16
 80119d0:	bf08      	it	eq
 80119d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80119d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119da:	6010      	str	r0, [r2, #0]
 80119dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80119e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80119e4:	f380 8811 	msr	BASEPRI, r0
 80119e8:	f3bf 8f4f 	dsb	sy
 80119ec:	f3bf 8f6f 	isb	sy
 80119f0:	f7fe fc62 	bl	80102b8 <vTaskSwitchContext>
 80119f4:	f04f 0000 	mov.w	r0, #0
 80119f8:	f380 8811 	msr	BASEPRI, r0
 80119fc:	bc09      	pop	{r0, r3}
 80119fe:	6819      	ldr	r1, [r3, #0]
 8011a00:	6808      	ldr	r0, [r1, #0]
 8011a02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a06:	f01e 0f10 	tst.w	lr, #16
 8011a0a:	bf08      	it	eq
 8011a0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011a10:	f380 8809 	msr	PSP, r0
 8011a14:	f3bf 8f6f 	isb	sy
 8011a18:	4770      	bx	lr
 8011a1a:	bf00      	nop
 8011a1c:	f3af 8000 	nop.w

08011a20 <pxCurrentTCBConst>:
 8011a20:	24033590 	.word	0x24033590
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011a24:	bf00      	nop
 8011a26:	bf00      	nop

08011a28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b082      	sub	sp, #8
 8011a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8011a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a32:	f383 8811 	msr	BASEPRI, r3
 8011a36:	f3bf 8f6f 	isb	sy
 8011a3a:	f3bf 8f4f 	dsb	sy
 8011a3e:	607b      	str	r3, [r7, #4]
}
 8011a40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011a42:	f7fe fb7f 	bl	8010144 <xTaskIncrementTick>
 8011a46:	4603      	mov	r3, r0
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d003      	beq.n	8011a54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011a4c:	4b06      	ldr	r3, [pc, #24]	@ (8011a68 <xPortSysTickHandler+0x40>)
 8011a4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011a52:	601a      	str	r2, [r3, #0]
 8011a54:	2300      	movs	r3, #0
 8011a56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011a58:	683b      	ldr	r3, [r7, #0]
 8011a5a:	f383 8811 	msr	BASEPRI, r3
}
 8011a5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011a60:	bf00      	nop
 8011a62:	3708      	adds	r7, #8
 8011a64:	46bd      	mov	sp, r7
 8011a66:	bd80      	pop	{r7, pc}
 8011a68:	e000ed04 	.word	0xe000ed04

08011a6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011a6c:	b480      	push	{r7}
 8011a6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011a70:	4b0b      	ldr	r3, [pc, #44]	@ (8011aa0 <vPortSetupTimerInterrupt+0x34>)
 8011a72:	2200      	movs	r2, #0
 8011a74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011a76:	4b0b      	ldr	r3, [pc, #44]	@ (8011aa4 <vPortSetupTimerInterrupt+0x38>)
 8011a78:	2200      	movs	r2, #0
 8011a7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8011aa8 <vPortSetupTimerInterrupt+0x3c>)
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	4a0a      	ldr	r2, [pc, #40]	@ (8011aac <vPortSetupTimerInterrupt+0x40>)
 8011a82:	fba2 2303 	umull	r2, r3, r2, r3
 8011a86:	099b      	lsrs	r3, r3, #6
 8011a88:	4a09      	ldr	r2, [pc, #36]	@ (8011ab0 <vPortSetupTimerInterrupt+0x44>)
 8011a8a:	3b01      	subs	r3, #1
 8011a8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011a8e:	4b04      	ldr	r3, [pc, #16]	@ (8011aa0 <vPortSetupTimerInterrupt+0x34>)
 8011a90:	2207      	movs	r2, #7
 8011a92:	601a      	str	r2, [r3, #0]
}
 8011a94:	bf00      	nop
 8011a96:	46bd      	mov	sp, r7
 8011a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9c:	4770      	bx	lr
 8011a9e:	bf00      	nop
 8011aa0:	e000e010 	.word	0xe000e010
 8011aa4:	e000e018 	.word	0xe000e018
 8011aa8:	24000004 	.word	0x24000004
 8011aac:	10624dd3 	.word	0x10624dd3
 8011ab0:	e000e014 	.word	0xe000e014

08011ab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011ab4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8011ac4 <vPortEnableVFP+0x10>
 8011ab8:	6801      	ldr	r1, [r0, #0]
 8011aba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8011abe:	6001      	str	r1, [r0, #0]
 8011ac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011ac2:	bf00      	nop
 8011ac4:	e000ed88 	.word	0xe000ed88

08011ac8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011ac8:	b480      	push	{r7}
 8011aca:	b085      	sub	sp, #20
 8011acc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011ace:	f3ef 8305 	mrs	r3, IPSR
 8011ad2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	2b0f      	cmp	r3, #15
 8011ad8:	d915      	bls.n	8011b06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011ada:	4a18      	ldr	r2, [pc, #96]	@ (8011b3c <vPortValidateInterruptPriority+0x74>)
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	4413      	add	r3, r2
 8011ae0:	781b      	ldrb	r3, [r3, #0]
 8011ae2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011ae4:	4b16      	ldr	r3, [pc, #88]	@ (8011b40 <vPortValidateInterruptPriority+0x78>)
 8011ae6:	781b      	ldrb	r3, [r3, #0]
 8011ae8:	7afa      	ldrb	r2, [r7, #11]
 8011aea:	429a      	cmp	r2, r3
 8011aec:	d20b      	bcs.n	8011b06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8011aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011af2:	f383 8811 	msr	BASEPRI, r3
 8011af6:	f3bf 8f6f 	isb	sy
 8011afa:	f3bf 8f4f 	dsb	sy
 8011afe:	607b      	str	r3, [r7, #4]
}
 8011b00:	bf00      	nop
 8011b02:	bf00      	nop
 8011b04:	e7fd      	b.n	8011b02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011b06:	4b0f      	ldr	r3, [pc, #60]	@ (8011b44 <vPortValidateInterruptPriority+0x7c>)
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8011b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8011b48 <vPortValidateInterruptPriority+0x80>)
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	429a      	cmp	r2, r3
 8011b14:	d90b      	bls.n	8011b2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8011b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b1a:	f383 8811 	msr	BASEPRI, r3
 8011b1e:	f3bf 8f6f 	isb	sy
 8011b22:	f3bf 8f4f 	dsb	sy
 8011b26:	603b      	str	r3, [r7, #0]
}
 8011b28:	bf00      	nop
 8011b2a:	bf00      	nop
 8011b2c:	e7fd      	b.n	8011b2a <vPortValidateInterruptPriority+0x62>
	}
 8011b2e:	bf00      	nop
 8011b30:	3714      	adds	r7, #20
 8011b32:	46bd      	mov	sp, r7
 8011b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b38:	4770      	bx	lr
 8011b3a:	bf00      	nop
 8011b3c:	e000e3f0 	.word	0xe000e3f0
 8011b40:	24033bbc 	.word	0x24033bbc
 8011b44:	e000ed0c 	.word	0xe000ed0c
 8011b48:	24033bc0 	.word	0x24033bc0

08011b4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b08a      	sub	sp, #40	@ 0x28
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011b54:	2300      	movs	r3, #0
 8011b56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011b58:	f7fe fa38 	bl	800ffcc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011b5c:	4b5c      	ldr	r3, [pc, #368]	@ (8011cd0 <pvPortMalloc+0x184>)
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d101      	bne.n	8011b68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011b64:	f000 f924 	bl	8011db0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011b68:	4b5a      	ldr	r3, [pc, #360]	@ (8011cd4 <pvPortMalloc+0x188>)
 8011b6a:	681a      	ldr	r2, [r3, #0]
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	4013      	ands	r3, r2
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	f040 8095 	bne.w	8011ca0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d01e      	beq.n	8011bba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8011b7c:	2208      	movs	r2, #8
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	4413      	add	r3, r2
 8011b82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	f003 0307 	and.w	r3, r3, #7
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d015      	beq.n	8011bba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	f023 0307 	bic.w	r3, r3, #7
 8011b94:	3308      	adds	r3, #8
 8011b96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f003 0307 	and.w	r3, r3, #7
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d00b      	beq.n	8011bba <pvPortMalloc+0x6e>
	__asm volatile
 8011ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ba6:	f383 8811 	msr	BASEPRI, r3
 8011baa:	f3bf 8f6f 	isb	sy
 8011bae:	f3bf 8f4f 	dsb	sy
 8011bb2:	617b      	str	r3, [r7, #20]
}
 8011bb4:	bf00      	nop
 8011bb6:	bf00      	nop
 8011bb8:	e7fd      	b.n	8011bb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d06f      	beq.n	8011ca0 <pvPortMalloc+0x154>
 8011bc0:	4b45      	ldr	r3, [pc, #276]	@ (8011cd8 <pvPortMalloc+0x18c>)
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	687a      	ldr	r2, [r7, #4]
 8011bc6:	429a      	cmp	r2, r3
 8011bc8:	d86a      	bhi.n	8011ca0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011bca:	4b44      	ldr	r3, [pc, #272]	@ (8011cdc <pvPortMalloc+0x190>)
 8011bcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011bce:	4b43      	ldr	r3, [pc, #268]	@ (8011cdc <pvPortMalloc+0x190>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011bd4:	e004      	b.n	8011be0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8011bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011be2:	685b      	ldr	r3, [r3, #4]
 8011be4:	687a      	ldr	r2, [r7, #4]
 8011be6:	429a      	cmp	r2, r3
 8011be8:	d903      	bls.n	8011bf2 <pvPortMalloc+0xa6>
 8011bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d1f1      	bne.n	8011bd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011bf2:	4b37      	ldr	r3, [pc, #220]	@ (8011cd0 <pvPortMalloc+0x184>)
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011bf8:	429a      	cmp	r2, r3
 8011bfa:	d051      	beq.n	8011ca0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011bfc:	6a3b      	ldr	r3, [r7, #32]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	2208      	movs	r2, #8
 8011c02:	4413      	add	r3, r2
 8011c04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c08:	681a      	ldr	r2, [r3, #0]
 8011c0a:	6a3b      	ldr	r3, [r7, #32]
 8011c0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c10:	685a      	ldr	r2, [r3, #4]
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	1ad2      	subs	r2, r2, r3
 8011c16:	2308      	movs	r3, #8
 8011c18:	005b      	lsls	r3, r3, #1
 8011c1a:	429a      	cmp	r2, r3
 8011c1c:	d920      	bls.n	8011c60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	4413      	add	r3, r2
 8011c24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011c26:	69bb      	ldr	r3, [r7, #24]
 8011c28:	f003 0307 	and.w	r3, r3, #7
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d00b      	beq.n	8011c48 <pvPortMalloc+0xfc>
	__asm volatile
 8011c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c34:	f383 8811 	msr	BASEPRI, r3
 8011c38:	f3bf 8f6f 	isb	sy
 8011c3c:	f3bf 8f4f 	dsb	sy
 8011c40:	613b      	str	r3, [r7, #16]
}
 8011c42:	bf00      	nop
 8011c44:	bf00      	nop
 8011c46:	e7fd      	b.n	8011c44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c4a:	685a      	ldr	r2, [r3, #4]
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	1ad2      	subs	r2, r2, r3
 8011c50:	69bb      	ldr	r3, [r7, #24]
 8011c52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c56:	687a      	ldr	r2, [r7, #4]
 8011c58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011c5a:	69b8      	ldr	r0, [r7, #24]
 8011c5c:	f000 f90c 	bl	8011e78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011c60:	4b1d      	ldr	r3, [pc, #116]	@ (8011cd8 <pvPortMalloc+0x18c>)
 8011c62:	681a      	ldr	r2, [r3, #0]
 8011c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c66:	685b      	ldr	r3, [r3, #4]
 8011c68:	1ad3      	subs	r3, r2, r3
 8011c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8011cd8 <pvPortMalloc+0x18c>)
 8011c6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8011cd8 <pvPortMalloc+0x18c>)
 8011c70:	681a      	ldr	r2, [r3, #0]
 8011c72:	4b1b      	ldr	r3, [pc, #108]	@ (8011ce0 <pvPortMalloc+0x194>)
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	429a      	cmp	r2, r3
 8011c78:	d203      	bcs.n	8011c82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011c7a:	4b17      	ldr	r3, [pc, #92]	@ (8011cd8 <pvPortMalloc+0x18c>)
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	4a18      	ldr	r2, [pc, #96]	@ (8011ce0 <pvPortMalloc+0x194>)
 8011c80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c84:	685a      	ldr	r2, [r3, #4]
 8011c86:	4b13      	ldr	r3, [pc, #76]	@ (8011cd4 <pvPortMalloc+0x188>)
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	431a      	orrs	r2, r3
 8011c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c92:	2200      	movs	r2, #0
 8011c94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011c96:	4b13      	ldr	r3, [pc, #76]	@ (8011ce4 <pvPortMalloc+0x198>)
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	3301      	adds	r3, #1
 8011c9c:	4a11      	ldr	r2, [pc, #68]	@ (8011ce4 <pvPortMalloc+0x198>)
 8011c9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011ca0:	f7fe f9a2 	bl	800ffe8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011ca4:	69fb      	ldr	r3, [r7, #28]
 8011ca6:	f003 0307 	and.w	r3, r3, #7
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d00b      	beq.n	8011cc6 <pvPortMalloc+0x17a>
	__asm volatile
 8011cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cb2:	f383 8811 	msr	BASEPRI, r3
 8011cb6:	f3bf 8f6f 	isb	sy
 8011cba:	f3bf 8f4f 	dsb	sy
 8011cbe:	60fb      	str	r3, [r7, #12]
}
 8011cc0:	bf00      	nop
 8011cc2:	bf00      	nop
 8011cc4:	e7fd      	b.n	8011cc2 <pvPortMalloc+0x176>
	return pvReturn;
 8011cc6:	69fb      	ldr	r3, [r7, #28]
}
 8011cc8:	4618      	mov	r0, r3
 8011cca:	3728      	adds	r7, #40	@ 0x28
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	bd80      	pop	{r7, pc}
 8011cd0:	2406490c 	.word	0x2406490c
 8011cd4:	24064920 	.word	0x24064920
 8011cd8:	24064910 	.word	0x24064910
 8011cdc:	24064904 	.word	0x24064904
 8011ce0:	24064914 	.word	0x24064914
 8011ce4:	24064918 	.word	0x24064918

08011ce8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b086      	sub	sp, #24
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d04f      	beq.n	8011d9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011cfa:	2308      	movs	r3, #8
 8011cfc:	425b      	negs	r3, r3
 8011cfe:	697a      	ldr	r2, [r7, #20]
 8011d00:	4413      	add	r3, r2
 8011d02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011d04:	697b      	ldr	r3, [r7, #20]
 8011d06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011d08:	693b      	ldr	r3, [r7, #16]
 8011d0a:	685a      	ldr	r2, [r3, #4]
 8011d0c:	4b25      	ldr	r3, [pc, #148]	@ (8011da4 <vPortFree+0xbc>)
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	4013      	ands	r3, r2
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d10b      	bne.n	8011d2e <vPortFree+0x46>
	__asm volatile
 8011d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d1a:	f383 8811 	msr	BASEPRI, r3
 8011d1e:	f3bf 8f6f 	isb	sy
 8011d22:	f3bf 8f4f 	dsb	sy
 8011d26:	60fb      	str	r3, [r7, #12]
}
 8011d28:	bf00      	nop
 8011d2a:	bf00      	nop
 8011d2c:	e7fd      	b.n	8011d2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011d2e:	693b      	ldr	r3, [r7, #16]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d00b      	beq.n	8011d4e <vPortFree+0x66>
	__asm volatile
 8011d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d3a:	f383 8811 	msr	BASEPRI, r3
 8011d3e:	f3bf 8f6f 	isb	sy
 8011d42:	f3bf 8f4f 	dsb	sy
 8011d46:	60bb      	str	r3, [r7, #8]
}
 8011d48:	bf00      	nop
 8011d4a:	bf00      	nop
 8011d4c:	e7fd      	b.n	8011d4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011d4e:	693b      	ldr	r3, [r7, #16]
 8011d50:	685a      	ldr	r2, [r3, #4]
 8011d52:	4b14      	ldr	r3, [pc, #80]	@ (8011da4 <vPortFree+0xbc>)
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	4013      	ands	r3, r2
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d01e      	beq.n	8011d9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011d5c:	693b      	ldr	r3, [r7, #16]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d11a      	bne.n	8011d9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011d64:	693b      	ldr	r3, [r7, #16]
 8011d66:	685a      	ldr	r2, [r3, #4]
 8011d68:	4b0e      	ldr	r3, [pc, #56]	@ (8011da4 <vPortFree+0xbc>)
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	43db      	mvns	r3, r3
 8011d6e:	401a      	ands	r2, r3
 8011d70:	693b      	ldr	r3, [r7, #16]
 8011d72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011d74:	f7fe f92a 	bl	800ffcc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011d78:	693b      	ldr	r3, [r7, #16]
 8011d7a:	685a      	ldr	r2, [r3, #4]
 8011d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8011da8 <vPortFree+0xc0>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	4413      	add	r3, r2
 8011d82:	4a09      	ldr	r2, [pc, #36]	@ (8011da8 <vPortFree+0xc0>)
 8011d84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011d86:	6938      	ldr	r0, [r7, #16]
 8011d88:	f000 f876 	bl	8011e78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011d8c:	4b07      	ldr	r3, [pc, #28]	@ (8011dac <vPortFree+0xc4>)
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	3301      	adds	r3, #1
 8011d92:	4a06      	ldr	r2, [pc, #24]	@ (8011dac <vPortFree+0xc4>)
 8011d94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011d96:	f7fe f927 	bl	800ffe8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011d9a:	bf00      	nop
 8011d9c:	3718      	adds	r7, #24
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd80      	pop	{r7, pc}
 8011da2:	bf00      	nop
 8011da4:	24064920 	.word	0x24064920
 8011da8:	24064910 	.word	0x24064910
 8011dac:	2406491c 	.word	0x2406491c

08011db0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011db0:	b480      	push	{r7}
 8011db2:	b085      	sub	sp, #20
 8011db4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011db6:	4b29      	ldr	r3, [pc, #164]	@ (8011e5c <prvHeapInit+0xac>)
 8011db8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011dba:	4b29      	ldr	r3, [pc, #164]	@ (8011e60 <prvHeapInit+0xb0>)
 8011dbc:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	f003 0307 	and.w	r3, r3, #7
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d00c      	beq.n	8011de2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	3307      	adds	r3, #7
 8011dcc:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	f023 0307 	bic.w	r3, r3, #7
 8011dd4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011dd6:	68ba      	ldr	r2, [r7, #8]
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	1ad3      	subs	r3, r2, r3
 8011ddc:	4a20      	ldr	r2, [pc, #128]	@ (8011e60 <prvHeapInit+0xb0>)
 8011dde:	4413      	add	r3, r2
 8011de0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011de6:	4a1f      	ldr	r2, [pc, #124]	@ (8011e64 <prvHeapInit+0xb4>)
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011dec:	4b1d      	ldr	r3, [pc, #116]	@ (8011e64 <prvHeapInit+0xb4>)
 8011dee:	2200      	movs	r2, #0
 8011df0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	68ba      	ldr	r2, [r7, #8]
 8011df6:	4413      	add	r3, r2
 8011df8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011dfa:	2208      	movs	r2, #8
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	1a9b      	subs	r3, r3, r2
 8011e00:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	f023 0307 	bic.w	r3, r3, #7
 8011e08:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	4a16      	ldr	r2, [pc, #88]	@ (8011e68 <prvHeapInit+0xb8>)
 8011e0e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011e10:	4b15      	ldr	r3, [pc, #84]	@ (8011e68 <prvHeapInit+0xb8>)
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	2200      	movs	r2, #0
 8011e16:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011e18:	4b13      	ldr	r3, [pc, #76]	@ (8011e68 <prvHeapInit+0xb8>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	2200      	movs	r2, #0
 8011e1e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	68fa      	ldr	r2, [r7, #12]
 8011e28:	1ad2      	subs	r2, r2, r3
 8011e2a:	683b      	ldr	r3, [r7, #0]
 8011e2c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8011e68 <prvHeapInit+0xb8>)
 8011e30:	681a      	ldr	r2, [r3, #0]
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011e36:	683b      	ldr	r3, [r7, #0]
 8011e38:	685b      	ldr	r3, [r3, #4]
 8011e3a:	4a0c      	ldr	r2, [pc, #48]	@ (8011e6c <prvHeapInit+0xbc>)
 8011e3c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011e3e:	683b      	ldr	r3, [r7, #0]
 8011e40:	685b      	ldr	r3, [r3, #4]
 8011e42:	4a0b      	ldr	r2, [pc, #44]	@ (8011e70 <prvHeapInit+0xc0>)
 8011e44:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011e46:	4b0b      	ldr	r3, [pc, #44]	@ (8011e74 <prvHeapInit+0xc4>)
 8011e48:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8011e4c:	601a      	str	r2, [r3, #0]
}
 8011e4e:	bf00      	nop
 8011e50:	3714      	adds	r7, #20
 8011e52:	46bd      	mov	sp, r7
 8011e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e58:	4770      	bx	lr
 8011e5a:	bf00      	nop
 8011e5c:	00030d40 	.word	0x00030d40
 8011e60:	24033bc4 	.word	0x24033bc4
 8011e64:	24064904 	.word	0x24064904
 8011e68:	2406490c 	.word	0x2406490c
 8011e6c:	24064914 	.word	0x24064914
 8011e70:	24064910 	.word	0x24064910
 8011e74:	24064920 	.word	0x24064920

08011e78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011e78:	b480      	push	{r7}
 8011e7a:	b085      	sub	sp, #20
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011e80:	4b28      	ldr	r3, [pc, #160]	@ (8011f24 <prvInsertBlockIntoFreeList+0xac>)
 8011e82:	60fb      	str	r3, [r7, #12]
 8011e84:	e002      	b.n	8011e8c <prvInsertBlockIntoFreeList+0x14>
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	60fb      	str	r3, [r7, #12]
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	687a      	ldr	r2, [r7, #4]
 8011e92:	429a      	cmp	r2, r3
 8011e94:	d8f7      	bhi.n	8011e86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	685b      	ldr	r3, [r3, #4]
 8011e9e:	68ba      	ldr	r2, [r7, #8]
 8011ea0:	4413      	add	r3, r2
 8011ea2:	687a      	ldr	r2, [r7, #4]
 8011ea4:	429a      	cmp	r2, r3
 8011ea6:	d108      	bne.n	8011eba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	685a      	ldr	r2, [r3, #4]
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	685b      	ldr	r3, [r3, #4]
 8011eb0:	441a      	add	r2, r3
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	685b      	ldr	r3, [r3, #4]
 8011ec2:	68ba      	ldr	r2, [r7, #8]
 8011ec4:	441a      	add	r2, r3
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	429a      	cmp	r2, r3
 8011ecc:	d118      	bne.n	8011f00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	681a      	ldr	r2, [r3, #0]
 8011ed2:	4b15      	ldr	r3, [pc, #84]	@ (8011f28 <prvInsertBlockIntoFreeList+0xb0>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	429a      	cmp	r2, r3
 8011ed8:	d00d      	beq.n	8011ef6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	685a      	ldr	r2, [r3, #4]
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	685b      	ldr	r3, [r3, #4]
 8011ee4:	441a      	add	r2, r3
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	681a      	ldr	r2, [r3, #0]
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	601a      	str	r2, [r3, #0]
 8011ef4:	e008      	b.n	8011f08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8011f28 <prvInsertBlockIntoFreeList+0xb0>)
 8011ef8:	681a      	ldr	r2, [r3, #0]
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	601a      	str	r2, [r3, #0]
 8011efe:	e003      	b.n	8011f08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	681a      	ldr	r2, [r3, #0]
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011f08:	68fa      	ldr	r2, [r7, #12]
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	429a      	cmp	r2, r3
 8011f0e:	d002      	beq.n	8011f16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	687a      	ldr	r2, [r7, #4]
 8011f14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011f16:	bf00      	nop
 8011f18:	3714      	adds	r7, #20
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f20:	4770      	bx	lr
 8011f22:	bf00      	nop
 8011f24:	24064904 	.word	0x24064904
 8011f28:	2406490c 	.word	0x2406490c

08011f2c <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 8011f2c:	4b04      	ldr	r3, [pc, #16]	@ (8011f40 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x14>)
 8011f2e:	681a      	ldr	r2, [r3, #0]
 8011f30:	b10a      	cbz	r2, 8011f36 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0xa>
 8011f32:	4803      	ldr	r0, [pc, #12]	@ (8011f40 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x14>)
 8011f34:	4770      	bx	lr
 8011f36:	4a03      	ldr	r2, [pc, #12]	@ (8011f44 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x18>)
 8011f38:	4801      	ldr	r0, [pc, #4]	@ (8011f40 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x14>)
 8011f3a:	6812      	ldr	r2, [r2, #0]
 8011f3c:	601a      	str	r2, [r3, #0]
 8011f3e:	4770      	bx	lr
 8011f40:	24000020 	.word	0x24000020
 8011f44:	24000e10 	.word	0x24000e10

08011f48 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 8011f48:	4a02      	ldr	r2, [pc, #8]	@ (8011f54 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0xc>)
 8011f4a:	4b03      	ldr	r3, [pc, #12]	@ (8011f58 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x10>)
 8011f4c:	6812      	ldr	r2, [r2, #0]
 8011f4e:	601a      	str	r2, [r3, #0]
 8011f50:	4770      	bx	lr
 8011f52:	bf00      	nop
 8011f54:	24000e10 	.word	0x24000e10
 8011f58:	24000020 	.word	0x24000020

08011f5c <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_init_function>:
 8011f5c:	f004 b8a2 	b.w	80160a4 <autoware_control_msgs__msg__Control__init>

08011f60 <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_fini_function>:
 8011f60:	f004 b8f6 	b.w	8016150 <autoware_control_msgs__msg__Control__fini>

08011f64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 8011f64:	b510      	push	{r4, lr}
 8011f66:	4c0c      	ldr	r4, [pc, #48]	@ (8011f98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x34>)
 8011f68:	f001 f91e 	bl	80131a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011f6c:	60e0      	str	r0, [r4, #12]
 8011f6e:	f001 f91b 	bl	80131a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011f72:	64a0      	str	r0, [r4, #72]	@ 0x48
 8011f74:	f000 f81a 	bl	8011fac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 8011f78:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8011f7c:	f000 f832 	bl	8011fe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 8011f80:	4b06      	ldr	r3, [pc, #24]	@ (8011f9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 8011f82:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 8011f86:	681a      	ldr	r2, [r3, #0]
 8011f88:	b10a      	cbz	r2, 8011f8e <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x2a>
 8011f8a:	4804      	ldr	r0, [pc, #16]	@ (8011f9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 8011f8c:	bd10      	pop	{r4, pc}
 8011f8e:	4a04      	ldr	r2, [pc, #16]	@ (8011fa0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x3c>)
 8011f90:	4802      	ldr	r0, [pc, #8]	@ (8011f9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 8011f92:	6812      	ldr	r2, [r2, #0]
 8011f94:	601a      	str	r2, [r3, #0]
 8011f96:	bd10      	pop	{r4, pc}
 8011f98:	2400002c 	.word	0x2400002c
 8011f9c:	2400011c 	.word	0x2400011c
 8011fa0:	24000e14 	.word	0x24000e14

08011fa4 <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_init_function>:
 8011fa4:	f004 b8e8 	b.w	8016178 <autoware_control_msgs__msg__Lateral__init>

08011fa8 <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_fini_function>:
 8011fa8:	f004 b90a 	b.w	80161c0 <autoware_control_msgs__msg__Lateral__fini>

08011fac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 8011fac:	b510      	push	{r4, lr}
 8011fae:	4c08      	ldr	r4, [pc, #32]	@ (8011fd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x24>)
 8011fb0:	f001 f8fa 	bl	80131a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011fb4:	60e0      	str	r0, [r4, #12]
 8011fb6:	f001 f8f7 	bl	80131a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011fba:	4b06      	ldr	r3, [pc, #24]	@ (8011fd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 8011fbc:	64a0      	str	r0, [r4, #72]	@ 0x48
 8011fbe:	681a      	ldr	r2, [r3, #0]
 8011fc0:	b10a      	cbz	r2, 8011fc6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x1a>
 8011fc2:	4804      	ldr	r0, [pc, #16]	@ (8011fd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 8011fc4:	bd10      	pop	{r4, pc}
 8011fc6:	4a04      	ldr	r2, [pc, #16]	@ (8011fd8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x2c>)
 8011fc8:	4802      	ldr	r0, [pc, #8]	@ (8011fd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 8011fca:	6812      	ldr	r2, [r2, #0]
 8011fcc:	601a      	str	r2, [r3, #0]
 8011fce:	bd10      	pop	{r4, pc}
 8011fd0:	24000128 	.word	0x24000128
 8011fd4:	24000254 	.word	0x24000254
 8011fd8:	24000e14 	.word	0x24000e14

08011fdc <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_init_function>:
 8011fdc:	f004 b8fc 	b.w	80161d8 <autoware_control_msgs__msg__Longitudinal__init>

08011fe0 <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_fini_function>:
 8011fe0:	f004 b91e 	b.w	8016220 <autoware_control_msgs__msg__Longitudinal__fini>

08011fe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 8011fe4:	b510      	push	{r4, lr}
 8011fe6:	4c08      	ldr	r4, [pc, #32]	@ (8012008 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x24>)
 8011fe8:	f001 f8de 	bl	80131a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011fec:	60e0      	str	r0, [r4, #12]
 8011fee:	f001 f8db 	bl	80131a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011ff2:	4b06      	ldr	r3, [pc, #24]	@ (801200c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 8011ff4:	64a0      	str	r0, [r4, #72]	@ 0x48
 8011ff6:	681a      	ldr	r2, [r3, #0]
 8011ff8:	b10a      	cbz	r2, 8011ffe <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x1a>
 8011ffa:	4804      	ldr	r0, [pc, #16]	@ (801200c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 8011ffc:	bd10      	pop	{r4, pc}
 8011ffe:	4a04      	ldr	r2, [pc, #16]	@ (8012010 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x2c>)
 8012000:	4802      	ldr	r0, [pc, #8]	@ (801200c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 8012002:	6812      	ldr	r2, [r2, #0]
 8012004:	601a      	str	r2, [r3, #0]
 8012006:	bd10      	pop	{r4, pc}
 8012008:	24000260 	.word	0x24000260
 801200c:	24000404 	.word	0x24000404
 8012010:	24000e14 	.word	0x24000e14

08012014 <get_serialized_size_autoware_control_msgs__msg__Control>:
 8012014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012016:	4604      	mov	r4, r0
 8012018:	b1c8      	cbz	r0, 801204e <get_serialized_size_autoware_control_msgs__msg__Control+0x3a>
 801201a:	460f      	mov	r7, r1
 801201c:	f001 f8d2 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012020:	4606      	mov	r6, r0
 8012022:	f104 0008 	add.w	r0, r4, #8
 8012026:	443e      	add	r6, r7
 8012028:	4631      	mov	r1, r6
 801202a:	f001 f8cb 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 801202e:	4605      	mov	r5, r0
 8012030:	f104 0010 	add.w	r0, r4, #16
 8012034:	4435      	add	r5, r6
 8012036:	4629      	mov	r1, r5
 8012038:	f000 f8a2 	bl	8012180 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 801203c:	4601      	mov	r1, r0
 801203e:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8012042:	440d      	add	r5, r1
 8012044:	4629      	mov	r1, r5
 8012046:	f000 f9a7 	bl	8012398 <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 801204a:	1bc0      	subs	r0, r0, r7
 801204c:	4428      	add	r0, r5
 801204e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012050 <_Control__cdr_deserialize>:
 8012050:	b570      	push	{r4, r5, r6, lr}
 8012052:	460c      	mov	r4, r1
 8012054:	b329      	cbz	r1, 80120a2 <_Control__cdr_deserialize+0x52>
 8012056:	4605      	mov	r5, r0
 8012058:	f001 f918 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801205c:	4603      	mov	r3, r0
 801205e:	4621      	mov	r1, r4
 8012060:	4628      	mov	r0, r5
 8012062:	685b      	ldr	r3, [r3, #4]
 8012064:	68db      	ldr	r3, [r3, #12]
 8012066:	4798      	blx	r3
 8012068:	f001 f910 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801206c:	4603      	mov	r3, r0
 801206e:	f104 0108 	add.w	r1, r4, #8
 8012072:	4628      	mov	r0, r5
 8012074:	685b      	ldr	r3, [r3, #4]
 8012076:	68db      	ldr	r3, [r3, #12]
 8012078:	4798      	blx	r3
 801207a:	f000 f95b 	bl	8012334 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 801207e:	4603      	mov	r3, r0
 8012080:	f104 0110 	add.w	r1, r4, #16
 8012084:	4628      	mov	r0, r5
 8012086:	685b      	ldr	r3, [r3, #4]
 8012088:	68db      	ldr	r3, [r3, #12]
 801208a:	4798      	blx	r3
 801208c:	f000 fa28 	bl	80124e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 8012090:	4603      	mov	r3, r0
 8012092:	f104 012c 	add.w	r1, r4, #44	@ 0x2c
 8012096:	4628      	mov	r0, r5
 8012098:	685b      	ldr	r3, [r3, #4]
 801209a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801209e:	68db      	ldr	r3, [r3, #12]
 80120a0:	4718      	bx	r3
 80120a2:	4608      	mov	r0, r1
 80120a4:	bd70      	pop	{r4, r5, r6, pc}
 80120a6:	bf00      	nop

080120a8 <_Control__cdr_serialize>:
 80120a8:	b338      	cbz	r0, 80120fa <_Control__cdr_serialize+0x52>
 80120aa:	b570      	push	{r4, r5, r6, lr}
 80120ac:	4604      	mov	r4, r0
 80120ae:	460d      	mov	r5, r1
 80120b0:	f001 f8ec 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80120b4:	4603      	mov	r3, r0
 80120b6:	4629      	mov	r1, r5
 80120b8:	4620      	mov	r0, r4
 80120ba:	685b      	ldr	r3, [r3, #4]
 80120bc:	689b      	ldr	r3, [r3, #8]
 80120be:	4798      	blx	r3
 80120c0:	f001 f8e4 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80120c4:	4603      	mov	r3, r0
 80120c6:	4629      	mov	r1, r5
 80120c8:	f104 0008 	add.w	r0, r4, #8
 80120cc:	685b      	ldr	r3, [r3, #4]
 80120ce:	689b      	ldr	r3, [r3, #8]
 80120d0:	4798      	blx	r3
 80120d2:	f000 f92f 	bl	8012334 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 80120d6:	4603      	mov	r3, r0
 80120d8:	4629      	mov	r1, r5
 80120da:	f104 0010 	add.w	r0, r4, #16
 80120de:	685b      	ldr	r3, [r3, #4]
 80120e0:	689b      	ldr	r3, [r3, #8]
 80120e2:	4798      	blx	r3
 80120e4:	f000 f9fc 	bl	80124e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 80120e8:	4603      	mov	r3, r0
 80120ea:	4629      	mov	r1, r5
 80120ec:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80120f0:	685b      	ldr	r3, [r3, #4]
 80120f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120f6:	689b      	ldr	r3, [r3, #8]
 80120f8:	4718      	bx	r3
 80120fa:	4770      	bx	lr

080120fc <_Control__get_serialized_size>:
 80120fc:	b538      	push	{r3, r4, r5, lr}
 80120fe:	4604      	mov	r4, r0
 8012100:	b1b8      	cbz	r0, 8012132 <_Control__get_serialized_size+0x36>
 8012102:	2100      	movs	r1, #0
 8012104:	f001 f85e 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012108:	4605      	mov	r5, r0
 801210a:	f104 0008 	add.w	r0, r4, #8
 801210e:	4629      	mov	r1, r5
 8012110:	f001 f858 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012114:	4601      	mov	r1, r0
 8012116:	f104 0010 	add.w	r0, r4, #16
 801211a:	440d      	add	r5, r1
 801211c:	4629      	mov	r1, r5
 801211e:	f000 f82f 	bl	8012180 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 8012122:	4601      	mov	r1, r0
 8012124:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8012128:	440d      	add	r5, r1
 801212a:	4629      	mov	r1, r5
 801212c:	f000 f934 	bl	8012398 <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 8012130:	4428      	add	r0, r5
 8012132:	bd38      	pop	{r3, r4, r5, pc}

08012134 <_Control__max_serialized_size>:
 8012134:	b530      	push	{r4, r5, lr}
 8012136:	b083      	sub	sp, #12
 8012138:	2301      	movs	r3, #1
 801213a:	2100      	movs	r1, #0
 801213c:	f10d 0007 	add.w	r0, sp, #7
 8012140:	f88d 3007 	strb.w	r3, [sp, #7]
 8012144:	f001 f88e 	bl	8013264 <max_serialized_size_builtin_interfaces__msg__Time>
 8012148:	4604      	mov	r4, r0
 801214a:	f10d 0007 	add.w	r0, sp, #7
 801214e:	4621      	mov	r1, r4
 8012150:	f001 f888 	bl	8013264 <max_serialized_size_builtin_interfaces__msg__Time>
 8012154:	4605      	mov	r5, r0
 8012156:	f10d 0007 	add.w	r0, sp, #7
 801215a:	4425      	add	r5, r4
 801215c:	4629      	mov	r1, r5
 801215e:	f000 f8c7 	bl	80122f0 <max_serialized_size_autoware_control_msgs__msg__Lateral>
 8012162:	4604      	mov	r4, r0
 8012164:	f10d 0007 	add.w	r0, sp, #7
 8012168:	442c      	add	r4, r5
 801216a:	4621      	mov	r1, r4
 801216c:	f000 f980 	bl	8012470 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 8012170:	4420      	add	r0, r4
 8012172:	b003      	add	sp, #12
 8012174:	bd30      	pop	{r4, r5, pc}
 8012176:	bf00      	nop

08012178 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 8012178:	4800      	ldr	r0, [pc, #0]	@ (801217c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x4>)
 801217a:	4770      	bx	lr
 801217c:	24000410 	.word	0x24000410

08012180 <get_serialized_size_autoware_control_msgs__msg__Lateral>:
 8012180:	b5b0      	push	{r4, r5, r7, lr}
 8012182:	4604      	mov	r4, r0
 8012184:	b1f0      	cbz	r0, 80121c4 <get_serialized_size_autoware_control_msgs__msg__Lateral+0x44>
 8012186:	460d      	mov	r5, r1
 8012188:	f001 f81c 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 801218c:	4607      	mov	r7, r0
 801218e:	f104 0008 	add.w	r0, r4, #8
 8012192:	442f      	add	r7, r5
 8012194:	f1c5 0501 	rsb	r5, r5, #1
 8012198:	4639      	mov	r1, r7
 801219a:	f001 f813 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 801219e:	4407      	add	r7, r0
 80121a0:	2104      	movs	r1, #4
 80121a2:	4638      	mov	r0, r7
 80121a4:	f002 fb12 	bl	80147cc <ucdr_alignment>
 80121a8:	2104      	movs	r1, #4
 80121aa:	1844      	adds	r4, r0, r1
 80121ac:	443c      	add	r4, r7
 80121ae:	4620      	mov	r0, r4
 80121b0:	f002 fb0c 	bl	80147cc <ucdr_alignment>
 80121b4:	3004      	adds	r0, #4
 80121b6:	2101      	movs	r1, #1
 80121b8:	4404      	add	r4, r0
 80121ba:	4620      	mov	r0, r4
 80121bc:	f002 fb06 	bl	80147cc <ucdr_alignment>
 80121c0:	4428      	add	r0, r5
 80121c2:	4420      	add	r0, r4
 80121c4:	bdb0      	pop	{r4, r5, r7, pc}
 80121c6:	bf00      	nop

080121c8 <_Lateral__cdr_deserialize>:
 80121c8:	b538      	push	{r3, r4, r5, lr}
 80121ca:	460c      	mov	r4, r1
 80121cc:	b311      	cbz	r1, 8012214 <_Lateral__cdr_deserialize+0x4c>
 80121ce:	4605      	mov	r5, r0
 80121d0:	f001 f85c 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80121d4:	4603      	mov	r3, r0
 80121d6:	4621      	mov	r1, r4
 80121d8:	4628      	mov	r0, r5
 80121da:	685b      	ldr	r3, [r3, #4]
 80121dc:	68db      	ldr	r3, [r3, #12]
 80121de:	4798      	blx	r3
 80121e0:	f001 f854 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80121e4:	4603      	mov	r3, r0
 80121e6:	f104 0108 	add.w	r1, r4, #8
 80121ea:	4628      	mov	r0, r5
 80121ec:	685b      	ldr	r3, [r3, #4]
 80121ee:	68db      	ldr	r3, [r3, #12]
 80121f0:	4798      	blx	r3
 80121f2:	f104 0110 	add.w	r1, r4, #16
 80121f6:	4628      	mov	r0, r5
 80121f8:	f002 f86a 	bl	80142d0 <ucdr_deserialize_float>
 80121fc:	f104 0114 	add.w	r1, r4, #20
 8012200:	4628      	mov	r0, r5
 8012202:	f002 f865 	bl	80142d0 <ucdr_deserialize_float>
 8012206:	f104 0118 	add.w	r1, r4, #24
 801220a:	4628      	mov	r0, r5
 801220c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012210:	f001 b856 	b.w	80132c0 <ucdr_deserialize_bool>
 8012214:	4608      	mov	r0, r1
 8012216:	bd38      	pop	{r3, r4, r5, pc}

08012218 <_Lateral__cdr_serialize>:
 8012218:	b318      	cbz	r0, 8012262 <_Lateral__cdr_serialize+0x4a>
 801221a:	b538      	push	{r3, r4, r5, lr}
 801221c:	4604      	mov	r4, r0
 801221e:	460d      	mov	r5, r1
 8012220:	f001 f834 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012224:	4603      	mov	r3, r0
 8012226:	4629      	mov	r1, r5
 8012228:	4620      	mov	r0, r4
 801222a:	685b      	ldr	r3, [r3, #4]
 801222c:	689b      	ldr	r3, [r3, #8]
 801222e:	4798      	blx	r3
 8012230:	f001 f82c 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012234:	4603      	mov	r3, r0
 8012236:	4629      	mov	r1, r5
 8012238:	f104 0008 	add.w	r0, r4, #8
 801223c:	685b      	ldr	r3, [r3, #4]
 801223e:	689b      	ldr	r3, [r3, #8]
 8012240:	4798      	blx	r3
 8012242:	ed94 0a04 	vldr	s0, [r4, #16]
 8012246:	4628      	mov	r0, r5
 8012248:	f001 ffaa 	bl	80141a0 <ucdr_serialize_float>
 801224c:	ed94 0a05 	vldr	s0, [r4, #20]
 8012250:	4628      	mov	r0, r5
 8012252:	f001 ffa5 	bl	80141a0 <ucdr_serialize_float>
 8012256:	7e21      	ldrb	r1, [r4, #24]
 8012258:	4628      	mov	r0, r5
 801225a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801225e:	f001 b819 	b.w	8013294 <ucdr_serialize_bool>
 8012262:	4770      	bx	lr

08012264 <_Lateral__get_serialized_size>:
 8012264:	b538      	push	{r3, r4, r5, lr}
 8012266:	4604      	mov	r4, r0
 8012268:	b1d8      	cbz	r0, 80122a2 <_Lateral__get_serialized_size+0x3e>
 801226a:	2100      	movs	r1, #0
 801226c:	f000 ffaa 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012270:	4605      	mov	r5, r0
 8012272:	f104 0008 	add.w	r0, r4, #8
 8012276:	4629      	mov	r1, r5
 8012278:	f000 ffa4 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 801227c:	4405      	add	r5, r0
 801227e:	2104      	movs	r1, #4
 8012280:	4628      	mov	r0, r5
 8012282:	f002 faa3 	bl	80147cc <ucdr_alignment>
 8012286:	2104      	movs	r1, #4
 8012288:	4408      	add	r0, r1
 801228a:	1944      	adds	r4, r0, r5
 801228c:	4620      	mov	r0, r4
 801228e:	f002 fa9d 	bl	80147cc <ucdr_alignment>
 8012292:	3004      	adds	r0, #4
 8012294:	2101      	movs	r1, #1
 8012296:	4404      	add	r4, r0
 8012298:	4620      	mov	r0, r4
 801229a:	f002 fa97 	bl	80147cc <ucdr_alignment>
 801229e:	3001      	adds	r0, #1
 80122a0:	4420      	add	r0, r4
 80122a2:	bd38      	pop	{r3, r4, r5, pc}

080122a4 <_Lateral__max_serialized_size>:
 80122a4:	b530      	push	{r4, r5, lr}
 80122a6:	b083      	sub	sp, #12
 80122a8:	2501      	movs	r5, #1
 80122aa:	2100      	movs	r1, #0
 80122ac:	f10d 0007 	add.w	r0, sp, #7
 80122b0:	f88d 5007 	strb.w	r5, [sp, #7]
 80122b4:	f000 ffd6 	bl	8013264 <max_serialized_size_builtin_interfaces__msg__Time>
 80122b8:	4604      	mov	r4, r0
 80122ba:	f10d 0007 	add.w	r0, sp, #7
 80122be:	4621      	mov	r1, r4
 80122c0:	f000 ffd0 	bl	8013264 <max_serialized_size_builtin_interfaces__msg__Time>
 80122c4:	4404      	add	r4, r0
 80122c6:	2104      	movs	r1, #4
 80122c8:	4620      	mov	r0, r4
 80122ca:	f002 fa7f 	bl	80147cc <ucdr_alignment>
 80122ce:	2104      	movs	r1, #4
 80122d0:	4408      	add	r0, r1
 80122d2:	4404      	add	r4, r0
 80122d4:	4620      	mov	r0, r4
 80122d6:	f002 fa79 	bl	80147cc <ucdr_alignment>
 80122da:	3004      	adds	r0, #4
 80122dc:	4629      	mov	r1, r5
 80122de:	4404      	add	r4, r0
 80122e0:	4620      	mov	r0, r4
 80122e2:	f002 fa73 	bl	80147cc <ucdr_alignment>
 80122e6:	4428      	add	r0, r5
 80122e8:	4420      	add	r0, r4
 80122ea:	b003      	add	sp, #12
 80122ec:	bd30      	pop	{r4, r5, pc}
 80122ee:	bf00      	nop

080122f0 <max_serialized_size_autoware_control_msgs__msg__Lateral>:
 80122f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122f2:	2701      	movs	r7, #1
 80122f4:	460c      	mov	r4, r1
 80122f6:	4606      	mov	r6, r0
 80122f8:	7007      	strb	r7, [r0, #0]
 80122fa:	f000 ffb3 	bl	8013264 <max_serialized_size_builtin_interfaces__msg__Time>
 80122fe:	4605      	mov	r5, r0
 8012300:	4630      	mov	r0, r6
 8012302:	4425      	add	r5, r4
 8012304:	1b3c      	subs	r4, r7, r4
 8012306:	4629      	mov	r1, r5
 8012308:	f000 ffac 	bl	8013264 <max_serialized_size_builtin_interfaces__msg__Time>
 801230c:	4405      	add	r5, r0
 801230e:	2104      	movs	r1, #4
 8012310:	4628      	mov	r0, r5
 8012312:	f002 fa5b 	bl	80147cc <ucdr_alignment>
 8012316:	2104      	movs	r1, #4
 8012318:	4408      	add	r0, r1
 801231a:	4405      	add	r5, r0
 801231c:	4628      	mov	r0, r5
 801231e:	f002 fa55 	bl	80147cc <ucdr_alignment>
 8012322:	3004      	adds	r0, #4
 8012324:	4639      	mov	r1, r7
 8012326:	4405      	add	r5, r0
 8012328:	4628      	mov	r0, r5
 801232a:	f002 fa4f 	bl	80147cc <ucdr_alignment>
 801232e:	4420      	add	r0, r4
 8012330:	4428      	add	r0, r5
 8012332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012334 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 8012334:	4800      	ldr	r0, [pc, #0]	@ (8012338 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x4>)
 8012336:	4770      	bx	lr
 8012338:	24000438 	.word	0x24000438

0801233c <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>:
 801233c:	b570      	push	{r4, r5, r6, lr}
 801233e:	460c      	mov	r4, r1
 8012340:	4606      	mov	r6, r0
 8012342:	f000 ff3f 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012346:	4605      	mov	r5, r0
 8012348:	f106 0008 	add.w	r0, r6, #8
 801234c:	4425      	add	r5, r4
 801234e:	f1c4 0401 	rsb	r4, r4, #1
 8012352:	4629      	mov	r1, r5
 8012354:	f000 ff36 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012358:	4405      	add	r5, r0
 801235a:	2104      	movs	r1, #4
 801235c:	4628      	mov	r0, r5
 801235e:	f002 fa35 	bl	80147cc <ucdr_alignment>
 8012362:	2104      	movs	r1, #4
 8012364:	4408      	add	r0, r1
 8012366:	4405      	add	r5, r0
 8012368:	4628      	mov	r0, r5
 801236a:	f002 fa2f 	bl	80147cc <ucdr_alignment>
 801236e:	2104      	movs	r1, #4
 8012370:	4408      	add	r0, r1
 8012372:	1946      	adds	r6, r0, r5
 8012374:	4630      	mov	r0, r6
 8012376:	f002 fa29 	bl	80147cc <ucdr_alignment>
 801237a:	1d05      	adds	r5, r0, #4
 801237c:	2101      	movs	r1, #1
 801237e:	4435      	add	r5, r6
 8012380:	4628      	mov	r0, r5
 8012382:	f002 fa23 	bl	80147cc <ucdr_alignment>
 8012386:	2101      	movs	r1, #1
 8012388:	4408      	add	r0, r1
 801238a:	4405      	add	r5, r0
 801238c:	4628      	mov	r0, r5
 801238e:	f002 fa1d 	bl	80147cc <ucdr_alignment>
 8012392:	4420      	add	r0, r4
 8012394:	4428      	add	r0, r5
 8012396:	bd70      	pop	{r4, r5, r6, pc}

08012398 <get_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 8012398:	b108      	cbz	r0, 801239e <get_serialized_size_autoware_control_msgs__msg__Longitudinal+0x6>
 801239a:	f7ff bfcf 	b.w	801233c <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 801239e:	4770      	bx	lr

080123a0 <_Longitudinal__get_serialized_size>:
 80123a0:	b110      	cbz	r0, 80123a8 <_Longitudinal__get_serialized_size+0x8>
 80123a2:	2100      	movs	r1, #0
 80123a4:	f7ff bfca 	b.w	801233c <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 80123a8:	4770      	bx	lr
 80123aa:	bf00      	nop

080123ac <_Longitudinal__cdr_deserialize>:
 80123ac:	b538      	push	{r3, r4, r5, lr}
 80123ae:	460c      	mov	r4, r1
 80123b0:	b361      	cbz	r1, 801240c <_Longitudinal__cdr_deserialize+0x60>
 80123b2:	4605      	mov	r5, r0
 80123b4:	f000 ff6a 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80123b8:	4603      	mov	r3, r0
 80123ba:	4621      	mov	r1, r4
 80123bc:	4628      	mov	r0, r5
 80123be:	685b      	ldr	r3, [r3, #4]
 80123c0:	68db      	ldr	r3, [r3, #12]
 80123c2:	4798      	blx	r3
 80123c4:	f000 ff62 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80123c8:	4603      	mov	r3, r0
 80123ca:	f104 0108 	add.w	r1, r4, #8
 80123ce:	4628      	mov	r0, r5
 80123d0:	685b      	ldr	r3, [r3, #4]
 80123d2:	68db      	ldr	r3, [r3, #12]
 80123d4:	4798      	blx	r3
 80123d6:	f104 0110 	add.w	r1, r4, #16
 80123da:	4628      	mov	r0, r5
 80123dc:	f001 ff78 	bl	80142d0 <ucdr_deserialize_float>
 80123e0:	f104 0114 	add.w	r1, r4, #20
 80123e4:	4628      	mov	r0, r5
 80123e6:	f001 ff73 	bl	80142d0 <ucdr_deserialize_float>
 80123ea:	f104 0118 	add.w	r1, r4, #24
 80123ee:	4628      	mov	r0, r5
 80123f0:	f001 ff6e 	bl	80142d0 <ucdr_deserialize_float>
 80123f4:	f104 011c 	add.w	r1, r4, #28
 80123f8:	4628      	mov	r0, r5
 80123fa:	f000 ff61 	bl	80132c0 <ucdr_deserialize_bool>
 80123fe:	f104 011d 	add.w	r1, r4, #29
 8012402:	4628      	mov	r0, r5
 8012404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012408:	f000 bf5a 	b.w	80132c0 <ucdr_deserialize_bool>
 801240c:	4608      	mov	r0, r1
 801240e:	bd38      	pop	{r3, r4, r5, pc}

08012410 <_Longitudinal__cdr_serialize>:
 8012410:	b360      	cbz	r0, 801246c <_Longitudinal__cdr_serialize+0x5c>
 8012412:	b538      	push	{r3, r4, r5, lr}
 8012414:	4604      	mov	r4, r0
 8012416:	460d      	mov	r5, r1
 8012418:	f000 ff38 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801241c:	4603      	mov	r3, r0
 801241e:	4629      	mov	r1, r5
 8012420:	4620      	mov	r0, r4
 8012422:	685b      	ldr	r3, [r3, #4]
 8012424:	689b      	ldr	r3, [r3, #8]
 8012426:	4798      	blx	r3
 8012428:	f000 ff30 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801242c:	4603      	mov	r3, r0
 801242e:	4629      	mov	r1, r5
 8012430:	f104 0008 	add.w	r0, r4, #8
 8012434:	685b      	ldr	r3, [r3, #4]
 8012436:	689b      	ldr	r3, [r3, #8]
 8012438:	4798      	blx	r3
 801243a:	ed94 0a04 	vldr	s0, [r4, #16]
 801243e:	4628      	mov	r0, r5
 8012440:	f001 feae 	bl	80141a0 <ucdr_serialize_float>
 8012444:	ed94 0a05 	vldr	s0, [r4, #20]
 8012448:	4628      	mov	r0, r5
 801244a:	f001 fea9 	bl	80141a0 <ucdr_serialize_float>
 801244e:	ed94 0a06 	vldr	s0, [r4, #24]
 8012452:	4628      	mov	r0, r5
 8012454:	f001 fea4 	bl	80141a0 <ucdr_serialize_float>
 8012458:	7f21      	ldrb	r1, [r4, #28]
 801245a:	4628      	mov	r0, r5
 801245c:	f000 ff1a 	bl	8013294 <ucdr_serialize_bool>
 8012460:	7f61      	ldrb	r1, [r4, #29]
 8012462:	4628      	mov	r0, r5
 8012464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012468:	f000 bf14 	b.w	8013294 <ucdr_serialize_bool>
 801246c:	4770      	bx	lr
 801246e:	bf00      	nop

08012470 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 8012470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012472:	2701      	movs	r7, #1
 8012474:	460c      	mov	r4, r1
 8012476:	4606      	mov	r6, r0
 8012478:	7007      	strb	r7, [r0, #0]
 801247a:	f000 fef3 	bl	8013264 <max_serialized_size_builtin_interfaces__msg__Time>
 801247e:	4605      	mov	r5, r0
 8012480:	4630      	mov	r0, r6
 8012482:	4425      	add	r5, r4
 8012484:	1b3c      	subs	r4, r7, r4
 8012486:	4629      	mov	r1, r5
 8012488:	f000 feec 	bl	8013264 <max_serialized_size_builtin_interfaces__msg__Time>
 801248c:	4405      	add	r5, r0
 801248e:	2104      	movs	r1, #4
 8012490:	4628      	mov	r0, r5
 8012492:	f002 f99b 	bl	80147cc <ucdr_alignment>
 8012496:	2104      	movs	r1, #4
 8012498:	4408      	add	r0, r1
 801249a:	4405      	add	r5, r0
 801249c:	4628      	mov	r0, r5
 801249e:	f002 f995 	bl	80147cc <ucdr_alignment>
 80124a2:	2104      	movs	r1, #4
 80124a4:	4408      	add	r0, r1
 80124a6:	1946      	adds	r6, r0, r5
 80124a8:	4630      	mov	r0, r6
 80124aa:	f002 f98f 	bl	80147cc <ucdr_alignment>
 80124ae:	1d05      	adds	r5, r0, #4
 80124b0:	4639      	mov	r1, r7
 80124b2:	4435      	add	r5, r6
 80124b4:	4628      	mov	r0, r5
 80124b6:	f002 f989 	bl	80147cc <ucdr_alignment>
 80124ba:	4438      	add	r0, r7
 80124bc:	4639      	mov	r1, r7
 80124be:	4405      	add	r5, r0
 80124c0:	4628      	mov	r0, r5
 80124c2:	f002 f983 	bl	80147cc <ucdr_alignment>
 80124c6:	4420      	add	r0, r4
 80124c8:	4428      	add	r0, r5
 80124ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080124cc <_Longitudinal__max_serialized_size>:
 80124cc:	b500      	push	{lr}
 80124ce:	b083      	sub	sp, #12
 80124d0:	2100      	movs	r1, #0
 80124d2:	f10d 0007 	add.w	r0, sp, #7
 80124d6:	f7ff ffcb 	bl	8012470 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 80124da:	b003      	add	sp, #12
 80124dc:	f85d fb04 	ldr.w	pc, [sp], #4

080124e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 80124e0:	4800      	ldr	r0, [pc, #0]	@ (80124e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x4>)
 80124e2:	4770      	bx	lr
 80124e4:	24000460 	.word	0x24000460

080124e8 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 80124e8:	4b04      	ldr	r3, [pc, #16]	@ (80124fc <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x14>)
 80124ea:	681a      	ldr	r2, [r3, #0]
 80124ec:	b10a      	cbz	r2, 80124f2 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0xa>
 80124ee:	4803      	ldr	r0, [pc, #12]	@ (80124fc <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x14>)
 80124f0:	4770      	bx	lr
 80124f2:	4a03      	ldr	r2, [pc, #12]	@ (8012500 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x18>)
 80124f4:	4801      	ldr	r0, [pc, #4]	@ (80124fc <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x14>)
 80124f6:	6812      	ldr	r2, [r2, #0]
 80124f8:	601a      	str	r2, [r3, #0]
 80124fa:	4770      	bx	lr
 80124fc:	24000490 	.word	0x24000490
 8012500:	24000e10 	.word	0x24000e10

08012504 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 8012504:	4b04      	ldr	r3, [pc, #16]	@ (8012518 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x14>)
 8012506:	4805      	ldr	r0, [pc, #20]	@ (801251c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x18>)
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	4905      	ldr	r1, [pc, #20]	@ (8012520 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>)
 801250c:	4a05      	ldr	r2, [pc, #20]	@ (8012524 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 801250e:	6003      	str	r3, [r0, #0]
 8012510:	600b      	str	r3, [r1, #0]
 8012512:	6013      	str	r3, [r2, #0]
 8012514:	4770      	bx	lr
 8012516:	bf00      	nop
 8012518:	24000e10 	.word	0x24000e10
 801251c:	240004ac 	.word	0x240004ac
 8012520:	240004b8 	.word	0x240004b8
 8012524:	24000490 	.word	0x24000490

08012528 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 8012528:	4b04      	ldr	r3, [pc, #16]	@ (801253c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>)
 801252a:	681a      	ldr	r2, [r3, #0]
 801252c:	b10a      	cbz	r2, 8012532 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0xa>
 801252e:	4803      	ldr	r0, [pc, #12]	@ (801253c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>)
 8012530:	4770      	bx	lr
 8012532:	4a03      	ldr	r2, [pc, #12]	@ (8012540 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x18>)
 8012534:	4801      	ldr	r0, [pc, #4]	@ (801253c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>)
 8012536:	6812      	ldr	r2, [r2, #0]
 8012538:	601a      	str	r2, [r3, #0]
 801253a:	4770      	bx	lr
 801253c:	240004cc 	.word	0x240004cc
 8012540:	24000e10 	.word	0x24000e10

08012544 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 8012544:	4a02      	ldr	r2, [pc, #8]	@ (8012550 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0xc>)
 8012546:	4b03      	ldr	r3, [pc, #12]	@ (8012554 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x10>)
 8012548:	6812      	ldr	r2, [r2, #0]
 801254a:	601a      	str	r2, [r3, #0]
 801254c:	4770      	bx	lr
 801254e:	bf00      	nop
 8012550:	24000e10 	.word	0x24000e10
 8012554:	240004cc 	.word	0x240004cc

08012558 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 8012558:	4b04      	ldr	r3, [pc, #16]	@ (801256c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>)
 801255a:	681a      	ldr	r2, [r3, #0]
 801255c:	b10a      	cbz	r2, 8012562 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0xa>
 801255e:	4803      	ldr	r0, [pc, #12]	@ (801256c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>)
 8012560:	4770      	bx	lr
 8012562:	4a03      	ldr	r2, [pc, #12]	@ (8012570 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x18>)
 8012564:	4801      	ldr	r0, [pc, #4]	@ (801256c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>)
 8012566:	6812      	ldr	r2, [r2, #0]
 8012568:	601a      	str	r2, [r3, #0]
 801256a:	4770      	bx	lr
 801256c:	240004e0 	.word	0x240004e0
 8012570:	24000e10 	.word	0x24000e10

08012574 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 8012574:	4a02      	ldr	r2, [pc, #8]	@ (8012580 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0xc>)
 8012576:	4b03      	ldr	r3, [pc, #12]	@ (8012584 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x10>)
 8012578:	6812      	ldr	r2, [r2, #0]
 801257a:	601a      	str	r2, [r3, #0]
 801257c:	4770      	bx	lr
 801257e:	bf00      	nop
 8012580:	24000e10 	.word	0x24000e10
 8012584:	240004e0 	.word	0x240004e0

08012588 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 8012588:	4b04      	ldr	r3, [pc, #16]	@ (801259c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>)
 801258a:	681a      	ldr	r2, [r3, #0]
 801258c:	b10a      	cbz	r2, 8012592 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0xa>
 801258e:	4803      	ldr	r0, [pc, #12]	@ (801259c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>)
 8012590:	4770      	bx	lr
 8012592:	4a03      	ldr	r2, [pc, #12]	@ (80125a0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x18>)
 8012594:	4801      	ldr	r0, [pc, #4]	@ (801259c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>)
 8012596:	6812      	ldr	r2, [r2, #0]
 8012598:	601a      	str	r2, [r3, #0]
 801259a:	4770      	bx	lr
 801259c:	240004f4 	.word	0x240004f4
 80125a0:	24000e10 	.word	0x24000e10

080125a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 80125a4:	4a02      	ldr	r2, [pc, #8]	@ (80125b0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0xc>)
 80125a6:	4b03      	ldr	r3, [pc, #12]	@ (80125b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x10>)
 80125a8:	6812      	ldr	r2, [r2, #0]
 80125aa:	601a      	str	r2, [r3, #0]
 80125ac:	4770      	bx	lr
 80125ae:	bf00      	nop
 80125b0:	24000e10 	.word	0x24000e10
 80125b4:	240004f4 	.word	0x240004f4

080125b8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 80125b8:	4b04      	ldr	r3, [pc, #16]	@ (80125cc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 80125ba:	681a      	ldr	r2, [r3, #0]
 80125bc:	b10a      	cbz	r2, 80125c2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0xa>
 80125be:	4803      	ldr	r0, [pc, #12]	@ (80125cc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 80125c0:	4770      	bx	lr
 80125c2:	4a03      	ldr	r2, [pc, #12]	@ (80125d0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x18>)
 80125c4:	4801      	ldr	r0, [pc, #4]	@ (80125cc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 80125c6:	6812      	ldr	r2, [r2, #0]
 80125c8:	601a      	str	r2, [r3, #0]
 80125ca:	4770      	bx	lr
 80125cc:	24000508 	.word	0x24000508
 80125d0:	24000e10 	.word	0x24000e10

080125d4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 80125d4:	4a02      	ldr	r2, [pc, #8]	@ (80125e0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0xc>)
 80125d6:	4b03      	ldr	r3, [pc, #12]	@ (80125e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x10>)
 80125d8:	6812      	ldr	r2, [r2, #0]
 80125da:	601a      	str	r2, [r3, #0]
 80125dc:	4770      	bx	lr
 80125de:	bf00      	nop
 80125e0:	24000e10 	.word	0x24000e10
 80125e4:	24000508 	.word	0x24000508

080125e8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 80125e8:	4b04      	ldr	r3, [pc, #16]	@ (80125fc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>)
 80125ea:	681a      	ldr	r2, [r3, #0]
 80125ec:	b10a      	cbz	r2, 80125f2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0xa>
 80125ee:	4803      	ldr	r0, [pc, #12]	@ (80125fc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>)
 80125f0:	4770      	bx	lr
 80125f2:	4a03      	ldr	r2, [pc, #12]	@ (8012600 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x18>)
 80125f4:	4801      	ldr	r0, [pc, #4]	@ (80125fc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>)
 80125f6:	6812      	ldr	r2, [r2, #0]
 80125f8:	601a      	str	r2, [r3, #0]
 80125fa:	4770      	bx	lr
 80125fc:	2400051c 	.word	0x2400051c
 8012600:	24000e10 	.word	0x24000e10

08012604 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 8012604:	4a02      	ldr	r2, [pc, #8]	@ (8012610 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0xc>)
 8012606:	4b03      	ldr	r3, [pc, #12]	@ (8012614 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x10>)
 8012608:	6812      	ldr	r2, [r2, #0]
 801260a:	601a      	str	r2, [r3, #0]
 801260c:	4770      	bx	lr
 801260e:	bf00      	nop
 8012610:	24000e10 	.word	0x24000e10
 8012614:	2400051c 	.word	0x2400051c

08012618 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 8012618:	4b04      	ldr	r3, [pc, #16]	@ (801262c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>)
 801261a:	681a      	ldr	r2, [r3, #0]
 801261c:	b10a      	cbz	r2, 8012622 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0xa>
 801261e:	4803      	ldr	r0, [pc, #12]	@ (801262c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>)
 8012620:	4770      	bx	lr
 8012622:	4a03      	ldr	r2, [pc, #12]	@ (8012630 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x18>)
 8012624:	4801      	ldr	r0, [pc, #4]	@ (801262c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>)
 8012626:	6812      	ldr	r2, [r2, #0]
 8012628:	601a      	str	r2, [r3, #0]
 801262a:	4770      	bx	lr
 801262c:	24000530 	.word	0x24000530
 8012630:	24000e10 	.word	0x24000e10

08012634 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 8012634:	4a02      	ldr	r2, [pc, #8]	@ (8012640 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0xc>)
 8012636:	4b03      	ldr	r3, [pc, #12]	@ (8012644 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x10>)
 8012638:	6812      	ldr	r2, [r2, #0]
 801263a:	601a      	str	r2, [r3, #0]
 801263c:	4770      	bx	lr
 801263e:	bf00      	nop
 8012640:	24000e10 	.word	0x24000e10
 8012644:	24000530 	.word	0x24000530

08012648 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8012648:	4b04      	ldr	r3, [pc, #16]	@ (801265c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 801264a:	681a      	ldr	r2, [r3, #0]
 801264c:	b10a      	cbz	r2, 8012652 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0xa>
 801264e:	4803      	ldr	r0, [pc, #12]	@ (801265c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 8012650:	4770      	bx	lr
 8012652:	4a03      	ldr	r2, [pc, #12]	@ (8012660 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x18>)
 8012654:	4801      	ldr	r0, [pc, #4]	@ (801265c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 8012656:	6812      	ldr	r2, [r2, #0]
 8012658:	601a      	str	r2, [r3, #0]
 801265a:	4770      	bx	lr
 801265c:	24000544 	.word	0x24000544
 8012660:	24000e10 	.word	0x24000e10

08012664 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8012664:	4a02      	ldr	r2, [pc, #8]	@ (8012670 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0xc>)
 8012666:	4b03      	ldr	r3, [pc, #12]	@ (8012674 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x10>)
 8012668:	6812      	ldr	r2, [r2, #0]
 801266a:	601a      	str	r2, [r3, #0]
 801266c:	4770      	bx	lr
 801266e:	bf00      	nop
 8012670:	24000e10 	.word	0x24000e10
 8012674:	24000544 	.word	0x24000544

08012678 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8012678:	4b04      	ldr	r3, [pc, #16]	@ (801268c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 801267a:	681a      	ldr	r2, [r3, #0]
 801267c:	b10a      	cbz	r2, 8012682 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0xa>
 801267e:	4803      	ldr	r0, [pc, #12]	@ (801268c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 8012680:	4770      	bx	lr
 8012682:	4a03      	ldr	r2, [pc, #12]	@ (8012690 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x18>)
 8012684:	4801      	ldr	r0, [pc, #4]	@ (801268c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 8012686:	6812      	ldr	r2, [r2, #0]
 8012688:	601a      	str	r2, [r3, #0]
 801268a:	4770      	bx	lr
 801268c:	24000558 	.word	0x24000558
 8012690:	24000e10 	.word	0x24000e10

08012694 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8012694:	4a02      	ldr	r2, [pc, #8]	@ (80126a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0xc>)
 8012696:	4b03      	ldr	r3, [pc, #12]	@ (80126a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x10>)
 8012698:	6812      	ldr	r2, [r2, #0]
 801269a:	601a      	str	r2, [r3, #0]
 801269c:	4770      	bx	lr
 801269e:	bf00      	nop
 80126a0:	24000e10 	.word	0x24000e10
 80126a4:	24000558 	.word	0x24000558

080126a8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 80126a8:	4b04      	ldr	r3, [pc, #16]	@ (80126bc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>)
 80126aa:	681a      	ldr	r2, [r3, #0]
 80126ac:	b10a      	cbz	r2, 80126b2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0xa>
 80126ae:	4803      	ldr	r0, [pc, #12]	@ (80126bc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>)
 80126b0:	4770      	bx	lr
 80126b2:	4a03      	ldr	r2, [pc, #12]	@ (80126c0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x18>)
 80126b4:	4801      	ldr	r0, [pc, #4]	@ (80126bc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>)
 80126b6:	6812      	ldr	r2, [r2, #0]
 80126b8:	601a      	str	r2, [r3, #0]
 80126ba:	4770      	bx	lr
 80126bc:	2400056c 	.word	0x2400056c
 80126c0:	24000e10 	.word	0x24000e10

080126c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 80126c4:	4a02      	ldr	r2, [pc, #8]	@ (80126d0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0xc>)
 80126c6:	4b03      	ldr	r3, [pc, #12]	@ (80126d4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x10>)
 80126c8:	6812      	ldr	r2, [r2, #0]
 80126ca:	601a      	str	r2, [r3, #0]
 80126cc:	4770      	bx	lr
 80126ce:	bf00      	nop
 80126d0:	24000e10 	.word	0x24000e10
 80126d4:	2400056c 	.word	0x2400056c

080126d8 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_init_function>:
 80126d8:	f003 bdae 	b.w	8016238 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init>

080126dc <autoware_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_fini_function>:
 80126dc:	f003 bdbe 	b.w	801625c <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini>

080126e0 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_init_function>:
 80126e0:	f003 bdc0 	b.w	8016264 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__init>

080126e4 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_fini_function>:
 80126e4:	f003 bdc2 	b.w	801626c <autoware_vehicle_msgs__srv__ControlModeCommand_Response__fini>

080126e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 80126e8:	b508      	push	{r3, lr}
 80126ea:	f000 fd5d 	bl	80131a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80126ee:	4b06      	ldr	r3, [pc, #24]	@ (8012708 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 80126f0:	4906      	ldr	r1, [pc, #24]	@ (801270c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x24>)
 80126f2:	681a      	ldr	r2, [r3, #0]
 80126f4:	60c8      	str	r0, [r1, #12]
 80126f6:	b10a      	cbz	r2, 80126fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x14>
 80126f8:	4803      	ldr	r0, [pc, #12]	@ (8012708 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 80126fa:	bd08      	pop	{r3, pc}
 80126fc:	4a04      	ldr	r2, [pc, #16]	@ (8012710 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x28>)
 80126fe:	4802      	ldr	r0, [pc, #8]	@ (8012708 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8012700:	6812      	ldr	r2, [r2, #0]
 8012702:	601a      	str	r2, [r3, #0]
 8012704:	bd08      	pop	{r3, pc}
 8012706:	bf00      	nop
 8012708:	240005f0 	.word	0x240005f0
 801270c:	24000578 	.word	0x24000578
 8012710:	24000e14 	.word	0x24000e14

08012714 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 8012714:	4b04      	ldr	r3, [pc, #16]	@ (8012728 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 8012716:	681a      	ldr	r2, [r3, #0]
 8012718:	b10a      	cbz	r2, 801271e <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0xa>
 801271a:	4803      	ldr	r0, [pc, #12]	@ (8012728 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 801271c:	4770      	bx	lr
 801271e:	4a03      	ldr	r2, [pc, #12]	@ (801272c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x18>)
 8012720:	4801      	ldr	r0, [pc, #4]	@ (8012728 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 8012722:	6812      	ldr	r2, [r2, #0]
 8012724:	601a      	str	r2, [r3, #0]
 8012726:	4770      	bx	lr
 8012728:	24000638 	.word	0x24000638
 801272c:	24000e14 	.word	0x24000e14

08012730 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 8012730:	4b16      	ldr	r3, [pc, #88]	@ (801278c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8012732:	681a      	ldr	r2, [r3, #0]
 8012734:	b510      	push	{r4, lr}
 8012736:	b132      	cbz	r2, 8012746 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x16>
 8012738:	685c      	ldr	r4, [r3, #4]
 801273a:	68a3      	ldr	r3, [r4, #8]
 801273c:	b153      	cbz	r3, 8012754 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x24>
 801273e:	68e3      	ldr	r3, [r4, #12]
 8012740:	b1a3      	cbz	r3, 801276c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x3c>
 8012742:	4812      	ldr	r0, [pc, #72]	@ (801278c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8012744:	bd10      	pop	{r4, pc}
 8012746:	4a12      	ldr	r2, [pc, #72]	@ (8012790 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8012748:	685c      	ldr	r4, [r3, #4]
 801274a:	6812      	ldr	r2, [r2, #0]
 801274c:	601a      	str	r2, [r3, #0]
 801274e:	68a3      	ldr	r3, [r4, #8]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d1f4      	bne.n	801273e <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0xe>
 8012754:	f000 fd28 	bl	80131a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012758:	4b0e      	ldr	r3, [pc, #56]	@ (8012794 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x64>)
 801275a:	490f      	ldr	r1, [pc, #60]	@ (8012798 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x68>)
 801275c:	681a      	ldr	r2, [r3, #0]
 801275e:	60c8      	str	r0, [r1, #12]
 8012760:	b17a      	cbz	r2, 8012782 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x52>
 8012762:	685b      	ldr	r3, [r3, #4]
 8012764:	60a3      	str	r3, [r4, #8]
 8012766:	68e3      	ldr	r3, [r4, #12]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d1ea      	bne.n	8012742 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x12>
 801276c:	4b0b      	ldr	r3, [pc, #44]	@ (801279c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x6c>)
 801276e:	681a      	ldr	r2, [r3, #0]
 8012770:	b11a      	cbz	r2, 801277a <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x4a>
 8012772:	685b      	ldr	r3, [r3, #4]
 8012774:	4805      	ldr	r0, [pc, #20]	@ (801278c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8012776:	60e3      	str	r3, [r4, #12]
 8012778:	bd10      	pop	{r4, pc}
 801277a:	4a05      	ldr	r2, [pc, #20]	@ (8012790 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 801277c:	6812      	ldr	r2, [r2, #0]
 801277e:	601a      	str	r2, [r3, #0]
 8012780:	e7f7      	b.n	8012772 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x42>
 8012782:	4a03      	ldr	r2, [pc, #12]	@ (8012790 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8012784:	6812      	ldr	r2, [r2, #0]
 8012786:	601a      	str	r2, [r3, #0]
 8012788:	e7eb      	b.n	8012762 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x32>
 801278a:	bf00      	nop
 801278c:	24000654 	.word	0x24000654
 8012790:	24000e14 	.word	0x24000e14
 8012794:	240005f0 	.word	0x240005f0
 8012798:	24000578 	.word	0x24000578
 801279c:	24000638 	.word	0x24000638

080127a0 <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_init_function>:
 80127a0:	f003 bd66 	b.w	8016270 <autoware_vehicle_msgs__msg__ControlModeReport__init>

080127a4 <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_fini_function>:
 80127a4:	f003 bd76 	b.w	8016294 <autoware_vehicle_msgs__msg__ControlModeReport__fini>

080127a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 80127a8:	b508      	push	{r3, lr}
 80127aa:	f000 fcfd 	bl	80131a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80127ae:	4b06      	ldr	r3, [pc, #24]	@ (80127c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 80127b0:	4906      	ldr	r1, [pc, #24]	@ (80127cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x24>)
 80127b2:	681a      	ldr	r2, [r3, #0]
 80127b4:	60c8      	str	r0, [r1, #12]
 80127b6:	b10a      	cbz	r2, 80127bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>
 80127b8:	4803      	ldr	r0, [pc, #12]	@ (80127c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 80127ba:	bd08      	pop	{r3, pc}
 80127bc:	4a04      	ldr	r2, [pc, #16]	@ (80127d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x28>)
 80127be:	4802      	ldr	r0, [pc, #8]	@ (80127c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 80127c0:	6812      	ldr	r2, [r2, #0]
 80127c2:	601a      	str	r2, [r3, #0]
 80127c4:	bd08      	pop	{r3, pc}
 80127c6:	bf00      	nop
 80127c8:	240006d8 	.word	0x240006d8
 80127cc:	24000660 	.word	0x24000660
 80127d0:	24000e14 	.word	0x24000e14

080127d4 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_init_function>:
 80127d4:	f003 bd62 	b.w	801629c <autoware_vehicle_msgs__msg__GearCommand__init>

080127d8 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_fini_function>:
 80127d8:	f003 bd72 	b.w	80162c0 <autoware_vehicle_msgs__msg__GearCommand__fini>

080127dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 80127dc:	b508      	push	{r3, lr}
 80127de:	f000 fce3 	bl	80131a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80127e2:	4b06      	ldr	r3, [pc, #24]	@ (80127fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 80127e4:	4906      	ldr	r1, [pc, #24]	@ (8012800 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x24>)
 80127e6:	681a      	ldr	r2, [r3, #0]
 80127e8:	60c8      	str	r0, [r1, #12]
 80127ea:	b10a      	cbz	r2, 80127f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>
 80127ec:	4803      	ldr	r0, [pc, #12]	@ (80127fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 80127ee:	bd08      	pop	{r3, pc}
 80127f0:	4a04      	ldr	r2, [pc, #16]	@ (8012804 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x28>)
 80127f2:	4802      	ldr	r0, [pc, #8]	@ (80127fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 80127f4:	6812      	ldr	r2, [r2, #0]
 80127f6:	601a      	str	r2, [r3, #0]
 80127f8:	bd08      	pop	{r3, pc}
 80127fa:	bf00      	nop
 80127fc:	2400075c 	.word	0x2400075c
 8012800:	240006e4 	.word	0x240006e4
 8012804:	24000e14 	.word	0x24000e14

08012808 <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_init_function>:
 8012808:	f003 bd5e 	b.w	80162c8 <autoware_vehicle_msgs__msg__GearReport__init>

0801280c <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_fini_function>:
 801280c:	f003 bd6e 	b.w	80162ec <autoware_vehicle_msgs__msg__GearReport__fini>

08012810 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 8012810:	b508      	push	{r3, lr}
 8012812:	f000 fcc9 	bl	80131a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012816:	4b06      	ldr	r3, [pc, #24]	@ (8012830 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 8012818:	4906      	ldr	r1, [pc, #24]	@ (8012834 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x24>)
 801281a:	681a      	ldr	r2, [r3, #0]
 801281c:	60c8      	str	r0, [r1, #12]
 801281e:	b10a      	cbz	r2, 8012824 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>
 8012820:	4803      	ldr	r0, [pc, #12]	@ (8012830 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 8012822:	bd08      	pop	{r3, pc}
 8012824:	4a04      	ldr	r2, [pc, #16]	@ (8012838 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x28>)
 8012826:	4802      	ldr	r0, [pc, #8]	@ (8012830 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 8012828:	6812      	ldr	r2, [r2, #0]
 801282a:	601a      	str	r2, [r3, #0]
 801282c:	bd08      	pop	{r3, pc}
 801282e:	bf00      	nop
 8012830:	240007e0 	.word	0x240007e0
 8012834:	24000768 	.word	0x24000768
 8012838:	24000e14 	.word	0x24000e14

0801283c <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_init_function>:
 801283c:	f003 bd5a 	b.w	80162f4 <autoware_vehicle_msgs__msg__HazardLightsCommand__init>

08012840 <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_fini_function>:
 8012840:	f003 bd6a 	b.w	8016318 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>

08012844 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8012844:	b508      	push	{r3, lr}
 8012846:	f000 fcaf 	bl	80131a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801284a:	4b06      	ldr	r3, [pc, #24]	@ (8012864 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 801284c:	4906      	ldr	r1, [pc, #24]	@ (8012868 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x24>)
 801284e:	681a      	ldr	r2, [r3, #0]
 8012850:	60c8      	str	r0, [r1, #12]
 8012852:	b10a      	cbz	r2, 8012858 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>
 8012854:	4803      	ldr	r0, [pc, #12]	@ (8012864 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8012856:	bd08      	pop	{r3, pc}
 8012858:	4a04      	ldr	r2, [pc, #16]	@ (801286c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x28>)
 801285a:	4802      	ldr	r0, [pc, #8]	@ (8012864 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 801285c:	6812      	ldr	r2, [r2, #0]
 801285e:	601a      	str	r2, [r3, #0]
 8012860:	bd08      	pop	{r3, pc}
 8012862:	bf00      	nop
 8012864:	24000864 	.word	0x24000864
 8012868:	240007ec 	.word	0x240007ec
 801286c:	24000e14 	.word	0x24000e14

08012870 <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_init_function>:
 8012870:	f003 bd56 	b.w	8016320 <autoware_vehicle_msgs__msg__HazardLightsReport__init>

08012874 <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_fini_function>:
 8012874:	f003 bd66 	b.w	8016344 <autoware_vehicle_msgs__msg__HazardLightsReport__fini>

08012878 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 8012878:	b508      	push	{r3, lr}
 801287a:	f000 fc95 	bl	80131a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801287e:	4b06      	ldr	r3, [pc, #24]	@ (8012898 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8012880:	4906      	ldr	r1, [pc, #24]	@ (801289c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x24>)
 8012882:	681a      	ldr	r2, [r3, #0]
 8012884:	60c8      	str	r0, [r1, #12]
 8012886:	b10a      	cbz	r2, 801288c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>
 8012888:	4803      	ldr	r0, [pc, #12]	@ (8012898 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 801288a:	bd08      	pop	{r3, pc}
 801288c:	4a04      	ldr	r2, [pc, #16]	@ (80128a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x28>)
 801288e:	4802      	ldr	r0, [pc, #8]	@ (8012898 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8012890:	6812      	ldr	r2, [r2, #0]
 8012892:	601a      	str	r2, [r3, #0]
 8012894:	bd08      	pop	{r3, pc}
 8012896:	bf00      	nop
 8012898:	240008e8 	.word	0x240008e8
 801289c:	24000870 	.word	0x24000870
 80128a0:	24000e14 	.word	0x24000e14

080128a4 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_init_function>:
 80128a4:	f003 bd52 	b.w	801634c <autoware_vehicle_msgs__msg__SteeringReport__init>

080128a8 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_fini_function>:
 80128a8:	f003 bd62 	b.w	8016370 <autoware_vehicle_msgs__msg__SteeringReport__fini>

080128ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 80128ac:	b508      	push	{r3, lr}
 80128ae:	f000 fc7b 	bl	80131a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80128b2:	4b06      	ldr	r3, [pc, #24]	@ (80128cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 80128b4:	4906      	ldr	r1, [pc, #24]	@ (80128d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x24>)
 80128b6:	681a      	ldr	r2, [r3, #0]
 80128b8:	60c8      	str	r0, [r1, #12]
 80128ba:	b10a      	cbz	r2, 80128c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>
 80128bc:	4803      	ldr	r0, [pc, #12]	@ (80128cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 80128be:	bd08      	pop	{r3, pc}
 80128c0:	4a04      	ldr	r2, [pc, #16]	@ (80128d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x28>)
 80128c2:	4802      	ldr	r0, [pc, #8]	@ (80128cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 80128c4:	6812      	ldr	r2, [r2, #0]
 80128c6:	601a      	str	r2, [r3, #0]
 80128c8:	bd08      	pop	{r3, pc}
 80128ca:	bf00      	nop
 80128cc:	2400096c 	.word	0x2400096c
 80128d0:	240008f4 	.word	0x240008f4
 80128d4:	24000e14 	.word	0x24000e14

080128d8 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_init_function>:
 80128d8:	f003 bd4e 	b.w	8016378 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>

080128dc <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_fini_function>:
 80128dc:	f003 bd5e 	b.w	801639c <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>

080128e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 80128e0:	b508      	push	{r3, lr}
 80128e2:	f000 fc61 	bl	80131a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80128e6:	4b06      	ldr	r3, [pc, #24]	@ (8012900 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 80128e8:	4906      	ldr	r1, [pc, #24]	@ (8012904 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x24>)
 80128ea:	681a      	ldr	r2, [r3, #0]
 80128ec:	60c8      	str	r0, [r1, #12]
 80128ee:	b10a      	cbz	r2, 80128f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>
 80128f0:	4803      	ldr	r0, [pc, #12]	@ (8012900 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 80128f2:	bd08      	pop	{r3, pc}
 80128f4:	4a04      	ldr	r2, [pc, #16]	@ (8012908 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x28>)
 80128f6:	4802      	ldr	r0, [pc, #8]	@ (8012900 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 80128f8:	6812      	ldr	r2, [r2, #0]
 80128fa:	601a      	str	r2, [r3, #0]
 80128fc:	bd08      	pop	{r3, pc}
 80128fe:	bf00      	nop
 8012900:	240009f0 	.word	0x240009f0
 8012904:	24000978 	.word	0x24000978
 8012908:	24000e14 	.word	0x24000e14

0801290c <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_init_function>:
 801290c:	f003 bd4a 	b.w	80163a4 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>

08012910 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_fini_function>:
 8012910:	f003 bd5a 	b.w	80163c8 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>

08012914 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8012914:	b508      	push	{r3, lr}
 8012916:	f000 fc47 	bl	80131a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801291a:	4b06      	ldr	r3, [pc, #24]	@ (8012934 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 801291c:	4906      	ldr	r1, [pc, #24]	@ (8012938 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x24>)
 801291e:	681a      	ldr	r2, [r3, #0]
 8012920:	60c8      	str	r0, [r1, #12]
 8012922:	b10a      	cbz	r2, 8012928 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>
 8012924:	4803      	ldr	r0, [pc, #12]	@ (8012934 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 8012926:	bd08      	pop	{r3, pc}
 8012928:	4a04      	ldr	r2, [pc, #16]	@ (801293c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x28>)
 801292a:	4802      	ldr	r0, [pc, #8]	@ (8012934 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 801292c:	6812      	ldr	r2, [r2, #0]
 801292e:	601a      	str	r2, [r3, #0]
 8012930:	bd08      	pop	{r3, pc}
 8012932:	bf00      	nop
 8012934:	24000a74 	.word	0x24000a74
 8012938:	240009fc 	.word	0x240009fc
 801293c:	24000e14 	.word	0x24000e14

08012940 <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_init_function>:
 8012940:	f003 bd46 	b.w	80163d0 <autoware_vehicle_msgs__msg__VelocityReport__init>

08012944 <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_fini_function>:
 8012944:	f003 bd56 	b.w	80163f4 <autoware_vehicle_msgs__msg__VelocityReport__fini>

08012948 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 8012948:	b508      	push	{r3, lr}
 801294a:	f003 f89f 	bl	8015a8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 801294e:	4b06      	ldr	r3, [pc, #24]	@ (8012968 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 8012950:	4906      	ldr	r1, [pc, #24]	@ (801296c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x24>)
 8012952:	681a      	ldr	r2, [r3, #0]
 8012954:	60c8      	str	r0, [r1, #12]
 8012956:	b10a      	cbz	r2, 801295c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>
 8012958:	4803      	ldr	r0, [pc, #12]	@ (8012968 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 801295a:	bd08      	pop	{r3, pc}
 801295c:	4a04      	ldr	r2, [pc, #16]	@ (8012970 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x28>)
 801295e:	4802      	ldr	r0, [pc, #8]	@ (8012968 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 8012960:	6812      	ldr	r2, [r2, #0]
 8012962:	601a      	str	r2, [r3, #0]
 8012964:	bd08      	pop	{r3, pc}
 8012966:	bf00      	nop
 8012968:	24000b70 	.word	0x24000b70
 801296c:	24000a80 	.word	0x24000a80
 8012970:	24000e14 	.word	0x24000e14

08012974 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 8012974:	4800      	ldr	r0, [pc, #0]	@ (8012978 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x4>)
 8012976:	4770      	bx	lr
 8012978:	24000b98 	.word	0x24000b98

0801297c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 801297c:	4800      	ldr	r0, [pc, #0]	@ (8012980 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x4>)
 801297e:	4770      	bx	lr
 8012980:	24000ba4 	.word	0x24000ba4

08012984 <_ControlModeCommand_Response__max_serialized_size>:
 8012984:	2101      	movs	r1, #1
 8012986:	2000      	movs	r0, #0
 8012988:	b508      	push	{r3, lr}
 801298a:	f001 ff1f 	bl	80147cc <ucdr_alignment>
 801298e:	3001      	adds	r0, #1
 8012990:	bd08      	pop	{r3, pc}
 8012992:	bf00      	nop

08012994 <_ControlModeCommand_Response__cdr_deserialize>:
 8012994:	b109      	cbz	r1, 801299a <_ControlModeCommand_Response__cdr_deserialize+0x6>
 8012996:	f000 bc93 	b.w	80132c0 <ucdr_deserialize_bool>
 801299a:	4608      	mov	r0, r1
 801299c:	4770      	bx	lr
 801299e:	bf00      	nop

080129a0 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 80129a0:	b538      	push	{r3, r4, r5, lr}
 80129a2:	b158      	cbz	r0, 80129bc <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>
 80129a4:	460d      	mov	r5, r1
 80129a6:	f000 fc0d 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 80129aa:	2101      	movs	r1, #1
 80129ac:	182c      	adds	r4, r5, r0
 80129ae:	f1c5 0501 	rsb	r5, r5, #1
 80129b2:	4620      	mov	r0, r4
 80129b4:	f001 ff0a 	bl	80147cc <ucdr_alignment>
 80129b8:	4428      	add	r0, r5
 80129ba:	4420      	add	r0, r4
 80129bc:	bd38      	pop	{r3, r4, r5, pc}
 80129be:	bf00      	nop

080129c0 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 80129c0:	b138      	cbz	r0, 80129d2 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x12>
 80129c2:	b508      	push	{r3, lr}
 80129c4:	460b      	mov	r3, r1
 80129c6:	2101      	movs	r1, #1
 80129c8:	4618      	mov	r0, r3
 80129ca:	f001 feff 	bl	80147cc <ucdr_alignment>
 80129ce:	3001      	adds	r0, #1
 80129d0:	bd08      	pop	{r3, pc}
 80129d2:	4770      	bx	lr

080129d4 <_ControlModeCommand_Request__cdr_deserialize>:
 80129d4:	b538      	push	{r3, r4, r5, lr}
 80129d6:	460c      	mov	r4, r1
 80129d8:	b179      	cbz	r1, 80129fa <_ControlModeCommand_Request__cdr_deserialize+0x26>
 80129da:	4605      	mov	r5, r0
 80129dc:	f000 fc56 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80129e0:	4603      	mov	r3, r0
 80129e2:	4621      	mov	r1, r4
 80129e4:	4628      	mov	r0, r5
 80129e6:	685b      	ldr	r3, [r3, #4]
 80129e8:	68db      	ldr	r3, [r3, #12]
 80129ea:	4798      	blx	r3
 80129ec:	f104 0108 	add.w	r1, r4, #8
 80129f0:	4628      	mov	r0, r5
 80129f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129f6:	f000 bc91 	b.w	801331c <ucdr_deserialize_uint8_t>
 80129fa:	4608      	mov	r0, r1
 80129fc:	bd38      	pop	{r3, r4, r5, pc}
 80129fe:	bf00      	nop

08012a00 <_ControlModeCommand_Request__cdr_serialize>:
 8012a00:	b180      	cbz	r0, 8012a24 <_ControlModeCommand_Request__cdr_serialize+0x24>
 8012a02:	b538      	push	{r3, r4, r5, lr}
 8012a04:	4604      	mov	r4, r0
 8012a06:	460d      	mov	r5, r1
 8012a08:	f000 fc40 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	4629      	mov	r1, r5
 8012a10:	4620      	mov	r0, r4
 8012a12:	685b      	ldr	r3, [r3, #4]
 8012a14:	689b      	ldr	r3, [r3, #8]
 8012a16:	4798      	blx	r3
 8012a18:	7a21      	ldrb	r1, [r4, #8]
 8012a1a:	4628      	mov	r0, r5
 8012a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a20:	f000 bc66 	b.w	80132f0 <ucdr_serialize_uint8_t>
 8012a24:	4770      	bx	lr
 8012a26:	bf00      	nop

08012a28 <_ControlModeCommand_Response__cdr_serialize>:
 8012a28:	460a      	mov	r2, r1
 8012a2a:	b118      	cbz	r0, 8012a34 <_ControlModeCommand_Response__cdr_serialize+0xc>
 8012a2c:	7801      	ldrb	r1, [r0, #0]
 8012a2e:	4610      	mov	r0, r2
 8012a30:	f000 bc30 	b.w	8013294 <ucdr_serialize_bool>
 8012a34:	4770      	bx	lr
 8012a36:	bf00      	nop

08012a38 <_ControlModeCommand_Response__get_serialized_size>:
 8012a38:	b130      	cbz	r0, 8012a48 <_ControlModeCommand_Response__get_serialized_size+0x10>
 8012a3a:	2101      	movs	r1, #1
 8012a3c:	2000      	movs	r0, #0
 8012a3e:	b508      	push	{r3, lr}
 8012a40:	f001 fec4 	bl	80147cc <ucdr_alignment>
 8012a44:	3001      	adds	r0, #1
 8012a46:	bd08      	pop	{r3, pc}
 8012a48:	4770      	bx	lr
 8012a4a:	bf00      	nop

08012a4c <_ControlModeCommand_Request__get_serialized_size>:
 8012a4c:	b150      	cbz	r0, 8012a64 <_ControlModeCommand_Request__get_serialized_size+0x18>
 8012a4e:	2100      	movs	r1, #0
 8012a50:	b510      	push	{r4, lr}
 8012a52:	f000 fbb7 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012a56:	4604      	mov	r4, r0
 8012a58:	2101      	movs	r1, #1
 8012a5a:	f001 feb7 	bl	80147cc <ucdr_alignment>
 8012a5e:	4420      	add	r0, r4
 8012a60:	3001      	adds	r0, #1
 8012a62:	bd10      	pop	{r4, pc}
 8012a64:	4770      	bx	lr
 8012a66:	bf00      	nop

08012a68 <_ControlModeCommand_Request__max_serialized_size>:
 8012a68:	b510      	push	{r4, lr}
 8012a6a:	b082      	sub	sp, #8
 8012a6c:	2401      	movs	r4, #1
 8012a6e:	2100      	movs	r1, #0
 8012a70:	f10d 0007 	add.w	r0, sp, #7
 8012a74:	f88d 4007 	strb.w	r4, [sp, #7]
 8012a78:	f000 fbf4 	bl	8013264 <max_serialized_size_builtin_interfaces__msg__Time>
 8012a7c:	4621      	mov	r1, r4
 8012a7e:	4604      	mov	r4, r0
 8012a80:	f001 fea4 	bl	80147cc <ucdr_alignment>
 8012a84:	4420      	add	r0, r4
 8012a86:	3001      	adds	r0, #1
 8012a88:	b002      	add	sp, #8
 8012a8a:	bd10      	pop	{r4, pc}

08012a8c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 8012a8c:	4800      	ldr	r0, [pc, #0]	@ (8012a90 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x4>)
 8012a8e:	4770      	bx	lr
 8012a90:	24000b8c 	.word	0x24000b8c

08012a94 <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport>:
 8012a94:	b538      	push	{r3, r4, r5, lr}
 8012a96:	b158      	cbz	r0, 8012ab0 <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport+0x1c>
 8012a98:	460d      	mov	r5, r1
 8012a9a:	f000 fb93 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012a9e:	2101      	movs	r1, #1
 8012aa0:	182c      	adds	r4, r5, r0
 8012aa2:	f1c5 0501 	rsb	r5, r5, #1
 8012aa6:	4620      	mov	r0, r4
 8012aa8:	f001 fe90 	bl	80147cc <ucdr_alignment>
 8012aac:	4428      	add	r0, r5
 8012aae:	4420      	add	r0, r4
 8012ab0:	bd38      	pop	{r3, r4, r5, pc}
 8012ab2:	bf00      	nop

08012ab4 <_ControlModeReport__cdr_deserialize>:
 8012ab4:	b538      	push	{r3, r4, r5, lr}
 8012ab6:	460c      	mov	r4, r1
 8012ab8:	b179      	cbz	r1, 8012ada <_ControlModeReport__cdr_deserialize+0x26>
 8012aba:	4605      	mov	r5, r0
 8012abc:	f000 fbe6 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	4621      	mov	r1, r4
 8012ac4:	4628      	mov	r0, r5
 8012ac6:	685b      	ldr	r3, [r3, #4]
 8012ac8:	68db      	ldr	r3, [r3, #12]
 8012aca:	4798      	blx	r3
 8012acc:	f104 0108 	add.w	r1, r4, #8
 8012ad0:	4628      	mov	r0, r5
 8012ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ad6:	f000 bc21 	b.w	801331c <ucdr_deserialize_uint8_t>
 8012ada:	4608      	mov	r0, r1
 8012adc:	bd38      	pop	{r3, r4, r5, pc}
 8012ade:	bf00      	nop

08012ae0 <_ControlModeReport__cdr_serialize>:
 8012ae0:	b180      	cbz	r0, 8012b04 <_ControlModeReport__cdr_serialize+0x24>
 8012ae2:	b538      	push	{r3, r4, r5, lr}
 8012ae4:	4604      	mov	r4, r0
 8012ae6:	460d      	mov	r5, r1
 8012ae8:	f000 fbd0 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012aec:	4603      	mov	r3, r0
 8012aee:	4629      	mov	r1, r5
 8012af0:	4620      	mov	r0, r4
 8012af2:	685b      	ldr	r3, [r3, #4]
 8012af4:	689b      	ldr	r3, [r3, #8]
 8012af6:	4798      	blx	r3
 8012af8:	7a21      	ldrb	r1, [r4, #8]
 8012afa:	4628      	mov	r0, r5
 8012afc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b00:	f000 bbf6 	b.w	80132f0 <ucdr_serialize_uint8_t>
 8012b04:	4770      	bx	lr
 8012b06:	bf00      	nop

08012b08 <_ControlModeReport__get_serialized_size>:
 8012b08:	b150      	cbz	r0, 8012b20 <_ControlModeReport__get_serialized_size+0x18>
 8012b0a:	2100      	movs	r1, #0
 8012b0c:	b510      	push	{r4, lr}
 8012b0e:	f000 fb59 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012b12:	4604      	mov	r4, r0
 8012b14:	2101      	movs	r1, #1
 8012b16:	f001 fe59 	bl	80147cc <ucdr_alignment>
 8012b1a:	4420      	add	r0, r4
 8012b1c:	3001      	adds	r0, #1
 8012b1e:	bd10      	pop	{r4, pc}
 8012b20:	4770      	bx	lr
 8012b22:	bf00      	nop

08012b24 <_ControlModeReport__max_serialized_size>:
 8012b24:	b510      	push	{r4, lr}
 8012b26:	b082      	sub	sp, #8
 8012b28:	2401      	movs	r4, #1
 8012b2a:	2100      	movs	r1, #0
 8012b2c:	f10d 0007 	add.w	r0, sp, #7
 8012b30:	f88d 4007 	strb.w	r4, [sp, #7]
 8012b34:	f000 fb96 	bl	8013264 <max_serialized_size_builtin_interfaces__msg__Time>
 8012b38:	4621      	mov	r1, r4
 8012b3a:	4604      	mov	r4, r0
 8012b3c:	f001 fe46 	bl	80147cc <ucdr_alignment>
 8012b40:	4420      	add	r0, r4
 8012b42:	3001      	adds	r0, #1
 8012b44:	b002      	add	sp, #8
 8012b46:	bd10      	pop	{r4, pc}

08012b48 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 8012b48:	4800      	ldr	r0, [pc, #0]	@ (8012b4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x4>)
 8012b4a:	4770      	bx	lr
 8012b4c:	24000be8 	.word	0x24000be8

08012b50 <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand>:
 8012b50:	b538      	push	{r3, r4, r5, lr}
 8012b52:	b158      	cbz	r0, 8012b6c <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand+0x1c>
 8012b54:	460d      	mov	r5, r1
 8012b56:	f000 fb35 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012b5a:	2101      	movs	r1, #1
 8012b5c:	182c      	adds	r4, r5, r0
 8012b5e:	f1c5 0501 	rsb	r5, r5, #1
 8012b62:	4620      	mov	r0, r4
 8012b64:	f001 fe32 	bl	80147cc <ucdr_alignment>
 8012b68:	4428      	add	r0, r5
 8012b6a:	4420      	add	r0, r4
 8012b6c:	bd38      	pop	{r3, r4, r5, pc}
 8012b6e:	bf00      	nop

08012b70 <_GearCommand__cdr_deserialize>:
 8012b70:	b538      	push	{r3, r4, r5, lr}
 8012b72:	460c      	mov	r4, r1
 8012b74:	b179      	cbz	r1, 8012b96 <_GearCommand__cdr_deserialize+0x26>
 8012b76:	4605      	mov	r5, r0
 8012b78:	f000 fb88 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012b7c:	4603      	mov	r3, r0
 8012b7e:	4621      	mov	r1, r4
 8012b80:	4628      	mov	r0, r5
 8012b82:	685b      	ldr	r3, [r3, #4]
 8012b84:	68db      	ldr	r3, [r3, #12]
 8012b86:	4798      	blx	r3
 8012b88:	f104 0108 	add.w	r1, r4, #8
 8012b8c:	4628      	mov	r0, r5
 8012b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b92:	f000 bbc3 	b.w	801331c <ucdr_deserialize_uint8_t>
 8012b96:	4608      	mov	r0, r1
 8012b98:	bd38      	pop	{r3, r4, r5, pc}
 8012b9a:	bf00      	nop

08012b9c <_GearCommand__cdr_serialize>:
 8012b9c:	b180      	cbz	r0, 8012bc0 <_GearCommand__cdr_serialize+0x24>
 8012b9e:	b538      	push	{r3, r4, r5, lr}
 8012ba0:	4604      	mov	r4, r0
 8012ba2:	460d      	mov	r5, r1
 8012ba4:	f000 fb72 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012ba8:	4603      	mov	r3, r0
 8012baa:	4629      	mov	r1, r5
 8012bac:	4620      	mov	r0, r4
 8012bae:	685b      	ldr	r3, [r3, #4]
 8012bb0:	689b      	ldr	r3, [r3, #8]
 8012bb2:	4798      	blx	r3
 8012bb4:	7a21      	ldrb	r1, [r4, #8]
 8012bb6:	4628      	mov	r0, r5
 8012bb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012bbc:	f000 bb98 	b.w	80132f0 <ucdr_serialize_uint8_t>
 8012bc0:	4770      	bx	lr
 8012bc2:	bf00      	nop

08012bc4 <_GearCommand__get_serialized_size>:
 8012bc4:	b150      	cbz	r0, 8012bdc <_GearCommand__get_serialized_size+0x18>
 8012bc6:	2100      	movs	r1, #0
 8012bc8:	b510      	push	{r4, lr}
 8012bca:	f000 fafb 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012bce:	4604      	mov	r4, r0
 8012bd0:	2101      	movs	r1, #1
 8012bd2:	f001 fdfb 	bl	80147cc <ucdr_alignment>
 8012bd6:	4420      	add	r0, r4
 8012bd8:	3001      	adds	r0, #1
 8012bda:	bd10      	pop	{r4, pc}
 8012bdc:	4770      	bx	lr
 8012bde:	bf00      	nop

08012be0 <_GearCommand__max_serialized_size>:
 8012be0:	b510      	push	{r4, lr}
 8012be2:	b082      	sub	sp, #8
 8012be4:	2401      	movs	r4, #1
 8012be6:	2100      	movs	r1, #0
 8012be8:	f10d 0007 	add.w	r0, sp, #7
 8012bec:	f88d 4007 	strb.w	r4, [sp, #7]
 8012bf0:	f000 fb38 	bl	8013264 <max_serialized_size_builtin_interfaces__msg__Time>
 8012bf4:	4621      	mov	r1, r4
 8012bf6:	4604      	mov	r4, r0
 8012bf8:	f001 fde8 	bl	80147cc <ucdr_alignment>
 8012bfc:	4420      	add	r0, r4
 8012bfe:	3001      	adds	r0, #1
 8012c00:	b002      	add	sp, #8
 8012c02:	bd10      	pop	{r4, pc}

08012c04 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 8012c04:	4800      	ldr	r0, [pc, #0]	@ (8012c08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x4>)
 8012c06:	4770      	bx	lr
 8012c08:	24000c10 	.word	0x24000c10

08012c0c <get_serialized_size_autoware_vehicle_msgs__msg__GearReport>:
 8012c0c:	b538      	push	{r3, r4, r5, lr}
 8012c0e:	b158      	cbz	r0, 8012c28 <get_serialized_size_autoware_vehicle_msgs__msg__GearReport+0x1c>
 8012c10:	460d      	mov	r5, r1
 8012c12:	f000 fad7 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012c16:	2101      	movs	r1, #1
 8012c18:	182c      	adds	r4, r5, r0
 8012c1a:	f1c5 0501 	rsb	r5, r5, #1
 8012c1e:	4620      	mov	r0, r4
 8012c20:	f001 fdd4 	bl	80147cc <ucdr_alignment>
 8012c24:	4428      	add	r0, r5
 8012c26:	4420      	add	r0, r4
 8012c28:	bd38      	pop	{r3, r4, r5, pc}
 8012c2a:	bf00      	nop

08012c2c <_GearReport__cdr_deserialize>:
 8012c2c:	b538      	push	{r3, r4, r5, lr}
 8012c2e:	460c      	mov	r4, r1
 8012c30:	b179      	cbz	r1, 8012c52 <_GearReport__cdr_deserialize+0x26>
 8012c32:	4605      	mov	r5, r0
 8012c34:	f000 fb2a 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012c38:	4603      	mov	r3, r0
 8012c3a:	4621      	mov	r1, r4
 8012c3c:	4628      	mov	r0, r5
 8012c3e:	685b      	ldr	r3, [r3, #4]
 8012c40:	68db      	ldr	r3, [r3, #12]
 8012c42:	4798      	blx	r3
 8012c44:	f104 0108 	add.w	r1, r4, #8
 8012c48:	4628      	mov	r0, r5
 8012c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c4e:	f000 bb65 	b.w	801331c <ucdr_deserialize_uint8_t>
 8012c52:	4608      	mov	r0, r1
 8012c54:	bd38      	pop	{r3, r4, r5, pc}
 8012c56:	bf00      	nop

08012c58 <_GearReport__cdr_serialize>:
 8012c58:	b180      	cbz	r0, 8012c7c <_GearReport__cdr_serialize+0x24>
 8012c5a:	b538      	push	{r3, r4, r5, lr}
 8012c5c:	4604      	mov	r4, r0
 8012c5e:	460d      	mov	r5, r1
 8012c60:	f000 fb14 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012c64:	4603      	mov	r3, r0
 8012c66:	4629      	mov	r1, r5
 8012c68:	4620      	mov	r0, r4
 8012c6a:	685b      	ldr	r3, [r3, #4]
 8012c6c:	689b      	ldr	r3, [r3, #8]
 8012c6e:	4798      	blx	r3
 8012c70:	7a21      	ldrb	r1, [r4, #8]
 8012c72:	4628      	mov	r0, r5
 8012c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c78:	f000 bb3a 	b.w	80132f0 <ucdr_serialize_uint8_t>
 8012c7c:	4770      	bx	lr
 8012c7e:	bf00      	nop

08012c80 <_GearReport__get_serialized_size>:
 8012c80:	b150      	cbz	r0, 8012c98 <_GearReport__get_serialized_size+0x18>
 8012c82:	2100      	movs	r1, #0
 8012c84:	b510      	push	{r4, lr}
 8012c86:	f000 fa9d 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012c8a:	4604      	mov	r4, r0
 8012c8c:	2101      	movs	r1, #1
 8012c8e:	f001 fd9d 	bl	80147cc <ucdr_alignment>
 8012c92:	4420      	add	r0, r4
 8012c94:	3001      	adds	r0, #1
 8012c96:	bd10      	pop	{r4, pc}
 8012c98:	4770      	bx	lr
 8012c9a:	bf00      	nop

08012c9c <_GearReport__max_serialized_size>:
 8012c9c:	b510      	push	{r4, lr}
 8012c9e:	b082      	sub	sp, #8
 8012ca0:	2401      	movs	r4, #1
 8012ca2:	2100      	movs	r1, #0
 8012ca4:	f10d 0007 	add.w	r0, sp, #7
 8012ca8:	f88d 4007 	strb.w	r4, [sp, #7]
 8012cac:	f000 fada 	bl	8013264 <max_serialized_size_builtin_interfaces__msg__Time>
 8012cb0:	4621      	mov	r1, r4
 8012cb2:	4604      	mov	r4, r0
 8012cb4:	f001 fd8a 	bl	80147cc <ucdr_alignment>
 8012cb8:	4420      	add	r0, r4
 8012cba:	3001      	adds	r0, #1
 8012cbc:	b002      	add	sp, #8
 8012cbe:	bd10      	pop	{r4, pc}

08012cc0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 8012cc0:	4800      	ldr	r0, [pc, #0]	@ (8012cc4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x4>)
 8012cc2:	4770      	bx	lr
 8012cc4:	24000c38 	.word	0x24000c38

08012cc8 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8012cc8:	b538      	push	{r3, r4, r5, lr}
 8012cca:	b158      	cbz	r0, 8012ce4 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand+0x1c>
 8012ccc:	460d      	mov	r5, r1
 8012cce:	f000 fa79 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012cd2:	2101      	movs	r1, #1
 8012cd4:	182c      	adds	r4, r5, r0
 8012cd6:	f1c5 0501 	rsb	r5, r5, #1
 8012cda:	4620      	mov	r0, r4
 8012cdc:	f001 fd76 	bl	80147cc <ucdr_alignment>
 8012ce0:	4428      	add	r0, r5
 8012ce2:	4420      	add	r0, r4
 8012ce4:	bd38      	pop	{r3, r4, r5, pc}
 8012ce6:	bf00      	nop

08012ce8 <_HazardLightsCommand__cdr_deserialize>:
 8012ce8:	b538      	push	{r3, r4, r5, lr}
 8012cea:	460c      	mov	r4, r1
 8012cec:	b179      	cbz	r1, 8012d0e <_HazardLightsCommand__cdr_deserialize+0x26>
 8012cee:	4605      	mov	r5, r0
 8012cf0:	f000 facc 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	4621      	mov	r1, r4
 8012cf8:	4628      	mov	r0, r5
 8012cfa:	685b      	ldr	r3, [r3, #4]
 8012cfc:	68db      	ldr	r3, [r3, #12]
 8012cfe:	4798      	blx	r3
 8012d00:	f104 0108 	add.w	r1, r4, #8
 8012d04:	4628      	mov	r0, r5
 8012d06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012d0a:	f000 bb07 	b.w	801331c <ucdr_deserialize_uint8_t>
 8012d0e:	4608      	mov	r0, r1
 8012d10:	bd38      	pop	{r3, r4, r5, pc}
 8012d12:	bf00      	nop

08012d14 <_HazardLightsCommand__cdr_serialize>:
 8012d14:	b180      	cbz	r0, 8012d38 <_HazardLightsCommand__cdr_serialize+0x24>
 8012d16:	b538      	push	{r3, r4, r5, lr}
 8012d18:	4604      	mov	r4, r0
 8012d1a:	460d      	mov	r5, r1
 8012d1c:	f000 fab6 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012d20:	4603      	mov	r3, r0
 8012d22:	4629      	mov	r1, r5
 8012d24:	4620      	mov	r0, r4
 8012d26:	685b      	ldr	r3, [r3, #4]
 8012d28:	689b      	ldr	r3, [r3, #8]
 8012d2a:	4798      	blx	r3
 8012d2c:	7a21      	ldrb	r1, [r4, #8]
 8012d2e:	4628      	mov	r0, r5
 8012d30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012d34:	f000 badc 	b.w	80132f0 <ucdr_serialize_uint8_t>
 8012d38:	4770      	bx	lr
 8012d3a:	bf00      	nop

08012d3c <_HazardLightsCommand__get_serialized_size>:
 8012d3c:	b150      	cbz	r0, 8012d54 <_HazardLightsCommand__get_serialized_size+0x18>
 8012d3e:	2100      	movs	r1, #0
 8012d40:	b510      	push	{r4, lr}
 8012d42:	f000 fa3f 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012d46:	4604      	mov	r4, r0
 8012d48:	2101      	movs	r1, #1
 8012d4a:	f001 fd3f 	bl	80147cc <ucdr_alignment>
 8012d4e:	4420      	add	r0, r4
 8012d50:	3001      	adds	r0, #1
 8012d52:	bd10      	pop	{r4, pc}
 8012d54:	4770      	bx	lr
 8012d56:	bf00      	nop

08012d58 <_HazardLightsCommand__max_serialized_size>:
 8012d58:	b510      	push	{r4, lr}
 8012d5a:	b082      	sub	sp, #8
 8012d5c:	2401      	movs	r4, #1
 8012d5e:	2100      	movs	r1, #0
 8012d60:	f10d 0007 	add.w	r0, sp, #7
 8012d64:	f88d 4007 	strb.w	r4, [sp, #7]
 8012d68:	f000 fa7c 	bl	8013264 <max_serialized_size_builtin_interfaces__msg__Time>
 8012d6c:	4621      	mov	r1, r4
 8012d6e:	4604      	mov	r4, r0
 8012d70:	f001 fd2c 	bl	80147cc <ucdr_alignment>
 8012d74:	4420      	add	r0, r4
 8012d76:	3001      	adds	r0, #1
 8012d78:	b002      	add	sp, #8
 8012d7a:	bd10      	pop	{r4, pc}

08012d7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8012d7c:	4800      	ldr	r0, [pc, #0]	@ (8012d80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x4>)
 8012d7e:	4770      	bx	lr
 8012d80:	24000c60 	.word	0x24000c60

08012d84 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport>:
 8012d84:	b538      	push	{r3, r4, r5, lr}
 8012d86:	b158      	cbz	r0, 8012da0 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport+0x1c>
 8012d88:	460d      	mov	r5, r1
 8012d8a:	f000 fa1b 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012d8e:	2101      	movs	r1, #1
 8012d90:	182c      	adds	r4, r5, r0
 8012d92:	f1c5 0501 	rsb	r5, r5, #1
 8012d96:	4620      	mov	r0, r4
 8012d98:	f001 fd18 	bl	80147cc <ucdr_alignment>
 8012d9c:	4428      	add	r0, r5
 8012d9e:	4420      	add	r0, r4
 8012da0:	bd38      	pop	{r3, r4, r5, pc}
 8012da2:	bf00      	nop

08012da4 <_HazardLightsReport__cdr_deserialize>:
 8012da4:	b538      	push	{r3, r4, r5, lr}
 8012da6:	460c      	mov	r4, r1
 8012da8:	b179      	cbz	r1, 8012dca <_HazardLightsReport__cdr_deserialize+0x26>
 8012daa:	4605      	mov	r5, r0
 8012dac:	f000 fa6e 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012db0:	4603      	mov	r3, r0
 8012db2:	4621      	mov	r1, r4
 8012db4:	4628      	mov	r0, r5
 8012db6:	685b      	ldr	r3, [r3, #4]
 8012db8:	68db      	ldr	r3, [r3, #12]
 8012dba:	4798      	blx	r3
 8012dbc:	f104 0108 	add.w	r1, r4, #8
 8012dc0:	4628      	mov	r0, r5
 8012dc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012dc6:	f000 baa9 	b.w	801331c <ucdr_deserialize_uint8_t>
 8012dca:	4608      	mov	r0, r1
 8012dcc:	bd38      	pop	{r3, r4, r5, pc}
 8012dce:	bf00      	nop

08012dd0 <_HazardLightsReport__cdr_serialize>:
 8012dd0:	b180      	cbz	r0, 8012df4 <_HazardLightsReport__cdr_serialize+0x24>
 8012dd2:	b538      	push	{r3, r4, r5, lr}
 8012dd4:	4604      	mov	r4, r0
 8012dd6:	460d      	mov	r5, r1
 8012dd8:	f000 fa58 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012ddc:	4603      	mov	r3, r0
 8012dde:	4629      	mov	r1, r5
 8012de0:	4620      	mov	r0, r4
 8012de2:	685b      	ldr	r3, [r3, #4]
 8012de4:	689b      	ldr	r3, [r3, #8]
 8012de6:	4798      	blx	r3
 8012de8:	7a21      	ldrb	r1, [r4, #8]
 8012dea:	4628      	mov	r0, r5
 8012dec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012df0:	f000 ba7e 	b.w	80132f0 <ucdr_serialize_uint8_t>
 8012df4:	4770      	bx	lr
 8012df6:	bf00      	nop

08012df8 <_HazardLightsReport__get_serialized_size>:
 8012df8:	b150      	cbz	r0, 8012e10 <_HazardLightsReport__get_serialized_size+0x18>
 8012dfa:	2100      	movs	r1, #0
 8012dfc:	b510      	push	{r4, lr}
 8012dfe:	f000 f9e1 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012e02:	4604      	mov	r4, r0
 8012e04:	2101      	movs	r1, #1
 8012e06:	f001 fce1 	bl	80147cc <ucdr_alignment>
 8012e0a:	4420      	add	r0, r4
 8012e0c:	3001      	adds	r0, #1
 8012e0e:	bd10      	pop	{r4, pc}
 8012e10:	4770      	bx	lr
 8012e12:	bf00      	nop

08012e14 <_HazardLightsReport__max_serialized_size>:
 8012e14:	b510      	push	{r4, lr}
 8012e16:	b082      	sub	sp, #8
 8012e18:	2401      	movs	r4, #1
 8012e1a:	2100      	movs	r1, #0
 8012e1c:	f10d 0007 	add.w	r0, sp, #7
 8012e20:	f88d 4007 	strb.w	r4, [sp, #7]
 8012e24:	f000 fa1e 	bl	8013264 <max_serialized_size_builtin_interfaces__msg__Time>
 8012e28:	4621      	mov	r1, r4
 8012e2a:	4604      	mov	r4, r0
 8012e2c:	f001 fcce 	bl	80147cc <ucdr_alignment>
 8012e30:	4420      	add	r0, r4
 8012e32:	3001      	adds	r0, #1
 8012e34:	b002      	add	sp, #8
 8012e36:	bd10      	pop	{r4, pc}

08012e38 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 8012e38:	4800      	ldr	r0, [pc, #0]	@ (8012e3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x4>)
 8012e3a:	4770      	bx	lr
 8012e3c:	24000c88 	.word	0x24000c88

08012e40 <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport>:
 8012e40:	b538      	push	{r3, r4, r5, lr}
 8012e42:	b158      	cbz	r0, 8012e5c <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport+0x1c>
 8012e44:	460d      	mov	r5, r1
 8012e46:	f000 f9bd 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012e4a:	2104      	movs	r1, #4
 8012e4c:	182c      	adds	r4, r5, r0
 8012e4e:	f1c5 0504 	rsb	r5, r5, #4
 8012e52:	4620      	mov	r0, r4
 8012e54:	f001 fcba 	bl	80147cc <ucdr_alignment>
 8012e58:	4428      	add	r0, r5
 8012e5a:	4420      	add	r0, r4
 8012e5c:	bd38      	pop	{r3, r4, r5, pc}
 8012e5e:	bf00      	nop

08012e60 <_SteeringReport__cdr_deserialize>:
 8012e60:	b538      	push	{r3, r4, r5, lr}
 8012e62:	460c      	mov	r4, r1
 8012e64:	b179      	cbz	r1, 8012e86 <_SteeringReport__cdr_deserialize+0x26>
 8012e66:	4605      	mov	r5, r0
 8012e68:	f000 fa10 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	4621      	mov	r1, r4
 8012e70:	4628      	mov	r0, r5
 8012e72:	685b      	ldr	r3, [r3, #4]
 8012e74:	68db      	ldr	r3, [r3, #12]
 8012e76:	4798      	blx	r3
 8012e78:	f104 0108 	add.w	r1, r4, #8
 8012e7c:	4628      	mov	r0, r5
 8012e7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e82:	f001 ba25 	b.w	80142d0 <ucdr_deserialize_float>
 8012e86:	4608      	mov	r0, r1
 8012e88:	bd38      	pop	{r3, r4, r5, pc}
 8012e8a:	bf00      	nop

08012e8c <_SteeringReport__cdr_serialize>:
 8012e8c:	b188      	cbz	r0, 8012eb2 <_SteeringReport__cdr_serialize+0x26>
 8012e8e:	b538      	push	{r3, r4, r5, lr}
 8012e90:	4604      	mov	r4, r0
 8012e92:	460d      	mov	r5, r1
 8012e94:	f000 f9fa 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012e98:	4603      	mov	r3, r0
 8012e9a:	4629      	mov	r1, r5
 8012e9c:	4620      	mov	r0, r4
 8012e9e:	685b      	ldr	r3, [r3, #4]
 8012ea0:	689b      	ldr	r3, [r3, #8]
 8012ea2:	4798      	blx	r3
 8012ea4:	ed94 0a02 	vldr	s0, [r4, #8]
 8012ea8:	4628      	mov	r0, r5
 8012eaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012eae:	f001 b977 	b.w	80141a0 <ucdr_serialize_float>
 8012eb2:	4770      	bx	lr

08012eb4 <_SteeringReport__get_serialized_size>:
 8012eb4:	b150      	cbz	r0, 8012ecc <_SteeringReport__get_serialized_size+0x18>
 8012eb6:	2100      	movs	r1, #0
 8012eb8:	b510      	push	{r4, lr}
 8012eba:	f000 f983 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012ebe:	4604      	mov	r4, r0
 8012ec0:	2104      	movs	r1, #4
 8012ec2:	f001 fc83 	bl	80147cc <ucdr_alignment>
 8012ec6:	4420      	add	r0, r4
 8012ec8:	3004      	adds	r0, #4
 8012eca:	bd10      	pop	{r4, pc}
 8012ecc:	4770      	bx	lr
 8012ece:	bf00      	nop

08012ed0 <_SteeringReport__max_serialized_size>:
 8012ed0:	b510      	push	{r4, lr}
 8012ed2:	b082      	sub	sp, #8
 8012ed4:	2301      	movs	r3, #1
 8012ed6:	2100      	movs	r1, #0
 8012ed8:	f10d 0007 	add.w	r0, sp, #7
 8012edc:	f88d 3007 	strb.w	r3, [sp, #7]
 8012ee0:	f000 f9c0 	bl	8013264 <max_serialized_size_builtin_interfaces__msg__Time>
 8012ee4:	4604      	mov	r4, r0
 8012ee6:	2104      	movs	r1, #4
 8012ee8:	f001 fc70 	bl	80147cc <ucdr_alignment>
 8012eec:	4420      	add	r0, r4
 8012eee:	3004      	adds	r0, #4
 8012ef0:	b002      	add	sp, #8
 8012ef2:	bd10      	pop	{r4, pc}

08012ef4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 8012ef4:	4800      	ldr	r0, [pc, #0]	@ (8012ef8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x4>)
 8012ef6:	4770      	bx	lr
 8012ef8:	24000cb0 	.word	0x24000cb0

08012efc <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8012efc:	b538      	push	{r3, r4, r5, lr}
 8012efe:	b158      	cbz	r0, 8012f18 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x1c>
 8012f00:	460d      	mov	r5, r1
 8012f02:	f000 f95f 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012f06:	2101      	movs	r1, #1
 8012f08:	182c      	adds	r4, r5, r0
 8012f0a:	f1c5 0501 	rsb	r5, r5, #1
 8012f0e:	4620      	mov	r0, r4
 8012f10:	f001 fc5c 	bl	80147cc <ucdr_alignment>
 8012f14:	4428      	add	r0, r5
 8012f16:	4420      	add	r0, r4
 8012f18:	bd38      	pop	{r3, r4, r5, pc}
 8012f1a:	bf00      	nop

08012f1c <_TurnIndicatorsCommand__cdr_deserialize>:
 8012f1c:	b538      	push	{r3, r4, r5, lr}
 8012f1e:	460c      	mov	r4, r1
 8012f20:	b179      	cbz	r1, 8012f42 <_TurnIndicatorsCommand__cdr_deserialize+0x26>
 8012f22:	4605      	mov	r5, r0
 8012f24:	f000 f9b2 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012f28:	4603      	mov	r3, r0
 8012f2a:	4621      	mov	r1, r4
 8012f2c:	4628      	mov	r0, r5
 8012f2e:	685b      	ldr	r3, [r3, #4]
 8012f30:	68db      	ldr	r3, [r3, #12]
 8012f32:	4798      	blx	r3
 8012f34:	f104 0108 	add.w	r1, r4, #8
 8012f38:	4628      	mov	r0, r5
 8012f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f3e:	f000 b9ed 	b.w	801331c <ucdr_deserialize_uint8_t>
 8012f42:	4608      	mov	r0, r1
 8012f44:	bd38      	pop	{r3, r4, r5, pc}
 8012f46:	bf00      	nop

08012f48 <_TurnIndicatorsCommand__cdr_serialize>:
 8012f48:	b180      	cbz	r0, 8012f6c <_TurnIndicatorsCommand__cdr_serialize+0x24>
 8012f4a:	b538      	push	{r3, r4, r5, lr}
 8012f4c:	4604      	mov	r4, r0
 8012f4e:	460d      	mov	r5, r1
 8012f50:	f000 f99c 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012f54:	4603      	mov	r3, r0
 8012f56:	4629      	mov	r1, r5
 8012f58:	4620      	mov	r0, r4
 8012f5a:	685b      	ldr	r3, [r3, #4]
 8012f5c:	689b      	ldr	r3, [r3, #8]
 8012f5e:	4798      	blx	r3
 8012f60:	7a21      	ldrb	r1, [r4, #8]
 8012f62:	4628      	mov	r0, r5
 8012f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f68:	f000 b9c2 	b.w	80132f0 <ucdr_serialize_uint8_t>
 8012f6c:	4770      	bx	lr
 8012f6e:	bf00      	nop

08012f70 <_TurnIndicatorsCommand__get_serialized_size>:
 8012f70:	b150      	cbz	r0, 8012f88 <_TurnIndicatorsCommand__get_serialized_size+0x18>
 8012f72:	2100      	movs	r1, #0
 8012f74:	b510      	push	{r4, lr}
 8012f76:	f000 f925 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012f7a:	4604      	mov	r4, r0
 8012f7c:	2101      	movs	r1, #1
 8012f7e:	f001 fc25 	bl	80147cc <ucdr_alignment>
 8012f82:	4420      	add	r0, r4
 8012f84:	3001      	adds	r0, #1
 8012f86:	bd10      	pop	{r4, pc}
 8012f88:	4770      	bx	lr
 8012f8a:	bf00      	nop

08012f8c <_TurnIndicatorsCommand__max_serialized_size>:
 8012f8c:	b510      	push	{r4, lr}
 8012f8e:	b082      	sub	sp, #8
 8012f90:	2401      	movs	r4, #1
 8012f92:	2100      	movs	r1, #0
 8012f94:	f10d 0007 	add.w	r0, sp, #7
 8012f98:	f88d 4007 	strb.w	r4, [sp, #7]
 8012f9c:	f000 f962 	bl	8013264 <max_serialized_size_builtin_interfaces__msg__Time>
 8012fa0:	4621      	mov	r1, r4
 8012fa2:	4604      	mov	r4, r0
 8012fa4:	f001 fc12 	bl	80147cc <ucdr_alignment>
 8012fa8:	4420      	add	r0, r4
 8012faa:	3001      	adds	r0, #1
 8012fac:	b002      	add	sp, #8
 8012fae:	bd10      	pop	{r4, pc}

08012fb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8012fb0:	4800      	ldr	r0, [pc, #0]	@ (8012fb4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x4>)
 8012fb2:	4770      	bx	lr
 8012fb4:	24000cd8 	.word	0x24000cd8

08012fb8 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8012fb8:	b538      	push	{r3, r4, r5, lr}
 8012fba:	b158      	cbz	r0, 8012fd4 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x1c>
 8012fbc:	460d      	mov	r5, r1
 8012fbe:	f000 f901 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012fc2:	2101      	movs	r1, #1
 8012fc4:	182c      	adds	r4, r5, r0
 8012fc6:	f1c5 0501 	rsb	r5, r5, #1
 8012fca:	4620      	mov	r0, r4
 8012fcc:	f001 fbfe 	bl	80147cc <ucdr_alignment>
 8012fd0:	4428      	add	r0, r5
 8012fd2:	4420      	add	r0, r4
 8012fd4:	bd38      	pop	{r3, r4, r5, pc}
 8012fd6:	bf00      	nop

08012fd8 <_TurnIndicatorsReport__cdr_deserialize>:
 8012fd8:	b538      	push	{r3, r4, r5, lr}
 8012fda:	460c      	mov	r4, r1
 8012fdc:	b179      	cbz	r1, 8012ffe <_TurnIndicatorsReport__cdr_deserialize+0x26>
 8012fde:	4605      	mov	r5, r0
 8012fe0:	f000 f954 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	4621      	mov	r1, r4
 8012fe8:	4628      	mov	r0, r5
 8012fea:	685b      	ldr	r3, [r3, #4]
 8012fec:	68db      	ldr	r3, [r3, #12]
 8012fee:	4798      	blx	r3
 8012ff0:	f104 0108 	add.w	r1, r4, #8
 8012ff4:	4628      	mov	r0, r5
 8012ff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ffa:	f000 b98f 	b.w	801331c <ucdr_deserialize_uint8_t>
 8012ffe:	4608      	mov	r0, r1
 8013000:	bd38      	pop	{r3, r4, r5, pc}
 8013002:	bf00      	nop

08013004 <_TurnIndicatorsReport__cdr_serialize>:
 8013004:	b180      	cbz	r0, 8013028 <_TurnIndicatorsReport__cdr_serialize+0x24>
 8013006:	b538      	push	{r3, r4, r5, lr}
 8013008:	4604      	mov	r4, r0
 801300a:	460d      	mov	r5, r1
 801300c:	f000 f93e 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8013010:	4603      	mov	r3, r0
 8013012:	4629      	mov	r1, r5
 8013014:	4620      	mov	r0, r4
 8013016:	685b      	ldr	r3, [r3, #4]
 8013018:	689b      	ldr	r3, [r3, #8]
 801301a:	4798      	blx	r3
 801301c:	7a21      	ldrb	r1, [r4, #8]
 801301e:	4628      	mov	r0, r5
 8013020:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013024:	f000 b964 	b.w	80132f0 <ucdr_serialize_uint8_t>
 8013028:	4770      	bx	lr
 801302a:	bf00      	nop

0801302c <_TurnIndicatorsReport__get_serialized_size>:
 801302c:	b150      	cbz	r0, 8013044 <_TurnIndicatorsReport__get_serialized_size+0x18>
 801302e:	2100      	movs	r1, #0
 8013030:	b510      	push	{r4, lr}
 8013032:	f000 f8c7 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8013036:	4604      	mov	r4, r0
 8013038:	2101      	movs	r1, #1
 801303a:	f001 fbc7 	bl	80147cc <ucdr_alignment>
 801303e:	4420      	add	r0, r4
 8013040:	3001      	adds	r0, #1
 8013042:	bd10      	pop	{r4, pc}
 8013044:	4770      	bx	lr
 8013046:	bf00      	nop

08013048 <_TurnIndicatorsReport__max_serialized_size>:
 8013048:	b510      	push	{r4, lr}
 801304a:	b082      	sub	sp, #8
 801304c:	2401      	movs	r4, #1
 801304e:	2100      	movs	r1, #0
 8013050:	f10d 0007 	add.w	r0, sp, #7
 8013054:	f88d 4007 	strb.w	r4, [sp, #7]
 8013058:	f000 f904 	bl	8013264 <max_serialized_size_builtin_interfaces__msg__Time>
 801305c:	4621      	mov	r1, r4
 801305e:	4604      	mov	r4, r0
 8013060:	f001 fbb4 	bl	80147cc <ucdr_alignment>
 8013064:	4420      	add	r0, r4
 8013066:	3001      	adds	r0, #1
 8013068:	b002      	add	sp, #8
 801306a:	bd10      	pop	{r4, pc}

0801306c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 801306c:	4800      	ldr	r0, [pc, #0]	@ (8013070 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x4>)
 801306e:	4770      	bx	lr
 8013070:	24000d00 	.word	0x24000d00

08013074 <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport>:
 8013074:	b1c8      	cbz	r0, 80130aa <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport+0x36>
 8013076:	b570      	push	{r4, r5, r6, lr}
 8013078:	460d      	mov	r5, r1
 801307a:	f002 fd2b 	bl	8015ad4 <get_serialized_size_std_msgs__msg__Header>
 801307e:	2104      	movs	r1, #4
 8013080:	182e      	adds	r6, r5, r0
 8013082:	f1c5 0504 	rsb	r5, r5, #4
 8013086:	4630      	mov	r0, r6
 8013088:	f001 fba0 	bl	80147cc <ucdr_alignment>
 801308c:	2104      	movs	r1, #4
 801308e:	1844      	adds	r4, r0, r1
 8013090:	4434      	add	r4, r6
 8013092:	4620      	mov	r0, r4
 8013094:	f001 fb9a 	bl	80147cc <ucdr_alignment>
 8013098:	2104      	movs	r1, #4
 801309a:	4408      	add	r0, r1
 801309c:	4404      	add	r4, r0
 801309e:	4620      	mov	r0, r4
 80130a0:	f001 fb94 	bl	80147cc <ucdr_alignment>
 80130a4:	4428      	add	r0, r5
 80130a6:	4420      	add	r0, r4
 80130a8:	bd70      	pop	{r4, r5, r6, pc}
 80130aa:	4770      	bx	lr

080130ac <_VelocityReport__cdr_deserialize>:
 80130ac:	b538      	push	{r3, r4, r5, lr}
 80130ae:	460c      	mov	r4, r1
 80130b0:	b1c9      	cbz	r1, 80130e6 <_VelocityReport__cdr_deserialize+0x3a>
 80130b2:	4605      	mov	r5, r0
 80130b4:	f002 fd92 	bl	8015bdc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80130b8:	4603      	mov	r3, r0
 80130ba:	4621      	mov	r1, r4
 80130bc:	4628      	mov	r0, r5
 80130be:	685b      	ldr	r3, [r3, #4]
 80130c0:	68db      	ldr	r3, [r3, #12]
 80130c2:	4798      	blx	r3
 80130c4:	f104 0114 	add.w	r1, r4, #20
 80130c8:	4628      	mov	r0, r5
 80130ca:	f001 f901 	bl	80142d0 <ucdr_deserialize_float>
 80130ce:	f104 0118 	add.w	r1, r4, #24
 80130d2:	4628      	mov	r0, r5
 80130d4:	f001 f8fc 	bl	80142d0 <ucdr_deserialize_float>
 80130d8:	f104 011c 	add.w	r1, r4, #28
 80130dc:	4628      	mov	r0, r5
 80130de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80130e2:	f001 b8f5 	b.w	80142d0 <ucdr_deserialize_float>
 80130e6:	4608      	mov	r0, r1
 80130e8:	bd38      	pop	{r3, r4, r5, pc}
 80130ea:	bf00      	nop

080130ec <_VelocityReport__cdr_serialize>:
 80130ec:	b1d8      	cbz	r0, 8013126 <_VelocityReport__cdr_serialize+0x3a>
 80130ee:	b538      	push	{r3, r4, r5, lr}
 80130f0:	4604      	mov	r4, r0
 80130f2:	460d      	mov	r5, r1
 80130f4:	f002 fd72 	bl	8015bdc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80130f8:	4603      	mov	r3, r0
 80130fa:	4629      	mov	r1, r5
 80130fc:	4620      	mov	r0, r4
 80130fe:	685b      	ldr	r3, [r3, #4]
 8013100:	689b      	ldr	r3, [r3, #8]
 8013102:	4798      	blx	r3
 8013104:	ed94 0a05 	vldr	s0, [r4, #20]
 8013108:	4628      	mov	r0, r5
 801310a:	f001 f849 	bl	80141a0 <ucdr_serialize_float>
 801310e:	ed94 0a06 	vldr	s0, [r4, #24]
 8013112:	4628      	mov	r0, r5
 8013114:	f001 f844 	bl	80141a0 <ucdr_serialize_float>
 8013118:	ed94 0a07 	vldr	s0, [r4, #28]
 801311c:	4628      	mov	r0, r5
 801311e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013122:	f001 b83d 	b.w	80141a0 <ucdr_serialize_float>
 8013126:	4770      	bx	lr

08013128 <_VelocityReport__get_serialized_size>:
 8013128:	b1b0      	cbz	r0, 8013158 <_VelocityReport__get_serialized_size+0x30>
 801312a:	2100      	movs	r1, #0
 801312c:	b510      	push	{r4, lr}
 801312e:	f002 fcd1 	bl	8015ad4 <get_serialized_size_std_msgs__msg__Header>
 8013132:	4604      	mov	r4, r0
 8013134:	2104      	movs	r1, #4
 8013136:	f001 fb49 	bl	80147cc <ucdr_alignment>
 801313a:	2104      	movs	r1, #4
 801313c:	4420      	add	r0, r4
 801313e:	1844      	adds	r4, r0, r1
 8013140:	4620      	mov	r0, r4
 8013142:	f001 fb43 	bl	80147cc <ucdr_alignment>
 8013146:	2104      	movs	r1, #4
 8013148:	4408      	add	r0, r1
 801314a:	4404      	add	r4, r0
 801314c:	4620      	mov	r0, r4
 801314e:	f001 fb3d 	bl	80147cc <ucdr_alignment>
 8013152:	3004      	adds	r0, #4
 8013154:	4420      	add	r0, r4
 8013156:	bd10      	pop	{r4, pc}
 8013158:	4770      	bx	lr
 801315a:	bf00      	nop

0801315c <_VelocityReport__max_serialized_size>:
 801315c:	b510      	push	{r4, lr}
 801315e:	b082      	sub	sp, #8
 8013160:	2301      	movs	r3, #1
 8013162:	2100      	movs	r1, #0
 8013164:	f10d 0007 	add.w	r0, sp, #7
 8013168:	f88d 3007 	strb.w	r3, [sp, #7]
 801316c:	f002 fd2c 	bl	8015bc8 <max_serialized_size_std_msgs__msg__Header>
 8013170:	4604      	mov	r4, r0
 8013172:	2104      	movs	r1, #4
 8013174:	f001 fb2a 	bl	80147cc <ucdr_alignment>
 8013178:	2104      	movs	r1, #4
 801317a:	4420      	add	r0, r4
 801317c:	1844      	adds	r4, r0, r1
 801317e:	4620      	mov	r0, r4
 8013180:	f001 fb24 	bl	80147cc <ucdr_alignment>
 8013184:	2104      	movs	r1, #4
 8013186:	4408      	add	r0, r1
 8013188:	4404      	add	r4, r0
 801318a:	4620      	mov	r0, r4
 801318c:	f001 fb1e 	bl	80147cc <ucdr_alignment>
 8013190:	3004      	adds	r0, #4
 8013192:	4420      	add	r0, r4
 8013194:	b002      	add	sp, #8
 8013196:	bd10      	pop	{r4, pc}

08013198 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 8013198:	4800      	ldr	r0, [pc, #0]	@ (801319c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x4>)
 801319a:	4770      	bx	lr
 801319c:	24000d28 	.word	0x24000d28

080131a0 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 80131a0:	f003 b92c 	b.w	80163fc <builtin_interfaces__msg__Time__init>

080131a4 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 80131a4:	f003 b92e 	b.w	8016404 <builtin_interfaces__msg__Time__fini>

080131a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 80131a8:	4b04      	ldr	r3, [pc, #16]	@ (80131bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80131aa:	681a      	ldr	r2, [r3, #0]
 80131ac:	b10a      	cbz	r2, 80131b2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 80131ae:	4803      	ldr	r0, [pc, #12]	@ (80131bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80131b0:	4770      	bx	lr
 80131b2:	4a03      	ldr	r2, [pc, #12]	@ (80131c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 80131b4:	4801      	ldr	r0, [pc, #4]	@ (80131bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80131b6:	6812      	ldr	r2, [r2, #0]
 80131b8:	601a      	str	r2, [r3, #0]
 80131ba:	4770      	bx	lr
 80131bc:	24000dc8 	.word	0x24000dc8
 80131c0:	24000e14 	.word	0x24000e14

080131c4 <get_serialized_size_builtin_interfaces__msg__Time>:
 80131c4:	b180      	cbz	r0, 80131e8 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 80131c6:	b538      	push	{r3, r4, r5, lr}
 80131c8:	460d      	mov	r5, r1
 80131ca:	2104      	movs	r1, #4
 80131cc:	4628      	mov	r0, r5
 80131ce:	f001 fafd 	bl	80147cc <ucdr_alignment>
 80131d2:	1d2b      	adds	r3, r5, #4
 80131d4:	f1c5 0504 	rsb	r5, r5, #4
 80131d8:	2104      	movs	r1, #4
 80131da:	181c      	adds	r4, r3, r0
 80131dc:	4620      	mov	r0, r4
 80131de:	f001 faf5 	bl	80147cc <ucdr_alignment>
 80131e2:	4428      	add	r0, r5
 80131e4:	4420      	add	r0, r4
 80131e6:	bd38      	pop	{r3, r4, r5, pc}
 80131e8:	4770      	bx	lr
 80131ea:	bf00      	nop

080131ec <_Time__cdr_deserialize>:
 80131ec:	b538      	push	{r3, r4, r5, lr}
 80131ee:	460c      	mov	r4, r1
 80131f0:	b141      	cbz	r1, 8013204 <_Time__cdr_deserialize+0x18>
 80131f2:	4605      	mov	r5, r0
 80131f4:	f000 ff44 	bl	8014080 <ucdr_deserialize_int32_t>
 80131f8:	1d21      	adds	r1, r4, #4
 80131fa:	4628      	mov	r0, r5
 80131fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013200:	f000 bbbc 	b.w	801397c <ucdr_deserialize_uint32_t>
 8013204:	4608      	mov	r0, r1
 8013206:	bd38      	pop	{r3, r4, r5, pc}

08013208 <_Time__cdr_serialize>:
 8013208:	b160      	cbz	r0, 8013224 <_Time__cdr_serialize+0x1c>
 801320a:	b538      	push	{r3, r4, r5, lr}
 801320c:	460d      	mov	r5, r1
 801320e:	4604      	mov	r4, r0
 8013210:	6801      	ldr	r1, [r0, #0]
 8013212:	4628      	mov	r0, r5
 8013214:	f000 fe9c 	bl	8013f50 <ucdr_serialize_int32_t>
 8013218:	6861      	ldr	r1, [r4, #4]
 801321a:	4628      	mov	r0, r5
 801321c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013220:	f000 ba7c 	b.w	801371c <ucdr_serialize_uint32_t>
 8013224:	4770      	bx	lr
 8013226:	bf00      	nop

08013228 <_Time__get_serialized_size>:
 8013228:	b160      	cbz	r0, 8013244 <_Time__get_serialized_size+0x1c>
 801322a:	2104      	movs	r1, #4
 801322c:	2000      	movs	r0, #0
 801322e:	b510      	push	{r4, lr}
 8013230:	f001 facc 	bl	80147cc <ucdr_alignment>
 8013234:	2104      	movs	r1, #4
 8013236:	1844      	adds	r4, r0, r1
 8013238:	4620      	mov	r0, r4
 801323a:	f001 fac7 	bl	80147cc <ucdr_alignment>
 801323e:	3004      	adds	r0, #4
 8013240:	4420      	add	r0, r4
 8013242:	bd10      	pop	{r4, pc}
 8013244:	4770      	bx	lr
 8013246:	bf00      	nop

08013248 <_Time__max_serialized_size>:
 8013248:	b510      	push	{r4, lr}
 801324a:	2104      	movs	r1, #4
 801324c:	2000      	movs	r0, #0
 801324e:	f001 fabd 	bl	80147cc <ucdr_alignment>
 8013252:	2104      	movs	r1, #4
 8013254:	1844      	adds	r4, r0, r1
 8013256:	4620      	mov	r0, r4
 8013258:	f001 fab8 	bl	80147cc <ucdr_alignment>
 801325c:	3004      	adds	r0, #4
 801325e:	4420      	add	r0, r4
 8013260:	bd10      	pop	{r4, pc}
 8013262:	bf00      	nop

08013264 <max_serialized_size_builtin_interfaces__msg__Time>:
 8013264:	b538      	push	{r3, r4, r5, lr}
 8013266:	460c      	mov	r4, r1
 8013268:	2301      	movs	r3, #1
 801326a:	2104      	movs	r1, #4
 801326c:	1d25      	adds	r5, r4, #4
 801326e:	7003      	strb	r3, [r0, #0]
 8013270:	4620      	mov	r0, r4
 8013272:	f1c4 0404 	rsb	r4, r4, #4
 8013276:	f001 faa9 	bl	80147cc <ucdr_alignment>
 801327a:	4405      	add	r5, r0
 801327c:	2104      	movs	r1, #4
 801327e:	4628      	mov	r0, r5
 8013280:	f001 faa4 	bl	80147cc <ucdr_alignment>
 8013284:	4420      	add	r0, r4
 8013286:	4428      	add	r0, r5
 8013288:	bd38      	pop	{r3, r4, r5, pc}
 801328a:	bf00      	nop

0801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 801328c:	4800      	ldr	r0, [pc, #0]	@ (8013290 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 801328e:	4770      	bx	lr
 8013290:	24000dd4 	.word	0x24000dd4

08013294 <ucdr_serialize_bool>:
 8013294:	b538      	push	{r3, r4, r5, lr}
 8013296:	460d      	mov	r5, r1
 8013298:	2101      	movs	r1, #1
 801329a:	4604      	mov	r4, r0
 801329c:	f001 fa4a 	bl	8014734 <ucdr_check_final_buffer_behavior>
 80132a0:	b148      	cbz	r0, 80132b6 <ucdr_serialize_bool+0x22>
 80132a2:	68a3      	ldr	r3, [r4, #8]
 80132a4:	2101      	movs	r1, #1
 80132a6:	701d      	strb	r5, [r3, #0]
 80132a8:	68a2      	ldr	r2, [r4, #8]
 80132aa:	6923      	ldr	r3, [r4, #16]
 80132ac:	440a      	add	r2, r1
 80132ae:	7561      	strb	r1, [r4, #21]
 80132b0:	440b      	add	r3, r1
 80132b2:	60a2      	str	r2, [r4, #8]
 80132b4:	6123      	str	r3, [r4, #16]
 80132b6:	7da0      	ldrb	r0, [r4, #22]
 80132b8:	f080 0001 	eor.w	r0, r0, #1
 80132bc:	bd38      	pop	{r3, r4, r5, pc}
 80132be:	bf00      	nop

080132c0 <ucdr_deserialize_bool>:
 80132c0:	b538      	push	{r3, r4, r5, lr}
 80132c2:	460d      	mov	r5, r1
 80132c4:	2101      	movs	r1, #1
 80132c6:	4604      	mov	r4, r0
 80132c8:	f001 fa34 	bl	8014734 <ucdr_check_final_buffer_behavior>
 80132cc:	b160      	cbz	r0, 80132e8 <ucdr_deserialize_bool+0x28>
 80132ce:	68a2      	ldr	r2, [r4, #8]
 80132d0:	2101      	movs	r1, #1
 80132d2:	6923      	ldr	r3, [r4, #16]
 80132d4:	f812 0b01 	ldrb.w	r0, [r2], #1
 80132d8:	440b      	add	r3, r1
 80132da:	3800      	subs	r0, #0
 80132dc:	bf18      	it	ne
 80132de:	2001      	movne	r0, #1
 80132e0:	7028      	strb	r0, [r5, #0]
 80132e2:	60a2      	str	r2, [r4, #8]
 80132e4:	6123      	str	r3, [r4, #16]
 80132e6:	7561      	strb	r1, [r4, #21]
 80132e8:	7da0      	ldrb	r0, [r4, #22]
 80132ea:	f080 0001 	eor.w	r0, r0, #1
 80132ee:	bd38      	pop	{r3, r4, r5, pc}

080132f0 <ucdr_serialize_uint8_t>:
 80132f0:	b538      	push	{r3, r4, r5, lr}
 80132f2:	460d      	mov	r5, r1
 80132f4:	2101      	movs	r1, #1
 80132f6:	4604      	mov	r4, r0
 80132f8:	f001 fa1c 	bl	8014734 <ucdr_check_final_buffer_behavior>
 80132fc:	b148      	cbz	r0, 8013312 <ucdr_serialize_uint8_t+0x22>
 80132fe:	68a3      	ldr	r3, [r4, #8]
 8013300:	2101      	movs	r1, #1
 8013302:	701d      	strb	r5, [r3, #0]
 8013304:	68a2      	ldr	r2, [r4, #8]
 8013306:	6923      	ldr	r3, [r4, #16]
 8013308:	440a      	add	r2, r1
 801330a:	7561      	strb	r1, [r4, #21]
 801330c:	440b      	add	r3, r1
 801330e:	60a2      	str	r2, [r4, #8]
 8013310:	6123      	str	r3, [r4, #16]
 8013312:	7da0      	ldrb	r0, [r4, #22]
 8013314:	f080 0001 	eor.w	r0, r0, #1
 8013318:	bd38      	pop	{r3, r4, r5, pc}
 801331a:	bf00      	nop

0801331c <ucdr_deserialize_uint8_t>:
 801331c:	b538      	push	{r3, r4, r5, lr}
 801331e:	460d      	mov	r5, r1
 8013320:	2101      	movs	r1, #1
 8013322:	4604      	mov	r4, r0
 8013324:	f001 fa06 	bl	8014734 <ucdr_check_final_buffer_behavior>
 8013328:	b150      	cbz	r0, 8013340 <ucdr_deserialize_uint8_t+0x24>
 801332a:	68a3      	ldr	r3, [r4, #8]
 801332c:	2101      	movs	r1, #1
 801332e:	781b      	ldrb	r3, [r3, #0]
 8013330:	702b      	strb	r3, [r5, #0]
 8013332:	68a2      	ldr	r2, [r4, #8]
 8013334:	6923      	ldr	r3, [r4, #16]
 8013336:	440a      	add	r2, r1
 8013338:	7561      	strb	r1, [r4, #21]
 801333a:	440b      	add	r3, r1
 801333c:	60a2      	str	r2, [r4, #8]
 801333e:	6123      	str	r3, [r4, #16]
 8013340:	7da0      	ldrb	r0, [r4, #22]
 8013342:	f080 0001 	eor.w	r0, r0, #1
 8013346:	bd38      	pop	{r3, r4, r5, pc}

08013348 <ucdr_serialize_uint16_t>:
 8013348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801334c:	460b      	mov	r3, r1
 801334e:	b082      	sub	sp, #8
 8013350:	4604      	mov	r4, r0
 8013352:	2102      	movs	r1, #2
 8013354:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013358:	f001 fa40 	bl	80147dc <ucdr_buffer_alignment>
 801335c:	4601      	mov	r1, r0
 801335e:	4620      	mov	r0, r4
 8013360:	7d67      	ldrb	r7, [r4, #21]
 8013362:	f001 fa83 	bl	801486c <ucdr_advance_buffer>
 8013366:	2102      	movs	r1, #2
 8013368:	4620      	mov	r0, r4
 801336a:	f001 f9d7 	bl	801471c <ucdr_check_buffer_available_for>
 801336e:	bb78      	cbnz	r0, 80133d0 <ucdr_serialize_uint16_t+0x88>
 8013370:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013374:	42ab      	cmp	r3, r5
 8013376:	d926      	bls.n	80133c6 <ucdr_serialize_uint16_t+0x7e>
 8013378:	1b5e      	subs	r6, r3, r5
 801337a:	60a3      	str	r3, [r4, #8]
 801337c:	6923      	ldr	r3, [r4, #16]
 801337e:	4620      	mov	r0, r4
 8013380:	f1c6 0802 	rsb	r8, r6, #2
 8013384:	4433      	add	r3, r6
 8013386:	4641      	mov	r1, r8
 8013388:	6123      	str	r3, [r4, #16]
 801338a:	f001 f9d3 	bl	8014734 <ucdr_check_final_buffer_behavior>
 801338e:	2800      	cmp	r0, #0
 8013390:	d03b      	beq.n	801340a <ucdr_serialize_uint16_t+0xc2>
 8013392:	7d23      	ldrb	r3, [r4, #20]
 8013394:	2b01      	cmp	r3, #1
 8013396:	d04a      	beq.n	801342e <ucdr_serialize_uint16_t+0xe6>
 8013398:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801339c:	702b      	strb	r3, [r5, #0]
 801339e:	2e00      	cmp	r6, #0
 80133a0:	d040      	beq.n	8013424 <ucdr_serialize_uint16_t+0xdc>
 80133a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80133a6:	706b      	strb	r3, [r5, #1]
 80133a8:	6923      	ldr	r3, [r4, #16]
 80133aa:	2102      	movs	r1, #2
 80133ac:	68a2      	ldr	r2, [r4, #8]
 80133ae:	3302      	adds	r3, #2
 80133b0:	7da0      	ldrb	r0, [r4, #22]
 80133b2:	4442      	add	r2, r8
 80133b4:	7561      	strb	r1, [r4, #21]
 80133b6:	1b9e      	subs	r6, r3, r6
 80133b8:	f080 0001 	eor.w	r0, r0, #1
 80133bc:	60a2      	str	r2, [r4, #8]
 80133be:	6126      	str	r6, [r4, #16]
 80133c0:	b002      	add	sp, #8
 80133c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133c6:	2102      	movs	r1, #2
 80133c8:	4620      	mov	r0, r4
 80133ca:	f001 f9b3 	bl	8014734 <ucdr_check_final_buffer_behavior>
 80133ce:	b190      	cbz	r0, 80133f6 <ucdr_serialize_uint16_t+0xae>
 80133d0:	7d23      	ldrb	r3, [r4, #20]
 80133d2:	2b01      	cmp	r3, #1
 80133d4:	68a3      	ldr	r3, [r4, #8]
 80133d6:	d014      	beq.n	8013402 <ucdr_serialize_uint16_t+0xba>
 80133d8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80133dc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80133e0:	7019      	strb	r1, [r3, #0]
 80133e2:	68a3      	ldr	r3, [r4, #8]
 80133e4:	705a      	strb	r2, [r3, #1]
 80133e6:	2102      	movs	r1, #2
 80133e8:	68a2      	ldr	r2, [r4, #8]
 80133ea:	6923      	ldr	r3, [r4, #16]
 80133ec:	440a      	add	r2, r1
 80133ee:	7561      	strb	r1, [r4, #21]
 80133f0:	440b      	add	r3, r1
 80133f2:	60a2      	str	r2, [r4, #8]
 80133f4:	6123      	str	r3, [r4, #16]
 80133f6:	7da0      	ldrb	r0, [r4, #22]
 80133f8:	f080 0001 	eor.w	r0, r0, #1
 80133fc:	b002      	add	sp, #8
 80133fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013402:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013406:	801a      	strh	r2, [r3, #0]
 8013408:	e7ed      	b.n	80133e6 <ucdr_serialize_uint16_t+0x9e>
 801340a:	68a2      	ldr	r2, [r4, #8]
 801340c:	6923      	ldr	r3, [r4, #16]
 801340e:	7da0      	ldrb	r0, [r4, #22]
 8013410:	1b92      	subs	r2, r2, r6
 8013412:	1b9b      	subs	r3, r3, r6
 8013414:	7567      	strb	r7, [r4, #21]
 8013416:	f080 0001 	eor.w	r0, r0, #1
 801341a:	60a2      	str	r2, [r4, #8]
 801341c:	6123      	str	r3, [r4, #16]
 801341e:	b002      	add	sp, #8
 8013420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013424:	68a3      	ldr	r3, [r4, #8]
 8013426:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801342a:	701a      	strb	r2, [r3, #0]
 801342c:	e7bc      	b.n	80133a8 <ucdr_serialize_uint16_t+0x60>
 801342e:	4628      	mov	r0, r5
 8013430:	f10d 0506 	add.w	r5, sp, #6
 8013434:	4632      	mov	r2, r6
 8013436:	4629      	mov	r1, r5
 8013438:	f00e fc6f 	bl	8021d1a <memcpy>
 801343c:	4642      	mov	r2, r8
 801343e:	19a9      	adds	r1, r5, r6
 8013440:	68a0      	ldr	r0, [r4, #8]
 8013442:	f00e fc6a 	bl	8021d1a <memcpy>
 8013446:	e7af      	b.n	80133a8 <ucdr_serialize_uint16_t+0x60>

08013448 <ucdr_serialize_endian_uint16_t>:
 8013448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801344c:	4604      	mov	r4, r0
 801344e:	b083      	sub	sp, #12
 8013450:	460d      	mov	r5, r1
 8013452:	2102      	movs	r1, #2
 8013454:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013458:	f001 f9c0 	bl	80147dc <ucdr_buffer_alignment>
 801345c:	4601      	mov	r1, r0
 801345e:	4620      	mov	r0, r4
 8013460:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013464:	f001 fa02 	bl	801486c <ucdr_advance_buffer>
 8013468:	2102      	movs	r1, #2
 801346a:	4620      	mov	r0, r4
 801346c:	f001 f956 	bl	801471c <ucdr_check_buffer_available_for>
 8013470:	bb70      	cbnz	r0, 80134d0 <ucdr_serialize_endian_uint16_t+0x88>
 8013472:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013476:	42be      	cmp	r6, r7
 8013478:	d925      	bls.n	80134c6 <ucdr_serialize_endian_uint16_t+0x7e>
 801347a:	6923      	ldr	r3, [r4, #16]
 801347c:	4620      	mov	r0, r4
 801347e:	60a6      	str	r6, [r4, #8]
 8013480:	1bf6      	subs	r6, r6, r7
 8013482:	4433      	add	r3, r6
 8013484:	f1c6 0902 	rsb	r9, r6, #2
 8013488:	6123      	str	r3, [r4, #16]
 801348a:	4649      	mov	r1, r9
 801348c:	f001 f952 	bl	8014734 <ucdr_check_final_buffer_behavior>
 8013490:	2800      	cmp	r0, #0
 8013492:	d039      	beq.n	8013508 <ucdr_serialize_endian_uint16_t+0xc0>
 8013494:	2d01      	cmp	r5, #1
 8013496:	d04a      	beq.n	801352e <ucdr_serialize_endian_uint16_t+0xe6>
 8013498:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801349c:	703b      	strb	r3, [r7, #0]
 801349e:	2e00      	cmp	r6, #0
 80134a0:	d040      	beq.n	8013524 <ucdr_serialize_endian_uint16_t+0xdc>
 80134a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80134a6:	707b      	strb	r3, [r7, #1]
 80134a8:	6923      	ldr	r3, [r4, #16]
 80134aa:	2102      	movs	r1, #2
 80134ac:	68a2      	ldr	r2, [r4, #8]
 80134ae:	7da0      	ldrb	r0, [r4, #22]
 80134b0:	3302      	adds	r3, #2
 80134b2:	444a      	add	r2, r9
 80134b4:	7561      	strb	r1, [r4, #21]
 80134b6:	1b9b      	subs	r3, r3, r6
 80134b8:	f080 0001 	eor.w	r0, r0, #1
 80134bc:	60a2      	str	r2, [r4, #8]
 80134be:	6123      	str	r3, [r4, #16]
 80134c0:	b003      	add	sp, #12
 80134c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80134c6:	2102      	movs	r1, #2
 80134c8:	4620      	mov	r0, r4
 80134ca:	f001 f933 	bl	8014734 <ucdr_check_final_buffer_behavior>
 80134ce:	b188      	cbz	r0, 80134f4 <ucdr_serialize_endian_uint16_t+0xac>
 80134d0:	2d01      	cmp	r5, #1
 80134d2:	68a3      	ldr	r3, [r4, #8]
 80134d4:	d014      	beq.n	8013500 <ucdr_serialize_endian_uint16_t+0xb8>
 80134d6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80134da:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80134de:	7019      	strb	r1, [r3, #0]
 80134e0:	68a3      	ldr	r3, [r4, #8]
 80134e2:	705a      	strb	r2, [r3, #1]
 80134e4:	2102      	movs	r1, #2
 80134e6:	68a2      	ldr	r2, [r4, #8]
 80134e8:	6923      	ldr	r3, [r4, #16]
 80134ea:	440a      	add	r2, r1
 80134ec:	7561      	strb	r1, [r4, #21]
 80134ee:	440b      	add	r3, r1
 80134f0:	60a2      	str	r2, [r4, #8]
 80134f2:	6123      	str	r3, [r4, #16]
 80134f4:	7da0      	ldrb	r0, [r4, #22]
 80134f6:	f080 0001 	eor.w	r0, r0, #1
 80134fa:	b003      	add	sp, #12
 80134fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013500:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013504:	801a      	strh	r2, [r3, #0]
 8013506:	e7ed      	b.n	80134e4 <ucdr_serialize_endian_uint16_t+0x9c>
 8013508:	68a2      	ldr	r2, [r4, #8]
 801350a:	6923      	ldr	r3, [r4, #16]
 801350c:	7da0      	ldrb	r0, [r4, #22]
 801350e:	1b92      	subs	r2, r2, r6
 8013510:	1b9b      	subs	r3, r3, r6
 8013512:	f884 8015 	strb.w	r8, [r4, #21]
 8013516:	f080 0001 	eor.w	r0, r0, #1
 801351a:	60a2      	str	r2, [r4, #8]
 801351c:	6123      	str	r3, [r4, #16]
 801351e:	b003      	add	sp, #12
 8013520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013524:	68a3      	ldr	r3, [r4, #8]
 8013526:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801352a:	701a      	strb	r2, [r3, #0]
 801352c:	e7bc      	b.n	80134a8 <ucdr_serialize_endian_uint16_t+0x60>
 801352e:	f10d 0506 	add.w	r5, sp, #6
 8013532:	4632      	mov	r2, r6
 8013534:	4638      	mov	r0, r7
 8013536:	4629      	mov	r1, r5
 8013538:	f00e fbef 	bl	8021d1a <memcpy>
 801353c:	464a      	mov	r2, r9
 801353e:	19a9      	adds	r1, r5, r6
 8013540:	68a0      	ldr	r0, [r4, #8]
 8013542:	f00e fbea 	bl	8021d1a <memcpy>
 8013546:	e7af      	b.n	80134a8 <ucdr_serialize_endian_uint16_t+0x60>

08013548 <ucdr_deserialize_uint16_t>:
 8013548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801354c:	4604      	mov	r4, r0
 801354e:	460d      	mov	r5, r1
 8013550:	2102      	movs	r1, #2
 8013552:	f001 f943 	bl	80147dc <ucdr_buffer_alignment>
 8013556:	4601      	mov	r1, r0
 8013558:	4620      	mov	r0, r4
 801355a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801355e:	f001 f985 	bl	801486c <ucdr_advance_buffer>
 8013562:	2102      	movs	r1, #2
 8013564:	4620      	mov	r0, r4
 8013566:	f001 f8d9 	bl	801471c <ucdr_check_buffer_available_for>
 801356a:	bb60      	cbnz	r0, 80135c6 <ucdr_deserialize_uint16_t+0x7e>
 801356c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013570:	42be      	cmp	r6, r7
 8013572:	d923      	bls.n	80135bc <ucdr_deserialize_uint16_t+0x74>
 8013574:	6923      	ldr	r3, [r4, #16]
 8013576:	4620      	mov	r0, r4
 8013578:	60a6      	str	r6, [r4, #8]
 801357a:	1bf6      	subs	r6, r6, r7
 801357c:	4433      	add	r3, r6
 801357e:	f1c6 0902 	rsb	r9, r6, #2
 8013582:	6123      	str	r3, [r4, #16]
 8013584:	4649      	mov	r1, r9
 8013586:	f001 f8d5 	bl	8014734 <ucdr_check_final_buffer_behavior>
 801358a:	2800      	cmp	r0, #0
 801358c:	d034      	beq.n	80135f8 <ucdr_deserialize_uint16_t+0xb0>
 801358e:	7d23      	ldrb	r3, [r4, #20]
 8013590:	2b01      	cmp	r3, #1
 8013592:	d042      	beq.n	801361a <ucdr_deserialize_uint16_t+0xd2>
 8013594:	787b      	ldrb	r3, [r7, #1]
 8013596:	702b      	strb	r3, [r5, #0]
 8013598:	2e00      	cmp	r6, #0
 801359a:	d03a      	beq.n	8013612 <ucdr_deserialize_uint16_t+0xca>
 801359c:	783b      	ldrb	r3, [r7, #0]
 801359e:	706b      	strb	r3, [r5, #1]
 80135a0:	6923      	ldr	r3, [r4, #16]
 80135a2:	2102      	movs	r1, #2
 80135a4:	68a2      	ldr	r2, [r4, #8]
 80135a6:	3302      	adds	r3, #2
 80135a8:	7da0      	ldrb	r0, [r4, #22]
 80135aa:	444a      	add	r2, r9
 80135ac:	7561      	strb	r1, [r4, #21]
 80135ae:	1b9b      	subs	r3, r3, r6
 80135b0:	f080 0001 	eor.w	r0, r0, #1
 80135b4:	60a2      	str	r2, [r4, #8]
 80135b6:	6123      	str	r3, [r4, #16]
 80135b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135bc:	2102      	movs	r1, #2
 80135be:	4620      	mov	r0, r4
 80135c0:	f001 f8b8 	bl	8014734 <ucdr_check_final_buffer_behavior>
 80135c4:	b180      	cbz	r0, 80135e8 <ucdr_deserialize_uint16_t+0xa0>
 80135c6:	7d23      	ldrb	r3, [r4, #20]
 80135c8:	2b01      	cmp	r3, #1
 80135ca:	68a3      	ldr	r3, [r4, #8]
 80135cc:	d011      	beq.n	80135f2 <ucdr_deserialize_uint16_t+0xaa>
 80135ce:	785b      	ldrb	r3, [r3, #1]
 80135d0:	702b      	strb	r3, [r5, #0]
 80135d2:	68a3      	ldr	r3, [r4, #8]
 80135d4:	781b      	ldrb	r3, [r3, #0]
 80135d6:	706b      	strb	r3, [r5, #1]
 80135d8:	2102      	movs	r1, #2
 80135da:	68a2      	ldr	r2, [r4, #8]
 80135dc:	6923      	ldr	r3, [r4, #16]
 80135de:	440a      	add	r2, r1
 80135e0:	7561      	strb	r1, [r4, #21]
 80135e2:	440b      	add	r3, r1
 80135e4:	60a2      	str	r2, [r4, #8]
 80135e6:	6123      	str	r3, [r4, #16]
 80135e8:	7da0      	ldrb	r0, [r4, #22]
 80135ea:	f080 0001 	eor.w	r0, r0, #1
 80135ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135f2:	881b      	ldrh	r3, [r3, #0]
 80135f4:	802b      	strh	r3, [r5, #0]
 80135f6:	e7ef      	b.n	80135d8 <ucdr_deserialize_uint16_t+0x90>
 80135f8:	68a2      	ldr	r2, [r4, #8]
 80135fa:	6923      	ldr	r3, [r4, #16]
 80135fc:	1b92      	subs	r2, r2, r6
 80135fe:	7da0      	ldrb	r0, [r4, #22]
 8013600:	1b9b      	subs	r3, r3, r6
 8013602:	f884 8015 	strb.w	r8, [r4, #21]
 8013606:	f080 0001 	eor.w	r0, r0, #1
 801360a:	60a2      	str	r2, [r4, #8]
 801360c:	6123      	str	r3, [r4, #16]
 801360e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013612:	68a3      	ldr	r3, [r4, #8]
 8013614:	781b      	ldrb	r3, [r3, #0]
 8013616:	706b      	strb	r3, [r5, #1]
 8013618:	e7c2      	b.n	80135a0 <ucdr_deserialize_uint16_t+0x58>
 801361a:	4639      	mov	r1, r7
 801361c:	4632      	mov	r2, r6
 801361e:	4628      	mov	r0, r5
 8013620:	f00e fb7b 	bl	8021d1a <memcpy>
 8013624:	464a      	mov	r2, r9
 8013626:	19a8      	adds	r0, r5, r6
 8013628:	68a1      	ldr	r1, [r4, #8]
 801362a:	f00e fb76 	bl	8021d1a <memcpy>
 801362e:	e7b7      	b.n	80135a0 <ucdr_deserialize_uint16_t+0x58>

08013630 <ucdr_deserialize_endian_uint16_t>:
 8013630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013634:	4604      	mov	r4, r0
 8013636:	460e      	mov	r6, r1
 8013638:	2102      	movs	r1, #2
 801363a:	4615      	mov	r5, r2
 801363c:	f001 f8ce 	bl	80147dc <ucdr_buffer_alignment>
 8013640:	4601      	mov	r1, r0
 8013642:	4620      	mov	r0, r4
 8013644:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013648:	f001 f910 	bl	801486c <ucdr_advance_buffer>
 801364c:	2102      	movs	r1, #2
 801364e:	4620      	mov	r0, r4
 8013650:	f001 f864 	bl	801471c <ucdr_check_buffer_available_for>
 8013654:	bb70      	cbnz	r0, 80136b4 <ucdr_deserialize_endian_uint16_t+0x84>
 8013656:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 801365a:	454f      	cmp	r7, r9
 801365c:	d925      	bls.n	80136aa <ucdr_deserialize_endian_uint16_t+0x7a>
 801365e:	6923      	ldr	r3, [r4, #16]
 8013660:	4620      	mov	r0, r4
 8013662:	60a7      	str	r7, [r4, #8]
 8013664:	eba7 0709 	sub.w	r7, r7, r9
 8013668:	443b      	add	r3, r7
 801366a:	f1c7 0a02 	rsb	sl, r7, #2
 801366e:	6123      	str	r3, [r4, #16]
 8013670:	4651      	mov	r1, sl
 8013672:	f001 f85f 	bl	8014734 <ucdr_check_final_buffer_behavior>
 8013676:	2800      	cmp	r0, #0
 8013678:	d034      	beq.n	80136e4 <ucdr_deserialize_endian_uint16_t+0xb4>
 801367a:	2e01      	cmp	r6, #1
 801367c:	d043      	beq.n	8013706 <ucdr_deserialize_endian_uint16_t+0xd6>
 801367e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8013682:	702b      	strb	r3, [r5, #0]
 8013684:	2f00      	cmp	r7, #0
 8013686:	d03a      	beq.n	80136fe <ucdr_deserialize_endian_uint16_t+0xce>
 8013688:	f899 3000 	ldrb.w	r3, [r9]
 801368c:	706b      	strb	r3, [r5, #1]
 801368e:	6923      	ldr	r3, [r4, #16]
 8013690:	2102      	movs	r1, #2
 8013692:	68a2      	ldr	r2, [r4, #8]
 8013694:	3302      	adds	r3, #2
 8013696:	7da0      	ldrb	r0, [r4, #22]
 8013698:	4452      	add	r2, sl
 801369a:	7561      	strb	r1, [r4, #21]
 801369c:	1bdb      	subs	r3, r3, r7
 801369e:	f080 0001 	eor.w	r0, r0, #1
 80136a2:	60a2      	str	r2, [r4, #8]
 80136a4:	6123      	str	r3, [r4, #16]
 80136a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136aa:	2102      	movs	r1, #2
 80136ac:	4620      	mov	r0, r4
 80136ae:	f001 f841 	bl	8014734 <ucdr_check_final_buffer_behavior>
 80136b2:	b178      	cbz	r0, 80136d4 <ucdr_deserialize_endian_uint16_t+0xa4>
 80136b4:	2e01      	cmp	r6, #1
 80136b6:	68a3      	ldr	r3, [r4, #8]
 80136b8:	d011      	beq.n	80136de <ucdr_deserialize_endian_uint16_t+0xae>
 80136ba:	785b      	ldrb	r3, [r3, #1]
 80136bc:	702b      	strb	r3, [r5, #0]
 80136be:	68a3      	ldr	r3, [r4, #8]
 80136c0:	781b      	ldrb	r3, [r3, #0]
 80136c2:	706b      	strb	r3, [r5, #1]
 80136c4:	2102      	movs	r1, #2
 80136c6:	68a2      	ldr	r2, [r4, #8]
 80136c8:	6923      	ldr	r3, [r4, #16]
 80136ca:	440a      	add	r2, r1
 80136cc:	7561      	strb	r1, [r4, #21]
 80136ce:	440b      	add	r3, r1
 80136d0:	60a2      	str	r2, [r4, #8]
 80136d2:	6123      	str	r3, [r4, #16]
 80136d4:	7da0      	ldrb	r0, [r4, #22]
 80136d6:	f080 0001 	eor.w	r0, r0, #1
 80136da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136de:	881b      	ldrh	r3, [r3, #0]
 80136e0:	802b      	strh	r3, [r5, #0]
 80136e2:	e7ef      	b.n	80136c4 <ucdr_deserialize_endian_uint16_t+0x94>
 80136e4:	68a2      	ldr	r2, [r4, #8]
 80136e6:	6923      	ldr	r3, [r4, #16]
 80136e8:	1bd2      	subs	r2, r2, r7
 80136ea:	7da0      	ldrb	r0, [r4, #22]
 80136ec:	1bdb      	subs	r3, r3, r7
 80136ee:	f884 8015 	strb.w	r8, [r4, #21]
 80136f2:	f080 0001 	eor.w	r0, r0, #1
 80136f6:	60a2      	str	r2, [r4, #8]
 80136f8:	6123      	str	r3, [r4, #16]
 80136fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136fe:	68a3      	ldr	r3, [r4, #8]
 8013700:	781b      	ldrb	r3, [r3, #0]
 8013702:	706b      	strb	r3, [r5, #1]
 8013704:	e7c3      	b.n	801368e <ucdr_deserialize_endian_uint16_t+0x5e>
 8013706:	4649      	mov	r1, r9
 8013708:	463a      	mov	r2, r7
 801370a:	4628      	mov	r0, r5
 801370c:	f00e fb05 	bl	8021d1a <memcpy>
 8013710:	4652      	mov	r2, sl
 8013712:	19e8      	adds	r0, r5, r7
 8013714:	68a1      	ldr	r1, [r4, #8]
 8013716:	f00e fb00 	bl	8021d1a <memcpy>
 801371a:	e7b8      	b.n	801368e <ucdr_deserialize_endian_uint16_t+0x5e>

0801371c <ucdr_serialize_uint32_t>:
 801371c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013720:	b082      	sub	sp, #8
 8013722:	4604      	mov	r4, r0
 8013724:	9101      	str	r1, [sp, #4]
 8013726:	2104      	movs	r1, #4
 8013728:	f001 f858 	bl	80147dc <ucdr_buffer_alignment>
 801372c:	4601      	mov	r1, r0
 801372e:	4620      	mov	r0, r4
 8013730:	7d67      	ldrb	r7, [r4, #21]
 8013732:	f001 f89b 	bl	801486c <ucdr_advance_buffer>
 8013736:	2104      	movs	r1, #4
 8013738:	4620      	mov	r0, r4
 801373a:	f000 ffef 	bl	801471c <ucdr_check_buffer_available_for>
 801373e:	2800      	cmp	r0, #0
 8013740:	d139      	bne.n	80137b6 <ucdr_serialize_uint32_t+0x9a>
 8013742:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013746:	42ab      	cmp	r3, r5
 8013748:	d930      	bls.n	80137ac <ucdr_serialize_uint32_t+0x90>
 801374a:	1b5e      	subs	r6, r3, r5
 801374c:	60a3      	str	r3, [r4, #8]
 801374e:	6923      	ldr	r3, [r4, #16]
 8013750:	4620      	mov	r0, r4
 8013752:	f1c6 0804 	rsb	r8, r6, #4
 8013756:	4433      	add	r3, r6
 8013758:	4641      	mov	r1, r8
 801375a:	6123      	str	r3, [r4, #16]
 801375c:	f000 ffea 	bl	8014734 <ucdr_check_final_buffer_behavior>
 8013760:	2800      	cmp	r0, #0
 8013762:	d04c      	beq.n	80137fe <ucdr_serialize_uint32_t+0xe2>
 8013764:	7d23      	ldrb	r3, [r4, #20]
 8013766:	2b01      	cmp	r3, #1
 8013768:	d063      	beq.n	8013832 <ucdr_serialize_uint32_t+0x116>
 801376a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801376e:	702b      	strb	r3, [r5, #0]
 8013770:	2e00      	cmp	r6, #0
 8013772:	d051      	beq.n	8013818 <ucdr_serialize_uint32_t+0xfc>
 8013774:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013778:	2e01      	cmp	r6, #1
 801377a:	706b      	strb	r3, [r5, #1]
 801377c:	d050      	beq.n	8013820 <ucdr_serialize_uint32_t+0x104>
 801377e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013782:	2e02      	cmp	r6, #2
 8013784:	70ab      	strb	r3, [r5, #2]
 8013786:	d04f      	beq.n	8013828 <ucdr_serialize_uint32_t+0x10c>
 8013788:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801378c:	70eb      	strb	r3, [r5, #3]
 801378e:	6923      	ldr	r3, [r4, #16]
 8013790:	2104      	movs	r1, #4
 8013792:	68a2      	ldr	r2, [r4, #8]
 8013794:	3304      	adds	r3, #4
 8013796:	7da0      	ldrb	r0, [r4, #22]
 8013798:	4442      	add	r2, r8
 801379a:	7561      	strb	r1, [r4, #21]
 801379c:	1b9e      	subs	r6, r3, r6
 801379e:	f080 0001 	eor.w	r0, r0, #1
 80137a2:	60a2      	str	r2, [r4, #8]
 80137a4:	6126      	str	r6, [r4, #16]
 80137a6:	b002      	add	sp, #8
 80137a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137ac:	2104      	movs	r1, #4
 80137ae:	4620      	mov	r0, r4
 80137b0:	f000 ffc0 	bl	8014734 <ucdr_check_final_buffer_behavior>
 80137b4:	b1d0      	cbz	r0, 80137ec <ucdr_serialize_uint32_t+0xd0>
 80137b6:	7d23      	ldrb	r3, [r4, #20]
 80137b8:	2b01      	cmp	r3, #1
 80137ba:	68a3      	ldr	r3, [r4, #8]
 80137bc:	d01c      	beq.n	80137f8 <ucdr_serialize_uint32_t+0xdc>
 80137be:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80137c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80137c6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80137ca:	7018      	strb	r0, [r3, #0]
 80137cc:	68a3      	ldr	r3, [r4, #8]
 80137ce:	705a      	strb	r2, [r3, #1]
 80137d0:	68a3      	ldr	r3, [r4, #8]
 80137d2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80137d6:	7099      	strb	r1, [r3, #2]
 80137d8:	68a3      	ldr	r3, [r4, #8]
 80137da:	70da      	strb	r2, [r3, #3]
 80137dc:	2104      	movs	r1, #4
 80137de:	68a2      	ldr	r2, [r4, #8]
 80137e0:	6923      	ldr	r3, [r4, #16]
 80137e2:	440a      	add	r2, r1
 80137e4:	7561      	strb	r1, [r4, #21]
 80137e6:	440b      	add	r3, r1
 80137e8:	60a2      	str	r2, [r4, #8]
 80137ea:	6123      	str	r3, [r4, #16]
 80137ec:	7da0      	ldrb	r0, [r4, #22]
 80137ee:	f080 0001 	eor.w	r0, r0, #1
 80137f2:	b002      	add	sp, #8
 80137f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137f8:	9a01      	ldr	r2, [sp, #4]
 80137fa:	601a      	str	r2, [r3, #0]
 80137fc:	e7ee      	b.n	80137dc <ucdr_serialize_uint32_t+0xc0>
 80137fe:	68a2      	ldr	r2, [r4, #8]
 8013800:	6923      	ldr	r3, [r4, #16]
 8013802:	7da0      	ldrb	r0, [r4, #22]
 8013804:	1b92      	subs	r2, r2, r6
 8013806:	1b9b      	subs	r3, r3, r6
 8013808:	7567      	strb	r7, [r4, #21]
 801380a:	f080 0001 	eor.w	r0, r0, #1
 801380e:	60a2      	str	r2, [r4, #8]
 8013810:	6123      	str	r3, [r4, #16]
 8013812:	b002      	add	sp, #8
 8013814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013818:	68a3      	ldr	r3, [r4, #8]
 801381a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801381e:	701a      	strb	r2, [r3, #0]
 8013820:	68a3      	ldr	r3, [r4, #8]
 8013822:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013826:	701a      	strb	r2, [r3, #0]
 8013828:	68a3      	ldr	r3, [r4, #8]
 801382a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801382e:	701a      	strb	r2, [r3, #0]
 8013830:	e7ad      	b.n	801378e <ucdr_serialize_uint32_t+0x72>
 8013832:	4628      	mov	r0, r5
 8013834:	ad01      	add	r5, sp, #4
 8013836:	4632      	mov	r2, r6
 8013838:	4629      	mov	r1, r5
 801383a:	f00e fa6e 	bl	8021d1a <memcpy>
 801383e:	4642      	mov	r2, r8
 8013840:	19a9      	adds	r1, r5, r6
 8013842:	68a0      	ldr	r0, [r4, #8]
 8013844:	f00e fa69 	bl	8021d1a <memcpy>
 8013848:	e7a1      	b.n	801378e <ucdr_serialize_uint32_t+0x72>
 801384a:	bf00      	nop

0801384c <ucdr_serialize_endian_uint32_t>:
 801384c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013850:	4604      	mov	r4, r0
 8013852:	b083      	sub	sp, #12
 8013854:	460d      	mov	r5, r1
 8013856:	2104      	movs	r1, #4
 8013858:	9201      	str	r2, [sp, #4]
 801385a:	f000 ffbf 	bl	80147dc <ucdr_buffer_alignment>
 801385e:	4601      	mov	r1, r0
 8013860:	4620      	mov	r0, r4
 8013862:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013866:	f001 f801 	bl	801486c <ucdr_advance_buffer>
 801386a:	2104      	movs	r1, #4
 801386c:	4620      	mov	r0, r4
 801386e:	f000 ff55 	bl	801471c <ucdr_check_buffer_available_for>
 8013872:	2800      	cmp	r0, #0
 8013874:	d138      	bne.n	80138e8 <ucdr_serialize_endian_uint32_t+0x9c>
 8013876:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801387a:	42b7      	cmp	r7, r6
 801387c:	d92f      	bls.n	80138de <ucdr_serialize_endian_uint32_t+0x92>
 801387e:	6923      	ldr	r3, [r4, #16]
 8013880:	4620      	mov	r0, r4
 8013882:	60a7      	str	r7, [r4, #8]
 8013884:	1bbf      	subs	r7, r7, r6
 8013886:	443b      	add	r3, r7
 8013888:	f1c7 0904 	rsb	r9, r7, #4
 801388c:	6123      	str	r3, [r4, #16]
 801388e:	4649      	mov	r1, r9
 8013890:	f000 ff50 	bl	8014734 <ucdr_check_final_buffer_behavior>
 8013894:	2800      	cmp	r0, #0
 8013896:	d04a      	beq.n	801392e <ucdr_serialize_endian_uint32_t+0xe2>
 8013898:	2d01      	cmp	r5, #1
 801389a:	d063      	beq.n	8013964 <ucdr_serialize_endian_uint32_t+0x118>
 801389c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80138a0:	7033      	strb	r3, [r6, #0]
 80138a2:	2f00      	cmp	r7, #0
 80138a4:	d051      	beq.n	801394a <ucdr_serialize_endian_uint32_t+0xfe>
 80138a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80138aa:	2f01      	cmp	r7, #1
 80138ac:	7073      	strb	r3, [r6, #1]
 80138ae:	d050      	beq.n	8013952 <ucdr_serialize_endian_uint32_t+0x106>
 80138b0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80138b4:	2f02      	cmp	r7, #2
 80138b6:	70b3      	strb	r3, [r6, #2]
 80138b8:	d04f      	beq.n	801395a <ucdr_serialize_endian_uint32_t+0x10e>
 80138ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80138be:	70f3      	strb	r3, [r6, #3]
 80138c0:	6923      	ldr	r3, [r4, #16]
 80138c2:	2104      	movs	r1, #4
 80138c4:	68a2      	ldr	r2, [r4, #8]
 80138c6:	7da0      	ldrb	r0, [r4, #22]
 80138c8:	3304      	adds	r3, #4
 80138ca:	444a      	add	r2, r9
 80138cc:	7561      	strb	r1, [r4, #21]
 80138ce:	1bdb      	subs	r3, r3, r7
 80138d0:	f080 0001 	eor.w	r0, r0, #1
 80138d4:	60a2      	str	r2, [r4, #8]
 80138d6:	6123      	str	r3, [r4, #16]
 80138d8:	b003      	add	sp, #12
 80138da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80138de:	2104      	movs	r1, #4
 80138e0:	4620      	mov	r0, r4
 80138e2:	f000 ff27 	bl	8014734 <ucdr_check_final_buffer_behavior>
 80138e6:	b1c8      	cbz	r0, 801391c <ucdr_serialize_endian_uint32_t+0xd0>
 80138e8:	2d01      	cmp	r5, #1
 80138ea:	68a3      	ldr	r3, [r4, #8]
 80138ec:	d01c      	beq.n	8013928 <ucdr_serialize_endian_uint32_t+0xdc>
 80138ee:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80138f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80138f6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80138fa:	7018      	strb	r0, [r3, #0]
 80138fc:	68a3      	ldr	r3, [r4, #8]
 80138fe:	705a      	strb	r2, [r3, #1]
 8013900:	68a3      	ldr	r3, [r4, #8]
 8013902:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013906:	7099      	strb	r1, [r3, #2]
 8013908:	68a3      	ldr	r3, [r4, #8]
 801390a:	70da      	strb	r2, [r3, #3]
 801390c:	2104      	movs	r1, #4
 801390e:	68a2      	ldr	r2, [r4, #8]
 8013910:	6923      	ldr	r3, [r4, #16]
 8013912:	440a      	add	r2, r1
 8013914:	7561      	strb	r1, [r4, #21]
 8013916:	440b      	add	r3, r1
 8013918:	60a2      	str	r2, [r4, #8]
 801391a:	6123      	str	r3, [r4, #16]
 801391c:	7da0      	ldrb	r0, [r4, #22]
 801391e:	f080 0001 	eor.w	r0, r0, #1
 8013922:	b003      	add	sp, #12
 8013924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013928:	9a01      	ldr	r2, [sp, #4]
 801392a:	601a      	str	r2, [r3, #0]
 801392c:	e7ee      	b.n	801390c <ucdr_serialize_endian_uint32_t+0xc0>
 801392e:	68a2      	ldr	r2, [r4, #8]
 8013930:	6923      	ldr	r3, [r4, #16]
 8013932:	7da0      	ldrb	r0, [r4, #22]
 8013934:	1bd2      	subs	r2, r2, r7
 8013936:	1bdb      	subs	r3, r3, r7
 8013938:	f884 8015 	strb.w	r8, [r4, #21]
 801393c:	f080 0001 	eor.w	r0, r0, #1
 8013940:	60a2      	str	r2, [r4, #8]
 8013942:	6123      	str	r3, [r4, #16]
 8013944:	b003      	add	sp, #12
 8013946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801394a:	68a3      	ldr	r3, [r4, #8]
 801394c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013950:	701a      	strb	r2, [r3, #0]
 8013952:	68a3      	ldr	r3, [r4, #8]
 8013954:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013958:	701a      	strb	r2, [r3, #0]
 801395a:	68a3      	ldr	r3, [r4, #8]
 801395c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013960:	701a      	strb	r2, [r3, #0]
 8013962:	e7ad      	b.n	80138c0 <ucdr_serialize_endian_uint32_t+0x74>
 8013964:	ad01      	add	r5, sp, #4
 8013966:	463a      	mov	r2, r7
 8013968:	4630      	mov	r0, r6
 801396a:	4629      	mov	r1, r5
 801396c:	f00e f9d5 	bl	8021d1a <memcpy>
 8013970:	464a      	mov	r2, r9
 8013972:	19e9      	adds	r1, r5, r7
 8013974:	68a0      	ldr	r0, [r4, #8]
 8013976:	f00e f9d0 	bl	8021d1a <memcpy>
 801397a:	e7a1      	b.n	80138c0 <ucdr_serialize_endian_uint32_t+0x74>

0801397c <ucdr_deserialize_uint32_t>:
 801397c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013980:	4604      	mov	r4, r0
 8013982:	460d      	mov	r5, r1
 8013984:	2104      	movs	r1, #4
 8013986:	f000 ff29 	bl	80147dc <ucdr_buffer_alignment>
 801398a:	4601      	mov	r1, r0
 801398c:	4620      	mov	r0, r4
 801398e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013992:	f000 ff6b 	bl	801486c <ucdr_advance_buffer>
 8013996:	2104      	movs	r1, #4
 8013998:	4620      	mov	r0, r4
 801399a:	f000 febf 	bl	801471c <ucdr_check_buffer_available_for>
 801399e:	2800      	cmp	r0, #0
 80139a0:	d138      	bne.n	8013a14 <ucdr_deserialize_uint32_t+0x98>
 80139a2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80139a6:	42b7      	cmp	r7, r6
 80139a8:	d92f      	bls.n	8013a0a <ucdr_deserialize_uint32_t+0x8e>
 80139aa:	6923      	ldr	r3, [r4, #16]
 80139ac:	4620      	mov	r0, r4
 80139ae:	60a7      	str	r7, [r4, #8]
 80139b0:	1bbf      	subs	r7, r7, r6
 80139b2:	443b      	add	r3, r7
 80139b4:	f1c7 0904 	rsb	r9, r7, #4
 80139b8:	6123      	str	r3, [r4, #16]
 80139ba:	4649      	mov	r1, r9
 80139bc:	f000 feba 	bl	8014734 <ucdr_check_final_buffer_behavior>
 80139c0:	2800      	cmp	r0, #0
 80139c2:	d046      	beq.n	8013a52 <ucdr_deserialize_uint32_t+0xd6>
 80139c4:	7d23      	ldrb	r3, [r4, #20]
 80139c6:	2b01      	cmp	r3, #1
 80139c8:	d05c      	beq.n	8013a84 <ucdr_deserialize_uint32_t+0x108>
 80139ca:	78f3      	ldrb	r3, [r6, #3]
 80139cc:	702b      	strb	r3, [r5, #0]
 80139ce:	2f00      	cmp	r7, #0
 80139d0:	d04c      	beq.n	8013a6c <ucdr_deserialize_uint32_t+0xf0>
 80139d2:	78b3      	ldrb	r3, [r6, #2]
 80139d4:	2f01      	cmp	r7, #1
 80139d6:	706b      	strb	r3, [r5, #1]
 80139d8:	f105 0302 	add.w	r3, r5, #2
 80139dc:	d04a      	beq.n	8013a74 <ucdr_deserialize_uint32_t+0xf8>
 80139de:	7873      	ldrb	r3, [r6, #1]
 80139e0:	2f02      	cmp	r7, #2
 80139e2:	70ab      	strb	r3, [r5, #2]
 80139e4:	f105 0303 	add.w	r3, r5, #3
 80139e8:	d048      	beq.n	8013a7c <ucdr_deserialize_uint32_t+0x100>
 80139ea:	7833      	ldrb	r3, [r6, #0]
 80139ec:	70eb      	strb	r3, [r5, #3]
 80139ee:	6923      	ldr	r3, [r4, #16]
 80139f0:	2104      	movs	r1, #4
 80139f2:	68a2      	ldr	r2, [r4, #8]
 80139f4:	3304      	adds	r3, #4
 80139f6:	7da0      	ldrb	r0, [r4, #22]
 80139f8:	444a      	add	r2, r9
 80139fa:	7561      	strb	r1, [r4, #21]
 80139fc:	1bdb      	subs	r3, r3, r7
 80139fe:	f080 0001 	eor.w	r0, r0, #1
 8013a02:	60a2      	str	r2, [r4, #8]
 8013a04:	6123      	str	r3, [r4, #16]
 8013a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a0a:	2104      	movs	r1, #4
 8013a0c:	4620      	mov	r0, r4
 8013a0e:	f000 fe91 	bl	8014734 <ucdr_check_final_buffer_behavior>
 8013a12:	b1b0      	cbz	r0, 8013a42 <ucdr_deserialize_uint32_t+0xc6>
 8013a14:	7d23      	ldrb	r3, [r4, #20]
 8013a16:	2b01      	cmp	r3, #1
 8013a18:	68a3      	ldr	r3, [r4, #8]
 8013a1a:	d017      	beq.n	8013a4c <ucdr_deserialize_uint32_t+0xd0>
 8013a1c:	78db      	ldrb	r3, [r3, #3]
 8013a1e:	702b      	strb	r3, [r5, #0]
 8013a20:	68a3      	ldr	r3, [r4, #8]
 8013a22:	789b      	ldrb	r3, [r3, #2]
 8013a24:	706b      	strb	r3, [r5, #1]
 8013a26:	68a3      	ldr	r3, [r4, #8]
 8013a28:	785b      	ldrb	r3, [r3, #1]
 8013a2a:	70ab      	strb	r3, [r5, #2]
 8013a2c:	68a3      	ldr	r3, [r4, #8]
 8013a2e:	781b      	ldrb	r3, [r3, #0]
 8013a30:	70eb      	strb	r3, [r5, #3]
 8013a32:	2104      	movs	r1, #4
 8013a34:	68a2      	ldr	r2, [r4, #8]
 8013a36:	6923      	ldr	r3, [r4, #16]
 8013a38:	440a      	add	r2, r1
 8013a3a:	7561      	strb	r1, [r4, #21]
 8013a3c:	440b      	add	r3, r1
 8013a3e:	60a2      	str	r2, [r4, #8]
 8013a40:	6123      	str	r3, [r4, #16]
 8013a42:	7da0      	ldrb	r0, [r4, #22]
 8013a44:	f080 0001 	eor.w	r0, r0, #1
 8013a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	602b      	str	r3, [r5, #0]
 8013a50:	e7ef      	b.n	8013a32 <ucdr_deserialize_uint32_t+0xb6>
 8013a52:	68a2      	ldr	r2, [r4, #8]
 8013a54:	6923      	ldr	r3, [r4, #16]
 8013a56:	1bd2      	subs	r2, r2, r7
 8013a58:	7da0      	ldrb	r0, [r4, #22]
 8013a5a:	1bdb      	subs	r3, r3, r7
 8013a5c:	f884 8015 	strb.w	r8, [r4, #21]
 8013a60:	f080 0001 	eor.w	r0, r0, #1
 8013a64:	60a2      	str	r2, [r4, #8]
 8013a66:	6123      	str	r3, [r4, #16]
 8013a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a6c:	68a3      	ldr	r3, [r4, #8]
 8013a6e:	789b      	ldrb	r3, [r3, #2]
 8013a70:	706b      	strb	r3, [r5, #1]
 8013a72:	1cab      	adds	r3, r5, #2
 8013a74:	68a2      	ldr	r2, [r4, #8]
 8013a76:	7852      	ldrb	r2, [r2, #1]
 8013a78:	f803 2b01 	strb.w	r2, [r3], #1
 8013a7c:	68a2      	ldr	r2, [r4, #8]
 8013a7e:	7812      	ldrb	r2, [r2, #0]
 8013a80:	701a      	strb	r2, [r3, #0]
 8013a82:	e7b4      	b.n	80139ee <ucdr_deserialize_uint32_t+0x72>
 8013a84:	4631      	mov	r1, r6
 8013a86:	463a      	mov	r2, r7
 8013a88:	4628      	mov	r0, r5
 8013a8a:	f00e f946 	bl	8021d1a <memcpy>
 8013a8e:	464a      	mov	r2, r9
 8013a90:	19e8      	adds	r0, r5, r7
 8013a92:	68a1      	ldr	r1, [r4, #8]
 8013a94:	f00e f941 	bl	8021d1a <memcpy>
 8013a98:	e7a9      	b.n	80139ee <ucdr_deserialize_uint32_t+0x72>
 8013a9a:	bf00      	nop

08013a9c <ucdr_deserialize_endian_uint32_t>:
 8013a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013aa0:	4604      	mov	r4, r0
 8013aa2:	460e      	mov	r6, r1
 8013aa4:	2104      	movs	r1, #4
 8013aa6:	4615      	mov	r5, r2
 8013aa8:	f000 fe98 	bl	80147dc <ucdr_buffer_alignment>
 8013aac:	4601      	mov	r1, r0
 8013aae:	4620      	mov	r0, r4
 8013ab0:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013ab4:	f000 feda 	bl	801486c <ucdr_advance_buffer>
 8013ab8:	2104      	movs	r1, #4
 8013aba:	4620      	mov	r0, r4
 8013abc:	f000 fe2e 	bl	801471c <ucdr_check_buffer_available_for>
 8013ac0:	2800      	cmp	r0, #0
 8013ac2:	d13c      	bne.n	8013b3e <ucdr_deserialize_endian_uint32_t+0xa2>
 8013ac4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8013ac8:	42bb      	cmp	r3, r7
 8013aca:	d933      	bls.n	8013b34 <ucdr_deserialize_endian_uint32_t+0x98>
 8013acc:	eba3 0907 	sub.w	r9, r3, r7
 8013ad0:	60a3      	str	r3, [r4, #8]
 8013ad2:	6923      	ldr	r3, [r4, #16]
 8013ad4:	4620      	mov	r0, r4
 8013ad6:	f1c9 0a04 	rsb	sl, r9, #4
 8013ada:	444b      	add	r3, r9
 8013adc:	4651      	mov	r1, sl
 8013ade:	6123      	str	r3, [r4, #16]
 8013ae0:	f000 fe28 	bl	8014734 <ucdr_check_final_buffer_behavior>
 8013ae4:	2800      	cmp	r0, #0
 8013ae6:	d048      	beq.n	8013b7a <ucdr_deserialize_endian_uint32_t+0xde>
 8013ae8:	2e01      	cmp	r6, #1
 8013aea:	d061      	beq.n	8013bb0 <ucdr_deserialize_endian_uint32_t+0x114>
 8013aec:	78fb      	ldrb	r3, [r7, #3]
 8013aee:	702b      	strb	r3, [r5, #0]
 8013af0:	f1b9 0f00 	cmp.w	r9, #0
 8013af4:	d050      	beq.n	8013b98 <ucdr_deserialize_endian_uint32_t+0xfc>
 8013af6:	78bb      	ldrb	r3, [r7, #2]
 8013af8:	f1b9 0f01 	cmp.w	r9, #1
 8013afc:	706b      	strb	r3, [r5, #1]
 8013afe:	f105 0302 	add.w	r3, r5, #2
 8013b02:	d04d      	beq.n	8013ba0 <ucdr_deserialize_endian_uint32_t+0x104>
 8013b04:	787b      	ldrb	r3, [r7, #1]
 8013b06:	f1b9 0f02 	cmp.w	r9, #2
 8013b0a:	70ab      	strb	r3, [r5, #2]
 8013b0c:	f105 0303 	add.w	r3, r5, #3
 8013b10:	d04a      	beq.n	8013ba8 <ucdr_deserialize_endian_uint32_t+0x10c>
 8013b12:	783b      	ldrb	r3, [r7, #0]
 8013b14:	70eb      	strb	r3, [r5, #3]
 8013b16:	6923      	ldr	r3, [r4, #16]
 8013b18:	2104      	movs	r1, #4
 8013b1a:	68a2      	ldr	r2, [r4, #8]
 8013b1c:	3304      	adds	r3, #4
 8013b1e:	7da0      	ldrb	r0, [r4, #22]
 8013b20:	4452      	add	r2, sl
 8013b22:	7561      	strb	r1, [r4, #21]
 8013b24:	eba3 0309 	sub.w	r3, r3, r9
 8013b28:	f080 0001 	eor.w	r0, r0, #1
 8013b2c:	60a2      	str	r2, [r4, #8]
 8013b2e:	6123      	str	r3, [r4, #16]
 8013b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b34:	2104      	movs	r1, #4
 8013b36:	4620      	mov	r0, r4
 8013b38:	f000 fdfc 	bl	8014734 <ucdr_check_final_buffer_behavior>
 8013b3c:	b1a8      	cbz	r0, 8013b6a <ucdr_deserialize_endian_uint32_t+0xce>
 8013b3e:	2e01      	cmp	r6, #1
 8013b40:	68a3      	ldr	r3, [r4, #8]
 8013b42:	d017      	beq.n	8013b74 <ucdr_deserialize_endian_uint32_t+0xd8>
 8013b44:	78db      	ldrb	r3, [r3, #3]
 8013b46:	702b      	strb	r3, [r5, #0]
 8013b48:	68a3      	ldr	r3, [r4, #8]
 8013b4a:	789b      	ldrb	r3, [r3, #2]
 8013b4c:	706b      	strb	r3, [r5, #1]
 8013b4e:	68a3      	ldr	r3, [r4, #8]
 8013b50:	785b      	ldrb	r3, [r3, #1]
 8013b52:	70ab      	strb	r3, [r5, #2]
 8013b54:	68a3      	ldr	r3, [r4, #8]
 8013b56:	781b      	ldrb	r3, [r3, #0]
 8013b58:	70eb      	strb	r3, [r5, #3]
 8013b5a:	2104      	movs	r1, #4
 8013b5c:	68a2      	ldr	r2, [r4, #8]
 8013b5e:	6923      	ldr	r3, [r4, #16]
 8013b60:	440a      	add	r2, r1
 8013b62:	7561      	strb	r1, [r4, #21]
 8013b64:	440b      	add	r3, r1
 8013b66:	60a2      	str	r2, [r4, #8]
 8013b68:	6123      	str	r3, [r4, #16]
 8013b6a:	7da0      	ldrb	r0, [r4, #22]
 8013b6c:	f080 0001 	eor.w	r0, r0, #1
 8013b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	602b      	str	r3, [r5, #0]
 8013b78:	e7ef      	b.n	8013b5a <ucdr_deserialize_endian_uint32_t+0xbe>
 8013b7a:	68a2      	ldr	r2, [r4, #8]
 8013b7c:	6923      	ldr	r3, [r4, #16]
 8013b7e:	eba2 0209 	sub.w	r2, r2, r9
 8013b82:	7da0      	ldrb	r0, [r4, #22]
 8013b84:	eba3 0309 	sub.w	r3, r3, r9
 8013b88:	f884 8015 	strb.w	r8, [r4, #21]
 8013b8c:	f080 0001 	eor.w	r0, r0, #1
 8013b90:	60a2      	str	r2, [r4, #8]
 8013b92:	6123      	str	r3, [r4, #16]
 8013b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b98:	68a3      	ldr	r3, [r4, #8]
 8013b9a:	789b      	ldrb	r3, [r3, #2]
 8013b9c:	706b      	strb	r3, [r5, #1]
 8013b9e:	1cab      	adds	r3, r5, #2
 8013ba0:	68a2      	ldr	r2, [r4, #8]
 8013ba2:	7852      	ldrb	r2, [r2, #1]
 8013ba4:	f803 2b01 	strb.w	r2, [r3], #1
 8013ba8:	68a2      	ldr	r2, [r4, #8]
 8013baa:	7812      	ldrb	r2, [r2, #0]
 8013bac:	701a      	strb	r2, [r3, #0]
 8013bae:	e7b2      	b.n	8013b16 <ucdr_deserialize_endian_uint32_t+0x7a>
 8013bb0:	4639      	mov	r1, r7
 8013bb2:	464a      	mov	r2, r9
 8013bb4:	4628      	mov	r0, r5
 8013bb6:	f00e f8b0 	bl	8021d1a <memcpy>
 8013bba:	4652      	mov	r2, sl
 8013bbc:	eb05 0009 	add.w	r0, r5, r9
 8013bc0:	68a1      	ldr	r1, [r4, #8]
 8013bc2:	f00e f8aa 	bl	8021d1a <memcpy>
 8013bc6:	e7a6      	b.n	8013b16 <ucdr_deserialize_endian_uint32_t+0x7a>

08013bc8 <ucdr_serialize_uint64_t>:
 8013bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bcc:	4604      	mov	r4, r0
 8013bce:	b082      	sub	sp, #8
 8013bd0:	2108      	movs	r1, #8
 8013bd2:	e9cd 2300 	strd	r2, r3, [sp]
 8013bd6:	f000 fe01 	bl	80147dc <ucdr_buffer_alignment>
 8013bda:	4601      	mov	r1, r0
 8013bdc:	4620      	mov	r0, r4
 8013bde:	7d67      	ldrb	r7, [r4, #21]
 8013be0:	f000 fe44 	bl	801486c <ucdr_advance_buffer>
 8013be4:	2108      	movs	r1, #8
 8013be6:	4620      	mov	r0, r4
 8013be8:	f000 fd98 	bl	801471c <ucdr_check_buffer_available_for>
 8013bec:	2800      	cmp	r0, #0
 8013bee:	d14e      	bne.n	8013c8e <ucdr_serialize_uint64_t+0xc6>
 8013bf0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013bf4:	42ab      	cmp	r3, r5
 8013bf6:	d945      	bls.n	8013c84 <ucdr_serialize_uint64_t+0xbc>
 8013bf8:	1b5e      	subs	r6, r3, r5
 8013bfa:	60a3      	str	r3, [r4, #8]
 8013bfc:	6923      	ldr	r3, [r4, #16]
 8013bfe:	4620      	mov	r0, r4
 8013c00:	f1c6 0808 	rsb	r8, r6, #8
 8013c04:	4433      	add	r3, r6
 8013c06:	4641      	mov	r1, r8
 8013c08:	6123      	str	r3, [r4, #16]
 8013c0a:	f000 fd93 	bl	8014734 <ucdr_check_final_buffer_behavior>
 8013c0e:	2800      	cmp	r0, #0
 8013c10:	d074      	beq.n	8013cfc <ucdr_serialize_uint64_t+0x134>
 8013c12:	7d23      	ldrb	r3, [r4, #20]
 8013c14:	2b01      	cmp	r3, #1
 8013c16:	f000 809b 	beq.w	8013d50 <ucdr_serialize_uint64_t+0x188>
 8013c1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013c1e:	702b      	strb	r3, [r5, #0]
 8013c20:	2e00      	cmp	r6, #0
 8013c22:	d078      	beq.n	8013d16 <ucdr_serialize_uint64_t+0x14e>
 8013c24:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013c28:	2e01      	cmp	r6, #1
 8013c2a:	706b      	strb	r3, [r5, #1]
 8013c2c:	d077      	beq.n	8013d1e <ucdr_serialize_uint64_t+0x156>
 8013c2e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013c32:	2e02      	cmp	r6, #2
 8013c34:	70ab      	strb	r3, [r5, #2]
 8013c36:	d076      	beq.n	8013d26 <ucdr_serialize_uint64_t+0x15e>
 8013c38:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013c3c:	2e03      	cmp	r6, #3
 8013c3e:	70eb      	strb	r3, [r5, #3]
 8013c40:	d075      	beq.n	8013d2e <ucdr_serialize_uint64_t+0x166>
 8013c42:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013c46:	2e04      	cmp	r6, #4
 8013c48:	712b      	strb	r3, [r5, #4]
 8013c4a:	d074      	beq.n	8013d36 <ucdr_serialize_uint64_t+0x16e>
 8013c4c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8013c50:	2e05      	cmp	r6, #5
 8013c52:	716b      	strb	r3, [r5, #5]
 8013c54:	d073      	beq.n	8013d3e <ucdr_serialize_uint64_t+0x176>
 8013c56:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8013c5a:	2e06      	cmp	r6, #6
 8013c5c:	71ab      	strb	r3, [r5, #6]
 8013c5e:	d072      	beq.n	8013d46 <ucdr_serialize_uint64_t+0x17e>
 8013c60:	f89d 3000 	ldrb.w	r3, [sp]
 8013c64:	71eb      	strb	r3, [r5, #7]
 8013c66:	6923      	ldr	r3, [r4, #16]
 8013c68:	2108      	movs	r1, #8
 8013c6a:	68a2      	ldr	r2, [r4, #8]
 8013c6c:	3308      	adds	r3, #8
 8013c6e:	7da0      	ldrb	r0, [r4, #22]
 8013c70:	4442      	add	r2, r8
 8013c72:	7561      	strb	r1, [r4, #21]
 8013c74:	1b9e      	subs	r6, r3, r6
 8013c76:	f080 0001 	eor.w	r0, r0, #1
 8013c7a:	60a2      	str	r2, [r4, #8]
 8013c7c:	6126      	str	r6, [r4, #16]
 8013c7e:	b002      	add	sp, #8
 8013c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c84:	2108      	movs	r1, #8
 8013c86:	4620      	mov	r0, r4
 8013c88:	f000 fd54 	bl	8014734 <ucdr_check_final_buffer_behavior>
 8013c8c:	b350      	cbz	r0, 8013ce4 <ucdr_serialize_uint64_t+0x11c>
 8013c8e:	7d23      	ldrb	r3, [r4, #20]
 8013c90:	2b01      	cmp	r3, #1
 8013c92:	d02d      	beq.n	8013cf0 <ucdr_serialize_uint64_t+0x128>
 8013c94:	68a3      	ldr	r3, [r4, #8]
 8013c96:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013c9a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013c9e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013ca2:	7018      	strb	r0, [r3, #0]
 8013ca4:	68a3      	ldr	r3, [r4, #8]
 8013ca6:	705a      	strb	r2, [r3, #1]
 8013ca8:	68a3      	ldr	r3, [r4, #8]
 8013caa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013cae:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8013cb2:	7099      	strb	r1, [r3, #2]
 8013cb4:	68a3      	ldr	r3, [r4, #8]
 8013cb6:	70da      	strb	r2, [r3, #3]
 8013cb8:	68a3      	ldr	r3, [r4, #8]
 8013cba:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013cbe:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8013cc2:	7118      	strb	r0, [r3, #4]
 8013cc4:	68a3      	ldr	r3, [r4, #8]
 8013cc6:	715a      	strb	r2, [r3, #5]
 8013cc8:	68a3      	ldr	r3, [r4, #8]
 8013cca:	f89d 2000 	ldrb.w	r2, [sp]
 8013cce:	7199      	strb	r1, [r3, #6]
 8013cd0:	68a3      	ldr	r3, [r4, #8]
 8013cd2:	71da      	strb	r2, [r3, #7]
 8013cd4:	2108      	movs	r1, #8
 8013cd6:	68a2      	ldr	r2, [r4, #8]
 8013cd8:	6923      	ldr	r3, [r4, #16]
 8013cda:	440a      	add	r2, r1
 8013cdc:	7561      	strb	r1, [r4, #21]
 8013cde:	440b      	add	r3, r1
 8013ce0:	60a2      	str	r2, [r4, #8]
 8013ce2:	6123      	str	r3, [r4, #16]
 8013ce4:	7da0      	ldrb	r0, [r4, #22]
 8013ce6:	f080 0001 	eor.w	r0, r0, #1
 8013cea:	b002      	add	sp, #8
 8013cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cf0:	466b      	mov	r3, sp
 8013cf2:	68a2      	ldr	r2, [r4, #8]
 8013cf4:	cb03      	ldmia	r3!, {r0, r1}
 8013cf6:	6010      	str	r0, [r2, #0]
 8013cf8:	6051      	str	r1, [r2, #4]
 8013cfa:	e7eb      	b.n	8013cd4 <ucdr_serialize_uint64_t+0x10c>
 8013cfc:	68a2      	ldr	r2, [r4, #8]
 8013cfe:	6923      	ldr	r3, [r4, #16]
 8013d00:	7da0      	ldrb	r0, [r4, #22]
 8013d02:	1b92      	subs	r2, r2, r6
 8013d04:	1b9b      	subs	r3, r3, r6
 8013d06:	7567      	strb	r7, [r4, #21]
 8013d08:	f080 0001 	eor.w	r0, r0, #1
 8013d0c:	60a2      	str	r2, [r4, #8]
 8013d0e:	6123      	str	r3, [r4, #16]
 8013d10:	b002      	add	sp, #8
 8013d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d16:	68a3      	ldr	r3, [r4, #8]
 8013d18:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013d1c:	701a      	strb	r2, [r3, #0]
 8013d1e:	68a3      	ldr	r3, [r4, #8]
 8013d20:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013d24:	701a      	strb	r2, [r3, #0]
 8013d26:	68a3      	ldr	r3, [r4, #8]
 8013d28:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013d2c:	701a      	strb	r2, [r3, #0]
 8013d2e:	68a3      	ldr	r3, [r4, #8]
 8013d30:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013d34:	701a      	strb	r2, [r3, #0]
 8013d36:	68a3      	ldr	r3, [r4, #8]
 8013d38:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013d3c:	701a      	strb	r2, [r3, #0]
 8013d3e:	68a3      	ldr	r3, [r4, #8]
 8013d40:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013d44:	701a      	strb	r2, [r3, #0]
 8013d46:	68a3      	ldr	r3, [r4, #8]
 8013d48:	f89d 2000 	ldrb.w	r2, [sp]
 8013d4c:	701a      	strb	r2, [r3, #0]
 8013d4e:	e78a      	b.n	8013c66 <ucdr_serialize_uint64_t+0x9e>
 8013d50:	4628      	mov	r0, r5
 8013d52:	466d      	mov	r5, sp
 8013d54:	4632      	mov	r2, r6
 8013d56:	4629      	mov	r1, r5
 8013d58:	f00d ffdf 	bl	8021d1a <memcpy>
 8013d5c:	4642      	mov	r2, r8
 8013d5e:	19a9      	adds	r1, r5, r6
 8013d60:	68a0      	ldr	r0, [r4, #8]
 8013d62:	f00d ffda 	bl	8021d1a <memcpy>
 8013d66:	e77e      	b.n	8013c66 <ucdr_serialize_uint64_t+0x9e>

08013d68 <ucdr_serialize_int16_t>:
 8013d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d6c:	460b      	mov	r3, r1
 8013d6e:	b082      	sub	sp, #8
 8013d70:	4604      	mov	r4, r0
 8013d72:	2102      	movs	r1, #2
 8013d74:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013d78:	f000 fd30 	bl	80147dc <ucdr_buffer_alignment>
 8013d7c:	4601      	mov	r1, r0
 8013d7e:	4620      	mov	r0, r4
 8013d80:	7d67      	ldrb	r7, [r4, #21]
 8013d82:	f000 fd73 	bl	801486c <ucdr_advance_buffer>
 8013d86:	2102      	movs	r1, #2
 8013d88:	4620      	mov	r0, r4
 8013d8a:	f000 fcc7 	bl	801471c <ucdr_check_buffer_available_for>
 8013d8e:	bb78      	cbnz	r0, 8013df0 <ucdr_serialize_int16_t+0x88>
 8013d90:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013d94:	42ab      	cmp	r3, r5
 8013d96:	d926      	bls.n	8013de6 <ucdr_serialize_int16_t+0x7e>
 8013d98:	1b5e      	subs	r6, r3, r5
 8013d9a:	60a3      	str	r3, [r4, #8]
 8013d9c:	6923      	ldr	r3, [r4, #16]
 8013d9e:	4620      	mov	r0, r4
 8013da0:	f1c6 0802 	rsb	r8, r6, #2
 8013da4:	4433      	add	r3, r6
 8013da6:	4641      	mov	r1, r8
 8013da8:	6123      	str	r3, [r4, #16]
 8013daa:	f000 fcc3 	bl	8014734 <ucdr_check_final_buffer_behavior>
 8013dae:	2800      	cmp	r0, #0
 8013db0:	d03b      	beq.n	8013e2a <ucdr_serialize_int16_t+0xc2>
 8013db2:	7d23      	ldrb	r3, [r4, #20]
 8013db4:	2b01      	cmp	r3, #1
 8013db6:	d04a      	beq.n	8013e4e <ucdr_serialize_int16_t+0xe6>
 8013db8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013dbc:	702b      	strb	r3, [r5, #0]
 8013dbe:	2e00      	cmp	r6, #0
 8013dc0:	d040      	beq.n	8013e44 <ucdr_serialize_int16_t+0xdc>
 8013dc2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013dc6:	706b      	strb	r3, [r5, #1]
 8013dc8:	6923      	ldr	r3, [r4, #16]
 8013dca:	2102      	movs	r1, #2
 8013dcc:	68a2      	ldr	r2, [r4, #8]
 8013dce:	3302      	adds	r3, #2
 8013dd0:	7da0      	ldrb	r0, [r4, #22]
 8013dd2:	4442      	add	r2, r8
 8013dd4:	7561      	strb	r1, [r4, #21]
 8013dd6:	1b9e      	subs	r6, r3, r6
 8013dd8:	f080 0001 	eor.w	r0, r0, #1
 8013ddc:	60a2      	str	r2, [r4, #8]
 8013dde:	6126      	str	r6, [r4, #16]
 8013de0:	b002      	add	sp, #8
 8013de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013de6:	2102      	movs	r1, #2
 8013de8:	4620      	mov	r0, r4
 8013dea:	f000 fca3 	bl	8014734 <ucdr_check_final_buffer_behavior>
 8013dee:	b190      	cbz	r0, 8013e16 <ucdr_serialize_int16_t+0xae>
 8013df0:	7d23      	ldrb	r3, [r4, #20]
 8013df2:	2b01      	cmp	r3, #1
 8013df4:	68a3      	ldr	r3, [r4, #8]
 8013df6:	d014      	beq.n	8013e22 <ucdr_serialize_int16_t+0xba>
 8013df8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013dfc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013e00:	7019      	strb	r1, [r3, #0]
 8013e02:	68a3      	ldr	r3, [r4, #8]
 8013e04:	705a      	strb	r2, [r3, #1]
 8013e06:	2102      	movs	r1, #2
 8013e08:	68a2      	ldr	r2, [r4, #8]
 8013e0a:	6923      	ldr	r3, [r4, #16]
 8013e0c:	440a      	add	r2, r1
 8013e0e:	7561      	strb	r1, [r4, #21]
 8013e10:	440b      	add	r3, r1
 8013e12:	60a2      	str	r2, [r4, #8]
 8013e14:	6123      	str	r3, [r4, #16]
 8013e16:	7da0      	ldrb	r0, [r4, #22]
 8013e18:	f080 0001 	eor.w	r0, r0, #1
 8013e1c:	b002      	add	sp, #8
 8013e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e22:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013e26:	801a      	strh	r2, [r3, #0]
 8013e28:	e7ed      	b.n	8013e06 <ucdr_serialize_int16_t+0x9e>
 8013e2a:	68a2      	ldr	r2, [r4, #8]
 8013e2c:	6923      	ldr	r3, [r4, #16]
 8013e2e:	7da0      	ldrb	r0, [r4, #22]
 8013e30:	1b92      	subs	r2, r2, r6
 8013e32:	1b9b      	subs	r3, r3, r6
 8013e34:	7567      	strb	r7, [r4, #21]
 8013e36:	f080 0001 	eor.w	r0, r0, #1
 8013e3a:	60a2      	str	r2, [r4, #8]
 8013e3c:	6123      	str	r3, [r4, #16]
 8013e3e:	b002      	add	sp, #8
 8013e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e44:	68a3      	ldr	r3, [r4, #8]
 8013e46:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013e4a:	701a      	strb	r2, [r3, #0]
 8013e4c:	e7bc      	b.n	8013dc8 <ucdr_serialize_int16_t+0x60>
 8013e4e:	4628      	mov	r0, r5
 8013e50:	f10d 0506 	add.w	r5, sp, #6
 8013e54:	4632      	mov	r2, r6
 8013e56:	4629      	mov	r1, r5
 8013e58:	f00d ff5f 	bl	8021d1a <memcpy>
 8013e5c:	4642      	mov	r2, r8
 8013e5e:	19a9      	adds	r1, r5, r6
 8013e60:	68a0      	ldr	r0, [r4, #8]
 8013e62:	f00d ff5a 	bl	8021d1a <memcpy>
 8013e66:	e7af      	b.n	8013dc8 <ucdr_serialize_int16_t+0x60>

08013e68 <ucdr_deserialize_int16_t>:
 8013e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e6c:	4604      	mov	r4, r0
 8013e6e:	460d      	mov	r5, r1
 8013e70:	2102      	movs	r1, #2
 8013e72:	f000 fcb3 	bl	80147dc <ucdr_buffer_alignment>
 8013e76:	4601      	mov	r1, r0
 8013e78:	4620      	mov	r0, r4
 8013e7a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013e7e:	f000 fcf5 	bl	801486c <ucdr_advance_buffer>
 8013e82:	2102      	movs	r1, #2
 8013e84:	4620      	mov	r0, r4
 8013e86:	f000 fc49 	bl	801471c <ucdr_check_buffer_available_for>
 8013e8a:	bb60      	cbnz	r0, 8013ee6 <ucdr_deserialize_int16_t+0x7e>
 8013e8c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013e90:	42be      	cmp	r6, r7
 8013e92:	d923      	bls.n	8013edc <ucdr_deserialize_int16_t+0x74>
 8013e94:	6923      	ldr	r3, [r4, #16]
 8013e96:	4620      	mov	r0, r4
 8013e98:	60a6      	str	r6, [r4, #8]
 8013e9a:	1bf6      	subs	r6, r6, r7
 8013e9c:	4433      	add	r3, r6
 8013e9e:	f1c6 0902 	rsb	r9, r6, #2
 8013ea2:	6123      	str	r3, [r4, #16]
 8013ea4:	4649      	mov	r1, r9
 8013ea6:	f000 fc45 	bl	8014734 <ucdr_check_final_buffer_behavior>
 8013eaa:	2800      	cmp	r0, #0
 8013eac:	d034      	beq.n	8013f18 <ucdr_deserialize_int16_t+0xb0>
 8013eae:	7d23      	ldrb	r3, [r4, #20]
 8013eb0:	2b01      	cmp	r3, #1
 8013eb2:	d042      	beq.n	8013f3a <ucdr_deserialize_int16_t+0xd2>
 8013eb4:	787b      	ldrb	r3, [r7, #1]
 8013eb6:	702b      	strb	r3, [r5, #0]
 8013eb8:	2e00      	cmp	r6, #0
 8013eba:	d03a      	beq.n	8013f32 <ucdr_deserialize_int16_t+0xca>
 8013ebc:	783b      	ldrb	r3, [r7, #0]
 8013ebe:	706b      	strb	r3, [r5, #1]
 8013ec0:	6923      	ldr	r3, [r4, #16]
 8013ec2:	2102      	movs	r1, #2
 8013ec4:	68a2      	ldr	r2, [r4, #8]
 8013ec6:	3302      	adds	r3, #2
 8013ec8:	7da0      	ldrb	r0, [r4, #22]
 8013eca:	444a      	add	r2, r9
 8013ecc:	7561      	strb	r1, [r4, #21]
 8013ece:	1b9b      	subs	r3, r3, r6
 8013ed0:	f080 0001 	eor.w	r0, r0, #1
 8013ed4:	60a2      	str	r2, [r4, #8]
 8013ed6:	6123      	str	r3, [r4, #16]
 8013ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013edc:	2102      	movs	r1, #2
 8013ede:	4620      	mov	r0, r4
 8013ee0:	f000 fc28 	bl	8014734 <ucdr_check_final_buffer_behavior>
 8013ee4:	b180      	cbz	r0, 8013f08 <ucdr_deserialize_int16_t+0xa0>
 8013ee6:	7d23      	ldrb	r3, [r4, #20]
 8013ee8:	2b01      	cmp	r3, #1
 8013eea:	68a3      	ldr	r3, [r4, #8]
 8013eec:	d011      	beq.n	8013f12 <ucdr_deserialize_int16_t+0xaa>
 8013eee:	785b      	ldrb	r3, [r3, #1]
 8013ef0:	702b      	strb	r3, [r5, #0]
 8013ef2:	68a3      	ldr	r3, [r4, #8]
 8013ef4:	781b      	ldrb	r3, [r3, #0]
 8013ef6:	706b      	strb	r3, [r5, #1]
 8013ef8:	2102      	movs	r1, #2
 8013efa:	68a2      	ldr	r2, [r4, #8]
 8013efc:	6923      	ldr	r3, [r4, #16]
 8013efe:	440a      	add	r2, r1
 8013f00:	7561      	strb	r1, [r4, #21]
 8013f02:	440b      	add	r3, r1
 8013f04:	60a2      	str	r2, [r4, #8]
 8013f06:	6123      	str	r3, [r4, #16]
 8013f08:	7da0      	ldrb	r0, [r4, #22]
 8013f0a:	f080 0001 	eor.w	r0, r0, #1
 8013f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f12:	881b      	ldrh	r3, [r3, #0]
 8013f14:	802b      	strh	r3, [r5, #0]
 8013f16:	e7ef      	b.n	8013ef8 <ucdr_deserialize_int16_t+0x90>
 8013f18:	68a2      	ldr	r2, [r4, #8]
 8013f1a:	6923      	ldr	r3, [r4, #16]
 8013f1c:	1b92      	subs	r2, r2, r6
 8013f1e:	7da0      	ldrb	r0, [r4, #22]
 8013f20:	1b9b      	subs	r3, r3, r6
 8013f22:	f884 8015 	strb.w	r8, [r4, #21]
 8013f26:	f080 0001 	eor.w	r0, r0, #1
 8013f2a:	60a2      	str	r2, [r4, #8]
 8013f2c:	6123      	str	r3, [r4, #16]
 8013f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f32:	68a3      	ldr	r3, [r4, #8]
 8013f34:	781b      	ldrb	r3, [r3, #0]
 8013f36:	706b      	strb	r3, [r5, #1]
 8013f38:	e7c2      	b.n	8013ec0 <ucdr_deserialize_int16_t+0x58>
 8013f3a:	4639      	mov	r1, r7
 8013f3c:	4632      	mov	r2, r6
 8013f3e:	4628      	mov	r0, r5
 8013f40:	f00d feeb 	bl	8021d1a <memcpy>
 8013f44:	464a      	mov	r2, r9
 8013f46:	19a8      	adds	r0, r5, r6
 8013f48:	68a1      	ldr	r1, [r4, #8]
 8013f4a:	f00d fee6 	bl	8021d1a <memcpy>
 8013f4e:	e7b7      	b.n	8013ec0 <ucdr_deserialize_int16_t+0x58>

08013f50 <ucdr_serialize_int32_t>:
 8013f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f54:	b082      	sub	sp, #8
 8013f56:	4604      	mov	r4, r0
 8013f58:	9101      	str	r1, [sp, #4]
 8013f5a:	2104      	movs	r1, #4
 8013f5c:	f000 fc3e 	bl	80147dc <ucdr_buffer_alignment>
 8013f60:	4601      	mov	r1, r0
 8013f62:	4620      	mov	r0, r4
 8013f64:	7d67      	ldrb	r7, [r4, #21]
 8013f66:	f000 fc81 	bl	801486c <ucdr_advance_buffer>
 8013f6a:	2104      	movs	r1, #4
 8013f6c:	4620      	mov	r0, r4
 8013f6e:	f000 fbd5 	bl	801471c <ucdr_check_buffer_available_for>
 8013f72:	2800      	cmp	r0, #0
 8013f74:	d139      	bne.n	8013fea <ucdr_serialize_int32_t+0x9a>
 8013f76:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013f7a:	42ab      	cmp	r3, r5
 8013f7c:	d930      	bls.n	8013fe0 <ucdr_serialize_int32_t+0x90>
 8013f7e:	1b5e      	subs	r6, r3, r5
 8013f80:	60a3      	str	r3, [r4, #8]
 8013f82:	6923      	ldr	r3, [r4, #16]
 8013f84:	4620      	mov	r0, r4
 8013f86:	f1c6 0804 	rsb	r8, r6, #4
 8013f8a:	4433      	add	r3, r6
 8013f8c:	4641      	mov	r1, r8
 8013f8e:	6123      	str	r3, [r4, #16]
 8013f90:	f000 fbd0 	bl	8014734 <ucdr_check_final_buffer_behavior>
 8013f94:	2800      	cmp	r0, #0
 8013f96:	d04c      	beq.n	8014032 <ucdr_serialize_int32_t+0xe2>
 8013f98:	7d23      	ldrb	r3, [r4, #20]
 8013f9a:	2b01      	cmp	r3, #1
 8013f9c:	d063      	beq.n	8014066 <ucdr_serialize_int32_t+0x116>
 8013f9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013fa2:	702b      	strb	r3, [r5, #0]
 8013fa4:	2e00      	cmp	r6, #0
 8013fa6:	d051      	beq.n	801404c <ucdr_serialize_int32_t+0xfc>
 8013fa8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013fac:	2e01      	cmp	r6, #1
 8013fae:	706b      	strb	r3, [r5, #1]
 8013fb0:	d050      	beq.n	8014054 <ucdr_serialize_int32_t+0x104>
 8013fb2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013fb6:	2e02      	cmp	r6, #2
 8013fb8:	70ab      	strb	r3, [r5, #2]
 8013fba:	d04f      	beq.n	801405c <ucdr_serialize_int32_t+0x10c>
 8013fbc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013fc0:	70eb      	strb	r3, [r5, #3]
 8013fc2:	6923      	ldr	r3, [r4, #16]
 8013fc4:	2104      	movs	r1, #4
 8013fc6:	68a2      	ldr	r2, [r4, #8]
 8013fc8:	3304      	adds	r3, #4
 8013fca:	7da0      	ldrb	r0, [r4, #22]
 8013fcc:	4442      	add	r2, r8
 8013fce:	7561      	strb	r1, [r4, #21]
 8013fd0:	1b9e      	subs	r6, r3, r6
 8013fd2:	f080 0001 	eor.w	r0, r0, #1
 8013fd6:	60a2      	str	r2, [r4, #8]
 8013fd8:	6126      	str	r6, [r4, #16]
 8013fda:	b002      	add	sp, #8
 8013fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fe0:	2104      	movs	r1, #4
 8013fe2:	4620      	mov	r0, r4
 8013fe4:	f000 fba6 	bl	8014734 <ucdr_check_final_buffer_behavior>
 8013fe8:	b1d0      	cbz	r0, 8014020 <ucdr_serialize_int32_t+0xd0>
 8013fea:	7d23      	ldrb	r3, [r4, #20]
 8013fec:	2b01      	cmp	r3, #1
 8013fee:	68a3      	ldr	r3, [r4, #8]
 8013ff0:	d01c      	beq.n	801402c <ucdr_serialize_int32_t+0xdc>
 8013ff2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013ff6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013ffa:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013ffe:	7018      	strb	r0, [r3, #0]
 8014000:	68a3      	ldr	r3, [r4, #8]
 8014002:	705a      	strb	r2, [r3, #1]
 8014004:	68a3      	ldr	r3, [r4, #8]
 8014006:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801400a:	7099      	strb	r1, [r3, #2]
 801400c:	68a3      	ldr	r3, [r4, #8]
 801400e:	70da      	strb	r2, [r3, #3]
 8014010:	2104      	movs	r1, #4
 8014012:	68a2      	ldr	r2, [r4, #8]
 8014014:	6923      	ldr	r3, [r4, #16]
 8014016:	440a      	add	r2, r1
 8014018:	7561      	strb	r1, [r4, #21]
 801401a:	440b      	add	r3, r1
 801401c:	60a2      	str	r2, [r4, #8]
 801401e:	6123      	str	r3, [r4, #16]
 8014020:	7da0      	ldrb	r0, [r4, #22]
 8014022:	f080 0001 	eor.w	r0, r0, #1
 8014026:	b002      	add	sp, #8
 8014028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801402c:	9a01      	ldr	r2, [sp, #4]
 801402e:	601a      	str	r2, [r3, #0]
 8014030:	e7ee      	b.n	8014010 <ucdr_serialize_int32_t+0xc0>
 8014032:	68a2      	ldr	r2, [r4, #8]
 8014034:	6923      	ldr	r3, [r4, #16]
 8014036:	7da0      	ldrb	r0, [r4, #22]
 8014038:	1b92      	subs	r2, r2, r6
 801403a:	1b9b      	subs	r3, r3, r6
 801403c:	7567      	strb	r7, [r4, #21]
 801403e:	f080 0001 	eor.w	r0, r0, #1
 8014042:	60a2      	str	r2, [r4, #8]
 8014044:	6123      	str	r3, [r4, #16]
 8014046:	b002      	add	sp, #8
 8014048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801404c:	68a3      	ldr	r3, [r4, #8]
 801404e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014052:	701a      	strb	r2, [r3, #0]
 8014054:	68a3      	ldr	r3, [r4, #8]
 8014056:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801405a:	701a      	strb	r2, [r3, #0]
 801405c:	68a3      	ldr	r3, [r4, #8]
 801405e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014062:	701a      	strb	r2, [r3, #0]
 8014064:	e7ad      	b.n	8013fc2 <ucdr_serialize_int32_t+0x72>
 8014066:	4628      	mov	r0, r5
 8014068:	ad01      	add	r5, sp, #4
 801406a:	4632      	mov	r2, r6
 801406c:	4629      	mov	r1, r5
 801406e:	f00d fe54 	bl	8021d1a <memcpy>
 8014072:	4642      	mov	r2, r8
 8014074:	19a9      	adds	r1, r5, r6
 8014076:	68a0      	ldr	r0, [r4, #8]
 8014078:	f00d fe4f 	bl	8021d1a <memcpy>
 801407c:	e7a1      	b.n	8013fc2 <ucdr_serialize_int32_t+0x72>
 801407e:	bf00      	nop

08014080 <ucdr_deserialize_int32_t>:
 8014080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014084:	4604      	mov	r4, r0
 8014086:	460d      	mov	r5, r1
 8014088:	2104      	movs	r1, #4
 801408a:	f000 fba7 	bl	80147dc <ucdr_buffer_alignment>
 801408e:	4601      	mov	r1, r0
 8014090:	4620      	mov	r0, r4
 8014092:	f894 8015 	ldrb.w	r8, [r4, #21]
 8014096:	f000 fbe9 	bl	801486c <ucdr_advance_buffer>
 801409a:	2104      	movs	r1, #4
 801409c:	4620      	mov	r0, r4
 801409e:	f000 fb3d 	bl	801471c <ucdr_check_buffer_available_for>
 80140a2:	2800      	cmp	r0, #0
 80140a4:	d138      	bne.n	8014118 <ucdr_deserialize_int32_t+0x98>
 80140a6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80140aa:	42b7      	cmp	r7, r6
 80140ac:	d92f      	bls.n	801410e <ucdr_deserialize_int32_t+0x8e>
 80140ae:	6923      	ldr	r3, [r4, #16]
 80140b0:	4620      	mov	r0, r4
 80140b2:	60a7      	str	r7, [r4, #8]
 80140b4:	1bbf      	subs	r7, r7, r6
 80140b6:	443b      	add	r3, r7
 80140b8:	f1c7 0904 	rsb	r9, r7, #4
 80140bc:	6123      	str	r3, [r4, #16]
 80140be:	4649      	mov	r1, r9
 80140c0:	f000 fb38 	bl	8014734 <ucdr_check_final_buffer_behavior>
 80140c4:	2800      	cmp	r0, #0
 80140c6:	d046      	beq.n	8014156 <ucdr_deserialize_int32_t+0xd6>
 80140c8:	7d23      	ldrb	r3, [r4, #20]
 80140ca:	2b01      	cmp	r3, #1
 80140cc:	d05c      	beq.n	8014188 <ucdr_deserialize_int32_t+0x108>
 80140ce:	78f3      	ldrb	r3, [r6, #3]
 80140d0:	702b      	strb	r3, [r5, #0]
 80140d2:	2f00      	cmp	r7, #0
 80140d4:	d04c      	beq.n	8014170 <ucdr_deserialize_int32_t+0xf0>
 80140d6:	78b3      	ldrb	r3, [r6, #2]
 80140d8:	2f01      	cmp	r7, #1
 80140da:	706b      	strb	r3, [r5, #1]
 80140dc:	f105 0302 	add.w	r3, r5, #2
 80140e0:	d04a      	beq.n	8014178 <ucdr_deserialize_int32_t+0xf8>
 80140e2:	7873      	ldrb	r3, [r6, #1]
 80140e4:	2f02      	cmp	r7, #2
 80140e6:	70ab      	strb	r3, [r5, #2]
 80140e8:	f105 0303 	add.w	r3, r5, #3
 80140ec:	d048      	beq.n	8014180 <ucdr_deserialize_int32_t+0x100>
 80140ee:	7833      	ldrb	r3, [r6, #0]
 80140f0:	70eb      	strb	r3, [r5, #3]
 80140f2:	6923      	ldr	r3, [r4, #16]
 80140f4:	2104      	movs	r1, #4
 80140f6:	68a2      	ldr	r2, [r4, #8]
 80140f8:	3304      	adds	r3, #4
 80140fa:	7da0      	ldrb	r0, [r4, #22]
 80140fc:	444a      	add	r2, r9
 80140fe:	7561      	strb	r1, [r4, #21]
 8014100:	1bdb      	subs	r3, r3, r7
 8014102:	f080 0001 	eor.w	r0, r0, #1
 8014106:	60a2      	str	r2, [r4, #8]
 8014108:	6123      	str	r3, [r4, #16]
 801410a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801410e:	2104      	movs	r1, #4
 8014110:	4620      	mov	r0, r4
 8014112:	f000 fb0f 	bl	8014734 <ucdr_check_final_buffer_behavior>
 8014116:	b1b0      	cbz	r0, 8014146 <ucdr_deserialize_int32_t+0xc6>
 8014118:	7d23      	ldrb	r3, [r4, #20]
 801411a:	2b01      	cmp	r3, #1
 801411c:	68a3      	ldr	r3, [r4, #8]
 801411e:	d017      	beq.n	8014150 <ucdr_deserialize_int32_t+0xd0>
 8014120:	78db      	ldrb	r3, [r3, #3]
 8014122:	702b      	strb	r3, [r5, #0]
 8014124:	68a3      	ldr	r3, [r4, #8]
 8014126:	789b      	ldrb	r3, [r3, #2]
 8014128:	706b      	strb	r3, [r5, #1]
 801412a:	68a3      	ldr	r3, [r4, #8]
 801412c:	785b      	ldrb	r3, [r3, #1]
 801412e:	70ab      	strb	r3, [r5, #2]
 8014130:	68a3      	ldr	r3, [r4, #8]
 8014132:	781b      	ldrb	r3, [r3, #0]
 8014134:	70eb      	strb	r3, [r5, #3]
 8014136:	2104      	movs	r1, #4
 8014138:	68a2      	ldr	r2, [r4, #8]
 801413a:	6923      	ldr	r3, [r4, #16]
 801413c:	440a      	add	r2, r1
 801413e:	7561      	strb	r1, [r4, #21]
 8014140:	440b      	add	r3, r1
 8014142:	60a2      	str	r2, [r4, #8]
 8014144:	6123      	str	r3, [r4, #16]
 8014146:	7da0      	ldrb	r0, [r4, #22]
 8014148:	f080 0001 	eor.w	r0, r0, #1
 801414c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	602b      	str	r3, [r5, #0]
 8014154:	e7ef      	b.n	8014136 <ucdr_deserialize_int32_t+0xb6>
 8014156:	68a2      	ldr	r2, [r4, #8]
 8014158:	6923      	ldr	r3, [r4, #16]
 801415a:	1bd2      	subs	r2, r2, r7
 801415c:	7da0      	ldrb	r0, [r4, #22]
 801415e:	1bdb      	subs	r3, r3, r7
 8014160:	f884 8015 	strb.w	r8, [r4, #21]
 8014164:	f080 0001 	eor.w	r0, r0, #1
 8014168:	60a2      	str	r2, [r4, #8]
 801416a:	6123      	str	r3, [r4, #16]
 801416c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014170:	68a3      	ldr	r3, [r4, #8]
 8014172:	789b      	ldrb	r3, [r3, #2]
 8014174:	706b      	strb	r3, [r5, #1]
 8014176:	1cab      	adds	r3, r5, #2
 8014178:	68a2      	ldr	r2, [r4, #8]
 801417a:	7852      	ldrb	r2, [r2, #1]
 801417c:	f803 2b01 	strb.w	r2, [r3], #1
 8014180:	68a2      	ldr	r2, [r4, #8]
 8014182:	7812      	ldrb	r2, [r2, #0]
 8014184:	701a      	strb	r2, [r3, #0]
 8014186:	e7b4      	b.n	80140f2 <ucdr_deserialize_int32_t+0x72>
 8014188:	4631      	mov	r1, r6
 801418a:	463a      	mov	r2, r7
 801418c:	4628      	mov	r0, r5
 801418e:	f00d fdc4 	bl	8021d1a <memcpy>
 8014192:	464a      	mov	r2, r9
 8014194:	19e8      	adds	r0, r5, r7
 8014196:	68a1      	ldr	r1, [r4, #8]
 8014198:	f00d fdbf 	bl	8021d1a <memcpy>
 801419c:	e7a9      	b.n	80140f2 <ucdr_deserialize_int32_t+0x72>
 801419e:	bf00      	nop

080141a0 <ucdr_serialize_float>:
 80141a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141a4:	4604      	mov	r4, r0
 80141a6:	b082      	sub	sp, #8
 80141a8:	2104      	movs	r1, #4
 80141aa:	ed8d 0a01 	vstr	s0, [sp, #4]
 80141ae:	f000 fb15 	bl	80147dc <ucdr_buffer_alignment>
 80141b2:	4601      	mov	r1, r0
 80141b4:	4620      	mov	r0, r4
 80141b6:	7d67      	ldrb	r7, [r4, #21]
 80141b8:	f000 fb58 	bl	801486c <ucdr_advance_buffer>
 80141bc:	2104      	movs	r1, #4
 80141be:	4620      	mov	r0, r4
 80141c0:	f000 faac 	bl	801471c <ucdr_check_buffer_available_for>
 80141c4:	2800      	cmp	r0, #0
 80141c6:	d139      	bne.n	801423c <ucdr_serialize_float+0x9c>
 80141c8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80141cc:	42ab      	cmp	r3, r5
 80141ce:	d930      	bls.n	8014232 <ucdr_serialize_float+0x92>
 80141d0:	1b5e      	subs	r6, r3, r5
 80141d2:	60a3      	str	r3, [r4, #8]
 80141d4:	6923      	ldr	r3, [r4, #16]
 80141d6:	4620      	mov	r0, r4
 80141d8:	f1c6 0804 	rsb	r8, r6, #4
 80141dc:	4433      	add	r3, r6
 80141de:	4641      	mov	r1, r8
 80141e0:	6123      	str	r3, [r4, #16]
 80141e2:	f000 faa7 	bl	8014734 <ucdr_check_final_buffer_behavior>
 80141e6:	2800      	cmp	r0, #0
 80141e8:	d04c      	beq.n	8014284 <ucdr_serialize_float+0xe4>
 80141ea:	7d23      	ldrb	r3, [r4, #20]
 80141ec:	2b01      	cmp	r3, #1
 80141ee:	d063      	beq.n	80142b8 <ucdr_serialize_float+0x118>
 80141f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80141f4:	702b      	strb	r3, [r5, #0]
 80141f6:	2e00      	cmp	r6, #0
 80141f8:	d051      	beq.n	801429e <ucdr_serialize_float+0xfe>
 80141fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80141fe:	2e01      	cmp	r6, #1
 8014200:	706b      	strb	r3, [r5, #1]
 8014202:	d050      	beq.n	80142a6 <ucdr_serialize_float+0x106>
 8014204:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014208:	2e02      	cmp	r6, #2
 801420a:	70ab      	strb	r3, [r5, #2]
 801420c:	d04f      	beq.n	80142ae <ucdr_serialize_float+0x10e>
 801420e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014212:	70eb      	strb	r3, [r5, #3]
 8014214:	6923      	ldr	r3, [r4, #16]
 8014216:	2104      	movs	r1, #4
 8014218:	68a2      	ldr	r2, [r4, #8]
 801421a:	3304      	adds	r3, #4
 801421c:	7da0      	ldrb	r0, [r4, #22]
 801421e:	4442      	add	r2, r8
 8014220:	7561      	strb	r1, [r4, #21]
 8014222:	1b9e      	subs	r6, r3, r6
 8014224:	f080 0001 	eor.w	r0, r0, #1
 8014228:	60a2      	str	r2, [r4, #8]
 801422a:	6126      	str	r6, [r4, #16]
 801422c:	b002      	add	sp, #8
 801422e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014232:	2104      	movs	r1, #4
 8014234:	4620      	mov	r0, r4
 8014236:	f000 fa7d 	bl	8014734 <ucdr_check_final_buffer_behavior>
 801423a:	b1d0      	cbz	r0, 8014272 <ucdr_serialize_float+0xd2>
 801423c:	7d23      	ldrb	r3, [r4, #20]
 801423e:	2b01      	cmp	r3, #1
 8014240:	68a3      	ldr	r3, [r4, #8]
 8014242:	d01c      	beq.n	801427e <ucdr_serialize_float+0xde>
 8014244:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8014248:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801424c:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8014250:	7018      	strb	r0, [r3, #0]
 8014252:	68a3      	ldr	r3, [r4, #8]
 8014254:	705a      	strb	r2, [r3, #1]
 8014256:	68a3      	ldr	r3, [r4, #8]
 8014258:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801425c:	7099      	strb	r1, [r3, #2]
 801425e:	68a3      	ldr	r3, [r4, #8]
 8014260:	70da      	strb	r2, [r3, #3]
 8014262:	2104      	movs	r1, #4
 8014264:	68a2      	ldr	r2, [r4, #8]
 8014266:	6923      	ldr	r3, [r4, #16]
 8014268:	440a      	add	r2, r1
 801426a:	7561      	strb	r1, [r4, #21]
 801426c:	440b      	add	r3, r1
 801426e:	60a2      	str	r2, [r4, #8]
 8014270:	6123      	str	r3, [r4, #16]
 8014272:	7da0      	ldrb	r0, [r4, #22]
 8014274:	f080 0001 	eor.w	r0, r0, #1
 8014278:	b002      	add	sp, #8
 801427a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801427e:	9a01      	ldr	r2, [sp, #4]
 8014280:	601a      	str	r2, [r3, #0]
 8014282:	e7ee      	b.n	8014262 <ucdr_serialize_float+0xc2>
 8014284:	68a2      	ldr	r2, [r4, #8]
 8014286:	6923      	ldr	r3, [r4, #16]
 8014288:	7da0      	ldrb	r0, [r4, #22]
 801428a:	1b92      	subs	r2, r2, r6
 801428c:	1b9b      	subs	r3, r3, r6
 801428e:	7567      	strb	r7, [r4, #21]
 8014290:	f080 0001 	eor.w	r0, r0, #1
 8014294:	60a2      	str	r2, [r4, #8]
 8014296:	6123      	str	r3, [r4, #16]
 8014298:	b002      	add	sp, #8
 801429a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801429e:	68a3      	ldr	r3, [r4, #8]
 80142a0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80142a4:	701a      	strb	r2, [r3, #0]
 80142a6:	68a3      	ldr	r3, [r4, #8]
 80142a8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80142ac:	701a      	strb	r2, [r3, #0]
 80142ae:	68a3      	ldr	r3, [r4, #8]
 80142b0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80142b4:	701a      	strb	r2, [r3, #0]
 80142b6:	e7ad      	b.n	8014214 <ucdr_serialize_float+0x74>
 80142b8:	4628      	mov	r0, r5
 80142ba:	ad01      	add	r5, sp, #4
 80142bc:	4632      	mov	r2, r6
 80142be:	4629      	mov	r1, r5
 80142c0:	f00d fd2b 	bl	8021d1a <memcpy>
 80142c4:	4642      	mov	r2, r8
 80142c6:	19a9      	adds	r1, r5, r6
 80142c8:	68a0      	ldr	r0, [r4, #8]
 80142ca:	f00d fd26 	bl	8021d1a <memcpy>
 80142ce:	e7a1      	b.n	8014214 <ucdr_serialize_float+0x74>

080142d0 <ucdr_deserialize_float>:
 80142d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142d4:	4604      	mov	r4, r0
 80142d6:	460d      	mov	r5, r1
 80142d8:	2104      	movs	r1, #4
 80142da:	f000 fa7f 	bl	80147dc <ucdr_buffer_alignment>
 80142de:	4601      	mov	r1, r0
 80142e0:	4620      	mov	r0, r4
 80142e2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80142e6:	f000 fac1 	bl	801486c <ucdr_advance_buffer>
 80142ea:	2104      	movs	r1, #4
 80142ec:	4620      	mov	r0, r4
 80142ee:	f000 fa15 	bl	801471c <ucdr_check_buffer_available_for>
 80142f2:	2800      	cmp	r0, #0
 80142f4:	d138      	bne.n	8014368 <ucdr_deserialize_float+0x98>
 80142f6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80142fa:	42b7      	cmp	r7, r6
 80142fc:	d92f      	bls.n	801435e <ucdr_deserialize_float+0x8e>
 80142fe:	6923      	ldr	r3, [r4, #16]
 8014300:	4620      	mov	r0, r4
 8014302:	60a7      	str	r7, [r4, #8]
 8014304:	1bbf      	subs	r7, r7, r6
 8014306:	443b      	add	r3, r7
 8014308:	f1c7 0904 	rsb	r9, r7, #4
 801430c:	6123      	str	r3, [r4, #16]
 801430e:	4649      	mov	r1, r9
 8014310:	f000 fa10 	bl	8014734 <ucdr_check_final_buffer_behavior>
 8014314:	2800      	cmp	r0, #0
 8014316:	d046      	beq.n	80143a6 <ucdr_deserialize_float+0xd6>
 8014318:	7d23      	ldrb	r3, [r4, #20]
 801431a:	2b01      	cmp	r3, #1
 801431c:	d05c      	beq.n	80143d8 <ucdr_deserialize_float+0x108>
 801431e:	78f3      	ldrb	r3, [r6, #3]
 8014320:	702b      	strb	r3, [r5, #0]
 8014322:	2f00      	cmp	r7, #0
 8014324:	d04c      	beq.n	80143c0 <ucdr_deserialize_float+0xf0>
 8014326:	78b3      	ldrb	r3, [r6, #2]
 8014328:	2f01      	cmp	r7, #1
 801432a:	706b      	strb	r3, [r5, #1]
 801432c:	f105 0302 	add.w	r3, r5, #2
 8014330:	d04a      	beq.n	80143c8 <ucdr_deserialize_float+0xf8>
 8014332:	7873      	ldrb	r3, [r6, #1]
 8014334:	2f02      	cmp	r7, #2
 8014336:	70ab      	strb	r3, [r5, #2]
 8014338:	f105 0303 	add.w	r3, r5, #3
 801433c:	d048      	beq.n	80143d0 <ucdr_deserialize_float+0x100>
 801433e:	7833      	ldrb	r3, [r6, #0]
 8014340:	70eb      	strb	r3, [r5, #3]
 8014342:	6923      	ldr	r3, [r4, #16]
 8014344:	2104      	movs	r1, #4
 8014346:	68a2      	ldr	r2, [r4, #8]
 8014348:	3304      	adds	r3, #4
 801434a:	7da0      	ldrb	r0, [r4, #22]
 801434c:	444a      	add	r2, r9
 801434e:	7561      	strb	r1, [r4, #21]
 8014350:	1bdb      	subs	r3, r3, r7
 8014352:	f080 0001 	eor.w	r0, r0, #1
 8014356:	60a2      	str	r2, [r4, #8]
 8014358:	6123      	str	r3, [r4, #16]
 801435a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801435e:	2104      	movs	r1, #4
 8014360:	4620      	mov	r0, r4
 8014362:	f000 f9e7 	bl	8014734 <ucdr_check_final_buffer_behavior>
 8014366:	b1b0      	cbz	r0, 8014396 <ucdr_deserialize_float+0xc6>
 8014368:	7d23      	ldrb	r3, [r4, #20]
 801436a:	2b01      	cmp	r3, #1
 801436c:	68a3      	ldr	r3, [r4, #8]
 801436e:	d017      	beq.n	80143a0 <ucdr_deserialize_float+0xd0>
 8014370:	78db      	ldrb	r3, [r3, #3]
 8014372:	702b      	strb	r3, [r5, #0]
 8014374:	68a3      	ldr	r3, [r4, #8]
 8014376:	789b      	ldrb	r3, [r3, #2]
 8014378:	706b      	strb	r3, [r5, #1]
 801437a:	68a3      	ldr	r3, [r4, #8]
 801437c:	785b      	ldrb	r3, [r3, #1]
 801437e:	70ab      	strb	r3, [r5, #2]
 8014380:	68a3      	ldr	r3, [r4, #8]
 8014382:	781b      	ldrb	r3, [r3, #0]
 8014384:	70eb      	strb	r3, [r5, #3]
 8014386:	2104      	movs	r1, #4
 8014388:	68a2      	ldr	r2, [r4, #8]
 801438a:	6923      	ldr	r3, [r4, #16]
 801438c:	440a      	add	r2, r1
 801438e:	7561      	strb	r1, [r4, #21]
 8014390:	440b      	add	r3, r1
 8014392:	60a2      	str	r2, [r4, #8]
 8014394:	6123      	str	r3, [r4, #16]
 8014396:	7da0      	ldrb	r0, [r4, #22]
 8014398:	f080 0001 	eor.w	r0, r0, #1
 801439c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	602b      	str	r3, [r5, #0]
 80143a4:	e7ef      	b.n	8014386 <ucdr_deserialize_float+0xb6>
 80143a6:	68a2      	ldr	r2, [r4, #8]
 80143a8:	6923      	ldr	r3, [r4, #16]
 80143aa:	1bd2      	subs	r2, r2, r7
 80143ac:	7da0      	ldrb	r0, [r4, #22]
 80143ae:	1bdb      	subs	r3, r3, r7
 80143b0:	f884 8015 	strb.w	r8, [r4, #21]
 80143b4:	f080 0001 	eor.w	r0, r0, #1
 80143b8:	60a2      	str	r2, [r4, #8]
 80143ba:	6123      	str	r3, [r4, #16]
 80143bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143c0:	68a3      	ldr	r3, [r4, #8]
 80143c2:	789b      	ldrb	r3, [r3, #2]
 80143c4:	706b      	strb	r3, [r5, #1]
 80143c6:	1cab      	adds	r3, r5, #2
 80143c8:	68a2      	ldr	r2, [r4, #8]
 80143ca:	7852      	ldrb	r2, [r2, #1]
 80143cc:	f803 2b01 	strb.w	r2, [r3], #1
 80143d0:	68a2      	ldr	r2, [r4, #8]
 80143d2:	7812      	ldrb	r2, [r2, #0]
 80143d4:	701a      	strb	r2, [r3, #0]
 80143d6:	e7b4      	b.n	8014342 <ucdr_deserialize_float+0x72>
 80143d8:	4631      	mov	r1, r6
 80143da:	463a      	mov	r2, r7
 80143dc:	4628      	mov	r0, r5
 80143de:	f00d fc9c 	bl	8021d1a <memcpy>
 80143e2:	464a      	mov	r2, r9
 80143e4:	19e8      	adds	r0, r5, r7
 80143e6:	68a1      	ldr	r1, [r4, #8]
 80143e8:	f00d fc97 	bl	8021d1a <memcpy>
 80143ec:	e7a9      	b.n	8014342 <ucdr_deserialize_float+0x72>
 80143ee:	bf00      	nop

080143f0 <ucdr_serialize_double>:
 80143f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143f4:	4604      	mov	r4, r0
 80143f6:	b082      	sub	sp, #8
 80143f8:	2108      	movs	r1, #8
 80143fa:	ed8d 0b00 	vstr	d0, [sp]
 80143fe:	f000 f9ed 	bl	80147dc <ucdr_buffer_alignment>
 8014402:	4601      	mov	r1, r0
 8014404:	4620      	mov	r0, r4
 8014406:	7d67      	ldrb	r7, [r4, #21]
 8014408:	f000 fa30 	bl	801486c <ucdr_advance_buffer>
 801440c:	2108      	movs	r1, #8
 801440e:	4620      	mov	r0, r4
 8014410:	f000 f984 	bl	801471c <ucdr_check_buffer_available_for>
 8014414:	2800      	cmp	r0, #0
 8014416:	d14e      	bne.n	80144b6 <ucdr_serialize_double+0xc6>
 8014418:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801441c:	42ab      	cmp	r3, r5
 801441e:	d945      	bls.n	80144ac <ucdr_serialize_double+0xbc>
 8014420:	1b5e      	subs	r6, r3, r5
 8014422:	60a3      	str	r3, [r4, #8]
 8014424:	6923      	ldr	r3, [r4, #16]
 8014426:	4620      	mov	r0, r4
 8014428:	f1c6 0808 	rsb	r8, r6, #8
 801442c:	4433      	add	r3, r6
 801442e:	4641      	mov	r1, r8
 8014430:	6123      	str	r3, [r4, #16]
 8014432:	f000 f97f 	bl	8014734 <ucdr_check_final_buffer_behavior>
 8014436:	2800      	cmp	r0, #0
 8014438:	d074      	beq.n	8014524 <ucdr_serialize_double+0x134>
 801443a:	7d23      	ldrb	r3, [r4, #20]
 801443c:	2b01      	cmp	r3, #1
 801443e:	f000 809b 	beq.w	8014578 <ucdr_serialize_double+0x188>
 8014442:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014446:	702b      	strb	r3, [r5, #0]
 8014448:	2e00      	cmp	r6, #0
 801444a:	d078      	beq.n	801453e <ucdr_serialize_double+0x14e>
 801444c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014450:	2e01      	cmp	r6, #1
 8014452:	706b      	strb	r3, [r5, #1]
 8014454:	d077      	beq.n	8014546 <ucdr_serialize_double+0x156>
 8014456:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801445a:	2e02      	cmp	r6, #2
 801445c:	70ab      	strb	r3, [r5, #2]
 801445e:	d076      	beq.n	801454e <ucdr_serialize_double+0x15e>
 8014460:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014464:	2e03      	cmp	r6, #3
 8014466:	70eb      	strb	r3, [r5, #3]
 8014468:	d075      	beq.n	8014556 <ucdr_serialize_double+0x166>
 801446a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801446e:	2e04      	cmp	r6, #4
 8014470:	712b      	strb	r3, [r5, #4]
 8014472:	d074      	beq.n	801455e <ucdr_serialize_double+0x16e>
 8014474:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8014478:	2e05      	cmp	r6, #5
 801447a:	716b      	strb	r3, [r5, #5]
 801447c:	d073      	beq.n	8014566 <ucdr_serialize_double+0x176>
 801447e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8014482:	2e06      	cmp	r6, #6
 8014484:	71ab      	strb	r3, [r5, #6]
 8014486:	d072      	beq.n	801456e <ucdr_serialize_double+0x17e>
 8014488:	f89d 3000 	ldrb.w	r3, [sp]
 801448c:	71eb      	strb	r3, [r5, #7]
 801448e:	6923      	ldr	r3, [r4, #16]
 8014490:	2108      	movs	r1, #8
 8014492:	68a2      	ldr	r2, [r4, #8]
 8014494:	3308      	adds	r3, #8
 8014496:	7da0      	ldrb	r0, [r4, #22]
 8014498:	4442      	add	r2, r8
 801449a:	7561      	strb	r1, [r4, #21]
 801449c:	1b9e      	subs	r6, r3, r6
 801449e:	f080 0001 	eor.w	r0, r0, #1
 80144a2:	60a2      	str	r2, [r4, #8]
 80144a4:	6126      	str	r6, [r4, #16]
 80144a6:	b002      	add	sp, #8
 80144a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144ac:	2108      	movs	r1, #8
 80144ae:	4620      	mov	r0, r4
 80144b0:	f000 f940 	bl	8014734 <ucdr_check_final_buffer_behavior>
 80144b4:	b350      	cbz	r0, 801450c <ucdr_serialize_double+0x11c>
 80144b6:	7d23      	ldrb	r3, [r4, #20]
 80144b8:	2b01      	cmp	r3, #1
 80144ba:	d02d      	beq.n	8014518 <ucdr_serialize_double+0x128>
 80144bc:	68a3      	ldr	r3, [r4, #8]
 80144be:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80144c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80144c6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80144ca:	7018      	strb	r0, [r3, #0]
 80144cc:	68a3      	ldr	r3, [r4, #8]
 80144ce:	705a      	strb	r2, [r3, #1]
 80144d0:	68a3      	ldr	r3, [r4, #8]
 80144d2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80144d6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80144da:	7099      	strb	r1, [r3, #2]
 80144dc:	68a3      	ldr	r3, [r4, #8]
 80144de:	70da      	strb	r2, [r3, #3]
 80144e0:	68a3      	ldr	r3, [r4, #8]
 80144e2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80144e6:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80144ea:	7118      	strb	r0, [r3, #4]
 80144ec:	68a3      	ldr	r3, [r4, #8]
 80144ee:	715a      	strb	r2, [r3, #5]
 80144f0:	68a3      	ldr	r3, [r4, #8]
 80144f2:	f89d 2000 	ldrb.w	r2, [sp]
 80144f6:	7199      	strb	r1, [r3, #6]
 80144f8:	68a3      	ldr	r3, [r4, #8]
 80144fa:	71da      	strb	r2, [r3, #7]
 80144fc:	2108      	movs	r1, #8
 80144fe:	68a2      	ldr	r2, [r4, #8]
 8014500:	6923      	ldr	r3, [r4, #16]
 8014502:	440a      	add	r2, r1
 8014504:	7561      	strb	r1, [r4, #21]
 8014506:	440b      	add	r3, r1
 8014508:	60a2      	str	r2, [r4, #8]
 801450a:	6123      	str	r3, [r4, #16]
 801450c:	7da0      	ldrb	r0, [r4, #22]
 801450e:	f080 0001 	eor.w	r0, r0, #1
 8014512:	b002      	add	sp, #8
 8014514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014518:	466b      	mov	r3, sp
 801451a:	68a2      	ldr	r2, [r4, #8]
 801451c:	cb03      	ldmia	r3!, {r0, r1}
 801451e:	6010      	str	r0, [r2, #0]
 8014520:	6051      	str	r1, [r2, #4]
 8014522:	e7eb      	b.n	80144fc <ucdr_serialize_double+0x10c>
 8014524:	68a2      	ldr	r2, [r4, #8]
 8014526:	6923      	ldr	r3, [r4, #16]
 8014528:	7da0      	ldrb	r0, [r4, #22]
 801452a:	1b92      	subs	r2, r2, r6
 801452c:	1b9b      	subs	r3, r3, r6
 801452e:	7567      	strb	r7, [r4, #21]
 8014530:	f080 0001 	eor.w	r0, r0, #1
 8014534:	60a2      	str	r2, [r4, #8]
 8014536:	6123      	str	r3, [r4, #16]
 8014538:	b002      	add	sp, #8
 801453a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801453e:	68a3      	ldr	r3, [r4, #8]
 8014540:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014544:	701a      	strb	r2, [r3, #0]
 8014546:	68a3      	ldr	r3, [r4, #8]
 8014548:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801454c:	701a      	strb	r2, [r3, #0]
 801454e:	68a3      	ldr	r3, [r4, #8]
 8014550:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014554:	701a      	strb	r2, [r3, #0]
 8014556:	68a3      	ldr	r3, [r4, #8]
 8014558:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801455c:	701a      	strb	r2, [r3, #0]
 801455e:	68a3      	ldr	r3, [r4, #8]
 8014560:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8014564:	701a      	strb	r2, [r3, #0]
 8014566:	68a3      	ldr	r3, [r4, #8]
 8014568:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801456c:	701a      	strb	r2, [r3, #0]
 801456e:	68a3      	ldr	r3, [r4, #8]
 8014570:	f89d 2000 	ldrb.w	r2, [sp]
 8014574:	701a      	strb	r2, [r3, #0]
 8014576:	e78a      	b.n	801448e <ucdr_serialize_double+0x9e>
 8014578:	4628      	mov	r0, r5
 801457a:	466d      	mov	r5, sp
 801457c:	4632      	mov	r2, r6
 801457e:	4629      	mov	r1, r5
 8014580:	f00d fbcb 	bl	8021d1a <memcpy>
 8014584:	4642      	mov	r2, r8
 8014586:	19a9      	adds	r1, r5, r6
 8014588:	68a0      	ldr	r0, [r4, #8]
 801458a:	f00d fbc6 	bl	8021d1a <memcpy>
 801458e:	e77e      	b.n	801448e <ucdr_serialize_double+0x9e>

08014590 <ucdr_deserialize_double>:
 8014590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014594:	4604      	mov	r4, r0
 8014596:	460d      	mov	r5, r1
 8014598:	2108      	movs	r1, #8
 801459a:	f000 f91f 	bl	80147dc <ucdr_buffer_alignment>
 801459e:	4601      	mov	r1, r0
 80145a0:	4620      	mov	r0, r4
 80145a2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80145a6:	f000 f961 	bl	801486c <ucdr_advance_buffer>
 80145aa:	2108      	movs	r1, #8
 80145ac:	4620      	mov	r0, r4
 80145ae:	f000 f8b5 	bl	801471c <ucdr_check_buffer_available_for>
 80145b2:	2800      	cmp	r0, #0
 80145b4:	d151      	bne.n	801465a <ucdr_deserialize_double+0xca>
 80145b6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80145ba:	42be      	cmp	r6, r7
 80145bc:	d948      	bls.n	8014650 <ucdr_deserialize_double+0xc0>
 80145be:	6923      	ldr	r3, [r4, #16]
 80145c0:	4620      	mov	r0, r4
 80145c2:	60a6      	str	r6, [r4, #8]
 80145c4:	1bf6      	subs	r6, r6, r7
 80145c6:	4433      	add	r3, r6
 80145c8:	f1c6 0908 	rsb	r9, r6, #8
 80145cc:	6123      	str	r3, [r4, #16]
 80145ce:	4649      	mov	r1, r9
 80145d0:	f000 f8b0 	bl	8014734 <ucdr_check_final_buffer_behavior>
 80145d4:	2800      	cmp	r0, #0
 80145d6:	d06d      	beq.n	80146b4 <ucdr_deserialize_double+0x124>
 80145d8:	7d23      	ldrb	r3, [r4, #20]
 80145da:	2b01      	cmp	r3, #1
 80145dc:	f000 8093 	beq.w	8014706 <ucdr_deserialize_double+0x176>
 80145e0:	79fb      	ldrb	r3, [r7, #7]
 80145e2:	702b      	strb	r3, [r5, #0]
 80145e4:	2e00      	cmp	r6, #0
 80145e6:	d072      	beq.n	80146ce <ucdr_deserialize_double+0x13e>
 80145e8:	79bb      	ldrb	r3, [r7, #6]
 80145ea:	2e01      	cmp	r6, #1
 80145ec:	706b      	strb	r3, [r5, #1]
 80145ee:	f105 0302 	add.w	r3, r5, #2
 80145f2:	d070      	beq.n	80146d6 <ucdr_deserialize_double+0x146>
 80145f4:	797b      	ldrb	r3, [r7, #5]
 80145f6:	2e02      	cmp	r6, #2
 80145f8:	70ab      	strb	r3, [r5, #2]
 80145fa:	f105 0303 	add.w	r3, r5, #3
 80145fe:	d06e      	beq.n	80146de <ucdr_deserialize_double+0x14e>
 8014600:	793b      	ldrb	r3, [r7, #4]
 8014602:	2e03      	cmp	r6, #3
 8014604:	70eb      	strb	r3, [r5, #3]
 8014606:	f105 0304 	add.w	r3, r5, #4
 801460a:	d06c      	beq.n	80146e6 <ucdr_deserialize_double+0x156>
 801460c:	78fb      	ldrb	r3, [r7, #3]
 801460e:	2e04      	cmp	r6, #4
 8014610:	712b      	strb	r3, [r5, #4]
 8014612:	f105 0305 	add.w	r3, r5, #5
 8014616:	d06a      	beq.n	80146ee <ucdr_deserialize_double+0x15e>
 8014618:	78bb      	ldrb	r3, [r7, #2]
 801461a:	2e05      	cmp	r6, #5
 801461c:	716b      	strb	r3, [r5, #5]
 801461e:	f105 0306 	add.w	r3, r5, #6
 8014622:	d068      	beq.n	80146f6 <ucdr_deserialize_double+0x166>
 8014624:	787b      	ldrb	r3, [r7, #1]
 8014626:	2e06      	cmp	r6, #6
 8014628:	71ab      	strb	r3, [r5, #6]
 801462a:	f105 0307 	add.w	r3, r5, #7
 801462e:	d066      	beq.n	80146fe <ucdr_deserialize_double+0x16e>
 8014630:	783b      	ldrb	r3, [r7, #0]
 8014632:	71eb      	strb	r3, [r5, #7]
 8014634:	6923      	ldr	r3, [r4, #16]
 8014636:	2108      	movs	r1, #8
 8014638:	68a2      	ldr	r2, [r4, #8]
 801463a:	3308      	adds	r3, #8
 801463c:	7da0      	ldrb	r0, [r4, #22]
 801463e:	444a      	add	r2, r9
 8014640:	7561      	strb	r1, [r4, #21]
 8014642:	1b9e      	subs	r6, r3, r6
 8014644:	f080 0001 	eor.w	r0, r0, #1
 8014648:	60a2      	str	r2, [r4, #8]
 801464a:	6126      	str	r6, [r4, #16]
 801464c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014650:	2108      	movs	r1, #8
 8014652:	4620      	mov	r0, r4
 8014654:	f000 f86e 	bl	8014734 <ucdr_check_final_buffer_behavior>
 8014658:	b310      	cbz	r0, 80146a0 <ucdr_deserialize_double+0x110>
 801465a:	7d23      	ldrb	r3, [r4, #20]
 801465c:	2b01      	cmp	r3, #1
 801465e:	68a3      	ldr	r3, [r4, #8]
 8014660:	d023      	beq.n	80146aa <ucdr_deserialize_double+0x11a>
 8014662:	79db      	ldrb	r3, [r3, #7]
 8014664:	702b      	strb	r3, [r5, #0]
 8014666:	68a3      	ldr	r3, [r4, #8]
 8014668:	799b      	ldrb	r3, [r3, #6]
 801466a:	706b      	strb	r3, [r5, #1]
 801466c:	68a3      	ldr	r3, [r4, #8]
 801466e:	795b      	ldrb	r3, [r3, #5]
 8014670:	70ab      	strb	r3, [r5, #2]
 8014672:	68a3      	ldr	r3, [r4, #8]
 8014674:	791b      	ldrb	r3, [r3, #4]
 8014676:	70eb      	strb	r3, [r5, #3]
 8014678:	68a3      	ldr	r3, [r4, #8]
 801467a:	78db      	ldrb	r3, [r3, #3]
 801467c:	712b      	strb	r3, [r5, #4]
 801467e:	68a3      	ldr	r3, [r4, #8]
 8014680:	789b      	ldrb	r3, [r3, #2]
 8014682:	716b      	strb	r3, [r5, #5]
 8014684:	68a3      	ldr	r3, [r4, #8]
 8014686:	785b      	ldrb	r3, [r3, #1]
 8014688:	71ab      	strb	r3, [r5, #6]
 801468a:	68a3      	ldr	r3, [r4, #8]
 801468c:	781b      	ldrb	r3, [r3, #0]
 801468e:	71eb      	strb	r3, [r5, #7]
 8014690:	2108      	movs	r1, #8
 8014692:	68a2      	ldr	r2, [r4, #8]
 8014694:	6923      	ldr	r3, [r4, #16]
 8014696:	440a      	add	r2, r1
 8014698:	7561      	strb	r1, [r4, #21]
 801469a:	440b      	add	r3, r1
 801469c:	60a2      	str	r2, [r4, #8]
 801469e:	6123      	str	r3, [r4, #16]
 80146a0:	7da0      	ldrb	r0, [r4, #22]
 80146a2:	f080 0001 	eor.w	r0, r0, #1
 80146a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146aa:	681a      	ldr	r2, [r3, #0]
 80146ac:	685b      	ldr	r3, [r3, #4]
 80146ae:	602a      	str	r2, [r5, #0]
 80146b0:	606b      	str	r3, [r5, #4]
 80146b2:	e7ed      	b.n	8014690 <ucdr_deserialize_double+0x100>
 80146b4:	68a2      	ldr	r2, [r4, #8]
 80146b6:	6923      	ldr	r3, [r4, #16]
 80146b8:	1b92      	subs	r2, r2, r6
 80146ba:	7da0      	ldrb	r0, [r4, #22]
 80146bc:	1b9b      	subs	r3, r3, r6
 80146be:	f884 8015 	strb.w	r8, [r4, #21]
 80146c2:	f080 0001 	eor.w	r0, r0, #1
 80146c6:	60a2      	str	r2, [r4, #8]
 80146c8:	6123      	str	r3, [r4, #16]
 80146ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146ce:	68a3      	ldr	r3, [r4, #8]
 80146d0:	799b      	ldrb	r3, [r3, #6]
 80146d2:	706b      	strb	r3, [r5, #1]
 80146d4:	1cab      	adds	r3, r5, #2
 80146d6:	68a2      	ldr	r2, [r4, #8]
 80146d8:	7952      	ldrb	r2, [r2, #5]
 80146da:	f803 2b01 	strb.w	r2, [r3], #1
 80146de:	68a2      	ldr	r2, [r4, #8]
 80146e0:	7912      	ldrb	r2, [r2, #4]
 80146e2:	f803 2b01 	strb.w	r2, [r3], #1
 80146e6:	68a2      	ldr	r2, [r4, #8]
 80146e8:	78d2      	ldrb	r2, [r2, #3]
 80146ea:	f803 2b01 	strb.w	r2, [r3], #1
 80146ee:	68a2      	ldr	r2, [r4, #8]
 80146f0:	7892      	ldrb	r2, [r2, #2]
 80146f2:	f803 2b01 	strb.w	r2, [r3], #1
 80146f6:	68a2      	ldr	r2, [r4, #8]
 80146f8:	7852      	ldrb	r2, [r2, #1]
 80146fa:	f803 2b01 	strb.w	r2, [r3], #1
 80146fe:	68a2      	ldr	r2, [r4, #8]
 8014700:	7812      	ldrb	r2, [r2, #0]
 8014702:	701a      	strb	r2, [r3, #0]
 8014704:	e796      	b.n	8014634 <ucdr_deserialize_double+0xa4>
 8014706:	4639      	mov	r1, r7
 8014708:	4632      	mov	r2, r6
 801470a:	4628      	mov	r0, r5
 801470c:	f00d fb05 	bl	8021d1a <memcpy>
 8014710:	464a      	mov	r2, r9
 8014712:	19a8      	adds	r0, r5, r6
 8014714:	68a1      	ldr	r1, [r4, #8]
 8014716:	f00d fb00 	bl	8021d1a <memcpy>
 801471a:	e78b      	b.n	8014634 <ucdr_deserialize_double+0xa4>

0801471c <ucdr_check_buffer_available_for>:
 801471c:	7d83      	ldrb	r3, [r0, #22]
 801471e:	b93b      	cbnz	r3, 8014730 <ucdr_check_buffer_available_for+0x14>
 8014720:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8014724:	4419      	add	r1, r3
 8014726:	4288      	cmp	r0, r1
 8014728:	bf34      	ite	cc
 801472a:	2000      	movcc	r0, #0
 801472c:	2001      	movcs	r0, #1
 801472e:	4770      	bx	lr
 8014730:	2000      	movs	r0, #0
 8014732:	4770      	bx	lr

08014734 <ucdr_check_final_buffer_behavior>:
 8014734:	7d83      	ldrb	r3, [r0, #22]
 8014736:	b943      	cbnz	r3, 801474a <ucdr_check_final_buffer_behavior+0x16>
 8014738:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 801473c:	b510      	push	{r4, lr}
 801473e:	4291      	cmp	r1, r2
 8014740:	4604      	mov	r4, r0
 8014742:	d205      	bcs.n	8014750 <ucdr_check_final_buffer_behavior+0x1c>
 8014744:	2301      	movs	r3, #1
 8014746:	4618      	mov	r0, r3
 8014748:	bd10      	pop	{r4, pc}
 801474a:	2300      	movs	r3, #0
 801474c:	4618      	mov	r0, r3
 801474e:	4770      	bx	lr
 8014750:	6982      	ldr	r2, [r0, #24]
 8014752:	b13a      	cbz	r2, 8014764 <ucdr_check_final_buffer_behavior+0x30>
 8014754:	69c1      	ldr	r1, [r0, #28]
 8014756:	4790      	blx	r2
 8014758:	f080 0301 	eor.w	r3, r0, #1
 801475c:	75a0      	strb	r0, [r4, #22]
 801475e:	b2db      	uxtb	r3, r3
 8014760:	4618      	mov	r0, r3
 8014762:	bd10      	pop	{r4, pc}
 8014764:	2001      	movs	r0, #1
 8014766:	75a0      	strb	r0, [r4, #22]
 8014768:	e7fa      	b.n	8014760 <ucdr_check_final_buffer_behavior+0x2c>
 801476a:	bf00      	nop

0801476c <ucdr_set_on_full_buffer_callback>:
 801476c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8014770:	4770      	bx	lr
 8014772:	bf00      	nop

08014774 <ucdr_init_buffer_origin_offset_endian>:
 8014774:	b410      	push	{r4}
 8014776:	9c01      	ldr	r4, [sp, #4]
 8014778:	440a      	add	r2, r1
 801477a:	6001      	str	r1, [r0, #0]
 801477c:	6042      	str	r2, [r0, #4]
 801477e:	190a      	adds	r2, r1, r4
 8014780:	441c      	add	r4, r3
 8014782:	6082      	str	r2, [r0, #8]
 8014784:	2200      	movs	r2, #0
 8014786:	e9c0 3403 	strd	r3, r4, [r0, #12]
 801478a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801478e:	7542      	strb	r2, [r0, #21]
 8014790:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014794:	7582      	strb	r2, [r0, #22]
 8014796:	7503      	strb	r3, [r0, #20]
 8014798:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801479c:	4770      	bx	lr
 801479e:	bf00      	nop

080147a0 <ucdr_init_buffer_origin_offset>:
 80147a0:	b510      	push	{r4, lr}
 80147a2:	b082      	sub	sp, #8
 80147a4:	9c04      	ldr	r4, [sp, #16]
 80147a6:	9400      	str	r4, [sp, #0]
 80147a8:	2401      	movs	r4, #1
 80147aa:	9401      	str	r4, [sp, #4]
 80147ac:	f7ff ffe2 	bl	8014774 <ucdr_init_buffer_origin_offset_endian>
 80147b0:	b002      	add	sp, #8
 80147b2:	bd10      	pop	{r4, pc}

080147b4 <ucdr_init_buffer_origin>:
 80147b4:	b510      	push	{r4, lr}
 80147b6:	2400      	movs	r4, #0
 80147b8:	b082      	sub	sp, #8
 80147ba:	9400      	str	r4, [sp, #0]
 80147bc:	f7ff fff0 	bl	80147a0 <ucdr_init_buffer_origin_offset>
 80147c0:	b002      	add	sp, #8
 80147c2:	bd10      	pop	{r4, pc}

080147c4 <ucdr_init_buffer>:
 80147c4:	2300      	movs	r3, #0
 80147c6:	f7ff bff5 	b.w	80147b4 <ucdr_init_buffer_origin>
 80147ca:	bf00      	nop

080147cc <ucdr_alignment>:
 80147cc:	fbb0 f2f1 	udiv	r2, r0, r1
 80147d0:	fb02 0011 	mls	r0, r2, r1, r0
 80147d4:	1e4b      	subs	r3, r1, #1
 80147d6:	1a08      	subs	r0, r1, r0
 80147d8:	4018      	ands	r0, r3
 80147da:	4770      	bx	lr

080147dc <ucdr_buffer_alignment>:
 80147dc:	7d43      	ldrb	r3, [r0, #21]
 80147de:	428b      	cmp	r3, r1
 80147e0:	d209      	bcs.n	80147f6 <ucdr_buffer_alignment+0x1a>
 80147e2:	6903      	ldr	r3, [r0, #16]
 80147e4:	1e4a      	subs	r2, r1, #1
 80147e6:	fbb3 f0f1 	udiv	r0, r3, r1
 80147ea:	fb01 3010 	mls	r0, r1, r0, r3
 80147ee:	1a09      	subs	r1, r1, r0
 80147f0:	ea01 0002 	and.w	r0, r1, r2
 80147f4:	4770      	bx	lr
 80147f6:	2000      	movs	r0, #0
 80147f8:	4770      	bx	lr
 80147fa:	bf00      	nop

080147fc <ucdr_align_to>:
 80147fc:	b538      	push	{r3, r4, r5, lr}
 80147fe:	4604      	mov	r4, r0
 8014800:	460d      	mov	r5, r1
 8014802:	f7ff ffeb 	bl	80147dc <ucdr_buffer_alignment>
 8014806:	68a3      	ldr	r3, [r4, #8]
 8014808:	7565      	strb	r5, [r4, #21]
 801480a:	181a      	adds	r2, r3, r0
 801480c:	6923      	ldr	r3, [r4, #16]
 801480e:	4418      	add	r0, r3
 8014810:	6863      	ldr	r3, [r4, #4]
 8014812:	4293      	cmp	r3, r2
 8014814:	6120      	str	r0, [r4, #16]
 8014816:	bf28      	it	cs
 8014818:	4613      	movcs	r3, r2
 801481a:	60a3      	str	r3, [r4, #8]
 801481c:	bd38      	pop	{r3, r4, r5, pc}
 801481e:	bf00      	nop

08014820 <ucdr_buffer_length>:
 8014820:	6882      	ldr	r2, [r0, #8]
 8014822:	6800      	ldr	r0, [r0, #0]
 8014824:	1a10      	subs	r0, r2, r0
 8014826:	4770      	bx	lr

08014828 <ucdr_buffer_remaining>:
 8014828:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 801482c:	1a10      	subs	r0, r2, r0
 801482e:	4770      	bx	lr

08014830 <ucdr_check_final_buffer_behavior_array>:
 8014830:	b538      	push	{r3, r4, r5, lr}
 8014832:	7d83      	ldrb	r3, [r0, #22]
 8014834:	b9a3      	cbnz	r3, 8014860 <ucdr_check_final_buffer_behavior_array+0x30>
 8014836:	4604      	mov	r4, r0
 8014838:	460d      	mov	r5, r1
 801483a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801483e:	429a      	cmp	r2, r3
 8014840:	d300      	bcc.n	8014844 <ucdr_check_final_buffer_behavior_array+0x14>
 8014842:	b931      	cbnz	r1, 8014852 <ucdr_check_final_buffer_behavior_array+0x22>
 8014844:	4620      	mov	r0, r4
 8014846:	f7ff ffef 	bl	8014828 <ucdr_buffer_remaining>
 801484a:	42a8      	cmp	r0, r5
 801484c:	bf28      	it	cs
 801484e:	4628      	movcs	r0, r5
 8014850:	bd38      	pop	{r3, r4, r5, pc}
 8014852:	6983      	ldr	r3, [r0, #24]
 8014854:	b133      	cbz	r3, 8014864 <ucdr_check_final_buffer_behavior_array+0x34>
 8014856:	69c1      	ldr	r1, [r0, #28]
 8014858:	4798      	blx	r3
 801485a:	75a0      	strb	r0, [r4, #22]
 801485c:	2800      	cmp	r0, #0
 801485e:	d0f1      	beq.n	8014844 <ucdr_check_final_buffer_behavior_array+0x14>
 8014860:	2000      	movs	r0, #0
 8014862:	bd38      	pop	{r3, r4, r5, pc}
 8014864:	2301      	movs	r3, #1
 8014866:	7583      	strb	r3, [r0, #22]
 8014868:	e7fa      	b.n	8014860 <ucdr_check_final_buffer_behavior_array+0x30>
 801486a:	bf00      	nop

0801486c <ucdr_advance_buffer>:
 801486c:	b538      	push	{r3, r4, r5, lr}
 801486e:	4604      	mov	r4, r0
 8014870:	460d      	mov	r5, r1
 8014872:	f7ff ff53 	bl	801471c <ucdr_check_buffer_available_for>
 8014876:	b178      	cbz	r0, 8014898 <ucdr_advance_buffer+0x2c>
 8014878:	6923      	ldr	r3, [r4, #16]
 801487a:	68a2      	ldr	r2, [r4, #8]
 801487c:	442b      	add	r3, r5
 801487e:	442a      	add	r2, r5
 8014880:	6123      	str	r3, [r4, #16]
 8014882:	2301      	movs	r3, #1
 8014884:	60a2      	str	r2, [r4, #8]
 8014886:	7563      	strb	r3, [r4, #21]
 8014888:	bd38      	pop	{r3, r4, r5, pc}
 801488a:	68a2      	ldr	r2, [r4, #8]
 801488c:	1a2d      	subs	r5, r5, r0
 801488e:	6923      	ldr	r3, [r4, #16]
 8014890:	4402      	add	r2, r0
 8014892:	4418      	add	r0, r3
 8014894:	60a2      	str	r2, [r4, #8]
 8014896:	6120      	str	r0, [r4, #16]
 8014898:	4629      	mov	r1, r5
 801489a:	2201      	movs	r2, #1
 801489c:	4620      	mov	r0, r4
 801489e:	f7ff ffc7 	bl	8014830 <ucdr_check_final_buffer_behavior_array>
 80148a2:	2800      	cmp	r0, #0
 80148a4:	d1f1      	bne.n	801488a <ucdr_advance_buffer+0x1e>
 80148a6:	2301      	movs	r3, #1
 80148a8:	7563      	strb	r3, [r4, #21]
 80148aa:	bd38      	pop	{r3, r4, r5, pc}

080148ac <_rclc_check_for_new_data>:
 80148ac:	2800      	cmp	r0, #0
 80148ae:	d046      	beq.n	801493e <_rclc_check_for_new_data+0x92>
 80148b0:	4603      	mov	r3, r0
 80148b2:	b530      	push	{r4, r5, lr}
 80148b4:	7802      	ldrb	r2, [r0, #0]
 80148b6:	b085      	sub	sp, #20
 80148b8:	2a0a      	cmp	r2, #10
 80148ba:	d842      	bhi.n	8014942 <_rclc_check_for_new_data+0x96>
 80148bc:	e8df f002 	tbb	[pc, r2]
 80148c0:	14181212 	.word	0x14181212
 80148c4:	06060614 	.word	0x06060614
 80148c8:	2e1a      	.short	0x2e1a
 80148ca:	16          	.byte	0x16
 80148cb:	00          	.byte	0x00
 80148cc:	6a0a      	ldr	r2, [r1, #32]
 80148ce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80148d0:	2000      	movs	r0, #0
 80148d2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80148d6:	1a12      	subs	r2, r2, r0
 80148d8:	bf18      	it	ne
 80148da:	2201      	movne	r2, #1
 80148dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80148e0:	b005      	add	sp, #20
 80148e2:	bd30      	pop	{r4, r5, pc}
 80148e4:	680a      	ldr	r2, [r1, #0]
 80148e6:	e7f2      	b.n	80148ce <_rclc_check_for_new_data+0x22>
 80148e8:	698a      	ldr	r2, [r1, #24]
 80148ea:	e7f0      	b.n	80148ce <_rclc_check_for_new_data+0x22>
 80148ec:	688a      	ldr	r2, [r1, #8]
 80148ee:	e7ee      	b.n	80148ce <_rclc_check_for_new_data+0x22>
 80148f0:	690a      	ldr	r2, [r1, #16]
 80148f2:	e7ec      	b.n	80148ce <_rclc_check_for_new_data+0x22>
 80148f4:	685c      	ldr	r4, [r3, #4]
 80148f6:	4608      	mov	r0, r1
 80148f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80148fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014900:	f104 0542 	add.w	r5, r4, #66	@ 0x42
 8014904:	f104 0110 	add.w	r1, r4, #16
 8014908:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801490c:	9500      	str	r5, [sp, #0]
 801490e:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 8014912:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 8014916:	f004 f96b 	bl	8018bf0 <rcl_action_client_wait_set_get_entities_ready>
 801491a:	e7e1      	b.n	80148e0 <_rclc_check_for_new_data+0x34>
 801491c:	685c      	ldr	r4, [r3, #4]
 801491e:	4608      	mov	r0, r1
 8014920:	f104 0222 	add.w	r2, r4, #34	@ 0x22
 8014924:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 8014928:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 801492c:	e9cd 2100 	strd	r2, r1, [sp]
 8014930:	f104 0220 	add.w	r2, r4, #32
 8014934:	f104 0110 	add.w	r1, r4, #16
 8014938:	f004 fb74 	bl	8019024 <rcl_action_server_wait_set_get_entities_ready>
 801493c:	e7d0      	b.n	80148e0 <_rclc_check_for_new_data+0x34>
 801493e:	200b      	movs	r0, #11
 8014940:	4770      	bx	lr
 8014942:	2001      	movs	r0, #1
 8014944:	e7cc      	b.n	80148e0 <_rclc_check_for_new_data+0x34>
 8014946:	bf00      	nop

08014948 <_rclc_take_new_data>:
 8014948:	b5f0      	push	{r4, r5, r6, r7, lr}
 801494a:	b09b      	sub	sp, #108	@ 0x6c
 801494c:	2800      	cmp	r0, #0
 801494e:	f000 8088 	beq.w	8014a62 <_rclc_take_new_data+0x11a>
 8014952:	7803      	ldrb	r3, [r0, #0]
 8014954:	4604      	mov	r4, r0
 8014956:	2b0a      	cmp	r3, #10
 8014958:	f200 8167 	bhi.w	8014c2a <_rclc_take_new_data+0x2e2>
 801495c:	e8df f003 	tbb	[pc, r3]
 8014960:	44152d2d 	.word	0x44152d2d
 8014964:	19191944 	.word	0x19191944
 8014968:	065a      	.short	0x065a
 801496a:	15          	.byte	0x15
 801496b:	00          	.byte	0x00
 801496c:	6840      	ldr	r0, [r0, #4]
 801496e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8014972:	2b00      	cmp	r3, #0
 8014974:	f040 80b2 	bne.w	8014adc <_rclc_take_new_data+0x194>
 8014978:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 801497c:	2b00      	cmp	r3, #0
 801497e:	f040 80e4 	bne.w	8014b4a <_rclc_take_new_data+0x202>
 8014982:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8014986:	2b00      	cmp	r3, #0
 8014988:	d16f      	bne.n	8014a6a <_rclc_take_new_data+0x122>
 801498a:	2500      	movs	r5, #0
 801498c:	4628      	mov	r0, r5
 801498e:	b01b      	add	sp, #108	@ 0x6c
 8014990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014992:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8014994:	6a0b      	ldr	r3, [r1, #32]
 8014996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801499a:	2b00      	cmp	r3, #0
 801499c:	d0f5      	beq.n	801498a <_rclc_take_new_data+0x42>
 801499e:	6882      	ldr	r2, [r0, #8]
 80149a0:	f100 0110 	add.w	r1, r0, #16
 80149a4:	6840      	ldr	r0, [r0, #4]
 80149a6:	f002 fde1 	bl	801756c <rcl_take_request>
 80149aa:	4605      	mov	r5, r0
 80149ac:	2800      	cmp	r0, #0
 80149ae:	d0ec      	beq.n	801498a <_rclc_take_new_data+0x42>
 80149b0:	f240 2359 	movw	r3, #601	@ 0x259
 80149b4:	4298      	cmp	r0, r3
 80149b6:	d013      	beq.n	80149e0 <_rclc_take_new_data+0x98>
 80149b8:	e029      	b.n	8014a0e <_rclc_take_new_data+0xc6>
 80149ba:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80149bc:	680b      	ldr	r3, [r1, #0]
 80149be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d0e1      	beq.n	801498a <_rclc_take_new_data+0x42>
 80149c6:	2300      	movs	r3, #0
 80149c8:	aa0a      	add	r2, sp, #40	@ 0x28
 80149ca:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 80149ce:	f002 ff11 	bl	80177f4 <rcl_take>
 80149d2:	4605      	mov	r5, r0
 80149d4:	2800      	cmp	r0, #0
 80149d6:	d0d9      	beq.n	801498c <_rclc_take_new_data+0x44>
 80149d8:	f240 1391 	movw	r3, #401	@ 0x191
 80149dc:	4298      	cmp	r0, r3
 80149de:	d116      	bne.n	8014a0e <_rclc_take_new_data+0xc6>
 80149e0:	2300      	movs	r3, #0
 80149e2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 80149e6:	e7d1      	b.n	801498c <_rclc_take_new_data+0x44>
 80149e8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80149ea:	698b      	ldr	r3, [r1, #24]
 80149ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d0ca      	beq.n	801498a <_rclc_take_new_data+0x42>
 80149f4:	6882      	ldr	r2, [r0, #8]
 80149f6:	f100 0110 	add.w	r1, r0, #16
 80149fa:	6840      	ldr	r0, [r0, #4]
 80149fc:	f001 fd9c 	bl	8016538 <rcl_take_response>
 8014a00:	4605      	mov	r5, r0
 8014a02:	2800      	cmp	r0, #0
 8014a04:	d0c1      	beq.n	801498a <_rclc_take_new_data+0x42>
 8014a06:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8014a0a:	4298      	cmp	r0, r3
 8014a0c:	d0be      	beq.n	801498c <_rclc_take_new_data+0x44>
 8014a0e:	f000 ff47 	bl	80158a0 <rcutils_reset_error>
 8014a12:	e7bb      	b.n	801498c <_rclc_take_new_data+0x44>
 8014a14:	6840      	ldr	r0, [r0, #4]
 8014a16:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d17d      	bne.n	8014b1a <_rclc_take_new_data+0x1d2>
 8014a1e:	69c3      	ldr	r3, [r0, #28]
 8014a20:	b11b      	cbz	r3, 8014a2a <_rclc_take_new_data+0xe2>
 8014a22:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d144      	bne.n	8014ab4 <_rclc_take_new_data+0x16c>
 8014a2a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	f040 80ac 	bne.w	8014b8c <_rclc_take_new_data+0x244>
 8014a34:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d0a6      	beq.n	801498a <_rclc_take_new_data+0x42>
 8014a3c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8014a3e:	a90a      	add	r1, sp, #40	@ 0x28
 8014a40:	3010      	adds	r0, #16
 8014a42:	f003 ffad 	bl	80189a0 <rcl_action_take_result_response>
 8014a46:	4605      	mov	r5, r0
 8014a48:	2800      	cmp	r0, #0
 8014a4a:	d1e0      	bne.n	8014a0e <_rclc_take_new_data+0xc6>
 8014a4c:	6860      	ldr	r0, [r4, #4]
 8014a4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8014a52:	f004 fc17 	bl	8019284 <rclc_action_find_handle_by_result_request_sequence_number>
 8014a56:	2800      	cmp	r0, #0
 8014a58:	d098      	beq.n	801498c <_rclc_take_new_data+0x44>
 8014a5a:	2301      	movs	r3, #1
 8014a5c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 8014a60:	e794      	b.n	801498c <_rclc_take_new_data+0x44>
 8014a62:	250b      	movs	r5, #11
 8014a64:	4628      	mov	r0, r5
 8014a66:	b01b      	add	sp, #108	@ 0x6c
 8014a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a6a:	ae04      	add	r6, sp, #16
 8014a6c:	3010      	adds	r0, #16
 8014a6e:	aa0a      	add	r2, sp, #40	@ 0x28
 8014a70:	4631      	mov	r1, r6
 8014a72:	f004 fa0b 	bl	8018e8c <rcl_action_take_cancel_request>
 8014a76:	4605      	mov	r5, r0
 8014a78:	2800      	cmp	r0, #0
 8014a7a:	d1c8      	bne.n	8014a0e <_rclc_take_new_data+0xc6>
 8014a7c:	a90a      	add	r1, sp, #40	@ 0x28
 8014a7e:	6860      	ldr	r0, [r4, #4]
 8014a80:	f004 fbc0 	bl	8019204 <rclc_action_find_goal_handle_by_uuid>
 8014a84:	4607      	mov	r7, r0
 8014a86:	2800      	cmp	r0, #0
 8014a88:	f000 80bb 	beq.w	8014c02 <_rclc_take_new_data+0x2ba>
 8014a8c:	2101      	movs	r1, #1
 8014a8e:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8014a92:	f004 fb41 	bl	8019118 <rcl_action_transition_goal_state>
 8014a96:	2803      	cmp	r0, #3
 8014a98:	4684      	mov	ip, r0
 8014a9a:	f040 80a7 	bne.w	8014bec <_rclc_take_new_data+0x2a4>
 8014a9e:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8014aa2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014aa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014aa6:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014aaa:	e884 0003 	stmia.w	r4, {r0, r1}
 8014aae:	f887 c008 	strb.w	ip, [r7, #8]
 8014ab2:	e76b      	b.n	801498c <_rclc_take_new_data+0x44>
 8014ab4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8014ab6:	3010      	adds	r0, #16
 8014ab8:	f003 fff2 	bl	8018aa0 <rcl_action_take_feedback>
 8014abc:	4605      	mov	r5, r0
 8014abe:	2800      	cmp	r0, #0
 8014ac0:	d1a5      	bne.n	8014a0e <_rclc_take_new_data+0xc6>
 8014ac2:	6860      	ldr	r0, [r4, #4]
 8014ac4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8014ac6:	f004 fb9d 	bl	8019204 <rclc_action_find_goal_handle_by_uuid>
 8014aca:	4603      	mov	r3, r0
 8014acc:	2800      	cmp	r0, #0
 8014ace:	f000 80a3 	beq.w	8014c18 <_rclc_take_new_data+0x2d0>
 8014ad2:	2201      	movs	r2, #1
 8014ad4:	6860      	ldr	r0, [r4, #4]
 8014ad6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8014ada:	e7a6      	b.n	8014a2a <_rclc_take_new_data+0xe2>
 8014adc:	f004 fb6c 	bl	80191b8 <rclc_action_take_goal_handle>
 8014ae0:	4606      	mov	r6, r0
 8014ae2:	6860      	ldr	r0, [r4, #4]
 8014ae4:	2e00      	cmp	r6, #0
 8014ae6:	f43f af47 	beq.w	8014978 <_rclc_take_new_data+0x30>
 8014aea:	6070      	str	r0, [r6, #4]
 8014aec:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 8014af0:	69f2      	ldr	r2, [r6, #28]
 8014af2:	3010      	adds	r0, #16
 8014af4:	f004 f912 	bl	8018d1c <rcl_action_take_goal_request>
 8014af8:	4605      	mov	r5, r0
 8014afa:	2800      	cmp	r0, #0
 8014afc:	f040 808e 	bne.w	8014c1c <_rclc_take_new_data+0x2d4>
 8014b00:	69f7      	ldr	r7, [r6, #28]
 8014b02:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014b04:	7235      	strb	r5, [r6, #8]
 8014b06:	f8c6 0009 	str.w	r0, [r6, #9]
 8014b0a:	f8c6 100d 	str.w	r1, [r6, #13]
 8014b0e:	6860      	ldr	r0, [r4, #4]
 8014b10:	f8c6 2011 	str.w	r2, [r6, #17]
 8014b14:	f8c6 3015 	str.w	r3, [r6, #21]
 8014b18:	e72e      	b.n	8014978 <_rclc_take_new_data+0x30>
 8014b1a:	aa04      	add	r2, sp, #16
 8014b1c:	a90a      	add	r1, sp, #40	@ 0x28
 8014b1e:	3010      	adds	r0, #16
 8014b20:	f003 fec6 	bl	80188b0 <rcl_action_take_goal_response>
 8014b24:	4605      	mov	r5, r0
 8014b26:	2800      	cmp	r0, #0
 8014b28:	f47f af71 	bne.w	8014a0e <_rclc_take_new_data+0xc6>
 8014b2c:	6860      	ldr	r0, [r4, #4]
 8014b2e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8014b32:	f004 fb95 	bl	8019260 <rclc_action_find_handle_by_goal_request_sequence_number>
 8014b36:	b130      	cbz	r0, 8014b46 <_rclc_take_new_data+0x1fe>
 8014b38:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8014b3c:	2201      	movs	r2, #1
 8014b3e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8014b42:	f880 2020 	strb.w	r2, [r0, #32]
 8014b46:	6860      	ldr	r0, [r4, #4]
 8014b48:	e769      	b.n	8014a1e <_rclc_take_new_data+0xd6>
 8014b4a:	3010      	adds	r0, #16
 8014b4c:	aa04      	add	r2, sp, #16
 8014b4e:	a90a      	add	r1, sp, #40	@ 0x28
 8014b50:	f004 f95c 	bl	8018e0c <rcl_action_take_result_request>
 8014b54:	4605      	mov	r5, r0
 8014b56:	2800      	cmp	r0, #0
 8014b58:	f47f af59 	bne.w	8014a0e <_rclc_take_new_data+0xc6>
 8014b5c:	a904      	add	r1, sp, #16
 8014b5e:	6860      	ldr	r0, [r4, #4]
 8014b60:	f004 fb50 	bl	8019204 <rclc_action_find_goal_handle_by_uuid>
 8014b64:	4607      	mov	r7, r0
 8014b66:	b160      	cbz	r0, 8014b82 <_rclc_take_new_data+0x23a>
 8014b68:	ad0a      	add	r5, sp, #40	@ 0x28
 8014b6a:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8014b6e:	f04f 0c02 	mov.w	ip, #2
 8014b72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b74:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014b76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014b7a:	e886 0003 	stmia.w	r6, {r0, r1}
 8014b7e:	f887 c008 	strb.w	ip, [r7, #8]
 8014b82:	6860      	ldr	r0, [r4, #4]
 8014b84:	2300      	movs	r3, #0
 8014b86:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8014b8a:	e6fa      	b.n	8014982 <_rclc_take_new_data+0x3a>
 8014b8c:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8014b90:	a90a      	add	r1, sp, #40	@ 0x28
 8014b92:	3010      	adds	r0, #16
 8014b94:	f003 ff44 	bl	8018a20 <rcl_action_take_cancel_response>
 8014b98:	4605      	mov	r5, r0
 8014b9a:	2800      	cmp	r0, #0
 8014b9c:	f47f af37 	bne.w	8014a0e <_rclc_take_new_data+0xc6>
 8014ba0:	6860      	ldr	r0, [r4, #4]
 8014ba2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8014ba6:	f004 fb7f 	bl	80192a8 <rclc_action_find_handle_by_cancel_request_sequence_number>
 8014baa:	4606      	mov	r6, r0
 8014bac:	6860      	ldr	r0, [r4, #4]
 8014bae:	2e00      	cmp	r6, #0
 8014bb0:	f43f af40 	beq.w	8014a34 <_rclc_take_new_data+0xec>
 8014bb4:	2701      	movs	r7, #1
 8014bb6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8014bb8:	84b7      	strh	r7, [r6, #36]	@ 0x24
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	f43f af3a 	beq.w	8014a34 <_rclc_take_new_data+0xec>
 8014bc0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8014bc2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8014bc6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8014bca:	f004 fb1b 	bl	8019204 <rclc_action_find_goal_handle_by_uuid>
 8014bce:	b138      	cbz	r0, 8014be0 <_rclc_take_new_data+0x298>
 8014bd0:	6860      	ldr	r0, [r4, #4]
 8014bd2:	3501      	adds	r5, #1
 8014bd4:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8014bd8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8014bda:	42ab      	cmp	r3, r5
 8014bdc:	d8f0      	bhi.n	8014bc0 <_rclc_take_new_data+0x278>
 8014bde:	e729      	b.n	8014a34 <_rclc_take_new_data+0xec>
 8014be0:	6860      	ldr	r0, [r4, #4]
 8014be2:	3501      	adds	r5, #1
 8014be4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8014be6:	42ab      	cmp	r3, r5
 8014be8:	d8ea      	bhi.n	8014bc0 <_rclc_take_new_data+0x278>
 8014bea:	e723      	b.n	8014a34 <_rclc_take_new_data+0xec>
 8014bec:	ab06      	add	r3, sp, #24
 8014bee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014bf0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014bf4:	2103      	movs	r1, #3
 8014bf6:	6860      	ldr	r0, [r4, #4]
 8014bf8:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014bfc:	f004 fbc8 	bl	8019390 <rclc_action_server_goal_cancel_reject>
 8014c00:	e6c4      	b.n	801498c <_rclc_take_new_data+0x44>
 8014c02:	ab06      	add	r3, sp, #24
 8014c04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014c06:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014c0a:	2102      	movs	r1, #2
 8014c0c:	6860      	ldr	r0, [r4, #4]
 8014c0e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014c12:	f004 fbbd 	bl	8019390 <rclc_action_server_goal_cancel_reject>
 8014c16:	e6b9      	b.n	801498c <_rclc_take_new_data+0x44>
 8014c18:	6860      	ldr	r0, [r4, #4]
 8014c1a:	e706      	b.n	8014a2a <_rclc_take_new_data+0xe2>
 8014c1c:	4631      	mov	r1, r6
 8014c1e:	6860      	ldr	r0, [r4, #4]
 8014c20:	f004 fada 	bl	80191d8 <rclc_action_remove_used_goal_handle>
 8014c24:	f000 fe3c 	bl	80158a0 <rcutils_reset_error>
 8014c28:	e6b0      	b.n	801498c <_rclc_take_new_data+0x44>
 8014c2a:	2501      	movs	r5, #1
 8014c2c:	e6ae      	b.n	801498c <_rclc_take_new_data+0x44>
 8014c2e:	bf00      	nop

08014c30 <_rclc_execute.part.0>:
 8014c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c32:	7803      	ldrb	r3, [r0, #0]
 8014c34:	b085      	sub	sp, #20
 8014c36:	4604      	mov	r4, r0
 8014c38:	2b0a      	cmp	r3, #10
 8014c3a:	f200 8139 	bhi.w	8014eb0 <_rclc_execute.part.0+0x280>
 8014c3e:	e8df f003 	tbb	[pc, r3]
 8014c42:	4268      	.short	0x4268
 8014c44:	06a75b4d 	.word	0x06a75b4d
 8014c48:	721d0606 	.word	0x721d0606
 8014c4c:	62          	.byte	0x62
 8014c4d:	00          	.byte	0x00
 8014c4e:	2b06      	cmp	r3, #6
 8014c50:	f000 8126 	beq.w	8014ea0 <_rclc_execute.part.0+0x270>
 8014c54:	2b07      	cmp	r3, #7
 8014c56:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014c58:	f040 811c 	bne.w	8014e94 <_rclc_execute.part.0+0x264>
 8014c5c:	f104 0510 	add.w	r5, r4, #16
 8014c60:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 8014c64:	6880      	ldr	r0, [r0, #8]
 8014c66:	4798      	blx	r3
 8014c68:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8014c6a:	4629      	mov	r1, r5
 8014c6c:	6860      	ldr	r0, [r4, #4]
 8014c6e:	f002 fcbd 	bl	80175ec <rcl_send_response>
 8014c72:	4604      	mov	r4, r0
 8014c74:	b378      	cbz	r0, 8014cd6 <_rclc_execute.part.0+0xa6>
 8014c76:	f000 fe13 	bl	80158a0 <rcutils_reset_error>
 8014c7a:	e02c      	b.n	8014cd6 <_rclc_execute.part.0+0xa6>
 8014c7c:	6840      	ldr	r0, [r0, #4]
 8014c7e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	f000 808e 	beq.w	8014da4 <_rclc_execute.part.0+0x174>
 8014c88:	2600      	movs	r6, #0
 8014c8a:	2701      	movs	r7, #1
 8014c8c:	e004      	b.n	8014c98 <_rclc_execute.part.0+0x68>
 8014c8e:	f004 fa6d 	bl	801916c <rclc_action_send_result_request>
 8014c92:	b998      	cbnz	r0, 8014cbc <_rclc_execute.part.0+0x8c>
 8014c94:	722f      	strb	r7, [r5, #8]
 8014c96:	6860      	ldr	r0, [r4, #4]
 8014c98:	f004 fb18 	bl	80192cc <rclc_action_find_first_handle_with_goal_response>
 8014c9c:	4605      	mov	r5, r0
 8014c9e:	2800      	cmp	r0, #0
 8014ca0:	d07f      	beq.n	8014da2 <_rclc_execute.part.0+0x172>
 8014ca2:	6863      	ldr	r3, [r4, #4]
 8014ca4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014ca6:	699b      	ldr	r3, [r3, #24]
 8014ca8:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8014cac:	f885 6020 	strb.w	r6, [r5, #32]
 8014cb0:	4798      	blx	r3
 8014cb2:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8014cb6:	4628      	mov	r0, r5
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d1e8      	bne.n	8014c8e <_rclc_execute.part.0+0x5e>
 8014cbc:	6860      	ldr	r0, [r4, #4]
 8014cbe:	4629      	mov	r1, r5
 8014cc0:	f004 fa8a 	bl	80191d8 <rclc_action_remove_used_goal_handle>
 8014cc4:	e7e7      	b.n	8014c96 <_rclc_execute.part.0+0x66>
 8014cc6:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8014cca:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 8014cce:	b100      	cbz	r0, 8014cd2 <_rclc_execute.part.0+0xa2>
 8014cd0:	68a0      	ldr	r0, [r4, #8]
 8014cd2:	2400      	movs	r4, #0
 8014cd4:	4798      	blx	r3
 8014cd6:	4620      	mov	r0, r4
 8014cd8:	b005      	add	sp, #20
 8014cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014cdc:	6840      	ldr	r0, [r0, #4]
 8014cde:	f002 fe9d 	bl	8017a1c <rcl_timer_call>
 8014ce2:	f240 3321 	movw	r3, #801	@ 0x321
 8014ce6:	4604      	mov	r4, r0
 8014ce8:	4298      	cmp	r0, r3
 8014cea:	d001      	beq.n	8014cf0 <_rclc_execute.part.0+0xc0>
 8014cec:	2800      	cmp	r0, #0
 8014cee:	d1c2      	bne.n	8014c76 <_rclc_execute.part.0+0x46>
 8014cf0:	2400      	movs	r4, #0
 8014cf2:	4620      	mov	r0, r4
 8014cf4:	b005      	add	sp, #20
 8014cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014cf8:	2400      	movs	r4, #0
 8014cfa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014cfc:	6880      	ldr	r0, [r0, #8]
 8014cfe:	4798      	blx	r3
 8014d00:	4620      	mov	r0, r4
 8014d02:	b005      	add	sp, #20
 8014d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d06:	2400      	movs	r4, #0
 8014d08:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014d0a:	4798      	blx	r3
 8014d0c:	4620      	mov	r0, r4
 8014d0e:	b005      	add	sp, #20
 8014d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d12:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8014d16:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014d18:	b100      	cbz	r0, 8014d1c <_rclc_execute.part.0+0xec>
 8014d1a:	68a0      	ldr	r0, [r4, #8]
 8014d1c:	2400      	movs	r4, #0
 8014d1e:	4798      	blx	r3
 8014d20:	4620      	mov	r0, r4
 8014d22:	b005      	add	sp, #20
 8014d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d26:	6840      	ldr	r0, [r0, #4]
 8014d28:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8014d2c:	bb3b      	cbnz	r3, 8014d7e <_rclc_execute.part.0+0x14e>
 8014d2e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d07d      	beq.n	8014e32 <_rclc_execute.part.0+0x202>
 8014d36:	f640 0634 	movw	r6, #2100	@ 0x834
 8014d3a:	2701      	movs	r7, #1
 8014d3c:	e007      	b.n	8014d4e <_rclc_execute.part.0+0x11e>
 8014d3e:	4628      	mov	r0, r5
 8014d40:	f004 fadc 	bl	80192fc <rclc_action_server_response_goal_request>
 8014d44:	4629      	mov	r1, r5
 8014d46:	6860      	ldr	r0, [r4, #4]
 8014d48:	f004 fa46 	bl	80191d8 <rclc_action_remove_used_goal_handle>
 8014d4c:	6860      	ldr	r0, [r4, #4]
 8014d4e:	2100      	movs	r1, #0
 8014d50:	f004 fa6e 	bl	8019230 <rclc_action_find_first_handle_by_status>
 8014d54:	4605      	mov	r5, r0
 8014d56:	2800      	cmp	r0, #0
 8014d58:	d068      	beq.n	8014e2c <_rclc_execute.part.0+0x1fc>
 8014d5a:	6863      	ldr	r3, [r4, #4]
 8014d5c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014d5e:	699b      	ldr	r3, [r3, #24]
 8014d60:	4798      	blx	r3
 8014d62:	42b0      	cmp	r0, r6
 8014d64:	f04f 0100 	mov.w	r1, #0
 8014d68:	d1e9      	bne.n	8014d3e <_rclc_execute.part.0+0x10e>
 8014d6a:	2101      	movs	r1, #1
 8014d6c:	4628      	mov	r0, r5
 8014d6e:	f004 fac5 	bl	80192fc <rclc_action_server_response_goal_request>
 8014d72:	722f      	strb	r7, [r5, #8]
 8014d74:	e7ea      	b.n	8014d4c <_rclc_execute.part.0+0x11c>
 8014d76:	6848      	ldr	r0, [r1, #4]
 8014d78:	f004 fa2e 	bl	80191d8 <rclc_action_remove_used_goal_handle>
 8014d7c:	6860      	ldr	r0, [r4, #4]
 8014d7e:	f004 fa63 	bl	8019248 <rclc_action_find_first_terminated_handle>
 8014d82:	4601      	mov	r1, r0
 8014d84:	2800      	cmp	r0, #0
 8014d86:	d1f6      	bne.n	8014d76 <_rclc_execute.part.0+0x146>
 8014d88:	6860      	ldr	r0, [r4, #4]
 8014d8a:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8014d8e:	e7ce      	b.n	8014d2e <_rclc_execute.part.0+0xfe>
 8014d90:	2400      	movs	r4, #0
 8014d92:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014d94:	f100 0110 	add.w	r1, r0, #16
 8014d98:	6880      	ldr	r0, [r0, #8]
 8014d9a:	4798      	blx	r3
 8014d9c:	4620      	mov	r0, r4
 8014d9e:	b005      	add	sp, #20
 8014da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014da2:	6860      	ldr	r0, [r4, #4]
 8014da4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8014da8:	b18b      	cbz	r3, 8014dce <_rclc_execute.part.0+0x19e>
 8014daa:	68c5      	ldr	r5, [r0, #12]
 8014dac:	b32d      	cbz	r5, 8014dfa <_rclc_execute.part.0+0x1ca>
 8014dae:	2600      	movs	r6, #0
 8014db0:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8014db4:	b143      	cbz	r3, 8014dc8 <_rclc_execute.part.0+0x198>
 8014db6:	69c3      	ldr	r3, [r0, #28]
 8014db8:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8014dbc:	b123      	cbz	r3, 8014dc8 <_rclc_execute.part.0+0x198>
 8014dbe:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8014dc0:	4628      	mov	r0, r5
 8014dc2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014dc4:	4798      	blx	r3
 8014dc6:	6860      	ldr	r0, [r4, #4]
 8014dc8:	682d      	ldr	r5, [r5, #0]
 8014dca:	2d00      	cmp	r5, #0
 8014dcc:	d1f0      	bne.n	8014db0 <_rclc_execute.part.0+0x180>
 8014dce:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8014dd2:	b193      	cbz	r3, 8014dfa <_rclc_execute.part.0+0x1ca>
 8014dd4:	68c5      	ldr	r5, [r0, #12]
 8014dd6:	b185      	cbz	r5, 8014dfa <_rclc_execute.part.0+0x1ca>
 8014dd8:	2600      	movs	r6, #0
 8014dda:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8014dde:	b14b      	cbz	r3, 8014df4 <_rclc_execute.part.0+0x1c4>
 8014de0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014de2:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8014de6:	b12b      	cbz	r3, 8014df4 <_rclc_execute.part.0+0x1c4>
 8014de8:	4628      	mov	r0, r5
 8014dea:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8014dee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014df0:	4798      	blx	r3
 8014df2:	6860      	ldr	r0, [r4, #4]
 8014df4:	682d      	ldr	r5, [r5, #0]
 8014df6:	2d00      	cmp	r5, #0
 8014df8:	d1ef      	bne.n	8014dda <_rclc_execute.part.0+0x1aa>
 8014dfa:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	f43f af76 	beq.w	8014cf0 <_rclc_execute.part.0+0xc0>
 8014e04:	2700      	movs	r7, #0
 8014e06:	e00b      	b.n	8014e20 <_rclc_execute.part.0+0x1f0>
 8014e08:	6863      	ldr	r3, [r4, #4]
 8014e0a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014e0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8014e0e:	6a1e      	ldr	r6, [r3, #32]
 8014e10:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8014e14:	47b0      	blx	r6
 8014e16:	6860      	ldr	r0, [r4, #4]
 8014e18:	4629      	mov	r1, r5
 8014e1a:	f004 f9dd 	bl	80191d8 <rclc_action_remove_used_goal_handle>
 8014e1e:	6860      	ldr	r0, [r4, #4]
 8014e20:	f004 fa60 	bl	80192e4 <rclc_action_find_first_handle_with_result_response>
 8014e24:	4605      	mov	r5, r0
 8014e26:	2800      	cmp	r0, #0
 8014e28:	d1ee      	bne.n	8014e08 <_rclc_execute.part.0+0x1d8>
 8014e2a:	e761      	b.n	8014cf0 <_rclc_execute.part.0+0xc0>
 8014e2c:	6860      	ldr	r0, [r4, #4]
 8014e2e:	f880 5020 	strb.w	r5, [r0, #32]
 8014e32:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	f43f af5a 	beq.w	8014cf0 <_rclc_execute.part.0+0xc0>
 8014e3c:	68c5      	ldr	r5, [r0, #12]
 8014e3e:	b1b5      	cbz	r5, 8014e6e <_rclc_execute.part.0+0x23e>
 8014e40:	2602      	movs	r6, #2
 8014e42:	e001      	b.n	8014e48 <_rclc_execute.part.0+0x218>
 8014e44:	682d      	ldr	r5, [r5, #0]
 8014e46:	b195      	cbz	r5, 8014e6e <_rclc_execute.part.0+0x23e>
 8014e48:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8014e4c:	2b03      	cmp	r3, #3
 8014e4e:	d1f9      	bne.n	8014e44 <_rclc_execute.part.0+0x214>
 8014e50:	69c3      	ldr	r3, [r0, #28]
 8014e52:	4628      	mov	r0, r5
 8014e54:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014e56:	4798      	blx	r3
 8014e58:	4603      	mov	r3, r0
 8014e5a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8014e5e:	4628      	mov	r0, r5
 8014e60:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8014e64:	b143      	cbz	r3, 8014e78 <_rclc_execute.part.0+0x248>
 8014e66:	f004 fa67 	bl	8019338 <rclc_action_server_goal_cancel_accept>
 8014e6a:	6860      	ldr	r0, [r4, #4]
 8014e6c:	e7ea      	b.n	8014e44 <_rclc_execute.part.0+0x214>
 8014e6e:	2300      	movs	r3, #0
 8014e70:	461c      	mov	r4, r3
 8014e72:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8014e76:	e72e      	b.n	8014cd6 <_rclc_execute.part.0+0xa6>
 8014e78:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8014e7a:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8014e7e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014e82:	2101      	movs	r1, #1
 8014e84:	6860      	ldr	r0, [r4, #4]
 8014e86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014e8a:	f004 fa81 	bl	8019390 <rclc_action_server_goal_cancel_reject>
 8014e8e:	722e      	strb	r6, [r5, #8]
 8014e90:	6860      	ldr	r0, [r4, #4]
 8014e92:	e7d7      	b.n	8014e44 <_rclc_execute.part.0+0x214>
 8014e94:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8014e96:	f104 0510 	add.w	r5, r4, #16
 8014e9a:	6880      	ldr	r0, [r0, #8]
 8014e9c:	4798      	blx	r3
 8014e9e:	e6e3      	b.n	8014c68 <_rclc_execute.part.0+0x38>
 8014ea0:	f100 0510 	add.w	r5, r0, #16
 8014ea4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014ea6:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8014ea8:	4629      	mov	r1, r5
 8014eaa:	6880      	ldr	r0, [r0, #8]
 8014eac:	4798      	blx	r3
 8014eae:	e6db      	b.n	8014c68 <_rclc_execute.part.0+0x38>
 8014eb0:	2401      	movs	r4, #1
 8014eb2:	e710      	b.n	8014cd6 <_rclc_execute.part.0+0xa6>

08014eb4 <rclc_executor_trigger_any>:
 8014eb4:	2800      	cmp	r0, #0
 8014eb6:	d03d      	beq.n	8014f34 <rclc_executor_trigger_any+0x80>
 8014eb8:	2900      	cmp	r1, #0
 8014eba:	d03c      	beq.n	8014f36 <rclc_executor_trigger_any+0x82>
 8014ebc:	4603      	mov	r3, r0
 8014ebe:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8014ec2:	2200      	movs	r2, #0
 8014ec4:	2800      	cmp	r0, #0
 8014ec6:	d035      	beq.n	8014f34 <rclc_executor_trigger_any+0x80>
 8014ec8:	b430      	push	{r4, r5}
 8014eca:	f893 c000 	ldrb.w	ip, [r3]
 8014ece:	f1bc 0f08 	cmp.w	ip, #8
 8014ed2:	d11d      	bne.n	8014f10 <rclc_executor_trigger_any+0x5c>
 8014ed4:	685c      	ldr	r4, [r3, #4]
 8014ed6:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8014ed8:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8014edc:	d105      	bne.n	8014eea <rclc_executor_trigger_any+0x36>
 8014ede:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8014ee2:	b910      	cbnz	r0, 8014eea <rclc_executor_trigger_any+0x36>
 8014ee4:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8014ee8:	b128      	cbz	r0, 8014ef6 <rclc_executor_trigger_any+0x42>
 8014eea:	bc30      	pop	{r4, r5}
 8014eec:	4770      	bx	lr
 8014eee:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8014ef2:	2800      	cmp	r0, #0
 8014ef4:	d1f9      	bne.n	8014eea <rclc_executor_trigger_any+0x36>
 8014ef6:	3201      	adds	r2, #1
 8014ef8:	3340      	adds	r3, #64	@ 0x40
 8014efa:	4291      	cmp	r1, r2
 8014efc:	d017      	beq.n	8014f2e <rclc_executor_trigger_any+0x7a>
 8014efe:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8014f02:	2800      	cmp	r0, #0
 8014f04:	d0f1      	beq.n	8014eea <rclc_executor_trigger_any+0x36>
 8014f06:	f893 c000 	ldrb.w	ip, [r3]
 8014f0a:	f1bc 0f08 	cmp.w	ip, #8
 8014f0e:	d0e1      	beq.n	8014ed4 <rclc_executor_trigger_any+0x20>
 8014f10:	f1bc 0f09 	cmp.w	ip, #9
 8014f14:	d1eb      	bne.n	8014eee <rclc_executor_trigger_any+0x3a>
 8014f16:	685c      	ldr	r4, [r3, #4]
 8014f18:	6a25      	ldr	r5, [r4, #32]
 8014f1a:	2d00      	cmp	r5, #0
 8014f1c:	d1e5      	bne.n	8014eea <rclc_executor_trigger_any+0x36>
 8014f1e:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8014f22:	2800      	cmp	r0, #0
 8014f24:	d1e1      	bne.n	8014eea <rclc_executor_trigger_any+0x36>
 8014f26:	3201      	adds	r2, #1
 8014f28:	3340      	adds	r3, #64	@ 0x40
 8014f2a:	4291      	cmp	r1, r2
 8014f2c:	d1e7      	bne.n	8014efe <rclc_executor_trigger_any+0x4a>
 8014f2e:	2000      	movs	r0, #0
 8014f30:	bc30      	pop	{r4, r5}
 8014f32:	4770      	bx	lr
 8014f34:	4770      	bx	lr
 8014f36:	4608      	mov	r0, r1
 8014f38:	4770      	bx	lr
 8014f3a:	bf00      	nop

08014f3c <rclc_executor_get_zero_initialized_executor>:
 8014f3c:	b510      	push	{r4, lr}
 8014f3e:	4604      	mov	r4, r0
 8014f40:	2288      	movs	r2, #136	@ 0x88
 8014f42:	4902      	ldr	r1, [pc, #8]	@ (8014f4c <rclc_executor_get_zero_initialized_executor+0x10>)
 8014f44:	f00c fee9 	bl	8021d1a <memcpy>
 8014f48:	4620      	mov	r0, r4
 8014f4a:	bd10      	pop	{r4, pc}
 8014f4c:	08023ed8 	.word	0x08023ed8

08014f50 <rclc_executor_init>:
 8014f50:	2900      	cmp	r1, #0
 8014f52:	d06a      	beq.n	801502a <rclc_executor_init+0xda>
 8014f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f58:	4605      	mov	r5, r0
 8014f5a:	b0b0      	sub	sp, #192	@ 0xc0
 8014f5c:	2800      	cmp	r0, #0
 8014f5e:	d05c      	beq.n	801501a <rclc_executor_init+0xca>
 8014f60:	4616      	mov	r6, r2
 8014f62:	4618      	mov	r0, r3
 8014f64:	4688      	mov	r8, r1
 8014f66:	461f      	mov	r7, r3
 8014f68:	f000 fc74 	bl	8015854 <rcutils_allocator_is_valid>
 8014f6c:	2e00      	cmp	r6, #0
 8014f6e:	d054      	beq.n	801501a <rclc_executor_init+0xca>
 8014f70:	f080 0401 	eor.w	r4, r0, #1
 8014f74:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8014f78:	d14f      	bne.n	801501a <rclc_executor_init+0xca>
 8014f7a:	2288      	movs	r2, #136	@ 0x88
 8014f7c:	4930      	ldr	r1, [pc, #192]	@ (8015040 <rclc_executor_init+0xf0>)
 8014f7e:	a80e      	add	r0, sp, #56	@ 0x38
 8014f80:	f00c fecb 	bl	8021d1a <memcpy>
 8014f84:	a90e      	add	r1, sp, #56	@ 0x38
 8014f86:	2288      	movs	r2, #136	@ 0x88
 8014f88:	4628      	mov	r0, r5
 8014f8a:	f00c fec6 	bl	8021d1a <memcpy>
 8014f8e:	4668      	mov	r0, sp
 8014f90:	f8c5 8000 	str.w	r8, [r5]
 8014f94:	60ae      	str	r6, [r5, #8]
 8014f96:	f002 feb7 	bl	8017d08 <rcl_get_zero_initialized_wait_set>
 8014f9a:	46ec      	mov	ip, sp
 8014f9c:	f105 0e14 	add.w	lr, r5, #20
 8014fa0:	f8d7 8000 	ldr.w	r8, [r7]
 8014fa4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014fa8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014fac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014fb0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014fb4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014fb8:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8015038 <rclc_executor_init+0xe8>
 8014fbc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014fc0:	f8dc 3000 	ldr.w	r3, [ip]
 8014fc4:	01b0      	lsls	r0, r6, #6
 8014fc6:	6939      	ldr	r1, [r7, #16]
 8014fc8:	f8ce 3000 	str.w	r3, [lr]
 8014fcc:	612f      	str	r7, [r5, #16]
 8014fce:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8014fd2:	47c0      	blx	r8
 8014fd4:	6068      	str	r0, [r5, #4]
 8014fd6:	b908      	cbnz	r0, 8014fdc <rclc_executor_init+0x8c>
 8014fd8:	e029      	b.n	801502e <rclc_executor_init+0xde>
 8014fda:	6868      	ldr	r0, [r5, #4]
 8014fdc:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8014fe0:	3401      	adds	r4, #1
 8014fe2:	4631      	mov	r1, r6
 8014fe4:	f000 fac0 	bl	8015568 <rclc_executor_handle_init>
 8014fe8:	42a6      	cmp	r6, r4
 8014fea:	d8f6      	bhi.n	8014fda <rclc_executor_init+0x8a>
 8014fec:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8014ff0:	f000 faae 	bl	8015550 <rclc_executor_handle_counters_zero_init>
 8014ff4:	4a13      	ldr	r2, [pc, #76]	@ (8015044 <rclc_executor_init+0xf4>)
 8014ff6:	2300      	movs	r3, #0
 8014ff8:	6868      	ldr	r0, [r5, #4]
 8014ffa:	e9c5 231e 	strd	r2, r3, [r5, #120]	@ 0x78
 8014ffe:	b168      	cbz	r0, 801501c <rclc_executor_init+0xcc>
 8015000:	68ab      	ldr	r3, [r5, #8]
 8015002:	b173      	cbz	r3, 8015022 <rclc_executor_init+0xd2>
 8015004:	692a      	ldr	r2, [r5, #16]
 8015006:	fab2 f382 	clz	r3, r2
 801500a:	095b      	lsrs	r3, r3, #5
 801500c:	b14a      	cbz	r2, 8015022 <rclc_executor_init+0xd2>
 801500e:	4618      	mov	r0, r3
 8015010:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
 8015014:	b030      	add	sp, #192	@ 0xc0
 8015016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801501a:	200b      	movs	r0, #11
 801501c:	b030      	add	sp, #192	@ 0xc0
 801501e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015022:	2000      	movs	r0, #0
 8015024:	b030      	add	sp, #192	@ 0xc0
 8015026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801502a:	200b      	movs	r0, #11
 801502c:	4770      	bx	lr
 801502e:	200a      	movs	r0, #10
 8015030:	e7f4      	b.n	801501c <rclc_executor_init+0xcc>
 8015032:	bf00      	nop
 8015034:	f3af 8000 	nop.w
 8015038:	3b9aca00 	.word	0x3b9aca00
 801503c:	00000000 	.word	0x00000000
 8015040:	08023ed8 	.word	0x08023ed8
 8015044:	08014eb5 	.word	0x08014eb5

08015048 <rclc_executor_add_subscription>:
 8015048:	2b00      	cmp	r3, #0
 801504a:	bf18      	it	ne
 801504c:	2a00      	cmpne	r2, #0
 801504e:	b570      	push	{r4, r5, r6, lr}
 8015050:	4604      	mov	r4, r0
 8015052:	bf0c      	ite	eq
 8015054:	2001      	moveq	r0, #1
 8015056:	2000      	movne	r0, #0
 8015058:	f89d c010 	ldrb.w	ip, [sp, #16]
 801505c:	2900      	cmp	r1, #0
 801505e:	bf08      	it	eq
 8015060:	f040 0001 	orreq.w	r0, r0, #1
 8015064:	bb28      	cbnz	r0, 80150b2 <rclc_executor_add_subscription+0x6a>
 8015066:	fab4 f584 	clz	r5, r4
 801506a:	096d      	lsrs	r5, r5, #5
 801506c:	b30c      	cbz	r4, 80150b2 <rclc_executor_add_subscription+0x6a>
 801506e:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 8015072:	4286      	cmp	r6, r0
 8015074:	d301      	bcc.n	801507a <rclc_executor_add_subscription+0x32>
 8015076:	2001      	movs	r0, #1
 8015078:	bd70      	pop	{r4, r5, r6, pc}
 801507a:	6860      	ldr	r0, [r4, #4]
 801507c:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 8015080:	f800 500e 	strb.w	r5, [r0, lr]
 8015084:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8015088:	3601      	adds	r6, #1
 801508a:	6303      	str	r3, [r0, #48]	@ 0x30
 801508c:	2301      	movs	r3, #1
 801508e:	62c5      	str	r5, [r0, #44]	@ 0x2c
 8015090:	f104 0514 	add.w	r5, r4, #20
 8015094:	f880 c001 	strb.w	ip, [r0, #1]
 8015098:	8703      	strh	r3, [r0, #56]	@ 0x38
 801509a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 801509e:	4628      	mov	r0, r5
 80150a0:	60e6      	str	r6, [r4, #12]
 80150a2:	f002 fe45 	bl	8017d30 <rcl_wait_set_is_valid>
 80150a6:	b930      	cbnz	r0, 80150b6 <rclc_executor_add_subscription+0x6e>
 80150a8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80150aa:	2000      	movs	r0, #0
 80150ac:	3301      	adds	r3, #1
 80150ae:	64a3      	str	r3, [r4, #72]	@ 0x48
 80150b0:	bd70      	pop	{r4, r5, r6, pc}
 80150b2:	200b      	movs	r0, #11
 80150b4:	bd70      	pop	{r4, r5, r6, pc}
 80150b6:	4628      	mov	r0, r5
 80150b8:	f002 fe40 	bl	8017d3c <rcl_wait_set_fini>
 80150bc:	2800      	cmp	r0, #0
 80150be:	d0f3      	beq.n	80150a8 <rclc_executor_add_subscription+0x60>
 80150c0:	bd70      	pop	{r4, r5, r6, pc}
 80150c2:	bf00      	nop

080150c4 <rclc_executor_add_service>:
 80150c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150c6:	9d06      	ldr	r5, [sp, #24]
 80150c8:	4604      	mov	r4, r0
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	bf18      	it	ne
 80150ce:	2d00      	cmpne	r5, #0
 80150d0:	bf0c      	ite	eq
 80150d2:	2001      	moveq	r0, #1
 80150d4:	2000      	movne	r0, #0
 80150d6:	2a00      	cmp	r2, #0
 80150d8:	bf08      	it	eq
 80150da:	f040 0001 	orreq.w	r0, r0, #1
 80150de:	2900      	cmp	r1, #0
 80150e0:	bf08      	it	eq
 80150e2:	f040 0001 	orreq.w	r0, r0, #1
 80150e6:	bb40      	cbnz	r0, 801513a <rclc_executor_add_service+0x76>
 80150e8:	fab4 f684 	clz	r6, r4
 80150ec:	0976      	lsrs	r6, r6, #5
 80150ee:	b324      	cbz	r4, 801513a <rclc_executor_add_service+0x76>
 80150f0:	e9d4 7002 	ldrd	r7, r0, [r4, #8]
 80150f4:	42b8      	cmp	r0, r7
 80150f6:	d301      	bcc.n	80150fc <rclc_executor_add_service+0x38>
 80150f8:	2001      	movs	r0, #1
 80150fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150fc:	6867      	ldr	r7, [r4, #4]
 80150fe:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 8015102:	f100 0c01 	add.w	ip, r0, #1
 8015106:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 801510a:	6283      	str	r3, [r0, #40]	@ 0x28
 801510c:	2305      	movs	r3, #5
 801510e:	6305      	str	r5, [r0, #48]	@ 0x30
 8015110:	f104 0514 	add.w	r5, r4, #20
 8015114:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8015118:	f827 300e 	strh.w	r3, [r7, lr]
 801511c:	2301      	movs	r3, #1
 801511e:	62c6      	str	r6, [r0, #44]	@ 0x2c
 8015120:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8015124:	4628      	mov	r0, r5
 8015126:	f8c4 c00c 	str.w	ip, [r4, #12]
 801512a:	f002 fe01 	bl	8017d30 <rcl_wait_set_is_valid>
 801512e:	b930      	cbnz	r0, 801513e <rclc_executor_add_service+0x7a>
 8015130:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8015132:	2000      	movs	r0, #0
 8015134:	3301      	adds	r3, #1
 8015136:	6563      	str	r3, [r4, #84]	@ 0x54
 8015138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801513a:	200b      	movs	r0, #11
 801513c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801513e:	4628      	mov	r0, r5
 8015140:	f002 fdfc 	bl	8017d3c <rcl_wait_set_fini>
 8015144:	2800      	cmp	r0, #0
 8015146:	d0f3      	beq.n	8015130 <rclc_executor_add_service+0x6c>
 8015148:	e7d7      	b.n	80150fa <rclc_executor_add_service+0x36>
 801514a:	bf00      	nop

0801514c <rclc_executor_prepare>:
 801514c:	2800      	cmp	r0, #0
 801514e:	d044      	beq.n	80151da <rclc_executor_prepare+0x8e>
 8015150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015152:	f100 0514 	add.w	r5, r0, #20
 8015156:	b09b      	sub	sp, #108	@ 0x6c
 8015158:	4604      	mov	r4, r0
 801515a:	4628      	mov	r0, r5
 801515c:	f002 fde8 	bl	8017d30 <rcl_wait_set_is_valid>
 8015160:	b110      	cbz	r0, 8015168 <rclc_executor_prepare+0x1c>
 8015162:	2000      	movs	r0, #0
 8015164:	b01b      	add	sp, #108	@ 0x6c
 8015166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015168:	4628      	mov	r0, r5
 801516a:	f002 fde7 	bl	8017d3c <rcl_wait_set_fini>
 801516e:	2800      	cmp	r0, #0
 8015170:	d130      	bne.n	80151d4 <rclc_executor_prepare+0x88>
 8015172:	a80c      	add	r0, sp, #48	@ 0x30
 8015174:	ae04      	add	r6, sp, #16
 8015176:	f002 fdc7 	bl	8017d08 <rcl_get_zero_initialized_wait_set>
 801517a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801517e:	46ae      	mov	lr, r5
 8015180:	6927      	ldr	r7, [r4, #16]
 8015182:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015186:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801518a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801518e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015192:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015196:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801519a:	f8dc 3000 	ldr.w	r3, [ip]
 801519e:	f8ce 3000 	str.w	r3, [lr]
 80151a2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80151a4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80151a6:	683b      	ldr	r3, [r7, #0]
 80151a8:	4628      	mov	r0, r5
 80151aa:	6822      	ldr	r2, [r4, #0]
 80151ac:	6033      	str	r3, [r6, #0]
 80151ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80151b0:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80151b2:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80151b6:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 80151ba:	e9cd 2100 	strd	r2, r1, [sp]
 80151be:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80151c0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80151c2:	f003 f8bb 	bl	801833c <rcl_wait_set_init>
 80151c6:	2800      	cmp	r0, #0
 80151c8:	d0cc      	beq.n	8015164 <rclc_executor_prepare+0x18>
 80151ca:	900b      	str	r0, [sp, #44]	@ 0x2c
 80151cc:	f000 fb68 	bl	80158a0 <rcutils_reset_error>
 80151d0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80151d2:	e7c7      	b.n	8015164 <rclc_executor_prepare+0x18>
 80151d4:	f000 fb64 	bl	80158a0 <rcutils_reset_error>
 80151d8:	e7cb      	b.n	8015172 <rclc_executor_prepare+0x26>
 80151da:	200b      	movs	r0, #11
 80151dc:	4770      	bx	lr
 80151de:	bf00      	nop

080151e0 <rclc_executor_spin_some.part.0>:
 80151e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151e4:	4605      	mov	r5, r0
 80151e6:	4691      	mov	r9, r2
 80151e8:	4698      	mov	r8, r3
 80151ea:	f7ff ffaf 	bl	801514c <rclc_executor_prepare>
 80151ee:	f105 0614 	add.w	r6, r5, #20
 80151f2:	4630      	mov	r0, r6
 80151f4:	f002 fe6e 	bl	8017ed4 <rcl_wait_set_clear>
 80151f8:	4607      	mov	r7, r0
 80151fa:	2800      	cmp	r0, #0
 80151fc:	f040 80a8 	bne.w	8015350 <rclc_executor_spin_some.part.0+0x170>
 8015200:	68ab      	ldr	r3, [r5, #8]
 8015202:	b30b      	cbz	r3, 8015248 <rclc_executor_spin_some.part.0+0x68>
 8015204:	4604      	mov	r4, r0
 8015206:	6869      	ldr	r1, [r5, #4]
 8015208:	01a2      	lsls	r2, r4, #6
 801520a:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 801520e:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8015212:	b1cb      	cbz	r3, 8015248 <rclc_executor_spin_some.part.0+0x68>
 8015214:	5c8b      	ldrb	r3, [r1, r2]
 8015216:	2b0a      	cmp	r3, #10
 8015218:	f200 80de 	bhi.w	80153d8 <rclc_executor_spin_some.part.0+0x1f8>
 801521c:	e8df f003 	tbb	[pc, r3]
 8015220:	8da99d9d 	.word	0x8da99d9d
 8015224:	0606068d 	.word	0x0606068d
 8015228:	c1ce      	.short	0xc1ce
 801522a:	b5          	.byte	0xb5
 801522b:	00          	.byte	0x00
 801522c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8015230:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8015234:	4630      	mov	r0, r6
 8015236:	f003 f99d 	bl	8018574 <rcl_wait_set_add_service>
 801523a:	2800      	cmp	r0, #0
 801523c:	f040 8087 	bne.w	801534e <rclc_executor_spin_some.part.0+0x16e>
 8015240:	3401      	adds	r4, #1
 8015242:	68ab      	ldr	r3, [r5, #8]
 8015244:	429c      	cmp	r4, r3
 8015246:	d3de      	bcc.n	8015206 <rclc_executor_spin_some.part.0+0x26>
 8015248:	4643      	mov	r3, r8
 801524a:	464a      	mov	r2, r9
 801524c:	4630      	mov	r0, r6
 801524e:	f003 f9bf 	bl	80185d0 <rcl_wait>
 8015252:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 8015256:	2b00      	cmp	r3, #0
 8015258:	f000 80c6 	beq.w	80153e8 <rclc_executor_spin_some.part.0+0x208>
 801525c:	2b01      	cmp	r3, #1
 801525e:	f040 80bb 	bne.w	80153d8 <rclc_executor_spin_some.part.0+0x1f8>
 8015262:	68ab      	ldr	r3, [r5, #8]
 8015264:	2b00      	cmp	r3, #0
 8015266:	f000 8159 	beq.w	801551c <rclc_executor_spin_some.part.0+0x33c>
 801526a:	2400      	movs	r4, #0
 801526c:	f240 1991 	movw	r9, #401	@ 0x191
 8015270:	46a0      	mov	r8, r4
 8015272:	e00a      	b.n	801528a <rclc_executor_spin_some.part.0+0xaa>
 8015274:	f7ff fb1a 	bl	80148ac <_rclc_check_for_new_data>
 8015278:	4604      	mov	r4, r0
 801527a:	b110      	cbz	r0, 8015282 <rclc_executor_spin_some.part.0+0xa2>
 801527c:	4548      	cmp	r0, r9
 801527e:	f040 80b1 	bne.w	80153e4 <rclc_executor_spin_some.part.0+0x204>
 8015282:	68ab      	ldr	r3, [r5, #8]
 8015284:	4598      	cmp	r8, r3
 8015286:	f080 8126 	bcs.w	80154d6 <rclc_executor_spin_some.part.0+0x2f6>
 801528a:	686a      	ldr	r2, [r5, #4]
 801528c:	4631      	mov	r1, r6
 801528e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8015292:	f108 0801 	add.w	r8, r8, #1
 8015296:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 801529a:	f1bc 0f00 	cmp.w	ip, #0
 801529e:	d1e9      	bne.n	8015274 <rclc_executor_spin_some.part.0+0x94>
 80152a0:	4619      	mov	r1, r3
 80152a2:	4610      	mov	r0, r2
 80152a4:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 80152a8:	4798      	blx	r3
 80152aa:	2800      	cmp	r0, #0
 80152ac:	f000 809a 	beq.w	80153e4 <rclc_executor_spin_some.part.0+0x204>
 80152b0:	68ab      	ldr	r3, [r5, #8]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	f000 8096 	beq.w	80153e4 <rclc_executor_spin_some.part.0+0x204>
 80152b8:	f04f 0800 	mov.w	r8, #0
 80152bc:	f240 1991 	movw	r9, #401	@ 0x191
 80152c0:	e009      	b.n	80152d6 <rclc_executor_spin_some.part.0+0xf6>
 80152c2:	f7ff fb41 	bl	8014948 <_rclc_take_new_data>
 80152c6:	4604      	mov	r4, r0
 80152c8:	b110      	cbz	r0, 80152d0 <rclc_executor_spin_some.part.0+0xf0>
 80152ca:	4548      	cmp	r0, r9
 80152cc:	f040 808a 	bne.w	80153e4 <rclc_executor_spin_some.part.0+0x204>
 80152d0:	68ab      	ldr	r3, [r5, #8]
 80152d2:	4598      	cmp	r8, r3
 80152d4:	d209      	bcs.n	80152ea <rclc_executor_spin_some.part.0+0x10a>
 80152d6:	6868      	ldr	r0, [r5, #4]
 80152d8:	4631      	mov	r1, r6
 80152da:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 80152de:	f108 0801 	add.w	r8, r8, #1
 80152e2:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 80152e6:	2a00      	cmp	r2, #0
 80152e8:	d1eb      	bne.n	80152c2 <rclc_executor_spin_some.part.0+0xe2>
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d07a      	beq.n	80153e4 <rclc_executor_spin_some.part.0+0x204>
 80152ee:	2600      	movs	r6, #0
 80152f0:	e00e      	b.n	8015310 <rclc_executor_spin_some.part.0+0x130>
 80152f2:	f812 200c 	ldrb.w	r2, [r2, ip]
 80152f6:	2a08      	cmp	r2, #8
 80152f8:	f000 80fc 	beq.w	80154f4 <rclc_executor_spin_some.part.0+0x314>
 80152fc:	2a09      	cmp	r2, #9
 80152fe:	f000 80ee 	beq.w	80154de <rclc_executor_spin_some.part.0+0x2fe>
 8015302:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 8015306:	b98a      	cbnz	r2, 801532c <rclc_executor_spin_some.part.0+0x14c>
 8015308:	3601      	adds	r6, #1
 801530a:	429e      	cmp	r6, r3
 801530c:	d267      	bcs.n	80153de <rclc_executor_spin_some.part.0+0x1fe>
 801530e:	2400      	movs	r4, #0
 8015310:	686a      	ldr	r2, [r5, #4]
 8015312:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8015316:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 801531a:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 801531e:	2900      	cmp	r1, #0
 8015320:	d060      	beq.n	80153e4 <rclc_executor_spin_some.part.0+0x204>
 8015322:	7841      	ldrb	r1, [r0, #1]
 8015324:	2900      	cmp	r1, #0
 8015326:	d0e4      	beq.n	80152f2 <rclc_executor_spin_some.part.0+0x112>
 8015328:	2901      	cmp	r1, #1
 801532a:	d1ed      	bne.n	8015308 <rclc_executor_spin_some.part.0+0x128>
 801532c:	f7ff fc80 	bl	8014c30 <_rclc_execute.part.0>
 8015330:	2800      	cmp	r0, #0
 8015332:	f040 80b5 	bne.w	80154a0 <rclc_executor_spin_some.part.0+0x2c0>
 8015336:	68ab      	ldr	r3, [r5, #8]
 8015338:	e7e6      	b.n	8015308 <rclc_executor_spin_some.part.0+0x128>
 801533a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801533e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8015342:	4630      	mov	r0, r6
 8015344:	f003 f8ea 	bl	801851c <rcl_wait_set_add_client>
 8015348:	2800      	cmp	r0, #0
 801534a:	f43f af79 	beq.w	8015240 <rclc_executor_spin_some.part.0+0x60>
 801534e:	4607      	mov	r7, r0
 8015350:	f000 faa6 	bl	80158a0 <rcutils_reset_error>
 8015354:	4638      	mov	r0, r7
 8015356:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801535a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801535e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8015362:	4630      	mov	r0, r6
 8015364:	f002 fd8a 	bl	8017e7c <rcl_wait_set_add_subscription>
 8015368:	2800      	cmp	r0, #0
 801536a:	f43f af69 	beq.w	8015240 <rclc_executor_spin_some.part.0+0x60>
 801536e:	4607      	mov	r7, r0
 8015370:	e7ee      	b.n	8015350 <rclc_executor_spin_some.part.0+0x170>
 8015372:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8015376:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801537a:	4630      	mov	r0, r6
 801537c:	f003 f89e 	bl	80184bc <rcl_wait_set_add_timer>
 8015380:	2800      	cmp	r0, #0
 8015382:	f43f af5d 	beq.w	8015240 <rclc_executor_spin_some.part.0+0x60>
 8015386:	4607      	mov	r7, r0
 8015388:	e7e2      	b.n	8015350 <rclc_executor_spin_some.part.0+0x170>
 801538a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801538e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8015392:	4630      	mov	r0, r6
 8015394:	f003 f866 	bl	8018464 <rcl_wait_set_add_guard_condition>
 8015398:	2800      	cmp	r0, #0
 801539a:	f43f af51 	beq.w	8015240 <rclc_executor_spin_some.part.0+0x60>
 801539e:	4607      	mov	r7, r0
 80153a0:	e7d6      	b.n	8015350 <rclc_executor_spin_some.part.0+0x170>
 80153a2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80153a6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80153aa:	4630      	mov	r0, r6
 80153ac:	3110      	adds	r1, #16
 80153ae:	f003 fde5 	bl	8018f7c <rcl_action_wait_set_add_action_server>
 80153b2:	2800      	cmp	r0, #0
 80153b4:	f43f af44 	beq.w	8015240 <rclc_executor_spin_some.part.0+0x60>
 80153b8:	4607      	mov	r7, r0
 80153ba:	e7c9      	b.n	8015350 <rclc_executor_spin_some.part.0+0x170>
 80153bc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80153c0:	2300      	movs	r3, #0
 80153c2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80153c6:	4630      	mov	r0, r6
 80153c8:	3110      	adds	r1, #16
 80153ca:	f003 fbad 	bl	8018b28 <rcl_action_wait_set_add_action_client>
 80153ce:	2800      	cmp	r0, #0
 80153d0:	f43f af36 	beq.w	8015240 <rclc_executor_spin_some.part.0+0x60>
 80153d4:	4607      	mov	r7, r0
 80153d6:	e7bb      	b.n	8015350 <rclc_executor_spin_some.part.0+0x170>
 80153d8:	2701      	movs	r7, #1
 80153da:	f000 fa61 	bl	80158a0 <rcutils_reset_error>
 80153de:	4638      	mov	r0, r7
 80153e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153e4:	4627      	mov	r7, r4
 80153e6:	e7fa      	b.n	80153de <rclc_executor_spin_some.part.0+0x1fe>
 80153e8:	68ab      	ldr	r3, [r5, #8]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	f000 8093 	beq.w	8015516 <rclc_executor_spin_some.part.0+0x336>
 80153f0:	2400      	movs	r4, #0
 80153f2:	f240 1991 	movw	r9, #401	@ 0x191
 80153f6:	46a0      	mov	r8, r4
 80153f8:	e008      	b.n	801540c <rclc_executor_spin_some.part.0+0x22c>
 80153fa:	f7ff fa57 	bl	80148ac <_rclc_check_for_new_data>
 80153fe:	4604      	mov	r4, r0
 8015400:	b108      	cbz	r0, 8015406 <rclc_executor_spin_some.part.0+0x226>
 8015402:	4548      	cmp	r0, r9
 8015404:	d1ee      	bne.n	80153e4 <rclc_executor_spin_some.part.0+0x204>
 8015406:	68ab      	ldr	r3, [r5, #8]
 8015408:	4598      	cmp	r8, r3
 801540a:	d266      	bcs.n	80154da <rclc_executor_spin_some.part.0+0x2fa>
 801540c:	686a      	ldr	r2, [r5, #4]
 801540e:	4631      	mov	r1, r6
 8015410:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8015414:	f108 0801 	add.w	r8, r8, #1
 8015418:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 801541c:	f1bc 0f00 	cmp.w	ip, #0
 8015420:	d1eb      	bne.n	80153fa <rclc_executor_spin_some.part.0+0x21a>
 8015422:	4619      	mov	r1, r3
 8015424:	4610      	mov	r0, r2
 8015426:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 801542a:	4798      	blx	r3
 801542c:	2800      	cmp	r0, #0
 801542e:	d0d9      	beq.n	80153e4 <rclc_executor_spin_some.part.0+0x204>
 8015430:	68ab      	ldr	r3, [r5, #8]
 8015432:	2b00      	cmp	r3, #0
 8015434:	d0d6      	beq.n	80153e4 <rclc_executor_spin_some.part.0+0x204>
 8015436:	f04f 0a00 	mov.w	sl, #0
 801543a:	f240 1891 	movw	r8, #401	@ 0x191
 801543e:	f240 2959 	movw	r9, #601	@ 0x259
 8015442:	e00e      	b.n	8015462 <rclc_executor_spin_some.part.0+0x282>
 8015444:	f813 300b 	ldrb.w	r3, [r3, fp]
 8015448:	2b08      	cmp	r3, #8
 801544a:	d034      	beq.n	80154b6 <rclc_executor_spin_some.part.0+0x2d6>
 801544c:	2b09      	cmp	r3, #9
 801544e:	d029      	beq.n	80154a4 <rclc_executor_spin_some.part.0+0x2c4>
 8015450:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8015454:	bb03      	cbnz	r3, 8015498 <rclc_executor_spin_some.part.0+0x2b8>
 8015456:	f10a 0a01 	add.w	sl, sl, #1
 801545a:	68ab      	ldr	r3, [r5, #8]
 801545c:	459a      	cmp	sl, r3
 801545e:	d2be      	bcs.n	80153de <rclc_executor_spin_some.part.0+0x1fe>
 8015460:	2400      	movs	r4, #0
 8015462:	6868      	ldr	r0, [r5, #4]
 8015464:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8015468:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 801546c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8015470:	2b00      	cmp	r3, #0
 8015472:	d0b7      	beq.n	80153e4 <rclc_executor_spin_some.part.0+0x204>
 8015474:	4631      	mov	r1, r6
 8015476:	f7ff fa67 	bl	8014948 <_rclc_take_new_data>
 801547a:	2800      	cmp	r0, #0
 801547c:	bf18      	it	ne
 801547e:	4540      	cmpne	r0, r8
 8015480:	d001      	beq.n	8015486 <rclc_executor_spin_some.part.0+0x2a6>
 8015482:	4548      	cmp	r0, r9
 8015484:	d10c      	bne.n	80154a0 <rclc_executor_spin_some.part.0+0x2c0>
 8015486:	686b      	ldr	r3, [r5, #4]
 8015488:	eb13 000b 	adds.w	r0, r3, fp
 801548c:	d021      	beq.n	80154d2 <rclc_executor_spin_some.part.0+0x2f2>
 801548e:	7842      	ldrb	r2, [r0, #1]
 8015490:	2a00      	cmp	r2, #0
 8015492:	d0d7      	beq.n	8015444 <rclc_executor_spin_some.part.0+0x264>
 8015494:	2a01      	cmp	r2, #1
 8015496:	d1de      	bne.n	8015456 <rclc_executor_spin_some.part.0+0x276>
 8015498:	f7ff fbca 	bl	8014c30 <_rclc_execute.part.0>
 801549c:	2800      	cmp	r0, #0
 801549e:	d0da      	beq.n	8015456 <rclc_executor_spin_some.part.0+0x276>
 80154a0:	4607      	mov	r7, r0
 80154a2:	e79c      	b.n	80153de <rclc_executor_spin_some.part.0+0x1fe>
 80154a4:	6843      	ldr	r3, [r0, #4]
 80154a6:	6a1a      	ldr	r2, [r3, #32]
 80154a8:	2a00      	cmp	r2, #0
 80154aa:	d1f5      	bne.n	8015498 <rclc_executor_spin_some.part.0+0x2b8>
 80154ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d0d0      	beq.n	8015456 <rclc_executor_spin_some.part.0+0x276>
 80154b4:	e7f0      	b.n	8015498 <rclc_executor_spin_some.part.0+0x2b8>
 80154b6:	6843      	ldr	r3, [r0, #4]
 80154b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80154ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80154be:	d1eb      	bne.n	8015498 <rclc_executor_spin_some.part.0+0x2b8>
 80154c0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80154c4:	2a00      	cmp	r2, #0
 80154c6:	d1e7      	bne.n	8015498 <rclc_executor_spin_some.part.0+0x2b8>
 80154c8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d0c2      	beq.n	8015456 <rclc_executor_spin_some.part.0+0x276>
 80154d0:	e7e2      	b.n	8015498 <rclc_executor_spin_some.part.0+0x2b8>
 80154d2:	270b      	movs	r7, #11
 80154d4:	e783      	b.n	80153de <rclc_executor_spin_some.part.0+0x1fe>
 80154d6:	686a      	ldr	r2, [r5, #4]
 80154d8:	e6e2      	b.n	80152a0 <rclc_executor_spin_some.part.0+0xc0>
 80154da:	686a      	ldr	r2, [r5, #4]
 80154dc:	e7a1      	b.n	8015422 <rclc_executor_spin_some.part.0+0x242>
 80154de:	6842      	ldr	r2, [r0, #4]
 80154e0:	6a11      	ldr	r1, [r2, #32]
 80154e2:	2900      	cmp	r1, #0
 80154e4:	f47f af22 	bne.w	801532c <rclc_executor_spin_some.part.0+0x14c>
 80154e8:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 80154ec:	2a00      	cmp	r2, #0
 80154ee:	f43f af0b 	beq.w	8015308 <rclc_executor_spin_some.part.0+0x128>
 80154f2:	e71b      	b.n	801532c <rclc_executor_spin_some.part.0+0x14c>
 80154f4:	6842      	ldr	r2, [r0, #4]
 80154f6:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80154f8:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 80154fc:	f47f af16 	bne.w	801532c <rclc_executor_spin_some.part.0+0x14c>
 8015500:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 8015504:	2900      	cmp	r1, #0
 8015506:	f47f af11 	bne.w	801532c <rclc_executor_spin_some.part.0+0x14c>
 801550a:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 801550e:	2a00      	cmp	r2, #0
 8015510:	f43f aefa 	beq.w	8015308 <rclc_executor_spin_some.part.0+0x128>
 8015514:	e70a      	b.n	801532c <rclc_executor_spin_some.part.0+0x14c>
 8015516:	686a      	ldr	r2, [r5, #4]
 8015518:	461c      	mov	r4, r3
 801551a:	e782      	b.n	8015422 <rclc_executor_spin_some.part.0+0x242>
 801551c:	686a      	ldr	r2, [r5, #4]
 801551e:	461c      	mov	r4, r3
 8015520:	e6be      	b.n	80152a0 <rclc_executor_spin_some.part.0+0xc0>
 8015522:	bf00      	nop

08015524 <rclc_executor_spin_some>:
 8015524:	b190      	cbz	r0, 801554c <rclc_executor_spin_some+0x28>
 8015526:	b570      	push	{r4, r5, r6, lr}
 8015528:	4604      	mov	r4, r0
 801552a:	6800      	ldr	r0, [r0, #0]
 801552c:	4616      	mov	r6, r2
 801552e:	461d      	mov	r5, r3
 8015530:	f001 f85e 	bl	80165f0 <rcl_context_is_valid>
 8015534:	b130      	cbz	r0, 8015544 <rclc_executor_spin_some+0x20>
 8015536:	4632      	mov	r2, r6
 8015538:	462b      	mov	r3, r5
 801553a:	4620      	mov	r0, r4
 801553c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015540:	f7ff be4e 	b.w	80151e0 <rclc_executor_spin_some.part.0>
 8015544:	f000 f9ac 	bl	80158a0 <rcutils_reset_error>
 8015548:	2001      	movs	r0, #1
 801554a:	bd70      	pop	{r4, r5, r6, pc}
 801554c:	200b      	movs	r0, #11
 801554e:	4770      	bx	lr

08015550 <rclc_executor_handle_counters_zero_init>:
 8015550:	b130      	cbz	r0, 8015560 <rclc_executor_handle_counters_zero_init+0x10>
 8015552:	2220      	movs	r2, #32
 8015554:	2100      	movs	r1, #0
 8015556:	b508      	push	{r3, lr}
 8015558:	f00c fac0 	bl	8021adc <memset>
 801555c:	2000      	movs	r0, #0
 801555e:	bd08      	pop	{r3, pc}
 8015560:	200b      	movs	r0, #11
 8015562:	4770      	bx	lr
 8015564:	0000      	movs	r0, r0
	...

08015568 <rclc_executor_handle_init>:
 8015568:	4603      	mov	r3, r0
 801556a:	b178      	cbz	r0, 801558c <rclc_executor_handle_init+0x24>
 801556c:	2200      	movs	r2, #0
 801556e:	f04f 0c0b 	mov.w	ip, #11
 8015572:	6341      	str	r1, [r0, #52]	@ 0x34
 8015574:	4610      	mov	r0, r2
 8015576:	f8a3 c000 	strh.w	ip, [r3]
 801557a:	631a      	str	r2, [r3, #48]	@ 0x30
 801557c:	871a      	strh	r2, [r3, #56]	@ 0x38
 801557e:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 8015590 <rclc_executor_handle_init+0x28>
 8015582:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8015586:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 801558a:	4770      	bx	lr
 801558c:	200b      	movs	r0, #11
 801558e:	4770      	bx	lr
	...

08015598 <rclc_support_init>:
 8015598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801559c:	b086      	sub	sp, #24
 801559e:	b3bb      	cbz	r3, 8015610 <rclc_support_init+0x78>
 80155a0:	4606      	mov	r6, r0
 80155a2:	b3a8      	cbz	r0, 8015610 <rclc_support_init+0x78>
 80155a4:	461c      	mov	r4, r3
 80155a6:	460f      	mov	r7, r1
 80155a8:	4690      	mov	r8, r2
 80155aa:	f001 f98d 	bl	80168c8 <rcl_get_zero_initialized_init_options>
 80155ae:	f104 050c 	add.w	r5, r4, #12
 80155b2:	9005      	str	r0, [sp, #20]
 80155b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80155b8:	e88d 0003 	stmia.w	sp, {r0, r1}
 80155bc:	a805      	add	r0, sp, #20
 80155be:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80155c2:	f001 f983 	bl	80168cc <rcl_init_options_init>
 80155c6:	4605      	mov	r5, r0
 80155c8:	b9e0      	cbnz	r0, 8015604 <rclc_support_init+0x6c>
 80155ca:	ad02      	add	r5, sp, #8
 80155cc:	4628      	mov	r0, r5
 80155ce:	f001 f805 	bl	80165dc <rcl_get_zero_initialized_context>
 80155d2:	4633      	mov	r3, r6
 80155d4:	aa05      	add	r2, sp, #20
 80155d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80155da:	e886 0003 	stmia.w	r6, {r0, r1}
 80155de:	4641      	mov	r1, r8
 80155e0:	4638      	mov	r0, r7
 80155e2:	f001 f86b 	bl	80166bc <rcl_init>
 80155e6:	4605      	mov	r5, r0
 80155e8:	b9b8      	cbnz	r0, 801561a <rclc_support_init+0x82>
 80155ea:	4622      	mov	r2, r4
 80155ec:	f106 010c 	add.w	r1, r6, #12
 80155f0:	2003      	movs	r0, #3
 80155f2:	60b4      	str	r4, [r6, #8]
 80155f4:	f002 f97e 	bl	80178f4 <rcl_clock_init>
 80155f8:	4605      	mov	r5, r0
 80155fa:	b970      	cbnz	r0, 801561a <rclc_support_init+0x82>
 80155fc:	a805      	add	r0, sp, #20
 80155fe:	f001 f9cb 	bl	8016998 <rcl_init_options_fini>
 8015602:	b108      	cbz	r0, 8015608 <rclc_support_init+0x70>
 8015604:	f000 f94c 	bl	80158a0 <rcutils_reset_error>
 8015608:	4628      	mov	r0, r5
 801560a:	b006      	add	sp, #24
 801560c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015610:	250b      	movs	r5, #11
 8015612:	4628      	mov	r0, r5
 8015614:	b006      	add	sp, #24
 8015616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801561a:	f000 f941 	bl	80158a0 <rcutils_reset_error>
 801561e:	a805      	add	r0, sp, #20
 8015620:	f001 f9ba 	bl	8016998 <rcl_init_options_fini>
 8015624:	2800      	cmp	r0, #0
 8015626:	d0ef      	beq.n	8015608 <rclc_support_init+0x70>
 8015628:	e7ec      	b.n	8015604 <rclc_support_init+0x6c>
 801562a:	bf00      	nop

0801562c <rclc_node_init_default>:
 801562c:	2b00      	cmp	r3, #0
 801562e:	bf18      	it	ne
 8015630:	2a00      	cmpne	r2, #0
 8015632:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015636:	4616      	mov	r6, r2
 8015638:	bf0c      	ite	eq
 801563a:	2201      	moveq	r2, #1
 801563c:	2200      	movne	r2, #0
 801563e:	b0a1      	sub	sp, #132	@ 0x84
 8015640:	2900      	cmp	r1, #0
 8015642:	bf08      	it	eq
 8015644:	f042 0201 	orreq.w	r2, r2, #1
 8015648:	bb22      	cbnz	r2, 8015694 <rclc_node_init_default+0x68>
 801564a:	4604      	mov	r4, r0
 801564c:	b310      	cbz	r0, 8015694 <rclc_node_init_default+0x68>
 801564e:	f10d 0810 	add.w	r8, sp, #16
 8015652:	461f      	mov	r7, r3
 8015654:	460d      	mov	r5, r1
 8015656:	f10d 0918 	add.w	r9, sp, #24
 801565a:	4640      	mov	r0, r8
 801565c:	f001 fa56 	bl	8016b0c <rcl_get_zero_initialized_node>
 8015660:	e898 0003 	ldmia.w	r8, {r0, r1}
 8015664:	e884 0003 	stmia.w	r4, {r0, r1}
 8015668:	4648      	mov	r0, r9
 801566a:	f001 fbc9 	bl	8016e00 <rcl_node_get_default_options>
 801566e:	4640      	mov	r0, r8
 8015670:	f001 fa4c 	bl	8016b0c <rcl_get_zero_initialized_node>
 8015674:	f8cd 9000 	str.w	r9, [sp]
 8015678:	463b      	mov	r3, r7
 801567a:	4632      	mov	r2, r6
 801567c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8015680:	e884 0003 	stmia.w	r4, {r0, r1}
 8015684:	4629      	mov	r1, r5
 8015686:	4620      	mov	r0, r4
 8015688:	f001 fa4a 	bl	8016b20 <rcl_node_init>
 801568c:	b930      	cbnz	r0, 801569c <rclc_node_init_default+0x70>
 801568e:	b021      	add	sp, #132	@ 0x84
 8015690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015694:	200b      	movs	r0, #11
 8015696:	b021      	add	sp, #132	@ 0x84
 8015698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801569c:	9003      	str	r0, [sp, #12]
 801569e:	f000 f8ff 	bl	80158a0 <rcutils_reset_error>
 80156a2:	f000 f8fd 	bl	80158a0 <rcutils_reset_error>
 80156a6:	9803      	ldr	r0, [sp, #12]
 80156a8:	b021      	add	sp, #132	@ 0x84
 80156aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80156ae:	bf00      	nop

080156b0 <rclc_publisher_init_default>:
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	bf18      	it	ne
 80156b4:	2a00      	cmpne	r2, #0
 80156b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156ba:	4616      	mov	r6, r2
 80156bc:	bf0c      	ite	eq
 80156be:	2201      	moveq	r2, #1
 80156c0:	2200      	movne	r2, #0
 80156c2:	b0a0      	sub	sp, #128	@ 0x80
 80156c4:	2900      	cmp	r1, #0
 80156c6:	bf08      	it	eq
 80156c8:	f042 0201 	orreq.w	r2, r2, #1
 80156cc:	bb1a      	cbnz	r2, 8015716 <rclc_publisher_init_default+0x66>
 80156ce:	4604      	mov	r4, r0
 80156d0:	b308      	cbz	r0, 8015716 <rclc_publisher_init_default+0x66>
 80156d2:	f10d 0810 	add.w	r8, sp, #16
 80156d6:	461f      	mov	r7, r3
 80156d8:	460d      	mov	r5, r1
 80156da:	f001 fc97 	bl	801700c <rcl_get_zero_initialized_publisher>
 80156de:	6020      	str	r0, [r4, #0]
 80156e0:	4640      	mov	r0, r8
 80156e2:	f001 fd33 	bl	801714c <rcl_publisher_get_default_options>
 80156e6:	2250      	movs	r2, #80	@ 0x50
 80156e8:	490d      	ldr	r1, [pc, #52]	@ (8015720 <rclc_publisher_init_default+0x70>)
 80156ea:	4640      	mov	r0, r8
 80156ec:	f00c fb15 	bl	8021d1a <memcpy>
 80156f0:	463b      	mov	r3, r7
 80156f2:	4632      	mov	r2, r6
 80156f4:	4629      	mov	r1, r5
 80156f6:	4620      	mov	r0, r4
 80156f8:	f8cd 8000 	str.w	r8, [sp]
 80156fc:	f001 fc8c 	bl	8017018 <rcl_publisher_init>
 8015700:	b910      	cbnz	r0, 8015708 <rclc_publisher_init_default+0x58>
 8015702:	b020      	add	sp, #128	@ 0x80
 8015704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015708:	9003      	str	r0, [sp, #12]
 801570a:	f000 f8c9 	bl	80158a0 <rcutils_reset_error>
 801570e:	9803      	ldr	r0, [sp, #12]
 8015710:	b020      	add	sp, #128	@ 0x80
 8015712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015716:	200b      	movs	r0, #11
 8015718:	b020      	add	sp, #128	@ 0x80
 801571a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801571e:	bf00      	nop
 8015720:	08023f60 	.word	0x08023f60

08015724 <rclc_service_init_default>:
 8015724:	2b00      	cmp	r3, #0
 8015726:	bf18      	it	ne
 8015728:	2a00      	cmpne	r2, #0
 801572a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801572e:	4616      	mov	r6, r2
 8015730:	bf0c      	ite	eq
 8015732:	2201      	moveq	r2, #1
 8015734:	2200      	movne	r2, #0
 8015736:	b09e      	sub	sp, #120	@ 0x78
 8015738:	2900      	cmp	r1, #0
 801573a:	bf08      	it	eq
 801573c:	f042 0201 	orreq.w	r2, r2, #1
 8015740:	bb1a      	cbnz	r2, 801578a <rclc_service_init_default+0x66>
 8015742:	4604      	mov	r4, r0
 8015744:	b308      	cbz	r0, 801578a <rclc_service_init_default+0x66>
 8015746:	f10d 0810 	add.w	r8, sp, #16
 801574a:	461f      	mov	r7, r3
 801574c:	460d      	mov	r5, r1
 801574e:	f001 fe4b 	bl	80173e8 <rcl_get_zero_initialized_service>
 8015752:	6020      	str	r0, [r4, #0]
 8015754:	4640      	mov	r0, r8
 8015756:	f001 fedf 	bl	8017518 <rcl_service_get_default_options>
 801575a:	2250      	movs	r2, #80	@ 0x50
 801575c:	490d      	ldr	r1, [pc, #52]	@ (8015794 <rclc_service_init_default+0x70>)
 801575e:	4640      	mov	r0, r8
 8015760:	f00c fadb 	bl	8021d1a <memcpy>
 8015764:	463b      	mov	r3, r7
 8015766:	4632      	mov	r2, r6
 8015768:	4629      	mov	r1, r5
 801576a:	4620      	mov	r0, r4
 801576c:	f8cd 8000 	str.w	r8, [sp]
 8015770:	f001 fe40 	bl	80173f4 <rcl_service_init>
 8015774:	b910      	cbnz	r0, 801577c <rclc_service_init_default+0x58>
 8015776:	b01e      	add	sp, #120	@ 0x78
 8015778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801577c:	9003      	str	r0, [sp, #12]
 801577e:	f000 f88f 	bl	80158a0 <rcutils_reset_error>
 8015782:	9803      	ldr	r0, [sp, #12]
 8015784:	b01e      	add	sp, #120	@ 0x78
 8015786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801578a:	200b      	movs	r0, #11
 801578c:	b01e      	add	sp, #120	@ 0x78
 801578e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015792:	bf00      	nop
 8015794:	08023fb0 	.word	0x08023fb0

08015798 <rclc_subscription_init_default>:
 8015798:	2b00      	cmp	r3, #0
 801579a:	bf18      	it	ne
 801579c:	2a00      	cmpne	r2, #0
 801579e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157a2:	4616      	mov	r6, r2
 80157a4:	bf0c      	ite	eq
 80157a6:	2201      	moveq	r2, #1
 80157a8:	2200      	movne	r2, #0
 80157aa:	b0a0      	sub	sp, #128	@ 0x80
 80157ac:	2900      	cmp	r1, #0
 80157ae:	bf08      	it	eq
 80157b0:	f042 0201 	orreq.w	r2, r2, #1
 80157b4:	bb1a      	cbnz	r2, 80157fe <rclc_subscription_init_default+0x66>
 80157b6:	4604      	mov	r4, r0
 80157b8:	b308      	cbz	r0, 80157fe <rclc_subscription_init_default+0x66>
 80157ba:	f10d 0810 	add.w	r8, sp, #16
 80157be:	461f      	mov	r7, r3
 80157c0:	460d      	mov	r5, r1
 80157c2:	f001 ff35 	bl	8017630 <rcl_get_zero_initialized_subscription>
 80157c6:	6020      	str	r0, [r4, #0]
 80157c8:	4640      	mov	r0, r8
 80157ca:	f001 ffe5 	bl	8017798 <rcl_subscription_get_default_options>
 80157ce:	2250      	movs	r2, #80	@ 0x50
 80157d0:	490d      	ldr	r1, [pc, #52]	@ (8015808 <rclc_subscription_init_default+0x70>)
 80157d2:	4640      	mov	r0, r8
 80157d4:	f00c faa1 	bl	8021d1a <memcpy>
 80157d8:	463b      	mov	r3, r7
 80157da:	4632      	mov	r2, r6
 80157dc:	4629      	mov	r1, r5
 80157de:	4620      	mov	r0, r4
 80157e0:	f8cd 8000 	str.w	r8, [sp]
 80157e4:	f001 ff2a 	bl	801763c <rcl_subscription_init>
 80157e8:	b910      	cbnz	r0, 80157f0 <rclc_subscription_init_default+0x58>
 80157ea:	b020      	add	sp, #128	@ 0x80
 80157ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157f0:	9003      	str	r0, [sp, #12]
 80157f2:	f000 f855 	bl	80158a0 <rcutils_reset_error>
 80157f6:	9803      	ldr	r0, [sp, #12]
 80157f8:	b020      	add	sp, #128	@ 0x80
 80157fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157fe:	200b      	movs	r0, #11
 8015800:	b020      	add	sp, #128	@ 0x80
 8015802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015806:	bf00      	nop
 8015808:	08024000 	.word	0x08024000

0801580c <__default_zero_allocate>:
 801580c:	f00b bc8e 	b.w	802112c <calloc>

08015810 <__default_reallocate>:
 8015810:	f00b be2c 	b.w	802146c <realloc>

08015814 <__default_deallocate>:
 8015814:	f00b bd08 	b.w	8021228 <free>

08015818 <__default_allocate>:
 8015818:	f00b bcfe 	b.w	8021218 <malloc>

0801581c <rcutils_get_zero_initialized_allocator>:
 801581c:	b510      	push	{r4, lr}
 801581e:	4c05      	ldr	r4, [pc, #20]	@ (8015834 <rcutils_get_zero_initialized_allocator+0x18>)
 8015820:	4686      	mov	lr, r0
 8015822:	4684      	mov	ip, r0
 8015824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015826:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801582a:	6823      	ldr	r3, [r4, #0]
 801582c:	4670      	mov	r0, lr
 801582e:	f8cc 3000 	str.w	r3, [ip]
 8015832:	bd10      	pop	{r4, pc}
 8015834:	08024050 	.word	0x08024050

08015838 <rcutils_get_default_allocator>:
 8015838:	b510      	push	{r4, lr}
 801583a:	4c05      	ldr	r4, [pc, #20]	@ (8015850 <rcutils_get_default_allocator+0x18>)
 801583c:	4686      	mov	lr, r0
 801583e:	4684      	mov	ip, r0
 8015840:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015842:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015846:	6823      	ldr	r3, [r4, #0]
 8015848:	4670      	mov	r0, lr
 801584a:	f8cc 3000 	str.w	r3, [ip]
 801584e:	bd10      	pop	{r4, pc}
 8015850:	24000dfc 	.word	0x24000dfc

08015854 <rcutils_allocator_is_valid>:
 8015854:	b158      	cbz	r0, 801586e <rcutils_allocator_is_valid+0x1a>
 8015856:	6803      	ldr	r3, [r0, #0]
 8015858:	b143      	cbz	r3, 801586c <rcutils_allocator_is_valid+0x18>
 801585a:	6843      	ldr	r3, [r0, #4]
 801585c:	b133      	cbz	r3, 801586c <rcutils_allocator_is_valid+0x18>
 801585e:	68c3      	ldr	r3, [r0, #12]
 8015860:	b123      	cbz	r3, 801586c <rcutils_allocator_is_valid+0x18>
 8015862:	6880      	ldr	r0, [r0, #8]
 8015864:	3800      	subs	r0, #0
 8015866:	bf18      	it	ne
 8015868:	2001      	movne	r0, #1
 801586a:	4770      	bx	lr
 801586c:	4618      	mov	r0, r3
 801586e:	4770      	bx	lr

08015870 <rcutils_get_error_string>:
 8015870:	4b06      	ldr	r3, [pc, #24]	@ (801588c <rcutils_get_error_string+0x1c>)
 8015872:	781b      	ldrb	r3, [r3, #0]
 8015874:	b13b      	cbz	r3, 8015886 <rcutils_get_error_string+0x16>
 8015876:	4b06      	ldr	r3, [pc, #24]	@ (8015890 <rcutils_get_error_string+0x20>)
 8015878:	781a      	ldrb	r2, [r3, #0]
 801587a:	b90a      	cbnz	r2, 8015880 <rcutils_get_error_string+0x10>
 801587c:	2201      	movs	r2, #1
 801587e:	701a      	strb	r2, [r3, #0]
 8015880:	4b04      	ldr	r3, [pc, #16]	@ (8015894 <rcutils_get_error_string+0x24>)
 8015882:	7818      	ldrb	r0, [r3, #0]
 8015884:	4770      	bx	lr
 8015886:	4b04      	ldr	r3, [pc, #16]	@ (8015898 <rcutils_get_error_string+0x28>)
 8015888:	7818      	ldrb	r0, [r3, #0]
 801588a:	4770      	bx	lr
 801588c:	24064924 	.word	0x24064924
 8015890:	24064939 	.word	0x24064939
 8015894:	24064938 	.word	0x24064938
 8015898:	08024064 	.word	0x08024064
 801589c:	00000000 	.word	0x00000000

080158a0 <rcutils_reset_error>:
 80158a0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 80158c0 <rcutils_reset_error+0x20>
 80158a4:	2300      	movs	r3, #0
 80158a6:	4a08      	ldr	r2, [pc, #32]	@ (80158c8 <rcutils_reset_error+0x28>)
 80158a8:	4808      	ldr	r0, [pc, #32]	@ (80158cc <rcutils_reset_error+0x2c>)
 80158aa:	8013      	strh	r3, [r2, #0]
 80158ac:	4908      	ldr	r1, [pc, #32]	@ (80158d0 <rcutils_reset_error+0x30>)
 80158ae:	7003      	strb	r3, [r0, #0]
 80158b0:	700b      	strb	r3, [r1, #0]
 80158b2:	ed82 7b02 	vstr	d7, [r2, #8]
 80158b6:	4a07      	ldr	r2, [pc, #28]	@ (80158d4 <rcutils_reset_error+0x34>)
 80158b8:	7013      	strb	r3, [r2, #0]
 80158ba:	4770      	bx	lr
 80158bc:	f3af 8000 	nop.w
	...
 80158c8:	24064928 	.word	0x24064928
 80158cc:	24064939 	.word	0x24064939
 80158d0:	24064938 	.word	0x24064938
 80158d4:	24064924 	.word	0x24064924

080158d8 <rcutils_system_time_now>:
 80158d8:	b300      	cbz	r0, 801591c <rcutils_system_time_now+0x44>
 80158da:	b570      	push	{r4, r5, r6, lr}
 80158dc:	b084      	sub	sp, #16
 80158de:	4604      	mov	r4, r0
 80158e0:	2001      	movs	r0, #1
 80158e2:	4669      	mov	r1, sp
 80158e4:	f7ec fbc4 	bl	8002070 <clock_gettime>
 80158e8:	e9dd 3100 	ldrd	r3, r1, [sp]
 80158ec:	2900      	cmp	r1, #0
 80158ee:	db12      	blt.n	8015916 <rcutils_system_time_now+0x3e>
 80158f0:	ea53 0201 	orrs.w	r2, r3, r1
 80158f4:	9d02      	ldr	r5, [sp, #8]
 80158f6:	d101      	bne.n	80158fc <rcutils_system_time_now+0x24>
 80158f8:	2d00      	cmp	r5, #0
 80158fa:	db0c      	blt.n	8015916 <rcutils_system_time_now+0x3e>
 80158fc:	4e08      	ldr	r6, [pc, #32]	@ (8015920 <rcutils_system_time_now+0x48>)
 80158fe:	2000      	movs	r0, #0
 8015900:	fba3 3206 	umull	r3, r2, r3, r6
 8015904:	195b      	adds	r3, r3, r5
 8015906:	fb06 2201 	mla	r2, r6, r1, r2
 801590a:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 801590e:	e9c4 3200 	strd	r3, r2, [r4]
 8015912:	b004      	add	sp, #16
 8015914:	bd70      	pop	{r4, r5, r6, pc}
 8015916:	2002      	movs	r0, #2
 8015918:	b004      	add	sp, #16
 801591a:	bd70      	pop	{r4, r5, r6, pc}
 801591c:	200b      	movs	r0, #11
 801591e:	4770      	bx	lr
 8015920:	3b9aca00 	.word	0x3b9aca00

08015924 <rcutils_steady_time_now>:
 8015924:	b300      	cbz	r0, 8015968 <rcutils_steady_time_now+0x44>
 8015926:	b570      	push	{r4, r5, r6, lr}
 8015928:	b084      	sub	sp, #16
 801592a:	4604      	mov	r4, r0
 801592c:	2000      	movs	r0, #0
 801592e:	4669      	mov	r1, sp
 8015930:	f7ec fb9e 	bl	8002070 <clock_gettime>
 8015934:	e9dd 3100 	ldrd	r3, r1, [sp]
 8015938:	2900      	cmp	r1, #0
 801593a:	db12      	blt.n	8015962 <rcutils_steady_time_now+0x3e>
 801593c:	ea53 0201 	orrs.w	r2, r3, r1
 8015940:	9d02      	ldr	r5, [sp, #8]
 8015942:	d101      	bne.n	8015948 <rcutils_steady_time_now+0x24>
 8015944:	2d00      	cmp	r5, #0
 8015946:	db0c      	blt.n	8015962 <rcutils_steady_time_now+0x3e>
 8015948:	4e08      	ldr	r6, [pc, #32]	@ (801596c <rcutils_steady_time_now+0x48>)
 801594a:	2000      	movs	r0, #0
 801594c:	fba3 3206 	umull	r3, r2, r3, r6
 8015950:	195b      	adds	r3, r3, r5
 8015952:	fb06 2201 	mla	r2, r6, r1, r2
 8015956:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 801595a:	e9c4 3200 	strd	r3, r2, [r4]
 801595e:	b004      	add	sp, #16
 8015960:	bd70      	pop	{r4, r5, r6, pc}
 8015962:	2002      	movs	r0, #2
 8015964:	b004      	add	sp, #16
 8015966:	bd70      	pop	{r4, r5, r6, pc}
 8015968:	200b      	movs	r0, #11
 801596a:	4770      	bx	lr
 801596c:	3b9aca00 	.word	0x3b9aca00

08015970 <rmw_uros_set_custom_transport>:
 8015970:	b470      	push	{r4, r5, r6}
 8015972:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8015976:	b162      	cbz	r2, 8015992 <rmw_uros_set_custom_transport+0x22>
 8015978:	b15b      	cbz	r3, 8015992 <rmw_uros_set_custom_transport+0x22>
 801597a:	b155      	cbz	r5, 8015992 <rmw_uros_set_custom_transport+0x22>
 801597c:	b14e      	cbz	r6, 8015992 <rmw_uros_set_custom_transport+0x22>
 801597e:	4c06      	ldr	r4, [pc, #24]	@ (8015998 <rmw_uros_set_custom_transport+0x28>)
 8015980:	7020      	strb	r0, [r4, #0]
 8015982:	2000      	movs	r0, #0
 8015984:	6166      	str	r6, [r4, #20]
 8015986:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801598a:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801598e:	bc70      	pop	{r4, r5, r6}
 8015990:	4770      	bx	lr
 8015992:	200b      	movs	r0, #11
 8015994:	bc70      	pop	{r4, r5, r6}
 8015996:	4770      	bx	lr
 8015998:	2406493c 	.word	0x2406493c

0801599c <get_message_typesupport_handle>:
 801599c:	6883      	ldr	r3, [r0, #8]
 801599e:	4718      	bx	r3

080159a0 <get_message_typesupport_handle_function>:
 80159a0:	b510      	push	{r4, lr}
 80159a2:	4604      	mov	r4, r0
 80159a4:	6800      	ldr	r0, [r0, #0]
 80159a6:	f7ea fc9b 	bl	80002e0 <strcmp>
 80159aa:	2800      	cmp	r0, #0
 80159ac:	bf0c      	ite	eq
 80159ae:	4620      	moveq	r0, r4
 80159b0:	2000      	movne	r0, #0
 80159b2:	bd10      	pop	{r4, pc}

080159b4 <get_service_typesupport_handle>:
 80159b4:	6883      	ldr	r3, [r0, #8]
 80159b6:	4718      	bx	r3

080159b8 <get_service_typesupport_handle_function>:
 80159b8:	b510      	push	{r4, lr}
 80159ba:	4604      	mov	r4, r0
 80159bc:	6800      	ldr	r0, [r0, #0]
 80159be:	f7ea fc8f 	bl	80002e0 <strcmp>
 80159c2:	2800      	cmp	r0, #0
 80159c4:	bf0c      	ite	eq
 80159c6:	4620      	moveq	r0, r4
 80159c8:	2000      	movne	r0, #0
 80159ca:	bd10      	pop	{r4, pc}

080159cc <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80159cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159d0:	6805      	ldr	r5, [r0, #0]
 80159d2:	4604      	mov	r4, r0
 80159d4:	460e      	mov	r6, r1
 80159d6:	4628      	mov	r0, r5
 80159d8:	f7ea fc82 	bl	80002e0 <strcmp>
 80159dc:	b1c8      	cbz	r0, 8015a12 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80159de:	4b11      	ldr	r3, [pc, #68]	@ (8015a24 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	429d      	cmp	r5, r3
 80159e4:	d112      	bne.n	8015a0c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80159e6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80159ea:	f8d8 4000 	ldr.w	r4, [r8]
 80159ee:	b16c      	cbz	r4, 8015a0c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80159f0:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80159f4:	2700      	movs	r7, #0
 80159f6:	3d04      	subs	r5, #4
 80159f8:	4631      	mov	r1, r6
 80159fa:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80159fe:	f7ea fc6f 	bl	80002e0 <strcmp>
 8015a02:	00bb      	lsls	r3, r7, #2
 8015a04:	b140      	cbz	r0, 8015a18 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8015a06:	3701      	adds	r7, #1
 8015a08:	42bc      	cmp	r4, r7
 8015a0a:	d1f5      	bne.n	80159f8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8015a0c:	2000      	movs	r0, #0
 8015a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a12:	4620      	mov	r0, r4
 8015a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a18:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015a1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015a20:	58d3      	ldr	r3, [r2, r3]
 8015a22:	4718      	bx	r3
 8015a24:	24000e10 	.word	0x24000e10

08015a28 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 8015a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a2c:	6805      	ldr	r5, [r0, #0]
 8015a2e:	4604      	mov	r4, r0
 8015a30:	460e      	mov	r6, r1
 8015a32:	4628      	mov	r0, r5
 8015a34:	f7ea fc54 	bl	80002e0 <strcmp>
 8015a38:	b1c8      	cbz	r0, 8015a6e <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 8015a3a:	4b11      	ldr	r3, [pc, #68]	@ (8015a80 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	429d      	cmp	r5, r3
 8015a40:	d112      	bne.n	8015a68 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8015a42:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8015a46:	f8d8 4000 	ldr.w	r4, [r8]
 8015a4a:	b16c      	cbz	r4, 8015a68 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8015a4c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015a50:	2700      	movs	r7, #0
 8015a52:	3d04      	subs	r5, #4
 8015a54:	4631      	mov	r1, r6
 8015a56:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8015a5a:	f7ea fc41 	bl	80002e0 <strcmp>
 8015a5e:	00bb      	lsls	r3, r7, #2
 8015a60:	b140      	cbz	r0, 8015a74 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 8015a62:	3701      	adds	r7, #1
 8015a64:	42bc      	cmp	r4, r7
 8015a66:	d1f5      	bne.n	8015a54 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 8015a68:	2000      	movs	r0, #0
 8015a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a6e:	4620      	mov	r0, r4
 8015a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a74:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015a78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015a7c:	58d3      	ldr	r3, [r2, r3]
 8015a7e:	4718      	bx	r3
 8015a80:	24000e10 	.word	0x24000e10

08015a84 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 8015a84:	f006 b8be 	b.w	801bc04 <std_msgs__msg__Header__init>

08015a88 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 8015a88:	f006 b8e0 	b.w	801bc4c <std_msgs__msg__Header__fini>

08015a8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8015a8c:	b508      	push	{r3, lr}
 8015a8e:	f7fd fb8b 	bl	80131a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8015a92:	4b06      	ldr	r3, [pc, #24]	@ (8015aac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8015a94:	4906      	ldr	r1, [pc, #24]	@ (8015ab0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 8015a96:	681a      	ldr	r2, [r3, #0]
 8015a98:	60c8      	str	r0, [r1, #12]
 8015a9a:	b10a      	cbz	r2, 8015aa0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 8015a9c:	4803      	ldr	r0, [pc, #12]	@ (8015aac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8015a9e:	bd08      	pop	{r3, pc}
 8015aa0:	4a04      	ldr	r2, [pc, #16]	@ (8015ab4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 8015aa2:	4802      	ldr	r0, [pc, #8]	@ (8015aac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8015aa4:	6812      	ldr	r2, [r2, #0]
 8015aa6:	601a      	str	r2, [r3, #0]
 8015aa8:	bd08      	pop	{r3, pc}
 8015aaa:	bf00      	nop
 8015aac:	24000e90 	.word	0x24000e90
 8015ab0:	24000e18 	.word	0x24000e18
 8015ab4:	24000e14 	.word	0x24000e14

08015ab8 <_Header__max_serialized_size>:
 8015ab8:	b500      	push	{lr}
 8015aba:	b083      	sub	sp, #12
 8015abc:	2301      	movs	r3, #1
 8015abe:	2100      	movs	r1, #0
 8015ac0:	f10d 0007 	add.w	r0, sp, #7
 8015ac4:	f88d 3007 	strb.w	r3, [sp, #7]
 8015ac8:	f7fd fbcc 	bl	8013264 <max_serialized_size_builtin_interfaces__msg__Time>
 8015acc:	b003      	add	sp, #12
 8015ace:	f85d fb04 	ldr.w	pc, [sp], #4
 8015ad2:	bf00      	nop

08015ad4 <get_serialized_size_std_msgs__msg__Header>:
 8015ad4:	b570      	push	{r4, r5, r6, lr}
 8015ad6:	4605      	mov	r5, r0
 8015ad8:	b168      	cbz	r0, 8015af6 <get_serialized_size_std_msgs__msg__Header+0x22>
 8015ada:	460c      	mov	r4, r1
 8015adc:	f7fd fb72 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8015ae0:	2104      	movs	r1, #4
 8015ae2:	1826      	adds	r6, r4, r0
 8015ae4:	f1c4 0405 	rsb	r4, r4, #5
 8015ae8:	4630      	mov	r0, r6
 8015aea:	f7fe fe6f 	bl	80147cc <ucdr_alignment>
 8015aee:	68e9      	ldr	r1, [r5, #12]
 8015af0:	440c      	add	r4, r1
 8015af2:	4404      	add	r4, r0
 8015af4:	19a0      	adds	r0, r4, r6
 8015af6:	bd70      	pop	{r4, r5, r6, pc}

08015af8 <_Header__cdr_deserialize>:
 8015af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015afa:	460c      	mov	r4, r1
 8015afc:	b083      	sub	sp, #12
 8015afe:	b1e9      	cbz	r1, 8015b3c <_Header__cdr_deserialize+0x44>
 8015b00:	4606      	mov	r6, r0
 8015b02:	f7fd fbc3 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8015b06:	4603      	mov	r3, r0
 8015b08:	4621      	mov	r1, r4
 8015b0a:	4630      	mov	r0, r6
 8015b0c:	685b      	ldr	r3, [r3, #4]
 8015b0e:	68db      	ldr	r3, [r3, #12]
 8015b10:	4798      	blx	r3
 8015b12:	6927      	ldr	r7, [r4, #16]
 8015b14:	ab01      	add	r3, sp, #4
 8015b16:	68a1      	ldr	r1, [r4, #8]
 8015b18:	463a      	mov	r2, r7
 8015b1a:	4630      	mov	r0, r6
 8015b1c:	f000 fc86 	bl	801642c <ucdr_deserialize_sequence_char>
 8015b20:	9b01      	ldr	r3, [sp, #4]
 8015b22:	4605      	mov	r5, r0
 8015b24:	b920      	cbnz	r0, 8015b30 <_Header__cdr_deserialize+0x38>
 8015b26:	429f      	cmp	r7, r3
 8015b28:	d30c      	bcc.n	8015b44 <_Header__cdr_deserialize+0x4c>
 8015b2a:	4628      	mov	r0, r5
 8015b2c:	b003      	add	sp, #12
 8015b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b30:	b103      	cbz	r3, 8015b34 <_Header__cdr_deserialize+0x3c>
 8015b32:	3b01      	subs	r3, #1
 8015b34:	4628      	mov	r0, r5
 8015b36:	60e3      	str	r3, [r4, #12]
 8015b38:	b003      	add	sp, #12
 8015b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b3c:	460d      	mov	r5, r1
 8015b3e:	4628      	mov	r0, r5
 8015b40:	b003      	add	sp, #12
 8015b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b44:	2101      	movs	r1, #1
 8015b46:	4630      	mov	r0, r6
 8015b48:	75b5      	strb	r5, [r6, #22]
 8015b4a:	7571      	strb	r1, [r6, #21]
 8015b4c:	60e5      	str	r5, [r4, #12]
 8015b4e:	f7fe fe55 	bl	80147fc <ucdr_align_to>
 8015b52:	4630      	mov	r0, r6
 8015b54:	9901      	ldr	r1, [sp, #4]
 8015b56:	f7fe fe89 	bl	801486c <ucdr_advance_buffer>
 8015b5a:	4628      	mov	r0, r5
 8015b5c:	b003      	add	sp, #12
 8015b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015b60 <_Header__cdr_serialize>:
 8015b60:	b308      	cbz	r0, 8015ba6 <_Header__cdr_serialize+0x46>
 8015b62:	b570      	push	{r4, r5, r6, lr}
 8015b64:	4604      	mov	r4, r0
 8015b66:	460d      	mov	r5, r1
 8015b68:	f7fd fb90 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	4629      	mov	r1, r5
 8015b70:	4620      	mov	r0, r4
 8015b72:	685b      	ldr	r3, [r3, #4]
 8015b74:	689b      	ldr	r3, [r3, #8]
 8015b76:	4798      	blx	r3
 8015b78:	68a6      	ldr	r6, [r4, #8]
 8015b7a:	b15e      	cbz	r6, 8015b94 <_Header__cdr_serialize+0x34>
 8015b7c:	4630      	mov	r0, r6
 8015b7e:	f7ea fbb9 	bl	80002f4 <strlen>
 8015b82:	4603      	mov	r3, r0
 8015b84:	1c42      	adds	r2, r0, #1
 8015b86:	4631      	mov	r1, r6
 8015b88:	4628      	mov	r0, r5
 8015b8a:	60e3      	str	r3, [r4, #12]
 8015b8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b90:	f000 bc3a 	b.w	8016408 <ucdr_serialize_sequence_char>
 8015b94:	4633      	mov	r3, r6
 8015b96:	4632      	mov	r2, r6
 8015b98:	4631      	mov	r1, r6
 8015b9a:	4628      	mov	r0, r5
 8015b9c:	60e3      	str	r3, [r4, #12]
 8015b9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ba2:	f000 bc31 	b.w	8016408 <ucdr_serialize_sequence_char>
 8015ba6:	4770      	bx	lr

08015ba8 <_Header__get_serialized_size>:
 8015ba8:	b538      	push	{r3, r4, r5, lr}
 8015baa:	4604      	mov	r4, r0
 8015bac:	b150      	cbz	r0, 8015bc4 <_Header__get_serialized_size+0x1c>
 8015bae:	2100      	movs	r1, #0
 8015bb0:	f7fd fb08 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8015bb4:	2104      	movs	r1, #4
 8015bb6:	4605      	mov	r5, r0
 8015bb8:	f7fe fe08 	bl	80147cc <ucdr_alignment>
 8015bbc:	68e2      	ldr	r2, [r4, #12]
 8015bbe:	3205      	adds	r2, #5
 8015bc0:	1953      	adds	r3, r2, r5
 8015bc2:	4418      	add	r0, r3
 8015bc4:	bd38      	pop	{r3, r4, r5, pc}
 8015bc6:	bf00      	nop

08015bc8 <max_serialized_size_std_msgs__msg__Header>:
 8015bc8:	2301      	movs	r3, #1
 8015bca:	b510      	push	{r4, lr}
 8015bcc:	7003      	strb	r3, [r0, #0]
 8015bce:	4604      	mov	r4, r0
 8015bd0:	f7fd fb48 	bl	8013264 <max_serialized_size_builtin_interfaces__msg__Time>
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	7023      	strb	r3, [r4, #0]
 8015bd8:	bd10      	pop	{r4, pc}
 8015bda:	bf00      	nop

08015bdc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8015bdc:	4800      	ldr	r0, [pc, #0]	@ (8015be0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 8015bde:	4770      	bx	lr
 8015be0:	24000e9c 	.word	0x24000e9c

08015be4 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8015be4:	4b04      	ldr	r3, [pc, #16]	@ (8015bf8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 8015be6:	681a      	ldr	r2, [r3, #0]
 8015be8:	b10a      	cbz	r2, 8015bee <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xa>
 8015bea:	4803      	ldr	r0, [pc, #12]	@ (8015bf8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 8015bec:	4770      	bx	lr
 8015bee:	4a03      	ldr	r2, [pc, #12]	@ (8015bfc <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x18>)
 8015bf0:	4801      	ldr	r0, [pc, #4]	@ (8015bf8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 8015bf2:	6812      	ldr	r2, [r2, #0]
 8015bf4:	601a      	str	r2, [r3, #0]
 8015bf6:	4770      	bx	lr
 8015bf8:	24000ecc 	.word	0x24000ecc
 8015bfc:	24000e10 	.word	0x24000e10

08015c00 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8015c00:	4a02      	ldr	r2, [pc, #8]	@ (8015c0c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xc>)
 8015c02:	4b03      	ldr	r3, [pc, #12]	@ (8015c10 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x10>)
 8015c04:	6812      	ldr	r2, [r2, #0]
 8015c06:	601a      	str	r2, [r3, #0]
 8015c08:	4770      	bx	lr
 8015c0a:	bf00      	nop
 8015c0c:	24000e10 	.word	0x24000e10
 8015c10:	24000ecc 	.word	0x24000ecc

08015c14 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8015c14:	4b04      	ldr	r3, [pc, #16]	@ (8015c28 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 8015c16:	681a      	ldr	r2, [r3, #0]
 8015c18:	b10a      	cbz	r2, 8015c1e <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xa>
 8015c1a:	4803      	ldr	r0, [pc, #12]	@ (8015c28 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 8015c1c:	4770      	bx	lr
 8015c1e:	4a03      	ldr	r2, [pc, #12]	@ (8015c2c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x18>)
 8015c20:	4801      	ldr	r0, [pc, #4]	@ (8015c28 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 8015c22:	6812      	ldr	r2, [r2, #0]
 8015c24:	601a      	str	r2, [r3, #0]
 8015c26:	4770      	bx	lr
 8015c28:	24000ee0 	.word	0x24000ee0
 8015c2c:	24000e10 	.word	0x24000e10

08015c30 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8015c30:	4a02      	ldr	r2, [pc, #8]	@ (8015c3c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xc>)
 8015c32:	4b03      	ldr	r3, [pc, #12]	@ (8015c40 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x10>)
 8015c34:	6812      	ldr	r2, [r2, #0]
 8015c36:	601a      	str	r2, [r3, #0]
 8015c38:	4770      	bx	lr
 8015c3a:	bf00      	nop
 8015c3c:	24000e10 	.word	0x24000e10
 8015c40:	24000ee0 	.word	0x24000ee0

08015c44 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8015c44:	4b04      	ldr	r3, [pc, #16]	@ (8015c58 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 8015c46:	681a      	ldr	r2, [r3, #0]
 8015c48:	b10a      	cbz	r2, 8015c4e <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xa>
 8015c4a:	4803      	ldr	r0, [pc, #12]	@ (8015c58 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 8015c4c:	4770      	bx	lr
 8015c4e:	4a03      	ldr	r2, [pc, #12]	@ (8015c5c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x18>)
 8015c50:	4801      	ldr	r0, [pc, #4]	@ (8015c58 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 8015c52:	6812      	ldr	r2, [r2, #0]
 8015c54:	601a      	str	r2, [r3, #0]
 8015c56:	4770      	bx	lr
 8015c58:	24000ef4 	.word	0x24000ef4
 8015c5c:	24000e10 	.word	0x24000e10

08015c60 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8015c60:	4a02      	ldr	r2, [pc, #8]	@ (8015c6c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xc>)
 8015c62:	4b03      	ldr	r3, [pc, #12]	@ (8015c70 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x10>)
 8015c64:	6812      	ldr	r2, [r2, #0]
 8015c66:	601a      	str	r2, [r3, #0]
 8015c68:	4770      	bx	lr
 8015c6a:	bf00      	nop
 8015c6c:	24000e10 	.word	0x24000e10
 8015c70:	24000ef4 	.word	0x24000ef4

08015c74 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8015c74:	4b04      	ldr	r3, [pc, #16]	@ (8015c88 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 8015c76:	681a      	ldr	r2, [r3, #0]
 8015c78:	b10a      	cbz	r2, 8015c7e <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xa>
 8015c7a:	4803      	ldr	r0, [pc, #12]	@ (8015c88 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 8015c7c:	4770      	bx	lr
 8015c7e:	4a03      	ldr	r2, [pc, #12]	@ (8015c8c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x18>)
 8015c80:	4801      	ldr	r0, [pc, #4]	@ (8015c88 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 8015c82:	6812      	ldr	r2, [r2, #0]
 8015c84:	601a      	str	r2, [r3, #0]
 8015c86:	4770      	bx	lr
 8015c88:	24000f08 	.word	0x24000f08
 8015c8c:	24000e10 	.word	0x24000e10

08015c90 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8015c90:	4a02      	ldr	r2, [pc, #8]	@ (8015c9c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xc>)
 8015c92:	4b03      	ldr	r3, [pc, #12]	@ (8015ca0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x10>)
 8015c94:	6812      	ldr	r2, [r2, #0]
 8015c96:	601a      	str	r2, [r3, #0]
 8015c98:	4770      	bx	lr
 8015c9a:	bf00      	nop
 8015c9c:	24000e10 	.word	0x24000e10
 8015ca0:	24000f08 	.word	0x24000f08

08015ca4 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_init_function>:
 8015ca4:	f005 bfde 	b.w	801bc64 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>

08015ca8 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_fini_function>:
 8015ca8:	f006 b800 	b.w	801bcac <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>

08015cac <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8015cac:	b510      	push	{r4, lr}
 8015cae:	4c08      	ldr	r4, [pc, #32]	@ (8015cd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x24>)
 8015cb0:	f7ff feec 	bl	8015a8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8015cb4:	60e0      	str	r0, [r4, #12]
 8015cb6:	f006 f865 	bl	801bd84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8015cba:	4b06      	ldr	r3, [pc, #24]	@ (8015cd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8015cbc:	64a0      	str	r0, [r4, #72]	@ 0x48
 8015cbe:	681a      	ldr	r2, [r3, #0]
 8015cc0:	b10a      	cbz	r2, 8015cc6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1a>
 8015cc2:	4804      	ldr	r0, [pc, #16]	@ (8015cd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8015cc4:	bd10      	pop	{r4, pc}
 8015cc6:	4a04      	ldr	r2, [pc, #16]	@ (8015cd8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x2c>)
 8015cc8:	4802      	ldr	r0, [pc, #8]	@ (8015cd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8015cca:	6812      	ldr	r2, [r2, #0]
 8015ccc:	601a      	str	r2, [r3, #0]
 8015cce:	bd10      	pop	{r4, pc}
 8015cd0:	24000f14 	.word	0x24000f14
 8015cd4:	24000f8c 	.word	0x24000f8c
 8015cd8:	24000e14 	.word	0x24000e14

08015cdc <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_init_function>:
 8015cdc:	f005 bff2 	b.w	801bcc4 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>

08015ce0 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_fini_function>:
 8015ce0:	f006 b814 	b.w	801bd0c <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>

08015ce4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8015ce4:	b510      	push	{r4, lr}
 8015ce6:	4c08      	ldr	r4, [pc, #32]	@ (8015d08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x24>)
 8015ce8:	f7ff fed0 	bl	8015a8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8015cec:	60e0      	str	r0, [r4, #12]
 8015cee:	f006 f85b 	bl	801bda8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8015cf2:	4b06      	ldr	r3, [pc, #24]	@ (8015d0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8015cf4:	64a0      	str	r0, [r4, #72]	@ 0x48
 8015cf6:	681a      	ldr	r2, [r3, #0]
 8015cf8:	b10a      	cbz	r2, 8015cfe <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1a>
 8015cfa:	4804      	ldr	r0, [pc, #16]	@ (8015d0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8015cfc:	bd10      	pop	{r4, pc}
 8015cfe:	4a04      	ldr	r2, [pc, #16]	@ (8015d10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x2c>)
 8015d00:	4802      	ldr	r0, [pc, #8]	@ (8015d0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8015d02:	6812      	ldr	r2, [r2, #0]
 8015d04:	601a      	str	r2, [r3, #0]
 8015d06:	bd10      	pop	{r4, pc}
 8015d08:	24000f98 	.word	0x24000f98
 8015d0c:	24001010 	.word	0x24001010
 8015d10:	24000e14 	.word	0x24000e14

08015d14 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_init_function>:
 8015d14:	f006 b806 	b.w	801bd24 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>

08015d18 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_fini_function>:
 8015d18:	f006 b816 	b.w	801bd48 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>

08015d1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8015d1c:	b508      	push	{r3, lr}
 8015d1e:	f7fd fa43 	bl	80131a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8015d22:	4b06      	ldr	r3, [pc, #24]	@ (8015d3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8015d24:	4906      	ldr	r1, [pc, #24]	@ (8015d40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x24>)
 8015d26:	681a      	ldr	r2, [r3, #0]
 8015d28:	60c8      	str	r0, [r1, #12]
 8015d2a:	b10a      	cbz	r2, 8015d30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>
 8015d2c:	4803      	ldr	r0, [pc, #12]	@ (8015d3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8015d2e:	bd08      	pop	{r3, pc}
 8015d30:	4a04      	ldr	r2, [pc, #16]	@ (8015d44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x28>)
 8015d32:	4802      	ldr	r0, [pc, #8]	@ (8015d3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8015d34:	6812      	ldr	r2, [r2, #0]
 8015d36:	601a      	str	r2, [r3, #0]
 8015d38:	bd08      	pop	{r3, pc}
 8015d3a:	bf00      	nop
 8015d3c:	24001094 	.word	0x24001094
 8015d40:	2400101c 	.word	0x2400101c
 8015d44:	24000e14 	.word	0x24000e14

08015d48 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_init_function>:
 8015d48:	f006 b802 	b.w	801bd50 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>

08015d4c <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_fini_function>:
 8015d4c:	f006 b812 	b.w	801bd74 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>

08015d50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8015d50:	b508      	push	{r3, lr}
 8015d52:	f7fd fa29 	bl	80131a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8015d56:	4b06      	ldr	r3, [pc, #24]	@ (8015d70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8015d58:	4906      	ldr	r1, [pc, #24]	@ (8015d74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x24>)
 8015d5a:	681a      	ldr	r2, [r3, #0]
 8015d5c:	60c8      	str	r0, [r1, #12]
 8015d5e:	b10a      	cbz	r2, 8015d64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>
 8015d60:	4803      	ldr	r0, [pc, #12]	@ (8015d70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8015d62:	bd08      	pop	{r3, pc}
 8015d64:	4a04      	ldr	r2, [pc, #16]	@ (8015d78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x28>)
 8015d66:	4802      	ldr	r0, [pc, #8]	@ (8015d70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8015d68:	6812      	ldr	r2, [r2, #0]
 8015d6a:	601a      	str	r2, [r3, #0]
 8015d6c:	bd08      	pop	{r3, pc}
 8015d6e:	bf00      	nop
 8015d70:	24001118 	.word	0x24001118
 8015d74:	240010a0 	.word	0x240010a0
 8015d78:	24000e14 	.word	0x24000e14

08015d7c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8015d7c:	b538      	push	{r3, r4, r5, lr}
 8015d7e:	4604      	mov	r4, r0
 8015d80:	b150      	cbz	r0, 8015d98 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1c>
 8015d82:	460d      	mov	r5, r1
 8015d84:	f7ff fea6 	bl	8015ad4 <get_serialized_size_std_msgs__msg__Header>
 8015d88:	4603      	mov	r3, r0
 8015d8a:	f104 0018 	add.w	r0, r4, #24
 8015d8e:	461c      	mov	r4, r3
 8015d90:	18e9      	adds	r1, r5, r3
 8015d92:	f006 f817 	bl	801bdc4 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8015d96:	4420      	add	r0, r4
 8015d98:	bd38      	pop	{r3, r4, r5, pc}
 8015d9a:	bf00      	nop

08015d9c <_ActuationCommandStamped__cdr_deserialize>:
 8015d9c:	b570      	push	{r4, r5, r6, lr}
 8015d9e:	460c      	mov	r4, r1
 8015da0:	b199      	cbz	r1, 8015dca <_ActuationCommandStamped__cdr_deserialize+0x2e>
 8015da2:	4605      	mov	r5, r0
 8015da4:	f7ff ff1a 	bl	8015bdc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8015da8:	4603      	mov	r3, r0
 8015daa:	4621      	mov	r1, r4
 8015dac:	4628      	mov	r0, r5
 8015dae:	685b      	ldr	r3, [r3, #4]
 8015db0:	68db      	ldr	r3, [r3, #12]
 8015db2:	4798      	blx	r3
 8015db4:	f006 f88e 	bl	801bed4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8015db8:	4603      	mov	r3, r0
 8015dba:	f104 0118 	add.w	r1, r4, #24
 8015dbe:	4628      	mov	r0, r5
 8015dc0:	685b      	ldr	r3, [r3, #4]
 8015dc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015dc6:	68db      	ldr	r3, [r3, #12]
 8015dc8:	4718      	bx	r3
 8015dca:	4608      	mov	r0, r1
 8015dcc:	bd70      	pop	{r4, r5, r6, pc}
 8015dce:	bf00      	nop

08015dd0 <_ActuationCommandStamped__cdr_serialize>:
 8015dd0:	b510      	push	{r4, lr}
 8015dd2:	b082      	sub	sp, #8
 8015dd4:	9101      	str	r1, [sp, #4]
 8015dd6:	b1a0      	cbz	r0, 8015e02 <_ActuationCommandStamped__cdr_serialize+0x32>
 8015dd8:	4604      	mov	r4, r0
 8015dda:	f7ff feff 	bl	8015bdc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8015dde:	4603      	mov	r3, r0
 8015de0:	9901      	ldr	r1, [sp, #4]
 8015de2:	4620      	mov	r0, r4
 8015de4:	685b      	ldr	r3, [r3, #4]
 8015de6:	689b      	ldr	r3, [r3, #8]
 8015de8:	4798      	blx	r3
 8015dea:	f006 f873 	bl	801bed4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8015dee:	4603      	mov	r3, r0
 8015df0:	9901      	ldr	r1, [sp, #4]
 8015df2:	f104 0018 	add.w	r0, r4, #24
 8015df6:	685b      	ldr	r3, [r3, #4]
 8015df8:	689b      	ldr	r3, [r3, #8]
 8015dfa:	b002      	add	sp, #8
 8015dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e00:	4718      	bx	r3
 8015e02:	b002      	add	sp, #8
 8015e04:	bd10      	pop	{r4, pc}
 8015e06:	bf00      	nop

08015e08 <_ActuationCommandStamped__get_serialized_size>:
 8015e08:	b510      	push	{r4, lr}
 8015e0a:	4604      	mov	r4, r0
 8015e0c:	b148      	cbz	r0, 8015e22 <_ActuationCommandStamped__get_serialized_size+0x1a>
 8015e0e:	2100      	movs	r1, #0
 8015e10:	f7ff fe60 	bl	8015ad4 <get_serialized_size_std_msgs__msg__Header>
 8015e14:	4601      	mov	r1, r0
 8015e16:	f104 0018 	add.w	r0, r4, #24
 8015e1a:	460c      	mov	r4, r1
 8015e1c:	f005 ffd2 	bl	801bdc4 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8015e20:	4420      	add	r0, r4
 8015e22:	bd10      	pop	{r4, pc}

08015e24 <_ActuationCommandStamped__max_serialized_size>:
 8015e24:	b510      	push	{r4, lr}
 8015e26:	b082      	sub	sp, #8
 8015e28:	2301      	movs	r3, #1
 8015e2a:	2100      	movs	r1, #0
 8015e2c:	f10d 0007 	add.w	r0, sp, #7
 8015e30:	f88d 3007 	strb.w	r3, [sp, #7]
 8015e34:	f7ff fec8 	bl	8015bc8 <max_serialized_size_std_msgs__msg__Header>
 8015e38:	4604      	mov	r4, r0
 8015e3a:	f10d 0007 	add.w	r0, sp, #7
 8015e3e:	4621      	mov	r1, r4
 8015e40:	f006 f82e 	bl	801bea0 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8015e44:	4420      	add	r0, r4
 8015e46:	b002      	add	sp, #8
 8015e48:	bd10      	pop	{r4, pc}
 8015e4a:	bf00      	nop

08015e4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8015e4c:	4800      	ldr	r0, [pc, #0]	@ (8015e50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x4>)
 8015e4e:	4770      	bx	lr
 8015e50:	24001124 	.word	0x24001124

08015e54 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8015e54:	b538      	push	{r3, r4, r5, lr}
 8015e56:	4604      	mov	r4, r0
 8015e58:	b150      	cbz	r0, 8015e70 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1c>
 8015e5a:	460d      	mov	r5, r1
 8015e5c:	f7ff fe3a 	bl	8015ad4 <get_serialized_size_std_msgs__msg__Header>
 8015e60:	4603      	mov	r3, r0
 8015e62:	f104 0018 	add.w	r0, r4, #24
 8015e66:	461c      	mov	r4, r3
 8015e68:	18e9      	adds	r1, r5, r3
 8015e6a:	f006 f837 	bl	801bedc <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8015e6e:	4420      	add	r0, r4
 8015e70:	bd38      	pop	{r3, r4, r5, pc}
 8015e72:	bf00      	nop

08015e74 <_ActuationStatusStamped__cdr_deserialize>:
 8015e74:	b570      	push	{r4, r5, r6, lr}
 8015e76:	460c      	mov	r4, r1
 8015e78:	b199      	cbz	r1, 8015ea2 <_ActuationStatusStamped__cdr_deserialize+0x2e>
 8015e7a:	4605      	mov	r5, r0
 8015e7c:	f7ff feae 	bl	8015bdc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8015e80:	4603      	mov	r3, r0
 8015e82:	4621      	mov	r1, r4
 8015e84:	4628      	mov	r0, r5
 8015e86:	685b      	ldr	r3, [r3, #4]
 8015e88:	68db      	ldr	r3, [r3, #12]
 8015e8a:	4798      	blx	r3
 8015e8c:	f006 f8ae 	bl	801bfec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8015e90:	4603      	mov	r3, r0
 8015e92:	f104 0118 	add.w	r1, r4, #24
 8015e96:	4628      	mov	r0, r5
 8015e98:	685b      	ldr	r3, [r3, #4]
 8015e9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e9e:	68db      	ldr	r3, [r3, #12]
 8015ea0:	4718      	bx	r3
 8015ea2:	4608      	mov	r0, r1
 8015ea4:	bd70      	pop	{r4, r5, r6, pc}
 8015ea6:	bf00      	nop

08015ea8 <_ActuationStatusStamped__cdr_serialize>:
 8015ea8:	b510      	push	{r4, lr}
 8015eaa:	b082      	sub	sp, #8
 8015eac:	9101      	str	r1, [sp, #4]
 8015eae:	b1a0      	cbz	r0, 8015eda <_ActuationStatusStamped__cdr_serialize+0x32>
 8015eb0:	4604      	mov	r4, r0
 8015eb2:	f7ff fe93 	bl	8015bdc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8015eb6:	4603      	mov	r3, r0
 8015eb8:	9901      	ldr	r1, [sp, #4]
 8015eba:	4620      	mov	r0, r4
 8015ebc:	685b      	ldr	r3, [r3, #4]
 8015ebe:	689b      	ldr	r3, [r3, #8]
 8015ec0:	4798      	blx	r3
 8015ec2:	f006 f893 	bl	801bfec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8015ec6:	4603      	mov	r3, r0
 8015ec8:	9901      	ldr	r1, [sp, #4]
 8015eca:	f104 0018 	add.w	r0, r4, #24
 8015ece:	685b      	ldr	r3, [r3, #4]
 8015ed0:	689b      	ldr	r3, [r3, #8]
 8015ed2:	b002      	add	sp, #8
 8015ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ed8:	4718      	bx	r3
 8015eda:	b002      	add	sp, #8
 8015edc:	bd10      	pop	{r4, pc}
 8015ede:	bf00      	nop

08015ee0 <_ActuationStatusStamped__get_serialized_size>:
 8015ee0:	b510      	push	{r4, lr}
 8015ee2:	4604      	mov	r4, r0
 8015ee4:	b148      	cbz	r0, 8015efa <_ActuationStatusStamped__get_serialized_size+0x1a>
 8015ee6:	2100      	movs	r1, #0
 8015ee8:	f7ff fdf4 	bl	8015ad4 <get_serialized_size_std_msgs__msg__Header>
 8015eec:	4601      	mov	r1, r0
 8015eee:	f104 0018 	add.w	r0, r4, #24
 8015ef2:	460c      	mov	r4, r1
 8015ef4:	f005 fff2 	bl	801bedc <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8015ef8:	4420      	add	r0, r4
 8015efa:	bd10      	pop	{r4, pc}

08015efc <_ActuationStatusStamped__max_serialized_size>:
 8015efc:	b510      	push	{r4, lr}
 8015efe:	b082      	sub	sp, #8
 8015f00:	2301      	movs	r3, #1
 8015f02:	2100      	movs	r1, #0
 8015f04:	f10d 0007 	add.w	r0, sp, #7
 8015f08:	f88d 3007 	strb.w	r3, [sp, #7]
 8015f0c:	f7ff fe5c 	bl	8015bc8 <max_serialized_size_std_msgs__msg__Header>
 8015f10:	4604      	mov	r4, r0
 8015f12:	f10d 0007 	add.w	r0, sp, #7
 8015f16:	4621      	mov	r1, r4
 8015f18:	f006 f84e 	bl	801bfb8 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8015f1c:	4420      	add	r0, r4
 8015f1e:	b002      	add	sp, #8
 8015f20:	bd10      	pop	{r4, pc}
 8015f22:	bf00      	nop

08015f24 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8015f24:	4800      	ldr	r0, [pc, #0]	@ (8015f28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x4>)
 8015f26:	4770      	bx	lr
 8015f28:	2400114c 	.word	0x2400114c

08015f2c <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8015f2c:	b538      	push	{r3, r4, r5, lr}
 8015f2e:	b158      	cbz	r0, 8015f48 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x1c>
 8015f30:	460d      	mov	r5, r1
 8015f32:	f7fd f947 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8015f36:	2104      	movs	r1, #4
 8015f38:	182c      	adds	r4, r5, r0
 8015f3a:	f1c5 0504 	rsb	r5, r5, #4
 8015f3e:	4620      	mov	r0, r4
 8015f40:	f7fe fc44 	bl	80147cc <ucdr_alignment>
 8015f44:	4428      	add	r0, r5
 8015f46:	4420      	add	r0, r4
 8015f48:	bd38      	pop	{r3, r4, r5, pc}
 8015f4a:	bf00      	nop

08015f4c <_SteeringWheelStatusStamped__cdr_deserialize>:
 8015f4c:	b538      	push	{r3, r4, r5, lr}
 8015f4e:	460c      	mov	r4, r1
 8015f50:	b179      	cbz	r1, 8015f72 <_SteeringWheelStatusStamped__cdr_deserialize+0x26>
 8015f52:	4605      	mov	r5, r0
 8015f54:	f7fd f99a 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8015f58:	4603      	mov	r3, r0
 8015f5a:	4621      	mov	r1, r4
 8015f5c:	4628      	mov	r0, r5
 8015f5e:	685b      	ldr	r3, [r3, #4]
 8015f60:	68db      	ldr	r3, [r3, #12]
 8015f62:	4798      	blx	r3
 8015f64:	f104 0108 	add.w	r1, r4, #8
 8015f68:	4628      	mov	r0, r5
 8015f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015f6e:	f7fe b9af 	b.w	80142d0 <ucdr_deserialize_float>
 8015f72:	4608      	mov	r0, r1
 8015f74:	bd38      	pop	{r3, r4, r5, pc}
 8015f76:	bf00      	nop

08015f78 <_SteeringWheelStatusStamped__cdr_serialize>:
 8015f78:	b188      	cbz	r0, 8015f9e <_SteeringWheelStatusStamped__cdr_serialize+0x26>
 8015f7a:	b538      	push	{r3, r4, r5, lr}
 8015f7c:	4604      	mov	r4, r0
 8015f7e:	460d      	mov	r5, r1
 8015f80:	f7fd f984 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8015f84:	4603      	mov	r3, r0
 8015f86:	4629      	mov	r1, r5
 8015f88:	4620      	mov	r0, r4
 8015f8a:	685b      	ldr	r3, [r3, #4]
 8015f8c:	689b      	ldr	r3, [r3, #8]
 8015f8e:	4798      	blx	r3
 8015f90:	ed94 0a02 	vldr	s0, [r4, #8]
 8015f94:	4628      	mov	r0, r5
 8015f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015f9a:	f7fe b901 	b.w	80141a0 <ucdr_serialize_float>
 8015f9e:	4770      	bx	lr

08015fa0 <_SteeringWheelStatusStamped__get_serialized_size>:
 8015fa0:	b150      	cbz	r0, 8015fb8 <_SteeringWheelStatusStamped__get_serialized_size+0x18>
 8015fa2:	2100      	movs	r1, #0
 8015fa4:	b510      	push	{r4, lr}
 8015fa6:	f7fd f90d 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8015faa:	4604      	mov	r4, r0
 8015fac:	2104      	movs	r1, #4
 8015fae:	f7fe fc0d 	bl	80147cc <ucdr_alignment>
 8015fb2:	4420      	add	r0, r4
 8015fb4:	3004      	adds	r0, #4
 8015fb6:	bd10      	pop	{r4, pc}
 8015fb8:	4770      	bx	lr
 8015fba:	bf00      	nop

08015fbc <_SteeringWheelStatusStamped__max_serialized_size>:
 8015fbc:	b510      	push	{r4, lr}
 8015fbe:	b082      	sub	sp, #8
 8015fc0:	2301      	movs	r3, #1
 8015fc2:	2100      	movs	r1, #0
 8015fc4:	f10d 0007 	add.w	r0, sp, #7
 8015fc8:	f88d 3007 	strb.w	r3, [sp, #7]
 8015fcc:	f7fd f94a 	bl	8013264 <max_serialized_size_builtin_interfaces__msg__Time>
 8015fd0:	4604      	mov	r4, r0
 8015fd2:	2104      	movs	r1, #4
 8015fd4:	f7fe fbfa 	bl	80147cc <ucdr_alignment>
 8015fd8:	4420      	add	r0, r4
 8015fda:	3004      	adds	r0, #4
 8015fdc:	b002      	add	sp, #8
 8015fde:	bd10      	pop	{r4, pc}

08015fe0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8015fe0:	4800      	ldr	r0, [pc, #0]	@ (8015fe4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x4>)
 8015fe2:	4770      	bx	lr
 8015fe4:	24001174 	.word	0x24001174

08015fe8 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8015fe8:	b538      	push	{r3, r4, r5, lr}
 8015fea:	b158      	cbz	r0, 8016004 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x1c>
 8015fec:	460d      	mov	r5, r1
 8015fee:	f7fd f8e9 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8015ff2:	2101      	movs	r1, #1
 8015ff4:	182c      	adds	r4, r5, r0
 8015ff6:	f1c5 0501 	rsb	r5, r5, #1
 8015ffa:	4620      	mov	r0, r4
 8015ffc:	f7fe fbe6 	bl	80147cc <ucdr_alignment>
 8016000:	4428      	add	r0, r5
 8016002:	4420      	add	r0, r4
 8016004:	bd38      	pop	{r3, r4, r5, pc}
 8016006:	bf00      	nop

08016008 <_VehicleEmergencyStamped__cdr_deserialize>:
 8016008:	b538      	push	{r3, r4, r5, lr}
 801600a:	460c      	mov	r4, r1
 801600c:	b179      	cbz	r1, 801602e <_VehicleEmergencyStamped__cdr_deserialize+0x26>
 801600e:	4605      	mov	r5, r0
 8016010:	f7fd f93c 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016014:	4603      	mov	r3, r0
 8016016:	4621      	mov	r1, r4
 8016018:	4628      	mov	r0, r5
 801601a:	685b      	ldr	r3, [r3, #4]
 801601c:	68db      	ldr	r3, [r3, #12]
 801601e:	4798      	blx	r3
 8016020:	f104 0108 	add.w	r1, r4, #8
 8016024:	4628      	mov	r0, r5
 8016026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801602a:	f7fd b949 	b.w	80132c0 <ucdr_deserialize_bool>
 801602e:	4608      	mov	r0, r1
 8016030:	bd38      	pop	{r3, r4, r5, pc}
 8016032:	bf00      	nop

08016034 <_VehicleEmergencyStamped__cdr_serialize>:
 8016034:	b180      	cbz	r0, 8016058 <_VehicleEmergencyStamped__cdr_serialize+0x24>
 8016036:	b538      	push	{r3, r4, r5, lr}
 8016038:	4604      	mov	r4, r0
 801603a:	460d      	mov	r5, r1
 801603c:	f7fd f926 	bl	801328c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016040:	4603      	mov	r3, r0
 8016042:	4629      	mov	r1, r5
 8016044:	4620      	mov	r0, r4
 8016046:	685b      	ldr	r3, [r3, #4]
 8016048:	689b      	ldr	r3, [r3, #8]
 801604a:	4798      	blx	r3
 801604c:	7a21      	ldrb	r1, [r4, #8]
 801604e:	4628      	mov	r0, r5
 8016050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016054:	f7fd b91e 	b.w	8013294 <ucdr_serialize_bool>
 8016058:	4770      	bx	lr
 801605a:	bf00      	nop

0801605c <_VehicleEmergencyStamped__get_serialized_size>:
 801605c:	b150      	cbz	r0, 8016074 <_VehicleEmergencyStamped__get_serialized_size+0x18>
 801605e:	2100      	movs	r1, #0
 8016060:	b510      	push	{r4, lr}
 8016062:	f7fd f8af 	bl	80131c4 <get_serialized_size_builtin_interfaces__msg__Time>
 8016066:	4604      	mov	r4, r0
 8016068:	2101      	movs	r1, #1
 801606a:	f7fe fbaf 	bl	80147cc <ucdr_alignment>
 801606e:	4420      	add	r0, r4
 8016070:	3001      	adds	r0, #1
 8016072:	bd10      	pop	{r4, pc}
 8016074:	4770      	bx	lr
 8016076:	bf00      	nop

08016078 <_VehicleEmergencyStamped__max_serialized_size>:
 8016078:	b510      	push	{r4, lr}
 801607a:	b082      	sub	sp, #8
 801607c:	2401      	movs	r4, #1
 801607e:	2100      	movs	r1, #0
 8016080:	f10d 0007 	add.w	r0, sp, #7
 8016084:	f88d 4007 	strb.w	r4, [sp, #7]
 8016088:	f7fd f8ec 	bl	8013264 <max_serialized_size_builtin_interfaces__msg__Time>
 801608c:	4621      	mov	r1, r4
 801608e:	4604      	mov	r4, r0
 8016090:	f7fe fb9c 	bl	80147cc <ucdr_alignment>
 8016094:	4420      	add	r0, r4
 8016096:	3001      	adds	r0, #1
 8016098:	b002      	add	sp, #8
 801609a:	bd10      	pop	{r4, pc}

0801609c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 801609c:	4800      	ldr	r0, [pc, #0]	@ (80160a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x4>)
 801609e:	4770      	bx	lr
 80160a0:	2400119c 	.word	0x2400119c

080160a4 <autoware_control_msgs__msg__Control__init>:
 80160a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160a8:	4605      	mov	r5, r0
 80160aa:	b3c0      	cbz	r0, 801611e <autoware_control_msgs__msg__Control__init+0x7a>
 80160ac:	f000 f9a6 	bl	80163fc <builtin_interfaces__msg__Time__init>
 80160b0:	4604      	mov	r4, r0
 80160b2:	b310      	cbz	r0, 80160fa <autoware_control_msgs__msg__Control__init+0x56>
 80160b4:	f105 0608 	add.w	r6, r5, #8
 80160b8:	4630      	mov	r0, r6
 80160ba:	f000 f99f 	bl	80163fc <builtin_interfaces__msg__Time__init>
 80160be:	4604      	mov	r4, r0
 80160c0:	2800      	cmp	r0, #0
 80160c2:	d040      	beq.n	8016146 <autoware_control_msgs__msg__Control__init+0xa2>
 80160c4:	f105 0710 	add.w	r7, r5, #16
 80160c8:	4638      	mov	r0, r7
 80160ca:	f000 f855 	bl	8016178 <autoware_control_msgs__msg__Lateral__init>
 80160ce:	4604      	mov	r4, r0
 80160d0:	b348      	cbz	r0, 8016126 <autoware_control_msgs__msg__Control__init+0x82>
 80160d2:	f105 082c 	add.w	r8, r5, #44	@ 0x2c
 80160d6:	4640      	mov	r0, r8
 80160d8:	f000 f87e 	bl	80161d8 <autoware_control_msgs__msg__Longitudinal__init>
 80160dc:	4604      	mov	r4, r0
 80160de:	b9d8      	cbnz	r0, 8016118 <autoware_control_msgs__msg__Control__init+0x74>
 80160e0:	4628      	mov	r0, r5
 80160e2:	f000 f98f 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 80160e6:	4630      	mov	r0, r6
 80160e8:	f000 f98c 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 80160ec:	4638      	mov	r0, r7
 80160ee:	f000 f867 	bl	80161c0 <autoware_control_msgs__msg__Lateral__fini>
 80160f2:	4640      	mov	r0, r8
 80160f4:	f000 f894 	bl	8016220 <autoware_control_msgs__msg__Longitudinal__fini>
 80160f8:	e00e      	b.n	8016118 <autoware_control_msgs__msg__Control__init+0x74>
 80160fa:	4628      	mov	r0, r5
 80160fc:	f000 f982 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 8016100:	f105 0008 	add.w	r0, r5, #8
 8016104:	f000 f97e 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 8016108:	f105 0010 	add.w	r0, r5, #16
 801610c:	f000 f858 	bl	80161c0 <autoware_control_msgs__msg__Lateral__fini>
 8016110:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8016114:	f000 f884 	bl	8016220 <autoware_control_msgs__msg__Longitudinal__fini>
 8016118:	4620      	mov	r0, r4
 801611a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801611e:	4604      	mov	r4, r0
 8016120:	4620      	mov	r0, r4
 8016122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016126:	4628      	mov	r0, r5
 8016128:	f000 f96c 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 801612c:	4630      	mov	r0, r6
 801612e:	f000 f969 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 8016132:	4638      	mov	r0, r7
 8016134:	f000 f844 	bl	80161c0 <autoware_control_msgs__msg__Lateral__fini>
 8016138:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 801613c:	f000 f870 	bl	8016220 <autoware_control_msgs__msg__Longitudinal__fini>
 8016140:	4620      	mov	r0, r4
 8016142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016146:	4628      	mov	r0, r5
 8016148:	f000 f95c 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 801614c:	4630      	mov	r0, r6
 801614e:	e7d9      	b.n	8016104 <autoware_control_msgs__msg__Control__init+0x60>

08016150 <autoware_control_msgs__msg__Control__fini>:
 8016150:	b188      	cbz	r0, 8016176 <autoware_control_msgs__msg__Control__fini+0x26>
 8016152:	b510      	push	{r4, lr}
 8016154:	4604      	mov	r4, r0
 8016156:	f000 f955 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 801615a:	f104 0008 	add.w	r0, r4, #8
 801615e:	f000 f951 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 8016162:	f104 0010 	add.w	r0, r4, #16
 8016166:	f000 f82b 	bl	80161c0 <autoware_control_msgs__msg__Lateral__fini>
 801616a:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 801616e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016172:	f000 b855 	b.w	8016220 <autoware_control_msgs__msg__Longitudinal__fini>
 8016176:	4770      	bx	lr

08016178 <autoware_control_msgs__msg__Lateral__init>:
 8016178:	b570      	push	{r4, r5, r6, lr}
 801617a:	4605      	mov	r5, r0
 801617c:	b1a8      	cbz	r0, 80161aa <autoware_control_msgs__msg__Lateral__init+0x32>
 801617e:	f000 f93d 	bl	80163fc <builtin_interfaces__msg__Time__init>
 8016182:	4604      	mov	r4, r0
 8016184:	b140      	cbz	r0, 8016198 <autoware_control_msgs__msg__Lateral__init+0x20>
 8016186:	f105 0608 	add.w	r6, r5, #8
 801618a:	4630      	mov	r0, r6
 801618c:	f000 f936 	bl	80163fc <builtin_interfaces__msg__Time__init>
 8016190:	4604      	mov	r4, r0
 8016192:	b168      	cbz	r0, 80161b0 <autoware_control_msgs__msg__Lateral__init+0x38>
 8016194:	4620      	mov	r0, r4
 8016196:	bd70      	pop	{r4, r5, r6, pc}
 8016198:	4628      	mov	r0, r5
 801619a:	f000 f933 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 801619e:	f105 0008 	add.w	r0, r5, #8
 80161a2:	f000 f92f 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 80161a6:	4620      	mov	r0, r4
 80161a8:	bd70      	pop	{r4, r5, r6, pc}
 80161aa:	4604      	mov	r4, r0
 80161ac:	4620      	mov	r0, r4
 80161ae:	bd70      	pop	{r4, r5, r6, pc}
 80161b0:	4628      	mov	r0, r5
 80161b2:	f000 f927 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 80161b6:	4630      	mov	r0, r6
 80161b8:	f000 f924 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 80161bc:	e7ea      	b.n	8016194 <autoware_control_msgs__msg__Lateral__init+0x1c>
 80161be:	bf00      	nop

080161c0 <autoware_control_msgs__msg__Lateral__fini>:
 80161c0:	b148      	cbz	r0, 80161d6 <autoware_control_msgs__msg__Lateral__fini+0x16>
 80161c2:	b510      	push	{r4, lr}
 80161c4:	4604      	mov	r4, r0
 80161c6:	f000 f91d 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 80161ca:	f104 0008 	add.w	r0, r4, #8
 80161ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80161d2:	f000 b917 	b.w	8016404 <builtin_interfaces__msg__Time__fini>
 80161d6:	4770      	bx	lr

080161d8 <autoware_control_msgs__msg__Longitudinal__init>:
 80161d8:	b570      	push	{r4, r5, r6, lr}
 80161da:	4605      	mov	r5, r0
 80161dc:	b1a8      	cbz	r0, 801620a <autoware_control_msgs__msg__Longitudinal__init+0x32>
 80161de:	f000 f90d 	bl	80163fc <builtin_interfaces__msg__Time__init>
 80161e2:	4604      	mov	r4, r0
 80161e4:	b140      	cbz	r0, 80161f8 <autoware_control_msgs__msg__Longitudinal__init+0x20>
 80161e6:	f105 0608 	add.w	r6, r5, #8
 80161ea:	4630      	mov	r0, r6
 80161ec:	f000 f906 	bl	80163fc <builtin_interfaces__msg__Time__init>
 80161f0:	4604      	mov	r4, r0
 80161f2:	b168      	cbz	r0, 8016210 <autoware_control_msgs__msg__Longitudinal__init+0x38>
 80161f4:	4620      	mov	r0, r4
 80161f6:	bd70      	pop	{r4, r5, r6, pc}
 80161f8:	4628      	mov	r0, r5
 80161fa:	f000 f903 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 80161fe:	f105 0008 	add.w	r0, r5, #8
 8016202:	f000 f8ff 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 8016206:	4620      	mov	r0, r4
 8016208:	bd70      	pop	{r4, r5, r6, pc}
 801620a:	4604      	mov	r4, r0
 801620c:	4620      	mov	r0, r4
 801620e:	bd70      	pop	{r4, r5, r6, pc}
 8016210:	4628      	mov	r0, r5
 8016212:	f000 f8f7 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 8016216:	4630      	mov	r0, r6
 8016218:	f000 f8f4 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 801621c:	e7ea      	b.n	80161f4 <autoware_control_msgs__msg__Longitudinal__init+0x1c>
 801621e:	bf00      	nop

08016220 <autoware_control_msgs__msg__Longitudinal__fini>:
 8016220:	b148      	cbz	r0, 8016236 <autoware_control_msgs__msg__Longitudinal__fini+0x16>
 8016222:	b510      	push	{r4, lr}
 8016224:	4604      	mov	r4, r0
 8016226:	f000 f8ed 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 801622a:	f104 0008 	add.w	r0, r4, #8
 801622e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016232:	f000 b8e7 	b.w	8016404 <builtin_interfaces__msg__Time__fini>
 8016236:	4770      	bx	lr

08016238 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init>:
 8016238:	b538      	push	{r3, r4, r5, lr}
 801623a:	4604      	mov	r4, r0
 801623c:	b128      	cbz	r0, 801624a <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init+0x12>
 801623e:	f000 f8dd 	bl	80163fc <builtin_interfaces__msg__Time__init>
 8016242:	4605      	mov	r5, r0
 8016244:	b120      	cbz	r0, 8016250 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init+0x18>
 8016246:	4628      	mov	r0, r5
 8016248:	bd38      	pop	{r3, r4, r5, pc}
 801624a:	4605      	mov	r5, r0
 801624c:	4628      	mov	r0, r5
 801624e:	bd38      	pop	{r3, r4, r5, pc}
 8016250:	4620      	mov	r0, r4
 8016252:	f000 f8d7 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 8016256:	4628      	mov	r0, r5
 8016258:	bd38      	pop	{r3, r4, r5, pc}
 801625a:	bf00      	nop

0801625c <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini>:
 801625c:	b108      	cbz	r0, 8016262 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini+0x6>
 801625e:	f000 b8d1 	b.w	8016404 <builtin_interfaces__msg__Time__fini>
 8016262:	4770      	bx	lr

08016264 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__init>:
 8016264:	3800      	subs	r0, #0
 8016266:	bf18      	it	ne
 8016268:	2001      	movne	r0, #1
 801626a:	4770      	bx	lr

0801626c <autoware_vehicle_msgs__srv__ControlModeCommand_Response__fini>:
 801626c:	4770      	bx	lr
 801626e:	bf00      	nop

08016270 <autoware_vehicle_msgs__msg__ControlModeReport__init>:
 8016270:	b538      	push	{r3, r4, r5, lr}
 8016272:	4604      	mov	r4, r0
 8016274:	b128      	cbz	r0, 8016282 <autoware_vehicle_msgs__msg__ControlModeReport__init+0x12>
 8016276:	f000 f8c1 	bl	80163fc <builtin_interfaces__msg__Time__init>
 801627a:	4605      	mov	r5, r0
 801627c:	b120      	cbz	r0, 8016288 <autoware_vehicle_msgs__msg__ControlModeReport__init+0x18>
 801627e:	4628      	mov	r0, r5
 8016280:	bd38      	pop	{r3, r4, r5, pc}
 8016282:	4605      	mov	r5, r0
 8016284:	4628      	mov	r0, r5
 8016286:	bd38      	pop	{r3, r4, r5, pc}
 8016288:	4620      	mov	r0, r4
 801628a:	f000 f8bb 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 801628e:	4628      	mov	r0, r5
 8016290:	bd38      	pop	{r3, r4, r5, pc}
 8016292:	bf00      	nop

08016294 <autoware_vehicle_msgs__msg__ControlModeReport__fini>:
 8016294:	b108      	cbz	r0, 801629a <autoware_vehicle_msgs__msg__ControlModeReport__fini+0x6>
 8016296:	f000 b8b5 	b.w	8016404 <builtin_interfaces__msg__Time__fini>
 801629a:	4770      	bx	lr

0801629c <autoware_vehicle_msgs__msg__GearCommand__init>:
 801629c:	b538      	push	{r3, r4, r5, lr}
 801629e:	4604      	mov	r4, r0
 80162a0:	b128      	cbz	r0, 80162ae <autoware_vehicle_msgs__msg__GearCommand__init+0x12>
 80162a2:	f000 f8ab 	bl	80163fc <builtin_interfaces__msg__Time__init>
 80162a6:	4605      	mov	r5, r0
 80162a8:	b120      	cbz	r0, 80162b4 <autoware_vehicle_msgs__msg__GearCommand__init+0x18>
 80162aa:	4628      	mov	r0, r5
 80162ac:	bd38      	pop	{r3, r4, r5, pc}
 80162ae:	4605      	mov	r5, r0
 80162b0:	4628      	mov	r0, r5
 80162b2:	bd38      	pop	{r3, r4, r5, pc}
 80162b4:	4620      	mov	r0, r4
 80162b6:	f000 f8a5 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 80162ba:	4628      	mov	r0, r5
 80162bc:	bd38      	pop	{r3, r4, r5, pc}
 80162be:	bf00      	nop

080162c0 <autoware_vehicle_msgs__msg__GearCommand__fini>:
 80162c0:	b108      	cbz	r0, 80162c6 <autoware_vehicle_msgs__msg__GearCommand__fini+0x6>
 80162c2:	f000 b89f 	b.w	8016404 <builtin_interfaces__msg__Time__fini>
 80162c6:	4770      	bx	lr

080162c8 <autoware_vehicle_msgs__msg__GearReport__init>:
 80162c8:	b538      	push	{r3, r4, r5, lr}
 80162ca:	4604      	mov	r4, r0
 80162cc:	b128      	cbz	r0, 80162da <autoware_vehicle_msgs__msg__GearReport__init+0x12>
 80162ce:	f000 f895 	bl	80163fc <builtin_interfaces__msg__Time__init>
 80162d2:	4605      	mov	r5, r0
 80162d4:	b120      	cbz	r0, 80162e0 <autoware_vehicle_msgs__msg__GearReport__init+0x18>
 80162d6:	4628      	mov	r0, r5
 80162d8:	bd38      	pop	{r3, r4, r5, pc}
 80162da:	4605      	mov	r5, r0
 80162dc:	4628      	mov	r0, r5
 80162de:	bd38      	pop	{r3, r4, r5, pc}
 80162e0:	4620      	mov	r0, r4
 80162e2:	f000 f88f 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 80162e6:	4628      	mov	r0, r5
 80162e8:	bd38      	pop	{r3, r4, r5, pc}
 80162ea:	bf00      	nop

080162ec <autoware_vehicle_msgs__msg__GearReport__fini>:
 80162ec:	b108      	cbz	r0, 80162f2 <autoware_vehicle_msgs__msg__GearReport__fini+0x6>
 80162ee:	f000 b889 	b.w	8016404 <builtin_interfaces__msg__Time__fini>
 80162f2:	4770      	bx	lr

080162f4 <autoware_vehicle_msgs__msg__HazardLightsCommand__init>:
 80162f4:	b538      	push	{r3, r4, r5, lr}
 80162f6:	4604      	mov	r4, r0
 80162f8:	b128      	cbz	r0, 8016306 <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x12>
 80162fa:	f000 f87f 	bl	80163fc <builtin_interfaces__msg__Time__init>
 80162fe:	4605      	mov	r5, r0
 8016300:	b120      	cbz	r0, 801630c <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x18>
 8016302:	4628      	mov	r0, r5
 8016304:	bd38      	pop	{r3, r4, r5, pc}
 8016306:	4605      	mov	r5, r0
 8016308:	4628      	mov	r0, r5
 801630a:	bd38      	pop	{r3, r4, r5, pc}
 801630c:	4620      	mov	r0, r4
 801630e:	f000 f879 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 8016312:	4628      	mov	r0, r5
 8016314:	bd38      	pop	{r3, r4, r5, pc}
 8016316:	bf00      	nop

08016318 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>:
 8016318:	b108      	cbz	r0, 801631e <autoware_vehicle_msgs__msg__HazardLightsCommand__fini+0x6>
 801631a:	f000 b873 	b.w	8016404 <builtin_interfaces__msg__Time__fini>
 801631e:	4770      	bx	lr

08016320 <autoware_vehicle_msgs__msg__HazardLightsReport__init>:
 8016320:	b538      	push	{r3, r4, r5, lr}
 8016322:	4604      	mov	r4, r0
 8016324:	b128      	cbz	r0, 8016332 <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x12>
 8016326:	f000 f869 	bl	80163fc <builtin_interfaces__msg__Time__init>
 801632a:	4605      	mov	r5, r0
 801632c:	b120      	cbz	r0, 8016338 <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x18>
 801632e:	4628      	mov	r0, r5
 8016330:	bd38      	pop	{r3, r4, r5, pc}
 8016332:	4605      	mov	r5, r0
 8016334:	4628      	mov	r0, r5
 8016336:	bd38      	pop	{r3, r4, r5, pc}
 8016338:	4620      	mov	r0, r4
 801633a:	f000 f863 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 801633e:	4628      	mov	r0, r5
 8016340:	bd38      	pop	{r3, r4, r5, pc}
 8016342:	bf00      	nop

08016344 <autoware_vehicle_msgs__msg__HazardLightsReport__fini>:
 8016344:	b108      	cbz	r0, 801634a <autoware_vehicle_msgs__msg__HazardLightsReport__fini+0x6>
 8016346:	f000 b85d 	b.w	8016404 <builtin_interfaces__msg__Time__fini>
 801634a:	4770      	bx	lr

0801634c <autoware_vehicle_msgs__msg__SteeringReport__init>:
 801634c:	b538      	push	{r3, r4, r5, lr}
 801634e:	4604      	mov	r4, r0
 8016350:	b128      	cbz	r0, 801635e <autoware_vehicle_msgs__msg__SteeringReport__init+0x12>
 8016352:	f000 f853 	bl	80163fc <builtin_interfaces__msg__Time__init>
 8016356:	4605      	mov	r5, r0
 8016358:	b120      	cbz	r0, 8016364 <autoware_vehicle_msgs__msg__SteeringReport__init+0x18>
 801635a:	4628      	mov	r0, r5
 801635c:	bd38      	pop	{r3, r4, r5, pc}
 801635e:	4605      	mov	r5, r0
 8016360:	4628      	mov	r0, r5
 8016362:	bd38      	pop	{r3, r4, r5, pc}
 8016364:	4620      	mov	r0, r4
 8016366:	f000 f84d 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 801636a:	4628      	mov	r0, r5
 801636c:	bd38      	pop	{r3, r4, r5, pc}
 801636e:	bf00      	nop

08016370 <autoware_vehicle_msgs__msg__SteeringReport__fini>:
 8016370:	b108      	cbz	r0, 8016376 <autoware_vehicle_msgs__msg__SteeringReport__fini+0x6>
 8016372:	f000 b847 	b.w	8016404 <builtin_interfaces__msg__Time__fini>
 8016376:	4770      	bx	lr

08016378 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>:
 8016378:	b538      	push	{r3, r4, r5, lr}
 801637a:	4604      	mov	r4, r0
 801637c:	b128      	cbz	r0, 801638a <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x12>
 801637e:	f000 f83d 	bl	80163fc <builtin_interfaces__msg__Time__init>
 8016382:	4605      	mov	r5, r0
 8016384:	b120      	cbz	r0, 8016390 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x18>
 8016386:	4628      	mov	r0, r5
 8016388:	bd38      	pop	{r3, r4, r5, pc}
 801638a:	4605      	mov	r5, r0
 801638c:	4628      	mov	r0, r5
 801638e:	bd38      	pop	{r3, r4, r5, pc}
 8016390:	4620      	mov	r0, r4
 8016392:	f000 f837 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 8016396:	4628      	mov	r0, r5
 8016398:	bd38      	pop	{r3, r4, r5, pc}
 801639a:	bf00      	nop

0801639c <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>:
 801639c:	b108      	cbz	r0, 80163a2 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini+0x6>
 801639e:	f000 b831 	b.w	8016404 <builtin_interfaces__msg__Time__fini>
 80163a2:	4770      	bx	lr

080163a4 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>:
 80163a4:	b538      	push	{r3, r4, r5, lr}
 80163a6:	4604      	mov	r4, r0
 80163a8:	b128      	cbz	r0, 80163b6 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x12>
 80163aa:	f000 f827 	bl	80163fc <builtin_interfaces__msg__Time__init>
 80163ae:	4605      	mov	r5, r0
 80163b0:	b120      	cbz	r0, 80163bc <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x18>
 80163b2:	4628      	mov	r0, r5
 80163b4:	bd38      	pop	{r3, r4, r5, pc}
 80163b6:	4605      	mov	r5, r0
 80163b8:	4628      	mov	r0, r5
 80163ba:	bd38      	pop	{r3, r4, r5, pc}
 80163bc:	4620      	mov	r0, r4
 80163be:	f000 f821 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 80163c2:	4628      	mov	r0, r5
 80163c4:	bd38      	pop	{r3, r4, r5, pc}
 80163c6:	bf00      	nop

080163c8 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>:
 80163c8:	b108      	cbz	r0, 80163ce <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini+0x6>
 80163ca:	f000 b81b 	b.w	8016404 <builtin_interfaces__msg__Time__fini>
 80163ce:	4770      	bx	lr

080163d0 <autoware_vehicle_msgs__msg__VelocityReport__init>:
 80163d0:	b538      	push	{r3, r4, r5, lr}
 80163d2:	4604      	mov	r4, r0
 80163d4:	b128      	cbz	r0, 80163e2 <autoware_vehicle_msgs__msg__VelocityReport__init+0x12>
 80163d6:	f005 fc15 	bl	801bc04 <std_msgs__msg__Header__init>
 80163da:	4605      	mov	r5, r0
 80163dc:	b120      	cbz	r0, 80163e8 <autoware_vehicle_msgs__msg__VelocityReport__init+0x18>
 80163de:	4628      	mov	r0, r5
 80163e0:	bd38      	pop	{r3, r4, r5, pc}
 80163e2:	4605      	mov	r5, r0
 80163e4:	4628      	mov	r0, r5
 80163e6:	bd38      	pop	{r3, r4, r5, pc}
 80163e8:	4620      	mov	r0, r4
 80163ea:	f005 fc2f 	bl	801bc4c <std_msgs__msg__Header__fini>
 80163ee:	4628      	mov	r0, r5
 80163f0:	bd38      	pop	{r3, r4, r5, pc}
 80163f2:	bf00      	nop

080163f4 <autoware_vehicle_msgs__msg__VelocityReport__fini>:
 80163f4:	b108      	cbz	r0, 80163fa <autoware_vehicle_msgs__msg__VelocityReport__fini+0x6>
 80163f6:	f005 bc29 	b.w	801bc4c <std_msgs__msg__Header__fini>
 80163fa:	4770      	bx	lr

080163fc <builtin_interfaces__msg__Time__init>:
 80163fc:	3800      	subs	r0, #0
 80163fe:	bf18      	it	ne
 8016400:	2001      	movne	r0, #1
 8016402:	4770      	bx	lr

08016404 <builtin_interfaces__msg__Time__fini>:
 8016404:	4770      	bx	lr
 8016406:	bf00      	nop

08016408 <ucdr_serialize_sequence_char>:
 8016408:	b570      	push	{r4, r5, r6, lr}
 801640a:	4615      	mov	r5, r2
 801640c:	460e      	mov	r6, r1
 801640e:	7d01      	ldrb	r1, [r0, #20]
 8016410:	4604      	mov	r4, r0
 8016412:	f7fd fa1b 	bl	801384c <ucdr_serialize_endian_uint32_t>
 8016416:	b90d      	cbnz	r5, 801641c <ucdr_serialize_sequence_char+0x14>
 8016418:	2001      	movs	r0, #1
 801641a:	bd70      	pop	{r4, r5, r6, pc}
 801641c:	462b      	mov	r3, r5
 801641e:	4632      	mov	r2, r6
 8016420:	7d21      	ldrb	r1, [r4, #20]
 8016422:	4620      	mov	r0, r4
 8016424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016428:	f005 bde4 	b.w	801bff4 <ucdr_serialize_endian_array_char>

0801642c <ucdr_deserialize_sequence_char>:
 801642c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016430:	461d      	mov	r5, r3
 8016432:	4616      	mov	r6, r2
 8016434:	460f      	mov	r7, r1
 8016436:	461a      	mov	r2, r3
 8016438:	7d01      	ldrb	r1, [r0, #20]
 801643a:	4604      	mov	r4, r0
 801643c:	f7fd fb2e 	bl	8013a9c <ucdr_deserialize_endian_uint32_t>
 8016440:	682b      	ldr	r3, [r5, #0]
 8016442:	429e      	cmp	r6, r3
 8016444:	d201      	bcs.n	801644a <ucdr_deserialize_sequence_char+0x1e>
 8016446:	2201      	movs	r2, #1
 8016448:	75a2      	strb	r2, [r4, #22]
 801644a:	b913      	cbnz	r3, 8016452 <ucdr_deserialize_sequence_char+0x26>
 801644c:	2001      	movs	r0, #1
 801644e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016452:	463a      	mov	r2, r7
 8016454:	7d21      	ldrb	r1, [r4, #20]
 8016456:	4620      	mov	r0, r4
 8016458:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801645c:	f005 bdfc 	b.w	801c058 <ucdr_deserialize_endian_array_char>

08016460 <ucdr_serialize_sequence_uint8_t>:
 8016460:	b570      	push	{r4, r5, r6, lr}
 8016462:	4615      	mov	r5, r2
 8016464:	460e      	mov	r6, r1
 8016466:	7d01      	ldrb	r1, [r0, #20]
 8016468:	4604      	mov	r4, r0
 801646a:	f7fd f9ef 	bl	801384c <ucdr_serialize_endian_uint32_t>
 801646e:	b90d      	cbnz	r5, 8016474 <ucdr_serialize_sequence_uint8_t+0x14>
 8016470:	2001      	movs	r0, #1
 8016472:	bd70      	pop	{r4, r5, r6, pc}
 8016474:	462b      	mov	r3, r5
 8016476:	4632      	mov	r2, r6
 8016478:	7d21      	ldrb	r1, [r4, #20]
 801647a:	4620      	mov	r0, r4
 801647c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016480:	f005 be50 	b.w	801c124 <ucdr_serialize_endian_array_uint8_t>

08016484 <ucdr_deserialize_sequence_uint8_t>:
 8016484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016488:	461d      	mov	r5, r3
 801648a:	4616      	mov	r6, r2
 801648c:	460f      	mov	r7, r1
 801648e:	461a      	mov	r2, r3
 8016490:	7d01      	ldrb	r1, [r0, #20]
 8016492:	4604      	mov	r4, r0
 8016494:	f7fd fb02 	bl	8013a9c <ucdr_deserialize_endian_uint32_t>
 8016498:	682b      	ldr	r3, [r5, #0]
 801649a:	429e      	cmp	r6, r3
 801649c:	d201      	bcs.n	80164a2 <ucdr_deserialize_sequence_uint8_t+0x1e>
 801649e:	2201      	movs	r2, #1
 80164a0:	75a2      	strb	r2, [r4, #22]
 80164a2:	b913      	cbnz	r3, 80164aa <ucdr_deserialize_sequence_uint8_t+0x26>
 80164a4:	2001      	movs	r0, #1
 80164a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164aa:	463a      	mov	r2, r7
 80164ac:	7d21      	ldrb	r1, [r4, #20]
 80164ae:	4620      	mov	r0, r4
 80164b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80164b4:	f005 be9c 	b.w	801c1f0 <ucdr_deserialize_endian_array_uint8_t>

080164b8 <rcl_client_get_rmw_handle>:
 80164b8:	b118      	cbz	r0, 80164c2 <rcl_client_get_rmw_handle+0xa>
 80164ba:	6800      	ldr	r0, [r0, #0]
 80164bc:	b108      	cbz	r0, 80164c2 <rcl_client_get_rmw_handle+0xa>
 80164be:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80164c2:	4770      	bx	lr

080164c4 <rcl_send_request>:
 80164c4:	b570      	push	{r4, r5, r6, lr}
 80164c6:	b082      	sub	sp, #8
 80164c8:	b1f8      	cbz	r0, 801650a <rcl_send_request+0x46>
 80164ca:	4604      	mov	r4, r0
 80164cc:	6800      	ldr	r0, [r0, #0]
 80164ce:	b1e0      	cbz	r0, 801650a <rcl_send_request+0x46>
 80164d0:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 80164d4:	b1cb      	cbz	r3, 801650a <rcl_send_request+0x46>
 80164d6:	460e      	mov	r6, r1
 80164d8:	b1e1      	cbz	r1, 8016514 <rcl_send_request+0x50>
 80164da:	4615      	mov	r5, r2
 80164dc:	b1d2      	cbz	r2, 8016514 <rcl_send_request+0x50>
 80164de:	2105      	movs	r1, #5
 80164e0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80164e4:	f002 ff74 	bl	80193d0 <__atomic_load_8>
 80164e8:	4602      	mov	r2, r0
 80164ea:	460b      	mov	r3, r1
 80164ec:	4631      	mov	r1, r6
 80164ee:	e9c5 2300 	strd	r2, r3, [r5]
 80164f2:	6823      	ldr	r3, [r4, #0]
 80164f4:	462a      	mov	r2, r5
 80164f6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80164fa:	f004 f991 	bl	801a820 <rmw_send_request>
 80164fe:	4606      	mov	r6, r0
 8016500:	b160      	cbz	r0, 801651c <rcl_send_request+0x58>
 8016502:	2601      	movs	r6, #1
 8016504:	4630      	mov	r0, r6
 8016506:	b002      	add	sp, #8
 8016508:	bd70      	pop	{r4, r5, r6, pc}
 801650a:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801650e:	4630      	mov	r0, r6
 8016510:	b002      	add	sp, #8
 8016512:	bd70      	pop	{r4, r5, r6, pc}
 8016514:	260b      	movs	r6, #11
 8016516:	4630      	mov	r0, r6
 8016518:	b002      	add	sp, #8
 801651a:	bd70      	pop	{r4, r5, r6, pc}
 801651c:	6820      	ldr	r0, [r4, #0]
 801651e:	2105      	movs	r1, #5
 8016520:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016524:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8016528:	9100      	str	r1, [sp, #0]
 801652a:	f002 ffbd 	bl	80194a8 <__atomic_exchange_8>
 801652e:	4630      	mov	r0, r6
 8016530:	b002      	add	sp, #8
 8016532:	bd70      	pop	{r4, r5, r6, pc}
 8016534:	0000      	movs	r0, r0
	...

08016538 <rcl_take_response>:
 8016538:	b570      	push	{r4, r5, r6, lr}
 801653a:	468e      	mov	lr, r1
 801653c:	b08c      	sub	sp, #48	@ 0x30
 801653e:	460c      	mov	r4, r1
 8016540:	4616      	mov	r6, r2
 8016542:	f10d 0c18 	add.w	ip, sp, #24
 8016546:	4605      	mov	r5, r0
 8016548:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801654c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016550:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016554:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016558:	b35d      	cbz	r5, 80165b2 <rcl_take_response+0x7a>
 801655a:	682b      	ldr	r3, [r5, #0]
 801655c:	b34b      	cbz	r3, 80165b2 <rcl_take_response+0x7a>
 801655e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8016562:	b330      	cbz	r0, 80165b2 <rcl_take_response+0x7a>
 8016564:	b346      	cbz	r6, 80165b8 <rcl_take_response+0x80>
 8016566:	2300      	movs	r3, #0
 8016568:	4632      	mov	r2, r6
 801656a:	a902      	add	r1, sp, #8
 801656c:	f88d 3007 	strb.w	r3, [sp, #7]
 8016570:	f10d 0307 	add.w	r3, sp, #7
 8016574:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80165c0 <rcl_take_response+0x88>
 8016578:	ed8d 7b02 	vstr	d7, [sp, #8]
 801657c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8016580:	f004 fa56 	bl	801aa30 <rmw_take_response>
 8016584:	4605      	mov	r5, r0
 8016586:	b9c8      	cbnz	r0, 80165bc <rcl_take_response+0x84>
 8016588:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801658c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8016590:	2a00      	cmp	r2, #0
 8016592:	bf08      	it	eq
 8016594:	461d      	moveq	r5, r3
 8016596:	f10d 0e18 	add.w	lr, sp, #24
 801659a:	46a4      	mov	ip, r4
 801659c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80165a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80165a4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80165a8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80165ac:	4628      	mov	r0, r5
 80165ae:	b00c      	add	sp, #48	@ 0x30
 80165b0:	bd70      	pop	{r4, r5, r6, pc}
 80165b2:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 80165b6:	e7ee      	b.n	8016596 <rcl_take_response+0x5e>
 80165b8:	250b      	movs	r5, #11
 80165ba:	e7ec      	b.n	8016596 <rcl_take_response+0x5e>
 80165bc:	2501      	movs	r5, #1
 80165be:	e7ea      	b.n	8016596 <rcl_take_response+0x5e>
	...

080165c8 <rcl_client_is_valid>:
 80165c8:	b130      	cbz	r0, 80165d8 <rcl_client_is_valid+0x10>
 80165ca:	6800      	ldr	r0, [r0, #0]
 80165cc:	b120      	cbz	r0, 80165d8 <rcl_client_is_valid+0x10>
 80165ce:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80165d2:	3800      	subs	r0, #0
 80165d4:	bf18      	it	ne
 80165d6:	2001      	movne	r0, #1
 80165d8:	4770      	bx	lr
 80165da:	bf00      	nop

080165dc <rcl_get_zero_initialized_context>:
 80165dc:	4a03      	ldr	r2, [pc, #12]	@ (80165ec <rcl_get_zero_initialized_context+0x10>)
 80165de:	4603      	mov	r3, r0
 80165e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80165e4:	e883 0003 	stmia.w	r3, {r0, r1}
 80165e8:	4618      	mov	r0, r3
 80165ea:	4770      	bx	lr
 80165ec:	08024660 	.word	0x08024660

080165f0 <rcl_context_is_valid>:
 80165f0:	b118      	cbz	r0, 80165fa <rcl_context_is_valid+0xa>
 80165f2:	6840      	ldr	r0, [r0, #4]
 80165f4:	3800      	subs	r0, #0
 80165f6:	bf18      	it	ne
 80165f8:	2001      	movne	r0, #1
 80165fa:	4770      	bx	lr

080165fc <__cleanup_context>:
 80165fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016600:	4606      	mov	r6, r0
 8016602:	2300      	movs	r3, #0
 8016604:	6800      	ldr	r0, [r0, #0]
 8016606:	6073      	str	r3, [r6, #4]
 8016608:	2800      	cmp	r0, #0
 801660a:	d049      	beq.n	80166a0 <__cleanup_context+0xa4>
 801660c:	6947      	ldr	r7, [r0, #20]
 801660e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8016612:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8016616:	b137      	cbz	r7, 8016626 <__cleanup_context+0x2a>
 8016618:	3014      	adds	r0, #20
 801661a:	f000 f9bd 	bl	8016998 <rcl_init_options_fini>
 801661e:	4607      	mov	r7, r0
 8016620:	2800      	cmp	r0, #0
 8016622:	d144      	bne.n	80166ae <__cleanup_context+0xb2>
 8016624:	6830      	ldr	r0, [r6, #0]
 8016626:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016628:	b143      	cbz	r3, 801663c <__cleanup_context+0x40>
 801662a:	3028      	adds	r0, #40	@ 0x28
 801662c:	f003 fe64 	bl	801a2f8 <rmw_context_fini>
 8016630:	b118      	cbz	r0, 801663a <__cleanup_context+0x3e>
 8016632:	2f00      	cmp	r7, #0
 8016634:	d03e      	beq.n	80166b4 <__cleanup_context+0xb8>
 8016636:	f7ff f933 	bl	80158a0 <rcutils_reset_error>
 801663a:	6830      	ldr	r0, [r6, #0]
 801663c:	6a03      	ldr	r3, [r0, #32]
 801663e:	b1db      	cbz	r3, 8016678 <__cleanup_context+0x7c>
 8016640:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8016644:	2a01      	cmp	r2, #1
 8016646:	f17c 0100 	sbcs.w	r1, ip, #0
 801664a:	db11      	blt.n	8016670 <__cleanup_context+0x74>
 801664c:	2400      	movs	r4, #0
 801664e:	4625      	mov	r5, r4
 8016650:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016654:	4649      	mov	r1, r9
 8016656:	b1b8      	cbz	r0, 8016688 <__cleanup_context+0x8c>
 8016658:	47c0      	blx	r8
 801665a:	6833      	ldr	r3, [r6, #0]
 801665c:	3401      	adds	r4, #1
 801665e:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8016662:	f145 0500 	adc.w	r5, r5, #0
 8016666:	6a1b      	ldr	r3, [r3, #32]
 8016668:	4294      	cmp	r4, r2
 801666a:	eb75 010c 	sbcs.w	r1, r5, ip
 801666e:	dbef      	blt.n	8016650 <__cleanup_context+0x54>
 8016670:	4618      	mov	r0, r3
 8016672:	4649      	mov	r1, r9
 8016674:	47c0      	blx	r8
 8016676:	6830      	ldr	r0, [r6, #0]
 8016678:	4649      	mov	r1, r9
 801667a:	47c0      	blx	r8
 801667c:	2300      	movs	r3, #0
 801667e:	4638      	mov	r0, r7
 8016680:	e9c6 3300 	strd	r3, r3, [r6]
 8016684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016688:	3401      	adds	r4, #1
 801668a:	f145 0500 	adc.w	r5, r5, #0
 801668e:	4294      	cmp	r4, r2
 8016690:	eb75 010c 	sbcs.w	r1, r5, ip
 8016694:	dbdc      	blt.n	8016650 <__cleanup_context+0x54>
 8016696:	4618      	mov	r0, r3
 8016698:	4649      	mov	r1, r9
 801669a:	47c0      	blx	r8
 801669c:	6830      	ldr	r0, [r6, #0]
 801669e:	e7eb      	b.n	8016678 <__cleanup_context+0x7c>
 80166a0:	4607      	mov	r7, r0
 80166a2:	2300      	movs	r3, #0
 80166a4:	4638      	mov	r0, r7
 80166a6:	e9c6 3300 	strd	r3, r3, [r6]
 80166aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80166ae:	f7ff f8f7 	bl	80158a0 <rcutils_reset_error>
 80166b2:	e7b7      	b.n	8016624 <__cleanup_context+0x28>
 80166b4:	f009 f9e6 	bl	801fa84 <rcl_convert_rmw_ret_to_rcl_ret>
 80166b8:	4607      	mov	r7, r0
 80166ba:	e7bc      	b.n	8016636 <__cleanup_context+0x3a>

080166bc <rcl_init>:
 80166bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166c0:	1e05      	subs	r5, r0, #0
 80166c2:	b09e      	sub	sp, #120	@ 0x78
 80166c4:	460e      	mov	r6, r1
 80166c6:	4690      	mov	r8, r2
 80166c8:	461f      	mov	r7, r3
 80166ca:	f340 809f 	ble.w	801680c <rcl_init+0x150>
 80166ce:	2900      	cmp	r1, #0
 80166d0:	f000 809f 	beq.w	8016812 <rcl_init+0x156>
 80166d4:	f1a1 0e04 	sub.w	lr, r1, #4
 80166d8:	f04f 0c00 	mov.w	ip, #0
 80166dc:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80166e0:	f10c 0c01 	add.w	ip, ip, #1
 80166e4:	2c00      	cmp	r4, #0
 80166e6:	f000 8094 	beq.w	8016812 <rcl_init+0x156>
 80166ea:	4565      	cmp	r5, ip
 80166ec:	d1f6      	bne.n	80166dc <rcl_init+0x20>
 80166ee:	f1b8 0f00 	cmp.w	r8, #0
 80166f2:	f000 808e 	beq.w	8016812 <rcl_init+0x156>
 80166f6:	f8d8 4000 	ldr.w	r4, [r8]
 80166fa:	2c00      	cmp	r4, #0
 80166fc:	f000 8089 	beq.w	8016812 <rcl_init+0x156>
 8016700:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8016704:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016706:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801670a:	6823      	ldr	r3, [r4, #0]
 801670c:	a819      	add	r0, sp, #100	@ 0x64
 801670e:	f8cc 3000 	str.w	r3, [ip]
 8016712:	f7ff f89f 	bl	8015854 <rcutils_allocator_is_valid>
 8016716:	f080 0001 	eor.w	r0, r0, #1
 801671a:	b2c0      	uxtb	r0, r0
 801671c:	2800      	cmp	r0, #0
 801671e:	d178      	bne.n	8016812 <rcl_init+0x156>
 8016720:	2f00      	cmp	r7, #0
 8016722:	d076      	beq.n	8016812 <rcl_init+0x156>
 8016724:	683b      	ldr	r3, [r7, #0]
 8016726:	2b00      	cmp	r3, #0
 8016728:	d178      	bne.n	801681c <rcl_init+0x160>
 801672a:	2178      	movs	r1, #120	@ 0x78
 801672c:	2001      	movs	r0, #1
 801672e:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8016732:	4798      	blx	r3
 8016734:	4604      	mov	r4, r0
 8016736:	6038      	str	r0, [r7, #0]
 8016738:	2800      	cmp	r0, #0
 801673a:	f000 80b6 	beq.w	80168aa <rcl_init+0x1ee>
 801673e:	a802      	add	r0, sp, #8
 8016740:	f003 f9ba 	bl	8019ab8 <rmw_get_zero_initialized_context>
 8016744:	a902      	add	r1, sp, #8
 8016746:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801674a:	2250      	movs	r2, #80	@ 0x50
 801674c:	f00b fae5 	bl	8021d1a <memcpy>
 8016750:	ac19      	add	r4, sp, #100	@ 0x64
 8016752:	f8d7 e000 	ldr.w	lr, [r7]
 8016756:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016758:	46f4      	mov	ip, lr
 801675a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801675e:	6823      	ldr	r3, [r4, #0]
 8016760:	f10e 0114 	add.w	r1, lr, #20
 8016764:	4640      	mov	r0, r8
 8016766:	f8cc 3000 	str.w	r3, [ip]
 801676a:	f000 f93f 	bl	80169ec <rcl_init_options_copy>
 801676e:	4604      	mov	r4, r0
 8016770:	2800      	cmp	r0, #0
 8016772:	d144      	bne.n	80167fe <rcl_init+0x142>
 8016774:	f8d7 9000 	ldr.w	r9, [r7]
 8016778:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801677c:	f8c9 0020 	str.w	r0, [r9, #32]
 8016780:	f8c9 5018 	str.w	r5, [r9, #24]
 8016784:	f8c9 801c 	str.w	r8, [r9, #28]
 8016788:	2d00      	cmp	r5, #0
 801678a:	d04e      	beq.n	801682a <rcl_init+0x16e>
 801678c:	2e00      	cmp	r6, #0
 801678e:	d04c      	beq.n	801682a <rcl_init+0x16e>
 8016790:	2104      	movs	r1, #4
 8016792:	4628      	mov	r0, r5
 8016794:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8016798:	4798      	blx	r3
 801679a:	f8c9 0020 	str.w	r0, [r9, #32]
 801679e:	f8d7 9000 	ldr.w	r9, [r7]
 80167a2:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80167a6:	46ca      	mov	sl, r9
 80167a8:	b343      	cbz	r3, 80167fc <rcl_init+0x140>
 80167aa:	2d01      	cmp	r5, #1
 80167ac:	f178 0300 	sbcs.w	r3, r8, #0
 80167b0:	db3b      	blt.n	801682a <rcl_init+0x16e>
 80167b2:	2400      	movs	r4, #0
 80167b4:	3e04      	subs	r6, #4
 80167b6:	46a1      	mov	r9, r4
 80167b8:	e00b      	b.n	80167d2 <rcl_init+0x116>
 80167ba:	6831      	ldr	r1, [r6, #0]
 80167bc:	f00b faad 	bl	8021d1a <memcpy>
 80167c0:	3401      	adds	r4, #1
 80167c2:	f149 0900 	adc.w	r9, r9, #0
 80167c6:	45c8      	cmp	r8, r9
 80167c8:	bf08      	it	eq
 80167ca:	42a5      	cmpeq	r5, r4
 80167cc:	d02b      	beq.n	8016826 <rcl_init+0x16a>
 80167ce:	f8d7 a000 	ldr.w	sl, [r7]
 80167d2:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80167d6:	f7e9 fd8d 	bl	80002f4 <strlen>
 80167da:	1c42      	adds	r2, r0, #1
 80167dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80167de:	4610      	mov	r0, r2
 80167e0:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80167e2:	f8da a020 	ldr.w	sl, [sl, #32]
 80167e6:	9201      	str	r2, [sp, #4]
 80167e8:	4798      	blx	r3
 80167ea:	683b      	ldr	r3, [r7, #0]
 80167ec:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80167f0:	6a1b      	ldr	r3, [r3, #32]
 80167f2:	9a01      	ldr	r2, [sp, #4]
 80167f4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80167f8:	2800      	cmp	r0, #0
 80167fa:	d1de      	bne.n	80167ba <rcl_init+0xfe>
 80167fc:	240a      	movs	r4, #10
 80167fe:	4638      	mov	r0, r7
 8016800:	f7ff fefc 	bl	80165fc <__cleanup_context>
 8016804:	4620      	mov	r0, r4
 8016806:	b01e      	add	sp, #120	@ 0x78
 8016808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801680c:	2900      	cmp	r1, #0
 801680e:	f43f af6e 	beq.w	80166ee <rcl_init+0x32>
 8016812:	240b      	movs	r4, #11
 8016814:	4620      	mov	r0, r4
 8016816:	b01e      	add	sp, #120	@ 0x78
 8016818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801681c:	2464      	movs	r4, #100	@ 0x64
 801681e:	4620      	mov	r0, r4
 8016820:	b01e      	add	sp, #120	@ 0x78
 8016822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016826:	f8d7 9000 	ldr.w	r9, [r7]
 801682a:	4926      	ldr	r1, [pc, #152]	@ (80168c4 <rcl_init+0x208>)
 801682c:	680b      	ldr	r3, [r1, #0]
 801682e:	3301      	adds	r3, #1
 8016830:	d036      	beq.n	80168a0 <rcl_init+0x1e4>
 8016832:	461a      	mov	r2, r3
 8016834:	2400      	movs	r4, #0
 8016836:	600b      	str	r3, [r1, #0]
 8016838:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801683c:	607b      	str	r3, [r7, #4]
 801683e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8016840:	3301      	adds	r3, #1
 8016842:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8016846:	d034      	beq.n	80168b2 <rcl_init+0x1f6>
 8016848:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 801684c:	b93b      	cbnz	r3, 801685e <rcl_init+0x1a2>
 801684e:	3030      	adds	r0, #48	@ 0x30
 8016850:	f000 f93a 	bl	8016ac8 <rcl_get_localhost_only>
 8016854:	4604      	mov	r4, r0
 8016856:	2800      	cmp	r0, #0
 8016858:	d1d1      	bne.n	80167fe <rcl_init+0x142>
 801685a:	683b      	ldr	r3, [r7, #0]
 801685c:	6958      	ldr	r0, [r3, #20]
 801685e:	aa18      	add	r2, sp, #96	@ 0x60
 8016860:	a917      	add	r1, sp, #92	@ 0x5c
 8016862:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8016864:	f001 fa3e 	bl	8017ce4 <rcl_validate_enclave_name>
 8016868:	4604      	mov	r4, r0
 801686a:	2800      	cmp	r0, #0
 801686c:	d1c7      	bne.n	80167fe <rcl_init+0x142>
 801686e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016870:	b9eb      	cbnz	r3, 80168ae <rcl_init+0x1f2>
 8016872:	6839      	ldr	r1, [r7, #0]
 8016874:	694b      	ldr	r3, [r1, #20]
 8016876:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801687a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801687c:	f000 fd62 	bl	8017344 <rcl_get_security_options_from_environment>
 8016880:	4604      	mov	r4, r0
 8016882:	2800      	cmp	r0, #0
 8016884:	d1bb      	bne.n	80167fe <rcl_init+0x142>
 8016886:	6839      	ldr	r1, [r7, #0]
 8016888:	6948      	ldr	r0, [r1, #20]
 801688a:	3128      	adds	r1, #40	@ 0x28
 801688c:	3018      	adds	r0, #24
 801688e:	f003 fbfd 	bl	801a08c <rmw_init>
 8016892:	4604      	mov	r4, r0
 8016894:	2800      	cmp	r0, #0
 8016896:	d0bd      	beq.n	8016814 <rcl_init+0x158>
 8016898:	f009 f8f4 	bl	801fa84 <rcl_convert_rmw_ret_to_rcl_ret>
 801689c:	4604      	mov	r4, r0
 801689e:	e7ae      	b.n	80167fe <rcl_init+0x142>
 80168a0:	2201      	movs	r2, #1
 80168a2:	461c      	mov	r4, r3
 80168a4:	600a      	str	r2, [r1, #0]
 80168a6:	4613      	mov	r3, r2
 80168a8:	e7c6      	b.n	8016838 <rcl_init+0x17c>
 80168aa:	240a      	movs	r4, #10
 80168ac:	e7b2      	b.n	8016814 <rcl_init+0x158>
 80168ae:	2401      	movs	r4, #1
 80168b0:	e7a5      	b.n	80167fe <rcl_init+0x142>
 80168b2:	3024      	adds	r0, #36	@ 0x24
 80168b4:	f009 f8fa 	bl	801faac <rcl_get_default_domain_id>
 80168b8:	4604      	mov	r4, r0
 80168ba:	2800      	cmp	r0, #0
 80168bc:	d19f      	bne.n	80167fe <rcl_init+0x142>
 80168be:	683b      	ldr	r3, [r7, #0]
 80168c0:	6958      	ldr	r0, [r3, #20]
 80168c2:	e7c1      	b.n	8016848 <rcl_init+0x18c>
 80168c4:	24064958 	.word	0x24064958

080168c8 <rcl_get_zero_initialized_init_options>:
 80168c8:	2000      	movs	r0, #0
 80168ca:	4770      	bx	lr

080168cc <rcl_init_options_init>:
 80168cc:	b084      	sub	sp, #16
 80168ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80168d0:	b097      	sub	sp, #92	@ 0x5c
 80168d2:	ae1d      	add	r6, sp, #116	@ 0x74
 80168d4:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 80168d8:	2800      	cmp	r0, #0
 80168da:	d058      	beq.n	801698e <rcl_init_options_init+0xc2>
 80168dc:	6803      	ldr	r3, [r0, #0]
 80168de:	4605      	mov	r5, r0
 80168e0:	b133      	cbz	r3, 80168f0 <rcl_init_options_init+0x24>
 80168e2:	2464      	movs	r4, #100	@ 0x64
 80168e4:	4620      	mov	r0, r4
 80168e6:	b017      	add	sp, #92	@ 0x5c
 80168e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80168ec:	b004      	add	sp, #16
 80168ee:	4770      	bx	lr
 80168f0:	4630      	mov	r0, r6
 80168f2:	f7fe ffaf 	bl	8015854 <rcutils_allocator_is_valid>
 80168f6:	2800      	cmp	r0, #0
 80168f8:	d049      	beq.n	801698e <rcl_init_options_init+0xc2>
 80168fa:	46b4      	mov	ip, r6
 80168fc:	ac11      	add	r4, sp, #68	@ 0x44
 80168fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016904:	f8dc 3000 	ldr.w	r3, [ip]
 8016908:	2050      	movs	r0, #80	@ 0x50
 801690a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801690c:	6023      	str	r3, [r4, #0]
 801690e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016910:	4798      	blx	r3
 8016912:	4604      	mov	r4, r0
 8016914:	6028      	str	r0, [r5, #0]
 8016916:	2800      	cmp	r0, #0
 8016918:	d03b      	beq.n	8016992 <rcl_init_options_init+0xc6>
 801691a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801691e:	4686      	mov	lr, r0
 8016920:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016924:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016928:	f8dc 3000 	ldr.w	r3, [ip]
 801692c:	a802      	add	r0, sp, #8
 801692e:	f8ce 3000 	str.w	r3, [lr]
 8016932:	f003 f8d5 	bl	8019ae0 <rmw_get_zero_initialized_init_options>
 8016936:	f10d 0e08 	add.w	lr, sp, #8
 801693a:	f104 0c18 	add.w	ip, r4, #24
 801693e:	682f      	ldr	r7, [r5, #0]
 8016940:	ac20      	add	r4, sp, #128	@ 0x80
 8016942:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016946:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801694a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801694e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016952:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016956:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801695a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801695e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016962:	e894 0003 	ldmia.w	r4, {r0, r1}
 8016966:	e88d 0003 	stmia.w	sp, {r0, r1}
 801696a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801696e:	f107 0018 	add.w	r0, r7, #24
 8016972:	f003 fa8d 	bl	8019e90 <rmw_init_options_init>
 8016976:	4604      	mov	r4, r0
 8016978:	2800      	cmp	r0, #0
 801697a:	d0b3      	beq.n	80168e4 <rcl_init_options_init+0x18>
 801697c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801697e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8016980:	6828      	ldr	r0, [r5, #0]
 8016982:	4798      	blx	r3
 8016984:	4620      	mov	r0, r4
 8016986:	f009 f87d 	bl	801fa84 <rcl_convert_rmw_ret_to_rcl_ret>
 801698a:	4604      	mov	r4, r0
 801698c:	e7aa      	b.n	80168e4 <rcl_init_options_init+0x18>
 801698e:	240b      	movs	r4, #11
 8016990:	e7a8      	b.n	80168e4 <rcl_init_options_init+0x18>
 8016992:	240a      	movs	r4, #10
 8016994:	e7a6      	b.n	80168e4 <rcl_init_options_init+0x18>
 8016996:	bf00      	nop

08016998 <rcl_init_options_fini>:
 8016998:	b530      	push	{r4, r5, lr}
 801699a:	b087      	sub	sp, #28
 801699c:	b1f0      	cbz	r0, 80169dc <rcl_init_options_fini+0x44>
 801699e:	6803      	ldr	r3, [r0, #0]
 80169a0:	4604      	mov	r4, r0
 80169a2:	b1db      	cbz	r3, 80169dc <rcl_init_options_fini+0x44>
 80169a4:	469c      	mov	ip, r3
 80169a6:	f10d 0e04 	add.w	lr, sp, #4
 80169aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80169ae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80169b2:	f8dc 3000 	ldr.w	r3, [ip]
 80169b6:	a801      	add	r0, sp, #4
 80169b8:	f8ce 3000 	str.w	r3, [lr]
 80169bc:	f7fe ff4a 	bl	8015854 <rcutils_allocator_is_valid>
 80169c0:	b160      	cbz	r0, 80169dc <rcl_init_options_fini+0x44>
 80169c2:	6820      	ldr	r0, [r4, #0]
 80169c4:	3018      	adds	r0, #24
 80169c6:	f003 fb1d 	bl	801a004 <rmw_init_options_fini>
 80169ca:	4605      	mov	r5, r0
 80169cc:	b950      	cbnz	r0, 80169e4 <rcl_init_options_fini+0x4c>
 80169ce:	6820      	ldr	r0, [r4, #0]
 80169d0:	9b02      	ldr	r3, [sp, #8]
 80169d2:	9905      	ldr	r1, [sp, #20]
 80169d4:	4798      	blx	r3
 80169d6:	4628      	mov	r0, r5
 80169d8:	b007      	add	sp, #28
 80169da:	bd30      	pop	{r4, r5, pc}
 80169dc:	250b      	movs	r5, #11
 80169de:	4628      	mov	r0, r5
 80169e0:	b007      	add	sp, #28
 80169e2:	bd30      	pop	{r4, r5, pc}
 80169e4:	f009 f84e 	bl	801fa84 <rcl_convert_rmw_ret_to_rcl_ret>
 80169e8:	4605      	mov	r5, r0
 80169ea:	e7f8      	b.n	80169de <rcl_init_options_fini+0x46>

080169ec <rcl_init_options_copy>:
 80169ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169f0:	b094      	sub	sp, #80	@ 0x50
 80169f2:	2800      	cmp	r0, #0
 80169f4:	d05b      	beq.n	8016aae <rcl_init_options_copy+0xc2>
 80169f6:	4604      	mov	r4, r0
 80169f8:	6800      	ldr	r0, [r0, #0]
 80169fa:	2800      	cmp	r0, #0
 80169fc:	d057      	beq.n	8016aae <rcl_init_options_copy+0xc2>
 80169fe:	460e      	mov	r6, r1
 8016a00:	f7fe ff28 	bl	8015854 <rcutils_allocator_is_valid>
 8016a04:	2e00      	cmp	r6, #0
 8016a06:	d052      	beq.n	8016aae <rcl_init_options_copy+0xc2>
 8016a08:	f080 0001 	eor.w	r0, r0, #1
 8016a0c:	b2c0      	uxtb	r0, r0
 8016a0e:	2800      	cmp	r0, #0
 8016a10:	d14d      	bne.n	8016aae <rcl_init_options_copy+0xc2>
 8016a12:	6833      	ldr	r3, [r6, #0]
 8016a14:	b123      	cbz	r3, 8016a20 <rcl_init_options_copy+0x34>
 8016a16:	2464      	movs	r4, #100	@ 0x64
 8016a18:	4620      	mov	r0, r4
 8016a1a:	b014      	add	sp, #80	@ 0x50
 8016a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a20:	6827      	ldr	r7, [r4, #0]
 8016a22:	ad0f      	add	r5, sp, #60	@ 0x3c
 8016a24:	46bc      	mov	ip, r7
 8016a26:	f8d7 8000 	ldr.w	r8, [r7]
 8016a2a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016a2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016a30:	f8dc 3000 	ldr.w	r3, [ip]
 8016a34:	2050      	movs	r0, #80	@ 0x50
 8016a36:	4619      	mov	r1, r3
 8016a38:	602b      	str	r3, [r5, #0]
 8016a3a:	47c0      	blx	r8
 8016a3c:	4605      	mov	r5, r0
 8016a3e:	6030      	str	r0, [r6, #0]
 8016a40:	b3d0      	cbz	r0, 8016ab8 <rcl_init_options_copy+0xcc>
 8016a42:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8016a46:	4686      	mov	lr, r0
 8016a48:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016a4c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016a50:	f8dc 3000 	ldr.w	r3, [ip]
 8016a54:	4668      	mov	r0, sp
 8016a56:	f8ce 3000 	str.w	r3, [lr]
 8016a5a:	f003 f841 	bl	8019ae0 <rmw_get_zero_initialized_init_options>
 8016a5e:	46ee      	mov	lr, sp
 8016a60:	f105 0c18 	add.w	ip, r5, #24
 8016a64:	6824      	ldr	r4, [r4, #0]
 8016a66:	6835      	ldr	r5, [r6, #0]
 8016a68:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016a6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a70:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016a74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a78:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016a7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a80:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016a84:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016a88:	f104 0018 	add.w	r0, r4, #24
 8016a8c:	f105 0118 	add.w	r1, r5, #24
 8016a90:	f003 fa66 	bl	8019f60 <rmw_init_options_copy>
 8016a94:	4604      	mov	r4, r0
 8016a96:	2800      	cmp	r0, #0
 8016a98:	d0be      	beq.n	8016a18 <rcl_init_options_copy+0x2c>
 8016a9a:	f7fe fee9 	bl	8015870 <rcutils_get_error_string>
 8016a9e:	f7fe feff 	bl	80158a0 <rcutils_reset_error>
 8016aa2:	4630      	mov	r0, r6
 8016aa4:	f7ff ff78 	bl	8016998 <rcl_init_options_fini>
 8016aa8:	b140      	cbz	r0, 8016abc <rcl_init_options_copy+0xd0>
 8016aaa:	4604      	mov	r4, r0
 8016aac:	e7b4      	b.n	8016a18 <rcl_init_options_copy+0x2c>
 8016aae:	240b      	movs	r4, #11
 8016ab0:	4620      	mov	r0, r4
 8016ab2:	b014      	add	sp, #80	@ 0x50
 8016ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ab8:	240a      	movs	r4, #10
 8016aba:	e7ad      	b.n	8016a18 <rcl_init_options_copy+0x2c>
 8016abc:	4620      	mov	r0, r4
 8016abe:	b014      	add	sp, #80	@ 0x50
 8016ac0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ac4:	f008 bfde 	b.w	801fa84 <rcl_convert_rmw_ret_to_rcl_ret>

08016ac8 <rcl_get_localhost_only>:
 8016ac8:	b510      	push	{r4, lr}
 8016aca:	2300      	movs	r3, #0
 8016acc:	b082      	sub	sp, #8
 8016ace:	9301      	str	r3, [sp, #4]
 8016ad0:	b1b8      	cbz	r0, 8016b02 <rcl_get_localhost_only+0x3a>
 8016ad2:	4604      	mov	r4, r0
 8016ad4:	a901      	add	r1, sp, #4
 8016ad6:	480c      	ldr	r0, [pc, #48]	@ (8016b08 <rcl_get_localhost_only+0x40>)
 8016ad8:	f002 fd1e 	bl	8019518 <rcutils_get_env>
 8016adc:	b110      	cbz	r0, 8016ae4 <rcl_get_localhost_only+0x1c>
 8016ade:	2001      	movs	r0, #1
 8016ae0:	b002      	add	sp, #8
 8016ae2:	bd10      	pop	{r4, pc}
 8016ae4:	9b01      	ldr	r3, [sp, #4]
 8016ae6:	b113      	cbz	r3, 8016aee <rcl_get_localhost_only+0x26>
 8016ae8:	781a      	ldrb	r2, [r3, #0]
 8016aea:	2a31      	cmp	r2, #49	@ 0x31
 8016aec:	d004      	beq.n	8016af8 <rcl_get_localhost_only+0x30>
 8016aee:	2302      	movs	r3, #2
 8016af0:	2000      	movs	r0, #0
 8016af2:	7023      	strb	r3, [r4, #0]
 8016af4:	b002      	add	sp, #8
 8016af6:	bd10      	pop	{r4, pc}
 8016af8:	785b      	ldrb	r3, [r3, #1]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d1f7      	bne.n	8016aee <rcl_get_localhost_only+0x26>
 8016afe:	2301      	movs	r3, #1
 8016b00:	e7f6      	b.n	8016af0 <rcl_get_localhost_only+0x28>
 8016b02:	200b      	movs	r0, #11
 8016b04:	b002      	add	sp, #8
 8016b06:	bd10      	pop	{r4, pc}
 8016b08:	08024668 	.word	0x08024668

08016b0c <rcl_get_zero_initialized_node>:
 8016b0c:	4a03      	ldr	r2, [pc, #12]	@ (8016b1c <rcl_get_zero_initialized_node+0x10>)
 8016b0e:	4603      	mov	r3, r0
 8016b10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016b14:	e883 0003 	stmia.w	r3, {r0, r1}
 8016b18:	4618      	mov	r0, r3
 8016b1a:	4770      	bx	lr
 8016b1c:	08024698 	.word	0x08024698

08016b20 <rcl_node_init>:
 8016b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b24:	b0a9      	sub	sp, #164	@ 0xa4
 8016b26:	4604      	mov	r4, r0
 8016b28:	460e      	mov	r6, r1
 8016b2a:	4615      	mov	r5, r2
 8016b2c:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8016b30:	a823      	add	r0, sp, #140	@ 0x8c
 8016b32:	461f      	mov	r7, r3
 8016b34:	f009 f9e0 	bl	801fef8 <rcl_guard_condition_get_default_options>
 8016b38:	f1b8 0f00 	cmp.w	r8, #0
 8016b3c:	f000 80f3 	beq.w	8016d26 <rcl_node_init+0x206>
 8016b40:	4640      	mov	r0, r8
 8016b42:	f7fe fe87 	bl	8015854 <rcutils_allocator_is_valid>
 8016b46:	2d00      	cmp	r5, #0
 8016b48:	bf18      	it	ne
 8016b4a:	2c00      	cmpne	r4, #0
 8016b4c:	f080 0001 	eor.w	r0, r0, #1
 8016b50:	bf0c      	ite	eq
 8016b52:	f04f 0c01 	moveq.w	ip, #1
 8016b56:	f04f 0c00 	movne.w	ip, #0
 8016b5a:	2e00      	cmp	r6, #0
 8016b5c:	bf08      	it	eq
 8016b5e:	f04c 0c01 	orreq.w	ip, ip, #1
 8016b62:	ea4c 0c00 	orr.w	ip, ip, r0
 8016b66:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 8016b6a:	f040 80dc 	bne.w	8016d26 <rcl_node_init+0x206>
 8016b6e:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8016b72:	f1ba 0f00 	cmp.w	sl, #0
 8016b76:	f040 80fc 	bne.w	8016d72 <rcl_node_init+0x252>
 8016b7a:	2f00      	cmp	r7, #0
 8016b7c:	f000 80d3 	beq.w	8016d26 <rcl_node_init+0x206>
 8016b80:	4638      	mov	r0, r7
 8016b82:	f7ff fd35 	bl	80165f0 <rcl_context_is_valid>
 8016b86:	4683      	mov	fp, r0
 8016b88:	2800      	cmp	r0, #0
 8016b8a:	f000 80d2 	beq.w	8016d32 <rcl_node_init+0x212>
 8016b8e:	4652      	mov	r2, sl
 8016b90:	4630      	mov	r0, r6
 8016b92:	a922      	add	r1, sp, #136	@ 0x88
 8016b94:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 8016b98:	f003 f8d0 	bl	8019d3c <rmw_validate_node_name>
 8016b9c:	4682      	mov	sl, r0
 8016b9e:	2800      	cmp	r0, #0
 8016ba0:	f040 80c3 	bne.w	8016d2a <rcl_node_init+0x20a>
 8016ba4:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8016ba6:	2800      	cmp	r0, #0
 8016ba8:	f040 80f1 	bne.w	8016d8e <rcl_node_init+0x26e>
 8016bac:	4628      	mov	r0, r5
 8016bae:	f7e9 fba1 	bl	80002f4 <strlen>
 8016bb2:	2800      	cmp	r0, #0
 8016bb4:	f040 80c0 	bne.w	8016d38 <rcl_node_init+0x218>
 8016bb8:	4d79      	ldr	r5, [pc, #484]	@ (8016da0 <rcl_node_init+0x280>)
 8016bba:	a922      	add	r1, sp, #136	@ 0x88
 8016bbc:	2200      	movs	r2, #0
 8016bbe:	4628      	mov	r0, r5
 8016bc0:	f003 f89e 	bl	8019d00 <rmw_validate_namespace>
 8016bc4:	4682      	mov	sl, r0
 8016bc6:	2800      	cmp	r0, #0
 8016bc8:	f040 80af 	bne.w	8016d2a <rcl_node_init+0x20a>
 8016bcc:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8016bce:	2800      	cmp	r0, #0
 8016bd0:	f040 80d5 	bne.w	8016d7e <rcl_node_init+0x25e>
 8016bd4:	f8d8 3000 	ldr.w	r3, [r8]
 8016bd8:	2078      	movs	r0, #120	@ 0x78
 8016bda:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016bde:	4798      	blx	r3
 8016be0:	4682      	mov	sl, r0
 8016be2:	6060      	str	r0, [r4, #4]
 8016be4:	2800      	cmp	r0, #0
 8016be6:	f000 80cf 	beq.w	8016d88 <rcl_node_init+0x268>
 8016bea:	2200      	movs	r2, #0
 8016bec:	2300      	movs	r3, #0
 8016bee:	a808      	add	r0, sp, #32
 8016bf0:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 8016bf4:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 8016bf8:	f000 f902 	bl	8016e00 <rcl_node_get_default_options>
 8016bfc:	a908      	add	r1, sp, #32
 8016bfe:	4650      	mov	r0, sl
 8016c00:	2268      	movs	r2, #104	@ 0x68
 8016c02:	f00b f88a 	bl	8021d1a <memcpy>
 8016c06:	6861      	ldr	r1, [r4, #4]
 8016c08:	4640      	mov	r0, r8
 8016c0a:	6027      	str	r7, [r4, #0]
 8016c0c:	f000 f906 	bl	8016e1c <rcl_node_options_copy>
 8016c10:	2800      	cmp	r0, #0
 8016c12:	d158      	bne.n	8016cc6 <rcl_node_init+0x1a6>
 8016c14:	4628      	mov	r0, r5
 8016c16:	f7e9 fb6d 	bl	80002f4 <strlen>
 8016c1a:	4428      	add	r0, r5
 8016c1c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8016c20:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8016c24:	2b2f      	cmp	r3, #47	@ 0x2f
 8016c26:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016c2a:	9300      	str	r3, [sp, #0]
 8016c2c:	bf0c      	ite	eq
 8016c2e:	4b5d      	ldreq	r3, [pc, #372]	@ (8016da4 <rcl_node_init+0x284>)
 8016c30:	4b5d      	ldrne	r3, [pc, #372]	@ (8016da8 <rcl_node_init+0x288>)
 8016c32:	9302      	str	r3, [sp, #8]
 8016c34:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016c38:	9301      	str	r3, [sp, #4]
 8016c3a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8016c3e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8016c42:	f002 fc91 	bl	8019568 <rcutils_format_string_limit>
 8016c46:	6823      	ldr	r3, [r4, #0]
 8016c48:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 8016c4c:	4631      	mov	r1, r6
 8016c4e:	6818      	ldr	r0, [r3, #0]
 8016c50:	462a      	mov	r2, r5
 8016c52:	6866      	ldr	r6, [r4, #4]
 8016c54:	3028      	adds	r0, #40	@ 0x28
 8016c56:	f003 fc01 	bl	801a45c <rmw_create_node>
 8016c5a:	6863      	ldr	r3, [r4, #4]
 8016c5c:	66b0      	str	r0, [r6, #104]	@ 0x68
 8016c5e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8016c60:	2800      	cmp	r0, #0
 8016c62:	d032      	beq.n	8016cca <rcl_node_init+0x1aa>
 8016c64:	f003 fc8a 	bl	801a57c <rmw_node_get_graph_guard_condition>
 8016c68:	4682      	mov	sl, r0
 8016c6a:	b360      	cbz	r0, 8016cc6 <rcl_node_init+0x1a6>
 8016c6c:	f8d8 3000 	ldr.w	r3, [r8]
 8016c70:	2008      	movs	r0, #8
 8016c72:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016c76:	6866      	ldr	r6, [r4, #4]
 8016c78:	4798      	blx	r3
 8016c7a:	6863      	ldr	r3, [r4, #4]
 8016c7c:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8016c7e:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8016c82:	f1bb 0f00 	cmp.w	fp, #0
 8016c86:	d020      	beq.n	8016cca <rcl_node_init+0x1aa>
 8016c88:	a806      	add	r0, sp, #24
 8016c8a:	ae23      	add	r6, sp, #140	@ 0x8c
 8016c8c:	f009 f8a8 	bl	801fde0 <rcl_get_zero_initialized_guard_condition>
 8016c90:	a806      	add	r0, sp, #24
 8016c92:	6863      	ldr	r3, [r4, #4]
 8016c94:	46c4      	mov	ip, r8
 8016c96:	c803      	ldmia	r0, {r0, r1}
 8016c98:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8016c9c:	e88b 0003 	stmia.w	fp, {r0, r1}
 8016ca0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016ca4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8016ca6:	f8dc 3000 	ldr.w	r3, [ip]
 8016caa:	6033      	str	r3, [r6, #0]
 8016cac:	ab28      	add	r3, sp, #160	@ 0xa0
 8016cae:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8016cb2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016cb6:	4651      	mov	r1, sl
 8016cb8:	463a      	mov	r2, r7
 8016cba:	4670      	mov	r0, lr
 8016cbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016cbe:	f009 f899 	bl	801fdf4 <rcl_guard_condition_init_from_rmw>
 8016cc2:	4682      	mov	sl, r0
 8016cc4:	b328      	cbz	r0, 8016d12 <rcl_node_init+0x1f2>
 8016cc6:	6863      	ldr	r3, [r4, #4]
 8016cc8:	b1f3      	cbz	r3, 8016d08 <rcl_node_init+0x1e8>
 8016cca:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8016ccc:	b128      	cbz	r0, 8016cda <rcl_node_init+0x1ba>
 8016cce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016cd2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016cd6:	4798      	blx	r3
 8016cd8:	6863      	ldr	r3, [r4, #4]
 8016cda:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8016cdc:	b110      	cbz	r0, 8016ce4 <rcl_node_init+0x1c4>
 8016cde:	f003 fbcf 	bl	801a480 <rmw_destroy_node>
 8016ce2:	6863      	ldr	r3, [r4, #4]
 8016ce4:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8016ce6:	b148      	cbz	r0, 8016cfc <rcl_node_init+0x1dc>
 8016ce8:	f009 f8e0 	bl	801feac <rcl_guard_condition_fini>
 8016cec:	6863      	ldr	r3, [r4, #4]
 8016cee:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016cf2:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8016cf4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016cf8:	4798      	blx	r3
 8016cfa:	6863      	ldr	r3, [r4, #4]
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016d02:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016d06:	4798      	blx	r3
 8016d08:	2300      	movs	r3, #0
 8016d0a:	f04f 0a01 	mov.w	sl, #1
 8016d0e:	e9c4 3300 	strd	r3, r3, [r4]
 8016d12:	f1b9 0f00 	cmp.w	r9, #0
 8016d16:	d008      	beq.n	8016d2a <rcl_node_init+0x20a>
 8016d18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016d1c:	4628      	mov	r0, r5
 8016d1e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016d22:	4798      	blx	r3
 8016d24:	e001      	b.n	8016d2a <rcl_node_init+0x20a>
 8016d26:	f04f 0a0b 	mov.w	sl, #11
 8016d2a:	4650      	mov	r0, sl
 8016d2c:	b029      	add	sp, #164	@ 0xa4
 8016d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d32:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 8016d36:	e7f8      	b.n	8016d2a <rcl_node_init+0x20a>
 8016d38:	782b      	ldrb	r3, [r5, #0]
 8016d3a:	2b2f      	cmp	r3, #47	@ 0x2f
 8016d3c:	f43f af3d 	beq.w	8016bba <rcl_node_init+0x9a>
 8016d40:	9503      	str	r5, [sp, #12]
 8016d42:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016d46:	9300      	str	r3, [sp, #0]
 8016d48:	4b18      	ldr	r3, [pc, #96]	@ (8016dac <rcl_node_init+0x28c>)
 8016d4a:	9302      	str	r3, [sp, #8]
 8016d4c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016d50:	9301      	str	r3, [sp, #4]
 8016d52:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8016d56:	f002 fc07 	bl	8019568 <rcutils_format_string_limit>
 8016d5a:	4605      	mov	r5, r0
 8016d5c:	b1e0      	cbz	r0, 8016d98 <rcl_node_init+0x278>
 8016d5e:	2200      	movs	r2, #0
 8016d60:	a922      	add	r1, sp, #136	@ 0x88
 8016d62:	9222      	str	r2, [sp, #136]	@ 0x88
 8016d64:	f002 ffcc 	bl	8019d00 <rmw_validate_namespace>
 8016d68:	4682      	mov	sl, r0
 8016d6a:	2800      	cmp	r0, #0
 8016d6c:	d1d4      	bne.n	8016d18 <rcl_node_init+0x1f8>
 8016d6e:	46d9      	mov	r9, fp
 8016d70:	e72c      	b.n	8016bcc <rcl_node_init+0xac>
 8016d72:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 8016d76:	4650      	mov	r0, sl
 8016d78:	b029      	add	sp, #164	@ 0xa4
 8016d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d7e:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 8016d82:	f002 ffcf 	bl	8019d24 <rmw_namespace_validation_result_string>
 8016d86:	e7c4      	b.n	8016d12 <rcl_node_init+0x1f2>
 8016d88:	f04f 0a0a 	mov.w	sl, #10
 8016d8c:	e7c1      	b.n	8016d12 <rcl_node_init+0x1f2>
 8016d8e:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 8016d92:	f003 f827 	bl	8019de4 <rmw_node_name_validation_result_string>
 8016d96:	e7c8      	b.n	8016d2a <rcl_node_init+0x20a>
 8016d98:	f04f 0a0a 	mov.w	sl, #10
 8016d9c:	e7c5      	b.n	8016d2a <rcl_node_init+0x20a>
 8016d9e:	bf00      	nop
 8016da0:	08024680 	.word	0x08024680
 8016da4:	08024688 	.word	0x08024688
 8016da8:	08024690 	.word	0x08024690
 8016dac:	08024684 	.word	0x08024684

08016db0 <rcl_node_is_valid>:
 8016db0:	b130      	cbz	r0, 8016dc0 <rcl_node_is_valid+0x10>
 8016db2:	6843      	ldr	r3, [r0, #4]
 8016db4:	b123      	cbz	r3, 8016dc0 <rcl_node_is_valid+0x10>
 8016db6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016db8:	b113      	cbz	r3, 8016dc0 <rcl_node_is_valid+0x10>
 8016dba:	6800      	ldr	r0, [r0, #0]
 8016dbc:	f7ff bc18 	b.w	80165f0 <rcl_context_is_valid>
 8016dc0:	2000      	movs	r0, #0
 8016dc2:	4770      	bx	lr

08016dc4 <rcl_node_get_name>:
 8016dc4:	b120      	cbz	r0, 8016dd0 <rcl_node_get_name+0xc>
 8016dc6:	6840      	ldr	r0, [r0, #4]
 8016dc8:	b110      	cbz	r0, 8016dd0 <rcl_node_get_name+0xc>
 8016dca:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8016dcc:	b100      	cbz	r0, 8016dd0 <rcl_node_get_name+0xc>
 8016dce:	6880      	ldr	r0, [r0, #8]
 8016dd0:	4770      	bx	lr
 8016dd2:	bf00      	nop

08016dd4 <rcl_node_get_namespace>:
 8016dd4:	b120      	cbz	r0, 8016de0 <rcl_node_get_namespace+0xc>
 8016dd6:	6840      	ldr	r0, [r0, #4]
 8016dd8:	b110      	cbz	r0, 8016de0 <rcl_node_get_namespace+0xc>
 8016dda:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8016ddc:	b100      	cbz	r0, 8016de0 <rcl_node_get_namespace+0xc>
 8016dde:	68c0      	ldr	r0, [r0, #12]
 8016de0:	4770      	bx	lr
 8016de2:	bf00      	nop

08016de4 <rcl_node_get_options>:
 8016de4:	b128      	cbz	r0, 8016df2 <rcl_node_get_options+0xe>
 8016de6:	6840      	ldr	r0, [r0, #4]
 8016de8:	b118      	cbz	r0, 8016df2 <rcl_node_get_options+0xe>
 8016dea:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	bf08      	it	eq
 8016df0:	2000      	moveq	r0, #0
 8016df2:	4770      	bx	lr

08016df4 <rcl_node_get_rmw_handle>:
 8016df4:	b110      	cbz	r0, 8016dfc <rcl_node_get_rmw_handle+0x8>
 8016df6:	6840      	ldr	r0, [r0, #4]
 8016df8:	b100      	cbz	r0, 8016dfc <rcl_node_get_rmw_handle+0x8>
 8016dfa:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8016dfc:	4770      	bx	lr
 8016dfe:	bf00      	nop

08016e00 <rcl_node_get_default_options>:
 8016e00:	b510      	push	{r4, lr}
 8016e02:	4604      	mov	r4, r0
 8016e04:	2268      	movs	r2, #104	@ 0x68
 8016e06:	2100      	movs	r1, #0
 8016e08:	f00a fe68 	bl	8021adc <memset>
 8016e0c:	4620      	mov	r0, r4
 8016e0e:	f7fe fd13 	bl	8015838 <rcutils_get_default_allocator>
 8016e12:	2301      	movs	r3, #1
 8016e14:	4620      	mov	r0, r4
 8016e16:	7523      	strb	r3, [r4, #20]
 8016e18:	bd10      	pop	{r4, pc}
 8016e1a:	bf00      	nop

08016e1c <rcl_node_options_copy>:
 8016e1c:	2800      	cmp	r0, #0
 8016e1e:	bf18      	it	ne
 8016e20:	4288      	cmpne	r0, r1
 8016e22:	d01b      	beq.n	8016e5c <rcl_node_options_copy+0x40>
 8016e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e26:	fab1 f681 	clz	r6, r1
 8016e2a:	460c      	mov	r4, r1
 8016e2c:	0976      	lsrs	r6, r6, #5
 8016e2e:	b199      	cbz	r1, 8016e58 <rcl_node_options_copy+0x3c>
 8016e30:	4605      	mov	r5, r0
 8016e32:	8a87      	ldrh	r7, [r0, #20]
 8016e34:	4684      	mov	ip, r0
 8016e36:	468e      	mov	lr, r1
 8016e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016e3a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016e3e:	682b      	ldr	r3, [r5, #0]
 8016e40:	2250      	movs	r2, #80	@ 0x50
 8016e42:	f10c 0118 	add.w	r1, ip, #24
 8016e46:	f104 0018 	add.w	r0, r4, #24
 8016e4a:	f8ce 3000 	str.w	r3, [lr]
 8016e4e:	82a7      	strh	r7, [r4, #20]
 8016e50:	f00a ff63 	bl	8021d1a <memcpy>
 8016e54:	4630      	mov	r0, r6
 8016e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e58:	200b      	movs	r0, #11
 8016e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e5c:	200b      	movs	r0, #11
 8016e5e:	4770      	bx	lr

08016e60 <rcl_node_resolve_name>:
 8016e60:	b082      	sub	sp, #8
 8016e62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e66:	b091      	sub	sp, #68	@ 0x44
 8016e68:	ac1a      	add	r4, sp, #104	@ 0x68
 8016e6a:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8016e6e:	e884 000c 	stmia.w	r4, {r2, r3}
 8016e72:	2800      	cmp	r0, #0
 8016e74:	d03d      	beq.n	8016ef2 <rcl_node_resolve_name+0x92>
 8016e76:	460c      	mov	r4, r1
 8016e78:	4605      	mov	r5, r0
 8016e7a:	f7ff ffb3 	bl	8016de4 <rcl_node_get_options>
 8016e7e:	2800      	cmp	r0, #0
 8016e80:	d03a      	beq.n	8016ef8 <rcl_node_resolve_name+0x98>
 8016e82:	4628      	mov	r0, r5
 8016e84:	f7ff ff9e 	bl	8016dc4 <rcl_node_get_name>
 8016e88:	4606      	mov	r6, r0
 8016e8a:	4628      	mov	r0, r5
 8016e8c:	ad0b      	add	r5, sp, #44	@ 0x2c
 8016e8e:	f7ff ffa1 	bl	8016dd4 <rcl_node_get_namespace>
 8016e92:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8016e96:	4607      	mov	r7, r0
 8016e98:	46ac      	mov	ip, r5
 8016e9a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016e9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016ea2:	f8de 3000 	ldr.w	r3, [lr]
 8016ea6:	f8cc 3000 	str.w	r3, [ip]
 8016eaa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8016eac:	b30b      	cbz	r3, 8016ef2 <rcl_node_resolve_name+0x92>
 8016eae:	4689      	mov	r9, r1
 8016eb0:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 8016eb4:	f002 fcd0 	bl	8019858 <rcutils_get_zero_initialized_string_map>
 8016eb8:	ab10      	add	r3, sp, #64	@ 0x40
 8016eba:	9008      	str	r0, [sp, #32]
 8016ebc:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8016ec0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016ec4:	2100      	movs	r1, #0
 8016ec6:	a808      	add	r0, sp, #32
 8016ec8:	e895 000c 	ldmia.w	r5, {r2, r3}
 8016ecc:	f002 fd3a 	bl	8019944 <rcutils_string_map_init>
 8016ed0:	4683      	mov	fp, r0
 8016ed2:	b1a0      	cbz	r0, 8016efe <rcl_node_resolve_name+0x9e>
 8016ed4:	f7fe fccc 	bl	8015870 <rcutils_get_error_string>
 8016ed8:	f7fe fce2 	bl	80158a0 <rcutils_reset_error>
 8016edc:	f1bb 0f0a 	cmp.w	fp, #10
 8016ee0:	bf18      	it	ne
 8016ee2:	f04f 0b01 	movne.w	fp, #1
 8016ee6:	4658      	mov	r0, fp
 8016ee8:	b011      	add	sp, #68	@ 0x44
 8016eea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016eee:	b002      	add	sp, #8
 8016ef0:	4770      	bx	lr
 8016ef2:	f04f 0b0b 	mov.w	fp, #11
 8016ef6:	e7f6      	b.n	8016ee6 <rcl_node_resolve_name+0x86>
 8016ef8:	f04f 0b01 	mov.w	fp, #1
 8016efc:	e7f3      	b.n	8016ee6 <rcl_node_resolve_name+0x86>
 8016efe:	9009      	str	r0, [sp, #36]	@ 0x24
 8016f00:	9007      	str	r0, [sp, #28]
 8016f02:	a808      	add	r0, sp, #32
 8016f04:	f008 ff66 	bl	801fdd4 <rcl_get_default_topic_name_substitutions>
 8016f08:	4683      	mov	fp, r0
 8016f0a:	b180      	cbz	r0, 8016f2e <rcl_node_resolve_name+0xce>
 8016f0c:	280a      	cmp	r0, #10
 8016f0e:	a808      	add	r0, sp, #32
 8016f10:	bf18      	it	ne
 8016f12:	f04f 0b01 	movne.w	fp, #1
 8016f16:	f002 fd55 	bl	80199c4 <rcutils_string_map_fini>
 8016f1a:	4604      	mov	r4, r0
 8016f1c:	2800      	cmp	r0, #0
 8016f1e:	d15b      	bne.n	8016fd8 <rcl_node_resolve_name+0x178>
 8016f20:	4651      	mov	r1, sl
 8016f22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016f24:	47c8      	blx	r9
 8016f26:	4651      	mov	r1, sl
 8016f28:	4620      	mov	r0, r4
 8016f2a:	47c8      	blx	r9
 8016f2c:	e7db      	b.n	8016ee6 <rcl_node_resolve_name+0x86>
 8016f2e:	ab09      	add	r3, sp, #36	@ 0x24
 8016f30:	46ec      	mov	ip, sp
 8016f32:	9305      	str	r3, [sp, #20]
 8016f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016f36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016f3a:	682b      	ldr	r3, [r5, #0]
 8016f3c:	463a      	mov	r2, r7
 8016f3e:	4631      	mov	r1, r6
 8016f40:	4620      	mov	r0, r4
 8016f42:	f8cc 3000 	str.w	r3, [ip]
 8016f46:	ab08      	add	r3, sp, #32
 8016f48:	f008 fde4 	bl	801fb14 <rcl_expand_topic_name>
 8016f4c:	4683      	mov	fp, r0
 8016f4e:	b9d8      	cbnz	r0, 8016f88 <rcl_node_resolve_name+0x128>
 8016f50:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8016f52:	4602      	mov	r2, r0
 8016f54:	9009      	str	r0, [sp, #36]	@ 0x24
 8016f56:	a90a      	add	r1, sp, #40	@ 0x28
 8016f58:	4620      	mov	r0, r4
 8016f5a:	f002 fe01 	bl	8019b60 <rmw_validate_full_topic_name>
 8016f5e:	bb50      	cbnz	r0, 8016fb6 <rcl_node_resolve_name+0x156>
 8016f60:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8016f62:	2d00      	cmp	r5, #0
 8016f64:	d140      	bne.n	8016fe8 <rcl_node_resolve_name+0x188>
 8016f66:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8016f68:	a808      	add	r0, sp, #32
 8016f6a:	601c      	str	r4, [r3, #0]
 8016f6c:	f002 fd2a 	bl	80199c4 <rcutils_string_map_fini>
 8016f70:	4683      	mov	fp, r0
 8016f72:	2800      	cmp	r0, #0
 8016f74:	d043      	beq.n	8016ffe <rcl_node_resolve_name+0x19e>
 8016f76:	f7fe fc7b 	bl	8015870 <rcutils_get_error_string>
 8016f7a:	46a8      	mov	r8, r5
 8016f7c:	f04f 0b01 	mov.w	fp, #1
 8016f80:	462c      	mov	r4, r5
 8016f82:	f7fe fc8d 	bl	80158a0 <rcutils_reset_error>
 8016f86:	e00a      	b.n	8016f9e <rcl_node_resolve_name+0x13e>
 8016f88:	2867      	cmp	r0, #103	@ 0x67
 8016f8a:	bf14      	ite	ne
 8016f8c:	f04f 0800 	movne.w	r8, #0
 8016f90:	f008 0801 	andeq.w	r8, r8, #1
 8016f94:	9c07      	ldr	r4, [sp, #28]
 8016f96:	a808      	add	r0, sp, #32
 8016f98:	f002 fd14 	bl	80199c4 <rcutils_string_map_fini>
 8016f9c:	bb50      	cbnz	r0, 8016ff4 <rcl_node_resolve_name+0x194>
 8016f9e:	4651      	mov	r1, sl
 8016fa0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016fa2:	47c8      	blx	r9
 8016fa4:	4651      	mov	r1, sl
 8016fa6:	4620      	mov	r0, r4
 8016fa8:	47c8      	blx	r9
 8016faa:	f1b8 0f00 	cmp.w	r8, #0
 8016fae:	bf18      	it	ne
 8016fb0:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 8016fb4:	e797      	b.n	8016ee6 <rcl_node_resolve_name+0x86>
 8016fb6:	f7fe fc5b 	bl	8015870 <rcutils_get_error_string>
 8016fba:	f7fe fc71 	bl	80158a0 <rcutils_reset_error>
 8016fbe:	a808      	add	r0, sp, #32
 8016fc0:	f002 fd00 	bl	80199c4 <rcutils_string_map_fini>
 8016fc4:	b998      	cbnz	r0, 8016fee <rcl_node_resolve_name+0x18e>
 8016fc6:	4651      	mov	r1, sl
 8016fc8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016fca:	47c8      	blx	r9
 8016fcc:	4651      	mov	r1, sl
 8016fce:	4620      	mov	r0, r4
 8016fd0:	f04f 0b01 	mov.w	fp, #1
 8016fd4:	47c8      	blx	r9
 8016fd6:	e786      	b.n	8016ee6 <rcl_node_resolve_name+0x86>
 8016fd8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8016fdc:	f7fe fc48 	bl	8015870 <rcutils_get_error_string>
 8016fe0:	f7fe fc5e 	bl	80158a0 <rcutils_reset_error>
 8016fe4:	4644      	mov	r4, r8
 8016fe6:	e7da      	b.n	8016f9e <rcl_node_resolve_name+0x13e>
 8016fe8:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 8016fec:	e7d3      	b.n	8016f96 <rcl_node_resolve_name+0x136>
 8016fee:	46d8      	mov	r8, fp
 8016ff0:	f04f 0b01 	mov.w	fp, #1
 8016ff4:	f7fe fc3c 	bl	8015870 <rcutils_get_error_string>
 8016ff8:	f7fe fc52 	bl	80158a0 <rcutils_reset_error>
 8016ffc:	e7cf      	b.n	8016f9e <rcl_node_resolve_name+0x13e>
 8016ffe:	4651      	mov	r1, sl
 8017000:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017002:	47c8      	blx	r9
 8017004:	4651      	mov	r1, sl
 8017006:	4658      	mov	r0, fp
 8017008:	47c8      	blx	r9
 801700a:	e76c      	b.n	8016ee6 <rcl_node_resolve_name+0x86>

0801700c <rcl_get_zero_initialized_publisher>:
 801700c:	4b01      	ldr	r3, [pc, #4]	@ (8017014 <rcl_get_zero_initialized_publisher+0x8>)
 801700e:	6818      	ldr	r0, [r3, #0]
 8017010:	4770      	bx	lr
 8017012:	bf00      	nop
 8017014:	080246a0 	.word	0x080246a0

08017018 <rcl_publisher_init>:
 8017018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801701c:	b088      	sub	sp, #32
 801701e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8017020:	2e00      	cmp	r6, #0
 8017022:	d06b      	beq.n	80170fc <rcl_publisher_init+0xe4>
 8017024:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 8017028:	4605      	mov	r5, r0
 801702a:	460f      	mov	r7, r1
 801702c:	4690      	mov	r8, r2
 801702e:	4650      	mov	r0, sl
 8017030:	4699      	mov	r9, r3
 8017032:	f7fe fc0f 	bl	8015854 <rcutils_allocator_is_valid>
 8017036:	f080 0401 	eor.w	r4, r0, #1
 801703a:	b2e4      	uxtb	r4, r4
 801703c:	2c00      	cmp	r4, #0
 801703e:	d15d      	bne.n	80170fc <rcl_publisher_init+0xe4>
 8017040:	2d00      	cmp	r5, #0
 8017042:	d05b      	beq.n	80170fc <rcl_publisher_init+0xe4>
 8017044:	682b      	ldr	r3, [r5, #0]
 8017046:	b123      	cbz	r3, 8017052 <rcl_publisher_init+0x3a>
 8017048:	2464      	movs	r4, #100	@ 0x64
 801704a:	4620      	mov	r0, r4
 801704c:	b008      	add	sp, #32
 801704e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017052:	4638      	mov	r0, r7
 8017054:	f7ff feac 	bl	8016db0 <rcl_node_is_valid>
 8017058:	2800      	cmp	r0, #0
 801705a:	d054      	beq.n	8017106 <rcl_publisher_init+0xee>
 801705c:	f1b8 0f00 	cmp.w	r8, #0
 8017060:	d04c      	beq.n	80170fc <rcl_publisher_init+0xe4>
 8017062:	fab9 f389 	clz	r3, r9
 8017066:	095b      	lsrs	r3, r3, #5
 8017068:	f1b9 0f00 	cmp.w	r9, #0
 801706c:	d046      	beq.n	80170fc <rcl_publisher_init+0xe4>
 801706e:	aa07      	add	r2, sp, #28
 8017070:	9307      	str	r3, [sp, #28]
 8017072:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8017076:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 801707a:	9205      	str	r2, [sp, #20]
 801707c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017080:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017084:	4649      	mov	r1, r9
 8017086:	4638      	mov	r0, r7
 8017088:	e89a 000c 	ldmia.w	sl, {r2, r3}
 801708c:	f7ff fee8 	bl	8016e60 <rcl_node_resolve_name>
 8017090:	2800      	cmp	r0, #0
 8017092:	d14f      	bne.n	8017134 <rcl_publisher_init+0x11c>
 8017094:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8017096:	20c8      	movs	r0, #200	@ 0xc8
 8017098:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801709a:	4798      	blx	r3
 801709c:	6028      	str	r0, [r5, #0]
 801709e:	2800      	cmp	r0, #0
 80170a0:	d050      	beq.n	8017144 <rcl_publisher_init+0x12c>
 80170a2:	4638      	mov	r0, r7
 80170a4:	f7ff fea6 	bl	8016df4 <rcl_node_get_rmw_handle>
 80170a8:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 80170ac:	4641      	mov	r1, r8
 80170ae:	9a07      	ldr	r2, [sp, #28]
 80170b0:	9300      	str	r3, [sp, #0]
 80170b2:	4633      	mov	r3, r6
 80170b4:	682c      	ldr	r4, [r5, #0]
 80170b6:	f003 fa67 	bl	801a588 <rmw_create_publisher>
 80170ba:	682b      	ldr	r3, [r5, #0]
 80170bc:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 80170c0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80170c4:	b370      	cbz	r0, 8017124 <rcl_publisher_init+0x10c>
 80170c6:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 80170ca:	f003 fb41 	bl	801a750 <rmw_publisher_get_actual_qos>
 80170ce:	682b      	ldr	r3, [r5, #0]
 80170d0:	4604      	mov	r4, r0
 80170d2:	b9d0      	cbnz	r0, 801710a <rcl_publisher_init+0xf2>
 80170d4:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 80170d8:	4631      	mov	r1, r6
 80170da:	4618      	mov	r0, r3
 80170dc:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 80170e0:	2270      	movs	r2, #112	@ 0x70
 80170e2:	f00a fe1a 	bl	8021d1a <memcpy>
 80170e6:	683a      	ldr	r2, [r7, #0]
 80170e8:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 80170ec:	9807      	ldr	r0, [sp, #28]
 80170ee:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80170f0:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80170f2:	4798      	blx	r3
 80170f4:	4620      	mov	r0, r4
 80170f6:	b008      	add	sp, #32
 80170f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170fc:	240b      	movs	r4, #11
 80170fe:	4620      	mov	r0, r4
 8017100:	b008      	add	sp, #32
 8017102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017106:	24c8      	movs	r4, #200	@ 0xc8
 8017108:	e79f      	b.n	801704a <rcl_publisher_init+0x32>
 801710a:	b1cb      	cbz	r3, 8017140 <rcl_publisher_init+0x128>
 801710c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8017110:	b142      	cbz	r2, 8017124 <rcl_publisher_init+0x10c>
 8017112:	4638      	mov	r0, r7
 8017114:	f7ff fe6e 	bl	8016df4 <rcl_node_get_rmw_handle>
 8017118:	682b      	ldr	r3, [r5, #0]
 801711a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 801711e:	f003 fb2b 	bl	801a778 <rmw_destroy_publisher>
 8017122:	682b      	ldr	r3, [r5, #0]
 8017124:	4618      	mov	r0, r3
 8017126:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 8017128:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801712a:	2401      	movs	r4, #1
 801712c:	4790      	blx	r2
 801712e:	2300      	movs	r3, #0
 8017130:	602b      	str	r3, [r5, #0]
 8017132:	e7db      	b.n	80170ec <rcl_publisher_init+0xd4>
 8017134:	2867      	cmp	r0, #103	@ 0x67
 8017136:	d007      	beq.n	8017148 <rcl_publisher_init+0x130>
 8017138:	2869      	cmp	r0, #105	@ 0x69
 801713a:	d005      	beq.n	8017148 <rcl_publisher_init+0x130>
 801713c:	280a      	cmp	r0, #10
 801713e:	d001      	beq.n	8017144 <rcl_publisher_init+0x12c>
 8017140:	2401      	movs	r4, #1
 8017142:	e7d3      	b.n	80170ec <rcl_publisher_init+0xd4>
 8017144:	240a      	movs	r4, #10
 8017146:	e7d1      	b.n	80170ec <rcl_publisher_init+0xd4>
 8017148:	2467      	movs	r4, #103	@ 0x67
 801714a:	e7cf      	b.n	80170ec <rcl_publisher_init+0xd4>

0801714c <rcl_publisher_get_default_options>:
 801714c:	b570      	push	{r4, r5, r6, lr}
 801714e:	4d14      	ldr	r5, [pc, #80]	@ (80171a0 <rcl_publisher_get_default_options+0x54>)
 8017150:	b088      	sub	sp, #32
 8017152:	4604      	mov	r4, r0
 8017154:	2250      	movs	r2, #80	@ 0x50
 8017156:	4913      	ldr	r1, [pc, #76]	@ (80171a4 <rcl_publisher_get_default_options+0x58>)
 8017158:	4628      	mov	r0, r5
 801715a:	f00a fdde 	bl	8021d1a <memcpy>
 801715e:	a802      	add	r0, sp, #8
 8017160:	f7fe fb6a 	bl	8015838 <rcutils_get_default_allocator>
 8017164:	f10d 0c08 	add.w	ip, sp, #8
 8017168:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 801716c:	466e      	mov	r6, sp
 801716e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017172:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017176:	f8dc 3000 	ldr.w	r3, [ip]
 801717a:	4630      	mov	r0, r6
 801717c:	f8ce 3000 	str.w	r3, [lr]
 8017180:	f002 fcbe 	bl	8019b00 <rmw_get_default_publisher_options>
 8017184:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8017188:	2270      	movs	r2, #112	@ 0x70
 801718a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801718e:	e883 0003 	stmia.w	r3, {r0, r1}
 8017192:	4629      	mov	r1, r5
 8017194:	4620      	mov	r0, r4
 8017196:	f00a fdc0 	bl	8021d1a <memcpy>
 801719a:	4620      	mov	r0, r4
 801719c:	b008      	add	sp, #32
 801719e:	bd70      	pop	{r4, r5, r6, pc}
 80171a0:	24064960 	.word	0x24064960
 80171a4:	080246a8 	.word	0x080246a8

080171a8 <rcl_publisher_is_valid>:
 80171a8:	b1a0      	cbz	r0, 80171d4 <rcl_publisher_is_valid+0x2c>
 80171aa:	6803      	ldr	r3, [r0, #0]
 80171ac:	b510      	push	{r4, lr}
 80171ae:	4604      	mov	r4, r0
 80171b0:	b173      	cbz	r3, 80171d0 <rcl_publisher_is_valid+0x28>
 80171b2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80171b6:	b15a      	cbz	r2, 80171d0 <rcl_publisher_is_valid+0x28>
 80171b8:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80171bc:	f7ff fa18 	bl	80165f0 <rcl_context_is_valid>
 80171c0:	b130      	cbz	r0, 80171d0 <rcl_publisher_is_valid+0x28>
 80171c2:	6823      	ldr	r3, [r4, #0]
 80171c4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80171c8:	3800      	subs	r0, #0
 80171ca:	bf18      	it	ne
 80171cc:	2001      	movne	r0, #1
 80171ce:	bd10      	pop	{r4, pc}
 80171d0:	2000      	movs	r0, #0
 80171d2:	bd10      	pop	{r4, pc}
 80171d4:	2000      	movs	r0, #0
 80171d6:	4770      	bx	lr

080171d8 <rcl_publisher_is_valid_except_context>:
 80171d8:	b130      	cbz	r0, 80171e8 <rcl_publisher_is_valid_except_context+0x10>
 80171da:	6800      	ldr	r0, [r0, #0]
 80171dc:	b120      	cbz	r0, 80171e8 <rcl_publisher_is_valid_except_context+0x10>
 80171de:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 80171e2:	3800      	subs	r0, #0
 80171e4:	bf18      	it	ne
 80171e6:	2001      	movne	r0, #1
 80171e8:	4770      	bx	lr
 80171ea:	bf00      	nop

080171ec <exact_match_lookup>:
 80171ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171ee:	f102 0708 	add.w	r7, r2, #8
 80171f2:	460b      	mov	r3, r1
 80171f4:	b085      	sub	sp, #20
 80171f6:	4614      	mov	r4, r2
 80171f8:	4606      	mov	r6, r0
 80171fa:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80171fe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017202:	4618      	mov	r0, r3
 8017204:	4919      	ldr	r1, [pc, #100]	@ (801726c <exact_match_lookup+0x80>)
 8017206:	e894 000c 	ldmia.w	r4, {r2, r3}
 801720a:	f002 f99f 	bl	801954c <rcutils_join_path>
 801720e:	7833      	ldrb	r3, [r6, #0]
 8017210:	4605      	mov	r5, r0
 8017212:	2b2f      	cmp	r3, #47	@ 0x2f
 8017214:	d023      	beq.n	801725e <exact_match_lookup+0x72>
 8017216:	f104 030c 	add.w	r3, r4, #12
 801721a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801721e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8017222:	1c70      	adds	r0, r6, #1
 8017224:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8017228:	f002 f996 	bl	8019558 <rcutils_to_native_path>
 801722c:	4606      	mov	r6, r0
 801722e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8017232:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017236:	4631      	mov	r1, r6
 8017238:	4628      	mov	r0, r5
 801723a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801723e:	f002 f985 	bl	801954c <rcutils_join_path>
 8017242:	4603      	mov	r3, r0
 8017244:	4630      	mov	r0, r6
 8017246:	6862      	ldr	r2, [r4, #4]
 8017248:	461e      	mov	r6, r3
 801724a:	6921      	ldr	r1, [r4, #16]
 801724c:	4790      	blx	r2
 801724e:	4628      	mov	r0, r5
 8017250:	4635      	mov	r5, r6
 8017252:	6863      	ldr	r3, [r4, #4]
 8017254:	6921      	ldr	r1, [r4, #16]
 8017256:	4798      	blx	r3
 8017258:	4628      	mov	r0, r5
 801725a:	b005      	add	sp, #20
 801725c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801725e:	7873      	ldrb	r3, [r6, #1]
 8017260:	2b00      	cmp	r3, #0
 8017262:	d1d8      	bne.n	8017216 <exact_match_lookup+0x2a>
 8017264:	4628      	mov	r0, r5
 8017266:	b005      	add	sp, #20
 8017268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801726a:	bf00      	nop
 801726c:	08024734 	.word	0x08024734

08017270 <rcl_get_secure_root>:
 8017270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017274:	b085      	sub	sp, #20
 8017276:	b168      	cbz	r0, 8017294 <rcl_get_secure_root+0x24>
 8017278:	4607      	mov	r7, r0
 801727a:	4608      	mov	r0, r1
 801727c:	460c      	mov	r4, r1
 801727e:	f7fe fae9 	bl	8015854 <rcutils_allocator_is_valid>
 8017282:	b138      	cbz	r0, 8017294 <rcl_get_secure_root+0x24>
 8017284:	2300      	movs	r3, #0
 8017286:	482d      	ldr	r0, [pc, #180]	@ (801733c <rcl_get_secure_root+0xcc>)
 8017288:	a903      	add	r1, sp, #12
 801728a:	9303      	str	r3, [sp, #12]
 801728c:	f002 f944 	bl	8019518 <rcutils_get_env>
 8017290:	4605      	mov	r5, r0
 8017292:	b120      	cbz	r0, 801729e <rcl_get_secure_root+0x2e>
 8017294:	2500      	movs	r5, #0
 8017296:	4628      	mov	r0, r5
 8017298:	b005      	add	sp, #20
 801729a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801729e:	9b03      	ldr	r3, [sp, #12]
 80172a0:	781a      	ldrb	r2, [r3, #0]
 80172a2:	2a00      	cmp	r2, #0
 80172a4:	d0f6      	beq.n	8017294 <rcl_get_secure_root+0x24>
 80172a6:	f104 090c 	add.w	r9, r4, #12
 80172aa:	e899 0003 	ldmia.w	r9, {r0, r1}
 80172ae:	e88d 0003 	stmia.w	sp, {r0, r1}
 80172b2:	4618      	mov	r0, r3
 80172b4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80172b8:	f002 fa90 	bl	80197dc <rcutils_strdup>
 80172bc:	4680      	mov	r8, r0
 80172be:	2800      	cmp	r0, #0
 80172c0:	d0e8      	beq.n	8017294 <rcl_get_secure_root+0x24>
 80172c2:	a903      	add	r1, sp, #12
 80172c4:	481e      	ldr	r0, [pc, #120]	@ (8017340 <rcl_get_secure_root+0xd0>)
 80172c6:	9503      	str	r5, [sp, #12]
 80172c8:	f002 f926 	bl	8019518 <rcutils_get_env>
 80172cc:	b160      	cbz	r0, 80172e8 <rcl_get_secure_root+0x78>
 80172ce:	2600      	movs	r6, #0
 80172d0:	4630      	mov	r0, r6
 80172d2:	6863      	ldr	r3, [r4, #4]
 80172d4:	6921      	ldr	r1, [r4, #16]
 80172d6:	4798      	blx	r3
 80172d8:	4640      	mov	r0, r8
 80172da:	6863      	ldr	r3, [r4, #4]
 80172dc:	6921      	ldr	r1, [r4, #16]
 80172de:	4798      	blx	r3
 80172e0:	4628      	mov	r0, r5
 80172e2:	b005      	add	sp, #20
 80172e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172e8:	9b03      	ldr	r3, [sp, #12]
 80172ea:	781e      	ldrb	r6, [r3, #0]
 80172ec:	b1f6      	cbz	r6, 801732c <rcl_get_secure_root+0xbc>
 80172ee:	e899 0003 	ldmia.w	r9, {r0, r1}
 80172f2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80172f6:	4618      	mov	r0, r3
 80172f8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80172fc:	f002 fa6e 	bl	80197dc <rcutils_strdup>
 8017300:	4606      	mov	r6, r0
 8017302:	2800      	cmp	r0, #0
 8017304:	d0e3      	beq.n	80172ce <rcl_get_secure_root+0x5e>
 8017306:	4622      	mov	r2, r4
 8017308:	4641      	mov	r1, r8
 801730a:	f7ff ff6f 	bl	80171ec <exact_match_lookup>
 801730e:	4605      	mov	r5, r0
 8017310:	2d00      	cmp	r5, #0
 8017312:	d0dd      	beq.n	80172d0 <rcl_get_secure_root+0x60>
 8017314:	4628      	mov	r0, r5
 8017316:	f002 f917 	bl	8019548 <rcutils_is_directory>
 801731a:	4603      	mov	r3, r0
 801731c:	2800      	cmp	r0, #0
 801731e:	d1d7      	bne.n	80172d0 <rcl_get_secure_root+0x60>
 8017320:	4628      	mov	r0, r5
 8017322:	6921      	ldr	r1, [r4, #16]
 8017324:	461d      	mov	r5, r3
 8017326:	6863      	ldr	r3, [r4, #4]
 8017328:	4798      	blx	r3
 801732a:	e7d1      	b.n	80172d0 <rcl_get_secure_root+0x60>
 801732c:	4622      	mov	r2, r4
 801732e:	4638      	mov	r0, r7
 8017330:	4641      	mov	r1, r8
 8017332:	f7ff ff5b 	bl	80171ec <exact_match_lookup>
 8017336:	4605      	mov	r5, r0
 8017338:	e7ea      	b.n	8017310 <rcl_get_secure_root+0xa0>
 801733a:	bf00      	nop
 801733c:	08024740 	.word	0x08024740
 8017340:	08024758 	.word	0x08024758

08017344 <rcl_get_security_options_from_environment>:
 8017344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017348:	b082      	sub	sp, #8
 801734a:	2300      	movs	r3, #0
 801734c:	4606      	mov	r6, r0
 801734e:	460f      	mov	r7, r1
 8017350:	4821      	ldr	r0, [pc, #132]	@ (80173d8 <rcl_get_security_options_from_environment+0x94>)
 8017352:	a901      	add	r1, sp, #4
 8017354:	4690      	mov	r8, r2
 8017356:	9301      	str	r3, [sp, #4]
 8017358:	f002 f8de 	bl	8019518 <rcutils_get_env>
 801735c:	b120      	cbz	r0, 8017368 <rcl_get_security_options_from_environment+0x24>
 801735e:	2501      	movs	r5, #1
 8017360:	4628      	mov	r0, r5
 8017362:	b002      	add	sp, #8
 8017364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017368:	4604      	mov	r4, r0
 801736a:	491c      	ldr	r1, [pc, #112]	@ (80173dc <rcl_get_security_options_from_environment+0x98>)
 801736c:	9801      	ldr	r0, [sp, #4]
 801736e:	f7e8 ffb7 	bl	80002e0 <strcmp>
 8017372:	4605      	mov	r5, r0
 8017374:	b9f0      	cbnz	r0, 80173b4 <rcl_get_security_options_from_environment+0x70>
 8017376:	9001      	str	r0, [sp, #4]
 8017378:	f1b8 0f00 	cmp.w	r8, #0
 801737c:	d021      	beq.n	80173c2 <rcl_get_security_options_from_environment+0x7e>
 801737e:	a901      	add	r1, sp, #4
 8017380:	4817      	ldr	r0, [pc, #92]	@ (80173e0 <rcl_get_security_options_from_environment+0x9c>)
 8017382:	f002 f8c9 	bl	8019518 <rcutils_get_env>
 8017386:	2800      	cmp	r0, #0
 8017388:	d1e9      	bne.n	801735e <rcl_get_security_options_from_environment+0x1a>
 801738a:	4916      	ldr	r1, [pc, #88]	@ (80173e4 <rcl_get_security_options_from_environment+0xa0>)
 801738c:	9801      	ldr	r0, [sp, #4]
 801738e:	f7e8 ffa7 	bl	80002e0 <strcmp>
 8017392:	4603      	mov	r3, r0
 8017394:	4639      	mov	r1, r7
 8017396:	4630      	mov	r0, r6
 8017398:	fab3 f383 	clz	r3, r3
 801739c:	095b      	lsrs	r3, r3, #5
 801739e:	f888 3000 	strb.w	r3, [r8]
 80173a2:	f7ff ff65 	bl	8017270 <rcl_get_secure_root>
 80173a6:	b170      	cbz	r0, 80173c6 <rcl_get_security_options_from_environment+0x82>
 80173a8:	f8c8 0004 	str.w	r0, [r8, #4]
 80173ac:	4628      	mov	r0, r5
 80173ae:	b002      	add	sp, #8
 80173b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173b4:	4625      	mov	r5, r4
 80173b6:	f888 4000 	strb.w	r4, [r8]
 80173ba:	4628      	mov	r0, r5
 80173bc:	b002      	add	sp, #8
 80173be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173c2:	250b      	movs	r5, #11
 80173c4:	e7cc      	b.n	8017360 <rcl_get_security_options_from_environment+0x1c>
 80173c6:	f898 5000 	ldrb.w	r5, [r8]
 80173ca:	f1a5 0501 	sub.w	r5, r5, #1
 80173ce:	fab5 f585 	clz	r5, r5
 80173d2:	096d      	lsrs	r5, r5, #5
 80173d4:	e7c4      	b.n	8017360 <rcl_get_security_options_from_environment+0x1c>
 80173d6:	bf00      	nop
 80173d8:	080246f8 	.word	0x080246f8
 80173dc:	0802470c 	.word	0x0802470c
 80173e0:	08024714 	.word	0x08024714
 80173e4:	0802472c 	.word	0x0802472c

080173e8 <rcl_get_zero_initialized_service>:
 80173e8:	4b01      	ldr	r3, [pc, #4]	@ (80173f0 <rcl_get_zero_initialized_service+0x8>)
 80173ea:	6818      	ldr	r0, [r3, #0]
 80173ec:	4770      	bx	lr
 80173ee:	bf00      	nop
 80173f0:	08024778 	.word	0x08024778

080173f4 <rcl_service_init>:
 80173f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80173f8:	b088      	sub	sp, #32
 80173fa:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80173fc:	b1ff      	cbz	r7, 801743e <rcl_service_init+0x4a>
 80173fe:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 8017402:	4605      	mov	r5, r0
 8017404:	460e      	mov	r6, r1
 8017406:	4691      	mov	r9, r2
 8017408:	4650      	mov	r0, sl
 801740a:	4698      	mov	r8, r3
 801740c:	f7fe fa22 	bl	8015854 <rcutils_allocator_is_valid>
 8017410:	f080 0401 	eor.w	r4, r0, #1
 8017414:	b2e4      	uxtb	r4, r4
 8017416:	b994      	cbnz	r4, 801743e <rcl_service_init+0x4a>
 8017418:	b18d      	cbz	r5, 801743e <rcl_service_init+0x4a>
 801741a:	4630      	mov	r0, r6
 801741c:	f7ff fcc8 	bl	8016db0 <rcl_node_is_valid>
 8017420:	2800      	cmp	r0, #0
 8017422:	d05d      	beq.n	80174e0 <rcl_service_init+0xec>
 8017424:	f1b8 0f00 	cmp.w	r8, #0
 8017428:	d009      	beq.n	801743e <rcl_service_init+0x4a>
 801742a:	f1b9 0f00 	cmp.w	r9, #0
 801742e:	d006      	beq.n	801743e <rcl_service_init+0x4a>
 8017430:	682b      	ldr	r3, [r5, #0]
 8017432:	b14b      	cbz	r3, 8017448 <rcl_service_init+0x54>
 8017434:	2464      	movs	r4, #100	@ 0x64
 8017436:	4620      	mov	r0, r4
 8017438:	b008      	add	sp, #32
 801743a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801743e:	240b      	movs	r4, #11
 8017440:	4620      	mov	r0, r4
 8017442:	b008      	add	sp, #32
 8017444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017448:	aa07      	add	r2, sp, #28
 801744a:	9304      	str	r3, [sp, #16]
 801744c:	9307      	str	r3, [sp, #28]
 801744e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8017452:	9205      	str	r2, [sp, #20]
 8017454:	2201      	movs	r2, #1
 8017456:	9203      	str	r2, [sp, #12]
 8017458:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801745c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017460:	4641      	mov	r1, r8
 8017462:	4630      	mov	r0, r6
 8017464:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8017468:	f7ff fcfa 	bl	8016e60 <rcl_node_resolve_name>
 801746c:	2800      	cmp	r0, #0
 801746e:	d146      	bne.n	80174fe <rcl_service_init+0x10a>
 8017470:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017472:	f44f 7088 	mov.w	r0, #272	@ 0x110
 8017476:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8017478:	4798      	blx	r3
 801747a:	6028      	str	r0, [r5, #0]
 801747c:	2800      	cmp	r0, #0
 801747e:	d046      	beq.n	801750e <rcl_service_init+0x11a>
 8017480:	4630      	mov	r0, r6
 8017482:	f7ff fcb7 	bl	8016df4 <rcl_node_get_rmw_handle>
 8017486:	463b      	mov	r3, r7
 8017488:	4649      	mov	r1, r9
 801748a:	9a07      	ldr	r2, [sp, #28]
 801748c:	682c      	ldr	r4, [r5, #0]
 801748e:	f003 fb17 	bl	801aac0 <rmw_create_service>
 8017492:	682b      	ldr	r3, [r5, #0]
 8017494:	f8c4 0108 	str.w	r0, [r4, #264]	@ 0x108
 8017498:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801749c:	b338      	cbz	r0, 80174ee <rcl_service_init+0xfa>
 801749e:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 80174a2:	f003 fc3f 	bl	801ad24 <rmw_service_request_subscription_get_actual_qos>
 80174a6:	bb00      	cbnz	r0, 80174ea <rcl_service_init+0xf6>
 80174a8:	682b      	ldr	r3, [r5, #0]
 80174aa:	f103 01b8 	add.w	r1, r3, #184	@ 0xb8
 80174ae:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80174b2:	f003 fc23 	bl	801acfc <rmw_service_response_publisher_get_actual_qos>
 80174b6:	4604      	mov	r4, r0
 80174b8:	b9b8      	cbnz	r0, 80174ea <rcl_service_init+0xf6>
 80174ba:	6828      	ldr	r0, [r5, #0]
 80174bc:	2268      	movs	r2, #104	@ 0x68
 80174be:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80174c2:	4639      	mov	r1, r7
 80174c4:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 80174c8:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 80174cc:	f00a fc25 	bl	8021d1a <memcpy>
 80174d0:	9807      	ldr	r0, [sp, #28]
 80174d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80174d4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80174d6:	4798      	blx	r3
 80174d8:	4620      	mov	r0, r4
 80174da:	b008      	add	sp, #32
 80174dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174e0:	24c8      	movs	r4, #200	@ 0xc8
 80174e2:	4620      	mov	r0, r4
 80174e4:	b008      	add	sp, #32
 80174e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174ea:	682b      	ldr	r3, [r5, #0]
 80174ec:	b16b      	cbz	r3, 801750a <rcl_service_init+0x116>
 80174ee:	4618      	mov	r0, r3
 80174f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80174f2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80174f4:	2401      	movs	r4, #1
 80174f6:	4790      	blx	r2
 80174f8:	2300      	movs	r3, #0
 80174fa:	602b      	str	r3, [r5, #0]
 80174fc:	e7e8      	b.n	80174d0 <rcl_service_init+0xdc>
 80174fe:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 8017502:	2b01      	cmp	r3, #1
 8017504:	d905      	bls.n	8017512 <rcl_service_init+0x11e>
 8017506:	280a      	cmp	r0, #10
 8017508:	d001      	beq.n	801750e <rcl_service_init+0x11a>
 801750a:	2401      	movs	r4, #1
 801750c:	e7e0      	b.n	80174d0 <rcl_service_init+0xdc>
 801750e:	240a      	movs	r4, #10
 8017510:	e7de      	b.n	80174d0 <rcl_service_init+0xdc>
 8017512:	2468      	movs	r4, #104	@ 0x68
 8017514:	e7dc      	b.n	80174d0 <rcl_service_init+0xdc>
 8017516:	bf00      	nop

08017518 <rcl_service_get_default_options>:
 8017518:	b530      	push	{r4, r5, lr}
 801751a:	4d0f      	ldr	r5, [pc, #60]	@ (8017558 <rcl_service_get_default_options+0x40>)
 801751c:	b087      	sub	sp, #28
 801751e:	4604      	mov	r4, r0
 8017520:	2250      	movs	r2, #80	@ 0x50
 8017522:	490e      	ldr	r1, [pc, #56]	@ (801755c <rcl_service_get_default_options+0x44>)
 8017524:	4628      	mov	r0, r5
 8017526:	f00a fbf8 	bl	8021d1a <memcpy>
 801752a:	4668      	mov	r0, sp
 801752c:	f7fe f984 	bl	8015838 <rcutils_get_default_allocator>
 8017530:	46ec      	mov	ip, sp
 8017532:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8017536:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801753a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801753e:	f8dc 3000 	ldr.w	r3, [ip]
 8017542:	2268      	movs	r2, #104	@ 0x68
 8017544:	4629      	mov	r1, r5
 8017546:	4620      	mov	r0, r4
 8017548:	f8ce 3000 	str.w	r3, [lr]
 801754c:	f00a fbe5 	bl	8021d1a <memcpy>
 8017550:	4620      	mov	r0, r4
 8017552:	b007      	add	sp, #28
 8017554:	bd30      	pop	{r4, r5, pc}
 8017556:	bf00      	nop
 8017558:	240649d0 	.word	0x240649d0
 801755c:	08024780 	.word	0x08024780

08017560 <rcl_service_get_rmw_handle>:
 8017560:	b118      	cbz	r0, 801756a <rcl_service_get_rmw_handle+0xa>
 8017562:	6800      	ldr	r0, [r0, #0]
 8017564:	b108      	cbz	r0, 801756a <rcl_service_get_rmw_handle+0xa>
 8017566:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801756a:	4770      	bx	lr

0801756c <rcl_take_request>:
 801756c:	b570      	push	{r4, r5, r6, lr}
 801756e:	468e      	mov	lr, r1
 8017570:	b08c      	sub	sp, #48	@ 0x30
 8017572:	460c      	mov	r4, r1
 8017574:	4616      	mov	r6, r2
 8017576:	f10d 0c18 	add.w	ip, sp, #24
 801757a:	4605      	mov	r5, r0
 801757c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017580:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017584:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8017588:	e88c 0003 	stmia.w	ip, {r0, r1}
 801758c:	b30d      	cbz	r5, 80175d2 <rcl_take_request+0x66>
 801758e:	682b      	ldr	r3, [r5, #0]
 8017590:	b1fb      	cbz	r3, 80175d2 <rcl_take_request+0x66>
 8017592:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8017596:	b1e0      	cbz	r0, 80175d2 <rcl_take_request+0x66>
 8017598:	b336      	cbz	r6, 80175e8 <rcl_take_request+0x7c>
 801759a:	2300      	movs	r3, #0
 801759c:	4632      	mov	r2, r6
 801759e:	a902      	add	r1, sp, #8
 80175a0:	f88d 3007 	strb.w	r3, [sp, #7]
 80175a4:	f10d 0307 	add.w	r3, sp, #7
 80175a8:	f003 f988 	bl	801a8bc <rmw_take_request>
 80175ac:	4605      	mov	r5, r0
 80175ae:	b198      	cbz	r0, 80175d8 <rcl_take_request+0x6c>
 80175b0:	280a      	cmp	r0, #10
 80175b2:	bf18      	it	ne
 80175b4:	2501      	movne	r5, #1
 80175b6:	f10d 0e18 	add.w	lr, sp, #24
 80175ba:	46a4      	mov	ip, r4
 80175bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80175c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80175c4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80175c8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80175cc:	4628      	mov	r0, r5
 80175ce:	b00c      	add	sp, #48	@ 0x30
 80175d0:	bd70      	pop	{r4, r5, r6, pc}
 80175d2:	f44f 7516 	mov.w	r5, #600	@ 0x258
 80175d6:	e7ee      	b.n	80175b6 <rcl_take_request+0x4a>
 80175d8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80175dc:	f240 2359 	movw	r3, #601	@ 0x259
 80175e0:	2a00      	cmp	r2, #0
 80175e2:	bf08      	it	eq
 80175e4:	461d      	moveq	r5, r3
 80175e6:	e7e6      	b.n	80175b6 <rcl_take_request+0x4a>
 80175e8:	250b      	movs	r5, #11
 80175ea:	e7e4      	b.n	80175b6 <rcl_take_request+0x4a>

080175ec <rcl_send_response>:
 80175ec:	b170      	cbz	r0, 801760c <rcl_send_response+0x20>
 80175ee:	6800      	ldr	r0, [r0, #0]
 80175f0:	b160      	cbz	r0, 801760c <rcl_send_response+0x20>
 80175f2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80175f6:	b148      	cbz	r0, 801760c <rcl_send_response+0x20>
 80175f8:	b169      	cbz	r1, 8017616 <rcl_send_response+0x2a>
 80175fa:	b510      	push	{r4, lr}
 80175fc:	b14a      	cbz	r2, 8017612 <rcl_send_response+0x26>
 80175fe:	f003 f9bb 	bl	801a978 <rmw_send_response>
 8017602:	b110      	cbz	r0, 801760a <rcl_send_response+0x1e>
 8017604:	2802      	cmp	r0, #2
 8017606:	bf18      	it	ne
 8017608:	2001      	movne	r0, #1
 801760a:	bd10      	pop	{r4, pc}
 801760c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8017610:	4770      	bx	lr
 8017612:	200b      	movs	r0, #11
 8017614:	bd10      	pop	{r4, pc}
 8017616:	200b      	movs	r0, #11
 8017618:	4770      	bx	lr
 801761a:	bf00      	nop

0801761c <rcl_service_is_valid>:
 801761c:	b130      	cbz	r0, 801762c <rcl_service_is_valid+0x10>
 801761e:	6800      	ldr	r0, [r0, #0]
 8017620:	b120      	cbz	r0, 801762c <rcl_service_is_valid+0x10>
 8017622:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8017626:	3800      	subs	r0, #0
 8017628:	bf18      	it	ne
 801762a:	2001      	movne	r0, #1
 801762c:	4770      	bx	lr
 801762e:	bf00      	nop

08017630 <rcl_get_zero_initialized_subscription>:
 8017630:	4b01      	ldr	r3, [pc, #4]	@ (8017638 <rcl_get_zero_initialized_subscription+0x8>)
 8017632:	6818      	ldr	r0, [r3, #0]
 8017634:	4770      	bx	lr
 8017636:	bf00      	nop
 8017638:	080247d0 	.word	0x080247d0

0801763c <rcl_subscription_init>:
 801763c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017640:	b088      	sub	sp, #32
 8017642:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8017644:	b1ff      	cbz	r7, 8017686 <rcl_subscription_init+0x4a>
 8017646:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 801764a:	4605      	mov	r5, r0
 801764c:	460e      	mov	r6, r1
 801764e:	4691      	mov	r9, r2
 8017650:	4650      	mov	r0, sl
 8017652:	4698      	mov	r8, r3
 8017654:	f7fe f8fe 	bl	8015854 <rcutils_allocator_is_valid>
 8017658:	f080 0401 	eor.w	r4, r0, #1
 801765c:	b2e4      	uxtb	r4, r4
 801765e:	b994      	cbnz	r4, 8017686 <rcl_subscription_init+0x4a>
 8017660:	b18d      	cbz	r5, 8017686 <rcl_subscription_init+0x4a>
 8017662:	4630      	mov	r0, r6
 8017664:	f7ff fba4 	bl	8016db0 <rcl_node_is_valid>
 8017668:	2800      	cmp	r0, #0
 801766a:	d055      	beq.n	8017718 <rcl_subscription_init+0xdc>
 801766c:	f1b9 0f00 	cmp.w	r9, #0
 8017670:	d009      	beq.n	8017686 <rcl_subscription_init+0x4a>
 8017672:	f1b8 0f00 	cmp.w	r8, #0
 8017676:	d006      	beq.n	8017686 <rcl_subscription_init+0x4a>
 8017678:	682b      	ldr	r3, [r5, #0]
 801767a:	b14b      	cbz	r3, 8017690 <rcl_subscription_init+0x54>
 801767c:	2464      	movs	r4, #100	@ 0x64
 801767e:	4620      	mov	r0, r4
 8017680:	b008      	add	sp, #32
 8017682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017686:	240b      	movs	r4, #11
 8017688:	4620      	mov	r0, r4
 801768a:	b008      	add	sp, #32
 801768c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017690:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8017694:	aa07      	add	r2, sp, #28
 8017696:	9307      	str	r3, [sp, #28]
 8017698:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801769c:	9205      	str	r2, [sp, #20]
 801769e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80176a2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80176a6:	4641      	mov	r1, r8
 80176a8:	4630      	mov	r0, r6
 80176aa:	e89a 000c 	ldmia.w	sl, {r2, r3}
 80176ae:	f7ff fbd7 	bl	8016e60 <rcl_node_resolve_name>
 80176b2:	2800      	cmp	r0, #0
 80176b4:	d15f      	bne.n	8017776 <rcl_subscription_init+0x13a>
 80176b6:	21c8      	movs	r1, #200	@ 0xc8
 80176b8:	2001      	movs	r0, #1
 80176ba:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	@ 0x5c
 80176be:	4798      	blx	r3
 80176c0:	6028      	str	r0, [r5, #0]
 80176c2:	2800      	cmp	r0, #0
 80176c4:	d05f      	beq.n	8017786 <rcl_subscription_init+0x14a>
 80176c6:	4630      	mov	r0, r6
 80176c8:	f7ff fb94 	bl	8016df4 <rcl_node_get_rmw_handle>
 80176cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80176d0:	4649      	mov	r1, r9
 80176d2:	9a07      	ldr	r2, [sp, #28]
 80176d4:	9300      	str	r3, [sp, #0]
 80176d6:	463b      	mov	r3, r7
 80176d8:	682c      	ldr	r4, [r5, #0]
 80176da:	f003 fb37 	bl	801ad4c <rmw_create_subscription>
 80176de:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 80176e2:	682c      	ldr	r4, [r5, #0]
 80176e4:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 80176e8:	b348      	cbz	r0, 801773e <rcl_subscription_init+0x102>
 80176ea:	f104 0170 	add.w	r1, r4, #112	@ 0x70
 80176ee:	f003 fc23 	bl	801af38 <rmw_subscription_get_actual_qos>
 80176f2:	4604      	mov	r4, r0
 80176f4:	b9a8      	cbnz	r0, 8017722 <rcl_subscription_init+0xe6>
 80176f6:	6828      	ldr	r0, [r5, #0]
 80176f8:	2270      	movs	r2, #112	@ 0x70
 80176fa:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80176fe:	4639      	mov	r1, r7
 8017700:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8017704:	f00a fb09 	bl	8021d1a <memcpy>
 8017708:	9807      	ldr	r0, [sp, #28]
 801770a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801770c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801770e:	4798      	blx	r3
 8017710:	4620      	mov	r0, r4
 8017712:	b008      	add	sp, #32
 8017714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017718:	24c8      	movs	r4, #200	@ 0xc8
 801771a:	4620      	mov	r0, r4
 801771c:	b008      	add	sp, #32
 801771e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017722:	682c      	ldr	r4, [r5, #0]
 8017724:	b36c      	cbz	r4, 8017782 <rcl_subscription_init+0x146>
 8017726:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 801772a:	b14b      	cbz	r3, 8017740 <rcl_subscription_init+0x104>
 801772c:	4630      	mov	r0, r6
 801772e:	f7ff fb61 	bl	8016df4 <rcl_node_get_rmw_handle>
 8017732:	682b      	ldr	r3, [r5, #0]
 8017734:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8017738:	f003 fc12 	bl	801af60 <rmw_destroy_subscription>
 801773c:	682c      	ldr	r4, [r5, #0]
 801773e:	b194      	cbz	r4, 8017766 <rcl_subscription_init+0x12a>
 8017740:	f104 0650 	add.w	r6, r4, #80	@ 0x50
 8017744:	4630      	mov	r0, r6
 8017746:	f7fe f885 	bl	8015854 <rcutils_allocator_is_valid>
 801774a:	b158      	cbz	r0, 8017764 <rcl_subscription_init+0x128>
 801774c:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 801774e:	b148      	cbz	r0, 8017764 <rcl_subscription_init+0x128>
 8017750:	4631      	mov	r1, r6
 8017752:	f002 f9dd 	bl	8019b10 <rmw_subscription_content_filter_options_fini>
 8017756:	4606      	mov	r6, r0
 8017758:	b9c8      	cbnz	r0, 801778e <rcl_subscription_init+0x152>
 801775a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801775c:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 801775e:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8017760:	4798      	blx	r3
 8017762:	66e6      	str	r6, [r4, #108]	@ 0x6c
 8017764:	682c      	ldr	r4, [r5, #0]
 8017766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017768:	4620      	mov	r0, r4
 801776a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801776c:	2401      	movs	r4, #1
 801776e:	4798      	blx	r3
 8017770:	2300      	movs	r3, #0
 8017772:	602b      	str	r3, [r5, #0]
 8017774:	e7c8      	b.n	8017708 <rcl_subscription_init+0xcc>
 8017776:	2867      	cmp	r0, #103	@ 0x67
 8017778:	d007      	beq.n	801778a <rcl_subscription_init+0x14e>
 801777a:	2869      	cmp	r0, #105	@ 0x69
 801777c:	d005      	beq.n	801778a <rcl_subscription_init+0x14e>
 801777e:	280a      	cmp	r0, #10
 8017780:	d001      	beq.n	8017786 <rcl_subscription_init+0x14a>
 8017782:	2401      	movs	r4, #1
 8017784:	e7c0      	b.n	8017708 <rcl_subscription_init+0xcc>
 8017786:	240a      	movs	r4, #10
 8017788:	e7be      	b.n	8017708 <rcl_subscription_init+0xcc>
 801778a:	2467      	movs	r4, #103	@ 0x67
 801778c:	e7bc      	b.n	8017708 <rcl_subscription_init+0xcc>
 801778e:	f008 f979 	bl	801fa84 <rcl_convert_rmw_ret_to_rcl_ret>
 8017792:	682c      	ldr	r4, [r5, #0]
 8017794:	e7e7      	b.n	8017766 <rcl_subscription_init+0x12a>
 8017796:	bf00      	nop

08017798 <rcl_subscription_get_default_options>:
 8017798:	b570      	push	{r4, r5, r6, lr}
 801779a:	4d14      	ldr	r5, [pc, #80]	@ (80177ec <rcl_subscription_get_default_options+0x54>)
 801779c:	b08a      	sub	sp, #40	@ 0x28
 801779e:	4604      	mov	r4, r0
 80177a0:	2250      	movs	r2, #80	@ 0x50
 80177a2:	4913      	ldr	r1, [pc, #76]	@ (80177f0 <rcl_subscription_get_default_options+0x58>)
 80177a4:	4628      	mov	r0, r5
 80177a6:	f00a fab8 	bl	8021d1a <memcpy>
 80177aa:	a804      	add	r0, sp, #16
 80177ac:	f7fe f844 	bl	8015838 <rcutils_get_default_allocator>
 80177b0:	f10d 0c10 	add.w	ip, sp, #16
 80177b4:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80177b8:	466e      	mov	r6, sp
 80177ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80177be:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80177c2:	f8dc 3000 	ldr.w	r3, [ip]
 80177c6:	4630      	mov	r0, r6
 80177c8:	f8ce 3000 	str.w	r3, [lr]
 80177cc:	f002 f9ba 	bl	8019b44 <rmw_get_default_subscription_options>
 80177d0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80177d4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80177d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80177dc:	2270      	movs	r2, #112	@ 0x70
 80177de:	4629      	mov	r1, r5
 80177e0:	4620      	mov	r0, r4
 80177e2:	f00a fa9a 	bl	8021d1a <memcpy>
 80177e6:	4620      	mov	r0, r4
 80177e8:	b00a      	add	sp, #40	@ 0x28
 80177ea:	bd70      	pop	{r4, r5, r6, pc}
 80177ec:	24064a38 	.word	0x24064a38
 80177f0:	080247d8 	.word	0x080247d8

080177f4 <rcl_take>:
 80177f4:	2800      	cmp	r0, #0
 80177f6:	d049      	beq.n	801788c <rcl_take+0x98>
 80177f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177fc:	4615      	mov	r5, r2
 80177fe:	6802      	ldr	r2, [r0, #0]
 8017800:	b0a4      	sub	sp, #144	@ 0x90
 8017802:	4604      	mov	r4, r0
 8017804:	2a00      	cmp	r2, #0
 8017806:	d039      	beq.n	801787c <rcl_take+0x88>
 8017808:	461f      	mov	r7, r3
 801780a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 801780e:	b3ab      	cbz	r3, 801787c <rcl_take+0x88>
 8017810:	460e      	mov	r6, r1
 8017812:	2900      	cmp	r1, #0
 8017814:	d038      	beq.n	8017888 <rcl_take+0x94>
 8017816:	2d00      	cmp	r5, #0
 8017818:	d03c      	beq.n	8017894 <rcl_take+0xa0>
 801781a:	a802      	add	r0, sp, #8
 801781c:	f04f 0800 	mov.w	r8, #0
 8017820:	f002 f996 	bl	8019b50 <rmw_get_zero_initialized_message_info>
 8017824:	f10d 0c08 	add.w	ip, sp, #8
 8017828:	46ae      	mov	lr, r5
 801782a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801782e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017832:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017836:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801783a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801783e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017842:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8017846:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801784a:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 801784e:	462b      	mov	r3, r5
 8017850:	6820      	ldr	r0, [r4, #0]
 8017852:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8017856:	4631      	mov	r1, r6
 8017858:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801785c:	9700      	str	r7, [sp, #0]
 801785e:	f003 fbe1 	bl	801b024 <rmw_take_with_info>
 8017862:	4603      	mov	r3, r0
 8017864:	b9c0      	cbnz	r0, 8017898 <rcl_take+0xa4>
 8017866:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 801786a:	f240 1291 	movw	r2, #401	@ 0x191
 801786e:	2900      	cmp	r1, #0
 8017870:	bf08      	it	eq
 8017872:	4613      	moveq	r3, r2
 8017874:	4618      	mov	r0, r3
 8017876:	b024      	add	sp, #144	@ 0x90
 8017878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801787c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8017880:	4618      	mov	r0, r3
 8017882:	b024      	add	sp, #144	@ 0x90
 8017884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017888:	230b      	movs	r3, #11
 801788a:	e7f3      	b.n	8017874 <rcl_take+0x80>
 801788c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8017890:	4618      	mov	r0, r3
 8017892:	4770      	bx	lr
 8017894:	ad14      	add	r5, sp, #80	@ 0x50
 8017896:	e7c0      	b.n	801781a <rcl_take+0x26>
 8017898:	f008 f8f4 	bl	801fa84 <rcl_convert_rmw_ret_to_rcl_ret>
 801789c:	4603      	mov	r3, r0
 801789e:	e7e9      	b.n	8017874 <rcl_take+0x80>

080178a0 <rcl_subscription_get_rmw_handle>:
 80178a0:	b118      	cbz	r0, 80178aa <rcl_subscription_get_rmw_handle+0xa>
 80178a2:	6800      	ldr	r0, [r0, #0]
 80178a4:	b108      	cbz	r0, 80178aa <rcl_subscription_get_rmw_handle+0xa>
 80178a6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80178aa:	4770      	bx	lr

080178ac <rcl_subscription_is_valid>:
 80178ac:	b130      	cbz	r0, 80178bc <rcl_subscription_is_valid+0x10>
 80178ae:	6800      	ldr	r0, [r0, #0]
 80178b0:	b120      	cbz	r0, 80178bc <rcl_subscription_is_valid+0x10>
 80178b2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80178b6:	3800      	subs	r0, #0
 80178b8:	bf18      	it	ne
 80178ba:	2001      	movne	r0, #1
 80178bc:	4770      	bx	lr
 80178be:	bf00      	nop

080178c0 <rcl_get_system_time>:
 80178c0:	4608      	mov	r0, r1
 80178c2:	f7fe b809 	b.w	80158d8 <rcutils_system_time_now>
 80178c6:	bf00      	nop

080178c8 <rcl_get_steady_time>:
 80178c8:	4608      	mov	r0, r1
 80178ca:	f7fe b82b 	b.w	8015924 <rcutils_steady_time_now>
 80178ce:	bf00      	nop

080178d0 <rcl_get_ros_time>:
 80178d0:	7a03      	ldrb	r3, [r0, #8]
 80178d2:	b510      	push	{r4, lr}
 80178d4:	460c      	mov	r4, r1
 80178d6:	b143      	cbz	r3, 80178ea <rcl_get_ros_time+0x1a>
 80178d8:	2105      	movs	r1, #5
 80178da:	f001 fd79 	bl	80193d0 <__atomic_load_8>
 80178de:	4602      	mov	r2, r0
 80178e0:	460b      	mov	r3, r1
 80178e2:	2000      	movs	r0, #0
 80178e4:	e9c4 2300 	strd	r2, r3, [r4]
 80178e8:	bd10      	pop	{r4, pc}
 80178ea:	4608      	mov	r0, r1
 80178ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178f0:	f7fd bff2 	b.w	80158d8 <rcutils_system_time_now>

080178f4 <rcl_clock_init>:
 80178f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178f6:	4605      	mov	r5, r0
 80178f8:	4610      	mov	r0, r2
 80178fa:	4614      	mov	r4, r2
 80178fc:	460e      	mov	r6, r1
 80178fe:	f7fd ffa9 	bl	8015854 <rcutils_allocator_is_valid>
 8017902:	b128      	cbz	r0, 8017910 <rcl_clock_init+0x1c>
 8017904:	2d03      	cmp	r5, #3
 8017906:	d803      	bhi.n	8017910 <rcl_clock_init+0x1c>
 8017908:	e8df f005 	tbb	[pc, r5]
 801790c:	0659301f 	.word	0x0659301f
 8017910:	f04f 0c0b 	mov.w	ip, #11
 8017914:	4660      	mov	r0, ip
 8017916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017918:	2c00      	cmp	r4, #0
 801791a:	d0f9      	beq.n	8017910 <rcl_clock_init+0x1c>
 801791c:	fab6 f386 	clz	r3, r6
 8017920:	095b      	lsrs	r3, r3, #5
 8017922:	2e00      	cmp	r6, #0
 8017924:	d0f4      	beq.n	8017910 <rcl_clock_init+0x1c>
 8017926:	6133      	str	r3, [r6, #16]
 8017928:	469c      	mov	ip, r3
 801792a:	f106 0514 	add.w	r5, r6, #20
 801792e:	4f32      	ldr	r7, [pc, #200]	@ (80179f8 <rcl_clock_init+0x104>)
 8017930:	f04f 0e03 	mov.w	lr, #3
 8017934:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8017938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801793a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801793c:	6823      	ldr	r3, [r4, #0]
 801793e:	4660      	mov	r0, ip
 8017940:	602b      	str	r3, [r5, #0]
 8017942:	60f7      	str	r7, [r6, #12]
 8017944:	f886 e000 	strb.w	lr, [r6]
 8017948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801794a:	2e00      	cmp	r6, #0
 801794c:	d0e0      	beq.n	8017910 <rcl_clock_init+0x1c>
 801794e:	2300      	movs	r3, #0
 8017950:	f106 0514 	add.w	r5, r6, #20
 8017954:	7033      	strb	r3, [r6, #0]
 8017956:	469c      	mov	ip, r3
 8017958:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801795c:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8017960:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017962:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017964:	6823      	ldr	r3, [r4, #0]
 8017966:	4660      	mov	r0, ip
 8017968:	602b      	str	r3, [r5, #0]
 801796a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801796c:	2c00      	cmp	r4, #0
 801796e:	d0cf      	beq.n	8017910 <rcl_clock_init+0x1c>
 8017970:	fab6 f586 	clz	r5, r6
 8017974:	096d      	lsrs	r5, r5, #5
 8017976:	2e00      	cmp	r6, #0
 8017978:	d0ca      	beq.n	8017910 <rcl_clock_init+0x1c>
 801797a:	46a6      	mov	lr, r4
 801797c:	7035      	strb	r5, [r6, #0]
 801797e:	f106 0c14 	add.w	ip, r6, #20
 8017982:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017986:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801798a:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801798e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017992:	f8de 3000 	ldr.w	r3, [lr]
 8017996:	2010      	movs	r0, #16
 8017998:	f8cc 3000 	str.w	r3, [ip]
 801799c:	6823      	ldr	r3, [r4, #0]
 801799e:	6921      	ldr	r1, [r4, #16]
 80179a0:	4798      	blx	r3
 80179a2:	6130      	str	r0, [r6, #16]
 80179a4:	b320      	cbz	r0, 80179f0 <rcl_clock_init+0xfc>
 80179a6:	2200      	movs	r2, #0
 80179a8:	2300      	movs	r3, #0
 80179aa:	46ac      	mov	ip, r5
 80179ac:	7205      	strb	r5, [r0, #8]
 80179ae:	e9c0 2300 	strd	r2, r3, [r0]
 80179b2:	4a12      	ldr	r2, [pc, #72]	@ (80179fc <rcl_clock_init+0x108>)
 80179b4:	2301      	movs	r3, #1
 80179b6:	4660      	mov	r0, ip
 80179b8:	60f2      	str	r2, [r6, #12]
 80179ba:	7033      	strb	r3, [r6, #0]
 80179bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179be:	2c00      	cmp	r4, #0
 80179c0:	d0a6      	beq.n	8017910 <rcl_clock_init+0x1c>
 80179c2:	fab6 f386 	clz	r3, r6
 80179c6:	095b      	lsrs	r3, r3, #5
 80179c8:	2e00      	cmp	r6, #0
 80179ca:	d0a1      	beq.n	8017910 <rcl_clock_init+0x1c>
 80179cc:	6133      	str	r3, [r6, #16]
 80179ce:	469c      	mov	ip, r3
 80179d0:	f106 0514 	add.w	r5, r6, #20
 80179d4:	f8df e028 	ldr.w	lr, [pc, #40]	@ 8017a00 <rcl_clock_init+0x10c>
 80179d8:	2702      	movs	r7, #2
 80179da:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80179de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80179e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80179e2:	6823      	ldr	r3, [r4, #0]
 80179e4:	4660      	mov	r0, ip
 80179e6:	602b      	str	r3, [r5, #0]
 80179e8:	f8c6 e00c 	str.w	lr, [r6, #12]
 80179ec:	7037      	strb	r7, [r6, #0]
 80179ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179f0:	f04f 0c0a 	mov.w	ip, #10
 80179f4:	e78e      	b.n	8017914 <rcl_clock_init+0x20>
 80179f6:	bf00      	nop
 80179f8:	080178c9 	.word	0x080178c9
 80179fc:	080178d1 	.word	0x080178d1
 8017a00:	080178c1 	.word	0x080178c1

08017a04 <rcl_clock_get_now>:
 8017a04:	b140      	cbz	r0, 8017a18 <rcl_clock_get_now+0x14>
 8017a06:	b139      	cbz	r1, 8017a18 <rcl_clock_get_now+0x14>
 8017a08:	7803      	ldrb	r3, [r0, #0]
 8017a0a:	b11b      	cbz	r3, 8017a14 <rcl_clock_get_now+0x10>
 8017a0c:	68c3      	ldr	r3, [r0, #12]
 8017a0e:	b10b      	cbz	r3, 8017a14 <rcl_clock_get_now+0x10>
 8017a10:	6900      	ldr	r0, [r0, #16]
 8017a12:	4718      	bx	r3
 8017a14:	2001      	movs	r0, #1
 8017a16:	4770      	bx	lr
 8017a18:	200b      	movs	r0, #11
 8017a1a:	4770      	bx	lr

08017a1c <rcl_timer_call>:
 8017a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a20:	b087      	sub	sp, #28
 8017a22:	2800      	cmp	r0, #0
 8017a24:	d06c      	beq.n	8017b00 <rcl_timer_call+0xe4>
 8017a26:	6803      	ldr	r3, [r0, #0]
 8017a28:	4604      	mov	r4, r0
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d062      	beq.n	8017af4 <rcl_timer_call+0xd8>
 8017a2e:	f3bf 8f5b 	dmb	ish
 8017a32:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8017a36:	f3bf 8f5b 	dmb	ish
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d14f      	bne.n	8017ade <rcl_timer_call+0xc2>
 8017a3e:	6803      	ldr	r3, [r0, #0]
 8017a40:	a904      	add	r1, sp, #16
 8017a42:	6818      	ldr	r0, [r3, #0]
 8017a44:	f7ff ffde 	bl	8017a04 <rcl_clock_get_now>
 8017a48:	4605      	mov	r5, r0
 8017a4a:	2800      	cmp	r0, #0
 8017a4c:	d149      	bne.n	8017ae2 <rcl_timer_call+0xc6>
 8017a4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	db49      	blt.n	8017aea <rcl_timer_call+0xce>
 8017a56:	2605      	movs	r6, #5
 8017a58:	6820      	ldr	r0, [r4, #0]
 8017a5a:	9600      	str	r6, [sp, #0]
 8017a5c:	3020      	adds	r0, #32
 8017a5e:	f001 fd23 	bl	80194a8 <__atomic_exchange_8>
 8017a62:	6823      	ldr	r3, [r4, #0]
 8017a64:	4680      	mov	r8, r0
 8017a66:	f3bf 8f5b 	dmb	ish
 8017a6a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8017a6e:	f3bf 8f5b 	dmb	ish
 8017a72:	6820      	ldr	r0, [r4, #0]
 8017a74:	4689      	mov	r9, r1
 8017a76:	4631      	mov	r1, r6
 8017a78:	3028      	adds	r0, #40	@ 0x28
 8017a7a:	f001 fca9 	bl	80193d0 <__atomic_load_8>
 8017a7e:	460f      	mov	r7, r1
 8017a80:	4631      	mov	r1, r6
 8017a82:	4606      	mov	r6, r0
 8017a84:	6820      	ldr	r0, [r4, #0]
 8017a86:	3018      	adds	r0, #24
 8017a88:	f001 fca2 	bl	80193d0 <__atomic_load_8>
 8017a8c:	4602      	mov	r2, r0
 8017a8e:	9804      	ldr	r0, [sp, #16]
 8017a90:	460b      	mov	r3, r1
 8017a92:	18b6      	adds	r6, r6, r2
 8017a94:	f8dd c014 	ldr.w	ip, [sp, #20]
 8017a98:	4692      	mov	sl, r2
 8017a9a:	eb47 0701 	adc.w	r7, r7, r1
 8017a9e:	4286      	cmp	r6, r0
 8017aa0:	eb77 010c 	sbcs.w	r1, r7, ip
 8017aa4:	da04      	bge.n	8017ab0 <rcl_timer_call+0x94>
 8017aa6:	ea53 0102 	orrs.w	r1, r3, r2
 8017aaa:	d12e      	bne.n	8017b0a <rcl_timer_call+0xee>
 8017aac:	4606      	mov	r6, r0
 8017aae:	4667      	mov	r7, ip
 8017ab0:	6820      	ldr	r0, [r4, #0]
 8017ab2:	2105      	movs	r1, #5
 8017ab4:	4632      	mov	r2, r6
 8017ab6:	463b      	mov	r3, r7
 8017ab8:	3028      	adds	r0, #40	@ 0x28
 8017aba:	9100      	str	r1, [sp, #0]
 8017abc:	f001 fcbe 	bl	801943c <__atomic_store_8>
 8017ac0:	f1bb 0f00 	cmp.w	fp, #0
 8017ac4:	d00d      	beq.n	8017ae2 <rcl_timer_call+0xc6>
 8017ac6:	9a04      	ldr	r2, [sp, #16]
 8017ac8:	4620      	mov	r0, r4
 8017aca:	9b05      	ldr	r3, [sp, #20]
 8017acc:	ebb2 0208 	subs.w	r2, r2, r8
 8017ad0:	eb63 0309 	sbc.w	r3, r3, r9
 8017ad4:	47d8      	blx	fp
 8017ad6:	4628      	mov	r0, r5
 8017ad8:	b007      	add	sp, #28
 8017ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ade:	f240 3521 	movw	r5, #801	@ 0x321
 8017ae2:	4628      	mov	r0, r5
 8017ae4:	b007      	add	sp, #28
 8017ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017aea:	2501      	movs	r5, #1
 8017aec:	4628      	mov	r0, r5
 8017aee:	b007      	add	sp, #28
 8017af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017af4:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8017af8:	4628      	mov	r0, r5
 8017afa:	b007      	add	sp, #28
 8017afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b00:	250b      	movs	r5, #11
 8017b02:	4628      	mov	r0, r5
 8017b04:	b007      	add	sp, #28
 8017b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b0a:	1b80      	subs	r0, r0, r6
 8017b0c:	eb6c 0107 	sbc.w	r1, ip, r7
 8017b10:	3801      	subs	r0, #1
 8017b12:	f161 0100 	sbc.w	r1, r1, #0
 8017b16:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8017b1a:	f7e8 fc49 	bl	80003b0 <__aeabi_ldivmod>
 8017b1e:	9b02      	ldr	r3, [sp, #8]
 8017b20:	3001      	adds	r0, #1
 8017b22:	f141 0100 	adc.w	r1, r1, #0
 8017b26:	fb00 f303 	mul.w	r3, r0, r3
 8017b2a:	fb01 330a 	mla	r3, r1, sl, r3
 8017b2e:	fba0 0a0a 	umull	r0, sl, r0, sl
 8017b32:	1986      	adds	r6, r0, r6
 8017b34:	4453      	add	r3, sl
 8017b36:	eb43 0707 	adc.w	r7, r3, r7
 8017b3a:	e7b9      	b.n	8017ab0 <rcl_timer_call+0x94>

08017b3c <rcl_timer_is_ready>:
 8017b3c:	b570      	push	{r4, r5, r6, lr}
 8017b3e:	b082      	sub	sp, #8
 8017b40:	b380      	cbz	r0, 8017ba4 <rcl_timer_is_ready+0x68>
 8017b42:	6803      	ldr	r3, [r0, #0]
 8017b44:	4604      	mov	r4, r0
 8017b46:	b38b      	cbz	r3, 8017bac <rcl_timer_is_ready+0x70>
 8017b48:	460d      	mov	r5, r1
 8017b4a:	b359      	cbz	r1, 8017ba4 <rcl_timer_is_ready+0x68>
 8017b4c:	f3bf 8f5b 	dmb	ish
 8017b50:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8017b54:	f3bf 8f5b 	dmb	ish
 8017b58:	b953      	cbnz	r3, 8017b70 <rcl_timer_is_ready+0x34>
 8017b5a:	6803      	ldr	r3, [r0, #0]
 8017b5c:	4669      	mov	r1, sp
 8017b5e:	6818      	ldr	r0, [r3, #0]
 8017b60:	f7ff ff50 	bl	8017a04 <rcl_clock_get_now>
 8017b64:	4606      	mov	r6, r0
 8017b66:	b148      	cbz	r0, 8017b7c <rcl_timer_is_ready+0x40>
 8017b68:	f240 3321 	movw	r3, #801	@ 0x321
 8017b6c:	4298      	cmp	r0, r3
 8017b6e:	d102      	bne.n	8017b76 <rcl_timer_is_ready+0x3a>
 8017b70:	2300      	movs	r3, #0
 8017b72:	461e      	mov	r6, r3
 8017b74:	702b      	strb	r3, [r5, #0]
 8017b76:	4630      	mov	r0, r6
 8017b78:	b002      	add	sp, #8
 8017b7a:	bd70      	pop	{r4, r5, r6, pc}
 8017b7c:	6820      	ldr	r0, [r4, #0]
 8017b7e:	2105      	movs	r1, #5
 8017b80:	3028      	adds	r0, #40	@ 0x28
 8017b82:	f001 fc25 	bl	80193d0 <__atomic_load_8>
 8017b86:	9b00      	ldr	r3, [sp, #0]
 8017b88:	1ac0      	subs	r0, r0, r3
 8017b8a:	9b01      	ldr	r3, [sp, #4]
 8017b8c:	eb61 0103 	sbc.w	r1, r1, r3
 8017b90:	2801      	cmp	r0, #1
 8017b92:	4630      	mov	r0, r6
 8017b94:	f171 0300 	sbcs.w	r3, r1, #0
 8017b98:	bfb4      	ite	lt
 8017b9a:	2301      	movlt	r3, #1
 8017b9c:	2300      	movge	r3, #0
 8017b9e:	702b      	strb	r3, [r5, #0]
 8017ba0:	b002      	add	sp, #8
 8017ba2:	bd70      	pop	{r4, r5, r6, pc}
 8017ba4:	260b      	movs	r6, #11
 8017ba6:	4630      	mov	r0, r6
 8017ba8:	b002      	add	sp, #8
 8017baa:	bd70      	pop	{r4, r5, r6, pc}
 8017bac:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8017bb0:	e7e1      	b.n	8017b76 <rcl_timer_is_ready+0x3a>
 8017bb2:	bf00      	nop

08017bb4 <rcl_timer_get_time_until_next_call>:
 8017bb4:	b570      	push	{r4, r5, r6, lr}
 8017bb6:	b082      	sub	sp, #8
 8017bb8:	b330      	cbz	r0, 8017c08 <rcl_timer_get_time_until_next_call+0x54>
 8017bba:	6803      	ldr	r3, [r0, #0]
 8017bbc:	4604      	mov	r4, r0
 8017bbe:	b33b      	cbz	r3, 8017c10 <rcl_timer_get_time_until_next_call+0x5c>
 8017bc0:	460d      	mov	r5, r1
 8017bc2:	b309      	cbz	r1, 8017c08 <rcl_timer_get_time_until_next_call+0x54>
 8017bc4:	f3bf 8f5b 	dmb	ish
 8017bc8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8017bcc:	f3bf 8f5b 	dmb	ish
 8017bd0:	b9ab      	cbnz	r3, 8017bfe <rcl_timer_get_time_until_next_call+0x4a>
 8017bd2:	6803      	ldr	r3, [r0, #0]
 8017bd4:	4669      	mov	r1, sp
 8017bd6:	6818      	ldr	r0, [r3, #0]
 8017bd8:	f7ff ff14 	bl	8017a04 <rcl_clock_get_now>
 8017bdc:	4606      	mov	r6, r0
 8017bde:	b958      	cbnz	r0, 8017bf8 <rcl_timer_get_time_until_next_call+0x44>
 8017be0:	6820      	ldr	r0, [r4, #0]
 8017be2:	2105      	movs	r1, #5
 8017be4:	3028      	adds	r0, #40	@ 0x28
 8017be6:	f001 fbf3 	bl	80193d0 <__atomic_load_8>
 8017bea:	9b00      	ldr	r3, [sp, #0]
 8017bec:	1ac0      	subs	r0, r0, r3
 8017bee:	9b01      	ldr	r3, [sp, #4]
 8017bf0:	eb61 0103 	sbc.w	r1, r1, r3
 8017bf4:	6028      	str	r0, [r5, #0]
 8017bf6:	6069      	str	r1, [r5, #4]
 8017bf8:	4630      	mov	r0, r6
 8017bfa:	b002      	add	sp, #8
 8017bfc:	bd70      	pop	{r4, r5, r6, pc}
 8017bfe:	f240 3621 	movw	r6, #801	@ 0x321
 8017c02:	4630      	mov	r0, r6
 8017c04:	b002      	add	sp, #8
 8017c06:	bd70      	pop	{r4, r5, r6, pc}
 8017c08:	260b      	movs	r6, #11
 8017c0a:	4630      	mov	r0, r6
 8017c0c:	b002      	add	sp, #8
 8017c0e:	bd70      	pop	{r4, r5, r6, pc}
 8017c10:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8017c14:	e7f0      	b.n	8017bf8 <rcl_timer_get_time_until_next_call+0x44>
 8017c16:	bf00      	nop

08017c18 <rcl_timer_get_guard_condition>:
 8017c18:	b130      	cbz	r0, 8017c28 <rcl_timer_get_guard_condition+0x10>
 8017c1a:	6800      	ldr	r0, [r0, #0]
 8017c1c:	b120      	cbz	r0, 8017c28 <rcl_timer_get_guard_condition+0x10>
 8017c1e:	68c3      	ldr	r3, [r0, #12]
 8017c20:	b10b      	cbz	r3, 8017c26 <rcl_timer_get_guard_condition+0xe>
 8017c22:	3008      	adds	r0, #8
 8017c24:	4770      	bx	lr
 8017c26:	4618      	mov	r0, r3
 8017c28:	4770      	bx	lr
 8017c2a:	bf00      	nop

08017c2c <rcl_validate_enclave_name_with_size>:
 8017c2c:	2800      	cmp	r0, #0
 8017c2e:	d049      	beq.n	8017cc4 <rcl_validate_enclave_name_with_size+0x98>
 8017c30:	b570      	push	{r4, r5, r6, lr}
 8017c32:	4615      	mov	r5, r2
 8017c34:	b0c2      	sub	sp, #264	@ 0x108
 8017c36:	b19a      	cbz	r2, 8017c60 <rcl_validate_enclave_name_with_size+0x34>
 8017c38:	461e      	mov	r6, r3
 8017c3a:	466a      	mov	r2, sp
 8017c3c:	ab01      	add	r3, sp, #4
 8017c3e:	460c      	mov	r4, r1
 8017c40:	f002 f80a 	bl	8019c58 <rmw_validate_namespace_with_size>
 8017c44:	4684      	mov	ip, r0
 8017c46:	b9b8      	cbnz	r0, 8017c78 <rcl_validate_enclave_name_with_size+0x4c>
 8017c48:	9900      	ldr	r1, [sp, #0]
 8017c4a:	b171      	cbz	r1, 8017c6a <rcl_validate_enclave_name_with_size+0x3e>
 8017c4c:	2907      	cmp	r1, #7
 8017c4e:	d019      	beq.n	8017c84 <rcl_validate_enclave_name_with_size+0x58>
 8017c50:	1e4b      	subs	r3, r1, #1
 8017c52:	2b05      	cmp	r3, #5
 8017c54:	d83a      	bhi.n	8017ccc <rcl_validate_enclave_name_with_size+0xa0>
 8017c56:	e8df f003 	tbb	[pc, r3]
 8017c5a:	2926      	.short	0x2926
 8017c5c:	1d322f2c 	.word	0x1d322f2c
 8017c60:	f04f 0c0b 	mov.w	ip, #11
 8017c64:	4660      	mov	r0, ip
 8017c66:	b042      	add	sp, #264	@ 0x108
 8017c68:	bd70      	pop	{r4, r5, r6, pc}
 8017c6a:	2907      	cmp	r1, #7
 8017c6c:	d00a      	beq.n	8017c84 <rcl_validate_enclave_name_with_size+0x58>
 8017c6e:	2300      	movs	r3, #0
 8017c70:	4660      	mov	r0, ip
 8017c72:	602b      	str	r3, [r5, #0]
 8017c74:	b042      	add	sp, #264	@ 0x108
 8017c76:	bd70      	pop	{r4, r5, r6, pc}
 8017c78:	f007 ff04 	bl	801fa84 <rcl_convert_rmw_ret_to_rcl_ret>
 8017c7c:	4684      	mov	ip, r0
 8017c7e:	4660      	mov	r0, ip
 8017c80:	b042      	add	sp, #264	@ 0x108
 8017c82:	bd70      	pop	{r4, r5, r6, pc}
 8017c84:	2cff      	cmp	r4, #255	@ 0xff
 8017c86:	d9f2      	bls.n	8017c6e <rcl_validate_enclave_name_with_size+0x42>
 8017c88:	6029      	str	r1, [r5, #0]
 8017c8a:	2e00      	cmp	r6, #0
 8017c8c:	d0ea      	beq.n	8017c64 <rcl_validate_enclave_name_with_size+0x38>
 8017c8e:	23fe      	movs	r3, #254	@ 0xfe
 8017c90:	6033      	str	r3, [r6, #0]
 8017c92:	e7e7      	b.n	8017c64 <rcl_validate_enclave_name_with_size+0x38>
 8017c94:	2306      	movs	r3, #6
 8017c96:	602b      	str	r3, [r5, #0]
 8017c98:	2e00      	cmp	r6, #0
 8017c9a:	d0e3      	beq.n	8017c64 <rcl_validate_enclave_name_with_size+0x38>
 8017c9c:	9b01      	ldr	r3, [sp, #4]
 8017c9e:	4660      	mov	r0, ip
 8017ca0:	6033      	str	r3, [r6, #0]
 8017ca2:	b042      	add	sp, #264	@ 0x108
 8017ca4:	bd70      	pop	{r4, r5, r6, pc}
 8017ca6:	2301      	movs	r3, #1
 8017ca8:	602b      	str	r3, [r5, #0]
 8017caa:	e7f5      	b.n	8017c98 <rcl_validate_enclave_name_with_size+0x6c>
 8017cac:	2302      	movs	r3, #2
 8017cae:	602b      	str	r3, [r5, #0]
 8017cb0:	e7f2      	b.n	8017c98 <rcl_validate_enclave_name_with_size+0x6c>
 8017cb2:	2303      	movs	r3, #3
 8017cb4:	602b      	str	r3, [r5, #0]
 8017cb6:	e7ef      	b.n	8017c98 <rcl_validate_enclave_name_with_size+0x6c>
 8017cb8:	2304      	movs	r3, #4
 8017cba:	602b      	str	r3, [r5, #0]
 8017cbc:	e7ec      	b.n	8017c98 <rcl_validate_enclave_name_with_size+0x6c>
 8017cbe:	2305      	movs	r3, #5
 8017cc0:	602b      	str	r3, [r5, #0]
 8017cc2:	e7e9      	b.n	8017c98 <rcl_validate_enclave_name_with_size+0x6c>
 8017cc4:	f04f 0c0b 	mov.w	ip, #11
 8017cc8:	4660      	mov	r0, ip
 8017cca:	4770      	bx	lr
 8017ccc:	460b      	mov	r3, r1
 8017cce:	4a04      	ldr	r2, [pc, #16]	@ (8017ce0 <rcl_validate_enclave_name_with_size+0xb4>)
 8017cd0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8017cd4:	a802      	add	r0, sp, #8
 8017cd6:	f001 fd33 	bl	8019740 <rcutils_snprintf>
 8017cda:	f04f 0c01 	mov.w	ip, #1
 8017cde:	e7c1      	b.n	8017c64 <rcl_validate_enclave_name_with_size+0x38>
 8017ce0:	08024828 	.word	0x08024828

08017ce4 <rcl_validate_enclave_name>:
 8017ce4:	b168      	cbz	r0, 8017d02 <rcl_validate_enclave_name+0x1e>
 8017ce6:	b570      	push	{r4, r5, r6, lr}
 8017ce8:	460d      	mov	r5, r1
 8017cea:	4616      	mov	r6, r2
 8017cec:	4604      	mov	r4, r0
 8017cee:	f7e8 fb01 	bl	80002f4 <strlen>
 8017cf2:	4633      	mov	r3, r6
 8017cf4:	4601      	mov	r1, r0
 8017cf6:	462a      	mov	r2, r5
 8017cf8:	4620      	mov	r0, r4
 8017cfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017cfe:	f7ff bf95 	b.w	8017c2c <rcl_validate_enclave_name_with_size>
 8017d02:	200b      	movs	r0, #11
 8017d04:	4770      	bx	lr
 8017d06:	bf00      	nop

08017d08 <rcl_get_zero_initialized_wait_set>:
 8017d08:	b510      	push	{r4, lr}
 8017d0a:	4c08      	ldr	r4, [pc, #32]	@ (8017d2c <rcl_get_zero_initialized_wait_set+0x24>)
 8017d0c:	4686      	mov	lr, r0
 8017d0e:	4684      	mov	ip, r0
 8017d10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017d12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017d18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017d1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017d1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017d22:	6823      	ldr	r3, [r4, #0]
 8017d24:	4670      	mov	r0, lr
 8017d26:	f8cc 3000 	str.w	r3, [ip]
 8017d2a:	bd10      	pop	{r4, pc}
 8017d2c:	08024888 	.word	0x08024888

08017d30 <rcl_wait_set_is_valid>:
 8017d30:	b118      	cbz	r0, 8017d3a <rcl_wait_set_is_valid+0xa>
 8017d32:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8017d34:	3800      	subs	r0, #0
 8017d36:	bf18      	it	ne
 8017d38:	2001      	movne	r0, #1
 8017d3a:	4770      	bx	lr

08017d3c <rcl_wait_set_fini>:
 8017d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d40:	b082      	sub	sp, #8
 8017d42:	2800      	cmp	r0, #0
 8017d44:	f000 8095 	beq.w	8017e72 <rcl_wait_set_fini+0x136>
 8017d48:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8017d4a:	4604      	mov	r4, r0
 8017d4c:	2e00      	cmp	r6, #0
 8017d4e:	f000 808c 	beq.w	8017e6a <rcl_wait_set_fini+0x12e>
 8017d52:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8017d54:	f003 fb40 	bl	801b3d8 <rmw_destroy_wait_set>
 8017d58:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017d5a:	1e06      	subs	r6, r0, #0
 8017d5c:	bf18      	it	ne
 8017d5e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8017d62:	2d00      	cmp	r5, #0
 8017d64:	f000 8081 	beq.w	8017e6a <rcl_wait_set_fini+0x12e>
 8017d68:	2700      	movs	r7, #0
 8017d6a:	6820      	ldr	r0, [r4, #0]
 8017d6c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8017d70:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017d72:	6067      	str	r7, [r4, #4]
 8017d74:	602f      	str	r7, [r5, #0]
 8017d76:	b120      	cbz	r0, 8017d82 <rcl_wait_set_fini+0x46>
 8017d78:	9101      	str	r1, [sp, #4]
 8017d7a:	47c0      	blx	r8
 8017d7c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017d7e:	9901      	ldr	r1, [sp, #4]
 8017d80:	6027      	str	r7, [r4, #0]
 8017d82:	68a8      	ldr	r0, [r5, #8]
 8017d84:	b120      	cbz	r0, 8017d90 <rcl_wait_set_fini+0x54>
 8017d86:	47c0      	blx	r8
 8017d88:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017d8a:	2300      	movs	r3, #0
 8017d8c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8017d90:	f04f 0800 	mov.w	r8, #0
 8017d94:	68a0      	ldr	r0, [r4, #8]
 8017d96:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8017d98:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017d9a:	f8c4 800c 	str.w	r8, [r4, #12]
 8017d9e:	f8c5 800c 	str.w	r8, [r5, #12]
 8017da2:	b128      	cbz	r0, 8017db0 <rcl_wait_set_fini+0x74>
 8017da4:	47b8      	blx	r7
 8017da6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017da8:	f8c4 8008 	str.w	r8, [r4, #8]
 8017dac:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8017dae:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017db0:	f04f 0800 	mov.w	r8, #0
 8017db4:	6968      	ldr	r0, [r5, #20]
 8017db6:	f8c5 8010 	str.w	r8, [r5, #16]
 8017dba:	b128      	cbz	r0, 8017dc8 <rcl_wait_set_fini+0x8c>
 8017dbc:	47b8      	blx	r7
 8017dbe:	f8c5 8014 	str.w	r8, [r5, #20]
 8017dc2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017dc4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8017dc6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017dc8:	f04f 0800 	mov.w	r8, #0
 8017dcc:	6920      	ldr	r0, [r4, #16]
 8017dce:	f8c4 8014 	str.w	r8, [r4, #20]
 8017dd2:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8017dd6:	b128      	cbz	r0, 8017de4 <rcl_wait_set_fini+0xa8>
 8017dd8:	47b8      	blx	r7
 8017dda:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017ddc:	f8c4 8010 	str.w	r8, [r4, #16]
 8017de0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8017de2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017de4:	f04f 0800 	mov.w	r8, #0
 8017de8:	69a0      	ldr	r0, [r4, #24]
 8017dea:	f8c4 801c 	str.w	r8, [r4, #28]
 8017dee:	f8c5 8018 	str.w	r8, [r5, #24]
 8017df2:	b128      	cbz	r0, 8017e00 <rcl_wait_set_fini+0xc4>
 8017df4:	9101      	str	r1, [sp, #4]
 8017df6:	47b8      	blx	r7
 8017df8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017dfa:	9901      	ldr	r1, [sp, #4]
 8017dfc:	f8c4 8018 	str.w	r8, [r4, #24]
 8017e00:	6a28      	ldr	r0, [r5, #32]
 8017e02:	b120      	cbz	r0, 8017e0e <rcl_wait_set_fini+0xd2>
 8017e04:	47b8      	blx	r7
 8017e06:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017e08:	2300      	movs	r3, #0
 8017e0a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8017e0e:	2700      	movs	r7, #0
 8017e10:	6a20      	ldr	r0, [r4, #32]
 8017e12:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8017e16:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017e18:	6267      	str	r7, [r4, #36]	@ 0x24
 8017e1a:	626f      	str	r7, [r5, #36]	@ 0x24
 8017e1c:	b120      	cbz	r0, 8017e28 <rcl_wait_set_fini+0xec>
 8017e1e:	9101      	str	r1, [sp, #4]
 8017e20:	47c0      	blx	r8
 8017e22:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017e24:	9901      	ldr	r1, [sp, #4]
 8017e26:	6227      	str	r7, [r4, #32]
 8017e28:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8017e2a:	b120      	cbz	r0, 8017e36 <rcl_wait_set_fini+0xfa>
 8017e2c:	47c0      	blx	r8
 8017e2e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017e30:	2300      	movs	r3, #0
 8017e32:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8017e36:	2700      	movs	r7, #0
 8017e38:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8017e3a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8017e3e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017e40:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8017e42:	632f      	str	r7, [r5, #48]	@ 0x30
 8017e44:	b120      	cbz	r0, 8017e50 <rcl_wait_set_fini+0x114>
 8017e46:	9101      	str	r1, [sp, #4]
 8017e48:	47c0      	blx	r8
 8017e4a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017e4c:	9901      	ldr	r1, [sp, #4]
 8017e4e:	62a7      	str	r7, [r4, #40]	@ 0x28
 8017e50:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8017e52:	b120      	cbz	r0, 8017e5e <rcl_wait_set_fini+0x122>
 8017e54:	47c0      	blx	r8
 8017e56:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017e58:	2300      	movs	r3, #0
 8017e5a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8017e5e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8017e60:	4628      	mov	r0, r5
 8017e62:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017e64:	4798      	blx	r3
 8017e66:	2300      	movs	r3, #0
 8017e68:	6323      	str	r3, [r4, #48]	@ 0x30
 8017e6a:	4630      	mov	r0, r6
 8017e6c:	b002      	add	sp, #8
 8017e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e72:	260b      	movs	r6, #11
 8017e74:	4630      	mov	r0, r6
 8017e76:	b002      	add	sp, #8
 8017e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017e7c <rcl_wait_set_add_subscription>:
 8017e7c:	b318      	cbz	r0, 8017ec6 <rcl_wait_set_add_subscription+0x4a>
 8017e7e:	b538      	push	{r3, r4, r5, lr}
 8017e80:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017e82:	4604      	mov	r4, r0
 8017e84:	b30b      	cbz	r3, 8017eca <rcl_wait_set_add_subscription+0x4e>
 8017e86:	b319      	cbz	r1, 8017ed0 <rcl_wait_set_add_subscription+0x54>
 8017e88:	681d      	ldr	r5, [r3, #0]
 8017e8a:	6840      	ldr	r0, [r0, #4]
 8017e8c:	4285      	cmp	r5, r0
 8017e8e:	d217      	bcs.n	8017ec0 <rcl_wait_set_add_subscription+0x44>
 8017e90:	1c68      	adds	r0, r5, #1
 8017e92:	6018      	str	r0, [r3, #0]
 8017e94:	6823      	ldr	r3, [r4, #0]
 8017e96:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8017e9a:	b102      	cbz	r2, 8017e9e <rcl_wait_set_add_subscription+0x22>
 8017e9c:	6015      	str	r5, [r2, #0]
 8017e9e:	4608      	mov	r0, r1
 8017ea0:	f7ff fcfe 	bl	80178a0 <rcl_subscription_get_rmw_handle>
 8017ea4:	b150      	cbz	r0, 8017ebc <rcl_wait_set_add_subscription+0x40>
 8017ea6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017ea8:	6842      	ldr	r2, [r0, #4]
 8017eaa:	2000      	movs	r0, #0
 8017eac:	689b      	ldr	r3, [r3, #8]
 8017eae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017eb2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017eb4:	6853      	ldr	r3, [r2, #4]
 8017eb6:	3301      	adds	r3, #1
 8017eb8:	6053      	str	r3, [r2, #4]
 8017eba:	bd38      	pop	{r3, r4, r5, pc}
 8017ebc:	2001      	movs	r0, #1
 8017ebe:	bd38      	pop	{r3, r4, r5, pc}
 8017ec0:	f240 3086 	movw	r0, #902	@ 0x386
 8017ec4:	bd38      	pop	{r3, r4, r5, pc}
 8017ec6:	200b      	movs	r0, #11
 8017ec8:	4770      	bx	lr
 8017eca:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017ece:	bd38      	pop	{r3, r4, r5, pc}
 8017ed0:	200b      	movs	r0, #11
 8017ed2:	bd38      	pop	{r3, r4, r5, pc}

08017ed4 <rcl_wait_set_clear>:
 8017ed4:	2800      	cmp	r0, #0
 8017ed6:	d074      	beq.n	8017fc2 <rcl_wait_set_clear+0xee>
 8017ed8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017eda:	b510      	push	{r4, lr}
 8017edc:	4604      	mov	r4, r0
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d071      	beq.n	8017fc6 <rcl_wait_set_clear+0xf2>
 8017ee2:	6800      	ldr	r0, [r0, #0]
 8017ee4:	b138      	cbz	r0, 8017ef6 <rcl_wait_set_clear+0x22>
 8017ee6:	6862      	ldr	r2, [r4, #4]
 8017ee8:	2100      	movs	r1, #0
 8017eea:	0092      	lsls	r2, r2, #2
 8017eec:	f009 fdf6 	bl	8021adc <memset>
 8017ef0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017ef2:	2200      	movs	r2, #0
 8017ef4:	601a      	str	r2, [r3, #0]
 8017ef6:	68a0      	ldr	r0, [r4, #8]
 8017ef8:	b138      	cbz	r0, 8017f0a <rcl_wait_set_clear+0x36>
 8017efa:	68e2      	ldr	r2, [r4, #12]
 8017efc:	2100      	movs	r1, #0
 8017efe:	0092      	lsls	r2, r2, #2
 8017f00:	f009 fdec 	bl	8021adc <memset>
 8017f04:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017f06:	2200      	movs	r2, #0
 8017f08:	60da      	str	r2, [r3, #12]
 8017f0a:	69a0      	ldr	r0, [r4, #24]
 8017f0c:	b138      	cbz	r0, 8017f1e <rcl_wait_set_clear+0x4a>
 8017f0e:	69e2      	ldr	r2, [r4, #28]
 8017f10:	2100      	movs	r1, #0
 8017f12:	0092      	lsls	r2, r2, #2
 8017f14:	f009 fde2 	bl	8021adc <memset>
 8017f18:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017f1a:	2200      	movs	r2, #0
 8017f1c:	619a      	str	r2, [r3, #24]
 8017f1e:	6a20      	ldr	r0, [r4, #32]
 8017f20:	b138      	cbz	r0, 8017f32 <rcl_wait_set_clear+0x5e>
 8017f22:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8017f24:	2100      	movs	r1, #0
 8017f26:	0092      	lsls	r2, r2, #2
 8017f28:	f009 fdd8 	bl	8021adc <memset>
 8017f2c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017f2e:	2200      	movs	r2, #0
 8017f30:	625a      	str	r2, [r3, #36]	@ 0x24
 8017f32:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8017f34:	b138      	cbz	r0, 8017f46 <rcl_wait_set_clear+0x72>
 8017f36:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8017f38:	2100      	movs	r1, #0
 8017f3a:	0092      	lsls	r2, r2, #2
 8017f3c:	f009 fdce 	bl	8021adc <memset>
 8017f40:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017f42:	2200      	movs	r2, #0
 8017f44:	631a      	str	r2, [r3, #48]	@ 0x30
 8017f46:	6920      	ldr	r0, [r4, #16]
 8017f48:	b138      	cbz	r0, 8017f5a <rcl_wait_set_clear+0x86>
 8017f4a:	6962      	ldr	r2, [r4, #20]
 8017f4c:	2100      	movs	r1, #0
 8017f4e:	0092      	lsls	r2, r2, #2
 8017f50:	f009 fdc4 	bl	8021adc <memset>
 8017f54:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017f56:	2200      	movs	r2, #0
 8017f58:	641a      	str	r2, [r3, #64]	@ 0x40
 8017f5a:	6898      	ldr	r0, [r3, #8]
 8017f5c:	b138      	cbz	r0, 8017f6e <rcl_wait_set_clear+0x9a>
 8017f5e:	685a      	ldr	r2, [r3, #4]
 8017f60:	2100      	movs	r1, #0
 8017f62:	0092      	lsls	r2, r2, #2
 8017f64:	f009 fdba 	bl	8021adc <memset>
 8017f68:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017f6a:	2200      	movs	r2, #0
 8017f6c:	605a      	str	r2, [r3, #4]
 8017f6e:	6958      	ldr	r0, [r3, #20]
 8017f70:	b138      	cbz	r0, 8017f82 <rcl_wait_set_clear+0xae>
 8017f72:	691a      	ldr	r2, [r3, #16]
 8017f74:	2100      	movs	r1, #0
 8017f76:	0092      	lsls	r2, r2, #2
 8017f78:	f009 fdb0 	bl	8021adc <memset>
 8017f7c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017f7e:	2200      	movs	r2, #0
 8017f80:	611a      	str	r2, [r3, #16]
 8017f82:	6a18      	ldr	r0, [r3, #32]
 8017f84:	b138      	cbz	r0, 8017f96 <rcl_wait_set_clear+0xc2>
 8017f86:	69da      	ldr	r2, [r3, #28]
 8017f88:	2100      	movs	r1, #0
 8017f8a:	0092      	lsls	r2, r2, #2
 8017f8c:	f009 fda6 	bl	8021adc <memset>
 8017f90:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017f92:	2200      	movs	r2, #0
 8017f94:	61da      	str	r2, [r3, #28]
 8017f96:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8017f98:	b138      	cbz	r0, 8017faa <rcl_wait_set_clear+0xd6>
 8017f9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8017f9c:	2100      	movs	r1, #0
 8017f9e:	0092      	lsls	r2, r2, #2
 8017fa0:	f009 fd9c 	bl	8021adc <memset>
 8017fa4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017fa6:	2200      	movs	r2, #0
 8017fa8:	629a      	str	r2, [r3, #40]	@ 0x28
 8017faa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8017fac:	b140      	cbz	r0, 8017fc0 <rcl_wait_set_clear+0xec>
 8017fae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017fb0:	2100      	movs	r1, #0
 8017fb2:	0092      	lsls	r2, r2, #2
 8017fb4:	f009 fd92 	bl	8021adc <memset>
 8017fb8:	2300      	movs	r3, #0
 8017fba:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017fbc:	4618      	mov	r0, r3
 8017fbe:	6353      	str	r3, [r2, #52]	@ 0x34
 8017fc0:	bd10      	pop	{r4, pc}
 8017fc2:	200b      	movs	r0, #11
 8017fc4:	4770      	bx	lr
 8017fc6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017fca:	bd10      	pop	{r4, pc}

08017fcc <rcl_wait_set_resize>:
 8017fcc:	2800      	cmp	r0, #0
 8017fce:	f000 8180 	beq.w	80182d2 <rcl_wait_set_resize+0x306>
 8017fd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fd6:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8017fd8:	b083      	sub	sp, #12
 8017fda:	4605      	mov	r5, r0
 8017fdc:	2c00      	cmp	r4, #0
 8017fde:	f000 817a 	beq.w	80182d6 <rcl_wait_set_resize+0x30a>
 8017fe2:	f04f 0900 	mov.w	r9, #0
 8017fe6:	461f      	mov	r7, r3
 8017fe8:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8017fec:	4688      	mov	r8, r1
 8017fee:	4616      	mov	r6, r2
 8017ff0:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8017ff4:	f8c0 9004 	str.w	r9, [r0, #4]
 8017ff8:	f8c4 9000 	str.w	r9, [r4]
 8017ffc:	2900      	cmp	r1, #0
 8017ffe:	f000 80bf 	beq.w	8018180 <rcl_wait_set_resize+0x1b4>
 8018002:	008c      	lsls	r4, r1, #2
 8018004:	4652      	mov	r2, sl
 8018006:	6800      	ldr	r0, [r0, #0]
 8018008:	4621      	mov	r1, r4
 801800a:	9301      	str	r3, [sp, #4]
 801800c:	4798      	blx	r3
 801800e:	9b01      	ldr	r3, [sp, #4]
 8018010:	6028      	str	r0, [r5, #0]
 8018012:	2800      	cmp	r0, #0
 8018014:	f000 80f6 	beq.w	8018204 <rcl_wait_set_resize+0x238>
 8018018:	4622      	mov	r2, r4
 801801a:	4649      	mov	r1, r9
 801801c:	9301      	str	r3, [sp, #4]
 801801e:	f009 fd5d 	bl	8021adc <memset>
 8018022:	f8c5 8004 	str.w	r8, [r5, #4]
 8018026:	4652      	mov	r2, sl
 8018028:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801802c:	4621      	mov	r1, r4
 801802e:	9b01      	ldr	r3, [sp, #4]
 8018030:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8018034:	f8c8 9004 	str.w	r9, [r8, #4]
 8018038:	4798      	blx	r3
 801803a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801803c:	f8c8 0008 	str.w	r0, [r8, #8]
 8018040:	689b      	ldr	r3, [r3, #8]
 8018042:	2b00      	cmp	r3, #0
 8018044:	f000 814a 	beq.w	80182dc <rcl_wait_set_resize+0x310>
 8018048:	4622      	mov	r2, r4
 801804a:	4649      	mov	r1, r9
 801804c:	4618      	mov	r0, r3
 801804e:	f009 fd45 	bl	8021adc <memset>
 8018052:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018054:	f04f 0800 	mov.w	r8, #0
 8018058:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801805c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8018060:	f8c5 800c 	str.w	r8, [r5, #12]
 8018064:	f8c4 800c 	str.w	r8, [r4, #12]
 8018068:	2e00      	cmp	r6, #0
 801806a:	f040 809b 	bne.w	80181a4 <rcl_wait_set_resize+0x1d8>
 801806e:	68a8      	ldr	r0, [r5, #8]
 8018070:	b128      	cbz	r0, 801807e <rcl_wait_set_resize+0xb2>
 8018072:	4649      	mov	r1, r9
 8018074:	4790      	blx	r2
 8018076:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018078:	60ae      	str	r6, [r5, #8]
 801807a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801807e:	f04f 0800 	mov.w	r8, #0
 8018082:	19f6      	adds	r6, r6, r7
 8018084:	f8c4 8010 	str.w	r8, [r4, #16]
 8018088:	f040 80a2 	bne.w	80181d0 <rcl_wait_set_resize+0x204>
 801808c:	6960      	ldr	r0, [r4, #20]
 801808e:	b130      	cbz	r0, 801809e <rcl_wait_set_resize+0xd2>
 8018090:	4649      	mov	r1, r9
 8018092:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8018094:	4798      	blx	r3
 8018096:	6166      	str	r6, [r4, #20]
 8018098:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801809a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801809e:	2600      	movs	r6, #0
 80180a0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80180a4:	616e      	str	r6, [r5, #20]
 80180a6:	6426      	str	r6, [r4, #64]	@ 0x40
 80180a8:	2f00      	cmp	r7, #0
 80180aa:	f040 80af 	bne.w	801820c <rcl_wait_set_resize+0x240>
 80180ae:	6928      	ldr	r0, [r5, #16]
 80180b0:	b138      	cbz	r0, 80180c2 <rcl_wait_set_resize+0xf6>
 80180b2:	4649      	mov	r1, r9
 80180b4:	47d0      	blx	sl
 80180b6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80180b8:	612f      	str	r7, [r5, #16]
 80180ba:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80180be:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80180c2:	2600      	movs	r6, #0
 80180c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80180c6:	61ee      	str	r6, [r5, #28]
 80180c8:	61a6      	str	r6, [r4, #24]
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	f040 8093 	bne.w	80181f6 <rcl_wait_set_resize+0x22a>
 80180d0:	69a8      	ldr	r0, [r5, #24]
 80180d2:	b120      	cbz	r0, 80180de <rcl_wait_set_resize+0x112>
 80180d4:	4649      	mov	r1, r9
 80180d6:	47d0      	blx	sl
 80180d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80180da:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80180dc:	61ab      	str	r3, [r5, #24]
 80180de:	6a20      	ldr	r0, [r4, #32]
 80180e0:	b128      	cbz	r0, 80180ee <rcl_wait_set_resize+0x122>
 80180e2:	4649      	mov	r1, r9
 80180e4:	47d0      	blx	sl
 80180e6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80180e8:	2300      	movs	r3, #0
 80180ea:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80180ee:	2600      	movs	r6, #0
 80180f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80180f2:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80180f4:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80180f8:	626e      	str	r6, [r5, #36]	@ 0x24
 80180fa:	6266      	str	r6, [r4, #36]	@ 0x24
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	f000 8098 	beq.w	8018232 <rcl_wait_set_resize+0x266>
 8018102:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8018106:	463a      	mov	r2, r7
 8018108:	6a28      	ldr	r0, [r5, #32]
 801810a:	4651      	mov	r1, sl
 801810c:	47c8      	blx	r9
 801810e:	6228      	str	r0, [r5, #32]
 8018110:	2800      	cmp	r0, #0
 8018112:	d077      	beq.n	8018204 <rcl_wait_set_resize+0x238>
 8018114:	4652      	mov	r2, sl
 8018116:	4631      	mov	r1, r6
 8018118:	f009 fce0 	bl	8021adc <memset>
 801811c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801811e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018120:	463a      	mov	r2, r7
 8018122:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8018124:	4651      	mov	r1, sl
 8018126:	626b      	str	r3, [r5, #36]	@ 0x24
 8018128:	62a6      	str	r6, [r4, #40]	@ 0x28
 801812a:	47c8      	blx	r9
 801812c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801812e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8018130:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8018132:	2c00      	cmp	r4, #0
 8018134:	f000 80f2 	beq.w	801831c <rcl_wait_set_resize+0x350>
 8018138:	4620      	mov	r0, r4
 801813a:	4652      	mov	r2, sl
 801813c:	4631      	mov	r1, r6
 801813e:	f009 fccd 	bl	8021adc <memset>
 8018142:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018144:	2600      	movs	r6, #0
 8018146:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018148:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801814a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801814e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8018150:	6326      	str	r6, [r4, #48]	@ 0x30
 8018152:	2b00      	cmp	r3, #0
 8018154:	f040 8097 	bne.w	8018286 <rcl_wait_set_resize+0x2ba>
 8018158:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801815a:	b120      	cbz	r0, 8018166 <rcl_wait_set_resize+0x19a>
 801815c:	4639      	mov	r1, r7
 801815e:	47c0      	blx	r8
 8018160:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018162:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018164:	62ab      	str	r3, [r5, #40]	@ 0x28
 8018166:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8018168:	2800      	cmp	r0, #0
 801816a:	d04c      	beq.n	8018206 <rcl_wait_set_resize+0x23a>
 801816c:	4639      	mov	r1, r7
 801816e:	47c0      	blx	r8
 8018170:	2300      	movs	r3, #0
 8018172:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8018174:	4618      	mov	r0, r3
 8018176:	e9c2 330d 	strd	r3, r3, [r2, #52]	@ 0x34
 801817a:	b003      	add	sp, #12
 801817c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018180:	6800      	ldr	r0, [r0, #0]
 8018182:	b120      	cbz	r0, 801818e <rcl_wait_set_resize+0x1c2>
 8018184:	4651      	mov	r1, sl
 8018186:	47d8      	blx	fp
 8018188:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801818a:	f8c5 8000 	str.w	r8, [r5]
 801818e:	68a0      	ldr	r0, [r4, #8]
 8018190:	2800      	cmp	r0, #0
 8018192:	f43f af5f 	beq.w	8018054 <rcl_wait_set_resize+0x88>
 8018196:	4651      	mov	r1, sl
 8018198:	47d8      	blx	fp
 801819a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801819c:	2300      	movs	r3, #0
 801819e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80181a2:	e757      	b.n	8018054 <rcl_wait_set_resize+0x88>
 80181a4:	00b4      	lsls	r4, r6, #2
 80181a6:	464a      	mov	r2, r9
 80181a8:	68a8      	ldr	r0, [r5, #8]
 80181aa:	4621      	mov	r1, r4
 80181ac:	4798      	blx	r3
 80181ae:	60a8      	str	r0, [r5, #8]
 80181b0:	b340      	cbz	r0, 8018204 <rcl_wait_set_resize+0x238>
 80181b2:	4622      	mov	r2, r4
 80181b4:	4641      	mov	r1, r8
 80181b6:	f009 fc91 	bl	8021adc <memset>
 80181ba:	f04f 0800 	mov.w	r8, #0
 80181be:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80181c0:	60ee      	str	r6, [r5, #12]
 80181c2:	19f6      	adds	r6, r6, r7
 80181c4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80181c8:	f8c4 8010 	str.w	r8, [r4, #16]
 80181cc:	f43f af5e 	beq.w	801808c <rcl_wait_set_resize+0xc0>
 80181d0:	00b6      	lsls	r6, r6, #2
 80181d2:	464a      	mov	r2, r9
 80181d4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80181d6:	6960      	ldr	r0, [r4, #20]
 80181d8:	4631      	mov	r1, r6
 80181da:	4798      	blx	r3
 80181dc:	4681      	mov	r9, r0
 80181de:	6160      	str	r0, [r4, #20]
 80181e0:	2800      	cmp	r0, #0
 80181e2:	f000 8084 	beq.w	80182ee <rcl_wait_set_resize+0x322>
 80181e6:	4632      	mov	r2, r6
 80181e8:	4641      	mov	r1, r8
 80181ea:	f009 fc77 	bl	8021adc <memset>
 80181ee:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80181f0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80181f4:	e753      	b.n	801809e <rcl_wait_set_resize+0xd2>
 80181f6:	009c      	lsls	r4, r3, #2
 80181f8:	464a      	mov	r2, r9
 80181fa:	69a8      	ldr	r0, [r5, #24]
 80181fc:	4621      	mov	r1, r4
 80181fe:	47c0      	blx	r8
 8018200:	61a8      	str	r0, [r5, #24]
 8018202:	bb40      	cbnz	r0, 8018256 <rcl_wait_set_resize+0x28a>
 8018204:	200a      	movs	r0, #10
 8018206:	b003      	add	sp, #12
 8018208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801820c:	00bc      	lsls	r4, r7, #2
 801820e:	464a      	mov	r2, r9
 8018210:	6928      	ldr	r0, [r5, #16]
 8018212:	4621      	mov	r1, r4
 8018214:	47c0      	blx	r8
 8018216:	6128      	str	r0, [r5, #16]
 8018218:	2800      	cmp	r0, #0
 801821a:	d0f3      	beq.n	8018204 <rcl_wait_set_resize+0x238>
 801821c:	4622      	mov	r2, r4
 801821e:	4631      	mov	r1, r6
 8018220:	f009 fc5c 	bl	8021adc <memset>
 8018224:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018226:	616f      	str	r7, [r5, #20]
 8018228:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801822c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8018230:	e747      	b.n	80180c2 <rcl_wait_set_resize+0xf6>
 8018232:	6a28      	ldr	r0, [r5, #32]
 8018234:	b120      	cbz	r0, 8018240 <rcl_wait_set_resize+0x274>
 8018236:	4639      	mov	r1, r7
 8018238:	47c0      	blx	r8
 801823a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801823c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801823e:	622b      	str	r3, [r5, #32]
 8018240:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8018242:	2800      	cmp	r0, #0
 8018244:	f43f af7e 	beq.w	8018144 <rcl_wait_set_resize+0x178>
 8018248:	4639      	mov	r1, r7
 801824a:	47c0      	blx	r8
 801824c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801824e:	2300      	movs	r3, #0
 8018250:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8018254:	e776      	b.n	8018144 <rcl_wait_set_resize+0x178>
 8018256:	4622      	mov	r2, r4
 8018258:	4631      	mov	r1, r6
 801825a:	f009 fc3f 	bl	8021adc <memset>
 801825e:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8018260:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018262:	464a      	mov	r2, r9
 8018264:	6a38      	ldr	r0, [r7, #32]
 8018266:	4621      	mov	r1, r4
 8018268:	61eb      	str	r3, [r5, #28]
 801826a:	61fe      	str	r6, [r7, #28]
 801826c:	47c0      	blx	r8
 801826e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018270:	6238      	str	r0, [r7, #32]
 8018272:	6a1f      	ldr	r7, [r3, #32]
 8018274:	2f00      	cmp	r7, #0
 8018276:	d04a      	beq.n	801830e <rcl_wait_set_resize+0x342>
 8018278:	4622      	mov	r2, r4
 801827a:	4631      	mov	r1, r6
 801827c:	4638      	mov	r0, r7
 801827e:	f009 fc2d 	bl	8021adc <memset>
 8018282:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018284:	e733      	b.n	80180ee <rcl_wait_set_resize+0x122>
 8018286:	009c      	lsls	r4, r3, #2
 8018288:	463a      	mov	r2, r7
 801828a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801828c:	4621      	mov	r1, r4
 801828e:	47c8      	blx	r9
 8018290:	62a8      	str	r0, [r5, #40]	@ 0x28
 8018292:	2800      	cmp	r0, #0
 8018294:	d0b6      	beq.n	8018204 <rcl_wait_set_resize+0x238>
 8018296:	4622      	mov	r2, r4
 8018298:	4631      	mov	r1, r6
 801829a:	f009 fc1f 	bl	8021adc <memset>
 801829e:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 80182a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80182a4:	463a      	mov	r2, r7
 80182a6:	4621      	mov	r1, r4
 80182a8:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80182ac:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80182ae:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 80182b2:	47c8      	blx	r9
 80182b4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80182b6:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 80182ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80182bc:	2b00      	cmp	r3, #0
 80182be:	d034      	beq.n	801832a <rcl_wait_set_resize+0x35e>
 80182c0:	4622      	mov	r2, r4
 80182c2:	4631      	mov	r1, r6
 80182c4:	4618      	mov	r0, r3
 80182c6:	f009 fc09 	bl	8021adc <memset>
 80182ca:	4630      	mov	r0, r6
 80182cc:	b003      	add	sp, #12
 80182ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182d2:	200b      	movs	r0, #11
 80182d4:	4770      	bx	lr
 80182d6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80182da:	e794      	b.n	8018206 <rcl_wait_set_resize+0x23a>
 80182dc:	6828      	ldr	r0, [r5, #0]
 80182de:	4651      	mov	r1, sl
 80182e0:	9301      	str	r3, [sp, #4]
 80182e2:	47d8      	blx	fp
 80182e4:	9b01      	ldr	r3, [sp, #4]
 80182e6:	200a      	movs	r0, #10
 80182e8:	e9c5 3300 	strd	r3, r3, [r5]
 80182ec:	e78b      	b.n	8018206 <rcl_wait_set_resize+0x23a>
 80182ee:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80182f0:	68a8      	ldr	r0, [r5, #8]
 80182f2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80182f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80182f6:	4798      	blx	r3
 80182f8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80182fa:	6928      	ldr	r0, [r5, #16]
 80182fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80182fe:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8018300:	e9c5 9902 	strd	r9, r9, [r5, #8]
 8018304:	4790      	blx	r2
 8018306:	200a      	movs	r0, #10
 8018308:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801830c:	e77b      	b.n	8018206 <rcl_wait_set_resize+0x23a>
 801830e:	69a8      	ldr	r0, [r5, #24]
 8018310:	4649      	mov	r1, r9
 8018312:	47d0      	blx	sl
 8018314:	200a      	movs	r0, #10
 8018316:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801831a:	e774      	b.n	8018206 <rcl_wait_set_resize+0x23a>
 801831c:	6a28      	ldr	r0, [r5, #32]
 801831e:	4639      	mov	r1, r7
 8018320:	47c0      	blx	r8
 8018322:	200a      	movs	r0, #10
 8018324:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8018328:	e76d      	b.n	8018206 <rcl_wait_set_resize+0x23a>
 801832a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801832c:	4639      	mov	r1, r7
 801832e:	9301      	str	r3, [sp, #4]
 8018330:	47c0      	blx	r8
 8018332:	9b01      	ldr	r3, [sp, #4]
 8018334:	200a      	movs	r0, #10
 8018336:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801833a:	e764      	b.n	8018206 <rcl_wait_set_resize+0x23a>

0801833c <rcl_wait_set_init>:
 801833c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018340:	b085      	sub	sp, #20
 8018342:	4605      	mov	r5, r0
 8018344:	460e      	mov	r6, r1
 8018346:	4617      	mov	r7, r2
 8018348:	a812      	add	r0, sp, #72	@ 0x48
 801834a:	4698      	mov	r8, r3
 801834c:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 8018350:	f7fd fa80 	bl	8015854 <rcutils_allocator_is_valid>
 8018354:	2d00      	cmp	r5, #0
 8018356:	d072      	beq.n	801843e <rcl_wait_set_init+0x102>
 8018358:	f080 0001 	eor.w	r0, r0, #1
 801835c:	b2c0      	uxtb	r0, r0
 801835e:	2800      	cmp	r0, #0
 8018360:	d16d      	bne.n	801843e <rcl_wait_set_init+0x102>
 8018362:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8018366:	f1ba 0f00 	cmp.w	sl, #0
 801836a:	d004      	beq.n	8018376 <rcl_wait_set_init+0x3a>
 801836c:	2464      	movs	r4, #100	@ 0x64
 801836e:	4620      	mov	r0, r4
 8018370:	b005      	add	sp, #20
 8018372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018376:	f1b9 0f00 	cmp.w	r9, #0
 801837a:	d060      	beq.n	801843e <rcl_wait_set_init+0x102>
 801837c:	4648      	mov	r0, r9
 801837e:	f7fe f937 	bl	80165f0 <rcl_context_is_valid>
 8018382:	2800      	cmp	r0, #0
 8018384:	d068      	beq.n	8018458 <rcl_wait_set_init+0x11c>
 8018386:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8018388:	205c      	movs	r0, #92	@ 0x5c
 801838a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801838c:	4798      	blx	r3
 801838e:	6328      	str	r0, [r5, #48]	@ 0x30
 8018390:	2800      	cmp	r0, #0
 8018392:	d063      	beq.n	801845c <rcl_wait_set_init+0x120>
 8018394:	225c      	movs	r2, #92	@ 0x5c
 8018396:	4651      	mov	r1, sl
 8018398:	f009 fba0 	bl	8021adc <memset>
 801839c:	ac12      	add	r4, sp, #72	@ 0x48
 801839e:	f8d5 b030 	ldr.w	fp, [r5, #48]	@ 0x30
 80183a2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 80183a6:	f10b 0c48 	add.w	ip, fp, #72	@ 0x48
 80183aa:	f8cb 9044 	str.w	r9, [fp, #68]	@ 0x44
 80183ae:	eb03 0e02 	add.w	lr, r3, r2
 80183b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80183b4:	f8d9 9000 	ldr.w	r9, [r9]
 80183b8:	449e      	add	lr, r3
 80183ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80183bc:	e9cb aa01 	strd	sl, sl, [fp, #4]
 80183c0:	e9cb aa04 	strd	sl, sl, [fp, #16]
 80183c4:	e9cb aa07 	strd	sl, sl, [fp, #28]
 80183c8:	e9cb aa0a 	strd	sl, sl, [fp, #40]	@ 0x28
 80183cc:	e9cb aa0d 	strd	sl, sl, [fp, #52]	@ 0x34
 80183d0:	44be      	add	lr, r7
 80183d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80183d6:	6823      	ldr	r3, [r4, #0]
 80183d8:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 80183dc:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 80183e0:	f8cc 3000 	str.w	r3, [ip]
 80183e4:	f002 ffee 	bl	801b3c4 <rmw_create_wait_set>
 80183e8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80183ea:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 80183ee:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80183f0:	b350      	cbz	r0, 8018448 <rcl_wait_set_init+0x10c>
 80183f2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80183f4:	4643      	mov	r3, r8
 80183f6:	463a      	mov	r2, r7
 80183f8:	4631      	mov	r1, r6
 80183fa:	9402      	str	r4, [sp, #8]
 80183fc:	4628      	mov	r0, r5
 80183fe:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8018400:	9401      	str	r4, [sp, #4]
 8018402:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8018404:	9400      	str	r4, [sp, #0]
 8018406:	f7ff fde1 	bl	8017fcc <rcl_wait_set_resize>
 801840a:	4604      	mov	r4, r0
 801840c:	2800      	cmp	r0, #0
 801840e:	d0ae      	beq.n	801836e <rcl_wait_set_init+0x32>
 8018410:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018412:	bb2b      	cbnz	r3, 8018460 <rcl_wait_set_init+0x124>
 8018414:	2600      	movs	r6, #0
 8018416:	4628      	mov	r0, r5
 8018418:	4633      	mov	r3, r6
 801841a:	4632      	mov	r2, r6
 801841c:	4631      	mov	r1, r6
 801841e:	9600      	str	r6, [sp, #0]
 8018420:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8018424:	f7ff fdd2 	bl	8017fcc <rcl_wait_set_resize>
 8018428:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801842a:	2800      	cmp	r0, #0
 801842c:	d09f      	beq.n	801836e <rcl_wait_set_init+0x32>
 801842e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8018430:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8018432:	4798      	blx	r3
 8018434:	4620      	mov	r0, r4
 8018436:	632e      	str	r6, [r5, #48]	@ 0x30
 8018438:	b005      	add	sp, #20
 801843a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801843e:	240b      	movs	r4, #11
 8018440:	4620      	mov	r0, r4
 8018442:	b005      	add	sp, #20
 8018444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018448:	2401      	movs	r4, #1
 801844a:	f002 ffc5 	bl	801b3d8 <rmw_destroy_wait_set>
 801844e:	2800      	cmp	r0, #0
 8018450:	bf18      	it	ne
 8018452:	f44f 7461 	movne.w	r4, #900	@ 0x384
 8018456:	e7dd      	b.n	8018414 <rcl_wait_set_init+0xd8>
 8018458:	2465      	movs	r4, #101	@ 0x65
 801845a:	e788      	b.n	801836e <rcl_wait_set_init+0x32>
 801845c:	240a      	movs	r4, #10
 801845e:	e786      	b.n	801836e <rcl_wait_set_init+0x32>
 8018460:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8018462:	e7f2      	b.n	801844a <rcl_wait_set_init+0x10e>

08018464 <rcl_wait_set_add_guard_condition>:
 8018464:	b318      	cbz	r0, 80184ae <rcl_wait_set_add_guard_condition+0x4a>
 8018466:	b538      	push	{r3, r4, r5, lr}
 8018468:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801846a:	4604      	mov	r4, r0
 801846c:	b30b      	cbz	r3, 80184b2 <rcl_wait_set_add_guard_condition+0x4e>
 801846e:	b319      	cbz	r1, 80184b8 <rcl_wait_set_add_guard_condition+0x54>
 8018470:	68dd      	ldr	r5, [r3, #12]
 8018472:	68c0      	ldr	r0, [r0, #12]
 8018474:	4285      	cmp	r5, r0
 8018476:	d217      	bcs.n	80184a8 <rcl_wait_set_add_guard_condition+0x44>
 8018478:	1c68      	adds	r0, r5, #1
 801847a:	60d8      	str	r0, [r3, #12]
 801847c:	68a3      	ldr	r3, [r4, #8]
 801847e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8018482:	b102      	cbz	r2, 8018486 <rcl_wait_set_add_guard_condition+0x22>
 8018484:	6015      	str	r5, [r2, #0]
 8018486:	4608      	mov	r0, r1
 8018488:	f007 fd52 	bl	801ff30 <rcl_guard_condition_get_rmw_handle>
 801848c:	b150      	cbz	r0, 80184a4 <rcl_wait_set_add_guard_condition+0x40>
 801848e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018490:	6842      	ldr	r2, [r0, #4]
 8018492:	2000      	movs	r0, #0
 8018494:	695b      	ldr	r3, [r3, #20]
 8018496:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801849a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801849c:	6913      	ldr	r3, [r2, #16]
 801849e:	3301      	adds	r3, #1
 80184a0:	6113      	str	r3, [r2, #16]
 80184a2:	bd38      	pop	{r3, r4, r5, pc}
 80184a4:	2001      	movs	r0, #1
 80184a6:	bd38      	pop	{r3, r4, r5, pc}
 80184a8:	f240 3086 	movw	r0, #902	@ 0x386
 80184ac:	bd38      	pop	{r3, r4, r5, pc}
 80184ae:	200b      	movs	r0, #11
 80184b0:	4770      	bx	lr
 80184b2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80184b6:	bd38      	pop	{r3, r4, r5, pc}
 80184b8:	200b      	movs	r0, #11
 80184ba:	bd38      	pop	{r3, r4, r5, pc}

080184bc <rcl_wait_set_add_timer>:
 80184bc:	b328      	cbz	r0, 801850a <rcl_wait_set_add_timer+0x4e>
 80184be:	b538      	push	{r3, r4, r5, lr}
 80184c0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80184c2:	4604      	mov	r4, r0
 80184c4:	b31b      	cbz	r3, 801850e <rcl_wait_set_add_timer+0x52>
 80184c6:	b329      	cbz	r1, 8018514 <rcl_wait_set_add_timer+0x58>
 80184c8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80184ca:	6965      	ldr	r5, [r4, #20]
 80184cc:	42a8      	cmp	r0, r5
 80184ce:	d219      	bcs.n	8018504 <rcl_wait_set_add_timer+0x48>
 80184d0:	1c45      	adds	r5, r0, #1
 80184d2:	641d      	str	r5, [r3, #64]	@ 0x40
 80184d4:	6923      	ldr	r3, [r4, #16]
 80184d6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 80184da:	b102      	cbz	r2, 80184de <rcl_wait_set_add_timer+0x22>
 80184dc:	6010      	str	r0, [r2, #0]
 80184de:	4608      	mov	r0, r1
 80184e0:	f7ff fb9a 	bl	8017c18 <rcl_timer_get_guard_condition>
 80184e4:	b168      	cbz	r0, 8018502 <rcl_wait_set_add_timer+0x46>
 80184e6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80184e8:	68e3      	ldr	r3, [r4, #12]
 80184ea:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80184ec:	3b01      	subs	r3, #1
 80184ee:	441d      	add	r5, r3
 80184f0:	f007 fd1e 	bl	801ff30 <rcl_guard_condition_get_rmw_handle>
 80184f4:	b180      	cbz	r0, 8018518 <rcl_wait_set_add_timer+0x5c>
 80184f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80184f8:	6842      	ldr	r2, [r0, #4]
 80184fa:	2000      	movs	r0, #0
 80184fc:	695b      	ldr	r3, [r3, #20]
 80184fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018502:	bd38      	pop	{r3, r4, r5, pc}
 8018504:	f240 3086 	movw	r0, #902	@ 0x386
 8018508:	bd38      	pop	{r3, r4, r5, pc}
 801850a:	200b      	movs	r0, #11
 801850c:	4770      	bx	lr
 801850e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018512:	bd38      	pop	{r3, r4, r5, pc}
 8018514:	200b      	movs	r0, #11
 8018516:	bd38      	pop	{r3, r4, r5, pc}
 8018518:	2001      	movs	r0, #1
 801851a:	bd38      	pop	{r3, r4, r5, pc}

0801851c <rcl_wait_set_add_client>:
 801851c:	b318      	cbz	r0, 8018566 <rcl_wait_set_add_client+0x4a>
 801851e:	b538      	push	{r3, r4, r5, lr}
 8018520:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018522:	4604      	mov	r4, r0
 8018524:	b30b      	cbz	r3, 801856a <rcl_wait_set_add_client+0x4e>
 8018526:	b319      	cbz	r1, 8018570 <rcl_wait_set_add_client+0x54>
 8018528:	699d      	ldr	r5, [r3, #24]
 801852a:	69c0      	ldr	r0, [r0, #28]
 801852c:	4285      	cmp	r5, r0
 801852e:	d217      	bcs.n	8018560 <rcl_wait_set_add_client+0x44>
 8018530:	1c68      	adds	r0, r5, #1
 8018532:	6198      	str	r0, [r3, #24]
 8018534:	69a3      	ldr	r3, [r4, #24]
 8018536:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801853a:	b102      	cbz	r2, 801853e <rcl_wait_set_add_client+0x22>
 801853c:	6015      	str	r5, [r2, #0]
 801853e:	4608      	mov	r0, r1
 8018540:	f7fd ffba 	bl	80164b8 <rcl_client_get_rmw_handle>
 8018544:	b150      	cbz	r0, 801855c <rcl_wait_set_add_client+0x40>
 8018546:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018548:	6842      	ldr	r2, [r0, #4]
 801854a:	2000      	movs	r0, #0
 801854c:	6a1b      	ldr	r3, [r3, #32]
 801854e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018552:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018554:	69d3      	ldr	r3, [r2, #28]
 8018556:	3301      	adds	r3, #1
 8018558:	61d3      	str	r3, [r2, #28]
 801855a:	bd38      	pop	{r3, r4, r5, pc}
 801855c:	2001      	movs	r0, #1
 801855e:	bd38      	pop	{r3, r4, r5, pc}
 8018560:	f240 3086 	movw	r0, #902	@ 0x386
 8018564:	bd38      	pop	{r3, r4, r5, pc}
 8018566:	200b      	movs	r0, #11
 8018568:	4770      	bx	lr
 801856a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801856e:	bd38      	pop	{r3, r4, r5, pc}
 8018570:	200b      	movs	r0, #11
 8018572:	bd38      	pop	{r3, r4, r5, pc}

08018574 <rcl_wait_set_add_service>:
 8018574:	b318      	cbz	r0, 80185be <rcl_wait_set_add_service+0x4a>
 8018576:	b538      	push	{r3, r4, r5, lr}
 8018578:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801857a:	4604      	mov	r4, r0
 801857c:	b30b      	cbz	r3, 80185c2 <rcl_wait_set_add_service+0x4e>
 801857e:	b319      	cbz	r1, 80185c8 <rcl_wait_set_add_service+0x54>
 8018580:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8018582:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8018584:	4285      	cmp	r5, r0
 8018586:	d217      	bcs.n	80185b8 <rcl_wait_set_add_service+0x44>
 8018588:	1c68      	adds	r0, r5, #1
 801858a:	6258      	str	r0, [r3, #36]	@ 0x24
 801858c:	6a23      	ldr	r3, [r4, #32]
 801858e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8018592:	b102      	cbz	r2, 8018596 <rcl_wait_set_add_service+0x22>
 8018594:	6015      	str	r5, [r2, #0]
 8018596:	4608      	mov	r0, r1
 8018598:	f7fe ffe2 	bl	8017560 <rcl_service_get_rmw_handle>
 801859c:	b150      	cbz	r0, 80185b4 <rcl_wait_set_add_service+0x40>
 801859e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80185a0:	6842      	ldr	r2, [r0, #4]
 80185a2:	2000      	movs	r0, #0
 80185a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80185a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80185aa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80185ac:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80185ae:	3301      	adds	r3, #1
 80185b0:	6293      	str	r3, [r2, #40]	@ 0x28
 80185b2:	bd38      	pop	{r3, r4, r5, pc}
 80185b4:	2001      	movs	r0, #1
 80185b6:	bd38      	pop	{r3, r4, r5, pc}
 80185b8:	f240 3086 	movw	r0, #902	@ 0x386
 80185bc:	bd38      	pop	{r3, r4, r5, pc}
 80185be:	200b      	movs	r0, #11
 80185c0:	4770      	bx	lr
 80185c2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80185c6:	bd38      	pop	{r3, r4, r5, pc}
 80185c8:	200b      	movs	r0, #11
 80185ca:	bd38      	pop	{r3, r4, r5, pc}
 80185cc:	0000      	movs	r0, r0
	...

080185d0 <rcl_wait>:
 80185d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185d4:	ed2d 8b02 	vpush	{d8}
 80185d8:	b08d      	sub	sp, #52	@ 0x34
 80185da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80185de:	2800      	cmp	r0, #0
 80185e0:	f000 814f 	beq.w	8018882 <rcl_wait+0x2b2>
 80185e4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80185e6:	4605      	mov	r5, r0
 80185e8:	2e00      	cmp	r6, #0
 80185ea:	f000 811a 	beq.w	8018822 <rcl_wait+0x252>
 80185ee:	6843      	ldr	r3, [r0, #4]
 80185f0:	b983      	cbnz	r3, 8018614 <rcl_wait+0x44>
 80185f2:	68eb      	ldr	r3, [r5, #12]
 80185f4:	b973      	cbnz	r3, 8018614 <rcl_wait+0x44>
 80185f6:	696b      	ldr	r3, [r5, #20]
 80185f8:	b963      	cbnz	r3, 8018614 <rcl_wait+0x44>
 80185fa:	69eb      	ldr	r3, [r5, #28]
 80185fc:	b953      	cbnz	r3, 8018614 <rcl_wait+0x44>
 80185fe:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8018600:	b943      	cbnz	r3, 8018614 <rcl_wait+0x44>
 8018602:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8018604:	b933      	cbnz	r3, 8018614 <rcl_wait+0x44>
 8018606:	f240 3085 	movw	r0, #901	@ 0x385
 801860a:	b00d      	add	sp, #52	@ 0x34
 801860c:	ecbd 8b02 	vpop	{d8}
 8018610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018614:	9b04      	ldr	r3, [sp, #16]
 8018616:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8018618:	2b01      	cmp	r3, #1
 801861a:	9b05      	ldr	r3, [sp, #20]
 801861c:	f173 0300 	sbcs.w	r3, r3, #0
 8018620:	f2c0 80f8 	blt.w	8018814 <rcl_wait+0x244>
 8018624:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8018628:	2a00      	cmp	r2, #0
 801862a:	f000 810f 	beq.w	801884c <rcl_wait+0x27c>
 801862e:	2400      	movs	r4, #0
 8018630:	4613      	mov	r3, r2
 8018632:	f240 3921 	movw	r9, #801	@ 0x321
 8018636:	4632      	mov	r2, r6
 8018638:	46a2      	mov	sl, r4
 801863a:	46a3      	mov	fp, r4
 801863c:	ed9f 8b98 	vldr	d8, [pc, #608]	@ 80188a0 <rcl_wait+0x2d0>
 8018640:	e014      	b.n	801866c <rcl_wait+0x9c>
 8018642:	2800      	cmp	r0, #0
 8018644:	d1e1      	bne.n	801860a <rcl_wait+0x3a>
 8018646:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801864a:	4542      	cmp	r2, r8
 801864c:	eb73 0107 	sbcs.w	r1, r3, r7
 8018650:	da03      	bge.n	801865a <rcl_wait+0x8a>
 8018652:	4690      	mov	r8, r2
 8018654:	461f      	mov	r7, r3
 8018656:	f04f 0b01 	mov.w	fp, #1
 801865a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801865c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801865e:	3401      	adds	r4, #1
 8018660:	f14a 0a00 	adc.w	sl, sl, #0
 8018664:	429c      	cmp	r4, r3
 8018666:	f17a 0100 	sbcs.w	r1, sl, #0
 801866a:	d228      	bcs.n	80186be <rcl_wait+0xee>
 801866c:	6928      	ldr	r0, [r5, #16]
 801866e:	a908      	add	r1, sp, #32
 8018670:	00a6      	lsls	r6, r4, #2
 8018672:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8018676:	2800      	cmp	r0, #0
 8018678:	d0f1      	beq.n	801865e <rcl_wait+0x8e>
 801867a:	68eb      	ldr	r3, [r5, #12]
 801867c:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8018680:	4423      	add	r3, r4
 8018682:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8018686:	f1be 0f00 	cmp.w	lr, #0
 801868a:	d006      	beq.n	801869a <rcl_wait+0xca>
 801868c:	6913      	ldr	r3, [r2, #16]
 801868e:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8018692:	3301      	adds	r3, #1
 8018694:	6113      	str	r3, [r2, #16]
 8018696:	692b      	ldr	r3, [r5, #16]
 8018698:	5998      	ldr	r0, [r3, r6]
 801869a:	ed8d 8b08 	vstr	d8, [sp, #32]
 801869e:	f7ff fa89 	bl	8017bb4 <rcl_timer_get_time_until_next_call>
 80186a2:	4548      	cmp	r0, r9
 80186a4:	d1cd      	bne.n	8018642 <rcl_wait+0x72>
 80186a6:	692b      	ldr	r3, [r5, #16]
 80186a8:	2200      	movs	r2, #0
 80186aa:	3401      	adds	r4, #1
 80186ac:	519a      	str	r2, [r3, r6]
 80186ae:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80186b0:	f14a 0a00 	adc.w	sl, sl, #0
 80186b4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80186b6:	429c      	cmp	r4, r3
 80186b8:	f17a 0100 	sbcs.w	r1, sl, #0
 80186bc:	d3d6      	bcc.n	801866c <rcl_wait+0x9c>
 80186be:	4659      	mov	r1, fp
 80186c0:	4616      	mov	r6, r2
 80186c2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80186c6:	4313      	orrs	r3, r2
 80186c8:	f040 80b4 	bne.w	8018834 <rcl_wait+0x264>
 80186cc:	2300      	movs	r3, #0
 80186ce:	2200      	movs	r2, #0
 80186d0:	460c      	mov	r4, r1
 80186d2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80186d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80186da:	ab08      	add	r3, sp, #32
 80186dc:	9302      	str	r3, [sp, #8]
 80186de:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 80186e2:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 80186e4:	f106 0110 	add.w	r1, r6, #16
 80186e8:	9300      	str	r3, [sp, #0]
 80186ea:	1d30      	adds	r0, r6, #4
 80186ec:	f106 031c 	add.w	r3, r6, #28
 80186f0:	9201      	str	r2, [sp, #4]
 80186f2:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 80186f6:	f002 fd01 	bl	801b0fc <rmw_wait>
 80186fa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80186fc:	4680      	mov	r8, r0
 80186fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018700:	b1e2      	cbz	r2, 801873c <rcl_wait+0x16c>
 8018702:	f04f 0900 	mov.w	r9, #0
 8018706:	464f      	mov	r7, r9
 8018708:	692a      	ldr	r2, [r5, #16]
 801870a:	f10d 011f 	add.w	r1, sp, #31
 801870e:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8018712:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8018716:	b160      	cbz	r0, 8018732 <rcl_wait+0x162>
 8018718:	f88d 701f 	strb.w	r7, [sp, #31]
 801871c:	f7ff fa0e 	bl	8017b3c <rcl_timer_is_ready>
 8018720:	2800      	cmp	r0, #0
 8018722:	f47f af72 	bne.w	801860a <rcl_wait+0x3a>
 8018726:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801872a:	b90b      	cbnz	r3, 8018730 <rcl_wait+0x160>
 801872c:	692a      	ldr	r2, [r5, #16]
 801872e:	5193      	str	r3, [r2, r6]
 8018730:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018732:	f109 0901 	add.w	r9, r9, #1
 8018736:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018738:	454a      	cmp	r2, r9
 801873a:	d8e5      	bhi.n	8018708 <rcl_wait+0x138>
 801873c:	f038 0002 	bics.w	r0, r8, #2
 8018740:	d176      	bne.n	8018830 <rcl_wait+0x260>
 8018742:	686f      	ldr	r7, [r5, #4]
 8018744:	b17f      	cbz	r7, 8018766 <rcl_wait+0x196>
 8018746:	4602      	mov	r2, r0
 8018748:	e002      	b.n	8018750 <rcl_wait+0x180>
 801874a:	3201      	adds	r2, #1
 801874c:	42ba      	cmp	r2, r7
 801874e:	d00a      	beq.n	8018766 <rcl_wait+0x196>
 8018750:	6899      	ldr	r1, [r3, #8]
 8018752:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018756:	2900      	cmp	r1, #0
 8018758:	d1f7      	bne.n	801874a <rcl_wait+0x17a>
 801875a:	682e      	ldr	r6, [r5, #0]
 801875c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018760:	3201      	adds	r2, #1
 8018762:	42ba      	cmp	r2, r7
 8018764:	d1f4      	bne.n	8018750 <rcl_wait+0x180>
 8018766:	68ef      	ldr	r7, [r5, #12]
 8018768:	b17f      	cbz	r7, 801878a <rcl_wait+0x1ba>
 801876a:	2200      	movs	r2, #0
 801876c:	e002      	b.n	8018774 <rcl_wait+0x1a4>
 801876e:	3201      	adds	r2, #1
 8018770:	42ba      	cmp	r2, r7
 8018772:	d00a      	beq.n	801878a <rcl_wait+0x1ba>
 8018774:	6959      	ldr	r1, [r3, #20]
 8018776:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801877a:	2900      	cmp	r1, #0
 801877c:	d1f7      	bne.n	801876e <rcl_wait+0x19e>
 801877e:	68ae      	ldr	r6, [r5, #8]
 8018780:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018784:	3201      	adds	r2, #1
 8018786:	42ba      	cmp	r2, r7
 8018788:	d1f4      	bne.n	8018774 <rcl_wait+0x1a4>
 801878a:	69ef      	ldr	r7, [r5, #28]
 801878c:	b17f      	cbz	r7, 80187ae <rcl_wait+0x1de>
 801878e:	2200      	movs	r2, #0
 8018790:	e002      	b.n	8018798 <rcl_wait+0x1c8>
 8018792:	3201      	adds	r2, #1
 8018794:	42ba      	cmp	r2, r7
 8018796:	d00a      	beq.n	80187ae <rcl_wait+0x1de>
 8018798:	6a19      	ldr	r1, [r3, #32]
 801879a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801879e:	2900      	cmp	r1, #0
 80187a0:	d1f7      	bne.n	8018792 <rcl_wait+0x1c2>
 80187a2:	69ae      	ldr	r6, [r5, #24]
 80187a4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80187a8:	3201      	adds	r2, #1
 80187aa:	42ba      	cmp	r2, r7
 80187ac:	d1f4      	bne.n	8018798 <rcl_wait+0x1c8>
 80187ae:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 80187b0:	b17f      	cbz	r7, 80187d2 <rcl_wait+0x202>
 80187b2:	2200      	movs	r2, #0
 80187b4:	e002      	b.n	80187bc <rcl_wait+0x1ec>
 80187b6:	3201      	adds	r2, #1
 80187b8:	42ba      	cmp	r2, r7
 80187ba:	d00a      	beq.n	80187d2 <rcl_wait+0x202>
 80187bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80187be:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80187c2:	2900      	cmp	r1, #0
 80187c4:	d1f7      	bne.n	80187b6 <rcl_wait+0x1e6>
 80187c6:	6a2e      	ldr	r6, [r5, #32]
 80187c8:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80187cc:	3201      	adds	r2, #1
 80187ce:	42ba      	cmp	r2, r7
 80187d0:	d1f4      	bne.n	80187bc <rcl_wait+0x1ec>
 80187d2:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 80187d4:	b17f      	cbz	r7, 80187f6 <rcl_wait+0x226>
 80187d6:	2200      	movs	r2, #0
 80187d8:	e002      	b.n	80187e0 <rcl_wait+0x210>
 80187da:	3201      	adds	r2, #1
 80187dc:	42ba      	cmp	r2, r7
 80187de:	d00a      	beq.n	80187f6 <rcl_wait+0x226>
 80187e0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80187e2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80187e6:	2900      	cmp	r1, #0
 80187e8:	d1f7      	bne.n	80187da <rcl_wait+0x20a>
 80187ea:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 80187ec:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80187f0:	3201      	adds	r2, #1
 80187f2:	42ba      	cmp	r2, r7
 80187f4:	d1f4      	bne.n	80187e0 <rcl_wait+0x210>
 80187f6:	f1b8 0f02 	cmp.w	r8, #2
 80187fa:	f47f af06 	bne.w	801860a <rcl_wait+0x3a>
 80187fe:	f084 0301 	eor.w	r3, r4, #1
 8018802:	b2db      	uxtb	r3, r3
 8018804:	2b00      	cmp	r3, #0
 8018806:	bf18      	it	ne
 8018808:	2002      	movne	r0, #2
 801880a:	b00d      	add	sp, #52	@ 0x34
 801880c:	ecbd 8b02 	vpop	{d8}
 8018810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018814:	2a00      	cmp	r2, #0
 8018816:	d03a      	beq.n	801888e <rcl_wait+0x2be>
 8018818:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801881c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8018820:	e705      	b.n	801862e <rcl_wait+0x5e>
 8018822:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018826:	b00d      	add	sp, #52	@ 0x34
 8018828:	ecbd 8b02 	vpop	{d8}
 801882c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018830:	2001      	movs	r0, #1
 8018832:	e6ea      	b.n	801860a <rcl_wait+0x3a>
 8018834:	9b04      	ldr	r3, [sp, #16]
 8018836:	460c      	mov	r4, r1
 8018838:	2b01      	cmp	r3, #1
 801883a:	9b05      	ldr	r3, [sp, #20]
 801883c:	f173 0300 	sbcs.w	r3, r3, #0
 8018840:	bfa8      	it	ge
 8018842:	f044 0401 	orrge.w	r4, r4, #1
 8018846:	b914      	cbnz	r4, 801884e <rcl_wait+0x27e>
 8018848:	4623      	mov	r3, r4
 801884a:	e747      	b.n	80186dc <rcl_wait+0x10c>
 801884c:	4611      	mov	r1, r2
 801884e:	2f00      	cmp	r7, #0
 8018850:	da02      	bge.n	8018858 <rcl_wait+0x288>
 8018852:	f04f 0800 	mov.w	r8, #0
 8018856:	4647      	mov	r7, r8
 8018858:	460c      	mov	r4, r1
 801885a:	4640      	mov	r0, r8
 801885c:	4639      	mov	r1, r7
 801885e:	a312      	add	r3, pc, #72	@ (adr r3, 80188a8 <rcl_wait+0x2d8>)
 8018860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018864:	f7e7 fda4 	bl	80003b0 <__aeabi_ldivmod>
 8018868:	a30f      	add	r3, pc, #60	@ (adr r3, 80188a8 <rcl_wait+0x2d8>)
 801886a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801886e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018872:	4640      	mov	r0, r8
 8018874:	4639      	mov	r1, r7
 8018876:	f7e7 fd9b 	bl	80003b0 <__aeabi_ldivmod>
 801887a:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801887e:	ab08      	add	r3, sp, #32
 8018880:	e72c      	b.n	80186dc <rcl_wait+0x10c>
 8018882:	200b      	movs	r0, #11
 8018884:	b00d      	add	sp, #52	@ 0x34
 8018886:	ecbd 8b02 	vpop	{d8}
 801888a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801888e:	4611      	mov	r1, r2
 8018890:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8018894:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8018898:	e713      	b.n	80186c2 <rcl_wait+0xf2>
 801889a:	bf00      	nop
 801889c:	f3af 8000 	nop.w
 80188a0:	ffffffff 	.word	0xffffffff
 80188a4:	7fffffff 	.word	0x7fffffff
 80188a8:	3b9aca00 	.word	0x3b9aca00
 80188ac:	00000000 	.word	0x00000000

080188b0 <rcl_action_take_goal_response>:
 80188b0:	2800      	cmp	r0, #0
 80188b2:	d039      	beq.n	8018928 <rcl_action_take_goal_response+0x78>
 80188b4:	b570      	push	{r4, r5, r6, lr}
 80188b6:	4604      	mov	r4, r0
 80188b8:	6800      	ldr	r0, [r0, #0]
 80188ba:	b380      	cbz	r0, 801891e <rcl_action_take_goal_response+0x6e>
 80188bc:	460e      	mov	r6, r1
 80188be:	4615      	mov	r5, r2
 80188c0:	f7fd fe82 	bl	80165c8 <rcl_client_is_valid>
 80188c4:	b330      	cbz	r0, 8018914 <rcl_action_take_goal_response+0x64>
 80188c6:	6820      	ldr	r0, [r4, #0]
 80188c8:	3004      	adds	r0, #4
 80188ca:	f7fd fe7d 	bl	80165c8 <rcl_client_is_valid>
 80188ce:	b308      	cbz	r0, 8018914 <rcl_action_take_goal_response+0x64>
 80188d0:	6820      	ldr	r0, [r4, #0]
 80188d2:	3008      	adds	r0, #8
 80188d4:	f7fd fe78 	bl	80165c8 <rcl_client_is_valid>
 80188d8:	b1e0      	cbz	r0, 8018914 <rcl_action_take_goal_response+0x64>
 80188da:	6820      	ldr	r0, [r4, #0]
 80188dc:	300c      	adds	r0, #12
 80188de:	f7fe ffe5 	bl	80178ac <rcl_subscription_is_valid>
 80188e2:	b1b8      	cbz	r0, 8018914 <rcl_action_take_goal_response+0x64>
 80188e4:	6820      	ldr	r0, [r4, #0]
 80188e6:	3010      	adds	r0, #16
 80188e8:	f7fe ffe0 	bl	80178ac <rcl_subscription_is_valid>
 80188ec:	b190      	cbz	r0, 8018914 <rcl_action_take_goal_response+0x64>
 80188ee:	b1cd      	cbz	r5, 8018924 <rcl_action_take_goal_response+0x74>
 80188f0:	b1c6      	cbz	r6, 8018924 <rcl_action_take_goal_response+0x74>
 80188f2:	462a      	mov	r2, r5
 80188f4:	4631      	mov	r1, r6
 80188f6:	6820      	ldr	r0, [r4, #0]
 80188f8:	f7fd fe1e 	bl	8016538 <rcl_take_response>
 80188fc:	b148      	cbz	r0, 8018912 <rcl_action_take_goal_response+0x62>
 80188fe:	280a      	cmp	r0, #10
 8018900:	d007      	beq.n	8018912 <rcl_action_take_goal_response+0x62>
 8018902:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8018906:	f640 0337 	movw	r3, #2103	@ 0x837
 801890a:	4290      	cmp	r0, r2
 801890c:	bf0c      	ite	eq
 801890e:	4618      	moveq	r0, r3
 8018910:	2001      	movne	r0, #1
 8018912:	bd70      	pop	{r4, r5, r6, pc}
 8018914:	f7fc ffc4 	bl	80158a0 <rcutils_reset_error>
 8018918:	f640 0036 	movw	r0, #2102	@ 0x836
 801891c:	bd70      	pop	{r4, r5, r6, pc}
 801891e:	f640 0036 	movw	r0, #2102	@ 0x836
 8018922:	bd70      	pop	{r4, r5, r6, pc}
 8018924:	200b      	movs	r0, #11
 8018926:	bd70      	pop	{r4, r5, r6, pc}
 8018928:	f640 0036 	movw	r0, #2102	@ 0x836
 801892c:	4770      	bx	lr
 801892e:	bf00      	nop

08018930 <rcl_action_send_result_request>:
 8018930:	b390      	cbz	r0, 8018998 <rcl_action_send_result_request+0x68>
 8018932:	b570      	push	{r4, r5, r6, lr}
 8018934:	4604      	mov	r4, r0
 8018936:	6800      	ldr	r0, [r0, #0]
 8018938:	b348      	cbz	r0, 801898e <rcl_action_send_result_request+0x5e>
 801893a:	460e      	mov	r6, r1
 801893c:	4615      	mov	r5, r2
 801893e:	f7fd fe43 	bl	80165c8 <rcl_client_is_valid>
 8018942:	b1f8      	cbz	r0, 8018984 <rcl_action_send_result_request+0x54>
 8018944:	6820      	ldr	r0, [r4, #0]
 8018946:	3004      	adds	r0, #4
 8018948:	f7fd fe3e 	bl	80165c8 <rcl_client_is_valid>
 801894c:	b1d0      	cbz	r0, 8018984 <rcl_action_send_result_request+0x54>
 801894e:	6820      	ldr	r0, [r4, #0]
 8018950:	3008      	adds	r0, #8
 8018952:	f7fd fe39 	bl	80165c8 <rcl_client_is_valid>
 8018956:	b1a8      	cbz	r0, 8018984 <rcl_action_send_result_request+0x54>
 8018958:	6820      	ldr	r0, [r4, #0]
 801895a:	300c      	adds	r0, #12
 801895c:	f7fe ffa6 	bl	80178ac <rcl_subscription_is_valid>
 8018960:	b180      	cbz	r0, 8018984 <rcl_action_send_result_request+0x54>
 8018962:	6820      	ldr	r0, [r4, #0]
 8018964:	3010      	adds	r0, #16
 8018966:	f7fe ffa1 	bl	80178ac <rcl_subscription_is_valid>
 801896a:	b158      	cbz	r0, 8018984 <rcl_action_send_result_request+0x54>
 801896c:	b195      	cbz	r5, 8018994 <rcl_action_send_result_request+0x64>
 801896e:	b18e      	cbz	r6, 8018994 <rcl_action_send_result_request+0x64>
 8018970:	6820      	ldr	r0, [r4, #0]
 8018972:	462a      	mov	r2, r5
 8018974:	4631      	mov	r1, r6
 8018976:	3008      	adds	r0, #8
 8018978:	f7fd fda4 	bl	80164c4 <rcl_send_request>
 801897c:	3800      	subs	r0, #0
 801897e:	bf18      	it	ne
 8018980:	2001      	movne	r0, #1
 8018982:	bd70      	pop	{r4, r5, r6, pc}
 8018984:	f7fc ff8c 	bl	80158a0 <rcutils_reset_error>
 8018988:	f640 0036 	movw	r0, #2102	@ 0x836
 801898c:	bd70      	pop	{r4, r5, r6, pc}
 801898e:	f640 0036 	movw	r0, #2102	@ 0x836
 8018992:	bd70      	pop	{r4, r5, r6, pc}
 8018994:	200b      	movs	r0, #11
 8018996:	bd70      	pop	{r4, r5, r6, pc}
 8018998:	f640 0036 	movw	r0, #2102	@ 0x836
 801899c:	4770      	bx	lr
 801899e:	bf00      	nop

080189a0 <rcl_action_take_result_response>:
 80189a0:	2800      	cmp	r0, #0
 80189a2:	d03a      	beq.n	8018a1a <rcl_action_take_result_response+0x7a>
 80189a4:	b570      	push	{r4, r5, r6, lr}
 80189a6:	4604      	mov	r4, r0
 80189a8:	6800      	ldr	r0, [r0, #0]
 80189aa:	b388      	cbz	r0, 8018a10 <rcl_action_take_result_response+0x70>
 80189ac:	460e      	mov	r6, r1
 80189ae:	4615      	mov	r5, r2
 80189b0:	f7fd fe0a 	bl	80165c8 <rcl_client_is_valid>
 80189b4:	b338      	cbz	r0, 8018a06 <rcl_action_take_result_response+0x66>
 80189b6:	6820      	ldr	r0, [r4, #0]
 80189b8:	3004      	adds	r0, #4
 80189ba:	f7fd fe05 	bl	80165c8 <rcl_client_is_valid>
 80189be:	b310      	cbz	r0, 8018a06 <rcl_action_take_result_response+0x66>
 80189c0:	6820      	ldr	r0, [r4, #0]
 80189c2:	3008      	adds	r0, #8
 80189c4:	f7fd fe00 	bl	80165c8 <rcl_client_is_valid>
 80189c8:	b1e8      	cbz	r0, 8018a06 <rcl_action_take_result_response+0x66>
 80189ca:	6820      	ldr	r0, [r4, #0]
 80189cc:	300c      	adds	r0, #12
 80189ce:	f7fe ff6d 	bl	80178ac <rcl_subscription_is_valid>
 80189d2:	b1c0      	cbz	r0, 8018a06 <rcl_action_take_result_response+0x66>
 80189d4:	6820      	ldr	r0, [r4, #0]
 80189d6:	3010      	adds	r0, #16
 80189d8:	f7fe ff68 	bl	80178ac <rcl_subscription_is_valid>
 80189dc:	b198      	cbz	r0, 8018a06 <rcl_action_take_result_response+0x66>
 80189de:	b1d5      	cbz	r5, 8018a16 <rcl_action_take_result_response+0x76>
 80189e0:	b1ce      	cbz	r6, 8018a16 <rcl_action_take_result_response+0x76>
 80189e2:	6820      	ldr	r0, [r4, #0]
 80189e4:	462a      	mov	r2, r5
 80189e6:	4631      	mov	r1, r6
 80189e8:	3008      	adds	r0, #8
 80189ea:	f7fd fda5 	bl	8016538 <rcl_take_response>
 80189ee:	b148      	cbz	r0, 8018a04 <rcl_action_take_result_response+0x64>
 80189f0:	280a      	cmp	r0, #10
 80189f2:	d007      	beq.n	8018a04 <rcl_action_take_result_response+0x64>
 80189f4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80189f8:	f640 0337 	movw	r3, #2103	@ 0x837
 80189fc:	4290      	cmp	r0, r2
 80189fe:	bf0c      	ite	eq
 8018a00:	4618      	moveq	r0, r3
 8018a02:	2001      	movne	r0, #1
 8018a04:	bd70      	pop	{r4, r5, r6, pc}
 8018a06:	f7fc ff4b 	bl	80158a0 <rcutils_reset_error>
 8018a0a:	f640 0036 	movw	r0, #2102	@ 0x836
 8018a0e:	bd70      	pop	{r4, r5, r6, pc}
 8018a10:	f640 0036 	movw	r0, #2102	@ 0x836
 8018a14:	bd70      	pop	{r4, r5, r6, pc}
 8018a16:	200b      	movs	r0, #11
 8018a18:	bd70      	pop	{r4, r5, r6, pc}
 8018a1a:	f640 0036 	movw	r0, #2102	@ 0x836
 8018a1e:	4770      	bx	lr

08018a20 <rcl_action_take_cancel_response>:
 8018a20:	2800      	cmp	r0, #0
 8018a22:	d03a      	beq.n	8018a9a <rcl_action_take_cancel_response+0x7a>
 8018a24:	b570      	push	{r4, r5, r6, lr}
 8018a26:	4604      	mov	r4, r0
 8018a28:	6800      	ldr	r0, [r0, #0]
 8018a2a:	b388      	cbz	r0, 8018a90 <rcl_action_take_cancel_response+0x70>
 8018a2c:	460e      	mov	r6, r1
 8018a2e:	4615      	mov	r5, r2
 8018a30:	f7fd fdca 	bl	80165c8 <rcl_client_is_valid>
 8018a34:	b338      	cbz	r0, 8018a86 <rcl_action_take_cancel_response+0x66>
 8018a36:	6820      	ldr	r0, [r4, #0]
 8018a38:	3004      	adds	r0, #4
 8018a3a:	f7fd fdc5 	bl	80165c8 <rcl_client_is_valid>
 8018a3e:	b310      	cbz	r0, 8018a86 <rcl_action_take_cancel_response+0x66>
 8018a40:	6820      	ldr	r0, [r4, #0]
 8018a42:	3008      	adds	r0, #8
 8018a44:	f7fd fdc0 	bl	80165c8 <rcl_client_is_valid>
 8018a48:	b1e8      	cbz	r0, 8018a86 <rcl_action_take_cancel_response+0x66>
 8018a4a:	6820      	ldr	r0, [r4, #0]
 8018a4c:	300c      	adds	r0, #12
 8018a4e:	f7fe ff2d 	bl	80178ac <rcl_subscription_is_valid>
 8018a52:	b1c0      	cbz	r0, 8018a86 <rcl_action_take_cancel_response+0x66>
 8018a54:	6820      	ldr	r0, [r4, #0]
 8018a56:	3010      	adds	r0, #16
 8018a58:	f7fe ff28 	bl	80178ac <rcl_subscription_is_valid>
 8018a5c:	b198      	cbz	r0, 8018a86 <rcl_action_take_cancel_response+0x66>
 8018a5e:	b1d5      	cbz	r5, 8018a96 <rcl_action_take_cancel_response+0x76>
 8018a60:	b1ce      	cbz	r6, 8018a96 <rcl_action_take_cancel_response+0x76>
 8018a62:	6820      	ldr	r0, [r4, #0]
 8018a64:	462a      	mov	r2, r5
 8018a66:	4631      	mov	r1, r6
 8018a68:	3004      	adds	r0, #4
 8018a6a:	f7fd fd65 	bl	8016538 <rcl_take_response>
 8018a6e:	b148      	cbz	r0, 8018a84 <rcl_action_take_cancel_response+0x64>
 8018a70:	280a      	cmp	r0, #10
 8018a72:	d007      	beq.n	8018a84 <rcl_action_take_cancel_response+0x64>
 8018a74:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8018a78:	f640 0337 	movw	r3, #2103	@ 0x837
 8018a7c:	4290      	cmp	r0, r2
 8018a7e:	bf0c      	ite	eq
 8018a80:	4618      	moveq	r0, r3
 8018a82:	2001      	movne	r0, #1
 8018a84:	bd70      	pop	{r4, r5, r6, pc}
 8018a86:	f7fc ff0b 	bl	80158a0 <rcutils_reset_error>
 8018a8a:	f640 0036 	movw	r0, #2102	@ 0x836
 8018a8e:	bd70      	pop	{r4, r5, r6, pc}
 8018a90:	f640 0036 	movw	r0, #2102	@ 0x836
 8018a94:	bd70      	pop	{r4, r5, r6, pc}
 8018a96:	200b      	movs	r0, #11
 8018a98:	bd70      	pop	{r4, r5, r6, pc}
 8018a9a:	f640 0036 	movw	r0, #2102	@ 0x836
 8018a9e:	4770      	bx	lr

08018aa0 <rcl_action_take_feedback>:
 8018aa0:	2800      	cmp	r0, #0
 8018aa2:	d038      	beq.n	8018b16 <rcl_action_take_feedback+0x76>
 8018aa4:	b530      	push	{r4, r5, lr}
 8018aa6:	4604      	mov	r4, r0
 8018aa8:	6800      	ldr	r0, [r0, #0]
 8018aaa:	b091      	sub	sp, #68	@ 0x44
 8018aac:	b378      	cbz	r0, 8018b0e <rcl_action_take_feedback+0x6e>
 8018aae:	460d      	mov	r5, r1
 8018ab0:	f7fd fd8a 	bl	80165c8 <rcl_client_is_valid>
 8018ab4:	b328      	cbz	r0, 8018b02 <rcl_action_take_feedback+0x62>
 8018ab6:	6820      	ldr	r0, [r4, #0]
 8018ab8:	3004      	adds	r0, #4
 8018aba:	f7fd fd85 	bl	80165c8 <rcl_client_is_valid>
 8018abe:	b300      	cbz	r0, 8018b02 <rcl_action_take_feedback+0x62>
 8018ac0:	6820      	ldr	r0, [r4, #0]
 8018ac2:	3008      	adds	r0, #8
 8018ac4:	f7fd fd80 	bl	80165c8 <rcl_client_is_valid>
 8018ac8:	b1d8      	cbz	r0, 8018b02 <rcl_action_take_feedback+0x62>
 8018aca:	6820      	ldr	r0, [r4, #0]
 8018acc:	300c      	adds	r0, #12
 8018ace:	f7fe feed 	bl	80178ac <rcl_subscription_is_valid>
 8018ad2:	b1b0      	cbz	r0, 8018b02 <rcl_action_take_feedback+0x62>
 8018ad4:	6820      	ldr	r0, [r4, #0]
 8018ad6:	3010      	adds	r0, #16
 8018ad8:	f7fe fee8 	bl	80178ac <rcl_subscription_is_valid>
 8018adc:	b188      	cbz	r0, 8018b02 <rcl_action_take_feedback+0x62>
 8018ade:	b1ed      	cbz	r5, 8018b1c <rcl_action_take_feedback+0x7c>
 8018ae0:	6820      	ldr	r0, [r4, #0]
 8018ae2:	2300      	movs	r3, #0
 8018ae4:	466a      	mov	r2, sp
 8018ae6:	4629      	mov	r1, r5
 8018ae8:	300c      	adds	r0, #12
 8018aea:	f7fe fe83 	bl	80177f4 <rcl_take>
 8018aee:	b160      	cbz	r0, 8018b0a <rcl_action_take_feedback+0x6a>
 8018af0:	f240 1391 	movw	r3, #401	@ 0x191
 8018af4:	4298      	cmp	r0, r3
 8018af6:	d014      	beq.n	8018b22 <rcl_action_take_feedback+0x82>
 8018af8:	280a      	cmp	r0, #10
 8018afa:	bf18      	it	ne
 8018afc:	2001      	movne	r0, #1
 8018afe:	b011      	add	sp, #68	@ 0x44
 8018b00:	bd30      	pop	{r4, r5, pc}
 8018b02:	f7fc fecd 	bl	80158a0 <rcutils_reset_error>
 8018b06:	f640 0036 	movw	r0, #2102	@ 0x836
 8018b0a:	b011      	add	sp, #68	@ 0x44
 8018b0c:	bd30      	pop	{r4, r5, pc}
 8018b0e:	f640 0036 	movw	r0, #2102	@ 0x836
 8018b12:	b011      	add	sp, #68	@ 0x44
 8018b14:	bd30      	pop	{r4, r5, pc}
 8018b16:	f640 0036 	movw	r0, #2102	@ 0x836
 8018b1a:	4770      	bx	lr
 8018b1c:	200b      	movs	r0, #11
 8018b1e:	b011      	add	sp, #68	@ 0x44
 8018b20:	bd30      	pop	{r4, r5, pc}
 8018b22:	f640 0037 	movw	r0, #2103	@ 0x837
 8018b26:	e7f0      	b.n	8018b0a <rcl_action_take_feedback+0x6a>

08018b28 <rcl_action_wait_set_add_action_client>:
 8018b28:	2800      	cmp	r0, #0
 8018b2a:	d048      	beq.n	8018bbe <rcl_action_wait_set_add_action_client+0x96>
 8018b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b2e:	460c      	mov	r4, r1
 8018b30:	2900      	cmp	r1, #0
 8018b32:	d03c      	beq.n	8018bae <rcl_action_wait_set_add_action_client+0x86>
 8018b34:	4605      	mov	r5, r0
 8018b36:	6808      	ldr	r0, [r1, #0]
 8018b38:	2800      	cmp	r0, #0
 8018b3a:	d038      	beq.n	8018bae <rcl_action_wait_set_add_action_client+0x86>
 8018b3c:	4617      	mov	r7, r2
 8018b3e:	461e      	mov	r6, r3
 8018b40:	f7fd fd42 	bl	80165c8 <rcl_client_is_valid>
 8018b44:	b3b0      	cbz	r0, 8018bb4 <rcl_action_wait_set_add_action_client+0x8c>
 8018b46:	6820      	ldr	r0, [r4, #0]
 8018b48:	3004      	adds	r0, #4
 8018b4a:	f7fd fd3d 	bl	80165c8 <rcl_client_is_valid>
 8018b4e:	b388      	cbz	r0, 8018bb4 <rcl_action_wait_set_add_action_client+0x8c>
 8018b50:	6820      	ldr	r0, [r4, #0]
 8018b52:	3008      	adds	r0, #8
 8018b54:	f7fd fd38 	bl	80165c8 <rcl_client_is_valid>
 8018b58:	b360      	cbz	r0, 8018bb4 <rcl_action_wait_set_add_action_client+0x8c>
 8018b5a:	6820      	ldr	r0, [r4, #0]
 8018b5c:	300c      	adds	r0, #12
 8018b5e:	f7fe fea5 	bl	80178ac <rcl_subscription_is_valid>
 8018b62:	b338      	cbz	r0, 8018bb4 <rcl_action_wait_set_add_action_client+0x8c>
 8018b64:	6820      	ldr	r0, [r4, #0]
 8018b66:	3010      	adds	r0, #16
 8018b68:	f7fe fea0 	bl	80178ac <rcl_subscription_is_valid>
 8018b6c:	b310      	cbz	r0, 8018bb4 <rcl_action_wait_set_add_action_client+0x8c>
 8018b6e:	6821      	ldr	r1, [r4, #0]
 8018b70:	4628      	mov	r0, r5
 8018b72:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8018b76:	f7ff fcd1 	bl	801851c <rcl_wait_set_add_client>
 8018b7a:	b9b8      	cbnz	r0, 8018bac <rcl_action_wait_set_add_action_client+0x84>
 8018b7c:	6821      	ldr	r1, [r4, #0]
 8018b7e:	4628      	mov	r0, r5
 8018b80:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8018b84:	3104      	adds	r1, #4
 8018b86:	f7ff fcc9 	bl	801851c <rcl_wait_set_add_client>
 8018b8a:	b978      	cbnz	r0, 8018bac <rcl_action_wait_set_add_action_client+0x84>
 8018b8c:	6821      	ldr	r1, [r4, #0]
 8018b8e:	4628      	mov	r0, r5
 8018b90:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8018b94:	3108      	adds	r1, #8
 8018b96:	f7ff fcc1 	bl	801851c <rcl_wait_set_add_client>
 8018b9a:	b938      	cbnz	r0, 8018bac <rcl_action_wait_set_add_action_client+0x84>
 8018b9c:	6821      	ldr	r1, [r4, #0]
 8018b9e:	4628      	mov	r0, r5
 8018ba0:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8018ba4:	310c      	adds	r1, #12
 8018ba6:	f7ff f969 	bl	8017e7c <rcl_wait_set_add_subscription>
 8018baa:	b158      	cbz	r0, 8018bc4 <rcl_action_wait_set_add_action_client+0x9c>
 8018bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018bae:	f640 0036 	movw	r0, #2102	@ 0x836
 8018bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018bb4:	f7fc fe74 	bl	80158a0 <rcutils_reset_error>
 8018bb8:	f640 0036 	movw	r0, #2102	@ 0x836
 8018bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018bbe:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018bc2:	4770      	bx	lr
 8018bc4:	6821      	ldr	r1, [r4, #0]
 8018bc6:	4628      	mov	r0, r5
 8018bc8:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8018bcc:	3110      	adds	r1, #16
 8018bce:	f7ff f955 	bl	8017e7c <rcl_wait_set_add_subscription>
 8018bd2:	2800      	cmp	r0, #0
 8018bd4:	d1ea      	bne.n	8018bac <rcl_action_wait_set_add_action_client+0x84>
 8018bd6:	b11f      	cbz	r7, 8018be0 <rcl_action_wait_set_add_action_client+0xb8>
 8018bd8:	6823      	ldr	r3, [r4, #0]
 8018bda:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8018bde:	603b      	str	r3, [r7, #0]
 8018be0:	2e00      	cmp	r6, #0
 8018be2:	d0e3      	beq.n	8018bac <rcl_action_wait_set_add_action_client+0x84>
 8018be4:	6823      	ldr	r3, [r4, #0]
 8018be6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8018bea:	6033      	str	r3, [r6, #0]
 8018bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018bee:	bf00      	nop

08018bf0 <rcl_action_client_wait_set_get_entities_ready>:
 8018bf0:	2800      	cmp	r0, #0
 8018bf2:	d050      	beq.n	8018c96 <rcl_action_client_wait_set_get_entities_ready+0xa6>
 8018bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018bf8:	460c      	mov	r4, r1
 8018bfa:	2900      	cmp	r1, #0
 8018bfc:	d03e      	beq.n	8018c7c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8018bfe:	4605      	mov	r5, r0
 8018c00:	6808      	ldr	r0, [r1, #0]
 8018c02:	2800      	cmp	r0, #0
 8018c04:	d03a      	beq.n	8018c7c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8018c06:	4616      	mov	r6, r2
 8018c08:	461f      	mov	r7, r3
 8018c0a:	f7fd fcdd 	bl	80165c8 <rcl_client_is_valid>
 8018c0e:	2800      	cmp	r0, #0
 8018c10:	d038      	beq.n	8018c84 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8018c12:	6820      	ldr	r0, [r4, #0]
 8018c14:	3004      	adds	r0, #4
 8018c16:	f7fd fcd7 	bl	80165c8 <rcl_client_is_valid>
 8018c1a:	2800      	cmp	r0, #0
 8018c1c:	d032      	beq.n	8018c84 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8018c1e:	6820      	ldr	r0, [r4, #0]
 8018c20:	3008      	adds	r0, #8
 8018c22:	f7fd fcd1 	bl	80165c8 <rcl_client_is_valid>
 8018c26:	b368      	cbz	r0, 8018c84 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8018c28:	6820      	ldr	r0, [r4, #0]
 8018c2a:	300c      	adds	r0, #12
 8018c2c:	f7fe fe3e 	bl	80178ac <rcl_subscription_is_valid>
 8018c30:	b340      	cbz	r0, 8018c84 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8018c32:	6820      	ldr	r0, [r4, #0]
 8018c34:	3010      	adds	r0, #16
 8018c36:	f7fe fe39 	bl	80178ac <rcl_subscription_is_valid>
 8018c3a:	b318      	cbz	r0, 8018c84 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8018c3c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
 8018c40:	2a00      	cmp	r2, #0
 8018c42:	bf18      	it	ne
 8018c44:	2b00      	cmpne	r3, #0
 8018c46:	9b08      	ldr	r3, [sp, #32]
 8018c48:	bf0c      	ite	eq
 8018c4a:	2101      	moveq	r1, #1
 8018c4c:	2100      	movne	r1, #0
 8018c4e:	2b00      	cmp	r3, #0
 8018c50:	bf08      	it	eq
 8018c52:	f041 0101 	orreq.w	r1, r1, #1
 8018c56:	2f00      	cmp	r7, #0
 8018c58:	bf08      	it	eq
 8018c5a:	f041 0101 	orreq.w	r1, r1, #1
 8018c5e:	b9b9      	cbnz	r1, 8018c90 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8018c60:	b1b6      	cbz	r6, 8018c90 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8018c62:	6823      	ldr	r3, [r4, #0]
 8018c64:	686c      	ldr	r4, [r5, #4]
 8018c66:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	@ 0x1d0
 8018c6a:	428a      	cmp	r2, r1
 8018c6c:	4610      	mov	r0, r2
 8018c6e:	bf38      	it	cc
 8018c70:	4608      	movcc	r0, r1
 8018c72:	4284      	cmp	r4, r0
 8018c74:	d812      	bhi.n	8018c9c <rcl_action_client_wait_set_get_entities_ready+0xac>
 8018c76:	2001      	movs	r0, #1
 8018c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c7c:	f640 0036 	movw	r0, #2102	@ 0x836
 8018c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c84:	f7fc fe0c 	bl	80158a0 <rcutils_reset_error>
 8018c88:	f640 0036 	movw	r0, #2102	@ 0x836
 8018c8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c90:	200b      	movs	r0, #11
 8018c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c96:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018c9a:	4770      	bx	lr
 8018c9c:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	@ 0x1c4
 8018ca0:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	@ 0x1cc
 8018ca4:	45f0      	cmp	r8, lr
 8018ca6:	4640      	mov	r0, r8
 8018ca8:	69ec      	ldr	r4, [r5, #28]
 8018caa:	bf38      	it	cc
 8018cac:	4670      	movcc	r0, lr
 8018cae:	4560      	cmp	r0, ip
 8018cb0:	bf38      	it	cc
 8018cb2:	4660      	movcc	r0, ip
 8018cb4:	4284      	cmp	r4, r0
 8018cb6:	d9de      	bls.n	8018c76 <rcl_action_client_wait_set_get_entities_ready+0x86>
 8018cb8:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8018cbc:	682d      	ldr	r5, [r5, #0]
 8018cbe:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 8018cc2:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 8018cc6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8018cca:	1a18      	subs	r0, r3, r0
 8018ccc:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8018cd0:	f103 0c0c 	add.w	ip, r3, #12
 8018cd4:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 8018cd8:	fab0 f080 	clz	r0, r0
 8018cdc:	eba5 050c 	sub.w	r5, r5, ip
 8018ce0:	0940      	lsrs	r0, r0, #5
 8018ce2:	fab5 f585 	clz	r5, r5
 8018ce6:	096d      	lsrs	r5, r5, #5
 8018ce8:	7035      	strb	r5, [r6, #0]
 8018cea:	f103 0510 	add.w	r5, r3, #16
 8018cee:	1b64      	subs	r4, r4, r5
 8018cf0:	9d08      	ldr	r5, [sp, #32]
 8018cf2:	fab4 f484 	clz	r4, r4
 8018cf6:	0964      	lsrs	r4, r4, #5
 8018cf8:	703c      	strb	r4, [r7, #0]
 8018cfa:	1d1c      	adds	r4, r3, #4
 8018cfc:	3308      	adds	r3, #8
 8018cfe:	7028      	strb	r0, [r5, #0]
 8018d00:	1b09      	subs	r1, r1, r4
 8018d02:	2000      	movs	r0, #0
 8018d04:	1ad3      	subs	r3, r2, r3
 8018d06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018d08:	fab1 f181 	clz	r1, r1
 8018d0c:	fab3 f383 	clz	r3, r3
 8018d10:	0949      	lsrs	r1, r1, #5
 8018d12:	095b      	lsrs	r3, r3, #5
 8018d14:	7011      	strb	r1, [r2, #0]
 8018d16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018d18:	7013      	strb	r3, [r2, #0]
 8018d1a:	e7b1      	b.n	8018c80 <rcl_action_client_wait_set_get_entities_ready+0x90>

08018d1c <rcl_action_take_goal_request>:
 8018d1c:	2800      	cmp	r0, #0
 8018d1e:	d039      	beq.n	8018d94 <rcl_action_take_goal_request+0x78>
 8018d20:	b570      	push	{r4, r5, r6, lr}
 8018d22:	4604      	mov	r4, r0
 8018d24:	6800      	ldr	r0, [r0, #0]
 8018d26:	b380      	cbz	r0, 8018d8a <rcl_action_take_goal_request+0x6e>
 8018d28:	460e      	mov	r6, r1
 8018d2a:	4615      	mov	r5, r2
 8018d2c:	f7fe fc76 	bl	801761c <rcl_service_is_valid>
 8018d30:	b330      	cbz	r0, 8018d80 <rcl_action_take_goal_request+0x64>
 8018d32:	6820      	ldr	r0, [r4, #0]
 8018d34:	3004      	adds	r0, #4
 8018d36:	f7fe fc71 	bl	801761c <rcl_service_is_valid>
 8018d3a:	b308      	cbz	r0, 8018d80 <rcl_action_take_goal_request+0x64>
 8018d3c:	6820      	ldr	r0, [r4, #0]
 8018d3e:	3008      	adds	r0, #8
 8018d40:	f7fe fc6c 	bl	801761c <rcl_service_is_valid>
 8018d44:	b1e0      	cbz	r0, 8018d80 <rcl_action_take_goal_request+0x64>
 8018d46:	6820      	ldr	r0, [r4, #0]
 8018d48:	300c      	adds	r0, #12
 8018d4a:	f7fe fa2d 	bl	80171a8 <rcl_publisher_is_valid>
 8018d4e:	b1b8      	cbz	r0, 8018d80 <rcl_action_take_goal_request+0x64>
 8018d50:	6820      	ldr	r0, [r4, #0]
 8018d52:	3010      	adds	r0, #16
 8018d54:	f7fe fa28 	bl	80171a8 <rcl_publisher_is_valid>
 8018d58:	b190      	cbz	r0, 8018d80 <rcl_action_take_goal_request+0x64>
 8018d5a:	b1cd      	cbz	r5, 8018d90 <rcl_action_take_goal_request+0x74>
 8018d5c:	b1c6      	cbz	r6, 8018d90 <rcl_action_take_goal_request+0x74>
 8018d5e:	462a      	mov	r2, r5
 8018d60:	4631      	mov	r1, r6
 8018d62:	6820      	ldr	r0, [r4, #0]
 8018d64:	f7fe fc02 	bl	801756c <rcl_take_request>
 8018d68:	b148      	cbz	r0, 8018d7e <rcl_action_take_goal_request+0x62>
 8018d6a:	280a      	cmp	r0, #10
 8018d6c:	d007      	beq.n	8018d7e <rcl_action_take_goal_request+0x62>
 8018d6e:	f240 2259 	movw	r2, #601	@ 0x259
 8018d72:	f640 0399 	movw	r3, #2201	@ 0x899
 8018d76:	4290      	cmp	r0, r2
 8018d78:	bf0c      	ite	eq
 8018d7a:	4618      	moveq	r0, r3
 8018d7c:	2001      	movne	r0, #1
 8018d7e:	bd70      	pop	{r4, r5, r6, pc}
 8018d80:	f7fc fd8e 	bl	80158a0 <rcutils_reset_error>
 8018d84:	f640 0098 	movw	r0, #2200	@ 0x898
 8018d88:	bd70      	pop	{r4, r5, r6, pc}
 8018d8a:	f640 0098 	movw	r0, #2200	@ 0x898
 8018d8e:	bd70      	pop	{r4, r5, r6, pc}
 8018d90:	200b      	movs	r0, #11
 8018d92:	bd70      	pop	{r4, r5, r6, pc}
 8018d94:	f640 0098 	movw	r0, #2200	@ 0x898
 8018d98:	4770      	bx	lr
 8018d9a:	bf00      	nop

08018d9c <rcl_action_send_goal_response>:
 8018d9c:	b390      	cbz	r0, 8018e04 <rcl_action_send_goal_response+0x68>
 8018d9e:	b570      	push	{r4, r5, r6, lr}
 8018da0:	4604      	mov	r4, r0
 8018da2:	6800      	ldr	r0, [r0, #0]
 8018da4:	b348      	cbz	r0, 8018dfa <rcl_action_send_goal_response+0x5e>
 8018da6:	460e      	mov	r6, r1
 8018da8:	4615      	mov	r5, r2
 8018daa:	f7fe fc37 	bl	801761c <rcl_service_is_valid>
 8018dae:	b1f8      	cbz	r0, 8018df0 <rcl_action_send_goal_response+0x54>
 8018db0:	6820      	ldr	r0, [r4, #0]
 8018db2:	3004      	adds	r0, #4
 8018db4:	f7fe fc32 	bl	801761c <rcl_service_is_valid>
 8018db8:	b1d0      	cbz	r0, 8018df0 <rcl_action_send_goal_response+0x54>
 8018dba:	6820      	ldr	r0, [r4, #0]
 8018dbc:	3008      	adds	r0, #8
 8018dbe:	f7fe fc2d 	bl	801761c <rcl_service_is_valid>
 8018dc2:	b1a8      	cbz	r0, 8018df0 <rcl_action_send_goal_response+0x54>
 8018dc4:	6820      	ldr	r0, [r4, #0]
 8018dc6:	300c      	adds	r0, #12
 8018dc8:	f7fe f9ee 	bl	80171a8 <rcl_publisher_is_valid>
 8018dcc:	b180      	cbz	r0, 8018df0 <rcl_action_send_goal_response+0x54>
 8018dce:	6820      	ldr	r0, [r4, #0]
 8018dd0:	3010      	adds	r0, #16
 8018dd2:	f7fe f9e9 	bl	80171a8 <rcl_publisher_is_valid>
 8018dd6:	b158      	cbz	r0, 8018df0 <rcl_action_send_goal_response+0x54>
 8018dd8:	b195      	cbz	r5, 8018e00 <rcl_action_send_goal_response+0x64>
 8018dda:	b18e      	cbz	r6, 8018e00 <rcl_action_send_goal_response+0x64>
 8018ddc:	462a      	mov	r2, r5
 8018dde:	4631      	mov	r1, r6
 8018de0:	6820      	ldr	r0, [r4, #0]
 8018de2:	f7fe fc03 	bl	80175ec <rcl_send_response>
 8018de6:	b110      	cbz	r0, 8018dee <rcl_action_send_goal_response+0x52>
 8018de8:	2802      	cmp	r0, #2
 8018dea:	bf18      	it	ne
 8018dec:	2001      	movne	r0, #1
 8018dee:	bd70      	pop	{r4, r5, r6, pc}
 8018df0:	f7fc fd56 	bl	80158a0 <rcutils_reset_error>
 8018df4:	f640 0098 	movw	r0, #2200	@ 0x898
 8018df8:	bd70      	pop	{r4, r5, r6, pc}
 8018dfa:	f640 0098 	movw	r0, #2200	@ 0x898
 8018dfe:	bd70      	pop	{r4, r5, r6, pc}
 8018e00:	200b      	movs	r0, #11
 8018e02:	bd70      	pop	{r4, r5, r6, pc}
 8018e04:	f640 0098 	movw	r0, #2200	@ 0x898
 8018e08:	4770      	bx	lr
 8018e0a:	bf00      	nop

08018e0c <rcl_action_take_result_request>:
 8018e0c:	2800      	cmp	r0, #0
 8018e0e:	d03a      	beq.n	8018e86 <rcl_action_take_result_request+0x7a>
 8018e10:	b570      	push	{r4, r5, r6, lr}
 8018e12:	4604      	mov	r4, r0
 8018e14:	6800      	ldr	r0, [r0, #0]
 8018e16:	b388      	cbz	r0, 8018e7c <rcl_action_take_result_request+0x70>
 8018e18:	460e      	mov	r6, r1
 8018e1a:	4615      	mov	r5, r2
 8018e1c:	f7fe fbfe 	bl	801761c <rcl_service_is_valid>
 8018e20:	b338      	cbz	r0, 8018e72 <rcl_action_take_result_request+0x66>
 8018e22:	6820      	ldr	r0, [r4, #0]
 8018e24:	3004      	adds	r0, #4
 8018e26:	f7fe fbf9 	bl	801761c <rcl_service_is_valid>
 8018e2a:	b310      	cbz	r0, 8018e72 <rcl_action_take_result_request+0x66>
 8018e2c:	6820      	ldr	r0, [r4, #0]
 8018e2e:	3008      	adds	r0, #8
 8018e30:	f7fe fbf4 	bl	801761c <rcl_service_is_valid>
 8018e34:	b1e8      	cbz	r0, 8018e72 <rcl_action_take_result_request+0x66>
 8018e36:	6820      	ldr	r0, [r4, #0]
 8018e38:	300c      	adds	r0, #12
 8018e3a:	f7fe f9b5 	bl	80171a8 <rcl_publisher_is_valid>
 8018e3e:	b1c0      	cbz	r0, 8018e72 <rcl_action_take_result_request+0x66>
 8018e40:	6820      	ldr	r0, [r4, #0]
 8018e42:	3010      	adds	r0, #16
 8018e44:	f7fe f9b0 	bl	80171a8 <rcl_publisher_is_valid>
 8018e48:	b198      	cbz	r0, 8018e72 <rcl_action_take_result_request+0x66>
 8018e4a:	b1d5      	cbz	r5, 8018e82 <rcl_action_take_result_request+0x76>
 8018e4c:	b1ce      	cbz	r6, 8018e82 <rcl_action_take_result_request+0x76>
 8018e4e:	6820      	ldr	r0, [r4, #0]
 8018e50:	462a      	mov	r2, r5
 8018e52:	4631      	mov	r1, r6
 8018e54:	3008      	adds	r0, #8
 8018e56:	f7fe fb89 	bl	801756c <rcl_take_request>
 8018e5a:	b148      	cbz	r0, 8018e70 <rcl_action_take_result_request+0x64>
 8018e5c:	280a      	cmp	r0, #10
 8018e5e:	d007      	beq.n	8018e70 <rcl_action_take_result_request+0x64>
 8018e60:	f240 2259 	movw	r2, #601	@ 0x259
 8018e64:	f640 0399 	movw	r3, #2201	@ 0x899
 8018e68:	4290      	cmp	r0, r2
 8018e6a:	bf0c      	ite	eq
 8018e6c:	4618      	moveq	r0, r3
 8018e6e:	2001      	movne	r0, #1
 8018e70:	bd70      	pop	{r4, r5, r6, pc}
 8018e72:	f7fc fd15 	bl	80158a0 <rcutils_reset_error>
 8018e76:	f640 0098 	movw	r0, #2200	@ 0x898
 8018e7a:	bd70      	pop	{r4, r5, r6, pc}
 8018e7c:	f640 0098 	movw	r0, #2200	@ 0x898
 8018e80:	bd70      	pop	{r4, r5, r6, pc}
 8018e82:	200b      	movs	r0, #11
 8018e84:	bd70      	pop	{r4, r5, r6, pc}
 8018e86:	f640 0098 	movw	r0, #2200	@ 0x898
 8018e8a:	4770      	bx	lr

08018e8c <rcl_action_take_cancel_request>:
 8018e8c:	2800      	cmp	r0, #0
 8018e8e:	d03a      	beq.n	8018f06 <rcl_action_take_cancel_request+0x7a>
 8018e90:	b570      	push	{r4, r5, r6, lr}
 8018e92:	4604      	mov	r4, r0
 8018e94:	6800      	ldr	r0, [r0, #0]
 8018e96:	b388      	cbz	r0, 8018efc <rcl_action_take_cancel_request+0x70>
 8018e98:	460e      	mov	r6, r1
 8018e9a:	4615      	mov	r5, r2
 8018e9c:	f7fe fbbe 	bl	801761c <rcl_service_is_valid>
 8018ea0:	b338      	cbz	r0, 8018ef2 <rcl_action_take_cancel_request+0x66>
 8018ea2:	6820      	ldr	r0, [r4, #0]
 8018ea4:	3004      	adds	r0, #4
 8018ea6:	f7fe fbb9 	bl	801761c <rcl_service_is_valid>
 8018eaa:	b310      	cbz	r0, 8018ef2 <rcl_action_take_cancel_request+0x66>
 8018eac:	6820      	ldr	r0, [r4, #0]
 8018eae:	3008      	adds	r0, #8
 8018eb0:	f7fe fbb4 	bl	801761c <rcl_service_is_valid>
 8018eb4:	b1e8      	cbz	r0, 8018ef2 <rcl_action_take_cancel_request+0x66>
 8018eb6:	6820      	ldr	r0, [r4, #0]
 8018eb8:	300c      	adds	r0, #12
 8018eba:	f7fe f975 	bl	80171a8 <rcl_publisher_is_valid>
 8018ebe:	b1c0      	cbz	r0, 8018ef2 <rcl_action_take_cancel_request+0x66>
 8018ec0:	6820      	ldr	r0, [r4, #0]
 8018ec2:	3010      	adds	r0, #16
 8018ec4:	f7fe f970 	bl	80171a8 <rcl_publisher_is_valid>
 8018ec8:	b198      	cbz	r0, 8018ef2 <rcl_action_take_cancel_request+0x66>
 8018eca:	b1d5      	cbz	r5, 8018f02 <rcl_action_take_cancel_request+0x76>
 8018ecc:	b1ce      	cbz	r6, 8018f02 <rcl_action_take_cancel_request+0x76>
 8018ece:	6820      	ldr	r0, [r4, #0]
 8018ed0:	462a      	mov	r2, r5
 8018ed2:	4631      	mov	r1, r6
 8018ed4:	3004      	adds	r0, #4
 8018ed6:	f7fe fb49 	bl	801756c <rcl_take_request>
 8018eda:	b148      	cbz	r0, 8018ef0 <rcl_action_take_cancel_request+0x64>
 8018edc:	280a      	cmp	r0, #10
 8018ede:	d007      	beq.n	8018ef0 <rcl_action_take_cancel_request+0x64>
 8018ee0:	f240 2259 	movw	r2, #601	@ 0x259
 8018ee4:	f640 0399 	movw	r3, #2201	@ 0x899
 8018ee8:	4290      	cmp	r0, r2
 8018eea:	bf0c      	ite	eq
 8018eec:	4618      	moveq	r0, r3
 8018eee:	2001      	movne	r0, #1
 8018ef0:	bd70      	pop	{r4, r5, r6, pc}
 8018ef2:	f7fc fcd5 	bl	80158a0 <rcutils_reset_error>
 8018ef6:	f640 0098 	movw	r0, #2200	@ 0x898
 8018efa:	bd70      	pop	{r4, r5, r6, pc}
 8018efc:	f640 0098 	movw	r0, #2200	@ 0x898
 8018f00:	bd70      	pop	{r4, r5, r6, pc}
 8018f02:	200b      	movs	r0, #11
 8018f04:	bd70      	pop	{r4, r5, r6, pc}
 8018f06:	f640 0098 	movw	r0, #2200	@ 0x898
 8018f0a:	4770      	bx	lr

08018f0c <rcl_action_send_cancel_response>:
 8018f0c:	b398      	cbz	r0, 8018f76 <rcl_action_send_cancel_response+0x6a>
 8018f0e:	b570      	push	{r4, r5, r6, lr}
 8018f10:	4604      	mov	r4, r0
 8018f12:	6800      	ldr	r0, [r0, #0]
 8018f14:	b350      	cbz	r0, 8018f6c <rcl_action_send_cancel_response+0x60>
 8018f16:	460e      	mov	r6, r1
 8018f18:	4615      	mov	r5, r2
 8018f1a:	f7fe fb7f 	bl	801761c <rcl_service_is_valid>
 8018f1e:	b300      	cbz	r0, 8018f62 <rcl_action_send_cancel_response+0x56>
 8018f20:	6820      	ldr	r0, [r4, #0]
 8018f22:	3004      	adds	r0, #4
 8018f24:	f7fe fb7a 	bl	801761c <rcl_service_is_valid>
 8018f28:	b1d8      	cbz	r0, 8018f62 <rcl_action_send_cancel_response+0x56>
 8018f2a:	6820      	ldr	r0, [r4, #0]
 8018f2c:	3008      	adds	r0, #8
 8018f2e:	f7fe fb75 	bl	801761c <rcl_service_is_valid>
 8018f32:	b1b0      	cbz	r0, 8018f62 <rcl_action_send_cancel_response+0x56>
 8018f34:	6820      	ldr	r0, [r4, #0]
 8018f36:	300c      	adds	r0, #12
 8018f38:	f7fe f936 	bl	80171a8 <rcl_publisher_is_valid>
 8018f3c:	b188      	cbz	r0, 8018f62 <rcl_action_send_cancel_response+0x56>
 8018f3e:	6820      	ldr	r0, [r4, #0]
 8018f40:	3010      	adds	r0, #16
 8018f42:	f7fe f931 	bl	80171a8 <rcl_publisher_is_valid>
 8018f46:	b160      	cbz	r0, 8018f62 <rcl_action_send_cancel_response+0x56>
 8018f48:	b19d      	cbz	r5, 8018f72 <rcl_action_send_cancel_response+0x66>
 8018f4a:	b196      	cbz	r6, 8018f72 <rcl_action_send_cancel_response+0x66>
 8018f4c:	6820      	ldr	r0, [r4, #0]
 8018f4e:	462a      	mov	r2, r5
 8018f50:	4631      	mov	r1, r6
 8018f52:	3004      	adds	r0, #4
 8018f54:	f7fe fb4a 	bl	80175ec <rcl_send_response>
 8018f58:	b110      	cbz	r0, 8018f60 <rcl_action_send_cancel_response+0x54>
 8018f5a:	2802      	cmp	r0, #2
 8018f5c:	bf18      	it	ne
 8018f5e:	2001      	movne	r0, #1
 8018f60:	bd70      	pop	{r4, r5, r6, pc}
 8018f62:	f7fc fc9d 	bl	80158a0 <rcutils_reset_error>
 8018f66:	f640 0098 	movw	r0, #2200	@ 0x898
 8018f6a:	bd70      	pop	{r4, r5, r6, pc}
 8018f6c:	f640 0098 	movw	r0, #2200	@ 0x898
 8018f70:	bd70      	pop	{r4, r5, r6, pc}
 8018f72:	200b      	movs	r0, #11
 8018f74:	bd70      	pop	{r4, r5, r6, pc}
 8018f76:	f640 0098 	movw	r0, #2200	@ 0x898
 8018f7a:	4770      	bx	lr

08018f7c <rcl_action_wait_set_add_action_server>:
 8018f7c:	2800      	cmp	r0, #0
 8018f7e:	d04d      	beq.n	801901c <rcl_action_wait_set_add_action_server+0xa0>
 8018f80:	b570      	push	{r4, r5, r6, lr}
 8018f82:	460c      	mov	r4, r1
 8018f84:	b159      	cbz	r1, 8018f9e <rcl_action_wait_set_add_action_server+0x22>
 8018f86:	4605      	mov	r5, r0
 8018f88:	6808      	ldr	r0, [r1, #0]
 8018f8a:	b140      	cbz	r0, 8018f9e <rcl_action_wait_set_add_action_server+0x22>
 8018f8c:	4616      	mov	r6, r2
 8018f8e:	f7fe fb45 	bl	801761c <rcl_service_is_valid>
 8018f92:	b120      	cbz	r0, 8018f9e <rcl_action_wait_set_add_action_server+0x22>
 8018f94:	6820      	ldr	r0, [r4, #0]
 8018f96:	3004      	adds	r0, #4
 8018f98:	f7fe fb40 	bl	801761c <rcl_service_is_valid>
 8018f9c:	b910      	cbnz	r0, 8018fa4 <rcl_action_wait_set_add_action_server+0x28>
 8018f9e:	f640 0098 	movw	r0, #2200	@ 0x898
 8018fa2:	bd70      	pop	{r4, r5, r6, pc}
 8018fa4:	6820      	ldr	r0, [r4, #0]
 8018fa6:	3008      	adds	r0, #8
 8018fa8:	f7fe fb38 	bl	801761c <rcl_service_is_valid>
 8018fac:	2800      	cmp	r0, #0
 8018fae:	d0f6      	beq.n	8018f9e <rcl_action_wait_set_add_action_server+0x22>
 8018fb0:	6820      	ldr	r0, [r4, #0]
 8018fb2:	300c      	adds	r0, #12
 8018fb4:	f7fe f910 	bl	80171d8 <rcl_publisher_is_valid_except_context>
 8018fb8:	2800      	cmp	r0, #0
 8018fba:	d0f0      	beq.n	8018f9e <rcl_action_wait_set_add_action_server+0x22>
 8018fbc:	6820      	ldr	r0, [r4, #0]
 8018fbe:	3010      	adds	r0, #16
 8018fc0:	f7fe f90a 	bl	80171d8 <rcl_publisher_is_valid_except_context>
 8018fc4:	2800      	cmp	r0, #0
 8018fc6:	d0ea      	beq.n	8018f9e <rcl_action_wait_set_add_action_server+0x22>
 8018fc8:	6821      	ldr	r1, [r4, #0]
 8018fca:	4628      	mov	r0, r5
 8018fcc:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8018fd0:	f7ff fad0 	bl	8018574 <rcl_wait_set_add_service>
 8018fd4:	2800      	cmp	r0, #0
 8018fd6:	d1e4      	bne.n	8018fa2 <rcl_action_wait_set_add_action_server+0x26>
 8018fd8:	6821      	ldr	r1, [r4, #0]
 8018fda:	4628      	mov	r0, r5
 8018fdc:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8018fe0:	3104      	adds	r1, #4
 8018fe2:	f7ff fac7 	bl	8018574 <rcl_wait_set_add_service>
 8018fe6:	2800      	cmp	r0, #0
 8018fe8:	d1db      	bne.n	8018fa2 <rcl_action_wait_set_add_action_server+0x26>
 8018fea:	6821      	ldr	r1, [r4, #0]
 8018fec:	4628      	mov	r0, r5
 8018fee:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8018ff2:	3108      	adds	r1, #8
 8018ff4:	f7ff fabe 	bl	8018574 <rcl_wait_set_add_service>
 8018ff8:	2800      	cmp	r0, #0
 8018ffa:	d1d2      	bne.n	8018fa2 <rcl_action_wait_set_add_action_server+0x26>
 8018ffc:	6821      	ldr	r1, [r4, #0]
 8018ffe:	4628      	mov	r0, r5
 8019000:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8019004:	3114      	adds	r1, #20
 8019006:	f7ff fa59 	bl	80184bc <rcl_wait_set_add_timer>
 801900a:	2800      	cmp	r0, #0
 801900c:	d1c9      	bne.n	8018fa2 <rcl_action_wait_set_add_action_server+0x26>
 801900e:	2e00      	cmp	r6, #0
 8019010:	d0c7      	beq.n	8018fa2 <rcl_action_wait_set_add_action_server+0x26>
 8019012:	6823      	ldr	r3, [r4, #0]
 8019014:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8019018:	6033      	str	r3, [r6, #0]
 801901a:	bd70      	pop	{r4, r5, r6, pc}
 801901c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019020:	4770      	bx	lr
 8019022:	bf00      	nop

08019024 <rcl_action_server_wait_set_get_entities_ready>:
 8019024:	2800      	cmp	r0, #0
 8019026:	d067      	beq.n	80190f8 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 8019028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801902c:	460c      	mov	r4, r1
 801902e:	b161      	cbz	r1, 801904a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8019030:	4605      	mov	r5, r0
 8019032:	6808      	ldr	r0, [r1, #0]
 8019034:	b148      	cbz	r0, 801904a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8019036:	4616      	mov	r6, r2
 8019038:	4698      	mov	r8, r3
 801903a:	f7fe faef 	bl	801761c <rcl_service_is_valid>
 801903e:	b120      	cbz	r0, 801904a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8019040:	6820      	ldr	r0, [r4, #0]
 8019042:	3004      	adds	r0, #4
 8019044:	f7fe faea 	bl	801761c <rcl_service_is_valid>
 8019048:	b918      	cbnz	r0, 8019052 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801904a:	f640 0098 	movw	r0, #2200	@ 0x898
 801904e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019052:	6820      	ldr	r0, [r4, #0]
 8019054:	3008      	adds	r0, #8
 8019056:	f7fe fae1 	bl	801761c <rcl_service_is_valid>
 801905a:	2800      	cmp	r0, #0
 801905c:	d0f5      	beq.n	801904a <rcl_action_server_wait_set_get_entities_ready+0x26>
 801905e:	6820      	ldr	r0, [r4, #0]
 8019060:	300c      	adds	r0, #12
 8019062:	f7fe f8b9 	bl	80171d8 <rcl_publisher_is_valid_except_context>
 8019066:	2800      	cmp	r0, #0
 8019068:	d0ef      	beq.n	801904a <rcl_action_server_wait_set_get_entities_ready+0x26>
 801906a:	6820      	ldr	r0, [r4, #0]
 801906c:	3010      	adds	r0, #16
 801906e:	f7fe f8b3 	bl	80171d8 <rcl_publisher_is_valid_except_context>
 8019072:	2800      	cmp	r0, #0
 8019074:	d0e9      	beq.n	801904a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8019076:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801907a:	2a00      	cmp	r2, #0
 801907c:	bf18      	it	ne
 801907e:	2b00      	cmpne	r3, #0
 8019080:	bf0c      	ite	eq
 8019082:	2101      	moveq	r1, #1
 8019084:	2100      	movne	r1, #0
 8019086:	f1b8 0f00 	cmp.w	r8, #0
 801908a:	bf08      	it	eq
 801908c:	f041 0101 	orreq.w	r1, r1, #1
 8019090:	bba9      	cbnz	r1, 80190fe <rcl_action_server_wait_set_get_entities_ready+0xda>
 8019092:	b3a6      	cbz	r6, 80190fe <rcl_action_server_wait_set_get_entities_ready+0xda>
 8019094:	6821      	ldr	r1, [r4, #0]
 8019096:	2000      	movs	r0, #0
 8019098:	692c      	ldr	r4, [r5, #16]
 801909a:	f8d1 21e8 	ldr.w	r2, [r1, #488]	@ 0x1e8
 801909e:	6a2f      	ldr	r7, [r5, #32]
 80190a0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80190a4:	f8d1 41dc 	ldr.w	r4, [r1, #476]	@ 0x1dc
 80190a8:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80190ac:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 80190b0:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 80190b4:	1a64      	subs	r4, r4, r1
 80190b6:	f8d1 31e4 	ldr.w	r3, [r1, #484]	@ 0x1e4
 80190ba:	fab4 f484 	clz	r4, r4
 80190be:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80190c2:	0964      	lsrs	r4, r4, #5
 80190c4:	7034      	strb	r4, [r6, #0]
 80190c6:	1d0c      	adds	r4, r1, #4
 80190c8:	1b2c      	subs	r4, r5, r4
 80190ca:	fab4 f484 	clz	r4, r4
 80190ce:	0964      	lsrs	r4, r4, #5
 80190d0:	f888 4000 	strb.w	r4, [r8]
 80190d4:	f101 0408 	add.w	r4, r1, #8
 80190d8:	1b1b      	subs	r3, r3, r4
 80190da:	9c06      	ldr	r4, [sp, #24]
 80190dc:	fab3 f383 	clz	r3, r3
 80190e0:	095b      	lsrs	r3, r3, #5
 80190e2:	7023      	strb	r3, [r4, #0]
 80190e4:	f101 0314 	add.w	r3, r1, #20
 80190e8:	1ad3      	subs	r3, r2, r3
 80190ea:	9a07      	ldr	r2, [sp, #28]
 80190ec:	fab3 f383 	clz	r3, r3
 80190f0:	095b      	lsrs	r3, r3, #5
 80190f2:	7013      	strb	r3, [r2, #0]
 80190f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190f8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80190fc:	4770      	bx	lr
 80190fe:	200b      	movs	r0, #11
 8019100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019104 <_execute_event_handler>:
 8019104:	2002      	movs	r0, #2
 8019106:	4770      	bx	lr

08019108 <_cancel_goal_event_handler>:
 8019108:	2003      	movs	r0, #3
 801910a:	4770      	bx	lr

0801910c <_succeed_event_handler>:
 801910c:	2004      	movs	r0, #4
 801910e:	4770      	bx	lr

08019110 <_abort_event_handler>:
 8019110:	2006      	movs	r0, #6
 8019112:	4770      	bx	lr

08019114 <_canceled_event_handler>:
 8019114:	2005      	movs	r0, #5
 8019116:	4770      	bx	lr

08019118 <rcl_action_transition_goal_state>:
 8019118:	b2c2      	uxtb	r2, r0
 801911a:	2a06      	cmp	r2, #6
 801911c:	d810      	bhi.n	8019140 <rcl_action_transition_goal_state+0x28>
 801911e:	2904      	cmp	r1, #4
 8019120:	d80e      	bhi.n	8019140 <rcl_action_transition_goal_state+0x28>
 8019122:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8019126:	b410      	push	{r4}
 8019128:	1853      	adds	r3, r2, r1
 801912a:	4c06      	ldr	r4, [pc, #24]	@ (8019144 <rcl_action_transition_goal_state+0x2c>)
 801912c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8019130:	b113      	cbz	r3, 8019138 <rcl_action_transition_goal_state+0x20>
 8019132:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019136:	4718      	bx	r3
 8019138:	2000      	movs	r0, #0
 801913a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801913e:	4770      	bx	lr
 8019140:	2000      	movs	r0, #0
 8019142:	4770      	bx	lr
 8019144:	080248bc 	.word	0x080248bc

08019148 <rcl_action_get_zero_initialized_cancel_response>:
 8019148:	b510      	push	{r4, lr}
 801914a:	4c07      	ldr	r4, [pc, #28]	@ (8019168 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801914c:	4686      	mov	lr, r0
 801914e:	4684      	mov	ip, r0
 8019150:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019152:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019156:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019158:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801915c:	6823      	ldr	r3, [r4, #0]
 801915e:	4670      	mov	r0, lr
 8019160:	f8cc 3000 	str.w	r3, [ip]
 8019164:	bd10      	pop	{r4, pc}
 8019166:	bf00      	nop
 8019168:	08024948 	.word	0x08024948

0801916c <rclc_action_send_result_request>:
 801916c:	b1d0      	cbz	r0, 80191a4 <rclc_action_send_result_request+0x38>
 801916e:	4684      	mov	ip, r0
 8019170:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8019174:	b500      	push	{lr}
 8019176:	b087      	sub	sp, #28
 8019178:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801917c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8019180:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8019184:	f10d 0e08 	add.w	lr, sp, #8
 8019188:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801918c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8019190:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8019194:	a902      	add	r1, sp, #8
 8019196:	3010      	adds	r0, #16
 8019198:	f7ff fbca 	bl	8018930 <rcl_action_send_result_request>
 801919c:	b920      	cbnz	r0, 80191a8 <rclc_action_send_result_request+0x3c>
 801919e:	b007      	add	sp, #28
 80191a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80191a4:	200b      	movs	r0, #11
 80191a6:	4770      	bx	lr
 80191a8:	9001      	str	r0, [sp, #4]
 80191aa:	f7fc fb79 	bl	80158a0 <rcutils_reset_error>
 80191ae:	9801      	ldr	r0, [sp, #4]
 80191b0:	b007      	add	sp, #28
 80191b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80191b6:	bf00      	nop

080191b8 <rclc_action_take_goal_handle>:
 80191b8:	b160      	cbz	r0, 80191d4 <rclc_action_take_goal_handle+0x1c>
 80191ba:	6883      	ldr	r3, [r0, #8]
 80191bc:	b143      	cbz	r3, 80191d0 <rclc_action_take_goal_handle+0x18>
 80191be:	6819      	ldr	r1, [r3, #0]
 80191c0:	2200      	movs	r2, #0
 80191c2:	6081      	str	r1, [r0, #8]
 80191c4:	721a      	strb	r2, [r3, #8]
 80191c6:	68c1      	ldr	r1, [r0, #12]
 80191c8:	621a      	str	r2, [r3, #32]
 80191ca:	849a      	strh	r2, [r3, #36]	@ 0x24
 80191cc:	6019      	str	r1, [r3, #0]
 80191ce:	60c3      	str	r3, [r0, #12]
 80191d0:	4618      	mov	r0, r3
 80191d2:	4770      	bx	lr
 80191d4:	4603      	mov	r3, r0
 80191d6:	e7fb      	b.n	80191d0 <rclc_action_take_goal_handle+0x18>

080191d8 <rclc_action_remove_used_goal_handle>:
 80191d8:	b180      	cbz	r0, 80191fc <rclc_action_remove_used_goal_handle+0x24>
 80191da:	b179      	cbz	r1, 80191fc <rclc_action_remove_used_goal_handle+0x24>
 80191dc:	68c3      	ldr	r3, [r0, #12]
 80191de:	4299      	cmp	r1, r3
 80191e0:	d00d      	beq.n	80191fe <rclc_action_remove_used_goal_handle+0x26>
 80191e2:	b12b      	cbz	r3, 80191f0 <rclc_action_remove_used_goal_handle+0x18>
 80191e4:	681a      	ldr	r2, [r3, #0]
 80191e6:	4291      	cmp	r1, r2
 80191e8:	d003      	beq.n	80191f2 <rclc_action_remove_used_goal_handle+0x1a>
 80191ea:	4613      	mov	r3, r2
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d1f9      	bne.n	80191e4 <rclc_action_remove_used_goal_handle+0xc>
 80191f0:	4770      	bx	lr
 80191f2:	680a      	ldr	r2, [r1, #0]
 80191f4:	601a      	str	r2, [r3, #0]
 80191f6:	6883      	ldr	r3, [r0, #8]
 80191f8:	600b      	str	r3, [r1, #0]
 80191fa:	6081      	str	r1, [r0, #8]
 80191fc:	4770      	bx	lr
 80191fe:	680b      	ldr	r3, [r1, #0]
 8019200:	60c3      	str	r3, [r0, #12]
 8019202:	e7f8      	b.n	80191f6 <rclc_action_remove_used_goal_handle+0x1e>

08019204 <rclc_action_find_goal_handle_by_uuid>:
 8019204:	b538      	push	{r3, r4, r5, lr}
 8019206:	b181      	cbz	r1, 801922a <rclc_action_find_goal_handle_by_uuid+0x26>
 8019208:	b178      	cbz	r0, 801922a <rclc_action_find_goal_handle_by_uuid+0x26>
 801920a:	68c4      	ldr	r4, [r0, #12]
 801920c:	460d      	mov	r5, r1
 801920e:	b914      	cbnz	r4, 8019216 <rclc_action_find_goal_handle_by_uuid+0x12>
 8019210:	e009      	b.n	8019226 <rclc_action_find_goal_handle_by_uuid+0x22>
 8019212:	6824      	ldr	r4, [r4, #0]
 8019214:	b13c      	cbz	r4, 8019226 <rclc_action_find_goal_handle_by_uuid+0x22>
 8019216:	f104 0009 	add.w	r0, r4, #9
 801921a:	2210      	movs	r2, #16
 801921c:	4629      	mov	r1, r5
 801921e:	f008 fc33 	bl	8021a88 <memcmp>
 8019222:	2800      	cmp	r0, #0
 8019224:	d1f5      	bne.n	8019212 <rclc_action_find_goal_handle_by_uuid+0xe>
 8019226:	4620      	mov	r0, r4
 8019228:	bd38      	pop	{r3, r4, r5, pc}
 801922a:	2400      	movs	r4, #0
 801922c:	4620      	mov	r0, r4
 801922e:	bd38      	pop	{r3, r4, r5, pc}

08019230 <rclc_action_find_first_handle_by_status>:
 8019230:	b140      	cbz	r0, 8019244 <rclc_action_find_first_handle_by_status+0x14>
 8019232:	68c0      	ldr	r0, [r0, #12]
 8019234:	b910      	cbnz	r0, 801923c <rclc_action_find_first_handle_by_status+0xc>
 8019236:	e005      	b.n	8019244 <rclc_action_find_first_handle_by_status+0x14>
 8019238:	6800      	ldr	r0, [r0, #0]
 801923a:	b118      	cbz	r0, 8019244 <rclc_action_find_first_handle_by_status+0x14>
 801923c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8019240:	428b      	cmp	r3, r1
 8019242:	d1f9      	bne.n	8019238 <rclc_action_find_first_handle_by_status+0x8>
 8019244:	4770      	bx	lr
 8019246:	bf00      	nop

08019248 <rclc_action_find_first_terminated_handle>:
 8019248:	b140      	cbz	r0, 801925c <rclc_action_find_first_terminated_handle+0x14>
 801924a:	68c0      	ldr	r0, [r0, #12]
 801924c:	b910      	cbnz	r0, 8019254 <rclc_action_find_first_terminated_handle+0xc>
 801924e:	e005      	b.n	801925c <rclc_action_find_first_terminated_handle+0x14>
 8019250:	6800      	ldr	r0, [r0, #0]
 8019252:	b118      	cbz	r0, 801925c <rclc_action_find_first_terminated_handle+0x14>
 8019254:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8019258:	2b03      	cmp	r3, #3
 801925a:	ddf9      	ble.n	8019250 <rclc_action_find_first_terminated_handle+0x8>
 801925c:	4770      	bx	lr
 801925e:	bf00      	nop

08019260 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8019260:	b170      	cbz	r0, 8019280 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8019262:	68c0      	ldr	r0, [r0, #12]
 8019264:	b160      	cbz	r0, 8019280 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8019266:	b410      	push	{r4}
 8019268:	e001      	b.n	801926e <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801926a:	6800      	ldr	r0, [r0, #0]
 801926c:	b128      	cbz	r0, 801927a <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801926e:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8019272:	4299      	cmp	r1, r3
 8019274:	bf08      	it	eq
 8019276:	4294      	cmpeq	r4, r2
 8019278:	d1f7      	bne.n	801926a <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801927a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801927e:	4770      	bx	lr
 8019280:	4770      	bx	lr
 8019282:	bf00      	nop

08019284 <rclc_action_find_handle_by_result_request_sequence_number>:
 8019284:	b170      	cbz	r0, 80192a4 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8019286:	68c0      	ldr	r0, [r0, #12]
 8019288:	b160      	cbz	r0, 80192a4 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801928a:	b410      	push	{r4}
 801928c:	e001      	b.n	8019292 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801928e:	6800      	ldr	r0, [r0, #0]
 8019290:	b128      	cbz	r0, 801929e <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8019292:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8019296:	4299      	cmp	r1, r3
 8019298:	bf08      	it	eq
 801929a:	4294      	cmpeq	r4, r2
 801929c:	d1f7      	bne.n	801928e <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801929e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80192a2:	4770      	bx	lr
 80192a4:	4770      	bx	lr
 80192a6:	bf00      	nop

080192a8 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80192a8:	b170      	cbz	r0, 80192c8 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80192aa:	68c0      	ldr	r0, [r0, #12]
 80192ac:	b160      	cbz	r0, 80192c8 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80192ae:	b410      	push	{r4}
 80192b0:	e001      	b.n	80192b6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 80192b2:	6800      	ldr	r0, [r0, #0]
 80192b4:	b128      	cbz	r0, 80192c2 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80192b6:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 80192ba:	4299      	cmp	r1, r3
 80192bc:	bf08      	it	eq
 80192be:	4294      	cmpeq	r4, r2
 80192c0:	d1f7      	bne.n	80192b2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80192c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80192c6:	4770      	bx	lr
 80192c8:	4770      	bx	lr
 80192ca:	bf00      	nop

080192cc <rclc_action_find_first_handle_with_goal_response>:
 80192cc:	b140      	cbz	r0, 80192e0 <rclc_action_find_first_handle_with_goal_response+0x14>
 80192ce:	68c0      	ldr	r0, [r0, #12]
 80192d0:	b910      	cbnz	r0, 80192d8 <rclc_action_find_first_handle_with_goal_response+0xc>
 80192d2:	e005      	b.n	80192e0 <rclc_action_find_first_handle_with_goal_response+0x14>
 80192d4:	6800      	ldr	r0, [r0, #0]
 80192d6:	b118      	cbz	r0, 80192e0 <rclc_action_find_first_handle_with_goal_response+0x14>
 80192d8:	f890 3020 	ldrb.w	r3, [r0, #32]
 80192dc:	2b00      	cmp	r3, #0
 80192de:	d0f9      	beq.n	80192d4 <rclc_action_find_first_handle_with_goal_response+0x8>
 80192e0:	4770      	bx	lr
 80192e2:	bf00      	nop

080192e4 <rclc_action_find_first_handle_with_result_response>:
 80192e4:	b140      	cbz	r0, 80192f8 <rclc_action_find_first_handle_with_result_response+0x14>
 80192e6:	68c0      	ldr	r0, [r0, #12]
 80192e8:	b910      	cbnz	r0, 80192f0 <rclc_action_find_first_handle_with_result_response+0xc>
 80192ea:	e005      	b.n	80192f8 <rclc_action_find_first_handle_with_result_response+0x14>
 80192ec:	6800      	ldr	r0, [r0, #0]
 80192ee:	b118      	cbz	r0, 80192f8 <rclc_action_find_first_handle_with_result_response+0x14>
 80192f0:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	d0f9      	beq.n	80192ec <rclc_action_find_first_handle_with_result_response+0x8>
 80192f8:	4770      	bx	lr
 80192fa:	bf00      	nop

080192fc <rclc_action_server_response_goal_request>:
 80192fc:	b198      	cbz	r0, 8019326 <rclc_action_server_response_goal_request+0x2a>
 80192fe:	2200      	movs	r2, #0
 8019300:	460b      	mov	r3, r1
 8019302:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8019306:	b510      	push	{r4, lr}
 8019308:	6844      	ldr	r4, [r0, #4]
 801930a:	b086      	sub	sp, #24
 801930c:	f104 0010 	add.w	r0, r4, #16
 8019310:	9205      	str	r2, [sp, #20]
 8019312:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8019316:	aa03      	add	r2, sp, #12
 8019318:	f88d 300c 	strb.w	r3, [sp, #12]
 801931c:	f7ff fd3e 	bl	8018d9c <rcl_action_send_goal_response>
 8019320:	b918      	cbnz	r0, 801932a <rclc_action_server_response_goal_request+0x2e>
 8019322:	b006      	add	sp, #24
 8019324:	bd10      	pop	{r4, pc}
 8019326:	200b      	movs	r0, #11
 8019328:	4770      	bx	lr
 801932a:	9001      	str	r0, [sp, #4]
 801932c:	f7fc fab8 	bl	80158a0 <rcutils_reset_error>
 8019330:	9801      	ldr	r0, [sp, #4]
 8019332:	b006      	add	sp, #24
 8019334:	bd10      	pop	{r4, pc}
 8019336:	bf00      	nop

08019338 <rclc_action_server_goal_cancel_accept>:
 8019338:	b310      	cbz	r0, 8019380 <rclc_action_server_goal_cancel_accept+0x48>
 801933a:	b510      	push	{r4, lr}
 801933c:	b090      	sub	sp, #64	@ 0x40
 801933e:	4604      	mov	r4, r0
 8019340:	a806      	add	r0, sp, #24
 8019342:	f7ff ff01 	bl	8019148 <rcl_action_get_zero_initialized_cancel_response>
 8019346:	2300      	movs	r3, #0
 8019348:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801934c:	46ec      	mov	ip, sp
 801934e:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8019352:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8019356:	f88d 3018 	strb.w	r3, [sp, #24]
 801935a:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801935e:	f8cd d01c 	str.w	sp, [sp, #28]
 8019362:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019366:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8019388 <rclc_action_server_goal_cancel_accept+0x50>
 801936a:	6860      	ldr	r0, [r4, #4]
 801936c:	aa06      	add	r2, sp, #24
 801936e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8019372:	3010      	adds	r0, #16
 8019374:	ed8d 7b08 	vstr	d7, [sp, #32]
 8019378:	f7ff fdc8 	bl	8018f0c <rcl_action_send_cancel_response>
 801937c:	b010      	add	sp, #64	@ 0x40
 801937e:	bd10      	pop	{r4, pc}
 8019380:	200b      	movs	r0, #11
 8019382:	4770      	bx	lr
 8019384:	f3af 8000 	nop.w
 8019388:	00000001 	.word	0x00000001
 801938c:	00000001 	.word	0x00000001

08019390 <rclc_action_server_goal_cancel_reject>:
 8019390:	b082      	sub	sp, #8
 8019392:	b530      	push	{r4, r5, lr}
 8019394:	b08b      	sub	sp, #44	@ 0x2c
 8019396:	ac0e      	add	r4, sp, #56	@ 0x38
 8019398:	e884 000c 	stmia.w	r4, {r2, r3}
 801939c:	b188      	cbz	r0, 80193c2 <rclc_action_server_goal_cancel_reject+0x32>
 801939e:	4604      	mov	r4, r0
 80193a0:	a801      	add	r0, sp, #4
 80193a2:	460d      	mov	r5, r1
 80193a4:	f7ff fed0 	bl	8019148 <rcl_action_get_zero_initialized_cancel_response>
 80193a8:	aa01      	add	r2, sp, #4
 80193aa:	a90e      	add	r1, sp, #56	@ 0x38
 80193ac:	f104 0010 	add.w	r0, r4, #16
 80193b0:	f88d 5004 	strb.w	r5, [sp, #4]
 80193b4:	f7ff fdaa 	bl	8018f0c <rcl_action_send_cancel_response>
 80193b8:	b00b      	add	sp, #44	@ 0x2c
 80193ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80193be:	b002      	add	sp, #8
 80193c0:	4770      	bx	lr
 80193c2:	200b      	movs	r0, #11
 80193c4:	b00b      	add	sp, #44	@ 0x2c
 80193c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80193ca:	b002      	add	sp, #8
 80193cc:	4770      	bx	lr
 80193ce:	bf00      	nop

080193d0 <__atomic_load_8>:
 80193d0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80193d4:	4a16      	ldr	r2, [pc, #88]	@ (8019430 <__atomic_load_8+0x60>)
 80193d6:	4b17      	ldr	r3, [pc, #92]	@ (8019434 <__atomic_load_8+0x64>)
 80193d8:	f04f 0c01 	mov.w	ip, #1
 80193dc:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80193e0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80193e4:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80193e8:	fb02 f101 	mul.w	r1, r2, r1
 80193ec:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80193f0:	fba3 2301 	umull	r2, r3, r3, r1
 80193f4:	091b      	lsrs	r3, r3, #4
 80193f6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80193fa:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80193fe:	b4d0      	push	{r4, r6, r7}
 8019400:	1ac9      	subs	r1, r1, r3
 8019402:	4c0d      	ldr	r4, [pc, #52]	@ (8019438 <__atomic_load_8+0x68>)
 8019404:	1862      	adds	r2, r4, r1
 8019406:	e8d2 3f4f 	ldrexb	r3, [r2]
 801940a:	e8c2 cf46 	strexb	r6, ip, [r2]
 801940e:	2e00      	cmp	r6, #0
 8019410:	d1f9      	bne.n	8019406 <__atomic_load_8+0x36>
 8019412:	b2db      	uxtb	r3, r3
 8019414:	f3bf 8f5b 	dmb	ish
 8019418:	2b00      	cmp	r3, #0
 801941a:	d1f4      	bne.n	8019406 <__atomic_load_8+0x36>
 801941c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8019420:	f3bf 8f5b 	dmb	ish
 8019424:	5463      	strb	r3, [r4, r1]
 8019426:	4630      	mov	r0, r6
 8019428:	4639      	mov	r1, r7
 801942a:	bcd0      	pop	{r4, r6, r7}
 801942c:	4770      	bx	lr
 801942e:	bf00      	nop
 8019430:	27d4eb2d 	.word	0x27d4eb2d
 8019434:	b21642c9 	.word	0xb21642c9
 8019438:	24064aa8 	.word	0x24064aa8

0801943c <__atomic_store_8>:
 801943c:	b570      	push	{r4, r5, r6, lr}
 801943e:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8019442:	4916      	ldr	r1, [pc, #88]	@ (801949c <__atomic_store_8+0x60>)
 8019444:	4c16      	ldr	r4, [pc, #88]	@ (80194a0 <__atomic_store_8+0x64>)
 8019446:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 801944a:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801944e:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8019452:	fb01 fe0e 	mul.w	lr, r1, lr
 8019456:	4913      	ldr	r1, [pc, #76]	@ (80194a4 <__atomic_store_8+0x68>)
 8019458:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 801945c:	fba1 510e 	umull	r5, r1, r1, lr
 8019460:	f04f 0501 	mov.w	r5, #1
 8019464:	0909      	lsrs	r1, r1, #4
 8019466:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801946a:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 801946e:	ebae 0e01 	sub.w	lr, lr, r1
 8019472:	eb04 0c0e 	add.w	ip, r4, lr
 8019476:	e8dc 1f4f 	ldrexb	r1, [ip]
 801947a:	e8cc 5f46 	strexb	r6, r5, [ip]
 801947e:	2e00      	cmp	r6, #0
 8019480:	d1f9      	bne.n	8019476 <__atomic_store_8+0x3a>
 8019482:	b2c9      	uxtb	r1, r1
 8019484:	f3bf 8f5b 	dmb	ish
 8019488:	2900      	cmp	r1, #0
 801948a:	d1f4      	bne.n	8019476 <__atomic_store_8+0x3a>
 801948c:	e9c0 2300 	strd	r2, r3, [r0]
 8019490:	f3bf 8f5b 	dmb	ish
 8019494:	f804 100e 	strb.w	r1, [r4, lr]
 8019498:	bd70      	pop	{r4, r5, r6, pc}
 801949a:	bf00      	nop
 801949c:	27d4eb2d 	.word	0x27d4eb2d
 80194a0:	24064aa8 	.word	0x24064aa8
 80194a4:	b21642c9 	.word	0xb21642c9

080194a8 <__atomic_exchange_8>:
 80194a8:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 80194ac:	4917      	ldr	r1, [pc, #92]	@ (801950c <__atomic_exchange_8+0x64>)
 80194ae:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 80194b2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 80194b6:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 80194ba:	fb01 fc0c 	mul.w	ip, r1, ip
 80194be:	4914      	ldr	r1, [pc, #80]	@ (8019510 <__atomic_exchange_8+0x68>)
 80194c0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 80194c4:	b570      	push	{r4, r5, r6, lr}
 80194c6:	4686      	mov	lr, r0
 80194c8:	fba1 010c 	umull	r0, r1, r1, ip
 80194cc:	4d11      	ldr	r5, [pc, #68]	@ (8019514 <__atomic_exchange_8+0x6c>)
 80194ce:	f04f 0001 	mov.w	r0, #1
 80194d2:	0909      	lsrs	r1, r1, #4
 80194d4:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 80194d8:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 80194dc:	ebac 0c01 	sub.w	ip, ip, r1
 80194e0:	eb05 010c 	add.w	r1, r5, ip
 80194e4:	e8d1 4f4f 	ldrexb	r4, [r1]
 80194e8:	e8c1 0f46 	strexb	r6, r0, [r1]
 80194ec:	2e00      	cmp	r6, #0
 80194ee:	d1f9      	bne.n	80194e4 <__atomic_exchange_8+0x3c>
 80194f0:	b2e4      	uxtb	r4, r4
 80194f2:	f3bf 8f5b 	dmb	ish
 80194f6:	2c00      	cmp	r4, #0
 80194f8:	d1f4      	bne.n	80194e4 <__atomic_exchange_8+0x3c>
 80194fa:	e9de 0100 	ldrd	r0, r1, [lr]
 80194fe:	e9ce 2300 	strd	r2, r3, [lr]
 8019502:	f3bf 8f5b 	dmb	ish
 8019506:	f805 400c 	strb.w	r4, [r5, ip]
 801950a:	bd70      	pop	{r4, r5, r6, pc}
 801950c:	27d4eb2d 	.word	0x27d4eb2d
 8019510:	b21642c9 	.word	0xb21642c9
 8019514:	24064aa8 	.word	0x24064aa8

08019518 <rcutils_get_env>:
 8019518:	b168      	cbz	r0, 8019536 <rcutils_get_env+0x1e>
 801951a:	b510      	push	{r4, lr}
 801951c:	460c      	mov	r4, r1
 801951e:	b129      	cbz	r1, 801952c <rcutils_get_env+0x14>
 8019520:	f007 fe32 	bl	8021188 <getenv>
 8019524:	b120      	cbz	r0, 8019530 <rcutils_get_env+0x18>
 8019526:	6020      	str	r0, [r4, #0]
 8019528:	2000      	movs	r0, #0
 801952a:	bd10      	pop	{r4, pc}
 801952c:	4803      	ldr	r0, [pc, #12]	@ (801953c <rcutils_get_env+0x24>)
 801952e:	bd10      	pop	{r4, pc}
 8019530:	4b03      	ldr	r3, [pc, #12]	@ (8019540 <rcutils_get_env+0x28>)
 8019532:	6023      	str	r3, [r4, #0]
 8019534:	bd10      	pop	{r4, pc}
 8019536:	4803      	ldr	r0, [pc, #12]	@ (8019544 <rcutils_get_env+0x2c>)
 8019538:	4770      	bx	lr
 801953a:	bf00      	nop
 801953c:	08024988 	.word	0x08024988
 8019540:	08025048 	.word	0x08025048
 8019544:	0802496c 	.word	0x0802496c

08019548 <rcutils_is_directory>:
 8019548:	2000      	movs	r0, #0
 801954a:	4770      	bx	lr

0801954c <rcutils_join_path>:
 801954c:	b082      	sub	sp, #8
 801954e:	2000      	movs	r0, #0
 8019550:	e88d 000c 	stmia.w	sp, {r2, r3}
 8019554:	b002      	add	sp, #8
 8019556:	4770      	bx	lr

08019558 <rcutils_to_native_path>:
 8019558:	b084      	sub	sp, #16
 801955a:	2000      	movs	r0, #0
 801955c:	f10d 0c04 	add.w	ip, sp, #4
 8019560:	b004      	add	sp, #16
 8019562:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8019566:	4770      	bx	lr

08019568 <rcutils_format_string_limit>:
 8019568:	b40f      	push	{r0, r1, r2, r3}
 801956a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801956c:	b083      	sub	sp, #12
 801956e:	ac08      	add	r4, sp, #32
 8019570:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8019572:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8019576:	b326      	cbz	r6, 80195c2 <rcutils_format_string_limit+0x5a>
 8019578:	a808      	add	r0, sp, #32
 801957a:	f7fc f96b 	bl	8015854 <rcutils_allocator_is_valid>
 801957e:	b300      	cbz	r0, 80195c2 <rcutils_format_string_limit+0x5a>
 8019580:	2100      	movs	r1, #0
 8019582:	ab0f      	add	r3, sp, #60	@ 0x3c
 8019584:	4632      	mov	r2, r6
 8019586:	4608      	mov	r0, r1
 8019588:	e9cd 3300 	strd	r3, r3, [sp]
 801958c:	f000 f906 	bl	801979c <rcutils_vsnprintf>
 8019590:	1c43      	adds	r3, r0, #1
 8019592:	4605      	mov	r5, r0
 8019594:	d015      	beq.n	80195c2 <rcutils_format_string_limit+0x5a>
 8019596:	1c47      	adds	r7, r0, #1
 8019598:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801959a:	429f      	cmp	r7, r3
 801959c:	d901      	bls.n	80195a2 <rcutils_format_string_limit+0x3a>
 801959e:	1e5d      	subs	r5, r3, #1
 80195a0:	461f      	mov	r7, r3
 80195a2:	9b08      	ldr	r3, [sp, #32]
 80195a4:	4638      	mov	r0, r7
 80195a6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80195a8:	4798      	blx	r3
 80195aa:	4604      	mov	r4, r0
 80195ac:	b148      	cbz	r0, 80195c2 <rcutils_format_string_limit+0x5a>
 80195ae:	4632      	mov	r2, r6
 80195b0:	4639      	mov	r1, r7
 80195b2:	9b01      	ldr	r3, [sp, #4]
 80195b4:	f000 f8f2 	bl	801979c <rcutils_vsnprintf>
 80195b8:	2800      	cmp	r0, #0
 80195ba:	db09      	blt.n	80195d0 <rcutils_format_string_limit+0x68>
 80195bc:	2300      	movs	r3, #0
 80195be:	5563      	strb	r3, [r4, r5]
 80195c0:	e000      	b.n	80195c4 <rcutils_format_string_limit+0x5c>
 80195c2:	2400      	movs	r4, #0
 80195c4:	4620      	mov	r0, r4
 80195c6:	b003      	add	sp, #12
 80195c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80195cc:	b004      	add	sp, #16
 80195ce:	4770      	bx	lr
 80195d0:	4620      	mov	r0, r4
 80195d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80195d4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80195d6:	2400      	movs	r4, #0
 80195d8:	4798      	blx	r3
 80195da:	e7f3      	b.n	80195c4 <rcutils_format_string_limit+0x5c>

080195dc <rcutils_repl_str>:
 80195dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195e0:	ed2d 8b02 	vpush	{d8}
 80195e4:	b087      	sub	sp, #28
 80195e6:	2600      	movs	r6, #0
 80195e8:	4680      	mov	r8, r0
 80195ea:	468a      	mov	sl, r1
 80195ec:	9000      	str	r0, [sp, #0]
 80195ee:	4608      	mov	r0, r1
 80195f0:	ee08 2a10 	vmov	s16, r2
 80195f4:	4699      	mov	r9, r3
 80195f6:	2510      	movs	r5, #16
 80195f8:	f7e6 fe7c 	bl	80002f4 <strlen>
 80195fc:	4637      	mov	r7, r6
 80195fe:	46b3      	mov	fp, r6
 8019600:	9001      	str	r0, [sp, #4]
 8019602:	e01e      	b.n	8019642 <rcutils_repl_str+0x66>
 8019604:	f10b 0b01 	add.w	fp, fp, #1
 8019608:	9b01      	ldr	r3, [sp, #4]
 801960a:	455e      	cmp	r6, fp
 801960c:	eb04 0803 	add.w	r8, r4, r3
 8019610:	d211      	bcs.n	8019636 <rcutils_repl_str+0x5a>
 8019612:	442e      	add	r6, r5
 8019614:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8019618:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801961c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019620:	00b1      	lsls	r1, r6, #2
 8019622:	4798      	blx	r3
 8019624:	2800      	cmp	r0, #0
 8019626:	f000 8088 	beq.w	801973a <rcutils_repl_str+0x15e>
 801962a:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 801962e:	4607      	mov	r7, r0
 8019630:	bf28      	it	cs
 8019632:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8019636:	9a00      	ldr	r2, [sp, #0]
 8019638:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 801963c:	1aa4      	subs	r4, r4, r2
 801963e:	f843 4c04 	str.w	r4, [r3, #-4]
 8019642:	4651      	mov	r1, sl
 8019644:	4640      	mov	r0, r8
 8019646:	f008 fa70 	bl	8021b2a <strstr>
 801964a:	4604      	mov	r4, r0
 801964c:	4638      	mov	r0, r7
 801964e:	2c00      	cmp	r4, #0
 8019650:	d1d8      	bne.n	8019604 <rcutils_repl_str+0x28>
 8019652:	4640      	mov	r0, r8
 8019654:	f7e6 fe4e 	bl	80002f4 <strlen>
 8019658:	9b00      	ldr	r3, [sp, #0]
 801965a:	eba8 0803 	sub.w	r8, r8, r3
 801965e:	eb08 0400 	add.w	r4, r8, r0
 8019662:	9402      	str	r4, [sp, #8]
 8019664:	f1bb 0f00 	cmp.w	fp, #0
 8019668:	d045      	beq.n	80196f6 <rcutils_repl_str+0x11a>
 801966a:	ee18 0a10 	vmov	r0, s16
 801966e:	f7e6 fe41 	bl	80002f4 <strlen>
 8019672:	9a01      	ldr	r2, [sp, #4]
 8019674:	4606      	mov	r6, r0
 8019676:	f8d9 3000 	ldr.w	r3, [r9]
 801967a:	1a82      	subs	r2, r0, r2
 801967c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8019680:	fb0b 4202 	mla	r2, fp, r2, r4
 8019684:	1c50      	adds	r0, r2, #1
 8019686:	9205      	str	r2, [sp, #20]
 8019688:	4798      	blx	r3
 801968a:	4682      	mov	sl, r0
 801968c:	2800      	cmp	r0, #0
 801968e:	d054      	beq.n	801973a <rcutils_repl_str+0x15e>
 8019690:	683a      	ldr	r2, [r7, #0]
 8019692:	463d      	mov	r5, r7
 8019694:	9900      	ldr	r1, [sp, #0]
 8019696:	2401      	movs	r4, #1
 8019698:	f008 fb3f 	bl	8021d1a <memcpy>
 801969c:	683b      	ldr	r3, [r7, #0]
 801969e:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 80196a2:	eb0a 0803 	add.w	r8, sl, r3
 80196a6:	ee18 7a10 	vmov	r7, s16
 80196aa:	f8dd a000 	ldr.w	sl, [sp]
 80196ae:	f8cd 9000 	str.w	r9, [sp]
 80196b2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80196b6:	4632      	mov	r2, r6
 80196b8:	4639      	mov	r1, r7
 80196ba:	4640      	mov	r0, r8
 80196bc:	44b0      	add	r8, r6
 80196be:	f008 fb2c 	bl	8021d1a <memcpy>
 80196c2:	f855 2b04 	ldr.w	r2, [r5], #4
 80196c6:	45a3      	cmp	fp, r4
 80196c8:	444a      	add	r2, r9
 80196ca:	eb0a 0102 	add.w	r1, sl, r2
 80196ce:	d02a      	beq.n	8019726 <rcutils_repl_str+0x14a>
 80196d0:	6828      	ldr	r0, [r5, #0]
 80196d2:	1a82      	subs	r2, r0, r2
 80196d4:	4640      	mov	r0, r8
 80196d6:	4490      	add	r8, r2
 80196d8:	f008 fb1f 	bl	8021d1a <memcpy>
 80196dc:	1c62      	adds	r2, r4, #1
 80196de:	45a3      	cmp	fp, r4
 80196e0:	4614      	mov	r4, r2
 80196e2:	d8e8      	bhi.n	80196b6 <rcutils_repl_str+0xda>
 80196e4:	f8dd 9000 	ldr.w	r9, [sp]
 80196e8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 80196ec:	2300      	movs	r3, #0
 80196ee:	9a05      	ldr	r2, [sp, #20]
 80196f0:	f80a 3002 	strb.w	r3, [sl, r2]
 80196f4:	e00b      	b.n	801970e <rcutils_repl_str+0x132>
 80196f6:	4620      	mov	r0, r4
 80196f8:	f8d9 3000 	ldr.w	r3, [r9]
 80196fc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8019700:	3001      	adds	r0, #1
 8019702:	4798      	blx	r3
 8019704:	4682      	mov	sl, r0
 8019706:	b110      	cbz	r0, 801970e <rcutils_repl_str+0x132>
 8019708:	9900      	ldr	r1, [sp, #0]
 801970a:	f008 fafe 	bl	8021d0a <strcpy>
 801970e:	4638      	mov	r0, r7
 8019710:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8019714:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8019718:	4798      	blx	r3
 801971a:	4650      	mov	r0, sl
 801971c:	b007      	add	sp, #28
 801971e:	ecbd 8b02 	vpop	{d8}
 8019722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019726:	9b02      	ldr	r3, [sp, #8]
 8019728:	4640      	mov	r0, r8
 801972a:	f8dd 9000 	ldr.w	r9, [sp]
 801972e:	1a9a      	subs	r2, r3, r2
 8019730:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8019734:	f008 faf1 	bl	8021d1a <memcpy>
 8019738:	e7d8      	b.n	80196ec <rcutils_repl_str+0x110>
 801973a:	f04f 0a00 	mov.w	sl, #0
 801973e:	e7e6      	b.n	801970e <rcutils_repl_str+0x132>

08019740 <rcutils_snprintf>:
 8019740:	b40c      	push	{r2, r3}
 8019742:	b530      	push	{r4, r5, lr}
 8019744:	b083      	sub	sp, #12
 8019746:	ab06      	add	r3, sp, #24
 8019748:	f853 2b04 	ldr.w	r2, [r3], #4
 801974c:	9301      	str	r3, [sp, #4]
 801974e:	b1e2      	cbz	r2, 801978a <rcutils_snprintf+0x4a>
 8019750:	fab0 f480 	clz	r4, r0
 8019754:	fab1 f581 	clz	r5, r1
 8019758:	ea50 0c01 	orrs.w	ip, r0, r1
 801975c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8019760:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8019764:	d008      	beq.n	8019778 <rcutils_snprintf+0x38>
 8019766:	b984      	cbnz	r4, 801978a <rcutils_snprintf+0x4a>
 8019768:	b97d      	cbnz	r5, 801978a <rcutils_snprintf+0x4a>
 801976a:	f008 f8eb 	bl	8021944 <vsniprintf>
 801976e:	b003      	add	sp, #12
 8019770:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019774:	b002      	add	sp, #8
 8019776:	4770      	bx	lr
 8019778:	4661      	mov	r1, ip
 801977a:	4660      	mov	r0, ip
 801977c:	f008 f8e2 	bl	8021944 <vsniprintf>
 8019780:	b003      	add	sp, #12
 8019782:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019786:	b002      	add	sp, #8
 8019788:	4770      	bx	lr
 801978a:	f008 fa91 	bl	8021cb0 <__errno>
 801978e:	2216      	movs	r2, #22
 8019790:	4603      	mov	r3, r0
 8019792:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019796:	601a      	str	r2, [r3, #0]
 8019798:	e7e9      	b.n	801976e <rcutils_snprintf+0x2e>
 801979a:	bf00      	nop

0801979c <rcutils_vsnprintf>:
 801979c:	b570      	push	{r4, r5, r6, lr}
 801979e:	b1b2      	cbz	r2, 80197ce <rcutils_vsnprintf+0x32>
 80197a0:	fab0 f480 	clz	r4, r0
 80197a4:	fab1 f581 	clz	r5, r1
 80197a8:	ea50 0c01 	orrs.w	ip, r0, r1
 80197ac:	ea4f 1454 	mov.w	r4, r4, lsr #5
 80197b0:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80197b4:	d005      	beq.n	80197c2 <rcutils_vsnprintf+0x26>
 80197b6:	b954      	cbnz	r4, 80197ce <rcutils_vsnprintf+0x32>
 80197b8:	b94d      	cbnz	r5, 80197ce <rcutils_vsnprintf+0x32>
 80197ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80197be:	f008 b8c1 	b.w	8021944 <vsniprintf>
 80197c2:	4661      	mov	r1, ip
 80197c4:	4660      	mov	r0, ip
 80197c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80197ca:	f008 b8bb 	b.w	8021944 <vsniprintf>
 80197ce:	f008 fa6f 	bl	8021cb0 <__errno>
 80197d2:	2316      	movs	r3, #22
 80197d4:	6003      	str	r3, [r0, #0]
 80197d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80197da:	bd70      	pop	{r4, r5, r6, pc}

080197dc <rcutils_strdup>:
 80197dc:	b084      	sub	sp, #16
 80197de:	b570      	push	{r4, r5, r6, lr}
 80197e0:	b082      	sub	sp, #8
 80197e2:	4605      	mov	r5, r0
 80197e4:	ac07      	add	r4, sp, #28
 80197e6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80197ea:	b1b0      	cbz	r0, 801981a <rcutils_strdup+0x3e>
 80197ec:	f7e6 fd82 	bl	80002f4 <strlen>
 80197f0:	1c42      	adds	r2, r0, #1
 80197f2:	9b07      	ldr	r3, [sp, #28]
 80197f4:	4606      	mov	r6, r0
 80197f6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80197f8:	4610      	mov	r0, r2
 80197fa:	9201      	str	r2, [sp, #4]
 80197fc:	4798      	blx	r3
 80197fe:	4604      	mov	r4, r0
 8019800:	b128      	cbz	r0, 801980e <rcutils_strdup+0x32>
 8019802:	9a01      	ldr	r2, [sp, #4]
 8019804:	4629      	mov	r1, r5
 8019806:	f008 fa88 	bl	8021d1a <memcpy>
 801980a:	2300      	movs	r3, #0
 801980c:	55a3      	strb	r3, [r4, r6]
 801980e:	4620      	mov	r0, r4
 8019810:	b002      	add	sp, #8
 8019812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019816:	b004      	add	sp, #16
 8019818:	4770      	bx	lr
 801981a:	4604      	mov	r4, r0
 801981c:	e7f7      	b.n	801980e <rcutils_strdup+0x32>
 801981e:	bf00      	nop

08019820 <rcutils_strndup>:
 8019820:	b082      	sub	sp, #8
 8019822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019824:	ac06      	add	r4, sp, #24
 8019826:	4605      	mov	r5, r0
 8019828:	e884 000c 	stmia.w	r4, {r2, r3}
 801982c:	b188      	cbz	r0, 8019852 <rcutils_strndup+0x32>
 801982e:	1c4f      	adds	r7, r1, #1
 8019830:	460e      	mov	r6, r1
 8019832:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019834:	4638      	mov	r0, r7
 8019836:	4790      	blx	r2
 8019838:	4604      	mov	r4, r0
 801983a:	b128      	cbz	r0, 8019848 <rcutils_strndup+0x28>
 801983c:	463a      	mov	r2, r7
 801983e:	4629      	mov	r1, r5
 8019840:	f008 fa6b 	bl	8021d1a <memcpy>
 8019844:	2300      	movs	r3, #0
 8019846:	55a3      	strb	r3, [r4, r6]
 8019848:	4620      	mov	r0, r4
 801984a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801984e:	b002      	add	sp, #8
 8019850:	4770      	bx	lr
 8019852:	4604      	mov	r4, r0
 8019854:	e7f8      	b.n	8019848 <rcutils_strndup+0x28>
 8019856:	bf00      	nop

08019858 <rcutils_get_zero_initialized_string_map>:
 8019858:	2000      	movs	r0, #0
 801985a:	4b01      	ldr	r3, [pc, #4]	@ (8019860 <rcutils_get_zero_initialized_string_map+0x8>)
 801985c:	6018      	str	r0, [r3, #0]
 801985e:	4770      	bx	lr
 8019860:	24064ac0 	.word	0x24064ac0

08019864 <rcutils_string_map_reserve>:
 8019864:	2800      	cmp	r0, #0
 8019866:	d05e      	beq.n	8019926 <rcutils_string_map_reserve+0xc2>
 8019868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801986c:	460c      	mov	r4, r1
 801986e:	6801      	ldr	r1, [r0, #0]
 8019870:	b082      	sub	sp, #8
 8019872:	4605      	mov	r5, r0
 8019874:	b129      	cbz	r1, 8019882 <rcutils_string_map_reserve+0x1e>
 8019876:	68cb      	ldr	r3, [r1, #12]
 8019878:	42a3      	cmp	r3, r4
 801987a:	d906      	bls.n	801988a <rcutils_string_map_reserve+0x26>
 801987c:	461c      	mov	r4, r3
 801987e:	2900      	cmp	r1, #0
 8019880:	d1f9      	bne.n	8019876 <rcutils_string_map_reserve+0x12>
 8019882:	201f      	movs	r0, #31
 8019884:	b002      	add	sp, #8
 8019886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801988a:	688b      	ldr	r3, [r1, #8]
 801988c:	42a3      	cmp	r3, r4
 801988e:	d046      	beq.n	801991e <rcutils_string_map_reserve+0xba>
 8019890:	6a0e      	ldr	r6, [r1, #32]
 8019892:	2c00      	cmp	r4, #0
 8019894:	d033      	beq.n	80198fe <rcutils_string_map_reserve+0x9a>
 8019896:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801989a:	d242      	bcs.n	8019922 <rcutils_string_map_reserve+0xbe>
 801989c:	00a7      	lsls	r7, r4, #2
 801989e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80198a2:	6808      	ldr	r0, [r1, #0]
 80198a4:	4632      	mov	r2, r6
 80198a6:	4639      	mov	r1, r7
 80198a8:	47c0      	blx	r8
 80198aa:	2800      	cmp	r0, #0
 80198ac:	d039      	beq.n	8019922 <rcutils_string_map_reserve+0xbe>
 80198ae:	682b      	ldr	r3, [r5, #0]
 80198b0:	4632      	mov	r2, r6
 80198b2:	4639      	mov	r1, r7
 80198b4:	6018      	str	r0, [r3, #0]
 80198b6:	6858      	ldr	r0, [r3, #4]
 80198b8:	47c0      	blx	r8
 80198ba:	2800      	cmp	r0, #0
 80198bc:	d031      	beq.n	8019922 <rcutils_string_map_reserve+0xbe>
 80198be:	682d      	ldr	r5, [r5, #0]
 80198c0:	68ab      	ldr	r3, [r5, #8]
 80198c2:	6068      	str	r0, [r5, #4]
 80198c4:	42a3      	cmp	r3, r4
 80198c6:	d225      	bcs.n	8019914 <rcutils_string_map_reserve+0xb0>
 80198c8:	682a      	ldr	r2, [r5, #0]
 80198ca:	eb00 0c07 	add.w	ip, r0, r7
 80198ce:	0099      	lsls	r1, r3, #2
 80198d0:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80198d4:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80198d8:	45e6      	cmp	lr, ip
 80198da:	d203      	bcs.n	80198e4 <rcutils_string_map_reserve+0x80>
 80198dc:	eb02 0c07 	add.w	ip, r2, r7
 80198e0:	4566      	cmp	r6, ip
 80198e2:	d322      	bcc.n	801992a <rcutils_string_map_reserve+0xc6>
 80198e4:	1ae3      	subs	r3, r4, r3
 80198e6:	4670      	mov	r0, lr
 80198e8:	2100      	movs	r1, #0
 80198ea:	009a      	lsls	r2, r3, #2
 80198ec:	9201      	str	r2, [sp, #4]
 80198ee:	f008 f8f5 	bl	8021adc <memset>
 80198f2:	9a01      	ldr	r2, [sp, #4]
 80198f4:	2100      	movs	r1, #0
 80198f6:	4630      	mov	r0, r6
 80198f8:	f008 f8f0 	bl	8021adc <memset>
 80198fc:	e00a      	b.n	8019914 <rcutils_string_map_reserve+0xb0>
 80198fe:	694f      	ldr	r7, [r1, #20]
 8019900:	6808      	ldr	r0, [r1, #0]
 8019902:	4631      	mov	r1, r6
 8019904:	47b8      	blx	r7
 8019906:	682b      	ldr	r3, [r5, #0]
 8019908:	4631      	mov	r1, r6
 801990a:	6858      	ldr	r0, [r3, #4]
 801990c:	601c      	str	r4, [r3, #0]
 801990e:	47b8      	blx	r7
 8019910:	682d      	ldr	r5, [r5, #0]
 8019912:	606c      	str	r4, [r5, #4]
 8019914:	2000      	movs	r0, #0
 8019916:	60ac      	str	r4, [r5, #8]
 8019918:	b002      	add	sp, #8
 801991a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801991e:	2000      	movs	r0, #0
 8019920:	e7b0      	b.n	8019884 <rcutils_string_map_reserve+0x20>
 8019922:	200a      	movs	r0, #10
 8019924:	e7ae      	b.n	8019884 <rcutils_string_map_reserve+0x20>
 8019926:	200b      	movs	r0, #11
 8019928:	4770      	bx	lr
 801992a:	1f0b      	subs	r3, r1, #4
 801992c:	4418      	add	r0, r3
 801992e:	4413      	add	r3, r2
 8019930:	3a04      	subs	r2, #4
 8019932:	4417      	add	r7, r2
 8019934:	2200      	movs	r2, #0
 8019936:	f843 2f04 	str.w	r2, [r3, #4]!
 801993a:	42bb      	cmp	r3, r7
 801993c:	f840 2f04 	str.w	r2, [r0, #4]!
 8019940:	d1f9      	bne.n	8019936 <rcutils_string_map_reserve+0xd2>
 8019942:	e7e7      	b.n	8019914 <rcutils_string_map_reserve+0xb0>

08019944 <rcutils_string_map_init>:
 8019944:	b082      	sub	sp, #8
 8019946:	b570      	push	{r4, r5, r6, lr}
 8019948:	ac04      	add	r4, sp, #16
 801994a:	e884 000c 	stmia.w	r4, {r2, r3}
 801994e:	b380      	cbz	r0, 80199b2 <rcutils_string_map_init+0x6e>
 8019950:	6806      	ldr	r6, [r0, #0]
 8019952:	4604      	mov	r4, r0
 8019954:	b12e      	cbz	r6, 8019962 <rcutils_string_map_init+0x1e>
 8019956:	251e      	movs	r5, #30
 8019958:	4628      	mov	r0, r5
 801995a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801995e:	b002      	add	sp, #8
 8019960:	4770      	bx	lr
 8019962:	a804      	add	r0, sp, #16
 8019964:	460d      	mov	r5, r1
 8019966:	f7fb ff75 	bl	8015854 <rcutils_allocator_is_valid>
 801996a:	b310      	cbz	r0, 80199b2 <rcutils_string_map_init+0x6e>
 801996c:	9b04      	ldr	r3, [sp, #16]
 801996e:	2024      	movs	r0, #36	@ 0x24
 8019970:	9908      	ldr	r1, [sp, #32]
 8019972:	4798      	blx	r3
 8019974:	6020      	str	r0, [r4, #0]
 8019976:	b310      	cbz	r0, 80199be <rcutils_string_map_init+0x7a>
 8019978:	f10d 0e10 	add.w	lr, sp, #16
 801997c:	f100 0c10 	add.w	ip, r0, #16
 8019980:	e9c0 6600 	strd	r6, r6, [r0]
 8019984:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8019988:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801998c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019990:	f8de 3000 	ldr.w	r3, [lr]
 8019994:	4629      	mov	r1, r5
 8019996:	4620      	mov	r0, r4
 8019998:	f8cc 3000 	str.w	r3, [ip]
 801999c:	f7ff ff62 	bl	8019864 <rcutils_string_map_reserve>
 80199a0:	4605      	mov	r5, r0
 80199a2:	2800      	cmp	r0, #0
 80199a4:	d0d8      	beq.n	8019958 <rcutils_string_map_init+0x14>
 80199a6:	9b05      	ldr	r3, [sp, #20]
 80199a8:	9908      	ldr	r1, [sp, #32]
 80199aa:	6820      	ldr	r0, [r4, #0]
 80199ac:	4798      	blx	r3
 80199ae:	6026      	str	r6, [r4, #0]
 80199b0:	e7d2      	b.n	8019958 <rcutils_string_map_init+0x14>
 80199b2:	250b      	movs	r5, #11
 80199b4:	4628      	mov	r0, r5
 80199b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80199ba:	b002      	add	sp, #8
 80199bc:	4770      	bx	lr
 80199be:	250a      	movs	r5, #10
 80199c0:	e7ca      	b.n	8019958 <rcutils_string_map_init+0x14>
 80199c2:	bf00      	nop

080199c4 <rcutils_string_map_fini>:
 80199c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199c8:	b082      	sub	sp, #8
 80199ca:	2800      	cmp	r0, #0
 80199cc:	d03a      	beq.n	8019a44 <rcutils_string_map_fini+0x80>
 80199ce:	6804      	ldr	r4, [r0, #0]
 80199d0:	4606      	mov	r6, r0
 80199d2:	2c00      	cmp	r4, #0
 80199d4:	d032      	beq.n	8019a3c <rcutils_string_map_fini+0x78>
 80199d6:	68a3      	ldr	r3, [r4, #8]
 80199d8:	b32b      	cbz	r3, 8019a26 <rcutils_string_map_fini+0x62>
 80199da:	2500      	movs	r5, #0
 80199dc:	6822      	ldr	r2, [r4, #0]
 80199de:	462f      	mov	r7, r5
 80199e0:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80199e4:	b1e0      	cbz	r0, 8019a20 <rcutils_string_map_fini+0x5c>
 80199e6:	6a21      	ldr	r1, [r4, #32]
 80199e8:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80199ec:	9101      	str	r1, [sp, #4]
 80199ee:	47c0      	blx	r8
 80199f0:	9901      	ldr	r1, [sp, #4]
 80199f2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80199f6:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 80199fa:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80199fe:	47c0      	blx	r8
 8019a00:	68e3      	ldr	r3, [r4, #12]
 8019a02:	6862      	ldr	r2, [r4, #4]
 8019a04:	3b01      	subs	r3, #1
 8019a06:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8019a0a:	3501      	adds	r5, #1
 8019a0c:	60e3      	str	r3, [r4, #12]
 8019a0e:	6834      	ldr	r4, [r6, #0]
 8019a10:	68a3      	ldr	r3, [r4, #8]
 8019a12:	429d      	cmp	r5, r3
 8019a14:	d207      	bcs.n	8019a26 <rcutils_string_map_fini+0x62>
 8019a16:	6822      	ldr	r2, [r4, #0]
 8019a18:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8019a1c:	2800      	cmp	r0, #0
 8019a1e:	d1e2      	bne.n	80199e6 <rcutils_string_map_fini+0x22>
 8019a20:	3501      	adds	r5, #1
 8019a22:	429d      	cmp	r5, r3
 8019a24:	d3dc      	bcc.n	80199e0 <rcutils_string_map_fini+0x1c>
 8019a26:	2100      	movs	r1, #0
 8019a28:	4630      	mov	r0, r6
 8019a2a:	f7ff ff1b 	bl	8019864 <rcutils_string_map_reserve>
 8019a2e:	4604      	mov	r4, r0
 8019a30:	b920      	cbnz	r0, 8019a3c <rcutils_string_map_fini+0x78>
 8019a32:	6830      	ldr	r0, [r6, #0]
 8019a34:	6943      	ldr	r3, [r0, #20]
 8019a36:	6a01      	ldr	r1, [r0, #32]
 8019a38:	4798      	blx	r3
 8019a3a:	6034      	str	r4, [r6, #0]
 8019a3c:	4620      	mov	r0, r4
 8019a3e:	b002      	add	sp, #8
 8019a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a44:	240b      	movs	r4, #11
 8019a46:	4620      	mov	r0, r4
 8019a48:	b002      	add	sp, #8
 8019a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a4e:	bf00      	nop

08019a50 <rcutils_string_map_getn>:
 8019a50:	b378      	cbz	r0, 8019ab2 <rcutils_string_map_getn+0x62>
 8019a52:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a56:	f8d0 b000 	ldr.w	fp, [r0]
 8019a5a:	f1bb 0f00 	cmp.w	fp, #0
 8019a5e:	d01f      	beq.n	8019aa0 <rcutils_string_map_getn+0x50>
 8019a60:	fab1 f481 	clz	r4, r1
 8019a64:	4688      	mov	r8, r1
 8019a66:	0964      	lsrs	r4, r4, #5
 8019a68:	b1d1      	cbz	r1, 8019aa0 <rcutils_string_map_getn+0x50>
 8019a6a:	f8db 7008 	ldr.w	r7, [fp, #8]
 8019a6e:	f8db 6000 	ldr.w	r6, [fp]
 8019a72:	b1af      	cbz	r7, 8019aa0 <rcutils_string_map_getn+0x50>
 8019a74:	4691      	mov	r9, r2
 8019a76:	3e04      	subs	r6, #4
 8019a78:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8019a7c:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8019a80:	3401      	adds	r4, #1
 8019a82:	4628      	mov	r0, r5
 8019a84:	b155      	cbz	r5, 8019a9c <rcutils_string_map_getn+0x4c>
 8019a86:	f7e6 fc35 	bl	80002f4 <strlen>
 8019a8a:	4602      	mov	r2, r0
 8019a8c:	4629      	mov	r1, r5
 8019a8e:	4640      	mov	r0, r8
 8019a90:	454a      	cmp	r2, r9
 8019a92:	bf38      	it	cc
 8019a94:	464a      	movcc	r2, r9
 8019a96:	f008 f836 	bl	8021b06 <strncmp>
 8019a9a:	b120      	cbz	r0, 8019aa6 <rcutils_string_map_getn+0x56>
 8019a9c:	42a7      	cmp	r7, r4
 8019a9e:	d1eb      	bne.n	8019a78 <rcutils_string_map_getn+0x28>
 8019aa0:	2000      	movs	r0, #0
 8019aa2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019aa6:	f8db 3004 	ldr.w	r3, [fp, #4]
 8019aaa:	f853 000a 	ldr.w	r0, [r3, sl]
 8019aae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ab2:	4770      	bx	lr
 8019ab4:	0000      	movs	r0, r0
	...

08019ab8 <rmw_get_zero_initialized_context>:
 8019ab8:	b510      	push	{r4, lr}
 8019aba:	4604      	mov	r4, r0
 8019abc:	3010      	adds	r0, #16
 8019abe:	f000 f80f 	bl	8019ae0 <rmw_get_zero_initialized_init_options>
 8019ac2:	2300      	movs	r3, #0
 8019ac4:	4620      	mov	r0, r4
 8019ac6:	60a3      	str	r3, [r4, #8]
 8019ac8:	64a3      	str	r3, [r4, #72]	@ 0x48
 8019aca:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8019acc:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 8019ad8 <rmw_get_zero_initialized_context+0x20>
 8019ad0:	ed84 7b00 	vstr	d7, [r4]
 8019ad4:	bd10      	pop	{r4, pc}
 8019ad6:	bf00      	nop
	...

08019ae0 <rmw_get_zero_initialized_init_options>:
 8019ae0:	b510      	push	{r4, lr}
 8019ae2:	4604      	mov	r4, r0
 8019ae4:	2238      	movs	r2, #56	@ 0x38
 8019ae6:	2100      	movs	r1, #0
 8019ae8:	f007 fff8 	bl	8021adc <memset>
 8019aec:	f104 0010 	add.w	r0, r4, #16
 8019af0:	f000 f80a 	bl	8019b08 <rmw_get_default_security_options>
 8019af4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019af8:	4620      	mov	r0, r4
 8019afa:	60e3      	str	r3, [r4, #12]
 8019afc:	bd10      	pop	{r4, pc}
 8019afe:	bf00      	nop

08019b00 <rmw_get_default_publisher_options>:
 8019b00:	2200      	movs	r2, #0
 8019b02:	6002      	str	r2, [r0, #0]
 8019b04:	7102      	strb	r2, [r0, #4]
 8019b06:	4770      	bx	lr

08019b08 <rmw_get_default_security_options>:
 8019b08:	2200      	movs	r2, #0
 8019b0a:	7002      	strb	r2, [r0, #0]
 8019b0c:	6042      	str	r2, [r0, #4]
 8019b0e:	4770      	bx	lr

08019b10 <rmw_subscription_content_filter_options_fini>:
 8019b10:	b1b0      	cbz	r0, 8019b40 <rmw_subscription_content_filter_options_fini+0x30>
 8019b12:	b538      	push	{r3, r4, r5, lr}
 8019b14:	4604      	mov	r4, r0
 8019b16:	4608      	mov	r0, r1
 8019b18:	460d      	mov	r5, r1
 8019b1a:	f7fb fe9b 	bl	8015854 <rcutils_allocator_is_valid>
 8019b1e:	b168      	cbz	r0, 8019b3c <rmw_subscription_content_filter_options_fini+0x2c>
 8019b20:	6820      	ldr	r0, [r4, #0]
 8019b22:	b120      	cbz	r0, 8019b2e <rmw_subscription_content_filter_options_fini+0x1e>
 8019b24:	686b      	ldr	r3, [r5, #4]
 8019b26:	6929      	ldr	r1, [r5, #16]
 8019b28:	4798      	blx	r3
 8019b2a:	2300      	movs	r3, #0
 8019b2c:	6023      	str	r3, [r4, #0]
 8019b2e:	1d20      	adds	r0, r4, #4
 8019b30:	f006 fac8 	bl	80200c4 <rcutils_string_array_fini>
 8019b34:	3800      	subs	r0, #0
 8019b36:	bf18      	it	ne
 8019b38:	2001      	movne	r0, #1
 8019b3a:	bd38      	pop	{r3, r4, r5, pc}
 8019b3c:	200b      	movs	r0, #11
 8019b3e:	bd38      	pop	{r3, r4, r5, pc}
 8019b40:	200b      	movs	r0, #11
 8019b42:	4770      	bx	lr

08019b44 <rmw_get_default_subscription_options>:
 8019b44:	2200      	movs	r2, #0
 8019b46:	e9c0 2200 	strd	r2, r2, [r0]
 8019b4a:	6082      	str	r2, [r0, #8]
 8019b4c:	4770      	bx	lr
 8019b4e:	bf00      	nop

08019b50 <rmw_get_zero_initialized_message_info>:
 8019b50:	b510      	push	{r4, lr}
 8019b52:	4604      	mov	r4, r0
 8019b54:	2240      	movs	r2, #64	@ 0x40
 8019b56:	2100      	movs	r1, #0
 8019b58:	f007 ffc0 	bl	8021adc <memset>
 8019b5c:	4620      	mov	r0, r4
 8019b5e:	bd10      	pop	{r4, pc}

08019b60 <rmw_validate_full_topic_name>:
 8019b60:	2800      	cmp	r0, #0
 8019b62:	d05d      	beq.n	8019c20 <rmw_validate_full_topic_name+0xc0>
 8019b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b68:	460d      	mov	r5, r1
 8019b6a:	2900      	cmp	r1, #0
 8019b6c:	d05a      	beq.n	8019c24 <rmw_validate_full_topic_name+0xc4>
 8019b6e:	4604      	mov	r4, r0
 8019b70:	4616      	mov	r6, r2
 8019b72:	f7e6 fbbf 	bl	80002f4 <strlen>
 8019b76:	b150      	cbz	r0, 8019b8e <rmw_validate_full_topic_name+0x2e>
 8019b78:	7823      	ldrb	r3, [r4, #0]
 8019b7a:	2b2f      	cmp	r3, #47	@ 0x2f
 8019b7c:	d00e      	beq.n	8019b9c <rmw_validate_full_topic_name+0x3c>
 8019b7e:	2302      	movs	r3, #2
 8019b80:	602b      	str	r3, [r5, #0]
 8019b82:	b146      	cbz	r6, 8019b96 <rmw_validate_full_topic_name+0x36>
 8019b84:	2300      	movs	r3, #0
 8019b86:	4618      	mov	r0, r3
 8019b88:	6033      	str	r3, [r6, #0]
 8019b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b8e:	2301      	movs	r3, #1
 8019b90:	602b      	str	r3, [r5, #0]
 8019b92:	2e00      	cmp	r6, #0
 8019b94:	d1f6      	bne.n	8019b84 <rmw_validate_full_topic_name+0x24>
 8019b96:	2000      	movs	r0, #0
 8019b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b9c:	1e43      	subs	r3, r0, #1
 8019b9e:	5ce2      	ldrb	r2, [r4, r3]
 8019ba0:	2a2f      	cmp	r2, #47	@ 0x2f
 8019ba2:	d041      	beq.n	8019c28 <rmw_validate_full_topic_name+0xc8>
 8019ba4:	1e62      	subs	r2, r4, #1
 8019ba6:	f1c4 0e01 	rsb	lr, r4, #1
 8019baa:	eb02 0800 	add.w	r8, r2, r0
 8019bae:	eb0e 0702 	add.w	r7, lr, r2
 8019bb2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8019bb6:	f023 0120 	bic.w	r1, r3, #32
 8019bba:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 8019bbe:	3941      	subs	r1, #65	@ 0x41
 8019bc0:	2919      	cmp	r1, #25
 8019bc2:	d90f      	bls.n	8019be4 <rmw_validate_full_topic_name+0x84>
 8019bc4:	f1bc 0f0a 	cmp.w	ip, #10
 8019bc8:	d90c      	bls.n	8019be4 <rmw_validate_full_topic_name+0x84>
 8019bca:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 8019bce:	fab3 f383 	clz	r3, r3
 8019bd2:	095b      	lsrs	r3, r3, #5
 8019bd4:	b933      	cbnz	r3, 8019be4 <rmw_validate_full_topic_name+0x84>
 8019bd6:	2204      	movs	r2, #4
 8019bd8:	602a      	str	r2, [r5, #0]
 8019bda:	2e00      	cmp	r6, #0
 8019bdc:	d0db      	beq.n	8019b96 <rmw_validate_full_topic_name+0x36>
 8019bde:	4618      	mov	r0, r3
 8019be0:	6037      	str	r7, [r6, #0]
 8019be2:	e7d2      	b.n	8019b8a <rmw_validate_full_topic_name+0x2a>
 8019be4:	4542      	cmp	r2, r8
 8019be6:	d1e2      	bne.n	8019bae <rmw_validate_full_topic_name+0x4e>
 8019be8:	2301      	movs	r3, #1
 8019bea:	4f1a      	ldr	r7, [pc, #104]	@ (8019c54 <rmw_validate_full_topic_name+0xf4>)
 8019bec:	e004      	b.n	8019bf8 <rmw_validate_full_topic_name+0x98>
 8019bee:	4298      	cmp	r0, r3
 8019bf0:	f104 0401 	add.w	r4, r4, #1
 8019bf4:	4613      	mov	r3, r2
 8019bf6:	d91c      	bls.n	8019c32 <rmw_validate_full_topic_name+0xd2>
 8019bf8:	4298      	cmp	r0, r3
 8019bfa:	f103 0201 	add.w	r2, r3, #1
 8019bfe:	d0f6      	beq.n	8019bee <rmw_validate_full_topic_name+0x8e>
 8019c00:	7821      	ldrb	r1, [r4, #0]
 8019c02:	292f      	cmp	r1, #47	@ 0x2f
 8019c04:	d1f3      	bne.n	8019bee <rmw_validate_full_topic_name+0x8e>
 8019c06:	7861      	ldrb	r1, [r4, #1]
 8019c08:	292f      	cmp	r1, #47	@ 0x2f
 8019c0a:	d01e      	beq.n	8019c4a <rmw_validate_full_topic_name+0xea>
 8019c0c:	5dc9      	ldrb	r1, [r1, r7]
 8019c0e:	0749      	lsls	r1, r1, #29
 8019c10:	d5ed      	bpl.n	8019bee <rmw_validate_full_topic_name+0x8e>
 8019c12:	2206      	movs	r2, #6
 8019c14:	602a      	str	r2, [r5, #0]
 8019c16:	2e00      	cmp	r6, #0
 8019c18:	d0bd      	beq.n	8019b96 <rmw_validate_full_topic_name+0x36>
 8019c1a:	2000      	movs	r0, #0
 8019c1c:	6033      	str	r3, [r6, #0]
 8019c1e:	e7b4      	b.n	8019b8a <rmw_validate_full_topic_name+0x2a>
 8019c20:	200b      	movs	r0, #11
 8019c22:	4770      	bx	lr
 8019c24:	200b      	movs	r0, #11
 8019c26:	e7b0      	b.n	8019b8a <rmw_validate_full_topic_name+0x2a>
 8019c28:	2203      	movs	r2, #3
 8019c2a:	602a      	str	r2, [r5, #0]
 8019c2c:	2e00      	cmp	r6, #0
 8019c2e:	d1f4      	bne.n	8019c1a <rmw_validate_full_topic_name+0xba>
 8019c30:	e7b1      	b.n	8019b96 <rmw_validate_full_topic_name+0x36>
 8019c32:	28f7      	cmp	r0, #247	@ 0xf7
 8019c34:	d803      	bhi.n	8019c3e <rmw_validate_full_topic_name+0xde>
 8019c36:	2300      	movs	r3, #0
 8019c38:	4618      	mov	r0, r3
 8019c3a:	602b      	str	r3, [r5, #0]
 8019c3c:	e7a5      	b.n	8019b8a <rmw_validate_full_topic_name+0x2a>
 8019c3e:	2307      	movs	r3, #7
 8019c40:	602b      	str	r3, [r5, #0]
 8019c42:	2e00      	cmp	r6, #0
 8019c44:	d0a7      	beq.n	8019b96 <rmw_validate_full_topic_name+0x36>
 8019c46:	23f6      	movs	r3, #246	@ 0xf6
 8019c48:	e7e7      	b.n	8019c1a <rmw_validate_full_topic_name+0xba>
 8019c4a:	2205      	movs	r2, #5
 8019c4c:	602a      	str	r2, [r5, #0]
 8019c4e:	2e00      	cmp	r6, #0
 8019c50:	d1e3      	bne.n	8019c1a <rmw_validate_full_topic_name+0xba>
 8019c52:	e7a0      	b.n	8019b96 <rmw_validate_full_topic_name+0x36>
 8019c54:	0802515e 	.word	0x0802515e

08019c58 <rmw_validate_namespace_with_size>:
 8019c58:	2800      	cmp	r0, #0
 8019c5a:	d043      	beq.n	8019ce4 <rmw_validate_namespace_with_size+0x8c>
 8019c5c:	b570      	push	{r4, r5, r6, lr}
 8019c5e:	4614      	mov	r4, r2
 8019c60:	b0c2      	sub	sp, #264	@ 0x108
 8019c62:	b32a      	cbz	r2, 8019cb0 <rmw_validate_namespace_with_size+0x58>
 8019c64:	2901      	cmp	r1, #1
 8019c66:	460d      	mov	r5, r1
 8019c68:	461e      	mov	r6, r3
 8019c6a:	d102      	bne.n	8019c72 <rmw_validate_namespace_with_size+0x1a>
 8019c6c:	7803      	ldrb	r3, [r0, #0]
 8019c6e:	2b2f      	cmp	r3, #47	@ 0x2f
 8019c70:	d012      	beq.n	8019c98 <rmw_validate_namespace_with_size+0x40>
 8019c72:	aa01      	add	r2, sp, #4
 8019c74:	4669      	mov	r1, sp
 8019c76:	f7ff ff73 	bl	8019b60 <rmw_validate_full_topic_name>
 8019c7a:	b980      	cbnz	r0, 8019c9e <rmw_validate_namespace_with_size+0x46>
 8019c7c:	9a00      	ldr	r2, [sp, #0]
 8019c7e:	b14a      	cbz	r2, 8019c94 <rmw_validate_namespace_with_size+0x3c>
 8019c80:	2a07      	cmp	r2, #7
 8019c82:	d007      	beq.n	8019c94 <rmw_validate_namespace_with_size+0x3c>
 8019c84:	1e53      	subs	r3, r2, #1
 8019c86:	2b05      	cmp	r3, #5
 8019c88:	d82e      	bhi.n	8019ce8 <rmw_validate_namespace_with_size+0x90>
 8019c8a:	e8df f003 	tbb	[pc, r3]
 8019c8e:	1f1c      	.short	0x1f1c
 8019c90:	14282522 	.word	0x14282522
 8019c94:	2df5      	cmp	r5, #245	@ 0xf5
 8019c96:	d804      	bhi.n	8019ca2 <rmw_validate_namespace_with_size+0x4a>
 8019c98:	2300      	movs	r3, #0
 8019c9a:	4618      	mov	r0, r3
 8019c9c:	6023      	str	r3, [r4, #0]
 8019c9e:	b042      	add	sp, #264	@ 0x108
 8019ca0:	bd70      	pop	{r4, r5, r6, pc}
 8019ca2:	2307      	movs	r3, #7
 8019ca4:	6023      	str	r3, [r4, #0]
 8019ca6:	2e00      	cmp	r6, #0
 8019ca8:	d0f9      	beq.n	8019c9e <rmw_validate_namespace_with_size+0x46>
 8019caa:	23f4      	movs	r3, #244	@ 0xf4
 8019cac:	6033      	str	r3, [r6, #0]
 8019cae:	e7f6      	b.n	8019c9e <rmw_validate_namespace_with_size+0x46>
 8019cb0:	200b      	movs	r0, #11
 8019cb2:	b042      	add	sp, #264	@ 0x108
 8019cb4:	bd70      	pop	{r4, r5, r6, pc}
 8019cb6:	2306      	movs	r3, #6
 8019cb8:	6023      	str	r3, [r4, #0]
 8019cba:	2e00      	cmp	r6, #0
 8019cbc:	d0ef      	beq.n	8019c9e <rmw_validate_namespace_with_size+0x46>
 8019cbe:	9b01      	ldr	r3, [sp, #4]
 8019cc0:	6033      	str	r3, [r6, #0]
 8019cc2:	b042      	add	sp, #264	@ 0x108
 8019cc4:	bd70      	pop	{r4, r5, r6, pc}
 8019cc6:	2301      	movs	r3, #1
 8019cc8:	6023      	str	r3, [r4, #0]
 8019cca:	e7f6      	b.n	8019cba <rmw_validate_namespace_with_size+0x62>
 8019ccc:	2302      	movs	r3, #2
 8019cce:	6023      	str	r3, [r4, #0]
 8019cd0:	e7f3      	b.n	8019cba <rmw_validate_namespace_with_size+0x62>
 8019cd2:	2303      	movs	r3, #3
 8019cd4:	6023      	str	r3, [r4, #0]
 8019cd6:	e7f0      	b.n	8019cba <rmw_validate_namespace_with_size+0x62>
 8019cd8:	2304      	movs	r3, #4
 8019cda:	6023      	str	r3, [r4, #0]
 8019cdc:	e7ed      	b.n	8019cba <rmw_validate_namespace_with_size+0x62>
 8019cde:	2305      	movs	r3, #5
 8019ce0:	6023      	str	r3, [r4, #0]
 8019ce2:	e7ea      	b.n	8019cba <rmw_validate_namespace_with_size+0x62>
 8019ce4:	200b      	movs	r0, #11
 8019ce6:	4770      	bx	lr
 8019ce8:	4613      	mov	r3, r2
 8019cea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8019cee:	4a03      	ldr	r2, [pc, #12]	@ (8019cfc <rmw_validate_namespace_with_size+0xa4>)
 8019cf0:	a802      	add	r0, sp, #8
 8019cf2:	f7ff fd25 	bl	8019740 <rcutils_snprintf>
 8019cf6:	2001      	movs	r0, #1
 8019cf8:	e7d1      	b.n	8019c9e <rmw_validate_namespace_with_size+0x46>
 8019cfa:	bf00      	nop
 8019cfc:	080249a4 	.word	0x080249a4

08019d00 <rmw_validate_namespace>:
 8019d00:	b168      	cbz	r0, 8019d1e <rmw_validate_namespace+0x1e>
 8019d02:	b570      	push	{r4, r5, r6, lr}
 8019d04:	460d      	mov	r5, r1
 8019d06:	4616      	mov	r6, r2
 8019d08:	4604      	mov	r4, r0
 8019d0a:	f7e6 faf3 	bl	80002f4 <strlen>
 8019d0e:	4633      	mov	r3, r6
 8019d10:	4601      	mov	r1, r0
 8019d12:	462a      	mov	r2, r5
 8019d14:	4620      	mov	r0, r4
 8019d16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019d1a:	f7ff bf9d 	b.w	8019c58 <rmw_validate_namespace_with_size>
 8019d1e:	200b      	movs	r0, #11
 8019d20:	4770      	bx	lr
 8019d22:	bf00      	nop

08019d24 <rmw_namespace_validation_result_string>:
 8019d24:	2807      	cmp	r0, #7
 8019d26:	d803      	bhi.n	8019d30 <rmw_namespace_validation_result_string+0xc>
 8019d28:	4b02      	ldr	r3, [pc, #8]	@ (8019d34 <rmw_namespace_validation_result_string+0x10>)
 8019d2a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8019d2e:	4770      	bx	lr
 8019d30:	4801      	ldr	r0, [pc, #4]	@ (8019d38 <rmw_namespace_validation_result_string+0x14>)
 8019d32:	4770      	bx	lr
 8019d34:	08024b9c 	.word	0x08024b9c
 8019d38:	080249f4 	.word	0x080249f4

08019d3c <rmw_validate_node_name>:
 8019d3c:	2800      	cmp	r0, #0
 8019d3e:	d042      	beq.n	8019dc6 <rmw_validate_node_name+0x8a>
 8019d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d44:	460d      	mov	r5, r1
 8019d46:	2900      	cmp	r1, #0
 8019d48:	d03f      	beq.n	8019dca <rmw_validate_node_name+0x8e>
 8019d4a:	4604      	mov	r4, r0
 8019d4c:	4616      	mov	r6, r2
 8019d4e:	f7e6 fad1 	bl	80002f4 <strlen>
 8019d52:	b310      	cbz	r0, 8019d9a <rmw_validate_node_name+0x5e>
 8019d54:	1e63      	subs	r3, r4, #1
 8019d56:	f1c4 0101 	rsb	r1, r4, #1
 8019d5a:	eb03 0800 	add.w	r8, r3, r0
 8019d5e:	18cf      	adds	r7, r1, r3
 8019d60:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8019d64:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8019d68:	f02e 0c20 	bic.w	ip, lr, #32
 8019d6c:	2a09      	cmp	r2, #9
 8019d6e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8019d72:	d905      	bls.n	8019d80 <rmw_validate_node_name+0x44>
 8019d74:	f1bc 0f19 	cmp.w	ip, #25
 8019d78:	d902      	bls.n	8019d80 <rmw_validate_node_name+0x44>
 8019d7a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8019d7e:	d114      	bne.n	8019daa <rmw_validate_node_name+0x6e>
 8019d80:	4598      	cmp	r8, r3
 8019d82:	d1ec      	bne.n	8019d5e <rmw_validate_node_name+0x22>
 8019d84:	7822      	ldrb	r2, [r4, #0]
 8019d86:	4b16      	ldr	r3, [pc, #88]	@ (8019de0 <rmw_validate_node_name+0xa4>)
 8019d88:	5cd3      	ldrb	r3, [r2, r3]
 8019d8a:	f013 0304 	ands.w	r3, r3, #4
 8019d8e:	d113      	bne.n	8019db8 <rmw_validate_node_name+0x7c>
 8019d90:	28ff      	cmp	r0, #255	@ 0xff
 8019d92:	d81c      	bhi.n	8019dce <rmw_validate_node_name+0x92>
 8019d94:	4618      	mov	r0, r3
 8019d96:	602b      	str	r3, [r5, #0]
 8019d98:	e00c      	b.n	8019db4 <rmw_validate_node_name+0x78>
 8019d9a:	2301      	movs	r3, #1
 8019d9c:	602b      	str	r3, [r5, #0]
 8019d9e:	b17e      	cbz	r6, 8019dc0 <rmw_validate_node_name+0x84>
 8019da0:	2300      	movs	r3, #0
 8019da2:	4618      	mov	r0, r3
 8019da4:	6033      	str	r3, [r6, #0]
 8019da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019daa:	2302      	movs	r3, #2
 8019dac:	602b      	str	r3, [r5, #0]
 8019dae:	b13e      	cbz	r6, 8019dc0 <rmw_validate_node_name+0x84>
 8019db0:	2000      	movs	r0, #0
 8019db2:	6037      	str	r7, [r6, #0]
 8019db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019db8:	2303      	movs	r3, #3
 8019dba:	602b      	str	r3, [r5, #0]
 8019dbc:	2e00      	cmp	r6, #0
 8019dbe:	d1ef      	bne.n	8019da0 <rmw_validate_node_name+0x64>
 8019dc0:	2000      	movs	r0, #0
 8019dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019dc6:	200b      	movs	r0, #11
 8019dc8:	4770      	bx	lr
 8019dca:	200b      	movs	r0, #11
 8019dcc:	e7f2      	b.n	8019db4 <rmw_validate_node_name+0x78>
 8019dce:	2204      	movs	r2, #4
 8019dd0:	602a      	str	r2, [r5, #0]
 8019dd2:	2e00      	cmp	r6, #0
 8019dd4:	d0f4      	beq.n	8019dc0 <rmw_validate_node_name+0x84>
 8019dd6:	22fe      	movs	r2, #254	@ 0xfe
 8019dd8:	4618      	mov	r0, r3
 8019dda:	6032      	str	r2, [r6, #0]
 8019ddc:	e7ea      	b.n	8019db4 <rmw_validate_node_name+0x78>
 8019dde:	bf00      	nop
 8019de0:	0802515e 	.word	0x0802515e

08019de4 <rmw_node_name_validation_result_string>:
 8019de4:	2804      	cmp	r0, #4
 8019de6:	d803      	bhi.n	8019df0 <rmw_node_name_validation_result_string+0xc>
 8019de8:	4b02      	ldr	r3, [pc, #8]	@ (8019df4 <rmw_node_name_validation_result_string+0x10>)
 8019dea:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8019dee:	4770      	bx	lr
 8019df0:	4801      	ldr	r0, [pc, #4]	@ (8019df8 <rmw_node_name_validation_result_string+0x14>)
 8019df2:	4770      	bx	lr
 8019df4:	08024ca8 	.word	0x08024ca8
 8019df8:	08024bbc 	.word	0x08024bbc

08019dfc <rmw_destroy_client>:
 8019dfc:	b570      	push	{r4, r5, r6, lr}
 8019dfe:	b128      	cbz	r0, 8019e0c <rmw_destroy_client+0x10>
 8019e00:	4604      	mov	r4, r0
 8019e02:	6800      	ldr	r0, [r0, #0]
 8019e04:	460d      	mov	r5, r1
 8019e06:	f001 feef 	bl	801bbe8 <is_uxrce_rmw_identifier_valid>
 8019e0a:	b910      	cbnz	r0, 8019e12 <rmw_destroy_client+0x16>
 8019e0c:	2401      	movs	r4, #1
 8019e0e:	4620      	mov	r0, r4
 8019e10:	bd70      	pop	{r4, r5, r6, pc}
 8019e12:	6863      	ldr	r3, [r4, #4]
 8019e14:	2b00      	cmp	r3, #0
 8019e16:	d0f9      	beq.n	8019e0c <rmw_destroy_client+0x10>
 8019e18:	2d00      	cmp	r5, #0
 8019e1a:	d0f7      	beq.n	8019e0c <rmw_destroy_client+0x10>
 8019e1c:	6828      	ldr	r0, [r5, #0]
 8019e1e:	f001 fee3 	bl	801bbe8 <is_uxrce_rmw_identifier_valid>
 8019e22:	2800      	cmp	r0, #0
 8019e24:	d0f2      	beq.n	8019e0c <rmw_destroy_client+0x10>
 8019e26:	686e      	ldr	r6, [r5, #4]
 8019e28:	2e00      	cmp	r6, #0
 8019e2a:	d0ef      	beq.n	8019e0c <rmw_destroy_client+0x10>
 8019e2c:	6864      	ldr	r4, [r4, #4]
 8019e2e:	6932      	ldr	r2, [r6, #16]
 8019e30:	6920      	ldr	r0, [r4, #16]
 8019e32:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019e36:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019e3a:	6819      	ldr	r1, [r3, #0]
 8019e3c:	f002 fd70 	bl	801c920 <uxr_buffer_cancel_data>
 8019e40:	4602      	mov	r2, r0
 8019e42:	6920      	ldr	r0, [r4, #16]
 8019e44:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8019e48:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8019e4c:	f001 fdba 	bl	801b9c4 <run_xrce_session>
 8019e50:	6920      	ldr	r0, [r4, #16]
 8019e52:	6932      	ldr	r2, [r6, #16]
 8019e54:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019e58:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019e5c:	6819      	ldr	r1, [r3, #0]
 8019e5e:	f002 f9fb 	bl	801c258 <uxr_buffer_delete_entity>
 8019e62:	4602      	mov	r2, r0
 8019e64:	6920      	ldr	r0, [r4, #16]
 8019e66:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8019e6a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8019e6e:	f001 fda9 	bl	801b9c4 <run_xrce_session>
 8019e72:	4603      	mov	r3, r0
 8019e74:	4628      	mov	r0, r5
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	bf14      	ite	ne
 8019e7a:	2400      	movne	r4, #0
 8019e7c:	2402      	moveq	r4, #2
 8019e7e:	f001 fc7f 	bl	801b780 <rmw_uxrce_fini_client_memory>
 8019e82:	e7c4      	b.n	8019e0e <rmw_destroy_client+0x12>

08019e84 <rmw_get_implementation_identifier>:
 8019e84:	4b01      	ldr	r3, [pc, #4]	@ (8019e8c <rmw_get_implementation_identifier+0x8>)
 8019e86:	6818      	ldr	r0, [r3, #0]
 8019e88:	4770      	bx	lr
 8019e8a:	bf00      	nop
 8019e8c:	08024ff8 	.word	0x08024ff8

08019e90 <rmw_init_options_init>:
 8019e90:	b084      	sub	sp, #16
 8019e92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e94:	b083      	sub	sp, #12
 8019e96:	ad09      	add	r5, sp, #36	@ 0x24
 8019e98:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8019e9c:	b130      	cbz	r0, 8019eac <rmw_init_options_init+0x1c>
 8019e9e:	4604      	mov	r4, r0
 8019ea0:	4628      	mov	r0, r5
 8019ea2:	f7fb fcd7 	bl	8015854 <rcutils_allocator_is_valid>
 8019ea6:	b108      	cbz	r0, 8019eac <rmw_init_options_init+0x1c>
 8019ea8:	68a6      	ldr	r6, [r4, #8]
 8019eaa:	b12e      	cbz	r6, 8019eb8 <rmw_init_options_init+0x28>
 8019eac:	200b      	movs	r0, #11
 8019eae:	b003      	add	sp, #12
 8019eb0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019eb4:	b004      	add	sp, #16
 8019eb6:	4770      	bx	lr
 8019eb8:	2200      	movs	r2, #0
 8019eba:	2300      	movs	r3, #0
 8019ebc:	f104 0c20 	add.w	ip, r4, #32
 8019ec0:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8019f5c <rmw_init_options_init+0xcc>
 8019ec4:	466f      	mov	r7, sp
 8019ec6:	e9c4 2300 	strd	r2, r3, [r4]
 8019eca:	4b20      	ldr	r3, [pc, #128]	@ (8019f4c <rmw_init_options_init+0xbc>)
 8019ecc:	681b      	ldr	r3, [r3, #0]
 8019ece:	60a3      	str	r3, [r4, #8]
 8019ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019ed2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019ed6:	682b      	ldr	r3, [r5, #0]
 8019ed8:	4638      	mov	r0, r7
 8019eda:	f8cc 3000 	str.w	r3, [ip]
 8019ede:	f8c4 e01c 	str.w	lr, [r4, #28]
 8019ee2:	60e6      	str	r6, [r4, #12]
 8019ee4:	f7ff fe10 	bl	8019b08 <rmw_get_default_security_options>
 8019ee8:	f104 0310 	add.w	r3, r4, #16
 8019eec:	2203      	movs	r2, #3
 8019eee:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019ef2:	e883 0003 	stmia.w	r3, {r0, r1}
 8019ef6:	4816      	ldr	r0, [pc, #88]	@ (8019f50 <rmw_init_options_init+0xc0>)
 8019ef8:	4916      	ldr	r1, [pc, #88]	@ (8019f54 <rmw_init_options_init+0xc4>)
 8019efa:	7626      	strb	r6, [r4, #24]
 8019efc:	f001 fb80 	bl	801b600 <rmw_uxrce_init_init_options_impl_memory>
 8019f00:	4813      	ldr	r0, [pc, #76]	@ (8019f50 <rmw_init_options_init+0xc0>)
 8019f02:	f006 fa79 	bl	80203f8 <get_memory>
 8019f06:	b1f0      	cbz	r0, 8019f46 <rmw_init_options_init+0xb6>
 8019f08:	4a13      	ldr	r2, [pc, #76]	@ (8019f58 <rmw_init_options_init+0xc8>)
 8019f0a:	6883      	ldr	r3, [r0, #8]
 8019f0c:	6851      	ldr	r1, [r2, #4]
 8019f0e:	6363      	str	r3, [r4, #52]	@ 0x34
 8019f10:	7810      	ldrb	r0, [r2, #0]
 8019f12:	6159      	str	r1, [r3, #20]
 8019f14:	68d1      	ldr	r1, [r2, #12]
 8019f16:	7418      	strb	r0, [r3, #16]
 8019f18:	61d9      	str	r1, [r3, #28]
 8019f1a:	6911      	ldr	r1, [r2, #16]
 8019f1c:	6219      	str	r1, [r3, #32]
 8019f1e:	6951      	ldr	r1, [r2, #20]
 8019f20:	6892      	ldr	r2, [r2, #8]
 8019f22:	6259      	str	r1, [r3, #36]	@ 0x24
 8019f24:	619a      	str	r2, [r3, #24]
 8019f26:	f004 fca5 	bl	801e874 <uxr_nanos>
 8019f2a:	f007 fa33 	bl	8021394 <srand>
 8019f2e:	f007 fa5f 	bl	80213f0 <rand>
 8019f32:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019f34:	6298      	str	r0, [r3, #40]	@ 0x28
 8019f36:	2800      	cmp	r0, #0
 8019f38:	d0f9      	beq.n	8019f2e <rmw_init_options_init+0x9e>
 8019f3a:	2000      	movs	r0, #0
 8019f3c:	b003      	add	sp, #12
 8019f3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019f42:	b004      	add	sp, #16
 8019f44:	4770      	bx	lr
 8019f46:	2001      	movs	r0, #1
 8019f48:	e7b1      	b.n	8019eae <rmw_init_options_init+0x1e>
 8019f4a:	bf00      	nop
 8019f4c:	08024ff8 	.word	0x08024ff8
 8019f50:	240694fc 	.word	0x240694fc
 8019f54:	24064d98 	.word	0x24064d98
 8019f58:	2406493c 	.word	0x2406493c
 8019f5c:	08024680 	.word	0x08024680

08019f60 <rmw_init_options_copy>:
 8019f60:	2800      	cmp	r0, #0
 8019f62:	d047      	beq.n	8019ff4 <rmw_init_options_copy+0x94>
 8019f64:	b570      	push	{r4, r5, r6, lr}
 8019f66:	460d      	mov	r5, r1
 8019f68:	b149      	cbz	r1, 8019f7e <rmw_init_options_copy+0x1e>
 8019f6a:	4604      	mov	r4, r0
 8019f6c:	6880      	ldr	r0, [r0, #8]
 8019f6e:	b120      	cbz	r0, 8019f7a <rmw_init_options_copy+0x1a>
 8019f70:	4b22      	ldr	r3, [pc, #136]	@ (8019ffc <rmw_init_options_copy+0x9c>)
 8019f72:	6819      	ldr	r1, [r3, #0]
 8019f74:	f7e6 f9b4 	bl	80002e0 <strcmp>
 8019f78:	bba8      	cbnz	r0, 8019fe6 <rmw_init_options_copy+0x86>
 8019f7a:	68ab      	ldr	r3, [r5, #8]
 8019f7c:	b11b      	cbz	r3, 8019f86 <rmw_init_options_copy+0x26>
 8019f7e:	f04f 0c0b 	mov.w	ip, #11
 8019f82:	4660      	mov	r0, ip
 8019f84:	bd70      	pop	{r4, r5, r6, pc}
 8019f86:	4623      	mov	r3, r4
 8019f88:	462a      	mov	r2, r5
 8019f8a:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8019f8e:	f8d3 e000 	ldr.w	lr, [r3]
 8019f92:	3310      	adds	r3, #16
 8019f94:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8019f98:	3210      	adds	r2, #16
 8019f9a:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8019f9e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8019fa2:	42b3      	cmp	r3, r6
 8019fa4:	f842 ec10 	str.w	lr, [r2, #-16]
 8019fa8:	f842 cc0c 	str.w	ip, [r2, #-12]
 8019fac:	f842 0c08 	str.w	r0, [r2, #-8]
 8019fb0:	f842 1c04 	str.w	r1, [r2, #-4]
 8019fb4:	d1eb      	bne.n	8019f8e <rmw_init_options_copy+0x2e>
 8019fb6:	6819      	ldr	r1, [r3, #0]
 8019fb8:	685b      	ldr	r3, [r3, #4]
 8019fba:	4811      	ldr	r0, [pc, #68]	@ (801a000 <rmw_init_options_copy+0xa0>)
 8019fbc:	6011      	str	r1, [r2, #0]
 8019fbe:	6053      	str	r3, [r2, #4]
 8019fc0:	f006 fa1a 	bl	80203f8 <get_memory>
 8019fc4:	b198      	cbz	r0, 8019fee <rmw_init_options_copy+0x8e>
 8019fc6:	6883      	ldr	r3, [r0, #8]
 8019fc8:	f04f 0c00 	mov.w	ip, #0
 8019fcc:	636b      	str	r3, [r5, #52]	@ 0x34
 8019fce:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8019fd0:	f103 0410 	add.w	r4, r3, #16
 8019fd4:	3510      	adds	r5, #16
 8019fd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019fd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019fda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019fde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019fe2:	4660      	mov	r0, ip
 8019fe4:	bd70      	pop	{r4, r5, r6, pc}
 8019fe6:	f04f 0c0c 	mov.w	ip, #12
 8019fea:	4660      	mov	r0, ip
 8019fec:	bd70      	pop	{r4, r5, r6, pc}
 8019fee:	f04f 0c01 	mov.w	ip, #1
 8019ff2:	e7c6      	b.n	8019f82 <rmw_init_options_copy+0x22>
 8019ff4:	f04f 0c0b 	mov.w	ip, #11
 8019ff8:	4660      	mov	r0, ip
 8019ffa:	4770      	bx	lr
 8019ffc:	08024ff8 	.word	0x08024ff8
 801a000:	240694fc 	.word	0x240694fc

0801a004 <rmw_init_options_fini>:
 801a004:	b510      	push	{r4, lr}
 801a006:	b08e      	sub	sp, #56	@ 0x38
 801a008:	b388      	cbz	r0, 801a06e <rmw_init_options_fini+0x6a>
 801a00a:	4604      	mov	r4, r0
 801a00c:	3020      	adds	r0, #32
 801a00e:	f7fb fc21 	bl	8015854 <rcutils_allocator_is_valid>
 801a012:	b360      	cbz	r0, 801a06e <rmw_init_options_fini+0x6a>
 801a014:	68a0      	ldr	r0, [r4, #8]
 801a016:	b120      	cbz	r0, 801a022 <rmw_init_options_fini+0x1e>
 801a018:	4b1a      	ldr	r3, [pc, #104]	@ (801a084 <rmw_init_options_fini+0x80>)
 801a01a:	6819      	ldr	r1, [r3, #0]
 801a01c:	f7e6 f960 	bl	80002e0 <strcmp>
 801a020:	bb68      	cbnz	r0, 801a07e <rmw_init_options_fini+0x7a>
 801a022:	4b19      	ldr	r3, [pc, #100]	@ (801a088 <rmw_init_options_fini+0x84>)
 801a024:	6819      	ldr	r1, [r3, #0]
 801a026:	b331      	cbz	r1, 801a076 <rmw_init_options_fini+0x72>
 801a028:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801a02a:	e001      	b.n	801a030 <rmw_init_options_fini+0x2c>
 801a02c:	6849      	ldr	r1, [r1, #4]
 801a02e:	b311      	cbz	r1, 801a076 <rmw_init_options_fini+0x72>
 801a030:	688b      	ldr	r3, [r1, #8]
 801a032:	429a      	cmp	r2, r3
 801a034:	d1fa      	bne.n	801a02c <rmw_init_options_fini+0x28>
 801a036:	4814      	ldr	r0, [pc, #80]	@ (801a088 <rmw_init_options_fini+0x84>)
 801a038:	f006 f9ee 	bl	8020418 <put_memory>
 801a03c:	4668      	mov	r0, sp
 801a03e:	f7ff fd4f 	bl	8019ae0 <rmw_get_zero_initialized_init_options>
 801a042:	46ee      	mov	lr, sp
 801a044:	46a4      	mov	ip, r4
 801a046:	2400      	movs	r4, #0
 801a048:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a04c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a050:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a054:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a058:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a05c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a060:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801a064:	e88c 0003 	stmia.w	ip, {r0, r1}
 801a068:	4620      	mov	r0, r4
 801a06a:	b00e      	add	sp, #56	@ 0x38
 801a06c:	bd10      	pop	{r4, pc}
 801a06e:	240b      	movs	r4, #11
 801a070:	4620      	mov	r0, r4
 801a072:	b00e      	add	sp, #56	@ 0x38
 801a074:	bd10      	pop	{r4, pc}
 801a076:	2401      	movs	r4, #1
 801a078:	4620      	mov	r0, r4
 801a07a:	b00e      	add	sp, #56	@ 0x38
 801a07c:	bd10      	pop	{r4, pc}
 801a07e:	240c      	movs	r4, #12
 801a080:	e7f2      	b.n	801a068 <rmw_init_options_fini+0x64>
 801a082:	bf00      	nop
 801a084:	08024ff8 	.word	0x08024ff8
 801a088:	240694fc 	.word	0x240694fc

0801a08c <rmw_init>:
 801a08c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a090:	b083      	sub	sp, #12
 801a092:	2800      	cmp	r0, #0
 801a094:	f000 80d3 	beq.w	801a23e <rmw_init+0x1b2>
 801a098:	460e      	mov	r6, r1
 801a09a:	2900      	cmp	r1, #0
 801a09c:	f000 80cf 	beq.w	801a23e <rmw_init+0x1b2>
 801a0a0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801a0a2:	4605      	mov	r5, r0
 801a0a4:	2b00      	cmp	r3, #0
 801a0a6:	f000 80ca 	beq.w	801a23e <rmw_init+0x1b2>
 801a0aa:	4b78      	ldr	r3, [pc, #480]	@ (801a28c <rmw_init+0x200>)
 801a0ac:	6880      	ldr	r0, [r0, #8]
 801a0ae:	681f      	ldr	r7, [r3, #0]
 801a0b0:	b128      	cbz	r0, 801a0be <rmw_init+0x32>
 801a0b2:	4639      	mov	r1, r7
 801a0b4:	f7e6 f914 	bl	80002e0 <strcmp>
 801a0b8:	2800      	cmp	r0, #0
 801a0ba:	f040 80ca 	bne.w	801a252 <rmw_init+0x1c6>
 801a0be:	4c74      	ldr	r4, [pc, #464]	@ (801a290 <rmw_init+0x204>)
 801a0c0:	f04f 0800 	mov.w	r8, #0
 801a0c4:	4973      	ldr	r1, [pc, #460]	@ (801a294 <rmw_init+0x208>)
 801a0c6:	4874      	ldr	r0, [pc, #464]	@ (801a298 <rmw_init+0x20c>)
 801a0c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a0cc:	60b7      	str	r7, [r6, #8]
 801a0ce:	e9c6 2300 	strd	r2, r3, [r6]
 801a0d2:	68eb      	ldr	r3, [r5, #12]
 801a0d4:	2201      	movs	r2, #1
 801a0d6:	64b3      	str	r3, [r6, #72]	@ 0x48
 801a0d8:	f001 fa32 	bl	801b540 <rmw_uxrce_init_session_memory>
 801a0dc:	4620      	mov	r0, r4
 801a0de:	2204      	movs	r2, #4
 801a0e0:	496e      	ldr	r1, [pc, #440]	@ (801a29c <rmw_init+0x210>)
 801a0e2:	f001 fa6d 	bl	801b5c0 <rmw_uxrce_init_static_input_buffer_memory>
 801a0e6:	486c      	ldr	r0, [pc, #432]	@ (801a298 <rmw_init+0x20c>)
 801a0e8:	f884 800d 	strb.w	r8, [r4, #13]
 801a0ec:	f006 f984 	bl	80203f8 <get_memory>
 801a0f0:	2800      	cmp	r0, #0
 801a0f2:	f000 80a9 	beq.w	801a248 <rmw_init+0x1bc>
 801a0f6:	6884      	ldr	r4, [r0, #8]
 801a0f8:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 801a0fa:	f104 0910 	add.w	r9, r4, #16
 801a0fe:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 801a100:	f890 c010 	ldrb.w	ip, [r0, #16]
 801a104:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 801a108:	9101      	str	r1, [sp, #4]
 801a10a:	4661      	mov	r1, ip
 801a10c:	6a00      	ldr	r0, [r0, #32]
 801a10e:	9000      	str	r0, [sp, #0]
 801a110:	4648      	mov	r0, r9
 801a112:	f002 fb59 	bl	801c7c8 <uxr_set_custom_transport_callbacks>
 801a116:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801a11a:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 801a11e:	4960      	ldr	r1, [pc, #384]	@ (801a2a0 <rmw_init+0x214>)
 801a120:	4860      	ldr	r0, [pc, #384]	@ (801a2a4 <rmw_init+0x218>)
 801a122:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 801a126:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 801a12a:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 801a12e:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 801a132:	2201      	movs	r2, #1
 801a134:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 801a138:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 801a13c:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 801a140:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 801a144:	64f4      	str	r4, [r6, #76]	@ 0x4c
 801a146:	f001 f9db 	bl	801b500 <rmw_uxrce_init_node_memory>
 801a14a:	2205      	movs	r2, #5
 801a14c:	4956      	ldr	r1, [pc, #344]	@ (801a2a8 <rmw_init+0x21c>)
 801a14e:	4857      	ldr	r0, [pc, #348]	@ (801a2ac <rmw_init+0x220>)
 801a150:	f001 f9b6 	bl	801b4c0 <rmw_uxrce_init_subscription_memory>
 801a154:	220a      	movs	r2, #10
 801a156:	4956      	ldr	r1, [pc, #344]	@ (801a2b0 <rmw_init+0x224>)
 801a158:	4856      	ldr	r0, [pc, #344]	@ (801a2b4 <rmw_init+0x228>)
 801a15a:	f001 f991 	bl	801b480 <rmw_uxrce_init_publisher_memory>
 801a15e:	2201      	movs	r2, #1
 801a160:	4955      	ldr	r1, [pc, #340]	@ (801a2b8 <rmw_init+0x22c>)
 801a162:	4856      	ldr	r0, [pc, #344]	@ (801a2bc <rmw_init+0x230>)
 801a164:	f001 f94c 	bl	801b400 <rmw_uxrce_init_service_memory>
 801a168:	2201      	movs	r2, #1
 801a16a:	4955      	ldr	r1, [pc, #340]	@ (801a2c0 <rmw_init+0x234>)
 801a16c:	4855      	ldr	r0, [pc, #340]	@ (801a2c4 <rmw_init+0x238>)
 801a16e:	f001 f967 	bl	801b440 <rmw_uxrce_init_client_memory>
 801a172:	220f      	movs	r2, #15
 801a174:	4954      	ldr	r1, [pc, #336]	@ (801a2c8 <rmw_init+0x23c>)
 801a176:	4855      	ldr	r0, [pc, #340]	@ (801a2cc <rmw_init+0x240>)
 801a178:	f001 fa02 	bl	801b580 <rmw_uxrce_init_topic_memory>
 801a17c:	2203      	movs	r2, #3
 801a17e:	4954      	ldr	r1, [pc, #336]	@ (801a2d0 <rmw_init+0x244>)
 801a180:	4854      	ldr	r0, [pc, #336]	@ (801a2d4 <rmw_init+0x248>)
 801a182:	f001 fa3d 	bl	801b600 <rmw_uxrce_init_init_options_impl_memory>
 801a186:	2204      	movs	r2, #4
 801a188:	4953      	ldr	r1, [pc, #332]	@ (801a2d8 <rmw_init+0x24c>)
 801a18a:	4854      	ldr	r0, [pc, #336]	@ (801a2dc <rmw_init+0x250>)
 801a18c:	f001 fa58 	bl	801b640 <rmw_uxrce_init_wait_set_memory>
 801a190:	4953      	ldr	r1, [pc, #332]	@ (801a2e0 <rmw_init+0x254>)
 801a192:	4854      	ldr	r0, [pc, #336]	@ (801a2e4 <rmw_init+0x258>)
 801a194:	2204      	movs	r2, #4
 801a196:	f001 fa73 	bl	801b680 <rmw_uxrce_init_guard_condition_memory>
 801a19a:	4642      	mov	r2, r8
 801a19c:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 801a19e:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801a1a0:	f000 ff94 	bl	801b0cc <rmw_uxrce_transport_init>
 801a1a4:	4607      	mov	r7, r0
 801a1a6:	2800      	cmp	r0, #0
 801a1a8:	d158      	bne.n	801a25c <rmw_init+0x1d0>
 801a1aa:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801a1ac:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 801a1b0:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 801a1b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801a1b6:	4628      	mov	r0, r5
 801a1b8:	f002 fd36 	bl	801cc28 <uxr_init_session>
 801a1bc:	4622      	mov	r2, r4
 801a1be:	494a      	ldr	r1, [pc, #296]	@ (801a2e8 <rmw_init+0x25c>)
 801a1c0:	4628      	mov	r0, r5
 801a1c2:	f002 fd55 	bl	801cc70 <uxr_set_topic_callback>
 801a1c6:	463a      	mov	r2, r7
 801a1c8:	4948      	ldr	r1, [pc, #288]	@ (801a2ec <rmw_init+0x260>)
 801a1ca:	4628      	mov	r0, r5
 801a1cc:	f002 fd4c 	bl	801cc68 <uxr_set_status_callback>
 801a1d0:	463a      	mov	r2, r7
 801a1d2:	4947      	ldr	r1, [pc, #284]	@ (801a2f0 <rmw_init+0x264>)
 801a1d4:	4628      	mov	r0, r5
 801a1d6:	f002 fd4f 	bl	801cc78 <uxr_set_request_callback>
 801a1da:	463a      	mov	r2, r7
 801a1dc:	4945      	ldr	r1, [pc, #276]	@ (801a2f4 <rmw_init+0x268>)
 801a1de:	4628      	mov	r0, r5
 801a1e0:	f002 fd4e 	bl	801cc80 <uxr_set_reply_callback>
 801a1e4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801a1e8:	2304      	movs	r3, #4
 801a1ea:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 801a1ee:	0092      	lsls	r2, r2, #2
 801a1f0:	4628      	mov	r0, r5
 801a1f2:	f002 fd85 	bl	801cd00 <uxr_create_input_reliable_stream>
 801a1f6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801a1fa:	2304      	movs	r3, #4
 801a1fc:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 801a200:	0092      	lsls	r2, r2, #2
 801a202:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801a206:	4628      	mov	r0, r5
 801a208:	f002 fd50 	bl	801ccac <uxr_create_output_reliable_stream>
 801a20c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 801a210:	4628      	mov	r0, r5
 801a212:	f002 fd6f 	bl	801ccf4 <uxr_create_input_best_effort_stream>
 801a216:	f241 3194 	movw	r1, #5012	@ 0x1394
 801a21a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801a21e:	4628      	mov	r0, r5
 801a220:	4421      	add	r1, r4
 801a222:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801a226:	f002 fd2f 	bl	801cc88 <uxr_create_output_best_effort_stream>
 801a22a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801a22e:	4628      	mov	r0, r5
 801a230:	f003 fab8 	bl	801d7a4 <uxr_create_session>
 801a234:	b1f8      	cbz	r0, 801a276 <rmw_init+0x1ea>
 801a236:	4638      	mov	r0, r7
 801a238:	b003      	add	sp, #12
 801a23a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a23e:	270b      	movs	r7, #11
 801a240:	4638      	mov	r0, r7
 801a242:	b003      	add	sp, #12
 801a244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a248:	2701      	movs	r7, #1
 801a24a:	4638      	mov	r0, r7
 801a24c:	b003      	add	sp, #12
 801a24e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a252:	270c      	movs	r7, #12
 801a254:	4638      	mov	r0, r7
 801a256:	b003      	add	sp, #12
 801a258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a25c:	4648      	mov	r0, r9
 801a25e:	f002 faf1 	bl	801c844 <uxr_close_custom_transport>
 801a262:	4621      	mov	r1, r4
 801a264:	480c      	ldr	r0, [pc, #48]	@ (801a298 <rmw_init+0x20c>)
 801a266:	f006 f8d7 	bl	8020418 <put_memory>
 801a26a:	4638      	mov	r0, r7
 801a26c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 801a270:	b003      	add	sp, #12
 801a272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a276:	4648      	mov	r0, r9
 801a278:	f002 fae4 	bl	801c844 <uxr_close_custom_transport>
 801a27c:	4621      	mov	r1, r4
 801a27e:	4806      	ldr	r0, [pc, #24]	@ (801a298 <rmw_init+0x20c>)
 801a280:	f006 f8ca 	bl	8020418 <put_memory>
 801a284:	64f7      	str	r7, [r6, #76]	@ 0x4c
 801a286:	2701      	movs	r7, #1
 801a288:	e7d5      	b.n	801a236 <rmw_init+0x1aa>
 801a28a:	bf00      	nop
 801a28c:	08024ff8 	.word	0x08024ff8
 801a290:	2406954c 	.word	0x2406954c
 801a294:	240657f8 	.word	0x240657f8
 801a298:	2406953c 	.word	0x2406953c
 801a29c:	24066da0 	.word	0x24066da0
 801a2a0:	24064e1c 	.word	0x24064e1c
 801a2a4:	2406950c 	.word	0x2406950c
 801a2a8:	24068ea0 	.word	0x24068ea0
 801a2ac:	2406955c 	.word	0x2406955c
 801a2b0:	24064ec0 	.word	0x24064ec0
 801a2b4:	2406951c 	.word	0x2406951c
 801a2b8:	24065730 	.word	0x24065730
 801a2bc:	2406952c 	.word	0x2406952c
 801a2c0:	24064c50 	.word	0x24064c50
 801a2c4:	24064c40 	.word	0x24064c40
 801a2c8:	240692d8 	.word	0x240692d8
 801a2cc:	2406956c 	.word	0x2406956c
 801a2d0:	24064d98 	.word	0x24064d98
 801a2d4:	240694fc 	.word	0x240694fc
 801a2d8:	2406947c 	.word	0x2406947c
 801a2dc:	2406957c 	.word	0x2406957c
 801a2e0:	24064d18 	.word	0x24064d18
 801a2e4:	240694ec 	.word	0x240694ec
 801a2e8:	08020231 	.word	0x08020231
 801a2ec:	08020229 	.word	0x08020229
 801a2f0:	080202c9 	.word	0x080202c9
 801a2f4:	08020365 	.word	0x08020365

0801a2f8 <rmw_context_fini>:
 801a2f8:	4b17      	ldr	r3, [pc, #92]	@ (801a358 <rmw_context_fini+0x60>)
 801a2fa:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 801a2fc:	b570      	push	{r4, r5, r6, lr}
 801a2fe:	681c      	ldr	r4, [r3, #0]
 801a300:	4605      	mov	r5, r0
 801a302:	b334      	cbz	r4, 801a352 <rmw_context_fini+0x5a>
 801a304:	2600      	movs	r6, #0
 801a306:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801a30a:	6902      	ldr	r2, [r0, #16]
 801a30c:	428a      	cmp	r2, r1
 801a30e:	d018      	beq.n	801a342 <rmw_context_fini+0x4a>
 801a310:	2c00      	cmp	r4, #0
 801a312:	d1f8      	bne.n	801a306 <rmw_context_fini+0xe>
 801a314:	b189      	cbz	r1, 801a33a <rmw_context_fini+0x42>
 801a316:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 801a31a:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 801a31e:	789b      	ldrb	r3, [r3, #2]
 801a320:	2b01      	cmp	r3, #1
 801a322:	bf14      	ite	ne
 801a324:	210a      	movne	r1, #10
 801a326:	2100      	moveq	r1, #0
 801a328:	f003 fa14 	bl	801d754 <uxr_delete_session_retries>
 801a32c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801a32e:	f001 f9c7 	bl	801b6c0 <rmw_uxrce_fini_session_memory>
 801a332:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801a334:	3010      	adds	r0, #16
 801a336:	f002 fa85 	bl	801c844 <uxr_close_custom_transport>
 801a33a:	2300      	movs	r3, #0
 801a33c:	4630      	mov	r0, r6
 801a33e:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801a340:	bd70      	pop	{r4, r5, r6, pc}
 801a342:	3018      	adds	r0, #24
 801a344:	f000 f89c 	bl	801a480 <rmw_destroy_node>
 801a348:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801a34a:	4606      	mov	r6, r0
 801a34c:	2c00      	cmp	r4, #0
 801a34e:	d1da      	bne.n	801a306 <rmw_context_fini+0xe>
 801a350:	e7e0      	b.n	801a314 <rmw_context_fini+0x1c>
 801a352:	4626      	mov	r6, r4
 801a354:	e7de      	b.n	801a314 <rmw_context_fini+0x1c>
 801a356:	bf00      	nop
 801a358:	2406950c 	.word	0x2406950c

0801a35c <create_node>:
 801a35c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a360:	b083      	sub	sp, #12
 801a362:	2b00      	cmp	r3, #0
 801a364:	d064      	beq.n	801a430 <create_node+0xd4>
 801a366:	4606      	mov	r6, r0
 801a368:	4838      	ldr	r0, [pc, #224]	@ (801a44c <create_node+0xf0>)
 801a36a:	460f      	mov	r7, r1
 801a36c:	4690      	mov	r8, r2
 801a36e:	461d      	mov	r5, r3
 801a370:	f006 f842 	bl	80203f8 <get_memory>
 801a374:	2800      	cmp	r0, #0
 801a376:	d05b      	beq.n	801a430 <create_node+0xd4>
 801a378:	6884      	ldr	r4, [r0, #8]
 801a37a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801a37c:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 801a380:	f104 0518 	add.w	r5, r4, #24
 801a384:	6123      	str	r3, [r4, #16]
 801a386:	f7ff fd7d 	bl	8019e84 <rmw_get_implementation_identifier>
 801a38a:	f8c4 9020 	str.w	r9, [r4, #32]
 801a38e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801a392:	4630      	mov	r0, r6
 801a394:	f7e5 ffae 	bl	80002f4 <strlen>
 801a398:	1c42      	adds	r2, r0, #1
 801a39a:	2a3c      	cmp	r2, #60	@ 0x3c
 801a39c:	d840      	bhi.n	801a420 <create_node+0xc4>
 801a39e:	4648      	mov	r0, r9
 801a3a0:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 801a3a4:	4631      	mov	r1, r6
 801a3a6:	f007 fcb8 	bl	8021d1a <memcpy>
 801a3aa:	4638      	mov	r0, r7
 801a3ac:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 801a3b0:	f7e5 ffa0 	bl	80002f4 <strlen>
 801a3b4:	1c42      	adds	r2, r0, #1
 801a3b6:	2a3c      	cmp	r2, #60	@ 0x3c
 801a3b8:	d832      	bhi.n	801a420 <create_node+0xc4>
 801a3ba:	4639      	mov	r1, r7
 801a3bc:	4648      	mov	r0, r9
 801a3be:	f007 fcac 	bl	8021d1a <memcpy>
 801a3c2:	6923      	ldr	r3, [r4, #16]
 801a3c4:	2101      	movs	r1, #1
 801a3c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a3ca:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 801a3ce:	1842      	adds	r2, r0, r1
 801a3d0:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 801a3d4:	f002 fa3a 	bl	801c84c <uxr_object_id>
 801a3d8:	6160      	str	r0, [r4, #20]
 801a3da:	783b      	ldrb	r3, [r7, #0]
 801a3dc:	2b2f      	cmp	r3, #47	@ 0x2f
 801a3de:	d12c      	bne.n	801a43a <create_node+0xde>
 801a3e0:	787b      	ldrb	r3, [r7, #1]
 801a3e2:	bb53      	cbnz	r3, 801a43a <create_node+0xde>
 801a3e4:	4633      	mov	r3, r6
 801a3e6:	4a1a      	ldr	r2, [pc, #104]	@ (801a450 <create_node+0xf4>)
 801a3e8:	213c      	movs	r1, #60	@ 0x3c
 801a3ea:	481a      	ldr	r0, [pc, #104]	@ (801a454 <create_node+0xf8>)
 801a3ec:	f007 fa08 	bl	8021800 <sniprintf>
 801a3f0:	6920      	ldr	r0, [r4, #16]
 801a3f2:	2106      	movs	r1, #6
 801a3f4:	fa1f f388 	uxth.w	r3, r8
 801a3f8:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801a3fc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a400:	9101      	str	r1, [sp, #4]
 801a402:	4914      	ldr	r1, [pc, #80]	@ (801a454 <create_node+0xf8>)
 801a404:	9100      	str	r1, [sp, #0]
 801a406:	6811      	ldr	r1, [r2, #0]
 801a408:	6962      	ldr	r2, [r4, #20]
 801a40a:	f001 ff71 	bl	801c2f0 <uxr_buffer_create_participant_bin>
 801a40e:	4602      	mov	r2, r0
 801a410:	6920      	ldr	r0, [r4, #16]
 801a412:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801a416:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801a41a:	f001 fad3 	bl	801b9c4 <run_xrce_session>
 801a41e:	b918      	cbnz	r0, 801a428 <create_node+0xcc>
 801a420:	4628      	mov	r0, r5
 801a422:	2500      	movs	r5, #0
 801a424:	f001 f952 	bl	801b6cc <rmw_uxrce_fini_node_memory>
 801a428:	4628      	mov	r0, r5
 801a42a:	b003      	add	sp, #12
 801a42c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a430:	2500      	movs	r5, #0
 801a432:	4628      	mov	r0, r5
 801a434:	b003      	add	sp, #12
 801a436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a43a:	463b      	mov	r3, r7
 801a43c:	4a06      	ldr	r2, [pc, #24]	@ (801a458 <create_node+0xfc>)
 801a43e:	213c      	movs	r1, #60	@ 0x3c
 801a440:	9600      	str	r6, [sp, #0]
 801a442:	4804      	ldr	r0, [pc, #16]	@ (801a454 <create_node+0xf8>)
 801a444:	f007 f9dc 	bl	8021800 <sniprintf>
 801a448:	e7d2      	b.n	801a3f0 <create_node+0x94>
 801a44a:	bf00      	nop
 801a44c:	2406950c 	.word	0x2406950c
 801a450:	08024ccc 	.word	0x08024ccc
 801a454:	24064ac4 	.word	0x24064ac4
 801a458:	08024690 	.word	0x08024690

0801a45c <rmw_create_node>:
 801a45c:	468c      	mov	ip, r1
 801a45e:	4611      	mov	r1, r2
 801a460:	f1bc 0f00 	cmp.w	ip, #0
 801a464:	d00a      	beq.n	801a47c <rmw_create_node+0x20>
 801a466:	f89c 3000 	ldrb.w	r3, [ip]
 801a46a:	b13b      	cbz	r3, 801a47c <rmw_create_node+0x20>
 801a46c:	b132      	cbz	r2, 801a47c <rmw_create_node+0x20>
 801a46e:	7813      	ldrb	r3, [r2, #0]
 801a470:	b123      	cbz	r3, 801a47c <rmw_create_node+0x20>
 801a472:	4603      	mov	r3, r0
 801a474:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 801a476:	4660      	mov	r0, ip
 801a478:	f7ff bf70 	b.w	801a35c <create_node>
 801a47c:	2000      	movs	r0, #0
 801a47e:	4770      	bx	lr

0801a480 <rmw_destroy_node>:
 801a480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a482:	b328      	cbz	r0, 801a4d0 <rmw_destroy_node+0x50>
 801a484:	4607      	mov	r7, r0
 801a486:	6800      	ldr	r0, [r0, #0]
 801a488:	b120      	cbz	r0, 801a494 <rmw_destroy_node+0x14>
 801a48a:	4b37      	ldr	r3, [pc, #220]	@ (801a568 <rmw_destroy_node+0xe8>)
 801a48c:	6819      	ldr	r1, [r3, #0]
 801a48e:	f7e5 ff27 	bl	80002e0 <strcmp>
 801a492:	b9e8      	cbnz	r0, 801a4d0 <rmw_destroy_node+0x50>
 801a494:	687d      	ldr	r5, [r7, #4]
 801a496:	b1dd      	cbz	r5, 801a4d0 <rmw_destroy_node+0x50>
 801a498:	4b34      	ldr	r3, [pc, #208]	@ (801a56c <rmw_destroy_node+0xec>)
 801a49a:	681c      	ldr	r4, [r3, #0]
 801a49c:	2c00      	cmp	r4, #0
 801a49e:	d060      	beq.n	801a562 <rmw_destroy_node+0xe2>
 801a4a0:	2600      	movs	r6, #0
 801a4a2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801a4a6:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801a4aa:	429d      	cmp	r5, r3
 801a4ac:	d013      	beq.n	801a4d6 <rmw_destroy_node+0x56>
 801a4ae:	2c00      	cmp	r4, #0
 801a4b0:	d1f7      	bne.n	801a4a2 <rmw_destroy_node+0x22>
 801a4b2:	4b2f      	ldr	r3, [pc, #188]	@ (801a570 <rmw_destroy_node+0xf0>)
 801a4b4:	681c      	ldr	r4, [r3, #0]
 801a4b6:	b1c4      	cbz	r4, 801a4ea <rmw_destroy_node+0x6a>
 801a4b8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801a4bc:	6a0b      	ldr	r3, [r1, #32]
 801a4be:	429d      	cmp	r5, r3
 801a4c0:	d1f9      	bne.n	801a4b6 <rmw_destroy_node+0x36>
 801a4c2:	317c      	adds	r1, #124	@ 0x7c
 801a4c4:	4638      	mov	r0, r7
 801a4c6:	f000 fd4b 	bl	801af60 <rmw_destroy_subscription>
 801a4ca:	2801      	cmp	r0, #1
 801a4cc:	4606      	mov	r6, r0
 801a4ce:	d1f2      	bne.n	801a4b6 <rmw_destroy_node+0x36>
 801a4d0:	2601      	movs	r6, #1
 801a4d2:	4630      	mov	r0, r6
 801a4d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a4d6:	3184      	adds	r1, #132	@ 0x84
 801a4d8:	4638      	mov	r0, r7
 801a4da:	f000 f94d 	bl	801a778 <rmw_destroy_publisher>
 801a4de:	2801      	cmp	r0, #1
 801a4e0:	4606      	mov	r6, r0
 801a4e2:	d0f5      	beq.n	801a4d0 <rmw_destroy_node+0x50>
 801a4e4:	2c00      	cmp	r4, #0
 801a4e6:	d1dc      	bne.n	801a4a2 <rmw_destroy_node+0x22>
 801a4e8:	e7e3      	b.n	801a4b2 <rmw_destroy_node+0x32>
 801a4ea:	4b22      	ldr	r3, [pc, #136]	@ (801a574 <rmw_destroy_node+0xf4>)
 801a4ec:	681c      	ldr	r4, [r3, #0]
 801a4ee:	b16c      	cbz	r4, 801a50c <rmw_destroy_node+0x8c>
 801a4f0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801a4f4:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801a4f6:	429d      	cmp	r5, r3
 801a4f8:	d1f9      	bne.n	801a4ee <rmw_destroy_node+0x6e>
 801a4fa:	317c      	adds	r1, #124	@ 0x7c
 801a4fc:	4638      	mov	r0, r7
 801a4fe:	f000 fbb9 	bl	801ac74 <rmw_destroy_service>
 801a502:	2801      	cmp	r0, #1
 801a504:	4606      	mov	r6, r0
 801a506:	d0e3      	beq.n	801a4d0 <rmw_destroy_node+0x50>
 801a508:	2c00      	cmp	r4, #0
 801a50a:	d1f1      	bne.n	801a4f0 <rmw_destroy_node+0x70>
 801a50c:	4b1a      	ldr	r3, [pc, #104]	@ (801a578 <rmw_destroy_node+0xf8>)
 801a50e:	681c      	ldr	r4, [r3, #0]
 801a510:	b16c      	cbz	r4, 801a52e <rmw_destroy_node+0xae>
 801a512:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801a516:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801a518:	429d      	cmp	r5, r3
 801a51a:	d1f9      	bne.n	801a510 <rmw_destroy_node+0x90>
 801a51c:	317c      	adds	r1, #124	@ 0x7c
 801a51e:	4638      	mov	r0, r7
 801a520:	f7ff fc6c 	bl	8019dfc <rmw_destroy_client>
 801a524:	2801      	cmp	r0, #1
 801a526:	4606      	mov	r6, r0
 801a528:	d0d2      	beq.n	801a4d0 <rmw_destroy_node+0x50>
 801a52a:	2c00      	cmp	r4, #0
 801a52c:	d1f1      	bne.n	801a512 <rmw_destroy_node+0x92>
 801a52e:	6928      	ldr	r0, [r5, #16]
 801a530:	696a      	ldr	r2, [r5, #20]
 801a532:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801a536:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a53a:	6819      	ldr	r1, [r3, #0]
 801a53c:	f001 fe8c 	bl	801c258 <uxr_buffer_delete_entity>
 801a540:	4602      	mov	r2, r0
 801a542:	6928      	ldr	r0, [r5, #16]
 801a544:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801a548:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801a54c:	f001 fa3a 	bl	801b9c4 <run_xrce_session>
 801a550:	4603      	mov	r3, r0
 801a552:	4638      	mov	r0, r7
 801a554:	2b00      	cmp	r3, #0
 801a556:	bf08      	it	eq
 801a558:	2602      	moveq	r6, #2
 801a55a:	f001 f8b7 	bl	801b6cc <rmw_uxrce_fini_node_memory>
 801a55e:	4630      	mov	r0, r6
 801a560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a562:	4626      	mov	r6, r4
 801a564:	e7a5      	b.n	801a4b2 <rmw_destroy_node+0x32>
 801a566:	bf00      	nop
 801a568:	08024ff8 	.word	0x08024ff8
 801a56c:	2406951c 	.word	0x2406951c
 801a570:	2406955c 	.word	0x2406955c
 801a574:	2406952c 	.word	0x2406952c
 801a578:	24064c40 	.word	0x24064c40

0801a57c <rmw_node_get_graph_guard_condition>:
 801a57c:	6843      	ldr	r3, [r0, #4]
 801a57e:	6918      	ldr	r0, [r3, #16]
 801a580:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 801a584:	4770      	bx	lr
 801a586:	bf00      	nop

0801a588 <rmw_create_publisher>:
 801a588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a58c:	b087      	sub	sp, #28
 801a58e:	2800      	cmp	r0, #0
 801a590:	f000 80d2 	beq.w	801a738 <rmw_create_publisher+0x1b0>
 801a594:	460e      	mov	r6, r1
 801a596:	2900      	cmp	r1, #0
 801a598:	f000 80ce 	beq.w	801a738 <rmw_create_publisher+0x1b0>
 801a59c:	4604      	mov	r4, r0
 801a59e:	6800      	ldr	r0, [r0, #0]
 801a5a0:	4615      	mov	r5, r2
 801a5a2:	461f      	mov	r7, r3
 801a5a4:	f001 fb20 	bl	801bbe8 <is_uxrce_rmw_identifier_valid>
 801a5a8:	f080 0001 	eor.w	r0, r0, #1
 801a5ac:	b2c0      	uxtb	r0, r0
 801a5ae:	2800      	cmp	r0, #0
 801a5b0:	f040 80c2 	bne.w	801a738 <rmw_create_publisher+0x1b0>
 801a5b4:	2d00      	cmp	r5, #0
 801a5b6:	f000 80bf 	beq.w	801a738 <rmw_create_publisher+0x1b0>
 801a5ba:	782b      	ldrb	r3, [r5, #0]
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	f000 80bb 	beq.w	801a738 <rmw_create_publisher+0x1b0>
 801a5c2:	2f00      	cmp	r7, #0
 801a5c4:	f000 80b8 	beq.w	801a738 <rmw_create_publisher+0x1b0>
 801a5c8:	485e      	ldr	r0, [pc, #376]	@ (801a744 <rmw_create_publisher+0x1bc>)
 801a5ca:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801a5ce:	f005 ff13 	bl	80203f8 <get_memory>
 801a5d2:	2800      	cmp	r0, #0
 801a5d4:	f000 80b0 	beq.w	801a738 <rmw_create_publisher+0x1b0>
 801a5d8:	6884      	ldr	r4, [r0, #8]
 801a5da:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 801a5de:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 801a5e2:	f7ff fc4f 	bl	8019e84 <rmw_get_implementation_identifier>
 801a5e6:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 801a5ea:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 801a5ee:	4628      	mov	r0, r5
 801a5f0:	f7e5 fe80 	bl	80002f4 <strlen>
 801a5f4:	3001      	adds	r0, #1
 801a5f6:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 801a5fa:	283c      	cmp	r0, #60	@ 0x3c
 801a5fc:	f200 808f 	bhi.w	801a71e <rmw_create_publisher+0x196>
 801a600:	462b      	mov	r3, r5
 801a602:	4a51      	ldr	r2, [pc, #324]	@ (801a748 <rmw_create_publisher+0x1c0>)
 801a604:	213c      	movs	r1, #60	@ 0x3c
 801a606:	4650      	mov	r0, sl
 801a608:	f007 f8fa 	bl	8021800 <sniprintf>
 801a60c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801a610:	4639      	mov	r1, r7
 801a612:	2250      	movs	r2, #80	@ 0x50
 801a614:	67e3      	str	r3, [r4, #124]	@ 0x7c
 801a616:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801a61a:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 801a61e:	f007 fb7c 	bl	8021d1a <memcpy>
 801a622:	7a3b      	ldrb	r3, [r7, #8]
 801a624:	4630      	mov	r0, r6
 801a626:	4949      	ldr	r1, [pc, #292]	@ (801a74c <rmw_create_publisher+0x1c4>)
 801a628:	2b02      	cmp	r3, #2
 801a62a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a62e:	bf0c      	ite	eq
 801a630:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 801a634:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 801a638:	67a3      	str	r3, [r4, #120]	@ 0x78
 801a63a:	2300      	movs	r3, #0
 801a63c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801a640:	f7fb f9ac 	bl	801599c <get_message_typesupport_handle>
 801a644:	2800      	cmp	r0, #0
 801a646:	d06a      	beq.n	801a71e <rmw_create_publisher+0x196>
 801a648:	6842      	ldr	r2, [r0, #4]
 801a64a:	61a2      	str	r2, [r4, #24]
 801a64c:	2a00      	cmp	r2, #0
 801a64e:	d066      	beq.n	801a71e <rmw_create_publisher+0x196>
 801a650:	4629      	mov	r1, r5
 801a652:	463b      	mov	r3, r7
 801a654:	4648      	mov	r0, r9
 801a656:	f005 ff1d 	bl	8020494 <create_topic>
 801a65a:	6260      	str	r0, [r4, #36]	@ 0x24
 801a65c:	2800      	cmp	r0, #0
 801a65e:	d062      	beq.n	801a726 <rmw_create_publisher+0x19e>
 801a660:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a664:	2103      	movs	r1, #3
 801a666:	2506      	movs	r5, #6
 801a668:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a66c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 801a670:	1c42      	adds	r2, r0, #1
 801a672:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 801a676:	f002 f8e9 	bl	801c84c <uxr_object_id>
 801a67a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 801a67e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a682:	6120      	str	r0, [r4, #16]
 801a684:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 801a688:	6910      	ldr	r0, [r2, #16]
 801a68a:	9500      	str	r5, [sp, #0]
 801a68c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a690:	6819      	ldr	r1, [r3, #0]
 801a692:	6922      	ldr	r2, [r4, #16]
 801a694:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801a698:	f001 fe92 	bl	801c3c0 <uxr_buffer_create_publisher_bin>
 801a69c:	4602      	mov	r2, r0
 801a69e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801a6a2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801a6a6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801a6aa:	f001 f98b 	bl	801b9c4 <run_xrce_session>
 801a6ae:	b3b0      	cbz	r0, 801a71e <rmw_create_publisher+0x196>
 801a6b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a6b4:	2105      	movs	r1, #5
 801a6b6:	f10d 0a10 	add.w	sl, sp, #16
 801a6ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a6be:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 801a6c2:	1c42      	adds	r2, r0, #1
 801a6c4:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 801a6c8:	f002 f8c0 	bl	801c84c <uxr_object_id>
 801a6cc:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801a6d0:	4639      	mov	r1, r7
 801a6d2:	6160      	str	r0, [r4, #20]
 801a6d4:	691e      	ldr	r6, [r3, #16]
 801a6d6:	4650      	mov	r0, sl
 801a6d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a6dc:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 801a6e0:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 801a6e4:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 801a6e8:	f001 f988 	bl	801b9fc <convert_qos_profile>
 801a6ec:	9503      	str	r5, [sp, #12]
 801a6ee:	e89a 0003 	ldmia.w	sl, {r0, r1}
 801a6f2:	9001      	str	r0, [sp, #4]
 801a6f4:	4630      	mov	r0, r6
 801a6f6:	f8ad 1008 	strh.w	r1, [sp, #8]
 801a6fa:	f8db 3010 	ldr.w	r3, [fp, #16]
 801a6fe:	9300      	str	r3, [sp, #0]
 801a700:	6839      	ldr	r1, [r7, #0]
 801a702:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801a706:	f001 febb 	bl	801c480 <uxr_buffer_create_datawriter_bin>
 801a70a:	4602      	mov	r2, r0
 801a70c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801a710:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801a714:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801a718:	f001 f954 	bl	801b9c4 <run_xrce_session>
 801a71c:	b970      	cbnz	r0, 801a73c <rmw_create_publisher+0x1b4>
 801a71e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801a720:	b108      	cbz	r0, 801a726 <rmw_create_publisher+0x19e>
 801a722:	f001 f843 	bl	801b7ac <rmw_uxrce_fini_topic_memory>
 801a726:	4640      	mov	r0, r8
 801a728:	f04f 0800 	mov.w	r8, #0
 801a72c:	f000 ffe6 	bl	801b6fc <rmw_uxrce_fini_publisher_memory>
 801a730:	4640      	mov	r0, r8
 801a732:	b007      	add	sp, #28
 801a734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a738:	f04f 0800 	mov.w	r8, #0
 801a73c:	4640      	mov	r0, r8
 801a73e:	b007      	add	sp, #28
 801a740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a744:	2406951c 	.word	0x2406951c
 801a748:	08024ccc 	.word	0x08024ccc
 801a74c:	08022e0c 	.word	0x08022e0c

0801a750 <rmw_publisher_get_actual_qos>:
 801a750:	b178      	cbz	r0, 801a772 <rmw_publisher_get_actual_qos+0x22>
 801a752:	b510      	push	{r4, lr}
 801a754:	fab1 f481 	clz	r4, r1
 801a758:	0964      	lsrs	r4, r4, #5
 801a75a:	b141      	cbz	r1, 801a76e <rmw_publisher_get_actual_qos+0x1e>
 801a75c:	6843      	ldr	r3, [r0, #4]
 801a75e:	2250      	movs	r2, #80	@ 0x50
 801a760:	4608      	mov	r0, r1
 801a762:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 801a766:	f007 fad8 	bl	8021d1a <memcpy>
 801a76a:	4620      	mov	r0, r4
 801a76c:	bd10      	pop	{r4, pc}
 801a76e:	200b      	movs	r0, #11
 801a770:	bd10      	pop	{r4, pc}
 801a772:	200b      	movs	r0, #11
 801a774:	4770      	bx	lr
 801a776:	bf00      	nop

0801a778 <rmw_destroy_publisher>:
 801a778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a77c:	b128      	cbz	r0, 801a78a <rmw_destroy_publisher+0x12>
 801a77e:	4604      	mov	r4, r0
 801a780:	6800      	ldr	r0, [r0, #0]
 801a782:	460d      	mov	r5, r1
 801a784:	f001 fa30 	bl	801bbe8 <is_uxrce_rmw_identifier_valid>
 801a788:	b918      	cbnz	r0, 801a792 <rmw_destroy_publisher+0x1a>
 801a78a:	2401      	movs	r4, #1
 801a78c:	4620      	mov	r0, r4
 801a78e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a792:	6863      	ldr	r3, [r4, #4]
 801a794:	2b00      	cmp	r3, #0
 801a796:	d0f8      	beq.n	801a78a <rmw_destroy_publisher+0x12>
 801a798:	fab5 f485 	clz	r4, r5
 801a79c:	0964      	lsrs	r4, r4, #5
 801a79e:	2d00      	cmp	r5, #0
 801a7a0:	d0f3      	beq.n	801a78a <rmw_destroy_publisher+0x12>
 801a7a2:	6828      	ldr	r0, [r5, #0]
 801a7a4:	f001 fa20 	bl	801bbe8 <is_uxrce_rmw_identifier_valid>
 801a7a8:	2800      	cmp	r0, #0
 801a7aa:	d0ee      	beq.n	801a78a <rmw_destroy_publisher+0x12>
 801a7ac:	686e      	ldr	r6, [r5, #4]
 801a7ae:	2e00      	cmp	r6, #0
 801a7b0:	d0eb      	beq.n	801a78a <rmw_destroy_publisher+0x12>
 801a7b2:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 801a7b4:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 801a7b8:	f005 febc 	bl	8020534 <destroy_topic>
 801a7bc:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801a7c0:	6972      	ldr	r2, [r6, #20]
 801a7c2:	6918      	ldr	r0, [r3, #16]
 801a7c4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801a7c8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a7cc:	6819      	ldr	r1, [r3, #0]
 801a7ce:	f001 fd43 	bl	801c258 <uxr_buffer_delete_entity>
 801a7d2:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801a7d6:	4680      	mov	r8, r0
 801a7d8:	6932      	ldr	r2, [r6, #16]
 801a7da:	6918      	ldr	r0, [r3, #16]
 801a7dc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801a7e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a7e4:	6819      	ldr	r1, [r3, #0]
 801a7e6:	f001 fd37 	bl	801c258 <uxr_buffer_delete_entity>
 801a7ea:	4606      	mov	r6, r0
 801a7ec:	6938      	ldr	r0, [r7, #16]
 801a7ee:	4642      	mov	r2, r8
 801a7f0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801a7f4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801a7f8:	f001 f8e4 	bl	801b9c4 <run_xrce_session>
 801a7fc:	693f      	ldr	r7, [r7, #16]
 801a7fe:	4632      	mov	r2, r6
 801a800:	4606      	mov	r6, r0
 801a802:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801a806:	4638      	mov	r0, r7
 801a808:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 801a80c:	f001 f8da 	bl	801b9c4 <run_xrce_session>
 801a810:	b126      	cbz	r6, 801a81c <rmw_destroy_publisher+0xa4>
 801a812:	b118      	cbz	r0, 801a81c <rmw_destroy_publisher+0xa4>
 801a814:	4628      	mov	r0, r5
 801a816:	f000 ff71 	bl	801b6fc <rmw_uxrce_fini_publisher_memory>
 801a81a:	e7b7      	b.n	801a78c <rmw_destroy_publisher+0x14>
 801a81c:	2402      	movs	r4, #2
 801a81e:	e7f9      	b.n	801a814 <rmw_destroy_publisher+0x9c>

0801a820 <rmw_send_request>:
 801a820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a824:	4604      	mov	r4, r0
 801a826:	6800      	ldr	r0, [r0, #0]
 801a828:	b08b      	sub	sp, #44	@ 0x2c
 801a82a:	460e      	mov	r6, r1
 801a82c:	4615      	mov	r5, r2
 801a82e:	b128      	cbz	r0, 801a83c <rmw_send_request+0x1c>
 801a830:	4b21      	ldr	r3, [pc, #132]	@ (801a8b8 <rmw_send_request+0x98>)
 801a832:	6819      	ldr	r1, [r3, #0]
 801a834:	f7e5 fd54 	bl	80002e0 <strcmp>
 801a838:	2800      	cmp	r0, #0
 801a83a:	d139      	bne.n	801a8b0 <rmw_send_request+0x90>
 801a83c:	6864      	ldr	r4, [r4, #4]
 801a83e:	2700      	movs	r7, #0
 801a840:	6963      	ldr	r3, [r4, #20]
 801a842:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801a846:	689b      	ldr	r3, [r3, #8]
 801a848:	4798      	blx	r3
 801a84a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801a84e:	4630      	mov	r0, r6
 801a850:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a854:	4798      	blx	r3
 801a856:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801a85a:	9000      	str	r0, [sp, #0]
 801a85c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801a860:	6922      	ldr	r2, [r4, #16]
 801a862:	ab02      	add	r3, sp, #8
 801a864:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801a866:	f004 f81b 	bl	801e8a0 <uxr_prepare_output_stream>
 801a86a:	e9c5 0700 	strd	r0, r7, [r5]
 801a86e:	b198      	cbz	r0, 801a898 <rmw_send_request+0x78>
 801a870:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801a874:	a902      	add	r1, sp, #8
 801a876:	4630      	mov	r0, r6
 801a878:	4798      	blx	r3
 801a87a:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801a87e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801a882:	2b01      	cmp	r3, #1
 801a884:	d00c      	beq.n	801a8a0 <rmw_send_request+0x80>
 801a886:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801a888:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a88c:	f002 fe18 	bl	801d4c0 <uxr_run_session_until_confirm_delivery>
 801a890:	4638      	mov	r0, r7
 801a892:	b00b      	add	sp, #44	@ 0x2c
 801a894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a898:	2001      	movs	r0, #1
 801a89a:	b00b      	add	sp, #44	@ 0x2c
 801a89c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a8a0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a8a4:	f002 fa52 	bl	801cd4c <uxr_flash_output_streams>
 801a8a8:	4638      	mov	r0, r7
 801a8aa:	b00b      	add	sp, #44	@ 0x2c
 801a8ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a8b0:	200c      	movs	r0, #12
 801a8b2:	b00b      	add	sp, #44	@ 0x2c
 801a8b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a8b8:	08024ff8 	.word	0x08024ff8

0801a8bc <rmw_take_request>:
 801a8bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a8c0:	4605      	mov	r5, r0
 801a8c2:	6800      	ldr	r0, [r0, #0]
 801a8c4:	b089      	sub	sp, #36	@ 0x24
 801a8c6:	460c      	mov	r4, r1
 801a8c8:	4690      	mov	r8, r2
 801a8ca:	461e      	mov	r6, r3
 801a8cc:	b128      	cbz	r0, 801a8da <rmw_take_request+0x1e>
 801a8ce:	4b28      	ldr	r3, [pc, #160]	@ (801a970 <rmw_take_request+0xb4>)
 801a8d0:	6819      	ldr	r1, [r3, #0]
 801a8d2:	f7e5 fd05 	bl	80002e0 <strcmp>
 801a8d6:	2800      	cmp	r0, #0
 801a8d8:	d146      	bne.n	801a968 <rmw_take_request+0xac>
 801a8da:	b10e      	cbz	r6, 801a8e0 <rmw_take_request+0x24>
 801a8dc:	2300      	movs	r3, #0
 801a8de:	7033      	strb	r3, [r6, #0]
 801a8e0:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801a8e4:	f000 fff0 	bl	801b8c8 <rmw_uxrce_clean_expired_static_input_buffer>
 801a8e8:	4648      	mov	r0, r9
 801a8ea:	f000 ffc5 	bl	801b878 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a8ee:	4607      	mov	r7, r0
 801a8f0:	b3b0      	cbz	r0, 801a960 <rmw_take_request+0xa4>
 801a8f2:	6885      	ldr	r5, [r0, #8]
 801a8f4:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 801a8f8:	f8d5 383c 	ldr.w	r3, [r5, #2108]	@ 0x83c
 801a8fc:	e9c4 3208 	strd	r3, r2, [r4, #32]
 801a900:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801a904:	7423      	strb	r3, [r4, #16]
 801a906:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	@ 0x834
 801a90a:	f895 3836 	ldrb.w	r3, [r5, #2102]	@ 0x836
 801a90e:	f8a4 2011 	strh.w	r2, [r4, #17]
 801a912:	74e3      	strb	r3, [r4, #19]
 801a914:	f8d5 1828 	ldr.w	r1, [r5, #2088]	@ 0x828
 801a918:	f8d5 282c 	ldr.w	r2, [r5, #2092]	@ 0x82c
 801a91c:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 801a920:	6161      	str	r1, [r4, #20]
 801a922:	61a2      	str	r2, [r4, #24]
 801a924:	61e3      	str	r3, [r4, #28]
 801a926:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801a92a:	689b      	ldr	r3, [r3, #8]
 801a92c:	4798      	blx	r3
 801a92e:	6844      	ldr	r4, [r0, #4]
 801a930:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801a934:	f105 0110 	add.w	r1, r5, #16
 801a938:	4668      	mov	r0, sp
 801a93a:	f7f9 ff43 	bl	80147c4 <ucdr_init_buffer>
 801a93e:	4641      	mov	r1, r8
 801a940:	68e3      	ldr	r3, [r4, #12]
 801a942:	4668      	mov	r0, sp
 801a944:	4798      	blx	r3
 801a946:	4639      	mov	r1, r7
 801a948:	4604      	mov	r4, r0
 801a94a:	480a      	ldr	r0, [pc, #40]	@ (801a974 <rmw_take_request+0xb8>)
 801a94c:	f005 fd64 	bl	8020418 <put_memory>
 801a950:	b106      	cbz	r6, 801a954 <rmw_take_request+0x98>
 801a952:	7034      	strb	r4, [r6, #0]
 801a954:	f084 0001 	eor.w	r0, r4, #1
 801a958:	b2c0      	uxtb	r0, r0
 801a95a:	b009      	add	sp, #36	@ 0x24
 801a95c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a960:	2001      	movs	r0, #1
 801a962:	b009      	add	sp, #36	@ 0x24
 801a964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a968:	200c      	movs	r0, #12
 801a96a:	b009      	add	sp, #36	@ 0x24
 801a96c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a970:	08024ff8 	.word	0x08024ff8
 801a974:	2406954c 	.word	0x2406954c

0801a978 <rmw_send_response>:
 801a978:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a97a:	4605      	mov	r5, r0
 801a97c:	6800      	ldr	r0, [r0, #0]
 801a97e:	b091      	sub	sp, #68	@ 0x44
 801a980:	460c      	mov	r4, r1
 801a982:	4616      	mov	r6, r2
 801a984:	b128      	cbz	r0, 801a992 <rmw_send_response+0x1a>
 801a986:	4b29      	ldr	r3, [pc, #164]	@ (801aa2c <rmw_send_response+0xb4>)
 801a988:	6819      	ldr	r1, [r3, #0]
 801a98a:	f7e5 fca9 	bl	80002e0 <strcmp>
 801a98e:	2800      	cmp	r0, #0
 801a990:	d141      	bne.n	801aa16 <rmw_send_response+0x9e>
 801a992:	686d      	ldr	r5, [r5, #4]
 801a994:	68a1      	ldr	r1, [r4, #8]
 801a996:	6860      	ldr	r0, [r4, #4]
 801a998:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801a99a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801a99e:	9307      	str	r3, [sp, #28]
 801a9a0:	4623      	mov	r3, r4
 801a9a2:	9206      	str	r2, [sp, #24]
 801a9a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a9a8:	789b      	ldrb	r3, [r3, #2]
 801a9aa:	f88d 2017 	strb.w	r2, [sp, #23]
 801a9ae:	f88d 3016 	strb.w	r3, [sp, #22]
 801a9b2:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801a9b6:	68e2      	ldr	r2, [r4, #12]
 801a9b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a9bc:	ab02      	add	r3, sp, #8
 801a9be:	696c      	ldr	r4, [r5, #20]
 801a9c0:	c307      	stmia	r3!, {r0, r1, r2}
 801a9c2:	68e3      	ldr	r3, [r4, #12]
 801a9c4:	4798      	blx	r3
 801a9c6:	6844      	ldr	r4, [r0, #4]
 801a9c8:	4630      	mov	r0, r6
 801a9ca:	6923      	ldr	r3, [r4, #16]
 801a9cc:	4798      	blx	r3
 801a9ce:	f100 0318 	add.w	r3, r0, #24
 801a9d2:	6938      	ldr	r0, [r7, #16]
 801a9d4:	9300      	str	r3, [sp, #0]
 801a9d6:	ab08      	add	r3, sp, #32
 801a9d8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a9dc:	692a      	ldr	r2, [r5, #16]
 801a9de:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801a9e0:	f003 ff5e 	bl	801e8a0 <uxr_prepare_output_stream>
 801a9e4:	b910      	cbnz	r0, 801a9ec <rmw_send_response+0x74>
 801a9e6:	2001      	movs	r0, #1
 801a9e8:	b011      	add	sp, #68	@ 0x44
 801a9ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a9ec:	a902      	add	r1, sp, #8
 801a9ee:	a808      	add	r0, sp, #32
 801a9f0:	f004 fff8 	bl	801f9e4 <uxr_serialize_SampleIdentity>
 801a9f4:	68a3      	ldr	r3, [r4, #8]
 801a9f6:	a908      	add	r1, sp, #32
 801a9f8:	4630      	mov	r0, r6
 801a9fa:	4798      	blx	r3
 801a9fc:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 801aa00:	6938      	ldr	r0, [r7, #16]
 801aa02:	2b01      	cmp	r3, #1
 801aa04:	d00a      	beq.n	801aa1c <rmw_send_response+0xa4>
 801aa06:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 801aa08:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801aa0c:	f002 fd58 	bl	801d4c0 <uxr_run_session_until_confirm_delivery>
 801aa10:	2000      	movs	r0, #0
 801aa12:	b011      	add	sp, #68	@ 0x44
 801aa14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa16:	200c      	movs	r0, #12
 801aa18:	b011      	add	sp, #68	@ 0x44
 801aa1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa1c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801aa20:	f002 f994 	bl	801cd4c <uxr_flash_output_streams>
 801aa24:	2000      	movs	r0, #0
 801aa26:	b011      	add	sp, #68	@ 0x44
 801aa28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa2a:	bf00      	nop
 801aa2c:	08024ff8 	.word	0x08024ff8

0801aa30 <rmw_take_response>:
 801aa30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa34:	4604      	mov	r4, r0
 801aa36:	6800      	ldr	r0, [r0, #0]
 801aa38:	b088      	sub	sp, #32
 801aa3a:	460f      	mov	r7, r1
 801aa3c:	4690      	mov	r8, r2
 801aa3e:	461d      	mov	r5, r3
 801aa40:	b120      	cbz	r0, 801aa4c <rmw_take_response+0x1c>
 801aa42:	4b1d      	ldr	r3, [pc, #116]	@ (801aab8 <rmw_take_response+0x88>)
 801aa44:	6819      	ldr	r1, [r3, #0]
 801aa46:	f7e5 fc4b 	bl	80002e0 <strcmp>
 801aa4a:	bb68      	cbnz	r0, 801aaa8 <rmw_take_response+0x78>
 801aa4c:	b10d      	cbz	r5, 801aa52 <rmw_take_response+0x22>
 801aa4e:	2300      	movs	r3, #0
 801aa50:	702b      	strb	r3, [r5, #0]
 801aa52:	6864      	ldr	r4, [r4, #4]
 801aa54:	f000 ff38 	bl	801b8c8 <rmw_uxrce_clean_expired_static_input_buffer>
 801aa58:	4620      	mov	r0, r4
 801aa5a:	f000 ff0d 	bl	801b878 <rmw_uxrce_find_static_input_buffer_by_owner>
 801aa5e:	4606      	mov	r6, r0
 801aa60:	b330      	cbz	r0, 801aab0 <rmw_take_response+0x80>
 801aa62:	6963      	ldr	r3, [r4, #20]
 801aa64:	6884      	ldr	r4, [r0, #8]
 801aa66:	68db      	ldr	r3, [r3, #12]
 801aa68:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 801aa6c:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801aa70:	e9c7 0108 	strd	r0, r1, [r7, #32]
 801aa74:	4798      	blx	r3
 801aa76:	6847      	ldr	r7, [r0, #4]
 801aa78:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 801aa7c:	f104 0110 	add.w	r1, r4, #16
 801aa80:	4668      	mov	r0, sp
 801aa82:	f7f9 fe9f 	bl	80147c4 <ucdr_init_buffer>
 801aa86:	4641      	mov	r1, r8
 801aa88:	68fb      	ldr	r3, [r7, #12]
 801aa8a:	4668      	mov	r0, sp
 801aa8c:	4798      	blx	r3
 801aa8e:	4631      	mov	r1, r6
 801aa90:	4604      	mov	r4, r0
 801aa92:	480a      	ldr	r0, [pc, #40]	@ (801aabc <rmw_take_response+0x8c>)
 801aa94:	f005 fcc0 	bl	8020418 <put_memory>
 801aa98:	b105      	cbz	r5, 801aa9c <rmw_take_response+0x6c>
 801aa9a:	702c      	strb	r4, [r5, #0]
 801aa9c:	f084 0001 	eor.w	r0, r4, #1
 801aaa0:	b2c0      	uxtb	r0, r0
 801aaa2:	b008      	add	sp, #32
 801aaa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aaa8:	200c      	movs	r0, #12
 801aaaa:	b008      	add	sp, #32
 801aaac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aab0:	2001      	movs	r0, #1
 801aab2:	b008      	add	sp, #32
 801aab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aab8:	08024ff8 	.word	0x08024ff8
 801aabc:	2406954c 	.word	0x2406954c

0801aac0 <rmw_create_service>:
 801aac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aac4:	b091      	sub	sp, #68	@ 0x44
 801aac6:	2900      	cmp	r1, #0
 801aac8:	f000 80bb 	beq.w	801ac42 <rmw_create_service+0x182>
 801aacc:	4606      	mov	r6, r0
 801aace:	2800      	cmp	r0, #0
 801aad0:	f000 80b7 	beq.w	801ac42 <rmw_create_service+0x182>
 801aad4:	4614      	mov	r4, r2
 801aad6:	6800      	ldr	r0, [r0, #0]
 801aad8:	4689      	mov	r9, r1
 801aada:	461d      	mov	r5, r3
 801aadc:	f001 f884 	bl	801bbe8 <is_uxrce_rmw_identifier_valid>
 801aae0:	2c00      	cmp	r4, #0
 801aae2:	f000 80ae 	beq.w	801ac42 <rmw_create_service+0x182>
 801aae6:	f080 0001 	eor.w	r0, r0, #1
 801aaea:	b2c0      	uxtb	r0, r0
 801aaec:	2800      	cmp	r0, #0
 801aaee:	f040 80a8 	bne.w	801ac42 <rmw_create_service+0x182>
 801aaf2:	7823      	ldrb	r3, [r4, #0]
 801aaf4:	2b00      	cmp	r3, #0
 801aaf6:	f000 80a4 	beq.w	801ac42 <rmw_create_service+0x182>
 801aafa:	2d00      	cmp	r5, #0
 801aafc:	f000 80a1 	beq.w	801ac42 <rmw_create_service+0x182>
 801ab00:	4856      	ldr	r0, [pc, #344]	@ (801ac5c <rmw_create_service+0x19c>)
 801ab02:	f8d6 8004 	ldr.w	r8, [r6, #4]
 801ab06:	f005 fc77 	bl	80203f8 <get_memory>
 801ab0a:	4606      	mov	r6, r0
 801ab0c:	2800      	cmp	r0, #0
 801ab0e:	f000 8099 	beq.w	801ac44 <rmw_create_service+0x184>
 801ab12:	6887      	ldr	r7, [r0, #8]
 801ab14:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 801ab18:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 801ab1c:	f7ff f9b2 	bl	8019e84 <rmw_get_implementation_identifier>
 801ab20:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801ab22:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 801ab26:	4620      	mov	r0, r4
 801ab28:	f7e5 fbe4 	bl	80002f4 <strlen>
 801ab2c:	1c42      	adds	r2, r0, #1
 801ab2e:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 801ab32:	2a3c      	cmp	r2, #60	@ 0x3c
 801ab34:	f200 808a 	bhi.w	801ac4c <rmw_create_service+0x18c>
 801ab38:	4621      	mov	r1, r4
 801ab3a:	4650      	mov	r0, sl
 801ab3c:	f007 f8ed 	bl	8021d1a <memcpy>
 801ab40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801ab44:	4629      	mov	r1, r5
 801ab46:	2250      	movs	r2, #80	@ 0x50
 801ab48:	f107 0020 	add.w	r0, r7, #32
 801ab4c:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 801ab50:	677b      	str	r3, [r7, #116]	@ 0x74
 801ab52:	f007 f8e2 	bl	8021d1a <memcpy>
 801ab56:	4648      	mov	r0, r9
 801ab58:	4941      	ldr	r1, [pc, #260]	@ (801ac60 <rmw_create_service+0x1a0>)
 801ab5a:	f7fa ff2b 	bl	80159b4 <get_service_typesupport_handle>
 801ab5e:	2800      	cmp	r0, #0
 801ab60:	d074      	beq.n	801ac4c <rmw_create_service+0x18c>
 801ab62:	6843      	ldr	r3, [r0, #4]
 801ab64:	617b      	str	r3, [r7, #20]
 801ab66:	2b00      	cmp	r3, #0
 801ab68:	d070      	beq.n	801ac4c <rmw_create_service+0x18c>
 801ab6a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801ab6e:	2108      	movs	r1, #8
 801ab70:	f8df a0f4 	ldr.w	sl, [pc, #244]	@ 801ac68 <rmw_create_service+0x1a8>
 801ab74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801ab78:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 801ac6c <rmw_create_service+0x1ac>
 801ab7c:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 801ab80:	1c42      	adds	r2, r0, #1
 801ab82:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 801ab86:	f001 fe61 	bl	801c84c <uxr_object_id>
 801ab8a:	2364      	movs	r3, #100	@ 0x64
 801ab8c:	6138      	str	r0, [r7, #16]
 801ab8e:	4652      	mov	r2, sl
 801ab90:	4649      	mov	r1, r9
 801ab92:	6978      	ldr	r0, [r7, #20]
 801ab94:	f000 ff7c 	bl	801ba90 <generate_service_types>
 801ab98:	2800      	cmp	r0, #0
 801ab9a:	d057      	beq.n	801ac4c <rmw_create_service+0x18c>
 801ab9c:	f8df b0d0 	ldr.w	fp, [pc, #208]	@ 801ac70 <rmw_create_service+0x1b0>
 801aba0:	233c      	movs	r3, #60	@ 0x3c
 801aba2:	4a30      	ldr	r2, [pc, #192]	@ (801ac64 <rmw_create_service+0x1a4>)
 801aba4:	4620      	mov	r0, r4
 801aba6:	4659      	mov	r1, fp
 801aba8:	f000 ff40 	bl	801ba2c <generate_service_topics>
 801abac:	2800      	cmp	r0, #0
 801abae:	d04d      	beq.n	801ac4c <rmw_create_service+0x18c>
 801abb0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801abb4:	a80c      	add	r0, sp, #48	@ 0x30
 801abb6:	4629      	mov	r1, r5
 801abb8:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 801abbc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801abc0:	f000 ff1c 	bl	801b9fc <convert_qos_profile>
 801abc4:	4a27      	ldr	r2, [pc, #156]	@ (801ac64 <rmw_create_service+0x1a4>)
 801abc6:	a80c      	add	r0, sp, #48	@ 0x30
 801abc8:	9400      	str	r4, [sp, #0]
 801abca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801abcc:	e9cd b203 	strd	fp, r2, [sp, #12]
 801abd0:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 801abd4:	c803      	ldmia	r0, {r0, r1}
 801abd6:	9a08      	ldr	r2, [sp, #32]
 801abd8:	9005      	str	r0, [sp, #20]
 801abda:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801abde:	2306      	movs	r3, #6
 801abe0:	f8ad 1018 	strh.w	r1, [sp, #24]
 801abe4:	9307      	str	r3, [sp, #28]
 801abe6:	6811      	ldr	r1, [r2, #0]
 801abe8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801abec:	693a      	ldr	r2, [r7, #16]
 801abee:	f001 fd35 	bl	801c65c <uxr_buffer_create_replier_bin>
 801abf2:	4602      	mov	r2, r0
 801abf4:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801abf8:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801abfc:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801ac00:	f000 fee0 	bl	801b9c4 <run_xrce_session>
 801ac04:	b310      	cbz	r0, 801ac4c <rmw_create_service+0x18c>
 801ac06:	7a2b      	ldrb	r3, [r5, #8]
 801ac08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801ac0c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801ac10:	2b02      	cmp	r3, #2
 801ac12:	920e      	str	r2, [sp, #56]	@ 0x38
 801ac14:	f04f 0200 	mov.w	r2, #0
 801ac18:	920f      	str	r2, [sp, #60]	@ 0x3c
 801ac1a:	bf0c      	ite	eq
 801ac1c:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 801ac20:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 801ac24:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ac28:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ac2a:	ab0e      	add	r3, sp, #56	@ 0x38
 801ac2c:	673a      	str	r2, [r7, #112]	@ 0x70
 801ac2e:	f8d0 20e4 	ldr.w	r2, [r0, #228]	@ 0xe4
 801ac32:	9300      	str	r3, [sp, #0]
 801ac34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ac36:	6811      	ldr	r1, [r2, #0]
 801ac38:	693a      	ldr	r2, [r7, #16]
 801ac3a:	f001 fe37 	bl	801c8ac <uxr_buffer_request_data>
 801ac3e:	8338      	strh	r0, [r7, #24]
 801ac40:	e000      	b.n	801ac44 <rmw_create_service+0x184>
 801ac42:	2600      	movs	r6, #0
 801ac44:	4630      	mov	r0, r6
 801ac46:	b011      	add	sp, #68	@ 0x44
 801ac48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac4c:	4630      	mov	r0, r6
 801ac4e:	2600      	movs	r6, #0
 801ac50:	f000 fd80 	bl	801b754 <rmw_uxrce_fini_service_memory>
 801ac54:	4630      	mov	r0, r6
 801ac56:	b011      	add	sp, #68	@ 0x44
 801ac58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac5c:	2406952c 	.word	0x2406952c
 801ac60:	08022e0c 	.word	0x08022e0c
 801ac64:	24064ba0 	.word	0x24064ba0
 801ac68:	24064bdc 	.word	0x24064bdc
 801ac6c:	24064b3c 	.word	0x24064b3c
 801ac70:	24064b00 	.word	0x24064b00

0801ac74 <rmw_destroy_service>:
 801ac74:	b570      	push	{r4, r5, r6, lr}
 801ac76:	b128      	cbz	r0, 801ac84 <rmw_destroy_service+0x10>
 801ac78:	4604      	mov	r4, r0
 801ac7a:	6800      	ldr	r0, [r0, #0]
 801ac7c:	460d      	mov	r5, r1
 801ac7e:	f000 ffb3 	bl	801bbe8 <is_uxrce_rmw_identifier_valid>
 801ac82:	b910      	cbnz	r0, 801ac8a <rmw_destroy_service+0x16>
 801ac84:	2401      	movs	r4, #1
 801ac86:	4620      	mov	r0, r4
 801ac88:	bd70      	pop	{r4, r5, r6, pc}
 801ac8a:	6863      	ldr	r3, [r4, #4]
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	d0f9      	beq.n	801ac84 <rmw_destroy_service+0x10>
 801ac90:	2d00      	cmp	r5, #0
 801ac92:	d0f7      	beq.n	801ac84 <rmw_destroy_service+0x10>
 801ac94:	6828      	ldr	r0, [r5, #0]
 801ac96:	f000 ffa7 	bl	801bbe8 <is_uxrce_rmw_identifier_valid>
 801ac9a:	2800      	cmp	r0, #0
 801ac9c:	d0f2      	beq.n	801ac84 <rmw_destroy_service+0x10>
 801ac9e:	686e      	ldr	r6, [r5, #4]
 801aca0:	2e00      	cmp	r6, #0
 801aca2:	d0ef      	beq.n	801ac84 <rmw_destroy_service+0x10>
 801aca4:	6864      	ldr	r4, [r4, #4]
 801aca6:	6932      	ldr	r2, [r6, #16]
 801aca8:	6920      	ldr	r0, [r4, #16]
 801acaa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801acae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801acb2:	6819      	ldr	r1, [r3, #0]
 801acb4:	f001 fe34 	bl	801c920 <uxr_buffer_cancel_data>
 801acb8:	4602      	mov	r2, r0
 801acba:	6920      	ldr	r0, [r4, #16]
 801acbc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801acc0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801acc4:	f000 fe7e 	bl	801b9c4 <run_xrce_session>
 801acc8:	6920      	ldr	r0, [r4, #16]
 801acca:	6932      	ldr	r2, [r6, #16]
 801accc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801acd0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801acd4:	6819      	ldr	r1, [r3, #0]
 801acd6:	f001 fabf 	bl	801c258 <uxr_buffer_delete_entity>
 801acda:	4602      	mov	r2, r0
 801acdc:	6920      	ldr	r0, [r4, #16]
 801acde:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801ace2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801ace6:	f000 fe6d 	bl	801b9c4 <run_xrce_session>
 801acea:	4603      	mov	r3, r0
 801acec:	4628      	mov	r0, r5
 801acee:	2b00      	cmp	r3, #0
 801acf0:	bf14      	ite	ne
 801acf2:	2400      	movne	r4, #0
 801acf4:	2402      	moveq	r4, #2
 801acf6:	f000 fd2d 	bl	801b754 <rmw_uxrce_fini_service_memory>
 801acfa:	e7c4      	b.n	801ac86 <rmw_destroy_service+0x12>

0801acfc <rmw_service_response_publisher_get_actual_qos>:
 801acfc:	b181      	cbz	r1, 801ad20 <rmw_service_response_publisher_get_actual_qos+0x24>
 801acfe:	4603      	mov	r3, r0
 801ad00:	b510      	push	{r4, lr}
 801ad02:	fab0 f480 	clz	r4, r0
 801ad06:	0964      	lsrs	r4, r4, #5
 801ad08:	b140      	cbz	r0, 801ad1c <rmw_service_response_publisher_get_actual_qos+0x20>
 801ad0a:	685b      	ldr	r3, [r3, #4]
 801ad0c:	4608      	mov	r0, r1
 801ad0e:	2250      	movs	r2, #80	@ 0x50
 801ad10:	f103 0120 	add.w	r1, r3, #32
 801ad14:	f007 f801 	bl	8021d1a <memcpy>
 801ad18:	4620      	mov	r0, r4
 801ad1a:	bd10      	pop	{r4, pc}
 801ad1c:	200b      	movs	r0, #11
 801ad1e:	bd10      	pop	{r4, pc}
 801ad20:	200b      	movs	r0, #11
 801ad22:	4770      	bx	lr

0801ad24 <rmw_service_request_subscription_get_actual_qos>:
 801ad24:	b178      	cbz	r0, 801ad46 <rmw_service_request_subscription_get_actual_qos+0x22>
 801ad26:	b510      	push	{r4, lr}
 801ad28:	fab1 f481 	clz	r4, r1
 801ad2c:	0964      	lsrs	r4, r4, #5
 801ad2e:	b141      	cbz	r1, 801ad42 <rmw_service_request_subscription_get_actual_qos+0x1e>
 801ad30:	6843      	ldr	r3, [r0, #4]
 801ad32:	2250      	movs	r2, #80	@ 0x50
 801ad34:	4608      	mov	r0, r1
 801ad36:	f103 0120 	add.w	r1, r3, #32
 801ad3a:	f006 ffee 	bl	8021d1a <memcpy>
 801ad3e:	4620      	mov	r0, r4
 801ad40:	bd10      	pop	{r4, pc}
 801ad42:	200b      	movs	r0, #11
 801ad44:	bd10      	pop	{r4, pc}
 801ad46:	200b      	movs	r0, #11
 801ad48:	4770      	bx	lr
 801ad4a:	bf00      	nop

0801ad4c <rmw_create_subscription>:
 801ad4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad50:	b08d      	sub	sp, #52	@ 0x34
 801ad52:	2900      	cmp	r1, #0
 801ad54:	f000 80d8 	beq.w	801af08 <rmw_create_subscription+0x1bc>
 801ad58:	4604      	mov	r4, r0
 801ad5a:	2800      	cmp	r0, #0
 801ad5c:	f000 80d4 	beq.w	801af08 <rmw_create_subscription+0x1bc>
 801ad60:	6800      	ldr	r0, [r0, #0]
 801ad62:	460e      	mov	r6, r1
 801ad64:	4615      	mov	r5, r2
 801ad66:	461f      	mov	r7, r3
 801ad68:	f000 ff3e 	bl	801bbe8 <is_uxrce_rmw_identifier_valid>
 801ad6c:	f080 0001 	eor.w	r0, r0, #1
 801ad70:	b2c0      	uxtb	r0, r0
 801ad72:	2800      	cmp	r0, #0
 801ad74:	f040 80c8 	bne.w	801af08 <rmw_create_subscription+0x1bc>
 801ad78:	2d00      	cmp	r5, #0
 801ad7a:	f000 80c5 	beq.w	801af08 <rmw_create_subscription+0x1bc>
 801ad7e:	782b      	ldrb	r3, [r5, #0]
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	f000 80c1 	beq.w	801af08 <rmw_create_subscription+0x1bc>
 801ad86:	2f00      	cmp	r7, #0
 801ad88:	f000 80be 	beq.w	801af08 <rmw_create_subscription+0x1bc>
 801ad8c:	4867      	ldr	r0, [pc, #412]	@ (801af2c <rmw_create_subscription+0x1e0>)
 801ad8e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801ad92:	f005 fb31 	bl	80203f8 <get_memory>
 801ad96:	4604      	mov	r4, r0
 801ad98:	2800      	cmp	r0, #0
 801ad9a:	f000 80b6 	beq.w	801af0a <rmw_create_subscription+0x1be>
 801ad9e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801ada2:	f108 0a98 	add.w	sl, r8, #152	@ 0x98
 801ada6:	f8c8 8080 	str.w	r8, [r8, #128]	@ 0x80
 801adaa:	f7ff f86b 	bl	8019e84 <rmw_get_implementation_identifier>
 801adae:	f8c8 007c 	str.w	r0, [r8, #124]	@ 0x7c
 801adb2:	f8c8 a084 	str.w	sl, [r8, #132]	@ 0x84
 801adb6:	4628      	mov	r0, r5
 801adb8:	f7e5 fa9c 	bl	80002f4 <strlen>
 801adbc:	3001      	adds	r0, #1
 801adbe:	f108 047c 	add.w	r4, r8, #124	@ 0x7c
 801adc2:	283c      	cmp	r0, #60	@ 0x3c
 801adc4:	f200 80a5 	bhi.w	801af12 <rmw_create_subscription+0x1c6>
 801adc8:	462b      	mov	r3, r5
 801adca:	4a59      	ldr	r2, [pc, #356]	@ (801af30 <rmw_create_subscription+0x1e4>)
 801adcc:	213c      	movs	r1, #60	@ 0x3c
 801adce:	4650      	mov	r0, sl
 801add0:	f006 fd16 	bl	8021800 <sniprintf>
 801add4:	4639      	mov	r1, r7
 801add6:	2250      	movs	r2, #80	@ 0x50
 801add8:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 801addc:	f8c8 9020 	str.w	r9, [r8, #32]
 801ade0:	f006 ff9b 	bl	8021d1a <memcpy>
 801ade4:	4630      	mov	r0, r6
 801ade6:	4953      	ldr	r1, [pc, #332]	@ (801af34 <rmw_create_subscription+0x1e8>)
 801ade8:	f7fa fdd8 	bl	801599c <get_message_typesupport_handle>
 801adec:	2800      	cmp	r0, #0
 801adee:	f000 8090 	beq.w	801af12 <rmw_create_subscription+0x1c6>
 801adf2:	6842      	ldr	r2, [r0, #4]
 801adf4:	f8c8 2018 	str.w	r2, [r8, #24]
 801adf8:	2a00      	cmp	r2, #0
 801adfa:	f000 808a 	beq.w	801af12 <rmw_create_subscription+0x1c6>
 801adfe:	4629      	mov	r1, r5
 801ae00:	463b      	mov	r3, r7
 801ae02:	4648      	mov	r0, r9
 801ae04:	f005 fb46 	bl	8020494 <create_topic>
 801ae08:	f8c8 001c 	str.w	r0, [r8, #28]
 801ae0c:	2800      	cmp	r0, #0
 801ae0e:	f000 8085 	beq.w	801af1c <rmw_create_subscription+0x1d0>
 801ae12:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ae16:	2104      	movs	r1, #4
 801ae18:	2506      	movs	r5, #6
 801ae1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801ae1e:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 801ae22:	1c42      	adds	r2, r0, #1
 801ae24:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 801ae28:	f001 fd10 	bl	801c84c <uxr_object_id>
 801ae2c:	f8c8 0010 	str.w	r0, [r8, #16]
 801ae30:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801ae34:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 801ae38:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ae3c:	9500      	str	r5, [sp, #0]
 801ae3e:	6819      	ldr	r1, [r3, #0]
 801ae40:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801ae44:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801ae48:	f001 faea 	bl	801c420 <uxr_buffer_create_subscriber_bin>
 801ae4c:	4602      	mov	r2, r0
 801ae4e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801ae52:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801ae56:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801ae5a:	f000 fdb3 	bl	801b9c4 <run_xrce_session>
 801ae5e:	2800      	cmp	r0, #0
 801ae60:	d057      	beq.n	801af12 <rmw_create_subscription+0x1c6>
 801ae62:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ae66:	4629      	mov	r1, r5
 801ae68:	ae08      	add	r6, sp, #32
 801ae6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801ae6e:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 801ae72:	1c42      	adds	r2, r0, #1
 801ae74:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 801ae78:	f001 fce8 	bl	801c84c <uxr_object_id>
 801ae7c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801ae80:	f8d8 301c 	ldr.w	r3, [r8, #28]
 801ae84:	4639      	mov	r1, r7
 801ae86:	f8c8 0014 	str.w	r0, [r8, #20]
 801ae8a:	4630      	mov	r0, r6
 801ae8c:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 801ae90:	9305      	str	r3, [sp, #20]
 801ae92:	f000 fdb3 	bl	801b9fc <convert_qos_profile>
 801ae96:	9503      	str	r5, [sp, #12]
 801ae98:	9b05      	ldr	r3, [sp, #20]
 801ae9a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801ae9e:	9001      	str	r0, [sp, #4]
 801aea0:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 801aea4:	f8ad 1008 	strh.w	r1, [sp, #8]
 801aea8:	691b      	ldr	r3, [r3, #16]
 801aeaa:	9300      	str	r3, [sp, #0]
 801aeac:	f8db 1000 	ldr.w	r1, [fp]
 801aeb0:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 801aeb4:	f001 fb5a 	bl	801c56c <uxr_buffer_create_datareader_bin>
 801aeb8:	4602      	mov	r2, r0
 801aeba:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801aebe:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801aec2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801aec6:	f000 fd7d 	bl	801b9c4 <run_xrce_session>
 801aeca:	b310      	cbz	r0, 801af12 <rmw_create_subscription+0x1c6>
 801aecc:	7a3b      	ldrb	r3, [r7, #8]
 801aece:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801aed2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801aed6:	2b02      	cmp	r3, #2
 801aed8:	920a      	str	r2, [sp, #40]	@ 0x28
 801aeda:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801aede:	f04f 0200 	mov.w	r2, #0
 801aee2:	bf08      	it	eq
 801aee4:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 801aee8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801aeec:	bf18      	it	ne
 801aeee:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	@ 0xd4
 801aef2:	920b      	str	r2, [sp, #44]	@ 0x2c
 801aef4:	9307      	str	r3, [sp, #28]
 801aef6:	ab0a      	add	r3, sp, #40	@ 0x28
 801aef8:	9300      	str	r3, [sp, #0]
 801aefa:	9b07      	ldr	r3, [sp, #28]
 801aefc:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801af00:	6809      	ldr	r1, [r1, #0]
 801af02:	f001 fcd3 	bl	801c8ac <uxr_buffer_request_data>
 801af06:	e000      	b.n	801af0a <rmw_create_subscription+0x1be>
 801af08:	2400      	movs	r4, #0
 801af0a:	4620      	mov	r0, r4
 801af0c:	b00d      	add	sp, #52	@ 0x34
 801af0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af12:	f8d8 001c 	ldr.w	r0, [r8, #28]
 801af16:	b108      	cbz	r0, 801af1c <rmw_create_subscription+0x1d0>
 801af18:	f000 fc48 	bl	801b7ac <rmw_uxrce_fini_topic_memory>
 801af1c:	4620      	mov	r0, r4
 801af1e:	2400      	movs	r4, #0
 801af20:	f000 fc02 	bl	801b728 <rmw_uxrce_fini_subscription_memory>
 801af24:	4620      	mov	r0, r4
 801af26:	b00d      	add	sp, #52	@ 0x34
 801af28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af2c:	2406955c 	.word	0x2406955c
 801af30:	08024ccc 	.word	0x08024ccc
 801af34:	08022e0c 	.word	0x08022e0c

0801af38 <rmw_subscription_get_actual_qos>:
 801af38:	b178      	cbz	r0, 801af5a <rmw_subscription_get_actual_qos+0x22>
 801af3a:	b510      	push	{r4, lr}
 801af3c:	fab1 f481 	clz	r4, r1
 801af40:	0964      	lsrs	r4, r4, #5
 801af42:	b141      	cbz	r1, 801af56 <rmw_subscription_get_actual_qos+0x1e>
 801af44:	6843      	ldr	r3, [r0, #4]
 801af46:	2250      	movs	r2, #80	@ 0x50
 801af48:	4608      	mov	r0, r1
 801af4a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 801af4e:	f006 fee4 	bl	8021d1a <memcpy>
 801af52:	4620      	mov	r0, r4
 801af54:	bd10      	pop	{r4, pc}
 801af56:	200b      	movs	r0, #11
 801af58:	bd10      	pop	{r4, pc}
 801af5a:	200b      	movs	r0, #11
 801af5c:	4770      	bx	lr
 801af5e:	bf00      	nop

0801af60 <rmw_destroy_subscription>:
 801af60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af64:	b128      	cbz	r0, 801af72 <rmw_destroy_subscription+0x12>
 801af66:	4604      	mov	r4, r0
 801af68:	6800      	ldr	r0, [r0, #0]
 801af6a:	460d      	mov	r5, r1
 801af6c:	f000 fe3c 	bl	801bbe8 <is_uxrce_rmw_identifier_valid>
 801af70:	b918      	cbnz	r0, 801af7a <rmw_destroy_subscription+0x1a>
 801af72:	2401      	movs	r4, #1
 801af74:	4620      	mov	r0, r4
 801af76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af7a:	6863      	ldr	r3, [r4, #4]
 801af7c:	2b00      	cmp	r3, #0
 801af7e:	d0f8      	beq.n	801af72 <rmw_destroy_subscription+0x12>
 801af80:	fab5 f485 	clz	r4, r5
 801af84:	0964      	lsrs	r4, r4, #5
 801af86:	2d00      	cmp	r5, #0
 801af88:	d0f3      	beq.n	801af72 <rmw_destroy_subscription+0x12>
 801af8a:	6828      	ldr	r0, [r5, #0]
 801af8c:	f000 fe2c 	bl	801bbe8 <is_uxrce_rmw_identifier_valid>
 801af90:	2800      	cmp	r0, #0
 801af92:	d0ee      	beq.n	801af72 <rmw_destroy_subscription+0x12>
 801af94:	686e      	ldr	r6, [r5, #4]
 801af96:	2e00      	cmp	r6, #0
 801af98:	d0eb      	beq.n	801af72 <rmw_destroy_subscription+0x12>
 801af9a:	6a37      	ldr	r7, [r6, #32]
 801af9c:	6972      	ldr	r2, [r6, #20]
 801af9e:	6938      	ldr	r0, [r7, #16]
 801afa0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801afa4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801afa8:	6819      	ldr	r1, [r3, #0]
 801afaa:	f001 fcb9 	bl	801c920 <uxr_buffer_cancel_data>
 801afae:	4602      	mov	r2, r0
 801afb0:	6938      	ldr	r0, [r7, #16]
 801afb2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801afb6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801afba:	f000 fd03 	bl	801b9c4 <run_xrce_session>
 801afbe:	69f0      	ldr	r0, [r6, #28]
 801afc0:	f005 fab8 	bl	8020534 <destroy_topic>
 801afc4:	6a33      	ldr	r3, [r6, #32]
 801afc6:	6972      	ldr	r2, [r6, #20]
 801afc8:	6918      	ldr	r0, [r3, #16]
 801afca:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801afce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801afd2:	6819      	ldr	r1, [r3, #0]
 801afd4:	f001 f940 	bl	801c258 <uxr_buffer_delete_entity>
 801afd8:	6a33      	ldr	r3, [r6, #32]
 801afda:	4680      	mov	r8, r0
 801afdc:	6932      	ldr	r2, [r6, #16]
 801afde:	6918      	ldr	r0, [r3, #16]
 801afe0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801afe4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801afe8:	6819      	ldr	r1, [r3, #0]
 801afea:	f001 f935 	bl	801c258 <uxr_buffer_delete_entity>
 801afee:	4606      	mov	r6, r0
 801aff0:	6938      	ldr	r0, [r7, #16]
 801aff2:	4642      	mov	r2, r8
 801aff4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801aff8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801affc:	f000 fce2 	bl	801b9c4 <run_xrce_session>
 801b000:	693f      	ldr	r7, [r7, #16]
 801b002:	4632      	mov	r2, r6
 801b004:	4606      	mov	r6, r0
 801b006:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801b00a:	4638      	mov	r0, r7
 801b00c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 801b010:	f000 fcd8 	bl	801b9c4 <run_xrce_session>
 801b014:	b126      	cbz	r6, 801b020 <rmw_destroy_subscription+0xc0>
 801b016:	b118      	cbz	r0, 801b020 <rmw_destroy_subscription+0xc0>
 801b018:	4628      	mov	r0, r5
 801b01a:	f000 fb85 	bl	801b728 <rmw_uxrce_fini_subscription_memory>
 801b01e:	e7a9      	b.n	801af74 <rmw_destroy_subscription+0x14>
 801b020:	2402      	movs	r4, #2
 801b022:	e7f9      	b.n	801b018 <rmw_destroy_subscription+0xb8>

0801b024 <rmw_take_with_info>:
 801b024:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b026:	4604      	mov	r4, r0
 801b028:	6800      	ldr	r0, [r0, #0]
 801b02a:	b089      	sub	sp, #36	@ 0x24
 801b02c:	460f      	mov	r7, r1
 801b02e:	4615      	mov	r5, r2
 801b030:	b128      	cbz	r0, 801b03e <rmw_take_with_info+0x1a>
 801b032:	4b24      	ldr	r3, [pc, #144]	@ (801b0c4 <rmw_take_with_info+0xa0>)
 801b034:	6819      	ldr	r1, [r3, #0]
 801b036:	f7e5 f953 	bl	80002e0 <strcmp>
 801b03a:	2800      	cmp	r0, #0
 801b03c:	d13e      	bne.n	801b0bc <rmw_take_with_info+0x98>
 801b03e:	b305      	cbz	r5, 801b082 <rmw_take_with_info+0x5e>
 801b040:	2300      	movs	r3, #0
 801b042:	6864      	ldr	r4, [r4, #4]
 801b044:	702b      	strb	r3, [r5, #0]
 801b046:	f000 fc3f 	bl	801b8c8 <rmw_uxrce_clean_expired_static_input_buffer>
 801b04a:	4620      	mov	r0, r4
 801b04c:	f000 fc14 	bl	801b878 <rmw_uxrce_find_static_input_buffer_by_owner>
 801b050:	4606      	mov	r6, r0
 801b052:	b1f0      	cbz	r0, 801b092 <rmw_take_with_info+0x6e>
 801b054:	6881      	ldr	r1, [r0, #8]
 801b056:	4668      	mov	r0, sp
 801b058:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801b05c:	3110      	adds	r1, #16
 801b05e:	f7f9 fbb1 	bl	80147c4 <ucdr_init_buffer>
 801b062:	69a3      	ldr	r3, [r4, #24]
 801b064:	4639      	mov	r1, r7
 801b066:	4668      	mov	r0, sp
 801b068:	68db      	ldr	r3, [r3, #12]
 801b06a:	4798      	blx	r3
 801b06c:	4604      	mov	r4, r0
 801b06e:	4631      	mov	r1, r6
 801b070:	4815      	ldr	r0, [pc, #84]	@ (801b0c8 <rmw_take_with_info+0xa4>)
 801b072:	f005 f9d1 	bl	8020418 <put_memory>
 801b076:	702c      	strb	r4, [r5, #0]
 801b078:	f084 0001 	eor.w	r0, r4, #1
 801b07c:	b2c0      	uxtb	r0, r0
 801b07e:	b009      	add	sp, #36	@ 0x24
 801b080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b082:	6864      	ldr	r4, [r4, #4]
 801b084:	f000 fc20 	bl	801b8c8 <rmw_uxrce_clean_expired_static_input_buffer>
 801b088:	4620      	mov	r0, r4
 801b08a:	f000 fbf5 	bl	801b878 <rmw_uxrce_find_static_input_buffer_by_owner>
 801b08e:	4605      	mov	r5, r0
 801b090:	b910      	cbnz	r0, 801b098 <rmw_take_with_info+0x74>
 801b092:	2001      	movs	r0, #1
 801b094:	b009      	add	sp, #36	@ 0x24
 801b096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b098:	68a9      	ldr	r1, [r5, #8]
 801b09a:	4668      	mov	r0, sp
 801b09c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801b0a0:	3110      	adds	r1, #16
 801b0a2:	f7f9 fb8f 	bl	80147c4 <ucdr_init_buffer>
 801b0a6:	69a3      	ldr	r3, [r4, #24]
 801b0a8:	4639      	mov	r1, r7
 801b0aa:	4668      	mov	r0, sp
 801b0ac:	68db      	ldr	r3, [r3, #12]
 801b0ae:	4798      	blx	r3
 801b0b0:	4629      	mov	r1, r5
 801b0b2:	4604      	mov	r4, r0
 801b0b4:	4804      	ldr	r0, [pc, #16]	@ (801b0c8 <rmw_take_with_info+0xa4>)
 801b0b6:	f005 f9af 	bl	8020418 <put_memory>
 801b0ba:	e7dd      	b.n	801b078 <rmw_take_with_info+0x54>
 801b0bc:	200c      	movs	r0, #12
 801b0be:	b009      	add	sp, #36	@ 0x24
 801b0c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b0c2:	bf00      	nop
 801b0c4:	08024ff8 	.word	0x08024ff8
 801b0c8:	2406954c 	.word	0x2406954c

0801b0cc <rmw_uxrce_transport_init>:
 801b0cc:	b508      	push	{r3, lr}
 801b0ce:	b108      	cbz	r0, 801b0d4 <rmw_uxrce_transport_init+0x8>
 801b0d0:	f100 0210 	add.w	r2, r0, #16
 801b0d4:	b139      	cbz	r1, 801b0e6 <rmw_uxrce_transport_init+0x1a>
 801b0d6:	6949      	ldr	r1, [r1, #20]
 801b0d8:	4610      	mov	r0, r2
 801b0da:	f001 fb7f 	bl	801c7dc <uxr_init_custom_transport>
 801b0de:	f080 0001 	eor.w	r0, r0, #1
 801b0e2:	b2c0      	uxtb	r0, r0
 801b0e4:	bd08      	pop	{r3, pc}
 801b0e6:	4b04      	ldr	r3, [pc, #16]	@ (801b0f8 <rmw_uxrce_transport_init+0x2c>)
 801b0e8:	4610      	mov	r0, r2
 801b0ea:	6859      	ldr	r1, [r3, #4]
 801b0ec:	f001 fb76 	bl	801c7dc <uxr_init_custom_transport>
 801b0f0:	f080 0001 	eor.w	r0, r0, #1
 801b0f4:	b2c0      	uxtb	r0, r0
 801b0f6:	bd08      	pop	{r3, pc}
 801b0f8:	2406493c 	.word	0x2406493c

0801b0fc <rmw_wait>:
 801b0fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b100:	4698      	mov	r8, r3
 801b102:	ea40 0301 	orr.w	r3, r0, r1
 801b106:	b089      	sub	sp, #36	@ 0x24
 801b108:	ea48 0303 	orr.w	r3, r8, r3
 801b10c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801b10e:	4313      	orrs	r3, r2
 801b110:	f000 8106 	beq.w	801b320 <rmw_wait+0x224>
 801b114:	4605      	mov	r5, r0
 801b116:	460e      	mov	r6, r1
 801b118:	4691      	mov	r9, r2
 801b11a:	b16c      	cbz	r4, 801b138 <rmw_wait+0x3c>
 801b11c:	4ba6      	ldr	r3, [pc, #664]	@ (801b3b8 <rmw_wait+0x2bc>)
 801b11e:	af04      	add	r7, sp, #16
 801b120:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b122:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801b126:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801b12a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801b12e:	f004 fff3 	bl	8020118 <rmw_time_equal>
 801b132:	2800      	cmp	r0, #0
 801b134:	f000 810b 	beq.w	801b34e <rmw_wait+0x252>
 801b138:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801b13c:	f000 fbc4 	bl	801b8c8 <rmw_uxrce_clean_expired_static_input_buffer>
 801b140:	4b9e      	ldr	r3, [pc, #632]	@ (801b3bc <rmw_wait+0x2c0>)
 801b142:	681c      	ldr	r4, [r3, #0]
 801b144:	b14c      	cbz	r4, 801b15a <rmw_wait+0x5e>
 801b146:	4623      	mov	r3, r4
 801b148:	2100      	movs	r1, #0
 801b14a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801b14e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801b152:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801b156:	2b00      	cmp	r3, #0
 801b158:	d1f7      	bne.n	801b14a <rmw_wait+0x4e>
 801b15a:	f1b9 0f00 	cmp.w	r9, #0
 801b15e:	d011      	beq.n	801b184 <rmw_wait+0x88>
 801b160:	f8d9 1000 	ldr.w	r1, [r9]
 801b164:	b171      	cbz	r1, 801b184 <rmw_wait+0x88>
 801b166:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801b16a:	2300      	movs	r3, #0
 801b16c:	2001      	movs	r0, #1
 801b16e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801b172:	3301      	adds	r3, #1
 801b174:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801b176:	4299      	cmp	r1, r3
 801b178:	6912      	ldr	r2, [r2, #16]
 801b17a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801b17e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801b182:	d1f4      	bne.n	801b16e <rmw_wait+0x72>
 801b184:	f1b8 0f00 	cmp.w	r8, #0
 801b188:	d011      	beq.n	801b1ae <rmw_wait+0xb2>
 801b18a:	f8d8 1000 	ldr.w	r1, [r8]
 801b18e:	b171      	cbz	r1, 801b1ae <rmw_wait+0xb2>
 801b190:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801b194:	2300      	movs	r3, #0
 801b196:	2001      	movs	r0, #1
 801b198:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801b19c:	3301      	adds	r3, #1
 801b19e:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801b1a0:	4299      	cmp	r1, r3
 801b1a2:	6912      	ldr	r2, [r2, #16]
 801b1a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801b1a8:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801b1ac:	d1f4      	bne.n	801b198 <rmw_wait+0x9c>
 801b1ae:	b185      	cbz	r5, 801b1d2 <rmw_wait+0xd6>
 801b1b0:	6829      	ldr	r1, [r5, #0]
 801b1b2:	b171      	cbz	r1, 801b1d2 <rmw_wait+0xd6>
 801b1b4:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801b1b8:	2300      	movs	r3, #0
 801b1ba:	2001      	movs	r0, #1
 801b1bc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801b1c0:	3301      	adds	r3, #1
 801b1c2:	6a12      	ldr	r2, [r2, #32]
 801b1c4:	4299      	cmp	r1, r3
 801b1c6:	6912      	ldr	r2, [r2, #16]
 801b1c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801b1cc:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801b1d0:	d1f4      	bne.n	801b1bc <rmw_wait+0xc0>
 801b1d2:	b344      	cbz	r4, 801b226 <rmw_wait+0x12a>
 801b1d4:	4622      	mov	r2, r4
 801b1d6:	2300      	movs	r3, #0
 801b1d8:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801b1dc:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801b1e0:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801b1e4:	440b      	add	r3, r1
 801b1e6:	b2db      	uxtb	r3, r3
 801b1e8:	2a00      	cmp	r2, #0
 801b1ea:	d1f5      	bne.n	801b1d8 <rmw_wait+0xdc>
 801b1ec:	2b00      	cmp	r3, #0
 801b1ee:	d05f      	beq.n	801b2b0 <rmw_wait+0x1b4>
 801b1f0:	1c7a      	adds	r2, r7, #1
 801b1f2:	d00d      	beq.n	801b210 <rmw_wait+0x114>
 801b1f4:	ee07 7a90 	vmov	s15, r7
 801b1f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801b1fc:	ee07 3a90 	vmov	s15, r3
 801b200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b204:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b208:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801b20c:	ee17 7a90 	vmov	r7, s15
 801b210:	68a0      	ldr	r0, [r4, #8]
 801b212:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801b216:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801b21a:	2b00      	cmp	r3, #0
 801b21c:	f040 808d 	bne.w	801b33a <rmw_wait+0x23e>
 801b220:	6864      	ldr	r4, [r4, #4]
 801b222:	2c00      	cmp	r4, #0
 801b224:	d1f4      	bne.n	801b210 <rmw_wait+0x114>
 801b226:	f1b9 0f00 	cmp.w	r9, #0
 801b22a:	f000 80a1 	beq.w	801b370 <rmw_wait+0x274>
 801b22e:	f8d9 7000 	ldr.w	r7, [r9]
 801b232:	2f00      	cmp	r7, #0
 801b234:	f000 80a4 	beq.w	801b380 <rmw_wait+0x284>
 801b238:	2400      	movs	r4, #0
 801b23a:	4627      	mov	r7, r4
 801b23c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801b240:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b244:	f000 fb18 	bl	801b878 <rmw_uxrce_find_static_input_buffer_by_owner>
 801b248:	2800      	cmp	r0, #0
 801b24a:	d03b      	beq.n	801b2c4 <rmw_wait+0x1c8>
 801b24c:	3401      	adds	r4, #1
 801b24e:	f8d9 3000 	ldr.w	r3, [r9]
 801b252:	2701      	movs	r7, #1
 801b254:	42a3      	cmp	r3, r4
 801b256:	d8f1      	bhi.n	801b23c <rmw_wait+0x140>
 801b258:	2701      	movs	r7, #1
 801b25a:	f1b8 0f00 	cmp.w	r8, #0
 801b25e:	d010      	beq.n	801b282 <rmw_wait+0x186>
 801b260:	f8d8 3000 	ldr.w	r3, [r8]
 801b264:	b16b      	cbz	r3, 801b282 <rmw_wait+0x186>
 801b266:	2400      	movs	r4, #0
 801b268:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b26c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b270:	f000 fb02 	bl	801b878 <rmw_uxrce_find_static_input_buffer_by_owner>
 801b274:	b370      	cbz	r0, 801b2d4 <rmw_wait+0x1d8>
 801b276:	3401      	adds	r4, #1
 801b278:	f8d8 3000 	ldr.w	r3, [r8]
 801b27c:	2701      	movs	r7, #1
 801b27e:	42a3      	cmp	r3, r4
 801b280:	d8f2      	bhi.n	801b268 <rmw_wait+0x16c>
 801b282:	2d00      	cmp	r5, #0
 801b284:	d035      	beq.n	801b2f2 <rmw_wait+0x1f6>
 801b286:	682b      	ldr	r3, [r5, #0]
 801b288:	b39b      	cbz	r3, 801b2f2 <rmw_wait+0x1f6>
 801b28a:	2400      	movs	r4, #0
 801b28c:	686b      	ldr	r3, [r5, #4]
 801b28e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b292:	f000 faf1 	bl	801b878 <rmw_uxrce_find_static_input_buffer_by_owner>
 801b296:	b328      	cbz	r0, 801b2e4 <rmw_wait+0x1e8>
 801b298:	3401      	adds	r4, #1
 801b29a:	682b      	ldr	r3, [r5, #0]
 801b29c:	2701      	movs	r7, #1
 801b29e:	42a3      	cmp	r3, r4
 801b2a0:	d8f4      	bhi.n	801b28c <rmw_wait+0x190>
 801b2a2:	2e00      	cmp	r6, #0
 801b2a4:	d03c      	beq.n	801b320 <rmw_wait+0x224>
 801b2a6:	6834      	ldr	r4, [r6, #0]
 801b2a8:	2c00      	cmp	r4, #0
 801b2aa:	d039      	beq.n	801b320 <rmw_wait+0x224>
 801b2ac:	2701      	movs	r7, #1
 801b2ae:	e023      	b.n	801b2f8 <rmw_wait+0x1fc>
 801b2b0:	68a0      	ldr	r0, [r4, #8]
 801b2b2:	2100      	movs	r1, #0
 801b2b4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b2b8:	f002 f8c8 	bl	801d44c <uxr_run_session_timeout>
 801b2bc:	6864      	ldr	r4, [r4, #4]
 801b2be:	2c00      	cmp	r4, #0
 801b2c0:	d1f6      	bne.n	801b2b0 <rmw_wait+0x1b4>
 801b2c2:	e7b0      	b.n	801b226 <rmw_wait+0x12a>
 801b2c4:	e9d9 3200 	ldrd	r3, r2, [r9]
 801b2c8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801b2cc:	3401      	adds	r4, #1
 801b2ce:	42a3      	cmp	r3, r4
 801b2d0:	d8b4      	bhi.n	801b23c <rmw_wait+0x140>
 801b2d2:	e7c2      	b.n	801b25a <rmw_wait+0x15e>
 801b2d4:	e9d8 3200 	ldrd	r3, r2, [r8]
 801b2d8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801b2dc:	3401      	adds	r4, #1
 801b2de:	429c      	cmp	r4, r3
 801b2e0:	d3c2      	bcc.n	801b268 <rmw_wait+0x16c>
 801b2e2:	e7ce      	b.n	801b282 <rmw_wait+0x186>
 801b2e4:	e9d5 3200 	ldrd	r3, r2, [r5]
 801b2e8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801b2ec:	3401      	adds	r4, #1
 801b2ee:	42a3      	cmp	r3, r4
 801b2f0:	d8cc      	bhi.n	801b28c <rmw_wait+0x190>
 801b2f2:	b1a6      	cbz	r6, 801b31e <rmw_wait+0x222>
 801b2f4:	6834      	ldr	r4, [r6, #0]
 801b2f6:	b194      	cbz	r4, 801b31e <rmw_wait+0x222>
 801b2f8:	2300      	movs	r3, #0
 801b2fa:	461d      	mov	r5, r3
 801b2fc:	e004      	b.n	801b308 <rmw_wait+0x20c>
 801b2fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801b302:	3301      	adds	r3, #1
 801b304:	42a3      	cmp	r3, r4
 801b306:	d00a      	beq.n	801b31e <rmw_wait+0x222>
 801b308:	6870      	ldr	r0, [r6, #4]
 801b30a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801b30e:	7c0a      	ldrb	r2, [r1, #16]
 801b310:	2a00      	cmp	r2, #0
 801b312:	d0f4      	beq.n	801b2fe <rmw_wait+0x202>
 801b314:	3301      	adds	r3, #1
 801b316:	4617      	mov	r7, r2
 801b318:	740d      	strb	r5, [r1, #16]
 801b31a:	42a3      	cmp	r3, r4
 801b31c:	d1f4      	bne.n	801b308 <rmw_wait+0x20c>
 801b31e:	b147      	cbz	r7, 801b332 <rmw_wait+0x236>
 801b320:	2000      	movs	r0, #0
 801b322:	b009      	add	sp, #36	@ 0x24
 801b324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b328:	b11e      	cbz	r6, 801b332 <rmw_wait+0x236>
 801b32a:	6834      	ldr	r4, [r6, #0]
 801b32c:	462f      	mov	r7, r5
 801b32e:	2c00      	cmp	r4, #0
 801b330:	d1e2      	bne.n	801b2f8 <rmw_wait+0x1fc>
 801b332:	2002      	movs	r0, #2
 801b334:	b009      	add	sp, #36	@ 0x24
 801b336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b33a:	4639      	mov	r1, r7
 801b33c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b340:	f002 f89e 	bl	801d480 <uxr_run_session_until_data>
 801b344:	6864      	ldr	r4, [r4, #4]
 801b346:	2c00      	cmp	r4, #0
 801b348:	f47f af62 	bne.w	801b210 <rmw_wait+0x114>
 801b34c:	e76b      	b.n	801b226 <rmw_wait+0x12a>
 801b34e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801b352:	f004 ff37 	bl	80201c4 <rmw_time_total_nsec>
 801b356:	2300      	movs	r3, #0
 801b358:	4a19      	ldr	r2, [pc, #100]	@ (801b3c0 <rmw_wait+0x2c4>)
 801b35a:	f7e5 f879 	bl	8000450 <__aeabi_uldivmod>
 801b35e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801b362:	4607      	mov	r7, r0
 801b364:	f171 0300 	sbcs.w	r3, r1, #0
 801b368:	bfa8      	it	ge
 801b36a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801b36e:	e6e5      	b.n	801b13c <rmw_wait+0x40>
 801b370:	f1b8 0f00 	cmp.w	r8, #0
 801b374:	d00f      	beq.n	801b396 <rmw_wait+0x29a>
 801b376:	f8d8 3000 	ldr.w	r3, [r8]
 801b37a:	b193      	cbz	r3, 801b3a2 <rmw_wait+0x2a6>
 801b37c:	464f      	mov	r7, r9
 801b37e:	e772      	b.n	801b266 <rmw_wait+0x16a>
 801b380:	f1b8 0f00 	cmp.w	r8, #0
 801b384:	d007      	beq.n	801b396 <rmw_wait+0x29a>
 801b386:	f8d8 3000 	ldr.w	r3, [r8]
 801b38a:	2b00      	cmp	r3, #0
 801b38c:	f47f af6b 	bne.w	801b266 <rmw_wait+0x16a>
 801b390:	b155      	cbz	r5, 801b3a8 <rmw_wait+0x2ac>
 801b392:	461f      	mov	r7, r3
 801b394:	e777      	b.n	801b286 <rmw_wait+0x18a>
 801b396:	2d00      	cmp	r5, #0
 801b398:	d0c6      	beq.n	801b328 <rmw_wait+0x22c>
 801b39a:	682b      	ldr	r3, [r5, #0]
 801b39c:	b143      	cbz	r3, 801b3b0 <rmw_wait+0x2b4>
 801b39e:	4647      	mov	r7, r8
 801b3a0:	e773      	b.n	801b28a <rmw_wait+0x18e>
 801b3a2:	b10d      	cbz	r5, 801b3a8 <rmw_wait+0x2ac>
 801b3a4:	464f      	mov	r7, r9
 801b3a6:	e76e      	b.n	801b286 <rmw_wait+0x18a>
 801b3a8:	462f      	mov	r7, r5
 801b3aa:	2e00      	cmp	r6, #0
 801b3ac:	d1a2      	bne.n	801b2f4 <rmw_wait+0x1f8>
 801b3ae:	e7c0      	b.n	801b332 <rmw_wait+0x236>
 801b3b0:	4647      	mov	r7, r8
 801b3b2:	2e00      	cmp	r6, #0
 801b3b4:	d19e      	bne.n	801b2f4 <rmw_wait+0x1f8>
 801b3b6:	e7bc      	b.n	801b332 <rmw_wait+0x236>
 801b3b8:	08022c38 	.word	0x08022c38
 801b3bc:	2406953c 	.word	0x2406953c
 801b3c0:	000f4240 	.word	0x000f4240

0801b3c4 <rmw_create_wait_set>:
 801b3c4:	b508      	push	{r3, lr}
 801b3c6:	4803      	ldr	r0, [pc, #12]	@ (801b3d4 <rmw_create_wait_set+0x10>)
 801b3c8:	f005 f816 	bl	80203f8 <get_memory>
 801b3cc:	b108      	cbz	r0, 801b3d2 <rmw_create_wait_set+0xe>
 801b3ce:	6880      	ldr	r0, [r0, #8]
 801b3d0:	3010      	adds	r0, #16
 801b3d2:	bd08      	pop	{r3, pc}
 801b3d4:	2406957c 	.word	0x2406957c

0801b3d8 <rmw_destroy_wait_set>:
 801b3d8:	b508      	push	{r3, lr}
 801b3da:	4b08      	ldr	r3, [pc, #32]	@ (801b3fc <rmw_destroy_wait_set+0x24>)
 801b3dc:	6819      	ldr	r1, [r3, #0]
 801b3de:	b911      	cbnz	r1, 801b3e6 <rmw_destroy_wait_set+0xe>
 801b3e0:	e00a      	b.n	801b3f8 <rmw_destroy_wait_set+0x20>
 801b3e2:	6849      	ldr	r1, [r1, #4]
 801b3e4:	b141      	cbz	r1, 801b3f8 <rmw_destroy_wait_set+0x20>
 801b3e6:	688b      	ldr	r3, [r1, #8]
 801b3e8:	3310      	adds	r3, #16
 801b3ea:	4298      	cmp	r0, r3
 801b3ec:	d1f9      	bne.n	801b3e2 <rmw_destroy_wait_set+0xa>
 801b3ee:	4803      	ldr	r0, [pc, #12]	@ (801b3fc <rmw_destroy_wait_set+0x24>)
 801b3f0:	f005 f812 	bl	8020418 <put_memory>
 801b3f4:	2000      	movs	r0, #0
 801b3f6:	bd08      	pop	{r3, pc}
 801b3f8:	2001      	movs	r0, #1
 801b3fa:	bd08      	pop	{r3, pc}
 801b3fc:	2406957c 	.word	0x2406957c

0801b400 <rmw_uxrce_init_service_memory>:
 801b400:	b1e2      	cbz	r2, 801b43c <rmw_uxrce_init_service_memory+0x3c>
 801b402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b406:	7b05      	ldrb	r5, [r0, #12]
 801b408:	4606      	mov	r6, r0
 801b40a:	b9ad      	cbnz	r5, 801b438 <rmw_uxrce_init_service_memory+0x38>
 801b40c:	23c8      	movs	r3, #200	@ 0xc8
 801b40e:	4617      	mov	r7, r2
 801b410:	460c      	mov	r4, r1
 801b412:	46a8      	mov	r8, r5
 801b414:	6083      	str	r3, [r0, #8]
 801b416:	f240 1301 	movw	r3, #257	@ 0x101
 801b41a:	e9c0 5500 	strd	r5, r5, [r0]
 801b41e:	8183      	strh	r3, [r0, #12]
 801b420:	3501      	adds	r5, #1
 801b422:	4621      	mov	r1, r4
 801b424:	4630      	mov	r0, r6
 801b426:	f004 fff7 	bl	8020418 <put_memory>
 801b42a:	42af      	cmp	r7, r5
 801b42c:	60a4      	str	r4, [r4, #8]
 801b42e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 801b432:	f804 8cbc 	strb.w	r8, [r4, #-188]
 801b436:	d1f3      	bne.n	801b420 <rmw_uxrce_init_service_memory+0x20>
 801b438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b43c:	4770      	bx	lr
 801b43e:	bf00      	nop

0801b440 <rmw_uxrce_init_client_memory>:
 801b440:	b1e2      	cbz	r2, 801b47c <rmw_uxrce_init_client_memory+0x3c>
 801b442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b446:	7b05      	ldrb	r5, [r0, #12]
 801b448:	4606      	mov	r6, r0
 801b44a:	b9ad      	cbnz	r5, 801b478 <rmw_uxrce_init_client_memory+0x38>
 801b44c:	23c8      	movs	r3, #200	@ 0xc8
 801b44e:	4617      	mov	r7, r2
 801b450:	460c      	mov	r4, r1
 801b452:	46a8      	mov	r8, r5
 801b454:	6083      	str	r3, [r0, #8]
 801b456:	f240 1301 	movw	r3, #257	@ 0x101
 801b45a:	e9c0 5500 	strd	r5, r5, [r0]
 801b45e:	8183      	strh	r3, [r0, #12]
 801b460:	3501      	adds	r5, #1
 801b462:	4621      	mov	r1, r4
 801b464:	4630      	mov	r0, r6
 801b466:	f004 ffd7 	bl	8020418 <put_memory>
 801b46a:	42af      	cmp	r7, r5
 801b46c:	60a4      	str	r4, [r4, #8]
 801b46e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 801b472:	f804 8cbc 	strb.w	r8, [r4, #-188]
 801b476:	d1f3      	bne.n	801b460 <rmw_uxrce_init_client_memory+0x20>
 801b478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b47c:	4770      	bx	lr
 801b47e:	bf00      	nop

0801b480 <rmw_uxrce_init_publisher_memory>:
 801b480:	b1e2      	cbz	r2, 801b4bc <rmw_uxrce_init_publisher_memory+0x3c>
 801b482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b486:	7b05      	ldrb	r5, [r0, #12]
 801b488:	4606      	mov	r6, r0
 801b48a:	b9ad      	cbnz	r5, 801b4b8 <rmw_uxrce_init_publisher_memory+0x38>
 801b48c:	23d8      	movs	r3, #216	@ 0xd8
 801b48e:	4617      	mov	r7, r2
 801b490:	460c      	mov	r4, r1
 801b492:	46a8      	mov	r8, r5
 801b494:	6083      	str	r3, [r0, #8]
 801b496:	f240 1301 	movw	r3, #257	@ 0x101
 801b49a:	e9c0 5500 	strd	r5, r5, [r0]
 801b49e:	8183      	strh	r3, [r0, #12]
 801b4a0:	3501      	adds	r5, #1
 801b4a2:	4621      	mov	r1, r4
 801b4a4:	4630      	mov	r0, r6
 801b4a6:	f004 ffb7 	bl	8020418 <put_memory>
 801b4aa:	42af      	cmp	r7, r5
 801b4ac:	60a4      	str	r4, [r4, #8]
 801b4ae:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 801b4b2:	f804 8ccc 	strb.w	r8, [r4, #-204]
 801b4b6:	d1f3      	bne.n	801b4a0 <rmw_uxrce_init_publisher_memory+0x20>
 801b4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4bc:	4770      	bx	lr
 801b4be:	bf00      	nop

0801b4c0 <rmw_uxrce_init_subscription_memory>:
 801b4c0:	b1e2      	cbz	r2, 801b4fc <rmw_uxrce_init_subscription_memory+0x3c>
 801b4c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b4c6:	7b05      	ldrb	r5, [r0, #12]
 801b4c8:	4606      	mov	r6, r0
 801b4ca:	b9ad      	cbnz	r5, 801b4f8 <rmw_uxrce_init_subscription_memory+0x38>
 801b4cc:	23d8      	movs	r3, #216	@ 0xd8
 801b4ce:	4617      	mov	r7, r2
 801b4d0:	460c      	mov	r4, r1
 801b4d2:	46a8      	mov	r8, r5
 801b4d4:	6083      	str	r3, [r0, #8]
 801b4d6:	f240 1301 	movw	r3, #257	@ 0x101
 801b4da:	e9c0 5500 	strd	r5, r5, [r0]
 801b4de:	8183      	strh	r3, [r0, #12]
 801b4e0:	3501      	adds	r5, #1
 801b4e2:	4621      	mov	r1, r4
 801b4e4:	4630      	mov	r0, r6
 801b4e6:	f004 ff97 	bl	8020418 <put_memory>
 801b4ea:	42af      	cmp	r7, r5
 801b4ec:	60a4      	str	r4, [r4, #8]
 801b4ee:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 801b4f2:	f804 8ccc 	strb.w	r8, [r4, #-204]
 801b4f6:	d1f3      	bne.n	801b4e0 <rmw_uxrce_init_subscription_memory+0x20>
 801b4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4fc:	4770      	bx	lr
 801b4fe:	bf00      	nop

0801b500 <rmw_uxrce_init_node_memory>:
 801b500:	b1e2      	cbz	r2, 801b53c <rmw_uxrce_init_node_memory+0x3c>
 801b502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b506:	7b05      	ldrb	r5, [r0, #12]
 801b508:	4606      	mov	r6, r0
 801b50a:	b9ad      	cbnz	r5, 801b538 <rmw_uxrce_init_node_memory+0x38>
 801b50c:	23a4      	movs	r3, #164	@ 0xa4
 801b50e:	4617      	mov	r7, r2
 801b510:	460c      	mov	r4, r1
 801b512:	46a8      	mov	r8, r5
 801b514:	6083      	str	r3, [r0, #8]
 801b516:	f240 1301 	movw	r3, #257	@ 0x101
 801b51a:	e9c0 5500 	strd	r5, r5, [r0]
 801b51e:	8183      	strh	r3, [r0, #12]
 801b520:	3501      	adds	r5, #1
 801b522:	4621      	mov	r1, r4
 801b524:	4630      	mov	r0, r6
 801b526:	f004 ff77 	bl	8020418 <put_memory>
 801b52a:	42af      	cmp	r7, r5
 801b52c:	60a4      	str	r4, [r4, #8]
 801b52e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 801b532:	f804 8c98 	strb.w	r8, [r4, #-152]
 801b536:	d1f3      	bne.n	801b520 <rmw_uxrce_init_node_memory+0x20>
 801b538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b53c:	4770      	bx	lr
 801b53e:	bf00      	nop

0801b540 <rmw_uxrce_init_session_memory>:
 801b540:	b1ea      	cbz	r2, 801b57e <rmw_uxrce_init_session_memory+0x3e>
 801b542:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b546:	7b05      	ldrb	r5, [r0, #12]
 801b548:	4606      	mov	r6, r0
 801b54a:	b9b5      	cbnz	r5, 801b57a <rmw_uxrce_init_session_memory+0x3a>
 801b54c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 801b550:	f240 1301 	movw	r3, #257	@ 0x101
 801b554:	4617      	mov	r7, r2
 801b556:	460c      	mov	r4, r1
 801b558:	46a9      	mov	r9, r5
 801b55a:	f8c0 8008 	str.w	r8, [r0, #8]
 801b55e:	8183      	strh	r3, [r0, #12]
 801b560:	e9c0 5500 	strd	r5, r5, [r0]
 801b564:	3501      	adds	r5, #1
 801b566:	4621      	mov	r1, r4
 801b568:	4630      	mov	r0, r6
 801b56a:	f004 ff55 	bl	8020418 <put_memory>
 801b56e:	42af      	cmp	r7, r5
 801b570:	60a4      	str	r4, [r4, #8]
 801b572:	f884 900c 	strb.w	r9, [r4, #12]
 801b576:	4444      	add	r4, r8
 801b578:	d1f4      	bne.n	801b564 <rmw_uxrce_init_session_memory+0x24>
 801b57a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b57e:	4770      	bx	lr

0801b580 <rmw_uxrce_init_topic_memory>:
 801b580:	b1e2      	cbz	r2, 801b5bc <rmw_uxrce_init_topic_memory+0x3c>
 801b582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b586:	7b05      	ldrb	r5, [r0, #12]
 801b588:	4606      	mov	r6, r0
 801b58a:	b9ad      	cbnz	r5, 801b5b8 <rmw_uxrce_init_topic_memory+0x38>
 801b58c:	231c      	movs	r3, #28
 801b58e:	4617      	mov	r7, r2
 801b590:	460c      	mov	r4, r1
 801b592:	46a8      	mov	r8, r5
 801b594:	6083      	str	r3, [r0, #8]
 801b596:	f240 1301 	movw	r3, #257	@ 0x101
 801b59a:	e9c0 5500 	strd	r5, r5, [r0]
 801b59e:	8183      	strh	r3, [r0, #12]
 801b5a0:	3501      	adds	r5, #1
 801b5a2:	4621      	mov	r1, r4
 801b5a4:	4630      	mov	r0, r6
 801b5a6:	f004 ff37 	bl	8020418 <put_memory>
 801b5aa:	42af      	cmp	r7, r5
 801b5ac:	60a4      	str	r4, [r4, #8]
 801b5ae:	f104 041c 	add.w	r4, r4, #28
 801b5b2:	f804 8c10 	strb.w	r8, [r4, #-16]
 801b5b6:	d1f3      	bne.n	801b5a0 <rmw_uxrce_init_topic_memory+0x20>
 801b5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b5bc:	4770      	bx	lr
 801b5be:	bf00      	nop

0801b5c0 <rmw_uxrce_init_static_input_buffer_memory>:
 801b5c0:	b1ea      	cbz	r2, 801b5fe <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 801b5c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b5c6:	7b05      	ldrb	r5, [r0, #12]
 801b5c8:	4606      	mov	r6, r0
 801b5ca:	b9b5      	cbnz	r5, 801b5fa <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 801b5cc:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 801b5d0:	4617      	mov	r7, r2
 801b5d2:	460c      	mov	r4, r1
 801b5d4:	46a8      	mov	r8, r5
 801b5d6:	6083      	str	r3, [r0, #8]
 801b5d8:	f240 1301 	movw	r3, #257	@ 0x101
 801b5dc:	e9c0 5500 	strd	r5, r5, [r0]
 801b5e0:	8183      	strh	r3, [r0, #12]
 801b5e2:	3501      	adds	r5, #1
 801b5e4:	4621      	mov	r1, r4
 801b5e6:	4630      	mov	r0, r6
 801b5e8:	f004 ff16 	bl	8020418 <put_memory>
 801b5ec:	42af      	cmp	r7, r5
 801b5ee:	60a4      	str	r4, [r4, #8]
 801b5f0:	f884 800c 	strb.w	r8, [r4, #12]
 801b5f4:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 801b5f8:	d1f3      	bne.n	801b5e2 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 801b5fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b5fe:	4770      	bx	lr

0801b600 <rmw_uxrce_init_init_options_impl_memory>:
 801b600:	b1e2      	cbz	r2, 801b63c <rmw_uxrce_init_init_options_impl_memory+0x3c>
 801b602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b606:	7b05      	ldrb	r5, [r0, #12]
 801b608:	4606      	mov	r6, r0
 801b60a:	b9ad      	cbnz	r5, 801b638 <rmw_uxrce_init_init_options_impl_memory+0x38>
 801b60c:	232c      	movs	r3, #44	@ 0x2c
 801b60e:	4617      	mov	r7, r2
 801b610:	460c      	mov	r4, r1
 801b612:	46a8      	mov	r8, r5
 801b614:	6083      	str	r3, [r0, #8]
 801b616:	f240 1301 	movw	r3, #257	@ 0x101
 801b61a:	e9c0 5500 	strd	r5, r5, [r0]
 801b61e:	8183      	strh	r3, [r0, #12]
 801b620:	3501      	adds	r5, #1
 801b622:	4621      	mov	r1, r4
 801b624:	4630      	mov	r0, r6
 801b626:	f004 fef7 	bl	8020418 <put_memory>
 801b62a:	42af      	cmp	r7, r5
 801b62c:	60a4      	str	r4, [r4, #8]
 801b62e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 801b632:	f804 8c20 	strb.w	r8, [r4, #-32]
 801b636:	d1f3      	bne.n	801b620 <rmw_uxrce_init_init_options_impl_memory+0x20>
 801b638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b63c:	4770      	bx	lr
 801b63e:	bf00      	nop

0801b640 <rmw_uxrce_init_wait_set_memory>:
 801b640:	b1e2      	cbz	r2, 801b67c <rmw_uxrce_init_wait_set_memory+0x3c>
 801b642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b646:	7b05      	ldrb	r5, [r0, #12]
 801b648:	4606      	mov	r6, r0
 801b64a:	b9ad      	cbnz	r5, 801b678 <rmw_uxrce_init_wait_set_memory+0x38>
 801b64c:	231c      	movs	r3, #28
 801b64e:	4617      	mov	r7, r2
 801b650:	460c      	mov	r4, r1
 801b652:	46a8      	mov	r8, r5
 801b654:	6083      	str	r3, [r0, #8]
 801b656:	f240 1301 	movw	r3, #257	@ 0x101
 801b65a:	e9c0 5500 	strd	r5, r5, [r0]
 801b65e:	8183      	strh	r3, [r0, #12]
 801b660:	3501      	adds	r5, #1
 801b662:	4621      	mov	r1, r4
 801b664:	4630      	mov	r0, r6
 801b666:	f004 fed7 	bl	8020418 <put_memory>
 801b66a:	42af      	cmp	r7, r5
 801b66c:	60a4      	str	r4, [r4, #8]
 801b66e:	f104 041c 	add.w	r4, r4, #28
 801b672:	f804 8c10 	strb.w	r8, [r4, #-16]
 801b676:	d1f3      	bne.n	801b660 <rmw_uxrce_init_wait_set_memory+0x20>
 801b678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b67c:	4770      	bx	lr
 801b67e:	bf00      	nop

0801b680 <rmw_uxrce_init_guard_condition_memory>:
 801b680:	b1e2      	cbz	r2, 801b6bc <rmw_uxrce_init_guard_condition_memory+0x3c>
 801b682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b686:	7b05      	ldrb	r5, [r0, #12]
 801b688:	4606      	mov	r6, r0
 801b68a:	b9ad      	cbnz	r5, 801b6b8 <rmw_uxrce_init_guard_condition_memory+0x38>
 801b68c:	2320      	movs	r3, #32
 801b68e:	4617      	mov	r7, r2
 801b690:	460c      	mov	r4, r1
 801b692:	46a8      	mov	r8, r5
 801b694:	6083      	str	r3, [r0, #8]
 801b696:	f240 1301 	movw	r3, #257	@ 0x101
 801b69a:	e9c0 5500 	strd	r5, r5, [r0]
 801b69e:	8183      	strh	r3, [r0, #12]
 801b6a0:	3501      	adds	r5, #1
 801b6a2:	4621      	mov	r1, r4
 801b6a4:	4630      	mov	r0, r6
 801b6a6:	f004 feb7 	bl	8020418 <put_memory>
 801b6aa:	42af      	cmp	r7, r5
 801b6ac:	60a4      	str	r4, [r4, #8]
 801b6ae:	f104 0420 	add.w	r4, r4, #32
 801b6b2:	f804 8c14 	strb.w	r8, [r4, #-20]
 801b6b6:	d1f3      	bne.n	801b6a0 <rmw_uxrce_init_guard_condition_memory+0x20>
 801b6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6bc:	4770      	bx	lr
 801b6be:	bf00      	nop

0801b6c0 <rmw_uxrce_fini_session_memory>:
 801b6c0:	4601      	mov	r1, r0
 801b6c2:	4801      	ldr	r0, [pc, #4]	@ (801b6c8 <rmw_uxrce_fini_session_memory+0x8>)
 801b6c4:	f004 bea8 	b.w	8020418 <put_memory>
 801b6c8:	2406953c 	.word	0x2406953c

0801b6cc <rmw_uxrce_fini_node_memory>:
 801b6cc:	b538      	push	{r3, r4, r5, lr}
 801b6ce:	4604      	mov	r4, r0
 801b6d0:	6800      	ldr	r0, [r0, #0]
 801b6d2:	b128      	cbz	r0, 801b6e0 <rmw_uxrce_fini_node_memory+0x14>
 801b6d4:	4b07      	ldr	r3, [pc, #28]	@ (801b6f4 <rmw_uxrce_fini_node_memory+0x28>)
 801b6d6:	6819      	ldr	r1, [r3, #0]
 801b6d8:	f7e4 fe02 	bl	80002e0 <strcmp>
 801b6dc:	b940      	cbnz	r0, 801b6f0 <rmw_uxrce_fini_node_memory+0x24>
 801b6de:	6020      	str	r0, [r4, #0]
 801b6e0:	6861      	ldr	r1, [r4, #4]
 801b6e2:	b129      	cbz	r1, 801b6f0 <rmw_uxrce_fini_node_memory+0x24>
 801b6e4:	2500      	movs	r5, #0
 801b6e6:	4804      	ldr	r0, [pc, #16]	@ (801b6f8 <rmw_uxrce_fini_node_memory+0x2c>)
 801b6e8:	610d      	str	r5, [r1, #16]
 801b6ea:	f004 fe95 	bl	8020418 <put_memory>
 801b6ee:	6065      	str	r5, [r4, #4]
 801b6f0:	bd38      	pop	{r3, r4, r5, pc}
 801b6f2:	bf00      	nop
 801b6f4:	08024ff8 	.word	0x08024ff8
 801b6f8:	2406950c 	.word	0x2406950c

0801b6fc <rmw_uxrce_fini_publisher_memory>:
 801b6fc:	b510      	push	{r4, lr}
 801b6fe:	4604      	mov	r4, r0
 801b700:	6800      	ldr	r0, [r0, #0]
 801b702:	b128      	cbz	r0, 801b710 <rmw_uxrce_fini_publisher_memory+0x14>
 801b704:	4b06      	ldr	r3, [pc, #24]	@ (801b720 <rmw_uxrce_fini_publisher_memory+0x24>)
 801b706:	6819      	ldr	r1, [r3, #0]
 801b708:	f7e4 fdea 	bl	80002e0 <strcmp>
 801b70c:	b938      	cbnz	r0, 801b71e <rmw_uxrce_fini_publisher_memory+0x22>
 801b70e:	6020      	str	r0, [r4, #0]
 801b710:	6861      	ldr	r1, [r4, #4]
 801b712:	b121      	cbz	r1, 801b71e <rmw_uxrce_fini_publisher_memory+0x22>
 801b714:	4803      	ldr	r0, [pc, #12]	@ (801b724 <rmw_uxrce_fini_publisher_memory+0x28>)
 801b716:	f004 fe7f 	bl	8020418 <put_memory>
 801b71a:	2300      	movs	r3, #0
 801b71c:	6063      	str	r3, [r4, #4]
 801b71e:	bd10      	pop	{r4, pc}
 801b720:	08024ff8 	.word	0x08024ff8
 801b724:	2406951c 	.word	0x2406951c

0801b728 <rmw_uxrce_fini_subscription_memory>:
 801b728:	b510      	push	{r4, lr}
 801b72a:	4604      	mov	r4, r0
 801b72c:	6800      	ldr	r0, [r0, #0]
 801b72e:	b128      	cbz	r0, 801b73c <rmw_uxrce_fini_subscription_memory+0x14>
 801b730:	4b06      	ldr	r3, [pc, #24]	@ (801b74c <rmw_uxrce_fini_subscription_memory+0x24>)
 801b732:	6819      	ldr	r1, [r3, #0]
 801b734:	f7e4 fdd4 	bl	80002e0 <strcmp>
 801b738:	b938      	cbnz	r0, 801b74a <rmw_uxrce_fini_subscription_memory+0x22>
 801b73a:	6020      	str	r0, [r4, #0]
 801b73c:	6861      	ldr	r1, [r4, #4]
 801b73e:	b121      	cbz	r1, 801b74a <rmw_uxrce_fini_subscription_memory+0x22>
 801b740:	4803      	ldr	r0, [pc, #12]	@ (801b750 <rmw_uxrce_fini_subscription_memory+0x28>)
 801b742:	f004 fe69 	bl	8020418 <put_memory>
 801b746:	2300      	movs	r3, #0
 801b748:	6063      	str	r3, [r4, #4]
 801b74a:	bd10      	pop	{r4, pc}
 801b74c:	08024ff8 	.word	0x08024ff8
 801b750:	2406955c 	.word	0x2406955c

0801b754 <rmw_uxrce_fini_service_memory>:
 801b754:	b510      	push	{r4, lr}
 801b756:	4604      	mov	r4, r0
 801b758:	6800      	ldr	r0, [r0, #0]
 801b75a:	b128      	cbz	r0, 801b768 <rmw_uxrce_fini_service_memory+0x14>
 801b75c:	4b06      	ldr	r3, [pc, #24]	@ (801b778 <rmw_uxrce_fini_service_memory+0x24>)
 801b75e:	6819      	ldr	r1, [r3, #0]
 801b760:	f7e4 fdbe 	bl	80002e0 <strcmp>
 801b764:	b938      	cbnz	r0, 801b776 <rmw_uxrce_fini_service_memory+0x22>
 801b766:	6020      	str	r0, [r4, #0]
 801b768:	6861      	ldr	r1, [r4, #4]
 801b76a:	b121      	cbz	r1, 801b776 <rmw_uxrce_fini_service_memory+0x22>
 801b76c:	4803      	ldr	r0, [pc, #12]	@ (801b77c <rmw_uxrce_fini_service_memory+0x28>)
 801b76e:	f004 fe53 	bl	8020418 <put_memory>
 801b772:	2300      	movs	r3, #0
 801b774:	6063      	str	r3, [r4, #4]
 801b776:	bd10      	pop	{r4, pc}
 801b778:	08024ff8 	.word	0x08024ff8
 801b77c:	2406952c 	.word	0x2406952c

0801b780 <rmw_uxrce_fini_client_memory>:
 801b780:	b510      	push	{r4, lr}
 801b782:	4604      	mov	r4, r0
 801b784:	6800      	ldr	r0, [r0, #0]
 801b786:	b128      	cbz	r0, 801b794 <rmw_uxrce_fini_client_memory+0x14>
 801b788:	4b06      	ldr	r3, [pc, #24]	@ (801b7a4 <rmw_uxrce_fini_client_memory+0x24>)
 801b78a:	6819      	ldr	r1, [r3, #0]
 801b78c:	f7e4 fda8 	bl	80002e0 <strcmp>
 801b790:	b938      	cbnz	r0, 801b7a2 <rmw_uxrce_fini_client_memory+0x22>
 801b792:	6020      	str	r0, [r4, #0]
 801b794:	6861      	ldr	r1, [r4, #4]
 801b796:	b121      	cbz	r1, 801b7a2 <rmw_uxrce_fini_client_memory+0x22>
 801b798:	4803      	ldr	r0, [pc, #12]	@ (801b7a8 <rmw_uxrce_fini_client_memory+0x28>)
 801b79a:	f004 fe3d 	bl	8020418 <put_memory>
 801b79e:	2300      	movs	r3, #0
 801b7a0:	6063      	str	r3, [r4, #4]
 801b7a2:	bd10      	pop	{r4, pc}
 801b7a4:	08024ff8 	.word	0x08024ff8
 801b7a8:	24064c40 	.word	0x24064c40

0801b7ac <rmw_uxrce_fini_topic_memory>:
 801b7ac:	b510      	push	{r4, lr}
 801b7ae:	4604      	mov	r4, r0
 801b7b0:	4803      	ldr	r0, [pc, #12]	@ (801b7c0 <rmw_uxrce_fini_topic_memory+0x14>)
 801b7b2:	4621      	mov	r1, r4
 801b7b4:	f004 fe30 	bl	8020418 <put_memory>
 801b7b8:	2300      	movs	r3, #0
 801b7ba:	61a3      	str	r3, [r4, #24]
 801b7bc:	bd10      	pop	{r4, pc}
 801b7be:	bf00      	nop
 801b7c0:	2406956c 	.word	0x2406956c

0801b7c4 <rmw_uxrce_get_static_input_buffer_for_entity>:
 801b7c4:	b082      	sub	sp, #8
 801b7c6:	492b      	ldr	r1, [pc, #172]	@ (801b874 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 801b7c8:	b530      	push	{r4, r5, lr}
 801b7ca:	680d      	ldr	r5, [r1, #0]
 801b7cc:	ac03      	add	r4, sp, #12
 801b7ce:	e884 000c 	stmia.w	r4, {r2, r3}
 801b7d2:	461c      	mov	r4, r3
 801b7d4:	2d00      	cmp	r5, #0
 801b7d6:	d04b      	beq.n	801b870 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 801b7d8:	462b      	mov	r3, r5
 801b7da:	2100      	movs	r1, #0
 801b7dc:	689a      	ldr	r2, [r3, #8]
 801b7de:	685b      	ldr	r3, [r3, #4]
 801b7e0:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 801b7e4:	4290      	cmp	r0, r2
 801b7e6:	bf08      	it	eq
 801b7e8:	3101      	addeq	r1, #1
 801b7ea:	2b00      	cmp	r3, #0
 801b7ec:	d1f6      	bne.n	801b7dc <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 801b7ee:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801b7f2:	2b02      	cmp	r3, #2
 801b7f4:	d029      	beq.n	801b84a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 801b7f6:	d820      	bhi.n	801b83a <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 801b7f8:	428c      	cmp	r4, r1
 801b7fa:	d828      	bhi.n	801b84e <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 801b7fc:	fab4 f284 	clz	r2, r4
 801b800:	0952      	lsrs	r2, r2, #5
 801b802:	b324      	cbz	r4, 801b84e <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 801b804:	b1dd      	cbz	r5, 801b83e <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 801b806:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801b80a:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 801b80e:	e001      	b.n	801b814 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 801b810:	686d      	ldr	r5, [r5, #4]
 801b812:	b1ad      	cbz	r5, 801b840 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 801b814:	68ab      	ldr	r3, [r5, #8]
 801b816:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 801b81a:	4288      	cmp	r0, r1
 801b81c:	d1f8      	bne.n	801b810 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801b81e:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 801b822:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 801b826:	4561      	cmp	r1, ip
 801b828:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801b82c:	eb73 0e04 	sbcs.w	lr, r3, r4
 801b830:	daee      	bge.n	801b810 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801b832:	468c      	mov	ip, r1
 801b834:	461c      	mov	r4, r3
 801b836:	462a      	mov	r2, r5
 801b838:	e7ea      	b.n	801b810 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801b83a:	2b03      	cmp	r3, #3
 801b83c:	d0dc      	beq.n	801b7f8 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 801b83e:	2200      	movs	r2, #0
 801b840:	4610      	mov	r0, r2
 801b842:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b846:	b002      	add	sp, #8
 801b848:	4770      	bx	lr
 801b84a:	428c      	cmp	r4, r1
 801b84c:	d905      	bls.n	801b85a <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 801b84e:	4809      	ldr	r0, [pc, #36]	@ (801b874 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 801b850:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b854:	b002      	add	sp, #8
 801b856:	f004 bdcf 	b.w	80203f8 <get_memory>
 801b85a:	fab4 f284 	clz	r2, r4
 801b85e:	0952      	lsrs	r2, r2, #5
 801b860:	2c00      	cmp	r4, #0
 801b862:	d1ed      	bne.n	801b840 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 801b864:	4803      	ldr	r0, [pc, #12]	@ (801b874 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 801b866:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b86a:	b002      	add	sp, #8
 801b86c:	f004 bdc4 	b.w	80203f8 <get_memory>
 801b870:	4629      	mov	r1, r5
 801b872:	e7bc      	b.n	801b7ee <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 801b874:	2406954c 	.word	0x2406954c

0801b878 <rmw_uxrce_find_static_input_buffer_by_owner>:
 801b878:	4b12      	ldr	r3, [pc, #72]	@ (801b8c4 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 801b87a:	681b      	ldr	r3, [r3, #0]
 801b87c:	b530      	push	{r4, r5, lr}
 801b87e:	b1f3      	cbz	r3, 801b8be <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 801b880:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 801b884:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 801b888:	2400      	movs	r4, #0
 801b88a:	e001      	b.n	801b890 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 801b88c:	685b      	ldr	r3, [r3, #4]
 801b88e:	b1a3      	cbz	r3, 801b8ba <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 801b890:	689a      	ldr	r2, [r3, #8]
 801b892:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 801b896:	4288      	cmp	r0, r1
 801b898:	d1f8      	bne.n	801b88c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 801b89a:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 801b89e:	f502 6202 	add.w	r2, r2, #2080	@ 0x820
 801b8a2:	4571      	cmp	r1, lr
 801b8a4:	f852 2c04 	ldr.w	r2, [r2, #-4]
 801b8a8:	eb72 050c 	sbcs.w	r5, r2, ip
 801b8ac:	daee      	bge.n	801b88c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 801b8ae:	461c      	mov	r4, r3
 801b8b0:	685b      	ldr	r3, [r3, #4]
 801b8b2:	468e      	mov	lr, r1
 801b8b4:	4694      	mov	ip, r2
 801b8b6:	2b00      	cmp	r3, #0
 801b8b8:	d1ea      	bne.n	801b890 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 801b8ba:	4620      	mov	r0, r4
 801b8bc:	bd30      	pop	{r4, r5, pc}
 801b8be:	461c      	mov	r4, r3
 801b8c0:	4620      	mov	r0, r4
 801b8c2:	bd30      	pop	{r4, r5, pc}
 801b8c4:	2406954c 	.word	0x2406954c

0801b8c8 <rmw_uxrce_clean_expired_static_input_buffer>:
 801b8c8:	4b3d      	ldr	r3, [pc, #244]	@ (801b9c0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 801b8ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8ce:	681f      	ldr	r7, [r3, #0]
 801b8d0:	ed2d 8b06 	vpush	{d8-d10}
 801b8d4:	b08d      	sub	sp, #52	@ 0x34
 801b8d6:	f004 fe4f 	bl	8020578 <rmw_uros_epoch_nanos>
 801b8da:	2f00      	cmp	r7, #0
 801b8dc:	d05d      	beq.n	801b99a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 801b8de:	46b8      	mov	r8, r7
 801b8e0:	4681      	mov	r9, r0
 801b8e2:	468a      	mov	sl, r1
 801b8e4:	ac04      	add	r4, sp, #16
 801b8e6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801b8ea:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801b8ee:	2b04      	cmp	r3, #4
 801b8f0:	ed9f 8b2d 	vldr	d8, [pc, #180]	@ 801b9a8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 801b8f4:	ed9f ab2e 	vldr	d10, [pc, #184]	@ 801b9b0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 801b8f8:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 801b9b8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 801b8fc:	d03f      	beq.n	801b97e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801b8fe:	2b05      	cmp	r3, #5
 801b900:	d044      	beq.n	801b98c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 801b902:	2b03      	cmp	r3, #3
 801b904:	d03b      	beq.n	801b97e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801b906:	ed8d 8b04 	vstr	d8, [sp, #16]
 801b90a:	ed8d ab06 	vstr	d10, [sp, #24]
 801b90e:	ab08      	add	r3, sp, #32
 801b910:	ed8d 8b08 	vstr	d8, [sp, #32]
 801b914:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 801b918:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b91a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801b91e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801b922:	f004 fbf9 	bl	8020118 <rmw_time_equal>
 801b926:	b118      	cbz	r0, 801b930 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 801b928:	ed8d 9b04 	vstr	d9, [sp, #16]
 801b92c:	ed8d 8b06 	vstr	d8, [sp, #24]
 801b930:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 801b934:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 801b938:	f855 7c04 	ldr.w	r7, [r5, #-4]
 801b93c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 801b940:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801b944:	f004 fc3e 	bl	80201c4 <rmw_time_total_nsec>
 801b948:	1830      	adds	r0, r6, r0
 801b94a:	eb47 0101 	adc.w	r1, r7, r1
 801b94e:	4548      	cmp	r0, r9
 801b950:	eb71 030a 	sbcs.w	r3, r1, sl
 801b954:	db05      	blt.n	801b962 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 801b956:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 801b95a:	4591      	cmp	r9, r2
 801b95c:	eb7a 0303 	sbcs.w	r3, sl, r3
 801b960:	da03      	bge.n	801b96a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 801b962:	4641      	mov	r1, r8
 801b964:	4816      	ldr	r0, [pc, #88]	@ (801b9c0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 801b966:	f004 fd57 	bl	8020418 <put_memory>
 801b96a:	f1bb 0f00 	cmp.w	fp, #0
 801b96e:	d014      	beq.n	801b99a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 801b970:	46d8      	mov	r8, fp
 801b972:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801b976:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801b97a:	2b04      	cmp	r3, #4
 801b97c:	d1bf      	bne.n	801b8fe <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 801b97e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 801b982:	3340      	adds	r3, #64	@ 0x40
 801b984:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b986:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801b98a:	e7c0      	b.n	801b90e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801b98c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 801b990:	3348      	adds	r3, #72	@ 0x48
 801b992:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b994:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801b998:	e7b9      	b.n	801b90e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801b99a:	b00d      	add	sp, #52	@ 0x34
 801b99c:	ecbd 8b06 	vpop	{d8-d10}
 801b9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9a4:	f3af 8000 	nop.w
	...
 801b9b0:	00000001 	.word	0x00000001
 801b9b4:	00000000 	.word	0x00000000
 801b9b8:	0000001e 	.word	0x0000001e
 801b9bc:	00000000 	.word	0x00000000
 801b9c0:	2406954c 	.word	0x2406954c

0801b9c4 <run_xrce_session>:
 801b9c4:	b510      	push	{r4, lr}
 801b9c6:	788c      	ldrb	r4, [r1, #2]
 801b9c8:	b086      	sub	sp, #24
 801b9ca:	2c01      	cmp	r4, #1
 801b9cc:	f8ad 200e 	strh.w	r2, [sp, #14]
 801b9d0:	d00c      	beq.n	801b9ec <run_xrce_session+0x28>
 801b9d2:	2401      	movs	r4, #1
 801b9d4:	4619      	mov	r1, r3
 801b9d6:	f10d 020e 	add.w	r2, sp, #14
 801b9da:	f10d 0317 	add.w	r3, sp, #23
 801b9de:	9400      	str	r4, [sp, #0]
 801b9e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b9e4:	f001 fd90 	bl	801d508 <uxr_run_session_until_all_status>
 801b9e8:	b006      	add	sp, #24
 801b9ea:	bd10      	pop	{r4, pc}
 801b9ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b9f0:	f001 f9ac 	bl	801cd4c <uxr_flash_output_streams>
 801b9f4:	4620      	mov	r0, r4
 801b9f6:	b006      	add	sp, #24
 801b9f8:	bd10      	pop	{r4, pc}
 801b9fa:	bf00      	nop

0801b9fc <convert_qos_profile>:
 801b9fc:	7a4a      	ldrb	r2, [r1, #9]
 801b9fe:	f891 c008 	ldrb.w	ip, [r1, #8]
 801ba02:	2a02      	cmp	r2, #2
 801ba04:	bf18      	it	ne
 801ba06:	2200      	movne	r2, #0
 801ba08:	7002      	strb	r2, [r0, #0]
 801ba0a:	f1ac 0202 	sub.w	r2, ip, #2
 801ba0e:	fab2 f282 	clz	r2, r2
 801ba12:	0952      	lsrs	r2, r2, #5
 801ba14:	7042      	strb	r2, [r0, #1]
 801ba16:	780a      	ldrb	r2, [r1, #0]
 801ba18:	8889      	ldrh	r1, [r1, #4]
 801ba1a:	f1a2 0202 	sub.w	r2, r2, #2
 801ba1e:	8081      	strh	r1, [r0, #4]
 801ba20:	fab2 f282 	clz	r2, r2
 801ba24:	0952      	lsrs	r2, r2, #5
 801ba26:	7082      	strb	r2, [r0, #2]
 801ba28:	4770      	bx	lr
 801ba2a:	bf00      	nop

0801ba2c <generate_service_topics>:
 801ba2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba2e:	461d      	mov	r5, r3
 801ba30:	b083      	sub	sp, #12
 801ba32:	4606      	mov	r6, r0
 801ba34:	4c11      	ldr	r4, [pc, #68]	@ (801ba7c <generate_service_topics+0x50>)
 801ba36:	4608      	mov	r0, r1
 801ba38:	4b11      	ldr	r3, [pc, #68]	@ (801ba80 <generate_service_topics+0x54>)
 801ba3a:	4617      	mov	r7, r2
 801ba3c:	4629      	mov	r1, r5
 801ba3e:	4a11      	ldr	r2, [pc, #68]	@ (801ba84 <generate_service_topics+0x58>)
 801ba40:	9401      	str	r4, [sp, #4]
 801ba42:	9600      	str	r6, [sp, #0]
 801ba44:	f005 fedc 	bl	8021800 <sniprintf>
 801ba48:	4a0f      	ldr	r2, [pc, #60]	@ (801ba88 <generate_service_topics+0x5c>)
 801ba4a:	4604      	mov	r4, r0
 801ba4c:	4b0f      	ldr	r3, [pc, #60]	@ (801ba8c <generate_service_topics+0x60>)
 801ba4e:	9201      	str	r2, [sp, #4]
 801ba50:	4638      	mov	r0, r7
 801ba52:	4a0c      	ldr	r2, [pc, #48]	@ (801ba84 <generate_service_topics+0x58>)
 801ba54:	4629      	mov	r1, r5
 801ba56:	9600      	str	r6, [sp, #0]
 801ba58:	f005 fed2 	bl	8021800 <sniprintf>
 801ba5c:	2c00      	cmp	r4, #0
 801ba5e:	bfa8      	it	ge
 801ba60:	42a5      	cmpge	r5, r4
 801ba62:	bfcc      	ite	gt
 801ba64:	2401      	movgt	r4, #1
 801ba66:	2400      	movle	r4, #0
 801ba68:	dd05      	ble.n	801ba76 <generate_service_topics+0x4a>
 801ba6a:	2800      	cmp	r0, #0
 801ba6c:	bfa8      	it	ge
 801ba6e:	4285      	cmpge	r5, r0
 801ba70:	bfcc      	ite	gt
 801ba72:	2401      	movgt	r4, #1
 801ba74:	2400      	movle	r4, #0
 801ba76:	4620      	mov	r0, r4
 801ba78:	b003      	add	sp, #12
 801ba7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba7c:	08024ce8 	.word	0x08024ce8
 801ba80:	08024ce4 	.word	0x08024ce4
 801ba84:	08024cc8 	.word	0x08024cc8
 801ba88:	08024cdc 	.word	0x08024cdc
 801ba8c:	08024cd8 	.word	0x08024cd8

0801ba90 <generate_service_types>:
 801ba90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba94:	4606      	mov	r6, r0
 801ba96:	b087      	sub	sp, #28
 801ba98:	461c      	mov	r4, r3
 801ba9a:	6883      	ldr	r3, [r0, #8]
 801ba9c:	460d      	mov	r5, r1
 801ba9e:	4617      	mov	r7, r2
 801baa0:	4798      	blx	r3
 801baa2:	68f3      	ldr	r3, [r6, #12]
 801baa4:	4606      	mov	r6, r0
 801baa6:	4798      	blx	r3
 801baa8:	2300      	movs	r3, #0
 801baaa:	f8d0 b004 	ldr.w	fp, [r0, #4]
 801baae:	6872      	ldr	r2, [r6, #4]
 801bab0:	702b      	strb	r3, [r5, #0]
 801bab2:	6813      	ldr	r3, [r2, #0]
 801bab4:	2b00      	cmp	r3, #0
 801bab6:	d03f      	beq.n	801bb38 <generate_service_types+0xa8>
 801bab8:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801bb4c <generate_service_types+0xbc>
 801babc:	4649      	mov	r1, r9
 801babe:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 801bb54 <generate_service_types+0xc4>
 801bac2:	4628      	mov	r0, r5
 801bac4:	f8df a090 	ldr.w	sl, [pc, #144]	@ 801bb58 <generate_service_types+0xc8>
 801bac8:	f8cd 8014 	str.w	r8, [sp, #20]
 801bacc:	6852      	ldr	r2, [r2, #4]
 801bace:	9100      	str	r1, [sp, #0]
 801bad0:	4621      	mov	r1, r4
 801bad2:	f8cd 8008 	str.w	r8, [sp, #8]
 801bad6:	f8cd a004 	str.w	sl, [sp, #4]
 801bada:	e9cd 9203 	strd	r9, r2, [sp, #12]
 801bade:	4a1a      	ldr	r2, [pc, #104]	@ (801bb48 <generate_service_types+0xb8>)
 801bae0:	f005 fe8e 	bl	8021800 <sniprintf>
 801bae4:	2300      	movs	r3, #0
 801bae6:	42a0      	cmp	r0, r4
 801bae8:	ea6f 0600 	mvn.w	r6, r0
 801baec:	703b      	strb	r3, [r7, #0]
 801baee:	f8db 3000 	ldr.w	r3, [fp]
 801baf2:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 801baf6:	bfac      	ite	ge
 801baf8:	2500      	movge	r5, #0
 801bafa:	2501      	movlt	r5, #1
 801bafc:	b30b      	cbz	r3, 801bb42 <generate_service_types+0xb2>
 801bafe:	4a13      	ldr	r2, [pc, #76]	@ (801bb4c <generate_service_types+0xbc>)
 801bb00:	f8cd 8014 	str.w	r8, [sp, #20]
 801bb04:	402e      	ands	r6, r5
 801bb06:	f8db 1004 	ldr.w	r1, [fp, #4]
 801bb0a:	4638      	mov	r0, r7
 801bb0c:	9104      	str	r1, [sp, #16]
 801bb0e:	4621      	mov	r1, r4
 801bb10:	e9cd 2a00 	strd	r2, sl, [sp]
 801bb14:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801bb18:	4a0b      	ldr	r2, [pc, #44]	@ (801bb48 <generate_service_types+0xb8>)
 801bb1a:	f005 fe71 	bl	8021800 <sniprintf>
 801bb1e:	2800      	cmp	r0, #0
 801bb20:	bfb4      	ite	lt
 801bb22:	2600      	movlt	r6, #0
 801bb24:	f006 0601 	andge.w	r6, r6, #1
 801bb28:	42a0      	cmp	r0, r4
 801bb2a:	bfac      	ite	ge
 801bb2c:	2000      	movge	r0, #0
 801bb2e:	f006 0001 	andlt.w	r0, r6, #1
 801bb32:	b007      	add	sp, #28
 801bb34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb38:	4b05      	ldr	r3, [pc, #20]	@ (801bb50 <generate_service_types+0xc0>)
 801bb3a:	f8df 9010 	ldr.w	r9, [pc, #16]	@ 801bb4c <generate_service_types+0xbc>
 801bb3e:	4619      	mov	r1, r3
 801bb40:	e7bd      	b.n	801babe <generate_service_types+0x2e>
 801bb42:	4b03      	ldr	r3, [pc, #12]	@ (801bb50 <generate_service_types+0xc0>)
 801bb44:	461a      	mov	r2, r3
 801bb46:	e7db      	b.n	801bb00 <generate_service_types+0x70>
 801bb48:	08024cc0 	.word	0x08024cc0
 801bb4c:	08024cbc 	.word	0x08024cbc
 801bb50:	08025048 	.word	0x08025048
 801bb54:	08024cd0 	.word	0x08024cd0
 801bb58:	08024cd4 	.word	0x08024cd4

0801bb5c <generate_type_name>:
 801bb5c:	2300      	movs	r3, #0
 801bb5e:	b530      	push	{r4, r5, lr}
 801bb60:	700b      	strb	r3, [r1, #0]
 801bb62:	b087      	sub	sp, #28
 801bb64:	6803      	ldr	r3, [r0, #0]
 801bb66:	4614      	mov	r4, r2
 801bb68:	b1bb      	cbz	r3, 801bb9a <generate_type_name+0x3e>
 801bb6a:	4a0e      	ldr	r2, [pc, #56]	@ (801bba4 <generate_type_name+0x48>)
 801bb6c:	4615      	mov	r5, r2
 801bb6e:	9500      	str	r5, [sp, #0]
 801bb70:	9203      	str	r2, [sp, #12]
 801bb72:	4d0d      	ldr	r5, [pc, #52]	@ (801bba8 <generate_type_name+0x4c>)
 801bb74:	6842      	ldr	r2, [r0, #4]
 801bb76:	4608      	mov	r0, r1
 801bb78:	490c      	ldr	r1, [pc, #48]	@ (801bbac <generate_type_name+0x50>)
 801bb7a:	9204      	str	r2, [sp, #16]
 801bb7c:	9105      	str	r1, [sp, #20]
 801bb7e:	9102      	str	r1, [sp, #8]
 801bb80:	4621      	mov	r1, r4
 801bb82:	4a0b      	ldr	r2, [pc, #44]	@ (801bbb0 <generate_type_name+0x54>)
 801bb84:	9501      	str	r5, [sp, #4]
 801bb86:	f005 fe3b 	bl	8021800 <sniprintf>
 801bb8a:	2800      	cmp	r0, #0
 801bb8c:	bfa8      	it	ge
 801bb8e:	4284      	cmpge	r4, r0
 801bb90:	bfcc      	ite	gt
 801bb92:	2001      	movgt	r0, #1
 801bb94:	2000      	movle	r0, #0
 801bb96:	b007      	add	sp, #28
 801bb98:	bd30      	pop	{r4, r5, pc}
 801bb9a:	4b06      	ldr	r3, [pc, #24]	@ (801bbb4 <generate_type_name+0x58>)
 801bb9c:	4a01      	ldr	r2, [pc, #4]	@ (801bba4 <generate_type_name+0x48>)
 801bb9e:	461d      	mov	r5, r3
 801bba0:	e7e5      	b.n	801bb6e <generate_type_name+0x12>
 801bba2:	bf00      	nop
 801bba4:	08024cbc 	.word	0x08024cbc
 801bba8:	08024cd4 	.word	0x08024cd4
 801bbac:	08024cd0 	.word	0x08024cd0
 801bbb0:	08024cc0 	.word	0x08024cc0
 801bbb4:	08025048 	.word	0x08025048

0801bbb8 <generate_topic_name>:
 801bbb8:	b530      	push	{r4, r5, lr}
 801bbba:	4614      	mov	r4, r2
 801bbbc:	b083      	sub	sp, #12
 801bbbe:	4605      	mov	r5, r0
 801bbc0:	4b07      	ldr	r3, [pc, #28]	@ (801bbe0 <generate_topic_name+0x28>)
 801bbc2:	4a08      	ldr	r2, [pc, #32]	@ (801bbe4 <generate_topic_name+0x2c>)
 801bbc4:	4608      	mov	r0, r1
 801bbc6:	9500      	str	r5, [sp, #0]
 801bbc8:	4621      	mov	r1, r4
 801bbca:	f005 fe19 	bl	8021800 <sniprintf>
 801bbce:	2800      	cmp	r0, #0
 801bbd0:	bfa8      	it	ge
 801bbd2:	4284      	cmpge	r4, r0
 801bbd4:	bfcc      	ite	gt
 801bbd6:	2001      	movgt	r0, #1
 801bbd8:	2000      	movle	r0, #0
 801bbda:	b003      	add	sp, #12
 801bbdc:	bd30      	pop	{r4, r5, pc}
 801bbde:	bf00      	nop
 801bbe0:	08024cf0 	.word	0x08024cf0
 801bbe4:	08024688 	.word	0x08024688

0801bbe8 <is_uxrce_rmw_identifier_valid>:
 801bbe8:	b510      	push	{r4, lr}
 801bbea:	4604      	mov	r4, r0
 801bbec:	b140      	cbz	r0, 801bc00 <is_uxrce_rmw_identifier_valid+0x18>
 801bbee:	f7fe f949 	bl	8019e84 <rmw_get_implementation_identifier>
 801bbf2:	4601      	mov	r1, r0
 801bbf4:	4620      	mov	r0, r4
 801bbf6:	f7e4 fb73 	bl	80002e0 <strcmp>
 801bbfa:	fab0 f080 	clz	r0, r0
 801bbfe:	0940      	lsrs	r0, r0, #5
 801bc00:	bd10      	pop	{r4, pc}
 801bc02:	bf00      	nop

0801bc04 <std_msgs__msg__Header__init>:
 801bc04:	b570      	push	{r4, r5, r6, lr}
 801bc06:	4605      	mov	r5, r0
 801bc08:	b1a8      	cbz	r0, 801bc36 <std_msgs__msg__Header__init+0x32>
 801bc0a:	f7fa fbf7 	bl	80163fc <builtin_interfaces__msg__Time__init>
 801bc0e:	4604      	mov	r4, r0
 801bc10:	b140      	cbz	r0, 801bc24 <std_msgs__msg__Header__init+0x20>
 801bc12:	f105 0608 	add.w	r6, r5, #8
 801bc16:	4630      	mov	r0, r6
 801bc18:	f004 fcbc 	bl	8020594 <rosidl_runtime_c__String__init>
 801bc1c:	4604      	mov	r4, r0
 801bc1e:	b168      	cbz	r0, 801bc3c <std_msgs__msg__Header__init+0x38>
 801bc20:	4620      	mov	r0, r4
 801bc22:	bd70      	pop	{r4, r5, r6, pc}
 801bc24:	4628      	mov	r0, r5
 801bc26:	f7fa fbed 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 801bc2a:	f105 0008 	add.w	r0, r5, #8
 801bc2e:	f004 fcc7 	bl	80205c0 <rosidl_runtime_c__String__fini>
 801bc32:	4620      	mov	r0, r4
 801bc34:	bd70      	pop	{r4, r5, r6, pc}
 801bc36:	4604      	mov	r4, r0
 801bc38:	4620      	mov	r0, r4
 801bc3a:	bd70      	pop	{r4, r5, r6, pc}
 801bc3c:	4628      	mov	r0, r5
 801bc3e:	f7fa fbe1 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 801bc42:	4630      	mov	r0, r6
 801bc44:	f004 fcbc 	bl	80205c0 <rosidl_runtime_c__String__fini>
 801bc48:	e7ea      	b.n	801bc20 <std_msgs__msg__Header__init+0x1c>
 801bc4a:	bf00      	nop

0801bc4c <std_msgs__msg__Header__fini>:
 801bc4c:	b148      	cbz	r0, 801bc62 <std_msgs__msg__Header__fini+0x16>
 801bc4e:	b510      	push	{r4, lr}
 801bc50:	4604      	mov	r4, r0
 801bc52:	f7fa fbd7 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 801bc56:	f104 0008 	add.w	r0, r4, #8
 801bc5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc5e:	f004 bcaf 	b.w	80205c0 <rosidl_runtime_c__String__fini>
 801bc62:	4770      	bx	lr

0801bc64 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>:
 801bc64:	b570      	push	{r4, r5, r6, lr}
 801bc66:	4605      	mov	r5, r0
 801bc68:	b1a8      	cbz	r0, 801bc96 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x32>
 801bc6a:	f7ff ffcb 	bl	801bc04 <std_msgs__msg__Header__init>
 801bc6e:	4604      	mov	r4, r0
 801bc70:	b140      	cbz	r0, 801bc84 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x20>
 801bc72:	f105 0618 	add.w	r6, r5, #24
 801bc76:	4630      	mov	r0, r6
 801bc78:	f004 fcea 	bl	8020650 <tier4_vehicle_msgs__msg__ActuationCommand__init>
 801bc7c:	4604      	mov	r4, r0
 801bc7e:	b168      	cbz	r0, 801bc9c <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x38>
 801bc80:	4620      	mov	r0, r4
 801bc82:	bd70      	pop	{r4, r5, r6, pc}
 801bc84:	4628      	mov	r0, r5
 801bc86:	f7ff ffe1 	bl	801bc4c <std_msgs__msg__Header__fini>
 801bc8a:	f105 0018 	add.w	r0, r5, #24
 801bc8e:	f004 fce3 	bl	8020658 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801bc92:	4620      	mov	r0, r4
 801bc94:	bd70      	pop	{r4, r5, r6, pc}
 801bc96:	4604      	mov	r4, r0
 801bc98:	4620      	mov	r0, r4
 801bc9a:	bd70      	pop	{r4, r5, r6, pc}
 801bc9c:	4628      	mov	r0, r5
 801bc9e:	f7ff ffd5 	bl	801bc4c <std_msgs__msg__Header__fini>
 801bca2:	4630      	mov	r0, r6
 801bca4:	f004 fcd8 	bl	8020658 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801bca8:	e7ea      	b.n	801bc80 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x1c>
 801bcaa:	bf00      	nop

0801bcac <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>:
 801bcac:	b148      	cbz	r0, 801bcc2 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini+0x16>
 801bcae:	b510      	push	{r4, lr}
 801bcb0:	4604      	mov	r4, r0
 801bcb2:	f7ff ffcb 	bl	801bc4c <std_msgs__msg__Header__fini>
 801bcb6:	f104 0018 	add.w	r0, r4, #24
 801bcba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bcbe:	f004 bccb 	b.w	8020658 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801bcc2:	4770      	bx	lr

0801bcc4 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>:
 801bcc4:	b570      	push	{r4, r5, r6, lr}
 801bcc6:	4605      	mov	r5, r0
 801bcc8:	b1a8      	cbz	r0, 801bcf6 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x32>
 801bcca:	f7ff ff9b 	bl	801bc04 <std_msgs__msg__Header__init>
 801bcce:	4604      	mov	r4, r0
 801bcd0:	b140      	cbz	r0, 801bce4 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x20>
 801bcd2:	f105 0618 	add.w	r6, r5, #24
 801bcd6:	4630      	mov	r0, r6
 801bcd8:	f004 fcc0 	bl	802065c <tier4_vehicle_msgs__msg__ActuationStatus__init>
 801bcdc:	4604      	mov	r4, r0
 801bcde:	b168      	cbz	r0, 801bcfc <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x38>
 801bce0:	4620      	mov	r0, r4
 801bce2:	bd70      	pop	{r4, r5, r6, pc}
 801bce4:	4628      	mov	r0, r5
 801bce6:	f7ff ffb1 	bl	801bc4c <std_msgs__msg__Header__fini>
 801bcea:	f105 0018 	add.w	r0, r5, #24
 801bcee:	f004 fcb9 	bl	8020664 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801bcf2:	4620      	mov	r0, r4
 801bcf4:	bd70      	pop	{r4, r5, r6, pc}
 801bcf6:	4604      	mov	r4, r0
 801bcf8:	4620      	mov	r0, r4
 801bcfa:	bd70      	pop	{r4, r5, r6, pc}
 801bcfc:	4628      	mov	r0, r5
 801bcfe:	f7ff ffa5 	bl	801bc4c <std_msgs__msg__Header__fini>
 801bd02:	4630      	mov	r0, r6
 801bd04:	f004 fcae 	bl	8020664 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801bd08:	e7ea      	b.n	801bce0 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x1c>
 801bd0a:	bf00      	nop

0801bd0c <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>:
 801bd0c:	b148      	cbz	r0, 801bd22 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini+0x16>
 801bd0e:	b510      	push	{r4, lr}
 801bd10:	4604      	mov	r4, r0
 801bd12:	f7ff ff9b 	bl	801bc4c <std_msgs__msg__Header__fini>
 801bd16:	f104 0018 	add.w	r0, r4, #24
 801bd1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd1e:	f004 bca1 	b.w	8020664 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801bd22:	4770      	bx	lr

0801bd24 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>:
 801bd24:	b538      	push	{r3, r4, r5, lr}
 801bd26:	4604      	mov	r4, r0
 801bd28:	b128      	cbz	r0, 801bd36 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x12>
 801bd2a:	f7fa fb67 	bl	80163fc <builtin_interfaces__msg__Time__init>
 801bd2e:	4605      	mov	r5, r0
 801bd30:	b120      	cbz	r0, 801bd3c <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x18>
 801bd32:	4628      	mov	r0, r5
 801bd34:	bd38      	pop	{r3, r4, r5, pc}
 801bd36:	4605      	mov	r5, r0
 801bd38:	4628      	mov	r0, r5
 801bd3a:	bd38      	pop	{r3, r4, r5, pc}
 801bd3c:	4620      	mov	r0, r4
 801bd3e:	f7fa fb61 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 801bd42:	4628      	mov	r0, r5
 801bd44:	bd38      	pop	{r3, r4, r5, pc}
 801bd46:	bf00      	nop

0801bd48 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>:
 801bd48:	b108      	cbz	r0, 801bd4e <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini+0x6>
 801bd4a:	f7fa bb5b 	b.w	8016404 <builtin_interfaces__msg__Time__fini>
 801bd4e:	4770      	bx	lr

0801bd50 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>:
 801bd50:	b538      	push	{r3, r4, r5, lr}
 801bd52:	4604      	mov	r4, r0
 801bd54:	b128      	cbz	r0, 801bd62 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x12>
 801bd56:	f7fa fb51 	bl	80163fc <builtin_interfaces__msg__Time__init>
 801bd5a:	4605      	mov	r5, r0
 801bd5c:	b120      	cbz	r0, 801bd68 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x18>
 801bd5e:	4628      	mov	r0, r5
 801bd60:	bd38      	pop	{r3, r4, r5, pc}
 801bd62:	4605      	mov	r5, r0
 801bd64:	4628      	mov	r0, r5
 801bd66:	bd38      	pop	{r3, r4, r5, pc}
 801bd68:	4620      	mov	r0, r4
 801bd6a:	f7fa fb4b 	bl	8016404 <builtin_interfaces__msg__Time__fini>
 801bd6e:	4628      	mov	r0, r5
 801bd70:	bd38      	pop	{r3, r4, r5, pc}
 801bd72:	bf00      	nop

0801bd74 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>:
 801bd74:	b108      	cbz	r0, 801bd7a <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini+0x6>
 801bd76:	f7fa bb45 	b.w	8016404 <builtin_interfaces__msg__Time__fini>
 801bd7a:	4770      	bx	lr

0801bd7c <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_init_function>:
 801bd7c:	f004 bc68 	b.w	8020650 <tier4_vehicle_msgs__msg__ActuationCommand__init>

0801bd80 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_fini_function>:
 801bd80:	f004 bc6a 	b.w	8020658 <tier4_vehicle_msgs__msg__ActuationCommand__fini>

0801bd84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 801bd84:	4b04      	ldr	r3, [pc, #16]	@ (801bd98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801bd86:	681a      	ldr	r2, [r3, #0]
 801bd88:	b10a      	cbz	r2, 801bd8e <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0xa>
 801bd8a:	4803      	ldr	r0, [pc, #12]	@ (801bd98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801bd8c:	4770      	bx	lr
 801bd8e:	4a03      	ldr	r2, [pc, #12]	@ (801bd9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x18>)
 801bd90:	4801      	ldr	r0, [pc, #4]	@ (801bd98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801bd92:	6812      	ldr	r2, [r2, #0]
 801bd94:	601a      	str	r2, [r3, #0]
 801bd96:	4770      	bx	lr
 801bd98:	24001278 	.word	0x24001278
 801bd9c:	24000e14 	.word	0x24000e14

0801bda0 <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_init_function>:
 801bda0:	f004 bc5c 	b.w	802065c <tier4_vehicle_msgs__msg__ActuationStatus__init>

0801bda4 <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_fini_function>:
 801bda4:	f004 bc5e 	b.w	8020664 <tier4_vehicle_msgs__msg__ActuationStatus__fini>

0801bda8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 801bda8:	4b04      	ldr	r3, [pc, #16]	@ (801bdbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801bdaa:	681a      	ldr	r2, [r3, #0]
 801bdac:	b10a      	cbz	r2, 801bdb2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0xa>
 801bdae:	4803      	ldr	r0, [pc, #12]	@ (801bdbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801bdb0:	4770      	bx	lr
 801bdb2:	4a03      	ldr	r2, [pc, #12]	@ (801bdc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x18>)
 801bdb4:	4801      	ldr	r0, [pc, #4]	@ (801bdbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801bdb6:	6812      	ldr	r2, [r2, #0]
 801bdb8:	601a      	str	r2, [r3, #0]
 801bdba:	4770      	bx	lr
 801bdbc:	24001338 	.word	0x24001338
 801bdc0:	24000e14 	.word	0x24000e14

0801bdc4 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 801bdc4:	b1b8      	cbz	r0, 801bdf6 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand+0x32>
 801bdc6:	b538      	push	{r3, r4, r5, lr}
 801bdc8:	460d      	mov	r5, r1
 801bdca:	2108      	movs	r1, #8
 801bdcc:	4628      	mov	r0, r5
 801bdce:	f7f8 fcfd 	bl	80147cc <ucdr_alignment>
 801bdd2:	f105 0308 	add.w	r3, r5, #8
 801bdd6:	2108      	movs	r1, #8
 801bdd8:	f1c5 0508 	rsb	r5, r5, #8
 801bddc:	181c      	adds	r4, r3, r0
 801bdde:	4620      	mov	r0, r4
 801bde0:	f7f8 fcf4 	bl	80147cc <ucdr_alignment>
 801bde4:	2108      	movs	r1, #8
 801bde6:	4408      	add	r0, r1
 801bde8:	4404      	add	r4, r0
 801bdea:	4620      	mov	r0, r4
 801bdec:	f7f8 fcee 	bl	80147cc <ucdr_alignment>
 801bdf0:	4428      	add	r0, r5
 801bdf2:	4420      	add	r0, r4
 801bdf4:	bd38      	pop	{r3, r4, r5, pc}
 801bdf6:	4770      	bx	lr

0801bdf8 <_ActuationCommand__cdr_deserialize>:
 801bdf8:	b538      	push	{r3, r4, r5, lr}
 801bdfa:	460c      	mov	r4, r1
 801bdfc:	b171      	cbz	r1, 801be1c <_ActuationCommand__cdr_deserialize+0x24>
 801bdfe:	4605      	mov	r5, r0
 801be00:	f7f8 fbc6 	bl	8014590 <ucdr_deserialize_double>
 801be04:	f104 0108 	add.w	r1, r4, #8
 801be08:	4628      	mov	r0, r5
 801be0a:	f7f8 fbc1 	bl	8014590 <ucdr_deserialize_double>
 801be0e:	f104 0110 	add.w	r1, r4, #16
 801be12:	4628      	mov	r0, r5
 801be14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801be18:	f7f8 bbba 	b.w	8014590 <ucdr_deserialize_double>
 801be1c:	4608      	mov	r0, r1
 801be1e:	bd38      	pop	{r3, r4, r5, pc}

0801be20 <_ActuationCommand__cdr_serialize>:
 801be20:	b198      	cbz	r0, 801be4a <_ActuationCommand__cdr_serialize+0x2a>
 801be22:	b538      	push	{r3, r4, r5, lr}
 801be24:	460d      	mov	r5, r1
 801be26:	4604      	mov	r4, r0
 801be28:	ed90 0b00 	vldr	d0, [r0]
 801be2c:	4608      	mov	r0, r1
 801be2e:	f7f8 fadf 	bl	80143f0 <ucdr_serialize_double>
 801be32:	4628      	mov	r0, r5
 801be34:	ed94 0b02 	vldr	d0, [r4, #8]
 801be38:	f7f8 fada 	bl	80143f0 <ucdr_serialize_double>
 801be3c:	4628      	mov	r0, r5
 801be3e:	ed94 0b04 	vldr	d0, [r4, #16]
 801be42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801be46:	f7f8 bad3 	b.w	80143f0 <ucdr_serialize_double>
 801be4a:	4770      	bx	lr

0801be4c <_ActuationCommand__get_serialized_size>:
 801be4c:	b190      	cbz	r0, 801be74 <_ActuationCommand__get_serialized_size+0x28>
 801be4e:	2108      	movs	r1, #8
 801be50:	2000      	movs	r0, #0
 801be52:	b510      	push	{r4, lr}
 801be54:	f7f8 fcba 	bl	80147cc <ucdr_alignment>
 801be58:	2108      	movs	r1, #8
 801be5a:	1844      	adds	r4, r0, r1
 801be5c:	4620      	mov	r0, r4
 801be5e:	f7f8 fcb5 	bl	80147cc <ucdr_alignment>
 801be62:	2108      	movs	r1, #8
 801be64:	4408      	add	r0, r1
 801be66:	4404      	add	r4, r0
 801be68:	4620      	mov	r0, r4
 801be6a:	f7f8 fcaf 	bl	80147cc <ucdr_alignment>
 801be6e:	3008      	adds	r0, #8
 801be70:	4420      	add	r0, r4
 801be72:	bd10      	pop	{r4, pc}
 801be74:	4770      	bx	lr
 801be76:	bf00      	nop

0801be78 <_ActuationCommand__max_serialized_size>:
 801be78:	b538      	push	{r3, r4, r5, lr}
 801be7a:	2108      	movs	r1, #8
 801be7c:	2000      	movs	r0, #0
 801be7e:	f7f8 fca5 	bl	80147cc <ucdr_alignment>
 801be82:	2108      	movs	r1, #8
 801be84:	1845      	adds	r5, r0, r1
 801be86:	4628      	mov	r0, r5
 801be88:	f7f8 fca0 	bl	80147cc <ucdr_alignment>
 801be8c:	2108      	movs	r1, #8
 801be8e:	1844      	adds	r4, r0, r1
 801be90:	442c      	add	r4, r5
 801be92:	4620      	mov	r0, r4
 801be94:	f7f8 fc9a 	bl	80147cc <ucdr_alignment>
 801be98:	3008      	adds	r0, #8
 801be9a:	4420      	add	r0, r4
 801be9c:	bd38      	pop	{r3, r4, r5, pc}
 801be9e:	bf00      	nop

0801bea0 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 801bea0:	b570      	push	{r4, r5, r6, lr}
 801bea2:	460c      	mov	r4, r1
 801bea4:	2301      	movs	r3, #1
 801bea6:	2108      	movs	r1, #8
 801bea8:	f104 0508 	add.w	r5, r4, #8
 801beac:	7003      	strb	r3, [r0, #0]
 801beae:	4620      	mov	r0, r4
 801beb0:	f1c4 0408 	rsb	r4, r4, #8
 801beb4:	f7f8 fc8a 	bl	80147cc <ucdr_alignment>
 801beb8:	1946      	adds	r6, r0, r5
 801beba:	2108      	movs	r1, #8
 801bebc:	4630      	mov	r0, r6
 801bebe:	f7f8 fc85 	bl	80147cc <ucdr_alignment>
 801bec2:	2108      	movs	r1, #8
 801bec4:	1845      	adds	r5, r0, r1
 801bec6:	4435      	add	r5, r6
 801bec8:	4628      	mov	r0, r5
 801beca:	f7f8 fc7f 	bl	80147cc <ucdr_alignment>
 801bece:	4420      	add	r0, r4
 801bed0:	4428      	add	r0, r5
 801bed2:	bd70      	pop	{r4, r5, r6, pc}

0801bed4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 801bed4:	4800      	ldr	r0, [pc, #0]	@ (801bed8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x4>)
 801bed6:	4770      	bx	lr
 801bed8:	24001344 	.word	0x24001344

0801bedc <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 801bedc:	b1b8      	cbz	r0, 801bf0e <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus+0x32>
 801bede:	b538      	push	{r3, r4, r5, lr}
 801bee0:	460d      	mov	r5, r1
 801bee2:	2108      	movs	r1, #8
 801bee4:	4628      	mov	r0, r5
 801bee6:	f7f8 fc71 	bl	80147cc <ucdr_alignment>
 801beea:	f105 0308 	add.w	r3, r5, #8
 801beee:	2108      	movs	r1, #8
 801bef0:	f1c5 0508 	rsb	r5, r5, #8
 801bef4:	181c      	adds	r4, r3, r0
 801bef6:	4620      	mov	r0, r4
 801bef8:	f7f8 fc68 	bl	80147cc <ucdr_alignment>
 801befc:	2108      	movs	r1, #8
 801befe:	4408      	add	r0, r1
 801bf00:	4404      	add	r4, r0
 801bf02:	4620      	mov	r0, r4
 801bf04:	f7f8 fc62 	bl	80147cc <ucdr_alignment>
 801bf08:	4428      	add	r0, r5
 801bf0a:	4420      	add	r0, r4
 801bf0c:	bd38      	pop	{r3, r4, r5, pc}
 801bf0e:	4770      	bx	lr

0801bf10 <_ActuationStatus__cdr_deserialize>:
 801bf10:	b538      	push	{r3, r4, r5, lr}
 801bf12:	460c      	mov	r4, r1
 801bf14:	b171      	cbz	r1, 801bf34 <_ActuationStatus__cdr_deserialize+0x24>
 801bf16:	4605      	mov	r5, r0
 801bf18:	f7f8 fb3a 	bl	8014590 <ucdr_deserialize_double>
 801bf1c:	f104 0108 	add.w	r1, r4, #8
 801bf20:	4628      	mov	r0, r5
 801bf22:	f7f8 fb35 	bl	8014590 <ucdr_deserialize_double>
 801bf26:	f104 0110 	add.w	r1, r4, #16
 801bf2a:	4628      	mov	r0, r5
 801bf2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bf30:	f7f8 bb2e 	b.w	8014590 <ucdr_deserialize_double>
 801bf34:	4608      	mov	r0, r1
 801bf36:	bd38      	pop	{r3, r4, r5, pc}

0801bf38 <_ActuationStatus__cdr_serialize>:
 801bf38:	b198      	cbz	r0, 801bf62 <_ActuationStatus__cdr_serialize+0x2a>
 801bf3a:	b538      	push	{r3, r4, r5, lr}
 801bf3c:	460d      	mov	r5, r1
 801bf3e:	4604      	mov	r4, r0
 801bf40:	ed90 0b00 	vldr	d0, [r0]
 801bf44:	4608      	mov	r0, r1
 801bf46:	f7f8 fa53 	bl	80143f0 <ucdr_serialize_double>
 801bf4a:	4628      	mov	r0, r5
 801bf4c:	ed94 0b02 	vldr	d0, [r4, #8]
 801bf50:	f7f8 fa4e 	bl	80143f0 <ucdr_serialize_double>
 801bf54:	4628      	mov	r0, r5
 801bf56:	ed94 0b04 	vldr	d0, [r4, #16]
 801bf5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bf5e:	f7f8 ba47 	b.w	80143f0 <ucdr_serialize_double>
 801bf62:	4770      	bx	lr

0801bf64 <_ActuationStatus__get_serialized_size>:
 801bf64:	b190      	cbz	r0, 801bf8c <_ActuationStatus__get_serialized_size+0x28>
 801bf66:	2108      	movs	r1, #8
 801bf68:	2000      	movs	r0, #0
 801bf6a:	b510      	push	{r4, lr}
 801bf6c:	f7f8 fc2e 	bl	80147cc <ucdr_alignment>
 801bf70:	2108      	movs	r1, #8
 801bf72:	1844      	adds	r4, r0, r1
 801bf74:	4620      	mov	r0, r4
 801bf76:	f7f8 fc29 	bl	80147cc <ucdr_alignment>
 801bf7a:	2108      	movs	r1, #8
 801bf7c:	4408      	add	r0, r1
 801bf7e:	4404      	add	r4, r0
 801bf80:	4620      	mov	r0, r4
 801bf82:	f7f8 fc23 	bl	80147cc <ucdr_alignment>
 801bf86:	3008      	adds	r0, #8
 801bf88:	4420      	add	r0, r4
 801bf8a:	bd10      	pop	{r4, pc}
 801bf8c:	4770      	bx	lr
 801bf8e:	bf00      	nop

0801bf90 <_ActuationStatus__max_serialized_size>:
 801bf90:	b538      	push	{r3, r4, r5, lr}
 801bf92:	2108      	movs	r1, #8
 801bf94:	2000      	movs	r0, #0
 801bf96:	f7f8 fc19 	bl	80147cc <ucdr_alignment>
 801bf9a:	2108      	movs	r1, #8
 801bf9c:	1845      	adds	r5, r0, r1
 801bf9e:	4628      	mov	r0, r5
 801bfa0:	f7f8 fc14 	bl	80147cc <ucdr_alignment>
 801bfa4:	2108      	movs	r1, #8
 801bfa6:	1844      	adds	r4, r0, r1
 801bfa8:	442c      	add	r4, r5
 801bfaa:	4620      	mov	r0, r4
 801bfac:	f7f8 fc0e 	bl	80147cc <ucdr_alignment>
 801bfb0:	3008      	adds	r0, #8
 801bfb2:	4420      	add	r0, r4
 801bfb4:	bd38      	pop	{r3, r4, r5, pc}
 801bfb6:	bf00      	nop

0801bfb8 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 801bfb8:	b570      	push	{r4, r5, r6, lr}
 801bfba:	460c      	mov	r4, r1
 801bfbc:	2301      	movs	r3, #1
 801bfbe:	2108      	movs	r1, #8
 801bfc0:	f104 0508 	add.w	r5, r4, #8
 801bfc4:	7003      	strb	r3, [r0, #0]
 801bfc6:	4620      	mov	r0, r4
 801bfc8:	f1c4 0408 	rsb	r4, r4, #8
 801bfcc:	f7f8 fbfe 	bl	80147cc <ucdr_alignment>
 801bfd0:	1946      	adds	r6, r0, r5
 801bfd2:	2108      	movs	r1, #8
 801bfd4:	4630      	mov	r0, r6
 801bfd6:	f7f8 fbf9 	bl	80147cc <ucdr_alignment>
 801bfda:	2108      	movs	r1, #8
 801bfdc:	1845      	adds	r5, r0, r1
 801bfde:	4435      	add	r5, r6
 801bfe0:	4628      	mov	r0, r5
 801bfe2:	f7f8 fbf3 	bl	80147cc <ucdr_alignment>
 801bfe6:	4420      	add	r0, r4
 801bfe8:	4428      	add	r0, r5
 801bfea:	bd70      	pop	{r4, r5, r6, pc}

0801bfec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 801bfec:	4800      	ldr	r0, [pc, #0]	@ (801bff0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x4>)
 801bfee:	4770      	bx	lr
 801bff0:	2400136c 	.word	0x2400136c

0801bff4 <ucdr_serialize_endian_array_char>:
 801bff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bff8:	4619      	mov	r1, r3
 801bffa:	461f      	mov	r7, r3
 801bffc:	4605      	mov	r5, r0
 801bffe:	4690      	mov	r8, r2
 801c000:	f7f8 fb8c 	bl	801471c <ucdr_check_buffer_available_for>
 801c004:	b9e0      	cbnz	r0, 801c040 <ucdr_serialize_endian_array_char+0x4c>
 801c006:	463e      	mov	r6, r7
 801c008:	e00b      	b.n	801c022 <ucdr_serialize_endian_array_char+0x2e>
 801c00a:	4441      	add	r1, r8
 801c00c:	68a8      	ldr	r0, [r5, #8]
 801c00e:	4622      	mov	r2, r4
 801c010:	1b36      	subs	r6, r6, r4
 801c012:	f005 fe82 	bl	8021d1a <memcpy>
 801c016:	68ab      	ldr	r3, [r5, #8]
 801c018:	6928      	ldr	r0, [r5, #16]
 801c01a:	4423      	add	r3, r4
 801c01c:	4420      	add	r0, r4
 801c01e:	60ab      	str	r3, [r5, #8]
 801c020:	6128      	str	r0, [r5, #16]
 801c022:	4631      	mov	r1, r6
 801c024:	2201      	movs	r2, #1
 801c026:	4628      	mov	r0, r5
 801c028:	f7f8 fc02 	bl	8014830 <ucdr_check_final_buffer_behavior_array>
 801c02c:	1bb9      	subs	r1, r7, r6
 801c02e:	4604      	mov	r4, r0
 801c030:	2800      	cmp	r0, #0
 801c032:	d1ea      	bne.n	801c00a <ucdr_serialize_endian_array_char+0x16>
 801c034:	2301      	movs	r3, #1
 801c036:	7da8      	ldrb	r0, [r5, #22]
 801c038:	756b      	strb	r3, [r5, #21]
 801c03a:	4058      	eors	r0, r3
 801c03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c040:	463a      	mov	r2, r7
 801c042:	4641      	mov	r1, r8
 801c044:	68a8      	ldr	r0, [r5, #8]
 801c046:	f005 fe68 	bl	8021d1a <memcpy>
 801c04a:	68aa      	ldr	r2, [r5, #8]
 801c04c:	692b      	ldr	r3, [r5, #16]
 801c04e:	443a      	add	r2, r7
 801c050:	443b      	add	r3, r7
 801c052:	60aa      	str	r2, [r5, #8]
 801c054:	612b      	str	r3, [r5, #16]
 801c056:	e7ed      	b.n	801c034 <ucdr_serialize_endian_array_char+0x40>

0801c058 <ucdr_deserialize_endian_array_char>:
 801c058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c05c:	4619      	mov	r1, r3
 801c05e:	461f      	mov	r7, r3
 801c060:	4605      	mov	r5, r0
 801c062:	4690      	mov	r8, r2
 801c064:	f7f8 fb5a 	bl	801471c <ucdr_check_buffer_available_for>
 801c068:	b9e8      	cbnz	r0, 801c0a6 <ucdr_deserialize_endian_array_char+0x4e>
 801c06a:	463e      	mov	r6, r7
 801c06c:	e00c      	b.n	801c088 <ucdr_deserialize_endian_array_char+0x30>
 801c06e:	eb08 0003 	add.w	r0, r8, r3
 801c072:	68a9      	ldr	r1, [r5, #8]
 801c074:	4622      	mov	r2, r4
 801c076:	1b36      	subs	r6, r6, r4
 801c078:	f005 fe4f 	bl	8021d1a <memcpy>
 801c07c:	68ab      	ldr	r3, [r5, #8]
 801c07e:	6928      	ldr	r0, [r5, #16]
 801c080:	4423      	add	r3, r4
 801c082:	4420      	add	r0, r4
 801c084:	60ab      	str	r3, [r5, #8]
 801c086:	6128      	str	r0, [r5, #16]
 801c088:	4631      	mov	r1, r6
 801c08a:	2201      	movs	r2, #1
 801c08c:	4628      	mov	r0, r5
 801c08e:	f7f8 fbcf 	bl	8014830 <ucdr_check_final_buffer_behavior_array>
 801c092:	1bbb      	subs	r3, r7, r6
 801c094:	4604      	mov	r4, r0
 801c096:	2800      	cmp	r0, #0
 801c098:	d1e9      	bne.n	801c06e <ucdr_deserialize_endian_array_char+0x16>
 801c09a:	2301      	movs	r3, #1
 801c09c:	7da8      	ldrb	r0, [r5, #22]
 801c09e:	756b      	strb	r3, [r5, #21]
 801c0a0:	4058      	eors	r0, r3
 801c0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c0a6:	463a      	mov	r2, r7
 801c0a8:	68a9      	ldr	r1, [r5, #8]
 801c0aa:	4640      	mov	r0, r8
 801c0ac:	f005 fe35 	bl	8021d1a <memcpy>
 801c0b0:	68aa      	ldr	r2, [r5, #8]
 801c0b2:	692b      	ldr	r3, [r5, #16]
 801c0b4:	443a      	add	r2, r7
 801c0b6:	443b      	add	r3, r7
 801c0b8:	60aa      	str	r2, [r5, #8]
 801c0ba:	612b      	str	r3, [r5, #16]
 801c0bc:	e7ed      	b.n	801c09a <ucdr_deserialize_endian_array_char+0x42>
 801c0be:	bf00      	nop

0801c0c0 <ucdr_serialize_array_uint8_t>:
 801c0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c0c4:	4688      	mov	r8, r1
 801c0c6:	4611      	mov	r1, r2
 801c0c8:	4617      	mov	r7, r2
 801c0ca:	4605      	mov	r5, r0
 801c0cc:	f7f8 fb26 	bl	801471c <ucdr_check_buffer_available_for>
 801c0d0:	b9e0      	cbnz	r0, 801c10c <ucdr_serialize_array_uint8_t+0x4c>
 801c0d2:	463e      	mov	r6, r7
 801c0d4:	e00b      	b.n	801c0ee <ucdr_serialize_array_uint8_t+0x2e>
 801c0d6:	4441      	add	r1, r8
 801c0d8:	68a8      	ldr	r0, [r5, #8]
 801c0da:	4622      	mov	r2, r4
 801c0dc:	1b36      	subs	r6, r6, r4
 801c0de:	f005 fe1c 	bl	8021d1a <memcpy>
 801c0e2:	68ab      	ldr	r3, [r5, #8]
 801c0e4:	6928      	ldr	r0, [r5, #16]
 801c0e6:	4423      	add	r3, r4
 801c0e8:	4420      	add	r0, r4
 801c0ea:	60ab      	str	r3, [r5, #8]
 801c0ec:	6128      	str	r0, [r5, #16]
 801c0ee:	4631      	mov	r1, r6
 801c0f0:	2201      	movs	r2, #1
 801c0f2:	4628      	mov	r0, r5
 801c0f4:	f7f8 fb9c 	bl	8014830 <ucdr_check_final_buffer_behavior_array>
 801c0f8:	1bb9      	subs	r1, r7, r6
 801c0fa:	4604      	mov	r4, r0
 801c0fc:	2800      	cmp	r0, #0
 801c0fe:	d1ea      	bne.n	801c0d6 <ucdr_serialize_array_uint8_t+0x16>
 801c100:	2301      	movs	r3, #1
 801c102:	7da8      	ldrb	r0, [r5, #22]
 801c104:	756b      	strb	r3, [r5, #21]
 801c106:	4058      	eors	r0, r3
 801c108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c10c:	463a      	mov	r2, r7
 801c10e:	4641      	mov	r1, r8
 801c110:	68a8      	ldr	r0, [r5, #8]
 801c112:	f005 fe02 	bl	8021d1a <memcpy>
 801c116:	68aa      	ldr	r2, [r5, #8]
 801c118:	692b      	ldr	r3, [r5, #16]
 801c11a:	443a      	add	r2, r7
 801c11c:	443b      	add	r3, r7
 801c11e:	60aa      	str	r2, [r5, #8]
 801c120:	612b      	str	r3, [r5, #16]
 801c122:	e7ed      	b.n	801c100 <ucdr_serialize_array_uint8_t+0x40>

0801c124 <ucdr_serialize_endian_array_uint8_t>:
 801c124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c128:	4619      	mov	r1, r3
 801c12a:	461f      	mov	r7, r3
 801c12c:	4605      	mov	r5, r0
 801c12e:	4690      	mov	r8, r2
 801c130:	f7f8 faf4 	bl	801471c <ucdr_check_buffer_available_for>
 801c134:	b9e0      	cbnz	r0, 801c170 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801c136:	463e      	mov	r6, r7
 801c138:	e00b      	b.n	801c152 <ucdr_serialize_endian_array_uint8_t+0x2e>
 801c13a:	4441      	add	r1, r8
 801c13c:	68a8      	ldr	r0, [r5, #8]
 801c13e:	4622      	mov	r2, r4
 801c140:	1b36      	subs	r6, r6, r4
 801c142:	f005 fdea 	bl	8021d1a <memcpy>
 801c146:	68ab      	ldr	r3, [r5, #8]
 801c148:	6928      	ldr	r0, [r5, #16]
 801c14a:	4423      	add	r3, r4
 801c14c:	4420      	add	r0, r4
 801c14e:	60ab      	str	r3, [r5, #8]
 801c150:	6128      	str	r0, [r5, #16]
 801c152:	4631      	mov	r1, r6
 801c154:	2201      	movs	r2, #1
 801c156:	4628      	mov	r0, r5
 801c158:	f7f8 fb6a 	bl	8014830 <ucdr_check_final_buffer_behavior_array>
 801c15c:	1bb9      	subs	r1, r7, r6
 801c15e:	4604      	mov	r4, r0
 801c160:	2800      	cmp	r0, #0
 801c162:	d1ea      	bne.n	801c13a <ucdr_serialize_endian_array_uint8_t+0x16>
 801c164:	2301      	movs	r3, #1
 801c166:	7da8      	ldrb	r0, [r5, #22]
 801c168:	756b      	strb	r3, [r5, #21]
 801c16a:	4058      	eors	r0, r3
 801c16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c170:	463a      	mov	r2, r7
 801c172:	4641      	mov	r1, r8
 801c174:	68a8      	ldr	r0, [r5, #8]
 801c176:	f005 fdd0 	bl	8021d1a <memcpy>
 801c17a:	68aa      	ldr	r2, [r5, #8]
 801c17c:	692b      	ldr	r3, [r5, #16]
 801c17e:	443a      	add	r2, r7
 801c180:	443b      	add	r3, r7
 801c182:	60aa      	str	r2, [r5, #8]
 801c184:	612b      	str	r3, [r5, #16]
 801c186:	e7ed      	b.n	801c164 <ucdr_serialize_endian_array_uint8_t+0x40>

0801c188 <ucdr_deserialize_array_uint8_t>:
 801c188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c18c:	4688      	mov	r8, r1
 801c18e:	4611      	mov	r1, r2
 801c190:	4617      	mov	r7, r2
 801c192:	4605      	mov	r5, r0
 801c194:	f7f8 fac2 	bl	801471c <ucdr_check_buffer_available_for>
 801c198:	b9e8      	cbnz	r0, 801c1d6 <ucdr_deserialize_array_uint8_t+0x4e>
 801c19a:	463e      	mov	r6, r7
 801c19c:	e00c      	b.n	801c1b8 <ucdr_deserialize_array_uint8_t+0x30>
 801c19e:	eb08 0003 	add.w	r0, r8, r3
 801c1a2:	68a9      	ldr	r1, [r5, #8]
 801c1a4:	4622      	mov	r2, r4
 801c1a6:	1b36      	subs	r6, r6, r4
 801c1a8:	f005 fdb7 	bl	8021d1a <memcpy>
 801c1ac:	68ab      	ldr	r3, [r5, #8]
 801c1ae:	6928      	ldr	r0, [r5, #16]
 801c1b0:	4423      	add	r3, r4
 801c1b2:	4420      	add	r0, r4
 801c1b4:	60ab      	str	r3, [r5, #8]
 801c1b6:	6128      	str	r0, [r5, #16]
 801c1b8:	4631      	mov	r1, r6
 801c1ba:	2201      	movs	r2, #1
 801c1bc:	4628      	mov	r0, r5
 801c1be:	f7f8 fb37 	bl	8014830 <ucdr_check_final_buffer_behavior_array>
 801c1c2:	1bbb      	subs	r3, r7, r6
 801c1c4:	4604      	mov	r4, r0
 801c1c6:	2800      	cmp	r0, #0
 801c1c8:	d1e9      	bne.n	801c19e <ucdr_deserialize_array_uint8_t+0x16>
 801c1ca:	2301      	movs	r3, #1
 801c1cc:	7da8      	ldrb	r0, [r5, #22]
 801c1ce:	756b      	strb	r3, [r5, #21]
 801c1d0:	4058      	eors	r0, r3
 801c1d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c1d6:	463a      	mov	r2, r7
 801c1d8:	68a9      	ldr	r1, [r5, #8]
 801c1da:	4640      	mov	r0, r8
 801c1dc:	f005 fd9d 	bl	8021d1a <memcpy>
 801c1e0:	68aa      	ldr	r2, [r5, #8]
 801c1e2:	692b      	ldr	r3, [r5, #16]
 801c1e4:	443a      	add	r2, r7
 801c1e6:	443b      	add	r3, r7
 801c1e8:	60aa      	str	r2, [r5, #8]
 801c1ea:	612b      	str	r3, [r5, #16]
 801c1ec:	e7ed      	b.n	801c1ca <ucdr_deserialize_array_uint8_t+0x42>
 801c1ee:	bf00      	nop

0801c1f0 <ucdr_deserialize_endian_array_uint8_t>:
 801c1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c1f4:	4619      	mov	r1, r3
 801c1f6:	461f      	mov	r7, r3
 801c1f8:	4605      	mov	r5, r0
 801c1fa:	4690      	mov	r8, r2
 801c1fc:	f7f8 fa8e 	bl	801471c <ucdr_check_buffer_available_for>
 801c200:	b9e8      	cbnz	r0, 801c23e <ucdr_deserialize_endian_array_uint8_t+0x4e>
 801c202:	463e      	mov	r6, r7
 801c204:	e00c      	b.n	801c220 <ucdr_deserialize_endian_array_uint8_t+0x30>
 801c206:	eb08 0003 	add.w	r0, r8, r3
 801c20a:	68a9      	ldr	r1, [r5, #8]
 801c20c:	4622      	mov	r2, r4
 801c20e:	1b36      	subs	r6, r6, r4
 801c210:	f005 fd83 	bl	8021d1a <memcpy>
 801c214:	68ab      	ldr	r3, [r5, #8]
 801c216:	6928      	ldr	r0, [r5, #16]
 801c218:	4423      	add	r3, r4
 801c21a:	4420      	add	r0, r4
 801c21c:	60ab      	str	r3, [r5, #8]
 801c21e:	6128      	str	r0, [r5, #16]
 801c220:	4631      	mov	r1, r6
 801c222:	2201      	movs	r2, #1
 801c224:	4628      	mov	r0, r5
 801c226:	f7f8 fb03 	bl	8014830 <ucdr_check_final_buffer_behavior_array>
 801c22a:	1bbb      	subs	r3, r7, r6
 801c22c:	4604      	mov	r4, r0
 801c22e:	2800      	cmp	r0, #0
 801c230:	d1e9      	bne.n	801c206 <ucdr_deserialize_endian_array_uint8_t+0x16>
 801c232:	2301      	movs	r3, #1
 801c234:	7da8      	ldrb	r0, [r5, #22]
 801c236:	756b      	strb	r3, [r5, #21]
 801c238:	4058      	eors	r0, r3
 801c23a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c23e:	463a      	mov	r2, r7
 801c240:	68a9      	ldr	r1, [r5, #8]
 801c242:	4640      	mov	r0, r8
 801c244:	f005 fd69 	bl	8021d1a <memcpy>
 801c248:	68aa      	ldr	r2, [r5, #8]
 801c24a:	692b      	ldr	r3, [r5, #16]
 801c24c:	443a      	add	r2, r7
 801c24e:	443b      	add	r3, r7
 801c250:	60aa      	str	r2, [r5, #8]
 801c252:	612b      	str	r3, [r5, #16]
 801c254:	e7ed      	b.n	801c232 <ucdr_deserialize_endian_array_uint8_t+0x42>
 801c256:	bf00      	nop

0801c258 <uxr_buffer_delete_entity>:
 801c258:	b510      	push	{r4, lr}
 801c25a:	2300      	movs	r3, #0
 801c25c:	b08e      	sub	sp, #56	@ 0x38
 801c25e:	4604      	mov	r4, r0
 801c260:	9103      	str	r1, [sp, #12]
 801c262:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801c266:	2303      	movs	r3, #3
 801c268:	2204      	movs	r2, #4
 801c26a:	9300      	str	r3, [sp, #0]
 801c26c:	ab06      	add	r3, sp, #24
 801c26e:	f001 fb77 	bl	801d960 <uxr_prepare_stream_to_write_submessage>
 801c272:	b918      	cbnz	r0, 801c27c <uxr_buffer_delete_entity+0x24>
 801c274:	4604      	mov	r4, r0
 801c276:	4620      	mov	r0, r4
 801c278:	b00e      	add	sp, #56	@ 0x38
 801c27a:	bd10      	pop	{r4, pc}
 801c27c:	9902      	ldr	r1, [sp, #8]
 801c27e:	aa05      	add	r2, sp, #20
 801c280:	4620      	mov	r0, r4
 801c282:	f001 fca9 	bl	801dbd8 <uxr_init_base_object_request>
 801c286:	4604      	mov	r4, r0
 801c288:	a905      	add	r1, sp, #20
 801c28a:	a806      	add	r0, sp, #24
 801c28c:	f003 fa5a 	bl	801f744 <uxr_serialize_DELETE_Payload>
 801c290:	4620      	mov	r0, r4
 801c292:	b00e      	add	sp, #56	@ 0x38
 801c294:	bd10      	pop	{r4, pc}
 801c296:	bf00      	nop

0801c298 <uxr_common_create_entity>:
 801c298:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801c29c:	b510      	push	{r4, lr}
 801c29e:	f1bc 0f01 	cmp.w	ip, #1
 801c2a2:	b08c      	sub	sp, #48	@ 0x30
 801c2a4:	4604      	mov	r4, r0
 801c2a6:	9202      	str	r2, [sp, #8]
 801c2a8:	bf0c      	ite	eq
 801c2aa:	f003 0201 	andeq.w	r2, r3, #1
 801c2ae:	2200      	movne	r2, #0
 801c2b0:	330e      	adds	r3, #14
 801c2b2:	9103      	str	r1, [sp, #12]
 801c2b4:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 801c2b8:	441a      	add	r2, r3
 801c2ba:	ab04      	add	r3, sp, #16
 801c2bc:	9101      	str	r1, [sp, #4]
 801c2be:	2101      	movs	r1, #1
 801c2c0:	b292      	uxth	r2, r2
 801c2c2:	9100      	str	r1, [sp, #0]
 801c2c4:	9903      	ldr	r1, [sp, #12]
 801c2c6:	f001 fb4b 	bl	801d960 <uxr_prepare_stream_to_write_submessage>
 801c2ca:	b918      	cbnz	r0, 801c2d4 <uxr_common_create_entity+0x3c>
 801c2cc:	4604      	mov	r4, r0
 801c2ce:	4620      	mov	r0, r4
 801c2d0:	b00c      	add	sp, #48	@ 0x30
 801c2d2:	bd10      	pop	{r4, pc}
 801c2d4:	9902      	ldr	r1, [sp, #8]
 801c2d6:	4620      	mov	r0, r4
 801c2d8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c2da:	f001 fc7d 	bl	801dbd8 <uxr_init_base_object_request>
 801c2de:	4604      	mov	r4, r0
 801c2e0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801c2e2:	a804      	add	r0, sp, #16
 801c2e4:	f003 f988 	bl	801f5f8 <uxr_serialize_CREATE_Payload>
 801c2e8:	4620      	mov	r0, r4
 801c2ea:	b00c      	add	sp, #48	@ 0x30
 801c2ec:	bd10      	pop	{r4, pc}
 801c2ee:	bf00      	nop

0801c2f0 <uxr_buffer_create_participant_bin>:
 801c2f0:	b570      	push	{r4, r5, r6, lr}
 801c2f2:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 801c2f6:	4605      	mov	r5, r0
 801c2f8:	ac11      	add	r4, sp, #68	@ 0x44
 801c2fa:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 801c2fe:	2303      	movs	r3, #3
 801c300:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 801c304:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801c308:	7223      	strb	r3, [r4, #8]
 801c30a:	2300      	movs	r3, #0
 801c30c:	2201      	movs	r2, #1
 801c30e:	f88d 3014 	strb.w	r3, [sp, #20]
 801c312:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 801c314:	7122      	strb	r2, [r4, #4]
 801c316:	b1cb      	cbz	r3, 801c34c <uxr_buffer_create_participant_bin+0x5c>
 801c318:	f88d 201c 	strb.w	r2, [sp, #28]
 801c31c:	9308      	str	r3, [sp, #32]
 801c31e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801c322:	a915      	add	r1, sp, #84	@ 0x54
 801c324:	a809      	add	r0, sp, #36	@ 0x24
 801c326:	f7f8 fa4d 	bl	80147c4 <ucdr_init_buffer>
 801c32a:	a905      	add	r1, sp, #20
 801c32c:	a809      	add	r0, sp, #36	@ 0x24
 801c32e:	f002 fd19 	bl	801ed64 <uxr_serialize_OBJK_DomainParticipant_Binary>
 801c332:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c334:	9600      	str	r6, [sp, #0]
 801c336:	4628      	mov	r0, r5
 801c338:	9401      	str	r4, [sp, #4]
 801c33a:	60e3      	str	r3, [r4, #12]
 801c33c:	b29b      	uxth	r3, r3
 801c33e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801c342:	f7ff ffa9 	bl	801c298 <uxr_common_create_entity>
 801c346:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 801c34a:	bd70      	pop	{r4, r5, r6, pc}
 801c34c:	f88d 301c 	strb.w	r3, [sp, #28]
 801c350:	e7e5      	b.n	801c31e <uxr_buffer_create_participant_bin+0x2e>
 801c352:	bf00      	nop

0801c354 <uxr_buffer_create_topic_bin>:
 801c354:	b570      	push	{r4, r5, r6, lr}
 801c356:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 801c35a:	4605      	mov	r5, r0
 801c35c:	4618      	mov	r0, r3
 801c35e:	9105      	str	r1, [sp, #20]
 801c360:	a997      	add	r1, sp, #604	@ 0x25c
 801c362:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 801c366:	ac13      	add	r4, sp, #76	@ 0x4c
 801c368:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801c36c:	2302      	movs	r3, #2
 801c36e:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 801c372:	f000 fa8d 	bl	801c890 <uxr_object_id_to_raw>
 801c376:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 801c378:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801c37c:	a917      	add	r1, sp, #92	@ 0x5c
 801c37e:	a80b      	add	r0, sp, #44	@ 0x2c
 801c380:	9306      	str	r3, [sp, #24]
 801c382:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 801c384:	930a      	str	r3, [sp, #40]	@ 0x28
 801c386:	2303      	movs	r3, #3
 801c388:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801c38c:	2301      	movs	r3, #1
 801c38e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801c392:	2300      	movs	r3, #0
 801c394:	f88d 301c 	strb.w	r3, [sp, #28]
 801c398:	f7f8 fa14 	bl	80147c4 <ucdr_init_buffer>
 801c39c:	a906      	add	r1, sp, #24
 801c39e:	a80b      	add	r0, sp, #44	@ 0x2c
 801c3a0:	f002 fd02 	bl	801eda8 <uxr_serialize_OBJK_Topic_Binary>
 801c3a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c3a6:	4628      	mov	r0, r5
 801c3a8:	9600      	str	r6, [sp, #0]
 801c3aa:	9316      	str	r3, [sp, #88]	@ 0x58
 801c3ac:	b29b      	uxth	r3, r3
 801c3ae:	9401      	str	r4, [sp, #4]
 801c3b0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801c3b4:	f7ff ff70 	bl	801c298 <uxr_common_create_entity>
 801c3b8:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 801c3bc:	bd70      	pop	{r4, r5, r6, pc}
 801c3be:	bf00      	nop

0801c3c0 <uxr_buffer_create_publisher_bin>:
 801c3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c3c2:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 801c3c6:	2603      	movs	r6, #3
 801c3c8:	4605      	mov	r5, r0
 801c3ca:	4618      	mov	r0, r3
 801c3cc:	9105      	str	r1, [sp, #20]
 801c3ce:	a992      	add	r1, sp, #584	@ 0x248
 801c3d0:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 801c3d4:	ac0e      	add	r4, sp, #56	@ 0x38
 801c3d6:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 801c3da:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801c3de:	f000 fa57 	bl	801c890 <uxr_object_id_to_raw>
 801c3e2:	2300      	movs	r3, #0
 801c3e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801c3e8:	a912      	add	r1, sp, #72	@ 0x48
 801c3ea:	a806      	add	r0, sp, #24
 801c3ec:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 801c3f0:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 801c3f4:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 801c3f8:	f7f8 f9e4 	bl	80147c4 <ucdr_init_buffer>
 801c3fc:	a993      	add	r1, sp, #588	@ 0x24c
 801c3fe:	a806      	add	r0, sp, #24
 801c400:	f002 fd86 	bl	801ef10 <uxr_serialize_OBJK_Publisher_Binary>
 801c404:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c406:	4628      	mov	r0, r5
 801c408:	9700      	str	r7, [sp, #0]
 801c40a:	9311      	str	r3, [sp, #68]	@ 0x44
 801c40c:	b29b      	uxth	r3, r3
 801c40e:	9401      	str	r4, [sp, #4]
 801c410:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801c414:	f7ff ff40 	bl	801c298 <uxr_common_create_entity>
 801c418:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 801c41c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c41e:	bf00      	nop

0801c420 <uxr_buffer_create_subscriber_bin>:
 801c420:	b570      	push	{r4, r5, r6, lr}
 801c422:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 801c426:	4605      	mov	r5, r0
 801c428:	4618      	mov	r0, r3
 801c42a:	9105      	str	r1, [sp, #20]
 801c42c:	a992      	add	r1, sp, #584	@ 0x248
 801c42e:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 801c432:	ac0e      	add	r4, sp, #56	@ 0x38
 801c434:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801c438:	2304      	movs	r3, #4
 801c43a:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 801c43e:	f000 fa27 	bl	801c890 <uxr_object_id_to_raw>
 801c442:	2300      	movs	r3, #0
 801c444:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801c448:	a912      	add	r1, sp, #72	@ 0x48
 801c44a:	a806      	add	r0, sp, #24
 801c44c:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 801c450:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 801c454:	2303      	movs	r3, #3
 801c456:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 801c45a:	f7f8 f9b3 	bl	80147c4 <ucdr_init_buffer>
 801c45e:	a993      	add	r1, sp, #588	@ 0x24c
 801c460:	a806      	add	r0, sp, #24
 801c462:	f002 fe05 	bl	801f070 <uxr_serialize_OBJK_Subscriber_Binary>
 801c466:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c468:	4628      	mov	r0, r5
 801c46a:	9600      	str	r6, [sp, #0]
 801c46c:	9311      	str	r3, [sp, #68]	@ 0x44
 801c46e:	b29b      	uxth	r3, r3
 801c470:	9401      	str	r4, [sp, #4]
 801c472:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801c476:	f7ff ff0f 	bl	801c298 <uxr_common_create_entity>
 801c47a:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 801c47e:	bd70      	pop	{r4, r5, r6, pc}

0801c480 <uxr_buffer_create_datawriter_bin>:
 801c480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c484:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801c488:	4606      	mov	r6, r0
 801c48a:	4618      	mov	r0, r3
 801c48c:	2703      	movs	r7, #3
 801c48e:	ac1d      	add	r4, sp, #116	@ 0x74
 801c490:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 801c494:	9105      	str	r1, [sp, #20]
 801c496:	a9a1      	add	r1, sp, #644	@ 0x284
 801c498:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 801c49c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801c4a0:	2305      	movs	r3, #5
 801c4a2:	7123      	strb	r3, [r4, #4]
 801c4a4:	f000 f9f4 	bl	801c890 <uxr_object_id_to_raw>
 801c4a8:	a90e      	add	r1, sp, #56	@ 0x38
 801c4aa:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 801c4ac:	7227      	strb	r7, [r4, #8]
 801c4ae:	f000 f9ef 	bl	801c890 <uxr_object_id_to_raw>
 801c4b2:	2300      	movs	r3, #0
 801c4b4:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 801c4b8:	3d00      	subs	r5, #0
 801c4ba:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 801c4be:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801c4c2:	bf18      	it	ne
 801c4c4:	2501      	movne	r5, #1
 801c4c6:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 801c4ca:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 801c4ce:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801c4d2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801c4d6:	2301      	movs	r3, #1
 801c4d8:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 801c4dc:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 801c4e0:	bb8a      	cbnz	r2, 801c546 <uxr_buffer_create_datawriter_bin+0xc6>
 801c4e2:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801c4e6:	f04f 0c13 	mov.w	ip, #19
 801c4ea:	250b      	movs	r5, #11
 801c4ec:	2221      	movs	r2, #33	@ 0x21
 801c4ee:	2111      	movs	r1, #17
 801c4f0:	2009      	movs	r0, #9
 801c4f2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801c4f6:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 801c4fa:	b923      	cbnz	r3, 801c506 <uxr_buffer_create_datawriter_bin+0x86>
 801c4fc:	4672      	mov	r2, lr
 801c4fe:	4661      	mov	r1, ip
 801c500:	4628      	mov	r0, r5
 801c502:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801c506:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 801c50a:	2b01      	cmp	r3, #1
 801c50c:	d025      	beq.n	801c55a <uxr_buffer_create_datawriter_bin+0xda>
 801c50e:	2b03      	cmp	r3, #3
 801c510:	d029      	beq.n	801c566 <uxr_buffer_create_datawriter_bin+0xe6>
 801c512:	b32b      	cbz	r3, 801c560 <uxr_buffer_create_datawriter_bin+0xe0>
 801c514:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801c518:	a921      	add	r1, sp, #132	@ 0x84
 801c51a:	a806      	add	r0, sp, #24
 801c51c:	f7f8 f952 	bl	80147c4 <ucdr_init_buffer>
 801c520:	a90e      	add	r1, sp, #56	@ 0x38
 801c522:	a806      	add	r0, sp, #24
 801c524:	f002 fe56 	bl	801f1d4 <uxr_serialize_OBJK_DataWriter_Binary>
 801c528:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c52a:	f8cd 8000 	str.w	r8, [sp]
 801c52e:	4630      	mov	r0, r6
 801c530:	9401      	str	r4, [sp, #4]
 801c532:	60e3      	str	r3, [r4, #12]
 801c534:	b29b      	uxth	r3, r3
 801c536:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801c53a:	f7ff fead 	bl	801c298 <uxr_common_create_entity>
 801c53e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801c542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c546:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801c54a:	f04f 0c12 	mov.w	ip, #18
 801c54e:	250a      	movs	r5, #10
 801c550:	2220      	movs	r2, #32
 801c552:	2110      	movs	r1, #16
 801c554:	2008      	movs	r0, #8
 801c556:	2702      	movs	r7, #2
 801c558:	e7cd      	b.n	801c4f6 <uxr_buffer_create_datawriter_bin+0x76>
 801c55a:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801c55e:	e7d9      	b.n	801c514 <uxr_buffer_create_datawriter_bin+0x94>
 801c560:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801c564:	e7d6      	b.n	801c514 <uxr_buffer_create_datawriter_bin+0x94>
 801c566:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801c56a:	e7d3      	b.n	801c514 <uxr_buffer_create_datawriter_bin+0x94>

0801c56c <uxr_buffer_create_datareader_bin>:
 801c56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c570:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801c574:	4606      	mov	r6, r0
 801c576:	4618      	mov	r0, r3
 801c578:	2703      	movs	r7, #3
 801c57a:	ac1f      	add	r4, sp, #124	@ 0x7c
 801c57c:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 801c580:	9105      	str	r1, [sp, #20]
 801c582:	a9a3      	add	r1, sp, #652	@ 0x28c
 801c584:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 801c588:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801c58c:	2306      	movs	r3, #6
 801c58e:	7123      	strb	r3, [r4, #4]
 801c590:	f000 f97e 	bl	801c890 <uxr_object_id_to_raw>
 801c594:	a90e      	add	r1, sp, #56	@ 0x38
 801c596:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 801c598:	7227      	strb	r7, [r4, #8]
 801c59a:	f000 f979 	bl	801c890 <uxr_object_id_to_raw>
 801c59e:	2300      	movs	r3, #0
 801c5a0:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 801c5a4:	3d00      	subs	r5, #0
 801c5a6:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 801c5aa:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 801c5ae:	bf18      	it	ne
 801c5b0:	2501      	movne	r5, #1
 801c5b2:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801c5b6:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 801c5ba:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 801c5be:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801c5c2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801c5c6:	2301      	movs	r3, #1
 801c5c8:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 801c5cc:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 801c5d0:	bb8a      	cbnz	r2, 801c636 <uxr_buffer_create_datareader_bin+0xca>
 801c5d2:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801c5d6:	f04f 0c13 	mov.w	ip, #19
 801c5da:	250b      	movs	r5, #11
 801c5dc:	2221      	movs	r2, #33	@ 0x21
 801c5de:	2111      	movs	r1, #17
 801c5e0:	2009      	movs	r0, #9
 801c5e2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801c5e6:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 801c5ea:	b923      	cbnz	r3, 801c5f6 <uxr_buffer_create_datareader_bin+0x8a>
 801c5ec:	4672      	mov	r2, lr
 801c5ee:	4661      	mov	r1, ip
 801c5f0:	4628      	mov	r0, r5
 801c5f2:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801c5f6:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 801c5fa:	2b01      	cmp	r3, #1
 801c5fc:	d025      	beq.n	801c64a <uxr_buffer_create_datareader_bin+0xde>
 801c5fe:	2b03      	cmp	r3, #3
 801c600:	d029      	beq.n	801c656 <uxr_buffer_create_datareader_bin+0xea>
 801c602:	b32b      	cbz	r3, 801c650 <uxr_buffer_create_datareader_bin+0xe4>
 801c604:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801c608:	a923      	add	r1, sp, #140	@ 0x8c
 801c60a:	a806      	add	r0, sp, #24
 801c60c:	f7f8 f8da 	bl	80147c4 <ucdr_init_buffer>
 801c610:	a90e      	add	r1, sp, #56	@ 0x38
 801c612:	a806      	add	r0, sp, #24
 801c614:	f002 fda2 	bl	801f15c <uxr_serialize_OBJK_DataReader_Binary>
 801c618:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c61a:	f8cd 8000 	str.w	r8, [sp]
 801c61e:	4630      	mov	r0, r6
 801c620:	9401      	str	r4, [sp, #4]
 801c622:	60e3      	str	r3, [r4, #12]
 801c624:	b29b      	uxth	r3, r3
 801c626:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801c62a:	f7ff fe35 	bl	801c298 <uxr_common_create_entity>
 801c62e:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801c632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c636:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801c63a:	f04f 0c12 	mov.w	ip, #18
 801c63e:	250a      	movs	r5, #10
 801c640:	2220      	movs	r2, #32
 801c642:	2110      	movs	r1, #16
 801c644:	2008      	movs	r0, #8
 801c646:	2702      	movs	r7, #2
 801c648:	e7cd      	b.n	801c5e6 <uxr_buffer_create_datareader_bin+0x7a>
 801c64a:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801c64e:	e7d9      	b.n	801c604 <uxr_buffer_create_datareader_bin+0x98>
 801c650:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801c654:	e7d6      	b.n	801c604 <uxr_buffer_create_datareader_bin+0x98>
 801c656:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801c65a:	e7d3      	b.n	801c604 <uxr_buffer_create_datareader_bin+0x98>

0801c65c <uxr_buffer_create_replier_bin>:
 801c65c:	b570      	push	{r4, r5, r6, lr}
 801c65e:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 801c662:	4605      	mov	r5, r0
 801c664:	4618      	mov	r0, r3
 801c666:	9105      	str	r1, [sp, #20]
 801c668:	a999      	add	r1, sp, #612	@ 0x264
 801c66a:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 801c66e:	ac15      	add	r4, sp, #84	@ 0x54
 801c670:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801c674:	2308      	movs	r3, #8
 801c676:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 801c67a:	f000 f909 	bl	801c890 <uxr_object_id_to_raw>
 801c67e:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 801c680:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801c684:	a919      	add	r1, sp, #100	@ 0x64
 801c686:	a80d      	add	r0, sp, #52	@ 0x34
 801c688:	9306      	str	r3, [sp, #24]
 801c68a:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 801c68c:	9307      	str	r3, [sp, #28]
 801c68e:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 801c690:	9308      	str	r3, [sp, #32]
 801c692:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 801c694:	930c      	str	r3, [sp, #48]	@ 0x30
 801c696:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801c698:	930a      	str	r3, [sp, #40]	@ 0x28
 801c69a:	2301      	movs	r3, #1
 801c69c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801c6a0:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801c6a4:	2303      	movs	r3, #3
 801c6a6:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 801c6aa:	f7f8 f88b 	bl	80147c4 <ucdr_init_buffer>
 801c6ae:	a906      	add	r1, sp, #24
 801c6b0:	a80d      	add	r0, sp, #52	@ 0x34
 801c6b2:	f002 fdbb 	bl	801f22c <uxr_serialize_OBJK_Replier_Binary>
 801c6b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c6b8:	4628      	mov	r0, r5
 801c6ba:	9600      	str	r6, [sp, #0]
 801c6bc:	9318      	str	r3, [sp, #96]	@ 0x60
 801c6be:	b29b      	uxth	r3, r3
 801c6c0:	9401      	str	r4, [sp, #4]
 801c6c2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801c6c6:	f7ff fde7 	bl	801c298 <uxr_common_create_entity>
 801c6ca:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 801c6ce:	bd70      	pop	{r4, r5, r6, pc}

0801c6d0 <get_custom_error>:
 801c6d0:	4b01      	ldr	r3, [pc, #4]	@ (801c6d8 <get_custom_error+0x8>)
 801c6d2:	7818      	ldrb	r0, [r3, #0]
 801c6d4:	4770      	bx	lr
 801c6d6:	bf00      	nop
 801c6d8:	2406958c 	.word	0x2406958c

0801c6dc <recv_custom_msg>:
 801c6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6e0:	4693      	mov	fp, r2
 801c6e2:	b089      	sub	sp, #36	@ 0x24
 801c6e4:	2200      	movs	r2, #0
 801c6e6:	4604      	mov	r4, r0
 801c6e8:	468a      	mov	sl, r1
 801c6ea:	9305      	str	r3, [sp, #20]
 801c6ec:	f88d 201e 	strb.w	r2, [sp, #30]
 801c6f0:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 801c6f4:	b322      	cbz	r2, 801c740 <recv_custom_msg+0x64>
 801c6f6:	f200 2902 	addw	r9, r0, #514	@ 0x202
 801c6fa:	f10d 081f 	add.w	r8, sp, #31
 801c6fe:	af05      	add	r7, sp, #20
 801c700:	f10d 061e 	add.w	r6, sp, #30
 801c704:	f44f 7500 	mov.w	r5, #512	@ 0x200
 801c708:	e002      	b.n	801c710 <recv_custom_msg+0x34>
 801c70a:	9b05      	ldr	r3, [sp, #20]
 801c70c:	2b00      	cmp	r3, #0
 801c70e:	dd0f      	ble.n	801c730 <recv_custom_msg+0x54>
 801c710:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 801c714:	4623      	mov	r3, r4
 801c716:	4622      	mov	r2, r4
 801c718:	4648      	mov	r0, r9
 801c71a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801c71e:	e9cd 5600 	strd	r5, r6, [sp]
 801c722:	f001 fc6f 	bl	801e004 <uxr_read_framed_msg>
 801c726:	2800      	cmp	r0, #0
 801c728:	d0ef      	beq.n	801c70a <recv_custom_msg+0x2e>
 801c72a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801c72e:	b1b3      	cbz	r3, 801c75e <recv_custom_msg+0x82>
 801c730:	4b0f      	ldr	r3, [pc, #60]	@ (801c770 <recv_custom_msg+0x94>)
 801c732:	2000      	movs	r0, #0
 801c734:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801c738:	701a      	strb	r2, [r3, #0]
 801c73a:	b009      	add	sp, #36	@ 0x24
 801c73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c740:	f10d 021f 	add.w	r2, sp, #31
 801c744:	4601      	mov	r1, r0
 801c746:	9200      	str	r2, [sp, #0]
 801c748:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801c74c:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801c750:	47a8      	blx	r5
 801c752:	2800      	cmp	r0, #0
 801c754:	d0ec      	beq.n	801c730 <recv_custom_msg+0x54>
 801c756:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	d1e8      	bne.n	801c730 <recv_custom_msg+0x54>
 801c75e:	f8cb 0000 	str.w	r0, [fp]
 801c762:	2001      	movs	r0, #1
 801c764:	f8ca 4000 	str.w	r4, [sl]
 801c768:	b009      	add	sp, #36	@ 0x24
 801c76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c76e:	bf00      	nop
 801c770:	2406958c 	.word	0x2406958c

0801c774 <send_custom_msg>:
 801c774:	b530      	push	{r4, r5, lr}
 801c776:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 801c77a:	b087      	sub	sp, #28
 801c77c:	4614      	mov	r4, r2
 801c77e:	b995      	cbnz	r5, 801c7a6 <send_custom_msg+0x32>
 801c780:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 801c784:	f10d 0317 	add.w	r3, sp, #23
 801c788:	47a8      	blx	r5
 801c78a:	1e03      	subs	r3, r0, #0
 801c78c:	bf18      	it	ne
 801c78e:	2301      	movne	r3, #1
 801c790:	42a0      	cmp	r0, r4
 801c792:	bf18      	it	ne
 801c794:	2300      	movne	r3, #0
 801c796:	b91b      	cbnz	r3, 801c7a0 <send_custom_msg+0x2c>
 801c798:	4a0a      	ldr	r2, [pc, #40]	@ (801c7c4 <send_custom_msg+0x50>)
 801c79a:	f89d 1017 	ldrb.w	r1, [sp, #23]
 801c79e:	7011      	strb	r1, [r2, #0]
 801c7a0:	4618      	mov	r0, r3
 801c7a2:	b007      	add	sp, #28
 801c7a4:	bd30      	pop	{r4, r5, pc}
 801c7a6:	460b      	mov	r3, r1
 801c7a8:	2200      	movs	r2, #0
 801c7aa:	f10d 0117 	add.w	r1, sp, #23
 801c7ae:	9400      	str	r4, [sp, #0]
 801c7b0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801c7b4:	4602      	mov	r2, r0
 801c7b6:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 801c7ba:	f200 2002 	addw	r0, r0, #514	@ 0x202
 801c7be:	f001 fa43 	bl	801dc48 <uxr_write_framed_msg>
 801c7c2:	e7e2      	b.n	801c78a <send_custom_msg+0x16>
 801c7c4:	2406958c 	.word	0x2406958c

0801c7c8 <uxr_set_custom_transport_callbacks>:
 801c7c8:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 801c7cc:	9901      	ldr	r1, [sp, #4]
 801c7ce:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 801c7d2:	9b00      	ldr	r3, [sp, #0]
 801c7d4:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 801c7d8:	4770      	bx	lr
 801c7da:	bf00      	nop

0801c7dc <uxr_init_custom_transport>:
 801c7dc:	b538      	push	{r3, r4, r5, lr}
 801c7de:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801c7e2:	b303      	cbz	r3, 801c826 <uxr_init_custom_transport+0x4a>
 801c7e4:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 801c7e8:	4604      	mov	r4, r0
 801c7ea:	b1e2      	cbz	r2, 801c826 <uxr_init_custom_transport+0x4a>
 801c7ec:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 801c7f0:	b1ca      	cbz	r2, 801c826 <uxr_init_custom_transport+0x4a>
 801c7f2:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801c7f6:	b1b2      	cbz	r2, 801c826 <uxr_init_custom_transport+0x4a>
 801c7f8:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 801c7fc:	4798      	blx	r3
 801c7fe:	4605      	mov	r5, r0
 801c800:	b188      	cbz	r0, 801c826 <uxr_init_custom_transport+0x4a>
 801c802:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801c806:	b98b      	cbnz	r3, 801c82c <uxr_init_custom_transport+0x50>
 801c808:	4b0b      	ldr	r3, [pc, #44]	@ (801c838 <uxr_init_custom_transport+0x5c>)
 801c80a:	4628      	mov	r0, r5
 801c80c:	490b      	ldr	r1, [pc, #44]	@ (801c83c <uxr_init_custom_transport+0x60>)
 801c80e:	4a0c      	ldr	r2, [pc, #48]	@ (801c840 <uxr_init_custom_transport+0x64>)
 801c810:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 801c814:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801c818:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 801c81c:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801c820:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 801c824:	bd38      	pop	{r3, r4, r5, pc}
 801c826:	2500      	movs	r5, #0
 801c828:	4628      	mov	r0, r5
 801c82a:	bd38      	pop	{r3, r4, r5, pc}
 801c82c:	2100      	movs	r1, #0
 801c82e:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801c832:	f001 fa03 	bl	801dc3c <uxr_init_framing_io>
 801c836:	e7e7      	b.n	801c808 <uxr_init_custom_transport+0x2c>
 801c838:	0801c6dd 	.word	0x0801c6dd
 801c83c:	0801c775 	.word	0x0801c775
 801c840:	0801c6d1 	.word	0x0801c6d1

0801c844 <uxr_close_custom_transport>:
 801c844:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 801c848:	4718      	bx	r3
 801c84a:	bf00      	nop

0801c84c <uxr_object_id>:
 801c84c:	b082      	sub	sp, #8
 801c84e:	2300      	movs	r3, #0
 801c850:	f88d 1006 	strb.w	r1, [sp, #6]
 801c854:	f360 030f 	bfi	r3, r0, #0, #16
 801c858:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801c85c:	f362 431f 	bfi	r3, r2, #16, #16
 801c860:	4618      	mov	r0, r3
 801c862:	b002      	add	sp, #8
 801c864:	4770      	bx	lr
 801c866:	bf00      	nop

0801c868 <uxr_object_id_from_raw>:
 801c868:	7843      	ldrb	r3, [r0, #1]
 801c86a:	b082      	sub	sp, #8
 801c86c:	7801      	ldrb	r1, [r0, #0]
 801c86e:	2000      	movs	r0, #0
 801c870:	091a      	lsrs	r2, r3, #4
 801c872:	f003 030f 	and.w	r3, r3, #15
 801c876:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 801c87a:	f88d 3006 	strb.w	r3, [sp, #6]
 801c87e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801c882:	f362 000f 	bfi	r0, r2, #0, #16
 801c886:	f363 401f 	bfi	r0, r3, #16, #16
 801c88a:	b002      	add	sp, #8
 801c88c:	4770      	bx	lr
 801c88e:	bf00      	nop

0801c890 <uxr_object_id_to_raw>:
 801c890:	4602      	mov	r2, r0
 801c892:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801c896:	b082      	sub	sp, #8
 801c898:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 801c89c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 801c8a0:	f881 c000 	strb.w	ip, [r1]
 801c8a4:	7048      	strb	r0, [r1, #1]
 801c8a6:	b002      	add	sp, #8
 801c8a8:	4770      	bx	lr
 801c8aa:	bf00      	nop

0801c8ac <uxr_buffer_request_data>:
 801c8ac:	b530      	push	{r4, r5, lr}
 801c8ae:	b095      	sub	sp, #84	@ 0x54
 801c8b0:	4604      	mov	r4, r0
 801c8b2:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 801c8b4:	9303      	str	r3, [sp, #12]
 801c8b6:	2d00      	cmp	r5, #0
 801c8b8:	f88d 301c 	strb.w	r3, [sp, #28]
 801c8bc:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801c8c0:	f04f 0200 	mov.w	r2, #0
 801c8c4:	bf14      	ite	ne
 801c8c6:	2101      	movne	r1, #1
 801c8c8:	4611      	moveq	r1, r2
 801c8ca:	f88d 201d 	strb.w	r2, [sp, #29]
 801c8ce:	f88d 201e 	strb.w	r2, [sp, #30]
 801c8d2:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801c8d6:	d021      	beq.n	801c91c <uxr_buffer_request_data+0x70>
 801c8d8:	686b      	ldr	r3, [r5, #4]
 801c8da:	2210      	movs	r2, #16
 801c8dc:	6829      	ldr	r1, [r5, #0]
 801c8de:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801c8e2:	f8cd 1026 	str.w	r1, [sp, #38]	@ 0x26
 801c8e6:	2308      	movs	r3, #8
 801c8e8:	2100      	movs	r1, #0
 801c8ea:	4620      	mov	r0, r4
 801c8ec:	e9cd 3100 	strd	r3, r1, [sp]
 801c8f0:	ab0c      	add	r3, sp, #48	@ 0x30
 801c8f2:	9905      	ldr	r1, [sp, #20]
 801c8f4:	f001 f834 	bl	801d960 <uxr_prepare_stream_to_write_submessage>
 801c8f8:	b918      	cbnz	r0, 801c902 <uxr_buffer_request_data+0x56>
 801c8fa:	4604      	mov	r4, r0
 801c8fc:	4620      	mov	r0, r4
 801c8fe:	b015      	add	sp, #84	@ 0x54
 801c900:	bd30      	pop	{r4, r5, pc}
 801c902:	9904      	ldr	r1, [sp, #16]
 801c904:	aa06      	add	r2, sp, #24
 801c906:	4620      	mov	r0, r4
 801c908:	f001 f966 	bl	801dbd8 <uxr_init_base_object_request>
 801c90c:	4604      	mov	r4, r0
 801c90e:	a906      	add	r1, sp, #24
 801c910:	a80c      	add	r0, sp, #48	@ 0x30
 801c912:	f002 ffc1 	bl	801f898 <uxr_serialize_READ_DATA_Payload>
 801c916:	4620      	mov	r0, r4
 801c918:	b015      	add	sp, #84	@ 0x54
 801c91a:	bd30      	pop	{r4, r5, pc}
 801c91c:	2208      	movs	r2, #8
 801c91e:	e7e2      	b.n	801c8e6 <uxr_buffer_request_data+0x3a>

0801c920 <uxr_buffer_cancel_data>:
 801c920:	b510      	push	{r4, lr}
 801c922:	2300      	movs	r3, #0
 801c924:	b094      	sub	sp, #80	@ 0x50
 801c926:	4604      	mov	r4, r0
 801c928:	9205      	str	r2, [sp, #20]
 801c92a:	9301      	str	r3, [sp, #4]
 801c92c:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c930:	f88d 301e 	strb.w	r3, [sp, #30]
 801c934:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801c938:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801c93c:	2308      	movs	r3, #8
 801c93e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801c942:	2201      	movs	r2, #1
 801c944:	9300      	str	r3, [sp, #0]
 801c946:	ab0c      	add	r3, sp, #48	@ 0x30
 801c948:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 801c94c:	2210      	movs	r2, #16
 801c94e:	f001 f807 	bl	801d960 <uxr_prepare_stream_to_write_submessage>
 801c952:	b918      	cbnz	r0, 801c95c <uxr_buffer_cancel_data+0x3c>
 801c954:	4604      	mov	r4, r0
 801c956:	4620      	mov	r0, r4
 801c958:	b014      	add	sp, #80	@ 0x50
 801c95a:	bd10      	pop	{r4, pc}
 801c95c:	9905      	ldr	r1, [sp, #20]
 801c95e:	aa06      	add	r2, sp, #24
 801c960:	4620      	mov	r0, r4
 801c962:	f001 f939 	bl	801dbd8 <uxr_init_base_object_request>
 801c966:	4604      	mov	r4, r0
 801c968:	a906      	add	r1, sp, #24
 801c96a:	a80c      	add	r0, sp, #48	@ 0x30
 801c96c:	f002 ff94 	bl	801f898 <uxr_serialize_READ_DATA_Payload>
 801c970:	4620      	mov	r0, r4
 801c972:	b014      	add	sp, #80	@ 0x50
 801c974:	bd10      	pop	{r4, pc}
 801c976:	bf00      	nop

0801c978 <read_submessage_format>:
 801c978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c97c:	b095      	sub	sp, #84	@ 0x54
 801c97e:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 801c982:	b113      	cbz	r3, 801c98a <read_submessage_format+0x12>
 801c984:	b015      	add	sp, #84	@ 0x54
 801c986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c98a:	4606      	mov	r6, r0
 801c98c:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801c98e:	460c      	mov	r4, r1
 801c990:	4615      	mov	r5, r2
 801c992:	9004      	str	r0, [sp, #16]
 801c994:	4699      	mov	r9, r3
 801c996:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801c998:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 801c99c:	9005      	str	r0, [sp, #20]
 801c99e:	a80c      	add	r0, sp, #48	@ 0x30
 801c9a0:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801c9a4:	1a52      	subs	r2, r2, r1
 801c9a6:	f7f7 ff0d 	bl	80147c4 <ucdr_init_buffer>
 801c9aa:	a80c      	add	r0, sp, #48	@ 0x30
 801c9ac:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801c9b0:	f7f7 fedc 	bl	801476c <ucdr_set_on_full_buffer_callback>
 801c9b4:	69e2      	ldr	r2, [r4, #28]
 801c9b6:	b19a      	cbz	r2, 801c9e0 <read_submessage_format+0x68>
 801c9b8:	f1b8 0f07 	cmp.w	r8, #7
 801c9bc:	f882 9014 	strb.w	r9, [r2, #20]
 801c9c0:	d040      	beq.n	801ca44 <read_submessage_format+0xcc>
 801c9c2:	f1b8 0f08 	cmp.w	r8, #8
 801c9c6:	d02e      	beq.n	801ca26 <read_submessage_format+0xae>
 801c9c8:	f1b8 0f06 	cmp.w	r8, #6
 801c9cc:	d011      	beq.n	801c9f2 <read_submessage_format+0x7a>
 801c9ce:	2301      	movs	r3, #1
 801c9d0:	7513      	strb	r3, [r2, #20]
 801c9d2:	4629      	mov	r1, r5
 801c9d4:	4620      	mov	r0, r4
 801c9d6:	f7f7 ff49 	bl	801486c <ucdr_advance_buffer>
 801c9da:	b015      	add	sp, #84	@ 0x54
 801c9dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c9e0:	f1b8 0f07 	cmp.w	r8, #7
 801c9e4:	d02e      	beq.n	801ca44 <read_submessage_format+0xcc>
 801c9e6:	f1b8 0f08 	cmp.w	r8, #8
 801c9ea:	d01c      	beq.n	801ca26 <read_submessage_format+0xae>
 801c9ec:	f1b8 0f06 	cmp.w	r8, #6
 801c9f0:	d1ef      	bne.n	801c9d2 <read_submessage_format+0x5a>
 801c9f2:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 801c9f6:	f1b8 0f00 	cmp.w	r8, #0
 801c9fa:	d011      	beq.n	801ca20 <read_submessage_format+0xa8>
 801c9fc:	ab0c      	add	r3, sp, #48	@ 0x30
 801c9fe:	9501      	str	r5, [sp, #4]
 801ca00:	463a      	mov	r2, r7
 801ca02:	4630      	mov	r0, r6
 801ca04:	9300      	str	r3, [sp, #0]
 801ca06:	2306      	movs	r3, #6
 801ca08:	f88d 3016 	strb.w	r3, [sp, #22]
 801ca0c:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 801ca10:	9302      	str	r3, [sp, #8]
 801ca12:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801ca16:	47c0      	blx	r8
 801ca18:	2301      	movs	r3, #1
 801ca1a:	69e2      	ldr	r2, [r4, #28]
 801ca1c:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 801ca20:	2a00      	cmp	r2, #0
 801ca22:	d1d4      	bne.n	801c9ce <read_submessage_format+0x56>
 801ca24:	e7d5      	b.n	801c9d2 <read_submessage_format+0x5a>
 801ca26:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 801ca2a:	2b00      	cmp	r3, #0
 801ca2c:	d0f8      	beq.n	801ca20 <read_submessage_format+0xa8>
 801ca2e:	a80c      	add	r0, sp, #48	@ 0x30
 801ca30:	a906      	add	r1, sp, #24
 801ca32:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801ca36:	f002 fffb 	bl	801fa30 <uxr_deserialize_SampleIdentity>
 801ca3a:	b9a0      	cbnz	r0, 801ca66 <read_submessage_format+0xee>
 801ca3c:	69e2      	ldr	r2, [r4, #28]
 801ca3e:	2a00      	cmp	r2, #0
 801ca40:	d1c5      	bne.n	801c9ce <read_submessage_format+0x56>
 801ca42:	e7c6      	b.n	801c9d2 <read_submessage_format+0x5a>
 801ca44:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 801ca48:	b13b      	cbz	r3, 801ca5a <read_submessage_format+0xe2>
 801ca4a:	a906      	add	r1, sp, #24
 801ca4c:	a80c      	add	r0, sp, #48	@ 0x30
 801ca4e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801ca52:	f002 fcc1 	bl	801f3d8 <uxr_deserialize_BaseObjectRequest>
 801ca56:	bb60      	cbnz	r0, 801cab2 <read_submessage_format+0x13a>
 801ca58:	69e2      	ldr	r2, [r4, #28]
 801ca5a:	68a3      	ldr	r3, [r4, #8]
 801ca5c:	442b      	add	r3, r5
 801ca5e:	60a3      	str	r3, [r4, #8]
 801ca60:	2a00      	cmp	r2, #0
 801ca62:	d1b4      	bne.n	801c9ce <read_submessage_format+0x56>
 801ca64:	e7b5      	b.n	801c9d2 <read_submessage_format+0x5a>
 801ca66:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ca68:	a80c      	add	r0, sp, #48	@ 0x30
 801ca6a:	eba8 0803 	sub.w	r8, r8, r3
 801ca6e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801ca72:	44a8      	add	r8, r5
 801ca74:	1a52      	subs	r2, r2, r1
 801ca76:	f7f7 fea5 	bl	80147c4 <ucdr_init_buffer>
 801ca7a:	a80c      	add	r0, sp, #48	@ 0x30
 801ca7c:	fa1f f888 	uxth.w	r8, r8
 801ca80:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801ca84:	f7f7 fe72 	bl	801476c <ucdr_set_on_full_buffer_callback>
 801ca88:	ab0c      	add	r3, sp, #48	@ 0x30
 801ca8a:	2108      	movs	r1, #8
 801ca8c:	f8cd 8004 	str.w	r8, [sp, #4]
 801ca90:	9300      	str	r3, [sp, #0]
 801ca92:	463a      	mov	r2, r7
 801ca94:	f88d 1016 	strb.w	r1, [sp, #22]
 801ca98:	ab06      	add	r3, sp, #24
 801ca9a:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 801ca9e:	4630      	mov	r0, r6
 801caa0:	9102      	str	r1, [sp, #8]
 801caa2:	9905      	ldr	r1, [sp, #20]
 801caa4:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 801caa8:	47b8      	blx	r7
 801caaa:	2301      	movs	r3, #1
 801caac:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 801cab0:	e7c4      	b.n	801ca3c <read_submessage_format+0xc4>
 801cab2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801cab6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cab8:	a80c      	add	r0, sp, #48	@ 0x30
 801caba:	1a52      	subs	r2, r2, r1
 801cabc:	eba8 0803 	sub.w	r8, r8, r3
 801cac0:	f7f7 fe80 	bl	80147c4 <ucdr_init_buffer>
 801cac4:	a80c      	add	r0, sp, #48	@ 0x30
 801cac6:	44a8      	add	r8, r5
 801cac8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801cacc:	f7f7 fe4e 	bl	801476c <ucdr_set_on_full_buffer_callback>
 801cad0:	ab0c      	add	r3, sp, #48	@ 0x30
 801cad2:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801cad6:	fa1f f888 	uxth.w	r8, r8
 801cada:	9300      	str	r3, [sp, #0]
 801cadc:	463a      	mov	r2, r7
 801cade:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801cae2:	4630      	mov	r0, r6
 801cae4:	f8cd 8004 	str.w	r8, [sp, #4]
 801cae8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801caec:	2107      	movs	r1, #7
 801caee:	f88d 1016 	strb.w	r1, [sp, #22]
 801caf2:	b29b      	uxth	r3, r3
 801caf4:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 801caf8:	9102      	str	r1, [sp, #8]
 801cafa:	9905      	ldr	r1, [sp, #20]
 801cafc:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 801cb00:	47b8      	blx	r7
 801cb02:	2301      	movs	r3, #1
 801cb04:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 801cb08:	e7a6      	b.n	801ca58 <read_submessage_format+0xe0>
 801cb0a:	bf00      	nop

0801cb0c <on_get_fragmentation_info>:
 801cb0c:	b500      	push	{lr}
 801cb0e:	b08b      	sub	sp, #44	@ 0x2c
 801cb10:	4601      	mov	r1, r0
 801cb12:	2204      	movs	r2, #4
 801cb14:	a802      	add	r0, sp, #8
 801cb16:	f7f7 fe55 	bl	80147c4 <ucdr_init_buffer>
 801cb1a:	f10d 0305 	add.w	r3, sp, #5
 801cb1e:	f10d 0206 	add.w	r2, sp, #6
 801cb22:	a901      	add	r1, sp, #4
 801cb24:	a802      	add	r0, sp, #8
 801cb26:	f001 fe5d 	bl	801e7e4 <uxr_read_submessage_header>
 801cb2a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801cb2e:	2b0d      	cmp	r3, #13
 801cb30:	d003      	beq.n	801cb3a <on_get_fragmentation_info+0x2e>
 801cb32:	2000      	movs	r0, #0
 801cb34:	b00b      	add	sp, #44	@ 0x2c
 801cb36:	f85d fb04 	ldr.w	pc, [sp], #4
 801cb3a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801cb3e:	f013 0f02 	tst.w	r3, #2
 801cb42:	bf14      	ite	ne
 801cb44:	2002      	movne	r0, #2
 801cb46:	2001      	moveq	r0, #1
 801cb48:	b00b      	add	sp, #44	@ 0x2c
 801cb4a:	f85d fb04 	ldr.w	pc, [sp], #4
 801cb4e:	bf00      	nop

0801cb50 <read_submessage_get_info>:
 801cb50:	b570      	push	{r4, r5, r6, lr}
 801cb52:	2500      	movs	r5, #0
 801cb54:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 801cb58:	460e      	mov	r6, r1
 801cb5a:	4604      	mov	r4, r0
 801cb5c:	f44f 7224 	mov.w	r2, #656	@ 0x290
 801cb60:	4629      	mov	r1, r5
 801cb62:	a810      	add	r0, sp, #64	@ 0x40
 801cb64:	9503      	str	r5, [sp, #12]
 801cb66:	9504      	str	r5, [sp, #16]
 801cb68:	f004 ffb8 	bl	8021adc <memset>
 801cb6c:	a903      	add	r1, sp, #12
 801cb6e:	4630      	mov	r0, r6
 801cb70:	f002 fdd2 	bl	801f718 <uxr_deserialize_GET_INFO_Payload>
 801cb74:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801cb78:	4620      	mov	r0, r4
 801cb7a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801cb7e:	f001 f823 	bl	801dbc8 <uxr_session_header_offset>
 801cb82:	462b      	mov	r3, r5
 801cb84:	220c      	movs	r2, #12
 801cb86:	a905      	add	r1, sp, #20
 801cb88:	9000      	str	r0, [sp, #0]
 801cb8a:	a808      	add	r0, sp, #32
 801cb8c:	f7f7 fe08 	bl	80147a0 <ucdr_init_buffer_origin_offset>
 801cb90:	a910      	add	r1, sp, #64	@ 0x40
 801cb92:	a808      	add	r0, sp, #32
 801cb94:	f002 fe34 	bl	801f800 <uxr_serialize_INFO_Payload>
 801cb98:	9b08      	ldr	r3, [sp, #32]
 801cb9a:	462a      	mov	r2, r5
 801cb9c:	4629      	mov	r1, r5
 801cb9e:	4620      	mov	r0, r4
 801cba0:	f000 ffbe 	bl	801db20 <uxr_stamp_session_header>
 801cba4:	a808      	add	r0, sp, #32
 801cba6:	f7f7 fe3b 	bl	8014820 <ucdr_buffer_length>
 801cbaa:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801cbac:	4602      	mov	r2, r0
 801cbae:	a905      	add	r1, sp, #20
 801cbb0:	e9d3 0400 	ldrd	r0, r4, [r3]
 801cbb4:	47a0      	blx	r4
 801cbb6:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801cbba:	bd70      	pop	{r4, r5, r6, pc}

0801cbbc <write_submessage_acknack.isra.0>:
 801cbbc:	b570      	push	{r4, r5, r6, lr}
 801cbbe:	b092      	sub	sp, #72	@ 0x48
 801cbc0:	4605      	mov	r5, r0
 801cbc2:	460e      	mov	r6, r1
 801cbc4:	4614      	mov	r4, r2
 801cbc6:	f000 ffff 	bl	801dbc8 <uxr_session_header_offset>
 801cbca:	a905      	add	r1, sp, #20
 801cbcc:	9000      	str	r0, [sp, #0]
 801cbce:	2300      	movs	r3, #0
 801cbd0:	a80a      	add	r0, sp, #40	@ 0x28
 801cbd2:	2211      	movs	r2, #17
 801cbd4:	f7f7 fde4 	bl	80147a0 <ucdr_init_buffer_origin_offset>
 801cbd8:	2218      	movs	r2, #24
 801cbda:	2300      	movs	r3, #0
 801cbdc:	210a      	movs	r1, #10
 801cbde:	fb02 5404 	mla	r4, r2, r4, r5
 801cbe2:	a80a      	add	r0, sp, #40	@ 0x28
 801cbe4:	2205      	movs	r2, #5
 801cbe6:	3450      	adds	r4, #80	@ 0x50
 801cbe8:	f001 fde2 	bl	801e7b0 <uxr_buffer_submessage_header>
 801cbec:	a903      	add	r1, sp, #12
 801cbee:	4620      	mov	r0, r4
 801cbf0:	f003 feec 	bl	80209cc <uxr_compute_acknack>
 801cbf4:	ba40      	rev16	r0, r0
 801cbf6:	a903      	add	r1, sp, #12
 801cbf8:	f88d 6010 	strb.w	r6, [sp, #16]
 801cbfc:	f8ad 000e 	strh.w	r0, [sp, #14]
 801cc00:	a80a      	add	r0, sp, #40	@ 0x28
 801cc02:	f002 fe6f 	bl	801f8e4 <uxr_serialize_ACKNACK_Payload>
 801cc06:	2200      	movs	r2, #0
 801cc08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cc0a:	4628      	mov	r0, r5
 801cc0c:	4611      	mov	r1, r2
 801cc0e:	f000 ff87 	bl	801db20 <uxr_stamp_session_header>
 801cc12:	a80a      	add	r0, sp, #40	@ 0x28
 801cc14:	f7f7 fe04 	bl	8014820 <ucdr_buffer_length>
 801cc18:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801cc1a:	4602      	mov	r2, r0
 801cc1c:	a905      	add	r1, sp, #20
 801cc1e:	e9d3 0400 	ldrd	r0, r4, [r3]
 801cc22:	47a0      	blx	r4
 801cc24:	b012      	add	sp, #72	@ 0x48
 801cc26:	bd70      	pop	{r4, r5, r6, pc}

0801cc28 <uxr_init_session>:
 801cc28:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801cc60 <uxr_init_session+0x38>
 801cc2c:	2300      	movs	r3, #0
 801cc2e:	b510      	push	{r4, lr}
 801cc30:	4604      	mov	r4, r0
 801cc32:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 801cc36:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 801cc3a:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 801cc3e:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 801cc42:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 801cc46:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 801cc4a:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 801cc4e:	2181      	movs	r1, #129	@ 0x81
 801cc50:	f000 feca 	bl	801d9e8 <uxr_init_session_info>
 801cc54:	f104 0008 	add.w	r0, r4, #8
 801cc58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc5c:	f001 bcc4 	b.w	801e5e8 <uxr_init_stream_storage>
	...

0801cc68 <uxr_set_status_callback>:
 801cc68:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 801cc6c:	4770      	bx	lr
 801cc6e:	bf00      	nop

0801cc70 <uxr_set_topic_callback>:
 801cc70:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 801cc74:	4770      	bx	lr
 801cc76:	bf00      	nop

0801cc78 <uxr_set_request_callback>:
 801cc78:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 801cc7c:	4770      	bx	lr
 801cc7e:	bf00      	nop

0801cc80 <uxr_set_reply_callback>:
 801cc80:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 801cc84:	4770      	bx	lr
 801cc86:	bf00      	nop

0801cc88 <uxr_create_output_best_effort_stream>:
 801cc88:	b510      	push	{r4, lr}
 801cc8a:	4604      	mov	r4, r0
 801cc8c:	b084      	sub	sp, #16
 801cc8e:	e9cd 2100 	strd	r2, r1, [sp]
 801cc92:	f000 ff99 	bl	801dbc8 <uxr_session_header_offset>
 801cc96:	4603      	mov	r3, r0
 801cc98:	f104 0008 	add.w	r0, r4, #8
 801cc9c:	e9dd 2100 	ldrd	r2, r1, [sp]
 801cca0:	b004      	add	sp, #16
 801cca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cca6:	f001 bce5 	b.w	801e674 <uxr_add_output_best_effort_buffer>
 801ccaa:	bf00      	nop

0801ccac <uxr_create_output_reliable_stream>:
 801ccac:	b530      	push	{r4, r5, lr}
 801ccae:	b089      	sub	sp, #36	@ 0x24
 801ccb0:	4604      	mov	r4, r0
 801ccb2:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801ccb6:	9303      	str	r3, [sp, #12]
 801ccb8:	f000 ff86 	bl	801dbc8 <uxr_session_header_offset>
 801ccbc:	4605      	mov	r5, r0
 801ccbe:	9905      	ldr	r1, [sp, #20]
 801ccc0:	f104 0008 	add.w	r0, r4, #8
 801ccc4:	9500      	str	r5, [sp, #0]
 801ccc6:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 801ccca:	f001 fce7 	bl	801e69c <uxr_add_output_reliable_buffer>
 801ccce:	2200      	movs	r2, #0
 801ccd0:	fa5f fc80 	uxtb.w	ip, r0
 801ccd4:	f3c0 2407 	ubfx	r4, r0, #8, #8
 801ccd8:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801ccdc:	0e03      	lsrs	r3, r0, #24
 801ccde:	f36c 0207 	bfi	r2, ip, #0, #8
 801cce2:	f364 220f 	bfi	r2, r4, #8, #8
 801cce6:	f361 4217 	bfi	r2, r1, #16, #8
 801ccea:	f363 621f 	bfi	r2, r3, #24, #8
 801ccee:	4610      	mov	r0, r2
 801ccf0:	b009      	add	sp, #36	@ 0x24
 801ccf2:	bd30      	pop	{r4, r5, pc}

0801ccf4 <uxr_create_input_best_effort_stream>:
 801ccf4:	b082      	sub	sp, #8
 801ccf6:	3008      	adds	r0, #8
 801ccf8:	b002      	add	sp, #8
 801ccfa:	f001 bce9 	b.w	801e6d0 <uxr_add_input_best_effort_buffer>
 801ccfe:	bf00      	nop

0801cd00 <uxr_create_input_reliable_stream>:
 801cd00:	b510      	push	{r4, lr}
 801cd02:	4c0c      	ldr	r4, [pc, #48]	@ (801cd34 <uxr_create_input_reliable_stream+0x34>)
 801cd04:	b084      	sub	sp, #16
 801cd06:	3008      	adds	r0, #8
 801cd08:	9400      	str	r4, [sp, #0]
 801cd0a:	f001 fcf7 	bl	801e6fc <uxr_add_input_reliable_buffer>
 801cd0e:	2200      	movs	r2, #0
 801cd10:	fa5f fe80 	uxtb.w	lr, r0
 801cd14:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 801cd18:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801cd1c:	0e03      	lsrs	r3, r0, #24
 801cd1e:	f36e 0207 	bfi	r2, lr, #0, #8
 801cd22:	f36c 220f 	bfi	r2, ip, #8, #8
 801cd26:	f361 4217 	bfi	r2, r1, #16, #8
 801cd2a:	f363 621f 	bfi	r2, r3, #24, #8
 801cd2e:	4610      	mov	r0, r2
 801cd30:	b004      	add	sp, #16
 801cd32:	bd10      	pop	{r4, pc}
 801cd34:	0801cb0d 	.word	0x0801cb0d

0801cd38 <uxr_epoch_nanos>:
 801cd38:	b510      	push	{r4, lr}
 801cd3a:	4604      	mov	r4, r0
 801cd3c:	f001 fd9a 	bl	801e874 <uxr_nanos>
 801cd40:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 801cd44:	1ac0      	subs	r0, r0, r3
 801cd46:	eb61 0102 	sbc.w	r1, r1, r2
 801cd4a:	bd10      	pop	{r4, pc}

0801cd4c <uxr_flash_output_streams>:
 801cd4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cd50:	7e03      	ldrb	r3, [r0, #24]
 801cd52:	b084      	sub	sp, #16
 801cd54:	4604      	mov	r4, r0
 801cd56:	b1fb      	cbz	r3, 801cd98 <uxr_flash_output_streams+0x4c>
 801cd58:	f04f 0900 	mov.w	r9, #0
 801cd5c:	f10d 0802 	add.w	r8, sp, #2
 801cd60:	af03      	add	r7, sp, #12
 801cd62:	ae02      	add	r6, sp, #8
 801cd64:	4648      	mov	r0, r9
 801cd66:	2201      	movs	r2, #1
 801cd68:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801cd6c:	4611      	mov	r1, r2
 801cd6e:	3508      	adds	r5, #8
 801cd70:	f001 fbe0 	bl	801e534 <uxr_stream_id>
 801cd74:	4684      	mov	ip, r0
 801cd76:	4643      	mov	r3, r8
 801cd78:	463a      	mov	r2, r7
 801cd7a:	4631      	mov	r1, r6
 801cd7c:	4628      	mov	r0, r5
 801cd7e:	f8cd c004 	str.w	ip, [sp, #4]
 801cd82:	f003 fead 	bl	8020ae0 <uxr_prepare_best_effort_buffer_to_send>
 801cd86:	2800      	cmp	r0, #0
 801cd88:	d13d      	bne.n	801ce06 <uxr_flash_output_streams+0xba>
 801cd8a:	f109 0901 	add.w	r9, r9, #1
 801cd8e:	7e23      	ldrb	r3, [r4, #24]
 801cd90:	fa5f f089 	uxtb.w	r0, r9
 801cd94:	4283      	cmp	r3, r0
 801cd96:	d8e6      	bhi.n	801cd66 <uxr_flash_output_streams+0x1a>
 801cd98:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801cd9c:	b383      	cbz	r3, 801ce00 <uxr_flash_output_streams+0xb4>
 801cd9e:	f04f 0900 	mov.w	r9, #0
 801cda2:	f10d 0802 	add.w	r8, sp, #2
 801cda6:	af03      	add	r7, sp, #12
 801cda8:	ae02      	add	r6, sp, #8
 801cdaa:	4648      	mov	r0, r9
 801cdac:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 801cdb0:	2201      	movs	r2, #1
 801cdb2:	2102      	movs	r1, #2
 801cdb4:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 801cdb8:	f001 fbbc 	bl	801e534 <uxr_stream_id>
 801cdbc:	9001      	str	r0, [sp, #4]
 801cdbe:	3520      	adds	r5, #32
 801cdc0:	e00c      	b.n	801cddc <uxr_flash_output_streams+0x90>
 801cdc2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801cdc6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801cdca:	9b02      	ldr	r3, [sp, #8]
 801cdcc:	f000 fea8 	bl	801db20 <uxr_stamp_session_header>
 801cdd0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801cdd2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801cdd6:	e9d3 0a00 	ldrd	r0, sl, [r3]
 801cdda:	47d0      	blx	sl
 801cddc:	4643      	mov	r3, r8
 801cdde:	463a      	mov	r2, r7
 801cde0:	4631      	mov	r1, r6
 801cde2:	4628      	mov	r0, r5
 801cde4:	f004 f8a0 	bl	8020f28 <uxr_prepare_next_reliable_buffer_to_send>
 801cde8:	4603      	mov	r3, r0
 801cdea:	4620      	mov	r0, r4
 801cdec:	2b00      	cmp	r3, #0
 801cdee:	d1e8      	bne.n	801cdc2 <uxr_flash_output_streams+0x76>
 801cdf0:	f109 0901 	add.w	r9, r9, #1
 801cdf4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801cdf8:	fa5f f089 	uxtb.w	r0, r9
 801cdfc:	4283      	cmp	r3, r0
 801cdfe:	d8d5      	bhi.n	801cdac <uxr_flash_output_streams+0x60>
 801ce00:	b004      	add	sp, #16
 801ce02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce06:	9b02      	ldr	r3, [sp, #8]
 801ce08:	4620      	mov	r0, r4
 801ce0a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801ce0e:	f109 0901 	add.w	r9, r9, #1
 801ce12:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801ce16:	f000 fe83 	bl	801db20 <uxr_stamp_session_header>
 801ce1a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801ce1c:	9a03      	ldr	r2, [sp, #12]
 801ce1e:	685d      	ldr	r5, [r3, #4]
 801ce20:	6818      	ldr	r0, [r3, #0]
 801ce22:	9902      	ldr	r1, [sp, #8]
 801ce24:	47a8      	blx	r5
 801ce26:	7e23      	ldrb	r3, [r4, #24]
 801ce28:	fa5f f089 	uxtb.w	r0, r9
 801ce2c:	4283      	cmp	r3, r0
 801ce2e:	d89a      	bhi.n	801cd66 <uxr_flash_output_streams+0x1a>
 801ce30:	e7b2      	b.n	801cd98 <uxr_flash_output_streams+0x4c>
 801ce32:	bf00      	nop

0801ce34 <read_submessage_info>:
 801ce34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce38:	460d      	mov	r5, r1
 801ce3a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801ce3e:	4606      	mov	r6, r0
 801ce40:	4669      	mov	r1, sp
 801ce42:	4628      	mov	r0, r5
 801ce44:	f002 fb7a 	bl	801f53c <uxr_deserialize_BaseObjectReply>
 801ce48:	4604      	mov	r4, r0
 801ce4a:	a902      	add	r1, sp, #8
 801ce4c:	4628      	mov	r0, r5
 801ce4e:	f89d 7005 	ldrb.w	r7, [sp, #5]
 801ce52:	f7f6 fa35 	bl	80132c0 <ucdr_deserialize_bool>
 801ce56:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801ce5a:	4004      	ands	r4, r0
 801ce5c:	b2e4      	uxtb	r4, r4
 801ce5e:	b95b      	cbnz	r3, 801ce78 <read_submessage_info+0x44>
 801ce60:	a987      	add	r1, sp, #540	@ 0x21c
 801ce62:	4628      	mov	r0, r5
 801ce64:	f7f6 fa2c 	bl	80132c0 <ucdr_deserialize_bool>
 801ce68:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 801ce6c:	4680      	mov	r8, r0
 801ce6e:	b94b      	cbnz	r3, 801ce84 <read_submessage_info+0x50>
 801ce70:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801ce74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce78:	a903      	add	r1, sp, #12
 801ce7a:	4628      	mov	r0, r5
 801ce7c:	f002 fa0a 	bl	801f294 <uxr_deserialize_ObjectVariant>
 801ce80:	4004      	ands	r4, r0
 801ce82:	e7ed      	b.n	801ce60 <read_submessage_info+0x2c>
 801ce84:	a988      	add	r1, sp, #544	@ 0x220
 801ce86:	4628      	mov	r0, r5
 801ce88:	f7f6 fa48 	bl	801331c <ucdr_deserialize_uint8_t>
 801ce8c:	ea14 0f08 	tst.w	r4, r8
 801ce90:	d0ee      	beq.n	801ce70 <read_submessage_info+0x3c>
 801ce92:	2800      	cmp	r0, #0
 801ce94:	d0ec      	beq.n	801ce70 <read_submessage_info+0x3c>
 801ce96:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 801ce9a:	2b0d      	cmp	r3, #13
 801ce9c:	d1e8      	bne.n	801ce70 <read_submessage_info+0x3c>
 801ce9e:	a98a      	add	r1, sp, #552	@ 0x228
 801cea0:	4628      	mov	r0, r5
 801cea2:	f7f6 ffe1 	bl	8013e68 <ucdr_deserialize_int16_t>
 801cea6:	b138      	cbz	r0, 801ceb8 <read_submessage_info+0x84>
 801cea8:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 801ceac:	2b00      	cmp	r3, #0
 801ceae:	dd06      	ble.n	801cebe <read_submessage_info+0x8a>
 801ceb0:	2f00      	cmp	r7, #0
 801ceb2:	bf14      	ite	ne
 801ceb4:	2001      	movne	r0, #1
 801ceb6:	2002      	moveq	r0, #2
 801ceb8:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 801cebc:	e7d8      	b.n	801ce70 <read_submessage_info+0x3c>
 801cebe:	2000      	movs	r0, #0
 801cec0:	e7fa      	b.n	801ceb8 <read_submessage_info+0x84>
 801cec2:	bf00      	nop

0801cec4 <read_submessage_list>:
 801cec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cec8:	4604      	mov	r4, r0
 801ceca:	b097      	sub	sp, #92	@ 0x5c
 801cecc:	460d      	mov	r5, r1
 801cece:	4ec1      	ldr	r6, [pc, #772]	@ (801d1d4 <read_submessage_list+0x310>)
 801ced0:	9209      	str	r2, [sp, #36]	@ 0x24
 801ced2:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801ced6:	aa0c      	add	r2, sp, #48	@ 0x30
 801ced8:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 801cedc:	4628      	mov	r0, r5
 801cede:	f001 fc81 	bl	801e7e4 <uxr_read_submessage_header>
 801cee2:	2800      	cmp	r0, #0
 801cee4:	f000 8142 	beq.w	801d16c <read_submessage_list+0x2a8>
 801cee8:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 801ceec:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 801cef0:	3b02      	subs	r3, #2
 801cef2:	2b0d      	cmp	r3, #13
 801cef4:	d8ed      	bhi.n	801ced2 <read_submessage_list+0xe>
 801cef6:	a101      	add	r1, pc, #4	@ (adr r1, 801cefc <read_submessage_list+0x38>)
 801cef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801cefc:	0801d163 	.word	0x0801d163
 801cf00:	0801ced3 	.word	0x0801ced3
 801cf04:	0801d153 	.word	0x0801d153
 801cf08:	0801d0f1 	.word	0x0801d0f1
 801cf0c:	0801d0e7 	.word	0x0801d0e7
 801cf10:	0801ced3 	.word	0x0801ced3
 801cf14:	0801ced3 	.word	0x0801ced3
 801cf18:	0801d03d 	.word	0x0801d03d
 801cf1c:	0801cfcf 	.word	0x0801cfcf
 801cf20:	0801cf8f 	.word	0x0801cf8f
 801cf24:	0801ced3 	.word	0x0801ced3
 801cf28:	0801ced3 	.word	0x0801ced3
 801cf2c:	0801ced3 	.word	0x0801ced3
 801cf30:	0801cf35 	.word	0x0801cf35
 801cf34:	a910      	add	r1, sp, #64	@ 0x40
 801cf36:	4628      	mov	r0, r5
 801cf38:	f002 fd28 	bl	801f98c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 801cf3c:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 801cf40:	f1b8 0f00 	cmp.w	r8, #0
 801cf44:	f000 811a 	beq.w	801d17c <read_submessage_list+0x2b8>
 801cf48:	f001 fc94 	bl	801e874 <uxr_nanos>
 801cf4c:	4602      	mov	r2, r0
 801cf4e:	460b      	mov	r3, r1
 801cf50:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 801cf54:	2100      	movs	r1, #0
 801cf56:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801cf58:	9006      	str	r0, [sp, #24]
 801cf5a:	468c      	mov	ip, r1
 801cf5c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801cf5e:	fbc7 0c06 	smlal	r0, ip, r7, r6
 801cf62:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801cf64:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 801cf68:	468c      	mov	ip, r1
 801cf6a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801cf6c:	fbc7 0c06 	smlal	r0, ip, r7, r6
 801cf70:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 801cf74:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 801cf78:	fbc7 0106 	smlal	r0, r1, r7, r6
 801cf7c:	e9cd 0100 	strd	r0, r1, [sp]
 801cf80:	4620      	mov	r0, r4
 801cf82:	47c0      	blx	r8
 801cf84:	f04f 0301 	mov.w	r3, #1
 801cf88:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 801cf8c:	e7a1      	b.n	801ced2 <read_submessage_list+0xe>
 801cf8e:	a910      	add	r1, sp, #64	@ 0x40
 801cf90:	4628      	mov	r0, r5
 801cf92:	f002 fce7 	bl	801f964 <uxr_deserialize_HEARTBEAT_Payload>
 801cf96:	2100      	movs	r1, #0
 801cf98:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801cf9c:	f001 faf8 	bl	801e590 <uxr_stream_id_from_raw>
 801cfa0:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801cfa4:	900f      	str	r0, [sp, #60]	@ 0x3c
 801cfa6:	f104 0008 	add.w	r0, r4, #8
 801cfaa:	4641      	mov	r1, r8
 801cfac:	f001 fbde 	bl	801e76c <uxr_get_input_reliable_stream>
 801cfb0:	2800      	cmp	r0, #0
 801cfb2:	d08e      	beq.n	801ced2 <read_submessage_list+0xe>
 801cfb4:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801cfb8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 801cfbc:	f003 fcfa 	bl	80209b4 <uxr_process_heartbeat>
 801cfc0:	4642      	mov	r2, r8
 801cfc2:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 801cfc6:	4620      	mov	r0, r4
 801cfc8:	f7ff fdf8 	bl	801cbbc <write_submessage_acknack.isra.0>
 801cfcc:	e781      	b.n	801ced2 <read_submessage_list+0xe>
 801cfce:	a910      	add	r1, sp, #64	@ 0x40
 801cfd0:	4628      	mov	r0, r5
 801cfd2:	f002 fc9f 	bl	801f914 <uxr_deserialize_ACKNACK_Payload>
 801cfd6:	2100      	movs	r1, #0
 801cfd8:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801cfdc:	f001 fad8 	bl	801e590 <uxr_stream_id_from_raw>
 801cfe0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801cfe4:	900d      	str	r0, [sp, #52]	@ 0x34
 801cfe6:	f104 0008 	add.w	r0, r4, #8
 801cfea:	f001 fba9 	bl	801e740 <uxr_get_output_reliable_stream>
 801cfee:	4680      	mov	r8, r0
 801cff0:	2800      	cmp	r0, #0
 801cff2:	f43f af6e 	beq.w	801ced2 <read_submessage_list+0xe>
 801cff6:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 801cffa:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801cffe:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 801d002:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801d006:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801d00a:	b289      	uxth	r1, r1
 801d00c:	f004 f834 	bl	8021078 <uxr_process_acknack>
 801d010:	4640      	mov	r0, r8
 801d012:	f003 fff5 	bl	8021000 <uxr_begin_output_nack_buffer_it>
 801d016:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801d01a:	e005      	b.n	801d028 <read_submessage_list+0x164>
 801d01c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801d01e:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 801d022:	e9d3 0900 	ldrd	r0, r9, [r3]
 801d026:	47c8      	blx	r9
 801d028:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 801d02c:	aa0f      	add	r2, sp, #60	@ 0x3c
 801d02e:	4651      	mov	r1, sl
 801d030:	4640      	mov	r0, r8
 801d032:	f003 ffe7 	bl	8021004 <uxr_next_reliable_nack_buffer_to_send>
 801d036:	2800      	cmp	r0, #0
 801d038:	d1f0      	bne.n	801d01c <read_submessage_list+0x158>
 801d03a:	e74a      	b.n	801ced2 <read_submessage_list+0xe>
 801d03c:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 801d040:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801d044:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 801d048:	4628      	mov	r0, r5
 801d04a:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 801d04e:	4651      	mov	r1, sl
 801d050:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 801d054:	f1a8 0804 	sub.w	r8, r8, #4
 801d058:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 801d05c:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 801d060:	fa1f f888 	uxth.w	r8, r8
 801d064:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801d068:	f009 090e 	and.w	r9, r9, #14
 801d06c:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 801d070:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 801d074:	f002 f9b0 	bl	801f3d8 <uxr_deserialize_BaseObjectRequest>
 801d078:	4650      	mov	r0, sl
 801d07a:	a90f      	add	r1, sp, #60	@ 0x3c
 801d07c:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801d080:	f000 fdca 	bl	801dc18 <uxr_parse_base_object_request>
 801d084:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801d086:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 801d08a:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 801d08e:	9110      	str	r1, [sp, #64]	@ 0x40
 801d090:	f1bb 0f00 	cmp.w	fp, #0
 801d094:	d006      	beq.n	801d0a4 <read_submessage_list+0x1e0>
 801d096:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801d09a:	4652      	mov	r2, sl
 801d09c:	4620      	mov	r0, r4
 801d09e:	9300      	str	r3, [sp, #0]
 801d0a0:	2300      	movs	r3, #0
 801d0a2:	47d8      	blx	fp
 801d0a4:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801d0a6:	b182      	cbz	r2, 801d0ca <read_submessage_list+0x206>
 801d0a8:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801d0aa:	f04f 0c00 	mov.w	ip, #0
 801d0ae:	3902      	subs	r1, #2
 801d0b0:	e003      	b.n	801d0ba <read_submessage_list+0x1f6>
 801d0b2:	f10c 0c01 	add.w	ip, ip, #1
 801d0b6:	4594      	cmp	ip, r2
 801d0b8:	d007      	beq.n	801d0ca <read_submessage_list+0x206>
 801d0ba:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 801d0be:	4553      	cmp	r3, sl
 801d0c0:	d1f7      	bne.n	801d0b2 <read_submessage_list+0x1ee>
 801d0c2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801d0c4:	2200      	movs	r2, #0
 801d0c6:	f803 200c 	strb.w	r2, [r3, ip]
 801d0ca:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801d0ce:	464b      	mov	r3, r9
 801d0d0:	4642      	mov	r2, r8
 801d0d2:	4620      	mov	r0, r4
 801d0d4:	9102      	str	r1, [sp, #8]
 801d0d6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801d0d8:	9101      	str	r1, [sp, #4]
 801d0da:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801d0dc:	9100      	str	r1, [sp, #0]
 801d0de:	4629      	mov	r1, r5
 801d0e0:	f7ff fc4a 	bl	801c978 <read_submessage_format>
 801d0e4:	e6f5      	b.n	801ced2 <read_submessage_list+0xe>
 801d0e6:	4629      	mov	r1, r5
 801d0e8:	4620      	mov	r0, r4
 801d0ea:	f7ff fea3 	bl	801ce34 <read_submessage_info>
 801d0ee:	e6f0      	b.n	801ced2 <read_submessage_list+0xe>
 801d0f0:	2a00      	cmp	r2, #0
 801d0f2:	d03e      	beq.n	801d172 <read_submessage_list+0x2ae>
 801d0f4:	a910      	add	r1, sp, #64	@ 0x40
 801d0f6:	4628      	mov	r0, r5
 801d0f8:	f002 fb64 	bl	801f7c4 <uxr_deserialize_STATUS_Payload>
 801d0fc:	a90e      	add	r1, sp, #56	@ 0x38
 801d0fe:	aa0d      	add	r2, sp, #52	@ 0x34
 801d100:	a810      	add	r0, sp, #64	@ 0x40
 801d102:	f000 fd89 	bl	801dc18 <uxr_parse_base_object_request>
 801d106:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801d108:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 801d10c:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 801d110:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 801d114:	910f      	str	r1, [sp, #60]	@ 0x3c
 801d116:	f1ba 0f00 	cmp.w	sl, #0
 801d11a:	d006      	beq.n	801d12a <read_submessage_list+0x266>
 801d11c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801d120:	4642      	mov	r2, r8
 801d122:	4620      	mov	r0, r4
 801d124:	9300      	str	r3, [sp, #0]
 801d126:	464b      	mov	r3, r9
 801d128:	47d0      	blx	sl
 801d12a:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801d12c:	2a00      	cmp	r2, #0
 801d12e:	f43f aed0 	beq.w	801ced2 <read_submessage_list+0xe>
 801d132:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801d134:	2100      	movs	r1, #0
 801d136:	3802      	subs	r0, #2
 801d138:	e003      	b.n	801d142 <read_submessage_list+0x27e>
 801d13a:	3101      	adds	r1, #1
 801d13c:	4291      	cmp	r1, r2
 801d13e:	f43f aec8 	beq.w	801ced2 <read_submessage_list+0xe>
 801d142:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801d146:	4543      	cmp	r3, r8
 801d148:	d1f7      	bne.n	801d13a <read_submessage_list+0x276>
 801d14a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801d14c:	f803 9001 	strb.w	r9, [r3, r1]
 801d150:	e6bf      	b.n	801ced2 <read_submessage_list+0xe>
 801d152:	2a00      	cmp	r2, #0
 801d154:	f47f aebd 	bne.w	801ced2 <read_submessage_list+0xe>
 801d158:	4629      	mov	r1, r5
 801d15a:	4620      	mov	r0, r4
 801d15c:	f000 fca0 	bl	801daa0 <uxr_read_create_session_status>
 801d160:	e6b7      	b.n	801ced2 <read_submessage_list+0xe>
 801d162:	4629      	mov	r1, r5
 801d164:	4620      	mov	r0, r4
 801d166:	f7ff fcf3 	bl	801cb50 <read_submessage_get_info>
 801d16a:	e6b2      	b.n	801ced2 <read_submessage_list+0xe>
 801d16c:	b017      	add	sp, #92	@ 0x5c
 801d16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d172:	4629      	mov	r1, r5
 801d174:	4620      	mov	r0, r4
 801d176:	f000 fca1 	bl	801dabc <uxr_read_delete_session_status>
 801d17a:	e6aa      	b.n	801ced2 <read_submessage_list+0xe>
 801d17c:	f001 fb7a 	bl	801e874 <uxr_nanos>
 801d180:	4642      	mov	r2, r8
 801d182:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801d184:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d186:	fbc7 3206 	smlal	r3, r2, r7, r6
 801d18a:	1818      	adds	r0, r3, r0
 801d18c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801d18e:	eb42 0101 	adc.w	r1, r2, r1
 801d192:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d194:	4642      	mov	r2, r8
 801d196:	fbc7 3206 	smlal	r3, r2, r7, r6
 801d19a:	469c      	mov	ip, r3
 801d19c:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 801d1a0:	fbc3 7806 	smlal	r7, r8, r3, r6
 801d1a4:	4643      	mov	r3, r8
 801d1a6:	eb1c 0c07 	adds.w	ip, ip, r7
 801d1aa:	eb42 0203 	adc.w	r2, r2, r3
 801d1ae:	ebb0 030c 	subs.w	r3, r0, ip
 801d1b2:	eb61 0202 	sbc.w	r2, r1, r2
 801d1b6:	2a00      	cmp	r2, #0
 801d1b8:	db08      	blt.n	801d1cc <read_submessage_list+0x308>
 801d1ba:	085b      	lsrs	r3, r3, #1
 801d1bc:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 801d1c0:	1052      	asrs	r2, r2, #1
 801d1c2:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 801d1c6:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 801d1ca:	e6db      	b.n	801cf84 <read_submessage_list+0xc0>
 801d1cc:	3301      	adds	r3, #1
 801d1ce:	f142 0200 	adc.w	r2, r2, #0
 801d1d2:	e7f2      	b.n	801d1ba <read_submessage_list+0x2f6>
 801d1d4:	3b9aca00 	.word	0x3b9aca00

0801d1d8 <listen_message_reliably>:
 801d1d8:	1e0b      	subs	r3, r1, #0
 801d1da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1de:	bfb8      	it	lt
 801d1e0:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 801d1e4:	b09d      	sub	sp, #116	@ 0x74
 801d1e6:	4680      	mov	r8, r0
 801d1e8:	9305      	str	r3, [sp, #20]
 801d1ea:	f001 fb27 	bl	801e83c <uxr_millis>
 801d1ee:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 801d1f2:	4681      	mov	r9, r0
 801d1f4:	2a00      	cmp	r2, #0
 801d1f6:	f000 809a 	beq.w	801d32e <listen_message_reliably+0x156>
 801d1fa:	2600      	movs	r6, #0
 801d1fc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801d200:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801d204:	460f      	mov	r7, r1
 801d206:	4630      	mov	r0, r6
 801d208:	9303      	str	r3, [sp, #12]
 801d20a:	e00e      	b.n	801d22a <listen_message_reliably+0x52>
 801d20c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d20e:	3601      	adds	r6, #1
 801d210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d212:	455a      	cmp	r2, fp
 801d214:	9903      	ldr	r1, [sp, #12]
 801d216:	b2f0      	uxtb	r0, r6
 801d218:	eb73 0101 	sbcs.w	r1, r3, r1
 801d21c:	da01      	bge.n	801d222 <listen_message_reliably+0x4a>
 801d21e:	4693      	mov	fp, r2
 801d220:	9303      	str	r3, [sp, #12]
 801d222:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801d226:	4283      	cmp	r3, r0
 801d228:	d95f      	bls.n	801d2ea <listen_message_reliably+0x112>
 801d22a:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801d22e:	2102      	movs	r1, #2
 801d230:	2201      	movs	r2, #1
 801d232:	00e4      	lsls	r4, r4, #3
 801d234:	f001 f97e 	bl	801e534 <uxr_stream_id>
 801d238:	4601      	mov	r1, r0
 801d23a:	f104 0520 	add.w	r5, r4, #32
 801d23e:	463b      	mov	r3, r7
 801d240:	464a      	mov	r2, r9
 801d242:	9109      	str	r1, [sp, #36]	@ 0x24
 801d244:	4445      	add	r5, r8
 801d246:	4628      	mov	r0, r5
 801d248:	f003 feae 	bl	8020fa8 <uxr_update_output_stream_heartbeat_timestamp>
 801d24c:	eb08 0304 	add.w	r3, r8, r4
 801d250:	2800      	cmp	r0, #0
 801d252:	d0db      	beq.n	801d20c <listen_message_reliably+0x34>
 801d254:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 801d258:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 801d25c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801d260:	4640      	mov	r0, r8
 801d262:	3501      	adds	r5, #1
 801d264:	4444      	add	r4, r8
 801d266:	9304      	str	r3, [sp, #16]
 801d268:	f000 fcae 	bl	801dbc8 <uxr_session_header_offset>
 801d26c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801d270:	2300      	movs	r3, #0
 801d272:	2211      	movs	r2, #17
 801d274:	a90c      	add	r1, sp, #48	@ 0x30
 801d276:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 801d27a:	9000      	str	r0, [sp, #0]
 801d27c:	4650      	mov	r0, sl
 801d27e:	3601      	adds	r6, #1
 801d280:	f7f7 fa8e 	bl	80147a0 <ucdr_init_buffer_origin_offset>
 801d284:	2300      	movs	r3, #0
 801d286:	2205      	movs	r2, #5
 801d288:	210b      	movs	r1, #11
 801d28a:	4650      	mov	r0, sl
 801d28c:	f001 fa90 	bl	801e7b0 <uxr_buffer_submessage_header>
 801d290:	2101      	movs	r1, #1
 801d292:	8968      	ldrh	r0, [r5, #10]
 801d294:	f003 ff2a 	bl	80210ec <uxr_seq_num_add>
 801d298:	892b      	ldrh	r3, [r5, #8]
 801d29a:	4602      	mov	r2, r0
 801d29c:	a90a      	add	r1, sp, #40	@ 0x28
 801d29e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801d2a2:	4650      	mov	r0, sl
 801d2a4:	9b04      	ldr	r3, [sp, #16]
 801d2a6:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801d2aa:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801d2ae:	f002 fb45 	bl	801f93c <uxr_serialize_HEARTBEAT_Payload>
 801d2b2:	2200      	movs	r2, #0
 801d2b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d2b6:	4640      	mov	r0, r8
 801d2b8:	4611      	mov	r1, r2
 801d2ba:	f000 fc31 	bl	801db20 <uxr_stamp_session_header>
 801d2be:	4650      	mov	r0, sl
 801d2c0:	f7f7 faae 	bl	8014820 <ucdr_buffer_length>
 801d2c4:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 801d2c8:	4602      	mov	r2, r0
 801d2ca:	a90c      	add	r1, sp, #48	@ 0x30
 801d2cc:	e9d3 0500 	ldrd	r0, r5, [r3]
 801d2d0:	47a8      	blx	r5
 801d2d2:	9903      	ldr	r1, [sp, #12]
 801d2d4:	b2f0      	uxtb	r0, r6
 801d2d6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 801d2da:	455a      	cmp	r2, fp
 801d2dc:	eb73 0101 	sbcs.w	r1, r3, r1
 801d2e0:	db9d      	blt.n	801d21e <listen_message_reliably+0x46>
 801d2e2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801d2e6:	4283      	cmp	r3, r0
 801d2e8:	d89f      	bhi.n	801d22a <listen_message_reliably+0x52>
 801d2ea:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801d2ee:	9a03      	ldr	r2, [sp, #12]
 801d2f0:	429a      	cmp	r2, r3
 801d2f2:	bf08      	it	eq
 801d2f4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 801d2f8:	d019      	beq.n	801d32e <listen_message_reliably+0x156>
 801d2fa:	ebab 0309 	sub.w	r3, fp, r9
 801d2fe:	2b00      	cmp	r3, #0
 801d300:	9d05      	ldr	r5, [sp, #20]
 801d302:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 801d306:	aa08      	add	r2, sp, #32
 801d308:	bf08      	it	eq
 801d30a:	2301      	moveq	r3, #1
 801d30c:	a907      	add	r1, sp, #28
 801d30e:	6884      	ldr	r4, [r0, #8]
 801d310:	429d      	cmp	r5, r3
 801d312:	6800      	ldr	r0, [r0, #0]
 801d314:	bfa8      	it	ge
 801d316:	461d      	movge	r5, r3
 801d318:	462b      	mov	r3, r5
 801d31a:	47a0      	blx	r4
 801d31c:	b948      	cbnz	r0, 801d332 <listen_message_reliably+0x15a>
 801d31e:	9b05      	ldr	r3, [sp, #20]
 801d320:	1b5b      	subs	r3, r3, r5
 801d322:	2b00      	cmp	r3, #0
 801d324:	9305      	str	r3, [sp, #20]
 801d326:	f73f af60 	bgt.w	801d1ea <listen_message_reliably+0x12>
 801d32a:	4604      	mov	r4, r0
 801d32c:	e012      	b.n	801d354 <listen_message_reliably+0x17c>
 801d32e:	9b05      	ldr	r3, [sp, #20]
 801d330:	e7e5      	b.n	801d2fe <listen_message_reliably+0x126>
 801d332:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801d336:	4604      	mov	r4, r0
 801d338:	2500      	movs	r5, #0
 801d33a:	a80c      	add	r0, sp, #48	@ 0x30
 801d33c:	f7f7 fa42 	bl	80147c4 <ucdr_init_buffer>
 801d340:	f10d 031a 	add.w	r3, sp, #26
 801d344:	aa06      	add	r2, sp, #24
 801d346:	a90c      	add	r1, sp, #48	@ 0x30
 801d348:	4640      	mov	r0, r8
 801d34a:	f88d 5018 	strb.w	r5, [sp, #24]
 801d34e:	f000 fbfb 	bl	801db48 <uxr_read_session_header>
 801d352:	b918      	cbnz	r0, 801d35c <listen_message_reliably+0x184>
 801d354:	4620      	mov	r0, r4
 801d356:	b01d      	add	sp, #116	@ 0x74
 801d358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d35c:	4629      	mov	r1, r5
 801d35e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801d362:	f001 f915 	bl	801e590 <uxr_stream_id_from_raw>
 801d366:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801d36a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 801d36e:	f3c0 2507 	ubfx	r5, r0, #8, #8
 801d372:	2e01      	cmp	r6, #1
 801d374:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801d378:	d04b      	beq.n	801d412 <listen_message_reliably+0x23a>
 801d37a:	2e02      	cmp	r6, #2
 801d37c:	d00f      	beq.n	801d39e <listen_message_reliably+0x1c6>
 801d37e:	2e00      	cmp	r6, #0
 801d380:	d1e8      	bne.n	801d354 <listen_message_reliably+0x17c>
 801d382:	4631      	mov	r1, r6
 801d384:	4630      	mov	r0, r6
 801d386:	f001 f903 	bl	801e590 <uxr_stream_id_from_raw>
 801d38a:	4602      	mov	r2, r0
 801d38c:	a90c      	add	r1, sp, #48	@ 0x30
 801d38e:	4640      	mov	r0, r8
 801d390:	920a      	str	r2, [sp, #40]	@ 0x28
 801d392:	f7ff fd97 	bl	801cec4 <read_submessage_list>
 801d396:	4620      	mov	r0, r4
 801d398:	b01d      	add	sp, #116	@ 0x74
 801d39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d39e:	4629      	mov	r1, r5
 801d3a0:	f108 0008 	add.w	r0, r8, #8
 801d3a4:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 801d3a8:	f001 f9e0 	bl	801e76c <uxr_get_input_reliable_stream>
 801d3ac:	4607      	mov	r7, r0
 801d3ae:	b338      	cbz	r0, 801d400 <listen_message_reliably+0x228>
 801d3b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d3b2:	a80c      	add	r0, sp, #48	@ 0x30
 801d3b4:	9203      	str	r2, [sp, #12]
 801d3b6:	f7f7 fa37 	bl	8014828 <ucdr_buffer_remaining>
 801d3ba:	4603      	mov	r3, r0
 801d3bc:	f10d 0019 	add.w	r0, sp, #25
 801d3c0:	9a03      	ldr	r2, [sp, #12]
 801d3c2:	4651      	mov	r1, sl
 801d3c4:	9000      	str	r0, [sp, #0]
 801d3c6:	4638      	mov	r0, r7
 801d3c8:	f003 f9f8 	bl	80207bc <uxr_receive_reliable_message>
 801d3cc:	b1c0      	cbz	r0, 801d400 <listen_message_reliably+0x228>
 801d3ce:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801d3d2:	b393      	cbz	r3, 801d43a <listen_message_reliably+0x262>
 801d3d4:	ae14      	add	r6, sp, #80	@ 0x50
 801d3d6:	f04f 0a02 	mov.w	sl, #2
 801d3da:	e00a      	b.n	801d3f2 <listen_message_reliably+0x21a>
 801d3dc:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 801d3e0:	4631      	mov	r1, r6
 801d3e2:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 801d3e6:	4640      	mov	r0, r8
 801d3e8:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 801d3ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d3ee:	f7ff fd69 	bl	801cec4 <read_submessage_list>
 801d3f2:	2204      	movs	r2, #4
 801d3f4:	4631      	mov	r1, r6
 801d3f6:	4638      	mov	r0, r7
 801d3f8:	f003 fa62 	bl	80208c0 <uxr_next_input_reliable_buffer_available>
 801d3fc:	2800      	cmp	r0, #0
 801d3fe:	d1ed      	bne.n	801d3dc <listen_message_reliably+0x204>
 801d400:	4640      	mov	r0, r8
 801d402:	462a      	mov	r2, r5
 801d404:	4649      	mov	r1, r9
 801d406:	f7ff fbd9 	bl	801cbbc <write_submessage_acknack.isra.0>
 801d40a:	4620      	mov	r0, r4
 801d40c:	b01d      	add	sp, #116	@ 0x74
 801d40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d412:	4629      	mov	r1, r5
 801d414:	f108 0008 	add.w	r0, r8, #8
 801d418:	f001 f99e 	bl	801e758 <uxr_get_input_best_effort_stream>
 801d41c:	2800      	cmp	r0, #0
 801d41e:	d099      	beq.n	801d354 <listen_message_reliably+0x17c>
 801d420:	4651      	mov	r1, sl
 801d422:	f003 f941 	bl	80206a8 <uxr_receive_best_effort_message>
 801d426:	2800      	cmp	r0, #0
 801d428:	d094      	beq.n	801d354 <listen_message_reliably+0x17c>
 801d42a:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801d42e:	a90c      	add	r1, sp, #48	@ 0x30
 801d430:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d432:	4640      	mov	r0, r8
 801d434:	f7ff fd46 	bl	801cec4 <read_submessage_list>
 801d438:	e78c      	b.n	801d354 <listen_message_reliably+0x17c>
 801d43a:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801d43e:	a90c      	add	r1, sp, #48	@ 0x30
 801d440:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d442:	4640      	mov	r0, r8
 801d444:	f7ff fd3e 	bl	801cec4 <read_submessage_list>
 801d448:	e7c4      	b.n	801d3d4 <listen_message_reliably+0x1fc>
 801d44a:	bf00      	nop

0801d44c <uxr_run_session_timeout>:
 801d44c:	b570      	push	{r4, r5, r6, lr}
 801d44e:	4604      	mov	r4, r0
 801d450:	460d      	mov	r5, r1
 801d452:	f001 f9f3 	bl	801e83c <uxr_millis>
 801d456:	4606      	mov	r6, r0
 801d458:	4620      	mov	r0, r4
 801d45a:	f7ff fc77 	bl	801cd4c <uxr_flash_output_streams>
 801d45e:	4629      	mov	r1, r5
 801d460:	4620      	mov	r0, r4
 801d462:	f7ff feb9 	bl	801d1d8 <listen_message_reliably>
 801d466:	f001 f9e9 	bl	801e83c <uxr_millis>
 801d46a:	1b83      	subs	r3, r0, r6
 801d46c:	1ae9      	subs	r1, r5, r3
 801d46e:	2900      	cmp	r1, #0
 801d470:	dcf6      	bgt.n	801d460 <uxr_run_session_timeout+0x14>
 801d472:	f104 0008 	add.w	r0, r4, #8
 801d476:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d47a:	f001 b983 	b.w	801e784 <uxr_output_streams_confirmed>
 801d47e:	bf00      	nop

0801d480 <uxr_run_session_until_data>:
 801d480:	b570      	push	{r4, r5, r6, lr}
 801d482:	4604      	mov	r4, r0
 801d484:	460d      	mov	r5, r1
 801d486:	f001 f9d9 	bl	801e83c <uxr_millis>
 801d48a:	4606      	mov	r6, r0
 801d48c:	4620      	mov	r0, r4
 801d48e:	f7ff fc5d 	bl	801cd4c <uxr_flash_output_streams>
 801d492:	2300      	movs	r3, #0
 801d494:	4629      	mov	r1, r5
 801d496:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 801d49a:	e005      	b.n	801d4a8 <uxr_run_session_until_data+0x28>
 801d49c:	f001 f9ce 	bl	801e83c <uxr_millis>
 801d4a0:	1b83      	subs	r3, r0, r6
 801d4a2:	1ae9      	subs	r1, r5, r3
 801d4a4:	2900      	cmp	r1, #0
 801d4a6:	dd07      	ble.n	801d4b8 <uxr_run_session_until_data+0x38>
 801d4a8:	4620      	mov	r0, r4
 801d4aa:	f7ff fe95 	bl	801d1d8 <listen_message_reliably>
 801d4ae:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801d4b2:	2800      	cmp	r0, #0
 801d4b4:	d0f2      	beq.n	801d49c <uxr_run_session_until_data+0x1c>
 801d4b6:	bd70      	pop	{r4, r5, r6, pc}
 801d4b8:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801d4bc:	bd70      	pop	{r4, r5, r6, pc}
 801d4be:	bf00      	nop

0801d4c0 <uxr_run_session_until_confirm_delivery>:
 801d4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d4c4:	4606      	mov	r6, r0
 801d4c6:	460d      	mov	r5, r1
 801d4c8:	f001 f9b8 	bl	801e83c <uxr_millis>
 801d4cc:	4607      	mov	r7, r0
 801d4ce:	4630      	mov	r0, r6
 801d4d0:	f106 0808 	add.w	r8, r6, #8
 801d4d4:	f7ff fc3a 	bl	801cd4c <uxr_flash_output_streams>
 801d4d8:	2d00      	cmp	r5, #0
 801d4da:	db10      	blt.n	801d4fe <uxr_run_session_until_confirm_delivery+0x3e>
 801d4dc:	462c      	mov	r4, r5
 801d4de:	e006      	b.n	801d4ee <uxr_run_session_until_confirm_delivery+0x2e>
 801d4e0:	f7ff fe7a 	bl	801d1d8 <listen_message_reliably>
 801d4e4:	f001 f9aa 	bl	801e83c <uxr_millis>
 801d4e8:	1bc3      	subs	r3, r0, r7
 801d4ea:	1aec      	subs	r4, r5, r3
 801d4ec:	d407      	bmi.n	801d4fe <uxr_run_session_until_confirm_delivery+0x3e>
 801d4ee:	4640      	mov	r0, r8
 801d4f0:	f001 f948 	bl	801e784 <uxr_output_streams_confirmed>
 801d4f4:	4603      	mov	r3, r0
 801d4f6:	4621      	mov	r1, r4
 801d4f8:	4630      	mov	r0, r6
 801d4fa:	2b00      	cmp	r3, #0
 801d4fc:	d0f0      	beq.n	801d4e0 <uxr_run_session_until_confirm_delivery+0x20>
 801d4fe:	4640      	mov	r0, r8
 801d500:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d504:	f001 b93e 	b.w	801e784 <uxr_output_streams_confirmed>

0801d508 <uxr_run_session_until_all_status>:
 801d508:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d50c:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 801d510:	4606      	mov	r6, r0
 801d512:	4688      	mov	r8, r1
 801d514:	4692      	mov	sl, r2
 801d516:	461f      	mov	r7, r3
 801d518:	f7ff fc18 	bl	801cd4c <uxr_flash_output_streams>
 801d51c:	f1bb 0f00 	cmp.w	fp, #0
 801d520:	d004      	beq.n	801d52c <uxr_run_session_until_all_status+0x24>
 801d522:	465a      	mov	r2, fp
 801d524:	21ff      	movs	r1, #255	@ 0xff
 801d526:	4638      	mov	r0, r7
 801d528:	f004 fad8 	bl	8021adc <memset>
 801d52c:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 801d530:	1e7d      	subs	r5, r7, #1
 801d532:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 801d536:	f001 f981 	bl	801e83c <uxr_millis>
 801d53a:	4641      	mov	r1, r8
 801d53c:	4681      	mov	r9, r0
 801d53e:	4630      	mov	r0, r6
 801d540:	f7ff fe4a 	bl	801d1d8 <listen_message_reliably>
 801d544:	f001 f97a 	bl	801e83c <uxr_millis>
 801d548:	eba0 0009 	sub.w	r0, r0, r9
 801d54c:	eba8 0100 	sub.w	r1, r8, r0
 801d550:	f1bb 0f00 	cmp.w	fp, #0
 801d554:	d029      	beq.n	801d5aa <uxr_run_session_until_all_status+0xa2>
 801d556:	46ae      	mov	lr, r5
 801d558:	f04f 0c00 	mov.w	ip, #0
 801d55c:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 801d560:	2cff      	cmp	r4, #255	@ 0xff
 801d562:	d015      	beq.n	801d590 <uxr_run_session_until_all_status+0x88>
 801d564:	f10c 0c01 	add.w	ip, ip, #1
 801d568:	45e3      	cmp	fp, ip
 801d56a:	d8f7      	bhi.n	801d55c <uxr_run_session_until_all_status+0x54>
 801d56c:	2300      	movs	r3, #0
 801d56e:	67f3      	str	r3, [r6, #124]	@ 0x7c
 801d570:	e000      	b.n	801d574 <uxr_run_session_until_all_status+0x6c>
 801d572:	b158      	cbz	r0, 801d58c <uxr_run_session_until_all_status+0x84>
 801d574:	462b      	mov	r3, r5
 801d576:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 801d57a:	3302      	adds	r3, #2
 801d57c:	2801      	cmp	r0, #1
 801d57e:	eba3 0307 	sub.w	r3, r3, r7
 801d582:	bf8c      	ite	hi
 801d584:	2000      	movhi	r0, #0
 801d586:	2001      	movls	r0, #1
 801d588:	459b      	cmp	fp, r3
 801d58a:	d8f2      	bhi.n	801d572 <uxr_run_session_until_all_status+0x6a>
 801d58c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d590:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 801d594:	f10c 0c01 	add.w	ip, ip, #1
 801d598:	45dc      	cmp	ip, fp
 801d59a:	d201      	bcs.n	801d5a0 <uxr_run_session_until_all_status+0x98>
 801d59c:	2b00      	cmp	r3, #0
 801d59e:	d0dd      	beq.n	801d55c <uxr_run_session_until_all_status+0x54>
 801d5a0:	2900      	cmp	r1, #0
 801d5a2:	dde3      	ble.n	801d56c <uxr_run_session_until_all_status+0x64>
 801d5a4:	2b00      	cmp	r3, #0
 801d5a6:	d1ca      	bne.n	801d53e <uxr_run_session_until_all_status+0x36>
 801d5a8:	e7e0      	b.n	801d56c <uxr_run_session_until_all_status+0x64>
 801d5aa:	2001      	movs	r0, #1
 801d5ac:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 801d5b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d5b4 <wait_session_status>:
 801d5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5b8:	4604      	mov	r4, r0
 801d5ba:	b09d      	sub	sp, #116	@ 0x74
 801d5bc:	20ff      	movs	r0, #255	@ 0xff
 801d5be:	9303      	str	r3, [sp, #12]
 801d5c0:	7160      	strb	r0, [r4, #5]
 801d5c2:	2b00      	cmp	r3, #0
 801d5c4:	f000 80b6 	beq.w	801d734 <wait_session_status+0x180>
 801d5c8:	4689      	mov	r9, r1
 801d5ca:	4692      	mov	sl, r2
 801d5cc:	f04f 0b00 	mov.w	fp, #0
 801d5d0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801d5d2:	4652      	mov	r2, sl
 801d5d4:	4649      	mov	r1, r9
 801d5d6:	e9d3 0500 	ldrd	r0, r5, [r3]
 801d5da:	47a8      	blx	r5
 801d5dc:	f001 f92e 	bl	801e83c <uxr_millis>
 801d5e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801d5e4:	4605      	mov	r5, r0
 801d5e6:	e009      	b.n	801d5fc <wait_session_status+0x48>
 801d5e8:	f001 f928 	bl	801e83c <uxr_millis>
 801d5ec:	1b40      	subs	r0, r0, r5
 801d5ee:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801d5f2:	2b00      	cmp	r3, #0
 801d5f4:	dd40      	ble.n	801d678 <wait_session_status+0xc4>
 801d5f6:	7960      	ldrb	r0, [r4, #5]
 801d5f8:	28ff      	cmp	r0, #255	@ 0xff
 801d5fa:	d145      	bne.n	801d688 <wait_session_status+0xd4>
 801d5fc:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801d5fe:	a908      	add	r1, sp, #32
 801d600:	6896      	ldr	r6, [r2, #8]
 801d602:	6810      	ldr	r0, [r2, #0]
 801d604:	aa09      	add	r2, sp, #36	@ 0x24
 801d606:	47b0      	blx	r6
 801d608:	2800      	cmp	r0, #0
 801d60a:	d0ed      	beq.n	801d5e8 <wait_session_status+0x34>
 801d60c:	a80c      	add	r0, sp, #48	@ 0x30
 801d60e:	2600      	movs	r6, #0
 801d610:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801d614:	f7f7 f8d6 	bl	80147c4 <ucdr_init_buffer>
 801d618:	f10d 031e 	add.w	r3, sp, #30
 801d61c:	aa07      	add	r2, sp, #28
 801d61e:	a90c      	add	r1, sp, #48	@ 0x30
 801d620:	4620      	mov	r0, r4
 801d622:	f88d 601c 	strb.w	r6, [sp, #28]
 801d626:	f000 fa8f 	bl	801db48 <uxr_read_session_header>
 801d62a:	2800      	cmp	r0, #0
 801d62c:	d0dc      	beq.n	801d5e8 <wait_session_status+0x34>
 801d62e:	4631      	mov	r1, r6
 801d630:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801d634:	f000 ffac 	bl	801e590 <uxr_stream_id_from_raw>
 801d638:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801d63c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801d640:	f3c0 2607 	ubfx	r6, r0, #8, #8
 801d644:	2f01      	cmp	r7, #1
 801d646:	9302      	str	r3, [sp, #8]
 801d648:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 801d64c:	d05c      	beq.n	801d708 <wait_session_status+0x154>
 801d64e:	2f02      	cmp	r7, #2
 801d650:	d020      	beq.n	801d694 <wait_session_status+0xe0>
 801d652:	2f00      	cmp	r7, #0
 801d654:	d1c8      	bne.n	801d5e8 <wait_session_status+0x34>
 801d656:	4639      	mov	r1, r7
 801d658:	4638      	mov	r0, r7
 801d65a:	f000 ff99 	bl	801e590 <uxr_stream_id_from_raw>
 801d65e:	a90c      	add	r1, sp, #48	@ 0x30
 801d660:	4602      	mov	r2, r0
 801d662:	900b      	str	r0, [sp, #44]	@ 0x2c
 801d664:	4620      	mov	r0, r4
 801d666:	f7ff fc2d 	bl	801cec4 <read_submessage_list>
 801d66a:	f001 f8e7 	bl	801e83c <uxr_millis>
 801d66e:	1b40      	subs	r0, r0, r5
 801d670:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801d674:	2b00      	cmp	r3, #0
 801d676:	dcbe      	bgt.n	801d5f6 <wait_session_status+0x42>
 801d678:	f10b 0b01 	add.w	fp, fp, #1
 801d67c:	9b03      	ldr	r3, [sp, #12]
 801d67e:	7960      	ldrb	r0, [r4, #5]
 801d680:	455b      	cmp	r3, fp
 801d682:	d001      	beq.n	801d688 <wait_session_status+0xd4>
 801d684:	28ff      	cmp	r0, #255	@ 0xff
 801d686:	d0a3      	beq.n	801d5d0 <wait_session_status+0x1c>
 801d688:	38ff      	subs	r0, #255	@ 0xff
 801d68a:	bf18      	it	ne
 801d68c:	2001      	movne	r0, #1
 801d68e:	b01d      	add	sp, #116	@ 0x74
 801d690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d694:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 801d698:	4631      	mov	r1, r6
 801d69a:	f104 0008 	add.w	r0, r4, #8
 801d69e:	9304      	str	r3, [sp, #16]
 801d6a0:	f001 f864 	bl	801e76c <uxr_get_input_reliable_stream>
 801d6a4:	4680      	mov	r8, r0
 801d6a6:	b348      	cbz	r0, 801d6fc <wait_session_status+0x148>
 801d6a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d6aa:	a80c      	add	r0, sp, #48	@ 0x30
 801d6ac:	9205      	str	r2, [sp, #20]
 801d6ae:	f7f7 f8bb 	bl	8014828 <ucdr_buffer_remaining>
 801d6b2:	4603      	mov	r3, r0
 801d6b4:	f10d 001d 	add.w	r0, sp, #29
 801d6b8:	9a05      	ldr	r2, [sp, #20]
 801d6ba:	9000      	str	r0, [sp, #0]
 801d6bc:	4640      	mov	r0, r8
 801d6be:	9902      	ldr	r1, [sp, #8]
 801d6c0:	f003 f87c 	bl	80207bc <uxr_receive_reliable_message>
 801d6c4:	b1d0      	cbz	r0, 801d6fc <wait_session_status+0x148>
 801d6c6:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801d6ca:	2b00      	cmp	r3, #0
 801d6cc:	d03a      	beq.n	801d744 <wait_session_status+0x190>
 801d6ce:	9f04      	ldr	r7, [sp, #16]
 801d6d0:	e00a      	b.n	801d6e8 <wait_session_status+0x134>
 801d6d2:	f04f 0302 	mov.w	r3, #2
 801d6d6:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 801d6da:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801d6de:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 801d6e2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d6e4:	f7ff fbee 	bl	801cec4 <read_submessage_list>
 801d6e8:	a914      	add	r1, sp, #80	@ 0x50
 801d6ea:	2204      	movs	r2, #4
 801d6ec:	4640      	mov	r0, r8
 801d6ee:	f003 f8e7 	bl	80208c0 <uxr_next_input_reliable_buffer_available>
 801d6f2:	4603      	mov	r3, r0
 801d6f4:	a914      	add	r1, sp, #80	@ 0x50
 801d6f6:	4620      	mov	r0, r4
 801d6f8:	2b00      	cmp	r3, #0
 801d6fa:	d1ea      	bne.n	801d6d2 <wait_session_status+0x11e>
 801d6fc:	4632      	mov	r2, r6
 801d6fe:	9904      	ldr	r1, [sp, #16]
 801d700:	4620      	mov	r0, r4
 801d702:	f7ff fa5b 	bl	801cbbc <write_submessage_acknack.isra.0>
 801d706:	e76f      	b.n	801d5e8 <wait_session_status+0x34>
 801d708:	4631      	mov	r1, r6
 801d70a:	f104 0008 	add.w	r0, r4, #8
 801d70e:	f001 f823 	bl	801e758 <uxr_get_input_best_effort_stream>
 801d712:	2800      	cmp	r0, #0
 801d714:	f43f af68 	beq.w	801d5e8 <wait_session_status+0x34>
 801d718:	9902      	ldr	r1, [sp, #8]
 801d71a:	f002 ffc5 	bl	80206a8 <uxr_receive_best_effort_message>
 801d71e:	2800      	cmp	r0, #0
 801d720:	f43f af62 	beq.w	801d5e8 <wait_session_status+0x34>
 801d724:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801d728:	a90c      	add	r1, sp, #48	@ 0x30
 801d72a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d72c:	4620      	mov	r0, r4
 801d72e:	f7ff fbc9 	bl	801cec4 <read_submessage_list>
 801d732:	e759      	b.n	801d5e8 <wait_session_status+0x34>
 801d734:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801d736:	e9d3 0400 	ldrd	r0, r4, [r3]
 801d73a:	47a0      	blx	r4
 801d73c:	2001      	movs	r0, #1
 801d73e:	b01d      	add	sp, #116	@ 0x74
 801d740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d744:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801d748:	a90c      	add	r1, sp, #48	@ 0x30
 801d74a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d74c:	4620      	mov	r0, r4
 801d74e:	f7ff fbb9 	bl	801cec4 <read_submessage_list>
 801d752:	e7bc      	b.n	801d6ce <wait_session_status+0x11a>

0801d754 <uxr_delete_session_retries>:
 801d754:	b530      	push	{r4, r5, lr}
 801d756:	b08f      	sub	sp, #60	@ 0x3c
 801d758:	4604      	mov	r4, r0
 801d75a:	460d      	mov	r5, r1
 801d75c:	f000 fa34 	bl	801dbc8 <uxr_session_header_offset>
 801d760:	2300      	movs	r3, #0
 801d762:	2210      	movs	r2, #16
 801d764:	a902      	add	r1, sp, #8
 801d766:	9000      	str	r0, [sp, #0]
 801d768:	a806      	add	r0, sp, #24
 801d76a:	f7f7 f819 	bl	80147a0 <ucdr_init_buffer_origin_offset>
 801d76e:	a906      	add	r1, sp, #24
 801d770:	4620      	mov	r0, r4
 801d772:	f000 f979 	bl	801da68 <uxr_buffer_delete_session>
 801d776:	2200      	movs	r2, #0
 801d778:	9b06      	ldr	r3, [sp, #24]
 801d77a:	4620      	mov	r0, r4
 801d77c:	4611      	mov	r1, r2
 801d77e:	f000 f9cf 	bl	801db20 <uxr_stamp_session_header>
 801d782:	a806      	add	r0, sp, #24
 801d784:	f7f7 f84c 	bl	8014820 <ucdr_buffer_length>
 801d788:	462b      	mov	r3, r5
 801d78a:	4602      	mov	r2, r0
 801d78c:	a902      	add	r1, sp, #8
 801d78e:	4620      	mov	r0, r4
 801d790:	f7ff ff10 	bl	801d5b4 <wait_session_status>
 801d794:	b118      	cbz	r0, 801d79e <uxr_delete_session_retries+0x4a>
 801d796:	7960      	ldrb	r0, [r4, #5]
 801d798:	fab0 f080 	clz	r0, r0
 801d79c:	0940      	lsrs	r0, r0, #5
 801d79e:	b00f      	add	sp, #60	@ 0x3c
 801d7a0:	bd30      	pop	{r4, r5, pc}
 801d7a2:	bf00      	nop

0801d7a4 <uxr_create_session>:
 801d7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7a8:	f100 0b08 	add.w	fp, r0, #8
 801d7ac:	4604      	mov	r4, r0
 801d7ae:	b0ab      	sub	sp, #172	@ 0xac
 801d7b0:	4658      	mov	r0, fp
 801d7b2:	465e      	mov	r6, fp
 801d7b4:	f000 ff22 	bl	801e5fc <uxr_reset_stream_storage>
 801d7b8:	4620      	mov	r0, r4
 801d7ba:	f000 fa05 	bl	801dbc8 <uxr_session_header_offset>
 801d7be:	2300      	movs	r3, #0
 801d7c0:	221c      	movs	r2, #28
 801d7c2:	a90b      	add	r1, sp, #44	@ 0x2c
 801d7c4:	9000      	str	r0, [sp, #0]
 801d7c6:	a812      	add	r0, sp, #72	@ 0x48
 801d7c8:	f7f6 ffea 	bl	80147a0 <ucdr_init_buffer_origin_offset>
 801d7cc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801d7ce:	a912      	add	r1, sp, #72	@ 0x48
 801d7d0:	4620      	mov	r0, r4
 801d7d2:	8a1a      	ldrh	r2, [r3, #16]
 801d7d4:	3a04      	subs	r2, #4
 801d7d6:	b292      	uxth	r2, r2
 801d7d8:	f000 f91c 	bl	801da14 <uxr_buffer_create_session>
 801d7dc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801d7de:	4620      	mov	r0, r4
 801d7e0:	f000 f98a 	bl	801daf8 <uxr_stamp_create_session_header>
 801d7e4:	a812      	add	r0, sp, #72	@ 0x48
 801d7e6:	f7f7 f81b 	bl	8014820 <ucdr_buffer_length>
 801d7ea:	23ff      	movs	r3, #255	@ 0xff
 801d7ec:	4681      	mov	r9, r0
 801d7ee:	7163      	strb	r3, [r4, #5]
 801d7f0:	230a      	movs	r3, #10
 801d7f2:	9303      	str	r3, [sp, #12]
 801d7f4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801d7f6:	464a      	mov	r2, r9
 801d7f8:	a90b      	add	r1, sp, #44	@ 0x2c
 801d7fa:	e9d3 0500 	ldrd	r0, r5, [r3]
 801d7fe:	47a8      	blx	r5
 801d800:	f001 f81c 	bl	801e83c <uxr_millis>
 801d804:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801d808:	4605      	mov	r5, r0
 801d80a:	e009      	b.n	801d820 <uxr_create_session+0x7c>
 801d80c:	f001 f816 	bl	801e83c <uxr_millis>
 801d810:	1b40      	subs	r0, r0, r5
 801d812:	7962      	ldrb	r2, [r4, #5]
 801d814:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801d818:	2b00      	cmp	r3, #0
 801d81a:	dd38      	ble.n	801d88e <uxr_create_session+0xea>
 801d81c:	2aff      	cmp	r2, #255	@ 0xff
 801d81e:	d13c      	bne.n	801d89a <uxr_create_session+0xf6>
 801d820:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801d822:	a907      	add	r1, sp, #28
 801d824:	6897      	ldr	r7, [r2, #8]
 801d826:	6810      	ldr	r0, [r2, #0]
 801d828:	aa08      	add	r2, sp, #32
 801d82a:	47b8      	blx	r7
 801d82c:	2800      	cmp	r0, #0
 801d82e:	d0ed      	beq.n	801d80c <uxr_create_session+0x68>
 801d830:	a81a      	add	r0, sp, #104	@ 0x68
 801d832:	2700      	movs	r7, #0
 801d834:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801d838:	f7f6 ffc4 	bl	80147c4 <ucdr_init_buffer>
 801d83c:	f10d 031a 	add.w	r3, sp, #26
 801d840:	aa06      	add	r2, sp, #24
 801d842:	a91a      	add	r1, sp, #104	@ 0x68
 801d844:	4620      	mov	r0, r4
 801d846:	f88d 7018 	strb.w	r7, [sp, #24]
 801d84a:	f000 f97d 	bl	801db48 <uxr_read_session_header>
 801d84e:	2800      	cmp	r0, #0
 801d850:	d0dc      	beq.n	801d80c <uxr_create_session+0x68>
 801d852:	4639      	mov	r1, r7
 801d854:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801d858:	f000 fe9a 	bl	801e590 <uxr_stream_id_from_raw>
 801d85c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801d860:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 801d864:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801d868:	2f01      	cmp	r7, #1
 801d86a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801d86e:	d053      	beq.n	801d918 <uxr_create_session+0x174>
 801d870:	2f02      	cmp	r7, #2
 801d872:	d018      	beq.n	801d8a6 <uxr_create_session+0x102>
 801d874:	2f00      	cmp	r7, #0
 801d876:	d1c9      	bne.n	801d80c <uxr_create_session+0x68>
 801d878:	4639      	mov	r1, r7
 801d87a:	4638      	mov	r0, r7
 801d87c:	f000 fe88 	bl	801e590 <uxr_stream_id_from_raw>
 801d880:	a91a      	add	r1, sp, #104	@ 0x68
 801d882:	4602      	mov	r2, r0
 801d884:	900a      	str	r0, [sp, #40]	@ 0x28
 801d886:	4620      	mov	r0, r4
 801d888:	f7ff fb1c 	bl	801cec4 <read_submessage_list>
 801d88c:	e7be      	b.n	801d80c <uxr_create_session+0x68>
 801d88e:	9b03      	ldr	r3, [sp, #12]
 801d890:	3b01      	subs	r3, #1
 801d892:	9303      	str	r3, [sp, #12]
 801d894:	d001      	beq.n	801d89a <uxr_create_session+0xf6>
 801d896:	2aff      	cmp	r2, #255	@ 0xff
 801d898:	d0ac      	beq.n	801d7f4 <uxr_create_session+0x50>
 801d89a:	2a00      	cmp	r2, #0
 801d89c:	d051      	beq.n	801d942 <uxr_create_session+0x19e>
 801d89e:	2000      	movs	r0, #0
 801d8a0:	b02b      	add	sp, #172	@ 0xac
 801d8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8a6:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801d8aa:	4641      	mov	r1, r8
 801d8ac:	4630      	mov	r0, r6
 801d8ae:	9304      	str	r3, [sp, #16]
 801d8b0:	f000 ff5c 	bl	801e76c <uxr_get_input_reliable_stream>
 801d8b4:	4682      	mov	sl, r0
 801d8b6:	b348      	cbz	r0, 801d90c <uxr_create_session+0x168>
 801d8b8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801d8ba:	a81a      	add	r0, sp, #104	@ 0x68
 801d8bc:	9205      	str	r2, [sp, #20]
 801d8be:	f7f6 ffb3 	bl	8014828 <ucdr_buffer_remaining>
 801d8c2:	4603      	mov	r3, r0
 801d8c4:	f10d 0019 	add.w	r0, sp, #25
 801d8c8:	9a05      	ldr	r2, [sp, #20]
 801d8ca:	4659      	mov	r1, fp
 801d8cc:	9000      	str	r0, [sp, #0]
 801d8ce:	4650      	mov	r0, sl
 801d8d0:	f002 ff74 	bl	80207bc <uxr_receive_reliable_message>
 801d8d4:	b1d0      	cbz	r0, 801d90c <uxr_create_session+0x168>
 801d8d6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801d8da:	2b00      	cmp	r3, #0
 801d8dc:	d038      	beq.n	801d950 <uxr_create_session+0x1ac>
 801d8de:	9f04      	ldr	r7, [sp, #16]
 801d8e0:	e00a      	b.n	801d8f8 <uxr_create_session+0x154>
 801d8e2:	f04f 0302 	mov.w	r3, #2
 801d8e6:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 801d8ea:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 801d8ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d8f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d8f4:	f7ff fae6 	bl	801cec4 <read_submessage_list>
 801d8f8:	a922      	add	r1, sp, #136	@ 0x88
 801d8fa:	2204      	movs	r2, #4
 801d8fc:	4650      	mov	r0, sl
 801d8fe:	f002 ffdf 	bl	80208c0 <uxr_next_input_reliable_buffer_available>
 801d902:	4603      	mov	r3, r0
 801d904:	a922      	add	r1, sp, #136	@ 0x88
 801d906:	4620      	mov	r0, r4
 801d908:	2b00      	cmp	r3, #0
 801d90a:	d1ea      	bne.n	801d8e2 <uxr_create_session+0x13e>
 801d90c:	4642      	mov	r2, r8
 801d90e:	9904      	ldr	r1, [sp, #16]
 801d910:	4620      	mov	r0, r4
 801d912:	f7ff f953 	bl	801cbbc <write_submessage_acknack.isra.0>
 801d916:	e779      	b.n	801d80c <uxr_create_session+0x68>
 801d918:	4641      	mov	r1, r8
 801d91a:	4630      	mov	r0, r6
 801d91c:	f000 ff1c 	bl	801e758 <uxr_get_input_best_effort_stream>
 801d920:	2800      	cmp	r0, #0
 801d922:	f43f af73 	beq.w	801d80c <uxr_create_session+0x68>
 801d926:	4659      	mov	r1, fp
 801d928:	f002 febe 	bl	80206a8 <uxr_receive_best_effort_message>
 801d92c:	2800      	cmp	r0, #0
 801d92e:	f43f af6d 	beq.w	801d80c <uxr_create_session+0x68>
 801d932:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 801d936:	a91a      	add	r1, sp, #104	@ 0x68
 801d938:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d93a:	4620      	mov	r0, r4
 801d93c:	f7ff fac2 	bl	801cec4 <read_submessage_list>
 801d940:	e764      	b.n	801d80c <uxr_create_session+0x68>
 801d942:	4630      	mov	r0, r6
 801d944:	f000 fe5a 	bl	801e5fc <uxr_reset_stream_storage>
 801d948:	2001      	movs	r0, #1
 801d94a:	b02b      	add	sp, #172	@ 0xac
 801d94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d950:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 801d954:	a91a      	add	r1, sp, #104	@ 0x68
 801d956:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d958:	4620      	mov	r0, r4
 801d95a:	f7ff fab3 	bl	801cec4 <read_submessage_list>
 801d95e:	e7be      	b.n	801d8de <uxr_create_session+0x13a>

0801d960 <uxr_prepare_stream_to_write_submessage>:
 801d960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d964:	b082      	sub	sp, #8
 801d966:	4604      	mov	r4, r0
 801d968:	4610      	mov	r0, r2
 801d96a:	4615      	mov	r5, r2
 801d96c:	461e      	mov	r6, r3
 801d96e:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 801d972:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 801d976:	f105 0904 	add.w	r9, r5, #4
 801d97a:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801d97e:	9101      	str	r1, [sp, #4]
 801d980:	f000 ff56 	bl	801e830 <uxr_submessage_padding>
 801d984:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801d988:	4481      	add	r9, r0
 801d98a:	2b01      	cmp	r3, #1
 801d98c:	d01d      	beq.n	801d9ca <uxr_prepare_stream_to_write_submessage+0x6a>
 801d98e:	2b02      	cmp	r3, #2
 801d990:	d116      	bne.n	801d9c0 <uxr_prepare_stream_to_write_submessage+0x60>
 801d992:	f104 0008 	add.w	r0, r4, #8
 801d996:	4651      	mov	r1, sl
 801d998:	f000 fed2 	bl	801e740 <uxr_get_output_reliable_stream>
 801d99c:	4604      	mov	r4, r0
 801d99e:	b158      	cbz	r0, 801d9b8 <uxr_prepare_stream_to_write_submessage+0x58>
 801d9a0:	4649      	mov	r1, r9
 801d9a2:	4632      	mov	r2, r6
 801d9a4:	f003 f952 	bl	8020c4c <uxr_prepare_reliable_buffer_to_write>
 801d9a8:	4604      	mov	r4, r0
 801d9aa:	b12c      	cbz	r4, 801d9b8 <uxr_prepare_stream_to_write_submessage+0x58>
 801d9ac:	4643      	mov	r3, r8
 801d9ae:	b2aa      	uxth	r2, r5
 801d9b0:	4639      	mov	r1, r7
 801d9b2:	4630      	mov	r0, r6
 801d9b4:	f000 fefc 	bl	801e7b0 <uxr_buffer_submessage_header>
 801d9b8:	4620      	mov	r0, r4
 801d9ba:	b002      	add	sp, #8
 801d9bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d9c0:	2400      	movs	r4, #0
 801d9c2:	4620      	mov	r0, r4
 801d9c4:	b002      	add	sp, #8
 801d9c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d9ca:	f104 0008 	add.w	r0, r4, #8
 801d9ce:	4651      	mov	r1, sl
 801d9d0:	f000 feae 	bl	801e730 <uxr_get_output_best_effort_stream>
 801d9d4:	4604      	mov	r4, r0
 801d9d6:	2800      	cmp	r0, #0
 801d9d8:	d0ee      	beq.n	801d9b8 <uxr_prepare_stream_to_write_submessage+0x58>
 801d9da:	4649      	mov	r1, r9
 801d9dc:	4632      	mov	r2, r6
 801d9de:	f003 f85f 	bl	8020aa0 <uxr_prepare_best_effort_buffer_to_write>
 801d9e2:	4604      	mov	r4, r0
 801d9e4:	e7e1      	b.n	801d9aa <uxr_prepare_stream_to_write_submessage+0x4a>
 801d9e6:	bf00      	nop

0801d9e8 <uxr_init_session_info>:
 801d9e8:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801d9ec:	23ff      	movs	r3, #255	@ 0xff
 801d9ee:	7102      	strb	r2, [r0, #4]
 801d9f0:	f880 c001 	strb.w	ip, [r0, #1]
 801d9f4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801d9f8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801d9fc:	7001      	strb	r1, [r0, #0]
 801d9fe:	f880 c002 	strb.w	ip, [r0, #2]
 801da02:	7143      	strb	r3, [r0, #5]
 801da04:	70c2      	strb	r2, [r0, #3]
 801da06:	b500      	push	{lr}
 801da08:	f04f 0e09 	mov.w	lr, #9
 801da0c:	f8a0 e006 	strh.w	lr, [r0, #6]
 801da10:	f85d fb04 	ldr.w	pc, [sp], #4

0801da14 <uxr_buffer_create_session>:
 801da14:	b530      	push	{r4, r5, lr}
 801da16:	2300      	movs	r3, #0
 801da18:	b089      	sub	sp, #36	@ 0x24
 801da1a:	4d12      	ldr	r5, [pc, #72]	@ (801da64 <uxr_buffer_create_session+0x50>)
 801da1c:	460c      	mov	r4, r1
 801da1e:	9307      	str	r3, [sp, #28]
 801da20:	4619      	mov	r1, r3
 801da22:	f8ad 201c 	strh.w	r2, [sp, #28]
 801da26:	2201      	movs	r2, #1
 801da28:	9301      	str	r3, [sp, #4]
 801da2a:	80c2      	strh	r2, [r0, #6]
 801da2c:	f88d 2004 	strb.w	r2, [sp, #4]
 801da30:	682a      	ldr	r2, [r5, #0]
 801da32:	9303      	str	r3, [sp, #12]
 801da34:	9200      	str	r2, [sp, #0]
 801da36:	88aa      	ldrh	r2, [r5, #4]
 801da38:	9306      	str	r3, [sp, #24]
 801da3a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801da3e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801da42:	9202      	str	r2, [sp, #8]
 801da44:	7802      	ldrb	r2, [r0, #0]
 801da46:	4620      	mov	r0, r4
 801da48:	f88d 200c 	strb.w	r2, [sp, #12]
 801da4c:	2210      	movs	r2, #16
 801da4e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801da52:	f000 fead 	bl	801e7b0 <uxr_buffer_submessage_header>
 801da56:	4669      	mov	r1, sp
 801da58:	4620      	mov	r0, r4
 801da5a:	f001 fdcb 	bl	801f5f4 <uxr_serialize_CREATE_CLIENT_Payload>
 801da5e:	b009      	add	sp, #36	@ 0x24
 801da60:	bd30      	pop	{r4, r5, pc}
 801da62:	bf00      	nop
 801da64:	08022c48 	.word	0x08022c48

0801da68 <uxr_buffer_delete_session>:
 801da68:	4a0c      	ldr	r2, [pc, #48]	@ (801da9c <uxr_buffer_delete_session+0x34>)
 801da6a:	2302      	movs	r3, #2
 801da6c:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 801da70:	b510      	push	{r4, lr}
 801da72:	460c      	mov	r4, r1
 801da74:	b082      	sub	sp, #8
 801da76:	8911      	ldrh	r1, [r2, #8]
 801da78:	2204      	movs	r2, #4
 801da7a:	80c3      	strh	r3, [r0, #6]
 801da7c:	2300      	movs	r3, #0
 801da7e:	f8ad 1006 	strh.w	r1, [sp, #6]
 801da82:	4620      	mov	r0, r4
 801da84:	2103      	movs	r1, #3
 801da86:	f8ad c004 	strh.w	ip, [sp, #4]
 801da8a:	f000 fe91 	bl	801e7b0 <uxr_buffer_submessage_header>
 801da8e:	a901      	add	r1, sp, #4
 801da90:	4620      	mov	r0, r4
 801da92:	f001 fe57 	bl	801f744 <uxr_serialize_DELETE_Payload>
 801da96:	b002      	add	sp, #8
 801da98:	bd10      	pop	{r4, pc}
 801da9a:	bf00      	nop
 801da9c:	08022c48 	.word	0x08022c48

0801daa0 <uxr_read_create_session_status>:
 801daa0:	b510      	push	{r4, lr}
 801daa2:	460b      	mov	r3, r1
 801daa4:	b088      	sub	sp, #32
 801daa6:	4604      	mov	r4, r0
 801daa8:	a901      	add	r1, sp, #4
 801daaa:	4618      	mov	r0, r3
 801daac:	f001 fe5a 	bl	801f764 <uxr_deserialize_STATUS_AGENT_Payload>
 801dab0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801dab4:	7163      	strb	r3, [r4, #5]
 801dab6:	b008      	add	sp, #32
 801dab8:	bd10      	pop	{r4, pc}
 801daba:	bf00      	nop

0801dabc <uxr_read_delete_session_status>:
 801dabc:	b510      	push	{r4, lr}
 801dabe:	b084      	sub	sp, #16
 801dac0:	4604      	mov	r4, r0
 801dac2:	4608      	mov	r0, r1
 801dac4:	a902      	add	r1, sp, #8
 801dac6:	f001 fe7d 	bl	801f7c4 <uxr_deserialize_STATUS_Payload>
 801daca:	88e3      	ldrh	r3, [r4, #6]
 801dacc:	2b02      	cmp	r3, #2
 801dace:	d001      	beq.n	801dad4 <uxr_read_delete_session_status+0x18>
 801dad0:	b004      	add	sp, #16
 801dad2:	bd10      	pop	{r4, pc}
 801dad4:	f10d 000a 	add.w	r0, sp, #10
 801dad8:	f7fe fec6 	bl	801c868 <uxr_object_id_from_raw>
 801dadc:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801dae0:	f89d 3009 	ldrb.w	r3, [sp, #9]
 801dae4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801dae8:	b29b      	uxth	r3, r3
 801daea:	2b02      	cmp	r3, #2
 801daec:	d1f0      	bne.n	801dad0 <uxr_read_delete_session_status+0x14>
 801daee:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801daf2:	7163      	strb	r3, [r4, #5]
 801daf4:	e7ec      	b.n	801dad0 <uxr_read_delete_session_status+0x14>
 801daf6:	bf00      	nop

0801daf8 <uxr_stamp_create_session_header>:
 801daf8:	b510      	push	{r4, lr}
 801dafa:	2208      	movs	r2, #8
 801dafc:	b08a      	sub	sp, #40	@ 0x28
 801dafe:	4604      	mov	r4, r0
 801db00:	eb0d 0002 	add.w	r0, sp, r2
 801db04:	f7f6 fe5e 	bl	80147c4 <ucdr_init_buffer>
 801db08:	f814 1b01 	ldrb.w	r1, [r4], #1
 801db0c:	2300      	movs	r3, #0
 801db0e:	a802      	add	r0, sp, #8
 801db10:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801db14:	9400      	str	r4, [sp, #0]
 801db16:	461a      	mov	r2, r3
 801db18:	f000 fef2 	bl	801e900 <uxr_serialize_message_header>
 801db1c:	b00a      	add	sp, #40	@ 0x28
 801db1e:	bd10      	pop	{r4, pc}

0801db20 <uxr_stamp_session_header>:
 801db20:	b530      	push	{r4, r5, lr}
 801db22:	b08d      	sub	sp, #52	@ 0x34
 801db24:	4604      	mov	r4, r0
 801db26:	460d      	mov	r5, r1
 801db28:	4619      	mov	r1, r3
 801db2a:	a804      	add	r0, sp, #16
 801db2c:	9203      	str	r2, [sp, #12]
 801db2e:	2208      	movs	r2, #8
 801db30:	f7f6 fe48 	bl	80147c4 <ucdr_init_buffer>
 801db34:	f814 1b01 	ldrb.w	r1, [r4], #1
 801db38:	9b03      	ldr	r3, [sp, #12]
 801db3a:	462a      	mov	r2, r5
 801db3c:	a804      	add	r0, sp, #16
 801db3e:	9400      	str	r4, [sp, #0]
 801db40:	f000 fede 	bl	801e900 <uxr_serialize_message_header>
 801db44:	b00d      	add	sp, #52	@ 0x34
 801db46:	bd30      	pop	{r4, r5, pc}

0801db48 <uxr_read_session_header>:
 801db48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db4c:	4607      	mov	r7, r0
 801db4e:	b084      	sub	sp, #16
 801db50:	4608      	mov	r0, r1
 801db52:	460c      	mov	r4, r1
 801db54:	4615      	mov	r5, r2
 801db56:	461e      	mov	r6, r3
 801db58:	f7f6 fe66 	bl	8014828 <ucdr_buffer_remaining>
 801db5c:	2808      	cmp	r0, #8
 801db5e:	d803      	bhi.n	801db68 <uxr_read_session_header+0x20>
 801db60:	2000      	movs	r0, #0
 801db62:	b004      	add	sp, #16
 801db64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db68:	f10d 080c 	add.w	r8, sp, #12
 801db6c:	4633      	mov	r3, r6
 801db6e:	462a      	mov	r2, r5
 801db70:	4620      	mov	r0, r4
 801db72:	f10d 010b 	add.w	r1, sp, #11
 801db76:	f8cd 8000 	str.w	r8, [sp]
 801db7a:	f000 fedf 	bl	801e93c <uxr_deserialize_message_header>
 801db7e:	783a      	ldrb	r2, [r7, #0]
 801db80:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801db84:	4293      	cmp	r3, r2
 801db86:	d1eb      	bne.n	801db60 <uxr_read_session_header+0x18>
 801db88:	061b      	lsls	r3, r3, #24
 801db8a:	d41b      	bmi.n	801dbc4 <uxr_read_session_header+0x7c>
 801db8c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801db90:	787b      	ldrb	r3, [r7, #1]
 801db92:	429a      	cmp	r2, r3
 801db94:	d003      	beq.n	801db9e <uxr_read_session_header+0x56>
 801db96:	2001      	movs	r0, #1
 801db98:	f080 0001 	eor.w	r0, r0, #1
 801db9c:	e7e1      	b.n	801db62 <uxr_read_session_header+0x1a>
 801db9e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801dba2:	1cb8      	adds	r0, r7, #2
 801dba4:	78bb      	ldrb	r3, [r7, #2]
 801dba6:	429a      	cmp	r2, r3
 801dba8:	d1f5      	bne.n	801db96 <uxr_read_session_header+0x4e>
 801dbaa:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801dbae:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801dbb2:	429a      	cmp	r2, r3
 801dbb4:	d1ef      	bne.n	801db96 <uxr_read_session_header+0x4e>
 801dbb6:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801dbba:	7843      	ldrb	r3, [r0, #1]
 801dbbc:	429a      	cmp	r2, r3
 801dbbe:	d1ea      	bne.n	801db96 <uxr_read_session_header+0x4e>
 801dbc0:	2000      	movs	r0, #0
 801dbc2:	e7e9      	b.n	801db98 <uxr_read_session_header+0x50>
 801dbc4:	2001      	movs	r0, #1
 801dbc6:	e7cc      	b.n	801db62 <uxr_read_session_header+0x1a>

0801dbc8 <uxr_session_header_offset>:
 801dbc8:	f990 3000 	ldrsb.w	r3, [r0]
 801dbcc:	2b00      	cmp	r3, #0
 801dbce:	bfac      	ite	ge
 801dbd0:	2008      	movge	r0, #8
 801dbd2:	2004      	movlt	r0, #4
 801dbd4:	4770      	bx	lr
 801dbd6:	bf00      	nop

0801dbd8 <uxr_init_base_object_request>:
 801dbd8:	b510      	push	{r4, lr}
 801dbda:	b082      	sub	sp, #8
 801dbdc:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 801dbe0:	9101      	str	r1, [sp, #4]
 801dbe2:	88c3      	ldrh	r3, [r0, #6]
 801dbe4:	f1a3 010a 	sub.w	r1, r3, #10
 801dbe8:	b289      	uxth	r1, r1
 801dbea:	42a1      	cmp	r1, r4
 801dbec:	d80f      	bhi.n	801dc0e <uxr_init_base_object_request+0x36>
 801dbee:	3301      	adds	r3, #1
 801dbf0:	b29c      	uxth	r4, r3
 801dbf2:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 801dbf6:	b2db      	uxtb	r3, r3
 801dbf8:	80c4      	strh	r4, [r0, #6]
 801dbfa:	1c91      	adds	r1, r2, #2
 801dbfc:	9801      	ldr	r0, [sp, #4]
 801dbfe:	f882 c000 	strb.w	ip, [r2]
 801dc02:	7053      	strb	r3, [r2, #1]
 801dc04:	f7fe fe44 	bl	801c890 <uxr_object_id_to_raw>
 801dc08:	4620      	mov	r0, r4
 801dc0a:	b002      	add	sp, #8
 801dc0c:	bd10      	pop	{r4, pc}
 801dc0e:	230a      	movs	r3, #10
 801dc10:	f04f 0c00 	mov.w	ip, #0
 801dc14:	461c      	mov	r4, r3
 801dc16:	e7ef      	b.n	801dbf8 <uxr_init_base_object_request+0x20>

0801dc18 <uxr_parse_base_object_request>:
 801dc18:	b570      	push	{r4, r5, r6, lr}
 801dc1a:	4604      	mov	r4, r0
 801dc1c:	3002      	adds	r0, #2
 801dc1e:	460d      	mov	r5, r1
 801dc20:	4616      	mov	r6, r2
 801dc22:	f7fe fe21 	bl	801c868 <uxr_object_id_from_raw>
 801dc26:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801dc2a:	8028      	strh	r0, [r5, #0]
 801dc2c:	806b      	strh	r3, [r5, #2]
 801dc2e:	7822      	ldrb	r2, [r4, #0]
 801dc30:	7863      	ldrb	r3, [r4, #1]
 801dc32:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801dc36:	8033      	strh	r3, [r6, #0]
 801dc38:	bd70      	pop	{r4, r5, r6, pc}
 801dc3a:	bf00      	nop

0801dc3c <uxr_init_framing_io>:
 801dc3c:	2300      	movs	r3, #0
 801dc3e:	7041      	strb	r1, [r0, #1]
 801dc40:	7003      	strb	r3, [r0, #0]
 801dc42:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801dc44:	4770      	bx	lr
 801dc46:	bf00      	nop

0801dc48 <uxr_write_framed_msg>:
 801dc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc4c:	4617      	mov	r7, r2
 801dc4e:	7842      	ldrb	r2, [r0, #1]
 801dc50:	460e      	mov	r6, r1
 801dc52:	b083      	sub	sp, #12
 801dc54:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 801dc58:	469b      	mov	fp, r3
 801dc5a:	237e      	movs	r3, #126	@ 0x7e
 801dc5c:	4604      	mov	r4, r0
 801dc5e:	2901      	cmp	r1, #1
 801dc60:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801dc64:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801dc68:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801dc6c:	f240 8115 	bls.w	801de9a <uxr_write_framed_msg+0x252>
 801dc70:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801dc74:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 801dc78:	2202      	movs	r2, #2
 801dc7a:	2901      	cmp	r1, #1
 801dc7c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801dc80:	d952      	bls.n	801dd28 <uxr_write_framed_msg+0xe0>
 801dc82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dc84:	2103      	movs	r1, #3
 801dc86:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 801dc8a:	b2dd      	uxtb	r5, r3
 801dc8c:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801dc90:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 801dc94:	2a01      	cmp	r2, #1
 801dc96:	d95c      	bls.n	801dd52 <uxr_write_framed_msg+0x10a>
 801dc98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dc9a:	1862      	adds	r2, r4, r1
 801dc9c:	3101      	adds	r1, #1
 801dc9e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801dca2:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 801dca6:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801dcaa:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 801dcae:	2a01      	cmp	r2, #1
 801dcb0:	d961      	bls.n	801dd76 <uxr_write_framed_msg+0x12e>
 801dcb2:	1c4a      	adds	r2, r1, #1
 801dcb4:	4421      	add	r1, r4
 801dcb6:	b2d2      	uxtb	r2, r2
 801dcb8:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801dcbc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801dcc0:	2b00      	cmp	r3, #0
 801dcc2:	d06a      	beq.n	801dd9a <uxr_write_framed_msg+0x152>
 801dcc4:	f04f 0800 	mov.w	r8, #0
 801dcc8:	46c1      	mov	r9, r8
 801dcca:	e016      	b.n	801dcfa <uxr_write_framed_msg+0xb2>
 801dccc:	2a29      	cmp	r2, #41	@ 0x29
 801dcce:	d868      	bhi.n	801dda2 <uxr_write_framed_msg+0x15a>
 801dcd0:	18a0      	adds	r0, r4, r2
 801dcd2:	3201      	adds	r2, #1
 801dcd4:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801dcd8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801dcdc:	ea88 0101 	eor.w	r1, r8, r1
 801dce0:	4b7d      	ldr	r3, [pc, #500]	@ (801ded8 <uxr_write_framed_msg+0x290>)
 801dce2:	f109 0901 	add.w	r9, r9, #1
 801dce6:	b2c9      	uxtb	r1, r1
 801dce8:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 801dcec:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 801dcf0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dcf2:	454b      	cmp	r3, r9
 801dcf4:	d969      	bls.n	801ddca <uxr_write_framed_msg+0x182>
 801dcf6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801dcfa:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801dcfe:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801dd02:	2801      	cmp	r0, #1
 801dd04:	d8e2      	bhi.n	801dccc <uxr_write_framed_msg+0x84>
 801dd06:	1c50      	adds	r0, r2, #1
 801dd08:	b2c0      	uxtb	r0, r0
 801dd0a:	2829      	cmp	r0, #41	@ 0x29
 801dd0c:	d849      	bhi.n	801dda2 <uxr_write_framed_msg+0x15a>
 801dd0e:	18a0      	adds	r0, r4, r2
 801dd10:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 801dd14:	3202      	adds	r2, #2
 801dd16:	f081 0520 	eor.w	r5, r1, #32
 801dd1a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801dd1e:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 801dd22:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801dd26:	e7d9      	b.n	801dcdc <uxr_write_framed_msg+0x94>
 801dd28:	2104      	movs	r1, #4
 801dd2a:	f04f 0c03 	mov.w	ip, #3
 801dd2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dd30:	4422      	add	r2, r4
 801dd32:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 801dd36:	44a4      	add	ip, r4
 801dd38:	b2dd      	uxtb	r5, r3
 801dd3a:	f080 0020 	eor.w	r0, r0, #32
 801dd3e:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 801dd42:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 801dd46:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 801dd4a:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801dd4e:	2a01      	cmp	r2, #1
 801dd50:	d8a2      	bhi.n	801dc98 <uxr_write_framed_msg+0x50>
 801dd52:	1862      	adds	r2, r4, r1
 801dd54:	207d      	movs	r0, #125	@ 0x7d
 801dd56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dd58:	f085 0520 	eor.w	r5, r5, #32
 801dd5c:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 801dd60:	3102      	adds	r1, #2
 801dd62:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801dd66:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 801dd6a:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801dd6e:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 801dd72:	2a01      	cmp	r2, #1
 801dd74:	d89d      	bhi.n	801dcb2 <uxr_write_framed_msg+0x6a>
 801dd76:	1c4d      	adds	r5, r1, #1
 801dd78:	1c8a      	adds	r2, r1, #2
 801dd7a:	f080 0020 	eor.w	r0, r0, #32
 801dd7e:	4421      	add	r1, r4
 801dd80:	fa54 f585 	uxtab	r5, r4, r5
 801dd84:	b2d2      	uxtb	r2, r2
 801dd86:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801dd8a:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 801dd8e:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 801dd92:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801dd96:	2b00      	cmp	r3, #0
 801dd98:	d194      	bne.n	801dcc4 <uxr_write_framed_msg+0x7c>
 801dd9a:	4619      	mov	r1, r3
 801dd9c:	f8ad 3004 	strh.w	r3, [sp, #4]
 801dda0:	e019      	b.n	801ddd6 <uxr_write_framed_msg+0x18e>
 801dda2:	2500      	movs	r5, #0
 801dda4:	e000      	b.n	801dda8 <uxr_write_framed_msg+0x160>
 801dda6:	b160      	cbz	r0, 801ddc2 <uxr_write_framed_msg+0x17a>
 801dda8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801ddac:	1b52      	subs	r2, r2, r5
 801ddae:	4653      	mov	r3, sl
 801ddb0:	4638      	mov	r0, r7
 801ddb2:	4421      	add	r1, r4
 801ddb4:	47b0      	blx	r6
 801ddb6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801ddba:	4405      	add	r5, r0
 801ddbc:	4295      	cmp	r5, r2
 801ddbe:	d3f2      	bcc.n	801dda6 <uxr_write_framed_msg+0x15e>
 801ddc0:	d066      	beq.n	801de90 <uxr_write_framed_msg+0x248>
 801ddc2:	2000      	movs	r0, #0
 801ddc4:	b003      	add	sp, #12
 801ddc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddca:	fa5f f188 	uxtb.w	r1, r8
 801ddce:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801ddd2:	f8ad 8004 	strh.w	r8, [sp, #4]
 801ddd6:	f04f 0900 	mov.w	r9, #0
 801ddda:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 801ddde:	46c8      	mov	r8, r9
 801dde0:	e013      	b.n	801de0a <uxr_write_framed_msg+0x1c2>
 801dde2:	2a29      	cmp	r2, #41	@ 0x29
 801dde4:	d824      	bhi.n	801de30 <uxr_write_framed_msg+0x1e8>
 801dde6:	18a3      	adds	r3, r4, r2
 801dde8:	3201      	adds	r2, #1
 801ddea:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 801ddee:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801ddf2:	f109 0901 	add.w	r9, r9, #1
 801ddf6:	f1b9 0f02 	cmp.w	r9, #2
 801ddfa:	d02d      	beq.n	801de58 <uxr_write_framed_msg+0x210>
 801ddfc:	f109 0308 	add.w	r3, r9, #8
 801de00:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801de04:	446b      	add	r3, sp
 801de06:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 801de0a:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 801de0e:	2b01      	cmp	r3, #1
 801de10:	d8e7      	bhi.n	801dde2 <uxr_write_framed_msg+0x19a>
 801de12:	1c53      	adds	r3, r2, #1
 801de14:	b2db      	uxtb	r3, r3
 801de16:	2b29      	cmp	r3, #41	@ 0x29
 801de18:	d80a      	bhi.n	801de30 <uxr_write_framed_msg+0x1e8>
 801de1a:	18a3      	adds	r3, r4, r2
 801de1c:	f081 0120 	eor.w	r1, r1, #32
 801de20:	3202      	adds	r2, #2
 801de22:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 801de26:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 801de2a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801de2e:	e7e0      	b.n	801ddf2 <uxr_write_framed_msg+0x1aa>
 801de30:	2500      	movs	r5, #0
 801de32:	e001      	b.n	801de38 <uxr_write_framed_msg+0x1f0>
 801de34:	2800      	cmp	r0, #0
 801de36:	d0c4      	beq.n	801ddc2 <uxr_write_framed_msg+0x17a>
 801de38:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801de3c:	1b52      	subs	r2, r2, r5
 801de3e:	4653      	mov	r3, sl
 801de40:	4638      	mov	r0, r7
 801de42:	4421      	add	r1, r4
 801de44:	47b0      	blx	r6
 801de46:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801de4a:	4405      	add	r5, r0
 801de4c:	4295      	cmp	r5, r2
 801de4e:	d3f1      	bcc.n	801de34 <uxr_write_framed_msg+0x1ec>
 801de50:	d1b7      	bne.n	801ddc2 <uxr_write_framed_msg+0x17a>
 801de52:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 801de56:	e7d1      	b.n	801ddfc <uxr_write_framed_msg+0x1b4>
 801de58:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801de5c:	b19a      	cbz	r2, 801de86 <uxr_write_framed_msg+0x23e>
 801de5e:	2500      	movs	r5, #0
 801de60:	e001      	b.n	801de66 <uxr_write_framed_msg+0x21e>
 801de62:	2800      	cmp	r0, #0
 801de64:	d0ad      	beq.n	801ddc2 <uxr_write_framed_msg+0x17a>
 801de66:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801de6a:	1b52      	subs	r2, r2, r5
 801de6c:	4653      	mov	r3, sl
 801de6e:	4638      	mov	r0, r7
 801de70:	4421      	add	r1, r4
 801de72:	47b0      	blx	r6
 801de74:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801de78:	4405      	add	r5, r0
 801de7a:	4295      	cmp	r5, r2
 801de7c:	d3f1      	bcc.n	801de62 <uxr_write_framed_msg+0x21a>
 801de7e:	d1a0      	bne.n	801ddc2 <uxr_write_framed_msg+0x17a>
 801de80:	2300      	movs	r3, #0
 801de82:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801de86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801de88:	b298      	uxth	r0, r3
 801de8a:	b003      	add	sp, #12
 801de8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de90:	f04f 0300 	mov.w	r3, #0
 801de94:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801de98:	e72a      	b.n	801dcf0 <uxr_write_framed_msg+0xa8>
 801de9a:	217d      	movs	r1, #125	@ 0x7d
 801de9c:	f082 0220 	eor.w	r2, r2, #32
 801dea0:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 801dea4:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801dea8:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801deac:	2203      	movs	r2, #3
 801deae:	2901      	cmp	r1, #1
 801deb0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801deb4:	d803      	bhi.n	801debe <uxr_write_framed_msg+0x276>
 801deb6:	2105      	movs	r1, #5
 801deb8:	f04f 0c04 	mov.w	ip, #4
 801debc:	e737      	b.n	801dd2e <uxr_write_framed_msg+0xe6>
 801debe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dec0:	2104      	movs	r1, #4
 801dec2:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 801dec6:	b2dd      	uxtb	r5, r3
 801dec8:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801decc:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 801ded0:	2a01      	cmp	r2, #1
 801ded2:	f63f aee1 	bhi.w	801dc98 <uxr_write_framed_msg+0x50>
 801ded6:	e73c      	b.n	801dd52 <uxr_write_framed_msg+0x10a>
 801ded8:	08024da4 	.word	0x08024da4

0801dedc <uxr_framing_read_transport>:
 801dedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dee0:	4604      	mov	r4, r0
 801dee2:	b085      	sub	sp, #20
 801dee4:	4692      	mov	sl, r2
 801dee6:	4689      	mov	r9, r1
 801dee8:	461d      	mov	r5, r3
 801deea:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801deec:	f000 fca6 	bl	801e83c <uxr_millis>
 801def0:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 801def4:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 801def8:	4680      	mov	r8, r0
 801defa:	42ba      	cmp	r2, r7
 801defc:	d05f      	beq.n	801dfbe <uxr_framing_read_transport+0xe2>
 801defe:	d817      	bhi.n	801df30 <uxr_framing_read_transport+0x54>
 801df00:	3f01      	subs	r7, #1
 801df02:	1aba      	subs	r2, r7, r2
 801df04:	2700      	movs	r7, #0
 801df06:	b2d2      	uxtb	r2, r2
 801df08:	42b2      	cmp	r2, r6
 801df0a:	d81a      	bhi.n	801df42 <uxr_framing_read_transport+0x66>
 801df0c:	19d3      	adds	r3, r2, r7
 801df0e:	42b3      	cmp	r3, r6
 801df10:	d852      	bhi.n	801dfb8 <uxr_framing_read_transport+0xdc>
 801df12:	b9d2      	cbnz	r2, 801df4a <uxr_framing_read_transport+0x6e>
 801df14:	2600      	movs	r6, #0
 801df16:	f000 fc91 	bl	801e83c <uxr_millis>
 801df1a:	682b      	ldr	r3, [r5, #0]
 801df1c:	eba0 0008 	sub.w	r0, r0, r8
 801df20:	1a1b      	subs	r3, r3, r0
 801df22:	4630      	mov	r0, r6
 801df24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801df28:	602b      	str	r3, [r5, #0]
 801df2a:	b005      	add	sp, #20
 801df2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df30:	2f00      	cmp	r7, #0
 801df32:	d060      	beq.n	801dff6 <uxr_framing_read_transport+0x11a>
 801df34:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 801df38:	3f01      	subs	r7, #1
 801df3a:	b2d2      	uxtb	r2, r2
 801df3c:	b2ff      	uxtb	r7, r7
 801df3e:	42b2      	cmp	r2, r6
 801df40:	d9e4      	bls.n	801df0c <uxr_framing_read_transport+0x30>
 801df42:	b2f2      	uxtb	r2, r6
 801df44:	2700      	movs	r7, #0
 801df46:	2a00      	cmp	r2, #0
 801df48:	d0e4      	beq.n	801df14 <uxr_framing_read_transport+0x38>
 801df4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801df4c:	4650      	mov	r0, sl
 801df4e:	9203      	str	r2, [sp, #12]
 801df50:	9300      	str	r3, [sp, #0]
 801df52:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801df56:	682b      	ldr	r3, [r5, #0]
 801df58:	3102      	adds	r1, #2
 801df5a:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 801e000 <uxr_framing_read_transport+0x124>
 801df5e:	4421      	add	r1, r4
 801df60:	47c8      	blx	r9
 801df62:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801df66:	4606      	mov	r6, r0
 801df68:	4403      	add	r3, r0
 801df6a:	0859      	lsrs	r1, r3, #1
 801df6c:	fbab 2101 	umull	r2, r1, fp, r1
 801df70:	222a      	movs	r2, #42	@ 0x2a
 801df72:	0889      	lsrs	r1, r1, #2
 801df74:	fb02 3111 	mls	r1, r2, r1, r3
 801df78:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 801df7c:	2800      	cmp	r0, #0
 801df7e:	d0c9      	beq.n	801df14 <uxr_framing_read_transport+0x38>
 801df80:	9a03      	ldr	r2, [sp, #12]
 801df82:	4290      	cmp	r0, r2
 801df84:	d1c7      	bne.n	801df16 <uxr_framing_read_transport+0x3a>
 801df86:	2f00      	cmp	r7, #0
 801df88:	d0c5      	beq.n	801df16 <uxr_framing_read_transport+0x3a>
 801df8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801df8c:	3102      	adds	r1, #2
 801df8e:	463a      	mov	r2, r7
 801df90:	4650      	mov	r0, sl
 801df92:	4421      	add	r1, r4
 801df94:	9300      	str	r3, [sp, #0]
 801df96:	2300      	movs	r3, #0
 801df98:	47c8      	blx	r9
 801df9a:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 801df9e:	4406      	add	r6, r0
 801dfa0:	1813      	adds	r3, r2, r0
 801dfa2:	085a      	lsrs	r2, r3, #1
 801dfa4:	fbab 1b02 	umull	r1, fp, fp, r2
 801dfa8:	222a      	movs	r2, #42	@ 0x2a
 801dfaa:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 801dfae:	fb02 331b 	mls	r3, r2, fp, r3
 801dfb2:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801dfb6:	e7ae      	b.n	801df16 <uxr_framing_read_transport+0x3a>
 801dfb8:	1ab6      	subs	r6, r6, r2
 801dfba:	b2f7      	uxtb	r7, r6
 801dfbc:	e7a9      	b.n	801df12 <uxr_framing_read_transport+0x36>
 801dfbe:	2300      	movs	r3, #0
 801dfc0:	2e28      	cmp	r6, #40	@ 0x28
 801dfc2:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 801dfc4:	d9bd      	bls.n	801df42 <uxr_framing_read_transport+0x66>
 801dfc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dfc8:	2229      	movs	r2, #41	@ 0x29
 801dfca:	1ca1      	adds	r1, r4, #2
 801dfcc:	4650      	mov	r0, sl
 801dfce:	9300      	str	r3, [sp, #0]
 801dfd0:	682b      	ldr	r3, [r5, #0]
 801dfd2:	47c8      	blx	r9
 801dfd4:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801dfd8:	4606      	mov	r6, r0
 801dfda:	212a      	movs	r1, #42	@ 0x2a
 801dfdc:	4403      	add	r3, r0
 801dfde:	4808      	ldr	r0, [pc, #32]	@ (801e000 <uxr_framing_read_transport+0x124>)
 801dfe0:	085a      	lsrs	r2, r3, #1
 801dfe2:	fba0 0202 	umull	r0, r2, r0, r2
 801dfe6:	0892      	lsrs	r2, r2, #2
 801dfe8:	fb01 3312 	mls	r3, r1, r2, r3
 801dfec:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801dff0:	2e00      	cmp	r6, #0
 801dff2:	d08f      	beq.n	801df14 <uxr_framing_read_transport+0x38>
 801dff4:	e78f      	b.n	801df16 <uxr_framing_read_transport+0x3a>
 801dff6:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 801dffa:	b2d2      	uxtb	r2, r2
 801dffc:	e784      	b.n	801df08 <uxr_framing_read_transport+0x2c>
 801dffe:	bf00      	nop
 801e000:	30c30c31 	.word	0x30c30c31

0801e004 <uxr_read_framed_msg>:
 801e004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e008:	461e      	mov	r6, r3
 801e00a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801e00e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801e012:	b083      	sub	sp, #12
 801e014:	4604      	mov	r4, r0
 801e016:	4688      	mov	r8, r1
 801e018:	429d      	cmp	r5, r3
 801e01a:	4691      	mov	r9, r2
 801e01c:	f000 818c 	beq.w	801e338 <uxr_read_framed_msg+0x334>
 801e020:	7823      	ldrb	r3, [r4, #0]
 801e022:	4dc3      	ldr	r5, [pc, #780]	@ (801e330 <uxr_read_framed_msg+0x32c>)
 801e024:	4fc3      	ldr	r7, [pc, #780]	@ (801e334 <uxr_read_framed_msg+0x330>)
 801e026:	2b07      	cmp	r3, #7
 801e028:	d8fd      	bhi.n	801e026 <uxr_read_framed_msg+0x22>
 801e02a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801e02e:	011c      	.short	0x011c
 801e030:	00d900fb 	.word	0x00d900fb
 801e034:	008f00ba 	.word	0x008f00ba
 801e038:	00320051 	.word	0x00320051
 801e03c:	0008      	.short	0x0008
 801e03e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801e042:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801e046:	4299      	cmp	r1, r3
 801e048:	f000 814d 	beq.w	801e2e6 <uxr_read_framed_msg+0x2e2>
 801e04c:	18e2      	adds	r2, r4, r3
 801e04e:	7892      	ldrb	r2, [r2, #2]
 801e050:	2a7d      	cmp	r2, #125	@ 0x7d
 801e052:	f000 81b8 	beq.w	801e3c6 <uxr_read_framed_msg+0x3c2>
 801e056:	3301      	adds	r3, #1
 801e058:	212a      	movs	r1, #42	@ 0x2a
 801e05a:	2a7e      	cmp	r2, #126	@ 0x7e
 801e05c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801e060:	fba5 c000 	umull	ip, r0, r5, r0
 801e064:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801e068:	fb01 3310 	mls	r3, r1, r0, r3
 801e06c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801e070:	f000 8257 	beq.w	801e522 <uxr_read_framed_msg+0x51e>
 801e074:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801e076:	2000      	movs	r0, #0
 801e078:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 801e07a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801e07e:	7020      	strb	r0, [r4, #0]
 801e080:	b29b      	uxth	r3, r3
 801e082:	4299      	cmp	r1, r3
 801e084:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801e086:	f000 8178 	beq.w	801e37a <uxr_read_framed_msg+0x376>
 801e08a:	2000      	movs	r0, #0
 801e08c:	b003      	add	sp, #12
 801e08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e092:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801e096:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801e09a:	4298      	cmp	r0, r3
 801e09c:	f000 8132 	beq.w	801e304 <uxr_read_framed_msg+0x300>
 801e0a0:	18e2      	adds	r2, r4, r3
 801e0a2:	7891      	ldrb	r1, [r2, #2]
 801e0a4:	297d      	cmp	r1, #125	@ 0x7d
 801e0a6:	f000 8170 	beq.w	801e38a <uxr_read_framed_msg+0x386>
 801e0aa:	3301      	adds	r3, #1
 801e0ac:	202a      	movs	r0, #42	@ 0x2a
 801e0ae:	297e      	cmp	r1, #126	@ 0x7e
 801e0b0:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801e0b4:	fba5 c202 	umull	ip, r2, r5, r2
 801e0b8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801e0bc:	fb00 3312 	mls	r3, r0, r2, r3
 801e0c0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801e0c4:	f000 821d 	beq.w	801e502 <uxr_read_framed_msg+0x4fe>
 801e0c8:	2307      	movs	r3, #7
 801e0ca:	86a1      	strh	r1, [r4, #52]	@ 0x34
 801e0cc:	7023      	strb	r3, [r4, #0]
 801e0ce:	e7aa      	b.n	801e026 <uxr_read_framed_msg+0x22>
 801e0d0:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801e0d2:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801e0d6:	459e      	cmp	lr, r3
 801e0d8:	d827      	bhi.n	801e12a <uxr_read_framed_msg+0x126>
 801e0da:	e032      	b.n	801e142 <uxr_read_framed_msg+0x13e>
 801e0dc:	fba5 b101 	umull	fp, r1, r5, r1
 801e0e0:	f89c c002 	ldrb.w	ip, [ip, #2]
 801e0e4:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 801e0e8:	0889      	lsrs	r1, r1, #2
 801e0ea:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801e0ee:	fb0b 0111 	mls	r1, fp, r1, r0
 801e0f2:	f000 80d4 	beq.w	801e29e <uxr_read_framed_msg+0x29a>
 801e0f6:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801e0fa:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 801e0fe:	f000 80cb 	beq.w	801e298 <uxr_read_framed_msg+0x294>
 801e102:	f806 c003 	strb.w	ip, [r6, r3]
 801e106:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 801e108:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801e10a:	ea80 010c 	eor.w	r1, r0, ip
 801e10e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801e112:	3301      	adds	r3, #1
 801e114:	b2c9      	uxtb	r1, r1
 801e116:	b29b      	uxth	r3, r3
 801e118:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 801e11c:	4573      	cmp	r3, lr
 801e11e:	8663      	strh	r3, [r4, #50]	@ 0x32
 801e120:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 801e124:	86e2      	strh	r2, [r4, #54]	@ 0x36
 801e126:	f080 811d 	bcs.w	801e364 <uxr_read_framed_msg+0x360>
 801e12a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801e12e:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801e132:	1c50      	adds	r0, r2, #1
 801e134:	eb04 0c02 	add.w	ip, r4, r2
 801e138:	4592      	cmp	sl, r2
 801e13a:	ea4f 0150 	mov.w	r1, r0, lsr #1
 801e13e:	d1cd      	bne.n	801e0dc <uxr_read_framed_msg+0xd8>
 801e140:	459e      	cmp	lr, r3
 801e142:	f040 8114 	bne.w	801e36e <uxr_read_framed_msg+0x36a>
 801e146:	2306      	movs	r3, #6
 801e148:	7023      	strb	r3, [r4, #0]
 801e14a:	e76c      	b.n	801e026 <uxr_read_framed_msg+0x22>
 801e14c:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801e150:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801e154:	4298      	cmp	r0, r3
 801e156:	f000 80c6 	beq.w	801e2e6 <uxr_read_framed_msg+0x2e2>
 801e15a:	18e2      	adds	r2, r4, r3
 801e15c:	7891      	ldrb	r1, [r2, #2]
 801e15e:	297d      	cmp	r1, #125	@ 0x7d
 801e160:	f000 8193 	beq.w	801e48a <uxr_read_framed_msg+0x486>
 801e164:	3301      	adds	r3, #1
 801e166:	202a      	movs	r0, #42	@ 0x2a
 801e168:	297e      	cmp	r1, #126	@ 0x7e
 801e16a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801e16e:	fba5 c202 	umull	ip, r2, r5, r2
 801e172:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801e176:	fb00 3312 	mls	r3, r0, r2, r3
 801e17a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801e17e:	f000 81d0 	beq.w	801e522 <uxr_read_framed_msg+0x51e>
 801e182:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801e184:	2000      	movs	r0, #0
 801e186:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801e18a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801e18c:	8660      	strh	r0, [r4, #50]	@ 0x32
 801e18e:	b29b      	uxth	r3, r3
 801e190:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801e192:	428b      	cmp	r3, r1
 801e194:	8623      	strh	r3, [r4, #48]	@ 0x30
 801e196:	f240 80e2 	bls.w	801e35e <uxr_read_framed_msg+0x35a>
 801e19a:	7020      	strb	r0, [r4, #0]
 801e19c:	b003      	add	sp, #12
 801e19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1a2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801e1a6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801e1aa:	4298      	cmp	r0, r3
 801e1ac:	f000 80aa 	beq.w	801e304 <uxr_read_framed_msg+0x300>
 801e1b0:	18e2      	adds	r2, r4, r3
 801e1b2:	7891      	ldrb	r1, [r2, #2]
 801e1b4:	297d      	cmp	r1, #125	@ 0x7d
 801e1b6:	f000 8186 	beq.w	801e4c6 <uxr_read_framed_msg+0x4c2>
 801e1ba:	3301      	adds	r3, #1
 801e1bc:	202a      	movs	r0, #42	@ 0x2a
 801e1be:	297e      	cmp	r1, #126	@ 0x7e
 801e1c0:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801e1c4:	fba5 c202 	umull	ip, r2, r5, r2
 801e1c8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801e1cc:	fb00 3312 	mls	r3, r0, r2, r3
 801e1d0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801e1d4:	f000 8195 	beq.w	801e502 <uxr_read_framed_msg+0x4fe>
 801e1d8:	2304      	movs	r3, #4
 801e1da:	8621      	strh	r1, [r4, #48]	@ 0x30
 801e1dc:	7023      	strb	r3, [r4, #0]
 801e1de:	e722      	b.n	801e026 <uxr_read_framed_msg+0x22>
 801e1e0:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801e1e4:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801e1e8:	4290      	cmp	r0, r2
 801e1ea:	f000 80b4 	beq.w	801e356 <uxr_read_framed_msg+0x352>
 801e1ee:	18a3      	adds	r3, r4, r2
 801e1f0:	7899      	ldrb	r1, [r3, #2]
 801e1f2:	297d      	cmp	r1, #125	@ 0x7d
 801e1f4:	f000 8107 	beq.w	801e406 <uxr_read_framed_msg+0x402>
 801e1f8:	3201      	adds	r2, #1
 801e1fa:	232a      	movs	r3, #42	@ 0x2a
 801e1fc:	297e      	cmp	r1, #126	@ 0x7e
 801e1fe:	ea4f 0052 	mov.w	r0, r2, lsr #1
 801e202:	fba5 c000 	umull	ip, r0, r5, r0
 801e206:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801e20a:	fb03 2210 	mls	r2, r3, r0, r2
 801e20e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801e212:	f000 818a 	beq.w	801e52a <uxr_read_framed_msg+0x526>
 801e216:	7863      	ldrb	r3, [r4, #1]
 801e218:	428b      	cmp	r3, r1
 801e21a:	bf0c      	ite	eq
 801e21c:	2303      	moveq	r3, #3
 801e21e:	2300      	movne	r3, #0
 801e220:	7023      	strb	r3, [r4, #0]
 801e222:	e700      	b.n	801e026 <uxr_read_framed_msg+0x22>
 801e224:	2300      	movs	r3, #0
 801e226:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801e22a:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 801e22e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801e232:	4299      	cmp	r1, r3
 801e234:	d06a      	beq.n	801e30c <uxr_read_framed_msg+0x308>
 801e236:	18e2      	adds	r2, r4, r3
 801e238:	7890      	ldrb	r0, [r2, #2]
 801e23a:	287d      	cmp	r0, #125	@ 0x7d
 801e23c:	f000 8100 	beq.w	801e440 <uxr_read_framed_msg+0x43c>
 801e240:	3301      	adds	r3, #1
 801e242:	212a      	movs	r1, #42	@ 0x2a
 801e244:	287e      	cmp	r0, #126	@ 0x7e
 801e246:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 801e24a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801e24e:	fba5 c202 	umull	ip, r2, r5, r2
 801e252:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801e256:	fb01 3312 	mls	r3, r1, r2, r3
 801e25a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801e25e:	d055      	beq.n	801e30c <uxr_read_framed_msg+0x308>
 801e260:	2302      	movs	r3, #2
 801e262:	7023      	strb	r3, [r4, #0]
 801e264:	e6df      	b.n	801e026 <uxr_read_framed_msg+0x22>
 801e266:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 801e26a:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 801e26e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801e272:	1c5a      	adds	r2, r3, #1
 801e274:	459c      	cmp	ip, r3
 801e276:	eb04 0103 	add.w	r1, r4, r3
 801e27a:	ea4f 0352 	mov.w	r3, r2, lsr #1
 801e27e:	f43f af04 	beq.w	801e08a <uxr_read_framed_msg+0x86>
 801e282:	fba5 0303 	umull	r0, r3, r5, r3
 801e286:	7889      	ldrb	r1, [r1, #2]
 801e288:	089b      	lsrs	r3, r3, #2
 801e28a:	297e      	cmp	r1, #126	@ 0x7e
 801e28c:	fb0e 2313 	mls	r3, lr, r3, r2
 801e290:	b2db      	uxtb	r3, r3
 801e292:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801e296:	d1ec      	bne.n	801e272 <uxr_read_framed_msg+0x26e>
 801e298:	2301      	movs	r3, #1
 801e29a:	7023      	strb	r3, [r4, #0]
 801e29c:	e6c3      	b.n	801e026 <uxr_read_framed_msg+0x22>
 801e29e:	1c50      	adds	r0, r2, #1
 801e2a0:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 801e2a4:	3202      	adds	r2, #2
 801e2a6:	0841      	lsrs	r1, r0, #1
 801e2a8:	fba5 c101 	umull	ip, r1, r5, r1
 801e2ac:	0889      	lsrs	r1, r1, #2
 801e2ae:	fb0b 0111 	mls	r1, fp, r1, r0
 801e2b2:	1860      	adds	r0, r4, r1
 801e2b4:	b2c9      	uxtb	r1, r1
 801e2b6:	458a      	cmp	sl, r1
 801e2b8:	f43f af42 	beq.w	801e140 <uxr_read_framed_msg+0x13c>
 801e2bc:	0851      	lsrs	r1, r2, #1
 801e2be:	7880      	ldrb	r0, [r0, #2]
 801e2c0:	fba5 a101 	umull	sl, r1, r5, r1
 801e2c4:	287e      	cmp	r0, #126	@ 0x7e
 801e2c6:	f080 0c20 	eor.w	ip, r0, #32
 801e2ca:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801e2ce:	fb0b 2211 	mls	r2, fp, r1, r2
 801e2d2:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801e2d6:	f47f af14 	bne.w	801e102 <uxr_read_framed_msg+0xfe>
 801e2da:	459e      	cmp	lr, r3
 801e2dc:	f43f af33 	beq.w	801e146 <uxr_read_framed_msg+0x142>
 801e2e0:	2301      	movs	r3, #1
 801e2e2:	7023      	strb	r3, [r4, #0]
 801e2e4:	e69f      	b.n	801e026 <uxr_read_framed_msg+0x22>
 801e2e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e2e8:	9300      	str	r3, [sp, #0]
 801e2ea:	2301      	movs	r3, #1
 801e2ec:	9301      	str	r3, [sp, #4]
 801e2ee:	464a      	mov	r2, r9
 801e2f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e2f2:	4641      	mov	r1, r8
 801e2f4:	4620      	mov	r0, r4
 801e2f6:	f7ff fdf1 	bl	801dedc <uxr_framing_read_transport>
 801e2fa:	2800      	cmp	r0, #0
 801e2fc:	f43f aec5 	beq.w	801e08a <uxr_read_framed_msg+0x86>
 801e300:	7823      	ldrb	r3, [r4, #0]
 801e302:	e690      	b.n	801e026 <uxr_read_framed_msg+0x22>
 801e304:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e306:	9300      	str	r3, [sp, #0]
 801e308:	2302      	movs	r3, #2
 801e30a:	e7ef      	b.n	801e2ec <uxr_read_framed_msg+0x2e8>
 801e30c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e30e:	464a      	mov	r2, r9
 801e310:	4641      	mov	r1, r8
 801e312:	4620      	mov	r0, r4
 801e314:	9300      	str	r3, [sp, #0]
 801e316:	2304      	movs	r3, #4
 801e318:	9301      	str	r3, [sp, #4]
 801e31a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e31c:	f7ff fdde 	bl	801dedc <uxr_framing_read_transport>
 801e320:	2800      	cmp	r0, #0
 801e322:	d1ed      	bne.n	801e300 <uxr_read_framed_msg+0x2fc>
 801e324:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801e328:	2b7e      	cmp	r3, #126	@ 0x7e
 801e32a:	d0e9      	beq.n	801e300 <uxr_read_framed_msg+0x2fc>
 801e32c:	e6ad      	b.n	801e08a <uxr_read_framed_msg+0x86>
 801e32e:	bf00      	nop
 801e330:	30c30c31 	.word	0x30c30c31
 801e334:	08024da4 	.word	0x08024da4
 801e338:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e33a:	9300      	str	r3, [sp, #0]
 801e33c:	2305      	movs	r3, #5
 801e33e:	9301      	str	r3, [sp, #4]
 801e340:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e342:	f7ff fdcb 	bl	801dedc <uxr_framing_read_transport>
 801e346:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801e34a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801e34e:	429a      	cmp	r2, r3
 801e350:	f43f ae9b 	beq.w	801e08a <uxr_read_framed_msg+0x86>
 801e354:	e664      	b.n	801e020 <uxr_read_framed_msg+0x1c>
 801e356:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e358:	9300      	str	r3, [sp, #0]
 801e35a:	2303      	movs	r3, #3
 801e35c:	e7c6      	b.n	801e2ec <uxr_read_framed_msg+0x2e8>
 801e35e:	2305      	movs	r3, #5
 801e360:	7023      	strb	r3, [r4, #0]
 801e362:	e660      	b.n	801e026 <uxr_read_framed_msg+0x22>
 801e364:	f43f aeef 	beq.w	801e146 <uxr_read_framed_msg+0x142>
 801e368:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801e36c:	d094      	beq.n	801e298 <uxr_read_framed_msg+0x294>
 801e36e:	ebae 0303 	sub.w	r3, lr, r3
 801e372:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e374:	3302      	adds	r3, #2
 801e376:	9200      	str	r2, [sp, #0]
 801e378:	e7b8      	b.n	801e2ec <uxr_read_framed_msg+0x2e8>
 801e37a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801e37e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e380:	7013      	strb	r3, [r2, #0]
 801e382:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801e384:	b003      	add	sp, #12
 801e386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e38a:	1c59      	adds	r1, r3, #1
 801e38c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801e390:	084a      	lsrs	r2, r1, #1
 801e392:	fba5 e202 	umull	lr, r2, r5, r2
 801e396:	0892      	lsrs	r2, r2, #2
 801e398:	fb0c 1212 	mls	r2, ip, r2, r1
 801e39c:	b2d1      	uxtb	r1, r2
 801e39e:	4288      	cmp	r0, r1
 801e3a0:	d0b0      	beq.n	801e304 <uxr_read_framed_msg+0x300>
 801e3a2:	3302      	adds	r3, #2
 801e3a4:	4422      	add	r2, r4
 801e3a6:	7891      	ldrb	r1, [r2, #2]
 801e3a8:	085a      	lsrs	r2, r3, #1
 801e3aa:	fba5 0202 	umull	r0, r2, r5, r2
 801e3ae:	297e      	cmp	r1, #126	@ 0x7e
 801e3b0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801e3b4:	fb0c 3312 	mls	r3, ip, r2, r3
 801e3b8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801e3bc:	f000 80a1 	beq.w	801e502 <uxr_read_framed_msg+0x4fe>
 801e3c0:	f081 0120 	eor.w	r1, r1, #32
 801e3c4:	e680      	b.n	801e0c8 <uxr_read_framed_msg+0xc4>
 801e3c6:	f103 0c01 	add.w	ip, r3, #1
 801e3ca:	202a      	movs	r0, #42	@ 0x2a
 801e3cc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801e3d0:	fba5 e202 	umull	lr, r2, r5, r2
 801e3d4:	0892      	lsrs	r2, r2, #2
 801e3d6:	fb00 c212 	mls	r2, r0, r2, ip
 801e3da:	fa5f fc82 	uxtb.w	ip, r2
 801e3de:	4561      	cmp	r1, ip
 801e3e0:	d081      	beq.n	801e2e6 <uxr_read_framed_msg+0x2e2>
 801e3e2:	3302      	adds	r3, #2
 801e3e4:	4422      	add	r2, r4
 801e3e6:	0859      	lsrs	r1, r3, #1
 801e3e8:	7892      	ldrb	r2, [r2, #2]
 801e3ea:	fba5 c101 	umull	ip, r1, r5, r1
 801e3ee:	2a7e      	cmp	r2, #126	@ 0x7e
 801e3f0:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801e3f4:	fb00 3311 	mls	r3, r0, r1, r3
 801e3f8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801e3fc:	f000 8091 	beq.w	801e522 <uxr_read_framed_msg+0x51e>
 801e400:	f082 0220 	eor.w	r2, r2, #32
 801e404:	e636      	b.n	801e074 <uxr_read_framed_msg+0x70>
 801e406:	1c51      	adds	r1, r2, #1
 801e408:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801e40c:	084b      	lsrs	r3, r1, #1
 801e40e:	fba5 e303 	umull	lr, r3, r5, r3
 801e412:	089b      	lsrs	r3, r3, #2
 801e414:	fb0c 1313 	mls	r3, ip, r3, r1
 801e418:	b2d9      	uxtb	r1, r3
 801e41a:	4288      	cmp	r0, r1
 801e41c:	d09b      	beq.n	801e356 <uxr_read_framed_msg+0x352>
 801e41e:	3202      	adds	r2, #2
 801e420:	4423      	add	r3, r4
 801e422:	0850      	lsrs	r0, r2, #1
 801e424:	789b      	ldrb	r3, [r3, #2]
 801e426:	fba5 1000 	umull	r1, r0, r5, r0
 801e42a:	2b7e      	cmp	r3, #126	@ 0x7e
 801e42c:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801e430:	fb0c 2210 	mls	r2, ip, r0, r2
 801e434:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801e438:	d077      	beq.n	801e52a <uxr_read_framed_msg+0x526>
 801e43a:	f083 0120 	eor.w	r1, r3, #32
 801e43e:	e6ea      	b.n	801e216 <uxr_read_framed_msg+0x212>
 801e440:	f103 0c01 	add.w	ip, r3, #1
 801e444:	202a      	movs	r0, #42	@ 0x2a
 801e446:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801e44a:	fba5 e202 	umull	lr, r2, r5, r2
 801e44e:	0892      	lsrs	r2, r2, #2
 801e450:	fb00 c212 	mls	r2, r0, r2, ip
 801e454:	fa5f fc82 	uxtb.w	ip, r2
 801e458:	4561      	cmp	r1, ip
 801e45a:	f43f af57 	beq.w	801e30c <uxr_read_framed_msg+0x308>
 801e45e:	3302      	adds	r3, #2
 801e460:	4422      	add	r2, r4
 801e462:	7891      	ldrb	r1, [r2, #2]
 801e464:	085a      	lsrs	r2, r3, #1
 801e466:	fba5 c202 	umull	ip, r2, r5, r2
 801e46a:	297e      	cmp	r1, #126	@ 0x7e
 801e46c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801e470:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801e474:	fb00 3312 	mls	r3, r0, r2, r3
 801e478:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801e47c:	f43f af46 	beq.w	801e30c <uxr_read_framed_msg+0x308>
 801e480:	f081 0120 	eor.w	r1, r1, #32
 801e484:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801e488:	e6ea      	b.n	801e260 <uxr_read_framed_msg+0x25c>
 801e48a:	1c59      	adds	r1, r3, #1
 801e48c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801e490:	084a      	lsrs	r2, r1, #1
 801e492:	fba5 e202 	umull	lr, r2, r5, r2
 801e496:	0892      	lsrs	r2, r2, #2
 801e498:	fb0c 1212 	mls	r2, ip, r2, r1
 801e49c:	b2d1      	uxtb	r1, r2
 801e49e:	4288      	cmp	r0, r1
 801e4a0:	f43f af21 	beq.w	801e2e6 <uxr_read_framed_msg+0x2e2>
 801e4a4:	3302      	adds	r3, #2
 801e4a6:	4422      	add	r2, r4
 801e4a8:	7891      	ldrb	r1, [r2, #2]
 801e4aa:	085a      	lsrs	r2, r3, #1
 801e4ac:	fba5 0202 	umull	r0, r2, r5, r2
 801e4b0:	297e      	cmp	r1, #126	@ 0x7e
 801e4b2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801e4b6:	fb0c 3312 	mls	r3, ip, r2, r3
 801e4ba:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801e4be:	d030      	beq.n	801e522 <uxr_read_framed_msg+0x51e>
 801e4c0:	f081 0120 	eor.w	r1, r1, #32
 801e4c4:	e65d      	b.n	801e182 <uxr_read_framed_msg+0x17e>
 801e4c6:	1c59      	adds	r1, r3, #1
 801e4c8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801e4cc:	084a      	lsrs	r2, r1, #1
 801e4ce:	fba5 e202 	umull	lr, r2, r5, r2
 801e4d2:	0892      	lsrs	r2, r2, #2
 801e4d4:	fb0c 1212 	mls	r2, ip, r2, r1
 801e4d8:	b2d1      	uxtb	r1, r2
 801e4da:	4288      	cmp	r0, r1
 801e4dc:	f43f af12 	beq.w	801e304 <uxr_read_framed_msg+0x300>
 801e4e0:	3302      	adds	r3, #2
 801e4e2:	4422      	add	r2, r4
 801e4e4:	7891      	ldrb	r1, [r2, #2]
 801e4e6:	085a      	lsrs	r2, r3, #1
 801e4e8:	fba5 0202 	umull	r0, r2, r5, r2
 801e4ec:	297e      	cmp	r1, #126	@ 0x7e
 801e4ee:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801e4f2:	fb0c 3312 	mls	r3, ip, r2, r3
 801e4f6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801e4fa:	d002      	beq.n	801e502 <uxr_read_framed_msg+0x4fe>
 801e4fc:	f081 0120 	eor.w	r1, r1, #32
 801e500:	e66a      	b.n	801e1d8 <uxr_read_framed_msg+0x1d4>
 801e502:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e504:	9300      	str	r3, [sp, #0]
 801e506:	2302      	movs	r3, #2
 801e508:	9301      	str	r3, [sp, #4]
 801e50a:	464a      	mov	r2, r9
 801e50c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e50e:	4641      	mov	r1, r8
 801e510:	4620      	mov	r0, r4
 801e512:	f7ff fce3 	bl	801dedc <uxr_framing_read_transport>
 801e516:	2800      	cmp	r0, #0
 801e518:	f47f aef2 	bne.w	801e300 <uxr_read_framed_msg+0x2fc>
 801e51c:	2301      	movs	r3, #1
 801e51e:	7023      	strb	r3, [r4, #0]
 801e520:	e581      	b.n	801e026 <uxr_read_framed_msg+0x22>
 801e522:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e524:	9300      	str	r3, [sp, #0]
 801e526:	2301      	movs	r3, #1
 801e528:	e7ee      	b.n	801e508 <uxr_read_framed_msg+0x504>
 801e52a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e52c:	9300      	str	r3, [sp, #0]
 801e52e:	2303      	movs	r3, #3
 801e530:	e7ea      	b.n	801e508 <uxr_read_framed_msg+0x504>
 801e532:	bf00      	nop

0801e534 <uxr_stream_id>:
 801e534:	2901      	cmp	r1, #1
 801e536:	4684      	mov	ip, r0
 801e538:	b500      	push	{lr}
 801e53a:	b083      	sub	sp, #12
 801e53c:	d01f      	beq.n	801e57e <uxr_stream_id+0x4a>
 801e53e:	2902      	cmp	r1, #2
 801e540:	f04f 0e00 	mov.w	lr, #0
 801e544:	d020      	beq.n	801e588 <uxr_stream_id+0x54>
 801e546:	2300      	movs	r3, #0
 801e548:	2000      	movs	r0, #0
 801e54a:	f36e 0307 	bfi	r3, lr, #0, #8
 801e54e:	f36c 230f 	bfi	r3, ip, #8, #8
 801e552:	f361 4317 	bfi	r3, r1, #16, #8
 801e556:	f362 631f 	bfi	r3, r2, #24, #8
 801e55a:	fa5f fc83 	uxtb.w	ip, r3
 801e55e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801e562:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801e566:	0e1b      	lsrs	r3, r3, #24
 801e568:	f36c 0007 	bfi	r0, ip, #0, #8
 801e56c:	f361 200f 	bfi	r0, r1, #8, #8
 801e570:	f362 4017 	bfi	r0, r2, #16, #8
 801e574:	f363 601f 	bfi	r0, r3, #24, #8
 801e578:	b003      	add	sp, #12
 801e57a:	f85d fb04 	ldr.w	pc, [sp], #4
 801e57e:	f100 0e01 	add.w	lr, r0, #1
 801e582:	fa5f fe8e 	uxtb.w	lr, lr
 801e586:	e7de      	b.n	801e546 <uxr_stream_id+0x12>
 801e588:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 801e58c:	e7db      	b.n	801e546 <uxr_stream_id+0x12>
 801e58e:	bf00      	nop

0801e590 <uxr_stream_id_from_raw>:
 801e590:	b082      	sub	sp, #8
 801e592:	b130      	cbz	r0, 801e5a2 <uxr_stream_id_from_raw+0x12>
 801e594:	0603      	lsls	r3, r0, #24
 801e596:	d421      	bmi.n	801e5dc <uxr_stream_id_from_raw+0x4c>
 801e598:	1e42      	subs	r2, r0, #1
 801e59a:	f04f 0c01 	mov.w	ip, #1
 801e59e:	b2d2      	uxtb	r2, r2
 801e5a0:	e001      	b.n	801e5a6 <uxr_stream_id_from_raw+0x16>
 801e5a2:	4684      	mov	ip, r0
 801e5a4:	4602      	mov	r2, r0
 801e5a6:	2300      	movs	r3, #0
 801e5a8:	f360 0307 	bfi	r3, r0, #0, #8
 801e5ac:	2000      	movs	r0, #0
 801e5ae:	f362 230f 	bfi	r3, r2, #8, #8
 801e5b2:	f36c 4317 	bfi	r3, ip, #16, #8
 801e5b6:	f361 631f 	bfi	r3, r1, #24, #8
 801e5ba:	fa5f fc83 	uxtb.w	ip, r3
 801e5be:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801e5c2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801e5c6:	0e1b      	lsrs	r3, r3, #24
 801e5c8:	f36c 0007 	bfi	r0, ip, #0, #8
 801e5cc:	f361 200f 	bfi	r0, r1, #8, #8
 801e5d0:	f362 4017 	bfi	r0, r2, #16, #8
 801e5d4:	f363 601f 	bfi	r0, r3, #24, #8
 801e5d8:	b002      	add	sp, #8
 801e5da:	4770      	bx	lr
 801e5dc:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801e5e0:	f04f 0c02 	mov.w	ip, #2
 801e5e4:	e7df      	b.n	801e5a6 <uxr_stream_id_from_raw+0x16>
 801e5e6:	bf00      	nop

0801e5e8 <uxr_init_stream_storage>:
 801e5e8:	2300      	movs	r3, #0
 801e5ea:	7403      	strb	r3, [r0, #16]
 801e5ec:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 801e5f0:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 801e5f4:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 801e5f8:	4770      	bx	lr
 801e5fa:	bf00      	nop

0801e5fc <uxr_reset_stream_storage>:
 801e5fc:	b570      	push	{r4, r5, r6, lr}
 801e5fe:	7c03      	ldrb	r3, [r0, #16]
 801e600:	4604      	mov	r4, r0
 801e602:	b14b      	cbz	r3, 801e618 <uxr_reset_stream_storage+0x1c>
 801e604:	4606      	mov	r6, r0
 801e606:	2500      	movs	r5, #0
 801e608:	4630      	mov	r0, r6
 801e60a:	3501      	adds	r5, #1
 801e60c:	f002 fa42 	bl	8020a94 <uxr_reset_output_best_effort_stream>
 801e610:	7c23      	ldrb	r3, [r4, #16]
 801e612:	3610      	adds	r6, #16
 801e614:	42ab      	cmp	r3, r5
 801e616:	d8f7      	bhi.n	801e608 <uxr_reset_stream_storage+0xc>
 801e618:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801e61c:	b15b      	cbz	r3, 801e636 <uxr_reset_stream_storage+0x3a>
 801e61e:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e622:	2500      	movs	r5, #0
 801e624:	4630      	mov	r0, r6
 801e626:	3501      	adds	r5, #1
 801e628:	f002 f83a 	bl	80206a0 <uxr_reset_input_best_effort_stream>
 801e62c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801e630:	3602      	adds	r6, #2
 801e632:	42ab      	cmp	r3, r5
 801e634:	d8f6      	bhi.n	801e624 <uxr_reset_stream_storage+0x28>
 801e636:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801e63a:	b15b      	cbz	r3, 801e654 <uxr_reset_stream_storage+0x58>
 801e63c:	f104 0618 	add.w	r6, r4, #24
 801e640:	2500      	movs	r5, #0
 801e642:	4630      	mov	r0, r6
 801e644:	3501      	adds	r5, #1
 801e646:	f002 fad3 	bl	8020bf0 <uxr_reset_output_reliable_stream>
 801e64a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801e64e:	3628      	adds	r6, #40	@ 0x28
 801e650:	42ab      	cmp	r3, r5
 801e652:	d8f6      	bhi.n	801e642 <uxr_reset_stream_storage+0x46>
 801e654:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801e658:	b15b      	cbz	r3, 801e672 <uxr_reset_stream_storage+0x76>
 801e65a:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 801e65e:	2500      	movs	r5, #0
 801e660:	4630      	mov	r0, r6
 801e662:	3501      	adds	r5, #1
 801e664:	f002 f888 	bl	8020778 <uxr_reset_input_reliable_stream>
 801e668:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801e66c:	3618      	adds	r6, #24
 801e66e:	42ab      	cmp	r3, r5
 801e670:	d8f6      	bhi.n	801e660 <uxr_reset_stream_storage+0x64>
 801e672:	bd70      	pop	{r4, r5, r6, pc}

0801e674 <uxr_add_output_best_effort_buffer>:
 801e674:	b510      	push	{r4, lr}
 801e676:	7c04      	ldrb	r4, [r0, #16]
 801e678:	b082      	sub	sp, #8
 801e67a:	f104 0c01 	add.w	ip, r4, #1
 801e67e:	f880 c010 	strb.w	ip, [r0, #16]
 801e682:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801e686:	f002 f9fb 	bl	8020a80 <uxr_init_output_best_effort_stream>
 801e68a:	2201      	movs	r2, #1
 801e68c:	4620      	mov	r0, r4
 801e68e:	4611      	mov	r1, r2
 801e690:	b002      	add	sp, #8
 801e692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e696:	f7ff bf4d 	b.w	801e534 <uxr_stream_id>
 801e69a:	bf00      	nop

0801e69c <uxr_add_output_reliable_buffer>:
 801e69c:	b510      	push	{r4, lr}
 801e69e:	b084      	sub	sp, #16
 801e6a0:	4684      	mov	ip, r0
 801e6a2:	2028      	movs	r0, #40	@ 0x28
 801e6a4:	f89d 4018 	ldrb.w	r4, [sp, #24]
 801e6a8:	9400      	str	r4, [sp, #0]
 801e6aa:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 801e6ae:	fb00 c004 	mla	r0, r0, r4, ip
 801e6b2:	f104 0e01 	add.w	lr, r4, #1
 801e6b6:	3018      	adds	r0, #24
 801e6b8:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 801e6bc:	f002 fa60 	bl	8020b80 <uxr_init_output_reliable_stream>
 801e6c0:	2201      	movs	r2, #1
 801e6c2:	2102      	movs	r1, #2
 801e6c4:	4620      	mov	r0, r4
 801e6c6:	b004      	add	sp, #16
 801e6c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e6cc:	f7ff bf32 	b.w	801e534 <uxr_stream_id>

0801e6d0 <uxr_add_input_best_effort_buffer>:
 801e6d0:	b510      	push	{r4, lr}
 801e6d2:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 801e6d6:	b082      	sub	sp, #8
 801e6d8:	1c62      	adds	r2, r4, #1
 801e6da:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 801e6de:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 801e6e2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e6e6:	f001 ffd7 	bl	8020698 <uxr_init_input_best_effort_stream>
 801e6ea:	2200      	movs	r2, #0
 801e6ec:	2101      	movs	r1, #1
 801e6ee:	4620      	mov	r0, r4
 801e6f0:	b002      	add	sp, #8
 801e6f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e6f6:	f7ff bf1d 	b.w	801e534 <uxr_stream_id>
 801e6fa:	bf00      	nop

0801e6fc <uxr_add_input_reliable_buffer>:
 801e6fc:	b510      	push	{r4, lr}
 801e6fe:	b084      	sub	sp, #16
 801e700:	4684      	mov	ip, r0
 801e702:	2018      	movs	r0, #24
 801e704:	9c06      	ldr	r4, [sp, #24]
 801e706:	9400      	str	r4, [sp, #0]
 801e708:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 801e70c:	fb00 c004 	mla	r0, r0, r4, ip
 801e710:	f104 0e01 	add.w	lr, r4, #1
 801e714:	3048      	adds	r0, #72	@ 0x48
 801e716:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801e71a:	f002 f807 	bl	802072c <uxr_init_input_reliable_stream>
 801e71e:	2200      	movs	r2, #0
 801e720:	2102      	movs	r1, #2
 801e722:	4620      	mov	r0, r4
 801e724:	b004      	add	sp, #16
 801e726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e72a:	f7ff bf03 	b.w	801e534 <uxr_stream_id>
 801e72e:	bf00      	nop

0801e730 <uxr_get_output_best_effort_stream>:
 801e730:	7c03      	ldrb	r3, [r0, #16]
 801e732:	428b      	cmp	r3, r1
 801e734:	bf8c      	ite	hi
 801e736:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801e73a:	2000      	movls	r0, #0
 801e73c:	4770      	bx	lr
 801e73e:	bf00      	nop

0801e740 <uxr_get_output_reliable_stream>:
 801e740:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801e744:	428b      	cmp	r3, r1
 801e746:	d904      	bls.n	801e752 <uxr_get_output_reliable_stream+0x12>
 801e748:	2328      	movs	r3, #40	@ 0x28
 801e74a:	fb03 0001 	mla	r0, r3, r1, r0
 801e74e:	3018      	adds	r0, #24
 801e750:	4770      	bx	lr
 801e752:	2000      	movs	r0, #0
 801e754:	4770      	bx	lr
 801e756:	bf00      	nop

0801e758 <uxr_get_input_best_effort_stream>:
 801e758:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 801e75c:	428b      	cmp	r3, r1
 801e75e:	d903      	bls.n	801e768 <uxr_get_input_best_effort_stream+0x10>
 801e760:	3121      	adds	r1, #33	@ 0x21
 801e762:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801e766:	4770      	bx	lr
 801e768:	2000      	movs	r0, #0
 801e76a:	4770      	bx	lr

0801e76c <uxr_get_input_reliable_stream>:
 801e76c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 801e770:	428b      	cmp	r3, r1
 801e772:	d904      	bls.n	801e77e <uxr_get_input_reliable_stream+0x12>
 801e774:	2318      	movs	r3, #24
 801e776:	fb03 0001 	mla	r0, r3, r1, r0
 801e77a:	3048      	adds	r0, #72	@ 0x48
 801e77c:	4770      	bx	lr
 801e77e:	2000      	movs	r0, #0
 801e780:	4770      	bx	lr
 801e782:	bf00      	nop

0801e784 <uxr_output_streams_confirmed>:
 801e784:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801e788:	b183      	cbz	r3, 801e7ac <uxr_output_streams_confirmed+0x28>
 801e78a:	b570      	push	{r4, r5, r6, lr}
 801e78c:	4606      	mov	r6, r0
 801e78e:	f100 0518 	add.w	r5, r0, #24
 801e792:	2400      	movs	r4, #0
 801e794:	e000      	b.n	801e798 <uxr_output_streams_confirmed+0x14>
 801e796:	b140      	cbz	r0, 801e7aa <uxr_output_streams_confirmed+0x26>
 801e798:	4628      	mov	r0, r5
 801e79a:	3401      	adds	r4, #1
 801e79c:	f002 fc9c 	bl	80210d8 <uxr_is_output_up_to_date>
 801e7a0:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 801e7a4:	3528      	adds	r5, #40	@ 0x28
 801e7a6:	42a3      	cmp	r3, r4
 801e7a8:	d8f5      	bhi.n	801e796 <uxr_output_streams_confirmed+0x12>
 801e7aa:	bd70      	pop	{r4, r5, r6, pc}
 801e7ac:	2001      	movs	r0, #1
 801e7ae:	4770      	bx	lr

0801e7b0 <uxr_buffer_submessage_header>:
 801e7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e7b2:	460e      	mov	r6, r1
 801e7b4:	2104      	movs	r1, #4
 801e7b6:	4604      	mov	r4, r0
 801e7b8:	4615      	mov	r5, r2
 801e7ba:	461f      	mov	r7, r3
 801e7bc:	f7f6 f81e 	bl	80147fc <ucdr_align_to>
 801e7c0:	2301      	movs	r3, #1
 801e7c2:	4631      	mov	r1, r6
 801e7c4:	4620      	mov	r0, r4
 801e7c6:	ea47 0203 	orr.w	r2, r7, r3
 801e7ca:	7523      	strb	r3, [r4, #20]
 801e7cc:	462b      	mov	r3, r5
 801e7ce:	f000 f8d5 	bl	801e97c <uxr_serialize_submessage_header>
 801e7d2:	4620      	mov	r0, r4
 801e7d4:	f7f6 f828 	bl	8014828 <ucdr_buffer_remaining>
 801e7d8:	42a8      	cmp	r0, r5
 801e7da:	bf34      	ite	cc
 801e7dc:	2000      	movcc	r0, #0
 801e7de:	2001      	movcs	r0, #1
 801e7e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e7e2:	bf00      	nop

0801e7e4 <uxr_read_submessage_header>:
 801e7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e7e8:	4604      	mov	r4, r0
 801e7ea:	460d      	mov	r5, r1
 801e7ec:	2104      	movs	r1, #4
 801e7ee:	4616      	mov	r6, r2
 801e7f0:	4698      	mov	r8, r3
 801e7f2:	f7f6 f803 	bl	80147fc <ucdr_align_to>
 801e7f6:	4620      	mov	r0, r4
 801e7f8:	f7f6 f816 	bl	8014828 <ucdr_buffer_remaining>
 801e7fc:	2803      	cmp	r0, #3
 801e7fe:	bf8c      	ite	hi
 801e800:	2701      	movhi	r7, #1
 801e802:	2700      	movls	r7, #0
 801e804:	d802      	bhi.n	801e80c <uxr_read_submessage_header+0x28>
 801e806:	4638      	mov	r0, r7
 801e808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e80c:	4633      	mov	r3, r6
 801e80e:	4642      	mov	r2, r8
 801e810:	4620      	mov	r0, r4
 801e812:	4629      	mov	r1, r5
 801e814:	f000 f8c6 	bl	801e9a4 <uxr_deserialize_submessage_header>
 801e818:	f898 3000 	ldrb.w	r3, [r8]
 801e81c:	4638      	mov	r0, r7
 801e81e:	f003 0201 	and.w	r2, r3, #1
 801e822:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 801e826:	f888 3000 	strb.w	r3, [r8]
 801e82a:	7522      	strb	r2, [r4, #20]
 801e82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e830 <uxr_submessage_padding>:
 801e830:	f010 0003 	ands.w	r0, r0, #3
 801e834:	bf18      	it	ne
 801e836:	f1c0 0004 	rsbne	r0, r0, #4
 801e83a:	4770      	bx	lr

0801e83c <uxr_millis>:
 801e83c:	b510      	push	{r4, lr}
 801e83e:	b084      	sub	sp, #16
 801e840:	2001      	movs	r0, #1
 801e842:	4669      	mov	r1, sp
 801e844:	f7e3 fc14 	bl	8002070 <clock_gettime>
 801e848:	4908      	ldr	r1, [pc, #32]	@ (801e86c <uxr_millis+0x30>)
 801e84a:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 801e84e:	fba0 0301 	umull	r0, r3, r0, r1
 801e852:	1900      	adds	r0, r0, r4
 801e854:	fb01 3102 	mla	r1, r1, r2, r3
 801e858:	4a05      	ldr	r2, [pc, #20]	@ (801e870 <uxr_millis+0x34>)
 801e85a:	f04f 0300 	mov.w	r3, #0
 801e85e:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801e862:	f7e1 fda5 	bl	80003b0 <__aeabi_ldivmod>
 801e866:	b004      	add	sp, #16
 801e868:	bd10      	pop	{r4, pc}
 801e86a:	bf00      	nop
 801e86c:	3b9aca00 	.word	0x3b9aca00
 801e870:	000f4240 	.word	0x000f4240

0801e874 <uxr_nanos>:
 801e874:	b510      	push	{r4, lr}
 801e876:	b084      	sub	sp, #16
 801e878:	2001      	movs	r0, #1
 801e87a:	4669      	mov	r1, sp
 801e87c:	f7e3 fbf8 	bl	8002070 <clock_gettime>
 801e880:	4a06      	ldr	r2, [pc, #24]	@ (801e89c <uxr_nanos+0x28>)
 801e882:	9800      	ldr	r0, [sp, #0]
 801e884:	9902      	ldr	r1, [sp, #8]
 801e886:	fba0 0302 	umull	r0, r3, r0, r2
 801e88a:	9c01      	ldr	r4, [sp, #4]
 801e88c:	1840      	adds	r0, r0, r1
 801e88e:	fb02 3304 	mla	r3, r2, r4, r3
 801e892:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801e896:	b004      	add	sp, #16
 801e898:	bd10      	pop	{r4, pc}
 801e89a:	bf00      	nop
 801e89c:	3b9aca00 	.word	0x3b9aca00

0801e8a0 <uxr_prepare_output_stream>:
 801e8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e8a2:	b087      	sub	sp, #28
 801e8a4:	2707      	movs	r7, #7
 801e8a6:	2500      	movs	r5, #0
 801e8a8:	461c      	mov	r4, r3
 801e8aa:	4606      	mov	r6, r0
 801e8ac:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801e8b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e8b2:	e9cd 7500 	strd	r7, r5, [sp]
 801e8b6:	3204      	adds	r2, #4
 801e8b8:	f7ff f852 	bl	801d960 <uxr_prepare_stream_to_write_submessage>
 801e8bc:	f080 0201 	eor.w	r2, r0, #1
 801e8c0:	b2d2      	uxtb	r2, r2
 801e8c2:	75a2      	strb	r2, [r4, #22]
 801e8c4:	b112      	cbz	r2, 801e8cc <uxr_prepare_output_stream+0x2c>
 801e8c6:	4628      	mov	r0, r5
 801e8c8:	b007      	add	sp, #28
 801e8ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e8cc:	aa05      	add	r2, sp, #20
 801e8ce:	9902      	ldr	r1, [sp, #8]
 801e8d0:	4630      	mov	r0, r6
 801e8d2:	f7ff f981 	bl	801dbd8 <uxr_init_base_object_request>
 801e8d6:	a905      	add	r1, sp, #20
 801e8d8:	4605      	mov	r5, r0
 801e8da:	4620      	mov	r0, r4
 801e8dc:	f000 fff2 	bl	801f8c4 <uxr_serialize_WRITE_DATA_Payload_Data>
 801e8e0:	69a6      	ldr	r6, [r4, #24]
 801e8e2:	69e7      	ldr	r7, [r4, #28]
 801e8e4:	4620      	mov	r0, r4
 801e8e6:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801e8ea:	1a52      	subs	r2, r2, r1
 801e8ec:	f7f5 ff6a 	bl	80147c4 <ucdr_init_buffer>
 801e8f0:	4620      	mov	r0, r4
 801e8f2:	463a      	mov	r2, r7
 801e8f4:	4631      	mov	r1, r6
 801e8f6:	f7f5 ff39 	bl	801476c <ucdr_set_on_full_buffer_callback>
 801e8fa:	4628      	mov	r0, r5
 801e8fc:	b007      	add	sp, #28
 801e8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e900 <uxr_serialize_message_header>:
 801e900:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e902:	4616      	mov	r6, r2
 801e904:	b083      	sub	sp, #12
 801e906:	4604      	mov	r4, r0
 801e908:	460d      	mov	r5, r1
 801e90a:	9301      	str	r3, [sp, #4]
 801e90c:	9f08      	ldr	r7, [sp, #32]
 801e90e:	f7f4 fcef 	bl	80132f0 <ucdr_serialize_uint8_t>
 801e912:	4631      	mov	r1, r6
 801e914:	4620      	mov	r0, r4
 801e916:	f7f4 fceb 	bl	80132f0 <ucdr_serialize_uint8_t>
 801e91a:	9a01      	ldr	r2, [sp, #4]
 801e91c:	2101      	movs	r1, #1
 801e91e:	4620      	mov	r0, r4
 801e920:	f7f4 fd92 	bl	8013448 <ucdr_serialize_endian_uint16_t>
 801e924:	062b      	lsls	r3, r5, #24
 801e926:	d501      	bpl.n	801e92c <uxr_serialize_message_header+0x2c>
 801e928:	b003      	add	sp, #12
 801e92a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e92c:	2204      	movs	r2, #4
 801e92e:	4639      	mov	r1, r7
 801e930:	4620      	mov	r0, r4
 801e932:	b003      	add	sp, #12
 801e934:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e938:	f7fd bbc2 	b.w	801c0c0 <ucdr_serialize_array_uint8_t>

0801e93c <uxr_deserialize_message_header>:
 801e93c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e93e:	4616      	mov	r6, r2
 801e940:	b083      	sub	sp, #12
 801e942:	4604      	mov	r4, r0
 801e944:	460d      	mov	r5, r1
 801e946:	9301      	str	r3, [sp, #4]
 801e948:	9f08      	ldr	r7, [sp, #32]
 801e94a:	f7f4 fce7 	bl	801331c <ucdr_deserialize_uint8_t>
 801e94e:	4631      	mov	r1, r6
 801e950:	4620      	mov	r0, r4
 801e952:	f7f4 fce3 	bl	801331c <ucdr_deserialize_uint8_t>
 801e956:	9a01      	ldr	r2, [sp, #4]
 801e958:	2101      	movs	r1, #1
 801e95a:	4620      	mov	r0, r4
 801e95c:	f7f4 fe68 	bl	8013630 <ucdr_deserialize_endian_uint16_t>
 801e960:	f995 3000 	ldrsb.w	r3, [r5]
 801e964:	2b00      	cmp	r3, #0
 801e966:	da01      	bge.n	801e96c <uxr_deserialize_message_header+0x30>
 801e968:	b003      	add	sp, #12
 801e96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e96c:	2204      	movs	r2, #4
 801e96e:	4639      	mov	r1, r7
 801e970:	4620      	mov	r0, r4
 801e972:	b003      	add	sp, #12
 801e974:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e978:	f7fd bc06 	b.w	801c188 <ucdr_deserialize_array_uint8_t>

0801e97c <uxr_serialize_submessage_header>:
 801e97c:	b530      	push	{r4, r5, lr}
 801e97e:	4615      	mov	r5, r2
 801e980:	b083      	sub	sp, #12
 801e982:	4604      	mov	r4, r0
 801e984:	9301      	str	r3, [sp, #4]
 801e986:	f7f4 fcb3 	bl	80132f0 <ucdr_serialize_uint8_t>
 801e98a:	4629      	mov	r1, r5
 801e98c:	4620      	mov	r0, r4
 801e98e:	f7f4 fcaf 	bl	80132f0 <ucdr_serialize_uint8_t>
 801e992:	9a01      	ldr	r2, [sp, #4]
 801e994:	2101      	movs	r1, #1
 801e996:	4620      	mov	r0, r4
 801e998:	b003      	add	sp, #12
 801e99a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e99e:	f7f4 bd53 	b.w	8013448 <ucdr_serialize_endian_uint16_t>
 801e9a2:	bf00      	nop

0801e9a4 <uxr_deserialize_submessage_header>:
 801e9a4:	b530      	push	{r4, r5, lr}
 801e9a6:	4615      	mov	r5, r2
 801e9a8:	b083      	sub	sp, #12
 801e9aa:	4604      	mov	r4, r0
 801e9ac:	9301      	str	r3, [sp, #4]
 801e9ae:	f7f4 fcb5 	bl	801331c <ucdr_deserialize_uint8_t>
 801e9b2:	4629      	mov	r1, r5
 801e9b4:	4620      	mov	r0, r4
 801e9b6:	f7f4 fcb1 	bl	801331c <ucdr_deserialize_uint8_t>
 801e9ba:	9a01      	ldr	r2, [sp, #4]
 801e9bc:	2101      	movs	r1, #1
 801e9be:	4620      	mov	r0, r4
 801e9c0:	b003      	add	sp, #12
 801e9c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e9c6:	f7f4 be33 	b.w	8013630 <ucdr_deserialize_endian_uint16_t>
 801e9ca:	bf00      	nop

0801e9cc <uxr_serialize_CLIENT_Representation>:
 801e9cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e9d0:	2204      	movs	r2, #4
 801e9d2:	460e      	mov	r6, r1
 801e9d4:	4605      	mov	r5, r0
 801e9d6:	f7fd fb73 	bl	801c0c0 <ucdr_serialize_array_uint8_t>
 801e9da:	4607      	mov	r7, r0
 801e9dc:	2202      	movs	r2, #2
 801e9de:	1d31      	adds	r1, r6, #4
 801e9e0:	4628      	mov	r0, r5
 801e9e2:	f7fd fb6d 	bl	801c0c0 <ucdr_serialize_array_uint8_t>
 801e9e6:	4038      	ands	r0, r7
 801e9e8:	2202      	movs	r2, #2
 801e9ea:	1db1      	adds	r1, r6, #6
 801e9ec:	b2c7      	uxtb	r7, r0
 801e9ee:	4628      	mov	r0, r5
 801e9f0:	f7fd fb66 	bl	801c0c0 <ucdr_serialize_array_uint8_t>
 801e9f4:	2204      	movs	r2, #4
 801e9f6:	4007      	ands	r7, r0
 801e9f8:	f106 0108 	add.w	r1, r6, #8
 801e9fc:	4628      	mov	r0, r5
 801e9fe:	f7fd fb5f 	bl	801c0c0 <ucdr_serialize_array_uint8_t>
 801ea02:	4007      	ands	r7, r0
 801ea04:	7b31      	ldrb	r1, [r6, #12]
 801ea06:	4628      	mov	r0, r5
 801ea08:	f7f4 fc72 	bl	80132f0 <ucdr_serialize_uint8_t>
 801ea0c:	7b71      	ldrb	r1, [r6, #13]
 801ea0e:	4007      	ands	r7, r0
 801ea10:	4628      	mov	r0, r5
 801ea12:	f7f4 fc3f 	bl	8013294 <ucdr_serialize_bool>
 801ea16:	7b73      	ldrb	r3, [r6, #13]
 801ea18:	ea07 0800 	and.w	r8, r7, r0
 801ea1c:	b93b      	cbnz	r3, 801ea2e <uxr_serialize_CLIENT_Representation+0x62>
 801ea1e:	8bb1      	ldrh	r1, [r6, #28]
 801ea20:	4628      	mov	r0, r5
 801ea22:	f7f4 fc91 	bl	8013348 <ucdr_serialize_uint16_t>
 801ea26:	ea08 0000 	and.w	r0, r8, r0
 801ea2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ea2e:	6931      	ldr	r1, [r6, #16]
 801ea30:	4628      	mov	r0, r5
 801ea32:	f7f4 fe73 	bl	801371c <ucdr_serialize_uint32_t>
 801ea36:	6933      	ldr	r3, [r6, #16]
 801ea38:	b1e3      	cbz	r3, 801ea74 <uxr_serialize_CLIENT_Representation+0xa8>
 801ea3a:	b1c0      	cbz	r0, 801ea6e <uxr_serialize_CLIENT_Representation+0xa2>
 801ea3c:	4637      	mov	r7, r6
 801ea3e:	f04f 0900 	mov.w	r9, #0
 801ea42:	e000      	b.n	801ea46 <uxr_serialize_CLIENT_Representation+0x7a>
 801ea44:	b19c      	cbz	r4, 801ea6e <uxr_serialize_CLIENT_Representation+0xa2>
 801ea46:	6979      	ldr	r1, [r7, #20]
 801ea48:	4628      	mov	r0, r5
 801ea4a:	f001 fe0d 	bl	8020668 <ucdr_serialize_string>
 801ea4e:	69b9      	ldr	r1, [r7, #24]
 801ea50:	4604      	mov	r4, r0
 801ea52:	4628      	mov	r0, r5
 801ea54:	f001 fe08 	bl	8020668 <ucdr_serialize_string>
 801ea58:	f109 0901 	add.w	r9, r9, #1
 801ea5c:	6933      	ldr	r3, [r6, #16]
 801ea5e:	4004      	ands	r4, r0
 801ea60:	3708      	adds	r7, #8
 801ea62:	4599      	cmp	r9, r3
 801ea64:	b2e4      	uxtb	r4, r4
 801ea66:	d3ed      	bcc.n	801ea44 <uxr_serialize_CLIENT_Representation+0x78>
 801ea68:	ea08 0804 	and.w	r8, r8, r4
 801ea6c:	e7d7      	b.n	801ea1e <uxr_serialize_CLIENT_Representation+0x52>
 801ea6e:	f04f 0800 	mov.w	r8, #0
 801ea72:	e7d4      	b.n	801ea1e <uxr_serialize_CLIENT_Representation+0x52>
 801ea74:	ea08 0800 	and.w	r8, r8, r0
 801ea78:	e7d1      	b.n	801ea1e <uxr_serialize_CLIENT_Representation+0x52>
 801ea7a:	bf00      	nop

0801ea7c <uxr_deserialize_CLIENT_Representation>:
 801ea7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ea80:	2204      	movs	r2, #4
 801ea82:	460c      	mov	r4, r1
 801ea84:	4605      	mov	r5, r0
 801ea86:	f7fd fb7f 	bl	801c188 <ucdr_deserialize_array_uint8_t>
 801ea8a:	4607      	mov	r7, r0
 801ea8c:	2202      	movs	r2, #2
 801ea8e:	1d21      	adds	r1, r4, #4
 801ea90:	4628      	mov	r0, r5
 801ea92:	f7fd fb79 	bl	801c188 <ucdr_deserialize_array_uint8_t>
 801ea96:	4038      	ands	r0, r7
 801ea98:	2202      	movs	r2, #2
 801ea9a:	1da1      	adds	r1, r4, #6
 801ea9c:	b2c6      	uxtb	r6, r0
 801ea9e:	4628      	mov	r0, r5
 801eaa0:	f7fd fb72 	bl	801c188 <ucdr_deserialize_array_uint8_t>
 801eaa4:	2204      	movs	r2, #4
 801eaa6:	4006      	ands	r6, r0
 801eaa8:	f104 0108 	add.w	r1, r4, #8
 801eaac:	4628      	mov	r0, r5
 801eaae:	f7fd fb6b 	bl	801c188 <ucdr_deserialize_array_uint8_t>
 801eab2:	4006      	ands	r6, r0
 801eab4:	f104 010c 	add.w	r1, r4, #12
 801eab8:	4628      	mov	r0, r5
 801eaba:	f7f4 fc2f 	bl	801331c <ucdr_deserialize_uint8_t>
 801eabe:	f104 010d 	add.w	r1, r4, #13
 801eac2:	ea06 0700 	and.w	r7, r6, r0
 801eac6:	4628      	mov	r0, r5
 801eac8:	f7f4 fbfa 	bl	80132c0 <ucdr_deserialize_bool>
 801eacc:	7b63      	ldrb	r3, [r4, #13]
 801eace:	4007      	ands	r7, r0
 801ead0:	b93b      	cbnz	r3, 801eae2 <uxr_deserialize_CLIENT_Representation+0x66>
 801ead2:	f104 011c 	add.w	r1, r4, #28
 801ead6:	4628      	mov	r0, r5
 801ead8:	f7f4 fd36 	bl	8013548 <ucdr_deserialize_uint16_t>
 801eadc:	4038      	ands	r0, r7
 801eade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eae2:	f104 0110 	add.w	r1, r4, #16
 801eae6:	4628      	mov	r0, r5
 801eae8:	f7f4 ff48 	bl	801397c <ucdr_deserialize_uint32_t>
 801eaec:	6923      	ldr	r3, [r4, #16]
 801eaee:	2b01      	cmp	r3, #1
 801eaf0:	d903      	bls.n	801eafa <uxr_deserialize_CLIENT_Representation+0x7e>
 801eaf2:	2301      	movs	r3, #1
 801eaf4:	2700      	movs	r7, #0
 801eaf6:	75ab      	strb	r3, [r5, #22]
 801eaf8:	e7eb      	b.n	801ead2 <uxr_deserialize_CLIENT_Representation+0x56>
 801eafa:	b30b      	cbz	r3, 801eb40 <uxr_deserialize_CLIENT_Representation+0xc4>
 801eafc:	b1f0      	cbz	r0, 801eb3c <uxr_deserialize_CLIENT_Representation+0xc0>
 801eafe:	46a0      	mov	r8, r4
 801eb00:	f04f 0900 	mov.w	r9, #0
 801eb04:	e000      	b.n	801eb08 <uxr_deserialize_CLIENT_Representation+0x8c>
 801eb06:	b1ce      	cbz	r6, 801eb3c <uxr_deserialize_CLIENT_Representation+0xc0>
 801eb08:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801eb0c:	f108 0808 	add.w	r8, r8, #8
 801eb10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801eb14:	4628      	mov	r0, r5
 801eb16:	f001 fdb7 	bl	8020688 <ucdr_deserialize_string>
 801eb1a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801eb1e:	4606      	mov	r6, r0
 801eb20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801eb24:	4628      	mov	r0, r5
 801eb26:	f109 0901 	add.w	r9, r9, #1
 801eb2a:	f001 fdad 	bl	8020688 <ucdr_deserialize_string>
 801eb2e:	6923      	ldr	r3, [r4, #16]
 801eb30:	4006      	ands	r6, r0
 801eb32:	4599      	cmp	r9, r3
 801eb34:	b2f6      	uxtb	r6, r6
 801eb36:	d3e6      	bcc.n	801eb06 <uxr_deserialize_CLIENT_Representation+0x8a>
 801eb38:	4037      	ands	r7, r6
 801eb3a:	e7ca      	b.n	801ead2 <uxr_deserialize_CLIENT_Representation+0x56>
 801eb3c:	2700      	movs	r7, #0
 801eb3e:	e7c8      	b.n	801ead2 <uxr_deserialize_CLIENT_Representation+0x56>
 801eb40:	4007      	ands	r7, r0
 801eb42:	e7c6      	b.n	801ead2 <uxr_deserialize_CLIENT_Representation+0x56>

0801eb44 <uxr_serialize_AGENT_Representation>:
 801eb44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eb48:	2204      	movs	r2, #4
 801eb4a:	460f      	mov	r7, r1
 801eb4c:	4605      	mov	r5, r0
 801eb4e:	f7fd fab7 	bl	801c0c0 <ucdr_serialize_array_uint8_t>
 801eb52:	4604      	mov	r4, r0
 801eb54:	2202      	movs	r2, #2
 801eb56:	1d39      	adds	r1, r7, #4
 801eb58:	4628      	mov	r0, r5
 801eb5a:	f7fd fab1 	bl	801c0c0 <ucdr_serialize_array_uint8_t>
 801eb5e:	4020      	ands	r0, r4
 801eb60:	2202      	movs	r2, #2
 801eb62:	1db9      	adds	r1, r7, #6
 801eb64:	b2c4      	uxtb	r4, r0
 801eb66:	4628      	mov	r0, r5
 801eb68:	f7fd faaa 	bl	801c0c0 <ucdr_serialize_array_uint8_t>
 801eb6c:	7a39      	ldrb	r1, [r7, #8]
 801eb6e:	4004      	ands	r4, r0
 801eb70:	4628      	mov	r0, r5
 801eb72:	f7f4 fb8f 	bl	8013294 <ucdr_serialize_bool>
 801eb76:	7a3b      	ldrb	r3, [r7, #8]
 801eb78:	ea00 0804 	and.w	r8, r0, r4
 801eb7c:	b913      	cbnz	r3, 801eb84 <uxr_serialize_AGENT_Representation+0x40>
 801eb7e:	4640      	mov	r0, r8
 801eb80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eb84:	68f9      	ldr	r1, [r7, #12]
 801eb86:	4628      	mov	r0, r5
 801eb88:	f7f4 fdc8 	bl	801371c <ucdr_serialize_uint32_t>
 801eb8c:	68fb      	ldr	r3, [r7, #12]
 801eb8e:	b303      	cbz	r3, 801ebd2 <uxr_serialize_AGENT_Representation+0x8e>
 801eb90:	b1d0      	cbz	r0, 801ebc8 <uxr_serialize_AGENT_Representation+0x84>
 801eb92:	463e      	mov	r6, r7
 801eb94:	f04f 0900 	mov.w	r9, #0
 801eb98:	e000      	b.n	801eb9c <uxr_serialize_AGENT_Representation+0x58>
 801eb9a:	b1ac      	cbz	r4, 801ebc8 <uxr_serialize_AGENT_Representation+0x84>
 801eb9c:	6931      	ldr	r1, [r6, #16]
 801eb9e:	4628      	mov	r0, r5
 801eba0:	f001 fd62 	bl	8020668 <ucdr_serialize_string>
 801eba4:	6971      	ldr	r1, [r6, #20]
 801eba6:	4604      	mov	r4, r0
 801eba8:	4628      	mov	r0, r5
 801ebaa:	f001 fd5d 	bl	8020668 <ucdr_serialize_string>
 801ebae:	f109 0901 	add.w	r9, r9, #1
 801ebb2:	68fb      	ldr	r3, [r7, #12]
 801ebb4:	4004      	ands	r4, r0
 801ebb6:	3608      	adds	r6, #8
 801ebb8:	4599      	cmp	r9, r3
 801ebba:	b2e4      	uxtb	r4, r4
 801ebbc:	d3ed      	bcc.n	801eb9a <uxr_serialize_AGENT_Representation+0x56>
 801ebbe:	ea08 0804 	and.w	r8, r8, r4
 801ebc2:	4640      	mov	r0, r8
 801ebc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ebc8:	f04f 0800 	mov.w	r8, #0
 801ebcc:	4640      	mov	r0, r8
 801ebce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ebd2:	ea08 0800 	and.w	r8, r8, r0
 801ebd6:	e7d2      	b.n	801eb7e <uxr_serialize_AGENT_Representation+0x3a>

0801ebd8 <uxr_serialize_DATAWRITER_Representation>:
 801ebd8:	b570      	push	{r4, r5, r6, lr}
 801ebda:	460d      	mov	r5, r1
 801ebdc:	7809      	ldrb	r1, [r1, #0]
 801ebde:	4606      	mov	r6, r0
 801ebe0:	f7f4 fb86 	bl	80132f0 <ucdr_serialize_uint8_t>
 801ebe4:	4604      	mov	r4, r0
 801ebe6:	b130      	cbz	r0, 801ebf6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 801ebe8:	782b      	ldrb	r3, [r5, #0]
 801ebea:	2b02      	cmp	r3, #2
 801ebec:	d00c      	beq.n	801ec08 <uxr_serialize_DATAWRITER_Representation+0x30>
 801ebee:	2b03      	cmp	r3, #3
 801ebf0:	d010      	beq.n	801ec14 <uxr_serialize_DATAWRITER_Representation+0x3c>
 801ebf2:	2b01      	cmp	r3, #1
 801ebf4:	d008      	beq.n	801ec08 <uxr_serialize_DATAWRITER_Representation+0x30>
 801ebf6:	2202      	movs	r2, #2
 801ebf8:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801ebfc:	4630      	mov	r0, r6
 801ebfe:	f7fd fa5f 	bl	801c0c0 <ucdr_serialize_array_uint8_t>
 801ec02:	4020      	ands	r0, r4
 801ec04:	b2c0      	uxtb	r0, r0
 801ec06:	bd70      	pop	{r4, r5, r6, pc}
 801ec08:	6869      	ldr	r1, [r5, #4]
 801ec0a:	4630      	mov	r0, r6
 801ec0c:	f001 fd2c 	bl	8020668 <ucdr_serialize_string>
 801ec10:	4604      	mov	r4, r0
 801ec12:	e7f0      	b.n	801ebf6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 801ec14:	4629      	mov	r1, r5
 801ec16:	4630      	mov	r0, r6
 801ec18:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801ec1c:	3104      	adds	r1, #4
 801ec1e:	f7f7 fc1f 	bl	8016460 <ucdr_serialize_sequence_uint8_t>
 801ec22:	4604      	mov	r4, r0
 801ec24:	e7e7      	b.n	801ebf6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 801ec26:	bf00      	nop

0801ec28 <uxr_serialize_ObjectVariant.part.0>:
 801ec28:	b570      	push	{r4, r5, r6, lr}
 801ec2a:	780b      	ldrb	r3, [r1, #0]
 801ec2c:	460c      	mov	r4, r1
 801ec2e:	4605      	mov	r5, r0
 801ec30:	3b01      	subs	r3, #1
 801ec32:	2b0d      	cmp	r3, #13
 801ec34:	d854      	bhi.n	801ece0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801ec36:	e8df f003 	tbb	[pc, r3]
 801ec3a:	0730      	.short	0x0730
 801ec3c:	07071b1b 	.word	0x07071b1b
 801ec40:	0c530707 	.word	0x0c530707
 801ec44:	494e0c0c 	.word	0x494e0c0c
 801ec48:	3104      	adds	r1, #4
 801ec4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ec4e:	f7ff bfc3 	b.w	801ebd8 <uxr_serialize_DATAWRITER_Representation>
 801ec52:	7909      	ldrb	r1, [r1, #4]
 801ec54:	f7f4 fb4c 	bl	80132f0 <ucdr_serialize_uint8_t>
 801ec58:	b1e8      	cbz	r0, 801ec96 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801ec5a:	7923      	ldrb	r3, [r4, #4]
 801ec5c:	2b01      	cmp	r3, #1
 801ec5e:	d001      	beq.n	801ec64 <uxr_serialize_ObjectVariant.part.0+0x3c>
 801ec60:	2b02      	cmp	r3, #2
 801ec62:	d13d      	bne.n	801ece0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801ec64:	68a1      	ldr	r1, [r4, #8]
 801ec66:	4628      	mov	r0, r5
 801ec68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ec6c:	f001 bcfc 	b.w	8020668 <ucdr_serialize_string>
 801ec70:	7909      	ldrb	r1, [r1, #4]
 801ec72:	f7f4 fb3d 	bl	80132f0 <ucdr_serialize_uint8_t>
 801ec76:	4606      	mov	r6, r0
 801ec78:	b120      	cbz	r0, 801ec84 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801ec7a:	7923      	ldrb	r3, [r4, #4]
 801ec7c:	2b02      	cmp	r3, #2
 801ec7e:	d039      	beq.n	801ecf4 <uxr_serialize_ObjectVariant.part.0+0xcc>
 801ec80:	2b03      	cmp	r3, #3
 801ec82:	d02f      	beq.n	801ece4 <uxr_serialize_ObjectVariant.part.0+0xbc>
 801ec84:	2202      	movs	r2, #2
 801ec86:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801ec8a:	4628      	mov	r0, r5
 801ec8c:	f7fd fa18 	bl	801c0c0 <ucdr_serialize_array_uint8_t>
 801ec90:	4030      	ands	r0, r6
 801ec92:	b2c0      	uxtb	r0, r0
 801ec94:	bd70      	pop	{r4, r5, r6, pc}
 801ec96:	2000      	movs	r0, #0
 801ec98:	bd70      	pop	{r4, r5, r6, pc}
 801ec9a:	7909      	ldrb	r1, [r1, #4]
 801ec9c:	f7f4 fb28 	bl	80132f0 <ucdr_serialize_uint8_t>
 801eca0:	4606      	mov	r6, r0
 801eca2:	b158      	cbz	r0, 801ecbc <uxr_serialize_ObjectVariant.part.0+0x94>
 801eca4:	7923      	ldrb	r3, [r4, #4]
 801eca6:	2b02      	cmp	r3, #2
 801eca8:	d003      	beq.n	801ecb2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801ecaa:	2b03      	cmp	r3, #3
 801ecac:	d028      	beq.n	801ed00 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801ecae:	2b01      	cmp	r3, #1
 801ecb0:	d104      	bne.n	801ecbc <uxr_serialize_ObjectVariant.part.0+0x94>
 801ecb2:	68a1      	ldr	r1, [r4, #8]
 801ecb4:	4628      	mov	r0, r5
 801ecb6:	f001 fcd7 	bl	8020668 <ucdr_serialize_string>
 801ecba:	4606      	mov	r6, r0
 801ecbc:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 801ecc0:	4628      	mov	r0, r5
 801ecc2:	f7f5 f851 	bl	8013d68 <ucdr_serialize_int16_t>
 801ecc6:	4030      	ands	r0, r6
 801ecc8:	b2c0      	uxtb	r0, r0
 801ecca:	bd70      	pop	{r4, r5, r6, pc}
 801eccc:	3104      	adds	r1, #4
 801ecce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ecd2:	f7ff be7b 	b.w	801e9cc <uxr_serialize_CLIENT_Representation>
 801ecd6:	3104      	adds	r1, #4
 801ecd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ecdc:	f7ff bf32 	b.w	801eb44 <uxr_serialize_AGENT_Representation>
 801ece0:	2001      	movs	r0, #1
 801ece2:	bd70      	pop	{r4, r5, r6, pc}
 801ece4:	68a2      	ldr	r2, [r4, #8]
 801ece6:	f104 010c 	add.w	r1, r4, #12
 801ecea:	4628      	mov	r0, r5
 801ecec:	f7f7 fbb8 	bl	8016460 <ucdr_serialize_sequence_uint8_t>
 801ecf0:	4606      	mov	r6, r0
 801ecf2:	e7c7      	b.n	801ec84 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801ecf4:	68a1      	ldr	r1, [r4, #8]
 801ecf6:	4628      	mov	r0, r5
 801ecf8:	f001 fcb6 	bl	8020668 <ucdr_serialize_string>
 801ecfc:	4606      	mov	r6, r0
 801ecfe:	e7c1      	b.n	801ec84 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801ed00:	68a2      	ldr	r2, [r4, #8]
 801ed02:	f104 010c 	add.w	r1, r4, #12
 801ed06:	4628      	mov	r0, r5
 801ed08:	f7f7 fbaa 	bl	8016460 <ucdr_serialize_sequence_uint8_t>
 801ed0c:	4606      	mov	r6, r0
 801ed0e:	e7d5      	b.n	801ecbc <uxr_serialize_ObjectVariant.part.0+0x94>

0801ed10 <uxr_deserialize_DATAWRITER_Representation>:
 801ed10:	b570      	push	{r4, r5, r6, lr}
 801ed12:	4606      	mov	r6, r0
 801ed14:	460d      	mov	r5, r1
 801ed16:	f7f4 fb01 	bl	801331c <ucdr_deserialize_uint8_t>
 801ed1a:	4604      	mov	r4, r0
 801ed1c:	b130      	cbz	r0, 801ed2c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801ed1e:	782b      	ldrb	r3, [r5, #0]
 801ed20:	2b02      	cmp	r3, #2
 801ed22:	d00c      	beq.n	801ed3e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801ed24:	2b03      	cmp	r3, #3
 801ed26:	d012      	beq.n	801ed4e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 801ed28:	2b01      	cmp	r3, #1
 801ed2a:	d008      	beq.n	801ed3e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801ed2c:	2202      	movs	r2, #2
 801ed2e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801ed32:	4630      	mov	r0, r6
 801ed34:	f7fd fa28 	bl	801c188 <ucdr_deserialize_array_uint8_t>
 801ed38:	4020      	ands	r0, r4
 801ed3a:	b2c0      	uxtb	r0, r0
 801ed3c:	bd70      	pop	{r4, r5, r6, pc}
 801ed3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801ed42:	6869      	ldr	r1, [r5, #4]
 801ed44:	4630      	mov	r0, r6
 801ed46:	f001 fc9f 	bl	8020688 <ucdr_deserialize_string>
 801ed4a:	4604      	mov	r4, r0
 801ed4c:	e7ee      	b.n	801ed2c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801ed4e:	1d2b      	adds	r3, r5, #4
 801ed50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801ed54:	f105 0108 	add.w	r1, r5, #8
 801ed58:	4630      	mov	r0, r6
 801ed5a:	f7f7 fb93 	bl	8016484 <ucdr_deserialize_sequence_uint8_t>
 801ed5e:	4604      	mov	r4, r0
 801ed60:	e7e4      	b.n	801ed2c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801ed62:	bf00      	nop

0801ed64 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801ed64:	b570      	push	{r4, r5, r6, lr}
 801ed66:	460d      	mov	r5, r1
 801ed68:	7809      	ldrb	r1, [r1, #0]
 801ed6a:	4606      	mov	r6, r0
 801ed6c:	f7f4 fa92 	bl	8013294 <ucdr_serialize_bool>
 801ed70:	782b      	ldrb	r3, [r5, #0]
 801ed72:	4604      	mov	r4, r0
 801ed74:	b94b      	cbnz	r3, 801ed8a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801ed76:	7a29      	ldrb	r1, [r5, #8]
 801ed78:	4630      	mov	r0, r6
 801ed7a:	f7f4 fa8b 	bl	8013294 <ucdr_serialize_bool>
 801ed7e:	7a2b      	ldrb	r3, [r5, #8]
 801ed80:	4004      	ands	r4, r0
 801ed82:	b2e4      	uxtb	r4, r4
 801ed84:	b943      	cbnz	r3, 801ed98 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801ed86:	4620      	mov	r0, r4
 801ed88:	bd70      	pop	{r4, r5, r6, pc}
 801ed8a:	6869      	ldr	r1, [r5, #4]
 801ed8c:	4630      	mov	r0, r6
 801ed8e:	f001 fc6b 	bl	8020668 <ucdr_serialize_string>
 801ed92:	4004      	ands	r4, r0
 801ed94:	b2e4      	uxtb	r4, r4
 801ed96:	e7ee      	b.n	801ed76 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801ed98:	68e9      	ldr	r1, [r5, #12]
 801ed9a:	4630      	mov	r0, r6
 801ed9c:	f001 fc64 	bl	8020668 <ucdr_serialize_string>
 801eda0:	4004      	ands	r4, r0
 801eda2:	4620      	mov	r0, r4
 801eda4:	bd70      	pop	{r4, r5, r6, pc}
 801eda6:	bf00      	nop

0801eda8 <uxr_serialize_OBJK_Topic_Binary>:
 801eda8:	b570      	push	{r4, r5, r6, lr}
 801edaa:	460d      	mov	r5, r1
 801edac:	4606      	mov	r6, r0
 801edae:	6809      	ldr	r1, [r1, #0]
 801edb0:	f001 fc5a 	bl	8020668 <ucdr_serialize_string>
 801edb4:	4604      	mov	r4, r0
 801edb6:	7929      	ldrb	r1, [r5, #4]
 801edb8:	4630      	mov	r0, r6
 801edba:	f7f4 fa6b 	bl	8013294 <ucdr_serialize_bool>
 801edbe:	792b      	ldrb	r3, [r5, #4]
 801edc0:	4004      	ands	r4, r0
 801edc2:	b2e4      	uxtb	r4, r4
 801edc4:	b943      	cbnz	r3, 801edd8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801edc6:	7b29      	ldrb	r1, [r5, #12]
 801edc8:	4630      	mov	r0, r6
 801edca:	f7f4 fa63 	bl	8013294 <ucdr_serialize_bool>
 801edce:	7b2b      	ldrb	r3, [r5, #12]
 801edd0:	4004      	ands	r4, r0
 801edd2:	b93b      	cbnz	r3, 801ede4 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801edd4:	4620      	mov	r0, r4
 801edd6:	bd70      	pop	{r4, r5, r6, pc}
 801edd8:	68a9      	ldr	r1, [r5, #8]
 801edda:	4630      	mov	r0, r6
 801eddc:	f001 fc44 	bl	8020668 <ucdr_serialize_string>
 801ede0:	4004      	ands	r4, r0
 801ede2:	e7f0      	b.n	801edc6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801ede4:	6929      	ldr	r1, [r5, #16]
 801ede6:	4630      	mov	r0, r6
 801ede8:	f001 fc3e 	bl	8020668 <ucdr_serialize_string>
 801edec:	4004      	ands	r4, r0
 801edee:	b2e4      	uxtb	r4, r4
 801edf0:	4620      	mov	r0, r4
 801edf2:	bd70      	pop	{r4, r5, r6, pc}

0801edf4 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801edf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801edf8:	460c      	mov	r4, r1
 801edfa:	7809      	ldrb	r1, [r1, #0]
 801edfc:	4606      	mov	r6, r0
 801edfe:	f7f4 fa49 	bl	8013294 <ucdr_serialize_bool>
 801ee02:	7823      	ldrb	r3, [r4, #0]
 801ee04:	4605      	mov	r5, r0
 801ee06:	b96b      	cbnz	r3, 801ee24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 801ee08:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801ee0c:	4630      	mov	r0, r6
 801ee0e:	f7f4 fa41 	bl	8013294 <ucdr_serialize_bool>
 801ee12:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801ee16:	4005      	ands	r5, r0
 801ee18:	b2ed      	uxtb	r5, r5
 801ee1a:	2b00      	cmp	r3, #0
 801ee1c:	d169      	bne.n	801eef2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801ee1e:	4628      	mov	r0, r5
 801ee20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee24:	6861      	ldr	r1, [r4, #4]
 801ee26:	4630      	mov	r0, r6
 801ee28:	f7f4 fc78 	bl	801371c <ucdr_serialize_uint32_t>
 801ee2c:	6863      	ldr	r3, [r4, #4]
 801ee2e:	2b00      	cmp	r3, #0
 801ee30:	d06b      	beq.n	801ef0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801ee32:	2800      	cmp	r0, #0
 801ee34:	d067      	beq.n	801ef06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801ee36:	68a1      	ldr	r1, [r4, #8]
 801ee38:	4630      	mov	r0, r6
 801ee3a:	f001 fc15 	bl	8020668 <ucdr_serialize_string>
 801ee3e:	6863      	ldr	r3, [r4, #4]
 801ee40:	2b01      	cmp	r3, #1
 801ee42:	d953      	bls.n	801eeec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801ee44:	2800      	cmp	r0, #0
 801ee46:	d05e      	beq.n	801ef06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801ee48:	68e1      	ldr	r1, [r4, #12]
 801ee4a:	4630      	mov	r0, r6
 801ee4c:	f001 fc0c 	bl	8020668 <ucdr_serialize_string>
 801ee50:	6863      	ldr	r3, [r4, #4]
 801ee52:	2b02      	cmp	r3, #2
 801ee54:	d94a      	bls.n	801eeec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801ee56:	2800      	cmp	r0, #0
 801ee58:	d055      	beq.n	801ef06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801ee5a:	6921      	ldr	r1, [r4, #16]
 801ee5c:	4630      	mov	r0, r6
 801ee5e:	f001 fc03 	bl	8020668 <ucdr_serialize_string>
 801ee62:	6863      	ldr	r3, [r4, #4]
 801ee64:	2b03      	cmp	r3, #3
 801ee66:	d941      	bls.n	801eeec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801ee68:	2800      	cmp	r0, #0
 801ee6a:	d04c      	beq.n	801ef06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801ee6c:	6961      	ldr	r1, [r4, #20]
 801ee6e:	4630      	mov	r0, r6
 801ee70:	f001 fbfa 	bl	8020668 <ucdr_serialize_string>
 801ee74:	6863      	ldr	r3, [r4, #4]
 801ee76:	2b04      	cmp	r3, #4
 801ee78:	d938      	bls.n	801eeec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801ee7a:	2800      	cmp	r0, #0
 801ee7c:	d043      	beq.n	801ef06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801ee7e:	69a1      	ldr	r1, [r4, #24]
 801ee80:	4630      	mov	r0, r6
 801ee82:	f001 fbf1 	bl	8020668 <ucdr_serialize_string>
 801ee86:	6863      	ldr	r3, [r4, #4]
 801ee88:	2b05      	cmp	r3, #5
 801ee8a:	d92f      	bls.n	801eeec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801ee8c:	2800      	cmp	r0, #0
 801ee8e:	d03a      	beq.n	801ef06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801ee90:	69e1      	ldr	r1, [r4, #28]
 801ee92:	4630      	mov	r0, r6
 801ee94:	f001 fbe8 	bl	8020668 <ucdr_serialize_string>
 801ee98:	6863      	ldr	r3, [r4, #4]
 801ee9a:	2b06      	cmp	r3, #6
 801ee9c:	d926      	bls.n	801eeec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801ee9e:	b390      	cbz	r0, 801ef06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801eea0:	6a21      	ldr	r1, [r4, #32]
 801eea2:	4630      	mov	r0, r6
 801eea4:	f001 fbe0 	bl	8020668 <ucdr_serialize_string>
 801eea8:	6863      	ldr	r3, [r4, #4]
 801eeaa:	2b07      	cmp	r3, #7
 801eeac:	d91e      	bls.n	801eeec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801eeae:	b350      	cbz	r0, 801ef06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801eeb0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801eeb2:	4630      	mov	r0, r6
 801eeb4:	f001 fbd8 	bl	8020668 <ucdr_serialize_string>
 801eeb8:	6863      	ldr	r3, [r4, #4]
 801eeba:	2b08      	cmp	r3, #8
 801eebc:	d916      	bls.n	801eeec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801eebe:	b310      	cbz	r0, 801ef06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801eec0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801eec2:	4630      	mov	r0, r6
 801eec4:	f001 fbd0 	bl	8020668 <ucdr_serialize_string>
 801eec8:	6863      	ldr	r3, [r4, #4]
 801eeca:	2b09      	cmp	r3, #9
 801eecc:	d90e      	bls.n	801eeec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801eece:	b1d0      	cbz	r0, 801ef06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801eed0:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801eed4:	2709      	movs	r7, #9
 801eed6:	e000      	b.n	801eeda <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 801eed8:	b1a8      	cbz	r0, 801ef06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801eeda:	f858 1b04 	ldr.w	r1, [r8], #4
 801eede:	4630      	mov	r0, r6
 801eee0:	f001 fbc2 	bl	8020668 <ucdr_serialize_string>
 801eee4:	3701      	adds	r7, #1
 801eee6:	6862      	ldr	r2, [r4, #4]
 801eee8:	4297      	cmp	r7, r2
 801eeea:	d3f5      	bcc.n	801eed8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801eeec:	4005      	ands	r5, r0
 801eeee:	b2ed      	uxtb	r5, r5
 801eef0:	e78a      	b.n	801ee08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801eef2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801eef4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801eef8:	4630      	mov	r0, r6
 801eefa:	f7f7 fab1 	bl	8016460 <ucdr_serialize_sequence_uint8_t>
 801eefe:	4005      	ands	r5, r0
 801ef00:	4628      	mov	r0, r5
 801ef02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ef06:	2500      	movs	r5, #0
 801ef08:	e77e      	b.n	801ee08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801ef0a:	4028      	ands	r0, r5
 801ef0c:	b2c5      	uxtb	r5, r0
 801ef0e:	e77b      	b.n	801ee08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0801ef10 <uxr_serialize_OBJK_Publisher_Binary>:
 801ef10:	b570      	push	{r4, r5, r6, lr}
 801ef12:	460d      	mov	r5, r1
 801ef14:	7809      	ldrb	r1, [r1, #0]
 801ef16:	4606      	mov	r6, r0
 801ef18:	f7f4 f9bc 	bl	8013294 <ucdr_serialize_bool>
 801ef1c:	782b      	ldrb	r3, [r5, #0]
 801ef1e:	4604      	mov	r4, r0
 801ef20:	b94b      	cbnz	r3, 801ef36 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801ef22:	7a29      	ldrb	r1, [r5, #8]
 801ef24:	4630      	mov	r0, r6
 801ef26:	f7f4 f9b5 	bl	8013294 <ucdr_serialize_bool>
 801ef2a:	7a2b      	ldrb	r3, [r5, #8]
 801ef2c:	4004      	ands	r4, r0
 801ef2e:	b2e4      	uxtb	r4, r4
 801ef30:	b943      	cbnz	r3, 801ef44 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801ef32:	4620      	mov	r0, r4
 801ef34:	bd70      	pop	{r4, r5, r6, pc}
 801ef36:	6869      	ldr	r1, [r5, #4]
 801ef38:	4630      	mov	r0, r6
 801ef3a:	f001 fb95 	bl	8020668 <ucdr_serialize_string>
 801ef3e:	4004      	ands	r4, r0
 801ef40:	b2e4      	uxtb	r4, r4
 801ef42:	e7ee      	b.n	801ef22 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801ef44:	f105 010c 	add.w	r1, r5, #12
 801ef48:	4630      	mov	r0, r6
 801ef4a:	f7ff ff53 	bl	801edf4 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801ef4e:	4004      	ands	r4, r0
 801ef50:	4620      	mov	r0, r4
 801ef52:	bd70      	pop	{r4, r5, r6, pc}

0801ef54 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 801ef54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ef58:	460c      	mov	r4, r1
 801ef5a:	7809      	ldrb	r1, [r1, #0]
 801ef5c:	4606      	mov	r6, r0
 801ef5e:	f7f4 f999 	bl	8013294 <ucdr_serialize_bool>
 801ef62:	7823      	ldrb	r3, [r4, #0]
 801ef64:	4605      	mov	r5, r0
 801ef66:	b96b      	cbnz	r3, 801ef84 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 801ef68:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801ef6c:	4630      	mov	r0, r6
 801ef6e:	f7f4 f991 	bl	8013294 <ucdr_serialize_bool>
 801ef72:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801ef76:	4005      	ands	r5, r0
 801ef78:	b2ed      	uxtb	r5, r5
 801ef7a:	2b00      	cmp	r3, #0
 801ef7c:	d169      	bne.n	801f052 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801ef7e:	4628      	mov	r0, r5
 801ef80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ef84:	6861      	ldr	r1, [r4, #4]
 801ef86:	4630      	mov	r0, r6
 801ef88:	f7f4 fbc8 	bl	801371c <ucdr_serialize_uint32_t>
 801ef8c:	6863      	ldr	r3, [r4, #4]
 801ef8e:	2b00      	cmp	r3, #0
 801ef90:	d06b      	beq.n	801f06a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801ef92:	2800      	cmp	r0, #0
 801ef94:	d067      	beq.n	801f066 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801ef96:	68a1      	ldr	r1, [r4, #8]
 801ef98:	4630      	mov	r0, r6
 801ef9a:	f001 fb65 	bl	8020668 <ucdr_serialize_string>
 801ef9e:	6863      	ldr	r3, [r4, #4]
 801efa0:	2b01      	cmp	r3, #1
 801efa2:	d953      	bls.n	801f04c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801efa4:	2800      	cmp	r0, #0
 801efa6:	d05e      	beq.n	801f066 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801efa8:	68e1      	ldr	r1, [r4, #12]
 801efaa:	4630      	mov	r0, r6
 801efac:	f001 fb5c 	bl	8020668 <ucdr_serialize_string>
 801efb0:	6863      	ldr	r3, [r4, #4]
 801efb2:	2b02      	cmp	r3, #2
 801efb4:	d94a      	bls.n	801f04c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801efb6:	2800      	cmp	r0, #0
 801efb8:	d055      	beq.n	801f066 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801efba:	6921      	ldr	r1, [r4, #16]
 801efbc:	4630      	mov	r0, r6
 801efbe:	f001 fb53 	bl	8020668 <ucdr_serialize_string>
 801efc2:	6863      	ldr	r3, [r4, #4]
 801efc4:	2b03      	cmp	r3, #3
 801efc6:	d941      	bls.n	801f04c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801efc8:	2800      	cmp	r0, #0
 801efca:	d04c      	beq.n	801f066 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801efcc:	6961      	ldr	r1, [r4, #20]
 801efce:	4630      	mov	r0, r6
 801efd0:	f001 fb4a 	bl	8020668 <ucdr_serialize_string>
 801efd4:	6863      	ldr	r3, [r4, #4]
 801efd6:	2b04      	cmp	r3, #4
 801efd8:	d938      	bls.n	801f04c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801efda:	2800      	cmp	r0, #0
 801efdc:	d043      	beq.n	801f066 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801efde:	69a1      	ldr	r1, [r4, #24]
 801efe0:	4630      	mov	r0, r6
 801efe2:	f001 fb41 	bl	8020668 <ucdr_serialize_string>
 801efe6:	6863      	ldr	r3, [r4, #4]
 801efe8:	2b05      	cmp	r3, #5
 801efea:	d92f      	bls.n	801f04c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801efec:	2800      	cmp	r0, #0
 801efee:	d03a      	beq.n	801f066 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801eff0:	69e1      	ldr	r1, [r4, #28]
 801eff2:	4630      	mov	r0, r6
 801eff4:	f001 fb38 	bl	8020668 <ucdr_serialize_string>
 801eff8:	6863      	ldr	r3, [r4, #4]
 801effa:	2b06      	cmp	r3, #6
 801effc:	d926      	bls.n	801f04c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801effe:	b390      	cbz	r0, 801f066 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801f000:	6a21      	ldr	r1, [r4, #32]
 801f002:	4630      	mov	r0, r6
 801f004:	f001 fb30 	bl	8020668 <ucdr_serialize_string>
 801f008:	6863      	ldr	r3, [r4, #4]
 801f00a:	2b07      	cmp	r3, #7
 801f00c:	d91e      	bls.n	801f04c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801f00e:	b350      	cbz	r0, 801f066 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801f010:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801f012:	4630      	mov	r0, r6
 801f014:	f001 fb28 	bl	8020668 <ucdr_serialize_string>
 801f018:	6863      	ldr	r3, [r4, #4]
 801f01a:	2b08      	cmp	r3, #8
 801f01c:	d916      	bls.n	801f04c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801f01e:	b310      	cbz	r0, 801f066 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801f020:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801f022:	4630      	mov	r0, r6
 801f024:	f001 fb20 	bl	8020668 <ucdr_serialize_string>
 801f028:	6863      	ldr	r3, [r4, #4]
 801f02a:	2b09      	cmp	r3, #9
 801f02c:	d90e      	bls.n	801f04c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801f02e:	b1d0      	cbz	r0, 801f066 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801f030:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801f034:	2709      	movs	r7, #9
 801f036:	e000      	b.n	801f03a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 801f038:	b1a8      	cbz	r0, 801f066 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801f03a:	f858 1b04 	ldr.w	r1, [r8], #4
 801f03e:	4630      	mov	r0, r6
 801f040:	f001 fb12 	bl	8020668 <ucdr_serialize_string>
 801f044:	3701      	adds	r7, #1
 801f046:	6862      	ldr	r2, [r4, #4]
 801f048:	4297      	cmp	r7, r2
 801f04a:	d3f5      	bcc.n	801f038 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 801f04c:	4005      	ands	r5, r0
 801f04e:	b2ed      	uxtb	r5, r5
 801f050:	e78a      	b.n	801ef68 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801f052:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801f054:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801f058:	4630      	mov	r0, r6
 801f05a:	f7f7 fa01 	bl	8016460 <ucdr_serialize_sequence_uint8_t>
 801f05e:	4005      	ands	r5, r0
 801f060:	4628      	mov	r0, r5
 801f062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f066:	2500      	movs	r5, #0
 801f068:	e77e      	b.n	801ef68 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801f06a:	4028      	ands	r0, r5
 801f06c:	b2c5      	uxtb	r5, r0
 801f06e:	e77b      	b.n	801ef68 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0801f070 <uxr_serialize_OBJK_Subscriber_Binary>:
 801f070:	b570      	push	{r4, r5, r6, lr}
 801f072:	460d      	mov	r5, r1
 801f074:	7809      	ldrb	r1, [r1, #0]
 801f076:	4606      	mov	r6, r0
 801f078:	f7f4 f90c 	bl	8013294 <ucdr_serialize_bool>
 801f07c:	782b      	ldrb	r3, [r5, #0]
 801f07e:	4604      	mov	r4, r0
 801f080:	b94b      	cbnz	r3, 801f096 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801f082:	7a29      	ldrb	r1, [r5, #8]
 801f084:	4630      	mov	r0, r6
 801f086:	f7f4 f905 	bl	8013294 <ucdr_serialize_bool>
 801f08a:	7a2b      	ldrb	r3, [r5, #8]
 801f08c:	4004      	ands	r4, r0
 801f08e:	b2e4      	uxtb	r4, r4
 801f090:	b943      	cbnz	r3, 801f0a4 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801f092:	4620      	mov	r0, r4
 801f094:	bd70      	pop	{r4, r5, r6, pc}
 801f096:	6869      	ldr	r1, [r5, #4]
 801f098:	4630      	mov	r0, r6
 801f09a:	f001 fae5 	bl	8020668 <ucdr_serialize_string>
 801f09e:	4004      	ands	r4, r0
 801f0a0:	b2e4      	uxtb	r4, r4
 801f0a2:	e7ee      	b.n	801f082 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801f0a4:	f105 010c 	add.w	r1, r5, #12
 801f0a8:	4630      	mov	r0, r6
 801f0aa:	f7ff ff53 	bl	801ef54 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801f0ae:	4004      	ands	r4, r0
 801f0b0:	4620      	mov	r0, r4
 801f0b2:	bd70      	pop	{r4, r5, r6, pc}

0801f0b4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801f0b4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 801f0b8:	4688      	mov	r8, r1
 801f0ba:	4681      	mov	r9, r0
 801f0bc:	8809      	ldrh	r1, [r1, #0]
 801f0be:	f7f4 f943 	bl	8013348 <ucdr_serialize_uint16_t>
 801f0c2:	4606      	mov	r6, r0
 801f0c4:	f898 1002 	ldrb.w	r1, [r8, #2]
 801f0c8:	4648      	mov	r0, r9
 801f0ca:	f7f4 f8e3 	bl	8013294 <ucdr_serialize_bool>
 801f0ce:	f898 3002 	ldrb.w	r3, [r8, #2]
 801f0d2:	4006      	ands	r6, r0
 801f0d4:	b2f5      	uxtb	r5, r6
 801f0d6:	b9eb      	cbnz	r3, 801f114 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801f0d8:	f898 1006 	ldrb.w	r1, [r8, #6]
 801f0dc:	4648      	mov	r0, r9
 801f0de:	f7f4 f8d9 	bl	8013294 <ucdr_serialize_bool>
 801f0e2:	f898 3006 	ldrb.w	r3, [r8, #6]
 801f0e6:	4005      	ands	r5, r0
 801f0e8:	bb7b      	cbnz	r3, 801f14a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801f0ea:	f898 100c 	ldrb.w	r1, [r8, #12]
 801f0ee:	4648      	mov	r0, r9
 801f0f0:	f7f4 f8d0 	bl	8013294 <ucdr_serialize_bool>
 801f0f4:	f898 300c 	ldrb.w	r3, [r8, #12]
 801f0f8:	4005      	ands	r5, r0
 801f0fa:	b9f3      	cbnz	r3, 801f13a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801f0fc:	f898 1014 	ldrb.w	r1, [r8, #20]
 801f100:	4648      	mov	r0, r9
 801f102:	f7f4 f8c7 	bl	8013294 <ucdr_serialize_bool>
 801f106:	f898 3014 	ldrb.w	r3, [r8, #20]
 801f10a:	4005      	ands	r5, r0
 801f10c:	b94b      	cbnz	r3, 801f122 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801f10e:	4628      	mov	r0, r5
 801f110:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801f114:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801f118:	4648      	mov	r0, r9
 801f11a:	f7f4 f915 	bl	8013348 <ucdr_serialize_uint16_t>
 801f11e:	4005      	ands	r5, r0
 801f120:	e7da      	b.n	801f0d8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801f122:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801f126:	f108 011c 	add.w	r1, r8, #28
 801f12a:	4648      	mov	r0, r9
 801f12c:	f7f7 f998 	bl	8016460 <ucdr_serialize_sequence_uint8_t>
 801f130:	4028      	ands	r0, r5
 801f132:	b2c5      	uxtb	r5, r0
 801f134:	4628      	mov	r0, r5
 801f136:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801f13a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801f13e:	4648      	mov	r0, r9
 801f140:	f7f4 faec 	bl	801371c <ucdr_serialize_uint32_t>
 801f144:	4028      	ands	r0, r5
 801f146:	b2c5      	uxtb	r5, r0
 801f148:	e7d8      	b.n	801f0fc <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801f14a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801f14e:	4648      	mov	r0, r9
 801f150:	f7f4 fae4 	bl	801371c <ucdr_serialize_uint32_t>
 801f154:	4028      	ands	r0, r5
 801f156:	b2c5      	uxtb	r5, r0
 801f158:	e7c7      	b.n	801f0ea <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801f15a:	bf00      	nop

0801f15c <uxr_serialize_OBJK_DataReader_Binary>:
 801f15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f15e:	2202      	movs	r2, #2
 801f160:	460c      	mov	r4, r1
 801f162:	4606      	mov	r6, r0
 801f164:	f7fc ffac 	bl	801c0c0 <ucdr_serialize_array_uint8_t>
 801f168:	4605      	mov	r5, r0
 801f16a:	78a1      	ldrb	r1, [r4, #2]
 801f16c:	4630      	mov	r0, r6
 801f16e:	f7f4 f891 	bl	8013294 <ucdr_serialize_bool>
 801f172:	78a3      	ldrb	r3, [r4, #2]
 801f174:	4005      	ands	r5, r0
 801f176:	b2ed      	uxtb	r5, r5
 801f178:	b90b      	cbnz	r3, 801f17e <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801f17a:	4628      	mov	r0, r5
 801f17c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f17e:	f104 0108 	add.w	r1, r4, #8
 801f182:	4630      	mov	r0, r6
 801f184:	f7ff ff96 	bl	801f0b4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801f188:	4607      	mov	r7, r0
 801f18a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801f18e:	4630      	mov	r0, r6
 801f190:	f7f4 f880 	bl	8013294 <ucdr_serialize_bool>
 801f194:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801f198:	4038      	ands	r0, r7
 801f19a:	b2c7      	uxtb	r7, r0
 801f19c:	b95b      	cbnz	r3, 801f1b6 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801f19e:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801f1a2:	4630      	mov	r0, r6
 801f1a4:	f7f4 f876 	bl	8013294 <ucdr_serialize_bool>
 801f1a8:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801f1ac:	4007      	ands	r7, r0
 801f1ae:	b94b      	cbnz	r3, 801f1c4 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801f1b0:	403d      	ands	r5, r7
 801f1b2:	4628      	mov	r0, r5
 801f1b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f1b6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 801f1ba:	4630      	mov	r0, r6
 801f1bc:	f7f4 fd04 	bl	8013bc8 <ucdr_serialize_uint64_t>
 801f1c0:	4007      	ands	r7, r0
 801f1c2:	e7ec      	b.n	801f19e <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801f1c4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801f1c6:	4630      	mov	r0, r6
 801f1c8:	f001 fa4e 	bl	8020668 <ucdr_serialize_string>
 801f1cc:	4007      	ands	r7, r0
 801f1ce:	b2ff      	uxtb	r7, r7
 801f1d0:	e7ee      	b.n	801f1b0 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801f1d2:	bf00      	nop

0801f1d4 <uxr_serialize_OBJK_DataWriter_Binary>:
 801f1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f1d6:	2202      	movs	r2, #2
 801f1d8:	460d      	mov	r5, r1
 801f1da:	4606      	mov	r6, r0
 801f1dc:	f7fc ff70 	bl	801c0c0 <ucdr_serialize_array_uint8_t>
 801f1e0:	4604      	mov	r4, r0
 801f1e2:	78a9      	ldrb	r1, [r5, #2]
 801f1e4:	4630      	mov	r0, r6
 801f1e6:	f7f4 f855 	bl	8013294 <ucdr_serialize_bool>
 801f1ea:	78ab      	ldrb	r3, [r5, #2]
 801f1ec:	4004      	ands	r4, r0
 801f1ee:	b2e4      	uxtb	r4, r4
 801f1f0:	b90b      	cbnz	r3, 801f1f6 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801f1f2:	4620      	mov	r0, r4
 801f1f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f1f6:	f105 0108 	add.w	r1, r5, #8
 801f1fa:	4630      	mov	r0, r6
 801f1fc:	f7ff ff5a 	bl	801f0b4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801f200:	4607      	mov	r7, r0
 801f202:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801f206:	4630      	mov	r0, r6
 801f208:	f7f4 f844 	bl	8013294 <ucdr_serialize_bool>
 801f20c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801f210:	4038      	ands	r0, r7
 801f212:	b2c7      	uxtb	r7, r0
 801f214:	b913      	cbnz	r3, 801f21c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801f216:	403c      	ands	r4, r7
 801f218:	4620      	mov	r0, r4
 801f21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f21c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 801f220:	4630      	mov	r0, r6
 801f222:	f7f4 fcd1 	bl	8013bc8 <ucdr_serialize_uint64_t>
 801f226:	4007      	ands	r7, r0
 801f228:	e7f5      	b.n	801f216 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801f22a:	bf00      	nop

0801f22c <uxr_serialize_OBJK_Replier_Binary>:
 801f22c:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 801f230:	460f      	mov	r7, r1
 801f232:	4680      	mov	r8, r0
 801f234:	6809      	ldr	r1, [r1, #0]
 801f236:	f001 fa17 	bl	8020668 <ucdr_serialize_string>
 801f23a:	4605      	mov	r5, r0
 801f23c:	6879      	ldr	r1, [r7, #4]
 801f23e:	4640      	mov	r0, r8
 801f240:	f001 fa12 	bl	8020668 <ucdr_serialize_string>
 801f244:	4005      	ands	r5, r0
 801f246:	68b9      	ldr	r1, [r7, #8]
 801f248:	4640      	mov	r0, r8
 801f24a:	b2ec      	uxtb	r4, r5
 801f24c:	f001 fa0c 	bl	8020668 <ucdr_serialize_string>
 801f250:	7b39      	ldrb	r1, [r7, #12]
 801f252:	4004      	ands	r4, r0
 801f254:	4640      	mov	r0, r8
 801f256:	f7f4 f81d 	bl	8013294 <ucdr_serialize_bool>
 801f25a:	7b3b      	ldrb	r3, [r7, #12]
 801f25c:	4004      	ands	r4, r0
 801f25e:	b94b      	cbnz	r3, 801f274 <uxr_serialize_OBJK_Replier_Binary+0x48>
 801f260:	7d39      	ldrb	r1, [r7, #20]
 801f262:	4640      	mov	r0, r8
 801f264:	f7f4 f816 	bl	8013294 <ucdr_serialize_bool>
 801f268:	7d3b      	ldrb	r3, [r7, #20]
 801f26a:	4004      	ands	r4, r0
 801f26c:	b943      	cbnz	r3, 801f280 <uxr_serialize_OBJK_Replier_Binary+0x54>
 801f26e:	4620      	mov	r0, r4
 801f270:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801f274:	6939      	ldr	r1, [r7, #16]
 801f276:	4640      	mov	r0, r8
 801f278:	f001 f9f6 	bl	8020668 <ucdr_serialize_string>
 801f27c:	4004      	ands	r4, r0
 801f27e:	e7ef      	b.n	801f260 <uxr_serialize_OBJK_Replier_Binary+0x34>
 801f280:	69b9      	ldr	r1, [r7, #24]
 801f282:	4640      	mov	r0, r8
 801f284:	f001 f9f0 	bl	8020668 <ucdr_serialize_string>
 801f288:	4004      	ands	r4, r0
 801f28a:	b2e4      	uxtb	r4, r4
 801f28c:	4620      	mov	r0, r4
 801f28e:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801f292:	bf00      	nop

0801f294 <uxr_deserialize_ObjectVariant>:
 801f294:	b570      	push	{r4, r5, r6, lr}
 801f296:	4605      	mov	r5, r0
 801f298:	460e      	mov	r6, r1
 801f29a:	f7f4 f83f 	bl	801331c <ucdr_deserialize_uint8_t>
 801f29e:	b168      	cbz	r0, 801f2bc <uxr_deserialize_ObjectVariant+0x28>
 801f2a0:	7833      	ldrb	r3, [r6, #0]
 801f2a2:	4604      	mov	r4, r0
 801f2a4:	3b01      	subs	r3, #1
 801f2a6:	2b0d      	cmp	r3, #13
 801f2a8:	d809      	bhi.n	801f2be <uxr_deserialize_ObjectVariant+0x2a>
 801f2aa:	e8df f003 	tbb	[pc, r3]
 801f2ae:	0a41      	.short	0x0a41
 801f2b0:	0a0a2323 	.word	0x0a0a2323
 801f2b4:	10080a0a 	.word	0x10080a0a
 801f2b8:	565c1010 	.word	0x565c1010
 801f2bc:	2400      	movs	r4, #0
 801f2be:	4620      	mov	r0, r4
 801f2c0:	bd70      	pop	{r4, r5, r6, pc}
 801f2c2:	1d31      	adds	r1, r6, #4
 801f2c4:	4628      	mov	r0, r5
 801f2c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f2ca:	f7ff bd21 	b.w	801ed10 <uxr_deserialize_DATAWRITER_Representation>
 801f2ce:	1d31      	adds	r1, r6, #4
 801f2d0:	4628      	mov	r0, r5
 801f2d2:	f7f4 f823 	bl	801331c <ucdr_deserialize_uint8_t>
 801f2d6:	2800      	cmp	r0, #0
 801f2d8:	d0f0      	beq.n	801f2bc <uxr_deserialize_ObjectVariant+0x28>
 801f2da:	7933      	ldrb	r3, [r6, #4]
 801f2dc:	2b01      	cmp	r3, #1
 801f2de:	d001      	beq.n	801f2e4 <uxr_deserialize_ObjectVariant+0x50>
 801f2e0:	2b02      	cmp	r3, #2
 801f2e2:	d1ec      	bne.n	801f2be <uxr_deserialize_ObjectVariant+0x2a>
 801f2e4:	68b1      	ldr	r1, [r6, #8]
 801f2e6:	4628      	mov	r0, r5
 801f2e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801f2ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f2f0:	f001 b9ca 	b.w	8020688 <ucdr_deserialize_string>
 801f2f4:	1d31      	adds	r1, r6, #4
 801f2f6:	4628      	mov	r0, r5
 801f2f8:	f7f4 f810 	bl	801331c <ucdr_deserialize_uint8_t>
 801f2fc:	4604      	mov	r4, r0
 801f2fe:	b170      	cbz	r0, 801f31e <uxr_deserialize_ObjectVariant+0x8a>
 801f300:	7933      	ldrb	r3, [r6, #4]
 801f302:	2b02      	cmp	r3, #2
 801f304:	d04c      	beq.n	801f3a0 <uxr_deserialize_ObjectVariant+0x10c>
 801f306:	2b03      	cmp	r3, #3
 801f308:	d109      	bne.n	801f31e <uxr_deserialize_ObjectVariant+0x8a>
 801f30a:	f106 0308 	add.w	r3, r6, #8
 801f30e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801f312:	f106 010c 	add.w	r1, r6, #12
 801f316:	4628      	mov	r0, r5
 801f318:	f7f7 f8b4 	bl	8016484 <ucdr_deserialize_sequence_uint8_t>
 801f31c:	4604      	mov	r4, r0
 801f31e:	2202      	movs	r2, #2
 801f320:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801f324:	4628      	mov	r0, r5
 801f326:	f7fc ff2f 	bl	801c188 <ucdr_deserialize_array_uint8_t>
 801f32a:	4020      	ands	r0, r4
 801f32c:	b2c4      	uxtb	r4, r0
 801f32e:	e7c6      	b.n	801f2be <uxr_deserialize_ObjectVariant+0x2a>
 801f330:	1d31      	adds	r1, r6, #4
 801f332:	4628      	mov	r0, r5
 801f334:	f7f3 fff2 	bl	801331c <ucdr_deserialize_uint8_t>
 801f338:	4604      	mov	r4, r0
 801f33a:	b130      	cbz	r0, 801f34a <uxr_deserialize_ObjectVariant+0xb6>
 801f33c:	7933      	ldrb	r3, [r6, #4]
 801f33e:	2b02      	cmp	r3, #2
 801f340:	d036      	beq.n	801f3b0 <uxr_deserialize_ObjectVariant+0x11c>
 801f342:	2b03      	cmp	r3, #3
 801f344:	d03c      	beq.n	801f3c0 <uxr_deserialize_ObjectVariant+0x12c>
 801f346:	2b01      	cmp	r3, #1
 801f348:	d032      	beq.n	801f3b0 <uxr_deserialize_ObjectVariant+0x11c>
 801f34a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801f34e:	4628      	mov	r0, r5
 801f350:	f7f4 fd8a 	bl	8013e68 <ucdr_deserialize_int16_t>
 801f354:	4020      	ands	r0, r4
 801f356:	b2c4      	uxtb	r4, r0
 801f358:	e7b1      	b.n	801f2be <uxr_deserialize_ObjectVariant+0x2a>
 801f35a:	1d31      	adds	r1, r6, #4
 801f35c:	4628      	mov	r0, r5
 801f35e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f362:	f7ff bb8b 	b.w	801ea7c <uxr_deserialize_CLIENT_Representation>
 801f366:	2204      	movs	r2, #4
 801f368:	4628      	mov	r0, r5
 801f36a:	18b1      	adds	r1, r6, r2
 801f36c:	f7fc ff0c 	bl	801c188 <ucdr_deserialize_array_uint8_t>
 801f370:	4604      	mov	r4, r0
 801f372:	2202      	movs	r2, #2
 801f374:	f106 0108 	add.w	r1, r6, #8
 801f378:	4628      	mov	r0, r5
 801f37a:	f7fc ff05 	bl	801c188 <ucdr_deserialize_array_uint8_t>
 801f37e:	4004      	ands	r4, r0
 801f380:	2202      	movs	r2, #2
 801f382:	f106 010a 	add.w	r1, r6, #10
 801f386:	4628      	mov	r0, r5
 801f388:	b2e4      	uxtb	r4, r4
 801f38a:	f7fc fefd 	bl	801c188 <ucdr_deserialize_array_uint8_t>
 801f38e:	4603      	mov	r3, r0
 801f390:	f106 010c 	add.w	r1, r6, #12
 801f394:	4628      	mov	r0, r5
 801f396:	401c      	ands	r4, r3
 801f398:	f7f3 ff92 	bl	80132c0 <ucdr_deserialize_bool>
 801f39c:	4004      	ands	r4, r0
 801f39e:	e78e      	b.n	801f2be <uxr_deserialize_ObjectVariant+0x2a>
 801f3a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801f3a4:	68b1      	ldr	r1, [r6, #8]
 801f3a6:	4628      	mov	r0, r5
 801f3a8:	f001 f96e 	bl	8020688 <ucdr_deserialize_string>
 801f3ac:	4604      	mov	r4, r0
 801f3ae:	e7b6      	b.n	801f31e <uxr_deserialize_ObjectVariant+0x8a>
 801f3b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801f3b4:	68b1      	ldr	r1, [r6, #8]
 801f3b6:	4628      	mov	r0, r5
 801f3b8:	f001 f966 	bl	8020688 <ucdr_deserialize_string>
 801f3bc:	4604      	mov	r4, r0
 801f3be:	e7c4      	b.n	801f34a <uxr_deserialize_ObjectVariant+0xb6>
 801f3c0:	f106 0308 	add.w	r3, r6, #8
 801f3c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801f3c8:	f106 010c 	add.w	r1, r6, #12
 801f3cc:	4628      	mov	r0, r5
 801f3ce:	f7f7 f859 	bl	8016484 <ucdr_deserialize_sequence_uint8_t>
 801f3d2:	4604      	mov	r4, r0
 801f3d4:	e7b9      	b.n	801f34a <uxr_deserialize_ObjectVariant+0xb6>
 801f3d6:	bf00      	nop

0801f3d8 <uxr_deserialize_BaseObjectRequest>:
 801f3d8:	b570      	push	{r4, r5, r6, lr}
 801f3da:	2202      	movs	r2, #2
 801f3dc:	4605      	mov	r5, r0
 801f3de:	460e      	mov	r6, r1
 801f3e0:	f7fc fed2 	bl	801c188 <ucdr_deserialize_array_uint8_t>
 801f3e4:	2202      	movs	r2, #2
 801f3e6:	4604      	mov	r4, r0
 801f3e8:	4628      	mov	r0, r5
 801f3ea:	18b1      	adds	r1, r6, r2
 801f3ec:	f7fc fecc 	bl	801c188 <ucdr_deserialize_array_uint8_t>
 801f3f0:	4020      	ands	r0, r4
 801f3f2:	b2c0      	uxtb	r0, r0
 801f3f4:	bd70      	pop	{r4, r5, r6, pc}
 801f3f6:	bf00      	nop

0801f3f8 <uxr_serialize_ActivityInfoVariant>:
 801f3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f3fc:	460e      	mov	r6, r1
 801f3fe:	7809      	ldrb	r1, [r1, #0]
 801f400:	4680      	mov	r8, r0
 801f402:	f7f3 ff75 	bl	80132f0 <ucdr_serialize_uint8_t>
 801f406:	4607      	mov	r7, r0
 801f408:	b138      	cbz	r0, 801f41a <uxr_serialize_ActivityInfoVariant+0x22>
 801f40a:	7833      	ldrb	r3, [r6, #0]
 801f40c:	2b06      	cmp	r3, #6
 801f40e:	f000 8081 	beq.w	801f514 <uxr_serialize_ActivityInfoVariant+0x11c>
 801f412:	2b0d      	cmp	r3, #13
 801f414:	d014      	beq.n	801f440 <uxr_serialize_ActivityInfoVariant+0x48>
 801f416:	2b05      	cmp	r3, #5
 801f418:	d002      	beq.n	801f420 <uxr_serialize_ActivityInfoVariant+0x28>
 801f41a:	4638      	mov	r0, r7
 801f41c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f420:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801f424:	4640      	mov	r0, r8
 801f426:	f7f4 fc9f 	bl	8013d68 <ucdr_serialize_int16_t>
 801f42a:	4607      	mov	r7, r0
 801f42c:	4640      	mov	r0, r8
 801f42e:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801f432:	f7f4 fbc9 	bl	8013bc8 <ucdr_serialize_uint64_t>
 801f436:	4038      	ands	r0, r7
 801f438:	b2c7      	uxtb	r7, r0
 801f43a:	4638      	mov	r0, r7
 801f43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f440:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801f444:	4640      	mov	r0, r8
 801f446:	f7f4 fc8f 	bl	8013d68 <ucdr_serialize_int16_t>
 801f44a:	68f1      	ldr	r1, [r6, #12]
 801f44c:	4607      	mov	r7, r0
 801f44e:	4640      	mov	r0, r8
 801f450:	f7f4 f964 	bl	801371c <ucdr_serialize_uint32_t>
 801f454:	68f3      	ldr	r3, [r6, #12]
 801f456:	2b00      	cmp	r3, #0
 801f458:	d0ed      	beq.n	801f436 <uxr_serialize_ActivityInfoVariant+0x3e>
 801f45a:	b318      	cbz	r0, 801f4a4 <uxr_serialize_ActivityInfoVariant+0xac>
 801f45c:	f106 090c 	add.w	r9, r6, #12
 801f460:	2400      	movs	r4, #0
 801f462:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801f466:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801f46a:	7c29      	ldrb	r1, [r5, #16]
 801f46c:	4640      	mov	r0, r8
 801f46e:	f7f3 ff3f 	bl	80132f0 <ucdr_serialize_uint8_t>
 801f472:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801f476:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801f47a:	2800      	cmp	r0, #0
 801f47c:	d051      	beq.n	801f522 <uxr_serialize_ActivityInfoVariant+0x12a>
 801f47e:	7c2b      	ldrb	r3, [r5, #16]
 801f480:	00c9      	lsls	r1, r1, #3
 801f482:	2b03      	cmp	r3, #3
 801f484:	d854      	bhi.n	801f530 <uxr_serialize_ActivityInfoVariant+0x138>
 801f486:	e8df f003 	tbb	[pc, r3]
 801f48a:	2133      	.short	0x2133
 801f48c:	020f      	.short	0x020f
 801f48e:	4449      	add	r1, r9
 801f490:	4640      	mov	r0, r8
 801f492:	6889      	ldr	r1, [r1, #8]
 801f494:	f001 f8e8 	bl	8020668 <ucdr_serialize_string>
 801f498:	3401      	adds	r4, #1
 801f49a:	68f2      	ldr	r2, [r6, #12]
 801f49c:	4294      	cmp	r4, r2
 801f49e:	d244      	bcs.n	801f52a <uxr_serialize_ActivityInfoVariant+0x132>
 801f4a0:	2800      	cmp	r0, #0
 801f4a2:	d1de      	bne.n	801f462 <uxr_serialize_ActivityInfoVariant+0x6a>
 801f4a4:	2700      	movs	r7, #0
 801f4a6:	e7b8      	b.n	801f41a <uxr_serialize_ActivityInfoVariant+0x22>
 801f4a8:	3108      	adds	r1, #8
 801f4aa:	44a2      	add	sl, r4
 801f4ac:	2210      	movs	r2, #16
 801f4ae:	4640      	mov	r0, r8
 801f4b0:	4449      	add	r1, r9
 801f4b2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801f4b6:	f7fc fe03 	bl	801c0c0 <ucdr_serialize_array_uint8_t>
 801f4ba:	4605      	mov	r5, r0
 801f4bc:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 801f4c0:	4640      	mov	r0, r8
 801f4c2:	f7f4 f92b 	bl	801371c <ucdr_serialize_uint32_t>
 801f4c6:	4028      	ands	r0, r5
 801f4c8:	b2c0      	uxtb	r0, r0
 801f4ca:	e7e5      	b.n	801f498 <uxr_serialize_ActivityInfoVariant+0xa0>
 801f4cc:	3108      	adds	r1, #8
 801f4ce:	44a2      	add	sl, r4
 801f4d0:	2204      	movs	r2, #4
 801f4d2:	4640      	mov	r0, r8
 801f4d4:	4449      	add	r1, r9
 801f4d6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801f4da:	f7fc fdf1 	bl	801c0c0 <ucdr_serialize_array_uint8_t>
 801f4de:	4605      	mov	r5, r0
 801f4e0:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 801f4e4:	4640      	mov	r0, r8
 801f4e6:	f7f3 ff2f 	bl	8013348 <ucdr_serialize_uint16_t>
 801f4ea:	4028      	ands	r0, r5
 801f4ec:	b2c0      	uxtb	r0, r0
 801f4ee:	e7d3      	b.n	801f498 <uxr_serialize_ActivityInfoVariant+0xa0>
 801f4f0:	3108      	adds	r1, #8
 801f4f2:	44a2      	add	sl, r4
 801f4f4:	2202      	movs	r2, #2
 801f4f6:	4640      	mov	r0, r8
 801f4f8:	4449      	add	r1, r9
 801f4fa:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801f4fe:	f7fc fddf 	bl	801c0c0 <ucdr_serialize_array_uint8_t>
 801f502:	4605      	mov	r5, r0
 801f504:	f89a 1016 	ldrb.w	r1, [sl, #22]
 801f508:	4640      	mov	r0, r8
 801f50a:	f7f3 fef1 	bl	80132f0 <ucdr_serialize_uint8_t>
 801f50e:	4028      	ands	r0, r5
 801f510:	b2c0      	uxtb	r0, r0
 801f512:	e7c1      	b.n	801f498 <uxr_serialize_ActivityInfoVariant+0xa0>
 801f514:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801f518:	4640      	mov	r0, r8
 801f51a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f51e:	f7f4 bc23 	b.w	8013d68 <ucdr_serialize_int16_t>
 801f522:	3401      	adds	r4, #1
 801f524:	68f2      	ldr	r2, [r6, #12]
 801f526:	42a2      	cmp	r2, r4
 801f528:	d8bc      	bhi.n	801f4a4 <uxr_serialize_ActivityInfoVariant+0xac>
 801f52a:	4007      	ands	r7, r0
 801f52c:	b2ff      	uxtb	r7, r7
 801f52e:	e774      	b.n	801f41a <uxr_serialize_ActivityInfoVariant+0x22>
 801f530:	3401      	adds	r4, #1
 801f532:	68f3      	ldr	r3, [r6, #12]
 801f534:	3518      	adds	r5, #24
 801f536:	429c      	cmp	r4, r3
 801f538:	d397      	bcc.n	801f46a <uxr_serialize_ActivityInfoVariant+0x72>
 801f53a:	e76e      	b.n	801f41a <uxr_serialize_ActivityInfoVariant+0x22>

0801f53c <uxr_deserialize_BaseObjectReply>:
 801f53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f540:	2202      	movs	r2, #2
 801f542:	4606      	mov	r6, r0
 801f544:	460f      	mov	r7, r1
 801f546:	f7fc fe1f 	bl	801c188 <ucdr_deserialize_array_uint8_t>
 801f54a:	2202      	movs	r2, #2
 801f54c:	4605      	mov	r5, r0
 801f54e:	4630      	mov	r0, r6
 801f550:	18b9      	adds	r1, r7, r2
 801f552:	f7fc fe19 	bl	801c188 <ucdr_deserialize_array_uint8_t>
 801f556:	4680      	mov	r8, r0
 801f558:	1d39      	adds	r1, r7, #4
 801f55a:	4630      	mov	r0, r6
 801f55c:	f7f3 fede 	bl	801331c <ucdr_deserialize_uint8_t>
 801f560:	ea05 0508 	and.w	r5, r5, r8
 801f564:	4604      	mov	r4, r0
 801f566:	1d79      	adds	r1, r7, #5
 801f568:	4630      	mov	r0, r6
 801f56a:	402c      	ands	r4, r5
 801f56c:	f7f3 fed6 	bl	801331c <ucdr_deserialize_uint8_t>
 801f570:	4020      	ands	r0, r4
 801f572:	b2c0      	uxtb	r0, r0
 801f574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f578 <uxr_serialize_ReadSpecification>:
 801f578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f57a:	460e      	mov	r6, r1
 801f57c:	4607      	mov	r7, r0
 801f57e:	7809      	ldrb	r1, [r1, #0]
 801f580:	f7f3 feb6 	bl	80132f0 <ucdr_serialize_uint8_t>
 801f584:	4604      	mov	r4, r0
 801f586:	7871      	ldrb	r1, [r6, #1]
 801f588:	4638      	mov	r0, r7
 801f58a:	f7f3 feb1 	bl	80132f0 <ucdr_serialize_uint8_t>
 801f58e:	4004      	ands	r4, r0
 801f590:	78b1      	ldrb	r1, [r6, #2]
 801f592:	4638      	mov	r0, r7
 801f594:	f7f3 fe7e 	bl	8013294 <ucdr_serialize_bool>
 801f598:	78b3      	ldrb	r3, [r6, #2]
 801f59a:	b2e4      	uxtb	r4, r4
 801f59c:	4004      	ands	r4, r0
 801f59e:	b943      	cbnz	r3, 801f5b2 <uxr_serialize_ReadSpecification+0x3a>
 801f5a0:	7a31      	ldrb	r1, [r6, #8]
 801f5a2:	4638      	mov	r0, r7
 801f5a4:	f7f3 fe76 	bl	8013294 <ucdr_serialize_bool>
 801f5a8:	7a33      	ldrb	r3, [r6, #8]
 801f5aa:	4004      	ands	r4, r0
 801f5ac:	b93b      	cbnz	r3, 801f5be <uxr_serialize_ReadSpecification+0x46>
 801f5ae:	4620      	mov	r0, r4
 801f5b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f5b2:	6871      	ldr	r1, [r6, #4]
 801f5b4:	4638      	mov	r0, r7
 801f5b6:	f001 f857 	bl	8020668 <ucdr_serialize_string>
 801f5ba:	4004      	ands	r4, r0
 801f5bc:	e7f0      	b.n	801f5a0 <uxr_serialize_ReadSpecification+0x28>
 801f5be:	8971      	ldrh	r1, [r6, #10]
 801f5c0:	4638      	mov	r0, r7
 801f5c2:	f7f3 fec1 	bl	8013348 <ucdr_serialize_uint16_t>
 801f5c6:	4605      	mov	r5, r0
 801f5c8:	89b1      	ldrh	r1, [r6, #12]
 801f5ca:	4638      	mov	r0, r7
 801f5cc:	f7f3 febc 	bl	8013348 <ucdr_serialize_uint16_t>
 801f5d0:	4005      	ands	r5, r0
 801f5d2:	89f1      	ldrh	r1, [r6, #14]
 801f5d4:	4638      	mov	r0, r7
 801f5d6:	b2ed      	uxtb	r5, r5
 801f5d8:	f7f3 feb6 	bl	8013348 <ucdr_serialize_uint16_t>
 801f5dc:	8a31      	ldrh	r1, [r6, #16]
 801f5de:	4025      	ands	r5, r4
 801f5e0:	4604      	mov	r4, r0
 801f5e2:	4638      	mov	r0, r7
 801f5e4:	4025      	ands	r5, r4
 801f5e6:	f7f3 feaf 	bl	8013348 <ucdr_serialize_uint16_t>
 801f5ea:	ea00 0405 	and.w	r4, r0, r5
 801f5ee:	4620      	mov	r0, r4
 801f5f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f5f2:	bf00      	nop

0801f5f4 <uxr_serialize_CREATE_CLIENT_Payload>:
 801f5f4:	f7ff b9ea 	b.w	801e9cc <uxr_serialize_CLIENT_Representation>

0801f5f8 <uxr_serialize_CREATE_Payload>:
 801f5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f5fa:	2202      	movs	r2, #2
 801f5fc:	4607      	mov	r7, r0
 801f5fe:	460e      	mov	r6, r1
 801f600:	f7fc fd5e 	bl	801c0c0 <ucdr_serialize_array_uint8_t>
 801f604:	2202      	movs	r2, #2
 801f606:	4605      	mov	r5, r0
 801f608:	4638      	mov	r0, r7
 801f60a:	18b1      	adds	r1, r6, r2
 801f60c:	f7fc fd58 	bl	801c0c0 <ucdr_serialize_array_uint8_t>
 801f610:	7931      	ldrb	r1, [r6, #4]
 801f612:	4604      	mov	r4, r0
 801f614:	4638      	mov	r0, r7
 801f616:	f7f3 fe6b 	bl	80132f0 <ucdr_serialize_uint8_t>
 801f61a:	b170      	cbz	r0, 801f63a <uxr_serialize_CREATE_Payload+0x42>
 801f61c:	7933      	ldrb	r3, [r6, #4]
 801f61e:	402c      	ands	r4, r5
 801f620:	3b01      	subs	r3, #1
 801f622:	b2e4      	uxtb	r4, r4
 801f624:	2b0d      	cmp	r3, #13
 801f626:	d809      	bhi.n	801f63c <uxr_serialize_CREATE_Payload+0x44>
 801f628:	e8df f003 	tbb	[pc, r3]
 801f62c:	23230a4c 	.word	0x23230a4c
 801f630:	0a0a0a0a 	.word	0x0a0a0a0a
 801f634:	12121208 	.word	0x12121208
 801f638:	3e45      	.short	0x3e45
 801f63a:	2400      	movs	r4, #0
 801f63c:	4620      	mov	r0, r4
 801f63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f640:	f106 0108 	add.w	r1, r6, #8
 801f644:	4638      	mov	r0, r7
 801f646:	f7ff fac7 	bl	801ebd8 <uxr_serialize_DATAWRITER_Representation>
 801f64a:	4004      	ands	r4, r0
 801f64c:	4620      	mov	r0, r4
 801f64e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f650:	7a31      	ldrb	r1, [r6, #8]
 801f652:	4638      	mov	r0, r7
 801f654:	f7f3 fe4c 	bl	80132f0 <ucdr_serialize_uint8_t>
 801f658:	2800      	cmp	r0, #0
 801f65a:	d0ee      	beq.n	801f63a <uxr_serialize_CREATE_Payload+0x42>
 801f65c:	7a33      	ldrb	r3, [r6, #8]
 801f65e:	2b01      	cmp	r3, #1
 801f660:	d001      	beq.n	801f666 <uxr_serialize_CREATE_Payload+0x6e>
 801f662:	2b02      	cmp	r3, #2
 801f664:	d1ea      	bne.n	801f63c <uxr_serialize_CREATE_Payload+0x44>
 801f666:	68f1      	ldr	r1, [r6, #12]
 801f668:	4638      	mov	r0, r7
 801f66a:	f000 fffd 	bl	8020668 <ucdr_serialize_string>
 801f66e:	4004      	ands	r4, r0
 801f670:	e7e4      	b.n	801f63c <uxr_serialize_CREATE_Payload+0x44>
 801f672:	7a31      	ldrb	r1, [r6, #8]
 801f674:	4638      	mov	r0, r7
 801f676:	f7f3 fe3b 	bl	80132f0 <ucdr_serialize_uint8_t>
 801f67a:	4605      	mov	r5, r0
 801f67c:	b158      	cbz	r0, 801f696 <uxr_serialize_CREATE_Payload+0x9e>
 801f67e:	7a33      	ldrb	r3, [r6, #8]
 801f680:	2b02      	cmp	r3, #2
 801f682:	d034      	beq.n	801f6ee <uxr_serialize_CREATE_Payload+0xf6>
 801f684:	2b03      	cmp	r3, #3
 801f686:	d106      	bne.n	801f696 <uxr_serialize_CREATE_Payload+0x9e>
 801f688:	68f2      	ldr	r2, [r6, #12]
 801f68a:	f106 0110 	add.w	r1, r6, #16
 801f68e:	4638      	mov	r0, r7
 801f690:	f7f6 fee6 	bl	8016460 <ucdr_serialize_sequence_uint8_t>
 801f694:	4605      	mov	r5, r0
 801f696:	2202      	movs	r2, #2
 801f698:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 801f69c:	4638      	mov	r0, r7
 801f69e:	f7fc fd0f 	bl	801c0c0 <ucdr_serialize_array_uint8_t>
 801f6a2:	4028      	ands	r0, r5
 801f6a4:	4004      	ands	r4, r0
 801f6a6:	e7c9      	b.n	801f63c <uxr_serialize_CREATE_Payload+0x44>
 801f6a8:	f106 0108 	add.w	r1, r6, #8
 801f6ac:	4638      	mov	r0, r7
 801f6ae:	f7ff f98d 	bl	801e9cc <uxr_serialize_CLIENT_Representation>
 801f6b2:	4004      	ands	r4, r0
 801f6b4:	e7c2      	b.n	801f63c <uxr_serialize_CREATE_Payload+0x44>
 801f6b6:	f106 0108 	add.w	r1, r6, #8
 801f6ba:	4638      	mov	r0, r7
 801f6bc:	f7ff fa42 	bl	801eb44 <uxr_serialize_AGENT_Representation>
 801f6c0:	4004      	ands	r4, r0
 801f6c2:	e7bb      	b.n	801f63c <uxr_serialize_CREATE_Payload+0x44>
 801f6c4:	7a31      	ldrb	r1, [r6, #8]
 801f6c6:	4638      	mov	r0, r7
 801f6c8:	f7f3 fe12 	bl	80132f0 <ucdr_serialize_uint8_t>
 801f6cc:	4605      	mov	r5, r0
 801f6ce:	b130      	cbz	r0, 801f6de <uxr_serialize_CREATE_Payload+0xe6>
 801f6d0:	7a33      	ldrb	r3, [r6, #8]
 801f6d2:	2b02      	cmp	r3, #2
 801f6d4:	d011      	beq.n	801f6fa <uxr_serialize_CREATE_Payload+0x102>
 801f6d6:	2b03      	cmp	r3, #3
 801f6d8:	d015      	beq.n	801f706 <uxr_serialize_CREATE_Payload+0x10e>
 801f6da:	2b01      	cmp	r3, #1
 801f6dc:	d00d      	beq.n	801f6fa <uxr_serialize_CREATE_Payload+0x102>
 801f6de:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801f6e2:	4638      	mov	r0, r7
 801f6e4:	f7f4 fb40 	bl	8013d68 <ucdr_serialize_int16_t>
 801f6e8:	4028      	ands	r0, r5
 801f6ea:	4004      	ands	r4, r0
 801f6ec:	e7a6      	b.n	801f63c <uxr_serialize_CREATE_Payload+0x44>
 801f6ee:	68f1      	ldr	r1, [r6, #12]
 801f6f0:	4638      	mov	r0, r7
 801f6f2:	f000 ffb9 	bl	8020668 <ucdr_serialize_string>
 801f6f6:	4605      	mov	r5, r0
 801f6f8:	e7cd      	b.n	801f696 <uxr_serialize_CREATE_Payload+0x9e>
 801f6fa:	68f1      	ldr	r1, [r6, #12]
 801f6fc:	4638      	mov	r0, r7
 801f6fe:	f000 ffb3 	bl	8020668 <ucdr_serialize_string>
 801f702:	4605      	mov	r5, r0
 801f704:	e7eb      	b.n	801f6de <uxr_serialize_CREATE_Payload+0xe6>
 801f706:	68f2      	ldr	r2, [r6, #12]
 801f708:	f106 0110 	add.w	r1, r6, #16
 801f70c:	4638      	mov	r0, r7
 801f70e:	f7f6 fea7 	bl	8016460 <ucdr_serialize_sequence_uint8_t>
 801f712:	4605      	mov	r5, r0
 801f714:	e7e3      	b.n	801f6de <uxr_serialize_CREATE_Payload+0xe6>
 801f716:	bf00      	nop

0801f718 <uxr_deserialize_GET_INFO_Payload>:
 801f718:	b570      	push	{r4, r5, r6, lr}
 801f71a:	2202      	movs	r2, #2
 801f71c:	4605      	mov	r5, r0
 801f71e:	460e      	mov	r6, r1
 801f720:	f7fc fd32 	bl	801c188 <ucdr_deserialize_array_uint8_t>
 801f724:	2202      	movs	r2, #2
 801f726:	4604      	mov	r4, r0
 801f728:	4628      	mov	r0, r5
 801f72a:	18b1      	adds	r1, r6, r2
 801f72c:	f7fc fd2c 	bl	801c188 <ucdr_deserialize_array_uint8_t>
 801f730:	4603      	mov	r3, r0
 801f732:	1d31      	adds	r1, r6, #4
 801f734:	4628      	mov	r0, r5
 801f736:	401c      	ands	r4, r3
 801f738:	f7f4 f920 	bl	801397c <ucdr_deserialize_uint32_t>
 801f73c:	b2e4      	uxtb	r4, r4
 801f73e:	4020      	ands	r0, r4
 801f740:	bd70      	pop	{r4, r5, r6, pc}
 801f742:	bf00      	nop

0801f744 <uxr_serialize_DELETE_Payload>:
 801f744:	b570      	push	{r4, r5, r6, lr}
 801f746:	2202      	movs	r2, #2
 801f748:	4605      	mov	r5, r0
 801f74a:	460e      	mov	r6, r1
 801f74c:	f7fc fcb8 	bl	801c0c0 <ucdr_serialize_array_uint8_t>
 801f750:	2202      	movs	r2, #2
 801f752:	4604      	mov	r4, r0
 801f754:	4628      	mov	r0, r5
 801f756:	18b1      	adds	r1, r6, r2
 801f758:	f7fc fcb2 	bl	801c0c0 <ucdr_serialize_array_uint8_t>
 801f75c:	4020      	ands	r0, r4
 801f75e:	b2c0      	uxtb	r0, r0
 801f760:	bd70      	pop	{r4, r5, r6, pc}
 801f762:	bf00      	nop

0801f764 <uxr_deserialize_STATUS_AGENT_Payload>:
 801f764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f768:	460e      	mov	r6, r1
 801f76a:	4605      	mov	r5, r0
 801f76c:	f7f3 fdd6 	bl	801331c <ucdr_deserialize_uint8_t>
 801f770:	4604      	mov	r4, r0
 801f772:	1c71      	adds	r1, r6, #1
 801f774:	4628      	mov	r0, r5
 801f776:	f7f3 fdd1 	bl	801331c <ucdr_deserialize_uint8_t>
 801f77a:	2204      	movs	r2, #4
 801f77c:	4681      	mov	r9, r0
 801f77e:	4628      	mov	r0, r5
 801f780:	18b1      	adds	r1, r6, r2
 801f782:	f7fc fd01 	bl	801c188 <ucdr_deserialize_array_uint8_t>
 801f786:	f106 0108 	add.w	r1, r6, #8
 801f78a:	4680      	mov	r8, r0
 801f78c:	2202      	movs	r2, #2
 801f78e:	4628      	mov	r0, r5
 801f790:	f7fc fcfa 	bl	801c188 <ucdr_deserialize_array_uint8_t>
 801f794:	ea04 0309 	and.w	r3, r4, r9
 801f798:	4607      	mov	r7, r0
 801f79a:	2202      	movs	r2, #2
 801f79c:	b2db      	uxtb	r3, r3
 801f79e:	f106 010a 	add.w	r1, r6, #10
 801f7a2:	4628      	mov	r0, r5
 801f7a4:	ea03 0408 	and.w	r4, r3, r8
 801f7a8:	f7fc fcee 	bl	801c188 <ucdr_deserialize_array_uint8_t>
 801f7ac:	4603      	mov	r3, r0
 801f7ae:	4628      	mov	r0, r5
 801f7b0:	403c      	ands	r4, r7
 801f7b2:	f106 010c 	add.w	r1, r6, #12
 801f7b6:	461d      	mov	r5, r3
 801f7b8:	f7f3 fd82 	bl	80132c0 <ucdr_deserialize_bool>
 801f7bc:	4025      	ands	r5, r4
 801f7be:	4028      	ands	r0, r5
 801f7c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801f7c4 <uxr_deserialize_STATUS_Payload>:
 801f7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f7c8:	2202      	movs	r2, #2
 801f7ca:	4606      	mov	r6, r0
 801f7cc:	460f      	mov	r7, r1
 801f7ce:	f7fc fcdb 	bl	801c188 <ucdr_deserialize_array_uint8_t>
 801f7d2:	2202      	movs	r2, #2
 801f7d4:	4605      	mov	r5, r0
 801f7d6:	4630      	mov	r0, r6
 801f7d8:	18b9      	adds	r1, r7, r2
 801f7da:	f7fc fcd5 	bl	801c188 <ucdr_deserialize_array_uint8_t>
 801f7de:	4680      	mov	r8, r0
 801f7e0:	1d39      	adds	r1, r7, #4
 801f7e2:	4630      	mov	r0, r6
 801f7e4:	f7f3 fd9a 	bl	801331c <ucdr_deserialize_uint8_t>
 801f7e8:	ea05 0508 	and.w	r5, r5, r8
 801f7ec:	4604      	mov	r4, r0
 801f7ee:	1d79      	adds	r1, r7, #5
 801f7f0:	4630      	mov	r0, r6
 801f7f2:	402c      	ands	r4, r5
 801f7f4:	f7f3 fd92 	bl	801331c <ucdr_deserialize_uint8_t>
 801f7f8:	4020      	ands	r0, r4
 801f7fa:	b2c0      	uxtb	r0, r0
 801f7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f800 <uxr_serialize_INFO_Payload>:
 801f800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f804:	2202      	movs	r2, #2
 801f806:	460c      	mov	r4, r1
 801f808:	4605      	mov	r5, r0
 801f80a:	f7fc fc59 	bl	801c0c0 <ucdr_serialize_array_uint8_t>
 801f80e:	2202      	movs	r2, #2
 801f810:	4680      	mov	r8, r0
 801f812:	4628      	mov	r0, r5
 801f814:	18a1      	adds	r1, r4, r2
 801f816:	f7fc fc53 	bl	801c0c0 <ucdr_serialize_array_uint8_t>
 801f81a:	4607      	mov	r7, r0
 801f81c:	7921      	ldrb	r1, [r4, #4]
 801f81e:	4628      	mov	r0, r5
 801f820:	f7f3 fd66 	bl	80132f0 <ucdr_serialize_uint8_t>
 801f824:	ea08 0807 	and.w	r8, r8, r7
 801f828:	4606      	mov	r6, r0
 801f82a:	7961      	ldrb	r1, [r4, #5]
 801f82c:	4628      	mov	r0, r5
 801f82e:	ea06 0608 	and.w	r6, r6, r8
 801f832:	f7f3 fd5d 	bl	80132f0 <ucdr_serialize_uint8_t>
 801f836:	7a21      	ldrb	r1, [r4, #8]
 801f838:	4030      	ands	r0, r6
 801f83a:	b2c7      	uxtb	r7, r0
 801f83c:	4628      	mov	r0, r5
 801f83e:	f7f3 fd29 	bl	8013294 <ucdr_serialize_bool>
 801f842:	7a23      	ldrb	r3, [r4, #8]
 801f844:	4606      	mov	r6, r0
 801f846:	b96b      	cbnz	r3, 801f864 <uxr_serialize_INFO_Payload+0x64>
 801f848:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 801f84c:	4628      	mov	r0, r5
 801f84e:	f7f3 fd21 	bl	8013294 <ucdr_serialize_bool>
 801f852:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801f856:	4030      	ands	r0, r6
 801f858:	b2c6      	uxtb	r6, r0
 801f85a:	b983      	cbnz	r3, 801f87e <uxr_serialize_INFO_Payload+0x7e>
 801f85c:	ea06 0007 	and.w	r0, r6, r7
 801f860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f864:	7b21      	ldrb	r1, [r4, #12]
 801f866:	4628      	mov	r0, r5
 801f868:	f7f3 fd42 	bl	80132f0 <ucdr_serialize_uint8_t>
 801f86c:	b188      	cbz	r0, 801f892 <uxr_serialize_INFO_Payload+0x92>
 801f86e:	f104 010c 	add.w	r1, r4, #12
 801f872:	4628      	mov	r0, r5
 801f874:	f7ff f9d8 	bl	801ec28 <uxr_serialize_ObjectVariant.part.0>
 801f878:	4030      	ands	r0, r6
 801f87a:	b2c6      	uxtb	r6, r0
 801f87c:	e7e4      	b.n	801f848 <uxr_serialize_INFO_Payload+0x48>
 801f87e:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801f882:	4628      	mov	r0, r5
 801f884:	f7ff fdb8 	bl	801f3f8 <uxr_serialize_ActivityInfoVariant>
 801f888:	4006      	ands	r6, r0
 801f88a:	ea06 0007 	and.w	r0, r6, r7
 801f88e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f892:	4606      	mov	r6, r0
 801f894:	e7d8      	b.n	801f848 <uxr_serialize_INFO_Payload+0x48>
 801f896:	bf00      	nop

0801f898 <uxr_serialize_READ_DATA_Payload>:
 801f898:	b570      	push	{r4, r5, r6, lr}
 801f89a:	2202      	movs	r2, #2
 801f89c:	4605      	mov	r5, r0
 801f89e:	460e      	mov	r6, r1
 801f8a0:	f7fc fc0e 	bl	801c0c0 <ucdr_serialize_array_uint8_t>
 801f8a4:	2202      	movs	r2, #2
 801f8a6:	4604      	mov	r4, r0
 801f8a8:	4628      	mov	r0, r5
 801f8aa:	18b1      	adds	r1, r6, r2
 801f8ac:	f7fc fc08 	bl	801c0c0 <ucdr_serialize_array_uint8_t>
 801f8b0:	4603      	mov	r3, r0
 801f8b2:	1d31      	adds	r1, r6, #4
 801f8b4:	4628      	mov	r0, r5
 801f8b6:	401c      	ands	r4, r3
 801f8b8:	f7ff fe5e 	bl	801f578 <uxr_serialize_ReadSpecification>
 801f8bc:	b2e4      	uxtb	r4, r4
 801f8be:	4020      	ands	r0, r4
 801f8c0:	bd70      	pop	{r4, r5, r6, pc}
 801f8c2:	bf00      	nop

0801f8c4 <uxr_serialize_WRITE_DATA_Payload_Data>:
 801f8c4:	b570      	push	{r4, r5, r6, lr}
 801f8c6:	2202      	movs	r2, #2
 801f8c8:	4605      	mov	r5, r0
 801f8ca:	460e      	mov	r6, r1
 801f8cc:	f7fc fbf8 	bl	801c0c0 <ucdr_serialize_array_uint8_t>
 801f8d0:	2202      	movs	r2, #2
 801f8d2:	4604      	mov	r4, r0
 801f8d4:	4628      	mov	r0, r5
 801f8d6:	18b1      	adds	r1, r6, r2
 801f8d8:	f7fc fbf2 	bl	801c0c0 <ucdr_serialize_array_uint8_t>
 801f8dc:	4020      	ands	r0, r4
 801f8de:	b2c0      	uxtb	r0, r0
 801f8e0:	bd70      	pop	{r4, r5, r6, pc}
 801f8e2:	bf00      	nop

0801f8e4 <uxr_serialize_ACKNACK_Payload>:
 801f8e4:	b570      	push	{r4, r5, r6, lr}
 801f8e6:	460c      	mov	r4, r1
 801f8e8:	4605      	mov	r5, r0
 801f8ea:	460e      	mov	r6, r1
 801f8ec:	f834 1b02 	ldrh.w	r1, [r4], #2
 801f8f0:	f7f3 fd2a 	bl	8013348 <ucdr_serialize_uint16_t>
 801f8f4:	2202      	movs	r2, #2
 801f8f6:	4621      	mov	r1, r4
 801f8f8:	4604      	mov	r4, r0
 801f8fa:	4628      	mov	r0, r5
 801f8fc:	f7fc fbe0 	bl	801c0c0 <ucdr_serialize_array_uint8_t>
 801f900:	4603      	mov	r3, r0
 801f902:	7931      	ldrb	r1, [r6, #4]
 801f904:	4628      	mov	r0, r5
 801f906:	401c      	ands	r4, r3
 801f908:	f7f3 fcf2 	bl	80132f0 <ucdr_serialize_uint8_t>
 801f90c:	b2e4      	uxtb	r4, r4
 801f90e:	4020      	ands	r0, r4
 801f910:	bd70      	pop	{r4, r5, r6, pc}
 801f912:	bf00      	nop

0801f914 <uxr_deserialize_ACKNACK_Payload>:
 801f914:	b570      	push	{r4, r5, r6, lr}
 801f916:	460e      	mov	r6, r1
 801f918:	4605      	mov	r5, r0
 801f91a:	f7f3 fe15 	bl	8013548 <ucdr_deserialize_uint16_t>
 801f91e:	2202      	movs	r2, #2
 801f920:	4604      	mov	r4, r0
 801f922:	4628      	mov	r0, r5
 801f924:	18b1      	adds	r1, r6, r2
 801f926:	f7fc fc2f 	bl	801c188 <ucdr_deserialize_array_uint8_t>
 801f92a:	4603      	mov	r3, r0
 801f92c:	1d31      	adds	r1, r6, #4
 801f92e:	4628      	mov	r0, r5
 801f930:	401c      	ands	r4, r3
 801f932:	f7f3 fcf3 	bl	801331c <ucdr_deserialize_uint8_t>
 801f936:	b2e4      	uxtb	r4, r4
 801f938:	4020      	ands	r0, r4
 801f93a:	bd70      	pop	{r4, r5, r6, pc}

0801f93c <uxr_serialize_HEARTBEAT_Payload>:
 801f93c:	b570      	push	{r4, r5, r6, lr}
 801f93e:	460d      	mov	r5, r1
 801f940:	4606      	mov	r6, r0
 801f942:	8809      	ldrh	r1, [r1, #0]
 801f944:	f7f3 fd00 	bl	8013348 <ucdr_serialize_uint16_t>
 801f948:	8869      	ldrh	r1, [r5, #2]
 801f94a:	4604      	mov	r4, r0
 801f94c:	4630      	mov	r0, r6
 801f94e:	f7f3 fcfb 	bl	8013348 <ucdr_serialize_uint16_t>
 801f952:	4603      	mov	r3, r0
 801f954:	7929      	ldrb	r1, [r5, #4]
 801f956:	4630      	mov	r0, r6
 801f958:	401c      	ands	r4, r3
 801f95a:	f7f3 fcc9 	bl	80132f0 <ucdr_serialize_uint8_t>
 801f95e:	b2e4      	uxtb	r4, r4
 801f960:	4020      	ands	r0, r4
 801f962:	bd70      	pop	{r4, r5, r6, pc}

0801f964 <uxr_deserialize_HEARTBEAT_Payload>:
 801f964:	b570      	push	{r4, r5, r6, lr}
 801f966:	460e      	mov	r6, r1
 801f968:	4605      	mov	r5, r0
 801f96a:	f7f3 fded 	bl	8013548 <ucdr_deserialize_uint16_t>
 801f96e:	4604      	mov	r4, r0
 801f970:	1cb1      	adds	r1, r6, #2
 801f972:	4628      	mov	r0, r5
 801f974:	f7f3 fde8 	bl	8013548 <ucdr_deserialize_uint16_t>
 801f978:	4603      	mov	r3, r0
 801f97a:	1d31      	adds	r1, r6, #4
 801f97c:	4628      	mov	r0, r5
 801f97e:	401c      	ands	r4, r3
 801f980:	f7f3 fccc 	bl	801331c <ucdr_deserialize_uint8_t>
 801f984:	b2e4      	uxtb	r4, r4
 801f986:	4020      	ands	r0, r4
 801f988:	bd70      	pop	{r4, r5, r6, pc}
 801f98a:	bf00      	nop

0801f98c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801f98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f990:	460e      	mov	r6, r1
 801f992:	4605      	mov	r5, r0
 801f994:	f7f4 fb74 	bl	8014080 <ucdr_deserialize_int32_t>
 801f998:	4607      	mov	r7, r0
 801f99a:	1d31      	adds	r1, r6, #4
 801f99c:	4628      	mov	r0, r5
 801f99e:	f7f3 ffed 	bl	801397c <ucdr_deserialize_uint32_t>
 801f9a2:	4680      	mov	r8, r0
 801f9a4:	f106 0108 	add.w	r1, r6, #8
 801f9a8:	4628      	mov	r0, r5
 801f9aa:	f7f4 fb69 	bl	8014080 <ucdr_deserialize_int32_t>
 801f9ae:	ea07 0708 	and.w	r7, r7, r8
 801f9b2:	4604      	mov	r4, r0
 801f9b4:	f106 010c 	add.w	r1, r6, #12
 801f9b8:	4628      	mov	r0, r5
 801f9ba:	403c      	ands	r4, r7
 801f9bc:	f7f3 ffde 	bl	801397c <ucdr_deserialize_uint32_t>
 801f9c0:	f106 0110 	add.w	r1, r6, #16
 801f9c4:	4004      	ands	r4, r0
 801f9c6:	4628      	mov	r0, r5
 801f9c8:	f7f4 fb5a 	bl	8014080 <ucdr_deserialize_int32_t>
 801f9cc:	4603      	mov	r3, r0
 801f9ce:	b2e4      	uxtb	r4, r4
 801f9d0:	4628      	mov	r0, r5
 801f9d2:	461d      	mov	r5, r3
 801f9d4:	f106 0114 	add.w	r1, r6, #20
 801f9d8:	f7f3 ffd0 	bl	801397c <ucdr_deserialize_uint32_t>
 801f9dc:	402c      	ands	r4, r5
 801f9de:	4020      	ands	r0, r4
 801f9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f9e4 <uxr_serialize_SampleIdentity>:
 801f9e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f9e8:	4604      	mov	r4, r0
 801f9ea:	460d      	mov	r5, r1
 801f9ec:	220c      	movs	r2, #12
 801f9ee:	f7fc fb67 	bl	801c0c0 <ucdr_serialize_array_uint8_t>
 801f9f2:	2203      	movs	r2, #3
 801f9f4:	f105 010c 	add.w	r1, r5, #12
 801f9f8:	4607      	mov	r7, r0
 801f9fa:	4620      	mov	r0, r4
 801f9fc:	f7fc fb60 	bl	801c0c0 <ucdr_serialize_array_uint8_t>
 801fa00:	7be9      	ldrb	r1, [r5, #15]
 801fa02:	4680      	mov	r8, r0
 801fa04:	4620      	mov	r0, r4
 801fa06:	f7f3 fc73 	bl	80132f0 <ucdr_serialize_uint8_t>
 801fa0a:	6929      	ldr	r1, [r5, #16]
 801fa0c:	4606      	mov	r6, r0
 801fa0e:	4620      	mov	r0, r4
 801fa10:	f7f4 fa9e 	bl	8013f50 <ucdr_serialize_int32_t>
 801fa14:	ea07 0708 	and.w	r7, r7, r8
 801fa18:	4603      	mov	r3, r0
 801fa1a:	4620      	mov	r0, r4
 801fa1c:	403e      	ands	r6, r7
 801fa1e:	6969      	ldr	r1, [r5, #20]
 801fa20:	461c      	mov	r4, r3
 801fa22:	f7f3 fe7b 	bl	801371c <ucdr_serialize_uint32_t>
 801fa26:	4034      	ands	r4, r6
 801fa28:	4020      	ands	r0, r4
 801fa2a:	b2c0      	uxtb	r0, r0
 801fa2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801fa30 <uxr_deserialize_SampleIdentity>:
 801fa30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fa34:	4604      	mov	r4, r0
 801fa36:	460d      	mov	r5, r1
 801fa38:	220c      	movs	r2, #12
 801fa3a:	f7fc fba5 	bl	801c188 <ucdr_deserialize_array_uint8_t>
 801fa3e:	2203      	movs	r2, #3
 801fa40:	f105 010c 	add.w	r1, r5, #12
 801fa44:	4607      	mov	r7, r0
 801fa46:	4620      	mov	r0, r4
 801fa48:	f7fc fb9e 	bl	801c188 <ucdr_deserialize_array_uint8_t>
 801fa4c:	f105 010f 	add.w	r1, r5, #15
 801fa50:	4680      	mov	r8, r0
 801fa52:	4620      	mov	r0, r4
 801fa54:	f7f3 fc62 	bl	801331c <ucdr_deserialize_uint8_t>
 801fa58:	f105 0110 	add.w	r1, r5, #16
 801fa5c:	4606      	mov	r6, r0
 801fa5e:	4620      	mov	r0, r4
 801fa60:	f7f4 fb0e 	bl	8014080 <ucdr_deserialize_int32_t>
 801fa64:	ea07 0708 	and.w	r7, r7, r8
 801fa68:	4603      	mov	r3, r0
 801fa6a:	4620      	mov	r0, r4
 801fa6c:	403e      	ands	r6, r7
 801fa6e:	f105 0114 	add.w	r1, r5, #20
 801fa72:	461c      	mov	r4, r3
 801fa74:	f7f3 ff82 	bl	801397c <ucdr_deserialize_uint32_t>
 801fa78:	4034      	ands	r4, r6
 801fa7a:	4020      	ands	r0, r4
 801fa7c:	b2c0      	uxtb	r0, r0
 801fa7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fa82:	bf00      	nop

0801fa84 <rcl_convert_rmw_ret_to_rcl_ret>:
 801fa84:	280b      	cmp	r0, #11
 801fa86:	dc0d      	bgt.n	801faa4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801fa88:	2800      	cmp	r0, #0
 801fa8a:	db09      	blt.n	801faa0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801fa8c:	280b      	cmp	r0, #11
 801fa8e:	d807      	bhi.n	801faa0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801fa90:	e8df f000 	tbb	[pc, r0]
 801fa94:	07060607 	.word	0x07060607
 801fa98:	06060606 	.word	0x06060606
 801fa9c:	07070606 	.word	0x07070606
 801faa0:	2001      	movs	r0, #1
 801faa2:	4770      	bx	lr
 801faa4:	28cb      	cmp	r0, #203	@ 0xcb
 801faa6:	bf18      	it	ne
 801faa8:	2001      	movne	r0, #1
 801faaa:	4770      	bx	lr

0801faac <rcl_get_default_domain_id>:
 801faac:	b530      	push	{r4, r5, lr}
 801faae:	2300      	movs	r3, #0
 801fab0:	b083      	sub	sp, #12
 801fab2:	9300      	str	r3, [sp, #0]
 801fab4:	b1d0      	cbz	r0, 801faec <rcl_get_default_domain_id+0x40>
 801fab6:	4604      	mov	r4, r0
 801fab8:	4669      	mov	r1, sp
 801faba:	4815      	ldr	r0, [pc, #84]	@ (801fb10 <rcl_get_default_domain_id+0x64>)
 801fabc:	f7f9 fd2c 	bl	8019518 <rcutils_get_env>
 801fac0:	4602      	mov	r2, r0
 801fac2:	b110      	cbz	r0, 801faca <rcl_get_default_domain_id+0x1e>
 801fac4:	2001      	movs	r0, #1
 801fac6:	b003      	add	sp, #12
 801fac8:	bd30      	pop	{r4, r5, pc}
 801faca:	9b00      	ldr	r3, [sp, #0]
 801facc:	b18b      	cbz	r3, 801faf2 <rcl_get_default_domain_id+0x46>
 801face:	7818      	ldrb	r0, [r3, #0]
 801fad0:	2800      	cmp	r0, #0
 801fad2:	d0f8      	beq.n	801fac6 <rcl_get_default_domain_id+0x1a>
 801fad4:	a901      	add	r1, sp, #4
 801fad6:	4618      	mov	r0, r3
 801fad8:	9201      	str	r2, [sp, #4]
 801fada:	f001 fd6b 	bl	80215b4 <strtoul>
 801fade:	4605      	mov	r5, r0
 801fae0:	b150      	cbz	r0, 801faf8 <rcl_get_default_domain_id+0x4c>
 801fae2:	1c43      	adds	r3, r0, #1
 801fae4:	d00d      	beq.n	801fb02 <rcl_get_default_domain_id+0x56>
 801fae6:	2000      	movs	r0, #0
 801fae8:	6025      	str	r5, [r4, #0]
 801faea:	e7ec      	b.n	801fac6 <rcl_get_default_domain_id+0x1a>
 801faec:	200b      	movs	r0, #11
 801faee:	b003      	add	sp, #12
 801faf0:	bd30      	pop	{r4, r5, pc}
 801faf2:	4618      	mov	r0, r3
 801faf4:	b003      	add	sp, #12
 801faf6:	bd30      	pop	{r4, r5, pc}
 801faf8:	9b01      	ldr	r3, [sp, #4]
 801fafa:	781b      	ldrb	r3, [r3, #0]
 801fafc:	2b00      	cmp	r3, #0
 801fafe:	d0f2      	beq.n	801fae6 <rcl_get_default_domain_id+0x3a>
 801fb00:	e7e0      	b.n	801fac4 <rcl_get_default_domain_id+0x18>
 801fb02:	f002 f8d5 	bl	8021cb0 <__errno>
 801fb06:	6803      	ldr	r3, [r0, #0]
 801fb08:	2b22      	cmp	r3, #34	@ 0x22
 801fb0a:	d1ec      	bne.n	801fae6 <rcl_get_default_domain_id+0x3a>
 801fb0c:	e7da      	b.n	801fac4 <rcl_get_default_domain_id+0x18>
 801fb0e:	bf00      	nop
 801fb10:	08024fa4 	.word	0x08024fa4

0801fb14 <rcl_expand_topic_name>:
 801fb14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb18:	b08d      	sub	sp, #52	@ 0x34
 801fb1a:	4698      	mov	r8, r3
 801fb1c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801fb1e:	9207      	str	r2, [sp, #28]
 801fb20:	2b00      	cmp	r3, #0
 801fb22:	bf18      	it	ne
 801fb24:	f1b8 0f00 	cmpne.w	r8, #0
 801fb28:	bf0c      	ite	eq
 801fb2a:	2301      	moveq	r3, #1
 801fb2c:	2300      	movne	r3, #0
 801fb2e:	2a00      	cmp	r2, #0
 801fb30:	bf08      	it	eq
 801fb32:	f043 0301 	orreq.w	r3, r3, #1
 801fb36:	2900      	cmp	r1, #0
 801fb38:	bf08      	it	eq
 801fb3a:	f043 0301 	orreq.w	r3, r3, #1
 801fb3e:	2b00      	cmp	r3, #0
 801fb40:	d13d      	bne.n	801fbbe <rcl_expand_topic_name+0xaa>
 801fb42:	fab0 f280 	clz	r2, r0
 801fb46:	4604      	mov	r4, r0
 801fb48:	0952      	lsrs	r2, r2, #5
 801fb4a:	2800      	cmp	r0, #0
 801fb4c:	d037      	beq.n	801fbbe <rcl_expand_topic_name+0xaa>
 801fb4e:	460f      	mov	r7, r1
 801fb50:	a90b      	add	r1, sp, #44	@ 0x2c
 801fb52:	f000 f9f3 	bl	801ff3c <rcl_validate_topic_name>
 801fb56:	4605      	mov	r5, r0
 801fb58:	bb68      	cbnz	r0, 801fbb6 <rcl_expand_topic_name+0xa2>
 801fb5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fb5c:	2b00      	cmp	r3, #0
 801fb5e:	d137      	bne.n	801fbd0 <rcl_expand_topic_name+0xbc>
 801fb60:	4602      	mov	r2, r0
 801fb62:	a90b      	add	r1, sp, #44	@ 0x2c
 801fb64:	4638      	mov	r0, r7
 801fb66:	f7fa f8e9 	bl	8019d3c <rmw_validate_node_name>
 801fb6a:	bb68      	cbnz	r0, 801fbc8 <rcl_expand_topic_name+0xb4>
 801fb6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fb6e:	2b00      	cmp	r3, #0
 801fb70:	d133      	bne.n	801fbda <rcl_expand_topic_name+0xc6>
 801fb72:	462a      	mov	r2, r5
 801fb74:	a90b      	add	r1, sp, #44	@ 0x2c
 801fb76:	9807      	ldr	r0, [sp, #28]
 801fb78:	f7fa f8c2 	bl	8019d00 <rmw_validate_namespace>
 801fb7c:	bb20      	cbnz	r0, 801fbc8 <rcl_expand_topic_name+0xb4>
 801fb7e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801fb80:	2d00      	cmp	r5, #0
 801fb82:	f040 80a2 	bne.w	801fcca <rcl_expand_topic_name+0x1b6>
 801fb86:	217b      	movs	r1, #123	@ 0x7b
 801fb88:	4620      	mov	r0, r4
 801fb8a:	f001 ffaf 	bl	8021aec <strchr>
 801fb8e:	7823      	ldrb	r3, [r4, #0]
 801fb90:	4681      	mov	r9, r0
 801fb92:	bb20      	cbnz	r0, 801fbde <rcl_expand_topic_name+0xca>
 801fb94:	2b2f      	cmp	r3, #47	@ 0x2f
 801fb96:	d122      	bne.n	801fbde <rcl_expand_topic_name+0xca>
 801fb98:	ab19      	add	r3, sp, #100	@ 0x64
 801fb9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801fb9e:	ab16      	add	r3, sp, #88	@ 0x58
 801fba0:	e88d 0003 	stmia.w	sp, {r0, r1}
 801fba4:	4620      	mov	r0, r4
 801fba6:	cb0e      	ldmia	r3, {r1, r2, r3}
 801fba8:	f7f9 fe18 	bl	80197dc <rcutils_strdup>
 801fbac:	2800      	cmp	r0, #0
 801fbae:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801fbb0:	bf08      	it	eq
 801fbb2:	250a      	moveq	r5, #10
 801fbb4:	6018      	str	r0, [r3, #0]
 801fbb6:	4628      	mov	r0, r5
 801fbb8:	b00d      	add	sp, #52	@ 0x34
 801fbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbbe:	250b      	movs	r5, #11
 801fbc0:	4628      	mov	r0, r5
 801fbc2:	b00d      	add	sp, #52	@ 0x34
 801fbc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbc8:	f7ff ff5c 	bl	801fa84 <rcl_convert_rmw_ret_to_rcl_ret>
 801fbcc:	4605      	mov	r5, r0
 801fbce:	e7f2      	b.n	801fbb6 <rcl_expand_topic_name+0xa2>
 801fbd0:	2567      	movs	r5, #103	@ 0x67
 801fbd2:	4628      	mov	r0, r5
 801fbd4:	b00d      	add	sp, #52	@ 0x34
 801fbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbda:	25c9      	movs	r5, #201	@ 0xc9
 801fbdc:	e7eb      	b.n	801fbb6 <rcl_expand_topic_name+0xa2>
 801fbde:	2b7e      	cmp	r3, #126	@ 0x7e
 801fbe0:	d075      	beq.n	801fcce <rcl_expand_topic_name+0x1ba>
 801fbe2:	f1b9 0f00 	cmp.w	r9, #0
 801fbe6:	f000 80c2 	beq.w	801fd6e <rcl_expand_topic_name+0x25a>
 801fbea:	2300      	movs	r3, #0
 801fbec:	46a2      	mov	sl, r4
 801fbee:	461e      	mov	r6, r3
 801fbf0:	9508      	str	r5, [sp, #32]
 801fbf2:	4655      	mov	r5, sl
 801fbf4:	9409      	str	r4, [sp, #36]	@ 0x24
 801fbf6:	46b2      	mov	sl, r6
 801fbf8:	464c      	mov	r4, r9
 801fbfa:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801fbfe:	2c00      	cmp	r4, #0
 801fc00:	f000 80ae 	beq.w	801fd60 <rcl_expand_topic_name+0x24c>
 801fc04:	217d      	movs	r1, #125	@ 0x7d
 801fc06:	4628      	mov	r0, r5
 801fc08:	f001 ff70 	bl	8021aec <strchr>
 801fc0c:	eba0 0904 	sub.w	r9, r0, r4
 801fc10:	4621      	mov	r1, r4
 801fc12:	4869      	ldr	r0, [pc, #420]	@ (801fdb8 <rcl_expand_topic_name+0x2a4>)
 801fc14:	f109 0601 	add.w	r6, r9, #1
 801fc18:	4632      	mov	r2, r6
 801fc1a:	f001 ff74 	bl	8021b06 <strncmp>
 801fc1e:	2800      	cmp	r0, #0
 801fc20:	d051      	beq.n	801fcc6 <rcl_expand_topic_name+0x1b2>
 801fc22:	4632      	mov	r2, r6
 801fc24:	4621      	mov	r1, r4
 801fc26:	4865      	ldr	r0, [pc, #404]	@ (801fdbc <rcl_expand_topic_name+0x2a8>)
 801fc28:	f001 ff6d 	bl	8021b06 <strncmp>
 801fc2c:	b128      	cbz	r0, 801fc3a <rcl_expand_topic_name+0x126>
 801fc2e:	4632      	mov	r2, r6
 801fc30:	4621      	mov	r1, r4
 801fc32:	4863      	ldr	r0, [pc, #396]	@ (801fdc0 <rcl_expand_topic_name+0x2ac>)
 801fc34:	f001 ff67 	bl	8021b06 <strncmp>
 801fc38:	bb38      	cbnz	r0, 801fc8a <rcl_expand_topic_name+0x176>
 801fc3a:	46d9      	mov	r9, fp
 801fc3c:	ab18      	add	r3, sp, #96	@ 0x60
 801fc3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801fc42:	ab16      	add	r3, sp, #88	@ 0x58
 801fc44:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801fc48:	4620      	mov	r0, r4
 801fc4a:	4631      	mov	r1, r6
 801fc4c:	cb0c      	ldmia	r3, {r2, r3}
 801fc4e:	f7f9 fde7 	bl	8019820 <rcutils_strndup>
 801fc52:	4604      	mov	r4, r0
 801fc54:	2800      	cmp	r0, #0
 801fc56:	f000 80a3 	beq.w	801fda0 <rcl_expand_topic_name+0x28c>
 801fc5a:	464a      	mov	r2, r9
 801fc5c:	4628      	mov	r0, r5
 801fc5e:	ab16      	add	r3, sp, #88	@ 0x58
 801fc60:	4621      	mov	r1, r4
 801fc62:	f7f9 fcbb 	bl	80195dc <rcutils_repl_str>
 801fc66:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801fc68:	4605      	mov	r5, r0
 801fc6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801fc6c:	4620      	mov	r0, r4
 801fc6e:	4798      	blx	r3
 801fc70:	4650      	mov	r0, sl
 801fc72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801fc74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801fc76:	4798      	blx	r3
 801fc78:	2d00      	cmp	r5, #0
 801fc7a:	d06c      	beq.n	801fd56 <rcl_expand_topic_name+0x242>
 801fc7c:	217b      	movs	r1, #123	@ 0x7b
 801fc7e:	4628      	mov	r0, r5
 801fc80:	f001 ff34 	bl	8021aec <strchr>
 801fc84:	46aa      	mov	sl, r5
 801fc86:	4604      	mov	r4, r0
 801fc88:	e7b9      	b.n	801fbfe <rcl_expand_topic_name+0xea>
 801fc8a:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801fc8e:	1c61      	adds	r1, r4, #1
 801fc90:	4640      	mov	r0, r8
 801fc92:	f7f9 fedd 	bl	8019a50 <rcutils_string_map_getn>
 801fc96:	4681      	mov	r9, r0
 801fc98:	2800      	cmp	r0, #0
 801fc9a:	d1cf      	bne.n	801fc3c <rcl_expand_topic_name+0x128>
 801fc9c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801fc9e:	aa18      	add	r2, sp, #96	@ 0x60
 801fca0:	2569      	movs	r5, #105	@ 0x69
 801fca2:	6018      	str	r0, [r3, #0]
 801fca4:	ab16      	add	r3, sp, #88	@ 0x58
 801fca6:	ca07      	ldmia	r2, {r0, r1, r2}
 801fca8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801fcac:	4631      	mov	r1, r6
 801fcae:	4620      	mov	r0, r4
 801fcb0:	cb0c      	ldmia	r3, {r2, r3}
 801fcb2:	f7f9 fdb5 	bl	8019820 <rcutils_strndup>
 801fcb6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801fcb8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801fcba:	4798      	blx	r3
 801fcbc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801fcbe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801fcc0:	4650      	mov	r0, sl
 801fcc2:	4798      	blx	r3
 801fcc4:	e777      	b.n	801fbb6 <rcl_expand_topic_name+0xa2>
 801fcc6:	46b9      	mov	r9, r7
 801fcc8:	e7b8      	b.n	801fc3c <rcl_expand_topic_name+0x128>
 801fcca:	25ca      	movs	r5, #202	@ 0xca
 801fccc:	e773      	b.n	801fbb6 <rcl_expand_topic_name+0xa2>
 801fcce:	9e07      	ldr	r6, [sp, #28]
 801fcd0:	4630      	mov	r0, r6
 801fcd2:	f7e0 fb0f 	bl	80002f4 <strlen>
 801fcd6:	4a3b      	ldr	r2, [pc, #236]	@ (801fdc4 <rcl_expand_topic_name+0x2b0>)
 801fcd8:	4b3b      	ldr	r3, [pc, #236]	@ (801fdc8 <rcl_expand_topic_name+0x2b4>)
 801fcda:	9603      	str	r6, [sp, #12]
 801fcdc:	2801      	cmp	r0, #1
 801fcde:	bf18      	it	ne
 801fce0:	4613      	movne	r3, r2
 801fce2:	9704      	str	r7, [sp, #16]
 801fce4:	9302      	str	r3, [sp, #8]
 801fce6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801fce8:	9300      	str	r3, [sp, #0]
 801fcea:	1c63      	adds	r3, r4, #1
 801fcec:	9305      	str	r3, [sp, #20]
 801fcee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801fcf2:	9301      	str	r3, [sp, #4]
 801fcf4:	ab16      	add	r3, sp, #88	@ 0x58
 801fcf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801fcf8:	f7f9 fc36 	bl	8019568 <rcutils_format_string_limit>
 801fcfc:	4606      	mov	r6, r0
 801fcfe:	b350      	cbz	r0, 801fd56 <rcl_expand_topic_name+0x242>
 801fd00:	f1b9 0f00 	cmp.w	r9, #0
 801fd04:	d005      	beq.n	801fd12 <rcl_expand_topic_name+0x1fe>
 801fd06:	217b      	movs	r1, #123	@ 0x7b
 801fd08:	46b2      	mov	sl, r6
 801fd0a:	f001 feef 	bl	8021aec <strchr>
 801fd0e:	4681      	mov	r9, r0
 801fd10:	e76e      	b.n	801fbf0 <rcl_expand_topic_name+0xdc>
 801fd12:	7833      	ldrb	r3, [r6, #0]
 801fd14:	2b2f      	cmp	r3, #47	@ 0x2f
 801fd16:	d01b      	beq.n	801fd50 <rcl_expand_topic_name+0x23c>
 801fd18:	9c07      	ldr	r4, [sp, #28]
 801fd1a:	4620      	mov	r0, r4
 801fd1c:	f7e0 faea 	bl	80002f4 <strlen>
 801fd20:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801fd24:	4a29      	ldr	r2, [pc, #164]	@ (801fdcc <rcl_expand_topic_name+0x2b8>)
 801fd26:	9301      	str	r3, [sp, #4]
 801fd28:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801fd2a:	9604      	str	r6, [sp, #16]
 801fd2c:	9300      	str	r3, [sp, #0]
 801fd2e:	4b28      	ldr	r3, [pc, #160]	@ (801fdd0 <rcl_expand_topic_name+0x2bc>)
 801fd30:	9403      	str	r4, [sp, #12]
 801fd32:	2801      	cmp	r0, #1
 801fd34:	bf18      	it	ne
 801fd36:	4613      	movne	r3, r2
 801fd38:	9302      	str	r3, [sp, #8]
 801fd3a:	ab16      	add	r3, sp, #88	@ 0x58
 801fd3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801fd3e:	f7f9 fc13 	bl	8019568 <rcutils_format_string_limit>
 801fd42:	4603      	mov	r3, r0
 801fd44:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801fd46:	4630      	mov	r0, r6
 801fd48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801fd4a:	461e      	mov	r6, r3
 801fd4c:	4790      	blx	r2
 801fd4e:	b116      	cbz	r6, 801fd56 <rcl_expand_topic_name+0x242>
 801fd50:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801fd52:	601e      	str	r6, [r3, #0]
 801fd54:	e72f      	b.n	801fbb6 <rcl_expand_topic_name+0xa2>
 801fd56:	2300      	movs	r3, #0
 801fd58:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801fd5a:	250a      	movs	r5, #10
 801fd5c:	6013      	str	r3, [r2, #0]
 801fd5e:	e72a      	b.n	801fbb6 <rcl_expand_topic_name+0xa2>
 801fd60:	4653      	mov	r3, sl
 801fd62:	4656      	mov	r6, sl
 801fd64:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801fd68:	2b00      	cmp	r3, #0
 801fd6a:	d1d2      	bne.n	801fd12 <rcl_expand_topic_name+0x1fe>
 801fd6c:	7823      	ldrb	r3, [r4, #0]
 801fd6e:	2b2f      	cmp	r3, #47	@ 0x2f
 801fd70:	d01e      	beq.n	801fdb0 <rcl_expand_topic_name+0x29c>
 801fd72:	9e07      	ldr	r6, [sp, #28]
 801fd74:	4630      	mov	r0, r6
 801fd76:	f7e0 fabd 	bl	80002f4 <strlen>
 801fd7a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801fd7c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801fd80:	9603      	str	r6, [sp, #12]
 801fd82:	9404      	str	r4, [sp, #16]
 801fd84:	e9cd 2300 	strd	r2, r3, [sp]
 801fd88:	4a10      	ldr	r2, [pc, #64]	@ (801fdcc <rcl_expand_topic_name+0x2b8>)
 801fd8a:	4b11      	ldr	r3, [pc, #68]	@ (801fdd0 <rcl_expand_topic_name+0x2bc>)
 801fd8c:	2801      	cmp	r0, #1
 801fd8e:	bf18      	it	ne
 801fd90:	4613      	movne	r3, r2
 801fd92:	9302      	str	r3, [sp, #8]
 801fd94:	ab16      	add	r3, sp, #88	@ 0x58
 801fd96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801fd98:	f7f9 fbe6 	bl	8019568 <rcutils_format_string_limit>
 801fd9c:	4606      	mov	r6, r0
 801fd9e:	e7d6      	b.n	801fd4e <rcl_expand_topic_name+0x23a>
 801fda0:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 801fda4:	4650      	mov	r0, sl
 801fda6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801fda8:	6014      	str	r4, [r2, #0]
 801fdaa:	250a      	movs	r5, #10
 801fdac:	4798      	blx	r3
 801fdae:	e702      	b.n	801fbb6 <rcl_expand_topic_name+0xa2>
 801fdb0:	2300      	movs	r3, #0
 801fdb2:	461e      	mov	r6, r3
 801fdb4:	e7cc      	b.n	801fd50 <rcl_expand_topic_name+0x23c>
 801fdb6:	bf00      	nop
 801fdb8:	08024fbc 	.word	0x08024fbc
 801fdbc:	08024fc4 	.word	0x08024fc4
 801fdc0:	08024fcc 	.word	0x08024fcc
 801fdc4:	08024fb4 	.word	0x08024fb4
 801fdc8:	08024cc8 	.word	0x08024cc8
 801fdcc:	08024690 	.word	0x08024690
 801fdd0:	08024688 	.word	0x08024688

0801fdd4 <rcl_get_default_topic_name_substitutions>:
 801fdd4:	2800      	cmp	r0, #0
 801fdd6:	bf0c      	ite	eq
 801fdd8:	200b      	moveq	r0, #11
 801fdda:	2000      	movne	r0, #0
 801fddc:	4770      	bx	lr
 801fdde:	bf00      	nop

0801fde0 <rcl_get_zero_initialized_guard_condition>:
 801fde0:	4a03      	ldr	r2, [pc, #12]	@ (801fdf0 <rcl_get_zero_initialized_guard_condition+0x10>)
 801fde2:	4603      	mov	r3, r0
 801fde4:	e892 0003 	ldmia.w	r2, {r0, r1}
 801fde8:	e883 0003 	stmia.w	r3, {r0, r1}
 801fdec:	4618      	mov	r0, r3
 801fdee:	4770      	bx	lr
 801fdf0:	08024fd8 	.word	0x08024fd8

0801fdf4 <rcl_guard_condition_init_from_rmw>:
 801fdf4:	b082      	sub	sp, #8
 801fdf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fdfa:	b086      	sub	sp, #24
 801fdfc:	4604      	mov	r4, r0
 801fdfe:	460e      	mov	r6, r1
 801fe00:	4615      	mov	r5, r2
 801fe02:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801fe06:	f10d 0e04 	add.w	lr, sp, #4
 801fe0a:	f84c 3f04 	str.w	r3, [ip, #4]!
 801fe0e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801fe12:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801fe16:	f8dc 3000 	ldr.w	r3, [ip]
 801fe1a:	a801      	add	r0, sp, #4
 801fe1c:	f8ce 3000 	str.w	r3, [lr]
 801fe20:	f7f5 fd18 	bl	8015854 <rcutils_allocator_is_valid>
 801fe24:	f080 0301 	eor.w	r3, r0, #1
 801fe28:	b2db      	uxtb	r3, r3
 801fe2a:	bb3b      	cbnz	r3, 801fe7c <rcl_guard_condition_init_from_rmw+0x88>
 801fe2c:	b334      	cbz	r4, 801fe7c <rcl_guard_condition_init_from_rmw+0x88>
 801fe2e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801fe32:	f1b8 0f00 	cmp.w	r8, #0
 801fe36:	d11a      	bne.n	801fe6e <rcl_guard_condition_init_from_rmw+0x7a>
 801fe38:	b305      	cbz	r5, 801fe7c <rcl_guard_condition_init_from_rmw+0x88>
 801fe3a:	4628      	mov	r0, r5
 801fe3c:	f7f6 fbd8 	bl	80165f0 <rcl_context_is_valid>
 801fe40:	b1f0      	cbz	r0, 801fe80 <rcl_guard_condition_init_from_rmw+0x8c>
 801fe42:	9b01      	ldr	r3, [sp, #4]
 801fe44:	201c      	movs	r0, #28
 801fe46:	9905      	ldr	r1, [sp, #20]
 801fe48:	4798      	blx	r3
 801fe4a:	4607      	mov	r7, r0
 801fe4c:	6060      	str	r0, [r4, #4]
 801fe4e:	b320      	cbz	r0, 801fe9a <rcl_guard_condition_init_from_rmw+0xa6>
 801fe50:	b1c6      	cbz	r6, 801fe84 <rcl_guard_condition_init_from_rmw+0x90>
 801fe52:	6006      	str	r6, [r0, #0]
 801fe54:	f880 8004 	strb.w	r8, [r0, #4]
 801fe58:	ac01      	add	r4, sp, #4
 801fe5a:	f107 0c08 	add.w	ip, r7, #8
 801fe5e:	2500      	movs	r5, #0
 801fe60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801fe62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801fe66:	6823      	ldr	r3, [r4, #0]
 801fe68:	f8cc 3000 	str.w	r3, [ip]
 801fe6c:	e000      	b.n	801fe70 <rcl_guard_condition_init_from_rmw+0x7c>
 801fe6e:	2564      	movs	r5, #100	@ 0x64
 801fe70:	4628      	mov	r0, r5
 801fe72:	b006      	add	sp, #24
 801fe74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fe78:	b002      	add	sp, #8
 801fe7a:	4770      	bx	lr
 801fe7c:	250b      	movs	r5, #11
 801fe7e:	e7f7      	b.n	801fe70 <rcl_guard_condition_init_from_rmw+0x7c>
 801fe80:	2565      	movs	r5, #101	@ 0x65
 801fe82:	e7f5      	b.n	801fe70 <rcl_guard_condition_init_from_rmw+0x7c>
 801fe84:	6828      	ldr	r0, [r5, #0]
 801fe86:	3028      	adds	r0, #40	@ 0x28
 801fe88:	f000 fada 	bl	8020440 <rmw_create_guard_condition>
 801fe8c:	6038      	str	r0, [r7, #0]
 801fe8e:	6867      	ldr	r7, [r4, #4]
 801fe90:	683e      	ldr	r6, [r7, #0]
 801fe92:	b126      	cbz	r6, 801fe9e <rcl_guard_condition_init_from_rmw+0xaa>
 801fe94:	2301      	movs	r3, #1
 801fe96:	713b      	strb	r3, [r7, #4]
 801fe98:	e7de      	b.n	801fe58 <rcl_guard_condition_init_from_rmw+0x64>
 801fe9a:	250a      	movs	r5, #10
 801fe9c:	e7e8      	b.n	801fe70 <rcl_guard_condition_init_from_rmw+0x7c>
 801fe9e:	9b02      	ldr	r3, [sp, #8]
 801fea0:	4638      	mov	r0, r7
 801fea2:	9905      	ldr	r1, [sp, #20]
 801fea4:	2501      	movs	r5, #1
 801fea6:	4798      	blx	r3
 801fea8:	6066      	str	r6, [r4, #4]
 801feaa:	e7e1      	b.n	801fe70 <rcl_guard_condition_init_from_rmw+0x7c>

0801feac <rcl_guard_condition_fini>:
 801feac:	b570      	push	{r4, r5, r6, lr}
 801feae:	b082      	sub	sp, #8
 801feb0:	b1f0      	cbz	r0, 801fef0 <rcl_guard_condition_fini+0x44>
 801feb2:	6843      	ldr	r3, [r0, #4]
 801feb4:	4604      	mov	r4, r0
 801feb6:	b163      	cbz	r3, 801fed2 <rcl_guard_condition_fini+0x26>
 801feb8:	6818      	ldr	r0, [r3, #0]
 801feba:	68de      	ldr	r6, [r3, #12]
 801febc:	6999      	ldr	r1, [r3, #24]
 801febe:	b160      	cbz	r0, 801feda <rcl_guard_condition_fini+0x2e>
 801fec0:	791d      	ldrb	r5, [r3, #4]
 801fec2:	b965      	cbnz	r5, 801fede <rcl_guard_condition_fini+0x32>
 801fec4:	4618      	mov	r0, r3
 801fec6:	47b0      	blx	r6
 801fec8:	2300      	movs	r3, #0
 801feca:	4628      	mov	r0, r5
 801fecc:	6063      	str	r3, [r4, #4]
 801fece:	b002      	add	sp, #8
 801fed0:	bd70      	pop	{r4, r5, r6, pc}
 801fed2:	461d      	mov	r5, r3
 801fed4:	4628      	mov	r0, r5
 801fed6:	b002      	add	sp, #8
 801fed8:	bd70      	pop	{r4, r5, r6, pc}
 801feda:	4605      	mov	r5, r0
 801fedc:	e7f2      	b.n	801fec4 <rcl_guard_condition_fini+0x18>
 801fede:	9101      	str	r1, [sp, #4]
 801fee0:	f000 fac4 	bl	802046c <rmw_destroy_guard_condition>
 801fee4:	1e05      	subs	r5, r0, #0
 801fee6:	6863      	ldr	r3, [r4, #4]
 801fee8:	9901      	ldr	r1, [sp, #4]
 801feea:	bf18      	it	ne
 801feec:	2501      	movne	r5, #1
 801feee:	e7e9      	b.n	801fec4 <rcl_guard_condition_fini+0x18>
 801fef0:	250b      	movs	r5, #11
 801fef2:	4628      	mov	r0, r5
 801fef4:	b002      	add	sp, #8
 801fef6:	bd70      	pop	{r4, r5, r6, pc}

0801fef8 <rcl_guard_condition_get_default_options>:
 801fef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fefa:	b087      	sub	sp, #28
 801fefc:	4606      	mov	r6, r0
 801fefe:	4c0b      	ldr	r4, [pc, #44]	@ (801ff2c <rcl_guard_condition_get_default_options+0x34>)
 801ff00:	4668      	mov	r0, sp
 801ff02:	f7f5 fc99 	bl	8015838 <rcutils_get_default_allocator>
 801ff06:	46ee      	mov	lr, sp
 801ff08:	46a4      	mov	ip, r4
 801ff0a:	4625      	mov	r5, r4
 801ff0c:	4634      	mov	r4, r6
 801ff0e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ff12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ff16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ff18:	f8de 7000 	ldr.w	r7, [lr]
 801ff1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ff1e:	4630      	mov	r0, r6
 801ff20:	f8cc 7000 	str.w	r7, [ip]
 801ff24:	6027      	str	r7, [r4, #0]
 801ff26:	b007      	add	sp, #28
 801ff28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ff2a:	bf00      	nop
 801ff2c:	24069590 	.word	0x24069590

0801ff30 <rcl_guard_condition_get_rmw_handle>:
 801ff30:	b110      	cbz	r0, 801ff38 <rcl_guard_condition_get_rmw_handle+0x8>
 801ff32:	6840      	ldr	r0, [r0, #4]
 801ff34:	b100      	cbz	r0, 801ff38 <rcl_guard_condition_get_rmw_handle+0x8>
 801ff36:	6800      	ldr	r0, [r0, #0]
 801ff38:	4770      	bx	lr
 801ff3a:	bf00      	nop

0801ff3c <rcl_validate_topic_name>:
 801ff3c:	2800      	cmp	r0, #0
 801ff3e:	f000 8089 	beq.w	8020054 <rcl_validate_topic_name+0x118>
 801ff42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ff46:	460e      	mov	r6, r1
 801ff48:	2900      	cmp	r1, #0
 801ff4a:	f000 8085 	beq.w	8020058 <rcl_validate_topic_name+0x11c>
 801ff4e:	4604      	mov	r4, r0
 801ff50:	4617      	mov	r7, r2
 801ff52:	f7e0 f9cf 	bl	80002f4 <strlen>
 801ff56:	b1b0      	cbz	r0, 801ff86 <rcl_validate_topic_name+0x4a>
 801ff58:	f894 e000 	ldrb.w	lr, [r4]
 801ff5c:	f8df c160 	ldr.w	ip, [pc, #352]	@ 80200c0 <rcl_validate_topic_name+0x184>
 801ff60:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801ff64:	f013 0304 	ands.w	r3, r3, #4
 801ff68:	d139      	bne.n	801ffde <rcl_validate_topic_name+0xa2>
 801ff6a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801ff6e:	f814 2008 	ldrb.w	r2, [r4, r8]
 801ff72:	2a2f      	cmp	r2, #47	@ 0x2f
 801ff74:	d10f      	bne.n	801ff96 <rcl_validate_topic_name+0x5a>
 801ff76:	2202      	movs	r2, #2
 801ff78:	6032      	str	r2, [r6, #0]
 801ff7a:	b3a7      	cbz	r7, 801ffe6 <rcl_validate_topic_name+0xaa>
 801ff7c:	4618      	mov	r0, r3
 801ff7e:	f8c7 8000 	str.w	r8, [r7]
 801ff82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ff86:	2301      	movs	r3, #1
 801ff88:	6033      	str	r3, [r6, #0]
 801ff8a:	b367      	cbz	r7, 801ffe6 <rcl_validate_topic_name+0xaa>
 801ff8c:	2300      	movs	r3, #0
 801ff8e:	4618      	mov	r0, r3
 801ff90:	603b      	str	r3, [r7, #0]
 801ff92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ff96:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 801ff9a:	461d      	mov	r5, r3
 801ff9c:	4619      	mov	r1, r3
 801ff9e:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801ffa2:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 801ffa6:	f1b9 0f09 	cmp.w	r9, #9
 801ffaa:	d91f      	bls.n	801ffec <rcl_validate_topic_name+0xb0>
 801ffac:	f022 0920 	bic.w	r9, r2, #32
 801ffb0:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 801ffb4:	f1b9 0f19 	cmp.w	r9, #25
 801ffb8:	d918      	bls.n	801ffec <rcl_validate_topic_name+0xb0>
 801ffba:	2a5f      	cmp	r2, #95	@ 0x5f
 801ffbc:	d024      	beq.n	8020008 <rcl_validate_topic_name+0xcc>
 801ffbe:	2a2f      	cmp	r2, #47	@ 0x2f
 801ffc0:	d058      	beq.n	8020074 <rcl_validate_topic_name+0x138>
 801ffc2:	2a7e      	cmp	r2, #126	@ 0x7e
 801ffc4:	d04a      	beq.n	802005c <rcl_validate_topic_name+0x120>
 801ffc6:	2a7b      	cmp	r2, #123	@ 0x7b
 801ffc8:	d05b      	beq.n	8020082 <rcl_validate_topic_name+0x146>
 801ffca:	2a7d      	cmp	r2, #125	@ 0x7d
 801ffcc:	d169      	bne.n	80200a2 <rcl_validate_topic_name+0x166>
 801ffce:	2d00      	cmp	r5, #0
 801ffd0:	d15c      	bne.n	802008c <rcl_validate_topic_name+0x150>
 801ffd2:	2305      	movs	r3, #5
 801ffd4:	6033      	str	r3, [r6, #0]
 801ffd6:	b137      	cbz	r7, 801ffe6 <rcl_validate_topic_name+0xaa>
 801ffd8:	2000      	movs	r0, #0
 801ffda:	6039      	str	r1, [r7, #0]
 801ffdc:	e7d9      	b.n	801ff92 <rcl_validate_topic_name+0x56>
 801ffde:	2304      	movs	r3, #4
 801ffe0:	6033      	str	r3, [r6, #0]
 801ffe2:	2f00      	cmp	r7, #0
 801ffe4:	d1d2      	bne.n	801ff8c <rcl_validate_topic_name+0x50>
 801ffe6:	2000      	movs	r0, #0
 801ffe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ffec:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801fff0:	0752      	lsls	r2, r2, #29
 801fff2:	d509      	bpl.n	8020008 <rcl_validate_topic_name+0xcc>
 801fff4:	2900      	cmp	r1, #0
 801fff6:	bf0c      	ite	eq
 801fff8:	2200      	moveq	r2, #0
 801fffa:	f005 0201 	andne.w	r2, r5, #1
 801fffe:	b11a      	cbz	r2, 8020008 <rcl_validate_topic_name+0xcc>
 8020000:	1e4d      	subs	r5, r1, #1
 8020002:	429d      	cmp	r5, r3
 8020004:	d031      	beq.n	802006a <rcl_validate_topic_name+0x12e>
 8020006:	4615      	mov	r5, r2
 8020008:	3101      	adds	r1, #1
 802000a:	4288      	cmp	r0, r1
 802000c:	d1c7      	bne.n	801ff9e <rcl_validate_topic_name+0x62>
 802000e:	2d00      	cmp	r5, #0
 8020010:	d142      	bne.n	8020098 <rcl_validate_topic_name+0x15c>
 8020012:	4628      	mov	r0, r5
 8020014:	2301      	movs	r3, #1
 8020016:	e00c      	b.n	8020032 <rcl_validate_topic_name+0xf6>
 8020018:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 802001c:	d101      	bne.n	8020022 <rcl_validate_topic_name+0xe6>
 802001e:	2801      	cmp	r0, #1
 8020020:	d047      	beq.n	80200b2 <rcl_validate_topic_name+0x176>
 8020022:	1c5a      	adds	r2, r3, #1
 8020024:	428b      	cmp	r3, r1
 8020026:	f100 0001 	add.w	r0, r0, #1
 802002a:	f104 0401 	add.w	r4, r4, #1
 802002e:	4613      	mov	r3, r2
 8020030:	d22e      	bcs.n	8020090 <rcl_validate_topic_name+0x154>
 8020032:	4580      	cmp	r8, r0
 8020034:	d0f5      	beq.n	8020022 <rcl_validate_topic_name+0xe6>
 8020036:	7822      	ldrb	r2, [r4, #0]
 8020038:	2a2f      	cmp	r2, #47	@ 0x2f
 802003a:	d1ed      	bne.n	8020018 <rcl_validate_topic_name+0xdc>
 802003c:	7862      	ldrb	r2, [r4, #1]
 802003e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8020042:	0752      	lsls	r2, r2, #29
 8020044:	d5ed      	bpl.n	8020022 <rcl_validate_topic_name+0xe6>
 8020046:	2204      	movs	r2, #4
 8020048:	6032      	str	r2, [r6, #0]
 802004a:	2f00      	cmp	r7, #0
 802004c:	d0cb      	beq.n	801ffe6 <rcl_validate_topic_name+0xaa>
 802004e:	2000      	movs	r0, #0
 8020050:	603b      	str	r3, [r7, #0]
 8020052:	e79e      	b.n	801ff92 <rcl_validate_topic_name+0x56>
 8020054:	200b      	movs	r0, #11
 8020056:	4770      	bx	lr
 8020058:	200b      	movs	r0, #11
 802005a:	e79a      	b.n	801ff92 <rcl_validate_topic_name+0x56>
 802005c:	2900      	cmp	r1, #0
 802005e:	d0d3      	beq.n	8020008 <rcl_validate_topic_name+0xcc>
 8020060:	2306      	movs	r3, #6
 8020062:	6033      	str	r3, [r6, #0]
 8020064:	2f00      	cmp	r7, #0
 8020066:	d1b7      	bne.n	801ffd8 <rcl_validate_topic_name+0x9c>
 8020068:	e7bd      	b.n	801ffe6 <rcl_validate_topic_name+0xaa>
 802006a:	2309      	movs	r3, #9
 802006c:	6033      	str	r3, [r6, #0]
 802006e:	2f00      	cmp	r7, #0
 8020070:	d1b2      	bne.n	801ffd8 <rcl_validate_topic_name+0x9c>
 8020072:	e7b8      	b.n	801ffe6 <rcl_validate_topic_name+0xaa>
 8020074:	2d00      	cmp	r5, #0
 8020076:	d0c7      	beq.n	8020008 <rcl_validate_topic_name+0xcc>
 8020078:	2308      	movs	r3, #8
 802007a:	6033      	str	r3, [r6, #0]
 802007c:	2f00      	cmp	r7, #0
 802007e:	d1ab      	bne.n	801ffd8 <rcl_validate_topic_name+0x9c>
 8020080:	e7b1      	b.n	801ffe6 <rcl_validate_topic_name+0xaa>
 8020082:	2d00      	cmp	r5, #0
 8020084:	d1f8      	bne.n	8020078 <rcl_validate_topic_name+0x13c>
 8020086:	460b      	mov	r3, r1
 8020088:	2501      	movs	r5, #1
 802008a:	e7bd      	b.n	8020008 <rcl_validate_topic_name+0xcc>
 802008c:	2500      	movs	r5, #0
 802008e:	e7bb      	b.n	8020008 <rcl_validate_topic_name+0xcc>
 8020090:	2300      	movs	r3, #0
 8020092:	4618      	mov	r0, r3
 8020094:	6033      	str	r3, [r6, #0]
 8020096:	e77c      	b.n	801ff92 <rcl_validate_topic_name+0x56>
 8020098:	2205      	movs	r2, #5
 802009a:	6032      	str	r2, [r6, #0]
 802009c:	2f00      	cmp	r7, #0
 802009e:	d1d6      	bne.n	802004e <rcl_validate_topic_name+0x112>
 80200a0:	e7a1      	b.n	801ffe6 <rcl_validate_topic_name+0xaa>
 80200a2:	2d00      	cmp	r5, #0
 80200a4:	bf14      	ite	ne
 80200a6:	2308      	movne	r3, #8
 80200a8:	2303      	moveq	r3, #3
 80200aa:	6033      	str	r3, [r6, #0]
 80200ac:	2f00      	cmp	r7, #0
 80200ae:	d193      	bne.n	801ffd8 <rcl_validate_topic_name+0x9c>
 80200b0:	e799      	b.n	801ffe6 <rcl_validate_topic_name+0xaa>
 80200b2:	2307      	movs	r3, #7
 80200b4:	6033      	str	r3, [r6, #0]
 80200b6:	2f00      	cmp	r7, #0
 80200b8:	d095      	beq.n	801ffe6 <rcl_validate_topic_name+0xaa>
 80200ba:	2301      	movs	r3, #1
 80200bc:	e7c7      	b.n	802004e <rcl_validate_topic_name+0x112>
 80200be:	bf00      	nop
 80200c0:	0802515e 	.word	0x0802515e

080200c4 <rcutils_string_array_fini>:
 80200c4:	b328      	cbz	r0, 8020112 <rcutils_string_array_fini+0x4e>
 80200c6:	b570      	push	{r4, r5, r6, lr}
 80200c8:	4604      	mov	r4, r0
 80200ca:	6840      	ldr	r0, [r0, #4]
 80200cc:	b1e0      	cbz	r0, 8020108 <rcutils_string_array_fini+0x44>
 80200ce:	f104 0008 	add.w	r0, r4, #8
 80200d2:	f7f5 fbbf 	bl	8015854 <rcutils_allocator_is_valid>
 80200d6:	b1c0      	cbz	r0, 802010a <rcutils_string_array_fini+0x46>
 80200d8:	6823      	ldr	r3, [r4, #0]
 80200da:	b1c3      	cbz	r3, 802010e <rcutils_string_array_fini+0x4a>
 80200dc:	2500      	movs	r5, #0
 80200de:	6860      	ldr	r0, [r4, #4]
 80200e0:	462e      	mov	r6, r5
 80200e2:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80200e6:	68e3      	ldr	r3, [r4, #12]
 80200e8:	69a1      	ldr	r1, [r4, #24]
 80200ea:	4798      	blx	r3
 80200ec:	e9d4 3000 	ldrd	r3, r0, [r4]
 80200f0:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80200f4:	3501      	adds	r5, #1
 80200f6:	429d      	cmp	r5, r3
 80200f8:	d3f3      	bcc.n	80200e2 <rcutils_string_array_fini+0x1e>
 80200fa:	68e3      	ldr	r3, [r4, #12]
 80200fc:	69a1      	ldr	r1, [r4, #24]
 80200fe:	4798      	blx	r3
 8020100:	2300      	movs	r3, #0
 8020102:	4618      	mov	r0, r3
 8020104:	e9c4 3300 	strd	r3, r3, [r4]
 8020108:	bd70      	pop	{r4, r5, r6, pc}
 802010a:	200b      	movs	r0, #11
 802010c:	bd70      	pop	{r4, r5, r6, pc}
 802010e:	6860      	ldr	r0, [r4, #4]
 8020110:	e7f3      	b.n	80200fa <rcutils_string_array_fini+0x36>
 8020112:	200b      	movs	r0, #11
 8020114:	4770      	bx	lr
 8020116:	bf00      	nop

08020118 <rmw_time_equal>:
 8020118:	b4f0      	push	{r4, r5, r6, r7}
 802011a:	b084      	sub	sp, #16
 802011c:	ac04      	add	r4, sp, #16
 802011e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8020122:	4603      	mov	r3, r0
 8020124:	4925      	ldr	r1, [pc, #148]	@ (80201bc <rmw_time_equal+0xa4>)
 8020126:	9d01      	ldr	r5, [sp, #4]
 8020128:	4610      	mov	r0, r2
 802012a:	4299      	cmp	r1, r3
 802012c:	f04f 0202 	mov.w	r2, #2
 8020130:	9e03      	ldr	r6, [sp, #12]
 8020132:	41aa      	sbcs	r2, r5
 8020134:	d330      	bcc.n	8020198 <rmw_time_equal+0x80>
 8020136:	4c22      	ldr	r4, [pc, #136]	@ (80201c0 <rmw_time_equal+0xa8>)
 8020138:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 802013c:	fba3 3204 	umull	r3, r2, r3, r4
 8020140:	fb04 2205 	mla	r2, r4, r5, r2
 8020144:	43dd      	mvns	r5, r3
 8020146:	1a8c      	subs	r4, r1, r2
 8020148:	4285      	cmp	r5, r0
 802014a:	41b4      	sbcs	r4, r6
 802014c:	d332      	bcc.n	80201b4 <rmw_time_equal+0x9c>
 802014e:	eb10 0c03 	adds.w	ip, r0, r3
 8020152:	eb42 0106 	adc.w	r1, r2, r6
 8020156:	4819      	ldr	r0, [pc, #100]	@ (80201bc <rmw_time_equal+0xa4>)
 8020158:	2202      	movs	r2, #2
 802015a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802015c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802015e:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8020162:	4298      	cmp	r0, r3
 8020164:	41b2      	sbcs	r2, r6
 8020166:	d31c      	bcc.n	80201a2 <rmw_time_equal+0x8a>
 8020168:	4c15      	ldr	r4, [pc, #84]	@ (80201c0 <rmw_time_equal+0xa8>)
 802016a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 802016e:	fba3 3204 	umull	r3, r2, r3, r4
 8020172:	fb04 2206 	mla	r2, r4, r6, r2
 8020176:	43de      	mvns	r6, r3
 8020178:	1a84      	subs	r4, r0, r2
 802017a:	42ae      	cmp	r6, r5
 802017c:	41bc      	sbcs	r4, r7
 802017e:	d315      	bcc.n	80201ac <rmw_time_equal+0x94>
 8020180:	195b      	adds	r3, r3, r5
 8020182:	eb42 0207 	adc.w	r2, r2, r7
 8020186:	428a      	cmp	r2, r1
 8020188:	bf08      	it	eq
 802018a:	4563      	cmpeq	r3, ip
 802018c:	bf0c      	ite	eq
 802018e:	2001      	moveq	r0, #1
 8020190:	2000      	movne	r0, #0
 8020192:	b004      	add	sp, #16
 8020194:	bcf0      	pop	{r4, r5, r6, r7}
 8020196:	4770      	bx	lr
 8020198:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 802019c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80201a0:	e7d9      	b.n	8020156 <rmw_time_equal+0x3e>
 80201a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80201a6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80201aa:	e7ec      	b.n	8020186 <rmw_time_equal+0x6e>
 80201ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80201b0:	4602      	mov	r2, r0
 80201b2:	e7e8      	b.n	8020186 <rmw_time_equal+0x6e>
 80201b4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80201b8:	e7cd      	b.n	8020156 <rmw_time_equal+0x3e>
 80201ba:	bf00      	nop
 80201bc:	25c17d04 	.word	0x25c17d04
 80201c0:	3b9aca00 	.word	0x3b9aca00

080201c4 <rmw_time_total_nsec>:
 80201c4:	b470      	push	{r4, r5, r6}
 80201c6:	b085      	sub	sp, #20
 80201c8:	ac04      	add	r4, sp, #16
 80201ca:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80201ce:	4603      	mov	r3, r0
 80201d0:	4913      	ldr	r1, [pc, #76]	@ (8020220 <rmw_time_total_nsec+0x5c>)
 80201d2:	9d01      	ldr	r5, [sp, #4]
 80201d4:	4610      	mov	r0, r2
 80201d6:	4299      	cmp	r1, r3
 80201d8:	f04f 0202 	mov.w	r2, #2
 80201dc:	9e03      	ldr	r6, [sp, #12]
 80201de:	41aa      	sbcs	r2, r5
 80201e0:	d311      	bcc.n	8020206 <rmw_time_total_nsec+0x42>
 80201e2:	4c10      	ldr	r4, [pc, #64]	@ (8020224 <rmw_time_total_nsec+0x60>)
 80201e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80201e8:	fba3 3204 	umull	r3, r2, r3, r4
 80201ec:	fb04 2205 	mla	r2, r4, r5, r2
 80201f0:	43dd      	mvns	r5, r3
 80201f2:	1a8c      	subs	r4, r1, r2
 80201f4:	4285      	cmp	r5, r0
 80201f6:	41b4      	sbcs	r4, r6
 80201f8:	d30c      	bcc.n	8020214 <rmw_time_total_nsec+0x50>
 80201fa:	1818      	adds	r0, r3, r0
 80201fc:	eb42 0106 	adc.w	r1, r2, r6
 8020200:	b005      	add	sp, #20
 8020202:	bc70      	pop	{r4, r5, r6}
 8020204:	4770      	bx	lr
 8020206:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802020a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 802020e:	b005      	add	sp, #20
 8020210:	bc70      	pop	{r4, r5, r6}
 8020212:	4770      	bx	lr
 8020214:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020218:	b005      	add	sp, #20
 802021a:	bc70      	pop	{r4, r5, r6}
 802021c:	4770      	bx	lr
 802021e:	bf00      	nop
 8020220:	25c17d04 	.word	0x25c17d04
 8020224:	3b9aca00 	.word	0x3b9aca00

08020228 <on_status>:
 8020228:	b082      	sub	sp, #8
 802022a:	b002      	add	sp, #8
 802022c:	4770      	bx	lr
 802022e:	bf00      	nop

08020230 <on_topic>:
 8020230:	4a23      	ldr	r2, [pc, #140]	@ (80202c0 <on_topic+0x90>)
 8020232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020236:	6812      	ldr	r2, [r2, #0]
 8020238:	b094      	sub	sp, #80	@ 0x50
 802023a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 802023c:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8020240:	9113      	str	r1, [sp, #76]	@ 0x4c
 8020242:	9312      	str	r3, [sp, #72]	@ 0x48
 8020244:	b3c2      	cbz	r2, 80202b8 <on_topic+0x88>
 8020246:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 802024a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 802024e:	e001      	b.n	8020254 <on_topic+0x24>
 8020250:	6852      	ldr	r2, [r2, #4]
 8020252:	b38a      	cbz	r2, 80202b8 <on_topic+0x88>
 8020254:	6894      	ldr	r4, [r2, #8]
 8020256:	8aa3      	ldrh	r3, [r4, #20]
 8020258:	428b      	cmp	r3, r1
 802025a:	d1f9      	bne.n	8020250 <on_topic+0x20>
 802025c:	7da3      	ldrb	r3, [r4, #22]
 802025e:	4283      	cmp	r3, r0
 8020260:	d1f6      	bne.n	8020250 <on_topic+0x20>
 8020262:	2248      	movs	r2, #72	@ 0x48
 8020264:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8020268:	4668      	mov	r0, sp
 802026a:	f001 fd56 	bl	8021d1a <memcpy>
 802026e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8020272:	4620      	mov	r0, r4
 8020274:	cb0c      	ldmia	r3, {r2, r3}
 8020276:	f7fb faa5 	bl	801b7c4 <rmw_uxrce_get_static_input_buffer_for_entity>
 802027a:	4607      	mov	r7, r0
 802027c:	b1e0      	cbz	r0, 80202b8 <on_topic+0x88>
 802027e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8020282:	462a      	mov	r2, r5
 8020284:	4630      	mov	r0, r6
 8020286:	f108 0110 	add.w	r1, r8, #16
 802028a:	f7fb ff7d 	bl	801c188 <ucdr_deserialize_array_uint8_t>
 802028e:	b930      	cbnz	r0, 802029e <on_topic+0x6e>
 8020290:	4639      	mov	r1, r7
 8020292:	480c      	ldr	r0, [pc, #48]	@ (80202c4 <on_topic+0x94>)
 8020294:	b014      	add	sp, #80	@ 0x50
 8020296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802029a:	f000 b8bd 	b.w	8020418 <put_memory>
 802029e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80202a2:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 80202a6:	f000 f967 	bl	8020578 <rmw_uros_epoch_nanos>
 80202aa:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80202ae:	2305      	movs	r3, #5
 80202b0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80202b4:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80202b8:	b014      	add	sp, #80	@ 0x50
 80202ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80202be:	bf00      	nop
 80202c0:	2406955c 	.word	0x2406955c
 80202c4:	2406954c 	.word	0x2406954c

080202c8 <on_request>:
 80202c8:	4824      	ldr	r0, [pc, #144]	@ (802035c <on_request+0x94>)
 80202ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80202ce:	6800      	ldr	r0, [r0, #0]
 80202d0:	b094      	sub	sp, #80	@ 0x50
 80202d2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80202d4:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 80202d8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80202da:	2800      	cmp	r0, #0
 80202dc:	d03b      	beq.n	8020356 <on_request+0x8e>
 80202de:	461d      	mov	r5, r3
 80202e0:	e001      	b.n	80202e6 <on_request+0x1e>
 80202e2:	6840      	ldr	r0, [r0, #4]
 80202e4:	b3b8      	cbz	r0, 8020356 <on_request+0x8e>
 80202e6:	6884      	ldr	r4, [r0, #8]
 80202e8:	8b21      	ldrh	r1, [r4, #24]
 80202ea:	4291      	cmp	r1, r2
 80202ec:	d1f9      	bne.n	80202e2 <on_request+0x1a>
 80202ee:	2248      	movs	r2, #72	@ 0x48
 80202f0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80202f4:	4668      	mov	r0, sp
 80202f6:	f001 fd10 	bl	8021d1a <memcpy>
 80202fa:	f104 0320 	add.w	r3, r4, #32
 80202fe:	4620      	mov	r0, r4
 8020300:	cb0c      	ldmia	r3, {r2, r3}
 8020302:	f7fb fa5f 	bl	801b7c4 <rmw_uxrce_get_static_input_buffer_for_entity>
 8020306:	4680      	mov	r8, r0
 8020308:	b328      	cbz	r0, 8020356 <on_request+0x8e>
 802030a:	4630      	mov	r0, r6
 802030c:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8020310:	463a      	mov	r2, r7
 8020312:	f106 0110 	add.w	r1, r6, #16
 8020316:	f7fb ff37 	bl	801c188 <ucdr_deserialize_array_uint8_t>
 802031a:	b930      	cbnz	r0, 802032a <on_request+0x62>
 802031c:	4641      	mov	r1, r8
 802031e:	4810      	ldr	r0, [pc, #64]	@ (8020360 <on_request+0x98>)
 8020320:	b014      	add	sp, #80	@ 0x50
 8020322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020326:	f000 b877 	b.w	8020418 <put_memory>
 802032a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802032c:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 8020330:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 8020334:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 8020338:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802033c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8020340:	e88c 0003 	stmia.w	ip, {r0, r1}
 8020344:	f000 f918 	bl	8020578 <rmw_uros_epoch_nanos>
 8020348:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 802034c:	2303      	movs	r3, #3
 802034e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8020352:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 8020356:	b014      	add	sp, #80	@ 0x50
 8020358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802035c:	2406952c 	.word	0x2406952c
 8020360:	2406954c 	.word	0x2406954c

08020364 <on_reply>:
 8020364:	4822      	ldr	r0, [pc, #136]	@ (80203f0 <on_reply+0x8c>)
 8020366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802036a:	6800      	ldr	r0, [r0, #0]
 802036c:	b094      	sub	sp, #80	@ 0x50
 802036e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8020370:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8020374:	9113      	str	r1, [sp, #76]	@ 0x4c
 8020376:	b3b8      	cbz	r0, 80203e8 <on_reply+0x84>
 8020378:	461d      	mov	r5, r3
 802037a:	e001      	b.n	8020380 <on_reply+0x1c>
 802037c:	6840      	ldr	r0, [r0, #4]
 802037e:	b398      	cbz	r0, 80203e8 <on_reply+0x84>
 8020380:	6884      	ldr	r4, [r0, #8]
 8020382:	8b21      	ldrh	r1, [r4, #24]
 8020384:	4291      	cmp	r1, r2
 8020386:	d1f9      	bne.n	802037c <on_reply+0x18>
 8020388:	2248      	movs	r2, #72	@ 0x48
 802038a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 802038e:	4668      	mov	r0, sp
 8020390:	f001 fcc3 	bl	8021d1a <memcpy>
 8020394:	f104 0320 	add.w	r3, r4, #32
 8020398:	4620      	mov	r0, r4
 802039a:	cb0c      	ldmia	r3, {r2, r3}
 802039c:	f7fb fa12 	bl	801b7c4 <rmw_uxrce_get_static_input_buffer_for_entity>
 80203a0:	4680      	mov	r8, r0
 80203a2:	b308      	cbz	r0, 80203e8 <on_reply+0x84>
 80203a4:	4630      	mov	r0, r6
 80203a6:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80203aa:	463a      	mov	r2, r7
 80203ac:	f106 0110 	add.w	r1, r6, #16
 80203b0:	f7fb feea 	bl	801c188 <ucdr_deserialize_array_uint8_t>
 80203b4:	b930      	cbnz	r0, 80203c4 <on_reply+0x60>
 80203b6:	4641      	mov	r1, r8
 80203b8:	480e      	ldr	r0, [pc, #56]	@ (80203f4 <on_reply+0x90>)
 80203ba:	b014      	add	sp, #80	@ 0x50
 80203bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80203c0:	f000 b82a 	b.w	8020418 <put_memory>
 80203c4:	2200      	movs	r2, #0
 80203c6:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 80203ca:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 80203ce:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 80203d2:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 80203d6:	f000 f8cf 	bl	8020578 <rmw_uros_epoch_nanos>
 80203da:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 80203de:	2304      	movs	r3, #4
 80203e0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80203e4:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 80203e8:	b014      	add	sp, #80	@ 0x50
 80203ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80203ee:	bf00      	nop
 80203f0:	24064c40 	.word	0x24064c40
 80203f4:	2406954c 	.word	0x2406954c

080203f8 <get_memory>:
 80203f8:	4603      	mov	r3, r0
 80203fa:	6840      	ldr	r0, [r0, #4]
 80203fc:	b158      	cbz	r0, 8020416 <get_memory+0x1e>
 80203fe:	6842      	ldr	r2, [r0, #4]
 8020400:	605a      	str	r2, [r3, #4]
 8020402:	b10a      	cbz	r2, 8020408 <get_memory+0x10>
 8020404:	2100      	movs	r1, #0
 8020406:	6011      	str	r1, [r2, #0]
 8020408:	681a      	ldr	r2, [r3, #0]
 802040a:	6042      	str	r2, [r0, #4]
 802040c:	b102      	cbz	r2, 8020410 <get_memory+0x18>
 802040e:	6010      	str	r0, [r2, #0]
 8020410:	2200      	movs	r2, #0
 8020412:	6002      	str	r2, [r0, #0]
 8020414:	6018      	str	r0, [r3, #0]
 8020416:	4770      	bx	lr

08020418 <put_memory>:
 8020418:	680b      	ldr	r3, [r1, #0]
 802041a:	b10b      	cbz	r3, 8020420 <put_memory+0x8>
 802041c:	684a      	ldr	r2, [r1, #4]
 802041e:	605a      	str	r2, [r3, #4]
 8020420:	684a      	ldr	r2, [r1, #4]
 8020422:	b102      	cbz	r2, 8020426 <put_memory+0xe>
 8020424:	6013      	str	r3, [r2, #0]
 8020426:	6803      	ldr	r3, [r0, #0]
 8020428:	428b      	cmp	r3, r1
 802042a:	6843      	ldr	r3, [r0, #4]
 802042c:	bf08      	it	eq
 802042e:	6002      	streq	r2, [r0, #0]
 8020430:	604b      	str	r3, [r1, #4]
 8020432:	b103      	cbz	r3, 8020436 <put_memory+0x1e>
 8020434:	6019      	str	r1, [r3, #0]
 8020436:	2300      	movs	r3, #0
 8020438:	600b      	str	r3, [r1, #0]
 802043a:	6041      	str	r1, [r0, #4]
 802043c:	4770      	bx	lr
 802043e:	bf00      	nop

08020440 <rmw_create_guard_condition>:
 8020440:	b538      	push	{r3, r4, r5, lr}
 8020442:	4605      	mov	r5, r0
 8020444:	4808      	ldr	r0, [pc, #32]	@ (8020468 <rmw_create_guard_condition+0x28>)
 8020446:	f7ff ffd7 	bl	80203f8 <get_memory>
 802044a:	4603      	mov	r3, r0
 802044c:	b148      	cbz	r0, 8020462 <rmw_create_guard_condition+0x22>
 802044e:	6884      	ldr	r4, [r0, #8]
 8020450:	2300      	movs	r3, #0
 8020452:	61e5      	str	r5, [r4, #28]
 8020454:	7423      	strb	r3, [r4, #16]
 8020456:	f7f9 fd15 	bl	8019e84 <rmw_get_implementation_identifier>
 802045a:	f104 0314 	add.w	r3, r4, #20
 802045e:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8020462:	4618      	mov	r0, r3
 8020464:	bd38      	pop	{r3, r4, r5, pc}
 8020466:	bf00      	nop
 8020468:	240694ec 	.word	0x240694ec

0802046c <rmw_destroy_guard_condition>:
 802046c:	b508      	push	{r3, lr}
 802046e:	4b08      	ldr	r3, [pc, #32]	@ (8020490 <rmw_destroy_guard_condition+0x24>)
 8020470:	6819      	ldr	r1, [r3, #0]
 8020472:	b911      	cbnz	r1, 802047a <rmw_destroy_guard_condition+0xe>
 8020474:	e00a      	b.n	802048c <rmw_destroy_guard_condition+0x20>
 8020476:	6849      	ldr	r1, [r1, #4]
 8020478:	b141      	cbz	r1, 802048c <rmw_destroy_guard_condition+0x20>
 802047a:	688b      	ldr	r3, [r1, #8]
 802047c:	3314      	adds	r3, #20
 802047e:	4298      	cmp	r0, r3
 8020480:	d1f9      	bne.n	8020476 <rmw_destroy_guard_condition+0xa>
 8020482:	4803      	ldr	r0, [pc, #12]	@ (8020490 <rmw_destroy_guard_condition+0x24>)
 8020484:	f7ff ffc8 	bl	8020418 <put_memory>
 8020488:	2000      	movs	r0, #0
 802048a:	bd08      	pop	{r3, pc}
 802048c:	2001      	movs	r0, #1
 802048e:	bd08      	pop	{r3, pc}
 8020490:	240694ec 	.word	0x240694ec

08020494 <create_topic>:
 8020494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020498:	4605      	mov	r5, r0
 802049a:	b084      	sub	sp, #16
 802049c:	4822      	ldr	r0, [pc, #136]	@ (8020528 <create_topic+0x94>)
 802049e:	460f      	mov	r7, r1
 80204a0:	4616      	mov	r6, r2
 80204a2:	f7ff ffa9 	bl	80203f8 <get_memory>
 80204a6:	4604      	mov	r4, r0
 80204a8:	2800      	cmp	r0, #0
 80204aa:	d039      	beq.n	8020520 <create_topic+0x8c>
 80204ac:	692b      	ldr	r3, [r5, #16]
 80204ae:	2102      	movs	r1, #2
 80204b0:	6884      	ldr	r4, [r0, #8]
 80204b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80204b6:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 8020530 <create_topic+0x9c>
 80204ba:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80204be:	1c42      	adds	r2, r0, #1
 80204c0:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80204c4:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80204c8:	f7fc f9c0 	bl	801c84c <uxr_object_id>
 80204cc:	223c      	movs	r2, #60	@ 0x3c
 80204ce:	6120      	str	r0, [r4, #16]
 80204d0:	4641      	mov	r1, r8
 80204d2:	4638      	mov	r0, r7
 80204d4:	f7fb fb70 	bl	801bbb8 <generate_topic_name>
 80204d8:	b1f0      	cbz	r0, 8020518 <create_topic+0x84>
 80204da:	4f14      	ldr	r7, [pc, #80]	@ (802052c <create_topic+0x98>)
 80204dc:	4630      	mov	r0, r6
 80204de:	2264      	movs	r2, #100	@ 0x64
 80204e0:	4639      	mov	r1, r7
 80204e2:	f7fb fb3b 	bl	801bb5c <generate_type_name>
 80204e6:	b1b8      	cbz	r0, 8020518 <create_topic+0x84>
 80204e8:	6928      	ldr	r0, [r5, #16]
 80204ea:	2106      	movs	r1, #6
 80204ec:	696b      	ldr	r3, [r5, #20]
 80204ee:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80204f2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80204f6:	f8cd 8000 	str.w	r8, [sp]
 80204fa:	e9cd 7101 	strd	r7, r1, [sp, #4]
 80204fe:	6811      	ldr	r1, [r2, #0]
 8020500:	6922      	ldr	r2, [r4, #16]
 8020502:	f7fb ff27 	bl	801c354 <uxr_buffer_create_topic_bin>
 8020506:	4602      	mov	r2, r0
 8020508:	6928      	ldr	r0, [r5, #16]
 802050a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 802050e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8020512:	f7fb fa57 	bl	801b9c4 <run_xrce_session>
 8020516:	b918      	cbnz	r0, 8020520 <create_topic+0x8c>
 8020518:	4620      	mov	r0, r4
 802051a:	2400      	movs	r4, #0
 802051c:	f7fb f946 	bl	801b7ac <rmw_uxrce_fini_topic_memory>
 8020520:	4620      	mov	r0, r4
 8020522:	b004      	add	sp, #16
 8020524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020528:	2406956c 	.word	0x2406956c
 802052c:	240695e0 	.word	0x240695e0
 8020530:	240695a4 	.word	0x240695a4

08020534 <destroy_topic>:
 8020534:	b538      	push	{r3, r4, r5, lr}
 8020536:	6985      	ldr	r5, [r0, #24]
 8020538:	b1dd      	cbz	r5, 8020572 <destroy_topic+0x3e>
 802053a:	4604      	mov	r4, r0
 802053c:	6928      	ldr	r0, [r5, #16]
 802053e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8020542:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8020546:	6922      	ldr	r2, [r4, #16]
 8020548:	6819      	ldr	r1, [r3, #0]
 802054a:	f7fb fe85 	bl	801c258 <uxr_buffer_delete_entity>
 802054e:	4602      	mov	r2, r0
 8020550:	6928      	ldr	r0, [r5, #16]
 8020552:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8020556:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 802055a:	f7fb fa33 	bl	801b9c4 <run_xrce_session>
 802055e:	4603      	mov	r3, r0
 8020560:	4620      	mov	r0, r4
 8020562:	2b00      	cmp	r3, #0
 8020564:	bf14      	ite	ne
 8020566:	2400      	movne	r4, #0
 8020568:	2402      	moveq	r4, #2
 802056a:	f7fb f91f 	bl	801b7ac <rmw_uxrce_fini_topic_memory>
 802056e:	4620      	mov	r0, r4
 8020570:	bd38      	pop	{r3, r4, r5, pc}
 8020572:	2401      	movs	r4, #1
 8020574:	4620      	mov	r0, r4
 8020576:	bd38      	pop	{r3, r4, r5, pc}

08020578 <rmw_uros_epoch_nanos>:
 8020578:	4b05      	ldr	r3, [pc, #20]	@ (8020590 <rmw_uros_epoch_nanos+0x18>)
 802057a:	681b      	ldr	r3, [r3, #0]
 802057c:	b123      	cbz	r3, 8020588 <rmw_uros_epoch_nanos+0x10>
 802057e:	6898      	ldr	r0, [r3, #8]
 8020580:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8020584:	f7fc bbd8 	b.w	801cd38 <uxr_epoch_nanos>
 8020588:	2000      	movs	r0, #0
 802058a:	2100      	movs	r1, #0
 802058c:	4770      	bx	lr
 802058e:	bf00      	nop
 8020590:	2406953c 	.word	0x2406953c

08020594 <rosidl_runtime_c__String__init>:
 8020594:	b510      	push	{r4, lr}
 8020596:	4604      	mov	r4, r0
 8020598:	b086      	sub	sp, #24
 802059a:	b170      	cbz	r0, 80205ba <rosidl_runtime_c__String__init+0x26>
 802059c:	a801      	add	r0, sp, #4
 802059e:	f7f5 f94b 	bl	8015838 <rcutils_get_default_allocator>
 80205a2:	9b01      	ldr	r3, [sp, #4]
 80205a4:	9905      	ldr	r1, [sp, #20]
 80205a6:	2001      	movs	r0, #1
 80205a8:	4798      	blx	r3
 80205aa:	6020      	str	r0, [r4, #0]
 80205ac:	b128      	cbz	r0, 80205ba <rosidl_runtime_c__String__init+0x26>
 80205ae:	2100      	movs	r1, #0
 80205b0:	2201      	movs	r2, #1
 80205b2:	7001      	strb	r1, [r0, #0]
 80205b4:	4610      	mov	r0, r2
 80205b6:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80205ba:	b006      	add	sp, #24
 80205bc:	bd10      	pop	{r4, pc}
 80205be:	bf00      	nop

080205c0 <rosidl_runtime_c__String__fini>:
 80205c0:	b320      	cbz	r0, 802060c <rosidl_runtime_c__String__fini+0x4c>
 80205c2:	6803      	ldr	r3, [r0, #0]
 80205c4:	b510      	push	{r4, lr}
 80205c6:	4604      	mov	r4, r0
 80205c8:	b086      	sub	sp, #24
 80205ca:	b173      	cbz	r3, 80205ea <rosidl_runtime_c__String__fini+0x2a>
 80205cc:	6883      	ldr	r3, [r0, #8]
 80205ce:	b1f3      	cbz	r3, 802060e <rosidl_runtime_c__String__fini+0x4e>
 80205d0:	a801      	add	r0, sp, #4
 80205d2:	f7f5 f931 	bl	8015838 <rcutils_get_default_allocator>
 80205d6:	9b02      	ldr	r3, [sp, #8]
 80205d8:	9905      	ldr	r1, [sp, #20]
 80205da:	6820      	ldr	r0, [r4, #0]
 80205dc:	4798      	blx	r3
 80205de:	2300      	movs	r3, #0
 80205e0:	e9c4 3300 	strd	r3, r3, [r4]
 80205e4:	60a3      	str	r3, [r4, #8]
 80205e6:	b006      	add	sp, #24
 80205e8:	bd10      	pop	{r4, pc}
 80205ea:	6843      	ldr	r3, [r0, #4]
 80205ec:	b9db      	cbnz	r3, 8020626 <rosidl_runtime_c__String__fini+0x66>
 80205ee:	6883      	ldr	r3, [r0, #8]
 80205f0:	2b00      	cmp	r3, #0
 80205f2:	d0f8      	beq.n	80205e6 <rosidl_runtime_c__String__fini+0x26>
 80205f4:	4b12      	ldr	r3, [pc, #72]	@ (8020640 <rosidl_runtime_c__String__fini+0x80>)
 80205f6:	2251      	movs	r2, #81	@ 0x51
 80205f8:	2101      	movs	r1, #1
 80205fa:	4812      	ldr	r0, [pc, #72]	@ (8020644 <rosidl_runtime_c__String__fini+0x84>)
 80205fc:	681b      	ldr	r3, [r3, #0]
 80205fe:	68db      	ldr	r3, [r3, #12]
 8020600:	f001 f8f0 	bl	80217e4 <fwrite>
 8020604:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020608:	f000 fdac 	bl	8021164 <exit>
 802060c:	4770      	bx	lr
 802060e:	4b0c      	ldr	r3, [pc, #48]	@ (8020640 <rosidl_runtime_c__String__fini+0x80>)
 8020610:	224c      	movs	r2, #76	@ 0x4c
 8020612:	2101      	movs	r1, #1
 8020614:	480c      	ldr	r0, [pc, #48]	@ (8020648 <rosidl_runtime_c__String__fini+0x88>)
 8020616:	681b      	ldr	r3, [r3, #0]
 8020618:	68db      	ldr	r3, [r3, #12]
 802061a:	f001 f8e3 	bl	80217e4 <fwrite>
 802061e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020622:	f000 fd9f 	bl	8021164 <exit>
 8020626:	4b06      	ldr	r3, [pc, #24]	@ (8020640 <rosidl_runtime_c__String__fini+0x80>)
 8020628:	224e      	movs	r2, #78	@ 0x4e
 802062a:	2101      	movs	r1, #1
 802062c:	4807      	ldr	r0, [pc, #28]	@ (802064c <rosidl_runtime_c__String__fini+0x8c>)
 802062e:	681b      	ldr	r3, [r3, #0]
 8020630:	68db      	ldr	r3, [r3, #12]
 8020632:	f001 f8d7 	bl	80217e4 <fwrite>
 8020636:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802063a:	f000 fd93 	bl	8021164 <exit>
 802063e:	bf00      	nop
 8020640:	240013a0 	.word	0x240013a0
 8020644:	0802509c 	.word	0x0802509c
 8020648:	08024ffc 	.word	0x08024ffc
 802064c:	0802504c 	.word	0x0802504c

08020650 <tier4_vehicle_msgs__msg__ActuationCommand__init>:
 8020650:	3800      	subs	r0, #0
 8020652:	bf18      	it	ne
 8020654:	2001      	movne	r0, #1
 8020656:	4770      	bx	lr

08020658 <tier4_vehicle_msgs__msg__ActuationCommand__fini>:
 8020658:	4770      	bx	lr
 802065a:	bf00      	nop

0802065c <tier4_vehicle_msgs__msg__ActuationStatus__init>:
 802065c:	3800      	subs	r0, #0
 802065e:	bf18      	it	ne
 8020660:	2001      	movne	r0, #1
 8020662:	4770      	bx	lr

08020664 <tier4_vehicle_msgs__msg__ActuationStatus__fini>:
 8020664:	4770      	bx	lr
 8020666:	bf00      	nop

08020668 <ucdr_serialize_string>:
 8020668:	b510      	push	{r4, lr}
 802066a:	b082      	sub	sp, #8
 802066c:	4604      	mov	r4, r0
 802066e:	4608      	mov	r0, r1
 8020670:	9101      	str	r1, [sp, #4]
 8020672:	f7df fe3f 	bl	80002f4 <strlen>
 8020676:	4602      	mov	r2, r0
 8020678:	9901      	ldr	r1, [sp, #4]
 802067a:	4620      	mov	r0, r4
 802067c:	3201      	adds	r2, #1
 802067e:	b002      	add	sp, #8
 8020680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020684:	f7f5 bec0 	b.w	8016408 <ucdr_serialize_sequence_char>

08020688 <ucdr_deserialize_string>:
 8020688:	b500      	push	{lr}
 802068a:	b083      	sub	sp, #12
 802068c:	ab01      	add	r3, sp, #4
 802068e:	f7f5 fecd 	bl	801642c <ucdr_deserialize_sequence_char>
 8020692:	b003      	add	sp, #12
 8020694:	f85d fb04 	ldr.w	pc, [sp], #4

08020698 <uxr_init_input_best_effort_stream>:
 8020698:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802069c:	8003      	strh	r3, [r0, #0]
 802069e:	4770      	bx	lr

080206a0 <uxr_reset_input_best_effort_stream>:
 80206a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80206a4:	8003      	strh	r3, [r0, #0]
 80206a6:	4770      	bx	lr

080206a8 <uxr_receive_best_effort_message>:
 80206a8:	b538      	push	{r3, r4, r5, lr}
 80206aa:	4604      	mov	r4, r0
 80206ac:	8800      	ldrh	r0, [r0, #0]
 80206ae:	460d      	mov	r5, r1
 80206b0:	f000 fd24 	bl	80210fc <uxr_seq_num_cmp>
 80206b4:	4603      	mov	r3, r0
 80206b6:	0fc0      	lsrs	r0, r0, #31
 80206b8:	2b00      	cmp	r3, #0
 80206ba:	bfb8      	it	lt
 80206bc:	8025      	strhlt	r5, [r4, #0]
 80206be:	bd38      	pop	{r3, r4, r5, pc}

080206c0 <on_full_input_buffer>:
 80206c0:	b570      	push	{r4, r5, r6, lr}
 80206c2:	460c      	mov	r4, r1
 80206c4:	4605      	mov	r5, r0
 80206c6:	8908      	ldrh	r0, [r1, #8]
 80206c8:	682b      	ldr	r3, [r5, #0]
 80206ca:	7d26      	ldrb	r6, [r4, #20]
 80206cc:	e9d1 1200 	ldrd	r1, r2, [r1]
 80206d0:	fbb2 f2f0 	udiv	r2, r2, r0
 80206d4:	eba3 0c01 	sub.w	ip, r3, r1
 80206d8:	fbbc fcf2 	udiv	ip, ip, r2
 80206dc:	f10c 0c01 	add.w	ip, ip, #1
 80206e0:	fa1f f38c 	uxth.w	r3, ip
 80206e4:	fbb3 fcf0 	udiv	ip, r3, r0
 80206e8:	fb00 331c 	mls	r3, r0, ip, r3
 80206ec:	b29b      	uxth	r3, r3
 80206ee:	fb02 f303 	mul.w	r3, r2, r3
 80206f2:	1d18      	adds	r0, r3, #4
 80206f4:	4408      	add	r0, r1
 80206f6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80206fa:	b116      	cbz	r6, 8020702 <on_full_input_buffer+0x42>
 80206fc:	2600      	movs	r6, #0
 80206fe:	f840 6c04 	str.w	r6, [r0, #-4]
 8020702:	2a03      	cmp	r2, #3
 8020704:	d801      	bhi.n	802070a <on_full_input_buffer+0x4a>
 8020706:	2001      	movs	r0, #1
 8020708:	bd70      	pop	{r4, r5, r6, pc}
 802070a:	3308      	adds	r3, #8
 802070c:	4628      	mov	r0, r5
 802070e:	3a04      	subs	r2, #4
 8020710:	4419      	add	r1, r3
 8020712:	692b      	ldr	r3, [r5, #16]
 8020714:	f7f4 f84e 	bl	80147b4 <ucdr_init_buffer_origin>
 8020718:	4628      	mov	r0, r5
 802071a:	4622      	mov	r2, r4
 802071c:	4902      	ldr	r1, [pc, #8]	@ (8020728 <on_full_input_buffer+0x68>)
 802071e:	f7f4 f825 	bl	801476c <ucdr_set_on_full_buffer_callback>
 8020722:	2000      	movs	r0, #0
 8020724:	bd70      	pop	{r4, r5, r6, pc}
 8020726:	bf00      	nop
 8020728:	080206c1 	.word	0x080206c1

0802072c <uxr_init_input_reliable_stream>:
 802072c:	b510      	push	{r4, lr}
 802072e:	e9c0 1200 	strd	r1, r2, [r0]
 8020732:	2400      	movs	r4, #0
 8020734:	9a02      	ldr	r2, [sp, #8]
 8020736:	8103      	strh	r3, [r0, #8]
 8020738:	6102      	str	r2, [r0, #16]
 802073a:	7504      	strb	r4, [r0, #20]
 802073c:	b1c3      	cbz	r3, 8020770 <uxr_init_input_reliable_stream+0x44>
 802073e:	600c      	str	r4, [r1, #0]
 8020740:	8901      	ldrh	r1, [r0, #8]
 8020742:	2901      	cmp	r1, #1
 8020744:	d914      	bls.n	8020770 <uxr_init_input_reliable_stream+0x44>
 8020746:	f04f 0c01 	mov.w	ip, #1
 802074a:	6843      	ldr	r3, [r0, #4]
 802074c:	f10c 0e01 	add.w	lr, ip, #1
 8020750:	fbbc f2f1 	udiv	r2, ip, r1
 8020754:	fbb3 f3f1 	udiv	r3, r3, r1
 8020758:	fb01 c212 	mls	r2, r1, r2, ip
 802075c:	fa1f fc8e 	uxth.w	ip, lr
 8020760:	b292      	uxth	r2, r2
 8020762:	fb02 f303 	mul.w	r3, r2, r3
 8020766:	6802      	ldr	r2, [r0, #0]
 8020768:	50d4      	str	r4, [r2, r3]
 802076a:	8901      	ldrh	r1, [r0, #8]
 802076c:	4561      	cmp	r1, ip
 802076e:	d8ec      	bhi.n	802074a <uxr_init_input_reliable_stream+0x1e>
 8020770:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020774:	60c3      	str	r3, [r0, #12]
 8020776:	bd10      	pop	{r4, pc}

08020778 <uxr_reset_input_reliable_stream>:
 8020778:	8901      	ldrh	r1, [r0, #8]
 802077a:	b1d9      	cbz	r1, 80207b4 <uxr_reset_input_reliable_stream+0x3c>
 802077c:	b510      	push	{r4, lr}
 802077e:	f04f 0e00 	mov.w	lr, #0
 8020782:	46f4      	mov	ip, lr
 8020784:	4674      	mov	r4, lr
 8020786:	6843      	ldr	r3, [r0, #4]
 8020788:	f10e 0e01 	add.w	lr, lr, #1
 802078c:	fbbc f2f1 	udiv	r2, ip, r1
 8020790:	fbb3 f3f1 	udiv	r3, r3, r1
 8020794:	fb01 c212 	mls	r2, r1, r2, ip
 8020798:	fa1f fc8e 	uxth.w	ip, lr
 802079c:	b292      	uxth	r2, r2
 802079e:	fb02 f303 	mul.w	r3, r2, r3
 80207a2:	6802      	ldr	r2, [r0, #0]
 80207a4:	50d4      	str	r4, [r2, r3]
 80207a6:	8901      	ldrh	r1, [r0, #8]
 80207a8:	4561      	cmp	r1, ip
 80207aa:	d8ec      	bhi.n	8020786 <uxr_reset_input_reliable_stream+0xe>
 80207ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80207b0:	60c3      	str	r3, [r0, #12]
 80207b2:	bd10      	pop	{r4, pc}
 80207b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80207b8:	60c3      	str	r3, [r0, #12]
 80207ba:	4770      	bx	lr

080207bc <uxr_receive_reliable_message>:
 80207bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80207c0:	4604      	mov	r4, r0
 80207c2:	460d      	mov	r5, r1
 80207c4:	8901      	ldrh	r1, [r0, #8]
 80207c6:	4617      	mov	r7, r2
 80207c8:	8980      	ldrh	r0, [r0, #12]
 80207ca:	4698      	mov	r8, r3
 80207cc:	f000 fc8e 	bl	80210ec <uxr_seq_num_add>
 80207d0:	4629      	mov	r1, r5
 80207d2:	4606      	mov	r6, r0
 80207d4:	89a0      	ldrh	r0, [r4, #12]
 80207d6:	f000 fc91 	bl	80210fc <uxr_seq_num_cmp>
 80207da:	2800      	cmp	r0, #0
 80207dc:	db0a      	blt.n	80207f4 <uxr_receive_reliable_message+0x38>
 80207de:	2600      	movs	r6, #0
 80207e0:	4629      	mov	r1, r5
 80207e2:	89e0      	ldrh	r0, [r4, #14]
 80207e4:	f000 fc8a 	bl	80210fc <uxr_seq_num_cmp>
 80207e8:	2800      	cmp	r0, #0
 80207ea:	da00      	bge.n	80207ee <uxr_receive_reliable_message+0x32>
 80207ec:	81e5      	strh	r5, [r4, #14]
 80207ee:	4630      	mov	r0, r6
 80207f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80207f4:	4630      	mov	r0, r6
 80207f6:	4629      	mov	r1, r5
 80207f8:	f000 fc80 	bl	80210fc <uxr_seq_num_cmp>
 80207fc:	2800      	cmp	r0, #0
 80207fe:	dbee      	blt.n	80207de <uxr_receive_reliable_message+0x22>
 8020800:	6923      	ldr	r3, [r4, #16]
 8020802:	4638      	mov	r0, r7
 8020804:	4798      	blx	r3
 8020806:	4681      	mov	r9, r0
 8020808:	2101      	movs	r1, #1
 802080a:	89a0      	ldrh	r0, [r4, #12]
 802080c:	f000 fc6e 	bl	80210ec <uxr_seq_num_add>
 8020810:	f1b9 0f00 	cmp.w	r9, #0
 8020814:	bf08      	it	eq
 8020816:	4285      	cmpeq	r5, r0
 8020818:	bf0c      	ite	eq
 802081a:	2601      	moveq	r6, #1
 802081c:	2600      	movne	r6, #0
 802081e:	d104      	bne.n	802082a <uxr_receive_reliable_message+0x6e>
 8020820:	2300      	movs	r3, #0
 8020822:	9a08      	ldr	r2, [sp, #32]
 8020824:	81a0      	strh	r0, [r4, #12]
 8020826:	7013      	strb	r3, [r2, #0]
 8020828:	e7da      	b.n	80207e0 <uxr_receive_reliable_message+0x24>
 802082a:	8922      	ldrh	r2, [r4, #8]
 802082c:	6863      	ldr	r3, [r4, #4]
 802082e:	fbb5 f0f2 	udiv	r0, r5, r2
 8020832:	fbb3 f3f2 	udiv	r3, r3, r2
 8020836:	fb02 5010 	mls	r0, r2, r0, r5
 802083a:	b280      	uxth	r0, r0
 802083c:	fb03 f000 	mul.w	r0, r3, r0
 8020840:	6823      	ldr	r3, [r4, #0]
 8020842:	3004      	adds	r0, #4
 8020844:	4418      	add	r0, r3
 8020846:	f850 3c04 	ldr.w	r3, [r0, #-4]
 802084a:	2b00      	cmp	r3, #0
 802084c:	d1c7      	bne.n	80207de <uxr_receive_reliable_message+0x22>
 802084e:	4639      	mov	r1, r7
 8020850:	4642      	mov	r2, r8
 8020852:	f001 fa62 	bl	8021d1a <memcpy>
 8020856:	8921      	ldrh	r1, [r4, #8]
 8020858:	6863      	ldr	r3, [r4, #4]
 802085a:	fbb5 f2f1 	udiv	r2, r5, r1
 802085e:	fbb3 f3f1 	udiv	r3, r3, r1
 8020862:	fb01 5212 	mls	r2, r1, r2, r5
 8020866:	b292      	uxth	r2, r2
 8020868:	fb02 f303 	mul.w	r3, r2, r3
 802086c:	6822      	ldr	r2, [r4, #0]
 802086e:	f842 8003 	str.w	r8, [r2, r3]
 8020872:	2301      	movs	r3, #1
 8020874:	9a08      	ldr	r2, [sp, #32]
 8020876:	7013      	strb	r3, [r2, #0]
 8020878:	f1b9 0f00 	cmp.w	r9, #0
 802087c:	d0af      	beq.n	80207de <uxr_receive_reliable_message+0x22>
 802087e:	89a6      	ldrh	r6, [r4, #12]
 8020880:	2101      	movs	r1, #1
 8020882:	4630      	mov	r0, r6
 8020884:	f000 fc32 	bl	80210ec <uxr_seq_num_add>
 8020888:	8921      	ldrh	r1, [r4, #8]
 802088a:	6863      	ldr	r3, [r4, #4]
 802088c:	4606      	mov	r6, r0
 802088e:	fbb0 f2f1 	udiv	r2, r0, r1
 8020892:	fbb3 f3f1 	udiv	r3, r3, r1
 8020896:	fb01 0212 	mls	r2, r1, r2, r0
 802089a:	6820      	ldr	r0, [r4, #0]
 802089c:	b292      	uxth	r2, r2
 802089e:	fb02 f303 	mul.w	r3, r2, r3
 80208a2:	3304      	adds	r3, #4
 80208a4:	4418      	add	r0, r3
 80208a6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80208aa:	2b00      	cmp	r3, #0
 80208ac:	d097      	beq.n	80207de <uxr_receive_reliable_message+0x22>
 80208ae:	6923      	ldr	r3, [r4, #16]
 80208b0:	4798      	blx	r3
 80208b2:	2802      	cmp	r0, #2
 80208b4:	d002      	beq.n	80208bc <uxr_receive_reliable_message+0x100>
 80208b6:	2801      	cmp	r0, #1
 80208b8:	d0e2      	beq.n	8020880 <uxr_receive_reliable_message+0xc4>
 80208ba:	e790      	b.n	80207de <uxr_receive_reliable_message+0x22>
 80208bc:	2601      	movs	r6, #1
 80208be:	e78f      	b.n	80207e0 <uxr_receive_reliable_message+0x24>

080208c0 <uxr_next_input_reliable_buffer_available>:
 80208c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80208c4:	4604      	mov	r4, r0
 80208c6:	460f      	mov	r7, r1
 80208c8:	8980      	ldrh	r0, [r0, #12]
 80208ca:	2101      	movs	r1, #1
 80208cc:	4690      	mov	r8, r2
 80208ce:	f000 fc0d 	bl	80210ec <uxr_seq_num_add>
 80208d2:	8922      	ldrh	r2, [r4, #8]
 80208d4:	6866      	ldr	r6, [r4, #4]
 80208d6:	fbb0 f3f2 	udiv	r3, r0, r2
 80208da:	fbb6 f6f2 	udiv	r6, r6, r2
 80208de:	fb02 0313 	mls	r3, r2, r3, r0
 80208e2:	b29b      	uxth	r3, r3
 80208e4:	fb03 f606 	mul.w	r6, r3, r6
 80208e8:	6823      	ldr	r3, [r4, #0]
 80208ea:	3604      	adds	r6, #4
 80208ec:	441e      	add	r6, r3
 80208ee:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80208f2:	f1b9 0f00 	cmp.w	r9, #0
 80208f6:	d023      	beq.n	8020940 <uxr_next_input_reliable_buffer_available+0x80>
 80208f8:	4605      	mov	r5, r0
 80208fa:	6923      	ldr	r3, [r4, #16]
 80208fc:	4630      	mov	r0, r6
 80208fe:	4798      	blx	r3
 8020900:	4682      	mov	sl, r0
 8020902:	b300      	cbz	r0, 8020946 <uxr_next_input_reliable_buffer_available+0x86>
 8020904:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8020908:	2101      	movs	r1, #1
 802090a:	4650      	mov	r0, sl
 802090c:	f000 fbee 	bl	80210ec <uxr_seq_num_add>
 8020910:	8921      	ldrh	r1, [r4, #8]
 8020912:	4682      	mov	sl, r0
 8020914:	6863      	ldr	r3, [r4, #4]
 8020916:	6820      	ldr	r0, [r4, #0]
 8020918:	fbba f2f1 	udiv	r2, sl, r1
 802091c:	fbb3 f3f1 	udiv	r3, r3, r1
 8020920:	fb01 a212 	mls	r2, r1, r2, sl
 8020924:	b292      	uxth	r2, r2
 8020926:	fb02 f303 	mul.w	r3, r2, r3
 802092a:	3304      	adds	r3, #4
 802092c:	4418      	add	r0, r3
 802092e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8020932:	b12b      	cbz	r3, 8020940 <uxr_next_input_reliable_buffer_available+0x80>
 8020934:	6923      	ldr	r3, [r4, #16]
 8020936:	4798      	blx	r3
 8020938:	2802      	cmp	r0, #2
 802093a:	d01b      	beq.n	8020974 <uxr_next_input_reliable_buffer_available+0xb4>
 802093c:	2801      	cmp	r0, #1
 802093e:	d0e3      	beq.n	8020908 <uxr_next_input_reliable_buffer_available+0x48>
 8020940:	2000      	movs	r0, #0
 8020942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020946:	464a      	mov	r2, r9
 8020948:	4631      	mov	r1, r6
 802094a:	4638      	mov	r0, r7
 802094c:	f7f3 ff3a 	bl	80147c4 <ucdr_init_buffer>
 8020950:	8921      	ldrh	r1, [r4, #8]
 8020952:	6863      	ldr	r3, [r4, #4]
 8020954:	2001      	movs	r0, #1
 8020956:	fbb5 f2f1 	udiv	r2, r5, r1
 802095a:	fbb3 f3f1 	udiv	r3, r3, r1
 802095e:	fb01 5212 	mls	r2, r1, r2, r5
 8020962:	b292      	uxth	r2, r2
 8020964:	fb02 f303 	mul.w	r3, r2, r3
 8020968:	6822      	ldr	r2, [r4, #0]
 802096a:	f842 a003 	str.w	sl, [r2, r3]
 802096e:	81a5      	strh	r5, [r4, #12]
 8020970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020974:	8920      	ldrh	r0, [r4, #8]
 8020976:	eb06 0108 	add.w	r1, r6, r8
 802097a:	6863      	ldr	r3, [r4, #4]
 802097c:	eba9 0208 	sub.w	r2, r9, r8
 8020980:	fbb5 f6f0 	udiv	r6, r5, r0
 8020984:	fbb3 f3f0 	udiv	r3, r3, r0
 8020988:	fb00 5516 	mls	r5, r0, r6, r5
 802098c:	2000      	movs	r0, #0
 802098e:	b2ad      	uxth	r5, r5
 8020990:	fb03 f505 	mul.w	r5, r3, r5
 8020994:	6823      	ldr	r3, [r4, #0]
 8020996:	5158      	str	r0, [r3, r5]
 8020998:	4638      	mov	r0, r7
 802099a:	f7f3 ff13 	bl	80147c4 <ucdr_init_buffer>
 802099e:	4638      	mov	r0, r7
 80209a0:	4622      	mov	r2, r4
 80209a2:	4903      	ldr	r1, [pc, #12]	@ (80209b0 <uxr_next_input_reliable_buffer_available+0xf0>)
 80209a4:	f7f3 fee2 	bl	801476c <ucdr_set_on_full_buffer_callback>
 80209a8:	2001      	movs	r0, #1
 80209aa:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80209ae:	e7c8      	b.n	8020942 <uxr_next_input_reliable_buffer_available+0x82>
 80209b0:	080206c1 	.word	0x080206c1

080209b4 <uxr_process_heartbeat>:
 80209b4:	b538      	push	{r3, r4, r5, lr}
 80209b6:	4611      	mov	r1, r2
 80209b8:	4604      	mov	r4, r0
 80209ba:	89c0      	ldrh	r0, [r0, #14]
 80209bc:	4615      	mov	r5, r2
 80209be:	f000 fb9d 	bl	80210fc <uxr_seq_num_cmp>
 80209c2:	2800      	cmp	r0, #0
 80209c4:	bfb8      	it	lt
 80209c6:	81e5      	strhlt	r5, [r4, #14]
 80209c8:	bd38      	pop	{r3, r4, r5, pc}
 80209ca:	bf00      	nop

080209cc <uxr_compute_acknack>:
 80209cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80209d0:	8903      	ldrh	r3, [r0, #8]
 80209d2:	4604      	mov	r4, r0
 80209d4:	460f      	mov	r7, r1
 80209d6:	8985      	ldrh	r5, [r0, #12]
 80209d8:	b1db      	cbz	r3, 8020a12 <uxr_compute_acknack+0x46>
 80209da:	4628      	mov	r0, r5
 80209dc:	2601      	movs	r6, #1
 80209de:	e004      	b.n	80209ea <uxr_compute_acknack+0x1e>
 80209e0:	4566      	cmp	r6, ip
 80209e2:	f106 0601 	add.w	r6, r6, #1
 80209e6:	d214      	bcs.n	8020a12 <uxr_compute_acknack+0x46>
 80209e8:	89a0      	ldrh	r0, [r4, #12]
 80209ea:	b2b1      	uxth	r1, r6
 80209ec:	f000 fb7e 	bl	80210ec <uxr_seq_num_add>
 80209f0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80209f4:	fbb0 f2fc 	udiv	r2, r0, ip
 80209f8:	e9d4 1300 	ldrd	r1, r3, [r4]
 80209fc:	fb0c 0212 	mls	r2, ip, r2, r0
 8020a00:	fbb3 f3fc 	udiv	r3, r3, ip
 8020a04:	b292      	uxth	r2, r2
 8020a06:	fb02 f303 	mul.w	r3, r2, r3
 8020a0a:	58cb      	ldr	r3, [r1, r3]
 8020a0c:	2b00      	cmp	r3, #0
 8020a0e:	d1e7      	bne.n	80209e0 <uxr_compute_acknack+0x14>
 8020a10:	4605      	mov	r5, r0
 8020a12:	803d      	strh	r5, [r7, #0]
 8020a14:	2101      	movs	r1, #1
 8020a16:	89e6      	ldrh	r6, [r4, #14]
 8020a18:	4628      	mov	r0, r5
 8020a1a:	f000 fb6b 	bl	80210f4 <uxr_seq_num_sub>
 8020a1e:	4601      	mov	r1, r0
 8020a20:	4630      	mov	r0, r6
 8020a22:	f000 fb67 	bl	80210f4 <uxr_seq_num_sub>
 8020a26:	4606      	mov	r6, r0
 8020a28:	b328      	cbz	r0, 8020a76 <uxr_compute_acknack+0xaa>
 8020a2a:	f04f 0900 	mov.w	r9, #0
 8020a2e:	f04f 0801 	mov.w	r8, #1
 8020a32:	464d      	mov	r5, r9
 8020a34:	fa1f f189 	uxth.w	r1, r9
 8020a38:	8838      	ldrh	r0, [r7, #0]
 8020a3a:	f000 fb57 	bl	80210ec <uxr_seq_num_add>
 8020a3e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8020a42:	6861      	ldr	r1, [r4, #4]
 8020a44:	fa08 fe09 	lsl.w	lr, r8, r9
 8020a48:	6822      	ldr	r2, [r4, #0]
 8020a4a:	f109 0901 	add.w	r9, r9, #1
 8020a4e:	ea4e 0e05 	orr.w	lr, lr, r5
 8020a52:	fbb0 f3fc 	udiv	r3, r0, ip
 8020a56:	fbb1 f1fc 	udiv	r1, r1, ip
 8020a5a:	fb03 001c 	mls	r0, r3, ip, r0
 8020a5e:	b283      	uxth	r3, r0
 8020a60:	fb01 f303 	mul.w	r3, r1, r3
 8020a64:	58d3      	ldr	r3, [r2, r3]
 8020a66:	b90b      	cbnz	r3, 8020a6c <uxr_compute_acknack+0xa0>
 8020a68:	fa1f f58e 	uxth.w	r5, lr
 8020a6c:	454e      	cmp	r6, r9
 8020a6e:	d1e1      	bne.n	8020a34 <uxr_compute_acknack+0x68>
 8020a70:	4628      	mov	r0, r5
 8020a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020a76:	4605      	mov	r5, r0
 8020a78:	4628      	mov	r0, r5
 8020a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020a7e:	bf00      	nop

08020a80 <uxr_init_output_best_effort_stream>:
 8020a80:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8020a84:	6001      	str	r1, [r0, #0]
 8020a86:	7303      	strb	r3, [r0, #12]
 8020a88:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8020a8c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8020a90:	4770      	bx	lr
 8020a92:	bf00      	nop

08020a94 <uxr_reset_output_best_effort_stream>:
 8020a94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8020a98:	7b03      	ldrb	r3, [r0, #12]
 8020a9a:	81c2      	strh	r2, [r0, #14]
 8020a9c:	6043      	str	r3, [r0, #4]
 8020a9e:	4770      	bx	lr

08020aa0 <uxr_prepare_best_effort_buffer_to_write>:
 8020aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020aa2:	4604      	mov	r4, r0
 8020aa4:	b083      	sub	sp, #12
 8020aa6:	6840      	ldr	r0, [r0, #4]
 8020aa8:	460d      	mov	r5, r1
 8020aaa:	4616      	mov	r6, r2
 8020aac:	f7fd fec0 	bl	801e830 <uxr_submessage_padding>
 8020ab0:	6863      	ldr	r3, [r4, #4]
 8020ab2:	4418      	add	r0, r3
 8020ab4:	68a3      	ldr	r3, [r4, #8]
 8020ab6:	1942      	adds	r2, r0, r5
 8020ab8:	4293      	cmp	r3, r2
 8020aba:	bf2c      	ite	cs
 8020abc:	2701      	movcs	r7, #1
 8020abe:	2700      	movcc	r7, #0
 8020ac0:	d202      	bcs.n	8020ac8 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8020ac2:	4638      	mov	r0, r7
 8020ac4:	b003      	add	sp, #12
 8020ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020ac8:	9000      	str	r0, [sp, #0]
 8020aca:	2300      	movs	r3, #0
 8020acc:	4630      	mov	r0, r6
 8020ace:	6821      	ldr	r1, [r4, #0]
 8020ad0:	f7f3 fe66 	bl	80147a0 <ucdr_init_buffer_origin_offset>
 8020ad4:	6861      	ldr	r1, [r4, #4]
 8020ad6:	4638      	mov	r0, r7
 8020ad8:	4429      	add	r1, r5
 8020ada:	6061      	str	r1, [r4, #4]
 8020adc:	b003      	add	sp, #12
 8020ade:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020ae0 <uxr_prepare_best_effort_buffer_to_send>:
 8020ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020ae4:	4604      	mov	r4, r0
 8020ae6:	461d      	mov	r5, r3
 8020ae8:	6840      	ldr	r0, [r0, #4]
 8020aea:	7b23      	ldrb	r3, [r4, #12]
 8020aec:	4298      	cmp	r0, r3
 8020aee:	bf8c      	ite	hi
 8020af0:	2601      	movhi	r6, #1
 8020af2:	2600      	movls	r6, #0
 8020af4:	d802      	bhi.n	8020afc <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8020af6:	4630      	mov	r0, r6
 8020af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020afc:	4688      	mov	r8, r1
 8020afe:	89e0      	ldrh	r0, [r4, #14]
 8020b00:	2101      	movs	r1, #1
 8020b02:	4617      	mov	r7, r2
 8020b04:	f000 faf2 	bl	80210ec <uxr_seq_num_add>
 8020b08:	6823      	ldr	r3, [r4, #0]
 8020b0a:	81e0      	strh	r0, [r4, #14]
 8020b0c:	8028      	strh	r0, [r5, #0]
 8020b0e:	4630      	mov	r0, r6
 8020b10:	f8c8 3000 	str.w	r3, [r8]
 8020b14:	6863      	ldr	r3, [r4, #4]
 8020b16:	603b      	str	r3, [r7, #0]
 8020b18:	7b23      	ldrb	r3, [r4, #12]
 8020b1a:	6063      	str	r3, [r4, #4]
 8020b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020b20 <on_full_output_buffer>:
 8020b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b22:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8020b26:	460c      	mov	r4, r1
 8020b28:	6803      	ldr	r3, [r0, #0]
 8020b2a:	4605      	mov	r5, r0
 8020b2c:	7b26      	ldrb	r6, [r4, #12]
 8020b2e:	e9d1 1200 	ldrd	r1, r2, [r1]
 8020b32:	fbb2 f2fc 	udiv	r2, r2, ip
 8020b36:	eba3 0e01 	sub.w	lr, r3, r1
 8020b3a:	6903      	ldr	r3, [r0, #16]
 8020b3c:	fbbe fef2 	udiv	lr, lr, r2
 8020b40:	f10e 0e01 	add.w	lr, lr, #1
 8020b44:	fa1f fe8e 	uxth.w	lr, lr
 8020b48:	fbbe f7fc 	udiv	r7, lr, ip
 8020b4c:	fb0c ec17 	mls	ip, ip, r7, lr
 8020b50:	fa1f fc8c 	uxth.w	ip, ip
 8020b54:	fb02 fc0c 	mul.w	ip, r2, ip
 8020b58:	f851 200c 	ldr.w	r2, [r1, ip]
 8020b5c:	44b4      	add	ip, r6
 8020b5e:	1b92      	subs	r2, r2, r6
 8020b60:	f10c 0c08 	add.w	ip, ip, #8
 8020b64:	3a04      	subs	r2, #4
 8020b66:	4461      	add	r1, ip
 8020b68:	f7f3 fe24 	bl	80147b4 <ucdr_init_buffer_origin>
 8020b6c:	4628      	mov	r0, r5
 8020b6e:	4622      	mov	r2, r4
 8020b70:	4902      	ldr	r1, [pc, #8]	@ (8020b7c <on_full_output_buffer+0x5c>)
 8020b72:	f7f3 fdfb 	bl	801476c <ucdr_set_on_full_buffer_callback>
 8020b76:	2000      	movs	r0, #0
 8020b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020b7a:	bf00      	nop
 8020b7c:	08020b21 	.word	0x08020b21

08020b80 <uxr_init_output_reliable_stream>:
 8020b80:	b530      	push	{r4, r5, lr}
 8020b82:	f89d 400c 	ldrb.w	r4, [sp, #12]
 8020b86:	8103      	strh	r3, [r0, #8]
 8020b88:	7304      	strb	r4, [r0, #12]
 8020b8a:	e9c0 1200 	strd	r1, r2, [r0]
 8020b8e:	b1e3      	cbz	r3, 8020bca <uxr_init_output_reliable_stream+0x4a>
 8020b90:	600c      	str	r4, [r1, #0]
 8020b92:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8020b96:	f1bc 0f01 	cmp.w	ip, #1
 8020b9a:	d916      	bls.n	8020bca <uxr_init_output_reliable_stream+0x4a>
 8020b9c:	f04f 0e01 	mov.w	lr, #1
 8020ba0:	6843      	ldr	r3, [r0, #4]
 8020ba2:	f10e 0501 	add.w	r5, lr, #1
 8020ba6:	7b04      	ldrb	r4, [r0, #12]
 8020ba8:	6801      	ldr	r1, [r0, #0]
 8020baa:	fbbe f2fc 	udiv	r2, lr, ip
 8020bae:	fbb3 f3fc 	udiv	r3, r3, ip
 8020bb2:	fb0c e212 	mls	r2, ip, r2, lr
 8020bb6:	fa1f fe85 	uxth.w	lr, r5
 8020bba:	b292      	uxth	r2, r2
 8020bbc:	fb02 f303 	mul.w	r3, r2, r3
 8020bc0:	50cc      	str	r4, [r1, r3]
 8020bc2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8020bc6:	45f4      	cmp	ip, lr
 8020bc8:	d8ea      	bhi.n	8020ba0 <uxr_init_output_reliable_stream+0x20>
 8020bca:	4b07      	ldr	r3, [pc, #28]	@ (8020be8 <uxr_init_output_reliable_stream+0x68>)
 8020bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8020bd0:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8020bd4:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8020bd8:	f8c0 300e 	str.w	r3, [r0, #14]
 8020bdc:	2300      	movs	r3, #0
 8020bde:	8242      	strh	r2, [r0, #18]
 8020be0:	8403      	strh	r3, [r0, #32]
 8020be2:	e9c0 4506 	strd	r4, r5, [r0, #24]
 8020be6:	bd30      	pop	{r4, r5, pc}
 8020be8:	ffff0000 	.word	0xffff0000
 8020bec:	00000000 	.word	0x00000000

08020bf0 <uxr_reset_output_reliable_stream>:
 8020bf0:	8901      	ldrh	r1, [r0, #8]
 8020bf2:	b510      	push	{r4, lr}
 8020bf4:	b1b1      	cbz	r1, 8020c24 <uxr_reset_output_reliable_stream+0x34>
 8020bf6:	f04f 0e00 	mov.w	lr, #0
 8020bfa:	46f4      	mov	ip, lr
 8020bfc:	6843      	ldr	r3, [r0, #4]
 8020bfe:	f10e 0e01 	add.w	lr, lr, #1
 8020c02:	7b04      	ldrb	r4, [r0, #12]
 8020c04:	fbbc f2f1 	udiv	r2, ip, r1
 8020c08:	fbb3 f3f1 	udiv	r3, r3, r1
 8020c0c:	fb01 c212 	mls	r2, r1, r2, ip
 8020c10:	fa1f fc8e 	uxth.w	ip, lr
 8020c14:	b292      	uxth	r2, r2
 8020c16:	fb02 f303 	mul.w	r3, r2, r3
 8020c1a:	6802      	ldr	r2, [r0, #0]
 8020c1c:	50d4      	str	r4, [r2, r3]
 8020c1e:	8901      	ldrh	r1, [r0, #8]
 8020c20:	4561      	cmp	r1, ip
 8020c22:	d8eb      	bhi.n	8020bfc <uxr_reset_output_reliable_stream+0xc>
 8020c24:	4b08      	ldr	r3, [pc, #32]	@ (8020c48 <uxr_reset_output_reliable_stream+0x58>)
 8020c26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8020c2a:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8020c40 <uxr_reset_output_reliable_stream+0x50>
 8020c2e:	f8c0 300e 	str.w	r3, [r0, #14]
 8020c32:	2300      	movs	r3, #0
 8020c34:	8242      	strh	r2, [r0, #18]
 8020c36:	8403      	strh	r3, [r0, #32]
 8020c38:	ed80 7b06 	vstr	d7, [r0, #24]
 8020c3c:	bd10      	pop	{r4, pc}
 8020c3e:	bf00      	nop
 8020c40:	ffffffff 	.word	0xffffffff
 8020c44:	7fffffff 	.word	0x7fffffff
 8020c48:	ffff0000 	.word	0xffff0000

08020c4c <uxr_prepare_reliable_buffer_to_write>:
 8020c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c50:	4604      	mov	r4, r0
 8020c52:	b091      	sub	sp, #68	@ 0x44
 8020c54:	8900      	ldrh	r0, [r0, #8]
 8020c56:	468b      	mov	fp, r1
 8020c58:	89e6      	ldrh	r6, [r4, #14]
 8020c5a:	9204      	str	r2, [sp, #16]
 8020c5c:	6865      	ldr	r5, [r4, #4]
 8020c5e:	6823      	ldr	r3, [r4, #0]
 8020c60:	f894 900c 	ldrb.w	r9, [r4, #12]
 8020c64:	fbb6 f2f0 	udiv	r2, r6, r0
 8020c68:	fbb5 f5f0 	udiv	r5, r5, r0
 8020c6c:	fb00 6212 	mls	r2, r0, r2, r6
 8020c70:	1f2f      	subs	r7, r5, #4
 8020c72:	b292      	uxth	r2, r2
 8020c74:	fb05 3202 	mla	r2, r5, r2, r3
 8020c78:	1d11      	adds	r1, r2, #4
 8020c7a:	f8d2 8000 	ldr.w	r8, [r2]
 8020c7e:	9103      	str	r1, [sp, #12]
 8020c80:	2800      	cmp	r0, #0
 8020c82:	f000 814a 	beq.w	8020f1a <uxr_prepare_reliable_buffer_to_write+0x2ce>
 8020c86:	f04f 0c00 	mov.w	ip, #0
 8020c8a:	46e2      	mov	sl, ip
 8020c8c:	4661      	mov	r1, ip
 8020c8e:	f10c 0c01 	add.w	ip, ip, #1
 8020c92:	fbb1 f2f0 	udiv	r2, r1, r0
 8020c96:	fb00 1212 	mls	r2, r0, r2, r1
 8020c9a:	fa1f f18c 	uxth.w	r1, ip
 8020c9e:	b292      	uxth	r2, r2
 8020ca0:	fb05 f202 	mul.w	r2, r5, r2
 8020ca4:	589a      	ldr	r2, [r3, r2]
 8020ca6:	454a      	cmp	r2, r9
 8020ca8:	d103      	bne.n	8020cb2 <uxr_prepare_reliable_buffer_to_write+0x66>
 8020caa:	f10a 0a01 	add.w	sl, sl, #1
 8020cae:	fa1f fa8a 	uxth.w	sl, sl
 8020cb2:	4281      	cmp	r1, r0
 8020cb4:	d3eb      	bcc.n	8020c8e <uxr_prepare_reliable_buffer_to_write+0x42>
 8020cb6:	4640      	mov	r0, r8
 8020cb8:	2104      	movs	r1, #4
 8020cba:	f8cd a014 	str.w	sl, [sp, #20]
 8020cbe:	f7f3 fd85 	bl	80147cc <ucdr_alignment>
 8020cc2:	4480      	add	r8, r0
 8020cc4:	eb08 020b 	add.w	r2, r8, fp
 8020cc8:	42ba      	cmp	r2, r7
 8020cca:	f240 80ca 	bls.w	8020e62 <uxr_prepare_reliable_buffer_to_write+0x216>
 8020cce:	7b22      	ldrb	r2, [r4, #12]
 8020cd0:	445a      	add	r2, fp
 8020cd2:	42ba      	cmp	r2, r7
 8020cd4:	f240 80b2 	bls.w	8020e3c <uxr_prepare_reliable_buffer_to_write+0x1f0>
 8020cd8:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8020cdc:	b2bb      	uxth	r3, r7
 8020cde:	eba2 0209 	sub.w	r2, r2, r9
 8020ce2:	441a      	add	r2, r3
 8020ce4:	b292      	uxth	r2, r2
 8020ce6:	fb0a f902 	mul.w	r9, sl, r2
 8020cea:	9205      	str	r2, [sp, #20]
 8020cec:	45d9      	cmp	r9, fp
 8020cee:	9206      	str	r2, [sp, #24]
 8020cf0:	f0c0 80b3 	bcc.w	8020e5a <uxr_prepare_reliable_buffer_to_write+0x20e>
 8020cf4:	f108 0204 	add.w	r2, r8, #4
 8020cf8:	42ba      	cmp	r2, r7
 8020cfa:	f080 80da 	bcs.w	8020eb2 <uxr_prepare_reliable_buffer_to_write+0x266>
 8020cfe:	f1a3 0904 	sub.w	r9, r3, #4
 8020d02:	9b05      	ldr	r3, [sp, #20]
 8020d04:	eba9 0908 	sub.w	r9, r9, r8
 8020d08:	fa1f f989 	uxth.w	r9, r9
 8020d0c:	ebab 0b09 	sub.w	fp, fp, r9
 8020d10:	fbbb f2f3 	udiv	r2, fp, r3
 8020d14:	fb03 b312 	mls	r3, r3, r2, fp
 8020d18:	2b00      	cmp	r3, #0
 8020d1a:	f040 80c4 	bne.w	8020ea6 <uxr_prepare_reliable_buffer_to_write+0x25a>
 8020d1e:	b293      	uxth	r3, r2
 8020d20:	4553      	cmp	r3, sl
 8020d22:	f200 809a 	bhi.w	8020e5a <uxr_prepare_reliable_buffer_to_write+0x20e>
 8020d26:	2b00      	cmp	r3, #0
 8020d28:	f000 80f9 	beq.w	8020f1e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8020d2c:	f8cd 801c 	str.w	r8, [sp, #28]
 8020d30:	f04f 0a00 	mov.w	sl, #0
 8020d34:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8020d38:	f10d 0b20 	add.w	fp, sp, #32
 8020d3c:	9505      	str	r5, [sp, #20]
 8020d3e:	461d      	mov	r5, r3
 8020d40:	e000      	b.n	8020d44 <uxr_prepare_reliable_buffer_to_write+0xf8>
 8020d42:	46c1      	mov	r9, r8
 8020d44:	8922      	ldrh	r2, [r4, #8]
 8020d46:	4658      	mov	r0, fp
 8020d48:	6863      	ldr	r3, [r4, #4]
 8020d4a:	f10a 0a01 	add.w	sl, sl, #1
 8020d4e:	fbb6 f1f2 	udiv	r1, r6, r2
 8020d52:	fbb3 f3f2 	udiv	r3, r3, r2
 8020d56:	fb02 6111 	mls	r1, r2, r1, r6
 8020d5a:	463a      	mov	r2, r7
 8020d5c:	b289      	uxth	r1, r1
 8020d5e:	fb03 f101 	mul.w	r1, r3, r1
 8020d62:	6823      	ldr	r3, [r4, #0]
 8020d64:	3104      	adds	r1, #4
 8020d66:	4419      	add	r1, r3
 8020d68:	2300      	movs	r3, #0
 8020d6a:	f851 cc04 	ldr.w	ip, [r1, #-4]
 8020d6e:	f8cd c000 	str.w	ip, [sp]
 8020d72:	f7f3 fd15 	bl	80147a0 <ucdr_init_buffer_origin_offset>
 8020d76:	464a      	mov	r2, r9
 8020d78:	2300      	movs	r3, #0
 8020d7a:	210d      	movs	r1, #13
 8020d7c:	4658      	mov	r0, fp
 8020d7e:	f7fd fd17 	bl	801e7b0 <uxr_buffer_submessage_header>
 8020d82:	8921      	ldrh	r1, [r4, #8]
 8020d84:	6863      	ldr	r3, [r4, #4]
 8020d86:	4630      	mov	r0, r6
 8020d88:	fbb6 f2f1 	udiv	r2, r6, r1
 8020d8c:	fbb3 f3f1 	udiv	r3, r3, r1
 8020d90:	fb01 6212 	mls	r2, r1, r2, r6
 8020d94:	2101      	movs	r1, #1
 8020d96:	b292      	uxth	r2, r2
 8020d98:	fb02 f303 	mul.w	r3, r2, r3
 8020d9c:	6822      	ldr	r2, [r4, #0]
 8020d9e:	50d7      	str	r7, [r2, r3]
 8020da0:	f000 f9a4 	bl	80210ec <uxr_seq_num_add>
 8020da4:	4606      	mov	r6, r0
 8020da6:	fa1f f38a 	uxth.w	r3, sl
 8020daa:	429d      	cmp	r5, r3
 8020dac:	d8c9      	bhi.n	8020d42 <uxr_prepare_reliable_buffer_to_write+0xf6>
 8020dae:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8020db2:	9d05      	ldr	r5, [sp, #20]
 8020db4:	8920      	ldrh	r0, [r4, #8]
 8020db6:	463a      	mov	r2, r7
 8020db8:	6863      	ldr	r3, [r4, #4]
 8020dba:	fbb6 f1f0 	udiv	r1, r6, r0
 8020dbe:	fbb3 f3f0 	udiv	r3, r3, r0
 8020dc2:	fb00 6111 	mls	r1, r0, r1, r6
 8020dc6:	4658      	mov	r0, fp
 8020dc8:	b289      	uxth	r1, r1
 8020dca:	fb01 f303 	mul.w	r3, r1, r3
 8020dce:	6821      	ldr	r1, [r4, #0]
 8020dd0:	3304      	adds	r3, #4
 8020dd2:	4419      	add	r1, r3
 8020dd4:	2300      	movs	r3, #0
 8020dd6:	f851 7c04 	ldr.w	r7, [r1, #-4]
 8020dda:	9700      	str	r7, [sp, #0]
 8020ddc:	f7f3 fce0 	bl	80147a0 <ucdr_init_buffer_origin_offset>
 8020de0:	9f06      	ldr	r7, [sp, #24]
 8020de2:	4658      	mov	r0, fp
 8020de4:	2302      	movs	r3, #2
 8020de6:	b2ba      	uxth	r2, r7
 8020de8:	210d      	movs	r1, #13
 8020dea:	f7fd fce1 	bl	801e7b0 <uxr_buffer_submessage_header>
 8020dee:	f108 0104 	add.w	r1, r8, #4
 8020df2:	9b03      	ldr	r3, [sp, #12]
 8020df4:	f1a5 0208 	sub.w	r2, r5, #8
 8020df8:	8925      	ldrh	r5, [r4, #8]
 8020dfa:	440b      	add	r3, r1
 8020dfc:	eba2 0208 	sub.w	r2, r2, r8
 8020e00:	fbb6 f0f5 	udiv	r0, r6, r5
 8020e04:	4619      	mov	r1, r3
 8020e06:	6863      	ldr	r3, [r4, #4]
 8020e08:	fb05 6010 	mls	r0, r5, r0, r6
 8020e0c:	fbb3 f3f5 	udiv	r3, r3, r5
 8020e10:	b280      	uxth	r0, r0
 8020e12:	6825      	ldr	r5, [r4, #0]
 8020e14:	fb00 f303 	mul.w	r3, r0, r3
 8020e18:	7b20      	ldrb	r0, [r4, #12]
 8020e1a:	3004      	adds	r0, #4
 8020e1c:	4438      	add	r0, r7
 8020e1e:	50e8      	str	r0, [r5, r3]
 8020e20:	9d04      	ldr	r5, [sp, #16]
 8020e22:	4628      	mov	r0, r5
 8020e24:	f7f3 fcce 	bl	80147c4 <ucdr_init_buffer>
 8020e28:	4628      	mov	r0, r5
 8020e2a:	4622      	mov	r2, r4
 8020e2c:	493d      	ldr	r1, [pc, #244]	@ (8020f24 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8020e2e:	f7f3 fc9d 	bl	801476c <ucdr_set_on_full_buffer_callback>
 8020e32:	2001      	movs	r0, #1
 8020e34:	81e6      	strh	r6, [r4, #14]
 8020e36:	b011      	add	sp, #68	@ 0x44
 8020e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e3c:	2101      	movs	r1, #1
 8020e3e:	89e0      	ldrh	r0, [r4, #14]
 8020e40:	f000 f954 	bl	80210ec <uxr_seq_num_add>
 8020e44:	4605      	mov	r5, r0
 8020e46:	8921      	ldrh	r1, [r4, #8]
 8020e48:	8a60      	ldrh	r0, [r4, #18]
 8020e4a:	f000 f94f 	bl	80210ec <uxr_seq_num_add>
 8020e4e:	4601      	mov	r1, r0
 8020e50:	4628      	mov	r0, r5
 8020e52:	f000 f953 	bl	80210fc <uxr_seq_num_cmp>
 8020e56:	2800      	cmp	r0, #0
 8020e58:	dd44      	ble.n	8020ee4 <uxr_prepare_reliable_buffer_to_write+0x298>
 8020e5a:	2000      	movs	r0, #0
 8020e5c:	b011      	add	sp, #68	@ 0x44
 8020e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e62:	8921      	ldrh	r1, [r4, #8]
 8020e64:	8a60      	ldrh	r0, [r4, #18]
 8020e66:	9205      	str	r2, [sp, #20]
 8020e68:	f000 f940 	bl	80210ec <uxr_seq_num_add>
 8020e6c:	4601      	mov	r1, r0
 8020e6e:	4630      	mov	r0, r6
 8020e70:	f000 f944 	bl	80210fc <uxr_seq_num_cmp>
 8020e74:	2800      	cmp	r0, #0
 8020e76:	9a05      	ldr	r2, [sp, #20]
 8020e78:	dcef      	bgt.n	8020e5a <uxr_prepare_reliable_buffer_to_write+0x20e>
 8020e7a:	8925      	ldrh	r5, [r4, #8]
 8020e7c:	e9d4 7300 	ldrd	r7, r3, [r4]
 8020e80:	fbb6 f4f5 	udiv	r4, r6, r5
 8020e84:	fbb3 f3f5 	udiv	r3, r3, r5
 8020e88:	fb05 6414 	mls	r4, r5, r4, r6
 8020e8c:	b2a4      	uxth	r4, r4
 8020e8e:	fb04 f303 	mul.w	r3, r4, r3
 8020e92:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8020e96:	50fa      	str	r2, [r7, r3]
 8020e98:	2300      	movs	r3, #0
 8020e9a:	f8cd 8000 	str.w	r8, [sp]
 8020e9e:	f7f3 fc7f 	bl	80147a0 <ucdr_init_buffer_origin_offset>
 8020ea2:	2001      	movs	r0, #1
 8020ea4:	e7da      	b.n	8020e5c <uxr_prepare_reliable_buffer_to_write+0x210>
 8020ea6:	3201      	adds	r2, #1
 8020ea8:	9306      	str	r3, [sp, #24]
 8020eaa:	b293      	uxth	r3, r2
 8020eac:	4553      	cmp	r3, sl
 8020eae:	d8d4      	bhi.n	8020e5a <uxr_prepare_reliable_buffer_to_write+0x20e>
 8020eb0:	e739      	b.n	8020d26 <uxr_prepare_reliable_buffer_to_write+0xda>
 8020eb2:	4630      	mov	r0, r6
 8020eb4:	2101      	movs	r1, #1
 8020eb6:	9307      	str	r3, [sp, #28]
 8020eb8:	f000 f918 	bl	80210ec <uxr_seq_num_add>
 8020ebc:	4606      	mov	r6, r0
 8020ebe:	8920      	ldrh	r0, [r4, #8]
 8020ec0:	6862      	ldr	r2, [r4, #4]
 8020ec2:	fbb6 f1f0 	udiv	r1, r6, r0
 8020ec6:	fbb2 f2f0 	udiv	r2, r2, r0
 8020eca:	fb00 6111 	mls	r1, r0, r1, r6
 8020ece:	b289      	uxth	r1, r1
 8020ed0:	fb01 f202 	mul.w	r2, r1, r2
 8020ed4:	6821      	ldr	r1, [r4, #0]
 8020ed6:	3204      	adds	r2, #4
 8020ed8:	188b      	adds	r3, r1, r2
 8020eda:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8020ede:	9303      	str	r3, [sp, #12]
 8020ee0:	9b07      	ldr	r3, [sp, #28]
 8020ee2:	e70c      	b.n	8020cfe <uxr_prepare_reliable_buffer_to_write+0xb2>
 8020ee4:	8921      	ldrh	r1, [r4, #8]
 8020ee6:	6863      	ldr	r3, [r4, #4]
 8020ee8:	9804      	ldr	r0, [sp, #16]
 8020eea:	fbb5 f2f1 	udiv	r2, r5, r1
 8020eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8020ef2:	fb01 5212 	mls	r2, r1, r2, r5
 8020ef6:	6821      	ldr	r1, [r4, #0]
 8020ef8:	b292      	uxth	r2, r2
 8020efa:	fb02 f303 	mul.w	r3, r2, r3
 8020efe:	7b22      	ldrb	r2, [r4, #12]
 8020f00:	3304      	adds	r3, #4
 8020f02:	445a      	add	r2, fp
 8020f04:	4419      	add	r1, r3
 8020f06:	f841 2c04 	str.w	r2, [r1, #-4]
 8020f0a:	7b23      	ldrb	r3, [r4, #12]
 8020f0c:	9300      	str	r3, [sp, #0]
 8020f0e:	2300      	movs	r3, #0
 8020f10:	f7f3 fc46 	bl	80147a0 <ucdr_init_buffer_origin_offset>
 8020f14:	2001      	movs	r0, #1
 8020f16:	81e5      	strh	r5, [r4, #14]
 8020f18:	e7a0      	b.n	8020e5c <uxr_prepare_reliable_buffer_to_write+0x210>
 8020f1a:	4682      	mov	sl, r0
 8020f1c:	e6cb      	b.n	8020cb6 <uxr_prepare_reliable_buffer_to_write+0x6a>
 8020f1e:	f10d 0b20 	add.w	fp, sp, #32
 8020f22:	e747      	b.n	8020db4 <uxr_prepare_reliable_buffer_to_write+0x168>
 8020f24:	08020b21 	.word	0x08020b21

08020f28 <uxr_prepare_next_reliable_buffer_to_send>:
 8020f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020f2a:	4604      	mov	r4, r0
 8020f2c:	461d      	mov	r5, r3
 8020f2e:	460f      	mov	r7, r1
 8020f30:	8a00      	ldrh	r0, [r0, #16]
 8020f32:	2101      	movs	r1, #1
 8020f34:	4616      	mov	r6, r2
 8020f36:	f000 f8d9 	bl	80210ec <uxr_seq_num_add>
 8020f3a:	8028      	strh	r0, [r5, #0]
 8020f3c:	8922      	ldrh	r2, [r4, #8]
 8020f3e:	6863      	ldr	r3, [r4, #4]
 8020f40:	fbb0 f1f2 	udiv	r1, r0, r2
 8020f44:	fbb3 f3f2 	udiv	r3, r3, r2
 8020f48:	fb02 0c11 	mls	ip, r2, r1, r0
 8020f4c:	89e1      	ldrh	r1, [r4, #14]
 8020f4e:	fa1f fc8c 	uxth.w	ip, ip
 8020f52:	fb0c fc03 	mul.w	ip, ip, r3
 8020f56:	6823      	ldr	r3, [r4, #0]
 8020f58:	f10c 0c04 	add.w	ip, ip, #4
 8020f5c:	4463      	add	r3, ip
 8020f5e:	603b      	str	r3, [r7, #0]
 8020f60:	6823      	ldr	r3, [r4, #0]
 8020f62:	449c      	add	ip, r3
 8020f64:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8020f68:	6033      	str	r3, [r6, #0]
 8020f6a:	f000 f8c7 	bl	80210fc <uxr_seq_num_cmp>
 8020f6e:	2800      	cmp	r0, #0
 8020f70:	dd01      	ble.n	8020f76 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8020f72:	2000      	movs	r0, #0
 8020f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020f76:	7b23      	ldrb	r3, [r4, #12]
 8020f78:	6832      	ldr	r2, [r6, #0]
 8020f7a:	429a      	cmp	r2, r3
 8020f7c:	d9f9      	bls.n	8020f72 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8020f7e:	8a61      	ldrh	r1, [r4, #18]
 8020f80:	8a20      	ldrh	r0, [r4, #16]
 8020f82:	f000 f8b7 	bl	80210f4 <uxr_seq_num_sub>
 8020f86:	8923      	ldrh	r3, [r4, #8]
 8020f88:	4283      	cmp	r3, r0
 8020f8a:	d0f2      	beq.n	8020f72 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8020f8c:	8828      	ldrh	r0, [r5, #0]
 8020f8e:	89e3      	ldrh	r3, [r4, #14]
 8020f90:	8220      	strh	r0, [r4, #16]
 8020f92:	4298      	cmp	r0, r3
 8020f94:	d001      	beq.n	8020f9a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8020f96:	2001      	movs	r0, #1
 8020f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020f9a:	2101      	movs	r1, #1
 8020f9c:	f000 f8a6 	bl	80210ec <uxr_seq_num_add>
 8020fa0:	4603      	mov	r3, r0
 8020fa2:	2001      	movs	r0, #1
 8020fa4:	81e3      	strh	r3, [r4, #14]
 8020fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08020fa8 <uxr_update_output_stream_heartbeat_timestamp>:
 8020fa8:	b570      	push	{r4, r5, r6, lr}
 8020faa:	8a01      	ldrh	r1, [r0, #16]
 8020fac:	4604      	mov	r4, r0
 8020fae:	8a40      	ldrh	r0, [r0, #18]
 8020fb0:	4615      	mov	r5, r2
 8020fb2:	461e      	mov	r6, r3
 8020fb4:	f000 f8a2 	bl	80210fc <uxr_seq_num_cmp>
 8020fb8:	2800      	cmp	r0, #0
 8020fba:	db07      	blt.n	8020fcc <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8020fbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8020fc0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8020fc4:	2000      	movs	r0, #0
 8020fc6:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8020fca:	bd70      	pop	{r4, r5, r6, pc}
 8020fcc:	f894 0020 	ldrb.w	r0, [r4, #32]
 8020fd0:	b940      	cbnz	r0, 8020fe4 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8020fd2:	2301      	movs	r3, #1
 8020fd4:	f884 3020 	strb.w	r3, [r4, #32]
 8020fd8:	3564      	adds	r5, #100	@ 0x64
 8020fda:	f146 0600 	adc.w	r6, r6, #0
 8020fde:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8020fe2:	bd70      	pop	{r4, r5, r6, pc}
 8020fe4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8020fe8:	4295      	cmp	r5, r2
 8020fea:	eb76 0303 	sbcs.w	r3, r6, r3
 8020fee:	db04      	blt.n	8020ffa <uxr_update_output_stream_heartbeat_timestamp+0x52>
 8020ff0:	1c43      	adds	r3, r0, #1
 8020ff2:	2001      	movs	r0, #1
 8020ff4:	f884 3020 	strb.w	r3, [r4, #32]
 8020ff8:	e7ee      	b.n	8020fd8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8020ffa:	2000      	movs	r0, #0
 8020ffc:	e7ec      	b.n	8020fd8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8020ffe:	bf00      	nop

08021000 <uxr_begin_output_nack_buffer_it>:
 8021000:	8a40      	ldrh	r0, [r0, #18]
 8021002:	4770      	bx	lr

08021004 <uxr_next_reliable_nack_buffer_to_send>:
 8021004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021008:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 802100c:	b197      	cbz	r7, 8021034 <uxr_next_reliable_nack_buffer_to_send+0x30>
 802100e:	4680      	mov	r8, r0
 8021010:	460d      	mov	r5, r1
 8021012:	4616      	mov	r6, r2
 8021014:	461c      	mov	r4, r3
 8021016:	8818      	ldrh	r0, [r3, #0]
 8021018:	2101      	movs	r1, #1
 802101a:	f000 f867 	bl	80210ec <uxr_seq_num_add>
 802101e:	8020      	strh	r0, [r4, #0]
 8021020:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8021024:	f000 f86a 	bl	80210fc <uxr_seq_num_cmp>
 8021028:	2800      	cmp	r0, #0
 802102a:	dd06      	ble.n	802103a <uxr_next_reliable_nack_buffer_to_send+0x36>
 802102c:	2300      	movs	r3, #0
 802102e:	461f      	mov	r7, r3
 8021030:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 8021034:	4638      	mov	r0, r7
 8021036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802103a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 802103e:	8820      	ldrh	r0, [r4, #0]
 8021040:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8021044:	fbb0 f3f2 	udiv	r3, r0, r2
 8021048:	fbb1 fcf2 	udiv	ip, r1, r2
 802104c:	fb02 0313 	mls	r3, r2, r3, r0
 8021050:	b29b      	uxth	r3, r3
 8021052:	fb03 fc0c 	mul.w	ip, r3, ip
 8021056:	f8d8 3000 	ldr.w	r3, [r8]
 802105a:	f10c 0c04 	add.w	ip, ip, #4
 802105e:	4463      	add	r3, ip
 8021060:	602b      	str	r3, [r5, #0]
 8021062:	f8d8 3000 	ldr.w	r3, [r8]
 8021066:	4463      	add	r3, ip
 8021068:	f853 3c04 	ldr.w	r3, [r3, #-4]
 802106c:	6033      	str	r3, [r6, #0]
 802106e:	f898 200c 	ldrb.w	r2, [r8, #12]
 8021072:	429a      	cmp	r2, r3
 8021074:	d0d0      	beq.n	8021018 <uxr_next_reliable_nack_buffer_to_send+0x14>
 8021076:	e7dd      	b.n	8021034 <uxr_next_reliable_nack_buffer_to_send+0x30>

08021078 <uxr_process_acknack>:
 8021078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802107a:	4604      	mov	r4, r0
 802107c:	460e      	mov	r6, r1
 802107e:	4610      	mov	r0, r2
 8021080:	2101      	movs	r1, #1
 8021082:	f000 f837 	bl	80210f4 <uxr_seq_num_sub>
 8021086:	8a61      	ldrh	r1, [r4, #18]
 8021088:	f000 f834 	bl	80210f4 <uxr_seq_num_sub>
 802108c:	b1c8      	cbz	r0, 80210c2 <uxr_process_acknack+0x4a>
 802108e:	4605      	mov	r5, r0
 8021090:	2700      	movs	r7, #0
 8021092:	2101      	movs	r1, #1
 8021094:	8a60      	ldrh	r0, [r4, #18]
 8021096:	f000 f829 	bl	80210ec <uxr_seq_num_add>
 802109a:	8923      	ldrh	r3, [r4, #8]
 802109c:	6862      	ldr	r2, [r4, #4]
 802109e:	3701      	adds	r7, #1
 80210a0:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80210a4:	6821      	ldr	r1, [r4, #0]
 80210a6:	42bd      	cmp	r5, r7
 80210a8:	8260      	strh	r0, [r4, #18]
 80210aa:	fbb0 fef3 	udiv	lr, r0, r3
 80210ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80210b2:	fb03 031e 	mls	r3, r3, lr, r0
 80210b6:	b29b      	uxth	r3, r3
 80210b8:	fb02 f303 	mul.w	r3, r2, r3
 80210bc:	f841 c003 	str.w	ip, [r1, r3]
 80210c0:	d1e7      	bne.n	8021092 <uxr_process_acknack+0x1a>
 80210c2:	3e00      	subs	r6, #0
 80210c4:	f04f 0300 	mov.w	r3, #0
 80210c8:	bf18      	it	ne
 80210ca:	2601      	movne	r6, #1
 80210cc:	f884 3020 	strb.w	r3, [r4, #32]
 80210d0:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80210d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80210d6:	bf00      	nop

080210d8 <uxr_is_output_up_to_date>:
 80210d8:	8a01      	ldrh	r1, [r0, #16]
 80210da:	8a40      	ldrh	r0, [r0, #18]
 80210dc:	b508      	push	{r3, lr}
 80210de:	f000 f80d 	bl	80210fc <uxr_seq_num_cmp>
 80210e2:	fab0 f080 	clz	r0, r0
 80210e6:	0940      	lsrs	r0, r0, #5
 80210e8:	bd08      	pop	{r3, pc}
 80210ea:	bf00      	nop

080210ec <uxr_seq_num_add>:
 80210ec:	4408      	add	r0, r1
 80210ee:	b280      	uxth	r0, r0
 80210f0:	4770      	bx	lr
 80210f2:	bf00      	nop

080210f4 <uxr_seq_num_sub>:
 80210f4:	1a40      	subs	r0, r0, r1
 80210f6:	b280      	uxth	r0, r0
 80210f8:	4770      	bx	lr
 80210fa:	bf00      	nop

080210fc <uxr_seq_num_cmp>:
 80210fc:	4288      	cmp	r0, r1
 80210fe:	d011      	beq.n	8021124 <uxr_seq_num_cmp+0x28>
 8021100:	d309      	bcc.n	8021116 <uxr_seq_num_cmp+0x1a>
 8021102:	4288      	cmp	r0, r1
 8021104:	d910      	bls.n	8021128 <uxr_seq_num_cmp+0x2c>
 8021106:	1a40      	subs	r0, r0, r1
 8021108:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 802110c:	bfd4      	ite	le
 802110e:	2001      	movle	r0, #1
 8021110:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8021114:	4770      	bx	lr
 8021116:	1a0b      	subs	r3, r1, r0
 8021118:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 802111c:	daf1      	bge.n	8021102 <uxr_seq_num_cmp+0x6>
 802111e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021122:	4770      	bx	lr
 8021124:	2000      	movs	r0, #0
 8021126:	4770      	bx	lr
 8021128:	2001      	movs	r0, #1
 802112a:	4770      	bx	lr

0802112c <calloc>:
 802112c:	4b02      	ldr	r3, [pc, #8]	@ (8021138 <calloc+0xc>)
 802112e:	460a      	mov	r2, r1
 8021130:	4601      	mov	r1, r0
 8021132:	6818      	ldr	r0, [r3, #0]
 8021134:	f000 b802 	b.w	802113c <_calloc_r>
 8021138:	240013a0 	.word	0x240013a0

0802113c <_calloc_r>:
 802113c:	b570      	push	{r4, r5, r6, lr}
 802113e:	fba1 5402 	umull	r5, r4, r1, r2
 8021142:	b93c      	cbnz	r4, 8021154 <_calloc_r+0x18>
 8021144:	4629      	mov	r1, r5
 8021146:	f000 f899 	bl	802127c <_malloc_r>
 802114a:	4606      	mov	r6, r0
 802114c:	b928      	cbnz	r0, 802115a <_calloc_r+0x1e>
 802114e:	2600      	movs	r6, #0
 8021150:	4630      	mov	r0, r6
 8021152:	bd70      	pop	{r4, r5, r6, pc}
 8021154:	220c      	movs	r2, #12
 8021156:	6002      	str	r2, [r0, #0]
 8021158:	e7f9      	b.n	802114e <_calloc_r+0x12>
 802115a:	462a      	mov	r2, r5
 802115c:	4621      	mov	r1, r4
 802115e:	f000 fcbd 	bl	8021adc <memset>
 8021162:	e7f5      	b.n	8021150 <_calloc_r+0x14>

08021164 <exit>:
 8021164:	b508      	push	{r3, lr}
 8021166:	4b06      	ldr	r3, [pc, #24]	@ (8021180 <exit+0x1c>)
 8021168:	4604      	mov	r4, r0
 802116a:	b113      	cbz	r3, 8021172 <exit+0xe>
 802116c:	2100      	movs	r1, #0
 802116e:	f3af 8000 	nop.w
 8021172:	4b04      	ldr	r3, [pc, #16]	@ (8021184 <exit+0x20>)
 8021174:	681b      	ldr	r3, [r3, #0]
 8021176:	b103      	cbz	r3, 802117a <exit+0x16>
 8021178:	4798      	blx	r3
 802117a:	4620      	mov	r0, r4
 802117c:	f7e1 f8fc 	bl	8002378 <_exit>
 8021180:	00000000 	.word	0x00000000
 8021184:	24069784 	.word	0x24069784

08021188 <getenv>:
 8021188:	b507      	push	{r0, r1, r2, lr}
 802118a:	4b04      	ldr	r3, [pc, #16]	@ (802119c <getenv+0x14>)
 802118c:	4601      	mov	r1, r0
 802118e:	aa01      	add	r2, sp, #4
 8021190:	6818      	ldr	r0, [r3, #0]
 8021192:	f000 f805 	bl	80211a0 <_findenv_r>
 8021196:	b003      	add	sp, #12
 8021198:	f85d fb04 	ldr.w	pc, [sp], #4
 802119c:	240013a0 	.word	0x240013a0

080211a0 <_findenv_r>:
 80211a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211a4:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8021214 <_findenv_r+0x74>
 80211a8:	4606      	mov	r6, r0
 80211aa:	4689      	mov	r9, r1
 80211ac:	4617      	mov	r7, r2
 80211ae:	f000 fde1 	bl	8021d74 <__env_lock>
 80211b2:	f8da 4000 	ldr.w	r4, [sl]
 80211b6:	b134      	cbz	r4, 80211c6 <_findenv_r+0x26>
 80211b8:	464b      	mov	r3, r9
 80211ba:	4698      	mov	r8, r3
 80211bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80211c0:	b13a      	cbz	r2, 80211d2 <_findenv_r+0x32>
 80211c2:	2a3d      	cmp	r2, #61	@ 0x3d
 80211c4:	d1f9      	bne.n	80211ba <_findenv_r+0x1a>
 80211c6:	4630      	mov	r0, r6
 80211c8:	f000 fdda 	bl	8021d80 <__env_unlock>
 80211cc:	2000      	movs	r0, #0
 80211ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80211d2:	eba8 0809 	sub.w	r8, r8, r9
 80211d6:	46a3      	mov	fp, r4
 80211d8:	f854 0b04 	ldr.w	r0, [r4], #4
 80211dc:	2800      	cmp	r0, #0
 80211de:	d0f2      	beq.n	80211c6 <_findenv_r+0x26>
 80211e0:	4642      	mov	r2, r8
 80211e2:	4649      	mov	r1, r9
 80211e4:	f000 fc8f 	bl	8021b06 <strncmp>
 80211e8:	2800      	cmp	r0, #0
 80211ea:	d1f4      	bne.n	80211d6 <_findenv_r+0x36>
 80211ec:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80211f0:	eb03 0508 	add.w	r5, r3, r8
 80211f4:	f813 3008 	ldrb.w	r3, [r3, r8]
 80211f8:	2b3d      	cmp	r3, #61	@ 0x3d
 80211fa:	d1ec      	bne.n	80211d6 <_findenv_r+0x36>
 80211fc:	f8da 3000 	ldr.w	r3, [sl]
 8021200:	ebab 0303 	sub.w	r3, fp, r3
 8021204:	109b      	asrs	r3, r3, #2
 8021206:	4630      	mov	r0, r6
 8021208:	603b      	str	r3, [r7, #0]
 802120a:	f000 fdb9 	bl	8021d80 <__env_unlock>
 802120e:	1c68      	adds	r0, r5, #1
 8021210:	e7dd      	b.n	80211ce <_findenv_r+0x2e>
 8021212:	bf00      	nop
 8021214:	24000000 	.word	0x24000000

08021218 <malloc>:
 8021218:	4b02      	ldr	r3, [pc, #8]	@ (8021224 <malloc+0xc>)
 802121a:	4601      	mov	r1, r0
 802121c:	6818      	ldr	r0, [r3, #0]
 802121e:	f000 b82d 	b.w	802127c <_malloc_r>
 8021222:	bf00      	nop
 8021224:	240013a0 	.word	0x240013a0

08021228 <free>:
 8021228:	4b02      	ldr	r3, [pc, #8]	@ (8021234 <free+0xc>)
 802122a:	4601      	mov	r1, r0
 802122c:	6818      	ldr	r0, [r3, #0]
 802122e:	f000 bdad 	b.w	8021d8c <_free_r>
 8021232:	bf00      	nop
 8021234:	240013a0 	.word	0x240013a0

08021238 <sbrk_aligned>:
 8021238:	b570      	push	{r4, r5, r6, lr}
 802123a:	4e0f      	ldr	r6, [pc, #60]	@ (8021278 <sbrk_aligned+0x40>)
 802123c:	460c      	mov	r4, r1
 802123e:	6831      	ldr	r1, [r6, #0]
 8021240:	4605      	mov	r5, r0
 8021242:	b911      	cbnz	r1, 802124a <sbrk_aligned+0x12>
 8021244:	f000 fd12 	bl	8021c6c <_sbrk_r>
 8021248:	6030      	str	r0, [r6, #0]
 802124a:	4621      	mov	r1, r4
 802124c:	4628      	mov	r0, r5
 802124e:	f000 fd0d 	bl	8021c6c <_sbrk_r>
 8021252:	1c43      	adds	r3, r0, #1
 8021254:	d103      	bne.n	802125e <sbrk_aligned+0x26>
 8021256:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 802125a:	4620      	mov	r0, r4
 802125c:	bd70      	pop	{r4, r5, r6, pc}
 802125e:	1cc4      	adds	r4, r0, #3
 8021260:	f024 0403 	bic.w	r4, r4, #3
 8021264:	42a0      	cmp	r0, r4
 8021266:	d0f8      	beq.n	802125a <sbrk_aligned+0x22>
 8021268:	1a21      	subs	r1, r4, r0
 802126a:	4628      	mov	r0, r5
 802126c:	f000 fcfe 	bl	8021c6c <_sbrk_r>
 8021270:	3001      	adds	r0, #1
 8021272:	d1f2      	bne.n	802125a <sbrk_aligned+0x22>
 8021274:	e7ef      	b.n	8021256 <sbrk_aligned+0x1e>
 8021276:	bf00      	nop
 8021278:	24069644 	.word	0x24069644

0802127c <_malloc_r>:
 802127c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021280:	1ccd      	adds	r5, r1, #3
 8021282:	f025 0503 	bic.w	r5, r5, #3
 8021286:	3508      	adds	r5, #8
 8021288:	2d0c      	cmp	r5, #12
 802128a:	bf38      	it	cc
 802128c:	250c      	movcc	r5, #12
 802128e:	2d00      	cmp	r5, #0
 8021290:	4606      	mov	r6, r0
 8021292:	db01      	blt.n	8021298 <_malloc_r+0x1c>
 8021294:	42a9      	cmp	r1, r5
 8021296:	d904      	bls.n	80212a2 <_malloc_r+0x26>
 8021298:	230c      	movs	r3, #12
 802129a:	6033      	str	r3, [r6, #0]
 802129c:	2000      	movs	r0, #0
 802129e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80212a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8021378 <_malloc_r+0xfc>
 80212a6:	f000 f869 	bl	802137c <__malloc_lock>
 80212aa:	f8d8 3000 	ldr.w	r3, [r8]
 80212ae:	461c      	mov	r4, r3
 80212b0:	bb44      	cbnz	r4, 8021304 <_malloc_r+0x88>
 80212b2:	4629      	mov	r1, r5
 80212b4:	4630      	mov	r0, r6
 80212b6:	f7ff ffbf 	bl	8021238 <sbrk_aligned>
 80212ba:	1c43      	adds	r3, r0, #1
 80212bc:	4604      	mov	r4, r0
 80212be:	d158      	bne.n	8021372 <_malloc_r+0xf6>
 80212c0:	f8d8 4000 	ldr.w	r4, [r8]
 80212c4:	4627      	mov	r7, r4
 80212c6:	2f00      	cmp	r7, #0
 80212c8:	d143      	bne.n	8021352 <_malloc_r+0xd6>
 80212ca:	2c00      	cmp	r4, #0
 80212cc:	d04b      	beq.n	8021366 <_malloc_r+0xea>
 80212ce:	6823      	ldr	r3, [r4, #0]
 80212d0:	4639      	mov	r1, r7
 80212d2:	4630      	mov	r0, r6
 80212d4:	eb04 0903 	add.w	r9, r4, r3
 80212d8:	f000 fcc8 	bl	8021c6c <_sbrk_r>
 80212dc:	4581      	cmp	r9, r0
 80212de:	d142      	bne.n	8021366 <_malloc_r+0xea>
 80212e0:	6821      	ldr	r1, [r4, #0]
 80212e2:	1a6d      	subs	r5, r5, r1
 80212e4:	4629      	mov	r1, r5
 80212e6:	4630      	mov	r0, r6
 80212e8:	f7ff ffa6 	bl	8021238 <sbrk_aligned>
 80212ec:	3001      	adds	r0, #1
 80212ee:	d03a      	beq.n	8021366 <_malloc_r+0xea>
 80212f0:	6823      	ldr	r3, [r4, #0]
 80212f2:	442b      	add	r3, r5
 80212f4:	6023      	str	r3, [r4, #0]
 80212f6:	f8d8 3000 	ldr.w	r3, [r8]
 80212fa:	685a      	ldr	r2, [r3, #4]
 80212fc:	bb62      	cbnz	r2, 8021358 <_malloc_r+0xdc>
 80212fe:	f8c8 7000 	str.w	r7, [r8]
 8021302:	e00f      	b.n	8021324 <_malloc_r+0xa8>
 8021304:	6822      	ldr	r2, [r4, #0]
 8021306:	1b52      	subs	r2, r2, r5
 8021308:	d420      	bmi.n	802134c <_malloc_r+0xd0>
 802130a:	2a0b      	cmp	r2, #11
 802130c:	d917      	bls.n	802133e <_malloc_r+0xc2>
 802130e:	1961      	adds	r1, r4, r5
 8021310:	42a3      	cmp	r3, r4
 8021312:	6025      	str	r5, [r4, #0]
 8021314:	bf18      	it	ne
 8021316:	6059      	strne	r1, [r3, #4]
 8021318:	6863      	ldr	r3, [r4, #4]
 802131a:	bf08      	it	eq
 802131c:	f8c8 1000 	streq.w	r1, [r8]
 8021320:	5162      	str	r2, [r4, r5]
 8021322:	604b      	str	r3, [r1, #4]
 8021324:	4630      	mov	r0, r6
 8021326:	f000 f82f 	bl	8021388 <__malloc_unlock>
 802132a:	f104 000b 	add.w	r0, r4, #11
 802132e:	1d23      	adds	r3, r4, #4
 8021330:	f020 0007 	bic.w	r0, r0, #7
 8021334:	1ac2      	subs	r2, r0, r3
 8021336:	bf1c      	itt	ne
 8021338:	1a1b      	subne	r3, r3, r0
 802133a:	50a3      	strne	r3, [r4, r2]
 802133c:	e7af      	b.n	802129e <_malloc_r+0x22>
 802133e:	6862      	ldr	r2, [r4, #4]
 8021340:	42a3      	cmp	r3, r4
 8021342:	bf0c      	ite	eq
 8021344:	f8c8 2000 	streq.w	r2, [r8]
 8021348:	605a      	strne	r2, [r3, #4]
 802134a:	e7eb      	b.n	8021324 <_malloc_r+0xa8>
 802134c:	4623      	mov	r3, r4
 802134e:	6864      	ldr	r4, [r4, #4]
 8021350:	e7ae      	b.n	80212b0 <_malloc_r+0x34>
 8021352:	463c      	mov	r4, r7
 8021354:	687f      	ldr	r7, [r7, #4]
 8021356:	e7b6      	b.n	80212c6 <_malloc_r+0x4a>
 8021358:	461a      	mov	r2, r3
 802135a:	685b      	ldr	r3, [r3, #4]
 802135c:	42a3      	cmp	r3, r4
 802135e:	d1fb      	bne.n	8021358 <_malloc_r+0xdc>
 8021360:	2300      	movs	r3, #0
 8021362:	6053      	str	r3, [r2, #4]
 8021364:	e7de      	b.n	8021324 <_malloc_r+0xa8>
 8021366:	230c      	movs	r3, #12
 8021368:	6033      	str	r3, [r6, #0]
 802136a:	4630      	mov	r0, r6
 802136c:	f000 f80c 	bl	8021388 <__malloc_unlock>
 8021370:	e794      	b.n	802129c <_malloc_r+0x20>
 8021372:	6005      	str	r5, [r0, #0]
 8021374:	e7d6      	b.n	8021324 <_malloc_r+0xa8>
 8021376:	bf00      	nop
 8021378:	24069648 	.word	0x24069648

0802137c <__malloc_lock>:
 802137c:	4801      	ldr	r0, [pc, #4]	@ (8021384 <__malloc_lock+0x8>)
 802137e:	f000 bcc2 	b.w	8021d06 <__retarget_lock_acquire_recursive>
 8021382:	bf00      	nop
 8021384:	2406978d 	.word	0x2406978d

08021388 <__malloc_unlock>:
 8021388:	4801      	ldr	r0, [pc, #4]	@ (8021390 <__malloc_unlock+0x8>)
 802138a:	f000 bcbd 	b.w	8021d08 <__retarget_lock_release_recursive>
 802138e:	bf00      	nop
 8021390:	2406978d 	.word	0x2406978d

08021394 <srand>:
 8021394:	b538      	push	{r3, r4, r5, lr}
 8021396:	4b10      	ldr	r3, [pc, #64]	@ (80213d8 <srand+0x44>)
 8021398:	681d      	ldr	r5, [r3, #0]
 802139a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 802139c:	4604      	mov	r4, r0
 802139e:	b9b3      	cbnz	r3, 80213ce <srand+0x3a>
 80213a0:	2018      	movs	r0, #24
 80213a2:	f7ff ff39 	bl	8021218 <malloc>
 80213a6:	4602      	mov	r2, r0
 80213a8:	6328      	str	r0, [r5, #48]	@ 0x30
 80213aa:	b920      	cbnz	r0, 80213b6 <srand+0x22>
 80213ac:	4b0b      	ldr	r3, [pc, #44]	@ (80213dc <srand+0x48>)
 80213ae:	480c      	ldr	r0, [pc, #48]	@ (80213e0 <srand+0x4c>)
 80213b0:	2146      	movs	r1, #70	@ 0x46
 80213b2:	f000 fcc1 	bl	8021d38 <__assert_func>
 80213b6:	490b      	ldr	r1, [pc, #44]	@ (80213e4 <srand+0x50>)
 80213b8:	4b0b      	ldr	r3, [pc, #44]	@ (80213e8 <srand+0x54>)
 80213ba:	e9c0 1300 	strd	r1, r3, [r0]
 80213be:	4b0b      	ldr	r3, [pc, #44]	@ (80213ec <srand+0x58>)
 80213c0:	6083      	str	r3, [r0, #8]
 80213c2:	230b      	movs	r3, #11
 80213c4:	8183      	strh	r3, [r0, #12]
 80213c6:	2100      	movs	r1, #0
 80213c8:	2001      	movs	r0, #1
 80213ca:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80213ce:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80213d0:	2200      	movs	r2, #0
 80213d2:	611c      	str	r4, [r3, #16]
 80213d4:	615a      	str	r2, [r3, #20]
 80213d6:	bd38      	pop	{r3, r4, r5, pc}
 80213d8:	240013a0 	.word	0x240013a0
 80213dc:	080250ee 	.word	0x080250ee
 80213e0:	08025105 	.word	0x08025105
 80213e4:	abcd330e 	.word	0xabcd330e
 80213e8:	e66d1234 	.word	0xe66d1234
 80213ec:	0005deec 	.word	0x0005deec

080213f0 <rand>:
 80213f0:	4b16      	ldr	r3, [pc, #88]	@ (802144c <rand+0x5c>)
 80213f2:	b510      	push	{r4, lr}
 80213f4:	681c      	ldr	r4, [r3, #0]
 80213f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80213f8:	b9b3      	cbnz	r3, 8021428 <rand+0x38>
 80213fa:	2018      	movs	r0, #24
 80213fc:	f7ff ff0c 	bl	8021218 <malloc>
 8021400:	4602      	mov	r2, r0
 8021402:	6320      	str	r0, [r4, #48]	@ 0x30
 8021404:	b920      	cbnz	r0, 8021410 <rand+0x20>
 8021406:	4b12      	ldr	r3, [pc, #72]	@ (8021450 <rand+0x60>)
 8021408:	4812      	ldr	r0, [pc, #72]	@ (8021454 <rand+0x64>)
 802140a:	2152      	movs	r1, #82	@ 0x52
 802140c:	f000 fc94 	bl	8021d38 <__assert_func>
 8021410:	4911      	ldr	r1, [pc, #68]	@ (8021458 <rand+0x68>)
 8021412:	4b12      	ldr	r3, [pc, #72]	@ (802145c <rand+0x6c>)
 8021414:	e9c0 1300 	strd	r1, r3, [r0]
 8021418:	4b11      	ldr	r3, [pc, #68]	@ (8021460 <rand+0x70>)
 802141a:	6083      	str	r3, [r0, #8]
 802141c:	230b      	movs	r3, #11
 802141e:	8183      	strh	r3, [r0, #12]
 8021420:	2100      	movs	r1, #0
 8021422:	2001      	movs	r0, #1
 8021424:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8021428:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802142a:	480e      	ldr	r0, [pc, #56]	@ (8021464 <rand+0x74>)
 802142c:	690b      	ldr	r3, [r1, #16]
 802142e:	694c      	ldr	r4, [r1, #20]
 8021430:	4a0d      	ldr	r2, [pc, #52]	@ (8021468 <rand+0x78>)
 8021432:	4358      	muls	r0, r3
 8021434:	fb02 0004 	mla	r0, r2, r4, r0
 8021438:	fba3 3202 	umull	r3, r2, r3, r2
 802143c:	3301      	adds	r3, #1
 802143e:	eb40 0002 	adc.w	r0, r0, r2
 8021442:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8021446:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 802144a:	bd10      	pop	{r4, pc}
 802144c:	240013a0 	.word	0x240013a0
 8021450:	080250ee 	.word	0x080250ee
 8021454:	08025105 	.word	0x08025105
 8021458:	abcd330e 	.word	0xabcd330e
 802145c:	e66d1234 	.word	0xe66d1234
 8021460:	0005deec 	.word	0x0005deec
 8021464:	5851f42d 	.word	0x5851f42d
 8021468:	4c957f2d 	.word	0x4c957f2d

0802146c <realloc>:
 802146c:	4b02      	ldr	r3, [pc, #8]	@ (8021478 <realloc+0xc>)
 802146e:	460a      	mov	r2, r1
 8021470:	4601      	mov	r1, r0
 8021472:	6818      	ldr	r0, [r3, #0]
 8021474:	f000 b802 	b.w	802147c <_realloc_r>
 8021478:	240013a0 	.word	0x240013a0

0802147c <_realloc_r>:
 802147c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021480:	4680      	mov	r8, r0
 8021482:	4615      	mov	r5, r2
 8021484:	460c      	mov	r4, r1
 8021486:	b921      	cbnz	r1, 8021492 <_realloc_r+0x16>
 8021488:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802148c:	4611      	mov	r1, r2
 802148e:	f7ff bef5 	b.w	802127c <_malloc_r>
 8021492:	b92a      	cbnz	r2, 80214a0 <_realloc_r+0x24>
 8021494:	f000 fc7a 	bl	8021d8c <_free_r>
 8021498:	2400      	movs	r4, #0
 802149a:	4620      	mov	r0, r4
 802149c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80214a0:	f000 fcbe 	bl	8021e20 <_malloc_usable_size_r>
 80214a4:	4285      	cmp	r5, r0
 80214a6:	4606      	mov	r6, r0
 80214a8:	d802      	bhi.n	80214b0 <_realloc_r+0x34>
 80214aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80214ae:	d8f4      	bhi.n	802149a <_realloc_r+0x1e>
 80214b0:	4629      	mov	r1, r5
 80214b2:	4640      	mov	r0, r8
 80214b4:	f7ff fee2 	bl	802127c <_malloc_r>
 80214b8:	4607      	mov	r7, r0
 80214ba:	2800      	cmp	r0, #0
 80214bc:	d0ec      	beq.n	8021498 <_realloc_r+0x1c>
 80214be:	42b5      	cmp	r5, r6
 80214c0:	462a      	mov	r2, r5
 80214c2:	4621      	mov	r1, r4
 80214c4:	bf28      	it	cs
 80214c6:	4632      	movcs	r2, r6
 80214c8:	f000 fc27 	bl	8021d1a <memcpy>
 80214cc:	4621      	mov	r1, r4
 80214ce:	4640      	mov	r0, r8
 80214d0:	f000 fc5c 	bl	8021d8c <_free_r>
 80214d4:	463c      	mov	r4, r7
 80214d6:	e7e0      	b.n	802149a <_realloc_r+0x1e>

080214d8 <_strtoul_l.constprop.0>:
 80214d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80214dc:	4e34      	ldr	r6, [pc, #208]	@ (80215b0 <_strtoul_l.constprop.0+0xd8>)
 80214de:	4686      	mov	lr, r0
 80214e0:	460d      	mov	r5, r1
 80214e2:	4628      	mov	r0, r5
 80214e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80214e8:	5d37      	ldrb	r7, [r6, r4]
 80214ea:	f017 0708 	ands.w	r7, r7, #8
 80214ee:	d1f8      	bne.n	80214e2 <_strtoul_l.constprop.0+0xa>
 80214f0:	2c2d      	cmp	r4, #45	@ 0x2d
 80214f2:	d12f      	bne.n	8021554 <_strtoul_l.constprop.0+0x7c>
 80214f4:	782c      	ldrb	r4, [r5, #0]
 80214f6:	2701      	movs	r7, #1
 80214f8:	1c85      	adds	r5, r0, #2
 80214fa:	f033 0010 	bics.w	r0, r3, #16
 80214fe:	d109      	bne.n	8021514 <_strtoul_l.constprop.0+0x3c>
 8021500:	2c30      	cmp	r4, #48	@ 0x30
 8021502:	d12c      	bne.n	802155e <_strtoul_l.constprop.0+0x86>
 8021504:	7828      	ldrb	r0, [r5, #0]
 8021506:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 802150a:	2858      	cmp	r0, #88	@ 0x58
 802150c:	d127      	bne.n	802155e <_strtoul_l.constprop.0+0x86>
 802150e:	786c      	ldrb	r4, [r5, #1]
 8021510:	2310      	movs	r3, #16
 8021512:	3502      	adds	r5, #2
 8021514:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8021518:	2600      	movs	r6, #0
 802151a:	fbb8 f8f3 	udiv	r8, r8, r3
 802151e:	fb03 f908 	mul.w	r9, r3, r8
 8021522:	ea6f 0909 	mvn.w	r9, r9
 8021526:	4630      	mov	r0, r6
 8021528:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 802152c:	f1bc 0f09 	cmp.w	ip, #9
 8021530:	d81c      	bhi.n	802156c <_strtoul_l.constprop.0+0x94>
 8021532:	4664      	mov	r4, ip
 8021534:	42a3      	cmp	r3, r4
 8021536:	dd2a      	ble.n	802158e <_strtoul_l.constprop.0+0xb6>
 8021538:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 802153c:	d007      	beq.n	802154e <_strtoul_l.constprop.0+0x76>
 802153e:	4580      	cmp	r8, r0
 8021540:	d322      	bcc.n	8021588 <_strtoul_l.constprop.0+0xb0>
 8021542:	d101      	bne.n	8021548 <_strtoul_l.constprop.0+0x70>
 8021544:	45a1      	cmp	r9, r4
 8021546:	db1f      	blt.n	8021588 <_strtoul_l.constprop.0+0xb0>
 8021548:	fb00 4003 	mla	r0, r0, r3, r4
 802154c:	2601      	movs	r6, #1
 802154e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021552:	e7e9      	b.n	8021528 <_strtoul_l.constprop.0+0x50>
 8021554:	2c2b      	cmp	r4, #43	@ 0x2b
 8021556:	bf04      	itt	eq
 8021558:	782c      	ldrbeq	r4, [r5, #0]
 802155a:	1c85      	addeq	r5, r0, #2
 802155c:	e7cd      	b.n	80214fa <_strtoul_l.constprop.0+0x22>
 802155e:	2b00      	cmp	r3, #0
 8021560:	d1d8      	bne.n	8021514 <_strtoul_l.constprop.0+0x3c>
 8021562:	2c30      	cmp	r4, #48	@ 0x30
 8021564:	bf0c      	ite	eq
 8021566:	2308      	moveq	r3, #8
 8021568:	230a      	movne	r3, #10
 802156a:	e7d3      	b.n	8021514 <_strtoul_l.constprop.0+0x3c>
 802156c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8021570:	f1bc 0f19 	cmp.w	ip, #25
 8021574:	d801      	bhi.n	802157a <_strtoul_l.constprop.0+0xa2>
 8021576:	3c37      	subs	r4, #55	@ 0x37
 8021578:	e7dc      	b.n	8021534 <_strtoul_l.constprop.0+0x5c>
 802157a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 802157e:	f1bc 0f19 	cmp.w	ip, #25
 8021582:	d804      	bhi.n	802158e <_strtoul_l.constprop.0+0xb6>
 8021584:	3c57      	subs	r4, #87	@ 0x57
 8021586:	e7d5      	b.n	8021534 <_strtoul_l.constprop.0+0x5c>
 8021588:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 802158c:	e7df      	b.n	802154e <_strtoul_l.constprop.0+0x76>
 802158e:	1c73      	adds	r3, r6, #1
 8021590:	d106      	bne.n	80215a0 <_strtoul_l.constprop.0+0xc8>
 8021592:	2322      	movs	r3, #34	@ 0x22
 8021594:	f8ce 3000 	str.w	r3, [lr]
 8021598:	4630      	mov	r0, r6
 802159a:	b932      	cbnz	r2, 80215aa <_strtoul_l.constprop.0+0xd2>
 802159c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80215a0:	b107      	cbz	r7, 80215a4 <_strtoul_l.constprop.0+0xcc>
 80215a2:	4240      	negs	r0, r0
 80215a4:	2a00      	cmp	r2, #0
 80215a6:	d0f9      	beq.n	802159c <_strtoul_l.constprop.0+0xc4>
 80215a8:	b106      	cbz	r6, 80215ac <_strtoul_l.constprop.0+0xd4>
 80215aa:	1e69      	subs	r1, r5, #1
 80215ac:	6011      	str	r1, [r2, #0]
 80215ae:	e7f5      	b.n	802159c <_strtoul_l.constprop.0+0xc4>
 80215b0:	0802515e 	.word	0x0802515e

080215b4 <strtoul>:
 80215b4:	4613      	mov	r3, r2
 80215b6:	460a      	mov	r2, r1
 80215b8:	4601      	mov	r1, r0
 80215ba:	4802      	ldr	r0, [pc, #8]	@ (80215c4 <strtoul+0x10>)
 80215bc:	6800      	ldr	r0, [r0, #0]
 80215be:	f7ff bf8b 	b.w	80214d8 <_strtoul_l.constprop.0>
 80215c2:	bf00      	nop
 80215c4:	240013a0 	.word	0x240013a0

080215c8 <std>:
 80215c8:	2300      	movs	r3, #0
 80215ca:	b510      	push	{r4, lr}
 80215cc:	4604      	mov	r4, r0
 80215ce:	e9c0 3300 	strd	r3, r3, [r0]
 80215d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80215d6:	6083      	str	r3, [r0, #8]
 80215d8:	8181      	strh	r1, [r0, #12]
 80215da:	6643      	str	r3, [r0, #100]	@ 0x64
 80215dc:	81c2      	strh	r2, [r0, #14]
 80215de:	6183      	str	r3, [r0, #24]
 80215e0:	4619      	mov	r1, r3
 80215e2:	2208      	movs	r2, #8
 80215e4:	305c      	adds	r0, #92	@ 0x5c
 80215e6:	f000 fa79 	bl	8021adc <memset>
 80215ea:	4b0d      	ldr	r3, [pc, #52]	@ (8021620 <std+0x58>)
 80215ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80215ee:	4b0d      	ldr	r3, [pc, #52]	@ (8021624 <std+0x5c>)
 80215f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80215f2:	4b0d      	ldr	r3, [pc, #52]	@ (8021628 <std+0x60>)
 80215f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80215f6:	4b0d      	ldr	r3, [pc, #52]	@ (802162c <std+0x64>)
 80215f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80215fa:	4b0d      	ldr	r3, [pc, #52]	@ (8021630 <std+0x68>)
 80215fc:	6224      	str	r4, [r4, #32]
 80215fe:	429c      	cmp	r4, r3
 8021600:	d006      	beq.n	8021610 <std+0x48>
 8021602:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8021606:	4294      	cmp	r4, r2
 8021608:	d002      	beq.n	8021610 <std+0x48>
 802160a:	33d0      	adds	r3, #208	@ 0xd0
 802160c:	429c      	cmp	r4, r3
 802160e:	d105      	bne.n	802161c <std+0x54>
 8021610:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8021614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021618:	f000 bb74 	b.w	8021d04 <__retarget_lock_init_recursive>
 802161c:	bd10      	pop	{r4, pc}
 802161e:	bf00      	nop
 8021620:	08021869 	.word	0x08021869
 8021624:	0802188b 	.word	0x0802188b
 8021628:	080218c3 	.word	0x080218c3
 802162c:	080218e7 	.word	0x080218e7
 8021630:	2406964c 	.word	0x2406964c

08021634 <stdio_exit_handler>:
 8021634:	4a02      	ldr	r2, [pc, #8]	@ (8021640 <stdio_exit_handler+0xc>)
 8021636:	4903      	ldr	r1, [pc, #12]	@ (8021644 <stdio_exit_handler+0x10>)
 8021638:	4803      	ldr	r0, [pc, #12]	@ (8021648 <stdio_exit_handler+0x14>)
 802163a:	f000 b869 	b.w	8021710 <_fwalk_sglue>
 802163e:	bf00      	nop
 8021640:	24001394 	.word	0x24001394
 8021644:	08022505 	.word	0x08022505
 8021648:	240013a4 	.word	0x240013a4

0802164c <cleanup_stdio>:
 802164c:	6841      	ldr	r1, [r0, #4]
 802164e:	4b0c      	ldr	r3, [pc, #48]	@ (8021680 <cleanup_stdio+0x34>)
 8021650:	4299      	cmp	r1, r3
 8021652:	b510      	push	{r4, lr}
 8021654:	4604      	mov	r4, r0
 8021656:	d001      	beq.n	802165c <cleanup_stdio+0x10>
 8021658:	f000 ff54 	bl	8022504 <_fflush_r>
 802165c:	68a1      	ldr	r1, [r4, #8]
 802165e:	4b09      	ldr	r3, [pc, #36]	@ (8021684 <cleanup_stdio+0x38>)
 8021660:	4299      	cmp	r1, r3
 8021662:	d002      	beq.n	802166a <cleanup_stdio+0x1e>
 8021664:	4620      	mov	r0, r4
 8021666:	f000 ff4d 	bl	8022504 <_fflush_r>
 802166a:	68e1      	ldr	r1, [r4, #12]
 802166c:	4b06      	ldr	r3, [pc, #24]	@ (8021688 <cleanup_stdio+0x3c>)
 802166e:	4299      	cmp	r1, r3
 8021670:	d004      	beq.n	802167c <cleanup_stdio+0x30>
 8021672:	4620      	mov	r0, r4
 8021674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021678:	f000 bf44 	b.w	8022504 <_fflush_r>
 802167c:	bd10      	pop	{r4, pc}
 802167e:	bf00      	nop
 8021680:	2406964c 	.word	0x2406964c
 8021684:	240696b4 	.word	0x240696b4
 8021688:	2406971c 	.word	0x2406971c

0802168c <global_stdio_init.part.0>:
 802168c:	b510      	push	{r4, lr}
 802168e:	4b0b      	ldr	r3, [pc, #44]	@ (80216bc <global_stdio_init.part.0+0x30>)
 8021690:	4c0b      	ldr	r4, [pc, #44]	@ (80216c0 <global_stdio_init.part.0+0x34>)
 8021692:	4a0c      	ldr	r2, [pc, #48]	@ (80216c4 <global_stdio_init.part.0+0x38>)
 8021694:	601a      	str	r2, [r3, #0]
 8021696:	4620      	mov	r0, r4
 8021698:	2200      	movs	r2, #0
 802169a:	2104      	movs	r1, #4
 802169c:	f7ff ff94 	bl	80215c8 <std>
 80216a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80216a4:	2201      	movs	r2, #1
 80216a6:	2109      	movs	r1, #9
 80216a8:	f7ff ff8e 	bl	80215c8 <std>
 80216ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80216b0:	2202      	movs	r2, #2
 80216b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80216b6:	2112      	movs	r1, #18
 80216b8:	f7ff bf86 	b.w	80215c8 <std>
 80216bc:	24069784 	.word	0x24069784
 80216c0:	2406964c 	.word	0x2406964c
 80216c4:	08021635 	.word	0x08021635

080216c8 <__sfp_lock_acquire>:
 80216c8:	4801      	ldr	r0, [pc, #4]	@ (80216d0 <__sfp_lock_acquire+0x8>)
 80216ca:	f000 bb1c 	b.w	8021d06 <__retarget_lock_acquire_recursive>
 80216ce:	bf00      	nop
 80216d0:	2406978e 	.word	0x2406978e

080216d4 <__sfp_lock_release>:
 80216d4:	4801      	ldr	r0, [pc, #4]	@ (80216dc <__sfp_lock_release+0x8>)
 80216d6:	f000 bb17 	b.w	8021d08 <__retarget_lock_release_recursive>
 80216da:	bf00      	nop
 80216dc:	2406978e 	.word	0x2406978e

080216e0 <__sinit>:
 80216e0:	b510      	push	{r4, lr}
 80216e2:	4604      	mov	r4, r0
 80216e4:	f7ff fff0 	bl	80216c8 <__sfp_lock_acquire>
 80216e8:	6a23      	ldr	r3, [r4, #32]
 80216ea:	b11b      	cbz	r3, 80216f4 <__sinit+0x14>
 80216ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80216f0:	f7ff bff0 	b.w	80216d4 <__sfp_lock_release>
 80216f4:	4b04      	ldr	r3, [pc, #16]	@ (8021708 <__sinit+0x28>)
 80216f6:	6223      	str	r3, [r4, #32]
 80216f8:	4b04      	ldr	r3, [pc, #16]	@ (802170c <__sinit+0x2c>)
 80216fa:	681b      	ldr	r3, [r3, #0]
 80216fc:	2b00      	cmp	r3, #0
 80216fe:	d1f5      	bne.n	80216ec <__sinit+0xc>
 8021700:	f7ff ffc4 	bl	802168c <global_stdio_init.part.0>
 8021704:	e7f2      	b.n	80216ec <__sinit+0xc>
 8021706:	bf00      	nop
 8021708:	0802164d 	.word	0x0802164d
 802170c:	24069784 	.word	0x24069784

08021710 <_fwalk_sglue>:
 8021710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021714:	4607      	mov	r7, r0
 8021716:	4688      	mov	r8, r1
 8021718:	4614      	mov	r4, r2
 802171a:	2600      	movs	r6, #0
 802171c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021720:	f1b9 0901 	subs.w	r9, r9, #1
 8021724:	d505      	bpl.n	8021732 <_fwalk_sglue+0x22>
 8021726:	6824      	ldr	r4, [r4, #0]
 8021728:	2c00      	cmp	r4, #0
 802172a:	d1f7      	bne.n	802171c <_fwalk_sglue+0xc>
 802172c:	4630      	mov	r0, r6
 802172e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021732:	89ab      	ldrh	r3, [r5, #12]
 8021734:	2b01      	cmp	r3, #1
 8021736:	d907      	bls.n	8021748 <_fwalk_sglue+0x38>
 8021738:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802173c:	3301      	adds	r3, #1
 802173e:	d003      	beq.n	8021748 <_fwalk_sglue+0x38>
 8021740:	4629      	mov	r1, r5
 8021742:	4638      	mov	r0, r7
 8021744:	47c0      	blx	r8
 8021746:	4306      	orrs	r6, r0
 8021748:	3568      	adds	r5, #104	@ 0x68
 802174a:	e7e9      	b.n	8021720 <_fwalk_sglue+0x10>

0802174c <_fwrite_r>:
 802174c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021750:	9c08      	ldr	r4, [sp, #32]
 8021752:	468a      	mov	sl, r1
 8021754:	4690      	mov	r8, r2
 8021756:	fb02 f903 	mul.w	r9, r2, r3
 802175a:	4606      	mov	r6, r0
 802175c:	b118      	cbz	r0, 8021766 <_fwrite_r+0x1a>
 802175e:	6a03      	ldr	r3, [r0, #32]
 8021760:	b90b      	cbnz	r3, 8021766 <_fwrite_r+0x1a>
 8021762:	f7ff ffbd 	bl	80216e0 <__sinit>
 8021766:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021768:	07dd      	lsls	r5, r3, #31
 802176a:	d405      	bmi.n	8021778 <_fwrite_r+0x2c>
 802176c:	89a3      	ldrh	r3, [r4, #12]
 802176e:	0598      	lsls	r0, r3, #22
 8021770:	d402      	bmi.n	8021778 <_fwrite_r+0x2c>
 8021772:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021774:	f000 fac7 	bl	8021d06 <__retarget_lock_acquire_recursive>
 8021778:	89a3      	ldrh	r3, [r4, #12]
 802177a:	0719      	lsls	r1, r3, #28
 802177c:	d516      	bpl.n	80217ac <_fwrite_r+0x60>
 802177e:	6923      	ldr	r3, [r4, #16]
 8021780:	b1a3      	cbz	r3, 80217ac <_fwrite_r+0x60>
 8021782:	2500      	movs	r5, #0
 8021784:	454d      	cmp	r5, r9
 8021786:	d01f      	beq.n	80217c8 <_fwrite_r+0x7c>
 8021788:	68a7      	ldr	r7, [r4, #8]
 802178a:	f81a 1005 	ldrb.w	r1, [sl, r5]
 802178e:	3f01      	subs	r7, #1
 8021790:	2f00      	cmp	r7, #0
 8021792:	60a7      	str	r7, [r4, #8]
 8021794:	da04      	bge.n	80217a0 <_fwrite_r+0x54>
 8021796:	69a3      	ldr	r3, [r4, #24]
 8021798:	429f      	cmp	r7, r3
 802179a:	db0f      	blt.n	80217bc <_fwrite_r+0x70>
 802179c:	290a      	cmp	r1, #10
 802179e:	d00d      	beq.n	80217bc <_fwrite_r+0x70>
 80217a0:	6823      	ldr	r3, [r4, #0]
 80217a2:	1c5a      	adds	r2, r3, #1
 80217a4:	6022      	str	r2, [r4, #0]
 80217a6:	7019      	strb	r1, [r3, #0]
 80217a8:	3501      	adds	r5, #1
 80217aa:	e7eb      	b.n	8021784 <_fwrite_r+0x38>
 80217ac:	4621      	mov	r1, r4
 80217ae:	4630      	mov	r0, r6
 80217b0:	f000 f914 	bl	80219dc <__swsetup_r>
 80217b4:	2800      	cmp	r0, #0
 80217b6:	d0e4      	beq.n	8021782 <_fwrite_r+0x36>
 80217b8:	2500      	movs	r5, #0
 80217ba:	e005      	b.n	80217c8 <_fwrite_r+0x7c>
 80217bc:	4622      	mov	r2, r4
 80217be:	4630      	mov	r0, r6
 80217c0:	f000 f8ce 	bl	8021960 <__swbuf_r>
 80217c4:	3001      	adds	r0, #1
 80217c6:	d1ef      	bne.n	80217a8 <_fwrite_r+0x5c>
 80217c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80217ca:	07da      	lsls	r2, r3, #31
 80217cc:	d405      	bmi.n	80217da <_fwrite_r+0x8e>
 80217ce:	89a3      	ldrh	r3, [r4, #12]
 80217d0:	059b      	lsls	r3, r3, #22
 80217d2:	d402      	bmi.n	80217da <_fwrite_r+0x8e>
 80217d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80217d6:	f000 fa97 	bl	8021d08 <__retarget_lock_release_recursive>
 80217da:	fbb5 f0f8 	udiv	r0, r5, r8
 80217de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080217e4 <fwrite>:
 80217e4:	b507      	push	{r0, r1, r2, lr}
 80217e6:	9300      	str	r3, [sp, #0]
 80217e8:	4613      	mov	r3, r2
 80217ea:	460a      	mov	r2, r1
 80217ec:	4601      	mov	r1, r0
 80217ee:	4803      	ldr	r0, [pc, #12]	@ (80217fc <fwrite+0x18>)
 80217f0:	6800      	ldr	r0, [r0, #0]
 80217f2:	f7ff ffab 	bl	802174c <_fwrite_r>
 80217f6:	b003      	add	sp, #12
 80217f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80217fc:	240013a0 	.word	0x240013a0

08021800 <sniprintf>:
 8021800:	b40c      	push	{r2, r3}
 8021802:	b530      	push	{r4, r5, lr}
 8021804:	4b17      	ldr	r3, [pc, #92]	@ (8021864 <sniprintf+0x64>)
 8021806:	1e0c      	subs	r4, r1, #0
 8021808:	681d      	ldr	r5, [r3, #0]
 802180a:	b09d      	sub	sp, #116	@ 0x74
 802180c:	da08      	bge.n	8021820 <sniprintf+0x20>
 802180e:	238b      	movs	r3, #139	@ 0x8b
 8021810:	602b      	str	r3, [r5, #0]
 8021812:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021816:	b01d      	add	sp, #116	@ 0x74
 8021818:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802181c:	b002      	add	sp, #8
 802181e:	4770      	bx	lr
 8021820:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8021824:	f8ad 3014 	strh.w	r3, [sp, #20]
 8021828:	bf14      	ite	ne
 802182a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802182e:	4623      	moveq	r3, r4
 8021830:	9304      	str	r3, [sp, #16]
 8021832:	9307      	str	r3, [sp, #28]
 8021834:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8021838:	9002      	str	r0, [sp, #8]
 802183a:	9006      	str	r0, [sp, #24]
 802183c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8021840:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8021842:	ab21      	add	r3, sp, #132	@ 0x84
 8021844:	a902      	add	r1, sp, #8
 8021846:	4628      	mov	r0, r5
 8021848:	9301      	str	r3, [sp, #4]
 802184a:	f000 fb4d 	bl	8021ee8 <_svfiprintf_r>
 802184e:	1c43      	adds	r3, r0, #1
 8021850:	bfbc      	itt	lt
 8021852:	238b      	movlt	r3, #139	@ 0x8b
 8021854:	602b      	strlt	r3, [r5, #0]
 8021856:	2c00      	cmp	r4, #0
 8021858:	d0dd      	beq.n	8021816 <sniprintf+0x16>
 802185a:	9b02      	ldr	r3, [sp, #8]
 802185c:	2200      	movs	r2, #0
 802185e:	701a      	strb	r2, [r3, #0]
 8021860:	e7d9      	b.n	8021816 <sniprintf+0x16>
 8021862:	bf00      	nop
 8021864:	240013a0 	.word	0x240013a0

08021868 <__sread>:
 8021868:	b510      	push	{r4, lr}
 802186a:	460c      	mov	r4, r1
 802186c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021870:	f000 f9ea 	bl	8021c48 <_read_r>
 8021874:	2800      	cmp	r0, #0
 8021876:	bfab      	itete	ge
 8021878:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802187a:	89a3      	ldrhlt	r3, [r4, #12]
 802187c:	181b      	addge	r3, r3, r0
 802187e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8021882:	bfac      	ite	ge
 8021884:	6563      	strge	r3, [r4, #84]	@ 0x54
 8021886:	81a3      	strhlt	r3, [r4, #12]
 8021888:	bd10      	pop	{r4, pc}

0802188a <__swrite>:
 802188a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802188e:	461f      	mov	r7, r3
 8021890:	898b      	ldrh	r3, [r1, #12]
 8021892:	05db      	lsls	r3, r3, #23
 8021894:	4605      	mov	r5, r0
 8021896:	460c      	mov	r4, r1
 8021898:	4616      	mov	r6, r2
 802189a:	d505      	bpl.n	80218a8 <__swrite+0x1e>
 802189c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80218a0:	2302      	movs	r3, #2
 80218a2:	2200      	movs	r2, #0
 80218a4:	f000 f9be 	bl	8021c24 <_lseek_r>
 80218a8:	89a3      	ldrh	r3, [r4, #12]
 80218aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80218ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80218b2:	81a3      	strh	r3, [r4, #12]
 80218b4:	4632      	mov	r2, r6
 80218b6:	463b      	mov	r3, r7
 80218b8:	4628      	mov	r0, r5
 80218ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80218be:	f000 b9e5 	b.w	8021c8c <_write_r>

080218c2 <__sseek>:
 80218c2:	b510      	push	{r4, lr}
 80218c4:	460c      	mov	r4, r1
 80218c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80218ca:	f000 f9ab 	bl	8021c24 <_lseek_r>
 80218ce:	1c43      	adds	r3, r0, #1
 80218d0:	89a3      	ldrh	r3, [r4, #12]
 80218d2:	bf15      	itete	ne
 80218d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80218d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80218da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80218de:	81a3      	strheq	r3, [r4, #12]
 80218e0:	bf18      	it	ne
 80218e2:	81a3      	strhne	r3, [r4, #12]
 80218e4:	bd10      	pop	{r4, pc}

080218e6 <__sclose>:
 80218e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80218ea:	f000 b935 	b.w	8021b58 <_close_r>

080218ee <_vsniprintf_r>:
 80218ee:	b530      	push	{r4, r5, lr}
 80218f0:	4614      	mov	r4, r2
 80218f2:	2c00      	cmp	r4, #0
 80218f4:	b09b      	sub	sp, #108	@ 0x6c
 80218f6:	4605      	mov	r5, r0
 80218f8:	461a      	mov	r2, r3
 80218fa:	da05      	bge.n	8021908 <_vsniprintf_r+0x1a>
 80218fc:	238b      	movs	r3, #139	@ 0x8b
 80218fe:	6003      	str	r3, [r0, #0]
 8021900:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021904:	b01b      	add	sp, #108	@ 0x6c
 8021906:	bd30      	pop	{r4, r5, pc}
 8021908:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802190c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8021910:	bf14      	ite	ne
 8021912:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8021916:	4623      	moveq	r3, r4
 8021918:	9302      	str	r3, [sp, #8]
 802191a:	9305      	str	r3, [sp, #20]
 802191c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8021920:	9100      	str	r1, [sp, #0]
 8021922:	9104      	str	r1, [sp, #16]
 8021924:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021928:	4669      	mov	r1, sp
 802192a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802192c:	f000 fadc 	bl	8021ee8 <_svfiprintf_r>
 8021930:	1c43      	adds	r3, r0, #1
 8021932:	bfbc      	itt	lt
 8021934:	238b      	movlt	r3, #139	@ 0x8b
 8021936:	602b      	strlt	r3, [r5, #0]
 8021938:	2c00      	cmp	r4, #0
 802193a:	d0e3      	beq.n	8021904 <_vsniprintf_r+0x16>
 802193c:	9b00      	ldr	r3, [sp, #0]
 802193e:	2200      	movs	r2, #0
 8021940:	701a      	strb	r2, [r3, #0]
 8021942:	e7df      	b.n	8021904 <_vsniprintf_r+0x16>

08021944 <vsniprintf>:
 8021944:	b507      	push	{r0, r1, r2, lr}
 8021946:	9300      	str	r3, [sp, #0]
 8021948:	4613      	mov	r3, r2
 802194a:	460a      	mov	r2, r1
 802194c:	4601      	mov	r1, r0
 802194e:	4803      	ldr	r0, [pc, #12]	@ (802195c <vsniprintf+0x18>)
 8021950:	6800      	ldr	r0, [r0, #0]
 8021952:	f7ff ffcc 	bl	80218ee <_vsniprintf_r>
 8021956:	b003      	add	sp, #12
 8021958:	f85d fb04 	ldr.w	pc, [sp], #4
 802195c:	240013a0 	.word	0x240013a0

08021960 <__swbuf_r>:
 8021960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021962:	460e      	mov	r6, r1
 8021964:	4614      	mov	r4, r2
 8021966:	4605      	mov	r5, r0
 8021968:	b118      	cbz	r0, 8021972 <__swbuf_r+0x12>
 802196a:	6a03      	ldr	r3, [r0, #32]
 802196c:	b90b      	cbnz	r3, 8021972 <__swbuf_r+0x12>
 802196e:	f7ff feb7 	bl	80216e0 <__sinit>
 8021972:	69a3      	ldr	r3, [r4, #24]
 8021974:	60a3      	str	r3, [r4, #8]
 8021976:	89a3      	ldrh	r3, [r4, #12]
 8021978:	071a      	lsls	r2, r3, #28
 802197a:	d501      	bpl.n	8021980 <__swbuf_r+0x20>
 802197c:	6923      	ldr	r3, [r4, #16]
 802197e:	b943      	cbnz	r3, 8021992 <__swbuf_r+0x32>
 8021980:	4621      	mov	r1, r4
 8021982:	4628      	mov	r0, r5
 8021984:	f000 f82a 	bl	80219dc <__swsetup_r>
 8021988:	b118      	cbz	r0, 8021992 <__swbuf_r+0x32>
 802198a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802198e:	4638      	mov	r0, r7
 8021990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021992:	6823      	ldr	r3, [r4, #0]
 8021994:	6922      	ldr	r2, [r4, #16]
 8021996:	1a98      	subs	r0, r3, r2
 8021998:	6963      	ldr	r3, [r4, #20]
 802199a:	b2f6      	uxtb	r6, r6
 802199c:	4283      	cmp	r3, r0
 802199e:	4637      	mov	r7, r6
 80219a0:	dc05      	bgt.n	80219ae <__swbuf_r+0x4e>
 80219a2:	4621      	mov	r1, r4
 80219a4:	4628      	mov	r0, r5
 80219a6:	f000 fdad 	bl	8022504 <_fflush_r>
 80219aa:	2800      	cmp	r0, #0
 80219ac:	d1ed      	bne.n	802198a <__swbuf_r+0x2a>
 80219ae:	68a3      	ldr	r3, [r4, #8]
 80219b0:	3b01      	subs	r3, #1
 80219b2:	60a3      	str	r3, [r4, #8]
 80219b4:	6823      	ldr	r3, [r4, #0]
 80219b6:	1c5a      	adds	r2, r3, #1
 80219b8:	6022      	str	r2, [r4, #0]
 80219ba:	701e      	strb	r6, [r3, #0]
 80219bc:	6962      	ldr	r2, [r4, #20]
 80219be:	1c43      	adds	r3, r0, #1
 80219c0:	429a      	cmp	r2, r3
 80219c2:	d004      	beq.n	80219ce <__swbuf_r+0x6e>
 80219c4:	89a3      	ldrh	r3, [r4, #12]
 80219c6:	07db      	lsls	r3, r3, #31
 80219c8:	d5e1      	bpl.n	802198e <__swbuf_r+0x2e>
 80219ca:	2e0a      	cmp	r6, #10
 80219cc:	d1df      	bne.n	802198e <__swbuf_r+0x2e>
 80219ce:	4621      	mov	r1, r4
 80219d0:	4628      	mov	r0, r5
 80219d2:	f000 fd97 	bl	8022504 <_fflush_r>
 80219d6:	2800      	cmp	r0, #0
 80219d8:	d0d9      	beq.n	802198e <__swbuf_r+0x2e>
 80219da:	e7d6      	b.n	802198a <__swbuf_r+0x2a>

080219dc <__swsetup_r>:
 80219dc:	b538      	push	{r3, r4, r5, lr}
 80219de:	4b29      	ldr	r3, [pc, #164]	@ (8021a84 <__swsetup_r+0xa8>)
 80219e0:	4605      	mov	r5, r0
 80219e2:	6818      	ldr	r0, [r3, #0]
 80219e4:	460c      	mov	r4, r1
 80219e6:	b118      	cbz	r0, 80219f0 <__swsetup_r+0x14>
 80219e8:	6a03      	ldr	r3, [r0, #32]
 80219ea:	b90b      	cbnz	r3, 80219f0 <__swsetup_r+0x14>
 80219ec:	f7ff fe78 	bl	80216e0 <__sinit>
 80219f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80219f4:	0719      	lsls	r1, r3, #28
 80219f6:	d422      	bmi.n	8021a3e <__swsetup_r+0x62>
 80219f8:	06da      	lsls	r2, r3, #27
 80219fa:	d407      	bmi.n	8021a0c <__swsetup_r+0x30>
 80219fc:	2209      	movs	r2, #9
 80219fe:	602a      	str	r2, [r5, #0]
 8021a00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021a04:	81a3      	strh	r3, [r4, #12]
 8021a06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021a0a:	e033      	b.n	8021a74 <__swsetup_r+0x98>
 8021a0c:	0758      	lsls	r0, r3, #29
 8021a0e:	d512      	bpl.n	8021a36 <__swsetup_r+0x5a>
 8021a10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021a12:	b141      	cbz	r1, 8021a26 <__swsetup_r+0x4a>
 8021a14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021a18:	4299      	cmp	r1, r3
 8021a1a:	d002      	beq.n	8021a22 <__swsetup_r+0x46>
 8021a1c:	4628      	mov	r0, r5
 8021a1e:	f000 f9b5 	bl	8021d8c <_free_r>
 8021a22:	2300      	movs	r3, #0
 8021a24:	6363      	str	r3, [r4, #52]	@ 0x34
 8021a26:	89a3      	ldrh	r3, [r4, #12]
 8021a28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8021a2c:	81a3      	strh	r3, [r4, #12]
 8021a2e:	2300      	movs	r3, #0
 8021a30:	6063      	str	r3, [r4, #4]
 8021a32:	6923      	ldr	r3, [r4, #16]
 8021a34:	6023      	str	r3, [r4, #0]
 8021a36:	89a3      	ldrh	r3, [r4, #12]
 8021a38:	f043 0308 	orr.w	r3, r3, #8
 8021a3c:	81a3      	strh	r3, [r4, #12]
 8021a3e:	6923      	ldr	r3, [r4, #16]
 8021a40:	b94b      	cbnz	r3, 8021a56 <__swsetup_r+0x7a>
 8021a42:	89a3      	ldrh	r3, [r4, #12]
 8021a44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8021a48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8021a4c:	d003      	beq.n	8021a56 <__swsetup_r+0x7a>
 8021a4e:	4621      	mov	r1, r4
 8021a50:	4628      	mov	r0, r5
 8021a52:	f000 fdb7 	bl	80225c4 <__smakebuf_r>
 8021a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021a5a:	f013 0201 	ands.w	r2, r3, #1
 8021a5e:	d00a      	beq.n	8021a76 <__swsetup_r+0x9a>
 8021a60:	2200      	movs	r2, #0
 8021a62:	60a2      	str	r2, [r4, #8]
 8021a64:	6962      	ldr	r2, [r4, #20]
 8021a66:	4252      	negs	r2, r2
 8021a68:	61a2      	str	r2, [r4, #24]
 8021a6a:	6922      	ldr	r2, [r4, #16]
 8021a6c:	b942      	cbnz	r2, 8021a80 <__swsetup_r+0xa4>
 8021a6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8021a72:	d1c5      	bne.n	8021a00 <__swsetup_r+0x24>
 8021a74:	bd38      	pop	{r3, r4, r5, pc}
 8021a76:	0799      	lsls	r1, r3, #30
 8021a78:	bf58      	it	pl
 8021a7a:	6962      	ldrpl	r2, [r4, #20]
 8021a7c:	60a2      	str	r2, [r4, #8]
 8021a7e:	e7f4      	b.n	8021a6a <__swsetup_r+0x8e>
 8021a80:	2000      	movs	r0, #0
 8021a82:	e7f7      	b.n	8021a74 <__swsetup_r+0x98>
 8021a84:	240013a0 	.word	0x240013a0

08021a88 <memcmp>:
 8021a88:	b510      	push	{r4, lr}
 8021a8a:	3901      	subs	r1, #1
 8021a8c:	4402      	add	r2, r0
 8021a8e:	4290      	cmp	r0, r2
 8021a90:	d101      	bne.n	8021a96 <memcmp+0xe>
 8021a92:	2000      	movs	r0, #0
 8021a94:	e005      	b.n	8021aa2 <memcmp+0x1a>
 8021a96:	7803      	ldrb	r3, [r0, #0]
 8021a98:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8021a9c:	42a3      	cmp	r3, r4
 8021a9e:	d001      	beq.n	8021aa4 <memcmp+0x1c>
 8021aa0:	1b18      	subs	r0, r3, r4
 8021aa2:	bd10      	pop	{r4, pc}
 8021aa4:	3001      	adds	r0, #1
 8021aa6:	e7f2      	b.n	8021a8e <memcmp+0x6>

08021aa8 <memmove>:
 8021aa8:	4288      	cmp	r0, r1
 8021aaa:	b510      	push	{r4, lr}
 8021aac:	eb01 0402 	add.w	r4, r1, r2
 8021ab0:	d902      	bls.n	8021ab8 <memmove+0x10>
 8021ab2:	4284      	cmp	r4, r0
 8021ab4:	4623      	mov	r3, r4
 8021ab6:	d807      	bhi.n	8021ac8 <memmove+0x20>
 8021ab8:	1e43      	subs	r3, r0, #1
 8021aba:	42a1      	cmp	r1, r4
 8021abc:	d008      	beq.n	8021ad0 <memmove+0x28>
 8021abe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021ac2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021ac6:	e7f8      	b.n	8021aba <memmove+0x12>
 8021ac8:	4402      	add	r2, r0
 8021aca:	4601      	mov	r1, r0
 8021acc:	428a      	cmp	r2, r1
 8021ace:	d100      	bne.n	8021ad2 <memmove+0x2a>
 8021ad0:	bd10      	pop	{r4, pc}
 8021ad2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8021ad6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021ada:	e7f7      	b.n	8021acc <memmove+0x24>

08021adc <memset>:
 8021adc:	4402      	add	r2, r0
 8021ade:	4603      	mov	r3, r0
 8021ae0:	4293      	cmp	r3, r2
 8021ae2:	d100      	bne.n	8021ae6 <memset+0xa>
 8021ae4:	4770      	bx	lr
 8021ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8021aea:	e7f9      	b.n	8021ae0 <memset+0x4>

08021aec <strchr>:
 8021aec:	b2c9      	uxtb	r1, r1
 8021aee:	4603      	mov	r3, r0
 8021af0:	4618      	mov	r0, r3
 8021af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021af6:	b112      	cbz	r2, 8021afe <strchr+0x12>
 8021af8:	428a      	cmp	r2, r1
 8021afa:	d1f9      	bne.n	8021af0 <strchr+0x4>
 8021afc:	4770      	bx	lr
 8021afe:	2900      	cmp	r1, #0
 8021b00:	bf18      	it	ne
 8021b02:	2000      	movne	r0, #0
 8021b04:	4770      	bx	lr

08021b06 <strncmp>:
 8021b06:	b510      	push	{r4, lr}
 8021b08:	b16a      	cbz	r2, 8021b26 <strncmp+0x20>
 8021b0a:	3901      	subs	r1, #1
 8021b0c:	1884      	adds	r4, r0, r2
 8021b0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021b12:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8021b16:	429a      	cmp	r2, r3
 8021b18:	d103      	bne.n	8021b22 <strncmp+0x1c>
 8021b1a:	42a0      	cmp	r0, r4
 8021b1c:	d001      	beq.n	8021b22 <strncmp+0x1c>
 8021b1e:	2a00      	cmp	r2, #0
 8021b20:	d1f5      	bne.n	8021b0e <strncmp+0x8>
 8021b22:	1ad0      	subs	r0, r2, r3
 8021b24:	bd10      	pop	{r4, pc}
 8021b26:	4610      	mov	r0, r2
 8021b28:	e7fc      	b.n	8021b24 <strncmp+0x1e>

08021b2a <strstr>:
 8021b2a:	780a      	ldrb	r2, [r1, #0]
 8021b2c:	b570      	push	{r4, r5, r6, lr}
 8021b2e:	b96a      	cbnz	r2, 8021b4c <strstr+0x22>
 8021b30:	bd70      	pop	{r4, r5, r6, pc}
 8021b32:	429a      	cmp	r2, r3
 8021b34:	d109      	bne.n	8021b4a <strstr+0x20>
 8021b36:	460c      	mov	r4, r1
 8021b38:	4605      	mov	r5, r0
 8021b3a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8021b3e:	2b00      	cmp	r3, #0
 8021b40:	d0f6      	beq.n	8021b30 <strstr+0x6>
 8021b42:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8021b46:	429e      	cmp	r6, r3
 8021b48:	d0f7      	beq.n	8021b3a <strstr+0x10>
 8021b4a:	3001      	adds	r0, #1
 8021b4c:	7803      	ldrb	r3, [r0, #0]
 8021b4e:	2b00      	cmp	r3, #0
 8021b50:	d1ef      	bne.n	8021b32 <strstr+0x8>
 8021b52:	4618      	mov	r0, r3
 8021b54:	e7ec      	b.n	8021b30 <strstr+0x6>
	...

08021b58 <_close_r>:
 8021b58:	b538      	push	{r3, r4, r5, lr}
 8021b5a:	4d06      	ldr	r5, [pc, #24]	@ (8021b74 <_close_r+0x1c>)
 8021b5c:	2300      	movs	r3, #0
 8021b5e:	4604      	mov	r4, r0
 8021b60:	4608      	mov	r0, r1
 8021b62:	602b      	str	r3, [r5, #0]
 8021b64:	f7e0 fc4c 	bl	8002400 <_close>
 8021b68:	1c43      	adds	r3, r0, #1
 8021b6a:	d102      	bne.n	8021b72 <_close_r+0x1a>
 8021b6c:	682b      	ldr	r3, [r5, #0]
 8021b6e:	b103      	cbz	r3, 8021b72 <_close_r+0x1a>
 8021b70:	6023      	str	r3, [r4, #0]
 8021b72:	bd38      	pop	{r3, r4, r5, pc}
 8021b74:	24069788 	.word	0x24069788

08021b78 <_reclaim_reent>:
 8021b78:	4b29      	ldr	r3, [pc, #164]	@ (8021c20 <_reclaim_reent+0xa8>)
 8021b7a:	681b      	ldr	r3, [r3, #0]
 8021b7c:	4283      	cmp	r3, r0
 8021b7e:	b570      	push	{r4, r5, r6, lr}
 8021b80:	4604      	mov	r4, r0
 8021b82:	d04b      	beq.n	8021c1c <_reclaim_reent+0xa4>
 8021b84:	69c3      	ldr	r3, [r0, #28]
 8021b86:	b1ab      	cbz	r3, 8021bb4 <_reclaim_reent+0x3c>
 8021b88:	68db      	ldr	r3, [r3, #12]
 8021b8a:	b16b      	cbz	r3, 8021ba8 <_reclaim_reent+0x30>
 8021b8c:	2500      	movs	r5, #0
 8021b8e:	69e3      	ldr	r3, [r4, #28]
 8021b90:	68db      	ldr	r3, [r3, #12]
 8021b92:	5959      	ldr	r1, [r3, r5]
 8021b94:	2900      	cmp	r1, #0
 8021b96:	d13b      	bne.n	8021c10 <_reclaim_reent+0x98>
 8021b98:	3504      	adds	r5, #4
 8021b9a:	2d80      	cmp	r5, #128	@ 0x80
 8021b9c:	d1f7      	bne.n	8021b8e <_reclaim_reent+0x16>
 8021b9e:	69e3      	ldr	r3, [r4, #28]
 8021ba0:	4620      	mov	r0, r4
 8021ba2:	68d9      	ldr	r1, [r3, #12]
 8021ba4:	f000 f8f2 	bl	8021d8c <_free_r>
 8021ba8:	69e3      	ldr	r3, [r4, #28]
 8021baa:	6819      	ldr	r1, [r3, #0]
 8021bac:	b111      	cbz	r1, 8021bb4 <_reclaim_reent+0x3c>
 8021bae:	4620      	mov	r0, r4
 8021bb0:	f000 f8ec 	bl	8021d8c <_free_r>
 8021bb4:	6961      	ldr	r1, [r4, #20]
 8021bb6:	b111      	cbz	r1, 8021bbe <_reclaim_reent+0x46>
 8021bb8:	4620      	mov	r0, r4
 8021bba:	f000 f8e7 	bl	8021d8c <_free_r>
 8021bbe:	69e1      	ldr	r1, [r4, #28]
 8021bc0:	b111      	cbz	r1, 8021bc8 <_reclaim_reent+0x50>
 8021bc2:	4620      	mov	r0, r4
 8021bc4:	f000 f8e2 	bl	8021d8c <_free_r>
 8021bc8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8021bca:	b111      	cbz	r1, 8021bd2 <_reclaim_reent+0x5a>
 8021bcc:	4620      	mov	r0, r4
 8021bce:	f000 f8dd 	bl	8021d8c <_free_r>
 8021bd2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021bd4:	b111      	cbz	r1, 8021bdc <_reclaim_reent+0x64>
 8021bd6:	4620      	mov	r0, r4
 8021bd8:	f000 f8d8 	bl	8021d8c <_free_r>
 8021bdc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8021bde:	b111      	cbz	r1, 8021be6 <_reclaim_reent+0x6e>
 8021be0:	4620      	mov	r0, r4
 8021be2:	f000 f8d3 	bl	8021d8c <_free_r>
 8021be6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8021be8:	b111      	cbz	r1, 8021bf0 <_reclaim_reent+0x78>
 8021bea:	4620      	mov	r0, r4
 8021bec:	f000 f8ce 	bl	8021d8c <_free_r>
 8021bf0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8021bf2:	b111      	cbz	r1, 8021bfa <_reclaim_reent+0x82>
 8021bf4:	4620      	mov	r0, r4
 8021bf6:	f000 f8c9 	bl	8021d8c <_free_r>
 8021bfa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8021bfc:	b111      	cbz	r1, 8021c04 <_reclaim_reent+0x8c>
 8021bfe:	4620      	mov	r0, r4
 8021c00:	f000 f8c4 	bl	8021d8c <_free_r>
 8021c04:	6a23      	ldr	r3, [r4, #32]
 8021c06:	b14b      	cbz	r3, 8021c1c <_reclaim_reent+0xa4>
 8021c08:	4620      	mov	r0, r4
 8021c0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021c0e:	4718      	bx	r3
 8021c10:	680e      	ldr	r6, [r1, #0]
 8021c12:	4620      	mov	r0, r4
 8021c14:	f000 f8ba 	bl	8021d8c <_free_r>
 8021c18:	4631      	mov	r1, r6
 8021c1a:	e7bb      	b.n	8021b94 <_reclaim_reent+0x1c>
 8021c1c:	bd70      	pop	{r4, r5, r6, pc}
 8021c1e:	bf00      	nop
 8021c20:	240013a0 	.word	0x240013a0

08021c24 <_lseek_r>:
 8021c24:	b538      	push	{r3, r4, r5, lr}
 8021c26:	4d07      	ldr	r5, [pc, #28]	@ (8021c44 <_lseek_r+0x20>)
 8021c28:	4604      	mov	r4, r0
 8021c2a:	4608      	mov	r0, r1
 8021c2c:	4611      	mov	r1, r2
 8021c2e:	2200      	movs	r2, #0
 8021c30:	602a      	str	r2, [r5, #0]
 8021c32:	461a      	mov	r2, r3
 8021c34:	f7e0 fc0b 	bl	800244e <_lseek>
 8021c38:	1c43      	adds	r3, r0, #1
 8021c3a:	d102      	bne.n	8021c42 <_lseek_r+0x1e>
 8021c3c:	682b      	ldr	r3, [r5, #0]
 8021c3e:	b103      	cbz	r3, 8021c42 <_lseek_r+0x1e>
 8021c40:	6023      	str	r3, [r4, #0]
 8021c42:	bd38      	pop	{r3, r4, r5, pc}
 8021c44:	24069788 	.word	0x24069788

08021c48 <_read_r>:
 8021c48:	b538      	push	{r3, r4, r5, lr}
 8021c4a:	4d07      	ldr	r5, [pc, #28]	@ (8021c68 <_read_r+0x20>)
 8021c4c:	4604      	mov	r4, r0
 8021c4e:	4608      	mov	r0, r1
 8021c50:	4611      	mov	r1, r2
 8021c52:	2200      	movs	r2, #0
 8021c54:	602a      	str	r2, [r5, #0]
 8021c56:	461a      	mov	r2, r3
 8021c58:	f7e0 fb99 	bl	800238e <_read>
 8021c5c:	1c43      	adds	r3, r0, #1
 8021c5e:	d102      	bne.n	8021c66 <_read_r+0x1e>
 8021c60:	682b      	ldr	r3, [r5, #0]
 8021c62:	b103      	cbz	r3, 8021c66 <_read_r+0x1e>
 8021c64:	6023      	str	r3, [r4, #0]
 8021c66:	bd38      	pop	{r3, r4, r5, pc}
 8021c68:	24069788 	.word	0x24069788

08021c6c <_sbrk_r>:
 8021c6c:	b538      	push	{r3, r4, r5, lr}
 8021c6e:	4d06      	ldr	r5, [pc, #24]	@ (8021c88 <_sbrk_r+0x1c>)
 8021c70:	2300      	movs	r3, #0
 8021c72:	4604      	mov	r4, r0
 8021c74:	4608      	mov	r0, r1
 8021c76:	602b      	str	r3, [r5, #0]
 8021c78:	f7e0 fbf6 	bl	8002468 <_sbrk>
 8021c7c:	1c43      	adds	r3, r0, #1
 8021c7e:	d102      	bne.n	8021c86 <_sbrk_r+0x1a>
 8021c80:	682b      	ldr	r3, [r5, #0]
 8021c82:	b103      	cbz	r3, 8021c86 <_sbrk_r+0x1a>
 8021c84:	6023      	str	r3, [r4, #0]
 8021c86:	bd38      	pop	{r3, r4, r5, pc}
 8021c88:	24069788 	.word	0x24069788

08021c8c <_write_r>:
 8021c8c:	b538      	push	{r3, r4, r5, lr}
 8021c8e:	4d07      	ldr	r5, [pc, #28]	@ (8021cac <_write_r+0x20>)
 8021c90:	4604      	mov	r4, r0
 8021c92:	4608      	mov	r0, r1
 8021c94:	4611      	mov	r1, r2
 8021c96:	2200      	movs	r2, #0
 8021c98:	602a      	str	r2, [r5, #0]
 8021c9a:	461a      	mov	r2, r3
 8021c9c:	f7e0 fb94 	bl	80023c8 <_write>
 8021ca0:	1c43      	adds	r3, r0, #1
 8021ca2:	d102      	bne.n	8021caa <_write_r+0x1e>
 8021ca4:	682b      	ldr	r3, [r5, #0]
 8021ca6:	b103      	cbz	r3, 8021caa <_write_r+0x1e>
 8021ca8:	6023      	str	r3, [r4, #0]
 8021caa:	bd38      	pop	{r3, r4, r5, pc}
 8021cac:	24069788 	.word	0x24069788

08021cb0 <__errno>:
 8021cb0:	4b01      	ldr	r3, [pc, #4]	@ (8021cb8 <__errno+0x8>)
 8021cb2:	6818      	ldr	r0, [r3, #0]
 8021cb4:	4770      	bx	lr
 8021cb6:	bf00      	nop
 8021cb8:	240013a0 	.word	0x240013a0

08021cbc <__libc_init_array>:
 8021cbc:	b570      	push	{r4, r5, r6, lr}
 8021cbe:	4d0d      	ldr	r5, [pc, #52]	@ (8021cf4 <__libc_init_array+0x38>)
 8021cc0:	4c0d      	ldr	r4, [pc, #52]	@ (8021cf8 <__libc_init_array+0x3c>)
 8021cc2:	1b64      	subs	r4, r4, r5
 8021cc4:	10a4      	asrs	r4, r4, #2
 8021cc6:	2600      	movs	r6, #0
 8021cc8:	42a6      	cmp	r6, r4
 8021cca:	d109      	bne.n	8021ce0 <__libc_init_array+0x24>
 8021ccc:	4d0b      	ldr	r5, [pc, #44]	@ (8021cfc <__libc_init_array+0x40>)
 8021cce:	4c0c      	ldr	r4, [pc, #48]	@ (8021d00 <__libc_init_array+0x44>)
 8021cd0:	f000 fe62 	bl	8022998 <_init>
 8021cd4:	1b64      	subs	r4, r4, r5
 8021cd6:	10a4      	asrs	r4, r4, #2
 8021cd8:	2600      	movs	r6, #0
 8021cda:	42a6      	cmp	r6, r4
 8021cdc:	d105      	bne.n	8021cea <__libc_init_array+0x2e>
 8021cde:	bd70      	pop	{r4, r5, r6, pc}
 8021ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8021ce4:	4798      	blx	r3
 8021ce6:	3601      	adds	r6, #1
 8021ce8:	e7ee      	b.n	8021cc8 <__libc_init_array+0xc>
 8021cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8021cee:	4798      	blx	r3
 8021cf0:	3601      	adds	r6, #1
 8021cf2:	e7f2      	b.n	8021cda <__libc_init_array+0x1e>
 8021cf4:	080252d8 	.word	0x080252d8
 8021cf8:	080252d8 	.word	0x080252d8
 8021cfc:	080252d8 	.word	0x080252d8
 8021d00:	08025318 	.word	0x08025318

08021d04 <__retarget_lock_init_recursive>:
 8021d04:	4770      	bx	lr

08021d06 <__retarget_lock_acquire_recursive>:
 8021d06:	4770      	bx	lr

08021d08 <__retarget_lock_release_recursive>:
 8021d08:	4770      	bx	lr

08021d0a <strcpy>:
 8021d0a:	4603      	mov	r3, r0
 8021d0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021d10:	f803 2b01 	strb.w	r2, [r3], #1
 8021d14:	2a00      	cmp	r2, #0
 8021d16:	d1f9      	bne.n	8021d0c <strcpy+0x2>
 8021d18:	4770      	bx	lr

08021d1a <memcpy>:
 8021d1a:	440a      	add	r2, r1
 8021d1c:	4291      	cmp	r1, r2
 8021d1e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8021d22:	d100      	bne.n	8021d26 <memcpy+0xc>
 8021d24:	4770      	bx	lr
 8021d26:	b510      	push	{r4, lr}
 8021d28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021d2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021d30:	4291      	cmp	r1, r2
 8021d32:	d1f9      	bne.n	8021d28 <memcpy+0xe>
 8021d34:	bd10      	pop	{r4, pc}
	...

08021d38 <__assert_func>:
 8021d38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021d3a:	4614      	mov	r4, r2
 8021d3c:	461a      	mov	r2, r3
 8021d3e:	4b09      	ldr	r3, [pc, #36]	@ (8021d64 <__assert_func+0x2c>)
 8021d40:	681b      	ldr	r3, [r3, #0]
 8021d42:	4605      	mov	r5, r0
 8021d44:	68d8      	ldr	r0, [r3, #12]
 8021d46:	b954      	cbnz	r4, 8021d5e <__assert_func+0x26>
 8021d48:	4b07      	ldr	r3, [pc, #28]	@ (8021d68 <__assert_func+0x30>)
 8021d4a:	461c      	mov	r4, r3
 8021d4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021d50:	9100      	str	r1, [sp, #0]
 8021d52:	462b      	mov	r3, r5
 8021d54:	4905      	ldr	r1, [pc, #20]	@ (8021d6c <__assert_func+0x34>)
 8021d56:	f000 fbfd 	bl	8022554 <fiprintf>
 8021d5a:	f000 fc91 	bl	8022680 <abort>
 8021d5e:	4b04      	ldr	r3, [pc, #16]	@ (8021d70 <__assert_func+0x38>)
 8021d60:	e7f4      	b.n	8021d4c <__assert_func+0x14>
 8021d62:	bf00      	nop
 8021d64:	240013a0 	.word	0x240013a0
 8021d68:	08025299 	.word	0x08025299
 8021d6c:	0802526b 	.word	0x0802526b
 8021d70:	0802525e 	.word	0x0802525e

08021d74 <__env_lock>:
 8021d74:	4801      	ldr	r0, [pc, #4]	@ (8021d7c <__env_lock+0x8>)
 8021d76:	f7ff bfc6 	b.w	8021d06 <__retarget_lock_acquire_recursive>
 8021d7a:	bf00      	nop
 8021d7c:	2406978c 	.word	0x2406978c

08021d80 <__env_unlock>:
 8021d80:	4801      	ldr	r0, [pc, #4]	@ (8021d88 <__env_unlock+0x8>)
 8021d82:	f7ff bfc1 	b.w	8021d08 <__retarget_lock_release_recursive>
 8021d86:	bf00      	nop
 8021d88:	2406978c 	.word	0x2406978c

08021d8c <_free_r>:
 8021d8c:	b538      	push	{r3, r4, r5, lr}
 8021d8e:	4605      	mov	r5, r0
 8021d90:	2900      	cmp	r1, #0
 8021d92:	d041      	beq.n	8021e18 <_free_r+0x8c>
 8021d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021d98:	1f0c      	subs	r4, r1, #4
 8021d9a:	2b00      	cmp	r3, #0
 8021d9c:	bfb8      	it	lt
 8021d9e:	18e4      	addlt	r4, r4, r3
 8021da0:	f7ff faec 	bl	802137c <__malloc_lock>
 8021da4:	4a1d      	ldr	r2, [pc, #116]	@ (8021e1c <_free_r+0x90>)
 8021da6:	6813      	ldr	r3, [r2, #0]
 8021da8:	b933      	cbnz	r3, 8021db8 <_free_r+0x2c>
 8021daa:	6063      	str	r3, [r4, #4]
 8021dac:	6014      	str	r4, [r2, #0]
 8021dae:	4628      	mov	r0, r5
 8021db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021db4:	f7ff bae8 	b.w	8021388 <__malloc_unlock>
 8021db8:	42a3      	cmp	r3, r4
 8021dba:	d908      	bls.n	8021dce <_free_r+0x42>
 8021dbc:	6820      	ldr	r0, [r4, #0]
 8021dbe:	1821      	adds	r1, r4, r0
 8021dc0:	428b      	cmp	r3, r1
 8021dc2:	bf01      	itttt	eq
 8021dc4:	6819      	ldreq	r1, [r3, #0]
 8021dc6:	685b      	ldreq	r3, [r3, #4]
 8021dc8:	1809      	addeq	r1, r1, r0
 8021dca:	6021      	streq	r1, [r4, #0]
 8021dcc:	e7ed      	b.n	8021daa <_free_r+0x1e>
 8021dce:	461a      	mov	r2, r3
 8021dd0:	685b      	ldr	r3, [r3, #4]
 8021dd2:	b10b      	cbz	r3, 8021dd8 <_free_r+0x4c>
 8021dd4:	42a3      	cmp	r3, r4
 8021dd6:	d9fa      	bls.n	8021dce <_free_r+0x42>
 8021dd8:	6811      	ldr	r1, [r2, #0]
 8021dda:	1850      	adds	r0, r2, r1
 8021ddc:	42a0      	cmp	r0, r4
 8021dde:	d10b      	bne.n	8021df8 <_free_r+0x6c>
 8021de0:	6820      	ldr	r0, [r4, #0]
 8021de2:	4401      	add	r1, r0
 8021de4:	1850      	adds	r0, r2, r1
 8021de6:	4283      	cmp	r3, r0
 8021de8:	6011      	str	r1, [r2, #0]
 8021dea:	d1e0      	bne.n	8021dae <_free_r+0x22>
 8021dec:	6818      	ldr	r0, [r3, #0]
 8021dee:	685b      	ldr	r3, [r3, #4]
 8021df0:	6053      	str	r3, [r2, #4]
 8021df2:	4408      	add	r0, r1
 8021df4:	6010      	str	r0, [r2, #0]
 8021df6:	e7da      	b.n	8021dae <_free_r+0x22>
 8021df8:	d902      	bls.n	8021e00 <_free_r+0x74>
 8021dfa:	230c      	movs	r3, #12
 8021dfc:	602b      	str	r3, [r5, #0]
 8021dfe:	e7d6      	b.n	8021dae <_free_r+0x22>
 8021e00:	6820      	ldr	r0, [r4, #0]
 8021e02:	1821      	adds	r1, r4, r0
 8021e04:	428b      	cmp	r3, r1
 8021e06:	bf04      	itt	eq
 8021e08:	6819      	ldreq	r1, [r3, #0]
 8021e0a:	685b      	ldreq	r3, [r3, #4]
 8021e0c:	6063      	str	r3, [r4, #4]
 8021e0e:	bf04      	itt	eq
 8021e10:	1809      	addeq	r1, r1, r0
 8021e12:	6021      	streq	r1, [r4, #0]
 8021e14:	6054      	str	r4, [r2, #4]
 8021e16:	e7ca      	b.n	8021dae <_free_r+0x22>
 8021e18:	bd38      	pop	{r3, r4, r5, pc}
 8021e1a:	bf00      	nop
 8021e1c:	24069648 	.word	0x24069648

08021e20 <_malloc_usable_size_r>:
 8021e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021e24:	1f18      	subs	r0, r3, #4
 8021e26:	2b00      	cmp	r3, #0
 8021e28:	bfbc      	itt	lt
 8021e2a:	580b      	ldrlt	r3, [r1, r0]
 8021e2c:	18c0      	addlt	r0, r0, r3
 8021e2e:	4770      	bx	lr

08021e30 <__ssputs_r>:
 8021e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021e34:	688e      	ldr	r6, [r1, #8]
 8021e36:	461f      	mov	r7, r3
 8021e38:	42be      	cmp	r6, r7
 8021e3a:	680b      	ldr	r3, [r1, #0]
 8021e3c:	4682      	mov	sl, r0
 8021e3e:	460c      	mov	r4, r1
 8021e40:	4690      	mov	r8, r2
 8021e42:	d82d      	bhi.n	8021ea0 <__ssputs_r+0x70>
 8021e44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8021e48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8021e4c:	d026      	beq.n	8021e9c <__ssputs_r+0x6c>
 8021e4e:	6965      	ldr	r5, [r4, #20]
 8021e50:	6909      	ldr	r1, [r1, #16]
 8021e52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021e56:	eba3 0901 	sub.w	r9, r3, r1
 8021e5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8021e5e:	1c7b      	adds	r3, r7, #1
 8021e60:	444b      	add	r3, r9
 8021e62:	106d      	asrs	r5, r5, #1
 8021e64:	429d      	cmp	r5, r3
 8021e66:	bf38      	it	cc
 8021e68:	461d      	movcc	r5, r3
 8021e6a:	0553      	lsls	r3, r2, #21
 8021e6c:	d527      	bpl.n	8021ebe <__ssputs_r+0x8e>
 8021e6e:	4629      	mov	r1, r5
 8021e70:	f7ff fa04 	bl	802127c <_malloc_r>
 8021e74:	4606      	mov	r6, r0
 8021e76:	b360      	cbz	r0, 8021ed2 <__ssputs_r+0xa2>
 8021e78:	6921      	ldr	r1, [r4, #16]
 8021e7a:	464a      	mov	r2, r9
 8021e7c:	f7ff ff4d 	bl	8021d1a <memcpy>
 8021e80:	89a3      	ldrh	r3, [r4, #12]
 8021e82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8021e86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021e8a:	81a3      	strh	r3, [r4, #12]
 8021e8c:	6126      	str	r6, [r4, #16]
 8021e8e:	6165      	str	r5, [r4, #20]
 8021e90:	444e      	add	r6, r9
 8021e92:	eba5 0509 	sub.w	r5, r5, r9
 8021e96:	6026      	str	r6, [r4, #0]
 8021e98:	60a5      	str	r5, [r4, #8]
 8021e9a:	463e      	mov	r6, r7
 8021e9c:	42be      	cmp	r6, r7
 8021e9e:	d900      	bls.n	8021ea2 <__ssputs_r+0x72>
 8021ea0:	463e      	mov	r6, r7
 8021ea2:	6820      	ldr	r0, [r4, #0]
 8021ea4:	4632      	mov	r2, r6
 8021ea6:	4641      	mov	r1, r8
 8021ea8:	f7ff fdfe 	bl	8021aa8 <memmove>
 8021eac:	68a3      	ldr	r3, [r4, #8]
 8021eae:	1b9b      	subs	r3, r3, r6
 8021eb0:	60a3      	str	r3, [r4, #8]
 8021eb2:	6823      	ldr	r3, [r4, #0]
 8021eb4:	4433      	add	r3, r6
 8021eb6:	6023      	str	r3, [r4, #0]
 8021eb8:	2000      	movs	r0, #0
 8021eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021ebe:	462a      	mov	r2, r5
 8021ec0:	f7ff fadc 	bl	802147c <_realloc_r>
 8021ec4:	4606      	mov	r6, r0
 8021ec6:	2800      	cmp	r0, #0
 8021ec8:	d1e0      	bne.n	8021e8c <__ssputs_r+0x5c>
 8021eca:	6921      	ldr	r1, [r4, #16]
 8021ecc:	4650      	mov	r0, sl
 8021ece:	f7ff ff5d 	bl	8021d8c <_free_r>
 8021ed2:	230c      	movs	r3, #12
 8021ed4:	f8ca 3000 	str.w	r3, [sl]
 8021ed8:	89a3      	ldrh	r3, [r4, #12]
 8021eda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021ede:	81a3      	strh	r3, [r4, #12]
 8021ee0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021ee4:	e7e9      	b.n	8021eba <__ssputs_r+0x8a>
	...

08021ee8 <_svfiprintf_r>:
 8021ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021eec:	4698      	mov	r8, r3
 8021eee:	898b      	ldrh	r3, [r1, #12]
 8021ef0:	061b      	lsls	r3, r3, #24
 8021ef2:	b09d      	sub	sp, #116	@ 0x74
 8021ef4:	4607      	mov	r7, r0
 8021ef6:	460d      	mov	r5, r1
 8021ef8:	4614      	mov	r4, r2
 8021efa:	d510      	bpl.n	8021f1e <_svfiprintf_r+0x36>
 8021efc:	690b      	ldr	r3, [r1, #16]
 8021efe:	b973      	cbnz	r3, 8021f1e <_svfiprintf_r+0x36>
 8021f00:	2140      	movs	r1, #64	@ 0x40
 8021f02:	f7ff f9bb 	bl	802127c <_malloc_r>
 8021f06:	6028      	str	r0, [r5, #0]
 8021f08:	6128      	str	r0, [r5, #16]
 8021f0a:	b930      	cbnz	r0, 8021f1a <_svfiprintf_r+0x32>
 8021f0c:	230c      	movs	r3, #12
 8021f0e:	603b      	str	r3, [r7, #0]
 8021f10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021f14:	b01d      	add	sp, #116	@ 0x74
 8021f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f1a:	2340      	movs	r3, #64	@ 0x40
 8021f1c:	616b      	str	r3, [r5, #20]
 8021f1e:	2300      	movs	r3, #0
 8021f20:	9309      	str	r3, [sp, #36]	@ 0x24
 8021f22:	2320      	movs	r3, #32
 8021f24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8021f28:	f8cd 800c 	str.w	r8, [sp, #12]
 8021f2c:	2330      	movs	r3, #48	@ 0x30
 8021f2e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80220cc <_svfiprintf_r+0x1e4>
 8021f32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8021f36:	f04f 0901 	mov.w	r9, #1
 8021f3a:	4623      	mov	r3, r4
 8021f3c:	469a      	mov	sl, r3
 8021f3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021f42:	b10a      	cbz	r2, 8021f48 <_svfiprintf_r+0x60>
 8021f44:	2a25      	cmp	r2, #37	@ 0x25
 8021f46:	d1f9      	bne.n	8021f3c <_svfiprintf_r+0x54>
 8021f48:	ebba 0b04 	subs.w	fp, sl, r4
 8021f4c:	d00b      	beq.n	8021f66 <_svfiprintf_r+0x7e>
 8021f4e:	465b      	mov	r3, fp
 8021f50:	4622      	mov	r2, r4
 8021f52:	4629      	mov	r1, r5
 8021f54:	4638      	mov	r0, r7
 8021f56:	f7ff ff6b 	bl	8021e30 <__ssputs_r>
 8021f5a:	3001      	adds	r0, #1
 8021f5c:	f000 80a7 	beq.w	80220ae <_svfiprintf_r+0x1c6>
 8021f60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021f62:	445a      	add	r2, fp
 8021f64:	9209      	str	r2, [sp, #36]	@ 0x24
 8021f66:	f89a 3000 	ldrb.w	r3, [sl]
 8021f6a:	2b00      	cmp	r3, #0
 8021f6c:	f000 809f 	beq.w	80220ae <_svfiprintf_r+0x1c6>
 8021f70:	2300      	movs	r3, #0
 8021f72:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8021f76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021f7a:	f10a 0a01 	add.w	sl, sl, #1
 8021f7e:	9304      	str	r3, [sp, #16]
 8021f80:	9307      	str	r3, [sp, #28]
 8021f82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021f86:	931a      	str	r3, [sp, #104]	@ 0x68
 8021f88:	4654      	mov	r4, sl
 8021f8a:	2205      	movs	r2, #5
 8021f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021f90:	484e      	ldr	r0, [pc, #312]	@ (80220cc <_svfiprintf_r+0x1e4>)
 8021f92:	f7de f9bd 	bl	8000310 <memchr>
 8021f96:	9a04      	ldr	r2, [sp, #16]
 8021f98:	b9d8      	cbnz	r0, 8021fd2 <_svfiprintf_r+0xea>
 8021f9a:	06d0      	lsls	r0, r2, #27
 8021f9c:	bf44      	itt	mi
 8021f9e:	2320      	movmi	r3, #32
 8021fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021fa4:	0711      	lsls	r1, r2, #28
 8021fa6:	bf44      	itt	mi
 8021fa8:	232b      	movmi	r3, #43	@ 0x2b
 8021faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021fae:	f89a 3000 	ldrb.w	r3, [sl]
 8021fb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8021fb4:	d015      	beq.n	8021fe2 <_svfiprintf_r+0xfa>
 8021fb6:	9a07      	ldr	r2, [sp, #28]
 8021fb8:	4654      	mov	r4, sl
 8021fba:	2000      	movs	r0, #0
 8021fbc:	f04f 0c0a 	mov.w	ip, #10
 8021fc0:	4621      	mov	r1, r4
 8021fc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021fc6:	3b30      	subs	r3, #48	@ 0x30
 8021fc8:	2b09      	cmp	r3, #9
 8021fca:	d94b      	bls.n	8022064 <_svfiprintf_r+0x17c>
 8021fcc:	b1b0      	cbz	r0, 8021ffc <_svfiprintf_r+0x114>
 8021fce:	9207      	str	r2, [sp, #28]
 8021fd0:	e014      	b.n	8021ffc <_svfiprintf_r+0x114>
 8021fd2:	eba0 0308 	sub.w	r3, r0, r8
 8021fd6:	fa09 f303 	lsl.w	r3, r9, r3
 8021fda:	4313      	orrs	r3, r2
 8021fdc:	9304      	str	r3, [sp, #16]
 8021fde:	46a2      	mov	sl, r4
 8021fe0:	e7d2      	b.n	8021f88 <_svfiprintf_r+0xa0>
 8021fe2:	9b03      	ldr	r3, [sp, #12]
 8021fe4:	1d19      	adds	r1, r3, #4
 8021fe6:	681b      	ldr	r3, [r3, #0]
 8021fe8:	9103      	str	r1, [sp, #12]
 8021fea:	2b00      	cmp	r3, #0
 8021fec:	bfbb      	ittet	lt
 8021fee:	425b      	neglt	r3, r3
 8021ff0:	f042 0202 	orrlt.w	r2, r2, #2
 8021ff4:	9307      	strge	r3, [sp, #28]
 8021ff6:	9307      	strlt	r3, [sp, #28]
 8021ff8:	bfb8      	it	lt
 8021ffa:	9204      	strlt	r2, [sp, #16]
 8021ffc:	7823      	ldrb	r3, [r4, #0]
 8021ffe:	2b2e      	cmp	r3, #46	@ 0x2e
 8022000:	d10a      	bne.n	8022018 <_svfiprintf_r+0x130>
 8022002:	7863      	ldrb	r3, [r4, #1]
 8022004:	2b2a      	cmp	r3, #42	@ 0x2a
 8022006:	d132      	bne.n	802206e <_svfiprintf_r+0x186>
 8022008:	9b03      	ldr	r3, [sp, #12]
 802200a:	1d1a      	adds	r2, r3, #4
 802200c:	681b      	ldr	r3, [r3, #0]
 802200e:	9203      	str	r2, [sp, #12]
 8022010:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8022014:	3402      	adds	r4, #2
 8022016:	9305      	str	r3, [sp, #20]
 8022018:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80220dc <_svfiprintf_r+0x1f4>
 802201c:	7821      	ldrb	r1, [r4, #0]
 802201e:	2203      	movs	r2, #3
 8022020:	4650      	mov	r0, sl
 8022022:	f7de f975 	bl	8000310 <memchr>
 8022026:	b138      	cbz	r0, 8022038 <_svfiprintf_r+0x150>
 8022028:	9b04      	ldr	r3, [sp, #16]
 802202a:	eba0 000a 	sub.w	r0, r0, sl
 802202e:	2240      	movs	r2, #64	@ 0x40
 8022030:	4082      	lsls	r2, r0
 8022032:	4313      	orrs	r3, r2
 8022034:	3401      	adds	r4, #1
 8022036:	9304      	str	r3, [sp, #16]
 8022038:	f814 1b01 	ldrb.w	r1, [r4], #1
 802203c:	4824      	ldr	r0, [pc, #144]	@ (80220d0 <_svfiprintf_r+0x1e8>)
 802203e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8022042:	2206      	movs	r2, #6
 8022044:	f7de f964 	bl	8000310 <memchr>
 8022048:	2800      	cmp	r0, #0
 802204a:	d036      	beq.n	80220ba <_svfiprintf_r+0x1d2>
 802204c:	4b21      	ldr	r3, [pc, #132]	@ (80220d4 <_svfiprintf_r+0x1ec>)
 802204e:	bb1b      	cbnz	r3, 8022098 <_svfiprintf_r+0x1b0>
 8022050:	9b03      	ldr	r3, [sp, #12]
 8022052:	3307      	adds	r3, #7
 8022054:	f023 0307 	bic.w	r3, r3, #7
 8022058:	3308      	adds	r3, #8
 802205a:	9303      	str	r3, [sp, #12]
 802205c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802205e:	4433      	add	r3, r6
 8022060:	9309      	str	r3, [sp, #36]	@ 0x24
 8022062:	e76a      	b.n	8021f3a <_svfiprintf_r+0x52>
 8022064:	fb0c 3202 	mla	r2, ip, r2, r3
 8022068:	460c      	mov	r4, r1
 802206a:	2001      	movs	r0, #1
 802206c:	e7a8      	b.n	8021fc0 <_svfiprintf_r+0xd8>
 802206e:	2300      	movs	r3, #0
 8022070:	3401      	adds	r4, #1
 8022072:	9305      	str	r3, [sp, #20]
 8022074:	4619      	mov	r1, r3
 8022076:	f04f 0c0a 	mov.w	ip, #10
 802207a:	4620      	mov	r0, r4
 802207c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022080:	3a30      	subs	r2, #48	@ 0x30
 8022082:	2a09      	cmp	r2, #9
 8022084:	d903      	bls.n	802208e <_svfiprintf_r+0x1a6>
 8022086:	2b00      	cmp	r3, #0
 8022088:	d0c6      	beq.n	8022018 <_svfiprintf_r+0x130>
 802208a:	9105      	str	r1, [sp, #20]
 802208c:	e7c4      	b.n	8022018 <_svfiprintf_r+0x130>
 802208e:	fb0c 2101 	mla	r1, ip, r1, r2
 8022092:	4604      	mov	r4, r0
 8022094:	2301      	movs	r3, #1
 8022096:	e7f0      	b.n	802207a <_svfiprintf_r+0x192>
 8022098:	ab03      	add	r3, sp, #12
 802209a:	9300      	str	r3, [sp, #0]
 802209c:	462a      	mov	r2, r5
 802209e:	4b0e      	ldr	r3, [pc, #56]	@ (80220d8 <_svfiprintf_r+0x1f0>)
 80220a0:	a904      	add	r1, sp, #16
 80220a2:	4638      	mov	r0, r7
 80220a4:	f3af 8000 	nop.w
 80220a8:	1c42      	adds	r2, r0, #1
 80220aa:	4606      	mov	r6, r0
 80220ac:	d1d6      	bne.n	802205c <_svfiprintf_r+0x174>
 80220ae:	89ab      	ldrh	r3, [r5, #12]
 80220b0:	065b      	lsls	r3, r3, #25
 80220b2:	f53f af2d 	bmi.w	8021f10 <_svfiprintf_r+0x28>
 80220b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80220b8:	e72c      	b.n	8021f14 <_svfiprintf_r+0x2c>
 80220ba:	ab03      	add	r3, sp, #12
 80220bc:	9300      	str	r3, [sp, #0]
 80220be:	462a      	mov	r2, r5
 80220c0:	4b05      	ldr	r3, [pc, #20]	@ (80220d8 <_svfiprintf_r+0x1f0>)
 80220c2:	a904      	add	r1, sp, #16
 80220c4:	4638      	mov	r0, r7
 80220c6:	f000 f879 	bl	80221bc <_printf_i>
 80220ca:	e7ed      	b.n	80220a8 <_svfiprintf_r+0x1c0>
 80220cc:	0802529a 	.word	0x0802529a
 80220d0:	080252a4 	.word	0x080252a4
 80220d4:	00000000 	.word	0x00000000
 80220d8:	08021e31 	.word	0x08021e31
 80220dc:	080252a0 	.word	0x080252a0

080220e0 <_printf_common>:
 80220e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80220e4:	4616      	mov	r6, r2
 80220e6:	4698      	mov	r8, r3
 80220e8:	688a      	ldr	r2, [r1, #8]
 80220ea:	690b      	ldr	r3, [r1, #16]
 80220ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80220f0:	4293      	cmp	r3, r2
 80220f2:	bfb8      	it	lt
 80220f4:	4613      	movlt	r3, r2
 80220f6:	6033      	str	r3, [r6, #0]
 80220f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80220fc:	4607      	mov	r7, r0
 80220fe:	460c      	mov	r4, r1
 8022100:	b10a      	cbz	r2, 8022106 <_printf_common+0x26>
 8022102:	3301      	adds	r3, #1
 8022104:	6033      	str	r3, [r6, #0]
 8022106:	6823      	ldr	r3, [r4, #0]
 8022108:	0699      	lsls	r1, r3, #26
 802210a:	bf42      	ittt	mi
 802210c:	6833      	ldrmi	r3, [r6, #0]
 802210e:	3302      	addmi	r3, #2
 8022110:	6033      	strmi	r3, [r6, #0]
 8022112:	6825      	ldr	r5, [r4, #0]
 8022114:	f015 0506 	ands.w	r5, r5, #6
 8022118:	d106      	bne.n	8022128 <_printf_common+0x48>
 802211a:	f104 0a19 	add.w	sl, r4, #25
 802211e:	68e3      	ldr	r3, [r4, #12]
 8022120:	6832      	ldr	r2, [r6, #0]
 8022122:	1a9b      	subs	r3, r3, r2
 8022124:	42ab      	cmp	r3, r5
 8022126:	dc26      	bgt.n	8022176 <_printf_common+0x96>
 8022128:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802212c:	6822      	ldr	r2, [r4, #0]
 802212e:	3b00      	subs	r3, #0
 8022130:	bf18      	it	ne
 8022132:	2301      	movne	r3, #1
 8022134:	0692      	lsls	r2, r2, #26
 8022136:	d42b      	bmi.n	8022190 <_printf_common+0xb0>
 8022138:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802213c:	4641      	mov	r1, r8
 802213e:	4638      	mov	r0, r7
 8022140:	47c8      	blx	r9
 8022142:	3001      	adds	r0, #1
 8022144:	d01e      	beq.n	8022184 <_printf_common+0xa4>
 8022146:	6823      	ldr	r3, [r4, #0]
 8022148:	6922      	ldr	r2, [r4, #16]
 802214a:	f003 0306 	and.w	r3, r3, #6
 802214e:	2b04      	cmp	r3, #4
 8022150:	bf02      	ittt	eq
 8022152:	68e5      	ldreq	r5, [r4, #12]
 8022154:	6833      	ldreq	r3, [r6, #0]
 8022156:	1aed      	subeq	r5, r5, r3
 8022158:	68a3      	ldr	r3, [r4, #8]
 802215a:	bf0c      	ite	eq
 802215c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022160:	2500      	movne	r5, #0
 8022162:	4293      	cmp	r3, r2
 8022164:	bfc4      	itt	gt
 8022166:	1a9b      	subgt	r3, r3, r2
 8022168:	18ed      	addgt	r5, r5, r3
 802216a:	2600      	movs	r6, #0
 802216c:	341a      	adds	r4, #26
 802216e:	42b5      	cmp	r5, r6
 8022170:	d11a      	bne.n	80221a8 <_printf_common+0xc8>
 8022172:	2000      	movs	r0, #0
 8022174:	e008      	b.n	8022188 <_printf_common+0xa8>
 8022176:	2301      	movs	r3, #1
 8022178:	4652      	mov	r2, sl
 802217a:	4641      	mov	r1, r8
 802217c:	4638      	mov	r0, r7
 802217e:	47c8      	blx	r9
 8022180:	3001      	adds	r0, #1
 8022182:	d103      	bne.n	802218c <_printf_common+0xac>
 8022184:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802218c:	3501      	adds	r5, #1
 802218e:	e7c6      	b.n	802211e <_printf_common+0x3e>
 8022190:	18e1      	adds	r1, r4, r3
 8022192:	1c5a      	adds	r2, r3, #1
 8022194:	2030      	movs	r0, #48	@ 0x30
 8022196:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802219a:	4422      	add	r2, r4
 802219c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80221a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80221a4:	3302      	adds	r3, #2
 80221a6:	e7c7      	b.n	8022138 <_printf_common+0x58>
 80221a8:	2301      	movs	r3, #1
 80221aa:	4622      	mov	r2, r4
 80221ac:	4641      	mov	r1, r8
 80221ae:	4638      	mov	r0, r7
 80221b0:	47c8      	blx	r9
 80221b2:	3001      	adds	r0, #1
 80221b4:	d0e6      	beq.n	8022184 <_printf_common+0xa4>
 80221b6:	3601      	adds	r6, #1
 80221b8:	e7d9      	b.n	802216e <_printf_common+0x8e>
	...

080221bc <_printf_i>:
 80221bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80221c0:	7e0f      	ldrb	r7, [r1, #24]
 80221c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80221c4:	2f78      	cmp	r7, #120	@ 0x78
 80221c6:	4691      	mov	r9, r2
 80221c8:	4680      	mov	r8, r0
 80221ca:	460c      	mov	r4, r1
 80221cc:	469a      	mov	sl, r3
 80221ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80221d2:	d807      	bhi.n	80221e4 <_printf_i+0x28>
 80221d4:	2f62      	cmp	r7, #98	@ 0x62
 80221d6:	d80a      	bhi.n	80221ee <_printf_i+0x32>
 80221d8:	2f00      	cmp	r7, #0
 80221da:	f000 80d2 	beq.w	8022382 <_printf_i+0x1c6>
 80221de:	2f58      	cmp	r7, #88	@ 0x58
 80221e0:	f000 80b9 	beq.w	8022356 <_printf_i+0x19a>
 80221e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80221e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80221ec:	e03a      	b.n	8022264 <_printf_i+0xa8>
 80221ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80221f2:	2b15      	cmp	r3, #21
 80221f4:	d8f6      	bhi.n	80221e4 <_printf_i+0x28>
 80221f6:	a101      	add	r1, pc, #4	@ (adr r1, 80221fc <_printf_i+0x40>)
 80221f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80221fc:	08022255 	.word	0x08022255
 8022200:	08022269 	.word	0x08022269
 8022204:	080221e5 	.word	0x080221e5
 8022208:	080221e5 	.word	0x080221e5
 802220c:	080221e5 	.word	0x080221e5
 8022210:	080221e5 	.word	0x080221e5
 8022214:	08022269 	.word	0x08022269
 8022218:	080221e5 	.word	0x080221e5
 802221c:	080221e5 	.word	0x080221e5
 8022220:	080221e5 	.word	0x080221e5
 8022224:	080221e5 	.word	0x080221e5
 8022228:	08022369 	.word	0x08022369
 802222c:	08022293 	.word	0x08022293
 8022230:	08022323 	.word	0x08022323
 8022234:	080221e5 	.word	0x080221e5
 8022238:	080221e5 	.word	0x080221e5
 802223c:	0802238b 	.word	0x0802238b
 8022240:	080221e5 	.word	0x080221e5
 8022244:	08022293 	.word	0x08022293
 8022248:	080221e5 	.word	0x080221e5
 802224c:	080221e5 	.word	0x080221e5
 8022250:	0802232b 	.word	0x0802232b
 8022254:	6833      	ldr	r3, [r6, #0]
 8022256:	1d1a      	adds	r2, r3, #4
 8022258:	681b      	ldr	r3, [r3, #0]
 802225a:	6032      	str	r2, [r6, #0]
 802225c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022260:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8022264:	2301      	movs	r3, #1
 8022266:	e09d      	b.n	80223a4 <_printf_i+0x1e8>
 8022268:	6833      	ldr	r3, [r6, #0]
 802226a:	6820      	ldr	r0, [r4, #0]
 802226c:	1d19      	adds	r1, r3, #4
 802226e:	6031      	str	r1, [r6, #0]
 8022270:	0606      	lsls	r6, r0, #24
 8022272:	d501      	bpl.n	8022278 <_printf_i+0xbc>
 8022274:	681d      	ldr	r5, [r3, #0]
 8022276:	e003      	b.n	8022280 <_printf_i+0xc4>
 8022278:	0645      	lsls	r5, r0, #25
 802227a:	d5fb      	bpl.n	8022274 <_printf_i+0xb8>
 802227c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8022280:	2d00      	cmp	r5, #0
 8022282:	da03      	bge.n	802228c <_printf_i+0xd0>
 8022284:	232d      	movs	r3, #45	@ 0x2d
 8022286:	426d      	negs	r5, r5
 8022288:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802228c:	4859      	ldr	r0, [pc, #356]	@ (80223f4 <_printf_i+0x238>)
 802228e:	230a      	movs	r3, #10
 8022290:	e011      	b.n	80222b6 <_printf_i+0xfa>
 8022292:	6821      	ldr	r1, [r4, #0]
 8022294:	6833      	ldr	r3, [r6, #0]
 8022296:	0608      	lsls	r0, r1, #24
 8022298:	f853 5b04 	ldr.w	r5, [r3], #4
 802229c:	d402      	bmi.n	80222a4 <_printf_i+0xe8>
 802229e:	0649      	lsls	r1, r1, #25
 80222a0:	bf48      	it	mi
 80222a2:	b2ad      	uxthmi	r5, r5
 80222a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80222a6:	4853      	ldr	r0, [pc, #332]	@ (80223f4 <_printf_i+0x238>)
 80222a8:	6033      	str	r3, [r6, #0]
 80222aa:	bf14      	ite	ne
 80222ac:	230a      	movne	r3, #10
 80222ae:	2308      	moveq	r3, #8
 80222b0:	2100      	movs	r1, #0
 80222b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80222b6:	6866      	ldr	r6, [r4, #4]
 80222b8:	60a6      	str	r6, [r4, #8]
 80222ba:	2e00      	cmp	r6, #0
 80222bc:	bfa2      	ittt	ge
 80222be:	6821      	ldrge	r1, [r4, #0]
 80222c0:	f021 0104 	bicge.w	r1, r1, #4
 80222c4:	6021      	strge	r1, [r4, #0]
 80222c6:	b90d      	cbnz	r5, 80222cc <_printf_i+0x110>
 80222c8:	2e00      	cmp	r6, #0
 80222ca:	d04b      	beq.n	8022364 <_printf_i+0x1a8>
 80222cc:	4616      	mov	r6, r2
 80222ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80222d2:	fb03 5711 	mls	r7, r3, r1, r5
 80222d6:	5dc7      	ldrb	r7, [r0, r7]
 80222d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80222dc:	462f      	mov	r7, r5
 80222de:	42bb      	cmp	r3, r7
 80222e0:	460d      	mov	r5, r1
 80222e2:	d9f4      	bls.n	80222ce <_printf_i+0x112>
 80222e4:	2b08      	cmp	r3, #8
 80222e6:	d10b      	bne.n	8022300 <_printf_i+0x144>
 80222e8:	6823      	ldr	r3, [r4, #0]
 80222ea:	07df      	lsls	r7, r3, #31
 80222ec:	d508      	bpl.n	8022300 <_printf_i+0x144>
 80222ee:	6923      	ldr	r3, [r4, #16]
 80222f0:	6861      	ldr	r1, [r4, #4]
 80222f2:	4299      	cmp	r1, r3
 80222f4:	bfde      	ittt	le
 80222f6:	2330      	movle	r3, #48	@ 0x30
 80222f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80222fc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8022300:	1b92      	subs	r2, r2, r6
 8022302:	6122      	str	r2, [r4, #16]
 8022304:	f8cd a000 	str.w	sl, [sp]
 8022308:	464b      	mov	r3, r9
 802230a:	aa03      	add	r2, sp, #12
 802230c:	4621      	mov	r1, r4
 802230e:	4640      	mov	r0, r8
 8022310:	f7ff fee6 	bl	80220e0 <_printf_common>
 8022314:	3001      	adds	r0, #1
 8022316:	d14a      	bne.n	80223ae <_printf_i+0x1f2>
 8022318:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802231c:	b004      	add	sp, #16
 802231e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022322:	6823      	ldr	r3, [r4, #0]
 8022324:	f043 0320 	orr.w	r3, r3, #32
 8022328:	6023      	str	r3, [r4, #0]
 802232a:	4833      	ldr	r0, [pc, #204]	@ (80223f8 <_printf_i+0x23c>)
 802232c:	2778      	movs	r7, #120	@ 0x78
 802232e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8022332:	6823      	ldr	r3, [r4, #0]
 8022334:	6831      	ldr	r1, [r6, #0]
 8022336:	061f      	lsls	r7, r3, #24
 8022338:	f851 5b04 	ldr.w	r5, [r1], #4
 802233c:	d402      	bmi.n	8022344 <_printf_i+0x188>
 802233e:	065f      	lsls	r7, r3, #25
 8022340:	bf48      	it	mi
 8022342:	b2ad      	uxthmi	r5, r5
 8022344:	6031      	str	r1, [r6, #0]
 8022346:	07d9      	lsls	r1, r3, #31
 8022348:	bf44      	itt	mi
 802234a:	f043 0320 	orrmi.w	r3, r3, #32
 802234e:	6023      	strmi	r3, [r4, #0]
 8022350:	b11d      	cbz	r5, 802235a <_printf_i+0x19e>
 8022352:	2310      	movs	r3, #16
 8022354:	e7ac      	b.n	80222b0 <_printf_i+0xf4>
 8022356:	4827      	ldr	r0, [pc, #156]	@ (80223f4 <_printf_i+0x238>)
 8022358:	e7e9      	b.n	802232e <_printf_i+0x172>
 802235a:	6823      	ldr	r3, [r4, #0]
 802235c:	f023 0320 	bic.w	r3, r3, #32
 8022360:	6023      	str	r3, [r4, #0]
 8022362:	e7f6      	b.n	8022352 <_printf_i+0x196>
 8022364:	4616      	mov	r6, r2
 8022366:	e7bd      	b.n	80222e4 <_printf_i+0x128>
 8022368:	6833      	ldr	r3, [r6, #0]
 802236a:	6825      	ldr	r5, [r4, #0]
 802236c:	6961      	ldr	r1, [r4, #20]
 802236e:	1d18      	adds	r0, r3, #4
 8022370:	6030      	str	r0, [r6, #0]
 8022372:	062e      	lsls	r6, r5, #24
 8022374:	681b      	ldr	r3, [r3, #0]
 8022376:	d501      	bpl.n	802237c <_printf_i+0x1c0>
 8022378:	6019      	str	r1, [r3, #0]
 802237a:	e002      	b.n	8022382 <_printf_i+0x1c6>
 802237c:	0668      	lsls	r0, r5, #25
 802237e:	d5fb      	bpl.n	8022378 <_printf_i+0x1bc>
 8022380:	8019      	strh	r1, [r3, #0]
 8022382:	2300      	movs	r3, #0
 8022384:	6123      	str	r3, [r4, #16]
 8022386:	4616      	mov	r6, r2
 8022388:	e7bc      	b.n	8022304 <_printf_i+0x148>
 802238a:	6833      	ldr	r3, [r6, #0]
 802238c:	1d1a      	adds	r2, r3, #4
 802238e:	6032      	str	r2, [r6, #0]
 8022390:	681e      	ldr	r6, [r3, #0]
 8022392:	6862      	ldr	r2, [r4, #4]
 8022394:	2100      	movs	r1, #0
 8022396:	4630      	mov	r0, r6
 8022398:	f7dd ffba 	bl	8000310 <memchr>
 802239c:	b108      	cbz	r0, 80223a2 <_printf_i+0x1e6>
 802239e:	1b80      	subs	r0, r0, r6
 80223a0:	6060      	str	r0, [r4, #4]
 80223a2:	6863      	ldr	r3, [r4, #4]
 80223a4:	6123      	str	r3, [r4, #16]
 80223a6:	2300      	movs	r3, #0
 80223a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80223ac:	e7aa      	b.n	8022304 <_printf_i+0x148>
 80223ae:	6923      	ldr	r3, [r4, #16]
 80223b0:	4632      	mov	r2, r6
 80223b2:	4649      	mov	r1, r9
 80223b4:	4640      	mov	r0, r8
 80223b6:	47d0      	blx	sl
 80223b8:	3001      	adds	r0, #1
 80223ba:	d0ad      	beq.n	8022318 <_printf_i+0x15c>
 80223bc:	6823      	ldr	r3, [r4, #0]
 80223be:	079b      	lsls	r3, r3, #30
 80223c0:	d413      	bmi.n	80223ea <_printf_i+0x22e>
 80223c2:	68e0      	ldr	r0, [r4, #12]
 80223c4:	9b03      	ldr	r3, [sp, #12]
 80223c6:	4298      	cmp	r0, r3
 80223c8:	bfb8      	it	lt
 80223ca:	4618      	movlt	r0, r3
 80223cc:	e7a6      	b.n	802231c <_printf_i+0x160>
 80223ce:	2301      	movs	r3, #1
 80223d0:	4632      	mov	r2, r6
 80223d2:	4649      	mov	r1, r9
 80223d4:	4640      	mov	r0, r8
 80223d6:	47d0      	blx	sl
 80223d8:	3001      	adds	r0, #1
 80223da:	d09d      	beq.n	8022318 <_printf_i+0x15c>
 80223dc:	3501      	adds	r5, #1
 80223de:	68e3      	ldr	r3, [r4, #12]
 80223e0:	9903      	ldr	r1, [sp, #12]
 80223e2:	1a5b      	subs	r3, r3, r1
 80223e4:	42ab      	cmp	r3, r5
 80223e6:	dcf2      	bgt.n	80223ce <_printf_i+0x212>
 80223e8:	e7eb      	b.n	80223c2 <_printf_i+0x206>
 80223ea:	2500      	movs	r5, #0
 80223ec:	f104 0619 	add.w	r6, r4, #25
 80223f0:	e7f5      	b.n	80223de <_printf_i+0x222>
 80223f2:	bf00      	nop
 80223f4:	080252ab 	.word	0x080252ab
 80223f8:	080252bc 	.word	0x080252bc

080223fc <__sflush_r>:
 80223fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8022400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022404:	0716      	lsls	r6, r2, #28
 8022406:	4605      	mov	r5, r0
 8022408:	460c      	mov	r4, r1
 802240a:	d454      	bmi.n	80224b6 <__sflush_r+0xba>
 802240c:	684b      	ldr	r3, [r1, #4]
 802240e:	2b00      	cmp	r3, #0
 8022410:	dc02      	bgt.n	8022418 <__sflush_r+0x1c>
 8022412:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8022414:	2b00      	cmp	r3, #0
 8022416:	dd48      	ble.n	80224aa <__sflush_r+0xae>
 8022418:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802241a:	2e00      	cmp	r6, #0
 802241c:	d045      	beq.n	80224aa <__sflush_r+0xae>
 802241e:	2300      	movs	r3, #0
 8022420:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8022424:	682f      	ldr	r7, [r5, #0]
 8022426:	6a21      	ldr	r1, [r4, #32]
 8022428:	602b      	str	r3, [r5, #0]
 802242a:	d030      	beq.n	802248e <__sflush_r+0x92>
 802242c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802242e:	89a3      	ldrh	r3, [r4, #12]
 8022430:	0759      	lsls	r1, r3, #29
 8022432:	d505      	bpl.n	8022440 <__sflush_r+0x44>
 8022434:	6863      	ldr	r3, [r4, #4]
 8022436:	1ad2      	subs	r2, r2, r3
 8022438:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802243a:	b10b      	cbz	r3, 8022440 <__sflush_r+0x44>
 802243c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802243e:	1ad2      	subs	r2, r2, r3
 8022440:	2300      	movs	r3, #0
 8022442:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022444:	6a21      	ldr	r1, [r4, #32]
 8022446:	4628      	mov	r0, r5
 8022448:	47b0      	blx	r6
 802244a:	1c43      	adds	r3, r0, #1
 802244c:	89a3      	ldrh	r3, [r4, #12]
 802244e:	d106      	bne.n	802245e <__sflush_r+0x62>
 8022450:	6829      	ldr	r1, [r5, #0]
 8022452:	291d      	cmp	r1, #29
 8022454:	d82b      	bhi.n	80224ae <__sflush_r+0xb2>
 8022456:	4a2a      	ldr	r2, [pc, #168]	@ (8022500 <__sflush_r+0x104>)
 8022458:	410a      	asrs	r2, r1
 802245a:	07d6      	lsls	r6, r2, #31
 802245c:	d427      	bmi.n	80224ae <__sflush_r+0xb2>
 802245e:	2200      	movs	r2, #0
 8022460:	6062      	str	r2, [r4, #4]
 8022462:	04d9      	lsls	r1, r3, #19
 8022464:	6922      	ldr	r2, [r4, #16]
 8022466:	6022      	str	r2, [r4, #0]
 8022468:	d504      	bpl.n	8022474 <__sflush_r+0x78>
 802246a:	1c42      	adds	r2, r0, #1
 802246c:	d101      	bne.n	8022472 <__sflush_r+0x76>
 802246e:	682b      	ldr	r3, [r5, #0]
 8022470:	b903      	cbnz	r3, 8022474 <__sflush_r+0x78>
 8022472:	6560      	str	r0, [r4, #84]	@ 0x54
 8022474:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022476:	602f      	str	r7, [r5, #0]
 8022478:	b1b9      	cbz	r1, 80224aa <__sflush_r+0xae>
 802247a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802247e:	4299      	cmp	r1, r3
 8022480:	d002      	beq.n	8022488 <__sflush_r+0x8c>
 8022482:	4628      	mov	r0, r5
 8022484:	f7ff fc82 	bl	8021d8c <_free_r>
 8022488:	2300      	movs	r3, #0
 802248a:	6363      	str	r3, [r4, #52]	@ 0x34
 802248c:	e00d      	b.n	80224aa <__sflush_r+0xae>
 802248e:	2301      	movs	r3, #1
 8022490:	4628      	mov	r0, r5
 8022492:	47b0      	blx	r6
 8022494:	4602      	mov	r2, r0
 8022496:	1c50      	adds	r0, r2, #1
 8022498:	d1c9      	bne.n	802242e <__sflush_r+0x32>
 802249a:	682b      	ldr	r3, [r5, #0]
 802249c:	2b00      	cmp	r3, #0
 802249e:	d0c6      	beq.n	802242e <__sflush_r+0x32>
 80224a0:	2b1d      	cmp	r3, #29
 80224a2:	d001      	beq.n	80224a8 <__sflush_r+0xac>
 80224a4:	2b16      	cmp	r3, #22
 80224a6:	d11e      	bne.n	80224e6 <__sflush_r+0xea>
 80224a8:	602f      	str	r7, [r5, #0]
 80224aa:	2000      	movs	r0, #0
 80224ac:	e022      	b.n	80224f4 <__sflush_r+0xf8>
 80224ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80224b2:	b21b      	sxth	r3, r3
 80224b4:	e01b      	b.n	80224ee <__sflush_r+0xf2>
 80224b6:	690f      	ldr	r7, [r1, #16]
 80224b8:	2f00      	cmp	r7, #0
 80224ba:	d0f6      	beq.n	80224aa <__sflush_r+0xae>
 80224bc:	0793      	lsls	r3, r2, #30
 80224be:	680e      	ldr	r6, [r1, #0]
 80224c0:	bf08      	it	eq
 80224c2:	694b      	ldreq	r3, [r1, #20]
 80224c4:	600f      	str	r7, [r1, #0]
 80224c6:	bf18      	it	ne
 80224c8:	2300      	movne	r3, #0
 80224ca:	eba6 0807 	sub.w	r8, r6, r7
 80224ce:	608b      	str	r3, [r1, #8]
 80224d0:	f1b8 0f00 	cmp.w	r8, #0
 80224d4:	dde9      	ble.n	80224aa <__sflush_r+0xae>
 80224d6:	6a21      	ldr	r1, [r4, #32]
 80224d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80224da:	4643      	mov	r3, r8
 80224dc:	463a      	mov	r2, r7
 80224de:	4628      	mov	r0, r5
 80224e0:	47b0      	blx	r6
 80224e2:	2800      	cmp	r0, #0
 80224e4:	dc08      	bgt.n	80224f8 <__sflush_r+0xfc>
 80224e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80224ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80224ee:	81a3      	strh	r3, [r4, #12]
 80224f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80224f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80224f8:	4407      	add	r7, r0
 80224fa:	eba8 0800 	sub.w	r8, r8, r0
 80224fe:	e7e7      	b.n	80224d0 <__sflush_r+0xd4>
 8022500:	dfbffffe 	.word	0xdfbffffe

08022504 <_fflush_r>:
 8022504:	b538      	push	{r3, r4, r5, lr}
 8022506:	690b      	ldr	r3, [r1, #16]
 8022508:	4605      	mov	r5, r0
 802250a:	460c      	mov	r4, r1
 802250c:	b913      	cbnz	r3, 8022514 <_fflush_r+0x10>
 802250e:	2500      	movs	r5, #0
 8022510:	4628      	mov	r0, r5
 8022512:	bd38      	pop	{r3, r4, r5, pc}
 8022514:	b118      	cbz	r0, 802251e <_fflush_r+0x1a>
 8022516:	6a03      	ldr	r3, [r0, #32]
 8022518:	b90b      	cbnz	r3, 802251e <_fflush_r+0x1a>
 802251a:	f7ff f8e1 	bl	80216e0 <__sinit>
 802251e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022522:	2b00      	cmp	r3, #0
 8022524:	d0f3      	beq.n	802250e <_fflush_r+0xa>
 8022526:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8022528:	07d0      	lsls	r0, r2, #31
 802252a:	d404      	bmi.n	8022536 <_fflush_r+0x32>
 802252c:	0599      	lsls	r1, r3, #22
 802252e:	d402      	bmi.n	8022536 <_fflush_r+0x32>
 8022530:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022532:	f7ff fbe8 	bl	8021d06 <__retarget_lock_acquire_recursive>
 8022536:	4628      	mov	r0, r5
 8022538:	4621      	mov	r1, r4
 802253a:	f7ff ff5f 	bl	80223fc <__sflush_r>
 802253e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022540:	07da      	lsls	r2, r3, #31
 8022542:	4605      	mov	r5, r0
 8022544:	d4e4      	bmi.n	8022510 <_fflush_r+0xc>
 8022546:	89a3      	ldrh	r3, [r4, #12]
 8022548:	059b      	lsls	r3, r3, #22
 802254a:	d4e1      	bmi.n	8022510 <_fflush_r+0xc>
 802254c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802254e:	f7ff fbdb 	bl	8021d08 <__retarget_lock_release_recursive>
 8022552:	e7dd      	b.n	8022510 <_fflush_r+0xc>

08022554 <fiprintf>:
 8022554:	b40e      	push	{r1, r2, r3}
 8022556:	b503      	push	{r0, r1, lr}
 8022558:	4601      	mov	r1, r0
 802255a:	ab03      	add	r3, sp, #12
 802255c:	4805      	ldr	r0, [pc, #20]	@ (8022574 <fiprintf+0x20>)
 802255e:	f853 2b04 	ldr.w	r2, [r3], #4
 8022562:	6800      	ldr	r0, [r0, #0]
 8022564:	9301      	str	r3, [sp, #4]
 8022566:	f000 f8bb 	bl	80226e0 <_vfiprintf_r>
 802256a:	b002      	add	sp, #8
 802256c:	f85d eb04 	ldr.w	lr, [sp], #4
 8022570:	b003      	add	sp, #12
 8022572:	4770      	bx	lr
 8022574:	240013a0 	.word	0x240013a0

08022578 <__swhatbuf_r>:
 8022578:	b570      	push	{r4, r5, r6, lr}
 802257a:	460c      	mov	r4, r1
 802257c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022580:	2900      	cmp	r1, #0
 8022582:	b096      	sub	sp, #88	@ 0x58
 8022584:	4615      	mov	r5, r2
 8022586:	461e      	mov	r6, r3
 8022588:	da0d      	bge.n	80225a6 <__swhatbuf_r+0x2e>
 802258a:	89a3      	ldrh	r3, [r4, #12]
 802258c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8022590:	f04f 0100 	mov.w	r1, #0
 8022594:	bf14      	ite	ne
 8022596:	2340      	movne	r3, #64	@ 0x40
 8022598:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802259c:	2000      	movs	r0, #0
 802259e:	6031      	str	r1, [r6, #0]
 80225a0:	602b      	str	r3, [r5, #0]
 80225a2:	b016      	add	sp, #88	@ 0x58
 80225a4:	bd70      	pop	{r4, r5, r6, pc}
 80225a6:	466a      	mov	r2, sp
 80225a8:	f000 f848 	bl	802263c <_fstat_r>
 80225ac:	2800      	cmp	r0, #0
 80225ae:	dbec      	blt.n	802258a <__swhatbuf_r+0x12>
 80225b0:	9901      	ldr	r1, [sp, #4]
 80225b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80225b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80225ba:	4259      	negs	r1, r3
 80225bc:	4159      	adcs	r1, r3
 80225be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80225c2:	e7eb      	b.n	802259c <__swhatbuf_r+0x24>

080225c4 <__smakebuf_r>:
 80225c4:	898b      	ldrh	r3, [r1, #12]
 80225c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80225c8:	079d      	lsls	r5, r3, #30
 80225ca:	4606      	mov	r6, r0
 80225cc:	460c      	mov	r4, r1
 80225ce:	d507      	bpl.n	80225e0 <__smakebuf_r+0x1c>
 80225d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80225d4:	6023      	str	r3, [r4, #0]
 80225d6:	6123      	str	r3, [r4, #16]
 80225d8:	2301      	movs	r3, #1
 80225da:	6163      	str	r3, [r4, #20]
 80225dc:	b003      	add	sp, #12
 80225de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80225e0:	ab01      	add	r3, sp, #4
 80225e2:	466a      	mov	r2, sp
 80225e4:	f7ff ffc8 	bl	8022578 <__swhatbuf_r>
 80225e8:	9f00      	ldr	r7, [sp, #0]
 80225ea:	4605      	mov	r5, r0
 80225ec:	4639      	mov	r1, r7
 80225ee:	4630      	mov	r0, r6
 80225f0:	f7fe fe44 	bl	802127c <_malloc_r>
 80225f4:	b948      	cbnz	r0, 802260a <__smakebuf_r+0x46>
 80225f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80225fa:	059a      	lsls	r2, r3, #22
 80225fc:	d4ee      	bmi.n	80225dc <__smakebuf_r+0x18>
 80225fe:	f023 0303 	bic.w	r3, r3, #3
 8022602:	f043 0302 	orr.w	r3, r3, #2
 8022606:	81a3      	strh	r3, [r4, #12]
 8022608:	e7e2      	b.n	80225d0 <__smakebuf_r+0xc>
 802260a:	89a3      	ldrh	r3, [r4, #12]
 802260c:	6020      	str	r0, [r4, #0]
 802260e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8022612:	81a3      	strh	r3, [r4, #12]
 8022614:	9b01      	ldr	r3, [sp, #4]
 8022616:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802261a:	b15b      	cbz	r3, 8022634 <__smakebuf_r+0x70>
 802261c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022620:	4630      	mov	r0, r6
 8022622:	f000 f81d 	bl	8022660 <_isatty_r>
 8022626:	b128      	cbz	r0, 8022634 <__smakebuf_r+0x70>
 8022628:	89a3      	ldrh	r3, [r4, #12]
 802262a:	f023 0303 	bic.w	r3, r3, #3
 802262e:	f043 0301 	orr.w	r3, r3, #1
 8022632:	81a3      	strh	r3, [r4, #12]
 8022634:	89a3      	ldrh	r3, [r4, #12]
 8022636:	431d      	orrs	r5, r3
 8022638:	81a5      	strh	r5, [r4, #12]
 802263a:	e7cf      	b.n	80225dc <__smakebuf_r+0x18>

0802263c <_fstat_r>:
 802263c:	b538      	push	{r3, r4, r5, lr}
 802263e:	4d07      	ldr	r5, [pc, #28]	@ (802265c <_fstat_r+0x20>)
 8022640:	2300      	movs	r3, #0
 8022642:	4604      	mov	r4, r0
 8022644:	4608      	mov	r0, r1
 8022646:	4611      	mov	r1, r2
 8022648:	602b      	str	r3, [r5, #0]
 802264a:	f7df fee5 	bl	8002418 <_fstat>
 802264e:	1c43      	adds	r3, r0, #1
 8022650:	d102      	bne.n	8022658 <_fstat_r+0x1c>
 8022652:	682b      	ldr	r3, [r5, #0]
 8022654:	b103      	cbz	r3, 8022658 <_fstat_r+0x1c>
 8022656:	6023      	str	r3, [r4, #0]
 8022658:	bd38      	pop	{r3, r4, r5, pc}
 802265a:	bf00      	nop
 802265c:	24069788 	.word	0x24069788

08022660 <_isatty_r>:
 8022660:	b538      	push	{r3, r4, r5, lr}
 8022662:	4d06      	ldr	r5, [pc, #24]	@ (802267c <_isatty_r+0x1c>)
 8022664:	2300      	movs	r3, #0
 8022666:	4604      	mov	r4, r0
 8022668:	4608      	mov	r0, r1
 802266a:	602b      	str	r3, [r5, #0]
 802266c:	f7df fee4 	bl	8002438 <_isatty>
 8022670:	1c43      	adds	r3, r0, #1
 8022672:	d102      	bne.n	802267a <_isatty_r+0x1a>
 8022674:	682b      	ldr	r3, [r5, #0]
 8022676:	b103      	cbz	r3, 802267a <_isatty_r+0x1a>
 8022678:	6023      	str	r3, [r4, #0]
 802267a:	bd38      	pop	{r3, r4, r5, pc}
 802267c:	24069788 	.word	0x24069788

08022680 <abort>:
 8022680:	b508      	push	{r3, lr}
 8022682:	2006      	movs	r0, #6
 8022684:	f000 f96c 	bl	8022960 <raise>
 8022688:	2001      	movs	r0, #1
 802268a:	f7df fe75 	bl	8002378 <_exit>

0802268e <__sfputc_r>:
 802268e:	6893      	ldr	r3, [r2, #8]
 8022690:	3b01      	subs	r3, #1
 8022692:	2b00      	cmp	r3, #0
 8022694:	b410      	push	{r4}
 8022696:	6093      	str	r3, [r2, #8]
 8022698:	da08      	bge.n	80226ac <__sfputc_r+0x1e>
 802269a:	6994      	ldr	r4, [r2, #24]
 802269c:	42a3      	cmp	r3, r4
 802269e:	db01      	blt.n	80226a4 <__sfputc_r+0x16>
 80226a0:	290a      	cmp	r1, #10
 80226a2:	d103      	bne.n	80226ac <__sfputc_r+0x1e>
 80226a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80226a8:	f7ff b95a 	b.w	8021960 <__swbuf_r>
 80226ac:	6813      	ldr	r3, [r2, #0]
 80226ae:	1c58      	adds	r0, r3, #1
 80226b0:	6010      	str	r0, [r2, #0]
 80226b2:	7019      	strb	r1, [r3, #0]
 80226b4:	4608      	mov	r0, r1
 80226b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80226ba:	4770      	bx	lr

080226bc <__sfputs_r>:
 80226bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80226be:	4606      	mov	r6, r0
 80226c0:	460f      	mov	r7, r1
 80226c2:	4614      	mov	r4, r2
 80226c4:	18d5      	adds	r5, r2, r3
 80226c6:	42ac      	cmp	r4, r5
 80226c8:	d101      	bne.n	80226ce <__sfputs_r+0x12>
 80226ca:	2000      	movs	r0, #0
 80226cc:	e007      	b.n	80226de <__sfputs_r+0x22>
 80226ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80226d2:	463a      	mov	r2, r7
 80226d4:	4630      	mov	r0, r6
 80226d6:	f7ff ffda 	bl	802268e <__sfputc_r>
 80226da:	1c43      	adds	r3, r0, #1
 80226dc:	d1f3      	bne.n	80226c6 <__sfputs_r+0xa>
 80226de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080226e0 <_vfiprintf_r>:
 80226e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226e4:	460d      	mov	r5, r1
 80226e6:	b09d      	sub	sp, #116	@ 0x74
 80226e8:	4614      	mov	r4, r2
 80226ea:	4698      	mov	r8, r3
 80226ec:	4606      	mov	r6, r0
 80226ee:	b118      	cbz	r0, 80226f8 <_vfiprintf_r+0x18>
 80226f0:	6a03      	ldr	r3, [r0, #32]
 80226f2:	b90b      	cbnz	r3, 80226f8 <_vfiprintf_r+0x18>
 80226f4:	f7fe fff4 	bl	80216e0 <__sinit>
 80226f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80226fa:	07d9      	lsls	r1, r3, #31
 80226fc:	d405      	bmi.n	802270a <_vfiprintf_r+0x2a>
 80226fe:	89ab      	ldrh	r3, [r5, #12]
 8022700:	059a      	lsls	r2, r3, #22
 8022702:	d402      	bmi.n	802270a <_vfiprintf_r+0x2a>
 8022704:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022706:	f7ff fafe 	bl	8021d06 <__retarget_lock_acquire_recursive>
 802270a:	89ab      	ldrh	r3, [r5, #12]
 802270c:	071b      	lsls	r3, r3, #28
 802270e:	d501      	bpl.n	8022714 <_vfiprintf_r+0x34>
 8022710:	692b      	ldr	r3, [r5, #16]
 8022712:	b99b      	cbnz	r3, 802273c <_vfiprintf_r+0x5c>
 8022714:	4629      	mov	r1, r5
 8022716:	4630      	mov	r0, r6
 8022718:	f7ff f960 	bl	80219dc <__swsetup_r>
 802271c:	b170      	cbz	r0, 802273c <_vfiprintf_r+0x5c>
 802271e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022720:	07dc      	lsls	r4, r3, #31
 8022722:	d504      	bpl.n	802272e <_vfiprintf_r+0x4e>
 8022724:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022728:	b01d      	add	sp, #116	@ 0x74
 802272a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802272e:	89ab      	ldrh	r3, [r5, #12]
 8022730:	0598      	lsls	r0, r3, #22
 8022732:	d4f7      	bmi.n	8022724 <_vfiprintf_r+0x44>
 8022734:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022736:	f7ff fae7 	bl	8021d08 <__retarget_lock_release_recursive>
 802273a:	e7f3      	b.n	8022724 <_vfiprintf_r+0x44>
 802273c:	2300      	movs	r3, #0
 802273e:	9309      	str	r3, [sp, #36]	@ 0x24
 8022740:	2320      	movs	r3, #32
 8022742:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8022746:	f8cd 800c 	str.w	r8, [sp, #12]
 802274a:	2330      	movs	r3, #48	@ 0x30
 802274c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80228fc <_vfiprintf_r+0x21c>
 8022750:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8022754:	f04f 0901 	mov.w	r9, #1
 8022758:	4623      	mov	r3, r4
 802275a:	469a      	mov	sl, r3
 802275c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022760:	b10a      	cbz	r2, 8022766 <_vfiprintf_r+0x86>
 8022762:	2a25      	cmp	r2, #37	@ 0x25
 8022764:	d1f9      	bne.n	802275a <_vfiprintf_r+0x7a>
 8022766:	ebba 0b04 	subs.w	fp, sl, r4
 802276a:	d00b      	beq.n	8022784 <_vfiprintf_r+0xa4>
 802276c:	465b      	mov	r3, fp
 802276e:	4622      	mov	r2, r4
 8022770:	4629      	mov	r1, r5
 8022772:	4630      	mov	r0, r6
 8022774:	f7ff ffa2 	bl	80226bc <__sfputs_r>
 8022778:	3001      	adds	r0, #1
 802277a:	f000 80a7 	beq.w	80228cc <_vfiprintf_r+0x1ec>
 802277e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022780:	445a      	add	r2, fp
 8022782:	9209      	str	r2, [sp, #36]	@ 0x24
 8022784:	f89a 3000 	ldrb.w	r3, [sl]
 8022788:	2b00      	cmp	r3, #0
 802278a:	f000 809f 	beq.w	80228cc <_vfiprintf_r+0x1ec>
 802278e:	2300      	movs	r3, #0
 8022790:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8022794:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022798:	f10a 0a01 	add.w	sl, sl, #1
 802279c:	9304      	str	r3, [sp, #16]
 802279e:	9307      	str	r3, [sp, #28]
 80227a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80227a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80227a6:	4654      	mov	r4, sl
 80227a8:	2205      	movs	r2, #5
 80227aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80227ae:	4853      	ldr	r0, [pc, #332]	@ (80228fc <_vfiprintf_r+0x21c>)
 80227b0:	f7dd fdae 	bl	8000310 <memchr>
 80227b4:	9a04      	ldr	r2, [sp, #16]
 80227b6:	b9d8      	cbnz	r0, 80227f0 <_vfiprintf_r+0x110>
 80227b8:	06d1      	lsls	r1, r2, #27
 80227ba:	bf44      	itt	mi
 80227bc:	2320      	movmi	r3, #32
 80227be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80227c2:	0713      	lsls	r3, r2, #28
 80227c4:	bf44      	itt	mi
 80227c6:	232b      	movmi	r3, #43	@ 0x2b
 80227c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80227cc:	f89a 3000 	ldrb.w	r3, [sl]
 80227d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80227d2:	d015      	beq.n	8022800 <_vfiprintf_r+0x120>
 80227d4:	9a07      	ldr	r2, [sp, #28]
 80227d6:	4654      	mov	r4, sl
 80227d8:	2000      	movs	r0, #0
 80227da:	f04f 0c0a 	mov.w	ip, #10
 80227de:	4621      	mov	r1, r4
 80227e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80227e4:	3b30      	subs	r3, #48	@ 0x30
 80227e6:	2b09      	cmp	r3, #9
 80227e8:	d94b      	bls.n	8022882 <_vfiprintf_r+0x1a2>
 80227ea:	b1b0      	cbz	r0, 802281a <_vfiprintf_r+0x13a>
 80227ec:	9207      	str	r2, [sp, #28]
 80227ee:	e014      	b.n	802281a <_vfiprintf_r+0x13a>
 80227f0:	eba0 0308 	sub.w	r3, r0, r8
 80227f4:	fa09 f303 	lsl.w	r3, r9, r3
 80227f8:	4313      	orrs	r3, r2
 80227fa:	9304      	str	r3, [sp, #16]
 80227fc:	46a2      	mov	sl, r4
 80227fe:	e7d2      	b.n	80227a6 <_vfiprintf_r+0xc6>
 8022800:	9b03      	ldr	r3, [sp, #12]
 8022802:	1d19      	adds	r1, r3, #4
 8022804:	681b      	ldr	r3, [r3, #0]
 8022806:	9103      	str	r1, [sp, #12]
 8022808:	2b00      	cmp	r3, #0
 802280a:	bfbb      	ittet	lt
 802280c:	425b      	neglt	r3, r3
 802280e:	f042 0202 	orrlt.w	r2, r2, #2
 8022812:	9307      	strge	r3, [sp, #28]
 8022814:	9307      	strlt	r3, [sp, #28]
 8022816:	bfb8      	it	lt
 8022818:	9204      	strlt	r2, [sp, #16]
 802281a:	7823      	ldrb	r3, [r4, #0]
 802281c:	2b2e      	cmp	r3, #46	@ 0x2e
 802281e:	d10a      	bne.n	8022836 <_vfiprintf_r+0x156>
 8022820:	7863      	ldrb	r3, [r4, #1]
 8022822:	2b2a      	cmp	r3, #42	@ 0x2a
 8022824:	d132      	bne.n	802288c <_vfiprintf_r+0x1ac>
 8022826:	9b03      	ldr	r3, [sp, #12]
 8022828:	1d1a      	adds	r2, r3, #4
 802282a:	681b      	ldr	r3, [r3, #0]
 802282c:	9203      	str	r2, [sp, #12]
 802282e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8022832:	3402      	adds	r4, #2
 8022834:	9305      	str	r3, [sp, #20]
 8022836:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802290c <_vfiprintf_r+0x22c>
 802283a:	7821      	ldrb	r1, [r4, #0]
 802283c:	2203      	movs	r2, #3
 802283e:	4650      	mov	r0, sl
 8022840:	f7dd fd66 	bl	8000310 <memchr>
 8022844:	b138      	cbz	r0, 8022856 <_vfiprintf_r+0x176>
 8022846:	9b04      	ldr	r3, [sp, #16]
 8022848:	eba0 000a 	sub.w	r0, r0, sl
 802284c:	2240      	movs	r2, #64	@ 0x40
 802284e:	4082      	lsls	r2, r0
 8022850:	4313      	orrs	r3, r2
 8022852:	3401      	adds	r4, #1
 8022854:	9304      	str	r3, [sp, #16]
 8022856:	f814 1b01 	ldrb.w	r1, [r4], #1
 802285a:	4829      	ldr	r0, [pc, #164]	@ (8022900 <_vfiprintf_r+0x220>)
 802285c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8022860:	2206      	movs	r2, #6
 8022862:	f7dd fd55 	bl	8000310 <memchr>
 8022866:	2800      	cmp	r0, #0
 8022868:	d03f      	beq.n	80228ea <_vfiprintf_r+0x20a>
 802286a:	4b26      	ldr	r3, [pc, #152]	@ (8022904 <_vfiprintf_r+0x224>)
 802286c:	bb1b      	cbnz	r3, 80228b6 <_vfiprintf_r+0x1d6>
 802286e:	9b03      	ldr	r3, [sp, #12]
 8022870:	3307      	adds	r3, #7
 8022872:	f023 0307 	bic.w	r3, r3, #7
 8022876:	3308      	adds	r3, #8
 8022878:	9303      	str	r3, [sp, #12]
 802287a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802287c:	443b      	add	r3, r7
 802287e:	9309      	str	r3, [sp, #36]	@ 0x24
 8022880:	e76a      	b.n	8022758 <_vfiprintf_r+0x78>
 8022882:	fb0c 3202 	mla	r2, ip, r2, r3
 8022886:	460c      	mov	r4, r1
 8022888:	2001      	movs	r0, #1
 802288a:	e7a8      	b.n	80227de <_vfiprintf_r+0xfe>
 802288c:	2300      	movs	r3, #0
 802288e:	3401      	adds	r4, #1
 8022890:	9305      	str	r3, [sp, #20]
 8022892:	4619      	mov	r1, r3
 8022894:	f04f 0c0a 	mov.w	ip, #10
 8022898:	4620      	mov	r0, r4
 802289a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802289e:	3a30      	subs	r2, #48	@ 0x30
 80228a0:	2a09      	cmp	r2, #9
 80228a2:	d903      	bls.n	80228ac <_vfiprintf_r+0x1cc>
 80228a4:	2b00      	cmp	r3, #0
 80228a6:	d0c6      	beq.n	8022836 <_vfiprintf_r+0x156>
 80228a8:	9105      	str	r1, [sp, #20]
 80228aa:	e7c4      	b.n	8022836 <_vfiprintf_r+0x156>
 80228ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80228b0:	4604      	mov	r4, r0
 80228b2:	2301      	movs	r3, #1
 80228b4:	e7f0      	b.n	8022898 <_vfiprintf_r+0x1b8>
 80228b6:	ab03      	add	r3, sp, #12
 80228b8:	9300      	str	r3, [sp, #0]
 80228ba:	462a      	mov	r2, r5
 80228bc:	4b12      	ldr	r3, [pc, #72]	@ (8022908 <_vfiprintf_r+0x228>)
 80228be:	a904      	add	r1, sp, #16
 80228c0:	4630      	mov	r0, r6
 80228c2:	f3af 8000 	nop.w
 80228c6:	4607      	mov	r7, r0
 80228c8:	1c78      	adds	r0, r7, #1
 80228ca:	d1d6      	bne.n	802287a <_vfiprintf_r+0x19a>
 80228cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80228ce:	07d9      	lsls	r1, r3, #31
 80228d0:	d405      	bmi.n	80228de <_vfiprintf_r+0x1fe>
 80228d2:	89ab      	ldrh	r3, [r5, #12]
 80228d4:	059a      	lsls	r2, r3, #22
 80228d6:	d402      	bmi.n	80228de <_vfiprintf_r+0x1fe>
 80228d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80228da:	f7ff fa15 	bl	8021d08 <__retarget_lock_release_recursive>
 80228de:	89ab      	ldrh	r3, [r5, #12]
 80228e0:	065b      	lsls	r3, r3, #25
 80228e2:	f53f af1f 	bmi.w	8022724 <_vfiprintf_r+0x44>
 80228e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80228e8:	e71e      	b.n	8022728 <_vfiprintf_r+0x48>
 80228ea:	ab03      	add	r3, sp, #12
 80228ec:	9300      	str	r3, [sp, #0]
 80228ee:	462a      	mov	r2, r5
 80228f0:	4b05      	ldr	r3, [pc, #20]	@ (8022908 <_vfiprintf_r+0x228>)
 80228f2:	a904      	add	r1, sp, #16
 80228f4:	4630      	mov	r0, r6
 80228f6:	f7ff fc61 	bl	80221bc <_printf_i>
 80228fa:	e7e4      	b.n	80228c6 <_vfiprintf_r+0x1e6>
 80228fc:	0802529a 	.word	0x0802529a
 8022900:	080252a4 	.word	0x080252a4
 8022904:	00000000 	.word	0x00000000
 8022908:	080226bd 	.word	0x080226bd
 802290c:	080252a0 	.word	0x080252a0

08022910 <_raise_r>:
 8022910:	291f      	cmp	r1, #31
 8022912:	b538      	push	{r3, r4, r5, lr}
 8022914:	4605      	mov	r5, r0
 8022916:	460c      	mov	r4, r1
 8022918:	d904      	bls.n	8022924 <_raise_r+0x14>
 802291a:	2316      	movs	r3, #22
 802291c:	6003      	str	r3, [r0, #0]
 802291e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022922:	bd38      	pop	{r3, r4, r5, pc}
 8022924:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8022926:	b112      	cbz	r2, 802292e <_raise_r+0x1e>
 8022928:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802292c:	b94b      	cbnz	r3, 8022942 <_raise_r+0x32>
 802292e:	4628      	mov	r0, r5
 8022930:	f000 f830 	bl	8022994 <_getpid_r>
 8022934:	4622      	mov	r2, r4
 8022936:	4601      	mov	r1, r0
 8022938:	4628      	mov	r0, r5
 802293a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802293e:	f000 b817 	b.w	8022970 <_kill_r>
 8022942:	2b01      	cmp	r3, #1
 8022944:	d00a      	beq.n	802295c <_raise_r+0x4c>
 8022946:	1c59      	adds	r1, r3, #1
 8022948:	d103      	bne.n	8022952 <_raise_r+0x42>
 802294a:	2316      	movs	r3, #22
 802294c:	6003      	str	r3, [r0, #0]
 802294e:	2001      	movs	r0, #1
 8022950:	e7e7      	b.n	8022922 <_raise_r+0x12>
 8022952:	2100      	movs	r1, #0
 8022954:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8022958:	4620      	mov	r0, r4
 802295a:	4798      	blx	r3
 802295c:	2000      	movs	r0, #0
 802295e:	e7e0      	b.n	8022922 <_raise_r+0x12>

08022960 <raise>:
 8022960:	4b02      	ldr	r3, [pc, #8]	@ (802296c <raise+0xc>)
 8022962:	4601      	mov	r1, r0
 8022964:	6818      	ldr	r0, [r3, #0]
 8022966:	f7ff bfd3 	b.w	8022910 <_raise_r>
 802296a:	bf00      	nop
 802296c:	240013a0 	.word	0x240013a0

08022970 <_kill_r>:
 8022970:	b538      	push	{r3, r4, r5, lr}
 8022972:	4d07      	ldr	r5, [pc, #28]	@ (8022990 <_kill_r+0x20>)
 8022974:	2300      	movs	r3, #0
 8022976:	4604      	mov	r4, r0
 8022978:	4608      	mov	r0, r1
 802297a:	4611      	mov	r1, r2
 802297c:	602b      	str	r3, [r5, #0]
 802297e:	f7df fceb 	bl	8002358 <_kill>
 8022982:	1c43      	adds	r3, r0, #1
 8022984:	d102      	bne.n	802298c <_kill_r+0x1c>
 8022986:	682b      	ldr	r3, [r5, #0]
 8022988:	b103      	cbz	r3, 802298c <_kill_r+0x1c>
 802298a:	6023      	str	r3, [r4, #0]
 802298c:	bd38      	pop	{r3, r4, r5, pc}
 802298e:	bf00      	nop
 8022990:	24069788 	.word	0x24069788

08022994 <_getpid_r>:
 8022994:	f7df bcd8 	b.w	8002348 <_getpid>

08022998 <_init>:
 8022998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802299a:	bf00      	nop
 802299c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802299e:	bc08      	pop	{r3}
 80229a0:	469e      	mov	lr, r3
 80229a2:	4770      	bx	lr

080229a4 <_fini>:
 80229a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80229a6:	bf00      	nop
 80229a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80229aa:	bc08      	pop	{r3}
 80229ac:	469e      	mov	lr, r3
 80229ae:	4770      	bx	lr
